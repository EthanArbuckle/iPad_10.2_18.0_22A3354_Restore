@implementation UICollectionView

- (void)_didMoveFromWindow:(id)a3 toWindow:(id)a4
{
  void *v5;
  objc_super v6;

  v6.receiver = self;
  v6.super_class = (Class)UICollectionView;
  -[UIScrollView _didMoveFromWindow:toWindow:](&v6, sel__didMoveFromWindow_toWindow_, a3, a4);
  +[_UIHDRUsageCoordinator sharedInstance]();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIHDRUsageCoordinator applyConstrainedHDROverrideToView:]((uint64_t)v5, self);

  -[UICollectionView _updateDerivesVisibleBoundsFromContainingScrollView](self, "_updateDerivesVisibleBoundsFromContainingScrollView");
}

+ (BOOL)_supportsInvalidatingFocusCache
{
  return 1;
}

- (int64_t)_globalIndexPathForItemAtIndexPath:(id)a3
{
  return -[UICollectionViewData validatedGlobalIndexForItemAtIndexPath:]((uint64_t)self->_collectionViewData, a3);
}

- (id)_indexPathForGlobalIndex:(int64_t)a3
{
  void *v3;

  if (a3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = 0;
  }
  else
  {
    -[UICollectionViewData validatedIndexPathForItemAtGlobalIndex:](self->_collectionViewData, a3);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

- (BOOL)_hasContentForBarInteractions
{
  UICollectionViewData *collectionViewData;
  objc_super v4;

  collectionViewData = self->_collectionViewData;
  if (collectionViewData && collectionViewData->_totalItemCount > 0)
    return 1;
  v4.receiver = self;
  v4.super_class = (Class)UICollectionView;
  return -[UIScrollView _hasContentForBarInteractions](&v4, sel__hasContentForBarInteractions);
}

- (double)_alignedContentMarginGivenMargin:(double)a3
{
  void *v4;
  double v5;
  double v6;

  -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_alignedContentMarginGivenMargin:", a3);
  v6 = v5;

  return v6;
}

- (BOOL)_isReorderingItemAtIndexPath:(id)a3 includingDragAndDrop:(BOOL)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (v6
    && (a4
     || !-[UICollectionView _hasActiveDrag](self, "_hasActiveDrag")
     && !-[UICollectionView _hasActiveDrop](self, "_hasActiveDrop")))
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    -[UICollectionView _reorderedItems](self, "_reorderedItems", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v15;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v15 != v9)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "expectedCellIndexPath");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "isEqual:", v6);

          if ((v12 & 1) != 0)
          {
            LOBYTE(v8) = 1;
            goto LABEL_16;
          }
        }
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v8)
          continue;
        break;
      }
    }
LABEL_16:

  }
  else
  {
    LOBYTE(v8) = 0;
  }

  return v8;
}

- (NSArray)_reorderedItems
{
  return (NSArray *)-[_UICollectionViewDragAndDropController reorderedItems]((id *)&self->_dragAndDropController->super.super.isa);
}

- (BOOL)hasActiveDrop
{
  _UICollectionViewDragAndDropController *dragAndDropController;

  dragAndDropController = self->_dragAndDropController;
  if (dragAndDropController)
    return -[_UICollectionViewDragDestinationController isActive](&dragAndDropController->_destinationController->super.isa);
  else
    return 0;
}

- (BOOL)hasActiveDrag
{
  _UICollectionViewDragAndDropController *dragAndDropController;

  dragAndDropController = self->_dragAndDropController;
  return dragAndDropController
      && -[_UICollectionViewDragSourceController isActive](&dragAndDropController->_sourceController->super.isa);
}

uint64_t __50__UICollectionView__updateBackgroundColorIfNeeded__block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "setBackgroundColor:", *(_QWORD *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2648) &= ~0x1000000000uLL;
  return result;
}

- (void)setBackgroundColor:(id)a3
{
  objc_super v3;

  *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x1000000000uLL;
  v3.receiver = self;
  v3.super_class = (Class)UICollectionView;
  -[UIView setBackgroundColor:](&v3, sel_setBackgroundColor_, a3);
}

- (void)_layoutMarginsWillChange
{
  unint64_t v3;
  NSObject *v4;
  objc_super v5;
  uint8_t buf[4];
  UICollectionView *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = _layoutMarginsWillChange___s_category;
  if (!_layoutMarginsWillChange___s_category)
  {
    v3 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v3, (unint64_t *)&_layoutMarginsWillChange___s_category);
  }
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v4 = *(NSObject **)(v3 + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v7 = self;
      _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "_layoutMarginsWillChange: cv == %p; Attempting to save anchor for change to layout margins",
        buf,
        0xCu);
    }
  }
  -[UICollectionView _saveContentOffsetRestorationAnchorIfNecessaryUsingModel:]((uint64_t)self, self->_collectionViewData);
  v5.receiver = self;
  v5.super_class = (Class)UICollectionView;
  -[UIView _layoutMarginsWillChange](&v5, sel__layoutMarginsWillChange);
}

uint64_t __49__UICollectionView__invalidateLayoutWithContext___block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "_invalidatePreferredAttributes");
}

- (void)_updateRowsAtIndexPaths:(id)a3 updateAction:(int)a4 updates:(id)a5
{
  uint64_t v6;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  UICollectionViewUpdateItem *v16;
  int v17;
  void *v18;
  id v19;
  _QWORD v20[6];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;

  v6 = *(_QWORD *)&a4;
  v9 = a3;
  v19 = a5;
  v10 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v10 & 0x400000000) == 0)
  {
    if (!(*((_WORD *)&self->_collectionViewFlags + 8) & 2 | (unint64_t)(~(_BYTE)v10 & 4)))
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10123, CFSTR("UICollectionView must be updated via the UICollectionViewDiffableDataSource APIs when acting as the UICollectionView's dataSource: please do not call mutation APIs directly on UICollectionView. %@"), self);

    }
    -[UICollectionView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 0;
    v22 = &v21;
    v23 = 0x2020000000;
    v24 = 0;
    if (objc_msgSend(v19, "count"))
    {
      objc_msgSend(v11, "addObjectsFromArray:", v19);
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __65__UICollectionView__updateRowsAtIndexPaths_updateAction_updates___block_invoke;
      v20[3] = &unk_1E16BAF48;
      v20[4] = self;
      v20[5] = &v21;
      objc_msgSend(v19, "enumerateObjectsUsingBlock:", v20);
    }
    else
    {
      v13 = objc_msgSend(v9, "count");
      if (v13)
      {
        v14 = 0;
        while (1)
        {
          objc_msgSend(v9, "objectAtIndex:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = -[UICollectionViewUpdateItem initWithAction:forIndexPath:]([UICollectionViewUpdateItem alloc], "initWithAction:forIndexPath:", v6, v15);
          if (!-[UICollectionView _addUpdateToShadowControllerIfNeeded:](self, "_addUpdateToShadowControllerIfNeeded:", v16))break;
          objc_msgSend(v11, "addObject:", v16);

          if (v13 == ++v14)
            goto LABEL_6;
        }
        *((_BYTE *)v22 + 24) = 1;

      }
    }
LABEL_6:
    if (*((_BYTE *)v22 + 24))
    {
      v12 = *((_QWORD *)&self->_collectionViewFlags + 1);
      if ((v12 & 0x200000000) != 0)
      {
        v17 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                        + 18) << 16);
        *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
        *((_QWORD *)&self->_collectionViewFlags + 1) = v12 | 0x400000000;
        *((_WORD *)&self->_collectionViewFlags + 8) = v17;
        *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v17);
      }
      else
      {
        -[UICollectionView reloadData](self, "reloadData");
      }
    }
    else
    {
      -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
      if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x200000000) == 0)
      {
        -[UICollectionView _setupCellAnimations](self, "_setupCellAnimations");
        -[UICollectionView _endItemAnimationsWithInvalidationContext:](self, "_endItemAnimationsWithInvalidationContext:", 0);
      }
    }
    _Block_object_dispose(&v21, 8);

  }
}

- (BOOL)_addUpdateToShadowControllerIfNeeded:(id)a3
{
  id v4;
  _BOOL4 v5;
  _UICollectionViewDragAndDropController *dragAndDropController;
  unint64_t v7;
  BOOL v8;
  NSObject *v10;
  _UICollectionViewDragAndDropController *v11;
  uint8_t buf[4];
  UICollectionView *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  _UICollectionViewDragAndDropController *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = -[UICollectionView _isPerformingShadowUpdates](self, "_isPerformingShadowUpdates");
  dragAndDropController = self->_dragAndDropController;
  if (v5)
  {
    -[_UICollectionViewShadowUpdatesController appendShadowUpdate:](dragAndDropController, "appendShadowUpdate:", v4);
LABEL_8:
    v8 = 1;
    goto LABEL_9;
  }
  if (!-[_UICollectionViewDragAndDropController updateWillCauseInternalInconsistency:]((uint64_t)dragAndDropController, v4))goto LABEL_8;
  v7 = _addUpdateToShadowControllerIfNeeded____s_category;
  if (!_addUpdateToShadowControllerIfNeeded____s_category)
  {
    v7 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v7, (unint64_t *)&_addUpdateToShadowControllerIfNeeded____s_category);
  }
  if ((*(_BYTE *)v7 & 1) != 0)
  {
    v10 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = self->_dragAndDropController;
      *(_DWORD *)buf = 134218498;
      v13 = self;
      v14 = 2112;
      v15 = v4;
      v16 = 2112;
      v17 = v11;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "_addUpdateToShadowControllerIfNeeded: cv == %p; unable to add update to shadow updates controller. Update item: "
        "%@; drag and drop controller: %@",
        buf,
        0x20u);
    }
  }
  v8 = 0;
LABEL_9:

  return v8;
}

- (void)_safeAreaInsetsWillChange
{
  unint64_t v3;
  NSObject *v4;
  objc_super v5;
  uint8_t buf[4];
  UICollectionView *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = _safeAreaInsetsWillChange___s_category;
  if (!_safeAreaInsetsWillChange___s_category)
  {
    v3 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v3, (unint64_t *)&_safeAreaInsetsWillChange___s_category);
  }
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v4 = *(NSObject **)(v3 + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v7 = self;
      _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "_safeAreaInsetsWillChange: cv == %p; Attempting to save anchor for change to safe area",
        buf,
        0xCu);
    }
  }
  -[UICollectionView _saveContentOffsetRestorationAnchorIfNecessaryUsingModel:]((uint64_t)self, self->_collectionViewData);
  v5.receiver = self;
  v5.super_class = (Class)UICollectionView;
  -[UIView _safeAreaInsetsWillChange](&v5, sel__safeAreaInsetsWillChange);
}

- (void)_reparentViewIntoCorrectContainer:(id)a3
{
  NSMutableSet *viewsOptedOutOfBeingParentedIntoContainers;

  -[NSMutableSet removeObject:](self->_viewsOptedOutOfBeingParentedIntoContainers, "removeObject:");
  if (!-[NSMutableSet count](self->_viewsOptedOutOfBeingParentedIntoContainers, "count"))
  {
    viewsOptedOutOfBeingParentedIntoContainers = self->_viewsOptedOutOfBeingParentedIntoContainers;
    self->_viewsOptedOutOfBeingParentedIntoContainers = 0;

  }
  -[UICollectionView _addControlledSubview:](self, "_addControlledSubview:", a3);
}

uint64_t __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke_4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v2)
    return objc_msgSend(*(id *)(result + 32), "_updateAnimationDidStop:finished:", v2, a2);
  return result;
}

void __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke_3(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  (*(void (**)(void))(a1[7] + 16))();
  v2 = (_QWORD *)a1[4];
  if ((v2[331] & 0x100) != 0)
  {
    objc_msgSend(v2, "_setupAnimationsForResizedViewsWithOldModel:", a1[5]);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1[6] + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

uint64_t __88__UICollectionView__dequeueReusableViewOfKind_withIdentifier_forIndexPath_viewCategory___block_invoke_2(uint64_t a1)
{
  _BOOL4 v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if ((dyld_program_sdk_at_least() & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 56), "_layoutAttributes");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "zIndex");
    v2 = v4 != objc_msgSend(*(id *)(a1 + 32), "zIndex");

  }
  result = -[UICollectionView _applyLayoutAttributes:toView:addingControlledSubview:](*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 56), v2);
  if (*(_BYTE *)(a1 + 64))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 2896);
    if (v6)
    {
      result = objc_msgSend(*(id *)(v6 + 8), "containsObject:", *(_QWORD *)(a1 + 48));
      if ((_DWORD)result)
        result = objc_msgSend(*(id *)(a1 + 56), "_setSelected:animated:", 1, 0);
    }
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 2896);
    if (v7)
    {
      result = objc_msgSend(*(id *)(v7 + 16), "containsObject:", *(_QWORD *)(a1 + 48));
      if ((_DWORD)result)
        return objc_msgSend(*(id *)(a1 + 56), "_setHighlighted:animated:", 1, 0);
    }
  }
  return result;
}

void __112__UICollectionView__createPreparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_dataSourceProxy");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "collectionView:cellForItemAtIndexPath:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void __125__UICollectionView__createPreparedSupplementaryViewForElementOfKind_atIndexPath_layout_withLayoutAttributes_applyAttributes___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_dataSourceProxy");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "collectionView:viewForSupplementaryElementOfKind:atIndexPath:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void __88__UICollectionView__dequeueReusableViewOfKind_withIdentifier_forIndexPath_viewCategory___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(objc_alloc(*(Class *)(a1 + 40)), "initWithFrame:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

- (void)_reparentViewIntoSelf:(id)a3
{
  NSMutableSet *viewsOptedOutOfBeingParentedIntoContainers;
  NSMutableSet *v6;
  NSMutableSet *v7;

  viewsOptedOutOfBeingParentedIntoContainers = self->_viewsOptedOutOfBeingParentedIntoContainers;
  if (viewsOptedOutOfBeingParentedIntoContainers)
  {
    -[NSMutableSet addObject:](viewsOptedOutOfBeingParentedIntoContainers, "addObject:", a3);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "setWithObject:", a3);
    v6 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
    v7 = self->_viewsOptedOutOfBeingParentedIntoContainers;
    self->_viewsOptedOutOfBeingParentedIntoContainers = v6;

  }
  -[UICollectionView _addControlledSubview:](self, "_addControlledSubview:", a3);
}

- (CGSize)intrinsicContentSize
{
  double v3;
  double v4;
  objc_super v5;
  CGSize result;

  if (-[UICollectionView _canDeriveVisibleBoundsFromContainingScrollView](self, "_canDeriveVisibleBoundsFromContainingScrollView"))
  {
    -[UICollectionViewLayout collectionViewContentSize](self->_layout, "collectionViewContentSize");
  }
  else
  {
    v5.receiver = self;
    v5.super_class = (Class)UICollectionView;
    -[UIView intrinsicContentSize](&v5, sel_intrinsicContentSize);
  }
  result.height = v4;
  result.width = v3;
  return result;
}

- (void)_setContentSizeFromLayout:(CGSize)a3 isRecursivelyUpdatingVisibleCells:(BOOL)a4
{
  _BOOL4 v4;
  double height;
  double width;
  UICollectionView *v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  unsigned int v17;

  v4 = a4;
  height = a3.height;
  width = a3.width;
  if (-[UIScrollView isScrollAnimating](self, "isScrollAnimating")
    || -[UIScrollView isDecelerating](self, "isDecelerating")
    || -[UIScrollView isDragging](self, "isDragging"))
  {
    v8 = self;
    v9 = width;
    v10 = height;
    v11 = 1;
LABEL_5:
    -[UICollectionView _setContentSize:skipContentOffsetAdjustment:](v8, "_setContentSize:skipContentOffsetAdjustment:", v11, v9, v10);
    return;
  }
  if (!v4
    || (-[UIView safeAreaInsets](self, "safeAreaInsets"), v15 == 0.0) && v12 == 0.0 && v14 == 0.0 && v13 == 0.0
    || (v16 = -[UIScrollView _edgesApplyingSafeAreaInsetsToContentInset](self, "_edgesApplyingSafeAreaInsetsToContentInset"), v16 == -[UIScrollView _edgesApplyingSafeAreaInsetsToContentInsetForContentSize:](self, "_edgesApplyingSafeAreaInsetsToContentInsetForContentSize:", width, height)))
  {
    v11 = -[UIScrollView _isAutomaticContentOffsetAdjustmentEnabled](self, "_isAutomaticContentOffsetAdjustmentEnabled") ^ 1;
    v8 = self;
    v9 = width;
    v10 = height;
    goto LABEL_5;
  }
  -[UICollectionView _setContentSize:skipContentOffsetAdjustment:](self, "_setContentSize:skipContentOffsetAdjustment:", 1, width, height);
  v17 = (*((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16)) & 0xFFFBFFFF;
  *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v17);
}

- (unint64_t)_edgesPropagatingSafeAreaInsetsToSubviews
{
  objc_super v4;

  if (-[UICollectionViewLayout _overridesSafeAreaPropagationToDescendants](self->_layout, "_overridesSafeAreaPropagationToDescendants"))
  {
    return -[UICollectionViewLayout _edgesForSafeAreaPropagationToDescendants](self->_layout, "_edgesForSafeAreaPropagationToDescendants");
  }
  v4.receiver = self;
  v4.super_class = (Class)UICollectionView;
  return -[UIScrollView _edgesPropagatingSafeAreaInsetsToSubviews](&v4, sel__edgesPropagatingSafeAreaInsetsToSubviews);
}

- (CGRect)_visibleBounds
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id WeakRetained;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double x;
  double y;
  double width;
  double height;
  double v33;
  double v34;
  double v35;
  double v36;
  id v37;
  void *v38;
  void *v39;
  int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect result;
  CGRect v55;

  -[UIScrollView visibleBounds](self, "visibleBounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  if (-[UICollectionView _canDeriveVisibleBoundsFromContainingScrollView](self, "_canDeriveVisibleBoundsFromContainingScrollView"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_containerScrollView);
    -[UIView frame](self, "frame");
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;
    -[UIView superview](self, "superview");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "convertRect:fromView:", v20, v13, v15, v17, v19);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v28 = v27;

    objc_msgSend(WeakRetained, "visibleBounds");
    v55.origin.x = v22;
    v55.origin.y = v24;
    v55.size.width = v26;
    v55.size.height = v28;
    v50 = CGRectIntersection(v49, v55);
    x = v50.origin.x;
    y = v50.origin.y;
    width = v50.size.width;
    height = v50.size.height;
    if (CGRectIsEmpty(v50))
    {
      v8 = 44.0;
      v10 = 44.0;
    }
    else
    {
      objc_msgSend(WeakRetained, "convertRect:toView:", self, x, y, width, height);
      v4 = v33;
      v6 = v34;
      v8 = v35;
      v10 = v36;
    }

  }
  v37 = -[UIView window](self, "window");
  +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "scrollManager");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend(v39, "isScrollingScrollableContainer:", self);

  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x100000000) != 0
    || +[UIView _isInAnimationBlock](UIView, "_isInAnimationBlock")
    || (objc_msgSend(v37, "isRotating") | v40) == 1)
  {
    v51.origin.x = v4;
    v51.origin.y = v6;
    v51.size.width = v8;
    v51.size.height = v10;
    if (CGRectIntersectsRect(v51, self->_visibleBounds))
    {
      v52.origin.x = v4;
      v52.origin.y = v6;
      v52.size.width = v8;
      v52.size.height = v10;
      v53 = CGRectUnion(v52, self->_visibleBounds);
      v4 = v53.origin.x;
      v6 = v53.origin.y;
      v8 = v53.size.width;
      v10 = v53.size.height;
    }
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)&self->_visibleRectInsets.top), (int32x4_t)vceqzq_f64(*(float64x2_t *)&self->_visibleRectInsets.bottom))))) & 1) != 0)
  {
    -[UICollectionView _effectiveVisibleBoundsForBounds:](self, "_effectiveVisibleBoundsForBounds:", v4, v6, v8, v10);
    v4 = v41;
    v6 = v42;
    v8 = v43;
    v10 = v44;
  }

  v45 = v4;
  v46 = v6;
  v47 = v8;
  v48 = v10;
  result.size.height = v48;
  result.size.width = v47;
  result.origin.y = v46;
  result.origin.x = v45;
  return result;
}

- (BOOL)_shouldDeriveVisibleBoundsFromContainingScrollView
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 46) & 1;
}

- (void)_applyAutomaticAdjustedContentOffset:(CGPoint)a3
{
  double y;
  double x;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  unsigned __int16 *v7;
  int v8;
  int v9;
  unsigned int v10;
  double v11;
  double v12;
  char *v13;
  int v14;
  unsigned int v15;
  objc_super v16;

  y = a3.y;
  x = a3.x;
  p_collectionViewFlags = &self->_collectionViewFlags;
  v7 = (unsigned __int16 *)((char *)&self->_collectionViewFlags + 16);
  v8 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
  *((_BYTE *)&self->_collectionViewFlags + 18) = (v8 | 0x10000u) >> 16;
  v16.receiver = self;
  v16.super_class = (Class)UICollectionView;
  -[UIScrollView _applyAutomaticAdjustedContentOffset:](&v16, sel__applyAutomaticAdjustedContentOffset_);
  v9 = *v7;
  v10 = (v9 | (*((unsigned __int8 *)v7 + 2) << 16)) & 0xFFFEFFFF;
  *v7 = v9;
  *((_BYTE *)v7 + 2) = (v10 | v8 & 0x10000) >> 16;
  -[UIScrollView contentOffset](self, "contentOffset");
  if (vabdd_f64(v12, x) >= 0.0001 || vabdd_f64(v11, y) >= 0.0001)
  {
    v14 = *((unsigned __int16 *)p_collectionViewFlags + 8);
    v13 = (char *)p_collectionViewFlags + 16;
    v15 = (v14 | (v13[2] << 16)) & 0xFFFBFFFF;
    *(_WORD *)v13 = v14;
    v13[2] = BYTE2(v15);
  }
}

- (void)setContentOffset:(CGPoint)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)UICollectionView;
  -[UIScrollView setContentOffset:](&v4, sel_setContentOffset_, a3.x, a3.y);
  -[UICollectionView layoutHorizontalIndexTitleBar](self, "layoutHorizontalIndexTitleBar");
}

- (void)layoutHorizontalIndexTitleBar
{
  void *v3;
  double y;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;

  -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    y = self->_horizontalIndexTitleBarOffset.y;
    v6 = v5 + self->_horizontalIndexTitleBarOffset.x;
    -[UIView bounds](self, "bounds");
    v8 = v7;
    -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setFrame:", v6, y, v8, 54.0);

  }
}

- (_UIHorizontalIndexTitleBar)_horizontalIndexTitleBar
{
  return self->_horizontalIndexTitleBar;
}

uint64_t __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke_5(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 32) + 2656;
  v2 = *(_WORD *)v1 & 0xFF3F | (*(unsigned __int8 *)(*(_QWORD *)(result + 32) + 2658) << 16);
  *(_WORD *)v1 &= 0xFF3Fu;
  *(_BYTE *)(v1 + 2) = BYTE2(v2);
  return result;
}

void __120__UICollectionView__viewAnimationsForCurrentUpdateWithCollectionViewAnimator_updatingContentOffsetForRestorationAnchor___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;

  v4 = a2;
  objc_msgSend(a3, "_layoutAttributes");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setIndexPath:", v4);

}

- (BOOL)_updatePreferredAttributesForItemsInCurrentUpdate:(id)a3 rect:(CGRect)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  id v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;
  CGRect v43;
  CGRect v44;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v42 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
  if (!v10)
  {
    LOBYTE(v12) = 0;
    goto LABEL_34;
  }
  v11 = v10;
  v12 = 0;
  v13 = *(_QWORD *)v38;
  v14 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
  v36 = v9;
  do
  {
    v15 = 0;
    do
    {
      if (*(_QWORD *)v38 != v13)
        objc_enumerationMutation(v9);
      v16 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * v15);
      v17 = v14[872];
      objc_msgSend(*(id *)((char *)&self->super.super.super.super.isa + v17), "layoutAttributesForItemAtIndexPath:", v16, v36);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v18;
      if (v18)
      {
        v20 = *(Class *)((char *)&self->super.super.super.super.isa + v17);
        objc_msgSend(v18, "frame");
        objc_msgSend(v20, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v19);
        v44.origin.x = v21;
        v44.origin.y = v22;
        v44.size.width = v23;
        v44.size.height = v24;
        v43.origin.x = x;
        v43.origin.y = y;
        v43.size.width = width;
        v43.size.height = height;
        if (CGRectIntersectsRect(v43, v44))
        {
          if (dyld_program_sdk_at_least())
          {
            -[UICollectionViewUpdate initialIndexPathForFinalIndexPath:](self->_currentUpdate, "initialIndexPathForFinalIndexPath:", v16);
            v25 = (id)objc_claimAutoreleasedReturnValue();
            if (v25)
            {
              -[_UICollectionViewSubviewManager visibleCellAtIndexPath:]((id **)self->_subviewManager, (uint64_t)v25);
              v26 = objc_claimAutoreleasedReturnValue();
              if (v26)
              {
                v27 = (void *)v26;
                v12 |= -[UICollectionView _updatePreferredAttributesForReusableViewInCurrentUpdate:withOriginalAttributes:isExistingView:](self, "_updatePreferredAttributesForReusableViewInCurrentUpdate:withOriginalAttributes:isExistingView:", v26, v19, 1);

                goto LABEL_17;
              }
            }
            -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", v16);
            v28 = objc_claimAutoreleasedReturnValue();
            v29 = (_QWORD *)v28;
            if (v28)
              v30 = *(void **)(v28 + 24);
            else
              v30 = 0;
            v31 = v30;

            if (v31)
            {
              if (-[UICollectionView _updatePrefetchItemIfNeeded:forIndexPath:withLayoutAttributes:willDisplay:](self, "_updatePrefetchItemIfNeeded:forIndexPath:withLayoutAttributes:willDisplay:", v29, v16, 0, 0))
              {

                v9 = v36;
LABEL_17:
                v14 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
LABEL_26:

                goto LABEL_27;
              }
              -[NSMutableDictionary removeObjectForKey:](self->_prefetchCacheItems, "removeObjectForKey:", v16);
              if (v29)
                v32 = (void *)v29[3];
              else
                v32 = 0;
              v33 = v32;
              -[UICollectionView _reusePrefetchedCell:](self, "_reusePrefetchedCell:", v33);

            }
            v9 = v36;
            v14 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
          }
          v25 = -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](self, "_createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", v16, v19, 1, 0, 0);
          v12 |= -[UICollectionView _updatePreferredAttributesForReusableViewInCurrentUpdate:withOriginalAttributes:isExistingView:](self, "_updatePreferredAttributesForReusableViewInCurrentUpdate:withOriginalAttributes:isExistingView:", v25, v19, 0);
          if ((objc_msgSend(v25, "_isInUpdateAnimation") & 1) == 0)
          {
            if (dyld_program_sdk_at_least())
              -[UICollectionView _cacheOrReuseCell:forIndexPath:invalidatePreferredAttributes:notifyDidEndDisplaying:](self, "_cacheOrReuseCell:forIndexPath:invalidatePreferredAttributes:notifyDidEndDisplaying:", v25, v16, 0, 0);
            else
              -[UICollectionView _reuseCell:notifyDidEndDisplaying:](self, "_reuseCell:notifyDidEndDisplaying:", v25, 0);
          }
          goto LABEL_26;
        }
      }
LABEL_27:

      ++v15;
    }
    while (v11 != v15);
    v34 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    v11 = v34;
  }
  while (v34);
LABEL_34:

  return v12 & 1;
}

- (BOOL)_updatePreferredAttributesForReusableViewInCurrentUpdate:(id)a3 withOriginalAttributes:(id)a4 isExistingView:(BOOL)a5
{
  _BOOL4 v5;
  id v9;
  id v10;
  BOOL v11;
  void *v12;
  UICollectionViewUpdate *currentUpdate;
  void *v14;
  void *v16;
  void *v17;
  void *v18;

  v5 = a5;
  v9 = a3;
  v10 = a4;
  if (dyld_program_sdk_at_least() && (objc_msgSend(v9, "_arePreferredAttributesValid") & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    if (!v9)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 12255, CFSTR("UICollectionView internal inconsistency. Attempting to update preferred attributes for nil view. Collection view: %@; Original attributes: %@"),
        self,
        v10);

    }
    v12 = (void *)objc_msgSend(v10, "copy");
    if (!v12)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 12258, CFSTR("UICollectionView internal inconsistency: missing original layout attributes necessary to update preferred attributes for view: %@"), v9);

    }
    -[UICollectionViewLayout _prepareForPreferredAttributesQueryForView:withLayoutAttributes:](self->_layout, "_prepareForPreferredAttributesQueryForView:withLayoutAttributes:", v9, v12);
    currentUpdate = self->_currentUpdate;
    if (currentUpdate)
      LODWORD(currentUpdate) = (*(_BYTE *)&currentUpdate->_flags >> 1) & 1;
    objc_msgSend(v9, "_preferredLayoutAttributesFittingAttributes:isAnimatingExistingView:", v12, currentUpdate & v5);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 12267, CFSTR("UICollectionView internal inconsistency: reusable view %@ returning nil preferred layout attributes for fitting attributes: %@"), v9, 0);

    }
    -[UICollectionViewLayout _postProcessPreferredAttributes:forView:](self->_layout, "_postProcessPreferredAttributes:forView:", v14, v9);
    -[UICollectionViewLayout shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:](self->_layout, "shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:", v14, v10);

    v11 = 1;
  }

  return v11;
}

- (UICollectionViewUpdate)_currentUpdate
{
  return self->_currentUpdate;
}

- (void)_performDiffableUpdate:(id)a3
{
  id v5;
  void *v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t buf[4];
  UICollectionView *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 4) == 0)
  {
    _UIIsPrivateMainBundle();
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 17112, CFSTR("Attempted to apply updates to a collection view from a UICollectionViewDiffableDataSource, but the collection view's dataSource is not the UICollectionViewDiffableDataSource. Collection view: %@"), self);

    }
    else if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v11 = self;
        _os_log_fault_impl(&dword_185066000, v9, OS_LOG_TYPE_FAULT, "Attempted to apply updates to a collection view from a UICollectionViewDiffableDataSource, but the collection view's dataSource is not the UICollectionViewDiffableDataSource. Collection view: %@  This will become an assert in a future version.", buf, 0xCu);
      }

    }
    else
    {
      v7 = _performDiffableUpdate____s_category;
      if (!_performDiffableUpdate____s_category)
      {
        v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v7, (unint64_t *)&_performDiffableUpdate____s_category);
      }
      v8 = *(NSObject **)(v7 + 8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v11 = self;
        _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Attempted to apply updates to a collection view from a UICollectionViewDiffableDataSource, but the collection view's dataSource is not the UICollectionViewDiffableDataSource. Collection view: %@  This will become an assert in a future version.", buf, 0xCu);
      }
    }
  }
  -[UICollectionView _performInternalBatchUpdates:](self, "_performInternalBatchUpdates:", v5);

}

- (void)_performInternalBatchUpdates:(id)a3
{
  char *v3;
  __int16 v4;
  int v5;

  v3 = (char *)&self->_collectionViewFlags + 16;
  v4 = *((_WORD *)&self->_collectionViewFlags + 8);
  *((_BYTE *)&self->_collectionViewFlags + 18) = *((_BYTE *)&self->_collectionViewFlags + 18);
  *((_WORD *)&self->_collectionViewFlags + 8) = v4 | 2;
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  v5 = *(_WORD *)v3 & 0xFFFD | (v3[2] << 16);
  *(_WORD *)v3 = *(_WORD *)v3 & 0xFFFD | v4 & 2;
  v3[2] = BYTE2(v5);
}

- (void)performBatchUpdates:(void *)updates completion:(void *)completion
{
  -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:](self, "_performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:", updates, completion, 0, 0, 0, 0);
}

- (void)_performBatchUpdates:(id)a3 completion:(id)a4 invalidationContext:(id)a5 tentativelyForReordering:(BOOL)a6 animator:(id)a7 animationHandler:(id)a8
{
  void (**v13)(_QWORD);
  id v14;
  id updateCompletionHandler;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  UIViewPropertyAnimator *v23;
  UIViewPropertyAnimator *reconfigureAnimator;
  _QWORD *v25;
  _BOOL4 v26;
  id v27;
  _QWORD aBlock[4];
  id v29;
  id v30;

  v26 = a6;
  v13 = (void (**)(_QWORD))a3;
  v14 = a4;
  v27 = a7;
  updateCompletionHandler = self->_updateCompletionHandler;
  v16 = a8;
  v17 = a5;
  v18 = _Block_copy(updateCompletionHandler);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __123__UICollectionView__performBatchUpdates_completion_invalidationContext_tentativelyForReordering_animator_animationHandler___block_invoke;
  aBlock[3] = &unk_1E16BC218;
  v19 = v18;
  v29 = v19;
  v20 = v14;
  v30 = v20;
  v21 = _Block_copy(aBlock);
  v22 = self->_updateCompletionHandler;
  self->_updateCompletionHandler = v21;

  if (((*((_QWORD *)&self->_collectionViewFlags + 1) & 4) == 0 || (dyld_program_sdk_at_least() & 1) == 0)
    && !-[UICollectionView _shouldSkipForcedLayoutBeforeBatchUpdates](self, "_shouldSkipForcedLayoutBeforeBatchUpdates"))
  {
    -[UIView layoutBelowIfNeeded](self, "layoutBelowIfNeeded");
  }
  -[UICollectionView _beginUpdates](self, "_beginUpdates");
  if (v13)
  {
    v23 = self->_reconfigureAnimator;
    objc_storeStrong((id *)&self->_reconfigureAnimator, a7);
    v13[2](v13);
    reconfigureAnimator = self->_reconfigureAnimator;
    self->_reconfigureAnimator = v23;

  }
  v25 = -[_UICollectionViewAnimator initWithHandler:]([_UICollectionViewAnimator alloc], v16);

  -[UICollectionView _endUpdatesWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:](self, "_endUpdatesWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:", v17, v26, v27, v25);
}

- (void)_beginUpdates
{
  int64_t updateCount;

  updateCount = self->_updateCount;
  if (!updateCount)
  {
    -[UICollectionView _setupCellAnimations](self, "_setupCellAnimations");
    updateCount = self->_updateCount;
  }
  self->_updateCount = updateCount + 1;
}

- (void)_setupCellAnimations
{
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  UICollectionView *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  p_collectionViewFlags = &self->_collectionViewFlags;
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x800000000) != 0)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        v7 = 138412290;
        v8 = self;
        _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "UICollectionView client error: attempting to perform update while UICollectionView is updating its visible views. This will result in undefined behavior. Collection view: %@", (uint8_t *)&v7, 0xCu);
      }

    }
    else
    {
      v4 = _setupCellAnimations___s_category;
      if (!_setupCellAnimations___s_category)
      {
        v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v4, (unint64_t *)&_setupCellAnimations___s_category);
      }
      v5 = *(NSObject **)(v4 + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v7 = 138412290;
        v8 = self;
        _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "UICollectionView client error: attempting to perform update while UICollectionView is updating its visible views. This will result in undefined behavior. Collection view: %@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
  -[UICollectionViewLayout _collectionViewWillPerformPendingLayoutBeforeUpdate](self->_layout, "_collectionViewWillPerformPendingLayoutBeforeUpdate");
  -[UICollectionView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 0);
  -[UICollectionViewData _prepareToLoadData]((uint64_t)self->_collectionViewData);
  *((_QWORD *)p_collectionViewFlags + 1) |= 0x200000000uLL;
  -[UICollectionView _suspendReloads](self, "_suspendReloads");
}

- (void)_endUpdatesWithInvalidationContext:(id)a3 tentativelyForReordering:(BOOL)a4 animator:(id)a5 collectionViewAnimator:(id)a6
{
  int64_t v6;

  v6 = self->_updateCount - 1;
  self->_updateCount = v6;
  if (!v6)
    -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:](self, "_endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:", a3, a4, a5, a6);
}

- (UICollectionViewUpdateItem)_expectedDiffableUpdateItem
{
  UICollectionViewUpdateItem *expectedDiffableUpdateItem;

  if (dyld_program_sdk_at_least())
    expectedDiffableUpdateItem = self->_expectedDiffableUpdateItem;
  else
    expectedDiffableUpdateItem = 0;
  return expectedDiffableUpdateItem;
}

- (void)_enumerateVisibleViews:(id)a3
{
  id v5;
  _UICollectionViewSubviewManager *subviewManager;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 1485, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("block != NULL"));

  }
  subviewManager = self->_subviewManager;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __43__UICollectionView__enumerateVisibleViews___block_invoke;
  v10[3] = &unk_1E16BCC08;
  v11 = v5;
  v9 = v5;
  v7 = v9;
  if (subviewManager)
  {
    -[_UICollectionViewSubviewCollection enumerateAllViewsWithEnumerator:](&subviewManager->_visibleViews->super.isa, (uint64_t)v10);
    v7 = v11;
  }

}

- (BOOL)_hasCustomBackground
{
  void *v2;
  BOOL v3;

  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x1000000000) != 0)
    return 1;
  -[UICollectionView backgroundView](self, "backgroundView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (BOOL)_shouldSkipForcedLayoutBeforeBatchUpdates
{
  return ((unint64_t)*((unsigned __int16 *)&self->_collectionViewFlags + 8) >> 12) & 1;
}

- (void)reconfigureItemsAtIndexPaths:(NSArray *)indexPaths
{
  NSArray *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void (**v9)(_QWORD);
  UIViewPropertyAnimator *reconfigureAnimator;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[4];
  id v14;
  UICollectionView *v15;

  v5 = indexPaths;
  if (!(*((_WORD *)&self->_collectionViewFlags + 8) & 2 | (unint64_t)(~*((_DWORD *)&self->_collectionViewFlags
                                                                                                + 2) & 4)))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10223, CFSTR("UICollectionView must be updated via the UICollectionViewDiffableDataSource APIs when acting as the UICollectionView's dataSource: please do not call mutation APIs directly on UICollectionView. %@"), self);

  }
  -[UICollectionView _indexPathsAfterShadowUpdatesForIndexPaths:](self, "_indexPathsAfterShadowUpdatesForIndexPaths:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  v7 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v7 & 0x200000000) == 0)
    -[UICollectionView _setupCellAnimations](self, "_setupCellAnimations");
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __49__UICollectionView_reconfigureItemsAtIndexPaths___block_invoke;
  aBlock[3] = &unk_1E16B1B50;
  v8 = v6;
  v14 = v8;
  v15 = self;
  v9 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (!+[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled"))
  {
    v9[2](v9);
    if ((v7 & 0x200000000) != 0)
      goto LABEL_11;
LABEL_10:
    -[UICollectionView _endItemAnimationsWithInvalidationContext:](self, "_endItemAnimationsWithInvalidationContext:", 0);
    goto LABEL_11;
  }
  reconfigureAnimator = self->_reconfigureAnimator;
  if (reconfigureAnimator)
  {
    -[UIViewPropertyAnimator addAnimations:](reconfigureAnimator, "addAnimations:", v9);
    if ((v7 & 0x200000000) != 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least())
    v11 = 6;
  else
    v11 = 4;
  +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", v11, v9, 0, 0.3, 0.0);
  if ((v7 & 0x200000000) == 0)
    goto LABEL_10;
LABEL_11:

}

- (id)_viewControllerToNotifyOnLayoutSubviews
{
  void *v3;
  UICollectionView *v4;
  id v5;
  void *v6;
  objc_super v8;

  -[UIView _viewControllerForAncestor](self, "_viewControllerForAncestor");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend(v3, "collectionView"),
        v4 = (UICollectionView *)objc_claimAutoreleasedReturnValue(),
        v4,
        v4 == self))
  {
    v5 = v3;
  }
  else
  {
    v8.receiver = self;
    v8.super_class = (Class)UICollectionView;
    -[UIView _viewControllerToNotifyOnLayoutSubviews](&v8, sel__viewControllerToNotifyOnLayoutSubviews);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;

  return v6;
}

void __45__UICollectionView__indexPathForView_ofType___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v8;
  id v9;

  v8 = a2;
  if (*(_QWORD *)(a1 + 32) == a3)
  {
    v9 = v8;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    v8 = v9;
    *a4 = 1;
  }

}

- (void)_updateLayoutAttributesForExistingVisibleViewsFadingForBoundsChange:(BOOL)a3
{
  _BOOL8 v3;
  UICollectionView *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  void *v18;
  id v19;
  UICollectionView *v20;
  _BOOL8 v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  void *v30;
  int v31;
  void *v32;
  uint64_t v33;
  UICollectionViewLayout *layout;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  UICollectionView *v43;
  id obj;
  _UICollectionViewSubviewManager *v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  char v49;
  uint64_t v50;
  _QWORD v51[5];
  id v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[5];
  _QWORD v59[5];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];
  _BYTE v65[128];
  uint64_t v66;

  v3 = a3;
  v4 = self;
  v66 = *MEMORY[0x1E0C80C00];
  v48 = -[UICollectionViewLayout _hasOrthogonalScrollingSections](self->_layout, "_hasOrthogonalScrollingSections");
  v45 = v4->_subviewManager;
  -[_UICollectionViewSubviewManager allVisibleViews]((uint64_t *)v45);
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v65, 16);
  if (v47)
  {
    v46 = *(_QWORD *)v61;
    v43 = v4;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v61 != v46)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * v5);
        objc_msgSend(v6, "_layoutAttributes");
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = -[UICollectionViewLayoutAttributes __indexPath]((_QWORD *)v7);
        -[UIBarButtonItemGroup _items]((id *)v7);
        v50 = objc_claimAutoreleasedReturnValue();
        if (v7)
        {
          v9 = *(_WORD *)(v7 + 288);
          v10 = 1;
          if ((v9 & 2) != 0)
            v10 = 2;
          if ((v9 & 1) != 0)
            v11 = 0;
          else
            v11 = v10;
        }
        else
        {
          v11 = 0;
        }
        v12 = objc_msgSend(v8, "section");
        v13 = v12 < -[UICollectionViewData numberOfSections]((uint64_t)v4->_collectionViewData)
           || objc_msgSend(v8, "item") == 0x7FFFFFFFFFFFFFFFLL;
        if (v11 == 2)
        {
          if (!v13)
          {
            if ((objc_msgSend(v6, "_isInUpdateAnimation") & 1) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, v4, CFSTR("UICollectionView.m"), 6112, CFSTR("UICollectionView internal inconsistency: attempting to update attributes for a decoration view with an invalid section index. View: %@; view attributes: %@; collection view: %@; number of sections: %ld"),
                v6,
                v7,
                v4,
                -[UICollectionViewData numberOfSections]((uint64_t)v4->_collectionViewData));
              goto LABEL_27;
            }
LABEL_33:
            v19 = (id)v7;
            v49 = 1;
            goto LABEL_34;
          }
          -[UICollectionViewData layoutAttributesForDecorationViewOfKind:atIndexPath:]((uint64_t)v4->_collectionViewData, v50, v8);
          v14 = objc_claimAutoreleasedReturnValue();
          if (!v14)
          {
            if ((objc_msgSend(v6, "_isInUpdateAnimation") & 1) != 0)
              goto LABEL_33;
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            -[UICollectionViewLayout layoutAttributesForDecorationViewOfKind:atIndexPath:](v4->_layout, "layoutAttributesForDecorationViewOfKind:atIndexPath:", v50, v8);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            -[UICollectionViewData dataSourceCountsDescription](v4->_collectionViewData);
            v17 = v3;
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, v43, CFSTR("UICollectionView.m"), 6108, CFSTR("UICollectionView internal inconsistency: missing final attributes for decoration %@; initial attributes: %@; layout query: %@; collection view: %@; data source counts: %@"),
              v6,
              v7,
              v16,
              v43,
              v18);
LABEL_66:

            v3 = v17;
            v4 = v43;

LABEL_27:
            goto LABEL_33;
          }
        }
        else if (v11 == 1)
        {
          if (!v13)
          {
            if ((objc_msgSend(v6, "_isInUpdateAnimation") & 1) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, v4, CFSTR("UICollectionView.m"), 6101, CFSTR("UICollectionView internal inconsistency: attempting to update attributes for a supplementary view with an invalid section index. View: %@; view attributes: %@; collection view: %@; number of sections: %ld"),
                v6,
                v7,
                v4,
                -[UICollectionViewData numberOfSections]((uint64_t)v4->_collectionViewData));
              goto LABEL_27;
            }
            goto LABEL_33;
          }
          -[UICollectionViewData layoutAttributesForSupplementaryElementOfKind:atIndexPath:]((uint64_t)v4->_collectionViewData, v50, v8);
          v14 = objc_claimAutoreleasedReturnValue();
          if (!v14)
          {
            if ((objc_msgSend(v6, "_isInUpdateAnimation") & 1) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionViewLayout layoutAttributesForSupplementaryViewOfKind:atIndexPath:](v4->_layout, "layoutAttributesForSupplementaryViewOfKind:atIndexPath:", v50, v8);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionViewData dataSourceCountsDescription](v4->_collectionViewData);
              v17 = v3;
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, v43, CFSTR("UICollectionView.m"), 6097, CFSTR("UICollectionView internal inconsistency: missing final attributes for supplementary %@; initial attributes: %@; layout query: %@; collection view: %@;  data source counts: %@"),
                v6,
                v7,
                v16,
                v43,
                v18);
              goto LABEL_66;
            }
            goto LABEL_33;
          }
        }
        else
        {
          -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)v4->_collectionViewData, v8);
          v14 = objc_claimAutoreleasedReturnValue();
          if (!v14)
          {
            if ((objc_msgSend(v6, "_isInUpdateAnimation") & 1) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionViewLayout layoutAttributesForItemAtIndexPath:](v4->_layout, "layoutAttributesForItemAtIndexPath:", v8);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionViewData dataSourceCountsDescription](v4->_collectionViewData);
              v17 = v3;
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, v43, CFSTR("UICollectionView.m"), 6091, CFSTR("UICollectionView internal inconsistency: missing final attributes for cell %@; initial attributes: %@; layout query: %@; collection view: %@; data source counts: %@"),
                v6,
                v7,
                v16,
                v43,
                v18);
              goto LABEL_66;
            }
            goto LABEL_33;
          }
        }
        v19 = (id)v14;
        v49 = 0;
LABEL_34:
        if ((unint64_t)objc_msgSend(v8, "length") >= 2)
        {
          v20 = v4;
          v21 = v3;
          objc_msgSend(v6, "superview");
          v22 = (id)objc_claimAutoreleasedReturnValue();
          -[UICollectionView _subviewRouterForView:attributes:createIfNecessary:](v20, "_subviewRouterForView:attributes:createIfNecessary:", v6, v19, 0);
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = (void *)v23;
          v25 = v23 ? *(void **)(v23 + 40) : 0;
          v26 = v25;

          v27 = v22 == v26;
          v3 = v21;
          v4 = v43;
          if (!v27)
          {
            v28 = 1;
LABEL_44:
            -[UICollectionView _addControlledSubview:atZIndex:forced:initialAttributes:](v4, "_addControlledSubview:atZIndex:forced:initialAttributes:", v6, objc_msgSend(v19, "zIndex"), v48 | v28, 0);
            goto LABEL_45;
          }
        }
        v29 = objc_msgSend(v19, "zIndex");
        objc_msgSend(v6, "_layoutAttributes");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = v29 != objc_msgSend(v30, "zIndex") || v48;

        if (v31 == 1)
        {
          v28 = 0;
          goto LABEL_44;
        }
LABEL_45:
        if (v3 && !-[UICollectionView _viewIsReorderedCell:](v4, "_viewIsReorderedCell:", v6))
        {
          layout = v4->_layout;
          v58[4] = v4;
          v59[0] = MEMORY[0x1E0C809B0];
          v59[1] = 3221225472;
          v59[2] = __88__UICollectionView__updateLayoutAttributesForExistingVisibleViewsFadingForBoundsChange___block_invoke;
          v59[3] = &unk_1E16B1B28;
          v59[4] = v4;
          v58[0] = MEMORY[0x1E0C809B0];
          v58[1] = 3221225472;
          v58[2] = __88__UICollectionView__updateLayoutAttributesForExistingVisibleViewsFadingForBoundsChange___block_invoke_2;
          v58[3] = &unk_1E16B3FD8;
          LOBYTE(v41) = 0;
          -[UICollectionView _viewAnimationsForView:startingLayoutAttributes:endingLayoutAttributes:startingLayout:endingLayout:animationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:](v4, "_viewAnimationsForView:startingLayoutAttributes:endingLayoutAttributes:startingLayout:endingLayout:animationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:", v6, v7, v19, layout, layout, v59, v58, v41, 0);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v54 = 0u;
          v55 = 0u;
          v56 = 0u;
          v57 = 0u;
          v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
          if (v36)
          {
            v37 = v36;
            v38 = *(_QWORD *)v55;
            do
            {
              for (i = 0; i != v37; ++i)
              {
                if (*(_QWORD *)v55 != v38)
                  objc_enumerationMutation(v35);
                objc_msgSend(*(id *)(*((_QWORD *)&v54 + 1) + 8 * i), "start");
              }
              v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
            }
            while (v37);
          }

          v32 = (void *)v50;
          if ((v49 & 1) == 0)
            goto LABEL_76;
        }
        else if (objc_msgSend(v19, "isHidden"))
        {
          v32 = (void *)v50;
          if (v45)
          {
            -[_UICollectionViewSubviewCollection removeViewOfKind:inCategory:atIndexPath:]((uint64_t)v45->_visibleViews, v50, v11, (uint64_t)v8);
            if ((objc_msgSend(v6, "_isInUpdateAnimation") & 1) != 0)
            {
              -[_UICollectionViewSubviewCollection setView:ofKind:inCategory:atIndexPath:]((uint64_t)v45->_visibleViews, (uint64_t)v6, v50, v11, (uint64_t)v8);
              if ((v49 & 1) == 0)
                goto LABEL_76;
              goto LABEL_77;
            }
          }
          else if ((objc_msgSend(v6, "_isInUpdateAnimation") & 1) != 0)
          {
            goto LABEL_75;
          }
          if (v11)
          {
            -[UICollectionView _reuseSupplementaryView:](v4, "_reuseSupplementaryView:", v6);
            if ((v49 & 1) == 0)
              goto LABEL_76;
          }
          else
          {
            if (dyld_program_sdk_at_least())
            {
              -[UICollectionView _cacheOrReuseCell:forIndexPath:invalidatePreferredAttributes:notifyDidEndDisplaying:](v4, "_cacheOrReuseCell:forIndexPath:invalidatePreferredAttributes:notifyDidEndDisplaying:", v6, v8, 1, 1);
LABEL_75:
              if ((v49 & 1) != 0)
                goto LABEL_77;
LABEL_76:
              -[UICollectionView _checkForPreferredAttributesInView:originalAttributes:](v4, "_checkForPreferredAttributesInView:originalAttributes:", v6, v19);
              goto LABEL_77;
            }
            -[UICollectionView _reuseCell:notifyDidEndDisplaying:](v4, "_reuseCell:notifyDidEndDisplaying:", v6, 1);
            if ((v49 & 1) == 0)
              goto LABEL_76;
          }
        }
        else
        {
          if (v45)
            v33 = -[NSHashTable containsObject:](v45->_viewsPreparingForDisplay, "containsObject:", v6);
          else
            v33 = 0;
          v51[0] = MEMORY[0x1E0C809B0];
          v51[1] = 3221225472;
          v51[2] = __88__UICollectionView__updateLayoutAttributesForExistingVisibleViewsFadingForBoundsChange___block_invoke_3;
          v51[3] = &unk_1E16B47A8;
          v51[4] = v4;
          v52 = v19;
          v53 = v6;
          +[UIView _conditionallyPerformWithoutAnimation:layout:](UIView, "_conditionallyPerformWithoutAnimation:layout:", v33, v51);

          v32 = (void *)v50;
          if ((v49 & 1) == 0)
            goto LABEL_76;
        }
LABEL_77:

        ++v5;
      }
      while (v5 != v47);
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v65, 16);
      v47 = v40;
    }
    while (v40);
  }
  -[_UICollectionViewOrthogonalScrollerSectionController processQueuedScrollViewRemovals]((uint64_t)v4->_orthogonalScrollerController);
  -[UICollectionView _processQueuedSectionContainerRemovals](v4, "_processQueuedSectionContainerRemovals");

}

- (id)_subviewRouterForView:(id)a3 attributes:(id)a4 createIfNecessary:(BOOL)a5
{
  _BOOL8 v5;
  id v8;
  int v9;
  _BOOL4 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  v5 = a5;
  v8 = a4;
  if ((-[NSMutableSet containsObject:](self->_viewsOptedOutOfBeingParentedIntoContainers, "containsObject:", a3) & 1) != 0)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = -[_UICollectionViewOrthogonalScrollerSectionController isElementInOrthogonalScrollingSectionWithLayoutAttributes:]((uint64_t)self->_orthogonalScrollerController, v8);
    v10 = -[UICollectionViewLayout _shouldAddElementToSectionContainer:](self->_layout, "_shouldAddElementToSectionContainer:", v8);
  }
  objc_msgSend(v8, "indexPath");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "section");

  if (v9)
  {
    -[_UICollectionViewOrthogonalScrollerSectionController subviewRouterForSection:]((id *)&self->_orthogonalScrollerController->super.isa, v12);
    v13 = objc_claimAutoreleasedReturnValue();
LABEL_11:
    v17 = (id)v13;
    goto LABEL_12;
  }
  if (!v10)
  {
    -[UICollectionView subviewRouter]((id *)&self->super.super.super.super.isa);
    v13 = objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
  -[UICollectionView _sectionContainerViewForSectionIndex:createIfNecessary:](self, "_sectionContainerViewForSectionIndex:createIfNecessary:", v12, v5);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)v14;
  if (v14)
    v16 = *(void **)(v14 + 416);
  else
    v16 = 0;
  v17 = v16;

LABEL_12:
  return v17;
}

- (id)subviewRouter
{
  id v2;

  if (a1)
  {
    v2 = a1[364];
    if (!v2)
    {
      v2 = -[_UICollectionViewSubviewRouter initWithContainer:]([_UICollectionViewSubviewRouter alloc], a1);
      objc_storeStrong(a1 + 364, v2);
    }
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (BOOL)_checkForPreferredAttributesInView:(id)a3 originalAttributes:(id)a4
{
  void *v8;
  _WORD *v9;
  UICollectionViewLayout **p_layout;
  BOOL v11;
  int v12;
  int v13;
  UICollectionViewUpdate *currentUpdate;
  _BOOL8 v15;
  id v16;
  uint64_t v17;
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;

  if (!-[UICollectionView __hasTransitionLayoutAttributes](self, "__hasTransitionLayoutAttributes")
    && (objc_msgSend(a3, "_arePreferredAttributesValid") & 1) == 0)
  {
    v8 = (void *)_UISetCurrentFallbackEnvironment(self);
    v9 = (_WORD *)objc_msgSend(a4, "copy");
    if (v9)
    {
      p_layout = &self->_layout;
      v11 = -[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes");
      v12 = v9[144] & 1;
      if (!v11)
      {
        v13 = 0;
        goto LABEL_7;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a3, "_layoutAttributes");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3477, CFSTR("UICollectionView internal inconsistency: missing original layout attributes necessary to update preferred attributes for view: %@. Attributes from view: %@; collection view: %@"),
        a3,
        v30,
        self);

      p_layout = &self->_layout;
      v12 = 0;
      v13 = 0;
      if (!-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes"))
        goto LABEL_7;
    }
    -[UICollectionViewLayout _prepareForPreferredAttributesQueryForView:withLayoutAttributes:](*p_layout, "_prepareForPreferredAttributesQueryForView:withLayoutAttributes:", a3, v9);
    v13 = 1;
LABEL_7:
    currentUpdate = self->_currentUpdate;
    if (currentUpdate && (*(_BYTE *)&currentUpdate->_flags & 2) != 0)
    {
      -[_UICollectionViewSubviewManager visibleViewWithLayoutAttributes:]((id **)self->_subviewManager, a4);
      v16 = (id)objc_claimAutoreleasedReturnValue();
      v15 = v16 == a3;

    }
    else
    {
      v15 = 0;
    }
    objc_msgSend(a3, "_preferredLayoutAttributesFittingAttributes:isAnimatingExistingView:", v9, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    if (v13)
      -[UICollectionViewLayout _postProcessPreferredAttributes:forView:](*p_layout, "_postProcessPreferredAttributes:forView:", v17, a3);
    intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
    if (intrinsicContentSizeInvalidationContext)
    {
      if (!v12)
      {
        if (!v17 || (*(_WORD *)(v17 + 288) & 3) != 0)
          goto LABEL_23;
        -[UIBarButtonItemGroup _items]((id *)v17);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v17, "indexPath");
        v20 = (id)objc_claimAutoreleasedReturnValue();
        -[UICollectionViewLayoutInvalidationContext _removeInvalidatedSupplementaryOfKind:indexPath:](intrinsicContentSizeInvalidationContext, "_removeInvalidatedSupplementaryOfKind:indexPath:", v21, v20);
        goto LABEL_20;
      }
      objc_msgSend((id)v17, "indexPath");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionViewLayoutInvalidationContext _removeInvalidatedItemIndexPath:](intrinsicContentSizeInvalidationContext, "_removeInvalidatedItemIndexPath:", v19);

    }
    else if (!v12)
    {
      goto LABEL_23;
    }
    objc_msgSend((id)v17, "indexPath");
    v20 = (id)objc_claimAutoreleasedReturnValue();
    if (-[NSMutableOrderedSet count](self->_indexPathsRequiringPreferredAttributes, "count"))
      -[NSMutableOrderedSet removeObject:](self->_indexPathsRequiringPreferredAttributes, "removeObject:", v20);
    v21 = v20;
LABEL_20:

LABEL_23:
    if (!-[UICollectionViewLayout _wantsInvalidateLayoutForPreferredLayoutAttributes](*p_layout, "_wantsInvalidateLayoutForPreferredLayoutAttributes")&& (objc_msgSend((id)v17, "isSizeEqualForPreferredFittingAttributes:", a4) & 1) != 0|| !-[UICollectionViewLayout shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:](*p_layout, "shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:", v17, a4))
    {
      goto LABEL_33;
    }
    -[UICollectionViewLayout invalidationContextForPreferredLayoutAttributes:withOriginalAttributes:](*p_layout, "invalidationContextForPreferredLayoutAttributes:withOriginalAttributes:", v17, a4);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = v22;
    if (v13)
    {
      objc_msgSend(v22, "invalidatedItemIndexPaths");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v24, "count"))
      {
        objc_msgSend(v23, "invalidatedSupplementaryIndexPaths");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v25, "count"))
        {
          objc_msgSend(v23, "invalidatedDecorationIndexPaths");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = objc_msgSend(v27, "count");

          if (!v28 && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x100) == 0)
            goto LABEL_32;
          goto LABEL_31;
        }

      }
    }
LABEL_31:
    -[UICollectionViewLayout invalidateLayoutWithContext:](*p_layout, "invalidateLayoutWithContext:", v23);
LABEL_32:

LABEL_33:
    _UIRestorePreviousFallbackEnvironment(v8);

  }
  return 0;
}

- (BOOL)__hasTransitionLayoutAttributes
{
  return self->_transitionLayoutAttributes != 0;
}

- (UICollectionViewLayout)collectionViewLayout
{
  return self->_layout;
}

- (void)_addControlledSubview:(id)a3 atZIndex:(int64_t)a4 forced:(BOOL)a5 initialAttributes:(id)a6
{
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  UICollectionReusableView **p_newContentView;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  int64_t v22;
  UICollectionViewLayout *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  double v30;
  void *v31;
  void *v32;
  double v33;
  _UICollectionViewOrthogonalScrollerSectionController *orthogonalScrollerController;
  UICollectionReusableView *v35;
  NSObject *v36;
  void *v37;
  unint64_t v38;
  NSObject *v39;
  uint8_t buf[4];
  UICollectionView *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v11 = a6;
  v12 = v11;
  if (v11)
  {
    v13 = v11;
  }
  else
  {
    objc_msgSend(a3, "_layoutAttributes");
    v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  v14 = v13;
  if (os_variant_has_internal_diagnostics())
  {
    if (!v14)
    {
      __UIFaultDebugAssertLog();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412546;
        v41 = self;
        v42 = 2112;
        v43 = a3;
        _os_log_fault_impl(&dword_185066000, v36, OS_LOG_TYPE_FAULT, "UICollectionView internal inconsistency: attempted to add controlled subview with nil layout attributes. Collection view %@; view: %@",
          buf,
          0x16u);
      }

    }
  }
  else if (!v14)
  {
    v38 = _addControlledSubview_atZIndex_forced_initialAttributes____s_category;
    if (!_addControlledSubview_atZIndex_forced_initialAttributes____s_category)
    {
      v38 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v38, (unint64_t *)&_addControlledSubview_atZIndex_forced_initialAttributes____s_category);
    }
    v39 = *(NSObject **)(v38 + 8);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v41 = self;
      v42 = 2112;
      v43 = a3;
      _os_log_impl(&dword_185066000, v39, OS_LOG_TYPE_ERROR, "UICollectionView internal inconsistency: attempted to add controlled subview with nil layout attributes. Collection view %@; view: %@",
        buf,
        0x16u);
    }
  }
  -[UICollectionView _subviewRouterForView:attributes:createIfNecessary:](self, "_subviewRouterForView:attributes:createIfNecessary:", a3, v14, 1);
  v15 = objc_claimAutoreleasedReturnValue();
  if (!v15)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 2816, CFSTR("UICollectionView internal inconsistency: attempted to add controlled subview without a subview router. Collection view %@; view: %@"),
      self,
      a3);

  }
  p_newContentView = &self->_newContentView;
  objc_storeStrong((id *)&self->_newContentView, a3);
  if (!a5)
  {
    v17 = (id)objc_msgSend(a3, "superview");
    if (v15)
      v18 = *(void **)(v15 + 40);
    else
      v18 = 0;
    v19 = v18;
    if (v17 == v19)
    {
      objc_msgSend(a3, "_layoutAttributes");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "zIndex");

      if (v21 == a4)
        goto LABEL_18;
    }
    else
    {

    }
  }
  if (-[UICollectionViewLayout _orthogonalScrollingElementShouldAppearBelowForAttributes:](self->_layout, "_orthogonalScrollingElementShouldAppearBelowForAttributes:", v14))
  {
    v22 = -1;
  }
  else
  {
    v22 = 1;
  }
  -[_UICollectionViewSubviewRouter addControlledSubview:zIndex:orderMode:](v15, a3, a4, v22);
LABEL_18:
  v23 = self->_layout;
  v24 = a3;
  v25 = v24;
  if (v24 && v23)
  {
    v26 = objc_msgSend(v24, "effectiveUserInterfaceLayoutDirection");
    if (v26 != -[UICollectionViewLayout developmentLayoutDirection](v23, "developmentLayoutDirection"))
    {
      v27 = -[UICollectionViewLayout _wantsRightToLeftHorizontalMirroringIfNeeded](v23, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      goto LABEL_24;
    }
    if (objc_msgSend(v25, "_flipsHorizontalAxis"))
    {
      v27 = 0;
LABEL_24:
      objc_msgSend(v25, "_setFlipsHorizontalAxis:", v27);
    }
  }

  if (dyld_program_sdk_at_least())
  {
    objc_msgSend(v25, "_layoutAttributes");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v28, "_zPosition");

    if (v29 >= 1)
    {
      if (-[UICollectionView hasActiveDrag](self, "hasActiveDrag")
        || -[UICollectionView hasActiveDrop](self, "hasActiveDrop"))
      {
        v30 = (double)v29;
        objc_msgSend(v25, "layer");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = v31;
        v33 = v30;
      }
      else
      {
        objc_msgSend(v25, "layer");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = v31;
        v33 = 0.0;
      }
      objc_msgSend(v31, "setZPosition:", v33);

    }
  }
  if (v15)
  {
    orthogonalScrollerController = self->_orthogonalScrollerController;
    if (orthogonalScrollerController)
    {
      if (*(_BYTE *)(v15 + 32))
        -[_UICollectionViewOrthogonalScrollerSectionController adjustElementHierarchyOrderingForOrthogonalElementIfNeeded:layoutAttributes:]((id *)&orthogonalScrollerController->super.isa, v25, v14);
    }
  }
  v35 = *p_newContentView;
  *p_newContentView = 0;

}

- (void)_applyLayoutAttributes:(id)a3 toView:(id)a4
{
  -[UICollectionView _applyLayoutAttributes:toView:addingControlledSubview:]((uint64_t)self, a3, a4, 1);
}

- (void)_addSubview:(id)a3 positioned:(int64_t)a4 relativeTo:(id)a5
{
  id v8;
  id v9;
  void *v10;
  int v11;
  objc_super v12;
  int64_t v13;

  v8 = a3;
  v13 = a4;
  v9 = a5;
  -[UICollectionView subviewRouter]((id *)&self->super.super.super.super.isa);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "shouldAddSubview:atPosition:relativeTo:", v8, &v13, v9);

  if (v11)
  {
    v12.receiver = self;
    v12.super_class = (Class)UICollectionView;
    -[UIView _addSubview:positioned:relativeTo:](&v12, sel__addSubview_positioned_relativeTo_, v8, v13, v9);
  }

}

- (id)_updatedNewlyAppearingLayoutAttributesForCurrentVisibleBounds:(BOOL)a3
{
  UICollectionViewData *collectionViewData;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  -[UICollectionViewData invalidate:]((uint64_t)self->_collectionViewData, 1);
  collectionViewData = self->_collectionViewData;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  -[UICollectionViewData layoutAttributesForElementsInRect:](collectionViewData, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v10, "count"));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v12 = v10;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v20 != v15)
          objc_enumerationMutation(v12);
        v17 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        if (!-[UICollectionView _visibleViewForLayoutAttributes:](self, "_visibleViewForLayoutAttributes:", v17, (_QWORD)v19)&& (a3 || (objc_msgSend(v17, "isHidden") & 1) == 0))
        {
          objc_msgSend(v11, "addObject:", v17);
        }
      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v14);
  }

  -[UICollectionView _sortAttributesByDistanceToVisibleBoundsOrigin:](self, "_sortAttributesByDistanceToVisibleBoundsOrigin:", v11);
  return v11;
}

- (_UICollectionViewSelectionController)_selectionController
{
  return self->_selectionController;
}

- (BOOL)_isReorderingItemAtIndexPath:(id)a3
{
  return -[UICollectionView _isReorderingItemAtIndexPath:includingDragAndDrop:](self, "_isReorderingItemAtIndexPath:includingDragAndDrop:", a3, 1);
}

- (void)_sortAttributesByDistanceToVisibleBoundsOrigin:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD v10[7];
  BOOL v11;

  v4 = a3;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  v6 = v5;
  v8 = v7;
  v9 = -[UICollectionViewLayout _hasOrthogonalScrollingSections](self->_layout, "_hasOrthogonalScrollingSections");
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __67__UICollectionView__sortAttributesByDistanceToVisibleBoundsOrigin___block_invoke;
  v10[3] = &unk_1E16BD080;
  v11 = v9;
  v10[4] = self;
  v10[5] = v6;
  v10[6] = v8;
  objc_msgSend(v4, "sortUsingComparator:", v10);

}

- (id)_delegateProxy
{
  _UICollectionViewDragAndDropController *WeakRetained;

  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
    WeakRetained = self->_dragAndDropController;
  else
    WeakRetained = (_UICollectionViewDragAndDropController *)objc_loadWeakRetained(&self->super._delegate);
  return WeakRetained;
}

- (id)_dataSourceProxy
{
  _UICollectionViewDragAndDropController *WeakRetained;

  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
    WeakRetained = self->_dragAndDropController;
  else
    WeakRetained = (_UICollectionViewDragAndDropController *)objc_loadWeakRetained((id *)&self->_dataSource);
  return WeakRetained;
}

- (UICollectionViewCell)cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
  void *v4;
  void *v5;

  -[UICollectionView _translateDataSourceIndexPathToPresentationIndexPathAsNeeded:](self, "_translateDataSourceIndexPathToPresentationIndexPathAsNeeded:", indexPath);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return (UICollectionViewCell *)v5;
}

- (id)_translateDataSourceIndexPathToPresentationIndexPathAsNeeded:(id)a3
{
  id v4;
  id v5;
  void *v6;

  v4 = a3;
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController)
    && !-[UICollectionView _isOperatingWithPresentationValues](self, "_isOperatingWithPresentationValues"))
  {
    -[_UICollectionViewShadowUpdatesController indexPathAfterShadowUpdates:](self->_dragAndDropController, "indexPathAfterShadowUpdates:", v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = v4;
  }
  v6 = v5;

  return v6;
}

- (id)_indexPathForView:(id)a3 ofType:(unint64_t)a4
{
  id v6;
  _UICollectionViewSubviewManager *v7;
  uint64_t v8;
  UICollectionReusableView *v9;
  NSMutableDictionary *prefetchCacheItems;
  id *v11;
  id *v12;
  NSIndexPath *v13;
  id *v14;
  _UICollectionViewSubviewManager *subviewManager;
  void *v16;
  _QWORD *v17;
  _UICollectionViewSubviewManager *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[4];
  UICollectionReusableView *v29;
  uint64_t *v30;
  _QWORD v31[4];
  _QWORD v32[2];
  uint64_t v33;
  id *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;

  v6 = a3;
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  v33 = 0;
  v34 = (id *)&v33;
  v35 = 0x3032000000;
  v36 = __Block_byref_object_copy__40;
  v37 = __Block_byref_object_dispose__40;
  v38 = 0;
  if (a4 == 1)
  {
    subviewManager = self->_subviewManager;
    objc_msgSend(v6, "_layoutAttributes");
    v14 = (id *)objc_claimAutoreleasedReturnValue();
    -[UIBarButtonItemGroup _items](v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = __45__UICollectionView__indexPathForView_ofType___block_invoke_3;
    v27[3] = &unk_1E16BD350;
    v27[4] = v6;
    v27[5] = &v33;
    if (subviewManager)
      -[_UICollectionViewSubviewCollection enumerateSupplementariesOfElementKind:enumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v16, (uint64_t)v27);
    v17 = v27;
    goto LABEL_17;
  }
  if (a4)
  {
    v18 = self->_subviewManager;
    objc_msgSend(v6, "_layoutAttributes");
    v14 = (id *)objc_claimAutoreleasedReturnValue();
    -[UIBarButtonItemGroup _items](v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __45__UICollectionView__indexPathForView_ofType___block_invoke_4;
    v26[3] = &unk_1E16BD350;
    v26[4] = v6;
    v26[5] = &v33;
    if (v18)
      -[_UICollectionViewSubviewCollection enumerateDecorationsOfElementKind:enumerator:]((uint64_t)v18->_visibleViews, (uint64_t)v16, (uint64_t)v26);
    v17 = v26;
LABEL_17:
    v11 = (id *)(v17 + 4);

    goto LABEL_18;
  }
  v7 = self->_subviewManager;
  v8 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __45__UICollectionView__indexPathForView_ofType___block_invoke;
  v31[3] = &unk_1E16BDC48;
  v9 = (UICollectionReusableView *)v6;
  v32[0] = v9;
  v32[1] = &v33;
  if (!v7
    || (-[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)v7->_visibleViews, (uint64_t)v31),
        !v34[5]))
  {
    if (dyld_program_sdk_at_least())
    {
      prefetchCacheItems = self->_prefetchCacheItems;
      v28[0] = v8;
      v28[1] = 3221225472;
      v28[2] = __45__UICollectionView__indexPathForView_ofType___block_invoke_2;
      v28[3] = &unk_1E16BD328;
      v29 = v9;
      v30 = &v33;
      -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](prefetchCacheItems, "enumerateKeysAndObjectsUsingBlock:", v28);

    }
  }
  v11 = (id *)v32;
  v12 = v34;
  if (!v34[5] && self->_firstResponderViewType == 1 && self->_firstResponderView == v9)
  {
    v13 = self->_firstResponderIndexPath;
    v14 = (id *)v12[5];
    v12[5] = v13;
LABEL_18:

  }
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = (_QWORD *)v19;
  if (!v34[5])
  {
    v21 = v19 ? *(void **)(v19 + 8) : 0;
    v22 = v21;

    if (v22 == v6)
    {
      if (v20)
        v23 = (void *)v20[2];
      else
        v23 = 0;
      objc_storeStrong(v34 + 5, v23);
    }
  }
  v24 = v34[5];

  _Block_object_dispose(&v33, 8);
  return v24;
}

- (BOOL)_hasFocusedCellForIndexPath:(id)a3 shouldUsePreUpdateData:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  uint64_t v7;
  UICollectionViewUpdate *currentUpdate;
  _UICollectionViewFocusedItemState *v9;
  id v10;
  char v11;
  id v12;

  v4 = a4;
  v6 = a3;
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v7 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    currentUpdate = self->_currentUpdate;
    if (currentUpdate)
    {
      v9 = currentUpdate->_oldFocusedItemState;

      v7 = (uint64_t)v9;
    }
  }
  if (v7)
  {
    v10 = *(id *)(v7 + 8);
    if (v10 && !*(_QWORD *)(v7 + 32))
    {
      v12 = *(id *)(v7 + 16);
      v11 = objc_msgSend(v6, "isEqual:", v12);

    }
    else
    {
      v11 = 0;
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

- (_UICollectionViewFocusedItemState)_focusedItemState
{
  return self->_focusedItemState;
}

- (NSInteger)numberOfSections
{
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  return -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData);
}

- (NSInteger)numberOfItemsInSection:(NSInteger)section
{
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  return -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, section);
}

- (id)_cellForItemAtIndexPath:(id)a3
{
  id v4;
  int *v5;
  char *currentUpdate;
  id v7;
  UICollectionReusableView *v8;
  uint64_t v9;
  UICollectionReusableView *v10;
  NSIndexPath *firstResponderIndexPath;
  uint64_t v13;
  _WORD *v14;
  __int16 v15;

  v4 = a3;
  if (v4)
  {
    -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
    v5 = &OBJC_IVAR___UICollectionView__collectionViewData;
    currentUpdate = (char *)self->_currentUpdate;
    if (currentUpdate)
      v5 = &OBJC_IVAR___UICollectionViewUpdate__oldModel;
    else
      currentUpdate = (char *)self;
    v7 = *(id *)&currentUpdate[*v5];
    if (-[UICollectionViewData validatedGlobalIndexForItemAtIndexPath:]((uint64_t)v7, v4) == 0x7FFFFFFFFFFFFFFFLL)
    {
LABEL_6:
      v8 = 0;
LABEL_18:

      goto LABEL_19;
    }
    if (-[UICollectionView _hasFocusedCellForIndexPath:shouldUsePreUpdateData:](self, "_hasFocusedCellForIndexPath:shouldUsePreUpdateData:", v4, 1))
    {
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v9 = objc_claimAutoreleasedReturnValue();
      -[_UICollectionViewFocusedItemState cell]((_QWORD *)v9);
      v10 = (UICollectionReusableView *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      firstResponderIndexPath = self->_firstResponderIndexPath;
      if (firstResponderIndexPath
        && self->_firstResponderViewType == 1
        && -[NSIndexPath isEqual:](firstResponderIndexPath, "isEqual:", v4)
        && dyld_program_sdk_at_least())
      {
        v8 = self->_firstResponderView;
        goto LABEL_18;
      }
      -[_UICollectionViewSubviewManager visibleCellAtIndexPath:]((id **)self->_subviewManager, (uint64_t)v4);
      v8 = (UICollectionReusableView *)objc_claimAutoreleasedReturnValue();
      if (v8)
        goto LABEL_18;
      if (!dyld_program_sdk_at_least())
        goto LABEL_6;
      -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", v4);
      v13 = objc_claimAutoreleasedReturnValue();
      v9 = v13;
      if (!v13 || (v14 = *(id *)(v13 + 16)) == 0 || (v15 = v14[144], v14, (v15 & 1) == 0))
      {
        v8 = 0;
        goto LABEL_11;
      }
      v10 = (UICollectionReusableView *)*(id *)(v9 + 24);
    }
    v8 = v10;
LABEL_11:

    goto LABEL_18;
  }
  v8 = 0;
LABEL_19:

  return v8;
}

- (void)_reloadDataIfNeeded
{
  uint64_t v2;

  v2 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v2 & 0x8000000) != 0 && (v2 & 0x10000000) == 0 && !self->_reloadingSuspendedCount)
    -[UICollectionView reloadData](self, "reloadData");
}

id __36__UICollectionView_setSpringLoaded___block_invoke()
{
  return +[_UICollectionViewSpringLoadedInteraction collectionViewSpringLoadedInteraction](_UICollectionViewSpringLoadedInteraction, "collectionViewSpringLoadedInteraction");
}

void __49__UICollectionView__invalidateLayoutWithContext___block_invoke_6(uint64_t a1)
{
  -[UICollectionViewData invalidate:](*(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 40), "invalidateEverything") ^ 1);
}

- (void)_invalidateLayoutWithContext:(id)a3
{
  id v4;
  unint64_t v5;
  unsigned __int8 *v7;
  unint64_t v8;
  UICollectionViewData *v9;
  UICollectionViewUpdate *currentUpdate;
  UICollectionViewData *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _UICollectionViewFeedbackLoopDebugger *v15;
  UICollectionViewLayout *layout;
  UICollectionViewLayout *v17;
  double v18;
  void *v19;
  double v20;
  void *v21;
  unint64_t v22;
  unsigned int v23;
  _BOOL4 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _UICollectionViewSubviewManager *v29;
  _UICollectionViewSubviewManager *v30;
  _UICollectionViewSubviewManager *subviewManager;
  uint64_t v32;
  _BOOL4 v33;
  id *v34;
  id *v35;
  _BOOL4 v36;
  void (**v37)(_QWORD);
  void *v38;
  id v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  int v46;
  int v47;
  unsigned int v48;
  double v49;
  double v50;
  double height;
  double width;
  double v53;
  double v54;
  UICollectionViewData *collectionViewData;
  double v56;
  CGFloat v57;
  double v58;
  CGFloat v59;
  UICollectionViewData *v60;
  void *v61;
  void *v62;
  void *v63;
  NSObject *v64;
  NSObject *v65;
  void *v66;
  uint64_t v67;
  _UICollectionViewFeedbackLoopDebugger *v68;
  void *v69;
  char v70;
  uint64_t v71;
  _QWORD aBlock[4];
  UICollectionViewLayout *v73;
  UICollectionView *v74;
  id v75;
  id v76;
  _QWORD v77[4];
  UICollectionViewData *v78;
  UICollectionViewLayout *v79;
  id v80;
  id v81;
  _QWORD v82[4];
  UICollectionViewData *v83;
  unsigned __int8 *v84;
  _QWORD v85[4];
  UICollectionViewData *v86;
  uint8_t buf[4];
  UICollectionView *v88;
  __int16 v89;
  void *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_msgSend(v4, "_intent");
  if (v5 > 0xF || ((1 << v5) & 0x9762) == 0)
    -[UICollectionView _resetPrefetchState](self, "_resetPrefetchState");
  v7 = (unsigned __int8 *)v4;
  if (self
    && -[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes")
    && (v8 = objc_msgSend(v7, "_intent"), v8 <= 0xD)
    && ((1 << v8) & 0x2005) != 0)
  {

    -[UICollectionView _saveContentOffsetRestorationAnchorIfNecessaryUsingModel:]((uint64_t)self, self->_collectionViewData);
  }
  else
  {

  }
  v9 = self->_collectionViewData;
  currentUpdate = self->_currentUpdate;
  if (currentUpdate && (*(_BYTE *)&currentUpdate->_flags & 1) == 0)
  {
    v11 = currentUpdate->_oldModel;

    v9 = v11;
  }
  v12 = _invalidateLayoutWithContext____s_category;
  if (!_invalidateLayoutWithContext____s_category)
  {
    v12 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v12, (unint64_t *)&_invalidateLayoutWithContext____s_category);
  }
  if ((*(_BYTE *)v12 & 1) != 0)
  {
    v64 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      v65 = v64;
      _UICollectionViewLayoutInvalidationContextIntentDescription(objc_msgSend(v7, "_intent"));
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218242;
      v88 = self;
      v89 = 2112;
      v90 = v66;
      _os_log_impl(&dword_185066000, v65, OS_LOG_TYPE_ERROR, "_invalidateLayoutWithContext: cv == %p; intent: %@",
        buf,
        0x16u);

    }
  }
  if (v7)
    v13 = (v7[112] >> 3) & 1;
  else
    LOBYTE(v13) = 0;
  v14 = objc_msgSend(v7, "_intent");
  v15 = self->_debugger;
  if (v15 && v14 != 15)
    -[_UICollectionViewFeedbackLoopDebugger recordInvalidationWithContext:](self->_debugger, "recordInvalidationWithContext:", v7);
  v70 = v13;
  v71 = v14;
  if (self->_isInInteractiveTransition)
  {
    layout = self->_layout;
    self->_previousInteractiveTransitionProgress = self->_currentInteractiveTransitionProgress;
    v17 = layout;
    -[UICollectionViewLayout transitionProgress](v17, "transitionProgress");
    self->_currentInteractiveTransitionProgress = v18;
    self->_previousInteractiveTransitionTimeStamp = self->_currentInteractiveTransitionTimeStamp;
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "timeIntervalSince1970");
    self->_currentInteractiveTransitionTimeStamp = v20;

    v85[0] = MEMORY[0x1E0C809B0];
    v85[1] = 3221225472;
    v85[2] = __49__UICollectionView__invalidateLayoutWithContext___block_invoke;
    v85[3] = &unk_1E16B1B28;
    v86 = v9;
    -[UICollectionView _invalidateWithBlock:](self, "_invalidateWithBlock:", v85);
    -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
    v21 = v86;
    goto LABEL_60;
  }
  if (+[UIView _isInAnimationBlockWithAnimationsEnabled](UIView, "_isInAnimationBlockWithAnimationsEnabled")&& -[UICollectionView _shouldFadeCellsForBoundChangeWhileRotating](self, "_shouldFadeCellsForBoundChangeWhileRotating"))
  {
    *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x2000000uLL;
  }
  v68 = v15;
  if (v7)
  {
    if (dyld_program_sdk_at_least() && (v22 = objc_msgSend(v7, "_intent"), v22 <= 0xF))
      v23 = (0x7F9Du >> v22) & 1;
    else
      v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  v24 = -[UICollectionViewLayoutInvalidationContext _requiresFullCacheInvalidation](v7);
  objc_msgSend(v7, "invalidatedItemIndexPaths");
  v17 = (UICollectionViewLayout *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "invalidatedSupplementaryIndexPaths");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "invalidatedDecorationIndexPaths");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = -[UICollectionViewLayout count](v17, "count");
  v27 = objc_msgSend(v21, "count");
  v69 = v25;
  v28 = objc_msgSend(v25, "count");
  if (v23 && v24)
  {
    if (v26)
    {
      if (v27)
      {
LABEL_44:
        if (!v28)
        {
          subviewManager = self->_subviewManager;
          if (subviewManager)
            -[_UICollectionViewSubviewCollection enumerateDecorationsWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)&__block_literal_global_811);
        }
        goto LABEL_47;
      }
    }
    else
    {
      v29 = self->_subviewManager;
      if (v29)
        -[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)v29->_visibleViews, (uint64_t)&__block_literal_global_808);
      -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](self->_prefetchCacheItems, "enumerateKeysAndObjectsUsingBlock:", &__block_literal_global_809);
      if (v27)
        goto LABEL_44;
    }
    if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x800000000) == 0)
    {
      v30 = self->_subviewManager;
      if (v30)
        -[_UICollectionViewSubviewCollection enumerateSupplementariesWithEnumerator:]((uint64_t)v30->_visibleViews, (uint64_t)&__block_literal_global_810);
    }
    goto LABEL_44;
  }
LABEL_47:
  v67 = v28;
  v32 = v27;
  v33 = v24;
  if (v24)
  {
    v82[0] = MEMORY[0x1E0C809B0];
    v82[1] = 3221225472;
    v82[2] = __49__UICollectionView__invalidateLayoutWithContext___block_invoke_6;
    v82[3] = &unk_1E16B1B50;
    v34 = (id *)&v83;
    v83 = v9;
    v35 = (id *)&v84;
    v84 = v7;
    -[UICollectionView _invalidateWithBlock:](self, "_invalidateWithBlock:", v82);
  }
  else
  {
    v77[0] = MEMORY[0x1E0C809B0];
    v77[1] = 3221225472;
    v77[2] = __49__UICollectionView__invalidateLayoutWithContext___block_invoke_7;
    v77[3] = &unk_1E16B51E8;
    v34 = (id *)&v78;
    v78 = v9;
    v35 = (id *)&v79;
    v79 = v17;
    v80 = v21;
    v81 = v69;
    -[UICollectionView _invalidateWithBlock:](self, "_invalidateWithBlock:", v77);

  }
  v36 = v33;
  if (v26 || v32 || v67)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __49__UICollectionView__invalidateLayoutWithContext___block_invoke_8;
    aBlock[3] = &unk_1E16B51E8;
    v73 = v17;
    v74 = self;
    v75 = v21;
    v76 = v69;
    v37 = (void (**)(_QWORD))_Block_copy(aBlock);
    if (dyld_program_sdk_at_least())
      -[UICollectionView _invalidateWithBlock:](self, "_invalidateWithBlock:", v37);
    else
      v37[2](v37);

  }
  if (v71 != 15)
  {
    -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, !v36);
    *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x40000000uLL;
  }

  v15 = v68;
LABEL_60:

  if (v7)
    v38 = (void *)*((_QWORD *)v7 + 16);
  else
    v38 = 0;
  v39 = v38;
  if (objc_msgSend(v39, "count"))
    -[UICollectionView _addIndexPathsRequiringPreferredAttributes:]((uint64_t)self, v39);
  objc_msgSend(v7, "contentOffsetAdjustment", v67);
  v42 = v41;
  v43 = v40;
  if (v41 != *MEMORY[0x1E0C9D538] || v40 != *(double *)(MEMORY[0x1E0C9D538] + 8))
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    v46 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
    *((_BYTE *)&self->_collectionViewFlags + 18) = (v46 | 0x10000u) >> 16;
    -[UICollectionView setContentOffset:](self, "setContentOffset:", v42 + v44, v43 + v45);
    v47 = *((unsigned __int16 *)&self->_collectionViewFlags + 8);
    v48 = (v47 | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16)) & 0xFFFEFFFF;
    *((_WORD *)&self->_collectionViewFlags + 8) = v47;
    *((_BYTE *)&self->_collectionViewFlags + 18) = (v48 | v46 & 0x10000) >> 16;
  }
  objc_msgSend(v7, "contentSizeAdjustment");
  if (v49 != *MEMORY[0x1E0C9D820] || v50 != *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    if (v9)
    {
      width = v9->_contentSize.width;
      height = v9->_contentSize.height;
    }
    else
    {
      height = 0.0;
      width = 0.0;
    }
    v53 = v49 + width;
    v54 = v50 + height;
    -[UICollectionView setContentSize:](self, "setContentSize:", v49 + width, v50 + height);
    collectionViewData = self->_collectionViewData;
    if (collectionViewData)
    {
      collectionViewData->_contentSize.width = v53;
      collectionViewData->_contentSize.height = v54;
    }
  }
  if (objc_msgSend(v7, "_shouldInvalidateCollectionViewContentSize"))
  {
    -[UICollectionViewLayout collectionViewContentSize](self->_layout, "collectionViewContentSize");
    v57 = v56;
    v59 = v58;
    -[UICollectionView _setContentSizeFromLayout:isRecursivelyUpdatingVisibleCells:](self, "_setContentSizeFromLayout:isRecursivelyUpdatingVisibleCells:", self->_updateVisibleCellsRecursionCount > 0);
    v60 = self->_collectionViewData;
    if (v60)
    {
      v60->_contentSize.width = v57;
      v60->_contentSize.height = v59;
    }
  }
  if ((objc_msgSend(v7, "invalidateEverything") & 1) != 0 || objc_msgSend(v7, "_intent") == 3)
  {
    -[UICollectionView _identityTracker:](self, "_identityTracker:", 0);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIIndexPathIdentityTracker reset]((uint64_t)v61);

    -[UICollectionView contextMenuInteraction](self, "contextMenuInteraction");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "_retargetDismissingMenuWithInternalIdentifier:toPreview:force:", 0, 0, 1);

  }
  -[UICollectionView _dataSourceActual](self, "_dataSourceActual");
  v63 = (void *)objc_claimAutoreleasedReturnValue();

  if (v63)
  {
    if (v71 != 6 && v71 != 15)
      -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
    if ((v70 & 1) == 0)
    {
      -[UICollectionView _reconfigureSectionContainersForUpdate:](self, "_reconfigureSectionContainersForUpdate:", self->_currentUpdate);
      -[_UICollectionViewSectionFocusGuideController performLayout](self->_sectionFocusGuideController, "performLayout");
      if (objc_msgSend(v7, "_intent") != 6)
        -[_UICollectionViewOrthogonalScrollerSectionController reconfigureScrollViewsForUpdate:]((uint64_t)self->_orthogonalScrollerController, self->_currentUpdate);
      -[UIScrollView _notifyAlignedContentMarginChanged](self, "_notifyAlignedContentMarginChanged");
    }
  }

}

- (void)_setNeedsVisibleCellsUpdate:(BOOL)a3 withLayoutAttributes:(BOOL)a4
{
  _BOOL4 v4;
  _BOOL4 v5;
  void *v7;
  int64_t updateVisibleCellsRecursionCount;
  unint64_t v9;
  NSObject *v10;
  NSIndexPath *v11;
  NSIndexPath *v12;
  _UICollectionViewFeedbackLoopDebugger *debugger;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  NSIndexPath *contentOffsetRestorationAnchor;
  NSIndexPath *scrollingTargetIndexPath;
  int v23;
  UICollectionView *v24;
  __int16 v25;
  NSIndexPath *v26;
  __int16 v27;
  NSIndexPath *v28;
  uint64_t v29;

  v4 = a4;
  v5 = a3;
  v29 = *MEMORY[0x1E0C80C00];
  if (a3 && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x100) == 0)
  {
    if (self->_debugger)
    {
      objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UICollectionViewFeedbackLoopDebugger recordUpdateVisibleCellsScheduledWithCallStack:](self->_debugger, "recordUpdateVisibleCellsScheduledWithCallStack:", v7);

    }
    updateVisibleCellsRecursionCount = self->_updateVisibleCellsRecursionCount;
    if (updateVisibleCellsRecursionCount == 95)
    {
      if (self->_contentOffsetRestorationAnchor || self->_scrollingTargetIndexPath)
      {
        if (os_variant_has_internal_diagnostics())
        {
          __UIFaultDebugAssertLog();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
          {
            contentOffsetRestorationAnchor = self->_contentOffsetRestorationAnchor;
            scrollingTargetIndexPath = self->_scrollingTargetIndexPath;
            v23 = 138412802;
            v24 = self;
            v25 = 2112;
            v26 = contentOffsetRestorationAnchor;
            v27 = 2112;
            v28 = scrollingTargetIndexPath;
            _os_log_fault_impl(&dword_185066000, v20, OS_LOG_TYPE_FAULT, "Attempting to recover UICollectionView stuck in an update/layout feedback loop. UICollectionView: %@. Scroll position restoration item: %@. Scrolling target: %@", (uint8_t *)&v23, 0x20u);
          }

        }
        else
        {
          v9 = _setNeedsVisibleCellsUpdate_withLayoutAttributes____s_category;
          if (!_setNeedsVisibleCellsUpdate_withLayoutAttributes____s_category)
          {
            v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v9, (unint64_t *)&_setNeedsVisibleCellsUpdate_withLayoutAttributes____s_category);
          }
          v10 = *(NSObject **)(v9 + 8);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v11 = self->_contentOffsetRestorationAnchor;
            v12 = self->_scrollingTargetIndexPath;
            v23 = 138412802;
            v24 = self;
            v25 = 2112;
            v26 = v11;
            v27 = 2112;
            v28 = v12;
            _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Attempting to recover UICollectionView stuck in an update/layout feedback loop. UICollectionView: %@. Scroll position restoration item: %@. Scrolling target: %@", (uint8_t *)&v23, 0x20u);
          }
        }
        -[_UICollectionViewFeedbackLoopDebugger printCollectedRecordsForCollectionView:raiseException:](self->_debugger, "printCollectedRecordsForCollectionView:raiseException:", self, 0);
        -[UICollectionView _clearContentOffsetRestorationAnchor](self, "_clearContentOffsetRestorationAnchor");
        -[UICollectionView _clearTargetIndexPathForScrolling](self, "_clearTargetIndexPathForScrolling");
      }
    }
    else if (updateVisibleCellsRecursionCount >= 100)
    {
      debugger = self->_debugger;
      if (debugger)
        -[_UICollectionViewFeedbackLoopDebugger printCollectedRecordsForCollectionView:raiseException:](debugger, "printCollectedRecordsForCollectionView:raiseException:", self, 1);
    }
  }
  v14 = *((_QWORD *)&self->_collectionViewFlags + 1);
  v15 = (v14 >> 8) & 1 | v5;
  v16 = 256;
  if (!v15)
    v16 = 0;
  v17 = v14 & 0xFFFFFFFFFFFFFCFFLL;
  v18 = (v14 >> 9) & 1 | v4;
  v19 = 512;
  if (!v18)
    v19 = 0;
  *((_QWORD *)&self->_collectionViewFlags + 1) = v16 | v17 | v19;
  if ((v15 & 1) != 0 || v18)
    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
}

- (id)_dataSourceActual
{
  return objc_loadWeakRetained((id *)&self->_dataSource);
}

- (void)_invalidateWithBlock:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id invalidationBlock;
  _QWORD v10[4];
  id v11;
  id v12;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x800000000) != 0)
    {
      v6 = _Block_copy(self->_invalidationBlock);
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __41__UICollectionView__invalidateWithBlock___block_invoke;
      v10[3] = &unk_1E16B6740;
      v11 = v6;
      v12 = v5;
      v7 = v6;
      v8 = _Block_copy(v10);
      invalidationBlock = self->_invalidationBlock;
      self->_invalidationBlock = v8;

    }
    else
    {
      (*((void (**)(id))v4 + 2))(v4);
    }
  }

}

- (void)_reconfigureSectionContainersForUpdate:(id)a3
{
  NSMutableDictionary *v4;
  void *v5;
  void *v6;
  NSMutableDictionary *v7;
  NSMutableDictionary *sectionToContainerViewMap;
  NSMutableDictionary *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  NSMutableDictionary *v14;
  UICollectionView *v15;

  v10 = a3;
  v4 = self->_sectionToContainerViewMap;
  -[UICollectionViewLayout _customContainerSectionIndexes](self->_layout, "_customContainerSectionIndexes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count") || -[NSMutableDictionary count](v4, "count"))
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v5, "count"));
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __59__UICollectionView__reconfigureSectionContainersForUpdate___block_invoke;
    v11[3] = &unk_1E16BCCF8;
    v12 = v10;
    v13 = v5;
    v7 = v6;
    v14 = v7;
    v15 = self;
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](v4, "enumerateKeysAndObjectsUsingBlock:", v11);
    sectionToContainerViewMap = self->_sectionToContainerViewMap;
    self->_sectionToContainerViewMap = v7;
    v9 = v7;

  }
}

- (void)_resetAllPrefetchContexts
{
  NSMutableDictionary *orthogonalSectionPrefetchingContexts;
  _UICollectionViewPrefetchingContext *mainPrefetchingContext;
  _UICollectionViewPrefetchingContext *activeOrthogonalPrefetchingContext;
  _QWORD v6[5];

  -[UICollectionView _resetPrefetchingContext:](self, "_resetPrefetchingContext:", self->_mainPrefetchingContext);
  orthogonalSectionPrefetchingContexts = self->_orthogonalSectionPrefetchingContexts;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __45__UICollectionView__resetAllPrefetchContexts__block_invoke;
  v6[3] = &unk_1E16BCED0;
  v6[4] = self;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](orthogonalSectionPrefetchingContexts, "enumerateKeysAndObjectsUsingBlock:", v6);
  mainPrefetchingContext = self->_mainPrefetchingContext;
  self->_mainPrefetchingContext = 0;

  -[NSMutableDictionary removeAllObjects](self->_orthogonalSectionPrefetchingContexts, "removeAllObjects");
  activeOrthogonalPrefetchingContext = self->_activeOrthogonalPrefetchingContext;
  self->_activeOrthogonalPrefetchingContext = 0;

}

- (void)_resetPrefetchingContext:(id)a3
{
  id *v4;
  id *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id *v9;

  v4 = (id *)a3;
  v5 = v4;
  if (v4)
  {
    if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x20) != 0)
    {
      v9 = v4;
      v6 = objc_msgSend(v4[2], "count");
      v5 = v9;
      if (v6)
      {
        -[UICollectionView _prefetchDataSourceProxy](self, "_prefetchDataSourceProxy");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UICollectionViewPrefetchingContext remainingIndexPaths](v9);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "collectionView:cancelPrefetchingForItemsAtIndexPaths:", self, v8);

        v5 = v9;
      }
    }
  }

}

- (void)_resetPrefetchState
{
  -[UICollectionView _resetPrefetchedCachedCells](self, "_resetPrefetchedCachedCells");
  -[UICollectionView _resetAllPrefetchContexts](self, "_resetAllPrefetchContexts");
}

- (void)_resetPrefetchedCachedCells
{
  unint64_t v3;
  void *v4;
  NSMutableDictionary *prefetchCacheItems;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  NSObject *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[4];
  id v18;
  uint8_t v19[128];
  uint8_t buf[4];
  UICollectionView *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (-[NSMutableDictionary count](self->_prefetchCacheItems, "count"))
  {
    v3 = _resetPrefetchedCachedCells___s_category;
    if (!_resetPrefetchedCachedCells___s_category)
    {
      v3 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v3, (unint64_t *)&_resetPrefetchedCachedCells___s_category);
    }
    if ((*(_BYTE *)v3 & 1) != 0)
    {
      v12 = *(NSObject **)(v3 + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v21 = self;
        _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "[UICV %p] Resetting prefetched cells", buf, 0xCu);
      }
    }
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", -[NSMutableDictionary count](self->_prefetchCacheItems, "count"));
    prefetchCacheItems = self->_prefetchCacheItems;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __47__UICollectionView__resetPrefetchedCachedCells__block_invoke;
    v17[3] = &unk_1E16BCEA8;
    v6 = v4;
    v18 = v6;
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](prefetchCacheItems, "enumerateKeysAndObjectsUsingBlock:", v17);
    -[NSMutableDictionary removeAllObjects](self->_prefetchCacheItems, "removeAllObjects");
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v14 != v10)
            objc_enumerationMutation(v7);
          -[UICollectionView _reusePrefetchedCell:](self, "_reusePrefetchedCell:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i), (_QWORD)v13);
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
      }
      while (v9);
    }

  }
}

- (UICollectionViewData)_collectionViewData
{
  return self->_collectionViewData;
}

- (BOOL)_needsReload
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 27) & 1;
}

- (id)_existingVisibleCells
{
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  UICollectionViewLayout *layout;
  id obj;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;
  CGRect v33;
  CGRect v34;

  v32 = *MEMORY[0x1E0C80C00];
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController)
    && !-[UICollectionView _isOperatingWithPresentationValues](self, "_isOperatingWithPresentationValues"))
  {
    -[UICollectionView _visibleBounds](self, "_visibleBounds");
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;
    -[_UICollectionViewSubviewManager visibleCells]((uint64_t *)self->_subviewManager);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v11, "mutableCopy");

    v26 = objc_alloc_init(MEMORY[0x1E0CB3788]);
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    obj = v12;
    v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v13)
    {
      v14 = v13;
      v15 = 0;
      v16 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v28 != v16)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
          objc_msgSend(v18, "_layoutAttributes");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "indexPath");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          -[UICollectionView _indexPathBeforeShadowUpdatesForIndexPath:](self, "_indexPathBeforeShadowUpdatesForIndexPath:", v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v21)
            objc_msgSend(v26, "addIndex:", v15 + i);
          objc_msgSend(v18, "_layoutAttributes");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          layout = self->_layout;
          objc_msgSend(v22, "frame");
          -[UICollectionViewLayout _orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:](layout, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v22);
          v34.origin.x = v4;
          v34.origin.y = v6;
          v34.size.width = v8;
          v34.size.height = v10;
          if (!CGRectIntersectsRect(v33, v34))
            objc_msgSend(v26, "addIndex:", v15 + i);

        }
        v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
        v15 += i;
      }
      while (v14);
    }

    objc_msgSend(obj, "removeObjectsAtIndexes:", v26);
  }
  else
  {
    -[_UICollectionViewSubviewManager visibleCells]((uint64_t *)self->_subviewManager);
    obj = (id)objc_claimAutoreleasedReturnValue();
  }
  return obj;
}

- (id)_identityTracker:(BOOL)a3
{
  _UIIndexPathIdentityTracker *identityTracker;
  BOOL v5;
  _UIIndexPathIdentityTracker *v6;
  _UIIndexPathIdentityTracker *v7;

  identityTracker = self->_identityTracker;
  if (identityTracker)
    v5 = 1;
  else
    v5 = !a3;
  if (!v5)
  {
    v6 = (_UIIndexPathIdentityTracker *)-[_UIIndexPathIdentityTracker initWithCollectionView:]((id *)[_UIIndexPathIdentityTracker alloc], self);
    v7 = self->_identityTracker;
    self->_identityTracker = v6;

    identityTracker = self->_identityTracker;
  }
  return identityTracker;
}

- (NSIndexPath)indexPathForCell:(UICollectionViewCell *)cell
{
  void *v4;
  void *v5;

  -[UICollectionView _indexPathForView:ofType:](self, "_indexPathForView:ofType:", cell, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _translatePresentationIndexPathToDataSourceIndexPathAsNeeded:](self, "_translatePresentationIndexPathToDataSourceIndexPathAsNeeded:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSIndexPath *)v5;
}

- (void)_cellBackgroundChangedForSelectionOrHighlight:(id)a3
{
  void *v4;
  id v5;

  -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_cellBackgroundOrBottomSeparatorChangedAtIndexPath:separatorOnly:", v5, 0);

  }
}

- (id)_indexPathForCell:(id)a3
{
  return -[UICollectionView _indexPathForView:ofType:](self, "_indexPathForView:ofType:", a3, 0);
}

- (id)_translatePresentationIndexPathToDataSourceIndexPathAsNeeded:(id)a3
{
  id v4;
  id v5;
  void *v6;

  v4 = a3;
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController)
    && !-[UICollectionView _isOperatingWithPresentationValues](self, "_isOperatingWithPresentationValues"))
  {
    -[_UICollectionViewShadowUpdatesController indexPathBeforeShadowUpdates:](self->_dragAndDropController, "indexPathBeforeShadowUpdates:", v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = v4;
  }
  v6 = v5;

  return v6;
}

- (UIContextMenuInteraction)contextMenuInteraction
{
  return self->_contextMenuInteraction;
}

void __30__UICollectionView_reloadData__block_invoke_3(uint64_t a1)
{
  -[UICollectionViewData invalidate:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192), 0);
}

- (void)_addIndexPathsRequiringPreferredAttributes:(uint64_t)a1
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2;
  if (a1)
  {
    v4 = *(void **)(a1 + 2600);
    v7 = v3;
    if (v4)
    {
      objc_msgSend(v4, "unionOrderedSet:", v3);
    }
    else
    {
      v5 = objc_msgSend(v3, "mutableCopy");
      v6 = *(void **)(a1 + 2600);
      *(_QWORD *)(a1 + 2600) = v5;

    }
    v3 = v7;
  }

}

- (unint64_t)_updateVisibleCellsNow:(BOOL)a3
{
  unint64_t v3;
  _BOOL4 v4;
  int64_t updateVisibleCellsRecursionCount;
  unint64_t v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t didScrollNotificationSuspensionCount;
  CGFloat v18;
  CGFloat v19;
  UICollectionViewLayout *layout;
  UICollectionViewData *collectionViewData;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  UICollectionViewLayout *v32;
  double v33;
  double v34;
  uint64_t v35;
  void *v36;
  NSMutableOrderedSet *indexPathsRequiringPreferredAttributes;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  UICollectionReusableView *v45;
  unint64_t v46;
  UICollectionReusableView *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  NSObject *v55;
  NSObject *v56;
  void *v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  UICollectionReusableView *v61;
  NSObject *v62;
  NSObject *v63;
  UICollectionReusableView *v64;
  NSObject *v65;
  NSObject *v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  id *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  __int16 v83;
  _BOOL4 v84;
  void *v85;
  _QWORD *v86;
  id v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double x;
  double y;
  void *v105;
  char v106;
  CGFloat v107;
  CGFloat v108;
  void (**invalidationBlock)(void);
  id v110;
  int64_t v111;
  _UICollectionViewFeedbackLoopDebugger *v112;
  _UICollectionViewFeedbackLoopDebugger *debugger;
  _UICollectionViewFeedbackLoopDebugger *v114;
  int v115;
  int v116;
  uint64_t v117;
  NSObject *v119;
  int64_t v120;
  id v121;
  NSObject *v122;
  NSObject *v123;
  UICollectionReusableView *firstResponderView;
  void *v125;
  unint64_t v126;
  void *v127;
  void *v129;
  _BOOL4 v130;
  _BOOL4 v131;
  uint64_t v132;
  _UICollectionViewSubviewManager *v133;
  id v134;
  unint64_t v135;
  void *v136;
  _QWORD v137[6];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _QWORD v142[4];
  id v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint8_t v148[128];
  uint8_t buf[4];
  UICollectionView *v150;
  __int16 v151;
  UICollectionReusableView *v152;
  __int16 v153;
  void *v154;
  uint8_t v155[4];
  UICollectionView *v156;
  __int16 v157;
  int64_t v158;
  __int16 v159;
  id v160;
  uint64_t v161;
  CGRect v162;

  v161 = *MEMORY[0x1E0C80C00];
  if (self->_reloadingSuspendedCount > 0)
    return 0;
  v4 = a3;
  if (self->_updateAnimationCount >= 1 && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x100000000000000) == 0)
    return 0;
  updateVisibleCellsRecursionCount = self->_updateVisibleCellsRecursionCount;
  v7 = qword_1EDDC65D0;
  if (!qword_1EDDC65D0)
  {
    v7 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v7, (unint64_t *)&qword_1EDDC65D0);
  }
  if ((*(_BYTE *)v7 & 1) != 0)
  {
    v119 = *(id *)(v7 + 8);
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      v120 = self->_updateVisibleCellsRecursionCount;
      -[UICollectionView _visibleBounds](self, "_visibleBounds");
      NSStringFromCGRect(v162);
      v121 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v155 = 134218498;
      v156 = self;
      v157 = 2048;
      v158 = v120;
      v159 = 2112;
      v160 = v121;
      _os_log_impl(&dword_185066000, v119, OS_LOG_TYPE_ERROR, "_updateVisibleCellsNow: %p; recursionCount=%ld, _visibleBounds=%@",
        v155,
        0x20u);

    }
  }
  v130 = -[UICollectionViewLayout _wantsUpdateVisibleCellsPassNotifications](self->_layout, "_wantsUpdateVisibleCellsPassNotifications");
  if (v130)
    -[UICollectionViewLayout _willPerformUpdateVisibleCellsPass](self->_layout, "_willPerformUpdateVisibleCellsPass");
  -[UIView _focusSystem](self, "_focusSystem");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "_lockEnvironment:", self);
  -[UIScrollView _contentInsetIncludingDecorations](self, "_contentInsetIncludingDecorations");
  v10 = v9;
  v12 = v11;
  v13 = +[UIView _isInAnimationBlockWithAnimationsEnabled](UIView, "_isInAnimationBlockWithAnimationsEnabled");
  if (v13)
    v13 = (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x40000000) != 0
       && -[UICollectionView _shouldFadeCellsForBoundChangeWhileRotating](self, "_shouldFadeCellsForBoundChangeWhileRotating");
  v14 = *((_QWORD *)&self->_collectionViewFlags + 1);
  v15 = 0x2000000;
  if (!(v13 | (v14 >> 25) & 1))
    v15 = 0;
  *((_QWORD *)&self->_collectionViewFlags + 1) = v15 | v14 & 0xFFFFFFFFFDFFFFFFLL;
  -[UICollectionView _suspendReloads](self, "_suspendReloads");
  v16 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if (updateVisibleCellsRecursionCount <= 0)
  {
    didScrollNotificationSuspensionCount = self->_didScrollNotificationSuspensionCount;
    if (!didScrollNotificationSuspensionCount)
    {
      -[UIScrollView contentOffset](self, "contentOffset");
      self->_contentOffsetWhenScrollNotificationsSuspended.x = v18;
      self->_contentOffsetWhenScrollNotificationsSuspended.y = v19;
    }
    self->_didScrollNotificationSuspensionCount = didScrollNotificationSuspensionCount + 1;
  }
  v127 = v8;
  if ((v16 & 0x2000000) != 0)
  {
    -[UICollectionView _resetPrefetchState](self, "_resetPrefetchState");
    -[_UICollectionViewSectionFocusGuideController performLayout](self->_sectionFocusGuideController, "performLayout");
    -[UICollectionViewLayout prepareForAnimatedBoundsChange:](self->_layout, "prepareForAnimatedBoundsChange:", self->_preRotationBounds.origin.x, self->_preRotationBounds.origin.y, self->_preRotationBounds.size.width, self->_preRotationBounds.size.height);
    layout = self->_layout;
    -[UIScrollView contentOffset](self, "contentOffset");
    -[UICollectionViewLayout targetContentOffsetForProposedContentOffset:](layout, "targetContentOffsetForProposedContentOffset:");
    -[UICollectionView _delegateTargetOffsetForProposedContentOffset:](self, "_delegateTargetOffsetForProposedContentOffset:");
    -[UICollectionView setContentOffset:](self, "setContentOffset:");
  }
  else
  {
    -[UICollectionView _restoreOrAdjustContentOffsetIfNecessaryWithInsets:hasUpdatedVisibleCells:isRecursive:]((uint64_t)self, 0, updateVisibleCellsRecursionCount > 0, v10, v12);
  }
  v126 = *((_QWORD *)&self->_collectionViewFlags + 1);
  *((_QWORD *)&self->_collectionViewFlags + 1) = v126 & 0xFFFFFFD7FFFFFFFFLL | 0x800000000;
  v133 = self->_subviewManager;
  collectionViewData = self->_collectionViewData;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  -[UICollectionViewData layoutAttributesForElementsInRect:](collectionViewData, v22, v23, v24, v25);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    *((_QWORD *)&self->_collectionViewFlags + 1) &= 0xFFFFFFFFFDFFFEFFLL;
  -[UICollectionViewData collectionViewContentRect]((uint64_t)self->_collectionViewData);
  -[UICollectionView _setContentSizeFromLayout:isRecursivelyUpdatingVisibleCells:](self, "_setContentSizeFromLayout:isRecursivelyUpdatingVisibleCells:", updateVisibleCellsRecursionCount > 0, v26, v27);
  if ((v16 & 0x2000000) != 0)
  {
    v28 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v142[0] = MEMORY[0x1E0C809B0];
    v142[1] = 3221225472;
    v142[2] = __43__UICollectionView__updateVisibleCellsNow___block_invoke;
    v142[3] = &unk_1E16BDCC0;
    v29 = v28;
    v143 = v29;
    v30 = v29;
    if (v133)
    {
      -[_UICollectionViewSubviewCollection enumerateAllViewsWithEnumerator:](&v133->_visibleViews->super.isa, (uint64_t)v142);
      v30 = v143;
    }
    objc_msgSend(v29, "sortUsingComparator:", &__block_literal_global_109);
    v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:copyItems:", v129, 1);
    v32 = self->_layout;
    -[UIScrollView contentOffset](self, "contentOffset");
    -[UICollectionViewLayout _prepareToAnimateFromCollectionViewItems:atContentOffset:toItems:atContentOffset:](v32, "_prepareToAnimateFromCollectionViewItems:atContentOffset:toItems:atContentOffset:", v29, v31, self->_lastLayoutOffset.x, self->_lastLayoutOffset.y, v33, v34);

  }
  -[_UICollectionViewOrthogonalScrollerSectionController layoutScrollViews]((uint64_t)self->_orthogonalScrollerController);
  -[UICollectionView _layoutSectionContainerViews](self, "_layoutSectionContainerViews");
  v35 = (uint64_t)v133;
  v135 = v16;
  v132 = updateVisibleCellsRecursionCount;
  v131 = v4;
  if (v4)
  {
    v36 = (void *)-[NSMutableOrderedSet copy](self->_indexPathsRequiringPreferredAttributes, "copy");
    indexPathsRequiringPreferredAttributes = self->_indexPathsRequiringPreferredAttributes;
    self->_indexPathsRequiringPreferredAttributes = 0;

    if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x8000000) != 0)
    {
      v69 = qword_1EDDC65E0;
      if (!qword_1EDDC65E0)
      {
        v69 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v69, (unint64_t *)&qword_1EDDC65E0);
      }
      if ((*(_BYTE *)v69 & 1) != 0)
      {
        v123 = *(NSObject **)(v69 + 8);
        if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v155 = 134217984;
          v156 = self;
          _os_log_impl(&dword_185066000, v123, OS_LOG_TYPE_ERROR, "_processIndexPathsRequiringPreferredAttributes: cv == %p; skipping because we need a reload",
            v155,
            0xCu);
        }
      }
    }
    else
    {
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v125 = v36;
      v38 = v36;
      v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v144, v155, 16);
      if (v39)
      {
        v40 = v39;
        v41 = *(_QWORD *)v145;
        v134 = v38;
        do
        {
          v42 = 0;
          do
          {
            if (*(_QWORD *)v145 != v41)
              objc_enumerationMutation(v38);
            v43 = *(void **)(*((_QWORD *)&v144 + 1) + 8 * v42);
            if (-[UICollectionView _indexPathIsValid:](self, "_indexPathIsValid:", v43))
            {
              -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v43);
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              if (v44)
              {
                -[_UICollectionViewSubviewManager visibleCellAtIndexPath:]((id **)self->_subviewManager, (uint64_t)v43);
                v45 = (UICollectionReusableView *)objc_claimAutoreleasedReturnValue();
                if (v45)
                {
                  v46 = qword_1EDDC65E8;
                  if (!qword_1EDDC65E8)
                  {
                    v46 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                    atomic_store(v46, (unint64_t *)&qword_1EDDC65E8);
                  }
                  if ((*(_BYTE *)v46 & 1) != 0)
                  {
                    v55 = *(NSObject **)(v46 + 8);
                    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                    {
                      v56 = v55;
                      objc_msgSend(v43, "_ui_shortDescription");
                      v57 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 134218498;
                      v150 = self;
                      v151 = 2112;
                      v152 = v45;
                      v153 = 2112;
                      v154 = v57;
                      _os_log_impl(&dword_185066000, v56, OS_LOG_TYPE_ERROR, "_processIndexPathsRequiringPreferredAttributes: cv == %p; recomputing preferred attributes for e"
                        "xisting cell: %@; index path: %@",
                        buf,
                        0x20u);

                    }
                  }
                  -[UICollectionView _recomputePreferredAttributesForInvalidatedView:originalAttributes:](self, "_recomputePreferredAttributesForInvalidatedView:originalAttributes:", v45, v44);
                }
                else
                {
                  -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", v43);
                  v47 = (UICollectionReusableView *)objc_claimAutoreleasedReturnValue();
                  if (v47)
                  {
                    v48 = qword_1EDDC65F0;
                    if (!qword_1EDDC65F0)
                    {
                      v48 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                      atomic_store(v48, (unint64_t *)&qword_1EDDC65F0);
                    }
                    if ((*(_BYTE *)v48 & 1) != 0)
                    {
                      v58 = *(NSObject **)(v48 + 8);
                      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 134218242;
                        v150 = self;
                        v151 = 2112;
                        v152 = v47;
                        _os_log_impl(&dword_185066000, v58, OS_LOG_TYPE_ERROR, "_processIndexPathsRequiringPreferredAttributes: cv == %p; recomputing preferred attributes for"
                          " cell in prefetch cache: %@",
                          buf,
                          0x16u);
                      }
                    }
                    *(_BYTE *)&v47->super.super._responderFlags |= 3u;
                  }
                  else if (-[UICollectionView _hasFocusedCellForIndexPath:shouldUsePreUpdateData:](self, "_hasFocusedCellForIndexPath:shouldUsePreUpdateData:", v43, 0))
                  {
                    v49 = qword_1EDDC65F8;
                    if (!qword_1EDDC65F8)
                    {
                      v49 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                      atomic_store(v49, (unint64_t *)&qword_1EDDC65F8);
                    }
                    if ((*(_BYTE *)v49 & 1) != 0)
                    {
                      v59 = *(NSObject **)(v49 + 8);
                      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
                      {
                        v60 = v59;
                        -[UICollectionView _focusedItemState](self, "_focusedItemState");
                        v61 = (UICollectionReusableView *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 134218242;
                        v150 = self;
                        v151 = 2112;
                        v152 = v61;
                        _os_log_impl(&dword_185066000, v60, OS_LOG_TYPE_ERROR, "_processIndexPathsRequiringPreferredAttributes: cv == %p; recomputing preferred attributes for"
                          " focused cell: %@",
                          buf,
                          0x16u);

                      }
                    }
                    -[UICollectionView _focusedItemState](self, "_focusedItemState");
                    v50 = (_QWORD *)objc_claimAutoreleasedReturnValue();
                    -[_UICollectionViewFocusedItemState cell](v50);
                    v51 = (void *)objc_claimAutoreleasedReturnValue();

                    objc_msgSend(v51, "_invalidatePreferredAttributes");
                  }
                  else if (self->_firstResponderViewType == 1
                         && -[NSIndexPath isEqual:](self->_firstResponderIndexPath, "isEqual:", v43))
                  {
                    v52 = qword_1EDDC6600;
                    if (!qword_1EDDC6600)
                    {
                      v52 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                      atomic_store(v52, (unint64_t *)&qword_1EDDC6600);
                    }
                    if ((*(_BYTE *)v52 & 1) != 0)
                    {
                      v65 = *(NSObject **)(v52 + 8);
                      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
                      {
                        firstResponderView = self->_firstResponderView;
                        v66 = v65;
                        objc_msgSend(v43, "_ui_shortDescription");
                        v67 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 134218498;
                        v150 = self;
                        v151 = 2112;
                        v152 = firstResponderView;
                        v153 = 2112;
                        v154 = v67;
                        _os_log_impl(&dword_185066000, v66, OS_LOG_TYPE_ERROR, "_processIndexPathsRequiringPreferredAttributes: cv == %p; recomputing preferred attributes for"
                          " first responder cell: %@; index path: %@",
                          buf,
                          0x20u);

                      }
                    }
                    -[UICollectionReusableView _invalidatePreferredAttributes](self->_firstResponderView, "_invalidatePreferredAttributes");
                  }
                  else
                  {
                    v53 = qword_1EDDC6608;
                    if (!qword_1EDDC6608)
                    {
                      v53 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                      atomic_store(v53, (unint64_t *)&qword_1EDDC6608);
                    }
                    if ((*(_BYTE *)v53 & 1) != 0)
                    {
                      v62 = *(NSObject **)(v53 + 8);
                      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
                      {
                        v63 = v62;
                        objc_msgSend(v43, "_ui_shortDescription");
                        v64 = (UICollectionReusableView *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 134218242;
                        v150 = self;
                        v151 = 2112;
                        v152 = v64;
                        _os_log_impl(&dword_185066000, v63, OS_LOG_TYPE_ERROR, "_processIndexPathsRequiringPreferredAttributes: cv == %p; creating cell for item at index path: %@",
                          buf,
                          0x16u);

                      }
                    }
                  }
                  -[UICollectionView _preparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](self, "_preparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", v43, v44, 1, 0, 1);
                  v54 = (void *)objc_claimAutoreleasedReturnValue();
                  -[_UICollectionViewSubviewManager setVisibleCell:atIndexPath:]((uint64_t)self->_subviewManager, (uint64_t)v54, (uint64_t)v43);

                  v38 = v134;
                }

              }
            }
            ++v42;
          }
          while (v40 != v42);
          v68 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v144, v155, 16);
          v40 = v68;
        }
        while (v68);
      }

      v35 = (uint64_t)v133;
      v16 = v135;
      v36 = v125;
    }

  }
  -[_UICollectionViewSubviewManager allVisibleViewsSubviewCollection](v35);
  v70 = (id *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _currentPromiseFulfillmentCell](self, "_currentPromiseFulfillmentCell");
  v71 = (void *)objc_claimAutoreleasedReturnValue();

  if (v71)
  {
    -[UICollectionView _currentPromiseFulfillmentCell](self, "_currentPromiseFulfillmentCell");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v72);
    v73 = (void *)objc_claimAutoreleasedReturnValue();

    if (v73 && v70)
      objc_msgSend(v70[1], "removeObjectForKey:", v73);

  }
  v74 = objc_msgSend(v129, "count");
  v75 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v74);
  v138 = 0u;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v76 = v129;
  v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v138, v148, 16);
  if (v77)
  {
    v78 = v77;
    v79 = *(_QWORD *)v139;
    do
    {
      v80 = 0;
      do
      {
        if (*(_QWORD *)v139 != v79)
          objc_enumerationMutation(v76);
        v81 = *(_QWORD *)(*((_QWORD *)&v138 + 1) + 8 * v80);
        v82 = -[UICollectionView _visibleViewForLayoutAttributes:](self, "_visibleViewForLayoutAttributes:", v81);
        if (v82)
        {
          if (!v81)
          {
            v84 = 0;
            goto LABEL_97;
          }
          v83 = *(_WORD *)(v81 + 288);
          if ((v83 & 1) == 0)
          {
            v84 = (v83 & 3) == 0;
LABEL_97:
            -[UIBarButtonItemGroup _items]((id *)v81);
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            v86 = -[UICollectionViewLayoutAttributes __indexPath]((_QWORD *)v81);
            if (v84)
              -[_UICollectionViewSubviewCollection removeViewForSupplementaryOfKind:atIndexPath:]((uint64_t)v70, (uint64_t)v85, (uint64_t)v86);
            else
              -[_UICollectionViewSubviewCollection removeViewForDecorationOfKind:atIndexPath:]((uint64_t)v70, (uint64_t)v85, (uint64_t)v86);

            v16 = v135;
            goto LABEL_107;
          }
          v87 = v82;
          v88 = -[UICollectionViewLayoutAttributes __indexPath]((_QWORD *)v81);
          if (v70)
            objc_msgSend(v70[1], "removeObjectForKey:", v88);
          -[UICollectionView _notifyWillDisplayCellIfNeeded:forIndexPath:](self, "_notifyWillDisplayCellIfNeeded:forIndexPath:", v87, -[UICollectionViewLayoutAttributes __indexPath]((_QWORD *)v81));
        }
        else if ((v16 & 0x2000000) != 0 || (objc_msgSend((id)v81, "isHidden") & 1) == 0)
        {
          objc_msgSend(v75, "addObject:", v81);
        }
LABEL_107:
        ++v80;
      }
      while (v78 != v80);
      v89 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v138, v148, 16);
      v78 = v89;
    }
    while (v89);
  }

  -[UICollectionView _removeVisibleViews:fadeForBoundsChange:](self, "_removeVisibleViews:fadeForBoundsChange:", v70, (v16 >> 25) & 1);
  v90 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v90 & 0x80) == 0)
  {
    v91 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v90 & 0xFFFFFFFFFFFFFDFFLL;
    *((_WORD *)&self->_collectionViewFlags + 8) = v91;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v91);
  }
  if ((v90 & 0x200) != 0
    && -[UICollectionView _useIdleObserverForCellPrefetching](self, "_useIdleObserverForCellPrefetching"))
  {
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](self->_prefetchCacheItems, "enumerateKeysAndObjectsUsingBlock:", &__block_literal_global_439);
  }
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x10000000000) != 0)
  {
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v92 = objc_claimAutoreleasedReturnValue();
    -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", 0);
    v93 = qword_1EDDC65D8;
    if (!qword_1EDDC65D8)
    {
      v93 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v93, (unint64_t *)&qword_1EDDC65D8);
    }
    if ((*(_BYTE *)v93 & 1) != 0)
    {
      v122 = *(id *)(v93 + 8);
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v155 = 134218242;
        v156 = self;
        v157 = 2112;
        v158 = v92;
        _os_log_impl(&dword_185066000, v122, OS_LOG_TYPE_ERROR, "[UICV %p] Handling updateFocusAfterLoadingCells. Item focused before reload: %@", v155, 0x16u);
      }

    }
  }
  else
  {
    v92 = 0;
  }
  v136 = (void *)v92;
  if (v131)
    v3 = -[UICollectionView _createVisibleViewsForAttributes:fadeForBoundsChange:notifyLayoutForVisibleCellsPass:](self, "_createVisibleViewsForAttributes:fadeForBoundsChange:notifyLayoutForVisibleCellsPass:", v75, (v16 >> 25) & 1, v130);
  else
    v3 = 0;
  v94 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v94 & 0x80) != 0)
  {
    -[UICollectionView performSelector:withObject:afterDelay:](self, "performSelector:withObject:afterDelay:", sel__resumeReloads, 0, 0.0);
  }
  else
  {
    -[UICollectionView _visibleBounds](self, "_visibleBounds");
    self->_visibleBounds.origin.x = v95;
    self->_visibleBounds.origin.y = v96;
    self->_visibleBounds.size.width = v97;
    self->_visibleBounds.size.height = v98;
    if ((v90 & 0x200) == 0
      || (-[UICollectionView _updateLayoutAttributesForExistingVisibleViewsFadingForBoundsChange:](self, "_updateLayoutAttributesForExistingVisibleViewsFadingForBoundsChange:", (v16 >> 25) & 1), dyld_program_sdk_at_least()))
    {
      -[UICollectionView _processViewSpecificInvalidationsForVisibleViews](self, "_processViewSpecificInvalidationsForVisibleViews");
    }
    if ((v16 & 0x2000000) != 0)
    {
      -[UICollectionViewLayout _finalizeCollectionViewItemAnimations](self->_layout, "_finalizeCollectionViewItemAnimations");
      -[UICollectionViewLayout finalizeAnimatedBoundsChange](self->_layout, "finalizeAnimatedBoundsChange");
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    -[UICollectionView _prepareClonedViewsForTransitionLayout](self, "_prepareClonedViewsForTransitionLayout");
  *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x40000000uLL;
  -[UIScrollView contentOffset](self, "contentOffset");
  v100 = v99;
  v102 = v101;
  x = self->_lastLayoutOffset.x;
  y = self->_lastLayoutOffset.y;
  -[UIView window](self, "window");
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  v106 = objc_msgSend(v105, "isRotating");

  if ((v106 & 1) == 0)
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    self->_lastLayoutOffset.x = v107;
    self->_lastLayoutOffset.y = v108;
  }
  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFF7FFFFFFFFLL | (((v126 >> 35) & 1) << 35);
  if ((v94 & 0x80) == 0)
    -[UICollectionView _resumeReloads](self, "_resumeReloads");
  invalidationBlock = (void (**)(void))self->_invalidationBlock;
  if (invalidationBlock)
  {
    invalidationBlock[2]();
    v110 = self->_invalidationBlock;
    self->_invalidationBlock = 0;

  }
  objc_msgSend(v127, "_unlockEnvironment:", self);
  -[UICollectionView _updateFocusAfterLoadingVisibleCellsIfNeeded:](self, "_updateFocusAfterLoadingVisibleCellsIfNeeded:", v136);
  if (v130)
    -[UICollectionViewLayout _didPerformUpdateVisibleCellsPassWithLayoutOffset:](self->_layout, "_didPerformUpdateVisibleCellsPassWithLayoutOffset:", v100 - x, v102 - y);
  -[UICollectionView _restoreOrAdjustContentOffsetIfNecessaryWithInsets:hasUpdatedVisibleCells:isRecursive:]((uint64_t)self, 1, v132 > 0, v10, v12);
  if (v131 && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x100) != 0)
  {
    -[UICollectionViewData invalidate:]((uint64_t)self->_collectionViewData, 1);
    v111 = self->_updateVisibleCellsRecursionCount;
    self->_updateVisibleCellsRecursionCount = v111 + 1;
    if (v111 >= 15 && !self->_debugger)
    {
      v112 = objc_alloc_init(_UICollectionViewFeedbackLoopDebugger);
      debugger = self->_debugger;
      self->_debugger = v112;

    }
    v3 += -[UICollectionView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
    --self->_updateVisibleCellsRecursionCount;
    v114 = self->_debugger;
    if (v114)
    {
      self->_debugger = 0;

    }
  }
  -[UICollectionView _clearContentOffsetRestorationAnchor](self, "_clearContentOffsetRestorationAnchor");
  v115 = *((unsigned __int16 *)&self->_collectionViewFlags + 8);
  v116 = v115 | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  if ((v115 & 0x2000) != 0)
  {
    -[UICollectionView _clearTargetIndexPathForScrolling](self, "_clearTargetIndexPathForScrolling");
    v116 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                     + 18) << 16);
  }
  v117 = *((_QWORD *)&self->_collectionViewFlags + 1);
  *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
  *((_QWORD *)&self->_collectionViewFlags + 1) = v117;
  *((_WORD *)&self->_collectionViewFlags + 8) = v116;
  *((_BYTE *)&self->_collectionViewFlags + 18) = (v116 & 0xFFFBFFFF) >> 16;
  -[UICollectionView _ensureFocusedViewIsNotHidden](self, "_ensureFocusedViewIsNotHidden");
  if (v132 <= 0)
  {
    -[UICollectionView _setUpCompletionHandlerForAnimationInterruptionIfNecessary](self, "_setUpCompletionHandlerForAnimationInterruptionIfNecessary");
    -[UICollectionView _resumeDidScrollNotifications]((CGFloat *)self);
    if (v133)
      -[NSHashTable removeAllObjects](v133->_viewsPreparingForDisplay, "removeAllObjects");
  }
  v137[0] = MEMORY[0x1E0C809B0];
  v137[1] = 3221225472;
  v137[2] = __43__UICollectionView__updateVisibleCellsNow___block_invoke_444;
  v137[3] = &unk_1E16BCFB8;
  v137[4] = self;
  v137[5] = a2;
  -[_UICollectionViewSubviewManager removeAllDequeuedViewsWithEnumerator:]((uint64_t)v133, (uint64_t)v137);

  return v3;
}

- (id)_visibleViewForLayoutAttributes:(id)a3
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  id **v7;
  uint64_t v8;
  _QWORD *v9;

  if (a3)
  {
    v4 = *((_WORD *)a3 + 144);
    v5 = 1;
    if ((v4 & 2) != 0)
      v5 = 2;
    if ((v4 & 1) != 0)
      v6 = 0;
    else
      v6 = v5;
    v7 = (id **)-[UICollectionView _subviewManager]((id *)&self->super.super.super.super.isa);
    v8 = *((_QWORD *)a3 + 1);
  }
  else
  {
    v7 = (id **)-[UICollectionView _subviewManager]((id *)&self->super.super.super.super.isa);
    v6 = 0;
    v8 = 0;
  }
  v9 = -[UICollectionViewLayoutAttributes __indexPath](a3);
  return -[_UICollectionViewSubviewManager visibleViewOfKind:inCategory:atIndexPath:](v7, v8, v6, (uint64_t)v9);
}

- (id)_subviewManager
{
  if (a1)
    a1 = (id *)a1[363];
  return a1;
}

- (void)_notifyWillDisplayCellIfNeeded:(id)a3 forIndexPath:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  v6 = a4;
  if ((objc_msgSend(v8, "_hasNotifiedIsDisplaying") & 1) == 0)
  {
    if ((*(_QWORD *)&self->_collectionViewFlags & 0x100) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "collectionView:willDisplayCell:forItemAtIndexPath:", self, v8, v6);

    }
    objc_msgSend(v8, "_notifyIsDisplaying:", 1);
  }

}

- (uint64_t)_restoreOrAdjustContentOffsetIfNecessaryWithInsets:(char)a3 hasUpdatedVisibleCells:(double)a4 isRecursive:(double)a5
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  id v12;
  double x;
  double y;
  double width;
  double height;
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  void *v50;
  double v51;
  double v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  double v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  NSObject *v82;
  void *v83;
  NSObject *v84;
  NSObject *v85;
  void *v86;
  void *v87;
  void *v88;
  NSObject *v89;
  NSObject *v90;
  void *v91;
  void *v92;
  NSObject *v93;
  NSObject *v94;
  void *v95;
  void *v96;
  NSObject *v97;
  void *v98;
  NSObject *v99;
  void *v100;
  CGFloat v101;
  CGFloat v102;
  char v103;
  uint8_t buf[4];
  uint64_t v105;
  __int16 v106;
  void *v107;
  __int16 v108;
  void *v109;
  __int16 v110;
  void *v111;
  uint64_t v112;
  CGPoint v113;
  CGPoint v114;
  CGPoint v115;
  CGSize v116;
  CGPoint v117;
  CGPoint v118;
  CGRect v119;
  UIEdgeInsets v120;
  UIEdgeInsets v121;
  UIEdgeInsets v122;
  UIEdgeInsets v123;
  UIEdgeInsets v124;
  UIEdgeInsets v125;
  CGRect v126;
  CGRect v127;

  v112 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v9 = result;
  result = objc_msgSend(*(id *)(result + 2072), "_estimatesSizes");
  if ((result & 1) == 0)
  {
    objc_msgSend((id)v9, "_clearContentOffsetRestorationAnchor");
    result = objc_msgSend((id)v9, "_clearTargetIndexPathForScrolling");
  }
  v10 = *(unsigned __int16 *)(v9 + 2656) | (*(unsigned __int8 *)(v9 + 2658) << 16);
  *(_WORD *)(v9 + 2656) = *(_WORD *)(v9 + 2656);
  *(_BYTE *)(v9 + 2658) = (v10 & 0xFFF7FFFF) >> 16;
  v11 = *(_QWORD *)(v9 + 2944);
  if (v11)
  {
    if (objc_msgSend((id)v9, "_validateScrollingTargetIndexPath:raisingExceptionIfNecessary:", v11, 0))
    {
      v12 = *(id *)(v9 + 2944);
      if (!v12)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v78, "handleFailureInMethod:object:file:lineNumber:description:", sel__contentOffsetForCurrentScrollingTargetWithContentInsets_, v9, CFSTR("UICollectionView.m"), 5277, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("targetIndexPathForScrolling != nil"));

      }
      v119.origin.x = -[UICollectionView _frameOfElementAtScrollingTargetIndexPath:](v9, v12);
      x = v119.origin.x;
      y = v119.origin.y;
      width = v119.size.width;
      height = v119.size.height;
      if (CGRectIsNull(v119))
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        v80 = objc_opt_class();
        objc_msgSend(v12, "_ui_shortDescription");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "handleFailureInMethod:object:file:lineNumber:description:", sel__contentOffsetForCurrentScrollingTargetWithContentInsets_, v9, CFSTR("UICollectionView.m"), 5280, CFSTR("<%@ %p> received null frame for scrolling target at index path %@.\nCollection View: %@.\nLayout: %@"), v80, v9, v81, v9, *(_QWORD *)(v9 + 2072));

      }
      v17 = objc_msgSend(*(id *)(v9 + 2072), "_layoutAxis");
      v18 = *(void **)(v9 + 2968);
      v19 = *(double *)(v9 + 2992);
      v101 = *(double *)(v9 + 2984);
      v102 = *(double *)(v9 + 2976);
      v20 = *(double *)(v9 + 3000);
      if (_UISizeEqualToSizeWithPrecision(v19, v20, width, height, 0.0001))
      {
        objc_msgSend((id)v9, "contentOffset");
        v22 = v21;
        v24 = v23;
        v25 = _UIPointValueForAxis(v17, x, y);
        v26 = v25 + _UIPointValueForAxis(v17, *(double *)(v9 + 2952), *(double *)(v9 + 2960));
        if (v17 == 2)
          v27 = a4;
        else
          v27 = a5;
        v28 = _UISetPointValueForAxis(v17, v22, v24, v26 - v27);
        v30 = *(_QWORD *)(v9 + 2192);
        if (v30)
        {
          v31 = *(double *)(v30 + 80);
          v32 = *(double *)(v30 + 88);
        }
        else
        {
          v32 = 0.0;
          v31 = 0.0;
        }
        v33 = -[UICollectionView _clampedContentOffset:forScrollableAreaGivenContentSize:inScrollView:](v9, (void *)v9, v28, v29, v31, v32);
        v35 = v34;
      }
      else
      {
        v54 = qword_1EDDC65B8;
        if (!qword_1EDDC65B8)
        {
          v54 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v54, (unint64_t *)&qword_1EDDC65B8);
        }
        if ((*(_BYTE *)v54 & 1) != 0)
        {
          v84 = *(NSObject **)(v54 + 8);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            v85 = v84;
            v126.origin.y = v101;
            v126.origin.x = v102;
            v126.size.width = v19;
            v126.size.height = v20;
            NSStringFromCGRect(v126);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            v127.origin.x = x;
            v127.origin.y = y;
            v127.size.width = width;
            v127.size.height = height;
            NSStringFromCGRect(v127);
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "_ui_shortDescription");
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 134218754;
            v105 = v9;
            v106 = 2112;
            v107 = v86;
            v108 = 2112;
            v109 = v87;
            v110 = 2112;
            v111 = v88;
            _os_log_impl(&dword_185066000, v85, OS_LOG_TYPE_ERROR, "_contentOffsetForCurrentScrollingTarget: cv == %p; updating scrolling target info for change in size of ta"
              "rget %@ from %@ to %@",
              buf,
              0x2Au);

          }
        }
        objc_msgSend((id)v9, "_contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:", v12, v18, *(double *)(v9 + 3008), *(double *)(v9 + 3016), *(double *)(v9 + 3024), *(double *)(v9 + 3032));
        v33 = v55;
        v35 = v56;
        -[UICollectionView _storeScrollingTargetInfoForIndexPath:frame:scrollPosition:additionalInsets:]((id *)v9, v12, v18, x, y, width, height, *(double *)(v9 + 3008), *(double *)(v9 + 3016), *(double *)(v9 + 3024), *(double *)(v9 + 3032));
      }

      if (objc_msgSend((id)v9, "isScrollAnimating"))
      {
        v57 = qword_1EDDC6598;
        if (!qword_1EDDC6598)
        {
          v57 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v57, (unint64_t *)&qword_1EDDC6598);
        }
        if ((*(_BYTE *)v57 & 1) != 0)
        {
          v89 = *(NSObject **)(v57 + 8);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          {
            v90 = v89;
            v117.x = v33;
            v117.y = v35;
            NSStringFromCGPoint(v117);
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(v9 + 2944), "_ui_shortDescription");
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 134218498;
            v105 = v9;
            v106 = 2112;
            v107 = v91;
            v108 = 2112;
            v109 = v92;
            _os_log_impl(&dword_185066000, v90, OS_LOG_TYPE_ERROR, "_adjustContentOffset: cv == %p; Updating scroll animation to target offset %@ for %@",
              buf,
              0x20u);

          }
        }
        return objc_msgSend((id)v9, "_updateScrollAnimationForChangedTargetOffset:", v33, v35);
      }
      v58 = qword_1EDDC65A0;
      if (!qword_1EDDC65A0)
      {
        v58 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v58, (unint64_t *)&qword_1EDDC65A0);
      }
      if ((*(_BYTE *)v58 & 1) != 0)
      {
        v93 = *(NSObject **)(v58 + 8);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
        {
          v94 = v93;
          v118.x = v33;
          v118.y = v35;
          NSStringFromCGPoint(v118);
          v95 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v9 + 2944), "_ui_shortDescription");
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 134218498;
          v105 = v9;
          v106 = 2112;
          v107 = v95;
          v108 = 2112;
          v109 = v96;
          _os_log_impl(&dword_185066000, v94, OS_LOG_TYPE_ERROR, "_adjustContentOffset: cv == %p; Setting content offset to %@ for scrolling to %@",
            buf,
            0x20u);

        }
      }
      v59 = *(void **)(v9 + 3240);
      if (v59)
      {
        v60 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend((id)v9, "contentOffset");
        NSStringFromCGPoint(v113);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v114.x = v33;
        v114.y = v35;
        NSStringFromCGPoint(v114);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(v9 + 2944), "_ui_shortDescription");
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        NSStringFromCGPoint(*(CGPoint *)(v9 + 2952));
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v9, "_effectiveContentInset");
        NSStringFromUIEdgeInsets(v122);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v9, "safeAreaInsets");
        NSStringFromUIEdgeInsets(v123);
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v60, "stringWithFormat:", CFSTR("content offset changing from %@ to %@ for scrolling to %@ with offset %@; effectiveInsets: %@; safeAreaInsets: %@"),
          v61,
          v62,
          v63,
          v64,
          v65,
          v66);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "recordGenericChangeWithMessage:", v67);

      }
      v49 = *(unsigned __int16 *)(v9 + 2656) | (*(unsigned __int8 *)(v9 + 2658) << 16);
      *(_WORD *)(v9 + 2656) = *(_WORD *)(v9 + 2656);
      *(_BYTE *)(v9 + 2658) = (v49 | 0x10000u) >> 16;
      v50 = (void *)v9;
      v51 = v33;
      v52 = v35;
LABEL_44:
      result = objc_msgSend(v50, "setContentOffset:", v51, v52);
      v68 = *(unsigned __int16 *)(v9 + 2656);
      v69 = (v68 | (*(unsigned __int8 *)(v9 + 2658) << 16)) & 0xFFFEFFFF;
      *(_WORD *)(v9 + 2656) = v68;
      *(_BYTE *)(v9 + 2658) = (v69 | v49 & 0x10000) >> 16;
      return result;
    }
    v53 = qword_1EDDC65A8;
    if (!qword_1EDDC65A8)
    {
      v53 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v53, (unint64_t *)&qword_1EDDC65A8);
    }
    if ((*(_BYTE *)v53 & 1) != 0)
    {
      v82 = *(NSObject **)(v53 + 8);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        v83 = *(void **)(v9 + 2944);
        *(_DWORD *)buf = 134218242;
        v105 = v9;
        v106 = 2112;
        v107 = v83;
        _os_log_impl(&dword_185066000, v82, OS_LOG_TYPE_ERROR, "_adjustContentOffset: cv == %p; Clearing invalid scrolling target %@",
          buf,
          0x16u);
      }
    }
    return objc_msgSend((id)v9, "_clearTargetIndexPathForScrolling");
  }
  else if (*(_QWORD *)(v9 + 2920))
  {
    v103 = 0;
    v36 = -[UICollectionView _contentOffsetForRestoringPositionToCurrentRestorationAnchorWithContentInsets:shouldApply:](v9, &v103, a4, a5);
    if (v103)
    {
      v38 = v36;
      v39 = v37;
      v40 = *(void **)(v9 + 3240);
      if (v40)
      {
        v41 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(*(id *)(v9 + 2920), "_ui_shortDescription");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        NSStringFromCGPoint(*(CGPoint *)(v9 + 2928));
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionViewData layoutAttributesForItemAtIndexPath:](*(_QWORD *)(v9 + 2192), *(void **)(v9 + 2920));
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v9, "_effectiveContentInset");
        NSStringFromUIEdgeInsets(v120);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v9, "safeAreaInsets");
        NSStringFromUIEdgeInsets(v121);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "stringWithFormat:", CFSTR("Setting content offset for restoring relative scroll position to %@ with offset %@; attributes: %@; effectiveInsets: %@; safeAreaInsets: %@"),
          v42,
          v43,
          v44,
          v45,
          v46);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "recordGenericChangeWithMessage:", v47);

      }
      if ((a2 & 1) == 0 && (a3 & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0C99E40], "orderedSetWithObject:", *(_QWORD *)(v9 + 2920));
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionView _addIndexPathsRequiringPreferredAttributes:](v9, v48);

      }
      v49 = *(unsigned __int16 *)(v9 + 2656) | (*(unsigned __int8 *)(v9 + 2658) << 16);
      *(_WORD *)(v9 + 2656) = *(_WORD *)(v9 + 2656);
      *(_BYTE *)(v9 + 2658) = (v49 | 0x10000u) >> 16;
      v50 = (void *)v9;
      v51 = v38;
      v52 = v39;
      goto LABEL_44;
    }
    v70 = qword_1EDDC65B0;
    if (!qword_1EDDC65B0)
    {
      v70 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v70, (unint64_t *)&qword_1EDDC65B0);
    }
    if ((*(_BYTE *)v70 & 1) != 0)
    {
      v97 = *(NSObject **)(v70 + 8);
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
      {
        v98 = *(void **)(v9 + 2920);
        v99 = v97;
        objc_msgSend(v98, "_ui_shortDescription");
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 134218242;
        v105 = v9;
        v106 = 2112;
        v107 = v100;
        _os_log_impl(&dword_185066000, v99, OS_LOG_TYPE_ERROR, "_adjustContentOffset: cv == %p; Clearing invalid restoration anchor %@",
          buf,
          0x16u);

      }
    }
    return objc_msgSend((id)v9, "_clearContentOffsetRestorationAnchor", v36);
  }
  else if ((v10 & 0x40000) != 0)
  {
    result = objc_msgSend((id)v9, "isDragging");
    if ((result & 1) == 0)
    {
      if (objc_msgSend((id)v9, "isDecelerating"))
      {
        objc_msgSend((id)v9, "contentOffset");
        objc_msgSend((id)v9, "contentOffset");
        return objc_msgSend((id)v9, "_updateDecelerationLastOffset:");
      }
      else
      {
        v71 = *(void **)(v9 + 3240);
        if (v71)
        {
          v72 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend((id)v9, "contentOffset");
          NSStringFromCGPoint(v115);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend((id)v9, "contentSize");
          NSStringFromCGSize(v116);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend((id)v9, "_effectiveContentInset");
          NSStringFromUIEdgeInsets(v124);
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend((id)v9, "safeAreaInsets");
          NSStringFromUIEdgeInsets(v125);
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v72, "stringWithFormat:", CFSTR("Adjusting content offset after layout. Current contentOffset: %@; contentSize: %@; effectiveInsets: %@; safeAreaInsets: %@."),
            v73,
            v74,
            v75,
            v76);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v71, "recordGenericChangeWithMessage:", v77);

        }
        return objc_msgSend((id)v9, "_adjustContentOffsetIfNecessary");
      }
    }
  }
  return result;
}

- (void)_clearContentOffsetRestorationAnchor
{
  NSIndexPath *contentOffsetRestorationAnchor;

  contentOffsetRestorationAnchor = self->_contentOffsetRestorationAnchor;
  self->_contentOffsetRestorationAnchor = 0;

  self->_offsetToContentOffsetRestorationAnchor = (CGPoint)*MEMORY[0x1E0C9D538];
}

- (void)_suspendReloads
{
  ++self->_reloadingSuspendedCount;
}

- (void)_resumeReloads
{
  int64_t v2;
  uint64_t v3;
  int v4;

  v2 = self->_reloadingSuspendedCount - 1;
  self->_reloadingSuspendedCount = v2;
  if (!v2)
  {
    v3 = *((_QWORD *)&self->_collectionViewFlags + 1);
    if ((v3 & 0x80) != 0)
    {
      v4 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                     + 18) << 16);
      *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
      *((_QWORD *)&self->_collectionViewFlags + 1) = v3 & 0xFFFFFFFFFFFFFF7FLL;
      *((_WORD *)&self->_collectionViewFlags + 8) = v4;
      *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v4);
      -[UICollectionView reloadData](self, "reloadData");
    }
    else if ((v3 & 0x100) != 0)
    {
      -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
    }
  }
}

- (void)_resumeDidScrollNotifications
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  CGFloat v6;
  CGFloat v7;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  CGFloat v14;
  CGFloat v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  CGFloat *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;
  CGPoint v26;
  CGPoint v27;

  v25 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *((_QWORD *)a1 + 353);
    if (v2 <= 0)
    {
      if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
        {
          v19 = 138412290;
          v20 = a1;
          _os_log_fault_impl(&dword_185066000, v12, OS_LOG_TYPE_FAULT, "Unbalanced calls to suspend/resumeDidScrollNotifications for collection view %@.", (uint8_t *)&v19, 0xCu);
        }

      }
      else
      {
        v10 = qword_1EDDC6630;
        if (!qword_1EDDC6630)
        {
          v10 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v10, (unint64_t *)&qword_1EDDC6630);
        }
        v11 = *(NSObject **)(v10 + 8);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v19 = 138412290;
          v20 = a1;
          _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "Unbalanced calls to suspend/resumeDidScrollNotifications for collection view %@.", (uint8_t *)&v19, 0xCu);
        }
      }
    }
    else
    {
      v3 = v2 - 1;
      *((_QWORD *)a1 + 353) = v3;
      if (!v3)
      {
        -[CGFloat contentOffset](a1, "contentOffset");
        v6 = v5;
        v7 = v4;
        if (a1[351] != v5 || a1[352] != v4)
        {
          v9 = qword_1EDDC6638;
          if (!qword_1EDDC6638)
          {
            v9 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v9, (unint64_t *)&qword_1EDDC6638);
          }
          if ((*(_BYTE *)v9 & 1) != 0)
          {
            v13 = *(NSObject **)(v9 + 8);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              v14 = a1[351];
              v15 = a1[352];
              v16 = v13;
              v26.x = v14;
              v26.y = v15;
              NSStringFromCGPoint(v26);
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v27.x = v6;
              v27.y = v7;
              NSStringFromCGPoint(v27);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = 134218498;
              v20 = a1;
              v21 = 2112;
              v22 = v17;
              v23 = 2112;
              v24 = v18;
              _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "cv == %p notifying didScroll for change in content offset from %@ to %@", (uint8_t *)&v19, 0x20u);

            }
          }
          -[CGFloat _notifyDidScroll](a1, "_notifyDidScroll");
        }
      }
    }
  }
}

- (void)_setContentSize:(CGSize)a3 skipContentOffsetAdjustment:(BOOL)a4
{
  _BOOL4 v4;
  double height;
  double width;
  double v8;
  double v9;
  _BOOL4 v10;
  _BOOL8 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  _QWORD v19[7];

  v4 = a4;
  height = a3.height;
  width = a3.width;
  -[UIScrollView contentSize](self, "contentSize");
  v10 = v9 == height && v8 == width;
  v11 = -[UIScrollView _isAutomaticContentOffsetAdjustmentEnabled](self, "_isAutomaticContentOffsetAdjustmentEnabled");
  -[UIScrollView _setAutomaticContentOffsetAdjustmentEnabled:](self, "_setAutomaticContentOffsetAdjustmentEnabled:", !v4);
  -[UIScrollView contentOffset](self, "contentOffset");
  v13 = v12;
  v15 = v14;
  if (v4 || !+[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled"))
  {
    -[UICollectionView setContentSize:](self, "setContentSize:", width, height);
    -[UIScrollView _setAutomaticContentOffsetAdjustmentEnabled:](self, "_setAutomaticContentOffsetAdjustmentEnabled:", v11);
    if (!v10 && v4)
    {
      -[UIScrollView contentOffset](self, "contentOffset");
      if (vabdd_f64(v13, v17) < 0.0001 && vabdd_f64(v15, v16) < 0.0001)
      {
        v18 = ((*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16) | 0x40000u) >> 16;
        *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
        *((_BYTE *)&self->_collectionViewFlags + 18) = v18;
      }
    }
  }
  else
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __64__UICollectionView__setContentSize_skipContentOffsetAdjustment___block_invoke;
    v19[3] = &unk_1E16B4E70;
    v19[4] = self;
    *(double *)&v19[5] = width;
    *(double *)&v19[6] = height;
    -[UIScrollView performWhileAnimatingAutomaticContentOffsetAdjustments:](self, "performWhileAnimatingAutomaticContentOffsetAdjustments:", v19);
    -[UIScrollView _setAutomaticContentOffsetAdjustmentEnabled:](self, "_setAutomaticContentOffsetAdjustmentEnabled:", v11);
  }
}

- (void)_layoutSectionContainerViews
{
  NSMutableDictionary *sectionToContainerViewMap;
  _QWORD v3[5];

  sectionToContainerViewMap = self->_sectionToContainerViewMap;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __48__UICollectionView__layoutSectionContainerViews__block_invoke;
  v3[3] = &unk_1E16BCD20;
  v3[4] = self;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](sectionToContainerViewMap, "enumerateKeysAndObjectsUsingBlock:", v3);
}

- (void)_updateFocusAfterLoadingVisibleCellsIfNeeded:(id)a3
{
  id v4;
  uint64_t v5;
  int v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v4 = a3;
  v5 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v5 & 0x10000000000) != 0)
  {
    v6 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v5 & 0xFFFFFEFFFFFFFFFFLL;
    *((_WORD *)&self->_collectionViewFlags + 8) = v6;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v6);
    v8[1] = 3221225472;
    v8[2] = __65__UICollectionView__updateFocusAfterLoadingVisibleCellsIfNeeded___block_invoke;
    v8[3] = &unk_1E16B1B50;
    v8[4] = self;
    v7 = v4;
    v8[0] = MEMORY[0x1E0C809B0];
    v9 = v4;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v8);

    v4 = v7;
  }

}

- (void)_processViewSpecificInvalidationsForVisibleViews
{
  NSMutableSet *v3;
  NSMutableSet *invalidatedItemIndexPaths;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  char v15;
  char v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSMutableDictionary *invalidatedSupplementaryIndexPaths;
  uint64_t v28;
  NSMutableDictionary *invalidatedDecorationIndexPaths;
  NSMutableSet *obj;
  uint64_t v32;
  _QWORD v33[6];
  _QWORD v34[6];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = self->_invalidatedItemIndexPaths;
  invalidatedItemIndexPaths = self->_invalidatedItemIndexPaths;
  self->_invalidatedItemIndexPaths = 0;

  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  obj = v3;
  v5 = -[NSMutableSet countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
  if (v5)
  {
    v6 = v5;
    v32 = *(_QWORD *)v40;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v40 != v32)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v7);
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        -[UICollectionView _reorderedItems](self, "_reorderedItems");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v36;
          while (2)
          {
            for (i = 0; i != v11; ++i)
            {
              if (*(_QWORD *)v36 != v12)
                objc_enumerationMutation(v9);
              objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * i), "targetIndexPath");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              v15 = objc_msgSend(v14, "isEqual:", v8);

              if ((v15 & 1) != 0)
              {
                v16 = 1;
                goto LABEL_16;
              }
            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
            if (v11)
              continue;
            break;
          }
        }
        v16 = 0;
LABEL_16:

        v17 = -[UICollectionView _visibleCellForIndexPath:](self, "_visibleCellForIndexPath:", v8);
        if (v17)
        {
          v18 = v17;
          objc_msgSend(v17, "_invalidatePreferredAttributes");
          -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v8);
          v19 = objc_claimAutoreleasedReturnValue();
          if (v19)
          {
            v20 = (void *)v19;
            -[UICollectionView _checkForPreferredAttributesInView:originalAttributes:](self, "_checkForPreferredAttributesInView:originalAttributes:", v18, v19);
            if ((v16 & 1) == 0)
              -[UICollectionView _applyLayoutAttributes:toView:](self, "_applyLayoutAttributes:toView:", v20, v18);
          }
          else
          {
            if ((objc_msgSend(v18, "_isInUpdateAnimation") & 1) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "_ui_shortDescription");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionViewLayout layoutAttributesForItemAtIndexPath:](self->_layout, "layoutAttributesForItemAtIndexPath:", v8);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "_layoutAttributes");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionViewData dataSourceCountsDescription](self->_collectionViewData);
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 6279, CFSTR("UICollectionView internal inconsistency: No attributes returned for invalidated item. Index path: %@; cell: %@; attributes from layout: %@; attributes from cell: %@; collection view: %@; data source counts: %@."),
                v23,
                v18,
                v24,
                v25,
                self,
                v26);

            }
            v20 = 0;
          }
        }
        else
        {
          -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", v8);
          v21 = objc_claimAutoreleasedReturnValue();
          v20 = (void *)v21;
          if (v21)
            *(_BYTE *)(v21 + 8) |= 3u;
        }

        ++v7;
      }
      while (v7 != v6);
      v6 = -[NSMutableSet countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
    }
    while (v6);
  }

  invalidatedSupplementaryIndexPaths = self->_invalidatedSupplementaryIndexPaths;
  v28 = MEMORY[0x1E0C809B0];
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = __68__UICollectionView__processViewSpecificInvalidationsForVisibleViews__block_invoke;
  v34[3] = &unk_1E16BD0A8;
  v34[4] = self;
  v34[5] = a2;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](invalidatedSupplementaryIndexPaths, "enumerateKeysAndObjectsUsingBlock:", v34);
  invalidatedDecorationIndexPaths = self->_invalidatedDecorationIndexPaths;
  v33[0] = v28;
  v33[1] = 3221225472;
  v33[2] = __68__UICollectionView__processViewSpecificInvalidationsForVisibleViews__block_invoke_2;
  v33[3] = &unk_1E16BD0A8;
  v33[4] = self;
  v33[5] = a2;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](invalidatedDecorationIndexPaths, "enumerateKeysAndObjectsUsingBlock:", v33);

}

- (void)_ensureFocusedViewIsNotHidden
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  UICollectionViewLayout *layout;
  void *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  _BOOL4 v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  int has_internal_diagnostics;
  int v36;
  NSObject *v37;
  unint64_t v38;
  NSObject *v39;
  CGFloat v40;
  CGFloat v41;
  uint8_t buf[4];
  id v43;
  uint64_t v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;

  v44 = *MEMORY[0x1E0C80C00];
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
    v5 = *(void **)(v3 + 8);
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    layout = self->_layout;
    objc_msgSend(v6, "_layoutAttributes");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "frame");
    -[UICollectionViewLayout _orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:](layout, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v8);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;

    if (objc_msgSend(v6, "_isHiddenForReuse"))
    {
      -[UICollectionView _visibleBounds](self, "_visibleBounds");
      x = v45.origin.x;
      y = v45.origin.y;
      width = v45.size.width;
      height = v45.size.height;
      if (!CGRectIsNull(v45))
      {
        v46.origin.x = v10;
        v46.origin.y = v12;
        v46.size.width = v14;
        v46.size.height = v16;
        if (!CGRectIsNull(v46))
        {
          v47.origin.x = x;
          v47.origin.y = y;
          v47.size.width = width;
          v47.size.height = height;
          v48 = CGRectStandardize(v47);
          v21 = v48.origin.x;
          v22 = v48.origin.y;
          v23 = v48.size.width;
          v24 = v48.size.height;
          v48.origin.x = v10;
          v48.origin.y = v12;
          v48.size.width = v14;
          v48.size.height = v16;
          v49 = CGRectStandardize(v48);
          v25 = v49.origin.x;
          v26 = v49.origin.y;
          v27 = v49.size.width;
          v28 = v49.size.height;
          v40 = v22;
          v41 = v21;
          v49.origin.x = v21;
          v49.origin.y = v22;
          v49.size.width = v23;
          v49.size.height = v24;
          v29 = CGRectGetMinX(v49) + 0.0001;
          v50.origin.x = v25;
          v50.origin.y = v26;
          v50.size.width = v27;
          v50.size.height = v28;
          if (v29 <= CGRectGetMaxX(v50))
          {
            v51.origin.y = v40;
            v51.origin.x = v21;
            v51.size.width = v23;
            v51.size.height = v24;
            v31 = CGRectGetMaxX(v51) + -0.0001;
            v52.origin.x = v25;
            v52.origin.y = v26;
            v52.size.width = v27;
            v52.size.height = v28;
            v30 = v31 >= CGRectGetMinX(v52);
          }
          else
          {
            v30 = 0;
          }
          v53.origin.x = v21;
          v53.origin.y = v40;
          v53.size.width = v23;
          v53.size.height = v24;
          v32 = CGRectGetMinY(v53) + 0.0001;
          v54.origin.x = v25;
          v54.origin.y = v26;
          v54.size.width = v27;
          v54.size.height = v28;
          if (v32 <= CGRectGetMaxY(v54))
          {
            v55.origin.x = v41;
            v55.origin.y = v40;
            v55.size.width = v23;
            v55.size.height = v24;
            v33 = CGRectGetMaxY(v55) + -0.0001;
            v56.origin.x = v25;
            v56.origin.y = v26;
            v56.size.width = v27;
            v56.size.height = v28;
            if (v33 >= CGRectGetMinY(v56) && v30)
            {
              has_internal_diagnostics = os_variant_has_internal_diagnostics();
              v36 = -[_UICollectionViewSubviewManager isViewInReuseQueue:]((uint64_t)self->_subviewManager, v6);
              if (has_internal_diagnostics)
              {
                if (v36)
                {
                  __UIFaultDebugAssertLog();
                  v37 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    v43 = v6;
                    _os_log_fault_impl(&dword_185066000, v37, OS_LOG_TYPE_FAULT, "Making focused cell visible that is still in the reuse queue: %@", buf, 0xCu);
                  }

                }
              }
              else if (v36)
              {
                v38 = _ensureFocusedViewIsNotHidden___s_category;
                if (!_ensureFocusedViewIsNotHidden___s_category)
                {
                  v38 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                  atomic_store(v38, (unint64_t *)&_ensureFocusedViewIsNotHidden___s_category);
                }
                v39 = *(NSObject **)(v38 + 8);
                if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v43 = v6;
                  _os_log_impl(&dword_185066000, v39, OS_LOG_TYPE_ERROR, "Making focused cell visible that is still in the reuse queue: %@", buf, 0xCu);
                }
              }
              objc_msgSend(v6, "_setHiddenForReuse:", 0);
            }
          }
        }
      }
    }
  }

}

- (UICollectionViewCell)_currentPromiseFulfillmentCell
{
  return self->_currentPromiseFulfillmentCell;
}

- (CGRect)_effectiveVisibleBoundsForBounds:(CGRect)a3
{
  double top;
  double left;
  double v5;
  double v6;
  double v7;
  double v8;
  CGRect result;

  top = self->_visibleRectInsets.top;
  left = self->_visibleRectInsets.left;
  v5 = a3.origin.x + left;
  v6 = a3.origin.y + top;
  v7 = a3.size.width - (left + self->_visibleRectInsets.right);
  v8 = a3.size.height - (top + self->_visibleRectInsets.bottom);
  result.size.height = v8;
  result.size.width = v7;
  result.origin.y = v6;
  result.origin.x = v5;
  return result;
}

- (void)_setUpCompletionHandlerForAnimationInterruptionIfNecessary
{
  _QWORD v3[5];

  if (+[UIView _isInAnimationBlockWithAnimationsEnabled](UIView, "_isInAnimationBlockWithAnimationsEnabled"))
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __78__UICollectionView__setUpCompletionHandlerForAnimationInterruptionIfNecessary__block_invoke;
    v3[3] = &unk_1E16B3FD8;
    v3[4] = self;
    +[UIView _addCompletion:](UIView, "_addCompletion:", v3);
  }
}

- (id)_visibleCellForIndexPath:(id)a3
{
  id **v4;

  v4 = (id **)-[UICollectionView _subviewManager]((id *)&self->super.super.super.super.isa);
  return -[_UICollectionViewSubviewManager visibleCellAtIndexPath:](v4, (uint64_t)a3);
}

- (void)_geometryChanged:(id *)a3 forAncestor:(id)a4
{
  id v6;
  id WeakRetained;
  void *v8;
  unint64_t var0;
  objc_super v10;

  v6 = a4;
  if (v6
    && -[UICollectionView _canDeriveVisibleBoundsFromContainingScrollView](self, "_canDeriveVisibleBoundsFromContainingScrollView"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_containerScrollView);
    _UITreeFirstCommonAncestor(v6, WeakRetained, sel_superview);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      var0 = a3->var0;
      if (WeakRetained == v6)
      {
        if ((var0 & 0xC) != 0)
          -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 0);
      }
      else
      {
        if ((var0 & 6) != 0)
        {
          -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 0);
          var0 = a3->var0;
        }
        if ((var0 & 0x10) != 0)
          -[UICollectionView _updateDerivesVisibleBoundsFromContainingScrollView](self, "_updateDerivesVisibleBoundsFromContainingScrollView");
      }
    }

  }
  v10.receiver = self;
  v10.super_class = (Class)UICollectionView;
  -[UIScrollView _geometryChanged:forAncestor:](&v10, sel__geometryChanged_forAncestor_, a3, v6);

}

- (void)bringSubviewToFront:(id)a3
{
  id v4;
  void *v5;
  int v6;
  objc_super v7;

  v4 = a3;
  -[UICollectionView subviewRouter]((id *)&self->super.super.super.super.isa);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "shouldBringSubviewToFront:", v4);

  if (v6)
  {
    v7.receiver = self;
    v7.super_class = (Class)UICollectionView;
    -[UIView bringSubviewToFront:](&v7, sel_bringSubviewToFront_, v4);
  }

}

void __106__UICollectionView__updatePreferredAttributesForItemsInCurrentUpdateWithRect_newlyVisible_includeInserts___block_invoke(uint64_t a1, void *a2, void *a3)
{
  char v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = objc_msgSend(a3, "_arePreferredAttributesValid");
  v6 = v8;
  if ((v5 & 1) == 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2200), "finalIndexPathForInitialIndexPath:", v8);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);

    v6 = v8;
  }

}

uint64_t __43__UICollectionView__enumerateVisibleViews___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (id)_visibleSupplementaryViewOfKind:(id)a3 atIndexPath:(id)a4 isDecorationView:(BOOL)a5
{
  if (a5)
    -[UICollectionView _visibleDecorationViewOfKind:atIndexPath:](self, "_visibleDecorationViewOfKind:atIndexPath:", a3, a4);
  else
    -[UICollectionView _visibleSupplementaryViewOfKind:atIndexPath:](self, "_visibleSupplementaryViewOfKind:atIndexPath:", a3, a4);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)_visibleDecorationViewOfKind:(id)a3 atIndexPath:(id)a4
{
  return -[_UICollectionViewSubviewManager visibleDecorationOfKind:atIndexPath:]((uint64_t *)self->_subviewManager, (uint64_t)a3, (uint64_t)a4);
}

- (id)_visibleSupplementaryViewOfKind:(id)a3 atIndexPath:(id)a4
{
  return -[_UICollectionViewSubviewManager visibleSupplementaryOfKind:atIndexPath:]((uint64_t *)self->_subviewManager, (uint64_t)a3, (uint64_t)a4);
}

- (id)_viewAnimationsForView:(id)a3 startingLayoutAttributes:(id)a4 endingLayoutAttributes:(id)a5 startingLayout:(id)a6 endingLayout:(id)a7 animationSetup:(id)a8 animationCompletion:(id)a9 enableCustomAnimations:(BOOL)a10 customAnimationsType:(unint64_t)a11
{
  id v17;
  _WORD *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  unsigned __int16 *v24;
  id v25;
  id v26;
  int v27;
  char v28;
  void *v29;
  _WORD *v30;
  void *v31;
  unsigned int v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  unsigned __int16 *v38;
  unsigned int v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  unsigned __int16 *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  uint64_t v56;
  unsigned __int16 *v57;
  _BOOL4 v58;
  id v59;
  _QWORD v60[5];
  unsigned __int16 *v61;
  id v62;
  _QWORD v63[5];
  unsigned __int16 *v64;
  id v65;
  _QWORD v66[2];
  UICollectionViewAnimation *(*v67)(uint64_t, void *, void *, void *, int, uint64_t);
  void *v68;
  UICollectionView *v69;
  unsigned __int16 *v70;
  id v71;
  id v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;

  v59 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = a9;
  v58 = -[UICollectionView _isReordering](self, "_isReordering");
  if (v18)
  {
    if ((v18[144] & 1) != 0)
      v23 = 1;
    else
      v23 = 2;
  }
  else
  {
    v23 = 2;
  }
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 3221225472;
  v67 = __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke;
  v68 = &unk_1E16BD120;
  v69 = self;
  v24 = (unsigned __int16 *)v17;
  v75 = a10;
  v70 = v24;
  v73 = a11;
  v25 = v21;
  v71 = v25;
  v26 = v22;
  v72 = v26;
  v74 = v23;
  v27 = objc_msgSend(v19, "_isInLayoutTransition");
  v28 = objc_msgSend(v19, "_disablesDoubleSidedAnimations");
  if (v27
    && (v28 & 1) == 0
    && !-[UICollectionViewLayoutAttributes _isEquivalentTo:]((uint64_t)v24, (uint64_t)v18))
  {
    if (v24)
    {
      v32 = v24[144];
      if ((v32 & 1) != 0)
      {
        objc_msgSend(v24, "indexPath");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "finalLayoutAttributesForDisappearingItemAtIndexPath:", v37);
        v30 = (_WORD *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v18, "indexPath");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "initialLayoutAttributesForAppearingItemAtIndexPath:", v34);
        v38 = (unsigned __int16 *)objc_claimAutoreleasedReturnValue();
        goto LABEL_17;
      }
      v33 = (v32 >> 1) & 1;
    }
    else
    {
      v33 = 0;
    }
    -[UIBarButtonItemGroup _items]((id *)v24);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "indexPath");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    if (v33)
    {
      objc_msgSend(v19, "finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:", v34, v35);
      v30 = (_WORD *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v18, "indexPath");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:", v34, v36);
    }
    else
    {
      objc_msgSend(v19, "finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:", v34, v35);
      v30 = (_WORD *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v18, "indexPath");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:", v34, v36);
    }
    v56 = objc_claimAutoreleasedReturnValue();

    v38 = (unsigned __int16 *)v56;
LABEL_17:

    v29 = v59;
    if (!v30)
    {
      if (v18 && -[UICollectionViewLayoutAttributes _isEquivalentTo:]((uint64_t)v38, (uint64_t)v24))
      {
        v30 = v18;
      }
      else
      {
        v30 = (_WORD *)objc_msgSend(v24, "copy");
        objc_msgSend(v30, "setAlpha:", 0.0);
      }
    }
    if (!v38)
    {
      if (v24 && -[UICollectionViewLayoutAttributes _isEquivalentTo:]((uint64_t)v30, (uint64_t)v18))
      {
        v38 = v24;
      }
      else
      {
        v38 = (unsigned __int16 *)objc_msgSend(v18, "copy");
        objc_msgSend(v38, "setAlpha:", 0.0);
      }
    }
    v57 = v38;
    if (!-[UICollectionViewLayoutAttributes _isEquivalentTo:]((uint64_t)v30, (uint64_t)v18)
      || !-[UICollectionViewLayoutAttributes _isEquivalentTo:]((uint64_t)v38, (uint64_t)v24))
    {
      v39 = -[UICollectionViewLayoutAttributes _isTransitionVisibleTo:](v24, v30);
      v40 = v38;
      v41 = v39;
      v42 = -[UICollectionViewLayoutAttributes _isTransitionVisibleTo:](v40, v18);
      if (v41 && v42)
      {
        objc_msgSend(v18, "indexPath");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "setIndexPath:", v43);

        __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke((uint64_t)v66, v59, v19, v30, !v58, 0);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v63[0] = MEMORY[0x1E0C809B0];
        v63[1] = 3221225472;
        v63[2] = __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_7;
        v63[3] = &unk_1E16B47A8;
        v63[4] = self;
        v64 = v57;
        v45 = v59;
        v65 = v45;
        +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v63);
        v67((uint64_t)v66, v45, v20, v18, 0, 0);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", v44, v46, 0);
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        v47 = v57;
        v29 = v59;
LABEL_38:

        goto LABEL_39;
      }
      if (v41)
      {
        objc_msgSend(v18, "indexPath");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "setIndexPath:", v48);

        v49 = v59;
        v50 = v19;
        v51 = v30;
LABEL_37:
        __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke((uint64_t)v66, v49, v50, v51, 0, 1);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v54);
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        v47 = v57;
        goto LABEL_38;
      }
      if (v42)
      {
        v60[0] = MEMORY[0x1E0C809B0];
        v60[1] = 3221225472;
        v60[2] = __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_8;
        v60[3] = &unk_1E16B47A8;
        v60[4] = self;
        v61 = v57;
        v52 = v59;
        v62 = v52;
        +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v60);
        v67((uint64_t)v66, v52, v20, v18, 0, 1);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v53);
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        v47 = v57;
        goto LABEL_38;
      }
    }
    v49 = v59;
    v50 = v20;
    v51 = v18;
    goto LABEL_37;
  }
  v29 = v59;
  __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke((uint64_t)v66, v59, v20, v18, 0, 1);
  v30 = (_WORD *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_39:

  return v31;
}

UICollectionViewAnimation *__198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke(uint64_t a1, void *a2, void *a3, void *a4, int a5, uint64_t a6)
{
  id v11;
  id v12;
  id v13;
  _UICollectionSnapshotView *v14;
  _UICollectionSnapshotView *v15;
  void *v16;
  uint64_t v17;
  _UICollectionSnapshotView *v18;
  _UICollectionSnapshotView *v19;
  id v20;
  uint64_t v21;
  void *v22;
  UICollectionViewAnimation *v23;
  _UICollectionSnapshotView *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  double v31;
  void *v32;
  _QWORD v34[4];
  id v35;
  id v36;
  BOOL v37;
  _QWORD v38[4];
  _UICollectionSnapshotView *v39;
  id v40;
  _QWORD v41[4];
  _UICollectionSnapshotView *v42;
  id v43;
  uint64_t v44;
  _QWORD v45[5];
  _UICollectionSnapshotView *v46;
  id v47;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  if (a5)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2648) |= 0x20000000uLL;
    v14 = [_UICollectionSnapshotView alloc];
    objc_msgSend(*(id *)(a1 + 40), "frame");
    v15 = -[UICollectionReusableView initWithFrame:](v14, "initWithFrame:");
    v15->_snapshottedViewDisablesRasterizationInAnimations = objc_msgSend(v11, "_disableRasterizeInAnimations");
    -[UIView setAutoresizingMask:](v15, "setAutoresizingMask:", 0);
    -[UICollectionReusableView setTranslatesAutoresizingMaskIntoConstraints:](v15, "setTranslatesAutoresizingMaskIntoConstraints:", 1);
    -[UIView _setHostsLayoutEngine:](v15, "_setHostsLayoutEngine:", 1);
    -[UICollectionReusableView _markAsDequeued](v15, "_markAsDequeued");
    objc_msgSend(v11, "snapshotViewAfterScreenUpdates:", 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView bounds](v15, "bounds");
    objc_msgSend(v16, "setBounds:");
    objc_msgSend(v16, "setAutoresizingMask:", 18);
    -[UIView addSubview:](v15, "addSubview:", v16);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2648) &= ~0x20000000uLL;
    if (objc_msgSend(v11, "isHidden"))
      -[UIView setHidden:](v15, "setHidden:", 1);
    v17 = MEMORY[0x1E0C809B0];
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 3221225472;
    v45[2] = __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_2;
    v45[3] = &unk_1E16B47A8;
    v45[4] = *(_QWORD *)(a1 + 32);
    v18 = v15;
    v46 = v18;
    v47 = v11;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v45);
    v41[0] = v17;
    v41[1] = 3221225472;
    v41[2] = __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_3;
    v41[3] = &unk_1E16B47A8;
    v19 = v18;
    v42 = v19;
    v20 = *(id *)(a1 + 40);
    v21 = *(_QWORD *)(a1 + 32);
    v43 = v20;
    v44 = v21;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v41);
    if (*(_BYTE *)(a1 + 80))
    {
      objc_msgSend(v12, "_animationForReusableView:toLayoutAttributes:type:", v19, v13, *(_QWORD *)(a1 + 64));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v22 = 0;
    }
    v23 = -[UICollectionViewAnimation initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:]([UICollectionViewAnimation alloc], "initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:", v19, 0, v13, 0, 0, v22, 0.0, 1.0);
    -[UICollectionViewAnimation addStartupHandler:](v23, "addStartupHandler:", *(_QWORD *)(a1 + 48));
    v38[0] = v17;
    v38[1] = 3221225472;
    v38[2] = __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_4;
    v38[3] = &unk_1E16BC218;
    v39 = v19;
    v40 = *(id *)(a1 + 56);
    v24 = v19;
    -[UICollectionViewAnimation addCompletionHandler:](v23, "addCompletionHandler:", v38);

  }
  else
  {
    if (*(_BYTE *)(a1 + 80))
    {
      objc_msgSend(v12, "_animationForReusableView:toLayoutAttributes:type:", v11, v13, *(_QWORD *)(a1 + 64));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v16 = 0;
    }
    if (objc_msgSend(*(id *)(a1 + 32), "_viewIsReorderedCell:", v11))
    {
      objc_msgSend(v11, "bounds");
      v26 = v25;
      v28 = v27;
      objc_msgSend(v13, "size");
      v30 = v26 != v29;
      if (v28 != v31)
        v30 = 1;
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 3221225472;
      v34[2] = __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_5;
      v34[3] = &unk_1E16BD0F8;
      v37 = v30;
      v35 = v11;
      v36 = v13;
      v32 = _Block_copy(v34);

      v16 = v32;
    }
    v23 = -[UICollectionViewAnimation initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:]([UICollectionViewAnimation alloc], "initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:", v11, *(_QWORD *)(a1 + 72), v13, a6, 0, v16, 0.0, 1.0);
    -[UICollectionViewAnimation addStartupHandler:](v23, "addStartupHandler:", *(_QWORD *)(a1 + 48));
    -[UICollectionViewAnimation addCompletionHandler:](v23, "addCompletionHandler:", *(_QWORD *)(a1 + 56));
  }

  return v23;
}

- (id)_attributesForItemsVisibleDuringCurrentUpdateWithOldVisibleViews:(id)a3 attributesForNewModel:(id)a4
{
  id v6;
  id v7;
  id v8;
  _UICollectionViewSubviewManager *subviewManager;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  _WORD *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[4];
  id v29;
  UICollectionView *v30;
  id v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  subviewManager = self->_subviewManager;
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __107__UICollectionView__attributesForItemsVisibleDuringCurrentUpdateWithOldVisibleViews_attributesForNewModel___block_invoke;
  v28[3] = &unk_1E16BD5F0;
  v22 = v6;
  v29 = v22;
  v30 = self;
  v23 = v8;
  v31 = v23;
  if (subviewManager)
    -[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v28);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v10 = v7;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v25 != v13)
          objc_enumerationMutation(v10);
        v15 = *(_WORD **)(*((_QWORD *)&v24 + 1) + 8 * i);
        v16 = (id)objc_msgSend(v15, "indexPath", v22);
        if (v15)
        {
          if ((v15[144] & 1) != 0)
          {
            v17 = v16;
            v18 = -[UICollectionViewData validatedGlobalIndexForItemAtIndexPath:]((uint64_t)self->_currentUpdate->_newModel, v16);
            if (v18 != 0x7FFFFFFFFFFFFFFFLL
              && -[UICollectionViewUpdate initialGlobalIndexForFinalGlobalIndex:](self->_currentUpdate, "initialGlobalIndexForFinalGlobalIndex:", v18) != 0x7FFFFFFFFFFFFFFFLL)
            {
              objc_msgSend(v23, "setObject:forKeyedSubscript:", v15, v17);
            }
          }
        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    }
    while (v12);
  }

  v19 = v31;
  v20 = v23;

  return v20;
}

- (void)_invalidateLayoutForReload
{
  id v3;

  v3 = objc_alloc_init((Class)objc_msgSend((id)objc_opt_class(), "invalidationContextClass"));
  objc_msgSend(v3, "_setInvalidateDataSourceCounts:", 1);
  objc_msgSend(v3, "_setInvalidateEverything:", 1);
  objc_msgSend(v3, "_setIntent:", 3);
  -[UICollectionViewLayout _invalidateLayoutUsingContext:](self->_layout, "_invalidateLayoutUsingContext:", v3);

}

- (void)_endItemAnimationsWithInvalidationContext:(id)a3 tentativelyForReordering:(BOOL)a4 animator:(id)a5 collectionViewAnimator:(id)a6
{
  id v9;
  id v10;
  unint64_t v11;
  NSObject *v12;
  os_signpost_id_t v13;
  os_signpost_id_t v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  UICollectionViewData *v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  UICollectionViewData *v38;
  UICollectionViewData *collectionViewData;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  NSArray *v46;
  NSArray *originalDeleteItems;
  NSArray *v48;
  NSArray *originalInsertItems;
  int v50;
  void *v51;
  _QWORD *v52;
  id v53;
  uint64_t v54;
  _BOOL4 v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  UICollectionViewUpdateItem *v82;
  void *v83;
  UICollectionViewUpdateItem *v84;
  UICollectionViewUpdateItem *v85;
  void *v86;
  UICollectionViewUpdateItem *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  UICollectionView *v93;
  void *v94;
  void *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t i;
  id *v101;
  void *v102;
  void *v103;
  unint64_t v104;
  _BOOL4 v105;
  id v106;
  void *v107;
  uint64_t v108;
  int v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  _BOOL4 v113;
  void *v114;
  char v115;
  unint64_t j;
  _QWORD *v117;
  _BOOL4 v118;
  void *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  int v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  int v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _BOOL4 v138;
  void *v139;
  char v140;
  unint64_t k;
  _QWORD *v142;
  _BOOL4 v143;
  void *v144;
  void *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  int v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  void *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  id *v159;
  id v160;
  id v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  char *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  int v175;
  uint64_t v176;
  int v177;
  id *v178;
  id v179;
  id v180;
  int v181;
  int v182;
  _BOOL4 v183;
  void *v184;
  void *v185;
  _BOOL4 v186;
  void *v187;
  id v188;
  unint64_t v189;
  void *v190;
  void *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  UICollectionViewData *v200;
  void *v201;
  UICollectionViewUpdate *v202;
  id *v203;
  UICollectionViewUpdate *currentUpdate;
  UICollectionViewUpdate *v205;
  void *v206;
  NSString *v207;
  UICollectionView *v208;
  unint64_t v209;
  NSObject *v210;
  unint64_t v211;
  NSObject *v212;
  UICollectionView *v213;
  UICollectionView *v214;
  _UICollectionViewDragAndDropController *dragAndDropController;
  char v216;
  int64_t v217;
  _QWORD *v218;
  uint64_t m;
  size_t v220;
  _QWORD *v221;
  id v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int64_t v227;
  uint64_t n;
  uint64_t v229;
  char v230;
  void *v231;
  id v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  id v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t ii;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  UICollectionView *v257;
  void *v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  void *v262;
  unint64_t v263;
  UICollectionViewData *v264;
  id v265;
  id v266;
  void *v267;
  char v268;
  void *v269;
  _UICollectionViewFocusedItemState *v270;
  UICollectionViewUpdate *v271;
  _UICollectionViewFocusedItemState *newFocusedItemState;
  unint64_t v273;
  NSObject *v274;
  unint64_t v275;
  unint64_t v276;
  NSObject *v277;
  UICollectionViewUpdate *v278;
  void *v279;
  id updateCompletionHandler;
  NSObject *v281;
  id v282;
  id postUpdateBlock;
  void (**v284)(_QWORD);
  id v285;
  unint64_t v286;
  NSObject *v287;
  os_signpost_id_t v288;
  os_signpost_id_t v289;
  NSObject *v290;
  unint64_t v291;
  NSObject *v292;
  NSObject *v293;
  NSMutableArray *deleteItems;
  NSObject *v295;
  NSMutableArray *insertItems;
  NSObject *v297;
  NSMutableArray *reloadItems;
  NSObject *v299;
  NSMutableArray *moveItems;
  NSObject *v301;
  NSObject *v302;
  void *v303;
  void *v304;
  id v305;
  id v306;
  _BOOL4 v307;
  UICollectionViewData *v308;
  void *v309;
  void *v310;
  id v311;
  void *v313;
  id obj;
  void *v315;
  void *v316;
  int v317;
  void *v318;
  id v319;
  void *v320;
  int v321;
  UICollectionView *v322;
  int64_t v323;
  uint64_t v324;
  id v325;
  _QWORD *v326;
  void *v327;
  char *v328;
  _QWORD *v329;
  UICollectionView *v330;
  void *v331;
  UICollectionViewData *v332;
  uint64_t v333;
  uint64_t v334;
  id v335;
  char *v336;
  void *v337;
  _QWORD *v338;
  void *v339;
  void *v340;
  char *v341;
  id v342;
  _QWORD *v343;
  id v344;
  _QWORD *v345;
  _QWORD block[4];
  id v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  _BYTE v376[128];
  _BYTE v377[128];
  _BYTE v378[128];
  uint8_t v379[128];
  uint8_t buf[4];
  UICollectionView *v381;
  __int16 v382;
  _BYTE v383[10];
  _UICollectionViewDragAndDropController *v384;
  _BYTE v385[128];
  _BYTE v386[128];
  _BYTE v387[128];
  uint64_t v388;

  v307 = a4;
  v388 = *MEMORY[0x1E0C80C00];
  v311 = a3;
  v9 = a5;
  v10 = a6;
  v11 = qword_1EDDC6698;
  if (!qword_1EDDC6698)
  {
    v11 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v11, (unint64_t *)&qword_1EDDC6698);
  }
  v12 = *(id *)(v11 + 8);
  v13 = os_signpost_id_make_with_pointer(*(os_log_t *)(v11 + 8), self);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v14 = v13;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_185066000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v14, "BatchUpdates", ", buf, 2u);
    }
  }

  v310 = (void *)_UISetCurrentFallbackEnvironment(self);
  if (dyld_program_sdk_at_least())
  {
    v15 = v311;
    if (!v311)
      v15 = objc_alloc_init((Class)objc_msgSend((id)objc_opt_class(), "invalidationContextClass"));
    v311 = v15;
    objc_msgSend(v15, "_setIntent:", 8);
  }
  if (dyld_program_sdk_at_least())
    -[UICollectionView _resetAllPrefetchContexts](self, "_resetAllPrefetchContexts");
  else
    -[UICollectionView _resetPrefetchState](self, "_resetPrefetchState");
  ++self->_updateCount;
  v16 = *MEMORY[0x1E0C9D628];
  v17 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v18 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v19 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v20 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((~*((_DWORD *)&self->_collectionViewFlags + 2) & 0x8000004) == 0)
  {
    if ((dyld_program_sdk_at_least() & 1) != 0)
    {
LABEL_130:
      v104 = qword_1EDDC66A0;
      if (!qword_1EDDC66A0)
      {
        v104 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v104, (unint64_t *)&qword_1EDDC66A0);
      }
      if ((*(_BYTE *)v104 & 1) != 0)
      {
        v290 = *(NSObject **)(v104 + 8);
        if (os_log_type_enabled(v290, OS_LOG_TYPE_ERROR))
        {
          v291 = *((_QWORD *)&self->_collectionViewFlags + 1);
          *(_DWORD *)buf = 134218496;
          v381 = self;
          v382 = 1024;
          *(_DWORD *)v383 = (v291 >> 27) & 1;
          *(_WORD *)&v383[4] = 1024;
          *(_DWORD *)&v383[6] = (v291 >> 34) & 1;
          _os_log_impl(&dword_185066000, v290, OS_LOG_TYPE_ERROR, "_endItemAnimations: cv == %p; ignoring batch updates. needsReload: %d; ignoreBatchUpdatesAndFallBackToReloadData: %d",
            buf,
            0x18u);
        }
      }
      *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x400000000uLL;
      -[UICollectionView _resetUpdateItemArrays](self, "_resetUpdateItemArrays");
      v105 = 0;
      goto LABEL_417;
    }
    v20 = *((_QWORD *)&self->_collectionViewFlags + 1);
  }
  if ((v20 & 0x400000000) != 0)
    goto LABEL_130;
  v21 = qword_1EDDC66A8;
  if (!qword_1EDDC66A8)
  {
    v21 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v21, (unint64_t *)&qword_1EDDC66A8);
  }
  if ((*(_BYTE *)v21 & 1) != 0)
  {
    v292 = *(id *)(v21 + 8);
    if (os_log_type_enabled(v292, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v381 = self;
      _os_log_impl(&dword_185066000, v292, OS_LOG_TYPE_ERROR, "_endItemAnimations: cv == %p; processing batch update",
        buf,
        0xCu);
    }

  }
  if (self->_deleteItems)
  {
    v22 = qword_1EDDC66B0;
    if (!qword_1EDDC66B0)
    {
      v22 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v22, (unint64_t *)&qword_1EDDC66B0);
    }
    if ((*(_BYTE *)v22 & 1) != 0)
    {
      v293 = *(id *)(v22 + 8);
      if (os_log_type_enabled(v293, OS_LOG_TYPE_ERROR))
      {
        deleteItems = self->_deleteItems;
        *(_DWORD *)buf = 138412290;
        v381 = (UICollectionView *)deleteItems;
        _os_log_impl(&dword_185066000, v293, OS_LOG_TYPE_ERROR, "Deleting: %@", buf, 0xCu);
      }

    }
  }
  if (self->_insertItems)
  {
    v23 = qword_1EDDC66B8;
    if (!qword_1EDDC66B8)
    {
      v23 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v23, (unint64_t *)&qword_1EDDC66B8);
    }
    if ((*(_BYTE *)v23 & 1) != 0)
    {
      v295 = *(id *)(v23 + 8);
      if (os_log_type_enabled(v295, OS_LOG_TYPE_ERROR))
      {
        insertItems = self->_insertItems;
        *(_DWORD *)buf = 138412290;
        v381 = (UICollectionView *)insertItems;
        _os_log_impl(&dword_185066000, v295, OS_LOG_TYPE_ERROR, "Inserting: %@", buf, 0xCu);
      }

    }
  }
  if (self->_reloadItems)
  {
    v24 = qword_1EDDC66C0;
    if (!qword_1EDDC66C0)
    {
      v24 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v24, (unint64_t *)&qword_1EDDC66C0);
    }
    if ((*(_BYTE *)v24 & 1) != 0)
    {
      v297 = *(id *)(v24 + 8);
      if (os_log_type_enabled(v297, OS_LOG_TYPE_ERROR))
      {
        reloadItems = self->_reloadItems;
        *(_DWORD *)buf = 138412290;
        v381 = (UICollectionView *)reloadItems;
        _os_log_impl(&dword_185066000, v297, OS_LOG_TYPE_ERROR, "Reloading: %@", buf, 0xCu);
      }

    }
  }
  if (self->_moveItems)
  {
    v25 = qword_1EDDC66C8;
    if (!qword_1EDDC66C8)
    {
      v25 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v25, (unint64_t *)&qword_1EDDC66C8);
    }
    if ((*(_BYTE *)v25 & 1) != 0)
    {
      v299 = *(id *)(v25 + 8);
      if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
      {
        moveItems = self->_moveItems;
        *(_DWORD *)buf = 138412290;
        v381 = (UICollectionView *)moveItems;
        _os_log_impl(&dword_185066000, v299, OS_LOG_TYPE_ERROR, "Moving: %@", buf, 0xCu);
      }

    }
  }
  -[UIView _focusSystem](self, "_focusSystem");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "focusedItem");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  v304 = v27;
  _UIFocusEnvironmentContainingView(v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v28, "isDescendantOfView:", self))
  {
    objc_msgSend(v28, "bounds");
    objc_msgSend(v28, "convertRect:toView:", self);
    v16 = v29;
    v17 = v30;
    v18 = v31;
    v19 = v32;
  }
  v303 = v28;
  v305 = v10;
  v306 = v9;
  v33 = self->_collectionViewData;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  -[UICollectionViewData validateLayoutInRectImmediatelyValidatingContentSizeIgnoringSpecificInvalidations:]((uint64_t)v33, v34, v35, v36, v37);
  if (v33)
    *(_BYTE *)&v33->_collectionViewDataFlags |= 0x10u;
  v308 = v33;
  -[UICollectionView _clearSpecificInvalidationLists](self);
  v38 = (UICollectionViewData *)-[UICollectionViewData initWithCollectionView:layout:]([UICollectionViewData alloc], self, self->_layout);
  collectionViewData = self->_collectionViewData;
  self->_collectionViewData = v38;

  -[UICollectionView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", 1);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "sortedArrayUsingSelector:");
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  -[UICollectionView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", 0);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "sortedArrayUsingSelector:");
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  -[UICollectionView _sortedDeduplicatedReloadItems](self, "_sortedDeduplicatedReloadItems");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray sortedArrayUsingSelector:](self->_moveItems, "sortedArrayUsingSelector:", sel_compareIndexPathsForMoves_);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v309 = (void *)objc_msgSend(v45, "mutableCopy");

  v316 = v41;
  v46 = (NSArray *)objc_msgSend(v41, "copy");
  originalDeleteItems = self->_originalDeleteItems;
  self->_originalDeleteItems = v46;

  v315 = v43;
  v48 = (NSArray *)objc_msgSend(v43, "copy");
  originalInsertItems = self->_originalInsertItems;
  self->_originalInsertItems = v48;

  -[UICollectionView _sectionsWithSectionOperationsInUpdateItems:](self, self->_deleteItems);
  v339 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _sectionsWithSectionOperationsInUpdateItems:](self, self->_insertItems);
  v340 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = dyld_program_sdk_at_least();
  v372 = 0u;
  v373 = 0u;
  v374 = 0u;
  v375 = 0u;
  obj = v44;
  v327 = (void *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v372, v387, 16);
  v330 = self;
  if (v327)
  {
    v324 = *(_QWORD *)v373;
    v321 = v50 ^ 1;
    do
    {
      v51 = 0;
      do
      {
        if (*(_QWORD *)v373 != v324)
          objc_enumerationMutation(obj);
        v52 = *(_QWORD **)(*((_QWORD *)&v372 + 1) + 8 * (_QWORD)v51);
        v53 = -[UICollectionViewUpdateItem _indexPath](v52);
        if (v52)
        {
          v54 = v52[1];
          v336 = (char *)v52[2];
          v55 = v52[6] == 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v336 = 0;
          v54 = 0;
          v55 = 0;
        }
        if (((v55 | v321) & 1) != 0
          || (-[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v53),
              v56 = (void *)objc_claimAutoreleasedReturnValue(),
              v56,
              v56))
        {
          v331 = v51;
          v370 = 0u;
          v371 = 0u;
          v368 = 0u;
          v369 = 0u;
          v344 = v316;
          v57 = objc_msgSend(v344, "countByEnumeratingWithState:objects:count:", &v368, v386, 16);
          v341 = v336;
          v334 = v54;
          if (!v57)
            goto LABEL_83;
          v58 = v57;
          v59 = *(_QWORD *)v369;
          v341 = v336;
          while (1)
          {
            v60 = 0;
            do
            {
              if (*(_QWORD *)v369 != v59)
                objc_enumerationMutation(v344);
              v61 = *(_QWORD **)(*((_QWORD *)&v368 + 1) + 8 * v60);
              -[UICollectionViewUpdateItem _indexPath](v61);
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              v63 = objc_msgSend(v62, "isEqual:", v53);

              if (v63)
              {
                objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                -[UICollectionViewUpdateItem _indexPath](v61);
                v68 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v67, "handleFailureInMethod:object:file:lineNumber:description:", a2, v330, CFSTR("UICollectionView.m"), 10444, CFSTR("attempt to delete and reload the same index path (%@)"), v68);

                if (!v61)
                {
LABEL_62:
                  v64 = 0;
LABEL_63:
                  LODWORD(v66) = 0;
                  goto LABEL_64;
                }
              }
              else if (!v61)
              {
                goto LABEL_62;
              }
              v64 = v61[1];
              if (v61[6] != 0x7FFFFFFFFFFFFFFFLL)
                goto LABEL_63;
              if (v52)
                v65 = v52[1];
              else
                v65 = 0;
              if (v64 == v65)
                goto LABEL_77;
              LODWORD(v66) = 1;
LABEL_64:
              if (v64 <= v54)
                v66 = v66;
              else
                v66 = 0;
              v54 -= v66;
              if ((!v52 || v52[6] != 0x7FFFFFFFFFFFFFFFLL) && (!v61 || v61[6] != 0x7FFFFFFFFFFFFFFFLL) && v64 == v54)
              {
                if ((objc_msgSend(v339, "containsIndex:", v64) & 1) == 0)
                {
                  if (v61)
                    v69 = v61[2];
                  else
                    v69 = 0;
                  v341 -= v69 <= (uint64_t)v341;
                }
                v54 = v64;
              }
LABEL_77:
              ++v60;
            }
            while (v58 != v60);
            v70 = objc_msgSend(v344, "countByEnumeratingWithState:objects:count:", &v368, v386, 16);
            v58 = v70;
            if (!v70)
            {
LABEL_83:

              v366 = 0u;
              v367 = 0u;
              v364 = 0u;
              v365 = 0u;
              v71 = v315;
              v72 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v364, v385, 16);
              if (v72)
              {
                v73 = v72;
                v74 = *(_QWORD *)v365;
                self = v330;
                do
                {
                  v75 = 0;
                  do
                  {
                    if (*(_QWORD *)v365 != v74)
                      objc_enumerationMutation(v71);
                    v76 = *(_QWORD **)(*((_QWORD *)&v364 + 1) + 8 * v75);
                    if (v76)
                    {
                      v77 = v76[3];
                      LODWORD(v78) = v76[6] == 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else
                    {
                      v77 = 0;
                      LODWORD(v78) = 0;
                    }
                    if (v77 <= v54)
                      v78 = v78;
                    else
                      v78 = 0;
                    v54 += v78;
                    if ((!v52 || v52[6] != 0x7FFFFFFFFFFFFFFFLL)
                      && (!v76 || v76[6] != 0x7FFFFFFFFFFFFFFFLL)
                      && v77 == v54
                      && (objc_msgSend(v340, "containsIndex:") & 1) == 0)
                    {
                      if (v76)
                        v79 = v76[4];
                      else
                        v79 = 0;
                      v80 = v341;
                      if (v79 <= (uint64_t)v341)
                        v80 = v341 + 1;
                      v341 = v80;
                    }
                    ++v75;
                  }
                  while (v73 != v75);
                  v81 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v364, v385, 16);
                  v73 = v81;
                }
                while (v81);
              }
              else
              {
                self = v330;
              }

              v82 = [UICollectionViewUpdateItem alloc];
              objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", v336, v334);
              v83 = (void *)objc_claimAutoreleasedReturnValue();
              v84 = -[UICollectionViewUpdateItem initWithAction:forIndexPath:](v82, "initWithAction:forIndexPath:", 1, v83);

              -[NSMutableArray addObject:](self->_deleteItems, "addObject:", v84);
              v85 = [UICollectionViewUpdateItem alloc];
              objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", v341, v54);
              v86 = (void *)objc_claimAutoreleasedReturnValue();
              v87 = -[UICollectionViewUpdateItem initWithAction:forIndexPath:](v85, "initWithAction:forIndexPath:", 0, v86);

              -[UICollectionViewUpdateItem _indexPath](v87);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionViewUpdateItem _setNewIndexPath:]((uint64_t)v52, v88);

              -[NSMutableArray addObject:](self->_insertItems, "addObject:", v87);
              v51 = v331;
              break;
            }
          }
        }
        v51 = (char *)v51 + 1;
      }
      while (v51 != v327);
      v89 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v372, v387, 16);
      v327 = (void *)v89;
    }
    while (v89);
  }

  -[NSMutableArray sortedArrayUsingSelector:](self->_deleteItems, "sortedArrayUsingSelector:", sel_inverseCompareIndexPaths_);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  v313 = (void *)objc_msgSend(v90, "mutableCopy");

  -[NSMutableArray sortedArrayUsingSelector:](self->_insertItems, "sortedArrayUsingSelector:", sel_compareIndexPaths_);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v318 = (void *)objc_msgSend(v91, "mutableCopy");

  v92 = v309;
  if (-[_UICollectionViewShadowUpdatesController shouldRebaseForUpdates](self->_dragAndDropController, "shouldRebaseForUpdates")&& !-[UICollectionView _isPerformingShadowUpdates](self, "_isPerformingShadowUpdates"))
  {
    v93 = (UICollectionView *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v309, "count") + objc_msgSend(v313, "count") + objc_msgSend(v318, "count"));
    -[UICollectionView addObjectsFromArray:](v93, "addObjectsFromArray:", v313);
    -[UICollectionView addObjectsFromArray:](v93, "addObjectsFromArray:", v309);
    -[UICollectionView addObjectsFromArray:](v93, "addObjectsFromArray:", v318);
    if (!-[_UICollectionViewDragAndDropController rebaseForUpdates:](self->_dragAndDropController, "rebaseForUpdates:", v93))
    {
      v211 = qword_1EDDC66D0;
      if (!qword_1EDDC66D0)
      {
        v211 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v211, (unint64_t *)&qword_1EDDC66D0);
      }
      v212 = *(id *)(v211 + 8);
      v156 = (uint64_t)v308;
      if (os_log_type_enabled(v212, OS_LOG_TYPE_ERROR))
      {
        -[UICollectionViewData dataSourceCountsDescription](v308);
        v213 = v93;
        v214 = (UICollectionView *)(id)objc_claimAutoreleasedReturnValue();
        dragAndDropController = self->_dragAndDropController;
        *(_DWORD *)buf = 138412802;
        v381 = v214;
        v382 = 2112;
        *(_QWORD *)v383 = v213;
        *(_WORD *)&v383[8] = 2112;
        v384 = dragAndDropController;
        _os_log_impl(&dword_185066000, v212, OS_LOG_TYPE_ERROR, "UICollectionView failed to rebase drag and drop or reordering items for incoming update, falling back to reload data. Pre-update data source counts: %@; update items: %@; drag and drop controller: %@",
          buf,
          0x20u);

        v93 = v213;
      }

      v335 = 0;
      v320 = 0;
LABEL_306:
      v317 = 1;
      goto LABEL_307;
    }

  }
  if (objc_msgSend(v309, "count"))
  {
    v94 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3550]), "initWithCapacity:", objc_msgSend(v309, "count"));
    v95 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3550]), "initWithCapacity:", objc_msgSend(v309, "count"));
    v360 = 0u;
    v361 = 0u;
    v362 = 0u;
    v363 = 0u;
    v96 = v309;
    v97 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v360, v379, 16);
    if (v97)
    {
      v98 = v97;
      v99 = *(_QWORD *)v361;
      do
      {
        for (i = 0; i != v98; ++i)
        {
          if (*(_QWORD *)v361 != v99)
            objc_enumerationMutation(v96);
          v101 = *(id **)(*((_QWORD *)&v360 + 1) + 8 * i);
          -[UICollectionViewUpdateItem _indexPath](v101);
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v94, "addObject:", v102);

          -[UICollectionViewUpdateItem _newIndexPath](v101);
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v95, "addObject:", v103);

        }
        v98 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v360, v379, 16);
      }
      while (v98);
    }

    v92 = v309;
  }
  else
  {
    v94 = 0;
    v95 = 0;
  }
  v325 = v313;
  v106 = v92;
  v335 = v94;
  v322 = v95;
  v319 = v318;
  v332 = v308;
  if (self)
  {
    v107 = v325;
    if (objc_msgSend(v325, "count"))
    {
      v108 = 0;
      v109 = 0;
      do
      {
        v110 = (id)objc_msgSend(v107, "objectAtIndexedSubscript:", v108);
        v111 = v110;
        if (v110)
        {
          v112 = v110[1];
          v113 = v110[6] == 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v112 = 0;
          v113 = 0;
        }
        if (!v335 || v113)
        {
          if (!v335)
          {
LABEL_143:
            LODWORD(j) = objc_msgSend(v106, "count");
            goto LABEL_146;
          }
        }
        else
        {
          -[UICollectionViewUpdateItem _indexPath](v110);
          v114 = (void *)objc_claimAutoreleasedReturnValue();
          v115 = objc_msgSend(v335, "containsObject:", v114);

          if ((v115 & 1) == 0)
            goto LABEL_143;
        }
        LODWORD(j) = 0;
LABEL_146:
        if (objc_msgSend(v106, "count") > (unint64_t)(int)j)
        {
          for (j = (int)j; objc_msgSend(v106, "count") > j; ++j)
          {
            v117 = (id)objc_msgSend(v106, "objectAtIndexedSubscript:", j);
            if (-[UICollectionViewUpdateItem _initialIndexPathEqualToUpdateItem:]((uint64_t)v117, v111))
            {
              if (v117)
                v118 = v117[6] == 0x7FFFFFFFFFFFFFFFLL;
              else
                v118 = 0;
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v119 = (void *)objc_claimAutoreleasedReturnValue();
              v120 = v119;
              if (v118)
              {
                objc_msgSend(v119, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10788, CFSTR("attempt to perform a delete and a move from the same section (%ld)"), v112);
              }
              else
              {
                -[UICollectionViewUpdateItem _indexPath](v111);
                v122 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v120, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10791, CFSTR("attempt to perform a delete and a move from the same index path (%@)"), v122);

              }
            }
            else if (v113)
            {
              v121 = v117 ? v117[5] : 0;
              if (v112 == v121)
                goto LABEL_240;
            }
          }
        }
        if (v113)
        {
          if (v112 >= -[UICollectionViewData numberOfSections]((uint64_t)v332))
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v129 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v129, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10803, CFSTR("attempt to delete section %ld, but there are only %ld sections before the update"), v112, -[UICollectionViewData numberOfSections]((uint64_t)v332));

          }
          v107 = v325;
          if (objc_msgSend(v325, "count"))
          {
            v123 = 0;
            v124 = 0;
            do
            {
              v125 = (id)objc_msgSend(v325, "objectAtIndexedSubscript:", v123);
              if (v125)
              {
                if (v125[6] == 0x7FFFFFFFFFFFFFFFLL)
                  goto LABEL_174;
                v126 = v125[1];
              }
              else
              {
                v126 = 0;
              }
              if (v126 != v112)
              {
LABEL_174:
                ++v124;
                goto LABEL_175;
              }
              objc_msgSend(v325, "removeObjectAtIndex:", v123);
              v109 -= v124 < v109;
LABEL_175:
              v123 = v124;
            }
            while (objc_msgSend(v325, "count") > (unint64_t)v124);
          }
        }
        else
        {
          v127 = (uint64_t)v332;
          if (v111)
            v128 = v111[2];
          else
            v128 = 0;
          v107 = v325;
          if (v112 >= -[UICollectionViewData numberOfSections]((uint64_t)v332))
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v130 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v130, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10821, CFSTR("attempt to delete item %ld from section %ld, but there are only %ld sections before the update"), v128, v112, -[UICollectionViewData numberOfSections]((uint64_t)v332));

            v127 = (uint64_t)v332;
          }
          if (v128 >= -[UICollectionViewData numberOfItemsInSection:](v127, v112))
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v131 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v131, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10822, CFSTR("attempt to delete item %ld from section %ld which only contains %ld items before the update"), v128, v112, -[UICollectionViewData numberOfItemsInSection:]((uint64_t)v332, v112));

          }
        }
        v108 = ++v109;
      }
      while (objc_msgSend(v107, "count") > (unint64_t)v109);
    }
    v132 = v319;
    if (objc_msgSend(v319, "count"))
    {
      v133 = 0;
      v134 = 0;
      do
      {
        v135 = (id)objc_msgSend(v132, "objectAtIndexedSubscript:", v133);
        v136 = v135;
        if (v135)
        {
          v137 = v135[3];
          v138 = v135[6] == 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v137 = 0;
          v138 = 0;
        }
        if (!v322 || v138)
        {
          if (!v322)
          {
LABEL_195:
            LODWORD(k) = objc_msgSend(v106, "count");
            goto LABEL_198;
          }
        }
        else
        {
          -[UICollectionViewUpdateItem _indexPath](v135);
          v139 = (void *)objc_claimAutoreleasedReturnValue();
          v140 = -[UICollectionView containsObject:](v322, "containsObject:", v139);

          if ((v140 & 1) == 0)
            goto LABEL_195;
        }
        LODWORD(k) = 0;
LABEL_198:
        if (objc_msgSend(v106, "count") > (unint64_t)(int)k)
        {
          for (k = (int)k; objc_msgSend(v106, "count") > k; ++k)
          {
            v142 = (id)objc_msgSend(v106, "objectAtIndexedSubscript:", k);
            if (-[UICollectionViewUpdateItem _finalIndexPathEqualToUpdateItem:]((uint64_t)v142, v136))
            {
              if (v142)
                v143 = v142[6] == 0x7FFFFFFFFFFFFFFFLL;
              else
                v143 = 0;
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v144 = (void *)objc_claimAutoreleasedReturnValue();
              v145 = v144;
              if (v143)
              {
                objc_msgSend(v144, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10841, CFSTR("attempt to perform an insert and a move to the same section (%ld)"), v137);
              }
              else
              {
                -[UICollectionViewUpdateItem _indexPath](v136);
                v147 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v145, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10844, CFSTR("attempt to perform an insert and a move to the same index path (%@)"), v147);

              }
            }
            else if (v138)
            {
              v146 = v142 ? v142[3] : 0;
              if (v137 == v146)
                goto LABEL_240;
            }
          }
        }
        if (v138)
        {
          if (v137 >= -[UICollectionViewData numberOfSections]((uint64_t)v330->_collectionViewData))
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v153 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v153, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10856, CFSTR("attempt to insert section %ld but there are only %ld sections after the update"), v137, -[UICollectionViewData numberOfSections]((uint64_t)v330->_collectionViewData));

          }
          v132 = v319;
          if (objc_msgSend(v319, "count"))
          {
            v148 = 0;
            v149 = 0;
            do
            {
              v150 = (id)objc_msgSend(v319, "objectAtIndexedSubscript:", v148);
              if (v150)
              {
                if (v150[6] == 0x7FFFFFFFFFFFFFFFLL)
                  goto LABEL_226;
                v151 = v150[3];
              }
              else
              {
                v151 = 0;
              }
              if (v151 != v137)
              {
LABEL_226:
                ++v149;
                goto LABEL_227;
              }
              objc_msgSend(v319, "removeObjectAtIndex:", v148);
              v134 -= v149 < v134;
LABEL_227:
              v148 = v149;
            }
            while (objc_msgSend(v319, "count") > (unint64_t)v149);
          }
        }
        else
        {
          if (v136)
            v152 = v136[4];
          else
            v152 = 0;
          v132 = v319;
          if (v137 >= -[UICollectionViewData numberOfSections]((uint64_t)v330->_collectionViewData))
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v154 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v154, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10874, CFSTR("attempt to insert item %ld into section %ld, but there are only %ld sections after the update"), v152, v137, -[UICollectionViewData numberOfSections]((uint64_t)v330->_collectionViewData));

          }
          if (v152 >= -[UICollectionViewData numberOfItemsInSection:]((uint64_t)v330->_collectionViewData, v137))
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v155 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v155, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10875, CFSTR("attempt to insert item %ld into section %ld, but there are only %ld items in section %ld after the update"), v152, v137, -[UICollectionViewData numberOfItemsInSection:]((uint64_t)v330->_collectionViewData, v137), v137);

          }
        }
        v133 = ++v134;
      }
      while (objc_msgSend(v132, "count") > (unint64_t)v134);
    }
    if (objc_msgSend(v106, "count"))
    {
      v157 = 0;
      do
      {
        v158 = v157;
        v159 = (id *)(id)objc_msgSend(v106, "objectAtIndexedSubscript:");
        v160 = -[UICollectionViewUpdateItem _indexPath](v159);
        v161 = -[UICollectionViewUpdateItem _newIndexPath](v159);
        if (v159)
        {
          v163 = v159[1];
          v162 = (uint64_t)v159[2];
          v164 = (uint64_t)v159[4];
          v342 = v159[3];
          v165 = v159[6];
          v166 = -[UICollectionViewData numberOfSections]((uint64_t)v332);
          if (v165 == (id)0x7FFFFFFFFFFFFFFFLL)
          {
            v337 = v163;
            if ((uint64_t)v163 >= v166)
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v190 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v190, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10892, CFSTR("attempt to move section %ld, but there are only %ld sections before the update"), v163, -[UICollectionViewData numberOfSections]((uint64_t)v332));

            }
            v167 = v158;
            if ((uint64_t)v342 >= -[UICollectionViewData numberOfSections]((uint64_t)v330->_collectionViewData))
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v168 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v168, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10893, CFSTR("attempt to to move section %ld to section %ld, but there are only %ld sections after the update"), v163, v342, -[UICollectionViewData numberOfSections]((uint64_t)v330->_collectionViewData));
LABEL_287:

              goto LABEL_256;
            }
            goto LABEL_256;
          }
          v169 = v164;
          v170 = v162;
          v171 = (uint64_t)v163;
          if ((uint64_t)v163 >= v166)
          {
LABEL_289:
            v194 = v171;
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v195 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v195, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10896, CFSTR("attempt to move index path (%@) from a section that does not exist - there are only %ld sections before the update"), v160, -[UICollectionViewData numberOfSections]((uint64_t)v332));

            v171 = v194;
            v169 = v164;
            v170 = v162;
          }
        }
        else
        {
          v193 = -[UICollectionViewData numberOfSections]((uint64_t)v332);
          v164 = 0;
          v162 = 0;
          v171 = 0;
          v342 = 0;
          v169 = 0;
          v170 = 0;
          if (v193 <= 0)
            goto LABEL_289;
        }
        v337 = (void *)v171;
        if (v170 >= -[UICollectionViewData numberOfItemsInSection:]((uint64_t)v332, v171))
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v191 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v191, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10897, CFSTR("attempt to move index path (%@) that does not exist - there are only %ld items in section %ld before the update"), v160, -[UICollectionViewData numberOfItemsInSection:]((uint64_t)v332, (uint64_t)v337), v337);

        }
        v172 = -[UICollectionViewData numberOfSections]((uint64_t)v330->_collectionViewData);
        v173 = (uint64_t)v342;
        if ((uint64_t)v342 >= v172)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v192 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v192, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10898, CFSTR("attempt to move index path (%@) to index path (%@) in section that does not exist - there are only %ld sections after the update"), v160, v161, -[UICollectionViewData numberOfSections]((uint64_t)v330->_collectionViewData));

          v173 = (uint64_t)v342;
        }
        if (v169 >= -[UICollectionViewData numberOfItemsInSection:]((uint64_t)v330->_collectionViewData, v173))
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v168 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v168, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10899, CFSTR("attempt to move index path (%@) to index path (%@) that does not exist - there are only %ld items in section %ld after the update"), v160, v161, -[UICollectionViewData numberOfItemsInSection:]((uint64_t)v330->_collectionViewData, (uint64_t)v342), v342);
          v167 = v158;
          goto LABEL_287;
        }
        v167 = v158;
LABEL_256:
        v174 = v167 + 1;
        v175 = (int)v174;
        if (objc_msgSend(v335, "countForObject:", v160) == 1)
        {
          v175 = (int)v174;
          if (-[UICollectionView countForObject:](v322, "countForObject:", v161) == 1)
            v175 = objc_msgSend(v106, "count");
        }
        v328 = v174;
        if (objc_msgSend(v106, "count") > (unint64_t)v175)
        {
          v176 = v175;
          v177 = v175;
          while (1)
          {
            v178 = (id *)(id)objc_msgSend(v106, "objectAtIndexedSubscript:", v176);
            v179 = -[UICollectionViewUpdateItem _indexPath](v178);
            v180 = -[UICollectionViewUpdateItem _newIndexPath](v178);
            v181 = -[UICollectionViewUpdateItem _initialIndexPathEqualToUpdateItem:]((uint64_t)v159, v178);
            v182 = -[UICollectionViewUpdateItem _finalIndexPathEqualToUpdateItem:]((uint64_t)v159, v178);
            if (!v181)
              break;
            if (!v182)
            {
              if (v159)
                v186 = v159[6] == (id)0x7FFFFFFFFFFFFFFFLL;
              else
                v186 = 0;
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v187 = (void *)objc_claimAutoreleasedReturnValue();
              v185 = v187;
              if (v186)
              {
                if (v178)
                  v188 = v178[3];
                else
                  v188 = 0;
                objc_msgSend(v187, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10918, CFSTR("attempt to move section %ld to both section %ld and section %ld"), v337, v342, v188);
              }
              else
              {
                objc_msgSend(v187, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10921, CFSTR("attempt to move item at index path %@ to both %@ and %@"), v160, v161, v180);
              }
              goto LABEL_277;
            }
            objc_msgSend(v106, "removeObjectAtIndex:", v176);
LABEL_279:
            v176 = v177;
            if (objc_msgSend(v106, "count") <= (unint64_t)v177)
              goto LABEL_284;
          }
          if (v182)
          {
            if (v159)
              v183 = v159[6] == (id)0x7FFFFFFFFFFFFFFFLL;
            else
              v183 = 0;
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v184 = (void *)objc_claimAutoreleasedReturnValue();
            v185 = v184;
            if (v183)
              objc_msgSend(v184, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10927, CFSTR("attempt to move both section %ld and section %ld to section %ld"), objc_msgSend(v160, "section"), objc_msgSend(v179, "section"), objc_msgSend(v161, "section"));
            else
              objc_msgSend(v184, "handleFailureInMethod:object:file:lineNumber:description:", sel__validateSortedDeleteItems_moveItems_movedSourceIndexPaths_movedDestinationIndexPaths_insertItems_oldCollectionViewData_, v330, CFSTR("UICollectionView.m"), 10930, CFSTR("attempt to move both item at index path %@ and %@ to %@"), v160, v179, v161);
LABEL_277:

          }
          ++v177;
          goto LABEL_279;
        }
LABEL_284:
        v189 = objc_msgSend(v106, "count");
        v157 = v328;
      }
      while (v189 > (unint64_t)v328);
    }

    v196 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v197 = objc_msgSend(v325, "count");
    v198 = objc_msgSend(v106, "count") + v197;
    v199 = v198 + objc_msgSend(v319, "count");
    v200 = v332;
    v201 = (void *)objc_msgSend(v196, "initWithCapacity:", v199);
    objc_msgSend(v201, "addObjectsFromArray:", v325);
    objc_msgSend(v201, "addObjectsFromArray:", v106);
    objc_msgSend(v201, "addObjectsFromArray:", v319);
    v202 = [UICollectionViewUpdate alloc];
    self = v330;
    v320 = v201;
    v203 = -[UICollectionViewUpdate initWithCollectionView:updateItems:moveItemSourceIndexPaths:oldModel:newModel:oldContentOffset:newContentOffset:]((id *)&v202->super.isa, v330, v201, v335, v332, v330->_collectionViewData, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
    currentUpdate = v330->_currentUpdate;
    v330->_currentUpdate = (UICollectionViewUpdate *)v203;

    v205 = v330->_currentUpdate;
    v156 = (uint64_t)v308;
    if (!v205 || !v205->_updateMaps.updatesAreInvalid)
    {
      -[_UICollectionViewDragAndDropController commitReorderedItems]((uint64_t)v330->_dragAndDropController);
      v262 = v201;
      if (dyld_program_sdk_at_least())
      {
        v263 = qword_1EDDC66E0;
        if (!qword_1EDDC66E0)
        {
          v263 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v263, (unint64_t *)&qword_1EDDC66E0);
        }
        if ((*(_BYTE *)v263 & 1) != 0)
        {
          v302 = *(id *)(v263 + 8);
          if (os_log_type_enabled(v302, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218242;
            v381 = v330;
            v382 = 2112;
            *(_QWORD *)v383 = v332;
            _os_log_impl(&dword_185066000, v302, OS_LOG_TYPE_ERROR, "_endItemAnims: cv == %p; Attempting to save anchor for data %@",
              buf,
              0x16u);
          }

          self = v330;
          v200 = v332;
          v156 = (uint64_t)v308;
          v262 = v320;
        }
        -[UICollectionView _saveContentOffsetRestorationAnchorIfNecessaryUsingModel:]((uint64_t)self, v200);
      }
      -[UICollectionViewLayout _prepareForCollectionViewUpdates:withDataSourceTranslator:](self->_layout, "_prepareForCollectionViewUpdates:withDataSourceTranslator:", v262, self->_currentUpdate);
      v264 = self->_collectionViewData;
      if (v264)
        v264->_preUpdateCachedItemCount = v264->_globalItemMap.__table_.__p2_.__value_;
      v265 = v311;
      if (!v311)
        v265 = objc_alloc_init((Class)objc_msgSend((id)objc_opt_class(), "invalidationContextClass"));
      v311 = v265;
      if (!v307 && objc_msgSend(v262, "count"))
        objc_msgSend(v265, "_setInvalidateDataSourceCounts:", 1);
      objc_msgSend(v265, "_setUpdateItems:", v262);
      if (-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes"))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v266 = v265;
          objc_msgSend(v266, "_setRetainExistingSizingInfoForEstimates:", 1);

        }
      }
      -[UICollectionViewLayout _invalidateLayoutUsingContext:](self->_layout, "_invalidateLayoutUsingContext:", v265);
      -[UICollectionView _dataSourceActual](self, "_dataSourceActual");
      v267 = (void *)objc_claimAutoreleasedReturnValue();
      v268 = objc_opt_respondsToSelector();

      if ((v268 & 1) != 0)
      {
        -[UICollectionView _dataSourceActual](self, "_dataSourceActual");
        v269 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v269, "_collectionView:willPerformUpdates:", self, v262);

      }
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v270 = (_UICollectionViewFocusedItemState *)objc_claimAutoreleasedReturnValue();
      v271 = self->_currentUpdate;
      newFocusedItemState = v271->_newFocusedItemState;
      v271->_newFocusedItemState = v270;

      objc_storeStrong((id *)&self->_currentUpdate->_oldFocusedItemState, v270);
      v317 = 0;
      v216 = 1;
      v92 = v309;
      goto LABEL_308;
    }
    v206 = (void *)MEMORY[0x1E0CB3940];
    v207 = v205->_invalidUpdatesErrorMessage;
    objc_msgSend(v206, "stringWithFormat:", CFSTR("%@\nCollection view: %@"), v207, v330);
    v208 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

    if (dyld_program_sdk_at_least()
      && !-[UICollectionView _isConnectedToDiffableDataSource](v330, "_isConnectedToDiffableDataSource")
      && !_UICollectionViewShouldRescueClientWithReloadDataFallbackForInvalidBatchUpdates(v208))
    {
      v93 = v208;
      -[UICollectionView _Bug_Detected_In_Client_Of_UICollectionView_Invalid_Batch_Updates:](v330, "_Bug_Detected_In_Client_Of_UICollectionView_Invalid_Batch_Updates:", v208);
      v317 = 0;
      v92 = v309;
      goto LABEL_307;
    }
    v92 = v309;
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v301 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v301, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v381 = v208;
        _os_log_fault_impl(&dword_185066000, v301, OS_LOG_TYPE_FAULT, "Performing reloadData as a fallback — %@", buf, 0xCu);
      }

      v317 = 1;
      self = v330;
      v156 = (uint64_t)v308;
      v92 = v309;
      v93 = v208;
      goto LABEL_307;
    }
    v209 = qword_1EDDC66D8;
    v93 = v208;
    if (!qword_1EDDC66D8)
    {
      v209 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v209, (unint64_t *)&qword_1EDDC66D8);
    }
    v210 = *(id *)(v209 + 8);
    if (os_log_type_enabled(v210, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v381 = v208;
      _os_log_impl(&dword_185066000, v210, OS_LOG_TYPE_ERROR, "Performing reloadData as a fallback — %@", buf, 0xCu);
    }

    goto LABEL_306;
  }
LABEL_240:

  v93 = v322;
  v320 = 0;
  v317 = 1;
  self = v330;
  v156 = (uint64_t)v308;
  v92 = v309;
LABEL_307:

  -[_UICollectionViewDragAndDropController commitReorderedItems]((uint64_t)self->_dragAndDropController);
  v216 = 0;
LABEL_308:
  v217 = -[UICollectionViewData numberOfSections](v156);
  v218 = malloc_type_malloc(8 * v217, 0x100004000313F17uLL);
  if (v217 >= 1)
  {
    for (m = 0; m != v217; ++m)
      v218[m] = -[UICollectionViewData numberOfItemsInSection:](v156, m);
  }
  v220 = -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData);
  v345 = malloc_type_calloc(8uLL, v220, 0x47274D9DuLL);
  v221 = malloc_type_calloc(8uLL, v217, 0xFFF0217BuLL);
  v343 = malloc_type_calloc(8uLL, v220, 0xF3258AA4uLL);
  v338 = malloc_type_calloc(8uLL, v217, 0xD2A4B0DAuLL);
  v329 = v218;
  if ((v216 & 1) == 0)
  {
    v230 = 0;
    v10 = v305;
    v9 = v306;
    v231 = v320;
    goto LABEL_363;
  }
  v323 = v217;
  v333 = v220;
  v358 = 0u;
  v359 = 0u;
  v356 = 0u;
  v357 = 0u;
  v222 = v313;
  v223 = objc_msgSend(v222, "countByEnumeratingWithState:objects:count:", &v356, v378, 16);
  if (!v223)
  {
    v225 = 0;
    v227 = v323;
    goto LABEL_327;
  }
  v224 = v223;
  v225 = 0;
  v226 = *(_QWORD *)v357;
  v227 = v323;
  do
  {
    for (n = 0; n != v224; ++n)
    {
      if (*(_QWORD *)v357 != v226)
        objc_enumerationMutation(v222);
      v229 = *(_QWORD *)(*((_QWORD *)&v356 + 1) + 8 * n);
      if (v229)
      {
        if (*(_QWORD *)(v229 + 48) == 0x7FFFFFFFFFFFFFFFLL)
        {
          v225 = (v225 + 1);
          --v227;
          continue;
        }
        v229 = *(_QWORD *)(v229 + 40);
      }
      ++v221[v229];
    }
    v224 = objc_msgSend(v222, "countByEnumeratingWithState:objects:count:", &v356, v378, 16);
  }
  while (v224);
LABEL_327:
  v326 = v221;

  v354 = 0u;
  v355 = 0u;
  v352 = 0u;
  v353 = 0u;
  v232 = v318;
  v233 = objc_msgSend(v232, "countByEnumeratingWithState:objects:count:", &v352, v377, 16);
  if (!v233)
  {
    v235 = 0;
    goto LABEL_341;
  }
  v234 = v233;
  v235 = 0;
  v236 = *(_QWORD *)v353;
  while (2)
  {
    v237 = 0;
    while (2)
    {
      if (*(_QWORD *)v353 != v236)
        objc_enumerationMutation(v232);
      v238 = *(_QWORD *)(*((_QWORD *)&v352 + 1) + 8 * v237);
      if (v238)
      {
        if (*(_QWORD *)(v238 + 48) == 0x7FFFFFFFFFFFFFFFLL)
        {
          v235 = (v235 + 1);
          ++v227;
          goto LABEL_337;
        }
        v238 = *(_QWORD *)(v238 + 40);
      }
      ++v345[v238];
LABEL_337:
      if (v234 != ++v237)
        continue;
      break;
    }
    v234 = objc_msgSend(v232, "countByEnumeratingWithState:objects:count:", &v352, v377, 16);
    if (v234)
      continue;
    break;
  }
LABEL_341:

  v350 = 0u;
  v351 = 0u;
  v348 = 0u;
  v349 = 0u;
  v239 = v92;
  v240 = objc_msgSend(v239, "countByEnumeratingWithState:objects:count:", &v348, v376, 16);
  if (!v240)
    goto LABEL_355;
  v241 = v240;
  v242 = *(_QWORD *)v349;
  while (2)
  {
    v243 = 0;
    while (2)
    {
      if (*(_QWORD *)v349 != v242)
        objc_enumerationMutation(v239);
      v244 = *(_QWORD **)(*((_QWORD *)&v348 + 1) + 8 * v243);
      if (!v244)
      {
        v245 = 0;
        v246 = 0;
        goto LABEL_349;
      }
      if (v244[6] != 0x7FFFFFFFFFFFFFFFLL)
      {
        v245 = v244[1];
        v246 = v244[3];
LABEL_349:
        if (-[UICollectionViewUpdate finalSectionIndexForInitialSectionIndex:](v330->_currentUpdate, "finalSectionIndexForInitialSectionIndex:", v245) != v246)
        {
          ++v338[v245];
          ++v343[v246];
        }
      }
      if (v241 != ++v243)
        continue;
      break;
    }
    v247 = objc_msgSend(v239, "countByEnumeratingWithState:objects:count:", &v348, v376, 16);
    v241 = v247;
    if (v247)
      continue;
    break;
  }
LABEL_355:

  if (v227 == v333)
  {
    v10 = v305;
    v9 = v306;
    self = v330;
    if (v333 >= 1)
    {
      for (ii = 0; v333 != ii; ++ii)
      {
        v249 = -[UICollectionViewUpdate initialSectionIndexForFinalSectionIndex:](v330->_currentUpdate, "initialSectionIndexForFinalSectionIndex:", ii);
        if (v249 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v250 = v249;
          v251 = v329[v249];
          v252 = -[UICollectionViewData numberOfItemsInSection:]((uint64_t)v330->_collectionViewData, ii);
          if (v252 < 0)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid update: invalid number of items in section %d. Attempt to delete more items than exist in section. Collection view: %@"), v250, v330);
            v257 = (UICollectionView *)objc_claimAutoreleasedReturnValue();
            if (!dyld_program_sdk_at_least()
              || -[UICollectionView _isConnectedToDiffableDataSource](v330, "_isConnectedToDiffableDataSource")
              || _UICollectionViewShouldRescueClientWithReloadDataFallbackForInvalidBatchUpdates(v257))
            {
              v273 = qword_1EDDC66F0;
              v92 = v309;
              v221 = v326;
              if (!qword_1EDDC66F0)
              {
                v273 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                atomic_store(v273, (unint64_t *)&qword_1EDDC66F0);
              }
              v274 = *(id *)(v273 + 8);
              if (os_log_type_enabled(v274, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v381 = v257;
                goto LABEL_402;
              }
LABEL_403:

              v256 = 1;
              goto LABEL_410;
            }
LABEL_436:
            -[UICollectionView _Bug_Detected_In_Client_Of_UICollectionView_Invalid_Number_Of_Items_In_Section:](v330, "_Bug_Detected_In_Client_Of_UICollectionView_Invalid_Number_Of_Items_In_Section:", v257);
            v92 = v309;
            v231 = v320;
            v221 = v326;
LABEL_369:
            v256 = v317;
            goto LABEL_411;
          }
          v253 = v343[ii];
          v254 = v326[v250];
          v255 = v345[ii];
          if (v252 != v251 + v253 - (v338[v250] + v254) + v255)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid update: invalid number of items in section %d. The number of items contained in an existing section after the update (%d) must be equal to the number of items contained in that section before the update (%d), plus or minus the number of items inserted or deleted from that section (%d inserted, %d deleted) and plus or minus the number of items moved into or out of that section (%d moved in, %d moved out). Collection view: %@"), ii, v252, v251, v255, v254, v253, v338[v250], v330);
            v257 = (UICollectionView *)objc_claimAutoreleasedReturnValue();
            if (!dyld_program_sdk_at_least()
              || -[UICollectionView _isConnectedToDiffableDataSource](v330, "_isConnectedToDiffableDataSource")
              || _UICollectionViewShouldRescueClientWithReloadDataFallbackForInvalidBatchUpdates(v257))
            {
              v275 = qword_1EDDC66F8;
              v92 = v309;
              v221 = v326;
              if (!qword_1EDDC66F8)
              {
                v275 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                atomic_store(v275, (unint64_t *)&qword_1EDDC66F8);
              }
              v274 = *(id *)(v275 + 8);
              if (os_log_type_enabled(v274, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v381 = v257;
LABEL_402:
                _os_log_impl(&dword_185066000, v274, OS_LOG_TYPE_ERROR, "Performing reloadData as a fallback — %@", buf, 0xCu);
              }
              goto LABEL_403;
            }
            goto LABEL_436;
          }
        }
      }
    }
    v230 = 1;
    v92 = v309;
    v231 = v320;
    v221 = v326;
LABEL_363:
    v256 = v317;
  }
  else
  {
    self = v330;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid update: invalid number of sections. The number of sections contained in the collection view after the update (%d) must be equal to the number of sections contained in the collection view before the update (%d), plus or minus the number of sections inserted or deleted (%d inserted, %d deleted). Collection view: %@"), v333, v323, v235, v225, v330);
    v257 = (UICollectionView *)objc_claimAutoreleasedReturnValue();
    v231 = v320;
    v221 = v326;
    if (!-[UICollectionView _isConnectedToDiffableDataSource](v330, "_isConnectedToDiffableDataSource"))
    {
      -[UICollectionView _Bug_Detected_In_Client_Of_UICollectionView_Invalid_Number_Of_Sections:](v330, "_Bug_Detected_In_Client_Of_UICollectionView_Invalid_Number_Of_Sections:", v257);
      v10 = v305;
      v9 = v306;
      v92 = v309;
      goto LABEL_369;
    }
    -[UICollectionView _diffableDataSourceImpl](v330, "_diffableDataSourceImpl");
    v258 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v258, "currentTransaction");
    v259 = objc_claimAutoreleasedReturnValue();
    v260 = (void *)v259;
    if (v258)
    {
      v92 = v309;
      if (v259)
      {
        -[UICollectionView stringByAppendingFormat:](v257, "stringByAppendingFormat:", CFSTR("; Diffable transaction: %@"),
          v259);
        v261 = objc_claimAutoreleasedReturnValue();

        v257 = (UICollectionView *)v261;
      }
    }
    else
    {
      v92 = v309;
    }
    v276 = qword_1EDDC66E8;
    if (!qword_1EDDC66E8)
    {
      v276 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v276, (unint64_t *)&qword_1EDDC66E8);
    }
    v277 = *(id *)(v276 + 8);
    if (os_log_type_enabled(v277, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v381 = v257;
      _os_log_impl(&dword_185066000, v277, OS_LOG_TYPE_ERROR, "Performing reloadData as a fallback — %@", buf, 0xCu);
    }

    v256 = 1;
    v10 = v305;
    v9 = v306;
    self = v330;
LABEL_410:
    v231 = v320;
LABEL_411:

    v230 = 0;
  }
  free(v329);
  free(v345);
  free(v221);
  free(v343);
  free(v338);
  if ((v230 & 1) != 0)
  {
    v105 = -[UICollectionView _updateWithItems:tentativelyForReordering:propertyAnimator:collectionViewAnimator:](self, "_updateWithItems:tentativelyForReordering:propertyAnimator:collectionViewAnimator:", v231, v307, v9, v10);
    if (!-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes"))
      -[UICollectionView _clearContentOffsetRestorationAnchor](self, "_clearContentOffsetRestorationAnchor");
  }
  else
  {
    v105 = 0;
  }

  if (v256)
  {
LABEL_417:
    v278 = self->_currentUpdate;
    self->_currentUpdate = 0;

    v279 = _Block_copy(self->_updateCompletionHandler);
    updateCompletionHandler = self->_updateCompletionHandler;
    self->_updateCompletionHandler = 0;

    if (!-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes"))
      -[UICollectionView _clearContentOffsetRestorationAnchor](self, "_clearContentOffsetRestorationAnchor");
    -[UICollectionView reloadData](self, "reloadData");
    if (v279)
    {
      v281 = MEMORY[0x1E0C80D38];
      v282 = MEMORY[0x1E0C80D38];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __119__UICollectionView__endItemAnimationsWithInvalidationContext_tentativelyForReordering_animator_collectionViewAnimator___block_invoke;
      block[3] = &unk_1E16B1BF8;
      v347 = v279;
      dispatch_async(v281, block);

    }
  }
  --self->_updateCount;
  -[UICollectionView _resetUpdateItemArrays](self, "_resetUpdateItemArrays");
  *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x200000000uLL;
  -[UICollectionView _resumeReloads](self, "_resumeReloads");
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x4000000000) != 0)
  {
    -[UICollectionView _updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:](self, "_updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:", v16, v17, v18, v19);
    -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");
    *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x4000000000uLL;
  }
  postUpdateBlock = self->_postUpdateBlock;
  if (postUpdateBlock)
  {
    v284 = (void (**)(_QWORD))_Block_copy(postUpdateBlock);
    v285 = self->_postUpdateBlock;
    self->_postUpdateBlock = 0;

    v284[2](v284);
  }
  if (v105 && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x100) != 0)
    -[UICollectionView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
  _UIRestorePreviousFallbackEnvironment(v310);
  v286 = qword_1EDDC6700;
  if (!qword_1EDDC6700)
  {
    v286 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v286, (unint64_t *)&qword_1EDDC6700);
  }
  v287 = *(id *)(v286 + 8);
  v288 = os_signpost_id_make_with_pointer(*(os_log_t *)(v286 + 8), self);
  if (v288 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v289 = v288;
    if (os_signpost_enabled(v287))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_185066000, v287, OS_SIGNPOST_INTERVAL_END, v289, "BatchUpdates", ", buf, 2u);
    }
  }

}

- (id)_arrayForUpdateAction:(int)a3
{
  uint64_t v3;
  id v4;
  void **v5;
  void *v6;
  id v7;
  void *v8;

  switch(a3)
  {
    case 0:
      v3 = 2344;
      goto LABEL_8;
    case 1:
      v3 = 2352;
      goto LABEL_8;
    case 2:
      v3 = 2360;
      goto LABEL_8;
    case 3:
      v3 = 2368;
LABEL_8:
      v5 = (void **)((char *)&self->super.super.super.super.isa + v3);
      v6 = *(Class *)((char *)&self->super.super.super.super.isa + v3);
      if (!v6)
      {
        v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v8 = *v5;
        *v5 = v7;

        v6 = *v5;
      }
      v4 = v6;
      break;
    default:
      v4 = 0;
      break;
  }
  return v4;
}

- (id)_sectionsWithSectionOperationsInUpdateItems:(void *)a1
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v5)
    {
      v6 = v5;
      a1 = 0;
      v7 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD **)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (v9 && v9[6] == 0x7FFFFFFFFFFFFFFFLL)
          {
            -[UICollectionViewUpdateItem _indexPath](v9);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            v11 = objc_msgSend(v10, "section");

            if (a1)
            {
              objc_msgSend(a1, "addIndex:", v11);
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB3788], "indexSetWithIndex:", v11);
              a1 = (void *)objc_claimAutoreleasedReturnValue();
            }
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v6);
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

- (void)_saveContentOffsetRestorationAnchorIfNecessaryUsingModel:(uint64_t)a1
{
  _QWORD *v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  CGFloat v15;
  CGFloat v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double MaxX;
  NSObject *v36;
  id **v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  NSObject *v45;
  NSObject *v46;
  unsigned int v47;
  uint64_t v48;
  void *v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  double v58;
  double v59;
  double v60;
  unint64_t v61;
  NSObject *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  unint64_t v69;
  NSObject *v70;
  uint64_t v71;
  _QWORD v72[5];
  uint8_t buf[4];
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  void *v82;
  __int16 v83;
  void *v84;
  uint64_t v85;
  CGPoint v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;

  v85 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!a1)
    goto LABEL_29;
  if (*(_QWORD *)(a1 + 2944))
  {
    v4 = qword_1EDDC6540;
    if (!qword_1EDDC6540)
    {
      v4 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v4, (unint64_t *)&qword_1EDDC6540);
    }
    if ((*(_BYTE *)v4 & 1) != 0)
    {
      v5 = *(NSObject **)(v4 + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v74 = a1;
        v6 = "_saveContentOffset: cv == %p; not saving -- a scrolling target index path exists";
LABEL_72:
        _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0xCu);
        goto LABEL_29;
      }
    }
    goto LABEL_29;
  }
  if (!*(_QWORD *)(a1 + 2920))
  {
    if (((*(unsigned __int16 *)(a1 + 2656) | (*(unsigned __int8 *)(a1 + 2658) << 16)) & 0x80000) != 0)
    {
      v14 = qword_1EDDC6550;
      if (!qword_1EDDC6550)
      {
        v14 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v14, (unint64_t *)&qword_1EDDC6550);
      }
      if ((*(_BYTE *)v14 & 1) != 0)
      {
        v5 = *(NSObject **)(v14 + 8);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v74 = a1;
          v6 = "_saveContentOffset: cv == %p; not saving -- saving disabled";
          goto LABEL_72;
        }
      }
      goto LABEL_29;
    }
    v8 = objc_msgSend(*(id *)(a1 + 2072), "_layoutAxis");
    if ((unint64_t)(v8 - 1) > 1)
      goto LABEL_29;
    v9 = v8;
    v10 = *(unsigned __int16 *)(a1 + 2656);
    v11 = (v10 | (*(unsigned __int8 *)(a1 + 2658) << 16) | 0x80000u) >> 16;
    *(_WORD *)(a1 + 2656) = v10;
    *(_BYTE *)(a1 + 2658) = v11;
    v12 = dyld_program_sdk_at_least();
    if (!v3
      || !v12
      || !v3[21]
      || !-[_UICollectionViewSubviewManager hasVisibleCells](*(_QWORD *)(a1 + 2904))
      || objc_msgSend((id)a1, "_isReordering"))
    {
      v13 = qword_1EDDC6558;
      if (!qword_1EDDC6558)
      {
        v13 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v13, (unint64_t *)&qword_1EDDC6558);
      }
      if ((*(_BYTE *)v13 & 1) != 0)
      {
        v5 = *(NSObject **)(v13 + 8);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v74 = a1;
          v6 = "_saveContentOffset: cv == %p; not saving -- restoration preconditions not met";
          goto LABEL_72;
        }
      }
      goto LABEL_29;
    }
    objc_msgSend((id)a1, "contentOffset");
    if (-[UICollectionView _isContentOffset:atStartOfAxis:]((_DWORD *)a1, v9, v15, v16))
    {
      v17 = qword_1EDDC6560;
      if (!qword_1EDDC6560)
      {
        v17 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v17, (unint64_t *)&qword_1EDDC6560);
      }
      if ((*(_BYTE *)v17 & 1) == 0)
        goto LABEL_29;
      v18 = *(NSObject **)(v17 + 8);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        goto LABEL_29;
      v19 = v18;
      _UIAxisDescription(v9);
      v20 = objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218242;
      v74 = a1;
      v75 = 2112;
      v76 = (uint64_t)v20;
      v21 = "_saveContentOffset: cv == %p; not saving -- scrolled to the start of layout axis (%@)";
      v22 = v19;
LABEL_75:
      _os_log_impl(&dword_185066000, v22, OS_LOG_TYPE_ERROR, v21, buf, 0x16u);
      goto LABEL_68;
    }
    if (objc_msgSend((id)a1, "_isInSetContentOffset"))
    {
      v23 = *(double *)(a1 + 2664);
      v24 = *(double *)(a1 + 2672);
    }
    else
    {
      objc_msgSend((id)a1, "contentOffset");
      v23 = v25;
      v24 = v26;
    }
    objc_msgSend((id)a1, "_visibleBounds");
    v28 = v27;
    v30 = v29;
    v32 = v31;
    v34 = v33;
    MaxX = v27;
    if ((*(_DWORD *)(a1 + 120) & 0x80000) != 0)
    {
      MaxX = v27;
      if ((objc_msgSend((id)a1, "_flipsHorizontalAxis") & 1) == 0)
      {
        v87.origin.x = v28;
        v87.origin.y = v30;
        v87.size.width = v32;
        v87.size.height = v34;
        MaxX = CGRectGetMaxX(v87);
      }
    }
    -[UICollectionViewData layoutAttributesForCellsInRect:validateLayout:](v3, 0, v28, v30, v32, v34);
    v19 = objc_claimAutoreleasedReturnValue();
    if (-[NSObject count](v19, "count"))
    {
      v72[0] = MEMORY[0x1E0C809B0];
      v72[1] = 3221225472;
      v72[2] = __77__UICollectionView__saveContentOffsetRestorationAnchorIfNecessaryUsingModel___block_invoke;
      v72[3] = &unk_1E16BCF48;
      v72[4] = a1;
      -[UICollectionView _layoutAttributesClosestToReferencePoint:amongCandidates:onAxis:shouldConsiderBlock:]((void *)a1, v19, v9, v72, MaxX, v30);
      v36 = objc_claimAutoreleasedReturnValue();
      v20 = v36;
      if (v36)
      {
        v37 = *(id ***)(a1 + 2904);
        -[NSObject indexPath](v36, "indexPath");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UICollectionViewSubviewManager visibleCellAtIndexPath:](v37, (uint64_t)v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v39)
        {

          v20 = 0;
        }
      }
      if ((*(_QWORD *)(a1 + 2640) & 0x20000000000000) != 0)
      {
        -[NSObject indexPath](v20, "indexPath");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)a1, "_delegateProxy");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "_collectionView:indexPathOfReferenceItemToPreserveContentOffsetWithProposedReference:", a1, v40);
        v42 = (void *)objc_claimAutoreleasedReturnValue();

        if ((UIEqual(v42, v40) & 1) == 0)
        {
          if (v42)
          {
            -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)v3, v42);
            v43 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v43 = 0;
          }

          v20 = v43;
        }

      }
      if (!v20)
      {
        v69 = qword_1EDDC6570;
        if (!qword_1EDDC6570)
        {
          v69 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v69, (unint64_t *)&qword_1EDDC6570);
        }
        if ((*(_BYTE *)v69 & 1) == 0)
          goto LABEL_68;
        v70 = *(NSObject **)(v69 + 8);
        if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          goto LABEL_68;
        v71 = *(_QWORD *)(a1 + 2200);
        *(_DWORD *)buf = 134218242;
        v74 = a1;
        v75 = 2112;
        v76 = v71;
        v21 = "_saveContentOffset: cv == %p; not saving -- no attributes available to reference. Current update: %@";
        v22 = v70;
        goto LABEL_75;
      }
      v47 = (*(unsigned __int16 *)(a1 + 2656) | (*(unsigned __int8 *)(a1 + 2658) << 16)) & 0xFFF7FFFF;
      *(_WORD *)(a1 + 2656) = *(_WORD *)(a1 + 2656);
      *(_BYTE *)(a1 + 2658) = BYTE2(v47);
      -[NSObject indexPath](v20, "indexPath");
      v48 = objc_claimAutoreleasedReturnValue();
      v49 = *(void **)(a1 + 2920);
      *(_QWORD *)(a1 + 2920) = v48;

      -[NSObject frame](v20, "frame");
      v51 = v50;
      v53 = v52;
      v55 = v54;
      v57 = v56;
      *(double *)(a1 + 2928) = v23 - v50;
      *(double *)(a1 + 2936) = v24 - v52;
      objc_msgSend((id)a1, "_contentInsetIncludingDecorations");
      v60 = v59 + *(double *)(a1 + 2936);
      *(double *)(a1 + 2928) = v58 + *(double *)(a1 + 2928);
      *(double *)(a1 + 2936) = v60;
      v61 = qword_1EDDC6578;
      if (!qword_1EDDC6578)
      {
        v61 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v61, (unint64_t *)&qword_1EDDC6578);
      }
      if ((*(_BYTE *)v61 & 1) == 0)
        goto LABEL_68;
      v62 = *(NSObject **)(v61 + 8);
      if (!os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        goto LABEL_68;
      v63 = *(void **)(a1 + 2920);
      v46 = v62;
      v64 = objc_msgSend(v63, "section");
      v65 = objc_msgSend(*(id *)(a1 + 2920), "item");
      v89.origin.x = v51;
      v89.origin.y = v53;
      v89.size.width = v55;
      v89.size.height = v57;
      NSStringFromCGRect(v89);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromCGPoint(*(CGPoint *)(a1 + 2928));
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v86.x = v23;
      v86.y = v24;
      NSStringFromCGPoint(v86);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134219266;
      v74 = a1;
      v75 = 2048;
      v76 = v64;
      v77 = 2048;
      v78 = v65;
      v79 = 2112;
      v80 = v66;
      v81 = 2112;
      v82 = v67;
      v83 = 2112;
      v84 = v68;
      _os_log_impl(&dword_185066000, v46, OS_LOG_TYPE_ERROR, "_saveContentOffset: cv == %p; saved (%zd - %zd). Item Frame: %@, offsetIntoAnchor: %@, contentOffset: %@",
        buf,
        0x3Eu);

    }
    else
    {
      v44 = qword_1EDDC6568;
      if (!qword_1EDDC6568)
      {
        v44 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v44, (unint64_t *)&qword_1EDDC6568);
      }
      if ((*(_BYTE *)v44 & 1) == 0)
        goto LABEL_69;
      v45 = *(NSObject **)(v44 + 8);
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        goto LABEL_69;
      v20 = v45;
      v88.origin.x = v28;
      v88.origin.y = v30;
      v88.size.width = v32;
      v88.size.height = v34;
      NSStringFromCGRect(v88);
      v46 = objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218242;
      v74 = a1;
      v75 = 2112;
      v76 = (uint64_t)v46;
      _os_log_impl(&dword_185066000, v20, OS_LOG_TYPE_ERROR, "_saveContentOffset: cv == %p; not saving -- no layout attributes in visible bounds (%@)",
        buf,
        0x16u);
    }

LABEL_68:
LABEL_69:

    goto LABEL_29;
  }
  v7 = qword_1EDDC6548;
  if (!qword_1EDDC6548)
  {
    v7 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v7, (unint64_t *)&qword_1EDDC6548);
  }
  if ((*(_BYTE *)v7 & 1) != 0)
  {
    v5 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v74 = a1;
      v6 = "_saveContentOffset: cv == %p; not saving -- already have an anchor";
      goto LABEL_72;
    }
  }
LABEL_29:

}

- (id)_sortedDeduplicatedReloadItems
{
  NSMutableArray *v2;
  NSMutableArray *v3;
  void *v4;
  void *v5;
  NSMutableArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = self->_reloadItems;
  v3 = v2;
  if (v2)
  {
    if ((unint64_t)-[NSMutableArray count](v2, "count") > 1)
    {
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", -[NSMutableArray count](v3, "count"));
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", -[NSMutableArray count](v3, "count"));
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v6 = v3;
      v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v15;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v15 != v9)
              objc_enumerationMutation(v6);
            v11 = *(_QWORD **)(*((_QWORD *)&v14 + 1) + 8 * i);
            -[UICollectionViewUpdateItem _indexPath](v11);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v5, "containsObject:", v12, (_QWORD)v14) & 1) == 0)
            {
              objc_msgSend(v5, "addObject:", v12);
              objc_msgSend(v4, "insertObject:atIndex:", v11, objc_msgSend(v4, "indexOfObject:inSortedRange:options:usingComparator:", v11, 0, objc_msgSend(v4, "count"), 1024, &__block_literal_global_649_0));
            }

          }
          v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        }
        while (v8);
      }

    }
    else
    {
      v4 = (void *)-[NSMutableArray mutableCopy](v3, "mutableCopy");
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (void)_resetUpdateItemArrays
{
  NSMutableArray *insertItems;
  NSMutableArray *deleteItems;
  NSMutableArray *reloadItems;
  NSMutableArray *moveItems;
  NSArray *originalDeleteItems;
  NSArray *originalInsertItems;

  insertItems = self->_insertItems;
  self->_insertItems = 0;

  deleteItems = self->_deleteItems;
  self->_deleteItems = 0;

  reloadItems = self->_reloadItems;
  self->_reloadItems = 0;

  moveItems = self->_moveItems;
  self->_moveItems = 0;

  originalDeleteItems = self->_originalDeleteItems;
  self->_originalDeleteItems = 0;

  originalInsertItems = self->_originalInsertItems;
  self->_originalInsertItems = 0;

}

- (_DWORD)_isContentOffset:(CGFloat)a3 atStartOfAxis:(CGFloat)a4
{
  _DWORD *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGRect v16;

  if (result)
  {
    v7 = result;
    objc_msgSend(result, "_contentInsetIncludingDecorations");
    if (a2 == 1)
    {
      v12 = v9;
      if ((v7[30] & 0x80000) == 0 || (v13 = v10, (objc_msgSend(v7, "_flipsHorizontalAxis") & 1) != 0))
      {
        v11 = a3 + v12;
        return (_DWORD *)(v11 <= 0.001);
      }
      objc_msgSend(v7, "contentSize");
      v15 = v14;
      objc_msgSend(v7, "bounds");
      v16.origin.x = a3;
      v16.origin.y = a4;
      return (_DWORD *)(CGRectGetMaxX(v16) - (v13 + v15) + 0.001 >= 0.0);
    }
    else
    {
      if (a2 == 2)
      {
        v11 = a4 + v8;
        return (_DWORD *)(v11 <= 0.001);
      }
      return 0;
    }
  }
  return result;
}

- (BOOL)_updatePreferredAttributesForSupplementariesInCurrentUpdateWithRect:(CGRect)a3 newlyVisible:(id)a4 includeInserts:(BOOL)a5
{
  _BOOL4 v5;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  id v11;
  id v12;
  UICollectionViewData *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  UICollectionViewLayout *layout;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  _UICollectionViewSubviewManager *subviewManager;
  id v29;
  BOOL v30;
  UICollectionViewData *v32;
  id v33;
  id obj;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[128];
  uint64_t v50;
  CGRect v51;
  CGRect v52;

  v5 = a5;
  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v50 = *MEMORY[0x1E0C80C00];
  v11 = a4;
  v12 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  if (v5)
  {
    v33 = v11;
    v13 = self->_currentUpdate->_newModel;
    -[UICollectionViewData validateLayoutInRect:]((uint64_t)v13, x, y, width, height);
    v32 = v13;
    -[UICollectionViewData knownSupplementaryElementKinds]((id *)&v13->super.isa);
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
    if (v36)
    {
      v35 = *(_QWORD *)v45;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v45 != v35)
            objc_enumerationMutation(obj);
          v37 = v14;
          v15 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * v14);
          -[UICollectionViewLayout indexPathsToInsertForSupplementaryViewOfKind:](self->_layout, "indexPathsToInsertForSupplementaryViewOfKind:", v15, v32);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = 0u;
          v41 = 0u;
          v42 = 0u;
          v43 = 0u;
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
          if (v17)
          {
            v18 = v17;
            v19 = *(_QWORD *)v41;
            do
            {
              for (i = 0; i != v18; ++i)
              {
                if (*(_QWORD *)v41 != v19)
                  objc_enumerationMutation(v16);
                -[UICollectionViewLayout layoutAttributesForSupplementaryViewOfKind:atIndexPath:](self->_layout, "layoutAttributesForSupplementaryViewOfKind:atIndexPath:", v15, *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * i));
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                v22 = v21;
                if (v21)
                {
                  layout = self->_layout;
                  objc_msgSend(v21, "frame");
                  -[UICollectionViewLayout _orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:](layout, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v22);
                  v52.origin.x = v24;
                  v52.origin.y = v25;
                  v52.size.width = v26;
                  v52.size.height = v27;
                  v51.origin.x = x;
                  v51.origin.y = y;
                  v51.size.width = width;
                  v51.size.height = height;
                  if (CGRectIntersectsRect(v51, v52))
                    objc_msgSend(v12, "addObject:", v22);
                }

              }
              v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
            }
            while (v18);
          }

          ++v14;
        }
        while (v37 + 1 != v36);
        v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
      }
      while (v36);
    }

    v11 = v33;
  }
  if (dyld_program_sdk_at_least())
  {
    subviewManager = self->_subviewManager;
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = __116__UICollectionView__updatePreferredAttributesForSupplementariesInCurrentUpdateWithRect_newlyVisible_includeInserts___block_invoke;
    v38[3] = &unk_1E16BD750;
    v38[4] = self;
    v29 = v12;
    v39 = v29;
    if (subviewManager)
    {
      -[_UICollectionViewSubviewCollection enumerateSupplementariesWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v38);
      v29 = v39;
    }

  }
  if (objc_msgSend(v11, "count", v32))
    objc_msgSend(v12, "unionSet:", v11);
  v30 = -[UICollectionView _updatePreferredAttributesForSupplementariesInCurrentUpdate:](self, "_updatePreferredAttributesForSupplementariesInCurrentUpdate:", v12);

  return v30;
}

- (BOOL)_updatePreferredAttributesForSupplementariesInCurrentUpdate:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t i;
  id *v10;
  UICollectionViewUpdate *currentUpdate;
  void *v12;
  void *v13;
  id v14;
  uint64_t *subviewManager;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v22;
    while (1)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v22 != v8)
          objc_enumerationMutation(v4);
        v10 = *(id **)(*((_QWORD *)&v21 + 1) + 8 * i);
        if (dyld_program_sdk_at_least())
        {
          currentUpdate = self->_currentUpdate;
          -[UIBarButtonItemGroup _items](v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "indexPath");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          -[UICollectionViewUpdate validatedOldIndexPathForSupplementaryElementOfKind:newIndexPath:]((uint64_t)currentUpdate, v12, v13);
          v14 = (id)objc_claimAutoreleasedReturnValue();

          if (v14)
          {
            subviewManager = (uint64_t *)self->_subviewManager;
            -[UIBarButtonItemGroup _items](v10);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UICollectionViewSubviewManager visibleSupplementaryOfKind:atIndexPath:](subviewManager, (uint64_t)v16, (uint64_t)v14);
            v17 = (void *)objc_claimAutoreleasedReturnValue();

            if (v17)
            {
              v7 |= -[UICollectionView _updatePreferredAttributesForReusableViewInCurrentUpdate:withOriginalAttributes:isExistingView:](self, "_updatePreferredAttributesForReusableViewInCurrentUpdate:withOriginalAttributes:isExistingView:", v17, v10, 1);

              goto LABEL_14;
            }
          }

        }
        -[UIBarButtonItemGroup _items](v10);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "indexPath");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = -[UICollectionView _createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:](self, "_createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:", v18, v19, self->_layout, v10, 1);

        if (v14)
        {
          v7 |= -[UICollectionView _updatePreferredAttributesForReusableViewInCurrentUpdate:withOriginalAttributes:isExistingView:](self, "_updatePreferredAttributesForReusableViewInCurrentUpdate:withOriginalAttributes:isExistingView:", v14, v10, 0);
          if ((objc_msgSend(v14, "_isInUpdateAnimation") & 1) == 0)
            -[UICollectionView _reuseSupplementaryView:](self, "_reuseSupplementaryView:", v14);
        }
LABEL_14:

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (!v6)
        goto LABEL_18;
    }
  }
  LOBYTE(v7) = 0;
LABEL_18:

  return v7 & 1;
}

- (BOOL)_isRequestingCellOrSupplementary
{
  return *((_QWORD *)&self->_collectionViewFlags + 1) >> 63;
}

- (NSArray)indexPathsForSelectedItems
{
  void *v3;
  void *v4;

  -[UICollectionView _indexPathsForSelectedItems](self, "_indexPathsForSelectedItems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _translatePresentationIndexPathsToDataSourceIndexPathsAsNeeded:](self, "_translatePresentationIndexPathsToDataSourceIndexPathsAsNeeded:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v4;
}

- (id)_translatePresentationIndexPathsToDataSourceIndexPathsAsNeeded:(id)a3
{
  id v4;
  id v5;
  void *v6;

  v4 = a3;
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController)
    && !-[UICollectionView _isOperatingWithPresentationValues](self, "_isOperatingWithPresentationValues"))
  {
    -[UICollectionView _indexPathsBeforeShadowUpdatesForIndexPaths:](self, "_indexPathsBeforeShadowUpdatesForIndexPaths:", v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = v4;
  }
  v6 = v5;

  return v6;
}

- (id)_indexPathsForSelectedItems
{
  _UICollectionViewSelectionController *selectionController;
  void *v4;
  void *v5;

  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  selectionController = self->_selectionController;
  if (selectionController)
    v4 = (void *)-[NSMutableSet copy](selectionController->_selectedIndexPaths, "copy");
  else
    v4 = 0;
  objc_msgSend(v4, "allObjects");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)_indexPathsForVisibleSupplementaryViewsOfKind:(id)a3
{
  return -[UICollectionView _indexPathsForVisibleSupplementaryViewsOfKind:isDecorationView:](self, "_indexPathsForVisibleSupplementaryViewsOfKind:isDecorationView:", a3, 0);
}

uint64_t __67__UICollectionView__sortAttributesByDistanceToVisibleBoundsOrigin___block_invoke(uint64_t a1, void *a2, void *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;

  if (*(_BYTE *)(a1 + 56))
    v5 = -[UICollectionView _layoutAttributesFrameAdjustedForOrthogonalScrollingOffset:](*(_QWORD *)(a1 + 32), a2);
  else
    objc_msgSend(a2, "frame");
  v9 = v5;
  v10 = v6;
  v11 = v7;
  v12 = v8;
  if (*(_BYTE *)(a1 + 56))
    v13 = -[UICollectionView _layoutAttributesFrameAdjustedForOrthogonalScrollingOffset:](*(_QWORD *)(a1 + 32), a3);
  else
    objc_msgSend(a3, "frame");
  v17 = v13;
  v18 = v14;
  v19 = v15;
  v20 = v16;
  UIDistanceBetweenPointAndRect(*(CGFloat *)(a1 + 40), *(CGFloat *)(a1 + 48), v9, v10, v11, v12);
  v22 = v21;
  UIDistanceBetweenPointAndRect(*(CGFloat *)(a1 + 40), *(CGFloat *)(a1 + 48), v17, v18, v19, v20);
  if (v22 >= v23)
    v24 = 0;
  else
    v24 = -1;
  if (v22 > v23)
    return 1;
  else
    return v24;
}

- (double)_layoutAttributesFrameAdjustedForOrthogonalScrollingOffset:(uint64_t)a1
{
  double v4;
  double v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  double v16;
  double v17;
  CGFloat v18;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  if (!a1)
    return 0.0;
  objc_msgSend(a2, "frame");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  if (objc_msgSend(*(id *)(a1 + 2072), "_hasOrthogonalScrollingSections"))
  {
    objc_msgSend(a2, "indexPath");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "section");

    objc_msgSend(*(id *)(a1 + 2072), "_orthogonalScrollingSections");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "containsIndex:", v13);

    if (v15)
    {
      objc_msgSend(*(id *)(a1 + 2072), "_offsetForOrthogonalScrollingSection:", v13);
      v17 = v16;
      v20.origin.x = v5;
      v20.origin.y = v7;
      v20.size.width = v9;
      v20.size.height = v11;
      v18 = CGRectGetMinX(v20) - v17;
      v21.origin.x = v5;
      v21.origin.y = v7;
      v21.size.width = v9;
      v21.size.height = v11;
      CGRectGetMinY(v21);
      v22.origin.x = v5;
      v22.origin.y = v7;
      v22.size.width = v9;
      v22.size.height = v11;
      CGRectGetWidth(v22);
      v23.origin.x = v5;
      v23.origin.y = v7;
      v23.size.width = v9;
      v23.size.height = v11;
      CGRectGetHeight(v23);
      return v18;
    }
  }
  return v5;
}

- (id)_subviewRouterForOrthogonalScrollViewAtSection:(int64_t)a3
{
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  -[UICollectionView subviewRouter]((id *)&self->super.super.super.super.isa);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _sectionContainerViewForSectionIndex:createIfNecessary:](self, "_sectionContainerViewForSectionIndex:createIfNecessary:", a3, 1);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v6)
  {
    v8 = *(id *)(v6 + 416);

    v5 = v8;
  }

  return v5;
}

- (id)_sectionContainerViewForSectionIndex:(int64_t)a3 createIfNecessary:(BOOL)a4
{
  _BOOL4 v4;
  uint64_t v7;
  void *v8;
  NSMutableDictionary *sectionToContainerViewMap;
  void *v10;
  void *v11;
  BOOL v12;
  id v13;
  _QWORD v15[4];
  id v16;
  UICollectionView *v17;
  uint64_t *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v4 = a4;
  -[UICollectionViewLayout _sectionDescriptorForSectionIndex:](self->_layout, "_sectionDescriptorForSectionIndex:");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (v7 && *(_BYTE *)(v7 + 8))
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x3032000000;
    v23 = __Block_byref_object_copy__40;
    v24 = __Block_byref_object_dispose__40;
    sectionToContainerViewMap = self->_sectionToContainerViewMap;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary objectForKeyedSubscript:](sectionToContainerViewMap, "objectForKeyedSubscript:", v10);
    v25 = (id)objc_claimAutoreleasedReturnValue();

    v11 = (void *)v21[5];
    if (v11)
      v12 = 1;
    else
      v12 = !v4;
    if (!v12)
    {
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __75__UICollectionView__sectionContainerViewForSectionIndex_createIfNecessary___block_invoke;
      v15[3] = &unk_1E16BCCD0;
      v18 = &v20;
      v16 = v8;
      v17 = self;
      v19 = a3;
      +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v15);

      v11 = (void *)v21[5];
    }
    v13 = v11;
    _Block_object_dispose(&v20, 8);

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

- (void)_incrementUpdateAnimationCountWithContext:(id)a3
{
  _QWORD *v4;

  v4 = a3;
  if (v4)
    ++v4[2];

  ++self->_updateAnimationCount;
}

- (void)_setVisibleView:(id)a3 forLayoutAttributes:(id)a4
{
  _QWORD *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _UICollectionViewSubviewManager *subviewManager;
  _QWORD *v12;
  void *v13;
  id v14;

  v6 = a4;
  v14 = a3;
  if (v6)
  {
    v7 = *((_WORD *)v6 + 144);
    v8 = 1;
    if ((v7 & 2) != 0)
      v8 = 2;
    if ((v7 & 1) != 0)
      v9 = 0;
    else
      v9 = v8;
    v10 = v6[1];
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  subviewManager = self->_subviewManager;
  v12 = -[UICollectionViewLayoutAttributes __indexPath](v6);

  v13 = v14;
  if (subviewManager)
  {
    -[_UICollectionViewSubviewCollection setView:ofKind:inCategory:atIndexPath:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v14, v10, v9, (uint64_t)v12);
    v13 = v14;
  }

}

- (void)_reusableViewDidInvalidateIntrinsicContentSize:(id)a3
{
  id v4;
  unint64_t v5;
  id *v6;
  id *v7;
  __int16 v8;
  void *v9;
  uint64_t v10;
  void *v11;
  UICollectionViewLayoutInvalidationContext *v12;
  void *v13;
  void *v14;
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;
  void *v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (self)
  {
    if (_UISupportsIntrinsicContentSizeInvalidation())
    {
      if ((*((_WORD *)&self->_collectionViewFlags + 8) & 0xCLL) != 0)
      {
        v5 = *((_WORD *)&self->_collectionViewFlags + 8) >> 6;
        if (v5 < _UIMaximumIntrinsicContentSizeInvalidationUpdatesPerCommit()
          && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x8000000008000000) == 0
          && !self->_cellBeingReconfigured
          && (objc_msgSend(v4, "_isHiddenForReuse") & 1) == 0)
        {
          objc_msgSend(v4, "_layoutAttributes");
          v6 = (id *)objc_claimAutoreleasedReturnValue();
          v7 = v6;
          if (v6)
          {
            v8 = *((_WORD *)v6 + 144);
            if ((v8 & 1) != 0)
            {
              objc_msgSend(v6, "indexPath");
              v9 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v9)
                goto LABEL_18;
              -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", v9);
              v14 = (void *)objc_claimAutoreleasedReturnValue();

              if (v14)
                goto LABEL_18;
              -[UICollectionView _setNeedsRecomputePreferredAttributesForInvalidatedElements](self, "_setNeedsRecomputePreferredAttributesForInvalidatedElements");
              intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
              v17[0] = v9;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 1);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionViewLayoutInvalidationContext invalidateItemsAtIndexPaths:](intrinsicContentSizeInvalidationContext, "invalidateItemsAtIndexPaths:", v11);
LABEL_17:

LABEL_18:
              goto LABEL_19;
            }
            if ((v8 & 3) == 0)
            {
              objc_msgSend(v6, "indexPath");
              v9 = (void *)objc_claimAutoreleasedReturnValue();
              -[UIBarButtonItemGroup _items](v7);
              v10 = objc_claimAutoreleasedReturnValue();
              v11 = (void *)v10;
              if (v9 && v10)
              {
                -[UICollectionView _setNeedsRecomputePreferredAttributesForInvalidatedElements](self, "_setNeedsRecomputePreferredAttributesForInvalidatedElements");
                v12 = self->_intrinsicContentSizeInvalidationContext;
                v16 = v9;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v16, 1);
                v13 = (void *)objc_claimAutoreleasedReturnValue();
                -[UICollectionViewLayoutInvalidationContext invalidateSupplementaryElementsOfKind:atIndexPaths:](v12, "invalidateSupplementaryElementsOfKind:atIndexPaths:", v11, v13);

              }
              goto LABEL_17;
            }
          }
LABEL_19:

        }
      }
    }
  }

}

- (void)setBounds:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  double v8;
  double v9;
  double v10;
  double v11;
  UICollectionViewData *collectionViewData;
  $33D6A0B6D1060ABBBAF8FFE3C835D577 collectionViewDataFlags;
  int v14;
  unint64_t v15;
  void *v16;
  int v17;
  int v18;
  _UICollectionViewFeedbackLoopDebugger *debugger;
  unint64_t v20;
  void *v21;
  _UICollectionViewPrefetchingContext *activeOrthogonalPrefetchingContext;
  _UICollectionViewPrefetchingContext *v23;
  _UICollectionViewPrefetchingContext *v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  int v33;
  objc_super v34;
  objc_super v35;
  uint8_t buf[4];
  UICollectionView *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  uint64_t v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v42 = *MEMORY[0x1E0C80C00];
  -[UIView bounds](self, "bounds");
  v8 = v43.origin.x;
  v9 = v43.origin.y;
  v10 = v43.size.width;
  v11 = v43.size.height;
  v48.origin.x = x;
  v48.origin.y = y;
  v48.size.width = width;
  v48.size.height = height;
  if (CGRectEqualToRect(v43, v48))
    return;
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x4000000) != 0)
  {
    v15 = qword_1EDDC64A8;
    if (!qword_1EDDC64A8)
    {
      v15 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v15, (unint64_t *)&qword_1EDDC64A8);
    }
    if ((*(_BYTE *)v15 & 1) != 0)
    {
      v25 = *(NSObject **)(v15 + 8);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v26 = v25;
        v44.origin.x = v8;
        v44.origin.y = v9;
        v44.size.width = v10;
        v44.size.height = v11;
        NSStringFromCGRect(v44);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v45.origin.x = x;
        v45.origin.y = y;
        v45.size.width = width;
        v45.size.height = height;
        NSStringFromCGRect(v45);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 134218498;
        v37 = self;
        v38 = 2112;
        v39 = v27;
        v40 = 2112;
        v41 = v28;
        _os_log_impl(&dword_185066000, v26, OS_LOG_TYPE_ERROR, "setBounds: cv == %p; oldBounds == %@; newBounds == %@",
          buf,
          0x20u);

      }
    }
    v35.receiver = self;
    v35.super_class = (Class)UICollectionView;
    -[UIScrollView setBounds:](&v35, sel_setBounds_, x, y, width, height);
    goto LABEL_39;
  }
  collectionViewData = self->_collectionViewData;
  if (!collectionViewData)
  {
    v14 = 0;
    if (!dyld_program_sdk_at_least())
    {
      v16 = 0;
      v17 = 0;
      goto LABEL_18;
    }
LABEL_6:
    if (-[UICollectionViewLayout _preparedForBoundsChanges](self->_layout, "_preparedForBoundsChanges")
      || (v14 & 1) != 0)
    {
      goto LABEL_14;
    }
LABEL_16:
    v16 = 0;
    v14 = 0;
    v17 = 0;
    goto LABEL_18;
  }
  collectionViewDataFlags = collectionViewData->_collectionViewDataFlags;
  if ((dyld_program_sdk_at_least() & 1) != 0)
  {
    v14 = (*(unsigned int *)&collectionViewDataFlags >> 3) & 1;
    goto LABEL_6;
  }
  if ((*(_BYTE *)&collectionViewDataFlags & 8) == 0)
    goto LABEL_16;
LABEL_14:
  if (-[UICollectionViewLayout shouldInvalidateLayoutForBoundsChange:](self->_layout, "shouldInvalidateLayoutForBoundsChange:", x, y, width, height))
  {
    -[UICollectionViewLayout _invalidationContextForBoundsChange:fromOldBounds:](self->_layout, "_invalidationContextForBoundsChange:fromOldBounds:", x, y, width, height, v8, v9, v10, v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 1;
    v17 = 1;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v14 = 1;
  }
LABEL_18:
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x2000000000) != 0)
  {
    if (((*((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                     + 18) << 16)) & 0x10000) != 0)
      goto LABEL_25;
  }
  else
  {
    self->_preRotationBounds.origin.x = v8;
    self->_preRotationBounds.origin.y = v9;
    self->_preRotationBounds.size.width = v10;
    self->_preRotationBounds.size.height = v11;
    v18 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x2000000000uLL;
    if ((v18 & 0x10000) != 0)
      goto LABEL_25;
  }
  if (!-[UIScrollView isScrollAnimating](self, "isScrollAnimating"))
    -[UICollectionView _clearTargetIndexPathForScrolling](self, "_clearTargetIndexPathForScrolling");
  -[UICollectionView _clearContentOffsetRestorationAnchor](self, "_clearContentOffsetRestorationAnchor");
LABEL_25:
  debugger = self->_debugger;
  if (debugger)
    -[_UICollectionViewFeedbackLoopDebugger recordCollectionViewRectPropertyChange:fromRect:toRect:](debugger, "recordCollectionViewRectPropertyChange:fromRect:toRect:", CFSTR("bounds"), v8, v9, v10, v11, x, y, width, height);
  v34.receiver = self;
  v34.super_class = (Class)UICollectionView;
  -[UIScrollView setBounds:](&v34, sel_setBounds_, x, y, width, height);
  if (v17)
  {
    v20 = qword_1EDDC64B0;
    if (!qword_1EDDC64B0)
    {
      v20 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v20, (unint64_t *)&qword_1EDDC64B0);
    }
    if ((*(_BYTE *)v20 & 1) != 0)
    {
      v29 = *(NSObject **)(v20 + 8);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v30 = v29;
        v46.origin.x = v8;
        v46.origin.y = v9;
        v46.size.width = v10;
        v46.size.height = v11;
        NSStringFromCGRect(v46);
        v33 = v14;
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v47.origin.x = x;
        v47.origin.y = y;
        v47.size.width = width;
        v47.size.height = height;
        NSStringFromCGRect(v47);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 134218498;
        v37 = self;
        v38 = 2112;
        v39 = v31;
        v40 = 2112;
        v41 = v32;
        _os_log_impl(&dword_185066000, v30, OS_LOG_TYPE_ERROR, "setBounds: cv == %p; invalidating for oldBounds == %@; newBounds == %@",
          buf,
          0x20u);

        v14 = v33;
      }
    }
    -[UICollectionViewLayout _invalidateLayoutUsingContext:](self->_layout, "_invalidateLayoutUsingContext:", v16);
    if (v14)
    {
      objc_msgSend(v16, "_invalidatedSupplementaryViews");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, v21 == 0);

      activeOrthogonalPrefetchingContext = self->_activeOrthogonalPrefetchingContext;
      self->_activeOrthogonalPrefetchingContext = 0;

LABEL_34:
      if (v10 != width || v11 != height)
        -[UICollectionView _updateDefaultLayoutMargins](self, "_updateDefaultLayoutMargins");
      goto LABEL_38;
    }
    -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
    v24 = self->_activeOrthogonalPrefetchingContext;
    self->_activeOrthogonalPrefetchingContext = 0;

  }
  else
  {
    -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, v14 ^ 1u);
    v23 = self->_activeOrthogonalPrefetchingContext;
    self->_activeOrthogonalPrefetchingContext = 0;

    if (((v14 ^ 1) & 1) == 0)
      goto LABEL_34;
  }
LABEL_38:

LABEL_39:
  if (v10 != width || v11 != height)
    -[_UICollectionViewSectionFocusGuideController performLayout](self->_sectionFocusGuideController, "performLayout");
}

- (void)_setNeedsRecomputePreferredAttributesForInvalidatedElements
{
  UICollectionViewLayoutInvalidationContext *v3;
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;
  _BOOL4 v5;
  int v6;
  __int16 v7;

  if (!self->_intrinsicContentSizeInvalidationContext)
  {
    v3 = (UICollectionViewLayoutInvalidationContext *)objc_alloc_init((Class)objc_msgSend((id)objc_opt_class(), "invalidationContextClass"));
    intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
    self->_intrinsicContentSizeInvalidationContext = v3;

    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
  }
  v5 = +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled");
  v6 = *((_WORD *)&self->_collectionViewFlags + 8) & 0xFFEF | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  if (v5 | ((*((unsigned __int16 *)&self->_collectionViewFlags + 8) | ((unint64_t)*((unsigned __int8 *)&self->_collectionViewFlags
                                                                                          + 18) << 16)) >> 4) & 1)
    v7 = 16;
  else
    v7 = 0;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v6);
  *((_WORD *)&self->_collectionViewFlags + 8) = v7 | v6;
}

- (void)_updateSelectionIsKey
{
  _UITableUpdateSelectionIsKeyTraitOverride(self, (*((_QWORD *)&self->_collectionViewFlags + 1) >> 23) & 1, -[UICollectionView selectionFollowsFocus](self, "selectionFollowsFocus"));
}

- (BOOL)selectionFollowsFocus
{
  __int128 v2;
  _QWORD v4[5];

  *((_QWORD *)&v2 + 1) = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | ((unint64_t)*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  *(_QWORD *)&v2 = *((_QWORD *)&self->_collectionViewFlags + 1);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __41__UICollectionView_selectionFollowsFocus__block_invoke;
  v4[3] = &unk_1E16B2268;
  v4[4] = self;
  return _UITriStateToBool((v2 >> 15) & 3, v4);
}

- (void)registerClass:(Class)cellClass forCellWithReuseIdentifier:(NSString *)identifier
{
  NSMutableDictionary *v7;
  NSMutableDictionary *cellClassDict;
  NSMutableDictionary *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  NSString *v15;

  v15 = identifier;
  if (-[NSString length](v15, "length"))
  {
    if (!cellClass)
      goto LABEL_5;
  }
  else
  {
    v10 = (void *)MEMORY[0x1E0C99DA0];
    v11 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "raise:format:", v11, CFSTR("must pass a valid reuse identifier to -[UICollectionView %@]"), v12);

    if (!cellClass)
      goto LABEL_5;
  }
  if ((-[objc_class isSubclassOfClass:](cellClass, "isSubclassOfClass:", objc_opt_class()) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromClass(cellClass);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9428, CFSTR("attempt to register a cell class '%@' which is not a subclass of UICollectionViewCell"), v14);

  }
LABEL_5:
  if (!self->_cellClassDict)
  {
    v7 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    cellClassDict = self->_cellClassDict;
    self->_cellClassDict = v7;

  }
  -[NSMutableDictionary removeObjectForKey:](self->_cellNibDict, "removeObjectForKey:", v15);
  v9 = self->_cellClassDict;
  if (cellClass)
    -[NSMutableDictionary setValue:forKey:](v9, "setValue:forKey:", cellClass, v15);
  else
    -[NSMutableDictionary removeObjectForKey:](v9, "removeObjectForKey:", v15);

}

- (void)_updateVerticalScrollIndicatorVisibility
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == 6)
  {
    -[UIView traitCollection](self, "traitCollection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "_hasSplitViewControllerContextPrimaryColumn") ^ 1;

    -[UIScrollView _setDefaultShowsVerticalScrollIndicator:](self, "_setDefaultShowsVerticalScrollIndicator:", v6);
  }
}

- (BOOL)_prefetchingEnabledDefault
{
  return 1;
}

- (void)_setDefaultAlwaysBounceVertical:(BOOL)a3 horizontal:(BOOL)a4
{
  _BOOL8 v4;
  objc_super v6;
  objc_super v7;

  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x1000000000000) == 0)
  {
    v4 = a4;
    v7.receiver = self;
    v7.super_class = (Class)UICollectionView;
    -[UIScrollView setAlwaysBounceVertical:](&v7, sel_setAlwaysBounceVertical_, a3);
    v6.receiver = self;
    v6.super_class = (Class)UICollectionView;
    -[UIScrollView setAlwaysBounceHorizontal:](&v6, sel_setAlwaysBounceHorizontal_, v4);
  }
}

- (void)setAlwaysBounceVertical:(BOOL)a3
{
  objc_super v3;

  *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x1000000000000uLL;
  v3.receiver = self;
  v3.super_class = (Class)UICollectionView;
  -[UIScrollView setAlwaysBounceVertical:](&v3, sel_setAlwaysBounceVertical_, a3);
}

- (BOOL)_dataSourceImplementsNumberOfSections
{
  return (*(_QWORD *)&self->_collectionViewFlags >> 54) & 1;
}

- (id)_preparedCellForItemAtIndexPath:(id)a3 withLayoutAttributes:(id)a4 applyAttributes:(BOOL)a5 isFocused:(BOOL)a6 notify:(BOOL)a7
{
  _BOOL8 v7;
  _BOOL8 v8;
  _BOOL8 v9;
  uint64_t v13;
  id *v14;
  id v15;
  void *v16;
  id v17;
  _BOOL4 v18;
  unint64_t v19;
  NSObject *v20;
  void *v22;
  _BYTE v23[24];

  v7 = a7;
  v8 = a6;
  v9 = a5;
  if (!-[UICollectionView _prefetchingAllowed](self, "_prefetchingAllowed"))
    goto LABEL_21;
  -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", a3);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (id *)v13;
  if (!v13)
    goto LABEL_20;
  v15 = *(id *)(v13 + 16);
  if (!v15)
  {
    v17 = 0;
    goto LABEL_19;
  }
  v16 = v15;
  if ((*((_WORD *)v15 + 144) & 1) == 0)
  {
    v17 = v15;
LABEL_19:

    goto LABEL_20;
  }
  v17 = v14[3];

  if (!v17)
  {
LABEL_20:

LABEL_21:
    v17 = -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](self, "_createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", a3, a4, v9, v8, v7);
    return v17;
  }
  v18 = -[UICollectionView _updatePrefetchItemIfNeeded:forIndexPath:withLayoutAttributes:willDisplay:](self, "_updatePrefetchItemIfNeeded:forIndexPath:withLayoutAttributes:willDisplay:", v14, a3, a4, 1);
  -[NSMutableDictionary removeObjectForKey:](self->_prefetchCacheItems, "removeObjectForKey:", a3);
  if (!v18)
  {
    -[UICollectionView _reusePrefetchedCell:](self, "_reusePrefetchedCell:", v17);
    goto LABEL_19;
  }
  v19 = _preparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify____s_category;
  if (!_preparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify____s_category)
  {
    v19 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v19, (unint64_t *)&_preparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify____s_category);
  }
  v20 = *(id *)(v19 + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(v19 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v20))
  {
    *(_DWORD *)v23 = 134218240;
    *(_QWORD *)&v23[4] = objc_msgSend(a3, "section");
    *(_WORD *)&v23[12] = 2048;
    *(_QWORD *)&v23[14] = objc_msgSend(a3, "item");
    _os_signpost_emit_unreliably_with_name_impl();
  }

  if (!objc_msgSend(v17, "_isHiddenForReuse"))
  {
    if (!v8)
      goto LABEL_15;
LABEL_24:
    +[_UICollectionViewFocusedItemState stateWithReusableView:]((uint64_t)_UICollectionViewFocusedItemState, v17);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", v22);

    if (!v7)
      goto LABEL_17;
    goto LABEL_16;
  }
  objc_msgSend(v17, "_setHiddenForReuse:", 0);
  if (v8)
    goto LABEL_24;
LABEL_15:
  if (v7)
LABEL_16:
    -[UICollectionView _notifyWillDisplayCellIfNeeded:forIndexPath:](self, "_notifyWillDisplayCellIfNeeded:forIndexPath:", v17, a3, *(_OWORD *)v23, *(_QWORD *)&v23[16]);
LABEL_17:

  return v17;
}

- (UICollectionViewCell)dequeueConfiguredReusableCellWithRegistration:(UICollectionViewCellRegistration *)registration forIndexPath:(NSIndexPath *)indexPath item:(id)item
{
  UICollectionViewCellRegistration *v9;
  id v10;
  NSIndexPath *v11;
  UICollectionView *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v22;
  uint8_t buf[4];
  UICollectionViewCellRegistration *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = registration;
  v10 = item;
  v11 = indexPath;
  if (dyld_program_sdk_at_least())
  {
    -[UICollectionViewCellRegistration _collectionViewRequestingViewWhenCreated](v9, "_collectionViewRequestingViewWhenCreated");
    v12 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

    if (v12 == self)
    {
      if (_UIIsPrivateMainBundle())
      {
        __UIFaultDebugAssertLog();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          v24 = v9;
          _os_log_fault_impl(&dword_185066000, v13, OS_LOG_TYPE_FAULT, "Attempted to dequeue a cell using a registration that was created inside -collectionView:cellForItemAtIndexPath: or inside a UICollectionViewDiffableDataSource cell provider. Creating a new registration each time a cell is requested will prevent reuse and cause created cells to remain inaccessible in memory for the lifetime of the collection view. Registrations should be created up front and reused. Registration: %@", buf, 0xCu);
        }
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v13 = objc_claimAutoreleasedReturnValue();
        -[NSObject handleFailureInMethod:object:file:lineNumber:description:](v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9687, CFSTR("Attempted to dequeue a cell using a registration that was created inside -collectionView:cellForItemAtIndexPath: or inside a UICollectionViewDiffableDataSource cell provider. Creating a new registration each time a cell is requested will prevent reuse and cause created cells to remain inaccessible in memory for the lifetime of the collection view. Registrations should be created up front and reused. Registration: %@"), v9);
      }

    }
  }
  -[UICollectionViewCellRegistration reuseIdentifier](v9, "reuseIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v14, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9689, CFSTR("UIKit internal inconsistency: registration missing reuse identifier %@"), v9);

  }
  if (-[UICollectionViewCellRegistration hasCellClass](v9, "hasCellClass"))
  {
    -[NSMutableDictionary objectForKeyedSubscript:](self->_cellClassDict, "objectForKeyedSubscript:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v15)
      -[UICollectionView registerClass:forCellWithReuseIdentifier:](self, "registerClass:forCellWithReuseIdentifier:", -[UICollectionViewCellRegistration cellClass](v9, "cellClass"), v14);
  }
  else if (-[UICollectionViewCellRegistration hasCellNib](v9, "hasCellNib"))
  {
    -[NSMutableDictionary objectForKeyedSubscript:](self->_cellNibDict, "objectForKeyedSubscript:", v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v16)
    {
      -[UICollectionViewCellRegistration cellNib](v9, "cellNib");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView registerNib:forCellWithReuseIdentifier:](self, "registerNib:forCellWithReuseIdentifier:", v17, v14);

    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9700, CFSTR("Cell registration is invalid (no cell class or nib) %@"), v9);

  }
  -[UICollectionView _dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:](self, "_dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:", CFSTR("UICollectionElementKindCell"), v14, v11, 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionViewCellRegistration configurationHandler](v9, "configurationHandler");
  v20 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, NSIndexPath *, id))v20)[2](v20, v19, v11, v10);

  return (UICollectionViewCell *)v19;
}

- (UICollectionReusableView)dequeueReusableSupplementaryViewOfKind:(NSString *)elementKind withReuseIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath *)indexPath
{
  NSString *v9;
  NSString *v10;
  void *v11;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;

  v9 = elementKind;
  v10 = identifier;
  if (!-[NSString length](v9, "length"))
  {
    v13 = (void *)MEMORY[0x1E0C99DA0];
    v14 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "raise:format:", v14, CFSTR("must pass a valid element kind to -[UICollectionView %@]"), v15);

  }
  if (!-[NSString length](v10, "length"))
  {
    v16 = (void *)MEMORY[0x1E0C99DA0];
    v17 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "raise:format:", v17, CFSTR("must pass a valid reuse identifier to -[UICollectionView %@]"), v18);

  }
  -[UICollectionView _dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:](self, "_dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:", v9, v10, indexPath, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return (UICollectionReusableView *)v11;
}

- (_UICollectionViewVisibleCellsUpdateResult)_createVisibleViewsForSingleCategoryAttributes:(SEL)a3 limitCreation:(id)a4 fadeForBoundsChange:(BOOL)a5
{
  _BOOL4 v6;
  _BOOL4 v7;
  id v10;
  unint64_t v11;
  _UICollectionViewSubviewManager *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  id *v17;
  int v18;
  id v19;
  int v20;
  uint64_t v21;
  void *v22;
  int v23;
  id v24;
  UICollectionViewLayout *layout;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  unint64_t v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  int v39;
  id v40;
  _UICollectionViewVisibleCellsUpdateResult *result;
  _UICollectionViewVisibleCellsUpdateResult *v42;
  _BOOL4 v43;
  unint64_t v44;
  _UICollectionViewSubviewManager *v45;
  _BOOL4 v46;
  uint64_t v47;
  int v48;
  void *v49;

  v6 = a6;
  v7 = a5;
  v10 = a4;
  *(_OWORD *)&retstr->var0 = 0u;
  *(_OWORD *)&retstr->var2 = 0u;
  v11 = (unint64_t)objc_msgSend(v10, "count") >> 1;
  if (v11 >= 5)
    v11 = 5;
  if (v11 <= 1)
    v11 = 1;
  v44 = v11;
  v12 = self->_subviewManager;
  if (objc_msgSend(v10, "count"))
  {
    v42 = retstr;
    v45 = v12;
    v43 = v7;
    do
    {
      if (v7 && retstr->var0 >= v44)
      {
        retstr->var3 = 1;
        break;
      }
      objc_msgSend(v10, "objectAtIndexedSubscript:", 0);
      v13 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "removeObjectAtIndex:", 0);
      v14 = -[UICollectionViewLayoutAttributes __indexPath]((_QWORD *)v13);
      if (v13)
      {
        v15 = *(_WORD *)(v13 + 288) & 1;
        if (!v6)
          goto LABEL_13;
      }
      else
      {
        v15 = 0;
        if (!v6)
        {
LABEL_13:
          v16 = objc_msgSend((id)v13, "isHidden") ^ 1;
          goto LABEL_14;
        }
      }
      v16 = 1;
LABEL_14:
      v49 = v14;
      v48 = v15;
      if ((v16 & v15) != 1 || !-[UICollectionView _prefetchingAllowed](self, "_prefetchingAllowed"))
      {
        v19 = 0;
        v20 = 0;
        if (v13)
          goto LABEL_20;
        goto LABEL_63;
      }
      -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", v14);
      v17 = (id *)objc_claimAutoreleasedReturnValue();
      if (!v17)
      {
        v19 = 0;
        v20 = 0;
        goto LABEL_62;
      }
      v46 = -[UICollectionView _useIdleObserverForCellPrefetching](self, "_useIdleObserverForCellPrefetching");
      if (v46)
      {
        v18 = -[UICollectionView _updatePrefetchItemIfNeeded:forIndexPath:withLayoutAttributes:willDisplay:](self, "_updatePrefetchItemIfNeeded:forIndexPath:withLayoutAttributes:willDisplay:", v17, v14, 0, 1);
      }
      else
      {
        v28 = v17[2];
        v18 = objc_msgSend(v28, "isEqual:", v13);

      }
      v29 = v17[3];
      -[NSMutableDictionary removeObjectForKey:](self->_prefetchCacheItems, "removeObjectForKey:", v14);
      if (v18)
      {
        v19 = v29;
        if (v19)
        {
          v30 = _createVisibleViewsForSingleCategoryAttributes_limitCreation_fadeForBoundsChange____s_category[0];
          v7 = v43;
          if (!_createVisibleViewsForSingleCategoryAttributes_limitCreation_fadeForBoundsChange____s_category[0])
          {
            v30 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v30, _createVisibleViewsForSingleCategoryAttributes_limitCreation_fadeForBoundsChange____s_category);
          }
          v31 = *(id *)(v30 + 8);
          v32 = *(NSObject **)(v30 + 8);
          v33 = v31;
          if (os_signpost_id_make_with_pointer(v32, self) - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v33))
          {
            objc_msgSend(v49, "section");
            objc_msgSend(v49, "item");
            _os_signpost_emit_unreliably_with_name_impl();
          }

          if (objc_msgSend(v19, "_isHiddenForReuse"))
            objc_msgSend(v19, "_setHiddenForReuse:", 0);
          if (!v46)
            -[UICollectionView _configureCachedCellForDisplay:withIndexPath:layoutAttributesToUpdate:](self, "_configureCachedCellForDisplay:withIndexPath:layoutAttributesToUpdate:", v19, v49, 0);
          -[UICollectionView _notifyWillDisplayCellIfNeeded:forIndexPath:](self, "_notifyWillDisplayCellIfNeeded:forIndexPath:", v19, v49);
          v20 = 1;
          goto LABEL_61;
        }
      }
      else
      {
        if (v29)
          -[UICollectionView _reusePrefetchedCell:](self, "_reusePrefetchedCell:", v29);
        v19 = 0;
      }
      v20 = 0;
      v7 = v43;
LABEL_61:

      v12 = v45;
LABEL_62:

      retstr = v42;
      if (v13)
      {
LABEL_20:
        v21 = *(_QWORD *)(v13 + 8);
        goto LABEL_21;
      }
LABEL_63:
      v21 = 0;
LABEL_21:
      v47 = v21;
      if (v6)
      {
        if (v48)
        {
          -[UICollectionViewLayout initialLayoutAttributesForAppearingItemAtIndexPath:](self->_layout, "initialLayoutAttributesForAppearingItemAtIndexPath:", v49);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v22)
          {
LABEL_38:
            v22 = (void *)objc_msgSend((id)v13, "copy");
            objc_msgSend(v22, "setAlpha:", 0.0);
          }
LABEL_39:
          if (!objc_msgSend(v22, "isHidden") || (objc_msgSend((id)v13, "isHidden") & 1) == 0)
          {
            if (!v19)
            {
              if ((v48 & 1) != 0)
                v27 = -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:](self, "_createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:", v49, v22, 1);
              else
                v27 = -[UICollectionView _createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:](self, "_createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:", v47, v49, self->_layout, v22, 1);
              v19 = v27;
            }
            -[UICollectionView _animateVisibleView:withLayoutAttributes:completionHandler:](self, "_animateVisibleView:withLayoutAttributes:completionHandler:", v19, v13, 0);
          }

          v12 = v45;
          goto LABEL_68;
        }
        if (v13)
        {
          layout = self->_layout;
          if ((*(_WORD *)(v13 + 288) & 3) != 0)
            goto LABEL_34;
          -[UICollectionViewLayout initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:](layout, "initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:");
          v26 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          layout = self->_layout;
LABEL_34:
          -[UICollectionViewLayout initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:](layout, "initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:");
          v26 = objc_claimAutoreleasedReturnValue();
        }
        v22 = (void *)v26;
        if (!v26)
          goto LABEL_38;
        goto LABEL_39;
      }
      if (v19)
        v23 = 0;
      else
        v23 = v16;
      if (v23 == 1)
      {
        if (-[UICollectionView _isReorderingItemAtIndexPath:includingDragAndDrop:](self, "_isReorderingItemAtIndexPath:includingDragAndDrop:", v49, 0))
        {
          goto LABEL_86;
        }
        v24 = (v48 & 1) != 0
            ? -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:](self, "_createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:", v49, v13, 1): -[UICollectionView _createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:](self, "_createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:", v47, v49, self->_layout, v13, 1);
        v19 = v24;
        if (!v24)
          goto LABEL_86;
LABEL_69:
        if (v20)
        {
          ++retstr->var2;
          if ((v48 & 1) == 0)
            goto LABEL_71;
LABEL_80:
          -[_UICollectionViewSubviewManager setVisibleCell:atIndexPath:]((uint64_t)v12, (uint64_t)v19, (uint64_t)v49);
          if (!v12)
          {
LABEL_85:

            goto LABEL_86;
          }
        }
        else
        {
          -[_UICollectionViewPrefetchingContext peekNextItem]((id *)&self->_mainPrefetchingContext->super.isa);
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = (void *)v34;
          if (!v34)
            goto LABEL_78;
          v36 = v10;
          v37 = *(id *)(v34 + 16);
          objc_msgSend(v37, "indexPath");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = objc_msgSend(v38, "isEqual:", v49);

          v10 = v36;
          retstr = v42;
          if (v39)
            v40 = -[_UICollectionViewPrefetchingContext popNextItem]((uint64_t)self->_mainPrefetchingContext);
          else
LABEL_78:
            ++retstr->var1;
          ++retstr->var0;

          v7 = v43;
          v12 = v45;
          if ((v48 & 1) != 0)
            goto LABEL_80;
LABEL_71:
          if (v13 && (*(_WORD *)(v13 + 288) & 3) == 0)
          {
            if (!v12)
              goto LABEL_85;
            -[_UICollectionViewSubviewCollection setView:forSupplementaryOfKind:atIndexPath:]((uint64_t)v12->_visibleViews, (uint64_t)v19, v47, (uint64_t)v49);
          }
          else
          {
            if (!v12)
              goto LABEL_85;
            -[_UICollectionViewSubviewCollection setView:forDecorationOfKind:atIndexPath:]((uint64_t)v12->_visibleViews, (uint64_t)v19, v47, (uint64_t)v49);
          }
        }
        -[NSHashTable addObject:](v12->_viewsPreparingForDisplay, "addObject:", v19);
        goto LABEL_85;
      }
LABEL_68:
      if (v19)
        goto LABEL_69;
LABEL_86:

    }
    while (objc_msgSend(v10, "count"));
  }

  return result;
}

- (id)_createPreparedCellForItemAtIndexPath:(id)a3 withLayoutAttributes:(id)a4 applyAttributes:(BOOL)a5 isFocused:(BOOL)a6 notify:(BOOL)a7
{
  _BOOL4 v7;
  _BOOL4 v8;
  void *v12;
  id WeakRetained;
  NSIndexPath *firstResponderIndexPath;
  UICollectionReusableView *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  NSObject *v29;
  int v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  void *v37;
  void *v38;
  _BOOL4 v39;
  void *v40;
  _UICollectionViewSubviewManager *v41;
  NSObject *v42;
  void *v43;
  unint64_t v44;
  void *v45;
  void *v46;
  int v47;
  char v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  id v52;
  void *v53;
  unint64_t v54;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  NSObject *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  _BOOL4 v76;
  _QWORD v77[5];
  id v78;
  uint64_t *v79;
  _QWORD v80[7];
  _QWORD v81[7];
  _QWORD v82[7];
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  void (*v87)(uint64_t);
  id v88;
  uint8_t buf[4];
  UICollectionView *v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  void *v94;
  uint64_t v95;

  v7 = a7;
  v76 = a6;
  v8 = a5;
  v95 = *MEMORY[0x1E0C80C00];
  v12 = (void *)MEMORY[0x186DC9484]();
  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);

  if (WeakRetained)
  {
    if (!a4)
    {
LABEL_79:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3784, CFSTR("UICollectionView internal bug: Attempting to create a cell with invalid attributes. Collection View: %@, Attributes: %@, Index Path: %@"), self, a4, a3);

      goto LABEL_4;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3783, CFSTR("UICollectionView dataSource is not set"));

    if (!a4)
      goto LABEL_79;
  }
  if ((*((_WORD *)a4 + 144) & 1) == 0)
    goto LABEL_79;
LABEL_4:
  firstResponderIndexPath = self->_firstResponderIndexPath;
  if (firstResponderIndexPath
    && self->_firstResponderViewType == 1
    && -[NSIndexPath isEqual:](firstResponderIndexPath, "isEqual:", a3))
  {
    -[UICollectionView _configureCachedCellForDisplay:withIndexPath:layoutAttributesToUpdate:](self, "_configureCachedCellForDisplay:withIndexPath:layoutAttributesToUpdate:", self->_firstResponderView, a3, a4);
    v15 = self->_firstResponderView;
    goto LABEL_77;
  }
  if (-[UICollectionView _hasFocusedCellForIndexPath:shouldUsePreUpdateData:](self, "_hasFocusedCellForIndexPath:shouldUsePreUpdateData:", a3, 0))
  {
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v16 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    -[_UICollectionViewFocusedItemState cell](v16);
    v15 = (UICollectionReusableView *)objc_claimAutoreleasedReturnValue();

    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v17;
    if (v17)
      v19 = *(void **)(v17 + 16);
    else
      v19 = 0;
    v20 = v19;
    v21 = objc_msgSend(a3, "isEqual:", v20);

    if ((v21 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v60 = objc_claimAutoreleasedReturnValue();
      v61 = (void *)v60;
      if (v60)
        v62 = *(void **)(v60 + 16);
      else
        v62 = 0;
      v63 = v62;
      objc_msgSend(v59, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3800, CFSTR("Collection view focus state inconsistency. Focused index path %@ is not equal to index path of focused cell %@."), v63, a3);

    }
    -[UICollectionView _configureCachedCellForDisplay:withIndexPath:layoutAttributesToUpdate:](self, "_configureCachedCellForDisplay:withIndexPath:layoutAttributesToUpdate:", v15, a3, a4);
    if (v7)
      -[UICollectionView _notifyWillDisplayCellIfNeeded:forIndexPath:](self, "_notifyWillDisplayCellIfNeeded:forIndexPath:", v15, a3);
    goto LABEL_77;
  }
  if (self->_cellBeingReconfigured)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3812, CFSTR("Performing side effects on UICollectionView that cause a new cell to be requested while an existing item is being reconfigured is not allowed. Check the backtrace to see what's causing this. Collection view: %@"), self);

  }
  v22 = _UISetCurrentFallbackEnvironment(self);
  v23 = *((_QWORD *)&self->_collectionViewFlags + 1);
  *((_QWORD *)&self->_collectionViewFlags + 1) = v23 | 0x8000000000000000;
  v83 = 0;
  v84 = &v83;
  v85 = 0x3032000000;
  v86 = __Block_byref_object_copy__40;
  v87 = __Block_byref_object_dispose__40;
  v88 = 0;
  v74 = (void *)v22;
  if (_isNotifyingIdleObservers == 1)
  {
    v24 = qword_1EDDC64B8;
    if (!qword_1EDDC64B8)
    {
      v24 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v24, (unint64_t *)&qword_1EDDC64B8);
    }
    v25 = *(id *)(v24 + 8);
    if (os_signpost_id_make_with_pointer(*(os_log_t *)(v24 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
      && os_signpost_enabled(v25))
    {
      v26 = objc_msgSend(a3, "section");
      v27 = objc_msgSend(a3, "item");
      *(_DWORD *)buf = 134218240;
      v90 = (UICollectionView *)v26;
      v91 = 2048;
      v92 = v27;
      _os_signpost_emit_unreliably_with_name_impl();
    }

    v82[0] = MEMORY[0x1E0C809B0];
    v82[1] = 3221225472;
    v82[2] = __112__UICollectionView__createPreparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify___block_invoke;
    v82[3] = &unk_1E16BCD68;
    v82[4] = self;
    v82[5] = &v83;
    v82[6] = a3;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v82);
    v28 = qword_1EDDC64C0;
    if (!qword_1EDDC64C0)
    {
      v28 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v28, (unint64_t *)&qword_1EDDC64C0);
    }
    v29 = *(id *)(v28 + 8);
    if (os_signpost_id_make_with_pointer(*(os_log_t *)(v28 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
      && os_signpost_enabled(v29))
    {
      v30 = objc_msgSend((id)v84[5], "_hasBeenReused");
      *(_DWORD *)buf = 67109120;
      LODWORD(v90) = v30;
LABEL_37:
      _os_signpost_emit_unreliably_with_name_impl();
    }
  }
  else
  {
    v31 = qword_1EDDC64C8;
    if (!qword_1EDDC64C8)
    {
      v31 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v31, (unint64_t *)&qword_1EDDC64C8);
    }
    v32 = *(id *)(v31 + 8);
    if (os_signpost_id_make_with_pointer(*(os_log_t *)(v31 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
      && os_signpost_enabled(v32))
    {
      v33 = objc_msgSend(a3, "section");
      v34 = objc_msgSend(a3, "item");
      *(_DWORD *)buf = 134218240;
      v90 = (UICollectionView *)v33;
      v91 = 2048;
      v92 = v34;
      _os_signpost_emit_unreliably_with_name_impl();
    }

    v81[0] = MEMORY[0x1E0C809B0];
    v81[1] = 3221225472;
    v81[2] = __112__UICollectionView__createPreparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify___block_invoke_357;
    v81[3] = &unk_1E16BCD68;
    v81[4] = self;
    v81[5] = &v83;
    v81[6] = a3;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v81);
    v35 = qword_1EDDC64D0;
    if (!qword_1EDDC64D0)
    {
      v35 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v35, (unint64_t *)&qword_1EDDC64D0);
    }
    v29 = *(id *)(v35 + 8);
    if (os_signpost_id_make_with_pointer(*(os_log_t *)(v35 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
      && os_signpost_enabled(v29))
    {
      v36 = objc_msgSend((id)v84[5], "_hasBeenReused");
      *(_DWORD *)buf = 67109120;
      LODWORD(v90) = v36;
      goto LABEL_37;
    }
  }

  v37 = (void *)v84[5];
  if (!v37)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a3, "_ui_shortDescription");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3832, CFSTR("The collection view's data source returned nil when asked to provide a cell for an item. Collection view: %@; index path: %@"),
      self,
      v65);

    v37 = (void *)v84[5];
  }
  objc_msgSend(v37, "reuseIdentifier");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = v38 == 0;

  if (v39)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a3, "_ui_shortDescription");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3833, CFSTR("The collection view's data source returned a cell without a reuseIdentifier. Cells must be retrieved by calling -dequeueConfiguredReusableCellWithRegistration:forIndexPath:item: or -dequeueReusableCellWithReuseIdentifier:forIndexPath:. Collection view: %@; index path: %@; cell: %@"),
      self,
      v67,
      v84[5]);

  }
  if ((objc_msgSend((id)v84[5], "_wasDequeued") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a3, "_ui_shortDescription");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3834, CFSTR("The collection view's data source returned a cell that was not dequeued from the collection view using a cell registration or reuse identifier. Cells must be retrieved by calling -dequeueConfiguredReusableCellWithRegistration:forIndexPath:item: or -dequeueReusableCellWithReuseIdentifier:forIndexPath:. Collection view: %@; index path: %@; cell: %@"),
      self,
      v69,
      v84[5]);

  }
  objc_msgSend((id)v84[5], "superview");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v40)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_47;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a3, "_ui_shortDescription");
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3835, CFSTR("The collection view's data source returned a cell that is not in the view hierarchy. Cells must be retrieved by calling -dequeueConfiguredReusableCellWithRegistration:forIndexPath:item: or -dequeueReusableCellWithReuseIdentifier:forIndexPath:. Collection view: %@; index path: %@; cell: %@"),
      self,
      v73,
      v84[5]);

  }
LABEL_47:
  v41 = self->_subviewManager;
  if (-[_UICollectionViewSubviewManager isViewInReuseQueue:]((uint64_t)v41, (void *)v84[5]))
  {
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v42 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(a3, "_ui_shortDescription");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSObject handleFailureInMethod:object:file:lineNumber:description:](v42, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3840, CFSTR("The collection view's data source returned a cell that is in the reuse queue. Cells must be retrieved by calling -dequeueConfiguredReusableCellWithRegistration:forIndexPath:item: or -dequeueReusableCellWithReuseIdentifier:forIndexPath:. Collection view: %@; index path: %@; cell: %@"),
        self,
        v43,
        v84[5]);

    }
    else
    {
      v44 = qword_1EDDC64D8;
      if (!qword_1EDDC64D8)
      {
        v44 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v44, (unint64_t *)&qword_1EDDC64D8);
      }
      v42 = *(id *)(v44 + 8);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(a3, "_ui_shortDescription");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = (void *)v84[5];
        *(_DWORD *)buf = 138412802;
        v90 = self;
        v91 = 2112;
        v92 = (uint64_t)v45;
        v93 = 2112;
        v94 = v46;
        _os_log_impl(&dword_185066000, v42, OS_LOG_TYPE_ERROR, "The collection view's data source returned a cell that is in the reuse queue. Cells must be retrieved by calling -dequeueConfiguredReusableCellWithRegistration:forIndexPath:item: or -dequeueReusableCellWithReuseIdentifier:forIndexPath:. Collection view: %@; index path: %@; cell: %@",
          buf,
          0x20u);

      }
    }

    -[_UICollectionViewSubviewManager ensureViewIsRemovedFromReuseQueue:]((uint64_t)v41, (void *)v84[5]);
    -[UICollectionView _prepareViewForReuse:]((uint64_t)self, (void *)v84[5]);
  }
  else if (objc_msgSend((id)v84[5], "_isHiddenForReuse"))
  {
    objc_msgSend((id)v84[5], "_setHiddenForReuse:", 0);
  }
  if ((dyld_program_sdk_at_least() & 1) == 0)
    -[UICollectionView _addControlledSubview:atZIndex:forced:initialAttributes:](self, "_addControlledSubview:atZIndex:forced:initialAttributes:", v84[5], objc_msgSend(a4, "zIndex"), 0, a4);
  v47 = dyld_program_sdk_at_least();
  v48 = v47;
  if (v47)
    -[UICollectionView _configureCellForDisplay:indexPath:cached:](self, "_configureCellForDisplay:indexPath:cached:", v84[5], a3, 0);
  -[UICollectionView _checkForPreferredAttributesInView:originalAttributes:](self, "_checkForPreferredAttributesInView:originalAttributes:", v84[5], a4);
  if (v8)
  {
    v80[0] = MEMORY[0x1E0C809B0];
    v80[1] = 3221225472;
    v80[2] = __112__UICollectionView__createPreparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify___block_invoke_370;
    v80[3] = &unk_1E16BCD90;
    v80[4] = self;
    v80[5] = &v83;
    v80[6] = a4;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v80);
  }
  else
  {
    objc_msgSend((id)v84[5], "_layoutAttributes");
    v49 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v50 = -[UICollectionViewLayoutAttributes __indexPath](v49);
    LOBYTE(v50) = objc_msgSend(v50, "isEqual:", -[UICollectionViewLayoutAttributes __indexPath](a4));

    if ((v50 & 1) == 0)
    {
      v51 = (void *)objc_msgSend(a4, "copy");
      objc_msgSend(v51, "setIndexPath:", -[UICollectionViewLayoutAttributes __indexPath](a4));
      v77[0] = MEMORY[0x1E0C809B0];
      v77[1] = 3221225472;
      v77[2] = __112__UICollectionView__createPreparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify___block_invoke_2;
      v77[3] = &unk_1E16BDBB0;
      v77[4] = self;
      v52 = v51;
      v78 = v52;
      v79 = &v83;
      +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v77);

    }
  }
  if ((v48 & 1) == 0)
    -[UICollectionView _configureCellForDisplay:indexPath:cached:](self, "_configureCellForDisplay:indexPath:cached:", v84[5], a3, 0);
  *((_QWORD *)&self->_collectionViewFlags + 1) = v23 & 0x8000000000000000 | *((_QWORD *)&self->_collectionViewFlags + 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v76)
  {
    +[_UICollectionViewFocusedItemState stateWithReusableView:]((uint64_t)_UICollectionViewFocusedItemState, (void *)v84[5]);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", v53);

  }
  if (v41)
    -[NSHashTable removeObject:](v41->_dequeuedViews, "removeObject:", v84[5]);
  if (v7)
    -[UICollectionView _notifyWillDisplayCellIfNeeded:forIndexPath:](self, "_notifyWillDisplayCellIfNeeded:forIndexPath:", v84[5], a3);
  _UIRestorePreviousFallbackEnvironment(v74);
  v54 = qword_1EDDC64E0;
  if (!qword_1EDDC64E0)
  {
    v54 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v54, (unint64_t *)&qword_1EDDC64E0);
  }
  if ((*(_BYTE *)v54 & 1) != 0)
  {
    v70 = *(id *)(v54 + 8);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      v71 = v84[5];
      objc_msgSend(a3, "_ui_shortDescription");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v90 = self;
      v91 = 2112;
      v92 = v71;
      v93 = 2112;
      v94 = v72;
      _os_log_impl(&dword_185066000, v70, OS_LOG_TYPE_ERROR, "[UICV %p] _createPreparedCell: %@ indexPath:%@", buf, 0x20u);

    }
  }
  v15 = (UICollectionReusableView *)(id)v84[5];

  _Block_object_dispose(&v83, 8);
LABEL_77:
  objc_autoreleasePoolPop(v12);
  return v15;
}

- (void)_configureCellForDisplay:(id)a3 indexPath:(id)a4 cached:(BOOL)a5
{
  _QWORD v5[7];
  BOOL v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __62__UICollectionView__configureCellForDisplay_indexPath_cached___block_invoke;
  v5[3] = &unk_1E16BCE08;
  v6 = a5;
  v5[4] = self;
  v5[5] = a4;
  v5[6] = a3;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v5);
}

- (id)_createPreparedCellForItemAtIndexPath:(id)a3 withLayoutAttributes:(id)a4 applyAttributes:(BOOL)a5
{
  return -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](self, "_createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", a3, a4, a5, 0, 1);
}

- (id)_createPreparedSupplementaryViewForElementOfKind:(id)a3 atIndexPath:(id)a4 layout:(id)a5 withLayoutAttributes:(id)a6 applyAttributes:(BOOL)a7
{
  id v11;
  id *v12;
  id WeakRetained;
  UICollectionReusableView *v14;
  NSIndexPath *firstResponderIndexPath;
  _UICollectionViewSubviewManager *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  id v20;
  unint64_t v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  char v31;
  NSObject *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  void *v37;
  void *v38;
  int v39;
  char v40;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  os_log_t log;
  void *v66;
  _BOOL4 v67;
  void *context;
  id v69;
  _QWORD v70[5];
  id *v71;
  uint64_t *v72;
  _QWORD v73[5];
  id v74;
  uint64_t *v75;
  id v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  void (*v81)(uint64_t);
  id v82;
  uint8_t buf[4];
  UICollectionView *v84;
  __int16 v85;
  id v86;
  __int16 v87;
  void *v88;
  __int16 v89;
  void *v90;
  __int16 v91;
  uint64_t v92;
  uint64_t v93;

  v67 = a7;
  v93 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v69 = a5;
  v12 = (id *)a6;
  context = (void *)MEMORY[0x186DC9484]();
  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);

  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3901, CFSTR("UICollectionView dataSource is not set"));

  }
  if ((*(_QWORD *)&self->_collectionViewFlags & 0x80000000000000) == 0 && (!v12 || ((_WORD)v12[36] & 2) == 0))
  {
    v14 = 0;
    goto LABEL_57;
  }
  firstResponderIndexPath = self->_firstResponderIndexPath;
  if (firstResponderIndexPath
    && self->_firstResponderViewType == 2
    && -[NSIndexPath isEqual:](firstResponderIndexPath, "isEqual:", a4)
    && -[NSString isEqual:](self->_firstResponderViewKind, "isEqual:", v11))
  {
    v14 = self->_firstResponderView;
    goto LABEL_57;
  }
  v66 = (void *)_UISetCurrentFallbackEnvironment(self);
  v16 = self->_subviewManager;
  v17 = *((_QWORD *)&self->_collectionViewFlags + 1);
  *((_QWORD *)&self->_collectionViewFlags + 1) = v17 | 0x8000000000000000;
  v77 = 0;
  v78 = &v77;
  v79 = 0x3032000000;
  v80 = __Block_byref_object_copy__40;
  v81 = __Block_byref_object_dispose__40;
  v82 = 0;
  if (!v12 || ((_WORD)v12[36] & 2) == 0)
  {
    v18 = qword_1EDDC64E8;
    if (!qword_1EDDC64E8)
    {
      v18 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v18, (unint64_t *)&qword_1EDDC64E8);
    }
    v19 = *(id *)(v18 + 8);
    if (os_signpost_id_make_with_pointer(*(os_log_t *)(v18 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
      && os_signpost_enabled(v19))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_unreliably_with_name_impl();
    }

    v73[0] = MEMORY[0x1E0C809B0];
    v73[1] = 3221225472;
    v73[2] = __125__UICollectionView__createPreparedSupplementaryViewForElementOfKind_atIndexPath_layout_withLayoutAttributes_applyAttributes___block_invoke;
    v73[3] = &unk_1E16BCDB8;
    v75 = &v77;
    v73[4] = self;
    v20 = v11;
    v74 = v20;
    v76 = a4;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v73);
    v21 = qword_1EDDC64F0;
    if (!qword_1EDDC64F0)
    {
      v21 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v21, (unint64_t *)&qword_1EDDC64F0);
    }
    v22 = *(id *)(v21 + 8);
    if (os_signpost_id_make_with_pointer(*(os_log_t *)(v21 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
      && os_signpost_enabled(v22))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_unreliably_with_name_impl();
    }

    v23 = (void *)v78[5];
    if (!v23)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a4, "_ui_shortDescription");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3932, CFSTR("The collection view's data source returned nil when asked to provide a supplementary view. Collection view: %@; element kind: %@; index path: %@"),
        self,
        v20,
        v44);

      v23 = (void *)v78[5];
    }
    if ((objc_msgSend(v23, "_wasDequeued") & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a4, "_ui_shortDescription");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3933, CFSTR("The collection view's data source returned a supplementary view that was not dequeued from the collection view using a supplementary registration or reuse identifier. Supplementary views must be retrieved by calling dequeueConfiguredReusableSupplementaryViewWithRegistration:forIndexPath: or -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:. Collection view: %@; element kind: %@; index path: %@; supplementary view: %@"),
        self,
        v20,
        v46,
        v78[5]);

    }
    objc_msgSend((id)v78[5], "superview");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v24)
    {
      if (!dyld_program_sdk_at_least())
        goto LABEL_33;
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a4, "_ui_shortDescription");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3934, CFSTR("The collection view's data source returned a supplementary view that is not in the view hierarchy. Supplementary views must be retrieved by calling dequeueConfiguredReusableSupplementaryViewWithRegistration:forIndexPath: or -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:. Collection view: %@; index path: %@; supplementary view: %@"),
        self,
        v55,
        v78[5]);

    }
LABEL_33:
    objc_msgSend((id)v78[5], "_elementKind");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "isEqualToString:", v20);

    if ((v31 & 1) == 0)
    {
      if (dyld_program_sdk_at_least() && (_UIIsPrivateMainBundle() & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        log = (os_log_t)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v78[5], "_elementKind");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a4, "_ui_shortDescription");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject handleFailureInMethod:object:file:lineNumber:description:](log, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3935, CFSTR("The collection view's data source returned a supplementary view with an unexpected element kind. Collection view: %@; requested element kind: %@; supplementary view element kind: %@; index path: %@; supplementary view: %@"),
          self,
          v20,
          v56,
          v57,
          v78[5]);

      }
      else if (dyld_program_sdk_at_least() && _UIIsPrivateMainBundle())
      {
        if (os_variant_has_internal_diagnostics())
        {
          __UIFaultDebugAssertLog();
          log = (os_log_t)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(log, OS_LOG_TYPE_FAULT))
          {
            objc_msgSend((id)v78[5], "_elementKind");
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a4, "_ui_shortDescription");
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            v63 = v78[5];
            *(_DWORD *)buf = 138413314;
            v84 = self;
            v85 = 2112;
            v86 = v20;
            v87 = 2112;
            v88 = v61;
            v89 = 2112;
            v90 = v62;
            v91 = 2112;
            v92 = v63;
            _os_log_fault_impl(&dword_185066000, log, OS_LOG_TYPE_FAULT, "The collection view's data source returned a supplementary view with an unexpected element kind. Collection view: %@; requested element kind: %@; supplementary view element kind: %@; index path: %@; supplementary"
              " view: %@ This is a hard assert for other clients and requires immediate attention.",
              buf,
              0x34u);

          }
        }
        else
        {
          v47 = qword_1EDDC64F8;
          if (!qword_1EDDC64F8)
          {
            v47 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v47, (unint64_t *)&qword_1EDDC64F8);
          }
          log = (os_log_t)*(id *)(v47 + 8);
          if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend((id)v78[5], "_elementKind");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a4, "_ui_shortDescription");
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = v78[5];
            *(_DWORD *)buf = 138413314;
            v84 = self;
            v85 = 2112;
            v86 = v20;
            v87 = 2112;
            v88 = v48;
            v89 = 2112;
            v90 = v49;
            v91 = 2112;
            v92 = v50;
            _os_log_impl(&dword_185066000, log, OS_LOG_TYPE_ERROR, "The collection view's data source returned a supplementary view with an unexpected element kind. Collection view: %@; requested element kind: %@; supplementary view element kind: %@; index path: %@; supplementary"
              " view: %@ This is a hard assert for other clients and requires immediate attention.",
              buf,
              0x34u);

          }
        }
      }
      else if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        log = (os_log_t)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(log, OS_LOG_TYPE_FAULT))
        {
          objc_msgSend((id)v78[5], "_elementKind");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a4, "_ui_shortDescription");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          v60 = v78[5];
          *(_DWORD *)buf = 138413314;
          v84 = self;
          v85 = 2112;
          v86 = v20;
          v87 = 2112;
          v88 = v58;
          v89 = 2112;
          v90 = v59;
          v91 = 2112;
          v92 = v60;
          _os_log_fault_impl(&dword_185066000, log, OS_LOG_TYPE_FAULT, "The collection view's data source returned a supplementary view with an unexpected element kind. Collection view: %@; requested element kind: %@; supplementary view element kind: %@; index path: %@; supplementary vie"
            "w: %@ This will become an assert in a future version.",
            buf,
            0x34u);

        }
      }
      else
      {
        v51 = qword_1EDDC6500;
        if (!qword_1EDDC6500)
        {
          v51 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v51, (unint64_t *)&qword_1EDDC6500);
        }
        log = (os_log_t)*(id *)(v51 + 8);
        if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend((id)v78[5], "_elementKind");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a4, "_ui_shortDescription");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          v54 = v78[5];
          *(_DWORD *)buf = 138413314;
          v84 = self;
          v85 = 2112;
          v86 = v20;
          v87 = 2112;
          v88 = v52;
          v89 = 2112;
          v90 = v53;
          v91 = 2112;
          v92 = v54;
          _os_log_impl(&dword_185066000, log, OS_LOG_TYPE_ERROR, "The collection view's data source returned a supplementary view with an unexpected element kind. Collection view: %@; requested element kind: %@; supplementary view element kind: %@; index path: %@; supplementary vie"
            "w: %@ This will become an assert in a future version.",
            buf,
            0x34u);

        }
      }

    }
    if (-[_UICollectionViewSubviewManager isViewInReuseQueue:]((uint64_t)v16, (void *)v78[5]))
    {
      if (dyld_program_sdk_at_least())
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v32 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(a4, "_ui_shortDescription");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject handleFailureInMethod:object:file:lineNumber:description:](v32, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 3939, CFSTR("The collection view's data source returned a supplementary view that is in the reuse queue. Supplementary views must be retrieved by calling dequeueConfiguredReusableSupplementaryViewWithRegistration:forIndexPath: or -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:. Collection view: %@; element kind: %@; index path: %@; supplementary view: %@"),
          self,
          v20,
          v33,
          v78[5]);

      }
      else
      {
        v36 = qword_1EDDC6508;
        if (!qword_1EDDC6508)
        {
          v36 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v36, (unint64_t *)&qword_1EDDC6508);
        }
        v32 = *(id *)(v36 + 8);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(a4, "_ui_shortDescription");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = (void *)v78[5];
          *(_DWORD *)buf = 138413058;
          v84 = self;
          v85 = 2112;
          v86 = v20;
          v87 = 2112;
          v88 = v37;
          v89 = 2112;
          v90 = v38;
          _os_log_impl(&dword_185066000, v32, OS_LOG_TYPE_ERROR, "The collection view's data source returned a supplementary view that is in the reuse queue. Supplementary views must be retrieved by calling dequeueConfiguredReusableSupplementaryViewWithRegistration:forIndexPath: or -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:. Collection view: %@; element kin"
            "d: %@; index path: %@; supplementary view: %@",
            buf,
            0x2Au);

        }
      }

      -[_UICollectionViewSubviewManager ensureViewIsRemovedFromReuseQueue:]((uint64_t)v16, (void *)v78[5]);
      -[UICollectionView _prepareViewForReuse:]((uint64_t)self, (void *)v78[5]);
    }
    else if (objc_msgSend((id)v78[5], "_isHiddenForReuse"))
    {
      objc_msgSend((id)v78[5], "_setHiddenForReuse:", 0);
    }

    v29 = 1;
    goto LABEL_46;
  }
  -[UIBarButtonItemGroup _items](v12);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIBarButtonItemGroup _items](v12);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:](self, "_dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:", v25, v26, a4, 2);
  v27 = objc_claimAutoreleasedReturnValue();
  v28 = (void *)v78[5];
  v78[5] = v27;

  if (!v78[5])
  {
    objc_msgSend(v69, "_decorationViewForLayoutAttributes:", v12);
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = (void *)v78[5];
    v78[5] = v34;

    objc_msgSend((id)v78[5], "_willRevealWithLayoutAttributes:", v12);
    v29 = 2;
LABEL_47:
    -[UICollectionView _addControlledSubview:atZIndex:forced:initialAttributes:](self, "_addControlledSubview:atZIndex:forced:initialAttributes:", v78[5], objc_msgSend(v12, "zIndex"), 0, v12);
    goto LABEL_48;
  }
  v29 = 2;
LABEL_46:
  if ((dyld_program_sdk_at_least() & 1) == 0)
    goto LABEL_47;
LABEL_48:
  v39 = dyld_program_sdk_at_least();
  v40 = v39;
  if (v39)
    -[UICollectionView _configureSupplementaryViewForDisplay:withElementKind:indexPath:elementCategory:](self, "_configureSupplementaryViewForDisplay:withElementKind:indexPath:elementCategory:", v78[5], v11, a4, v29);
  -[UICollectionView _checkForPreferredAttributesInView:originalAttributes:](self, "_checkForPreferredAttributesInView:originalAttributes:", v78[5], v12);
  if (v67)
  {
    v70[0] = MEMORY[0x1E0C809B0];
    v70[1] = 3221225472;
    v70[2] = __125__UICollectionView__createPreparedSupplementaryViewForElementOfKind_atIndexPath_layout_withLayoutAttributes_applyAttributes___block_invoke_388;
    v70[3] = &unk_1E16BDBB0;
    v70[4] = self;
    v71 = v12;
    v72 = &v77;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v70);

  }
  if ((v40 & 1) == 0)
    -[UICollectionView _configureSupplementaryViewForDisplay:withElementKind:indexPath:elementCategory:](self, "_configureSupplementaryViewForDisplay:withElementKind:indexPath:elementCategory:", v78[5], v11, a4, v29);
  *((_QWORD *)&self->_collectionViewFlags + 1) = v17 & 0x8000000000000000 | *((_QWORD *)&self->_collectionViewFlags + 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v16)
    -[NSHashTable removeObject:](v16->_dequeuedViews, "removeObject:", v78[5]);
  -[UICollectionView _notifyWillDisplaySupplementaryView:forElementKind:atIndexPath:](self, "_notifyWillDisplaySupplementaryView:forElementKind:atIndexPath:", v78[5], v11, a4);
  _UIRestorePreviousFallbackEnvironment(v66);
  v14 = (UICollectionReusableView *)(id)v78[5];
  _Block_object_dispose(&v77, 8);

LABEL_57:
  objc_autoreleasePoolPop(context);

  return v14;
}

- (void)_notifyWillDisplaySupplementaryView:(id)a3 forElementKind:(id)a4 atIndexPath:(id)a5
{
  id v8;
  id v9;
  void *v10;
  id v11;

  v11 = a3;
  v8 = a4;
  v9 = a5;
  if ((objc_msgSend(v11, "_hasNotifiedIsDisplaying") & 1) == 0)
  {
    if ((*(_QWORD *)&self->_collectionViewFlags & 0x200) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:", self, v11, v8, v9);

    }
    objc_msgSend(v11, "_notifyIsDisplaying:", 1);
  }

}

- (void)_configureSupplementaryViewForDisplay:(id)a3 withElementKind:(id)a4 indexPath:(id)a5 elementCategory:(unint64_t)a6
{
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __100__UICollectionView__configureSupplementaryViewForDisplay_withElementKind_indexPath_elementCategory___block_invoke;
  v6[3] = &unk_1E16BCE30;
  v6[4] = self;
  v6[5] = a3;
  v6[6] = a6;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v6, a4, a5);
}

- (void)registerClass:(Class)viewClass forSupplementaryViewOfKind:(NSString *)elementKind withReuseIdentifier:(NSString *)identifier
{
  NSString *v9;
  NSMutableDictionary *v10;
  NSMutableDictionary *supplementaryViewClassDict;
  void *v12;
  NSMutableDictionary *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  NSString *v20;

  v20 = elementKind;
  v9 = identifier;
  if (!-[NSString length](v20, "length"))
  {
    v14 = (void *)MEMORY[0x1E0C99DA0];
    v15 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "raise:format:", v15, CFSTR("must pass a valid element kind to -[UICollectionView %@]"), v16);

  }
  if (!-[NSString length](v9, "length"))
  {
    v17 = (void *)MEMORY[0x1E0C99DA0];
    v18 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "raise:format:", v18, CFSTR("must pass a valid reuse identifier to -[UICollectionView %@]"), v19);

  }
  if (!self->_supplementaryViewClassDict)
  {
    v10 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    supplementaryViewClassDict = self->_supplementaryViewClassDict;
    self->_supplementaryViewClassDict = v10;

  }
  objc_msgSend((id)objc_opt_class(), "_reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:", v20, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary removeObjectForKey:](self->_supplementaryViewNibDict, "removeObjectForKey:", v12);
  v13 = self->_supplementaryViewClassDict;
  if (viewClass)
    -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", viewClass, v12);
  else
    -[NSMutableDictionary removeObjectForKey:](v13, "removeObjectForKey:", v12);
  -[UICollectionView _registeredSupplementaryViewKind:](self, "_registeredSupplementaryViewKind:", v20);

}

- (UICollectionViewCell)dequeueReusableCellWithReuseIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath *)indexPath
{
  NSString *v7;
  void *v8;
  void *v10;
  uint64_t v11;
  void *v12;

  v7 = identifier;
  if (!-[NSString length](v7, "length"))
  {
    v10 = (void *)MEMORY[0x1E0C99DA0];
    v11 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "raise:format:", v11, CFSTR("must pass a valid reuse identifier to -[UICollectionView %@]"), v12);

  }
  -[UICollectionView _dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:](self, "_dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:", CFSTR("UICollectionElementKindCell"), v7, indexPath, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return (UICollectionViewCell *)v8;
}

- (id)_dequeueReusableViewOfKind:(id)a3 withIdentifier:(id)a4 forIndexPath:(id)a5 viewCategory:(unint64_t)a6
{
  __CFString *v10;
  id v11;
  id v12;
  UICollectionViewLayoutAttributes *v13;
  UICollectionViewLayoutAttributes *transitionLayoutAttributes;
  void *v15;
  UICollectionViewCell *cellBeingReconfigured;
  void *v17;
  char v18;
  UICollectionViewCell *v19;
  UICollectionViewData *collectionViewData;
  _UICollectionViewSubviewManager *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  UICollectionViewLayout *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  _QWORD v66[4];
  UICollectionViewLayoutAttributes *v67;
  UICollectionView *v68;
  id v69;
  uint64_t v70;
  BOOL v71;
  _QWORD v72[10];
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  void (*v77)(uint64_t);
  id v78;

  v10 = (__CFString *)a3;
  v11 = a4;
  _UIQOSExpectComplexCommit("UICVDQ");
  v73 = 0;
  v74 = &v73;
  v75 = 0x3032000000;
  v76 = __Block_byref_object_copy__40;
  v77 = __Block_byref_object_dispose__40;
  v78 = 0;
  v12 = a5;
  v13 = 0;
  if ((*((_WORD *)&self->_collectionViewFlags + 8) & 1) != 0)
  {
LABEL_4:
    v15 = v12;
    if (a6)
      goto LABEL_17;
    goto LABEL_5;
  }
  transitionLayoutAttributes = self->_transitionLayoutAttributes;
  if (transitionLayoutAttributes)
  {
    v13 = transitionLayoutAttributes;
    goto LABEL_4;
  }
  if (a6)
  {
    collectionViewData = self->_collectionViewData;
    if (a6 == 2)
      -[UICollectionViewData layoutAttributesForDecorationViewOfKind:atIndexPath:]((uint64_t)collectionViewData, (uint64_t)v11, v12);
    else
      -[UICollectionViewData layoutAttributesForSupplementaryElementOfKind:atIndexPath:]((uint64_t)collectionViewData, (uint64_t)v10, v12);
    v13 = (UICollectionViewLayoutAttributes *)objc_claimAutoreleasedReturnValue();
    v15 = v12;
LABEL_17:
    v21 = self->_subviewManager;
    -[_UICollectionViewSubviewManager dequeueReusableViewWithReuseIdentifier:elementKind:elementCategory:](v21, (uint64_t)v11, v10, a6);
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)v74[5];
    v74[5] = v22;

    v24 = (void *)v74[5];
    if (v24)
    {
      if (v13)
      {
        objc_msgSend((id)v74[5], "_willRevealWithLayoutAttributes:", v13);
        v24 = (void *)v74[5];
      }
      -[UICollectionView _prepareViewForReuse:]((uint64_t)self, v24);
LABEL_49:
      if ((*((_WORD *)&self->_collectionViewFlags + 8) & 1) == 0)
      {
        v42 = v74[5];
        v66[0] = MEMORY[0x1E0C809B0];
        v66[1] = 3221225472;
        v66[2] = __88__UICollectionView__dequeueReusableViewOfKind_withIdentifier_forIndexPath_viewCategory___block_invoke_2;
        v66[3] = &unk_1E16BD4E8;
        v70 = v42;
        v67 = v13;
        v68 = self;
        v71 = a6 == 0;
        v69 = v15;
        +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v66);

      }
      if (v21)
        -[NSHashTable addObject:](v21->_dequeuedViews, "addObject:", v74[5]);
      v43 = (void *)v74[5];
      v44 = self->_layout;
      v45 = v43;
      v46 = v45;
      if (!v44 || !v45)
        goto LABEL_60;
      v47 = objc_msgSend(v45, "effectiveUserInterfaceLayoutDirection");
      if (v47 == -[UICollectionViewLayout developmentLayoutDirection](v44, "developmentLayoutDirection"))
      {
        if (!objc_msgSend(v46, "_flipsHorizontalAxis"))
        {
LABEL_60:

          v19 = (UICollectionViewCell *)(id)v74[5];
          goto LABEL_61;
        }
        v48 = 0;
      }
      else
      {
        v48 = -[UICollectionViewLayout _wantsRightToLeftHorizontalMirroringIfNeeded](v44, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      }
      objc_msgSend(v46, "_setFlipsHorizontalAxis:", v48);
      goto LABEL_60;
    }
    if (a6 == 2)
    {
      v19 = 0;
LABEL_61:

      goto LABEL_62;
    }
    v25 = 8;
    if (!a6)
      v25 = 7;
    v63 = objc_retain(*(id *)((char *)&self->super.super.super.super.isa
                            + OBJC_IVAR____UICollectionSnapshotView__snapshottedViewDisablesRasterizationInAnimations[v25]));
    if (a6)
    {
      objc_msgSend((id)objc_opt_class(), "_reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:", v10, v11);
      v26 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v26 = v11;
    }
    v62 = v26;
    objc_msgSend(v63, "objectForKey:", v26);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = (void *)_UISetCurrentFallbackEnvironment(self);
    if (v64)
    {
      v27 = 6;
      if (!a6)
        v27 = 5;
      v59 = objc_retain(*(id *)((char *)&self->super.super.super.super.isa
                              + OBJC_IVAR____UICollectionSnapshotView__snapshottedViewDisablesRasterizationInAnimations[v27]));
      objc_msgSend(v59, "objectForKey:", v62);
      v28 = objc_claimAutoreleasedReturnValue();
      v58 = (void *)v28;
      if (v28)
      {
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v28, CFSTR("UINibExternalObjects"));
        v29 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v29 = 0;
      }
      v57 = (void *)v29;
      objc_msgSend(v64, "instantiateWithOwner:options:", 0, v29);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v61, "count") == 1)
      {
        objc_msgSend(v61, "objectAtIndex:", 0);
        v38 = objc_claimAutoreleasedReturnValue();
        v39 = (void *)v74[5];
        v74[5] = v38;

      }
      if (!v74[5] || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9627, CFSTR("invalid nib registered for identifier (%@) - nib must contain exactly one top level object which must be a UICollectionReusableView instance"), v11);

      }
      objc_msgSend((id)v74[5], "reuseIdentifier");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v40, "length") && (objc_msgSend(v40, "isEqualToString:", v11) & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9629, CFSTR("view reuse identifier in nib (%@) does not match the identifier used to register the nib (%@)"), v40, v11);

      }
    }
    else
    {
      v30 = 91;
      if (!a6)
        v30 = 90;
      v59 = objc_retain(*(id *)((char *)&self->super.super.super.super.isa
                              + OBJC_IVAR____UICollectionSnapshotView__snapshottedViewDisablesRasterizationInAnimations[v30]));
      v31 = (id)objc_msgSend(v59, "objectForKey:", v62);
      -[UICollectionViewLayoutAttributes frame](v13, "frame");
      v33 = v32;
      v35 = v34;
      -[UICollectionViewLayoutAttributes size](v13, "size");
      v72[0] = MEMORY[0x1E0C809B0];
      v72[1] = 3221225472;
      v72[2] = __88__UICollectionView__dequeueReusableViewOfKind_withIdentifier_forIndexPath_viewCategory___block_invoke;
      v72[3] = &unk_1E16BD4C0;
      v72[4] = &v73;
      v72[5] = v31;
      v72[6] = v33;
      v72[7] = v35;
      v72[8] = v36;
      v72[9] = v37;
      +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v72);
    }

    _UIRestorePreviousFallbackEnvironment(v60);
    v41 = v74;
    if (v74[5])
    {
      if (!v13)
      {
LABEL_48:
        -[UICollectionView _prepareViewForUse:withElementCategory:elementKind:reuseIdentifier:indexPath:applyDefaultAttributes:](self, "_prepareViewForUse:withElementCategory:elementKind:reuseIdentifier:indexPath:applyDefaultAttributes:", v41[5], a6, v10, v11, v12, 0);

        goto LABEL_49;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v55, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9642, CFSTR("could not dequeue a view of kind: %@ with identifier %@ - must register a nib or a class for the identifier or connect a prototype cell in a storyboard"), v10, v11);

      v41 = v74;
      if (!v13)
        goto LABEL_48;
    }
    objc_msgSend((id)v41[5], "_willRevealWithLayoutAttributes:", v13);
    v41 = v74;
    goto LABEL_48;
  }
  -[UICollectionView presentationIndexPathForDataSourceIndexPath:](self, "presentationIndexPathForDataSourceIndexPath:", v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v15);
  v13 = (UICollectionViewLayoutAttributes *)objc_claimAutoreleasedReturnValue();
LABEL_5:
  cellBeingReconfigured = self->_cellBeingReconfigured;
  if (!cellBeingReconfigured)
    goto LABEL_17;
  -[UICollectionReusableView reuseIdentifier](cellBeingReconfigured, "reuseIdentifier");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isEqualToString:", v11);

  if ((v18 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionReusableView reuseIdentifier](self->_cellBeingReconfigured, "reuseIdentifier");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9594, CFSTR("Attempted to dequeue a cell for a different registration or reuse identifier than the existing cell when reconfiguring an item, which is not allowed. You must dequeue a cell using the same registration or reuse identifier that was used to dequeue the cell originally to obtain the existing cell. Dequeued reuse identifier: %@; Original reuse identifier: %@; Existing cell: %@"),
      v11,
      v51,
      self->_cellBeingReconfigured);

  }
  if ((-[NSIndexPath isEqual:](self->_indexPathBeingReconfigured, "isEqual:", v15) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView dataSourceIndexPathForPresentationIndexPath:](self, "dataSourceIndexPathForPresentationIndexPath:", self->_indexPathBeingReconfigured);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9595, CFSTR("Attempted to dequeue a cell for a different index path than the index path being reconfigured, which is not allowed. You must dequeue a cell for the same index path that is being reconfigured to obtain the existing cell. Dequeued index path: %@; Reconfigured index path: %@; Existing cell: %@"),
      v12,
      v53,
      self->_cellBeingReconfigured);

  }
  v19 = self->_cellBeingReconfigured;
LABEL_62:

  _Block_object_dispose(&v73, 8);
  return v19;
}

+ (id)_reuseKeyForSupplementaryViewOfKind:(id)a3 withReuseIdentifier:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;

  if ((id)qword_1EDDC6640 != a3 || qword_1EDDC6648 != (_QWORD)a4)
  {
    v6 = a4;
    v7 = a3;
    v8 = objc_msgSend(v7, "length");
    v9 = v8 + objc_msgSend(v6, "length") + 1;
    v10 = (char *)malloc_type_malloc(2 * v9, 0x1000040BDFB0063uLL);
    objc_msgSend(v7, "getCharacters:", v10);
    v11 = &v10[2 * v8];
    *(_WORD *)v11 = 47;
    objc_msgSend(v6, "getCharacters:", v11 + 2);
    v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharactersNoCopy:length:freeWhenDone:", v10, v9, 1);
    v13 = (void *)qword_1EDDC6650;
    qword_1EDDC6650 = v12;

    v14 = objc_msgSend(v7, "copy");
    v15 = (void *)qword_1EDDC6640;
    qword_1EDDC6640 = v14;

    v16 = objc_msgSend(v6, "copy");
    v17 = (void *)qword_1EDDC6648;
    qword_1EDDC6648 = v16;

  }
  return objc_retainAutorelease((id)qword_1EDDC6650);
}

- (id)presentationIndexPathForDataSourceIndexPath:(id)a3
{
  return -[_UICollectionViewShadowUpdatesController indexPathAfterShadowUpdates:](self->_dragAndDropController, "indexPathAfterShadowUpdates:", a3);
}

- (void)_registeredSupplementaryViewKind:(id)a3
{
  id v4;
  NSMutableSet *supplementaryViewRegisteredKinds;
  NSMutableSet *v6;
  NSMutableSet *v7;
  id v8;

  v4 = a3;
  supplementaryViewRegisteredKinds = self->_supplementaryViewRegisteredKinds;
  v8 = v4;
  if (!supplementaryViewRegisteredKinds)
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v6 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
    v7 = self->_supplementaryViewRegisteredKinds;
    self->_supplementaryViewRegisteredKinds = v6;

    v4 = v8;
    supplementaryViewRegisteredKinds = self->_supplementaryViewRegisteredKinds;
  }
  -[NSMutableSet addObject:](supplementaryViewRegisteredKinds, "addObject:", v4);

}

- (void)_prepareViewForUse:(id)a3 withElementCategory:(unint64_t)a4 elementKind:(id)a5 reuseIdentifier:(id)a6 indexPath:(id)a7 applyDefaultAttributes:(BOOL)a8
{
  _BOOL4 v8;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  _OWORD v23[8];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v8 = a8;
  v14 = a3;
  v15 = a5;
  objc_msgSend(v14, "_setReuseIdentifier:", a6);
  objc_msgSend(v14, "_setElementKind:", v15);
  objc_msgSend(v14, "setAutoresizingMask:", 0);
  objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 1);
  objc_msgSend(v14, "_setCollectionView:", self);
  objc_msgSend(v14, "_setAutomaticIntrinsicContentSizeInvalidationEnabled:", (*((_WORD *)&self->_collectionViewFlags + 8) & 0xC) == 8);
  if (v8)
  {
    if (self->_layout)
      v16 = (void *)objc_msgSend((id)objc_opt_class(), "layoutAttributesClass");
    else
      v16 = (void *)objc_opt_class();
    if (a4 == 1)
    {
      objc_msgSend(v16, "layoutAttributesForSupplementaryViewOfKind:withIndexPath:", v15, a7);
      v17 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (a4)
        objc_msgSend(v16, "layoutAttributesForDecorationViewOfKind:withIndexPath:", v15, a7);
      else
        objc_msgSend(v16, "layoutAttributesForCellWithIndexPath:", a7);
      v17 = objc_claimAutoreleasedReturnValue();
    }
    v18 = (void *)v17;
    objc_msgSend(v14, "center");
    objc_msgSend(v18, "setCenter:");
    objc_msgSend(v14, "bounds");
    objc_msgSend(v18, "setSize:", v19, v20);
    objc_msgSend(v14, "layer");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v21)
    {
      objc_msgSend(v21, "transform");
    }
    else
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
    }
    v23[4] = v28;
    v23[5] = v29;
    v23[6] = v30;
    v23[7] = v31;
    v23[0] = v24;
    v23[1] = v25;
    v23[2] = v26;
    v23[3] = v27;
    objc_msgSend(v18, "setTransform3D:", v23);

    objc_msgSend(v14, "alpha");
    objc_msgSend(v18, "setAlpha:");
    -[UICollectionView _applyLayoutAttributes:toView:](self, "_applyLayoutAttributes:toView:", v18, v14);

  }
  objc_msgSend(v14, "_setHostsLayoutEngine:", 1);
  objc_msgSend(v14, "_markAsDequeued");

}

- (void)_stopScrollingNotify:(BOOL)a3 pin:(BOOL)a4
{
  objc_super v5;

  v5.receiver = self;
  v5.super_class = (Class)UICollectionView;
  -[UIScrollView _stopScrollingNotify:pin:](&v5, sel__stopScrollingNotify_pin_, a3, a4);
  -[UICollectionView _clearTargetIndexPathForScrolling](self, "_clearTargetIndexPathForScrolling");
}

- (void)_clearTargetIndexPathForScrolling
{
  NSIndexPath *scrollingTargetIndexPath;
  CGSize v4;
  int v5;
  unsigned int v6;

  scrollingTargetIndexPath = self->_scrollingTargetIndexPath;
  self->_scrollingTargetIndexPath = 0;

  self->_offsetToScrollingTarget = (CGPoint)*MEMORY[0x1E0C9D538];
  v4 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  self->_scrollingTargetFrame.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  self->_scrollingTargetFrame.size = v4;
  self->_requestedPositionOfScrollingTarget = 0;
  v5 = *((unsigned __int16 *)&self->_collectionViewFlags + 8);
  v6 = v5 & 0xFFFFDFFF | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  *((_WORD *)&self->_collectionViewFlags + 8) = v5 & 0xDFFF;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v6);
}

- (id)preparedCells
{
  void *v3;
  void *v4;
  NSMutableDictionary *prefetchCacheItems;
  id v6;
  _QWORD v8[4];
  id v9;

  -[UICollectionView visibleCells](self, "visibleCells");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "mutableCopy");

  prefetchCacheItems = self->_prefetchCacheItems;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __33__UICollectionView_preparedCells__block_invoke;
  v8[3] = &unk_1E16BCEA8;
  v6 = v4;
  v9 = v6;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](prefetchCacheItems, "enumerateKeysAndObjectsUsingBlock:", v8);

  return v6;
}

- (NSArray)visibleCells
{
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  return (NSArray *)-[UICollectionView _existingVisibleCells](self, "_existingVisibleCells");
}

- (void)reloadData
{
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  unint64_t v4;
  unint64_t v5;
  NSObject *v6;
  os_signpost_id_t v7;
  os_signpost_id_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  _BOOL4 v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  char v30;
  void *v31;
  void *v32;
  int v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  void *v37;
  _UICollectionViewSubviewManager *subviewManager;
  void *v39;
  _UICollectionViewSubviewManager *v40;
  id v41;
  _UICollectionViewSubviewManager *v42;
  id v43;
  void *pendingDeselectionIndexPaths;
  void *v45;
  void *v46;
  NSIndexPath *v47;
  NSIndexPath *v48;
  NSIndexPath *v49;
  id v50;
  NSMutableSet *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  void *v56;
  NSMutableSet *v57;
  NSMutableSet *v58;
  NSIndexPath *pendingSelectionIndexPath;
  NSMutableOrderedSet *indexPathsRequiringPreferredAttributes;
  unsigned int v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  id v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  _BOOL4 v72;
  _UICollectionViewSectionFocusGuideController *sectionFocusGuideController;
  uint64_t v74;
  void *v75;
  void *v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  unint64_t v81;
  UICollectionViewLayout *v82;
  UICollectionView *v83;
  const void **p_isa;
  uint64_t v85;
  uint64_t v86;
  void (**v87)(_QWORD);
  void *v88;
  void *v89;
  NSObject *v90;
  NSObject *v91;
  uint64_t v92;
  id v93;
  _QWORD block[5];
  _QWORD v95[5];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _QWORD v100[4];
  id v101;
  _QWORD v102[4];
  id v103;
  _QWORD aBlock[5];
  BOOL v105;
  uint8_t v106[128];
  uint8_t buf[4];
  UICollectionView *v108;
  uint64_t v109;
  CGRect v110;
  CGRect v111;

  v109 = *MEMORY[0x1E0C80C00];
  if (self->_reloadingSuspendedCount >= 1)
  {
    p_collectionViewFlags = &self->_collectionViewFlags;
    v4 = *((_QWORD *)&self->_collectionViewFlags + 1) | 0x80;
LABEL_3:
    *((_QWORD *)p_collectionViewFlags + 1) = v4;
    return;
  }
  v5 = qword_1EDDC6490;
  if (!qword_1EDDC6490)
  {
    v5 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v5, (unint64_t *)&qword_1EDDC6490);
  }
  v6 = *(id *)(v5 + 8);
  v7 = os_signpost_id_make_with_pointer(*(os_log_t *)(v5 + 8), self);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = v7;
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_185066000, v6, OS_SIGNPOST_EVENT, v8, "ReloadData", ", buf, 2u);
    }
  }

  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x10000000000uLL;
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)v10;
    if (v10)
      v12 = *(void **)(v10 + 8);
    else
      v12 = 0;
    v13 = v12;

    if (v13)
    {
      objc_msgSend(v13, "frame");
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v21 = v20;
      -[UIScrollView visibleBounds](self, "visibleBounds");
      v111.origin.x = v22;
      v111.origin.y = v23;
      v111.size.width = v24;
      v111.size.height = v25;
      v110.origin.x = v15;
      v110.origin.y = v17;
      v110.size.width = v19;
      v110.size.height = v21;
      v26 = CGRectIntersectsRect(v110, v111);
      v27 = 0x20000000000;
      if (!v26)
        v27 = 0;
    }
    else
    {
      v27 = 0;
    }
    v28 = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFDFFFFFFFFFFLL | v27;
    *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v28;
    v29 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v29);

  }
  -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");
  -[UICollectionView _suspendReloads](self, "_suspendReloads");
  *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x10000000uLL;
  -[UICollectionView _completeInteractiveMovementWithDisposition:](self, "_completeInteractiveMovementWithDisposition:", 2);
  if (self->_firstResponderView)
  {
    v30 = *((_BYTE *)&self->_collectionViewFlags + 18);
    *((_WORD *)&self->_collectionViewFlags + 8) |= 0x4000u;
    *((_BYTE *)&self->_collectionViewFlags + 18) = v30;
    -[UIView window](self, "window");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "firstResponder");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "resignFirstResponder");

    v33 = *((_WORD *)&self->_collectionViewFlags + 8) & 0xBFFF | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    *((_WORD *)&self->_collectionViewFlags + 8) &= ~0x4000u;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v33);
    if (self->_firstResponderView)
    {
      -[UICollectionView _resumeReloads](self, "_resumeReloads");
      p_collectionViewFlags = &self->_collectionViewFlags;
      v4 = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFFEFFFFFFFLL;
      goto LABEL_3;
    }
  }
  v34 = qword_1EDDC6498;
  if (!qword_1EDDC6498)
  {
    v34 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v34, (unint64_t *)&qword_1EDDC6498);
  }
  if ((*(_BYTE *)v34 & 1) != 0)
  {
    v90 = *(NSObject **)(v34 + 8);
    if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v108 = self;
      _os_log_impl(&dword_185066000, v90, OS_LOG_TYPE_ERROR, "[UICV %p] reloadData", buf, 0xCu);
    }
  }
  if (-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes"))
    -[UICollectionView _saveContentOffsetRestorationAnchorIfNecessaryUsingModel:]((uint64_t)self, self->_collectionViewData);
  v35 = -[UICollectionView _isConnectedToDiffableDataSource](self, "_isConnectedToDiffableDataSource");
  v36 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __30__UICollectionView_reloadData__block_invoke;
  aBlock[3] = &unk_1E16BCC80;
  v105 = v35;
  aBlock[4] = self;
  v37 = _Block_copy(aBlock);
  if (v35 && dyld_program_sdk_at_least())
    self->_updateAnimationCount = 0;
  subviewManager = self->_subviewManager;
  v39 = _Block_copy(v37);
  -[_UICollectionViewSubviewManager updateVisibleCellsUsingFilter:]((uint64_t)subviewManager, (uint64_t)v39);

  v40 = self->_subviewManager;
  v102[0] = v36;
  v102[1] = 3221225472;
  v102[2] = __30__UICollectionView_reloadData__block_invoke_274;
  v102[3] = &unk_1E16BCCA8;
  v41 = v37;
  v103 = v41;
  if (v40)
    -[_UICollectionViewSubviewCollection updateSupplementariesUsingFilter:]((uint64_t)v40->_visibleViews, (uint64_t)v102);
  v42 = self->_subviewManager;
  v100[0] = v36;
  v100[1] = 3221225472;
  v100[2] = __30__UICollectionView_reloadData__block_invoke_2;
  v100[3] = &unk_1E16BCCA8;
  v43 = v41;
  v101 = v43;
  if (v42)
    -[_UICollectionViewSubviewCollection updateDecorationsUsingFilter:]((uint64_t)v42->_visibleViews, (uint64_t)v100);
  if (!dyld_program_sdk_at_least()
    || (v35 & (*((unsigned __int16 *)&self->_collectionViewFlags + 8) >> 10)) != 1)
  {
    goto LABEL_54;
  }
  -[UICollectionView _diffableDataSourceImpl](self, "_diffableDataSourceImpl");
  pendingDeselectionIndexPaths = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(pendingDeselectionIndexPaths, "currentTransaction");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = v45;
  if (!pendingDeselectionIndexPaths || !v45)
  {

LABEL_54:
    -[_UICollectionViewSelectionController reset]((uint64_t)self->_selectionController);
    pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
    self->_pendingSelectionIndexPath = 0;

    pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
    self->_pendingDeselectionIndexPaths = 0;
    goto LABEL_55;
  }
  -[_UICollectionViewSelectionController rebaseItemsWithDiffableTransaction:]((uint64_t)self->_selectionController, v45);
  v47 = self->_pendingSelectionIndexPath;
  if (v47)
  {
    -[_UICollectionViewSelectionController rebaseIndexPath:withDiffableTransaction:]((uint64_t)self->_selectionController, (uint64_t)v47, v46);
    v48 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
    v49 = self->_pendingSelectionIndexPath;
    self->_pendingSelectionIndexPath = v48;

  }
  if (self->_pendingDeselectionIndexPaths)
  {
    v93 = v43;
    v50 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v92 = 2184;
    v51 = self->_pendingDeselectionIndexPaths;
    v52 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v51, "countByEnumeratingWithState:objects:count:", &v96, v106, 16);
    if (v52)
    {
      v53 = v52;
      v54 = *(_QWORD *)v97;
      do
      {
        for (i = 0; i != v53; ++i)
        {
          if (*(_QWORD *)v97 != v54)
            objc_enumerationMutation(v51);
          -[_UICollectionViewSelectionController rebaseIndexPath:withDiffableTransaction:]((uint64_t)self->_selectionController, *(_QWORD *)(*((_QWORD *)&v96 + 1) + 8 * i), v46);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          if (v56)
            objc_msgSend(v50, "addObject:", v56);

        }
        v53 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v51, "countByEnumeratingWithState:objects:count:", &v96, v106, 16);
      }
      while (v53);
    }

    v57 = (NSMutableSet *)objc_msgSend(v50, "count");
    if (v57)
    {
      objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", v50);
      v57 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
    }
    v43 = v93;
    v36 = MEMORY[0x1E0C809B0];
    v58 = self->_pendingDeselectionIndexPaths;
    self->_pendingDeselectionIndexPaths = v57;

  }
LABEL_55:

  -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
  v95[0] = v36;
  v95[1] = 3221225472;
  v95[2] = __30__UICollectionView_reloadData__block_invoke_3;
  v95[3] = &unk_1E16B1B28;
  v95[4] = self;
  -[UICollectionView _invalidateWithBlock:](self, "_invalidateWithBlock:", v95);
  -[UICollectionView _invalidateLayoutForReload](self, "_invalidateLayoutForReload");
  -[UICollectionView _resetUpdateItemArrays](self, "_resetUpdateItemArrays");
  -[UICollectionView _clearSpecificInvalidationLists](self);
  indexPathsRequiringPreferredAttributes = self->_indexPathsRequiringPreferredAttributes;
  self->_indexPathsRequiringPreferredAttributes = 0;

  v61 = (*((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16)) & 0xFFF7FFFF;
  *((_QWORD *)&self->_collectionViewFlags + 1) &= 0xFFFFFFFFE7FFFFFFLL;
  *((_WORD *)&self->_collectionViewFlags + 8) = v61;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v61);
  -[UICollectionView _clearNeedsRecomputePreferredAttributesForInvalidatedElements](self, "_clearNeedsRecomputePreferredAttributesForInvalidatedElements");
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v62 = objc_claimAutoreleasedReturnValue();
  if (v62)
  {
    v63 = (void *)v62;
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v64 = objc_claimAutoreleasedReturnValue();
    v65 = (void *)v64;
    v66 = v64 ? *(void **)(v64 + 16) : 0;
    v67 = v66;
    v68 = -[UICollectionView _indexPathIsValid:allowSectionItemSentinel:](self, "_indexPathIsValid:allowSectionItemSentinel:", v67, 1);

    if (!v68)
      -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", 0);
  }
  -[UICollectionView _resetPrefetchState](self, "_resetPrefetchState", v92);
  -[UICollectionView _resumeReloads](self, "_resumeReloads");
  v69 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v69 & 0x10000000000000) != 0)
  {
    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
    *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x20000000000000uLL;
  }
  else if ((v69 & 0x1000000000000010) == 0x10)
  {
    -[UIView window](self, "window");
    v70 = objc_claimAutoreleasedReturnValue();
    if (v70)
    {
      v71 = (void *)v70;
      v72 = -[UICollectionView _prefetchingAllowed](self, "_prefetchingAllowed");

      if (v72)
      {
        block[0] = v36;
        block[1] = 3221225472;
        block[2] = __30__UICollectionView_reloadData__block_invoke_4;
        block[3] = &unk_1E16B1B28;
        block[4] = self;
        dispatch_async(MEMORY[0x1E0C80D38], block);
      }
    }
  }
  -[_UICollectionViewSectionFocusGuideController cleanupSectionFocusGuides](self->_sectionFocusGuideController, "cleanupSectionFocusGuides");
  sectionFocusGuideController = self->_sectionFocusGuideController;
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v74 = objc_claimAutoreleasedReturnValue();
  v75 = (void *)v74;
  if (v74)
    v76 = *(void **)(v74 + 16);
  else
    v76 = 0;
  v77 = v76;
  -[_UICollectionViewSectionFocusGuideController updateFocusedIndexPath:immediatelyReevaluatePivotIndex:](sectionFocusGuideController, "updateFocusedIndexPath:immediatelyReevaluatePivotIndex:", v77, 0);

  -[_UICollectionViewOrthogonalScrollerSectionController reconfigureScrollViewsForUpdate:]((uint64_t)self->_orthogonalScrollerController, 0);
  -[_UICollectionViewOrthogonalScrollerSectionController processQueuedScrollViewRemovals]((uint64_t)self->_orthogonalScrollerController);
  -[UICollectionView _reconfigureSectionContainersForUpdate:](self, "_reconfigureSectionContainersForUpdate:", 0);
  -[UICollectionView _processQueuedSectionContainerRemovals](self, "_processQueuedSectionContainerRemovals");
  -[UICollectionView _updateSectionIndex](self, "_updateSectionIndex");
  -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
  v78 = (void *)objc_claimAutoreleasedReturnValue();

  if (v78)
  {
    -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _focusFastScrollingIndexBarEntries](self, "_focusFastScrollingIndexBarEntries");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v79, "_updateWithEntries:", v80);

  }
  v81 = qword_1EDDC64A0;
  if (!qword_1EDDC64A0)
  {
    v81 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v81, (unint64_t *)&qword_1EDDC64A0);
  }
  if ((*(_BYTE *)v81 & 1) != 0)
  {
    v91 = *(NSObject **)(v81 + 8);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v108 = self;
      _os_log_impl(&dword_185066000, v91, OS_LOG_TYPE_ERROR, "[UICV %p] End reloadData", buf, 0xCu);
    }
  }
  v82 = self->_layout;
  v83 = self;
  p_isa = (const void **)&v83->super.super.super.super.isa;
  if (!v82)
    goto LABEL_79;
  v85 = -[UIView effectiveUserInterfaceLayoutDirection](v83, "effectiveUserInterfaceLayoutDirection");
  if (v85 != -[UICollectionViewLayout developmentLayoutDirection](v82, "developmentLayoutDirection"))
  {
    v86 = -[UICollectionViewLayout _wantsRightToLeftHorizontalMirroringIfNeeded](v82, "_wantsRightToLeftHorizontalMirroringIfNeeded");
    goto LABEL_78;
  }
  if (objc_msgSend(p_isa, "_flipsHorizontalAxis"))
  {
    v86 = 0;
LABEL_78:
    objc_msgSend(p_isa, "_setFlipsHorizontalAxis:", v86);
  }
LABEL_79:

  v87 = (void (**)(_QWORD))_Block_copy(p_isa[391]);
  if (v87)
  {
    v88 = (void *)p_isa[391];
    p_isa[391] = 0;

    v87[2](v87);
  }
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 4) != 0)
  {
    if (!dyld_program_sdk_at_least()
      || (objc_msgSend(p_isa, "window"), v89 = (void *)objc_claimAutoreleasedReturnValue(), v89, v89))
    {
      objc_msgSend(p_isa, "layoutIfNeeded");
    }
  }

}

- (void)_processQueuedSectionContainerRemovals
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  NSMutableArray *sectionContainersQueuedForRemoval;
  NSMutableArray *obj;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = self->_sectionContainersQueuedForRemoval;
  v3 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v3)
  {
    v4 = v3;
    v15 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v21 != v15)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        objc_msgSend(v6, "subviews");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v17;
          do
          {
            for (j = 0; j != v9; ++j)
            {
              if (*(_QWORD *)v17 != v10)
                objc_enumerationMutation(v7);
              v12 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * j);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                -[UICollectionView _addControlledSubview:](self, "_addControlledSubview:", v12);
            }
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
          }
          while (v9);
        }

        objc_msgSend(v6, "removeFromSuperview");
      }
      v4 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v4);
  }

  sectionContainersQueuedForRemoval = self->_sectionContainersQueuedForRemoval;
  self->_sectionContainersQueuedForRemoval = 0;

}

- (void)_updateSectionIndex
{
  if ((*(_QWORD *)&self->_collectionViewFlags & 0x8000000000000000) != 0)
    -[UICollectionView _reloadSectionIndexTitles](self, "_reloadSectionIndexTitles");
}

- (void)_layoutAdjustmentsDidChange
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)UICollectionView;
  -[UIScrollView _layoutAdjustmentsDidChange](&v3, sel__layoutAdjustmentsDidChange);
  -[UICollectionViewLayout _scrollViewLayoutAdjustmentsChanged](self->_layout, "_scrollViewLayoutAdjustmentsChanged");
}

- (void)_updateAnimationDidStop:(id)a3 finished:(BOOL)a4
{
  _BOOL4 v4;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  UICollectionViewLayout *layout;
  void *v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  id *v35;
  id *v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id **subviewManager;
  void *v46;
  void *v47;
  BOOL v48;
  void *v49;
  _UICollectionViewSubviewManager *v50;
  void *v51;
  _UICollectionViewSubviewManager *v52;
  void *v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  _BOOL4 v70;
  _QWORD *v71;
  id v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[128];
  uint64_t v81;
  CGRect v82;
  CGRect v83;

  v4 = a4;
  v81 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[UICollectionView _decrementUpdateAnimationCountWithContext:](self, "_decrementUpdateAnimationCountWithContext:", v6);
  if (v6)
  {
    if (v6[2])
      goto LABEL_63;
    v70 = v4;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v71 = v6;
    v7 = (void *)v6[1];
  }
  else
  {
    v70 = v4;
    v71 = 0;
    v7 = 0;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
  }
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v76, v80, 16);
  if (!v9)
    goto LABEL_52;
  v10 = v9;
  v11 = *(_QWORD *)v77;
  v73 = v8;
  v74 = *(_QWORD *)v77;
  do
  {
    v12 = 0;
    v75 = v10;
    do
    {
      if (*(_QWORD *)v77 != v11)
        objc_enumerationMutation(v8);
      v13 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * v12);
      objc_msgSend(v13, "view");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_msgSend(v14, "_clearUpdateAnimation");
        if (objc_msgSend(v13, "resetRasterizationAfterAnimation"))
        {
          v15 = objc_msgSend(v13, "rasterizeAfterAnimation");
          objc_msgSend(v14, "layer");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "setShouldRasterize:", v15);

        }
        -[UICollectionView _visibleBounds](self, "_visibleBounds");
        v18 = v17;
        v20 = v19;
        v22 = v21;
        v24 = v23;
        layout = self->_layout;
        objc_msgSend(v14, "_layoutAttributes");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "frame");
        -[UICollectionViewLayout _orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:](layout, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v26);
        v28 = v27;
        v30 = v29;
        v32 = v31;
        v34 = v33;

        objc_msgSend(v14, "_layoutAttributes");
        v35 = (id *)objc_claimAutoreleasedReturnValue();
        v36 = v35;
        if (v35)
        {
          v37 = *((_WORD *)v35 + 144);
          v38 = 1;
          if ((v37 & 2) != 0)
            v38 = 2;
          v39 = v37 & 1;
          if (v39)
            v40 = 0;
          else
            v40 = v38;
          v41 = *((_QWORD *)&self->_collectionViewFlags + 1);
          v42 = (v41 >> 27) & 1;
          if (((v41 >> 27) & 1) == 0 && v39)
          {
LABEL_20:
            objc_msgSend(v35, "indexPath");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            LOBYTE(v42) = !-[UICollectionView _indexPathIsValid:](self, "_indexPathIsValid:", v43);

            v40 = 0;
          }
        }
        else
        {
          if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x8000000) == 0)
            goto LABEL_20;
          v40 = 0;
          LOBYTE(v42) = 1;
        }
        if ((objc_msgSend(v14, "_isInUpdateAnimation") & 1) == 0
          && (objc_msgSend(v13, "deleteAfterAnimation") & 1) == 0)
        {
          if ((v42 & 1) != 0)
            goto LABEL_25;
          v82.origin.x = v28;
          v82.origin.y = v30;
          v82.size.width = v32;
          v82.size.height = v34;
          v83.origin.x = v18;
          v83.origin.y = v20;
          v83.size.width = v22;
          v83.size.height = v24;
          if (!CGRectIntersectsRect(v82, v83))
          {
LABEL_25:
            -[UIBarButtonItemGroup _items](v36);
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            subviewManager = (id **)self->_subviewManager;
            objc_msgSend(v36, "indexPath");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UICollectionViewSubviewManager visibleViewOfKind:inCategory:atIndexPath:](subviewManager, (uint64_t)v44, v40, (uint64_t)v46);
            v47 = (void *)objc_claimAutoreleasedReturnValue();

            v48 = 0;
            if (dyld_program_sdk_at_least() && !v40)
            {
              objc_msgSend(v36, "indexPath");
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              v48 = -[UICollectionView _isReorderingItemAtIndexPath:](self, "_isReorderingItemAtIndexPath:", v49);

              v8 = v73;
            }
            if (v47 == v14 && !v48)
            {
              v50 = self->_subviewManager;
              objc_msgSend(v36, "indexPath");
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              if (v50)
                -[_UICollectionViewSubviewCollection removeViewOfKind:inCategory:atIndexPath:]((uint64_t)v50->_visibleViews, (uint64_t)v44, v40, (uint64_t)v51);

              v8 = v73;
            }

          }
        }
        v52 = self->_subviewManager;
        if (v52 && -[_UICollectionViewSubviewCollection containsView:](&v52->_visibleViews->super.isa, (uint64_t)v14))
        {
          v10 = v75;
          if (dyld_program_sdk_at_least()
            && objc_msgSend(v13, "updateZIndexAfterAnimation"))
          {
            objc_msgSend(v14, "_layoutAttributes");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            -[UICollectionView _addControlledSubview:atZIndex:forced:initialAttributes:](self, "_addControlledSubview:atZIndex:forced:initialAttributes:", v14, objc_msgSend(v53, "zIndex"), 1, 0);
            goto LABEL_45;
          }
        }
        else
        {
          v10 = v75;
          if ((objc_msgSend(v14, "_isInUpdateAnimation") & 1) == 0)
          {
            if (objc_msgSend(v13, "viewType") == 1)
            {
              -[UICollectionView _reuseCell:](self, "_reuseCell:", v14);
            }
            else if (objc_msgSend(v13, "viewType") == 2)
            {
              -[UICollectionView _reuseSupplementaryView:](self, "_reuseSupplementaryView:", v14);
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 12935, CFSTR("UICollectionView finished animating a view of unknown type: %@"), v14);
LABEL_45:

            }
          }
        }

        v11 = v74;
      }

      ++v12;
    }
    while (v10 != v12);
    v54 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v76, v80, 16);
    v10 = v54;
  }
  while (v54);
LABEL_52:

  -[UICollectionViewLayout collectionViewContentSize](self->_layout, "collectionViewContentSize");
  -[UICollectionView setContentSize:](self, "setContentSize:");
  v6 = v71;
  if (v71)
  {
    v55 = (id)v71[3];
    v56 = v55;
    if (v55)
      (*((void (**)(id, _BOOL4))v55 + 2))(v55, v70);
  }
  else
  {
    v56 = 0;
  }
  -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v57 = objc_claimAutoreleasedReturnValue();
  v58 = (void *)v57;
  if (v57 && (v59 = *(id *)(v57 + 8)) != 0)
  {
    v60 = v59;
    -[UIView traitCollection](self, "traitCollection");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = objc_msgSend(v61, "userInterfaceIdiom");

    if (v62 == 3)
    {
      +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "scrollManager");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIScrollView _focusTuple](self, "_focusTuple");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v65 = objc_claimAutoreleasedReturnValue();
      v66 = (void *)v65;
      if (v65)
        v67 = *(void **)(v65 + 8);
      else
        v67 = 0;
      v68 = v67;
      objc_msgSend(v63, "animateOffsetOfScrollableContainersInParentEnvironmentContainer:toShowFocusItem:", v64, v68);

      goto LABEL_61;
    }
  }
  else
  {
LABEL_61:

  }
LABEL_63:
  -[UIView _focusSystem](self, "_focusSystem");
  v69 = (void *)objc_claimAutoreleasedReturnValue();

  if (v69)
    -[UICollectionView _highlightFirstVisibleItemIfAppropriate](self, "_highlightFirstVisibleItemIfAppropriate");

}

- (void)_decrementUpdateAnimationCountWithContext:(id)a3
{
  _QWORD *v4;
  int64_t updateAnimationCount;
  BOOL v6;
  int64_t v7;

  v4 = a3;
  if (v4)
    --v4[2];

  updateAnimationCount = self->_updateAnimationCount;
  v6 = updateAnimationCount < 1;
  v7 = updateAnimationCount - 1;
  if (!v6)
    self->_updateAnimationCount = v7;
}

- (BOOL)_indexPathIsValid:(id)a3 allowSectionItemSentinel:(BOOL)a4
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;

  if (!a3)
    return 0;
  v7 = objc_msgSend(a3, "section");
  v8 = objc_msgSend(a3, "item");
  if (-[UICollectionView numberOfSections](self, "numberOfSections") <= v7)
    return 0;
  v9 = -[UICollectionView numberOfItemsInSection:](self, "numberOfItemsInSection:", v7);
  v10 = v8 == 0x7FFFFFFFFFFFFFFFLL && a4;
  return v9 > v8 || v10;
}

- (BOOL)_indexPathIsValid:(id)a3
{
  return -[UICollectionView _indexPathIsValid:allowSectionItemSentinel:](self, "_indexPathIsValid:allowSectionItemSentinel:", a3, 0);
}

- (void)setContentSize:(CGSize)a3
{
  double height;
  double width;
  _BOOL8 v6;
  objc_super v7;

  height = a3.height;
  width = a3.width;
  v6 = -[UIScrollView _adjustsTargetsOnContentOffsetChanges](self, "_adjustsTargetsOnContentOffsetChanges");
  -[UIScrollView _setAdjustsTargetsOnContentOffsetChanges:](self, "_setAdjustsTargetsOnContentOffsetChanges:", 0);
  v7.receiver = self;
  v7.super_class = (Class)UICollectionView;
  -[UIScrollView setContentSize:](&v7, sel_setContentSize_, width, height);
  -[UIScrollView _setAdjustsTargetsOnContentOffsetChanges:](self, "_setAdjustsTargetsOnContentOffsetChanges:", v6);
}

uint64_t __64__UICollectionView__setContentSize_skipContentOffsetAdjustment___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setContentSize:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

uint64_t __123__UICollectionView__performBatchUpdates_completion_invalidationContext_tentativelyForReordering_animator_animationHandler___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a2);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

- (BOOL)_reuseSupplementaryView:(id)a3
{
  UICollectionReusableView *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  UICollectionReusableView *v9;
  void *v10;
  BOOL v11;
  void *v13;

  v5 = (UICollectionReusableView *)a3;
  if (-[UICollectionReusableView _isInUpdateAnimation](v5, "_isInUpdateAnimation"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9899, CFSTR("attempting to reuse a view that's still in an update animation: %@"), v5);

  }
  if (self->_firstResponderView != v5)
  {
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    v8 = v6 ? *(void **)(v6 + 8) : 0;
    v9 = v8;

    if (v9 != v5)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
      {
        -[UIView _focusSystem](v5, "_focusSystem");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "_focusEnvironmentWillDisappear:", v5);

LABEL_11:
        -[UICollectionView _enqueueViewForReuse:](self, "_enqueueViewForReuse:", v5);
        -[UICollectionView _notifyDidEndDisplayingSupplementaryView:](self, "_notifyDidEndDisplayingSupplementaryView:", v5);
        v11 = 1;
        goto LABEL_12;
      }
      if (!-[UIView _isFocusedOrAncestorOfFocusedView](v5, "_isFocusedOrAncestorOfFocusedView"))
        goto LABEL_11;
    }
  }
  v11 = 0;
LABEL_12:

  return v11;
}

- (BOOL)_reuseCell:(id)a3 notifyDidEndDisplaying:(BOOL)a4
{
  _BOOL4 v4;
  UICollectionReusableView *v7;
  BOOL v8;
  unint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  UICollectionReusableView *v17;
  int v18;
  void *v19;
  void *v20;
  _UICollectionViewDragAndDropController *dragAndDropController;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  UICollectionReusableView *v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  NSObject *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  void *v36;
  NSObject *v37;
  UICollectionReusableView *v38;
  int v39;
  NSObject *v40;
  NSObject *v41;
  UICollectionReusableView *v42;
  _BOOL4 v43;
  uint64_t v44;
  void *v45;
  void *v46;
  UICollectionReusableView *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[4];
  UICollectionView *v53;
  __int16 v54;
  UICollectionReusableView *v55;
  __int16 v56;
  _BYTE v57[10];
  void *v58;
  UICollectionReusableView *v59;
  _BYTE v60[128];
  uint64_t v61;

  v4 = a4;
  v61 = *MEMORY[0x1E0C80C00];
  v7 = (UICollectionReusableView *)a3;
  if (!-[UICollectionReusableView _isBeingReused](v7, "_isBeingReused"))
  {
    if (-[UICollectionReusableView _isInUpdateAnimation](v7, "_isInUpdateAnimation"))
    {
      v10 = qword_1EDDC6668;
      if (!qword_1EDDC6668)
      {
        v10 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v10, (unint64_t *)&qword_1EDDC6668);
      }
      v11 = *(NSObject **)(v10 + 8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v53 = (UICollectionView *)v7;
        _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "Cell (%@) is currently in an update animation and cannot be reused, ignoring.", buf, 0xCu);
      }
      goto LABEL_2;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      NSLog(CFSTR("_reuseCell should not try to reuse %@"), v7);
      v8 = 0;
      goto LABEL_3;
    }
    if (-[UICollectionReusableView _isInUpdateAnimation](v7, "_isInUpdateAnimation"))
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9841, CFSTR("attempting to reuse a cell that's still in an update animation: %@"), v7);

    }
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    -[UICollectionView _reorderedItems](self, "_reorderedItems");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v49;
      while (2)
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v49 != v15)
            objc_enumerationMutation(v12);
          objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * i), "cell");
          v17 = (UICollectionReusableView *)objc_claimAutoreleasedReturnValue();

          if (v17 == v7)
          {
            v18 = 1;
            goto LABEL_23;
          }
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
        if (v14)
          continue;
        break;
      }
    }
    v18 = 0;
LABEL_23:

    -[UICollectionReusableView _layoutAttributes](v7, "_layoutAttributes");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "indexPath");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (-[_UICollectionViewDragAndDropController isCellInvolvedInDragOrDropAnimation:atIndexPath:]((_BOOL8)self->_dragAndDropController, v7, (uint64_t)v20))
    {
      if (v7)
      {
        dragAndDropController = self->_dragAndDropController;
        if (dragAndDropController)
          -[NSMutableSet addObject:](dragAndDropController->_cellsDeferredForReuse, "addObject:", v7);
      }
      v22 = qword_1EDDC6670;
      if (!qword_1EDDC6670)
      {
        v22 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v22, (unint64_t *)&qword_1EDDC6670);
      }
      if ((*(_BYTE *)v22 & 1) == 0)
        goto LABEL_30;
      v37 = *(NSObject **)(v22 + 8);
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        goto LABEL_30;
      v32 = v37;
      objc_msgSend(v20, "_ui_shortDescription");
      v38 = (UICollectionReusableView *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v53 = self;
      v54 = 2112;
      v55 = v38;
      v56 = 2112;
      *(_QWORD *)v57 = v7;
      _os_log_impl(&dword_185066000, v32, OS_LOG_TYPE_ERROR, "[UICV %p] _reuseCell transfering ownership of cell at %@ to drag and drop controller: %@ ", buf, 0x20u);

LABEL_54:
LABEL_30:
      v8 = 1;
LABEL_51:

      goto LABEL_3;
    }
    if ((v18 & 1) != 0
      || self->_firstResponderView == v7
      || ((-[UICollectionView _focusedItemState](self, "_focusedItemState"),
           v23 = objc_claimAutoreleasedReturnValue(),
           (v24 = (void *)v23) == 0)
        ? (v25 = 0)
        : (v25 = *(void **)(v23 + 8)),
          v26 = v25,
          v26,
          v24,
          v26 == v7))
    {
      v35 = qword_1EDDC6678;
      if (!qword_1EDDC6678)
      {
        v35 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v35, (unint64_t *)&qword_1EDDC6678);
      }
      if ((*(_BYTE *)v35 & 1) != 0)
      {
        v39 = v18;
        v40 = *(NSObject **)(v35 + 8);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          v41 = v40;
          objc_msgSend(v20, "_ui_shortDescription");
          v42 = (UICollectionReusableView *)objc_claimAutoreleasedReturnValue();
          v43 = self->_firstResponderView == v7;
          -[UICollectionView _focusedItemState](self, "_focusedItemState");
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = (void *)v44;
          if (v44)
            v46 = *(void **)(v44 + 8);
          else
            v46 = 0;
          v47 = v46;
          *(_DWORD *)buf = 134219266;
          v53 = self;
          v54 = 2112;
          v55 = v42;
          v56 = 1024;
          *(_DWORD *)v57 = v39;
          *(_WORD *)&v57[4] = 1024;
          *(_DWORD *)&v57[6] = v43;
          LOWORD(v58) = 1024;
          *(_DWORD *)((char *)&v58 + 2) = v47 == v7;
          HIWORD(v58) = 2112;
          v59 = v7;
          _os_log_impl(&dword_185066000, v41, OS_LOG_TYPE_ERROR, "[UICV %p] Denying reuse on cell at %@ for reason reordered(%d) isFirstReponder(%d) isFocused(%d): %@", buf, 0x32u);

        }
      }
    }
    else if ((dyld_program_sdk_at_least() & 1) != 0
           || !-[UIView _isFocusedOrAncestorOfFocusedView](v7, "_isFocusedOrAncestorOfFocusedView"))
    {
      -[NSMutableSet removeObject:](self->_viewsOptedOutOfBeingParentedIntoContainers, "removeObject:", v7);
      -[UICollectionReusableView _setIsBeingReused:](v7, "_setIsBeingReused:", 1);
      if (dyld_program_sdk_at_least())
      {
        -[UIView _focusSystem](v7, "_focusSystem");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "_focusEnvironmentWillDisappear:", v7);

      }
      -[UICollectionView _enqueueViewForReuse:](self, "_enqueueViewForReuse:", v7);
      if (v4)
      {
        -[UICollectionReusableView _layoutAttributes](v7, "_layoutAttributes");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "indexPath");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionView _notifyDidEndDisplayingCellIfNeeded:forIndexPath:](self, "_notifyDidEndDisplayingCellIfNeeded:forIndexPath:", v7, v29);

      }
      -[UICollectionReusableView _setIsBeingReused:](v7, "_setIsBeingReused:", 0);
      v30 = qword_1EDDC6680;
      if (!qword_1EDDC6680)
      {
        v30 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v30, (unint64_t *)&qword_1EDDC6680);
      }
      if ((*(_BYTE *)v30 & 1) == 0)
        goto LABEL_30;
      v31 = *(NSObject **)(v30 + 8);
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        goto LABEL_30;
      v32 = v31;
      -[UICollectionReusableView reuseIdentifier](v7, "reuseIdentifier");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "_ui_shortDescription");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218754;
      v53 = self;
      v54 = 2112;
      v55 = v7;
      v56 = 2112;
      *(_QWORD *)v57 = v33;
      *(_WORD *)&v57[8] = 2112;
      v58 = v34;
      _os_log_impl(&dword_185066000, v32, OS_LOG_TYPE_ERROR, "[UICV %p] _reuseCell: %@ reuseIdentifier: %@ indexPath:%@", buf, 0x2Au);

      goto LABEL_54;
    }
    v8 = 0;
    goto LABEL_51;
  }
LABEL_2:
  v8 = 1;
LABEL_3:

  return v8;
}

- (void)_notifyDidEndDisplayingCellIfNeeded:(id)a3 forIndexPath:(id)a4
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v6, "_hasNotifiedIsDisplaying"))
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (!v7)
      {
        __UIFaultDebugAssertLog();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
        {
          v12 = 138412290;
          v13 = v6;
          _os_log_fault_impl(&dword_185066000, v9, OS_LOG_TYPE_FAULT, "UICollectionView internal inconsistency: index path cannot be nil. Cell: %@", (uint8_t *)&v12, 0xCu);
        }

      }
    }
    else if (!v7)
    {
      v10 = _notifyDidEndDisplayingCellIfNeeded_forIndexPath____s_category;
      if (!_notifyDidEndDisplayingCellIfNeeded_forIndexPath____s_category)
      {
        v10 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v10, (unint64_t *)&_notifyDidEndDisplayingCellIfNeeded_forIndexPath____s_category);
      }
      v11 = *(NSObject **)(v10 + 8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = 138412290;
        v13 = v6;
        _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "UICollectionView internal inconsistency: index path cannot be nil. Cell: %@", (uint8_t *)&v12, 0xCu);
      }
    }
    objc_msgSend(v6, "_notifyIsDisplaying:", 0);
    if ((*(_QWORD *)&self->_collectionViewFlags & 0x400) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "collectionView:didEndDisplayingCell:forItemAtIndexPath:", self, v6, v7);

    }
  }

}

- (void)_cacheOrReuseCell:(id)a3 forIndexPath:(id)a4 invalidatePreferredAttributes:(BOOL)a5 notifyDidEndDisplaying:(BOOL)a6
{
  _BOOL8 v6;
  _BOOL8 v7;
  UICollectionReusableView *v11;
  id v12;
  _UICollectionViewSubviewManager *subviewManager;
  uint64_t v14;
  void *v15;
  void *v16;
  UICollectionReusableView *v17;
  UICollectionReusableView *v18;
  BOOL v19;
  void *v20;
  _UICollectionViewPrefetchItem *v21;
  void *v22;
  id *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  NSObject *v27;
  unint64_t v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  uint8_t buf[4];
  UICollectionView *v36;
  __int16 v37;
  UICollectionReusableView *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v6 = a6;
  v7 = a5;
  v45 = *MEMORY[0x1E0C80C00];
  v11 = (UICollectionReusableView *)a3;
  v12 = a4;
  if (!v11)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9756, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("cell != nil"));

  }
  if (os_variant_has_internal_diagnostics())
  {
    if (!v12)
    {
      __UIFaultDebugAssertLog();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v36 = (UICollectionView *)v11;
        _os_log_fault_impl(&dword_185066000, v27, OS_LOG_TYPE_FAULT, "UICollectionView internal inconsistency: index path cannot be nil. Cell: %@", buf, 0xCu);
      }

    }
  }
  else if (!v12)
  {
    v28 = qword_1EDDC6658;
    if (!qword_1EDDC6658)
    {
      v28 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v28, (unint64_t *)&qword_1EDDC6658);
    }
    v29 = *(NSObject **)(v28 + 8);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v36 = (UICollectionView *)v11;
      _os_log_impl(&dword_185066000, v29, OS_LOG_TYPE_ERROR, "UICollectionView internal inconsistency: index path cannot be nil. Cell: %@", buf, 0xCu);
    }
  }
  if ((-[_UICollectionViewSubviewManager isViewInReuseQueue:]((uint64_t)self->_subviewManager, v11) & 1) == 0)
  {
    subviewManager = self->_subviewManager;
    if (!subviewManager
      || !-[_UICollectionViewSubviewCollection containsView:](&subviewManager->_visibleViews->super.isa, (uint64_t)v11))
    {
      if (v12
        && -[UICollectionView _prefetchingAllowed](self, "_prefetchingAllowed")
        && -[UICollectionView _indexPathIsValid:](self, "_indexPathIsValid:", v12))
      {
        -[UICollectionView _focusedItemState](self, "_focusedItemState");
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = (void *)v14;
        if (v14)
          v16 = *(void **)(v14 + 8);
        else
          v16 = 0;
        v17 = v16;
        v18 = v17;
        if (v17 == v11
          || self->_firstResponderView == v11
          || (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x8000000) != 0)
        {

        }
        else
        {
          v19 = -[_UICollectionViewDragAndDropController isCellInvolvedInDragOrDropAnimation:atIndexPath:]((_BOOL8)self->_dragAndDropController, v11, (uint64_t)v12);

          if (!v19)
          {
            -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", v12);
            v20 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v20)
            {
              v21 = [_UICollectionViewPrefetchItem alloc];
              -[UICollectionReusableView _layoutAttributes](v11, "_layoutAttributes");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v23 = -[_UICollectionViewPrefetchItem initWithAttributes:]((id *)&v21->super.isa, v22);

              -[_UICollectionCompositionalLayoutSolverOptions setLayoutAttributesClass:]((uint64_t)v23, v11);
              if (v7 && v23)
                *((_BYTE *)v23 + 8) |= 3u;
              -[UICollectionReusableView _setHiddenForReuse:](v11, "_setHiddenForReuse:", 1);
              -[NSMutableDictionary setObject:forKeyedSubscript:](self->_prefetchCacheItems, "setObject:forKeyedSubscript:", v23, v12);
              v24 = qword_1EDDC6660;
              if (!qword_1EDDC6660)
              {
                v24 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                atomic_store(v24, (unint64_t *)&qword_1EDDC6660);
              }
              if ((*(_BYTE *)v24 & 1) != 0)
              {
                v30 = *(NSObject **)(v24 + 8);
                if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                {
                  v31 = v30;
                  objc_msgSend(v12, "_ui_shortDescription");
                  v32 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v7);
                  v33 = (void *)objc_claimAutoreleasedReturnValue();
                  -[UICollectionReusableView _layoutAttributes](v11, "_layoutAttributes");
                  v34 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 134219010;
                  v36 = self;
                  v37 = 2112;
                  v38 = v11;
                  v39 = 2112;
                  v40 = v32;
                  v41 = 2112;
                  v42 = v33;
                  v43 = 2112;
                  v44 = v34;
                  _os_log_impl(&dword_185066000, v31, OS_LOG_TYPE_ERROR, "[UICV %p] _cacheOrReuseCell:%@ indexPath:%@ invalidatePreferredAttrs:%@ cellAttrs: %@", buf, 0x34u);

                }
              }
              if (v6)
                -[UICollectionView _notifyDidEndDisplayingCellIfNeeded:forIndexPath:](self, "_notifyDidEndDisplayingCellIfNeeded:forIndexPath:", v11, v12);

              goto LABEL_32;
            }
          }
        }
      }
      if (!-[UICollectionView _reuseCell:notifyDidEndDisplaying:](self, "_reuseCell:notifyDidEndDisplaying:", v11, v6))
      {
        if (dyld_program_sdk_at_least())
        {
          -[UIView superview](v11, "superview");
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          if (v25)
            -[_UICollectionViewSubviewManager setVisibleCell:atIndexPath:]((uint64_t)self->_subviewManager, (uint64_t)v11, (uint64_t)v12);
        }
      }
    }
  }
LABEL_32:

}

- (void)_notifyDidEndDisplayingSupplementaryView:(id)a3
{
  id v4;
  id *v5;
  void *v6;
  void *v7;
  int has_internal_diagnostics;
  BOOL v9;
  int v11;
  void *v12;
  NSObject *v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  id v17;
  __int16 v18;
  id *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "_hasNotifiedIsDisplaying"))
  {
    objc_msgSend(v4, "_notifyIsDisplaying:", 0);
    if ((*(_QWORD *)&self->_collectionViewFlags & 0x800) != 0)
    {
      objc_msgSend(v4, "_layoutAttributes");
      v5 = (id *)objc_claimAutoreleasedReturnValue();
      -[UIBarButtonItemGroup _items](v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "indexPath");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      has_internal_diagnostics = os_variant_has_internal_diagnostics();
      if (v5)
        v9 = v6 == 0;
      else
        v9 = 1;
      v11 = v9 || v7 == 0;
      if (has_internal_diagnostics)
      {
        if (v11)
        {
          __UIFaultDebugAssertLog();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
          {
            v16 = 138412546;
            v17 = v4;
            v18 = 2112;
            v19 = v5;
            _os_log_fault_impl(&dword_185066000, v13, OS_LOG_TYPE_FAULT, "UICollectionView internal inconsistency: layout attributes are invalid for view %@: %@", (uint8_t *)&v16, 0x16u);
          }

        }
      }
      else if (v11)
      {
        v14 = _notifyDidEndDisplayingSupplementaryView____s_category;
        if (!_notifyDidEndDisplayingSupplementaryView____s_category)
        {
          v14 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v14, (unint64_t *)&_notifyDidEndDisplayingSupplementaryView____s_category);
        }
        v15 = *(NSObject **)(v14 + 8);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v16 = 138412546;
          v17 = v4;
          v18 = 2112;
          v19 = v5;
          _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_ERROR, "UICollectionView internal inconsistency: layout attributes are invalid for view %@: %@", (uint8_t *)&v16, 0x16u);
        }
      }
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:", self, v4, v6, v7);

    }
  }

}

- (BOOL)_reuseCell:(id)a3
{
  return -[UICollectionView _reuseCell:notifyDidEndDisplaying:](self, "_reuseCell:notifyDidEndDisplaying:", a3, 1);
}

uint64_t __30__UICollectionView_reloadData__block_invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6;
  _WORD *v7;
  __int16 v8;
  void *v9;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a3, "_isInUpdateAnimation"))
  {
    if (!*(_BYTE *)(a1 + 40) || !dyld_program_sdk_at_least())
      return 1;
    v6 = _UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke_4___s_category;
    if (!_UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke_4___s_category)
    {
      v6 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&_UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke_4___s_category);
    }
    if ((*(_BYTE *)v6 & 1) != 0)
    {
      v11 = *(NSObject **)(v6 + 8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = v11;
        objc_msgSend(a2, "_ui_shortDescription");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 134218498;
        v16 = v12;
        v17 = 2112;
        v18 = v14;
        v19 = 2112;
        v20 = a3;
        _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "[UICV %p] reloadData hiding cell in update animation index path: %@; cell: %@.",
          (uint8_t *)&v15,
          0x20u);

      }
    }
    objc_msgSend(a3, "_setHiddenForReuse:", 1);
  }
  else
  {
    objc_msgSend(a3, "_layoutAttributes");
    v7 = (_WORD *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v8 = v7[144];

      v9 = *(void **)(a1 + 32);
      if ((v8 & 1) != 0)
      {
        objc_msgSend(v9, "_reuseCell:notifyDidEndDisplaying:", a3, 1);
        return 0;
      }
    }
    else
    {
      v9 = *(void **)(a1 + 32);
    }
    objc_msgSend(v9, "_reuseSupplementaryView:", a3);
  }
  return 0;
}

void __60__UICollectionView__removeVisibleViews_fadeForBoundsChange___block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint64_t v32;
  _QWORD aBlock[5];
  id v34;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  switch(a2)
  {
    case 2:
      v12 = *(_QWORD *)(a1 + 32);
      v13 = 2592;
LABEL_7:
      objc_msgSend(*(id *)(v12 + v13), "objectForKeyedSubscript:", v10);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "removeObject:", v9);

      break;
    case 1:
      v12 = *(_QWORD *)(a1 + 32);
      v13 = 2584;
      goto LABEL_7;
    case 0:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2576), "removeObject:", v9);
      break;
  }
  if ((objc_msgSend(v11, "_isInUpdateAnimation") & 1) == 0)
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(v15 + 2904);
    if (v16)
    {
      -[_UICollectionViewSubviewCollection removeViewOfKind:inCategory:atIndexPath:](*(_QWORD *)(v16 + 8), (uint64_t)v10, a2, (uint64_t)v9);
      v15 = *(_QWORD *)(a1 + 32);
    }
    v17 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __60__UICollectionView__removeVisibleViews_fadeForBoundsChange___block_invoke_2;
    aBlock[3] = &unk_1E16BD030;
    aBlock[4] = v15;
    v18 = v9;
    v34 = v18;
    v19 = _Block_copy(aBlock);
    v20 = v19;
    if (!*(_BYTE *)(a1 + 40))
    {
      (*((void (**)(void *, uint64_t, id))v19 + 2))(v19, a2, v11);
LABEL_23:

      goto LABEL_24;
    }
    if (a2 == 2)
    {
      v22 = *(void **)(*(_QWORD *)(a1 + 32) + 2072);
      objc_msgSend(v11, "_layoutAttributes");
      v23 = (id *)objc_claimAutoreleasedReturnValue();
      -[UIBarButtonItemGroup _items](v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:", v24, v18);
      v25 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (a2 != 1)
      {
        if (!a2)
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "finalLayoutAttributesForDisappearingItemAtIndexPath:", v18);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          if (v21)
            goto LABEL_22;
        }
        goto LABEL_21;
      }
      v26 = *(void **)(*(_QWORD *)(a1 + 32) + 2072);
      objc_msgSend(v11, "_layoutAttributes");
      v23 = (id *)objc_claimAutoreleasedReturnValue();
      -[UIBarButtonItemGroup _items](v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:", v24, v18);
      v25 = objc_claimAutoreleasedReturnValue();
    }
    v21 = (void *)v25;

    v17 = MEMORY[0x1E0C809B0];
    if (v21)
    {
LABEL_22:
      v28 = *(void **)(a1 + 32);
      v29[0] = v17;
      v29[1] = 3221225472;
      v29[2] = __60__UICollectionView__removeVisibleViews_fadeForBoundsChange___block_invoke_451;
      v29[3] = &unk_1E16BD058;
      v31 = v20;
      v32 = a2;
      v30 = v11;
      objc_msgSend(v28, "_animateVisibleView:withLayoutAttributes:completionHandler:", v30, v21, v29);

      goto LABEL_23;
    }
LABEL_21:
    objc_msgSend(v11, "_layoutAttributes");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend(v27, "copy");

    objc_msgSend(v21, "setAlpha:", 0.0);
    goto LABEL_22;
  }
LABEL_24:

}

void __60__UICollectionView__removeVisibleViews_fadeForBoundsChange___block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (objc_msgSend(v5, "_isInUpdateAnimation"))
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = 138412546;
        v13 = v11;
        v14 = 2112;
        v15 = v5;
        _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Warning: view should never be in update animation (ignoring - rotation + disappearing item?) for cv == %@; view == %@",
          (uint8_t *)&v12,
          0x16u);
      }

    }
    else
    {
      v6 = _UIInternalPreference_CollectionViewCellPrefetchingMode_block_invoke_7___s_category;
      if (!_UIInternalPreference_CollectionViewCellPrefetchingMode_block_invoke_7___s_category)
      {
        v6 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v6, (unint64_t *)&_UIInternalPreference_CollectionViewCellPrefetchingMode_block_invoke_7___s_category);
      }
      v7 = *(NSObject **)(v6 + 8);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v12 = 138412546;
        v13 = v8;
        v14 = 2112;
        v15 = v5;
        _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "Warning: view should never be in update animation (ignoring - rotation + disappearing item?) for cv == %@; view == %@",
          (uint8_t *)&v12,
          0x16u);
      }
    }
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    if (a2)
      objc_msgSend(v9, "_reuseSupplementaryView:", v5);
    else
      objc_msgSend(v9, "_cacheOrReuseCell:forIndexPath:invalidatePreferredAttributes:notifyDidEndDisplaying:", v5, *(_QWORD *)(a1 + 40), 1, 1);
  }

}

- (void)didMoveToWindow
{
  UICollectionViewData *collectionViewData;
  _UICollectionViewSectionFocusGuideController *sectionFocusGuideController;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  -[UIView window](self, "window");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  if (!v13)
  {
    -[UICollectionView _currentTouch](self, "_currentTouch");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
      -[UICollectionView _cancelTouches](self, "_cancelTouches");
    if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x1000000000000000) != 0)
    {
      _UIUpdateCycleUnregisterIdleObserver(self);
      *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x1000000000000000uLL;
    }
    -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    v11 = 0;
    goto LABEL_17;
  }
  collectionViewData = self->_collectionViewData;
  if (collectionViewData && (*(_BYTE *)&collectionViewData->_collectionViewDataFlags & 8) != 0)
    -[UICollectionView _updateDefaultLayoutMargins](self, "_updateDefaultLayoutMargins");
  if (-[UICollectionView _useIdleObserverForCellPrefetching](self, "_useIdleObserverForCellPrefetching")
    && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x1000000000000000) == 0)
  {
    _UIUpdateCycleRegisterIdleObserver(self);
    *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x1000000000000000uLL;
  }
  sectionFocusGuideController = self->_sectionFocusGuideController;
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v5)
    v7 = *(void **)(v5 + 16);
  else
    v7 = 0;
  v8 = v7;
  -[_UICollectionViewSectionFocusGuideController updateFocusedIndexPath:](sectionFocusGuideController, "updateFocusedIndexPath:", v8);

  -[_UICollectionViewSectionFocusGuideController reloadSectionFocusGuides](self->_sectionFocusGuideController, "reloadSectionFocusGuides");
  if (-[UICollectionView _wantsIndexOverlays](self, "_wantsIndexOverlays"))
  {
    -[UICollectionView _setupIndexOverlayManagerIfNecessary](self, "_setupIndexOverlayManagerIfNecessary");
    -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    v11 = v13;
LABEL_17:
    -[_UICollectionTableIndexOverlayManager hostDidMoveToWindow:](v9, v11);

  }
}

- (BOOL)_useIdleObserverForCellPrefetching
{
  int v2;
  unint64_t v3;

  v2 = _UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_CollectionViewCellPrefetchingMode, (uint64_t)CFSTR("CollectionViewCellPrefetchingMode"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger);
  v3 = qword_1ECD75F10;
  if (v2)
    v3 = 0;
  if (v3 >= 0xFFFFFFFFFFFFFFFELL)
    return 0;
  if (v3 == 1)
    return 1;
  return dyld_program_sdk_at_least();
}

- (UITouch)_currentTouch
{
  return self->_currentTouch;
}

- (_UICollectionTableIndexOverlayManager)_indexOverlayManager
{
  return self->_indexOverlayManager;
}

uint64_t __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[5];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_beginReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate");
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(*(id *)(a1 + 32), "_indexPathIsValid:", v7))
        {
          objc_msgSend(*(id *)(a1 + 32), "_cellForItemAtIndexPath:", v7);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          -[UICollectionViewData layoutAttributesForItemAtIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192), v7);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 32), "_recomputePreferredAttributesForInvalidatedView:originalAttributes:", v8, v9);

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }

  v10 = *(void **)(a1 + 48);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke_2;
  v12[3] = &unk_1E16B8590;
  v12[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v10, "enumerateKeysAndObjectsUsingBlock:", v12);
  return objc_msgSend(*(id *)(a1 + 32), "_endReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate");
}

- (void)_performReloadPrefetchIfNeeded
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v7;
  CGFloat v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id *v19;
  id *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v33 = *MEMORY[0x1E0C80C00];
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x10000000000000) != 0
    && -[UICollectionView _prefetchingAllowed](self, "_prefetchingAllowed"))
  {
    -[UICollectionView _visibleBounds](self, "_visibleBounds");
    x = v34.origin.x;
    y = v34.origin.y;
    width = v34.size.width;
    height = v34.size.height;
    v7 = CGRectGetWidth(v34) * -0.5;
    v35.origin.x = x;
    v35.origin.y = y;
    v35.size.width = width;
    v35.size.height = height;
    v8 = CGRectGetHeight(v35) * -0.5;
    v36.origin.x = x;
    v36.origin.y = y;
    v36.size.width = width;
    v36.size.height = height;
    v37 = CGRectInset(v36, v7, v8);
    -[UICollectionViewData layoutAttributesForCellsInRect:validateLayout:](self->_collectionViewData, 1, v37.origin.x, v37.origin.y, v37.size.width, v37.size.height);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _beginReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate](self, "_beginReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate");
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v10 = v9;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v29;
      v27 = v10;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v29 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v14);
          objc_msgSend(v15, "indexPath");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UICollectionViewSubviewManager visibleCellAtIndexPath:]((id **)self->_subviewManager, (uint64_t)v16);
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v17)
          {
            -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", v16);
            v18 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v18)
            {
              v19 = -[_UICollectionViewPrefetchItem initWithAttributes:]((id *)[_UICollectionViewPrefetchItem alloc], v15);
              v20 = v19;
              if (v19)
              {
                v21 = v19[2];
                v22 = -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](self, "_createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", v16, v21, 0, 0, 0);
                -[_UICollectionCompositionalLayoutSolverOptions setLayoutAttributesClass:]((uint64_t)v20, v22);

                v23 = v20[3];
              }
              else
              {
                v25 = -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](self, "_createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", v16, 0, 0, 0, 0);
                -[_UICollectionCompositionalLayoutSolverOptions setLayoutAttributesClass:](0, v25);

                v23 = 0;
              }
              v24 = v23;
              objc_msgSend(v24, "_setHiddenForReuse:", 1);

              -[NSMutableDictionary setObject:forKeyedSubscript:](self->_prefetchCacheItems, "setObject:forKeyedSubscript:", v20, v16);
              v10 = v27;
            }
          }

          ++v14;
        }
        while (v12 != v14);
        v26 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
        v12 = v26;
      }
      while (v26);
    }

    -[UICollectionView _endReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate](self, "_endReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate");
  }
}

- (void)_endReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate
{
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  _BOOL8 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v3 = *MEMORY[0x1E0C9D538];
  v4 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  if (-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes"))
  {
    v5 = -[UICollectionViewLayout _layoutAxis](self->_layout, "_layoutAxis");
    if ((unint64_t)(v5 - 1) <= 1)
    {
      v3 = _UISetPointValueForAxis(v5, v3, v4, -1.0);
      v4 = v6;
    }
  }
  v7 = -[UIScrollView _isAutomaticContentOffsetAdjustmentEnabled](self, "_isAutomaticContentOffsetAdjustmentEnabled");
  -[UIScrollView contentOffset](self, "contentOffset");
  v9 = v8;
  -[UIScrollView _effectiveContentInset](self, "_effectiveContentInset");
  if (v9 < -v10
    || (-[UIScrollView contentOffset](self, "contentOffset"),
        v12 = v11,
        -[UIScrollView _effectiveContentInset](self, "_effectiveContentInset"),
        v12 < -v13))
  {
    -[UIScrollView _setAutomaticContentOffsetAdjustmentEnabled:](self, "_setAutomaticContentOffsetAdjustmentEnabled:", 0);
  }
  -[UICollectionViewLayout _didPerformUpdateVisibleCellsPassWithLayoutOffset:](self->_layout, "_didPerformUpdateVisibleCellsPassWithLayoutOffset:", v3, v4);
  -[UIScrollView _setAutomaticContentOffsetAdjustmentEnabled:](self, "_setAutomaticContentOffsetAdjustmentEnabled:", v7);
}

- (void)_beginReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate
{
  -[UICollectionViewLayout _willPerformUpdateVisibleCellsPass](self->_layout, "_willPerformUpdateVisibleCellsPass");
}

- (BOOL)_recomputePreferredAttributesForInvalidatedView:(id)a3 originalAttributes:(id)a4
{
  char v7;

  if (!a3)
    return 0;
  v7 = objc_msgSend(a3, "_isHiddenForReuse");
  if (!a4 || (v7 & 1) != 0)
    return 0;
  objc_msgSend(a3, "_invalidatePreferredAttributes");
  return -[UICollectionView _checkForPreferredAttributesInView:originalAttributes:](self, "_checkForPreferredAttributesInView:originalAttributes:", a3, a4);
}

uint64_t __68__UICollectionView__processViewSpecificInvalidationsForVisibleViews__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v5 = (void *)objc_msgSend(a3, "copy");
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "_visibleSupplementaryViewOfKind:atIndexPath:", a2, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v11;
        if (v11)
        {
          objc_msgSend(v11, "_invalidatePreferredAttributes");
          -[UICollectionViewData layoutAttributesForSupplementaryElementOfKind:atIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192), a2, v10);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
          {
            objc_msgSend(*(id *)(a1 + 32), "_checkForPreferredAttributesInView:originalAttributes:", v12, v13);
            objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", v13, v12);
          }
          else if ((objc_msgSend(v12, "_isInUpdateAnimation") & 1) == 0)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = *(_QWORD *)(a1 + 32);
            v18 = *(_QWORD *)(a1 + 40);
            objc_msgSend(v10, "_ui_shortDescription");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "layoutAttributesForSupplementaryViewOfKind:atIndexPath:", a2, v10);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "_layoutAttributes");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "handleFailureInMethod:object:file:lineNumber:description:", v18, v17, CFSTR("UICollectionView.m"), 6306, CFSTR("UICollectionView internal inconsistency: No attributes returned for invalidated supplementary view. Element kind: %@; index path: %@; supplementary view: %@; attributes from layout: %@; attributes from view: %@; collection view: %@"),
              a2,
              v19,
              v12,
              v14,
              v16,
              *(_QWORD *)(a1 + 32));

          }
        }

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v7);
  }

  return objc_msgSend(a3, "removeAllObjects");
}

uint64_t __49__UICollectionView__invalidateLayoutWithContext___block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "_invalidatePreferredAttributes");
}

uint64_t __117__UICollectionView__removeUntrackedAuxillaryViewsForBeforeVisibleViews_afterVisibleViews_withTrackingViewAnimations___block_invoke_5(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __117__UICollectionView__removeUntrackedAuxillaryViewsForBeforeVisibleViews_afterVisibleViews_withTrackingViewAnimations___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a4);
}

uint64_t __30__UICollectionView_reloadData__block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __49__UICollectionView__invalidateLayoutWithContext___block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "_invalidatePreferredAttributes");
}

void __117__UICollectionView__removeUntrackedAuxillaryViewsForBeforeVisibleViews_afterVisibleViews_withTrackingViewAnimations___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0
    && (objc_msgSend(*(id *)(a1 + 40), "containsObject:", v3) & 1) == 0)
  {
    objc_msgSend(v3, "removeFromSuperview");
  }

}

uint64_t __117__UICollectionView__removeUntrackedAuxillaryViewsForBeforeVisibleViews_afterVisibleViews_withTrackingViewAnimations___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a4);
}

void __116__UICollectionView__updatePreferredAttributesForSupplementariesInCurrentUpdateWithRect_newlyVisible_includeInserts___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  if ((objc_msgSend(a4, "_arePreferredAttributesValid") & 1) == 0)
  {
    -[UICollectionViewUpdate validatedNewIndexPathForSupplementaryElementOfKind:oldIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2200), v7, v10);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "layoutAttributesForSupplementaryViewOfKind:atIndexPath:", v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)
        objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);

    }
  }

}

uint64_t __117__UICollectionView__removeUntrackedAuxillaryViewsForBeforeVisibleViews_afterVisibleViews_withTrackingViewAnimations___block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)_updateBackgroundColorIfNeeded
{
  void *v3;
  void *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[5];
  id v10;

  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x1000000000) == 0)
  {
    -[UICollectionView backgroundView](self, "backgroundView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      if (dyld_program_sdk_at_least())
      {
        -[UICollectionViewLayout _preferredBackgroundColor](self->_layout, "_preferredBackgroundColor");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v4 = 0;
      }
      -[UIView traitCollection](self, "traitCollection");
      v5 = objc_claimAutoreleasedReturnValue();
      if (v5)
      {
        v6 = (_QWORD *)v5;
        _UIRecordTraitUsage(v5, 0x13uLL);
        v7 = v6[16];

        if (v4)
        {
LABEL_16:
          v9[0] = MEMORY[0x1E0C809B0];
          v9[1] = 3221225472;
          v9[2] = __50__UICollectionView__updateBackgroundColorIfNeeded__block_invoke;
          v9[3] = &unk_1E16B1B50;
          v9[4] = self;
          v10 = v4;
          v8 = v4;
          +[UIView _performSystemAppearanceModifications:](UIView, "_performSystemAppearanceModifications:", v9);

          return;
        }
        if (v7 == 2)
        {
          v4 = 0;
          goto LABEL_16;
        }
      }
      else if (v4)
      {
        goto LABEL_16;
      }
      if ((dyld_program_sdk_at_least() & 1) != 0)
        +[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor");
      else
        +[UIColor blackColor](UIColor, "blackColor");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_16;
    }
  }
}

- (UIView)backgroundView
{
  return self->_backgroundView;
}

- (BOOL)_dataSourceSupportsReordering
{
  return (*(_QWORD *)&self->_collectionViewFlags & 0x4200000000000000) != 0
      || -[UICollectionView _dataSourceImplementsReorderingHandlers](self, "_dataSourceImplementsReorderingHandlers");
}

- (BOOL)_dataSourceImplementsReorderingHandlers
{
  BOOL v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;

  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 4) == 0)
    return 0;
  -[UICollectionView _diffableDataSourceImpl](self, "_diffableDataSourceImpl");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reorderingHandlers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "canReorderItemHandler");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "canReorderItemHandler");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(v3, "didApplySnapshotHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7 != 0;

  }
  else
  {
    v8 = 0;
  }

  if (v5)
    v2 = 1;
  else
    v2 = v8;

  return v2;
}

- (void)_removeVisibleViews:(id)a3 fadeForBoundsChange:(BOOL)a4
{
  _QWORD v4[5];
  BOOL v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __60__UICollectionView__removeVisibleViews_fadeForBoundsChange___block_invoke;
  v4[3] = &unk_1E16BCB40;
  v4[4] = self;
  v5 = a4;
  -[_UICollectionViewSubviewCollection enumerateAllViewsWithEnumerator:](a3, (uint64_t)v4);
}

- (void)setFrame:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _BOOL4 v22;
  UICollectionViewData *collectionViewData;
  int v24;
  uint64_t v25;
  void *v26;
  int v27;
  unint64_t v28;
  double v29;
  _UICollectionViewFeedbackLoopDebugger *debugger;
  UICollectionViewData *v31;
  CGFloat v32;
  CGFloat v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double MinX;
  CGFloat v38;
  double MinY;
  CGFloat v40;
  void *v41;
  NSObject *v42;
  NSObject *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  const __CFString *v47;
  int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  objc_super v53;
  uint8_t buf[4];
  UICollectionView *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  const __CFString *v61;
  uint64_t v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v62 = *MEMORY[0x1E0C80C00];
  -[UIView frame](self, "frame");
  v71.origin.x = v8;
  v71.origin.y = v9;
  v71.size.width = v10;
  v71.size.height = v11;
  v63.origin.x = x;
  v63.origin.y = y;
  v63.size.width = width;
  v63.size.height = height;
  if (CGRectEqualToRect(v63, v71))
    return;
  -[UIView frame](self, "frame");
  v49 = v13;
  v50 = v12;
  v51 = v14;
  v52 = v15;
  -[UIView bounds](self, "bounds");
  v16 = v64.origin.x;
  v17 = v64.origin.y;
  v19 = v18;
  v21 = v20;
  v64.size.width = width;
  v64.size.height = height;
  v72.origin.x = v64.origin.x;
  v72.origin.y = v64.origin.y;
  v72.size.width = v19;
  v72.size.height = v21;
  v22 = CGRectEqualToRect(v64, v72);
  collectionViewData = self->_collectionViewData;
  if (collectionViewData)
    v24 = (*(_BYTE *)&collectionViewData->_collectionViewDataFlags >> 3) & 1;
  else
    v24 = 0;
  if (dyld_program_sdk_at_least())
    v24 |= -[UICollectionViewLayout _preparedForBoundsChanges](self->_layout, "_preparedForBoundsChanges");
  v25 = v24 ^ 1u;
  if (((v25 | v22) & 1) != 0
    || !-[UICollectionViewLayout shouldInvalidateLayoutForBoundsChange:](self->_layout, "shouldInvalidateLayoutForBoundsChange:", v16, v17, width, height))
  {
    v26 = 0;
    v27 = 0;
  }
  else
  {
    -[UICollectionViewLayout _invalidationContextForBoundsChange:fromOldBounds:](self->_layout, "_invalidationContextForBoundsChange:fromOldBounds:", v16, v17, width, height, v16, v17, v19, v21);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 1;
  }
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x2000000000) == 0)
  {
    self->_preRotationBounds.origin.x = v16;
    self->_preRotationBounds.origin.y = v17;
    self->_preRotationBounds.size.width = v19;
    self->_preRotationBounds.size.height = v21;
    *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x2000000000uLL;
  }
  v28 = setFrame____s_category;
  if (!setFrame____s_category)
  {
    v28 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v28, (unint64_t *)&setFrame____s_category);
  }
  v29 = v51;
  if ((*(_BYTE *)v28 & 1) != 0)
  {
    v42 = *(NSObject **)(v28 + 8);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v43 = v42;
      -[UIView frame](self, "frame");
      NSStringFromCGRect(v69);
      v48 = v24;
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v70.origin.x = x;
      v70.origin.y = y;
      v70.size.width = width;
      v70.size.height = height;
      NSStringFromCGRect(v70);
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = (void *)v45;
      v47 = CFSTR("NO");
      *(_DWORD *)buf = 134218754;
      v55 = self;
      if (v27)
        v47 = CFSTR("YES");
      v56 = 2112;
      v57 = v44;
      v58 = 2112;
      v59 = v45;
      v60 = 2112;
      v61 = v47;
      _os_log_impl(&dword_185066000, v43, OS_LOG_TYPE_ERROR, "setFrame: cv == %p; oldFrame == %@; newFrame == %@ invalidateLayout == %@",
        buf,
        0x2Au);

      v24 = v48;
    }
  }
  debugger = self->_debugger;
  if (debugger)
    -[_UICollectionViewFeedbackLoopDebugger recordCollectionViewRectPropertyChange:fromRect:toRect:](debugger, "recordCollectionViewRectPropertyChange:fromRect:toRect:", CFSTR("frame"), v50, v49, v51, v52, x, y, width, height);
  v53.receiver = self;
  v53.super_class = (Class)UICollectionView;
  -[UIScrollView setFrame:](&v53, sel_setFrame_, x, y, width, height);
  if (!v22)
  {
    if (v27)
    {
      v31 = self->_collectionViewData;
      if (v31)
      {
        v32 = v31->_contentSize.width;
        v33 = v31->_contentSize.height;
      }
      else
      {
        v32 = 0.0;
        v33 = 0.0;
      }
      -[UICollectionViewLayout _invalidateLayoutUsingContext:](self->_layout, "_invalidateLayoutUsingContext:", v26);
      if ((dyld_program_sdk_at_least() & 1) == 0)
        v34 = -[UICollectionViewData collectionViewContentRect]((uint64_t)self->_collectionViewData);
      if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x8000000) == 0
        && !-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes", v34))
      {
        v65.origin.x = x;
        v65.origin.y = y;
        v65.size.width = width;
        v65.size.height = height;
        if (!CGRectIsEmpty(v65))
        {
          v66.origin.y = v49;
          v66.origin.x = v50;
          v66.size.width = v51;
          v66.size.height = v52;
          if (!CGRectIsEmpty(v66))
          {
            -[UICollectionViewData collectionViewContentRect]((uint64_t)self->_collectionViewData);
            -[UICollectionView _contentOffsetForNewFrame:oldFrame:newContentSize:andOldContentSize:](self, "_contentOffsetForNewFrame:oldFrame:newContentSize:andOldContentSize:", x, y, width, height, v50, v49, v51, v52, v35, v36, *(_QWORD *)&v32, *(_QWORD *)&v33);
            -[UICollectionView setContentOffset:](self, "setContentOffset:");
          }
        }
      }
      -[UIView bounds](self, "bounds", v34);
      MinX = CGRectGetMinX(v67);
      v38 = MinX - CGRectGetMinX(self->_preRotationBounds);
      -[UIView bounds](self, "bounds");
      MinY = CGRectGetMinY(v68);
      v40 = MinY - CGRectGetMinY(self->_preRotationBounds);
      self->_rotationBoundsOffset.x = v38;
      self->_rotationBoundsOffset.y = v40;
      if ((v24 & 1) != 0)
      {
        objc_msgSend(v26, "_invalidatedSupplementaryViews");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, v41 == 0);

        v29 = v51;
LABEL_31:
        if (v19 != width || v21 != height)
          -[UICollectionView _updateDefaultLayoutMargins](self, "_updateDefaultLayoutMargins");
        goto LABEL_35;
      }
      -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, v25);
      v29 = v51;
    }
    else
    {
      -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, v25);
      if (v24)
        goto LABEL_31;
    }
  }
LABEL_35:
  if ((v29 != width || v52 != height) && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x100000000000) != 0)
    -[UICollectionView _scrollFirstResponderCellToVisible:](self, "_scrollFirstResponderCellToVisible:", +[UIView _isInAnimationBlock](UIView, "_isInAnimationBlock") ^ 1);

}

- (void)layoutSubviews
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  UICollectionViewData *collectionViewData;
  int v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  _BOOL8 v21;
  void *v22;
  uint64_t v23;
  objc_super v24;

  v24.receiver = self;
  v24.super_class = (Class)UICollectionView;
  -[UIScrollView layoutSubviews](&v24, sel_layoutSubviews);
  v3 = *((_QWORD *)&self->_collectionViewFlags + 1);
  v4 = v3 & 0x200000004000000;
  v5 = v3 & 0x80020000000;
  if (v4 != 0x4000000 && v5 == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);

    if (WeakRetained)
    {
      *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x80000000000uLL;
      collectionViewData = self->_collectionViewData;
      if (collectionViewData)
        v9 = (*(_BYTE *)&collectionViewData->_collectionViewDataFlags >> 3) & 1;
      else
        LOBYTE(v9) = 0;
      -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
      -[UICollectionView _visibleBounds](self, "_visibleBounds");
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v17 = v16;
      -[UICollectionViewData validateLayoutInRect:]((uint64_t)self->_collectionViewData, v10, v12, v14, v16);
      if ((v9 & 1) == 0)
        -[UICollectionView _updateDefaultLayoutMargins](self, "_updateDefaultLayoutMargins");
      v18 = -[UICollectionView _recomputePreferredAttributesForInvalidatedElementsIfNeeded](self, "_recomputePreferredAttributesForInvalidatedElementsIfNeeded");
      if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x100) != 0 && !self->_reloadingSuspendedCount)
      {
        v19 = (void *)MEMORY[0x186DC9484](v18);
        v20 = -[UICollectionView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
        if (-[UICollectionView _prefetchingAllowed](self, "_prefetchingAllowed"))
        {
          -[UICollectionView _updatePrefetchVelocityIntegratorForVisibleBounds:](self, "_updatePrefetchVelocityIntegratorForVisibleBounds:", v11, v13, v15, v17);
          v21 = !v20 && (unint64_t)((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x1000000000000000) == 0);
          if (!-[UICollectionView _updatePrefetchedCells:](self, "_updatePrefetchedCells:", v21)
            && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x20000000000000) != 0)
          {
            -[UICollectionView _performReloadPrefetchIfNeeded](self, "_performReloadPrefetchIfNeeded");
          }
        }
        objc_autoreleasePoolPop(v19);
      }
      -[UICollectionView _updateBackgroundView](self, "_updateBackgroundView");
      -[UICollectionView _updateIndex](self, "_updateIndex");
      -[UIView _focusSystem](self, "_focusSystem");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (v22)
      {
        v23 = *((_QWORD *)&self->_collectionViewFlags + 1);

        if ((v23 & 0x80000000) == 0)
          -[UICollectionView _highlightFirstVisibleItemIfAppropriate](self, "_highlightFirstVisibleItemIfAppropriate");
      }
      *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFDFF7FF7FFFFFFFLL | 0x80000000;
      -[UICollectionView _updateContentFocusContainerGuides](self, "_updateContentFocusContainerGuides");
    }
  }
}

- (void)_updateIndex
{
  uint64_t v2;
  int v4;
  void *v5;
  void *v6;
  uint64_t collectionViewFlags;
  void *v8;
  UIIndexBarAccessoryView *v9;
  UIIndexBarAccessoryView *indexBar;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;

  v2 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v2 & 0x40000000000000) == 0)
  {
    v4 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v2 | 0x40000000000000;
    *((_WORD *)&self->_collectionViewFlags + 8) = v4;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v4);
    -[UICollectionView _indexBarEntries](self, "_indexBarEntries");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "count"))
    {
      -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      collectionViewFlags = (uint64_t)self->_collectionViewFlags;
      -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v8;
      if ((collectionViewFlags & 0x400000000000000) == 0)
      {
        if (v8)
          objc_msgSend(v8, "setShowIndexBar:", 0);
        -[UICollectionView _removeStandaloneIndexBarIfNecessary](self, "_removeStandaloneIndexBarIfNecessary");
        goto LABEL_16;
      }
    }
    if (v6)
    {
      objc_msgSend(v6, "setShowIndexBar:", 1);
      objc_msgSend(v6, "indexBarView");
      v9 = (UIIndexBarAccessoryView *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView _removeStandaloneIndexBarIfNecessary](self, "_removeStandaloneIndexBarIfNecessary");
    }
    else
    {
      indexBar = self->_indexBar;
      if (indexBar)
      {
        v9 = indexBar;
      }
      else
      {
        v16 = 0;
        v17 = 0;
        -[UIView traitCollection](self, "traitCollection");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        +[UIIndexBarAccessoryView makeIndexBarView:scrollAccessoryContainerView:forTraits:](UIIndexBarAccessoryView, "makeIndexBarView:scrollAccessoryContainerView:forTraits:", &v17, &v16, v11);
        v12 = v17;
        v9 = (UIIndexBarAccessoryView *)v17;
        v13 = v16;

        -[UIScrollView setAccessoryView:atEdge:](self, "setAccessoryView:atEdge:", v13, 1);
        objc_storeStrong((id *)&self->_indexBar, v12);

      }
    }
    -[UIIndexBarView setDelegate:](v9, "setDelegate:", self);
    -[UIIndexBarAccessoryView setEntries:](v9, "setEntries:", v5);
    -[UIIndexBarView setDrawingInsets:](v9, "setDrawingInsets:", 0.0, 0.0, 0.0, 0.0);
    -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = (void *)v14;
    if (v14)
      objc_msgSend(*(id *)(v14 + 24), "reloadData");

LABEL_16:
  }
}

- (void)_updateContentFocusContainerGuides
{
  void *v3;
  UIFocusContainerGuide *v4;
  UIFocusContainerGuide *contentFocusContainerGuide;
  void *v6;
  uint64_t v7;
  UIFocusContainerGuide *endOfContentFocusContainerGuide;
  BOOL v10;
  UIFocusContainerGuide *v11;
  UIFocusContainerGuide *v12;
  UIFocusContainerGuide *v13;
  UIFocusContainerGuide *v14;
  UICollectionViewData *collectionViewData;
  UICollectionViewData *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  double MinY;
  double Width;
  double v23;
  double Height;
  double MinX;
  UIFocusContainerGuide *v26;
  double v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  -[UIView _focusSystem](self, "_focusSystem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    if (!self->_contentFocusContainerGuide)
    {
      v4 = objc_alloc_init(UIFocusContainerGuide);
      contentFocusContainerGuide = self->_contentFocusContainerGuide;
      self->_contentFocusContainerGuide = v4;

      -[UIView addLayoutGuide:](self, "addLayoutGuide:", self->_contentFocusContainerGuide);
      -[UILayoutGuide _setLockedToOwningView:](self->_contentFocusContainerGuide, "_setLockedToOwningView:", 1);
      -[UILayoutGuide setIdentifier:](self->_contentFocusContainerGuide, "setIdentifier:", CFSTR("UICollectionViewContentFocusContainerGuide"));
    }
    -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "_layoutAxis");

    endOfContentFocusContainerGuide = self->_endOfContentFocusContainerGuide;
    if (endOfContentFocusContainerGuide || v7 == 0)
    {
      if (endOfContentFocusContainerGuide)
        v10 = v7 == 0;
      else
        v10 = 0;
      if (v10)
      {
        -[UILayoutGuide _setLockedToOwningView:](endOfContentFocusContainerGuide, "_setLockedToOwningView:", 0);
        -[UIView removeLayoutGuide:](self, "removeLayoutGuide:", self->_endOfContentFocusContainerGuide);
        v11 = self->_endOfContentFocusContainerGuide;
        self->_endOfContentFocusContainerGuide = 0;

      }
    }
    else
    {
      v12 = objc_alloc_init(UIFocusContainerGuide);
      v13 = self->_endOfContentFocusContainerGuide;
      self->_endOfContentFocusContainerGuide = v12;

      -[UIView addLayoutGuide:](self, "addLayoutGuide:", self->_endOfContentFocusContainerGuide);
      -[UILayoutGuide _setLockedToOwningView:](self->_endOfContentFocusContainerGuide, "_setLockedToOwningView:", 1);
      -[UILayoutGuide setIdentifier:](self->_endOfContentFocusContainerGuide, "setIdentifier:", CFSTR("UICollectionViewEndOfContentFocusContainerGuide"));
    }
    v14 = self->_contentFocusContainerGuide;
    -[UIView bounds](self, "bounds");
    -[UILayoutGuide _setManualLayoutFrame:](v14, "_setManualLayoutFrame:");
    if (self->_endOfContentFocusContainerGuide)
    {
      if (v7)
      {
        if (-[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData) >= 1)
        {
          collectionViewData = self->_collectionViewData;
          if (collectionViewData)
          {
            if ((*(_BYTE *)&collectionViewData->_collectionViewDataFlags & 2) == 0)
              -[UICollectionViewData _updateItemCounts]((uint64_t)self->_collectionViewData);
            if (collectionViewData->_totalItemCount >= 1)
            {
              v16 = self->_collectionViewData;
              if (v16)
              {
                if ((*(_BYTE *)&v16->_collectionViewDataFlags & 2) == 0)
                  -[UICollectionViewData _updateItemCounts]((uint64_t)self->_collectionViewData);
                v17 = v16->_totalItemCount - 1;
              }
              else
              {
                v17 = -1;
              }
              -[UICollectionViewData indexPathForItemAtGlobalIndex:](v16, v17);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionView layoutAttributesForItemAtIndexPath:](self, "layoutAttributesForItemAtIndexPath:", v18);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              if (v19)
              {
                v20 = v19;
                if (v7 == 2)
                {
                  objc_msgSend(v19, "frame");
                  MinY = CGRectGetMinY(v32);
                  -[UIView bounds](self, "bounds");
                  Width = CGRectGetWidth(v33);
                  objc_msgSend(v20, "size");
                  Height = v23;
                  MinX = 0.0;
                }
                else if (v7 == 1)
                {
                  objc_msgSend(v19, "frame");
                  MinX = CGRectGetMinX(v34);
                  objc_msgSend(v20, "size");
                  Width = v27;
                  -[UIView bounds](self, "bounds");
                  Height = CGRectGetHeight(v35);
                  MinY = 0.0;
                }
                else
                {
                  Width = *(double *)(MEMORY[0x1E0C9D648] + 16);
                  Height = *(double *)(MEMORY[0x1E0C9D648] + 24);
                  MinX = *MEMORY[0x1E0C9D648];
                  MinY = *(double *)(MEMORY[0x1E0C9D648] + 8);
                }
                -[UILayoutGuide _setManualLayoutFrame:](self->_endOfContentFocusContainerGuide, "_setManualLayoutFrame:", MinX, MinY, Width, Height);

                -[UICollectionView _focusedItemState](self, "_focusedItemState");
                v28 = objc_claimAutoreleasedReturnValue();
                v31 = (id)v28;
                if (v28)
                  v29 = *(void **)(v28 + 8);
                else
                  v29 = 0;
                v30 = v29;
                -[UIFocusGuide setEnabled:](self->_endOfContentFocusContainerGuide, "setEnabled:", v30 != 0);

                return;
              }

            }
          }
        }
        -[UIFocusGuide setEnabled:](self->_endOfContentFocusContainerGuide, "setEnabled:", 0);
        v26 = self->_endOfContentFocusContainerGuide;
        -[UIView bounds](self, "bounds");
        -[UILayoutGuide _setManualLayoutFrame:](v26, "_setManualLayoutFrame:");
      }
    }
  }
}

- (void)_updateBackgroundView
{
  UIView *backgroundView;
  UICollectionViewLayout *v4;
  UIView *v5;
  UIView *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  -[UIView bounds](self, "bounds");
  -[UIView setFrame:](self->_backgroundView, "setFrame:");
  backgroundView = self->_backgroundView;
  v4 = self->_layout;
  v5 = backgroundView;
  v6 = v5;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = -[UIView effectiveUserInterfaceLayoutDirection](v5, "effectiveUserInterfaceLayoutDirection");
    if (v8 != -[UICollectionViewLayout developmentLayoutDirection](v4, "developmentLayoutDirection"))
    {
      v9 = -[UICollectionViewLayout _wantsRightToLeftHorizontalMirroringIfNeeded](v4, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      goto LABEL_9;
    }
    if (-[UIView _flipsHorizontalAxis](v6, "_flipsHorizontalAxis"))
    {
      v9 = 0;
LABEL_9:
      -[UIView _setFlipsHorizontalAxis:](v6, "_setFlipsHorizontalAxis:", v9);
    }
  }

  -[UIScrollView _moveContentSubview:toBack:](self, "_moveContentSubview:toBack:", self->_backgroundView, 1);
}

- (void)_recomputePreferredAttributesForInvalidatedElementsIfNeeded
{
  UICollectionViewLayoutInvalidationContext *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  UICollectionViewData *v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  UICollectionViewData *v17;
  UICollectionViewData *collectionViewData;
  uint64_t v19;
  UICollectionViewData *v20;
  unsigned int v21;
  int v22;
  _QWORD v23[5];
  _QWORD v24[6];
  _QWORD v25[5];
  UICollectionViewData *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD v29[5];
  id v30;
  _QWORD v31[5];
  id v32;
  id v33;

  v3 = self->_intrinsicContentSizeInvalidationContext;
  if (v3)
  {
    if ((*((_WORD *)&self->_collectionViewFlags + 8) & 0x10) != 0
      && (-[UIView window](self, "window"), v4 = (void *)objc_claimAutoreleasedReturnValue(), v4, v4))
    {
      v5 = *((unsigned __int16 *)&self->_collectionViewFlags + 8);
      v6 = v5 | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
      if ((v5 & 0x20) == 0)
      {
        v7 = *((_QWORD *)&self->_collectionViewFlags + 1);
        *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
        *((_QWORD *)&self->_collectionViewFlags + 1) = v7;
        *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v6);
        *((_WORD *)&self->_collectionViewFlags + 8) = v6 | 0x20;
        -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
        goto LABEL_21;
      }
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
    -[UICollectionViewLayoutInvalidationContext invalidatedItemIndexPaths](v3, "invalidatedItemIndexPaths");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionViewLayoutInvalidationContext invalidatedSupplementaryIndexPaths](v3, "invalidatedSupplementaryIndexPaths");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "count") || objc_msgSend(v10, "count"))
    {
      v11 = MEMORY[0x1E0C809B0];
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke;
      v31[3] = &unk_1E16B47A8;
      v31[4] = self;
      v32 = v9;
      v33 = v10;
      if (v8)
      {
        v12 = self->_collectionViewData;
        -[UICollectionView _visibleBounds](self, "_visibleBounds");
        -[UICollectionViewData validateLayoutInRect:]((uint64_t)v12, v13, v14, v15, v16);
        if (v12)
          *(_BYTE *)&v12->_collectionViewDataFlags |= 0x10u;
        v17 = (UICollectionViewData *)-[UICollectionViewData initWithCollectionView:layout:]([UICollectionViewData alloc], self, self->_layout);
        collectionViewData = self->_collectionViewData;
        self->_collectionViewData = v17;

        v29[0] = 0;
        v29[1] = v29;
        v29[2] = 0x3032000000;
        v29[3] = __Block_byref_object_copy__40;
        v29[4] = __Block_byref_object_dispose__40;
        v30 = 0;
        v25[0] = v11;
        if (dyld_program_sdk_at_least())
          v19 = 6;
        else
          v19 = 4;
        v25[1] = 3221225472;
        v25[2] = __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke_3;
        v25[3] = &unk_1E16BD860;
        v27 = v29;
        v28 = v31;
        v25[4] = self;
        v20 = v12;
        v26 = v20;
        v24[0] = v11;
        v24[1] = 3221225472;
        v24[2] = __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke_4;
        v24[3] = &unk_1E16BD888;
        v24[4] = self;
        v24[5] = v29;
        +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", v19, v25, v24, 0.3, 0.0);

        _Block_object_dispose(v29, 8);
      }
      else
      {
        __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke((uint64_t)v31);
      }
      -[UICollectionView _clearNeedsRecomputePreferredAttributesForInvalidatedElements](self, "_clearNeedsRecomputePreferredAttributesForInvalidatedElements");
      v21 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                      + 18) << 16);
      v22 = *((_WORD *)&self->_collectionViewFlags + 8) & 0xFF3F | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
      *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v22);
      *((_WORD *)&self->_collectionViewFlags + 8) = v22 | ((((v21 >> 6) + 1) & 3) << 6);
      if ((v21 & 0xC0) == 0)
      {
        v23[0] = v11;
        v23[1] = 3221225472;
        v23[2] = __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke_5;
        v23[3] = &unk_1E16B1B28;
        v23[4] = self;
        objc_msgSend((id)UIApp, "_performBlockAfterCATransactionCommits:", v23);
      }

    }
    else
    {
      -[UICollectionView _clearNeedsRecomputePreferredAttributesForInvalidatedElements](self, "_clearNeedsRecomputePreferredAttributesForInvalidatedElements");
    }

  }
LABEL_21:

}

- (void)_setUsesStaticScrollBar:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  _BOOL4 v6;
  objc_super v7;

  v3 = a3;
  -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5 == 0;

  v7.receiver = self;
  v7.super_class = (Class)UICollectionView;
  -[UIScrollView _setUsesStaticScrollBar:](&v7, sel__setUsesStaticScrollBar_, v3);
  if (v6 == v3)
    -[UICollectionView _reloadSectionIndexTitles](self, "_reloadSectionIndexTitles");
}

- (id)_indexBarEntries
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  objc_super v9;
  _QWORD v10[5];
  id v11;
  objc_super v12;

  if ((*(_QWORD *)&self->_collectionViewFlags & 0x8400000000000000) != 0)
  {
    -[UICollectionView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "count"))
    {
      v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __36__UICollectionView__indexBarEntries__block_invoke;
      v10[3] = &unk_1E16BD3E8;
      v10[4] = self;
      v5 = v4;
      v11 = v5;
      objc_msgSend(v3, "enumerateObjectsUsingBlock:", v10);
      v6 = v11;
      v7 = v5;

    }
    else
    {
      v12.receiver = self;
      v12.super_class = (Class)UICollectionView;
      -[UIScrollView _indexBarEntries](&v12, sel__indexBarEntries);
      v7 = (id)objc_claimAutoreleasedReturnValue();
    }

    return v7;
  }
  else
  {
    v9.receiver = self;
    v9.super_class = (Class)UICollectionView;
    -[UIScrollView _indexBarEntries](&v9, sel__indexBarEntries);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

- (void)_removeStandaloneIndexBarIfNecessary
{
  UIIndexBarAccessoryView *v3;
  void *v4;
  _BOOL4 v5;
  UIIndexBarAccessoryView *indexBar;
  UIIndexBarAccessoryView *v7;

  v3 = self->_indexBar;
  if (v3)
  {
    v7 = v3;
    -[UIScrollView accessoryViewAtEdge:](self, "accessoryViewAtEdge:", 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[UIView isDescendantOfView:](v7, "isDescendantOfView:", v4);

    if (v5)
      -[UIScrollView setAccessoryView:atEdge:](self, "setAccessoryView:atEdge:", 0, 1);
    indexBar = self->_indexBar;
    self->_indexBar = 0;

    v3 = v7;
  }

}

- (BOOL)_updatePrefetchedCells:(BOOL)a3
{
  _BOOL4 v3;
  _BOOL4 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _UICollectionViewPrefetchingContext *mainPrefetchingContext;

  v3 = a3;
  if (!-[_UIVelocityIntegrator hasVelocity](self->_prefetchVelocityIntegrator, "hasVelocity"))
  {
    v5 = -[UICollectionViewLayout _hasOrthogonalScrollingSections](self->_layout, "_hasOrthogonalScrollingSections");
    if (!v5)
      return v5;
  }
  -[_UIVelocityIntegrator velocity](self->_prefetchVelocityIntegrator, "velocity");
  v8 = v6;
  v9 = v7;
  if (self->_activeOrthogonalPrefetchingContext)
  {
    if (v3)
      goto LABEL_5;
LABEL_9:
    LOBYTE(v5) = 0;
    return v5;
  }
  -[UICollectionView _pruneCachedPrefetchViewsForVelocity:](self, "_pruneCachedPrefetchViewsForVelocity:", v6, v7);
  if (!v3)
    goto LABEL_9;
LABEL_5:
  mainPrefetchingContext = self->_mainPrefetchingContext;
  if (mainPrefetchingContext && -[NSMutableArray count](mainPrefetchingContext->_items, "count"))
    -[UICollectionView _prefetchItemsForPrefetchingContext:](self, "_prefetchItemsForPrefetchingContext:", self->_mainPrefetchingContext);
  else
    -[UICollectionView _computeMainPrefetchCandidatesForVelocity:](self, "_computeMainPrefetchCandidatesForVelocity:", v8, v9);
  LOBYTE(v5) = 1;
  return v5;
}

- (void)_updatePrefetchVelocityIntegratorForVisibleBounds:(CGRect)a3
{
  double y;
  double x;
  _UIVelocityIntegrator *prefetchVelocityIntegrator;
  _UIVelocityIntegrator *v7;
  _UIVelocityIntegrator *v8;
  _UIVelocityIntegrator *v9;
  const char *v10;
  _UIVelocityIntegrator *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  id v16;
  id location;

  y = a3.origin.y;
  x = a3.origin.x;
  prefetchVelocityIntegrator = self->_prefetchVelocityIntegrator;
  if (!prefetchVelocityIntegrator)
  {
    v7 = objc_alloc_init(_UIVelocityIntegrator);
    v8 = self->_prefetchVelocityIntegrator;
    self->_prefetchVelocityIntegrator = v7;

    -[_UIVelocityIntegrator setHysteresisTimeInterval:](self->_prefetchVelocityIntegrator, "setHysteresisTimeInterval:", 0.3);
    v9 = self->_prefetchVelocityIntegrator;
    if (v9)
      v9->_resetHysteresisOnSampleThetaDiff = 1.04719755;
    objc_initWeak(&location, self);
    v12 = MEMORY[0x1E0C809B0];
    v13 = 3221225472;
    v14 = __70__UICollectionView__updatePrefetchVelocityIntegratorForVisibleBounds___block_invoke;
    v15 = &unk_1E16B3F40;
    objc_copyWeak(&v16, &location);
    v11 = self->_prefetchVelocityIntegrator;
    if (v11)
      objc_setProperty_nonatomic_copy(v11, v10, &v12, 88);
    objc_destroyWeak(&v16);
    objc_destroyWeak(&location);
    prefetchVelocityIntegrator = self->_prefetchVelocityIntegrator;
  }
  -[_UIVelocityIntegrator addSample:](prefetchVelocityIntegrator, "addSample:", x, y, a3.size.width, a3.size.height, v12, v13, v14, v15);
}

- (void)_updateDefaultLayoutMargins
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_preferredLayoutMargins");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  if (v5 == 1.79769313e308)
    v12 = 8.0;
  else
    v12 = v5;
  if (v7 == 1.79769313e308)
    v13 = 8.0;
  else
    v13 = v7;
  if (v9 == 1.79769313e308)
    v14 = 8.0;
  else
    v14 = v9;
  if (v11 == 1.79769313e308)
    v15 = 8.0;
  else
    v15 = v11;
  -[UICollectionView _setDefaultLayoutMargins:fromViewController:](self, "_setDefaultLayoutMargins:fromViewController:", 0, v12, v13, v14, v15);
}

- (void)_setDefaultLayoutMargins:(UIEdgeInsets)a3 fromViewController:(BOOL)a4
{
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  unint64_t v11;
  int v12;

  v4 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v4 & 0x8000000000000) == 0 || a4)
  {
    v5 = a3.left == self->_defaultLayoutMargins.left && a3.top == self->_defaultLayoutMargins.top;
    v6 = v5 && a3.right == self->_defaultLayoutMargins.right;
    if (!v6 || a3.bottom != self->_defaultLayoutMargins.bottom)
    {
      v8 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                     + 18) << 16);
      v9 = 0x8000000000000;
      if (!a4)
        v9 = 0;
      p_collectionViewFlags = &self->_collectionViewFlags;
      *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
      *((_QWORD *)&self->_collectionViewFlags + 1) = v4 & 0xFFF7FFFFFFFFFFFFLL | v9;
      *((_WORD *)&self->_collectionViewFlags + 8) = v8;
      *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v8);
      self->_defaultLayoutMargins = a3;
      v11 = *((_QWORD *)&self->_collectionViewFlags + 1);
      if ((v11 & 0x2000000000000) == 0)
      {
        v12 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                        + 18) << 16);
        *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags;
        *((_QWORD *)&self->_collectionViewFlags + 1) = v11 | 0x4000000000000;
        *((_WORD *)&self->_collectionViewFlags + 8) = v12;
        *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v12);
        -[UICollectionView setLayoutMargins:](self, "setLayoutMargins:");
        *((_QWORD *)p_collectionViewFlags + 1) = *((_QWORD *)p_collectionViewFlags + 1) & 0xFFFBFFFFFFFFFFFFLL | (((v11 >> 50) & 1) << 50);
      }
    }
  }
}

- (void)setLayoutMargins:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;
  objc_super v15;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  -[UIView layoutMargins](self, "layoutMargins");
  -[UIView _rawLayoutMargins](self, "_rawLayoutMargins");
  if (left != v11 || top != v8 || right != v10 || bottom != v9)
  {
    *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFDFFFFFFFFFFFFLL | ((unint64_t)((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x6000000000000) != 0x4000000000000) << 49);
    v15.receiver = self;
    v15.super_class = (Class)UICollectionView;
    -[UIView setLayoutMargins:](&v15, sel_setLayoutMargins_, top, left, bottom, right);
  }
}

- (void)_pruneCachedPrefetchViewsForVelocity:(CGVector)a3
{
  double dy;
  double dx;
  unint64_t v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSMutableDictionary *prefetchCacheItems;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  NSObject *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[11];
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;
  uint8_t v35[128];
  uint8_t v36[4];
  UICollectionView *v37;
  __int16 v38;
  uint64_t v39;
  __int128 buf;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  id v44;
  uint64_t v45;

  dy = a3.dy;
  dx = a3.dx;
  v45 = *MEMORY[0x1E0C80C00];
  if (a3.dx == 0.0 && a3.dy == 0.0)
  {
    v6 = qword_1EDDC6530;
    if (!qword_1EDDC6530)
    {
      v6 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&qword_1EDDC6530);
    }
    if ((*(_BYTE *)v6 & 1) != 0)
    {
      v7 = *(NSObject **)(v6 + 8);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = self;
        _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "[UICV %p] Skipping pruning of prefetched cells due to zero velocity", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  else if (-[NSMutableDictionary count](self->_prefetchCacheItems, "count"))
  {
    -[UICollectionView _visibleBounds](self, "_visibleBounds");
    -[UICollectionView _computePrefetchCacheValidationBoundsForPrefetchVelocity:visibleBounds:](self, "_computePrefetchCacheValidationBoundsForPrefetchVelocity:visibleBounds:", dx, dy, v8, v9, v10, v11);
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v41 = 0x3032000000;
    v42 = __Block_byref_object_copy__40;
    v43 = __Block_byref_object_dispose__40;
    v44 = 0;
    v29 = 0;
    v30 = &v29;
    v31 = 0x3032000000;
    v32 = __Block_byref_object_copy__40;
    v33 = __Block_byref_object_dispose__40;
    prefetchCacheItems = self->_prefetchCacheItems;
    v34 = 0;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __57__UICollectionView__pruneCachedPrefetchViewsForVelocity___block_invoke;
    v28[3] = &unk_1E16BCE58;
    v28[7] = v13;
    v28[8] = v14;
    v28[9] = v15;
    v28[10] = v16;
    v28[4] = self;
    v28[5] = &buf;
    v28[6] = &v29;
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](prefetchCacheItems, "enumerateKeysAndObjectsUsingBlock:", v28);
    v17 = qword_1EDDC6538;
    if (!qword_1EDDC6538)
    {
      v17 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v17, (unint64_t *)&qword_1EDDC6538);
    }
    if ((*(_BYTE *)v17 & 1) != 0)
    {
      v22 = *(NSObject **)(v17 + 8);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
        *(_DWORD *)v36 = 134218242;
        v37 = self;
        v38 = 2112;
        v39 = v23;
        _os_log_impl(&dword_185066000, v22, OS_LOG_TYPE_ERROR, "[UICV %p] Pruning prefetched cells: %@", v36, 0x16u);
      }
    }
    if (objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "count"))
      -[NSMutableDictionary removeObjectsForKeys:](self->_prefetchCacheItems, "removeObjectsForKeys:", *(_QWORD *)(*((_QWORD *)&buf + 1) + 40));
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v18 = (id)v30[5];
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v24, v35, 16);
    if (v19)
    {
      v20 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v25 != v20)
            objc_enumerationMutation(v18);
          -[UICollectionView _reusePrefetchedCell:](self, "_reusePrefetchedCell:", *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i), (_QWORD)v24);
        }
        v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v24, v35, 16);
      }
      while (v19);
    }

    _Block_object_dispose(&v29, 8);
    _Block_object_dispose(&buf, 8);

  }
}

- (id)_dataSourceSectionIndexTitles
{
  NSArray *indexBarSectionIndexTitles;
  uint64_t collectionViewFlags;
  void *v5;
  NSArray *v6;
  NSArray *v7;

  indexBarSectionIndexTitles = self->_indexBarSectionIndexTitles;
  if (!indexBarSectionIndexTitles)
  {
    collectionViewFlags = (uint64_t)self->_collectionViewFlags;
    if ((collectionViewFlags & 0x800000000000000) != 0)
    {
      -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "_collectionView:sectionIndexTitlesTrimmedToCount:", self, 0x7FFFFFFFFFFFFFFFLL);
      v6 = (NSArray *)objc_claimAutoreleasedReturnValue();
    }
    else if ((collectionViewFlags & 0x400000000000000) != 0)
    {
      -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "_sectionIndexTitlesForCollectionView:", self);
      v6 = (NSArray *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if ((collectionViewFlags & 0x8000000000000000) == 0)
      {
        v5 = 0;
        self->_indexBarSectionIndexTitles = (NSArray *)MEMORY[0x1E0C9AA60];
LABEL_10:

        indexBarSectionIndexTitles = self->_indexBarSectionIndexTitles;
        return indexBarSectionIndexTitles;
      }
      -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "indexTitlesForCollectionView:", self);
      v6 = (NSArray *)objc_claimAutoreleasedReturnValue();
    }
    v7 = self->_indexBarSectionIndexTitles;
    self->_indexBarSectionIndexTitles = v6;

    goto LABEL_10;
  }
  return indexBarSectionIndexTitles;
}

- (CGPoint)_contentOffsetForNewFrame:(CGRect)a3 oldFrame:(CGRect)a4 newContentSize:(CGSize)a5 andOldContentSize:(CGSize)a6
{
  CGFloat width;
  double height;
  double v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  double v23;
  double v24;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  CGFloat rect;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  CGPoint result;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  rect = a4.size.height;
  width = a4.size.width;
  height = a3.size.height;
  v8 = a3.size.width;
  -[UIScrollView _effectiveContentInset](self, "_effectiveContentInset", *(_QWORD *)&a5.width, *(_QWORD *)&a5.height, *(_QWORD *)&a6.width, *(_QWORD *)&a6.height, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height, a4.origin.x, a4.origin.y);
  v33 = v10;
  v12 = v11;
  v29 = v14;
  v30 = v13;
  -[UIView bounds](self, "bounds");
  v17 = v15;
  v34 = v16;
  v32 = 0.0;
  v18 = 0.0;
  if (v37 > 0.0)
  {
    v19 = width;
    v20 = rect;
    v18 = CGRectGetMidX(*(CGRect *)&v15) / v37;
  }
  if (v38 > 0.0)
  {
    v40.origin.x = v17;
    v40.origin.y = v34;
    v40.size.width = width;
    v40.size.height = rect;
    v32 = CGRectGetMidY(v40) / v38;
  }
  v21 = -v12;
  if (v8 < v35 && v17 > v21)
  {
    v41.origin.x = 0.0;
    v41.origin.y = 0.0;
    v41.size.width = v8;
    v41.size.height = height;
    v23 = round(v35 * v18 + CGRectGetWidth(v41) * -0.5);
    v42.origin.y = 0.0;
    v42.origin.x = v23;
    v42.size.width = v8;
    v42.size.height = height;
    if (CGRectGetMinX(v42) >= v21)
      v21 = v23;
    if (v8 + v21 > v35 + v29)
      v21 = v35 + v29 - v8;
  }
  v24 = -v33;
  if (height < v36 && v34 > v24)
  {
    v43.origin.y = 0.0;
    v43.origin.x = v21;
    v43.size.width = v8;
    v43.size.height = height;
    v26 = round(v36 * v32 + CGRectGetHeight(v43) * -0.5);
    v44.origin.x = v21;
    v44.origin.y = v26;
    v44.size.width = v8;
    v44.size.height = height;
    if (CGRectGetMinY(v44) >= v24)
      v24 = v26;
    if (height + v24 > v36 + v30)
      v24 = v36 + v30 - height;
  }
  v27 = v21;
  v28 = v24;
  result.y = v28;
  result.x = v27;
  return result;
}

- (void)setDragDelegate:(id)dragDelegate
{
  id WeakRetained;
  id obj;

  obj = dragDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dragDelegate, obj);
    _UIValidateAccountBasedDelegateRespondsToSelector(obj, (uint64_t)sel__collectionView_dataOwnerForDragSession_atIndexPath_);
    -[_UICollectionViewDragAndDropController didUpdateDragDelegate]((id *)&self->_dragAndDropController->super.super.isa);
  }

}

- (void)setDataSource:(id)dataSource
{
  id v4;
  char v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  id v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned int v16;
  _UIWeakHelper *v17;
  _UIWeakHelper *v18;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  int v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  $91A2B40F64213FFC45A7830E5F2A00D4 *v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t collectionViewFlags;
  unint64_t v54;
  id v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t);
  void *v68;
  id v69;
  id location;
  _QWORD block[4];
  id v72;
  UICollectionView *v73;

  v4 = dataSource;
  if (!v4)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  v5 = dyld_program_sdk_at_least();
  v6 = v4;
  if ((v5 & 1) == 0)
  {
    v7 = objc_msgSend(v4, sel_allowsWeakReference);
    v6 = v4;
    if ((v7 & 1) == 0)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __34__UICollectionView_setDataSource___block_invoke;
      block[3] = &unk_1E16B1B50;
      v8 = v4;
      v72 = v8;
      v73 = self;
      if (setDataSource__once != -1)
      {
        dispatch_once(&setDataSource__once, block);
        v8 = v72;
      }

      goto LABEL_7;
    }
  }
LABEL_8:
  v9 = v6;

  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  v11 = WeakRetained;
  if (WeakRetained != v9 || !v9 && (*((_QWORD *)&self->_collectionViewFlags + 1) & 2) != 0)
  {
    if (WeakRetained)
      objc_setAssociatedObject(WeakRetained, (char *)&self->super.super.super.super.isa + 2, 0, (void *)1);
    objc_storeWeak((id *)&self->_dataSource, v9);
    v12 = v9;
    -[UICollectionView dataSource](self, "dataSource");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    if (v12 == v13)
    {
      v16 = -[UICollectionView allowsWeakReference](self, sel_allowsWeakReference);

      v14 = v12 == 0;
      v15 = 2 * (v12 != 0);
      if (v12 && v16)
      {
        objc_initWeak(&location, self);
        v17 = [_UIWeakHelper alloc];
        v65 = MEMORY[0x1E0C809B0];
        v66 = 3221225472;
        v67 = __34__UICollectionView_setDataSource___block_invoke_219;
        v68 = &unk_1E16B3F40;
        objc_copyWeak(&v69, &location);
        v18 = -[_UIWeakHelper initWithDeallocationBlock:](v17, "initWithDeallocationBlock:", &v65);
        objc_setAssociatedObject(v12, (char *)&self->super.super.super.super.isa + 2, v18, (void *)1);

        objc_destroyWeak(&v69);
        objc_destroyWeak(&location);
        v14 = 0;
        v15 = 2;
      }
    }
    else
    {

      v14 = v12 == 0;
      v15 = 2 * (v12 != 0);
    }

    p_collectionViewFlags = &self->_collectionViewFlags;
    v20 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    v21 = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFFFFFFFFFDLL | v15;
    *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v21;
    *((_WORD *)&self->_collectionViewFlags + 8) = v20;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v20);
    v22 = objc_opt_respondsToSelector();
    v23 = 0x40000000000000;
    if ((v22 & 1) == 0)
      v23 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFBFFFFFFFFFFFFFLL | v23;
    v24 = objc_opt_respondsToSelector();
    v25 = 0x80000000000000;
    if ((v24 & 1) == 0)
      v25 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFF7FFFFFFFFFFFFFLL | v25;
    v26 = objc_opt_respondsToSelector();
    v27 = 0x100000000000000;
    if ((v26 & 1) == 0)
      v27 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFEFFFFFFFFFFFFFFLL | v27;
    v28 = objc_opt_respondsToSelector();
    v29 = 0x200000000000000;
    if ((v28 & 1) == 0)
      v29 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFDFFFFFFFFFFFFFFLL | v29;
    v30 = objc_opt_respondsToSelector();
    v31 = 0x2000000000000000;
    if ((v30 & 1) == 0)
      v31 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xDFFFFFFFFFFFFFFFLL | v31;
    v32 = objc_opt_respondsToSelector();
    v33 = 0x4000000000000000;
    if ((v32 & 1) == 0)
      v33 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xBFFFFFFFFFFFFFFFLL | v33;
    v34 = objc_opt_respondsToSelector();
    v35 = 0x400000000000000;
    if ((v34 & 1) == 0)
      v35 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFBFFFFFFFFFFFFFFLL | v35;
    v36 = objc_opt_respondsToSelector();
    v37 = 0x800000000000000;
    if ((v36 & 1) == 0)
      v37 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xF7FFFFFFFFFFFFFFLL | v37;
    v38 = objc_opt_respondsToSelector();
    v39 = 0x1000000000000000;
    if ((v38 & 1) == 0)
      v39 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xEFFFFFFFFFFFFFFFLL | v39;
    if (dyld_program_sdk_at_least())
    {
      v40 = objc_opt_respondsToSelector();
      v41 = 0x8000000000000000;
      if ((v40 & 1) == 0)
        v41 = 0;
      *(_QWORD *)p_collectionViewFlags = v41 & 0x8000000000000000 | *(_QWORD *)p_collectionViewFlags & 0x7FFFFFFFFFFFFFFFLL;
      v42 = objc_opt_respondsToSelector();
      v43 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                      + 18) << 16);
      v44 = *(_QWORD *)p_collectionViewFlags;
      v45 = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFFFFFFFFFELL | ((v42 & 1) != 0);
    }
    else
    {
      v43 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                      + 18) << 16);
      v45 = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)p_collectionViewFlags & 0x7FFFFFFFFFFFFFFFLL;
    }
    v46 = &self->_collectionViewFlags;
    *(_QWORD *)&self->_collectionViewFlags = v44;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v45;
    *((_WORD *)&self->_collectionViewFlags + 8) = v43;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v43);
    v47 = objc_opt_respondsToSelector();
    v48 = 4;
    if ((v47 & 1) == 0)
      v48 = 0;
    *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFFFFFFFFFBLL | v48;
    v49 = objc_opt_respondsToSelector();
    v50 = 8;
    if ((v49 & 1) == 0)
      v50 = 0;
    *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFFFFFFFFF7 | v50;
    v51 = dyld_program_sdk_at_least();
    v52 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    collectionViewFlags = *(_QWORD *)v46;
    v54 = *((_QWORD *)&self->_collectionViewFlags + 1);
    if (v51 && (v54 & 4) != 0)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v55 = v12;
        *(_QWORD *)&self->_collectionViewFlags = *(_QWORD *)&self->_collectionViewFlags & 0xBFFFFFFFFFFFFFFFLL | (((*(_QWORD *)&self->_collectionViewFlags >> 62) & objc_msgSend(v55, "_subclassOverridesMethodWithSelector:", sel_collectionView_moveItemAtIndexPath_toIndexPath_) & 1) << 62);
        *(_QWORD *)&self->_collectionViewFlags = *(_QWORD *)&self->_collectionViewFlags & 0xDFFFFFFFFFFFFFFFLL | (((*(_QWORD *)&self->_collectionViewFlags >> 61) & objc_msgSend(v55, "_subclassOverridesMethodWithSelector:", sel_collectionView_canMoveItemAtIndexPath_) & 1) << 61);
        *(_QWORD *)&self->_collectionViewFlags = *(_QWORD *)&self->_collectionViewFlags & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)((*(_QWORD *)&self->_collectionViewFlags < 0) & objc_msgSend(v55, "_subclassOverridesMethodWithSelector:", sel_indexTitlesForCollectionView_)) << 63);
        v56 = objc_msgSend(v55, "_subclassOverridesMethodWithSelector:", sel_collectionView_indexPathForIndexTitle_atIndex_);

        v52 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                        + 18) << 16);
        collectionViewFlags = (uint64_t)self->_collectionViewFlags;
        v54 = *((_QWORD *)&self->_collectionViewFlags + 1) & v56 | *((_QWORD *)&self->_collectionViewFlags
                                                                                 + 1) & 0xFFFFFFFFFFFFFFFELL;
        *((_QWORD *)&self->_collectionViewFlags + 1) = v54;
      }
      else
      {
        v52 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                        + 18) << 16);
        collectionViewFlags = (uint64_t)self->_collectionViewFlags;
        v54 = *((_QWORD *)&self->_collectionViewFlags + 1);
      }
    }
    *(_QWORD *)v46 = collectionViewFlags;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v54 | 0x8000000;
    *((_WORD *)&self->_collectionViewFlags + 8) = v52;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v52);
    -[_UICollectionViewDragAndDropController didUpdateDataSource]((uint64_t)self->_dragAndDropController);
    if (dyld_program_sdk_at_least())
    {
      v57 = *((unsigned __int16 *)&self->_collectionViewFlags + 8);
      v58 = v57 | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
      if ((v57 & 0x200) != 0)
      {
        v59 = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFF7FFFFFFFLL;
        *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
        *((_QWORD *)&self->_collectionViewFlags + 1) = v59;
        *((_WORD *)&self->_collectionViewFlags + 8) = v58;
        *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v58);
      }
    }
    if (!v14 || (dyld_program_sdk_at_least() & 1) == 0)
    {
      if (-[UICollectionViewLayout _shouldInvalidateLayoutForDataSourceChange](self->_layout, "_shouldInvalidateLayoutForDataSourceChange", v65, v66, v67, v68))
      {
        -[UICollectionView _invalidateLayoutForReload](self, "_invalidateLayoutForReload");
      }
      else
      {
        -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
      }
    }
    if (dyld_program_sdk_at_least())
      -[_UICollectionViewSelectionController reset]((uint64_t)self->_selectionController);
    if (-[UICollectionView _wantsIndexOverlays](self, "_wantsIndexOverlays", v65, v66, v67, v68))
    {
      -[UIView window](self, "window");
      v60 = objc_claimAutoreleasedReturnValue();
      if (v60)
      {
        v61 = (void *)v60;
        -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
        v62 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v62)
        {
          -[UICollectionView _setupIndexOverlayManagerIfNecessary](self, "_setupIndexOverlayManagerIfNecessary");
          -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          -[UIView window](self, "window");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UICollectionTableIndexOverlayManager hostDidMoveToWindow:]((uint64_t)v63, v64);

        }
      }
    }
  }

}

- (id)dataSource
{
  return objc_loadWeakRetained((id *)&self->_dataSource);
}

- (BOOL)_wantsIndexOverlays
{
  void *v3;
  _BOOL8 v4;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "userInterfaceIdiom") == 3
    && (*(_QWORD *)&self->_collectionViewFlags & 0x8000000000000000) != 0)
  {
    v4 = *((_QWORD *)&self->_collectionViewFlags + 1) & 1;
  }
  else
  {
    LOBYTE(v4) = 0;
  }

  return v4;
}

- (BOOL)_dragAndDropNeededForReordering
{
  int v3;
  _UICollectionViewDragAndDropController *dragAndDropController;

  v3 = dyld_program_sdk_at_least();
  if (v3)
    LOBYTE(v3) = *(_QWORD *)&self->_collectionViewFlags & 0x4000000000000000 | *((_QWORD *)&self->_collectionViewFlags
                                                                                 + 1) & 4
              && (dragAndDropController = self->_dragAndDropController) != 0
              && dragAndDropController->_preferredDragDestinationVisualStyle == 2;
  return v3;
}

- (void)_updatePreferredAttributesForCurrentUpdate
{
  NSMutableOrderedSet *indexPathsRequiringPreferredAttributes;
  unint64_t v4;
  NSObject *v5;
  int v6;
  UICollectionView *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes")
    && self->_currentUpdate
    && -[UICollectionViewLayout _needsRecomputeOfPreferredAttributesForVisibleEstimatedItemsDuringUpdate](self->_layout, "_needsRecomputeOfPreferredAttributesForVisibleEstimatedItemsDuringUpdate")&& !-[UICollectionView _isReordering](self, "_isReordering"))
  {
    indexPathsRequiringPreferredAttributes = self->_indexPathsRequiringPreferredAttributes;
    self->_indexPathsRequiringPreferredAttributes = 0;

    -[UICollectionView _updatePreferredAttributesForCurrentUpdate:](self, "_updatePreferredAttributesForCurrentUpdate:", 0);
    v4 = _updatePreferredAttributesForCurrentUpdate___s_category;
    if (!_updatePreferredAttributesForCurrentUpdate___s_category)
    {
      v4 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v4, (unint64_t *)&_updatePreferredAttributesForCurrentUpdate___s_category);
    }
    if ((*(_BYTE *)v4 & 1) != 0)
    {
      v5 = *(NSObject **)(v4 + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = 134217984;
        v7 = self;
        _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "[UICV %p] _updatePreferredAttributesForCurrentUpdate finished", (uint8_t *)&v6, 0xCu);
      }
    }
  }
}

- (id)_viewAnimationsForCurrentUpdateWithCollectionViewAnimator:(id)a3 updatingContentOffsetForRestorationAnchor:(BOOL)a4
{
  _BOOL4 v4;
  UICollectionViewUpdate *currentUpdate;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  UICollectionViewUpdate *v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  _UICollectionViewSubviewCollection *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  UICollectionViewData *newModel;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  void *v30;
  void *v31;
  _UICollectionViewSubviewManager *subviewManager;
  void *v33;
  void *v35;
  NSObject *v36;
  NSIndexPath *contentOffsetRestorationAnchor;
  NSObject *v38;
  void *v39;
  void *v40;
  id *v41;
  void *v42;
  char v43;
  uint8_t buf[4];
  UICollectionView *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;
  CGPoint v51;

  v4 = a4;
  v50 = *MEMORY[0x1E0C80C00];
  v41 = (id *)a3;
  currentUpdate = self->_currentUpdate;
  if (!currentUpdate || (*(_BYTE *)&currentUpdate->_flags & 2) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 11042, CFSTR("UICollectionView internal inconsistency: attempted to generate view animations for an update which is not animated. Collection view: %@"), self, v41);

  }
  -[_UICollectionViewSubviewManager allVisibleViewsHashTable]((uint64_t *)self->_subviewManager);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes")
    && dyld_program_sdk_at_least())
  {
    -[UICollectionView _updatePreferredAttributesForCurrentUpdate](self, "_updatePreferredAttributesForCurrentUpdate");
  }
  if (v4)
  {
    if (self->_contentOffsetRestorationAnchor)
    {
      v43 = 0;
      -[UIScrollView _contentInsetIncludingDecorations](self, "_contentInsetIncludingDecorations");
      v10 = -[UICollectionView _contentOffsetForRestoringPositionToCurrentRestorationAnchorWithContentInsets:shouldApply:]((uint64_t)self, &v43, v8, v9);
      if (v43)
      {
        v12 = v10;
        v13 = v11;
        v14 = self->_currentUpdate;
        v14->_newContentOffset.x = v10;
        v14->_newContentOffset.y = v11;
        v15 = _viewAnimationsForCurrentUpdateWithCollectionViewAnimator_updatingContentOffsetForRestorationAnchor____s_category;
        if (!_viewAnimationsForCurrentUpdateWithCollectionViewAnimator_updatingContentOffsetForRestorationAnchor____s_category)
        {
          v15 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v15, (unint64_t *)&_viewAnimationsForCurrentUpdateWithCollectionViewAnimator_updatingContentOffsetForRestorationAnchor____s_category);
        }
        if ((*(_BYTE *)v15 & 1) != 0)
        {
          v36 = *(NSObject **)(v15 + 8);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            contentOffsetRestorationAnchor = self->_contentOffsetRestorationAnchor;
            v38 = v36;
            -[NSIndexPath _ui_shortDescription](contentOffsetRestorationAnchor, "_ui_shortDescription");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v51.x = v12;
            v51.y = v13;
            NSStringFromCGPoint(v51);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 134218498;
            v45 = self;
            v46 = 2112;
            v47 = v39;
            v48 = 2112;
            v49 = v40;
            _os_log_impl(&dword_185066000, v38, OS_LOG_TYPE_ERROR, "_viewAnimationsForCurrentUpdate: cv == %p; readjusting content offset for anchor %@. New content offset: %@",
              buf,
              0x20u);

          }
        }
        v16 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                        + 18) << 16);
        *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
        *((_BYTE *)&self->_collectionViewFlags + 18) = (v16 | 0x10000u) >> 16;
        -[UICollectionView setContentOffset:](self, "setContentOffset:", v12, v13);
        v17 = *((unsigned __int16 *)&self->_collectionViewFlags + 8);
        v18 = (v17 | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16)) & 0xFFFEFFFF;
        *((_WORD *)&self->_collectionViewFlags + 8) = v17;
        *((_BYTE *)&self->_collectionViewFlags + 18) = (v18 | v16 & 0x10000) >> 16;
      }
    }
  }
  v19 = objc_alloc_init(_UICollectionViewSubviewCollection);
  -[UICollectionView _populateSubviewCollectionWithExistingVisibleViewsForCurrentUpdate:addingDeletedViewsToSet:updateLayoutAttributesIndexPaths:](self, "_populateSubviewCollectionWithExistingVisibleViewsForCurrentUpdate:addingDeletedViewsToSet:updateLayoutAttributesIndexPaths:", v19, 0, 0);
  v20 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v21 = (void *)objc_opt_new();
  v22 = (void *)objc_opt_new();
  v23 = (void *)objc_opt_new();
  -[UICollectionView _createAndAppendViewAnimationsForDeletesInCurrentUpdate:disappearingAnimations:](self, "_createAndAppendViewAnimationsForDeletesInCurrentUpdate:disappearingAnimations:", v20, v22);
  -[UICollectionView _createAndAppendViewAnimationsForInsertsInCurrentUpdate:appearingAnimations:newSubviewCollection:](self, "_createAndAppendViewAnimationsForInsertsInCurrentUpdate:appearingAnimations:newSubviewCollection:", v20, v21, v19);
  newModel = self->_currentUpdate->_newModel;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  -[UICollectionViewData layoutAttributesForElementsInRect:](newModel, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _createAndAppendViewAnimationsForExistingAndNewlyVisibleItemsInCurrentUpdate:animationsForOnScreenViews:newSubviewCollection:oldVisibleViews:attributesForNewModel:](self, "_createAndAppendViewAnimationsForExistingAndNewlyVisibleItemsInCurrentUpdate:animationsForOnScreenViews:newSubviewCollection:oldVisibleViews:attributesForNewModel:", v20, v23, v19, v42, v29);
  -[UICollectionView _createAndAppendViewAnimationsForExistingAndDeletedAuxiliariesInCurrentUpdate:disappearingAnimations:animationsForOnScreenViews:newSubviewCollection:oldVisibleViews:](self, "_createAndAppendViewAnimationsForExistingAndDeletedAuxiliariesInCurrentUpdate:disappearingAnimations:animationsForOnScreenViews:newSubviewCollection:oldVisibleViews:", v20, v22, v23, v19, v42);
  -[UICollectionView _createAndAppendViewAnimationsForInsertedAuxiliariesInCurrentUpdate:appearingAnimations:newSubviewCollection:](self, "_createAndAppendViewAnimationsForInsertedAuxiliariesInCurrentUpdate:appearingAnimations:newSubviewCollection:", v20, v21, v19);
  -[UICollectionView _createAndAppendViewAnimationsForNewlyVisibleAuxiliariesInCurrentUpdate:appearingAnimations:animationsForOnScreenViews:newSubviewCollection:attributesForNewModel:](self, "_createAndAppendViewAnimationsForNewlyVisibleAuxiliariesInCurrentUpdate:appearingAnimations:animationsForOnScreenViews:newSubviewCollection:attributesForNewModel:", v20, v21, v23, v19, v29);
  if (dyld_program_sdk_at_least()
    && -[UICollectionViewLayout _wantsUntrackedAnimationCleanupForAuxillaryItems](self->_layout, "_wantsUntrackedAnimationCleanupForAuxillaryItems"))
  {
    -[UICollectionView _removeUntrackedAuxillaryViewsForBeforeVisibleViews:afterVisibleViews:withTrackingViewAnimations:](self, "_removeUntrackedAuxillaryViewsForBeforeVisibleViews:afterVisibleViews:withTrackingViewAnimations:", self->_subviewManager, v19, v20);
  }
  -[UICollectionView indexPathsForVisibleItems](self, "indexPathsForVisibleItems");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UICollectionViewSubviewManager replaceVisibleViewsWithoutCopyingWithContentsOfSubviewCollection:]((uint64_t)self->_subviewManager, (id *)&v19->super.isa);
  -[UICollectionView indexPathsForVisibleItems](self, "indexPathsForVisibleItems");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  subviewManager = self->_subviewManager;
  if (subviewManager)
    -[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)&__block_literal_global_747);
  -[UICollectionView _updateOrderingOfViewsInDisappearingViewAnimations:onScreenViewAnimations:](self, "_updateOrderingOfViewsInDisappearingViewAnimations:onScreenViewAnimations:", v22, v23);
  if (dyld_program_sdk_at_least())
  {
    -[UIBarButtonItemGroup _items](v41);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UICollectionLayoutItemSolver setSolveResult:]((uint64_t)v33, v21);
    -[_UICollectionLayoutListAttributes setSeparatorVisualEffect:]((uint64_t)v33, v22);
    -[UIBackgroundConfiguration _setImage:]((uint64_t)v33, v30);
    -[_UIDocumentUnavailableConfiguration setDocumentTargetView:]((uint64_t)v33, v31);
    -[_UICollectionViewAnimationContext setAnimationsForOnScreenViews:]((uint64_t)v33, v23);
    -[UICollectionView _setupExpandCollapseAnimationsIfNeededWithContext:](self, "_setupExpandCollapseAnimationsIfNeededWithContext:", v33);

  }
  return v20;
}

- (NSArray)indexPathsForVisibleItems
{
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
  {
    -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
    -[UICollectionView visibleCells](self, "visibleCells");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v15;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v9), "_layoutAttributes", (_QWORD)v14);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "indexPath");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          -[UICollectionView _translatePresentationIndexPathToDataSourceIndexPathAsNeeded:](self, "_translatePresentationIndexPathToDataSourceIndexPathAsNeeded:", v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
            objc_msgSend(v4, "addObject:", v12);

          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v7);
    }

  }
  else
  {
    -[UICollectionView _indexPathsForVisibleItems](self, "_indexPathsForVisibleItems");
    v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  return (NSArray *)v4;
}

- (id)_indexPathsForVisibleItems
{
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  return -[_UICollectionViewSubviewManager indexPathsForVisibleCells]((uint64_t *)self->_subviewManager);
}

- (BOOL)_updateWithItems:(id)a3 tentativelyForReordering:(BOOL)a4 propertyAnimator:(id)a5 collectionViewAnimator:(id)a6
{
  id v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  void *v13;
  UICollectionViewUpdate *currentUpdate;
  void (**v15)(void *, NSIndexPath *);
  _UICollectionViewSubviewManager *subviewManager;
  _UICollectionViewSubviewCollection *visibleViews;
  unint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  NSIndexPath *v30;
  NSIndexPath *pendingSelectionIndexPath;
  void *v32;
  void *v33;
  void *v34;
  char v35;
  UICollectionView *v36;
  NSMutableSet *v37;
  NSMutableSet *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t j;
  void *v43;
  NSMutableSet *pendingDeselectionIndexPaths;
  uint64_t collectionViewData;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  unint64_t v50;
  int64_t didScrollNotificationSuspensionCount;
  CGFloat v52;
  CGFloat v53;
  _QWORD *v54;
  id updateCompletionHandler;
  UICollectionViewUpdate *v56;
  id v57;
  _QWORD *v58;
  void *v59;
  unint64_t v60;
  NSMutableOrderedSet *indexPathsRequiringPreferredAttributes;
  UICollectionViewUpdate *v62;
  _UICollectionViewSubviewCollection *v63;
  void *v64;
  id *v65;
  id v66;
  UICollectionView *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  UICollectionReusableView *v73;
  UICollectionReusableView *v74;
  BOOL v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  unint64_t v80;
  NSObject *v81;
  NSObject *v82;
  const char *v83;
  uint32_t v84;
  unint64_t v85;
  void *v86;
  void *v87;
  NSObject *v88;
  uint64_t v89;
  UICollectionViewUpdate *v90;
  double x;
  double y;
  int v93;
  int v94;
  unsigned int v95;
  unint64_t v96;
  _QWORD *v97;
  id v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t k;
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t m;
  void *v112;
  uint64_t v113;
  _QWORD *v114;
  id v115;
  NSObject *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  id *v120;
  _QWORD *v121;
  _QWORD *v122;
  UICollectionViewUpdate *v123;
  _UICollectionViewSubviewManager *v124;
  _UICollectionViewSubviewCollection *v125;
  NSObject *v127;
  UICollectionViewUpdate *v128;
  NSObject *v129;
  NSIndexPath *contentOffsetRestorationAnchor;
  NSObject *v131;
  UICollectionViewUpdate *v132;
  void *v133;
  NSObject *v134;
  NSObject *v135;
  UICollectionViewUpdate *v136;
  NSObject *log;
  id *p_isa;
  UICollectionViewUpdate *v139;
  _BOOL4 v140;
  id v141;
  id v142;
  dispatch_group_t v143;
  void *v144;
  UICollectionReusableView *v145;
  UICollectionView *v146;
  _QWORD v147[4];
  id v148;
  _QWORD v149[4];
  id v150;
  _QWORD block[4];
  id v152;
  _QWORD v153[5];
  id v154;
  _QWORD v155[5];
  id v156;
  id v157;
  NSObject *v158;
  BOOL v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _QWORD v168[5];
  id v169;
  id v170;
  id v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _QWORD aBlock[5];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _BYTE v185[128];
  _BYTE v186[128];
  _BYTE v187[128];
  uint8_t v188[128];
  uint8_t buf[4];
  UICollectionView *v190;
  __int16 v191;
  UICollectionReusableView *v192;
  __int16 v193;
  void *v194;
  __int16 v195;
  UICollectionViewUpdate *v196;
  uint8_t v197[4];
  UICollectionView *v198;
  __int16 v199;
  UICollectionViewUpdate *v200;
  uint64_t v201;
  CGPoint v202;

  v201 = *MEMORY[0x1E0C80C00];
  v142 = a3;
  v9 = a5;
  v141 = a6;
  v10 = +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled");
  v11 = dyld_program_sdk_at_least() ^ 1;
  v12 = v11 & v10;
  if ((v11 & 1) == 0 && v10)
  {
    -[UIView window](self, "window");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v13 != 0;

  }
  -[UICollectionView _prepareLayoutForUpdates:](self, "_prepareLayoutForUpdates:", v12);
  currentUpdate = self->_currentUpdate;
  if (currentUpdate)
    *(_BYTE *)&currentUpdate->_flags |= 1u;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke;
  aBlock[3] = &unk_1E16BDC20;
  aBlock[4] = self;
  v15 = (void (**)(void *, NSIndexPath *))_Block_copy(aBlock);
  subviewManager = self->_subviewManager;
  if (subviewManager)
  {
    visibleViews = subviewManager->_visibleViews;
    if (visibleViews)
      visibleViews->_indexPathValidationEnabled = 0;
  }
  v18 = qword_1EDDC6718;
  if (!qword_1EDDC6718)
  {
    v18 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v18, (unint64_t *)&qword_1EDDC6718);
  }
  if ((*(_BYTE *)v18 & 1) != 0)
  {
    v127 = *(NSObject **)(v18 + 8);
    if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
    {
      v128 = self->_currentUpdate;
      *(_DWORD *)v197 = 134218242;
      v198 = self;
      v199 = 2112;
      v200 = v128;
      _os_log_impl(&dword_185066000, v127, OS_LOG_TYPE_ERROR, "[UICV %p] _updateWithItems: Processing update %@", v197, 0x16u);
    }
  }
  -[UICollectionView _rebasePrefetchedCellIndexPathsWithMapping:](self, "_rebasePrefetchedCellIndexPathsWithMapping:", v15);
  -[UICollectionView _resignOrRebaseFirstResponderViewWithIndexPathMapping:](self, "_resignOrRebaseFirstResponderViewWithIndexPathMapping:", v15);
  -[UICollectionView _resetOrRebaseFocusedItemForCurrentUpdateWithIndexPathMapping:](self, "_resetOrRebaseFocusedItemForCurrentUpdateWithIndexPathMapping:", v15);
  -[UICollectionView _identityTracker:](self, "_identityTracker:", 0);
  v146 = self;
  v144 = (void *)objc_claimAutoreleasedReturnValue();
  if (v144)
  {
    -[UICollectionView contextMenuInteraction](self, "contextMenuInteraction");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "_internalIdentifiersForDismissingMenu");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    v178 = 0u;
    v179 = 0u;
    v176 = 0u;
    v177 = 0u;
    v21 = v20;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v176, v188, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v177;
      while (2)
      {
        for (i = 0; i != v23; ++i)
        {
          if (*(_QWORD *)v177 != v24)
            objc_enumerationMutation(v21);
          v26 = *(_QWORD *)(*((_QWORD *)&v176 + 1) + 8 * i);
          -[_UIIndexPathIdentityTracker currentIndexPathForIdentifier:]((uint64_t)v144, v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          if (v27)
          {
            -[UICollectionViewUpdate finalIndexPathForInitialIndexPath:](v146->_currentUpdate, "finalIndexPathForInitialIndexPath:", v27);
            v28 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v28)
            {
              -[UICollectionView contextMenuInteraction](v146, "contextMenuInteraction");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "_retargetDismissingMenuWithInternalIdentifier:toPreview:force:", v26, 0, 0);

              goto LABEL_24;
            }
          }

        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v176, v188, 16);
        if (v23)
          continue;
        break;
      }
    }
LABEL_24:

    -[_UIIndexPathIdentityTracker updateWithUpdateItems:]((uint64_t)v144, v142);
    self = v146;
  }
  v15[2](v15, self->_pendingSelectionIndexPath);
  v30 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
  pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
  self->_pendingSelectionIndexPath = v30;

  if (!-[UICollectionView _isConnectedToDiffableDataSource](self, "_isConnectedToDiffableDataSource"))
    goto LABEL_31;
  -[UICollectionView _diffableDataSourceImpl](self, "_diffableDataSourceImpl");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "currentTransaction");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v33;
  if (!v32 || !v33)
  {

    goto LABEL_31;
  }
  v35 = -[_UICollectionViewSelectionController rebaseItemsWithDiffableTransaction:]((uint64_t)self->_selectionController, v33);

  if ((v35 & 1) == 0)
LABEL_31:
    -[_UICollectionViewSelectionController rebaseItemsWithTranslator:]((uint64_t)self->_selectionController, self->_currentUpdate);
  v36 = self;
  if (self->_pendingDeselectionIndexPaths)
  {
    v37 = (NSMutableSet *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", -[NSMutableSet count](self->_pendingDeselectionIndexPaths, "count"));
    v172 = 0u;
    v173 = 0u;
    v174 = 0u;
    v175 = 0u;
    v38 = self->_pendingDeselectionIndexPaths;
    v39 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v38, "countByEnumeratingWithState:objects:count:", &v172, v187, 16);
    if (v39)
    {
      v40 = v39;
      v41 = *(_QWORD *)v173;
      do
      {
        for (j = 0; j != v40; ++j)
        {
          if (*(_QWORD *)v173 != v41)
            objc_enumerationMutation(v38);
          v15[2](v15, *(NSIndexPath **)(*((_QWORD *)&v172 + 1) + 8 * j));
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          if (v43)
            -[NSMutableSet addObject:](v37, "addObject:", v43);

        }
        v40 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v38, "countByEnumeratingWithState:objects:count:", &v172, v187, 16);
      }
      while (v40);
    }

    v36 = v146;
    pendingDeselectionIndexPaths = v146->_pendingDeselectionIndexPaths;
    v146->_pendingDeselectionIndexPaths = v37;

  }
  -[UICollectionView _reloadSectionIndexTitles](v36, "_reloadSectionIndexTitles");
  -[UICollectionView _clearNeedsRecomputePreferredAttributesForInvalidatedElements](v36, "_clearNeedsRecomputePreferredAttributesForInvalidatedElements");
  collectionViewData = (uint64_t)v36->_collectionViewData;
  -[UIScrollView visibleBounds](v36, "visibleBounds");
  -[UICollectionViewData validateLayoutInRect:](collectionViewData, v46, v47, v48, v49);
  -[UICollectionView _computeVisibleContentOffsetForUpdate:usingData:](v36, "_computeVisibleContentOffsetForUpdate:usingData:", v36->_currentUpdate, v36->_collectionViewData);
  -[UICollectionView _clearSpecificInvalidationLists](v36);
  if ((*((_WORD *)&v36->_collectionViewFlags + 8) & 0x800) != 0
    || +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled"))
  {
    v50 = qword_1EDDC6720;
    if (!qword_1EDDC6720)
    {
      v50 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v50, (unint64_t *)&qword_1EDDC6720);
    }
    if ((*(_BYTE *)v50 & 1) != 0)
    {
      v129 = *(NSObject **)(v50 + 8);
      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
      {
        contentOffsetRestorationAnchor = v36->_contentOffsetRestorationAnchor;
        *(_DWORD *)v197 = 134218242;
        v198 = v36;
        v199 = 2112;
        v200 = (UICollectionViewUpdate *)contentOffsetRestorationAnchor;
        _os_log_impl(&dword_185066000, v129, OS_LOG_TYPE_ERROR, "_updateWithItems: cv == %p; Attempting to rebase anchor for %@",
          v197,
          0x16u);
      }
    }
    -[UICollectionView _rebaseContentOffsetAnchorOrScrollTargetForUpdate:](v36, "_rebaseContentOffsetAnchorOrScrollTargetForUpdate:", v36->_currentUpdate);
  }
  v140 = -[UICollectionView _reviseNewContentOffsetForUpdate:](v36, "_reviseNewContentOffsetForUpdate:", v36->_currentUpdate);
  didScrollNotificationSuspensionCount = v36->_didScrollNotificationSuspensionCount;
  if (!didScrollNotificationSuspensionCount)
  {
    -[UIScrollView contentOffset](v36, "contentOffset");
    v36->_contentOffsetWhenScrollNotificationsSuspended.x = v52;
    v36->_contentOffsetWhenScrollNotificationsSuspended.y = v53;
  }
  v36->_didScrollNotificationSuspensionCount = didScrollNotificationSuspensionCount + 1;
  if ((_DWORD)v12)
  {
    v54 = -[UIViewAnimationContext initWithCompletionHandler:]([UIViewAnimationContext alloc], v36->_updateCompletionHandler);
    updateCompletionHandler = v36->_updateCompletionHandler;
    v36->_updateCompletionHandler = 0;

    v56 = v36->_currentUpdate;
    if (v56)
      *(_BYTE *)&v56->_flags |= 2u;
    v168[0] = MEMORY[0x1E0C809B0];
    v168[1] = 3221225472;
    v168[2] = __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_776;
    v168[3] = &unk_1E16B51E8;
    v168[4] = v146;
    v169 = v141;
    v57 = v142;
    v170 = v57;
    v58 = v54;
    v171 = v58;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v168);
    -[UICollectionViewLayout _propertyAnimatorForCollectionViewUpdates:withCustomAnimator:](v146->_layout, "_propertyAnimatorForCollectionViewUpdates:withCustomAnimator:", v57, v9);
    v59 = (void *)objc_claimAutoreleasedReturnValue();

    if (v59)
      v143 = dispatch_group_create();
    else
      v143 = 0;
    v100 = (void *)objc_msgSend(v59, "copy");
    v9 = (id)objc_msgSend(v59, "copy");
    v164 = 0u;
    v165 = 0u;
    v166 = 0u;
    v167 = 0u;
    objc_msgSend(v59, "_animations");
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    v102 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v164, v186, 16);
    if (v102)
    {
      v103 = v102;
      v104 = *(_QWORD *)v165;
      do
      {
        for (k = 0; k != v103; ++k)
        {
          if (*(_QWORD *)v165 != v104)
            objc_enumerationMutation(v101);
          v106 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v164 + 1) + 8 * k), "copy");
          objc_msgSend(v9, "addAnimations:", v106);

        }
        v103 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v164, v186, 16);
      }
      while (v103);
    }

    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    objc_msgSend(v59, "_completions");
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = objc_msgSend(v107, "countByEnumeratingWithState:objects:count:", &v160, v185, 16);
    if (v108)
    {
      v109 = v108;
      v110 = *(_QWORD *)v161;
      do
      {
        for (m = 0; m != v109; ++m)
        {
          if (*(_QWORD *)v161 != v110)
            objc_enumerationMutation(v107);
          v112 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v160 + 1) + 8 * m), "copy");
          objc_msgSend(v9, "addCompletion:", v112);

        }
        v109 = objc_msgSend(v107, "countByEnumeratingWithState:objects:count:", &v160, v185, 16);
      }
      while (v109);
    }

    v113 = MEMORY[0x1E0C809B0];
    v155[0] = MEMORY[0x1E0C809B0];
    v155[1] = 3221225472;
    v155[2] = __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_2;
    v155[3] = &unk_1E16BD778;
    v155[4] = v146;
    v114 = v58;
    v156 = v114;
    v115 = v100;
    v157 = v115;
    v116 = v143;
    v158 = v116;
    v159 = v140;
    v117 = _Block_copy(v155);
    v153[0] = v113;
    v153[1] = 3221225472;
    v153[2] = __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_778;
    v153[3] = &unk_1E16B2218;
    v153[4] = v146;
    v97 = v114;
    v154 = v97;
    v118 = _Block_copy(v153);
    if (v9)
    {
      objc_msgSend(v9, "addAnimations:", v117);
      objc_msgSend(v9, "startAnimation");
      block[0] = v113;
      block[1] = 3221225472;
      block[2] = __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_2_779;
      block[3] = &unk_1E16B1BF8;
      v152 = v118;
      dispatch_group_notify(v116, MEMORY[0x1E0C80D38], block);

    }
    else
    {
      if (dyld_program_sdk_at_least())
        v119 = 6;
      else
        v119 = 4;
      +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", v119, v117, v118, 0.3, 0.0);
    }

    LOBYTE(v59) = 0;
    v67 = v146;
    goto LABEL_138;
  }
  v60 = qword_1EDDC6728;
  if (!qword_1EDDC6728)
  {
    v60 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v60, (unint64_t *)&qword_1EDDC6728);
  }
  if ((*(_BYTE *)v60 & 1) != 0)
  {
    v131 = *(NSObject **)(v60 + 8);
    if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
    {
      v132 = v36->_currentUpdate;
      *(_DWORD *)v197 = 134218242;
      v198 = v36;
      v199 = 2112;
      v200 = v132;
      _os_log_impl(&dword_185066000, v131, OS_LOG_TYPE_ERROR, "_updateWithItems: cv == %p; performing update without animations. Update: %@",
        v197,
        0x16u);
    }
  }
  indexPathsRequiringPreferredAttributes = v36->_indexPathsRequiringPreferredAttributes;
  v36->_indexPathsRequiringPreferredAttributes = 0;

  v62 = v36->_currentUpdate;
  v139 = v62;
  if (!v62)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v133, "handleFailureInMethod:object:file:lineNumber:description:", sel__updateSubviewManagerForCurrentUpdateWithoutAnimationsReusingDeletedViews, v36, CFSTR("UICollectionView.m"), 12578, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("currentUpdate != nil"));
LABEL_150:

    goto LABEL_61;
  }
  if ((*(_BYTE *)&v62->_flags & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v133, "handleFailureInMethod:object:file:lineNumber:description:", sel__updateSubviewManagerForCurrentUpdateWithoutAnimationsReusingDeletedViews, v36, CFSTR("UICollectionView.m"), 12579, CFSTR("UICollectionView internal inconsistency: attempted to reuse deleted views for an update which is not animated. Collection view: %@"), v36);
    goto LABEL_150;
  }
LABEL_61:
  v63 = objc_alloc_init(_UICollectionViewSubviewCollection);
  v64 = (void *)objc_opt_new();
  p_isa = (id *)&v63->super.isa;
  -[UICollectionView _populateSubviewCollectionWithExistingVisibleViewsForCurrentUpdate:addingDeletedViewsToSet:updateLayoutAttributesIndexPaths:](v146, "_populateSubviewCollectionWithExistingVisibleViewsForCurrentUpdate:addingDeletedViewsToSet:updateLayoutAttributesIndexPaths:", v63, v64, 1);
  v65 = v146->_focusedItemState;
  v145 = v146->_firstResponderView;
  v181 = 0u;
  v182 = 0u;
  v183 = 0u;
  v184 = 0u;
  v66 = v64;
  v67 = v146;
  v68 = v66;
  v69 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v181, v197, 16);
  if (!v69)
    goto LABEL_100;
  v70 = v69;
  v71 = *(_QWORD *)v182;
  do
  {
    v72 = 0;
    do
    {
      if (*(_QWORD *)v182 != v71)
        objc_enumerationMutation(v68);
      v73 = *(UICollectionReusableView **)(*((_QWORD *)&v181 + 1) + 8 * v72);
      if (!-[UICollectionView _viewIsReorderedCell:](v67, "_viewIsReorderedCell:", v73))
      {
        if (-[UICollectionReusableView _isInUpdateAnimation](v73, "_isInUpdateAnimation"))
        {
          -[UICollectionReusableView _setHiddenForReuse:](v73, "_setHiddenForReuse:", 1);
          goto LABEL_92;
        }
        if (v65)
        {
          v74 = (UICollectionReusableView *)v65[1];

          v75 = v73 == v74;
          v67 = v146;
          if (v75)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            -[UICollectionReusableView _layoutAttributes](v73, "_layoutAttributes");
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v76, "handleFailureInMethod:object:file:lineNumber:description:", sel__updateSubviewManagerForCurrentUpdateWithoutAnimationsReusingDeletedViews, v146, CFSTR("UICollectionView.m"), 12602, CFSTR("UICollectionView internal bug: We're trying to reuse a view that's currently focused or contains the focused view. Collection view: %@; view: %@; layout attributes: %@; focused item state: %@"),
              v146,
              v73,
              v77,
              v65);

            v67 = v146;
          }
        }
        if (v145 && v73 == v145)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          -[UICollectionReusableView _layoutAttributes](v145, "_layoutAttributes");
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v86, "handleFailureInMethod:object:file:lineNumber:description:", sel__updateSubviewManagerForCurrentUpdateWithoutAnimationsReusingDeletedViews, v146, CFSTR("UICollectionView.m"), 12603, CFSTR("UICollectionView internal bug: We're trying to reuse a view that's currently the first responder or contains the first responder. Collection view: %@; view: %@; view layout attributes: %@"),
            v146,
            v145,
            v87);

          v67 = v146;
        }
        -[UICollectionReusableView _layoutAttributes](v73, "_layoutAttributes");
        v78 = objc_claimAutoreleasedReturnValue();
        v79 = (void *)v78;
        if (v78)
        {
          if ((*(_WORD *)(v78 + 288) & 1) == 0)
          {
            if (-[UICollectionView _reuseSupplementaryView:](v67, "_reuseSupplementaryView:", v73))
              goto LABEL_91;
LABEL_87:
            v85 = qword_1EDDC6740;
            if (!qword_1EDDC6740)
            {
              v85 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v85, (unint64_t *)&qword_1EDDC6740);
            }
            if ((*(_BYTE *)v85 & 1) != 0)
            {
              v88 = *(NSObject **)(v85 + 8);
              if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218754;
                v190 = v146;
                v191 = 2112;
                v192 = v73;
                v193 = 2112;
                v194 = v79;
                v195 = 2112;
                v196 = v139;
                v82 = v88;
                v83 = "_createNewSubviewManagerForUpdateWithoutAnimations: cv == %p; forcibly removing view: %@; with att"
                      "ributes: %@; for update: %@";
                v84 = 42;
LABEL_85:
                _os_log_impl(&dword_185066000, v82, OS_LOG_TYPE_ERROR, v83, buf, v84);
              }
            }
            goto LABEL_90;
          }
          if (!-[UICollectionView _reuseCell:notifyDidEndDisplaying:](v67, "_reuseCell:notifyDidEndDisplaying:", v73, 1))goto LABEL_87;
        }
        else
        {
          if (os_variant_has_internal_diagnostics())
          {
            __UIFaultDebugAssertLog();
            log = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(log, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412546;
              v190 = v67;
              v191 = 2112;
              v192 = v73;
              _os_log_fault_impl(&dword_185066000, log, OS_LOG_TYPE_FAULT, "UICollectionView internal bug: non-animated batch update forcibly removing deleted view without layout attributes. Collection view:  %@; view: %@",
                buf,
                0x16u);
            }

          }
          else
          {
            v80 = qword_1EDDC6738;
            if (!qword_1EDDC6738)
            {
              v80 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v80, (unint64_t *)&qword_1EDDC6738);
            }
            v81 = *(NSObject **)(v80 + 8);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v190 = v146;
              v191 = 2112;
              v192 = v73;
              v82 = v81;
              v83 = "UICollectionView internal bug: non-animated batch update forcibly removing deleted view without layo"
                    "ut attributes. Collection view:  %@; view: %@";
              v84 = 22;
              goto LABEL_85;
            }
          }
LABEL_90:
          -[UIView removeFromSuperview](v73, "removeFromSuperview");
          v67 = v146;
        }
LABEL_91:

      }
LABEL_92:
      ++v72;
    }
    while (v70 != v72);
    v89 = objc_msgSend(v68, "countByEnumeratingWithState:objects:count:", &v181, v197, 16);
    v70 = v89;
  }
  while (v89);
LABEL_100:

  -[_UICollectionViewSubviewManager replaceVisibleViewsWithoutCopyingWithContentsOfSubviewCollection:]((uint64_t)v67->_subviewManager, p_isa);
  if (v140)
  {
    v90 = v67->_currentUpdate;
    x = v90->_newContentOffset.x;
    y = v90->_newContentOffset.y;
    v93 = *((unsigned __int16 *)&v67->_collectionViewFlags + 8) | (*((unsigned __int8 *)&v67->_collectionViewFlags + 18) << 16);
    *((_WORD *)&v67->_collectionViewFlags + 8) = *((_WORD *)&v67->_collectionViewFlags + 8);
    *((_BYTE *)&v67->_collectionViewFlags + 18) = (v93 | 0x10000u) >> 16;
    -[UICollectionView setContentOffset:](v67, "setContentOffset:", x, y);
    v94 = *((unsigned __int16 *)&v67->_collectionViewFlags + 8);
    v95 = (v94 | (*((unsigned __int8 *)&v67->_collectionViewFlags + 18) << 16)) & 0xFFFEFFFF;
    *((_WORD *)&v67->_collectionViewFlags + 8) = v94;
    *((_BYTE *)&v67->_collectionViewFlags + 18) = (v95 | v93 & 0x10000) >> 16;
    if (-[UIScrollView isDecelerating](v67, "isDecelerating"))
    {
      v96 = qword_1EDDC6730;
      if (!qword_1EDDC6730)
      {
        v96 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v96, (unint64_t *)&qword_1EDDC6730);
      }
      if ((*(_BYTE *)v96 & 1) != 0)
      {
        v134 = *(NSObject **)(v96 + 8);
        if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
        {
          v135 = v134;
          -[UIScrollView contentOffset](v67, "contentOffset");
          NSStringFromCGPoint(v202);
          v136 = (UICollectionViewUpdate *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v197 = 134218242;
          v198 = v67;
          v199 = 2112;
          v200 = v136;
          _os_log_impl(&dword_185066000, v135, OS_LOG_TYPE_ERROR, "_updateWithItems: cv == %p updating decel last offset to %@", v197, 0x16u);

        }
      }
      -[UIScrollView contentOffset](v67, "contentOffset");
      -[UIScrollView _updateDecelerationLastOffset:](v67, "_updateDecelerationLastOffset:");
    }
  }
  -[UICollectionView _resumeDidScrollNotifications]((CGFloat *)v67);
  -[UICollectionViewData finalizeCollectionViewUpdates]((uint64_t)v67->_collectionViewData);
  -[UICollectionViewLayout _finalizeCollectionViewUpdate:](v67->_layout, "_finalizeCollectionViewUpdate:", v67->_currentUpdate);
  -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](v67, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
  v97 = _Block_copy(v67->_updateCompletionHandler);
  v98 = v67->_updateCompletionHandler;
  v67->_updateCompletionHandler = 0;

  if ((*((_QWORD *)&v67->_collectionViewFlags + 1) & 4) != 0)
  {
    -[UIView window](v67, "window");
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    if (v99)
      LOBYTE(v59) = 1;
    else
      LODWORD(v59) = dyld_program_sdk_at_least() ^ 1;

    v67 = v146;
  }
  else
  {
    LODWORD(v59) = dyld_program_sdk_at_least() ^ 1;
  }
  if (v9)
  {
    v147[0] = MEMORY[0x1E0C809B0];
    v147[1] = 3221225472;
    v147[2] = __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_2_783;
    v147[3] = &unk_1E16BDBD8;
    v120 = &v148;
    v148 = v97;
    v121 = v97;
    objc_msgSend(v9, "addCompletion:", v147);
    objc_msgSend(v9, "startAnimation");
  }
  else
  {
    v149[0] = MEMORY[0x1E0C809B0];
    v149[1] = 3221225472;
    v149[2] = __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_782;
    v149[3] = &unk_1E16B1BF8;
    v120 = &v150;
    v150 = v97;
    v122 = v97;
    dispatch_async(MEMORY[0x1E0C80D38], v149);
  }

LABEL_138:
  *((_QWORD *)&v67->_collectionViewFlags + 1) &= ~0x2000000uLL;
  v123 = v67->_currentUpdate;
  v67->_currentUpdate = 0;

  -[UICollectionViewLayout _setCollectionViewAnimationContext:](v67->_layout, "_setCollectionViewAnimationContext:", 0);
  v124 = v67->_subviewManager;
  if (v124)
  {
    v125 = v124->_visibleViews;
    if (v125)
      v125->_indexPathValidationEnabled = 1;
  }

  return (char)v59;
}

- (void)_clearSpecificInvalidationLists
{
  void *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v2 = (void *)a1[322];
    a1[322] = 0;

    v3 = (void *)a1[323];
    a1[323] = 0;

    v4 = (void *)a1[324];
    a1[324] = 0;

  }
}

- (BOOL)_prefetchingAllowed
{
  uint64_t v3;
  _UICollectionViewDragAndDropController *dragAndDropController;
  _BOOL4 v7;
  int v8;

  if (_UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_CollectionViewCellPrefetchingMode, (uint64_t)CFSTR("CollectionViewCellPrefetchingMode"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger))v3 = 0;
  else
    v3 = qword_1ECD75F10;
  if (v3 == -2)
    return 0;
  if (v3 != 1 && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x2000000000000000) == 0)
    return 0;
  dragAndDropController = self->_dragAndDropController;
  if (dragAndDropController)
  {
    if (-[NSMutableArray count](dragAndDropController->__reorderedItems, "count"))
      return 0;
  }
  if (-[UICollectionView hasActiveDrop](self, "hasActiveDrop"))
    return 0;
  if (v3 == 1)
    return 1;
  v7 = -[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes");
  v8 = dyld_program_sdk_at_least();
  if (v8 && v7)
    LOBYTE(v8) = -[UICollectionViewLayout _supportsPrefetchingWithEstimatedSizes](self->_layout, "_supportsPrefetchingWithEstimatedSizes");
  if (v3 != -1 && (v8 & 1) != 0)
    return 1;
  return dyld_program_sdk_at_least() & !v7;
}

- (BOOL)_isReordering
{
  _UICollectionViewDragAndDropController *dragAndDropController;

  if (self)
  {
    dragAndDropController = self->_dragAndDropController;
    if (dragAndDropController)
      LOBYTE(self) = -[NSMutableArray count](dragAndDropController->__reorderedItems, "count") != 0;
    else
      LOBYTE(self) = 0;
  }
  return (char)self;
}

- (void)_clearNeedsRecomputePreferredAttributesForInvalidatedElements
{
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;
  int v4;
  unsigned int v5;

  intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
  self->_intrinsicContentSizeInvalidationContext = 0;

  v4 = *((unsigned __int16 *)&self->_collectionViewFlags + 8);
  v5 = v4 & 0xFFFFFFCF | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  *((_WORD *)&self->_collectionViewFlags + 8) = v4 & 0xFFCF;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v5);
}

- (BOOL)_isConnectedToDiffableDataSource
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 2) & 1;
}

- (void)_reloadSectionIndexTitles
{
  NSArray *indexBarSectionIndexTitles;

  *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x40000000000000uLL;
  indexBarSectionIndexTitles = self->_indexBarSectionIndexTitles;
  self->_indexBarSectionIndexTitles = 0;

  -[UICollectionView _updateIndex](self, "_updateIndex");
}

id __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v3 = -[UICollectionViewData validatedGlobalIndexForItemAtIndexPath:](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2200) + 16), a2);
    if (v3 == 0x7FFFFFFFFFFFFFFFLL
      || (v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2200), "finalGlobalIndexForInitialGlobalIndex:", v3),
          v4 == 0x7FFFFFFFFFFFFFFFLL))
    {
      v5 = 0;
    }
    else
    {
      -[UICollectionViewData indexPathForItemAtGlobalIndex:](*(_BYTE **)(*(_QWORD *)(a1 + 32) + 2192), v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

- (BOOL)_reviseNewContentOffsetForUpdate:(id)a3
{
  uint64_t *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  _BOOL8 v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  int v31;
  double v32;
  double v33;
  _BOOL4 v34;
  unint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  CGFloat v40;
  CGFloat v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  NSObject *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  void *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  void *v54;
  void *v55;
  NSObject *v56;
  double v57;
  int v58;
  char v59;
  uint8_t buf[4];
  UICollectionView *v61;
  __int16 v62;
  void *v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  void *v67;
  uint64_t v68;
  CGPoint v69;
  CGPoint v70;
  CGPoint v71;
  CGPoint v72;
  CGPoint v73;

  v68 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)a3;
  v6 = *((double *)v4 + 6);
  v5 = *((double *)v4 + 7);
  +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "scrollManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isScrollingScrollableContainer:", self);
  v10 = v5;
  v11 = v6;
  if (v9)
  {
    objc_msgSend(v8, "targetContentOffsetForScrollableContainer:", self);
    v11 = v12;
    v10 = v13;
  }
  -[UICollectionViewLayout targetContentOffsetForProposedContentOffset:](self->_layout, "targetContentOffsetForProposedContentOffset:", v11, v10);
  -[UICollectionView _delegateTargetOffsetForProposedContentOffset:](self, "_delegateTargetOffsetForProposedContentOffset:");
  v15 = v14;
  v17 = v16;
  v18 = vabdd_f64(v6, v14) < 0.0001;
  v19 = vabdd_f64(v5, v16) < 0.0001 && v18;
  if (dyld_program_sdk_at_least()
    && !v19
    && !-[UIScrollView isScrollAnimating](self, "isScrollAnimating"))
  {
    v20 = -[UICollectionViewData collectionViewContentRect](v4[3]);
    v57 = v5;
    v21 = v6;
    v23 = v22;
    v25 = v24;
    v26 = -[UIScrollView _isAutomaticContentOffsetAdjustmentEnabled](self, "_isAutomaticContentOffsetAdjustmentEnabled", v20);
    -[UIScrollView _setAutomaticContentOffsetAdjustmentEnabled:](self, "_setAutomaticContentOffsetAdjustmentEnabled:", 1);
    v27 = v23;
    v6 = v21;
    v5 = v57;
    -[UIScrollView _adjustedContentOffsetForContentOffset:contentSize:skipsAdjustmentIfScrolling:](self, "_adjustedContentOffsetForContentOffset:contentSize:skipsAdjustmentIfScrolling:", 0, v15, v17, v27, v25);
    v15 = v28;
    v17 = v29;
    -[UIScrollView _setAutomaticContentOffsetAdjustmentEnabled:](self, "_setAutomaticContentOffsetAdjustmentEnabled:", v26);
  }
  if (!v9)
    goto LABEL_18;
  if (vabdd_f64(v11, v15) >= 0.0001 || vabdd_f64(v10, v17) >= 0.0001)
  {
    objc_msgSend(v8, "cancelScrollingForScrollableContainer:", self);
LABEL_18:
    v31 = 0;
    goto LABEL_19;
  }
  v30 = qword_1EDDC6748;
  if (!qword_1EDDC6748)
  {
    v30 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v30, (unint64_t *)&qword_1EDDC6748);
  }
  if ((*(_BYTE *)v30 & 1) != 0)
  {
    v51 = *(NSObject **)(v30 + 8);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v61 = self;
      _os_log_impl(&dword_185066000, v51, OS_LOG_TYPE_ERROR, "_reviseNewContentOffsetForUpdate: cv == %p; clearing restoration anchor",
        buf,
        0xCu);
    }
  }
  -[UICollectionView _clearContentOffsetRestorationAnchor](self, "_clearContentOffsetRestorationAnchor");
  v31 = 1;
  v15 = v6;
  v17 = v5;
LABEL_19:
  v32 = vabdd_f64(v15, v6);
  v33 = vabdd_f64(v17, v5);
  v34 = v33 >= 0.0001 || v32 >= 0.0001;
  if (v34)
  {
    v35 = qword_1EDDC6750;
    if (!qword_1EDDC6750)
    {
      v35 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v35, (unint64_t *)&qword_1EDDC6750);
    }
    if ((*(_BYTE *)v35 & 1) != 0)
    {
      v46 = *(NSObject **)(v35 + 8);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        v47 = v46;
        -[UIScrollView contentOffset](self, "contentOffset");
        NSStringFromCGPoint(v69);
        v58 = v31;
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v70.x = v6;
        v70.y = v5;
        NSStringFromCGPoint(v70);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v71.x = v15;
        v71.y = v17;
        NSStringFromCGPoint(v71);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 134218754;
        v61 = self;
        v62 = 2112;
        v63 = v48;
        v64 = 2112;
        v65 = v49;
        v66 = 2112;
        v67 = v50;
        _os_log_impl(&dword_185066000, v47, OS_LOG_TYPE_ERROR, "_reviseNewContentOffsetForUpdate: cv == %p; proposed origin modified by layout, delegate, or focus. Current: %"
          "@; original: %@; new: %@",
          buf,
          0x2Au);

        v34 = 1;
        v31 = v58;

      }
    }
  }
  if (((v31 | dyld_program_sdk_at_least() ^ 1) & 1) == 0
    && ((v34 | -[UICollectionView _isReordering](self, "_isReordering")) & 1) == 0
    && self->_contentOffsetRestorationAnchor)
  {
    v59 = 0;
    -[UIScrollView _contentInsetIncludingDecorations](self, "_contentInsetIncludingDecorations");
    v38 = -[UICollectionView _contentOffsetForRestoringPositionToCurrentRestorationAnchorWithContentInsets:shouldApply:]((uint64_t)self, &v59, v36, v37);
    if (v59)
    {
      v40 = v38;
      v41 = v39;
      v42 = qword_1EDDC6758;
      if (!qword_1EDDC6758)
      {
        v42 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v42, (unint64_t *)&qword_1EDDC6758);
      }
      if ((*(_BYTE *)v42 & 1) != 0)
      {
        v52 = *(NSObject **)(v42 + 8);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          v53 = v52;
          v72.x = v6;
          v72.y = v5;
          NSStringFromCGPoint(v72);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v73.x = v40;
          v73.y = v41;
          NSStringFromCGPoint(v73);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 134218498;
          v61 = self;
          v62 = 2112;
          v63 = v54;
          v64 = 2112;
          v65 = v55;
          _os_log_impl(&dword_185066000, v53, OS_LOG_TYPE_ERROR, "_reviseNewContentOffsetForUpdate: cv == %p; changing new visible origin from %@ to %@",
            buf,
            0x20u);

        }
      }
      v17 = v41;
      v15 = v40;
    }
    else
    {
      v43 = qword_1EDDC6760;
      if (!qword_1EDDC6760)
      {
        v43 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v43, (unint64_t *)&qword_1EDDC6760);
      }
      if ((*(_BYTE *)v43 & 1) != 0)
      {
        v56 = *(NSObject **)(v43 + 8);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v61 = self;
          _os_log_impl(&dword_185066000, v56, OS_LOG_TYPE_ERROR, "_reviseNewContentOffsetForUpdate: cv == %p; clearing restoration anchor",
            buf,
            0xCu);
        }
      }
      -[UICollectionView _clearContentOffsetRestorationAnchor](self, "_clearContentOffsetRestorationAnchor", v38);
    }
    v32 = vabdd_f64(v15, v6);
    v33 = vabdd_f64(v17, v5);
  }
  v44 = v33 >= 0.0001 || v32 >= 0.0001;
  *((double *)v4 + 6) = v15;
  *((double *)v4 + 7) = v17;

  return v44;
}

- (CGPoint)_delegateTargetOffsetForProposedContentOffset:(CGPoint)a3
{
  double y;
  double x;
  uint64_t collectionViewFlags;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGPoint result;

  y = a3.y;
  x = a3.x;
  collectionViewFlags = (uint64_t)self->_collectionViewFlags;
  if ((collectionViewFlags & 0x8000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "collectionView:targetContentOffsetForProposedContentOffset:", self, x, y);
    goto LABEL_5;
  }
  if ((collectionViewFlags & 0x4000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_collectionView:targetContentOffsetForProposedContentOffset:", self, x, y);
LABEL_5:
    x = v8;
    y = v9;

  }
  v10 = x;
  v11 = y;
  result.y = v11;
  result.x = v10;
  return result;
}

- (void)_resignOrRebaseFirstResponderViewWithIndexPathMapping:(id)a3
{
  unint64_t v5;
  void *v6;
  void *v7;
  UICollectionReusableView *v8;
  NSIndexPath *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  void *v17;
  const __CFString *v18;
  int64_t firstResponderViewType;
  NSIndexPath *v20;
  NSIndexPath *firstResponderIndexPath;
  int64_t v22;
  NSIndexPath *v23;
  void (**v24)(id, NSIndexPath *);

  v24 = (void (**)(id, NSIndexPath *))a3;
  if (-[UICollectionView _isFirstResponderInDeletedSectionOrItem](self, "_isFirstResponderInDeletedSectionOrItem"))
  {
    v5 = 0;
    do
    {
      -[UIView window](self, "window");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "firstResponder");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = self->_firstResponderView;
      v9 = self->_firstResponderIndexPath;
      v10 = objc_msgSend(v7, "resignFirstResponder");
      -[UIView window](self, "window");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "firstResponder");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v10 || v7 == v12)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = v13;
        v15 = CFSTR("NO");
        if (v10)
          v15 = CFSTR("YES");
        objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 12663, CFSTR("The first responder contained inside of a deleted section or item refused to resign.\nFirst responder that was asked to resign (returned %@ from -resignFirstResponder): %@ inside containing view: %@ at index path: %@\nCurrent first responder: %@ inside containing view: %@ at index path: %@"), v15, v7, v8, v9, v12, self->_firstResponderView, self->_firstResponderIndexPath);

      }
      if (v5 >= 0x64)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v16;
        v18 = CFSTR("NO");
        if (v10)
          v18 = CFSTR("YES");
        objc_msgSend(v16, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 12664, CFSTR("Attempted to delete a section or item containing the first responder, but after repeatedly telling the first responder to resign, the first responder remained inside a deleted section or item. This may be caused by a cycle where the first responder is moving back and forth between the same views.\nFirst responder that was asked to resign (returned %@ from -resignFirstResponder): %@ inside containing view: %@ at index path: %@\nCurrent first responder: %@ inside containing view: %@ at index path: %@"), v18, v7, v8, v9, v12, self->_firstResponderView, self->_firstResponderIndexPath);

      }
      ++v5;

    }
    while (-[UICollectionView _isFirstResponderInDeletedSectionOrItem](self, "_isFirstResponderInDeletedSectionOrItem"));
  }
  if (self->_firstResponderView)
  {
    firstResponderViewType = self->_firstResponderViewType;
    if (firstResponderViewType == 2)
    {
      v22 = -[UICollectionViewUpdate finalSectionIndexForInitialSectionIndex:](self->_currentUpdate, "finalSectionIndexForInitialSectionIndex:", -[NSIndexPath section](self->_firstResponderIndexPath, "section"));
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, v22);
      v23 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
      firstResponderIndexPath = self->_firstResponderIndexPath;
      self->_firstResponderIndexPath = v23;
    }
    else if (firstResponderViewType == 1)
    {
      v24[2](v24, self->_firstResponderIndexPath);
      v20 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
      firstResponderIndexPath = self->_firstResponderIndexPath;
      self->_firstResponderIndexPath = v20;
    }
    else
    {
      firstResponderIndexPath = self->_firstResponderIndexPath;
      self->_firstResponderIndexPath = 0;
    }

  }
}

- (void)_resetOrRebaseFocusedItemForCurrentUpdateWithIndexPathMapping:(id)a3
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  int64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  UICollectionViewUpdate *currentUpdate;
  void *newFocusedItemState;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  UICollectionViewUpdate *v28;
  _UICollectionViewFocusedItemState *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  BOOL v34;
  void *v35;
  void (**v36)(id, id);

  v36 = (void (**)(id, id))a3;
  if (!self->_currentUpdate)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 12707, CFSTR("UICollectionView internal inconsistency: attempted to rebase the focused item state outside of an update. Collection view: %@"), self);

  }
  *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x4000000000uLL;
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v5)
    v7 = *(void **)(v5 + 16);
  else
    v7 = 0;
  v8 = v7;

  if (v8)
  {
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (_QWORD *)v9;
    if (v9)
    {
      v11 = *(id *)(v9 + 8);
      v12 = (void *)v10[2];
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v13 = v12;
    if (-[UICollectionView _isFocusedViewInDeletedSectionOrItem](self, "_isFocusedViewInDeletedSectionOrItem")
      || objc_msgSend(v11, "_isHiddenForReordering"))
    {
      *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x4000000000uLL;
      -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", 0);
    }
    if (v11)
    {
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = (void *)v14;
      v16 = v14 ? *(void **)(v14 + 8) : 0;
      v17 = v16;

      if (!v17)
        -[UICollectionView _reusePreviouslyFocusedManagedSubviewIfNeeded:](self, "_reusePreviouslyFocusedManagedSubviewIfNeeded:", v11);
    }
    if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x4000000000) == 0)
    {
      if (v10 && v10[4])
      {
        v18 = -[UICollectionViewUpdate finalSectionIndexForInitialSectionIndex:](self->_currentUpdate, "finalSectionIndexForInitialSectionIndex:", objc_msgSend(v13, "section"));
        -[UICollectionView _focusedItemState](self, "_focusedItemState");
        v19 = (_QWORD *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = -[_UICollectionViewFocusedItemState copyWithIndexPath:preservingReusableView:](v19, v20, 1);
        -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", v21);

        objc_storeStrong((id *)&self->_currentUpdate->_oldFocusedItemState, v10);
        -[UICollectionView _focusedItemState](self, "_focusedItemState");
        v22 = objc_claimAutoreleasedReturnValue();
        currentUpdate = self->_currentUpdate;
        newFocusedItemState = currentUpdate->_newFocusedItemState;
        currentUpdate->_newFocusedItemState = (_UICollectionViewFocusedItemState *)v22;
      }
      else
      {
        v36[2](v36, v13);
        newFocusedItemState = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionView _focusedItemState](self, "_focusedItemState");
        v25 = (_QWORD *)objc_claimAutoreleasedReturnValue();
        v26 = -[_UICollectionViewFocusedItemState copyWithIndexPath:preservingReusableView:](v25, newFocusedItemState, 1);
        -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", v26);

        objc_storeStrong((id *)&self->_currentUpdate->_oldFocusedItemState, v10);
        -[UICollectionView _focusedItemState](self, "_focusedItemState");
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = self->_currentUpdate;
        v29 = v28->_newFocusedItemState;
        v28->_newFocusedItemState = (_UICollectionViewFocusedItemState *)v27;

      }
    }
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = (void *)v30;
    if (v30)
      v32 = *(void **)(v30 + 16);
    else
      v32 = 0;
    v33 = v32;
    v34 = -[UICollectionView _indexPathIsValid:allowSectionItemSentinel:](self, "_indexPathIsValid:allowSectionItemSentinel:", v33, 1);

    if (!v34)
      -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", 0);

  }
}

- (void)_rebasePrefetchedCellIndexPathsWithMapping:(id)a3
{
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v5 = a3;
  if (-[NSMutableDictionary count](self->_prefetchCacheItems, "count"))
  {
    v4 = (void *)-[NSMutableDictionary copy](self->_prefetchCacheItems, "copy");
    -[NSMutableDictionary removeAllObjects](self->_prefetchCacheItems, "removeAllObjects");
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __63__UICollectionView__rebasePrefetchedCellIndexPathsWithMapping___block_invoke;
    v6[3] = &unk_1E16BCEF8;
    v6[4] = self;
    v7 = v5;
    objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v6);

  }
}

- (void)_prepareLayoutForUpdates:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a3;
  -[UICollectionViewData _prepareToLoadData]((uint64_t)self->_collectionViewData);
  v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  -[NSArray sortedArrayUsingSelector:](self->_originalDeleteItems, "sortedArrayUsingSelector:", sel_compareIndexPaths_);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addObjectsFromArray:", v5);

  -[NSArray sortedArrayUsingSelector:](self->_originalInsertItems, "sortedArrayUsingSelector:", sel_compareIndexPaths_);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addObjectsFromArray:", v6);

  -[NSMutableArray sortedArrayUsingSelector:](self->_reloadItems, "sortedArrayUsingSelector:", sel_compareIndexPaths_);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addObjectsFromArray:", v7);

  -[NSMutableArray sortedArrayUsingSelector:](self->_moveItems, "sortedArrayUsingSelector:", sel_compareIndexPaths_);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addObjectsFromArray:", v8);

  -[UICollectionViewLayout _prepareForCollectionViewUpdates:animated:](self->_layout, "_prepareForCollectionViewUpdates:animated:", v9, v3);
}

- (BOOL)_isFirstResponderInDeletedSectionOrItem
{
  NSIndexPath *firstResponderIndexPath;
  UICollectionViewUpdate *currentUpdate;
  uint64_t v5;
  char v6;
  uint64_t v7;
  UICollectionViewUpdate *v8;
  void *v9;

  if (self->_firstResponderView)
  {
    firstResponderIndexPath = self->_firstResponderIndexPath;
    if (firstResponderIndexPath)
    {
      currentUpdate = self->_currentUpdate;
      if (currentUpdate)
      {
        if (self->_firstResponderViewType == 1)
        {
          -[UICollectionViewUpdate finalIndexPathForInitialIndexPath:](currentUpdate, "finalIndexPathForInitialIndexPath:");
          v5 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v7 = -[NSIndexPath length](firstResponderIndexPath, "length");
          v8 = self->_currentUpdate;
          if (v7 == 1)
          {
            -[NSMutableDictionary objectForKeyedSubscript:](v8->_deletedSupplementaryTopLevelIndexesDict, "objectForKeyedSubscript:", self->_firstResponderViewKind);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v6 = objc_msgSend(v9, "containsIndex:", -[NSIndexPath indexAtPosition:](self->_firstResponderIndexPath, "indexAtPosition:", 0));
LABEL_11:

            return v6;
          }
          -[UICollectionViewUpdate validatedNewIndexPathForSupplementaryElementOfKind:oldIndexPath:]((uint64_t)v8, self->_firstResponderViewKind, self->_firstResponderIndexPath);
          v5 = objc_claimAutoreleasedReturnValue();
        }
        v9 = (void *)v5;
        v6 = v5 == 0;
        goto LABEL_11;
      }
    }
  }
  return 0;
}

- (void)_computeVisibleContentOffsetForUpdate:(id)a3 usingData:(id)a4
{
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  double v31;
  double v32;
  double MaxY;
  double Height;
  double v35;
  double MaxX;
  double Width;
  double v38;
  double *v39;
  CGFloat v40;
  CGFloat v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;

  v39 = (double *)a3;
  v6 = a4;
  -[UIView bounds](self, "bounds");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = -[UICollectionViewData collectionViewContentRect]((uint64_t)v6);
  v17 = v16;
  v19 = v18;
  v21 = v20;

  -[UIScrollView _effectiveContentInset](self, "_effectiveContentInset");
  v24 = v15 - v23;
  v26 = v19 - (-v23 - v25);
  v28 = v17 - v27;
  v29 = v21 - (-v22 - v27);
  v42.origin.x = v24;
  v42.origin.y = v28;
  v42.size.width = v26;
  v42.size.height = v29;
  v55.origin.x = v8;
  v55.origin.y = v10;
  v40 = v14;
  v41 = v12;
  v55.size.width = v12;
  v55.size.height = v14;
  v30 = CGRectContainsRect(v42, v55);
  v31 = v8;
  v32 = v10;
  if (!v30)
  {
    v43.origin.x = v8;
    v43.origin.y = v10;
    v43.size.height = v40;
    v43.size.width = v12;
    MaxY = CGRectGetMaxY(v43);
    v44.origin.x = v24;
    v44.origin.y = v28;
    v44.size.width = v26;
    v44.size.height = v29;
    v32 = v10;
    if (MaxY > CGRectGetMaxY(v44))
    {
      v45.origin.x = v24;
      v45.origin.y = v28;
      v45.size.width = v26;
      v45.size.height = v29;
      Height = CGRectGetHeight(v45);
      v46.origin.x = v8;
      v46.origin.y = v10;
      v46.size.height = v40;
      v46.size.width = v41;
      v32 = v10;
      if (Height > CGRectGetHeight(v46))
      {
        v47.origin.x = v8;
        v47.origin.y = v10;
        v47.size.height = v40;
        v47.size.width = v41;
        v35 = CGRectGetMaxY(v47);
        v48.origin.x = v24;
        v48.origin.y = v28;
        v48.size.width = v26;
        v48.size.height = v29;
        v32 = v10 - (v35 - CGRectGetMaxY(v48));
      }
    }
    v49.origin.x = v8;
    v49.origin.y = v10;
    v49.size.height = v40;
    v49.size.width = v41;
    MaxX = CGRectGetMaxX(v49);
    v50.origin.x = v24;
    v50.origin.y = v28;
    v50.size.width = v26;
    v50.size.height = v29;
    if (MaxX <= CGRectGetMaxX(v50))
      goto LABEL_8;
    v51.origin.x = v24;
    v51.origin.y = v28;
    v51.size.width = v26;
    v51.size.height = v29;
    Width = CGRectGetWidth(v51);
    v52.origin.x = v8;
    v52.origin.y = v10;
    v52.size.height = v40;
    v52.size.width = v41;
    if (Width <= CGRectGetWidth(v52))
    {
LABEL_8:
      v31 = v8;
    }
    else
    {
      v53.origin.x = v8;
      v53.origin.y = v10;
      v53.size.height = v40;
      v53.size.width = v41;
      v38 = CGRectGetMaxX(v53);
      v54.origin.x = v24;
      v54.origin.y = v28;
      v54.size.width = v26;
      v54.size.height = v29;
      v31 = v8 - (v38 - CGRectGetMaxX(v54));
    }
  }
  v39[4] = v8;
  v39[5] = v10;
  v39[6] = v31;
  v39[7] = v32;

}

- (id)_diffableDataSourceImpl
{
  UICollectionView *v3;
  void *v4;

  -[UICollectionView _dataSourceActual](self, "_dataSourceActual");
  v3 = (UICollectionView *)objc_claimAutoreleasedReturnValue();
  v4 = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0 && v3 != self)
  {
    -[UICollectionView _diffableDataSourceImpl](v3, "_diffableDataSourceImpl");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v4;
}

- (id)_viewAnimationsForCurrentUpdate
{
  return -[UICollectionView _viewAnimationsForCurrentUpdateWithCollectionViewAnimator:updatingContentOffsetForRestorationAnchor:](self, "_viewAnimationsForCurrentUpdateWithCollectionViewAnimator:updatingContentOffsetForRestorationAnchor:", 0, 1);
}

- (void)_updateOrderingOfViewsInDisappearingViewAnimations:(id)a3 onScreenViewAnimations:(id)a4
{
  uint64_t v6;
  id v7;
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[5];

  v6 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __94__UICollectionView__updateOrderingOfViewsInDisappearingViewAnimations_onScreenViewAnimations___block_invoke;
  v10[3] = &unk_1E16BD6B8;
  v10[4] = self;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __94__UICollectionView__updateOrderingOfViewsInDisappearingViewAnimations_onScreenViewAnimations___block_invoke_2;
  v9[3] = &unk_1E16BD6E0;
  v9[4] = self;
  v9[5] = v10;
  v7 = a4;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v9);
  v8[0] = v6;
  v8[1] = 3221225472;
  v8[2] = __94__UICollectionView__updateOrderingOfViewsInDisappearingViewAnimations_onScreenViewAnimations___block_invoke_759;
  v8[3] = &unk_1E16BD6E0;
  v8[4] = self;
  v8[5] = v10;
  objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v8);

}

- (void)_rebaseContentOffsetAnchorOrScrollTargetForUpdate:(id)a3
{
  id v4;
  id v5;
  unsigned int (**v6)(void *, NSIndexPath *);
  NSIndexPath *v7;
  NSIndexPath *v8;
  NSIndexPath *v9;
  unint64_t v10;
  unint64_t v11;
  NSIndexPath *v12;
  NSIndexPath *scrollingTargetIndexPath;
  NSIndexPath *v14;
  NSIndexPath *contentOffsetRestorationAnchor;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSIndexPath *v20;
  _QWORD aBlock[4];
  id v22;
  uint8_t buf[4];
  UICollectionView *v24;
  __int16 v25;
  NSIndexPath *v26;
  __int16 v27;
  NSIndexPath *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (dyld_program_sdk_at_least())
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __70__UICollectionView__rebaseContentOffsetAnchorOrScrollTargetForUpdate___block_invoke;
    aBlock[3] = &unk_1E16BCF70;
    v5 = v4;
    v22 = v5;
    v6 = (unsigned int (**)(void *, NSIndexPath *))_Block_copy(aBlock);
    v7 = self->_scrollingTargetIndexPath;
    v8 = self->_contentOffsetRestorationAnchor;
    v9 = v8;
    if (v7)
    {
      if (v6[2](v6, v7))
      {
        v10 = qword_1EDDC6580;
        if (!qword_1EDDC6580)
        {
          v10 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v10, (unint64_t *)&qword_1EDDC6580);
        }
        if ((*(_BYTE *)v10 & 1) != 0)
        {
          v17 = *(NSObject **)(v10 + 8);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            v24 = self;
            _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, "_rebaseContentOffsetAnchorOrScrollTarget: cv == %p; clearing scrolling target index path",
              buf,
              0xCu);
          }
        }
        -[UICollectionView _clearTargetIndexPathForScrolling](self, "_clearTargetIndexPathForScrolling");
      }
      else
      {
        objc_msgSend(v5, "finalIndexPathForInitialIndexPath:", v7);
        v12 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
        scrollingTargetIndexPath = self->_scrollingTargetIndexPath;
        self->_scrollingTargetIndexPath = v12;

      }
    }
    else if (v8)
    {
      if (v6[2](v6, v8))
      {
        v11 = qword_1EDDC6588;
        if (!qword_1EDDC6588)
        {
          v11 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v11, (unint64_t *)&qword_1EDDC6588);
        }
        if ((*(_BYTE *)v11 & 1) != 0)
        {
          v18 = *(NSObject **)(v11 + 8);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            v24 = self;
            _os_log_impl(&dword_185066000, v18, OS_LOG_TYPE_ERROR, "_rebaseContentOffsetAnchorOrScrollTarget: cv == %p; clearing restoration anchor that was moved or deleted",
              buf,
              0xCu);
          }
        }
        -[UICollectionView _clearContentOffsetRestorationAnchor](self, "_clearContentOffsetRestorationAnchor");
      }
      else
      {
        objc_msgSend(v5, "finalIndexPathForInitialIndexPath:", v9);
        v14 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
        contentOffsetRestorationAnchor = self->_contentOffsetRestorationAnchor;
        self->_contentOffsetRestorationAnchor = v14;

        v16 = qword_1EDDC6590;
        if (!qword_1EDDC6590)
        {
          v16 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v16, (unint64_t *)&qword_1EDDC6590);
        }
        if ((*(_BYTE *)v16 & 1) != 0)
        {
          v19 = *(NSObject **)(v16 + 8);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            v20 = self->_contentOffsetRestorationAnchor;
            *(_DWORD *)buf = 134218498;
            v24 = self;
            v25 = 2112;
            v26 = v9;
            v27 = 2112;
            v28 = v20;
            _os_log_impl(&dword_185066000, v19, OS_LOG_TYPE_ERROR, "_rebaseContentOffsetAnchorOrScrollTarget: cv == %p; rebased restoration anchor from %@ to %@",
              buf,
              0x20u);
          }
        }
      }
    }

  }
}

- (void)_createAndAppendViewAnimationsForDeletesInCurrentUpdate:(id)a3 disappearingAnimations:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  int v28;
  UICollectionViewLayout *layout;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  UICollectionViewAnimation *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSMutableArray *obj;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[2];
  void (*v59)(id *, uint64_t);
  void *v60;
  UICollectionView *v61;
  id v62;
  id v63;
  _BYTE v64[128];
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v58[0] = MEMORY[0x1E0C809B0];
  v58[1] = 3221225472;
  v59 = __99__UICollectionView__createAndAppendViewAnimationsForDeletesInCurrentUpdate_disappearingAnimations___block_invoke;
  v60 = &unk_1E16BD5A0;
  v61 = self;
  v48 = v6;
  v62 = v48;
  v47 = v7;
  v63 = v47;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  obj = self->_deleteItems;
  v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v54, v65, 16);
  if (v8)
  {
    v9 = v8;
    v10 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
    v11 = *(_QWORD *)v55;
    v43 = *(_QWORD *)v55;
    do
    {
      v12 = 0;
      v42 = v9;
      do
      {
        if (*(_QWORD *)v55 != v11)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD **)(*((_QWORD *)&v54 + 1) + 8 * v12);
        if (v13 && v13[6] == 0x7FFFFFFFFFFFFFFFLL)
        {
          v45 = v12;
          -[UICollectionViewUpdateItem _indexPath](v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v14, "section");

          v16 = v10[919];
          v17 = -[UICollectionViewData numberOfItemsInSection:]((*(_QWORD **)((char *)&self->super.super.super.super.isa + v16))[2], v15);
          v18 = (*(_QWORD **)((char *)&self->super.super.super.super.isa + v16))[2];
          objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0, v15);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = -[UICollectionViewData globalIndexForItemAtIndexPath:](v18, v19);

          if (v17 >= 1)
          {
            do
            {
              v59((id *)v58, v20++);
              --v17;
            }
            while (v17);
          }
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          -[UICollectionViewData existingSupplementaryLayoutAttributesInSection:]((*(_QWORD **)((char *)&self->super.super.super.super.isa + v16))[2], v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v50, v64, 16);
          if (v22)
          {
            v23 = v22;
            v49 = *(_QWORD *)v51;
            v46 = v21;
            do
            {
              v24 = 0;
              do
              {
                if (*(_QWORD *)v51 != v49)
                  objc_enumerationMutation(v46);
                v25 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * v24);
                v26 = -[UICollectionView _visibleViewForLayoutAttributes:](self, "_visibleViewForLayoutAttributes:", v25, v42);
                if (v26)
                {
                  v27 = v26;
                  if (v25)
                    v28 = (*(unsigned __int16 *)(v25 + 288) >> 1) & 1;
                  else
                    LOBYTE(v28) = 0;
                  layout = self->_layout;
                  -[UIBarButtonItemGroup _items]((id *)v25);
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend((id)v25, "indexPath");
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  if ((v28 & 1) != 0)
                    -[UICollectionViewLayout finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:](layout, "finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:", v30, v31);
                  else
                    -[UICollectionViewLayout finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:](layout, "finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:", v30, v31);
                  v32 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v32)
                  {
                    if (dyld_program_sdk_at_least())
                    {
                      v33 = objc_msgSend(v32, "zIndex");
                      objc_msgSend(v27, "_layoutAttributes");
                      v34 = (void *)objc_claimAutoreleasedReturnValue();
                      v35 = objc_msgSend(v34, "zIndex");

                      if (v33 != v35)
                        -[UICollectionView _addControlledSubview:atZIndex:forced:](self, "_addControlledSubview:atZIndex:forced:", v27, objc_msgSend(v32, "zIndex"), 1);
                    }
                  }
                  else
                  {
                    v32 = (void *)objc_msgSend((id)v25, "copy");
                    objc_msgSend(v32, "setAlpha:", 0.0);
                  }
                  -[UICollectionViewLayout _animationForReusableView:toLayoutAttributes:type:](self->_layout, "_animationForReusableView:toLayoutAttributes:type:", v27, v32, 2);
                  v36 = (void *)objc_claimAutoreleasedReturnValue();
                  v37 = -[UICollectionViewAnimation initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:]([UICollectionViewAnimation alloc], "initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:", v27, 2, v32, 1, 1, v36, 0.0, 1.0);
                  objc_msgSend(v48, "addObject:", v37);
                  +[_UICollectionViewItemKey collectionItemKeyForLayoutAttributes:]((uint64_t)_UICollectionViewItemKey, v25);
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v47, "setObject:forKey:", v37, v38);

                }
                ++v24;
              }
              while (v23 != v24);
              v21 = v46;
              v39 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v50, v64, 16);
              v23 = v39;
            }
            while (v39);
            v10 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
            v9 = v42;
          }
          v11 = v43;
          v12 = v45;
        }
        else
        {
          v40 = (*(_QWORD **)((char *)&self->super.super.super.super.isa + v10[919]))[2];
          -[UICollectionViewUpdateItem _indexPath](v13);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v41 = -[UICollectionViewData globalIndexForItemAtIndexPath:](v40, v21);
          v59((id *)v58, v41);
        }

        ++v12;
      }
      while (v12 != v9);
      v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v54, v65, 16);
    }
    while (v9);
  }

}

void __99__UICollectionView__createAndAppendViewAnimationsForDeletesInCurrentUpdate_disappearingAnimations___block_invoke(id *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  UICollectionViewAnimation *v11;
  void *v12;
  id v13;

  -[UICollectionViewData indexPathForItemAtGlobalIndex:](*(_BYTE **)(*((_QWORD *)a1[4] + 275) + 16), a2);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  -[_UICollectionViewSubviewManager visibleCellAtIndexPath:](*((id ***)a1[4] + 363), (uint64_t)v13);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(*((id *)a1[4] + 259), "finalLayoutAttributesForDisappearingItemAtIndexPath:", v13);
    v4 = objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v5 = (void *)v4;
      if (dyld_program_sdk_at_least())
      {
        v6 = objc_msgSend(v5, "zIndex");
        objc_msgSend(v3, "_layoutAttributes");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "zIndex");

        if (v6 != v8)
          objc_msgSend(a1[4], "_addControlledSubview:atZIndex:forced:", v3, objc_msgSend(v5, "zIndex"), 1);
      }
    }
    else
    {
      objc_msgSend(v3, "_layoutAttributes");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = (void *)objc_msgSend(v9, "copy");

      objc_msgSend(v5, "setAlpha:", 0.0);
    }
    objc_msgSend(*((id *)a1[4] + 259), "_animationForReusableView:toLayoutAttributes:type:", v3, v5, 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[UICollectionViewAnimation initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:]([UICollectionViewAnimation alloc], "initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:", v3, 1, v5, 1, 1, v10, 0.0, 1.0);
    objc_msgSend(a1[5], "addObject:", v11);
    +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v13);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[6], "setObject:forKey:", v11, v12);

  }
}

- (void)dealloc
{
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  UICollectionView *v12;
  _UICollectionViewSubviewManager *subviewManager;
  id updateCompletionHandler;
  unint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  objc_super v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  UICollectionView *v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  v4 = WeakRetained;
  if (WeakRetained)
    objc_setAssociatedObject(WeakRetained, (char *)&self->super.super.super.super.isa + 2, 0, (void *)1);

  v5 = objc_loadWeakRetained((id *)&self->_containerScrollView);
  if (v5)
    -[UIView _removeGeometryChangeObserver:](self, v5);
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[UIView subviews](self, "subviews");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v21 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend(v11, "_setCollectionView:", 0);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
    }
    while (v8);
  }

  -[UICollectionViewLayout collectionView](self->_layout, "collectionView");
  v12 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

  if (v12 == self)
    -[UICollectionViewLayout _setCollectionView:](self->_layout, "_setCollectionView:", 0);
  -[_UICollectionViewSubviewRouter setContainer:]((uint64_t)self->_subviewRouter, 0);
  subviewManager = self->_subviewManager;
  if (subviewManager)
    subviewManager->_collectionView = 0;
  updateCompletionHandler = self->_updateCompletionHandler;
  if (updateCompletionHandler)
  {
    self->_updateCompletionHandler = 0;

    v15 = dealloc___s_category_2;
    if (!dealloc___s_category_2)
    {
      v15 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v15, (unint64_t *)&dealloc___s_category_2);
    }
    v16 = *(NSObject **)(v15 + 8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v25 = self;
      _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "UICollectionView (%@) is being deallocated while an update is in flight (animations have not completed) and an unexpected result may occur.", buf, 0xCu);
    }
  }
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "removeObserver:name:object:", self, CFSTR("UIApplicationDidReceiveMemoryWarningNotification"), 0);

  +[_UIHDRUsageCoordinator sharedInstance]();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIHDRUsageCoordinator unregisterForDefaultDynamicRangeChanges:]((uint64_t)v18, self);

  v19.receiver = self;
  v19.super_class = (Class)UICollectionView;
  -[UIScrollView dealloc](&v19, sel_dealloc);
}

uint64_t __50__UICollectionView__sortedDeduplicatedReloadItems__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compareIndexPaths:");
}

void __107__UICollectionView__attributesForItemsVisibleDuringCurrentUpdateWithOldVisibleViews_attributesForNewModel___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v18 = a3;
  v4 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v18);
  v5 = v18;
  if (v4)
  {
    objc_msgSend(v18, "_layoutAttributes");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2200) + 16);
    objc_msgSend(v6, "indexPath");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[UICollectionViewData validatedGlobalIndexForItemAtIndexPath:](v7, v8);

    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 2200), "finalGlobalIndexForInitialGlobalIndex:", v9);
      if (v10 != 0x7FFFFFFFFFFFFFFFLL)
      {
        -[UICollectionViewData layoutAttributesForGlobalItemIndex:](*(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2200) + 24), v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v11;
        if (v11)
        {
          v13 = *(void **)(a1 + 48);
          objc_msgSend(v11, "indexPath");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "objectForKeyedSubscript:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v15)
          {
            v16 = *(void **)(a1 + 48);
            objc_msgSend(v12, "indexPath");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "setObject:forKeyedSubscript:", v12, v17);

          }
        }

      }
    }

    v5 = v18;
  }

}

- (void)_notifyDidScroll
{
  objc_super v2;

  if (self->_didScrollNotificationSuspensionCount <= 0)
  {
    v2.receiver = self;
    v2.super_class = (Class)UICollectionView;
    -[UIScrollView _notifyDidScroll](&v2, sel__notifyDidScroll);
  }
}

- (id)_visibleSupplementaryViewsOfKind:(id)a3
{
  return -[UICollectionView _visibleSupplementaryViewsOfKind:isDecorationView:](self, "_visibleSupplementaryViewsOfKind:isDecorationView:", a3, 0);
}

- (void)_updatePreferredAttributesForCurrentUpdate:(unint64_t)a3
{
  unint64_t v4;
  NSObject *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double x;
  double y;
  double width;
  double height;
  CGFloat v17;
  CGFloat v18;
  _BOOL4 v19;
  void *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  _BOOL4 v31;
  void *v32;
  void *v33;
  void *v34;
  UICollectionViewUpdate *currentUpdate;
  void *v36;
  uint64_t *subviewManager;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  NSObject *v45;
  void *v46;
  __int16 v47;
  int v48;
  unint64_t v49;
  _BOOL4 v50;
  id v51;
  id v52;
  UICollectionView *v53;
  int v54;
  id obj;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint8_t v60[128];
  uint8_t buf[4];
  UICollectionView *v62;
  uint64_t v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  v63 = *MEMORY[0x1E0C80C00];
  if (a3 >= 0x65)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v62 = self;
        _os_log_fault_impl(&dword_185066000, v45, OS_LOG_TYPE_FAULT, "UICollectionView exceeded the maximum allowed number of preferred attribute update passes while preparing update animations. This likely indicates a bug in the sizing implementation of self-sizing views, which prevents the layout from converging on a stable solution. Views may animate incorrectly as a result. %@", buf, 0xCu);
      }

    }
    else
    {
      v4 = _updatePreferredAttributesForCurrentUpdate____s_category;
      if (!_updatePreferredAttributesForCurrentUpdate____s_category)
      {
        v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v4, (unint64_t *)&_updatePreferredAttributesForCurrentUpdate____s_category);
      }
      v5 = *(NSObject **)(v4 + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v62 = self;
        _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "UICollectionView exceeded the maximum allowed number of preferred attribute update passes while preparing update animations. This likely indicates a bug in the sizing implementation of self-sizing views, which prevents the layout from converging on a stable solution. Views may animate incorrectly as a result. %@", buf, 0xCu);
      }
    }
    return;
  }
  v6 = a3;
  v7 = dyld_program_sdk_at_least();
  v8 = *((_QWORD *)&self->_collectionViewFlags + 1);
  *((_QWORD *)&self->_collectionViewFlags + 1) = v8 & 0xFFFFFFFFFFFFFEFFLL;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  x = v9;
  y = v10;
  width = v11;
  height = v12;
  if ((v7 & 1) == 0)
  {
    v17 = CGRectGetWidth(*(CGRect *)&v9) * -0.5;
    v64.origin.x = x;
    v64.origin.y = y;
    v64.size.width = width;
    v64.size.height = height;
    v18 = CGRectGetHeight(v64) * -0.5;
    v65.origin.x = x;
    v65.origin.y = y;
    v65.size.width = width;
    v65.size.height = height;
    v66 = CGRectInset(v65, v17, v18);
    x = v66.origin.x;
    y = v66.origin.y;
    width = v66.size.width;
    height = v66.size.height;
  }
  v19 = -[UICollectionViewLayout _estimatesSupplementaryItems](self->_layout, "_estimatesSupplementaryItems");
  -[UICollectionViewLayout _willPerformUpdateVisibleCellsPass](self->_layout, "_willPerformUpdateVisibleCellsPass");
  v20 = (void *)_UISetCurrentFallbackEnvironment(self);
  v52 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v51 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v21 = dyld_program_sdk_at_least();
  v50 = v19;
  if (v19)
    v22 = dyld_program_sdk_at_least();
  else
    v22 = 0;
  v54 = v22;
  if (((v21 | v22) & 1) != 0)
  {
    v46 = v20;
    v47 = v8;
    v48 = v7;
    v49 = v6;
    -[UICollectionViewLayout _extendedAttributesQueryIncludingOrthogonalScrollingRegions:](self->_layout, "_extendedAttributesQueryIncludingOrthogonalScrollingRegions:", x, y, width, height);
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v60, 16);
    v24 = v54;
    if (!v23)
      goto LABEL_43;
    v25 = v23;
    v26 = *(_QWORD *)v57;
    v53 = self;
    while (1)
    {
      v27 = 0;
      do
      {
        if (*(_QWORD *)v57 != v26)
          objc_enumerationMutation(obj);
        v28 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * v27);
        if (v28)
        {
          v29 = *(_WORD *)(v28 + 288);
          v30 = v29 & 1;
          v31 = (v29 & 3) == 0;
        }
        else
        {
          v30 = 0;
          v31 = 0;
        }
        if ((v30 ^ 1 | v21) == 1 && !v31 | v24)
        {
          objc_msgSend(*(id *)(*((_QWORD *)&v56 + 1) + 8 * v27), "indexPath");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v32)
          {
LABEL_38:

            goto LABEL_39;
          }
          if ((v30 & 1) != 0)
          {
            -[UICollectionViewUpdate initialIndexPathForFinalIndexPath:](self->_currentUpdate, "initialIndexPathForFinalIndexPath:", v32);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v33)
              goto LABEL_37;
            -[_UICollectionViewSubviewManager visibleCellAtIndexPath:]((id **)self->_subviewManager, (uint64_t)v33);
            v34 = (void *)objc_claimAutoreleasedReturnValue();

            if (v34)
            {
              self = v53;
              if (!v31)
              {
LABEL_37:

                v24 = v54;
                goto LABEL_38;
              }
LABEL_31:
              subviewManager = (uint64_t *)self->_subviewManager;
              -[UIBarButtonItemGroup _items]((id *)v28);
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              -[_UICollectionViewSubviewManager visibleSupplementaryOfKind:atIndexPath:](subviewManager, (uint64_t)v38, (uint64_t)v33);
              v39 = (void *)objc_claimAutoreleasedReturnValue();

              if (!v39)
              {
                v40 = v51;
                v41 = (void *)v28;
                goto LABEL_35;
              }
            }
            else
            {
              v40 = v52;
              v41 = v32;
LABEL_35:
              objc_msgSend(v40, "addObject:", v41);
            }
          }
          else
          {
            if (!v31)
            {
              v33 = 0;
              goto LABEL_37;
            }
            currentUpdate = self->_currentUpdate;
            -[UIBarButtonItemGroup _items]((id *)v28);
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            -[UICollectionViewUpdate validatedOldIndexPathForSupplementaryElementOfKind:newIndexPath:]((uint64_t)currentUpdate, v36, v32);
            v33 = (void *)objc_claimAutoreleasedReturnValue();

            if (v33)
            {
              self = v53;
              goto LABEL_31;
            }
          }
          self = v53;
          goto LABEL_37;
        }
LABEL_39:
        ++v27;
      }
      while (v25 != v27);
      v42 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v60, 16);
      v25 = v42;
      if (!v42)
      {
LABEL_43:

        v6 = v49;
        v7 = v48;
        LOWORD(v8) = v47;
        v20 = v46;
        break;
      }
    }
  }
  v43 = -[UICollectionView _updatePreferredAttributesForItemsInCurrentUpdateWithRect:newlyVisible:includeInserts:](self, "_updatePreferredAttributesForItemsInCurrentUpdateWithRect:newlyVisible:includeInserts:", v52, v6 == 0, x, y, width, height);
  if (v50)
    v43 |= -[UICollectionView _updatePreferredAttributesForSupplementariesInCurrentUpdateWithRect:newlyVisible:includeInserts:](self, "_updatePreferredAttributesForSupplementariesInCurrentUpdateWithRect:newlyVisible:includeInserts:", v51, v6 == 0, x, y, width, height);
  _UIRestorePreviousFallbackEnvironment(v20);
  -[UICollectionViewLayout _didPerformUpdateVisibleCellsPassWithLayoutOffset:](self->_layout, "_didPerformUpdateVisibleCellsPassWithLayoutOffset:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  v44 = *((_QWORD *)&self->_collectionViewFlags + 1);
  *((_QWORD *)&self->_collectionViewFlags + 1) = v44 | v8 & 0x100;
  if ((v7 & v43) == 1 && (v44 & 0x100) != 0)
    -[UICollectionView _updatePreferredAttributesForCurrentUpdate:](self, "_updatePreferredAttributesForCurrentUpdate:", v6 + 1);

}

- (unint64_t)_createVisibleViewsForAttributes:(id)a3 fadeForBoundsChange:(BOOL)a4 notifyLayoutForVisibleCellsPass:(BOOL)a5
{
  _BOOL8 v5;
  id v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  char v29;

  v27 = a5;
  v5 = a4;
  v7 = a3;
  if (objc_msgSend(v7, "count"))
  {
    if ((-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes")
       || -[UICollectionViewLayout _estimatesSupplementaryItems](self->_layout, "_estimatesSupplementaryItems"))
      && dyld_program_sdk_at_least()
      && ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_CollectionViewLimitsCellsCreatedPerPass, (uint64_t)CFSTR("CollectionViewLimitsCellsCreatedPerPass"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) != 0|| byte_1ECD75F1C))
    {
      -[UICollectionView _sortAttributesByDistanceToVisibleBoundsOrigin:](self, "_sortAttributesByDistanceToVisibleBoundsOrigin:", v7);
      v25 = 1;
    }
    else
    {
      v25 = 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
    do
    {
      if (v9 == 2)
        v11 = 0;
      else
        v11 = v25;
      v26 = _createVisibleViewsForAttributes_fadeForBoundsChange_notifyLayoutForVisibleCellsPass__categories[v9];
      -[UICollectionView _layoutAttributes:filteredForCategory:](self, "_layoutAttributes:filteredForCategory:", v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v12, "count"))
      {
        do
        {
          -[UICollectionView _createVisibleViewsForSingleCategoryAttributes:limitCreation:fadeForBoundsChange:](self, "_createVisibleViewsForSingleCategoryAttributes:limitCreation:fadeForBoundsChange:", v12, v11, v5);
          v8 += v28;
          if ((v29 & 1) == 0)
            break;
          v13 = v10[873];
          v14 = (char *)self + v13;
          v15 = *(_QWORD *)((char *)&self->super.super.super._responderFlags + v13);
          if ((v15 & 0x80) == 0)
          {
            v16 = *((unsigned __int16 *)v14 + 8) | (v14[18] << 16);
            v17 = *(_QWORD *)v14;
            v18 = v15 & 0xFFFFFFFFFFFFFEFFLL;
            *(_QWORD *)v14 = *(_QWORD *)v14;
            *((_QWORD *)v14 + 1) = v15 & 0xFFFFFFFFFFFFFEFFLL;
            *((_WORD *)v14 + 8) = v16;
            v14[18] = BYTE2(v16);
            if (v27)
            {
              -[UIScrollView contentOffset](self, "contentOffset");
              -[UICollectionViewLayout _didPerformUpdateVisibleCellsPassWithLayoutOffset:](self->_layout, "_didPerformUpdateVisibleCellsPassWithLayoutOffset:", v19 - self->_lastLayoutOffset.x, v20 - self->_lastLayoutOffset.y);
              -[UICollectionViewLayout _willPerformUpdateVisibleCellsPass](self->_layout, "_willPerformUpdateVisibleCellsPass");
              v16 = *(unsigned __int16 *)((char *)&self->super.super.super.__layeringSceneIdentity + v13) | (*((unsigned __int8 *)&self->super.super.super.__layeringSceneIdentity + v13 + 2) << 16);
              v17 = *(uint64_t *)((char *)&self->super.super.super.super.isa + v13);
              v18 = *(_QWORD *)((char *)&self->super.super.super._responderFlags + v13);
            }
            v15 = v18 | v15 & 0x100;
            v21 = (char *)self + v13;
            *((_WORD *)v21 + 8) = v16;
            *(_QWORD *)v21 = v17;
            *((_QWORD *)v21 + 1) = v15;
            v21[18] = BYTE2(v16);
            if ((v18 & 0x100) != 0)
            {
              -[UICollectionView _updatedNewlyAppearingLayoutAttributesForCurrentVisibleBounds:](self, "_updatedNewlyAppearingLayoutAttributesForCurrentVisibleBounds:", v5);
              v22 = objc_claimAutoreleasedReturnValue();

              -[UICollectionView _layoutAttributes:filteredForCategory:](self, "_layoutAttributes:filteredForCategory:", v22, v26);
              v23 = objc_claimAutoreleasedReturnValue();

              v15 = *((_QWORD *)v21 + 1);
              v12 = (void *)v23;
              v7 = (id)v22;
            }
            v10 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
          }
        }
        while ((v15 & 0x80) == 0);
      }

      ++v9;
    }
    while (v9 != 3);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (id)_layoutAttributes:(id)a3 filteredForCategory:(unint64_t)a4
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v19;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v19 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v11);
        if (v12)
        {
          v13 = *(_WORD *)(v12 + 288);
          if ((v13 & 2) != 0)
            v14 = 2;
          else
            v14 = 1;
          if ((v13 & 1) != 0)
            v15 = 0;
          else
            v15 = v14;
        }
        else
        {
          v15 = 0;
        }
        if (v15 == a4)
          objc_msgSend(v6, "addObject:", (_QWORD)v18);
        ++v11;
      }
      while (v9 != v11);
      v16 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      v9 = v16;
    }
    while (v16);
  }

  return v6;
}

- (BOOL)_updatePreferredAttributesForItemsInCurrentUpdateWithRect:(CGRect)a3 newlyVisible:(id)a4 includeInserts:(BOOL)a5
{
  _BOOL4 v5;
  double height;
  double width;
  double y;
  double x;
  id v11;
  id v12;
  NSMutableArray *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _QWORD *v18;
  uint64_t v19;
  UICollectionViewData *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  _UICollectionViewSubviewManager *subviewManager;
  id v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  NSMutableOrderedSet *indexPathsRequiringPreferredAttributes;
  BOOL v31;
  NSObject *v33;
  NSObject *v34;
  id v35;
  void *v36;
  void *v37;
  NSObject *v38;
  NSObject *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  NSMutableArray *v44;
  UICollectionView *v45;
  _QWORD v46[5];
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[4];
  UICollectionView *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  _BYTE v58[128];
  uint64_t v59;

  v5 = a5;
  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v59 = *MEMORY[0x1E0C80C00];
  v11 = a4;
  v12 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  if (v5)
  {
    v43 = v11;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v13 = self->_insertItems;
    v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v48, v58, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v49;
      v44 = v13;
      v45 = self;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v49 != v16)
            objc_enumerationMutation(v13);
          v18 = *(_QWORD **)(*((_QWORD *)&v48 + 1) + 8 * i);
          if (v18 && v18[6] == 0x7FFFFFFFFFFFFFFFLL)
          {
            v19 = v18[3];
            v20 = self->_currentUpdate->_newModel;
            if (v19 < -[UICollectionViewData numberOfSections]((uint64_t)v20))
            {
              v21 = -[UICollectionViewData numberOfItemsInSection:]((uint64_t)v20, v19);
              if (v21 >= 1)
              {
                v22 = v21;
                for (j = 0; j != v22; ++j)
                {
                  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", j, v19);
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v12, "addObject:", v24);

                }
                v13 = v44;
                self = v45;
              }
            }
          }
          else
          {
            objc_msgSend(v18, "indexPathAfterUpdate");
            v20 = (UICollectionViewData *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "addObject:", v20);
          }

        }
        v15 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v48, v58, 16);
      }
      while (v15);
    }

    v11 = v43;
  }
  subviewManager = self->_subviewManager;
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = __106__UICollectionView__updatePreferredAttributesForItemsInCurrentUpdateWithRect_newlyVisible_includeInserts___block_invoke;
  v46[3] = &unk_1E16BD728;
  v46[4] = self;
  v26 = v12;
  v47 = v26;
  if (subviewManager)
    -[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v46);
  v27 = qword_1EDDC6708;
  if (!qword_1EDDC6708)
  {
    v27 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v27, (unint64_t *)&qword_1EDDC6708);
  }
  if ((*(_BYTE *)v27 & 1) != 0)
  {
    v33 = *(NSObject **)(v27 + 8);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v34 = v33;
      v35 = v11;
      objc_msgSend(v11, "valueForKey:", CFSTR("_ui_shortDescription"));
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "valueForKey:", CFSTR("_ui_shortDescription"));
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v53 = self;
      v54 = 2112;
      v55 = v36;
      v56 = 2112;
      v57 = v37;
      _os_log_impl(&dword_185066000, v34, OS_LOG_TYPE_ERROR, "_updatePreferredAttributesForCurrentUpdate: cv == %p; indexPathsBecomingVisible == %@; indexPathsToRecompute == %@",
        buf,
        0x20u);

      v11 = v35;
    }
  }
  v28 = qword_1EDDC6710;
  if (!qword_1EDDC6710)
  {
    v28 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v28, (unint64_t *)&qword_1EDDC6710);
  }
  if ((*(_BYTE *)v28 & 1) != 0)
  {
    v38 = *(NSObject **)(v28 + 8);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v39 = v38;
      v40 = v11;
      objc_msgSend(v11, "valueForKey:", CFSTR("_ui_shortDescription"));
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "valueForKey:", CFSTR("_ui_shortDescription"));
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v53 = self;
      v54 = 2112;
      v55 = v41;
      v56 = 2112;
      v57 = v42;
      _os_log_impl(&dword_185066000, v39, OS_LOG_TYPE_ERROR, "[UICV %p] _updatePreferredAttributesForCurrentUpdate indexPathsBecomingVisible = %@; indexPathsToRecompute = %@",
        buf,
        0x20u);

      v11 = v40;
    }
  }
  if (objc_msgSend(v11, "count"))
    objc_msgSend(v26, "unionSet:", v11);
  if (-[NSMutableOrderedSet count](self->_indexPathsRequiringPreferredAttributes, "count"))
  {
    -[NSMutableOrderedSet set](self->_indexPathsRequiringPreferredAttributes, "set");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "unionSet:", v29);

    indexPathsRequiringPreferredAttributes = self->_indexPathsRequiringPreferredAttributes;
    self->_indexPathsRequiringPreferredAttributes = 0;

  }
  v31 = -[UICollectionView _updatePreferredAttributesForItemsInCurrentUpdate:rect:](self, "_updatePreferredAttributesForItemsInCurrentUpdate:rect:", v26, x, y, width, height);

  return v31;
}

- (void)_setKeepsFirstResponderVisibleOnBoundsChange:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x100000000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFEFFFFFFFFFFFLL | v3;
}

- (void)_adjustForAutomaticKeyboardInfo:(id)a3 animated:(BOOL)a4 lastAdjustment:(double *)a5
{
  _BOOL8 v6;
  id v8;
  objc_super v9;

  v6 = a4;
  v8 = a3;
  if (-[UIScrollView _isFirstResponderKeyboardAvoidanceEnabled](self, "_isFirstResponderKeyboardAvoidanceEnabled"))
  {
    v9.receiver = self;
    v9.super_class = (Class)UICollectionView;
    -[UIScrollView _adjustForAutomaticKeyboardInfo:animated:lastAdjustment:](&v9, sel__adjustForAutomaticKeyboardInfo_animated_lastAdjustment_, v8, v6, a5);
    if (*a5 != 0.0)
      -[UICollectionView _scrollFirstResponderCellToVisible:](self, "_scrollFirstResponderCellToVisible:", 1, *a5);
  }

}

- (void)_scrollFirstResponderCellToVisible:(BOOL)a3
{
  _UICollectionViewSubviewManager *subviewManager;
  _QWORD v4[5];
  BOOL v5;

  subviewManager = self->_subviewManager;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __55__UICollectionView__scrollFirstResponderCellToVisible___block_invoke;
  v4[3] = &unk_1E16BD948;
  v4[4] = self;
  v5 = a3;
  if (subviewManager)
    -[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v4);
}

void __36__UICollectionView__indexBarEntries__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  objc_msgSend(v5, "_indexPathForEntryWithTitle:atIndex:validateTitles:", v6, a3, 0);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  +[UIIndexBarEntry entryWithTitle:](UIIndexBarEntry, "entryWithTitle:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
    objc_msgSend(v7, "setIndexPath:", v8);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);

}

- (id)_indexPathForEntryWithTitle:(id)a3 atIndex:(int64_t)a4 validateTitles:(BOOL)a5
{
  _BOOL4 v5;
  id v9;
  void *v10;
  uint64_t v11;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  id WeakRetained;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;

  v5 = a5;
  v9 = a3;
  if (v5)
  {
    -[UICollectionView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "count");

    if (!v11)
      goto LABEL_15;
  }
  p_collectionViewFlags = &self->_collectionViewFlags;
  if ((*(_QWORD *)&self->_collectionViewFlags & 0x1000000000000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
    objc_msgSend(WeakRetained, "_collectionView:indexPathForSectionIndexTitle:atIndex:", self, v9, a4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
      goto LABEL_8;
    p_collectionViewFlags = &self->_collectionViewFlags;
  }
  if ((*((_QWORD *)p_collectionViewFlags + 1) & 1) == 0
    || (v15 = objc_loadWeakRetained((id *)&self->_dataSource),
        objc_msgSend(v15, "collectionView:indexPathForIndexTitle:atIndex:", self, v9, a4),
        v14 = (void *)objc_claimAutoreleasedReturnValue(),
        v15,
        !v14))
  {
    if (-[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData) > a4
      && -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, a4) >= 1)
    {
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", 0, a4);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_16;
    }
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
LABEL_8:
  v16 = objc_msgSend(v14, "section");
  if (-[UICollectionView numberOfSections](self, "numberOfSections") <= v16
    || objc_msgSend(v14, "item") != 0x7FFFFFFFFFFFFFFFLL
    && (v17 = -[UICollectionView numberOfItemsInSection:](self, "numberOfItemsInSection:", v16),
        v17 <= objc_msgSend(v14, "item")))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 8854, CFSTR("no cell for index path (%@) - the collection view's data source must return an index path for a valid UICollectionViewCell from -collectionView:indexPathForIndexTitle:atIndex:"), v14);

  }
LABEL_16:

  return v14;
}

uint64_t __41__UICollectionView_selectionFollowsFocus__block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(*(id *)(a1 + 32), "_focusBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "defaultValueForSelectionFollowsFocusInCollectionView:", *(_QWORD *)(a1 + 32));

  return v3;
}

- (void)setDelegate:(id)delegate
{
  id v4;
  char v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  objc_super v123;
  _QWORD block[4];
  id v125;
  UICollectionView *v126;

  v4 = delegate;
  if (!v4)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  v5 = dyld_program_sdk_at_least();
  v6 = v4;
  if ((v5 & 1) == 0)
  {
    v7 = objc_msgSend(v4, sel_allowsWeakReference);
    v6 = v4;
    if ((v7 & 1) == 0)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __32__UICollectionView_setDelegate___block_invoke;
      block[3] = &unk_1E16B1B50;
      v8 = v4;
      v125 = v8;
      v126 = self;
      if (setDelegate__once != -1)
      {
        dispatch_once(&setDelegate__once, block);
        v8 = v125;
      }

      goto LABEL_7;
    }
  }
LABEL_8:
  v9 = v6;

  -[UIScrollView delegate](self, "delegate");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (v9 == v10)
  {
    if (v9)
    {
      v11 = v9;
      goto LABEL_126;
    }
    if ((*(_DWORD *)&self->_collectionViewFlags & 0x80000000) == 0)
    {
      v11 = 0;
      goto LABEL_126;
    }
  }
  v123.receiver = self;
  v123.super_class = (Class)UICollectionView;
  -[UIScrollView setDelegate:](&v123, sel_setDelegate_, v9);
  -[UIScrollView delegate](self, "delegate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  p_collectionViewFlags = &self->_collectionViewFlags;
  *(_QWORD *)&self->_collectionViewFlags = *(_QWORD *)&self->_collectionViewFlags & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)(v11 != 0) << 31);
  *(_QWORD *)&self->_collectionViewFlags = *(_QWORD *)&self->_collectionViewFlags & 0xFFFFFFFFFFFFFFFELL | objc_opt_respondsToSelector() & 1;
  v13 = objc_opt_respondsToSelector();
  v14 = 2;
  if ((v13 & 1) == 0)
    v14 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFFFFDLL | v14;
  v15 = objc_opt_respondsToSelector();
  v16 = 4;
  if ((v15 & 1) == 0)
    v16 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFFFFBLL | v16;
  v17 = objc_opt_respondsToSelector();
  v18 = 8;
  if ((v17 & 1) == 0)
    v18 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFFFF7 | v18;
  v19 = objc_opt_respondsToSelector();
  v20 = 16;
  if ((v19 & 1) == 0)
    v20 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFFFEFLL | v20;
  v21 = objc_opt_respondsToSelector();
  v22 = 32;
  if ((v21 & 1) == 0)
    v22 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFFFDFLL | v22;
  v23 = objc_opt_respondsToSelector();
  v24 = 64;
  if ((v23 & 1) == 0)
    v24 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFFFBFLL | v24;
  v25 = objc_opt_respondsToSelector();
  v26 = 256;
  if ((v25 & 1) == 0)
    v26 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFFEFFLL | v26;
  v27 = objc_opt_respondsToSelector();
  v28 = 512;
  if ((v27 & 1) == 0)
    v28 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFFDFFLL | v28;
  v29 = objc_opt_respondsToSelector();
  v30 = 1024;
  if ((v29 & 1) == 0)
    v30 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFFBFFLL | v30;
  v31 = objc_opt_respondsToSelector();
  v32 = 2048;
  if ((v31 & 1) == 0)
    v32 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFF7FFLL | v32;
  if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v33 = 128;
    else
      v33 = 0;
  }
  else
  {
    v33 = 0;
  }
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFFF7FLL | v33;
  v34 = objc_opt_respondsToSelector();
  v35 = 4096;
  if ((v34 & 1) == 0)
    v35 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFEFFFLL | v35;
  v36 = objc_opt_respondsToSelector();
  v37 = 0x2000;
  if ((v36 & 1) == 0)
    v37 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFDFFFLL | v37;
  v38 = objc_opt_respondsToSelector();
  v39 = 0x4000;
  if ((v38 & 1) == 0)
    v39 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFFBFFFLL | v39;
  v40 = objc_opt_respondsToSelector();
  v41 = 0x8000;
  if ((v40 & 1) == 0)
    v41 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFF7FFFLL | v41;
  v42 = objc_opt_respondsToSelector();
  v43 = 0x40000000;
  if ((v42 & 1) == 0)
    v43 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFBFFFFFFFLL | v43;
  v44 = objc_opt_respondsToSelector();
  v45 = 0x10000;
  if ((v44 & 1) == 0)
    v45 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFEFFFFLL | v45;
  v46 = objc_opt_respondsToSelector();
  v47 = 0x20000;
  if ((v46 & 1) == 0)
    v47 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFDFFFFLL | v47;
  v48 = objc_opt_respondsToSelector();
  v49 = 0x40000;
  if ((v48 & 1) == 0)
    v49 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFFBFFFFLL | v49;
  v50 = objc_opt_respondsToSelector();
  v51 = 0x80000;
  if ((v50 & 1) == 0)
    v51 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFF7FFFFLL | v51;
  v52 = objc_opt_respondsToSelector();
  v53 = 0x100000;
  if ((v52 & 1) == 0)
    v53 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFEFFFFFLL | v53;
  v54 = objc_opt_respondsToSelector();
  v55 = 0x200000;
  if ((v54 & 1) == 0)
    v55 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFDFFFFFLL | v55;
  v56 = objc_opt_respondsToSelector();
  v57 = 0x400000;
  if ((v56 & 1) == 0)
    v57 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFFBFFFFFLL | v57;
  v58 = objc_opt_respondsToSelector();
  v59 = 0x800000;
  if ((v58 & 1) == 0)
    v59 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFF7FFFFFLL | v59;
  v60 = objc_opt_respondsToSelector();
  v61 = 0x1000000;
  if ((v60 & 1) == 0)
    v61 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFEFFFFFFLL | v61;
  v62 = objc_opt_respondsToSelector();
  v63 = 0x2000000;
  if ((v62 & 1) == 0)
    v63 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFDFFFFFFLL | v63;
  v64 = objc_opt_respondsToSelector();
  v65 = 0x4000000;
  if ((v64 & 1) == 0)
    v65 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFFBFFFFFFLL | v65;
  v66 = objc_opt_respondsToSelector();
  v67 = 0x8000000;
  if ((v66 & 1) == 0)
    v67 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFF7FFFFFFLL | v67;
  v68 = objc_opt_respondsToSelector();
  v69 = 0x10000000;
  if ((v68 & 1) == 0)
    v69 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFEFFFFFFFLL | v69;
  v70 = objc_opt_respondsToSelector();
  v71 = 0x20000000;
  if ((v70 & 1) == 0)
    v71 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFFDFFFFFFFLL | v71;
  v72 = objc_opt_respondsToSelector();
  v73 = 0x8000000000000;
  if ((v72 & 1) == 0)
    v73 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFF7FFFFFFFFFFFFLL | v73;
  v74 = objc_opt_respondsToSelector();
  v75 = 0x10000000000000;
  if ((v74 & 1) == 0)
    v75 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFEFFFFFFFFFFFFFLL | v75;
  v76 = objc_opt_respondsToSelector();
  v77 = 0x100000000;
  if ((v76 & 1) == 0)
    v77 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFEFFFFFFFFLL | v77;
  v78 = objc_opt_respondsToSelector();
  v79 = 0x200000000;
  if ((v78 & 1) == 0)
    v79 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFDFFFFFFFFLL | v79;
  v80 = objc_opt_respondsToSelector();
  v81 = 0x400000000;
  if ((v80 & 1) == 0)
    v81 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFFBFFFFFFFFLL | v81;
  v82 = objc_opt_respondsToSelector();
  v83 = 0x4000000000;
  if ((v82 & 1) == 0)
    v83 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFBFFFFFFFFFLL | v83;
  v84 = objc_opt_respondsToSelector();
  v85 = 0x8000000000;
  if ((v84 & 1) == 0)
    v85 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFF7FFFFFFFFFLL | v85;
  v86 = objc_opt_respondsToSelector();
  v87 = 0x10000000000;
  if ((v86 & 1) == 0)
    v87 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFEFFFFFFFFFFLL | v87;
  v88 = objc_opt_respondsToSelector();
  v89 = 0x20000000000;
  if ((v88 & 1) == 0)
    v89 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFDFFFFFFFFFFLL | v89;
  v90 = objc_opt_respondsToSelector();
  v91 = *((unsigned __int8 *)&self->_collectionViewFlags + 18);
  v92 = *((unsigned __int16 *)&self->_collectionViewFlags + 8);
  v94 = *(_QWORD *)p_collectionViewFlags;
  v93 = *((_QWORD *)&self->_collectionViewFlags + 1);
  v95 = 0x40000000000;
  if ((v90 & 1) == 0)
    v95 = 0;
  v96 = v94 & 0xFFFFFBFFFFFFFFFFLL | v95;
  *(_QWORD *)p_collectionViewFlags = v96;
  if ((v94 & 0x700000000) != 0)
  {
    v97 = v92 | (v91 << 16);
    v98 = v96 & 0xFFFF87C7FFFFFFFFLL;
  }
  else
  {
    v99 = objc_opt_respondsToSelector();
    v100 = 0x800000000;
    if ((v99 & 1) == 0)
      v100 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFF7FFFFFFFFLL | v100;
    v101 = objc_opt_respondsToSelector();
    v102 = 0x1000000000;
    if ((v101 & 1) == 0)
      v102 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFEFFFFFFFFFLL | v102;
    v103 = objc_opt_respondsToSelector();
    v104 = 0x2000000000;
    if ((v103 & 1) == 0)
      v104 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFFFDFFFFFFFFFLL | v104;
    if (!_os_feature_enabled_impl() || !_UIIsPrivateMainBundle())
      goto LABEL_115;
    v105 = objc_opt_respondsToSelector();
    v106 = 0x80000000000;
    if ((v105 & 1) == 0)
      v106 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFF7FFFFFFFFFFLL | v106;
    v107 = objc_opt_respondsToSelector();
    v108 = 0x100000000000;
    if ((v107 & 1) == 0)
      v108 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFEFFFFFFFFFFFLL | v108;
    v109 = objc_opt_respondsToSelector();
    v110 = 0x200000000000;
    if ((v109 & 1) == 0)
      v110 = 0;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFFDFFFFFFFFFFFLL | v110;
    v111 = objc_opt_respondsToSelector();
    v97 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    v93 = *((_QWORD *)&self->_collectionViewFlags + 1);
    v112 = 0x400000000000;
    if ((v111 & 1) == 0)
      v112 = 0;
    v98 = *(_QWORD *)p_collectionViewFlags & 0xFFFFBFFFFFFFFFFFLL | v112;
  }
  *(_QWORD *)p_collectionViewFlags = v98;
  *((_QWORD *)&self->_collectionViewFlags + 1) = v93;
  *((_WORD *)&self->_collectionViewFlags + 8) = v97;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v97);
LABEL_115:
  v113 = objc_opt_respondsToSelector();
  v114 = 0x800000000000;
  if ((v113 & 1) == 0)
    v114 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFF7FFFFFFFFFFFLL | v114;
  v115 = objc_opt_respondsToSelector();
  v116 = 0x1000000000000;
  if ((v115 & 1) == 0)
    v116 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFEFFFFFFFFFFFFLL | v116;
  v117 = objc_opt_respondsToSelector();
  v118 = 0x4000000000000;
  if ((v117 & 1) == 0)
    v118 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFBFFFFFFFFFFFFLL | v118;
  v119 = objc_opt_respondsToSelector();
  v120 = 0x2000000000000;
  if ((v119 & 1) == 0)
    v120 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFFDFFFFFFFFFFFFLL | v120;
  v121 = objc_opt_respondsToSelector();
  v122 = 0x20000000000000;
  if ((v121 & 1) == 0)
    v122 = 0;
  *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags & 0xFFDFFFFFFFFFFFFFLL | v122;
  -[UICollectionView _configureContextMenuInteractionIfNeeded](self, "_configureContextMenuInteractionIfNeeded");
  -[UICollectionView _configureSceneActivationInteractionIfNeeded](self, "_configureSceneActivationInteractionIfNeeded");
LABEL_126:

}

- (void)_configureSceneActivationInteractionIfNeeded
{
  uint64_t v3;
  int v4;
  UIWindowSceneActivationInteraction *sceneActivationInteraction;
  BOOL v6;
  UIWindowSceneActivationInteraction *v7;
  UIWindowSceneActivationInteraction *v8;
  UIWindowSceneActivationInteraction *v9;
  UIWindowSceneActivationInteraction *v10;
  uint64_t v11;
  uint64_t v12;
  id (*v13)(uint64_t, double, double);
  void *v14;
  id v15;
  id location;

  v3 = *(_QWORD *)&self->_collectionViewFlags & 0x1800000000000;
  v4 = objc_msgSend((id)UIApp, "supportsMultipleScenes");
  sceneActivationInteraction = self->_sceneActivationInteraction;
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (sceneActivationInteraction)
    {
      -[UIView removeInteraction:](self, "removeInteraction:");
      v7 = self->_sceneActivationInteraction;
      self->_sceneActivationInteraction = 0;

    }
  }
  else if (!sceneActivationInteraction)
  {
    objc_initWeak(&location, self);
    v8 = [UIWindowSceneActivationInteraction alloc];
    v11 = MEMORY[0x1E0C809B0];
    v12 = 3221225472;
    v13 = __64__UICollectionView__configureSceneActivationInteractionIfNeeded__block_invoke;
    v14 = &unk_1E16BDAB8;
    objc_copyWeak(&v15, &location);
    v9 = -[UIWindowSceneActivationInteraction initWithConfigurationProvider:errorHandler:](v8, "initWithConfigurationProvider:errorHandler:", &v11, &__block_literal_global_934);
    v10 = self->_sceneActivationInteraction;
    self->_sceneActivationInteraction = v9;

    -[UIView addInteraction:](self, "addInteraction:", self->_sceneActivationInteraction, v11, v12, v13, v14);
    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

- (void)_configureContextMenuInteractionIfNeeded
{
  _BOOL4 v3;
  UIContextMenuInteraction *contextMenuInteraction;
  UIContextMenuInteraction *v5;
  UIContextMenuInteraction *v6;
  UIContextMenuInteraction *v7;

  v3 = -[UICollectionView _delegateSupportsMenuInteraction](self, "_delegateSupportsMenuInteraction");
  contextMenuInteraction = self->_contextMenuInteraction;
  if (v3)
  {
    if (!contextMenuInteraction)
    {
      v5 = -[UIContextMenuInteraction initWithDelegate:]([UIContextMenuInteraction alloc], "initWithDelegate:", self);
      v6 = self->_contextMenuInteraction;
      self->_contextMenuInteraction = v5;

      -[UIView addInteraction:](self, "addInteraction:", self->_contextMenuInteraction);
    }
  }
  else if (contextMenuInteraction)
  {
    -[UIView removeInteraction:](self, "removeInteraction:");
    v7 = self->_contextMenuInteraction;
    self->_contextMenuInteraction = 0;

  }
}

- (BOOL)_delegateSupportsMenuInteraction
{
  return (*(_QWORD *)&self->_collectionViewFlags & 0x180900000000) != 0;
}

void __49__UICollectionView__updateSections_updateAction___block_invoke(uint64_t a1, uint64_t a2)
{
  UICollectionViewUpdateItem *v4;
  uint64_t v5;
  void *v6;
  UICollectionViewUpdateItem *v7;

  v4 = [UICollectionViewUpdateItem alloc];
  v5 = *(unsigned int *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[UICollectionViewUpdateItem initWithAction:forIndexPath:](v4, "initWithAction:forIndexPath:", v5, v6);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v7);
}

- (CGPoint)_contentOffsetForScrollingToItemAtIndexPath:(id)a3 atScrollPosition:(unint64_t)a4 additionalInsets:(NSDirectionalEdgeInsets)a5
{
  double trailing;
  double bottom;
  double leading;
  double top;
  id v11;
  double x;
  double y;
  double width;
  double height;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  void *v27;
  __int16 v28;
  UICollectionView *v29;
  uint64_t v30;
  CGPoint result;
  CGRect v32;

  trailing = a5.trailing;
  bottom = a5.bottom;
  leading = a5.leading;
  top = a5.top;
  v30 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  if (-[UICollectionView _validateScrollingTargetIndexPath:raisingExceptionIfNecessary:](self, "_validateScrollingTargetIndexPath:raisingExceptionIfNecessary:", v11, 1))
  {
    v32.origin.x = -[UICollectionView _frameOfElementAtScrollingTargetIndexPath:]((uint64_t)self, v11);
    x = v32.origin.x;
    y = v32.origin.y;
    width = v32.size.width;
    height = v32.size.height;
    if (!CGRectIsNull(v32))
    {
      -[UICollectionView _contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:itemFrame:containingScrollView:clampToScrollableArea:](self, "_contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:itemFrame:containingScrollView:clampToScrollableArea:", v11, a4, self, 1, top, leading, bottom, trailing, x, y, width, height);
      goto LABEL_9;
    }
    v16 = _contentOffsetForScrollingToItemAtIndexPath_atScrollPosition_additionalInsets____s_category;
    if (!_contentOffsetForScrollingToItemAtIndexPath_atScrollPosition_additionalInsets____s_category)
    {
      v16 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v16, (unint64_t *)&_contentOffsetForScrollingToItemAtIndexPath_atScrollPosition_additionalInsets____s_category);
    }
    v17 = *(NSObject **)(v16 + 8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = v17;
      objc_msgSend(v11, "_ui_shortDescription");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138412546;
      v27 = v19;
      v28 = 2112;
      v29 = self;
      _os_log_impl(&dword_185066000, v18, OS_LOG_TYPE_ERROR, "UICollectionView asked to scroll to invalid index path: %@ for which it cannot calculate a target content offset. Ensure your index path is valid. If this is a section index path, your section must have at least one item. Collection view: %@", (uint8_t *)&v26, 0x16u);

    }
  }
  -[UIScrollView contentOffset](self, "contentOffset");
LABEL_9:
  v22 = v20;
  v23 = v21;

  v24 = v22;
  v25 = v23;
  result.y = v25;
  result.x = v24;
  return result;
}

- (CGPoint)_contentOffsetForScrollingToItemAtIndexPath:(id)a3 atScrollPosition:(unint64_t)a4 additionalInsets:(NSDirectionalEdgeInsets)a5 itemFrame:(CGRect)a6 containingScrollView:(id)a7 clampToScrollableArea:(BOOL)a8
{
  _BOOL4 v8;
  double height;
  double y;
  double x;
  double trailing;
  CGFloat bottom;
  double leading;
  double top;
  id v19;
  UICollectionView *v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  void *v68;
  id v69;
  unsigned int (**v70)(_QWORD, double);
  void *v71;
  double v72;
  double v73;
  void *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  unint64_t v80;
  void *v81;
  double v82;
  double v83;
  void *v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double width;
  _QWORD aBlock[4];
  id v102;
  CGPoint result;

  v8 = a8;
  height = a6.size.height;
  width = a6.size.width;
  y = a6.origin.y;
  x = a6.origin.x;
  trailing = a5.trailing;
  bottom = a5.bottom;
  leading = a5.leading;
  top = a5.top;
  v19 = a3;
  v20 = (UICollectionView *)a7;
  if (dyld_program_sdk_at_least() && -[UIScrollView isPagingEnabled](v20, "isPagingEnabled"))
  {
    -[UIScrollView _interpageSpacing](v20, "_interpageSpacing");
    if (v22 == *MEMORY[0x1E0C9D820] && v21 == *(double *)(MEMORY[0x1E0C9D820] + 8))
    {
      -[UIScrollView _pagingOrigin](v20, "_pagingOrigin");
      if (v25 == *MEMORY[0x1E0C9D538] && v24 == *(double *)(MEMORY[0x1E0C9D538] + 8))
      {
        -[UIScrollView _firstPageOffset](v20, "_firstPageOffset");
        if (v28 == 0.0 && v27 == 0.0)
        {
          -[UIScrollView _rectForPageContainingRect:](v20, "_rectForPageContainingRect:", x, y, width, height);
LABEL_77:
          v65 = v29;
          v67 = v30;
          goto LABEL_78;
        }
      }
    }
  }
  -[UIView bounds](v20, "bounds");
  v97 = v31;
  v98 = v32;
  v94 = v33;
  v99 = v34;
  -[UIScrollView _effectiveContentInset](v20, "_effectiveContentInset");
  v39 = 0.0;
  if (v35 >= 0.0)
    v40 = v35;
  else
    v40 = 0.0;
  if (v36 >= 0.0)
    v41 = v36;
  else
    v41 = 0.0;
  if (v37 >= 0.0)
    v42 = v37;
  else
    v42 = 0.0;
  v95 = v42;
  v96 = v40;
  if (v38 >= 0.0)
    v43 = v38;
  else
    v43 = 0.0;
  v93 = v43;
  -[UICollectionViewLayout _supplementaryViewInsetsForScrollingToItemAtIndexPath:](self->_layout, "_supplementaryViewInsetsForScrollingToItemAtIndexPath:", v19);
  v44 = bottom;
  v46 = top + v45;
  v48 = leading + v47;
  v50 = v44 + v49;
  v52 = trailing + v51;
  v53 = -[UIScrollView _contentScrollableAxes](v20, "_contentScrollableAxes");
  if (v53 == 2)
    v54 = 0.0;
  else
    v54 = v52;
  if (v53 == 2)
    v55 = 0.0;
  else
    v55 = v48;
  if (v53 == 1)
  {
    v54 = v52;
    v56 = 0.0;
  }
  else
  {
    v56 = v50;
  }
  if (v53 == 1)
  {
    v55 = v48;
    v57 = 0.0;
  }
  else
  {
    v57 = v46;
  }
  if (v53)
    v58 = v54;
  else
    v58 = 0.0;
  if (v53)
    v59 = v56;
  else
    v59 = 0.0;
  if (v53)
    v60 = v55;
  else
    v60 = 0.0;
  if (v53)
    v39 = v57;
  v61 = -[UIScrollView _contentInsetAdjustmentBehavior](v20, "_contentInsetAdjustmentBehavior", v54, v55, v56);
  -[UICollectionView _contentOffsetFromProposedOffset:forScrollingToItemWithFrame:atScrollPosition:additionalInsets:containingScrollViewBounds:](self, "_contentOffsetFromProposedOffset:forScrollingToItemWithFrame:atScrollPosition:additionalInsets:containingScrollViewBounds:", a4, *(_QWORD *)&v39, *(_QWORD *)&v60, *(_QWORD *)&v59, *(_QWORD *)&v58, v97 + v41, v94 + v96, v98 - (v41 + v93), v99 - (v96 + v95));
  -[UICollectionViewLayout _contentOffsetFromProposedContentOffset:forScrollingToItemAtIndexPath:atScrollPosition:](self->_layout, "_contentOffsetFromProposedContentOffset:forScrollingToItemAtIndexPath:atScrollPosition:", v19, a4, v62 - v41, v63 - v96);
  v65 = v64;
  v67 = v66;
  if (v61 != 2)
  {
    -[UIScrollView _scrollDetentOffsets](v20, "_scrollDetentOffsets");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __151__UICollectionView__contentOffsetForScrollingToItemAtIndexPath_atScrollPosition_additionalInsets_itemFrame_containingScrollView_clampToScrollableArea___block_invoke;
    aBlock[3] = &unk_1E16BD3C0;
    v69 = v68;
    v102 = v69;
    v70 = (unsigned int (**)(_QWORD, double))_Block_copy(aBlock);
    if (!((unsigned int (*)(double))v70[2])(v67))
    {
      objc_msgSend(v69, "lastObject");
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v71, "doubleValue");
      v73 = v72;

      objc_msgSend(v69, "firstObject");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v74, "doubleValue");
      v76 = v75;

      if (v94 <= v76 && v94 >= v73 && v67 > v73 && !v70[2](v70, v94))
      {
        v77 = fmax(v76 - v94, 0.0);
        if ((a4 & 1) != 0)
        {
          v67 = v67 + v77;
        }
        else
        {
          v78 = v67 + v77 * 0.5;
          if ((a4 & 2) != 0)
            v67 = v78;
        }
      }
      if (v67 < v76 && v67 > v73)
      {
        v80 = 0;
        while (objc_msgSend(v69, "count") - 1 > v80)
        {
          objc_msgSend(v69, "objectAtIndexedSubscript:", v80);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v81, "doubleValue");
          v83 = v82;

          objc_msgSend(v69, "objectAtIndexedSubscript:", ++v80);
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v84, "doubleValue");
          v86 = v85;

          if (v67 < v83 && v67 > v86)
          {
            v67 = v83;
            break;
          }
        }
      }
    }

  }
  if (v8)
  {
    if (v20 == self)
    {
      -[UICollectionViewData collectionViewContentRect]((uint64_t)self->_collectionViewData);
    }
    else
    {
      -[UIScrollView contentSize](v20, "contentSize");
      v88 = v87;
      v90 = v89;
    }
    v29 = -[UICollectionView _clampedContentOffset:forScrollableAreaGivenContentSize:inScrollView:]((uint64_t)self, v20, v65, v67, v88, v90);
    goto LABEL_77;
  }
LABEL_78:

  v91 = v65;
  v92 = v67;
  result.y = v92;
  result.x = v91;
  return result;
}

BOOL __151__UICollectionView__contentOffsetForScrollingToItemAtIndexPath_atScrollPosition_additionalInsets_itemFrame_containingScrollView_clampToScrollableArea___block_invoke(uint64_t a1, double a2)
{
  void *v2;
  _QWORD v4[5];

  v2 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __151__UICollectionView__contentOffsetForScrollingToItemAtIndexPath_atScrollPosition_additionalInsets_itemFrame_containingScrollView_clampToScrollableArea___block_invoke_2;
  v4[3] = &__block_descriptor_40_e25_B32__0__NSNumber_8Q16_B24l;
  *(double *)&v4[4] = a2;
  return objc_msgSend(v2, "indexOfObjectPassingTest:", v4) != 0x7FFFFFFFFFFFFFFFLL;
}

- (void)_scrollToItemAtPresentationIndexPath:(id)a3 atScrollPosition:(unint64_t)a4 additionalInsets:(NSDirectionalEdgeInsets)a5 animated:(BOOL)a6
{
  _BOOL8 v6;
  double trailing;
  double bottom;
  double leading;
  double top;
  id v13;
  _UICollectionViewOrthogonalScrollerSectionController *orthogonalScrollerController;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double x;
  double y;
  double width;
  double height;
  unint64_t v36;
  NSObject *v37;
  NSObject *v38;
  __int16 v39;
  int v40;
  double v41;
  double v42;
  uint8_t buf[4];
  uint64_t v44;
  __int16 v45;
  UICollectionView *v46;
  __int16 v47;
  id v48;
  __int16 v49;
  UICollectionView *v50;
  uint64_t v51;
  CGRect v52;

  v6 = a6;
  trailing = a5.trailing;
  bottom = a5.bottom;
  leading = a5.leading;
  top = a5.top;
  v51 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  if (!v13)
    goto LABEL_26;
  -[UICollectionView _clearContentOffsetRestorationAnchor](self, "_clearContentOffsetRestorationAnchor");
  -[UICollectionViewData _prepareToLoadData]((uint64_t)self->_collectionViewData);
  orthogonalScrollerController = self->_orthogonalScrollerController;
  if (orthogonalScrollerController
    && -[_UICollectionViewOrthogonalScrollerSectionController isIndexPathInOrthogonalScrollingSection:]((uint64_t)orthogonalScrollerController, v13))
  {
    -[_UICollectionViewOrthogonalScrollerSectionController scrollToItemAtIndexPath:atScrollPosition:additionalInsets:animated:]((id *)&self->_orthogonalScrollerController->super.isa, v13, a4, v6, top, leading, bottom, trailing);
    if (!dyld_program_sdk_at_least())
      goto LABEL_26;
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  -[UICollectionView _contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:](self, "_contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:", v13, a4, top, leading, bottom, trailing);
  v17 = v16;
  v19 = v18;
  if (v6
    || -[UIScrollView contentInsetAdjustmentBehavior](self, "contentInsetAdjustmentBehavior") == UIScrollViewContentInsetAdjustmentNever)
  {
    goto LABEL_14;
  }
  -[UIScrollView _effectiveContentInset](self, "_effectiveContentInset");
  v21 = v20;
  v23 = v22;
  v41 = v24;
  v42 = v25;
  -[UICollectionView setContentOffset:animated:](self, "setContentOffset:animated:", 0, v17, v19);
  -[UIScrollView _effectiveContentInset](self, "_effectiveContentInset");
  if (v23 != v29 || v21 != v26 || v42 != v28 || v41 != v27)
  {
    -[UICollectionView _contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:](self, "_contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:", v13, a4, top, leading, bottom, trailing);
    v17 = v30;
    v19 = v31;
LABEL_14:
    -[UICollectionView setContentOffset:animated:](self, "setContentOffset:animated:", v6, v17, v19);
  }
  if (dyld_program_sdk_at_least()
    && ((v15 | !-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes")) & 1) == 0)
  {
    v52.origin.x = -[UICollectionView _frameOfElementAtScrollingTargetIndexPath:]((uint64_t)self, v13);
    x = v52.origin.x;
    y = v52.origin.y;
    width = v52.size.width;
    height = v52.size.height;
    if (CGRectIsNull(v52))
    {
      v36 = _scrollToItemAtPresentationIndexPath_atScrollPosition_additionalInsets_animated____s_category;
      if (!_scrollToItemAtPresentationIndexPath_atScrollPosition_additionalInsets_animated____s_category)
      {
        v36 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v36, (unint64_t *)&_scrollToItemAtPresentationIndexPath_atScrollPosition_additionalInsets_animated____s_category);
      }
      v37 = *(NSObject **)(v36 + 8);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = v37;
        *(_DWORD *)buf = 138413058;
        v44 = objc_opt_class();
        v45 = 2048;
        v46 = self;
        v47 = 2112;
        v48 = v13;
        v49 = 2112;
        v50 = self;
        _os_log_impl(&dword_185066000, v38, OS_LOG_TYPE_ERROR, "<%@ %p> received null target element frame for scrolling target at index path %@. Scrolling may not function correctly. \nCollection View: %@", buf, 0x2Au);

      }
    }
    else
    {
      -[UICollectionView _storeScrollingTargetInfoForIndexPath:frame:scrollPosition:additionalInsets:]((id *)&self->super.super.super.super.isa, v13, (void *)a4, x, y, width, height, top, leading, bottom, trailing);
      if (v6)
        v39 = !-[UIScrollView isScrollAnimating](self, "isScrollAnimating");
      else
        v39 = 1;
      v40 = *((_WORD *)&self->_collectionViewFlags + 8) & 0xDFFF | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
      *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8) & 0xDFFF | (v39 << 13);
      *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v40);
    }
  }
LABEL_26:

}

- (void)setContentOffset:(CGPoint)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  double y;
  double x;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _UICollectionViewFeedbackLoopDebugger *debugger;
  UICollectionViewData *collectionViewData;
  void *v21;
  uint64_t v22;
  id v23;
  objc_super v24;

  v4 = a4;
  y = a3.y;
  x = a3.x;
  -[UIScrollView contentOffset](self, "contentOffset");
  if (x != v9 || y != v8)
  {
    -[UIView bounds](self, "bounds");
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    debugger = self->_debugger;
    if (debugger)
    {
      -[UIScrollView contentOffset](self, "contentOffset");
      -[_UICollectionViewFeedbackLoopDebugger recordCollectionViewPointPropertyChange:fromPoint:toPoint:](debugger, "recordCollectionViewPointPropertyChange:fromPoint:toPoint:", CFSTR("contentOffset"));
    }
    collectionViewData = self->_collectionViewData;
    if (collectionViewData
      && (*(_BYTE *)&collectionViewData->_collectionViewDataFlags & 8) != 0
      && -[UICollectionViewLayout shouldInvalidateLayoutForBoundsChange:](self->_layout, "shouldInvalidateLayoutForBoundsChange:", x, y, v16, v18))
    {
      -[UICollectionViewLayout _invalidationContextForBoundsChange:fromOldBounds:](self->_layout, "_invalidationContextForBoundsChange:fromOldBounds:", x, y, v16, v18, v12, v14, v16, v18);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionViewLayout _invalidateLayoutUsingContext:](self->_layout, "_invalidateLayoutUsingContext:", v21);

    }
  }
  if (v4
    && (-[UICollectionView _customScrollAnimation](self, "_customScrollAnimation"),
        (v22 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    v23 = (id)v22;
    -[UIScrollView _setContentOffset:animation:](self, "_setContentOffset:animation:", v22, x, y);

  }
  else
  {
    v24.receiver = self;
    v24.super_class = (Class)UICollectionView;
    -[UIScrollView setContentOffset:animated:](&v24, sel_setContentOffset_animated_, v4, x, y);
  }
}

- (id)_customScrollAnimation
{
  return 0;
}

- (void)_contentOffsetFromProposedOffset:(double)a3 forScrollingToItemWithFrame:(CGFloat)a4 atScrollPosition:(CGFloat)a5 additionalInsets:(CGFloat)a6 containingScrollViewBounds:(CGFloat)a7
{
  double v28;
  double v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  double MaxY;
  double MaxX;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;

  v28 = a13;
  if ((objc_msgSend(a1, "_shouldReverseLayoutDirection") & 1) != 0)
  {
    if (objc_msgSend(a1, "_flipsHorizontalAxis"))
      v30 = a13;
    else
      v30 = a15;
    v28 = v30;
  }
  if ((a9 & 1) != 0)
  {
    if ((a9 & 6) != 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("attempt to use a scroll position with multiple vertical positioning styles"));
    v39.origin.x = a4;
    v39.origin.y = a5;
    v39.size.width = a6;
    v39.size.height = a7;
    CGRectGetMinY(v39);
  }
  else
  {
    if ((a9 & 2) != 0)
    {
      if ((a9 & 4) != 0)
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("attempt to use a scroll position with multiple vertical positioning styles"));
      v41.origin.x = a4;
      v41.origin.y = a5;
      v41.size.width = a6;
      v41.size.height = a7;
      CGRectGetMidY(v41);
      v42.origin.x = a16;
      v42.origin.y = a17;
      v42.size.width = a18;
      v42.size.height = a19;
      CGRectGetHeight(v42);
      if ((a9 & 8) != 0)
        goto LABEL_23;
      goto LABEL_15;
    }
    if ((a9 & 4) != 0)
    {
      v37.origin.x = a4;
      v37.origin.y = a5;
      v37.size.width = a6;
      v37.size.height = a7;
      CGRectGetMaxY(v37);
      v38.origin.x = a16;
      v38.origin.y = a17;
      v38.size.width = a18;
      v38.size.height = a19;
      CGRectGetHeight(v38);
      if ((a9 & 8) != 0)
        goto LABEL_23;
      goto LABEL_15;
    }
  }
  if ((a9 & 8) != 0)
  {
LABEL_23:
    if ((a9 & 0x30) != 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("attempt to use a scroll position with multiple horizontal positioning styles"));
    v43.origin.x = a4;
    v43.origin.y = a5;
    v43.size.width = a6;
    v43.size.height = a7;
    CGRectGetMinX(v43);
    return;
  }
LABEL_15:
  if ((a9 & 0x10) != 0)
  {
    if ((a9 & 0x20) != 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("attempt to use a scroll position with multiple horizontal positioning styles"));
    v44.origin.x = a4;
    v44.origin.y = a5;
    v44.size.width = a6;
    v44.size.height = a7;
    CGRectGetMidX(v44);
    v45.origin.x = a16;
    v45.origin.y = a17;
    v45.size.width = a18;
    v45.size.height = a19;
    CGRectGetWidth(v45);
  }
  else if ((a9 & 0x20) != 0)
  {
    v46.origin.x = a4;
    v46.origin.y = a5;
    v46.size.width = a6;
    v46.size.height = a7;
    CGRectGetMaxX(v46);
    v47.origin.x = a16;
    v47.origin.y = a17;
    v47.size.width = a18;
    v47.size.height = a19;
    CGRectGetWidth(v47);
  }
  else if (!a9)
  {
    v40.origin.x = a16;
    v40.origin.y = a17;
    v40.size.width = a18;
    v40.size.height = a19;
    v60.origin.x = a4;
    v60.origin.y = a5;
    v60.size.width = a6;
    v60.size.height = a7;
    if (!CGRectContainsRect(v40, v60))
    {
      v48.origin.x = a4;
      v48.origin.y = a5;
      v48.size.width = a6;
      v48.size.height = a7;
      v34 = a4;
      v31 = CGRectGetMinY(v48) - a12;
      v49.origin.x = a16;
      v49.origin.y = a17;
      v49.size.width = a18;
      v49.size.height = a19;
      if (v31 >= CGRectGetMinY(v49))
      {
        v32 = v34;
        v50.origin.x = v34;
        v50.origin.y = a5;
        v50.size.width = a6;
        v50.size.height = a7;
        MaxY = CGRectGetMaxY(v50);
        v51.origin.x = a16;
        v51.origin.y = a17;
        v51.size.width = a18;
        v51.size.height = a19;
        if (MaxY > CGRectGetMaxY(v51))
        {
          v52.origin.x = v34;
          v52.origin.y = a5;
          v52.size.width = a6;
          v52.size.height = a7;
          CGRectGetMaxY(v52);
          v53.origin.x = a16;
          v53.origin.y = a17;
          v53.size.width = a18;
          v53.size.height = a19;
          CGRectGetHeight(v53);
          dyld_program_sdk_at_least();
        }
      }
      else
      {
        v32 = v34;
      }
      v54.origin.x = v32;
      v54.origin.y = a5;
      v54.size.width = a6;
      v54.size.height = a7;
      v33 = CGRectGetMinX(v54) - v28;
      v55.origin.x = a16;
      v55.origin.y = a17;
      v55.size.width = a18;
      v55.size.height = a19;
      if (v33 >= CGRectGetMinX(v55))
      {
        v56.origin.x = v32;
        v56.origin.y = a5;
        v56.size.width = a6;
        v56.size.height = a7;
        MaxX = CGRectGetMaxX(v56);
        v57.origin.x = a16;
        v57.origin.y = a17;
        v57.size.width = a18;
        v57.size.height = a19;
        if (MaxX > CGRectGetMaxX(v57))
        {
          v58.origin.x = v32;
          v58.origin.y = a5;
          v58.size.width = a6;
          v58.size.height = a7;
          CGRectGetMaxX(v58);
          v59.origin.x = a16;
          v59.origin.y = a17;
          v59.size.width = a18;
          v59.size.height = a19;
          CGRectGetWidth(v59);
          dyld_program_sdk_at_least();
        }
      }
    }
  }
}

- (double)_clampedContentOffset:(double)a3 forScrollableAreaGivenContentSize:(double)a4 inScrollView:(double)a5
{
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v10 = a2;
  v11 = v10;
  if (a1)
  {
    if (fabs(a5 * a6) >= 2.22044605e-16)
    {
      objc_msgSend(v10, "_maximumContentOffsetForContentSize:", a5, a6);
      v13 = v12;
      objc_msgSend(v11, "_minimumContentOffset");
      if (a3 <= v13)
        v15 = a3;
      else
        v15 = v13;
      if (v15 >= v14)
        a3 = v15;
      else
        a3 = v14;
    }
  }
  else
  {
    a3 = 0.0;
  }

  return a3;
}

- (void)setCollectionViewLayout:(UICollectionViewLayout *)layout animated:(BOOL)animated
{
  _BOOL8 v4;
  UICollectionViewLayout *v7;
  void *v8;
  UICollectionViewLayout *v9;

  v4 = animated;
  v7 = layout;
  v9 = v7;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 6855, CFSTR("layout cannot be nil in setCollectionViewLayout:animated:"));

    v7 = 0;
  }
  -[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:](self, "_setCollectionViewLayout:animated:isInteractive:completion:", v7, v4, 0, 0);

}

- (void)setCollectionViewLayout:(UICollectionViewLayout *)collectionViewLayout
{
  UICollectionViewLayout *v5;
  void *v6;
  UICollectionViewLayout *v7;

  v5 = collectionViewLayout;
  v7 = v5;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 6849, CFSTR("layout cannot be nil in setCollectionViewLayout:"));

    v5 = 0;
  }
  -[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:](self, "_setCollectionViewLayout:animated:isInteractive:completion:", v5, 0, 0, 0);

}

- (void)_setCollectionViewLayout:(id)a3 animated:(BOOL)a4 isInteractive:(BOOL)a5 completion:(id)a6 animator:(id)a7
{
  UICollectionViewLayout *v12;
  id v13;
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  _BOOL4 v19;
  unint64_t v20;
  UICollectionView *v21;
  UICollectionViewData *v22;
  UICollectionViewData *collectionViewData;
  _BYTE *v24;
  UICollectionView *v25;
  UICollectionView *v26;
  uint64_t v27;
  uint64_t v28;
  _UICollectionViewSelectionController *selectionController;
  void *v30;
  void *v31;
  void *v32;
  double x;
  double y;
  double width;
  double height;
  double MidX;
  double MidY;
  uint64_t v39;
  _BOOL4 v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t i;
  void *v48;
  void *v49;
  double v50;
  double v51;
  double v52;
  UICollectionView *v53;
  void *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  void *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t *v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  void *v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t j;
  uint64_t v90;
  _QWORD *v91;
  __int16 v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  UICollectionViewLayout *v101;
  UICollectionViewLayout *v102;
  void (**v103)(void *, id);
  void (**v104)(void *, id);
  UICollectionViewLayout *v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  UIView *v114;
  void *v115;
  UIView *v116;
  id v117;
  char v118;
  char v119;
  id v120;
  id v121;
  id v122;
  UIView *v123;
  id v124;
  void (**v125)(_QWORD);
  void *v126;
  id v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t k;
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t m;
  void *v138;
  uint64_t *v139;
  uint64_t v140;
  id v141;
  id *v142;
  id *v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  void *v148;
  void *v149;
  id v150;
  void *v151;
  unint64_t v152;
  NSObject *v153;
  void (**v154)(void *, id);
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  void *v160;
  double v161;
  id v162;
  double v163;
  UIView *v164;
  id v165;
  _BOOL4 v166;
  id v167;
  void *v168;
  _QWORD *v169;
  _BOOL4 v170;
  _BYTE *v171;
  id v172;
  id v173;
  id v174;
  UICollectionView *v175;
  uint64_t *v176;
  void (**v177)(void *, void *, _QWORD *, uint64_t, uint64_t);
  void (**v178)(void *, void *, _QWORD *, uint64_t, uint64_t);
  id obj;
  id *location;
  UICollectionViewLayout *v181;
  _QWORD v182[4];
  id v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  _QWORD v192[5];
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  UIView *v198;
  id v199;
  _BYTE *v200;
  char v201;
  _QWORD v202[5];
  UICollectionViewLayout *v203;
  id v204;
  id v205;
  id v206;
  UIView *v207;
  id v208;
  id v209;
  _BYTE *v210;
  double v211;
  double v212;
  double v213;
  double v214;
  char v215;
  BOOL v216;
  BOOL v217;
  _QWORD v218[5];
  UICollectionViewLayout *v219;
  _QWORD v220[4];
  void (**v221)(void *, id);
  _QWORD v222[4];
  void (**v223)(void *, id);
  _QWORD v224[5];
  UICollectionViewLayout *v225;
  _QWORD v226[5];
  UICollectionViewLayout *v227;
  id v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  _QWORD aBlock[4];
  id v234;
  id v235;
  id v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _BYTE v241[128];
  uint8_t v242[128];
  _BYTE buf[24];
  uint64_t (*v244)(uint64_t, uint64_t);
  void (*v245)(uint64_t);
  id v246;
  _BYTE v247[128];
  _BYTE v248[128];
  uint64_t v249;
  CGRect v250;
  CGRect v251;
  CGRect v252;
  CGRect v253;
  CGRect v254;
  CGRect v255;
  CGRect v256;
  CGRect v257;
  CGRect v258;

  v166 = a5;
  v170 = a4;
  v249 = *MEMORY[0x1E0C80C00];
  v12 = (UICollectionViewLayout *)a3;
  v173 = a6;
  v13 = a7;
  location = (id *)&self->_layout;
  v181 = v12;
  if (self->_layout != v12)
  {
    v165 = v13;
    v14 = dyld_program_sdk_at_least();
    v15 = *((_QWORD *)&self->_collectionViewFlags + 1);
    v176 = (uint64_t *)self;
    if (v14)
    {
      if ((v15 & 0x200000000) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 6882, CFSTR("Cannot set the layout [%@] for [%@] during an update."), v12, self);

      }
    }
    else if ((v15 & 0x200000000) != 0)
    {
      v152 = _setCollectionViewLayout_animated_isInteractive_completion_animator____s_category;
      if (!_setCollectionViewLayout_animated_isInteractive_completion_animator____s_category)
      {
        v152 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v152, (unint64_t *)&_setCollectionViewLayout_animated_isInteractive_completion_animator____s_category);
      }
      v153 = *(id *)(v152 + 8);
      if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = self;
        _os_log_impl(&dword_185066000, v153, OS_LOG_TYPE_ERROR, "Cannot set the layout [%@] for [%@] during an update.", buf, 0x16u);
      }

    }
    -[UICollectionView _resetPrefetchState](self, "_resetPrefetchState");
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v169 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", 0);
    v17 = v169;
    if (v169)
      v17 = (void *)v169[1];
    v18 = v17;
    -[UICollectionView _reusePreviouslyFocusedManagedSubviewIfNeeded:](self, "_reusePreviouslyFocusedManagedSubviewIfNeeded:", v18);

    -[UIScrollView _resetContentScrollableAxes](self, "_resetContentScrollableAxes");
    -[UICollectionViewLayout _setCollectionView:](v12, "_setCollectionView:", self);
    if (-[UICollectionViewLayout canBeEdited](v12, "canBeEdited"))
    {
      v19 = -[UICollectionViewLayout isEditing](v12, "isEditing");
      v20 = *((_QWORD *)&self->_collectionViewFlags + 1);
      if (((v19 ^ ((v20 & 0x200000000000) == 0)) & 1) == 0)
        -[UICollectionViewLayout setEditing:](v12, "setEditing:", (v20 >> 45) & 1);
    }
    v174 = objc_alloc_init((Class)objc_msgSend((id)objc_opt_class(), "invalidationContextClass"));
    objc_msgSend(v174, "_setInvalidateEverything:", 1);
    objc_msgSend(v174, "_setInvalidateDataSourceCounts:", 1);
    -[UICollectionViewLayout _invalidateLayoutUsingContext:](v12, "_invalidateLayoutUsingContext:", v174);
    -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
    v21 = self;
    if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x8000000) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v151 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v151, "handleFailureInMethod:object:file:lineNumber:description:", a2, self);

      v21 = self;
    }
    if (v170 || v166)
    {
      -[UIScrollView stopScrollingAndZooming](v21, "stopScrollingAndZooming");
      v21 = self;
    }
    if ((*((_QWORD *)&v21->_collectionViewFlags + 1) & 0x80000000) == 0)
    {
      objc_msgSend(*location, "_setCollectionView:", 0);
      -[_UICollectionViewSectionFocusGuideController cleanupSectionFocusGuides](self->_sectionFocusGuideController, "cleanupSectionFocusGuides");
      -[_UICollectionViewOrthogonalScrollerSectionController reconfigureScrollViewsForUpdate:]((uint64_t)self->_orthogonalScrollerController, 0);
      -[UICollectionView _reconfigureSectionContainersForUpdate:](self, "_reconfigureSectionContainersForUpdate:", 0);
      objc_storeStrong(location, a3);
      objc_msgSend(*location, "_setCollectionView:", self);
      v22 = (UICollectionViewData *)-[UICollectionViewData initWithCollectionView:layout:]([UICollectionViewData alloc], self, *location);
      collectionViewData = self->_collectionViewData;
      self->_collectionViewData = v22;

      -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
      v24 = *location;
      v25 = self;
      if (!v24)
      {
LABEL_139:

        v13 = v165;
        goto LABEL_140;
      }
      v26 = v25;
      v27 = -[UIView effectiveUserInterfaceLayoutDirection](v25, "effectiveUserInterfaceLayoutDirection");
      if (v27 == objc_msgSend(v24, "developmentLayoutDirection"))
      {
        if (!-[UIView _flipsHorizontalAxis](v26, "_flipsHorizontalAxis"))
        {
LABEL_47:
          v25 = v26;
          goto LABEL_139;
        }
        v28 = 0;
      }
      else
      {
        v28 = objc_msgSend(v24, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      }
      -[UIScrollView _setFlipsHorizontalAxis:](v26, "_setFlipsHorizontalAxis:", v28);
      goto LABEL_47;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(*location, "_prepareForTransitionToLayout:", v12);
      -[UICollectionViewLayout _prepareForTransitionFromLayout:](v12, "_prepareForTransitionFromLayout:", *location);
    }
    v171 = (_BYTE *)-[UICollectionViewData initWithCollectionView:layout:]([UICollectionViewData alloc], self, v12);
    -[UICollectionViewData _prepareToLoadData]((uint64_t)v171);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      -[UICollectionViewLayout setTransitionProgress:](v12, "setTransitionProgress:", 0.0);
    *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x4000000uLL;
    selectionController = self->_selectionController;
    if (selectionController)
      v30 = (void *)-[NSMutableSet copy](selectionController->_selectedIndexPaths, "copy");
    else
      v30 = 0;
    v160 = (void *)objc_msgSend(v30, "mutableCopy");

    v31 = (void *)MEMORY[0x1E0C99E20];
    -[UICollectionView _indexPathsForVisibleItems](self, "_indexPathsForVisibleItems");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "setWithArray:", v32);
    v168 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v168, "intersectsSet:", v160))
      objc_msgSend(v168, "intersectSet:", v160);
    -[UICollectionView _visibleBounds](self, "_visibleBounds");
    x = v250.origin.x;
    y = v250.origin.y;
    width = v250.size.width;
    height = v250.size.height;
    MidX = CGRectGetMidX(v250);
    v251.origin.x = x;
    v251.origin.y = y;
    v251.size.width = width;
    v251.size.height = height;
    MidY = CGRectGetMidY(v251);
    v39 = objc_msgSend(v168, "count");
    if ((*(_QWORD *)&self->_collectionViewFlags & 0x1000) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "_indexPathOfReferenceItemForLayoutTransitionInCollectionView:", self);
      v175 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

      v40 = v175 != 0;
      if (v175)
      {
        -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)v171, v175);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_52;
      }
    }
    else
    {
      v40 = 0;
    }
    if (objc_msgSend(v168, "count") == 1)
    {
      objc_msgSend(v168, "anyObject");
      v175 = (UICollectionView *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      v43 = v168;
      v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v237, v248, 16);
      if (v44)
      {
        v175 = 0;
        v45 = *(_QWORD *)v238;
        v46 = 3.40282347e38;
        do
        {
          for (i = 0; i != v44; ++i)
          {
            if (*(_QWORD *)v238 != v45)
              objc_enumerationMutation(v43);
            v48 = *(void **)(*((_QWORD *)&v237 + 1) + 8 * i);
            -[UICollectionViewData layoutAttributesForItemAtIndexPath:](v176[274], v48);
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v49, "center");
            *(float *)&v50 = (v50 - MidX) * (v50 - MidX) + (v51 - MidY) * (v51 - MidY);
            v52 = sqrtf(*(float *)&v50);
            if (v46 > v52)
            {
              v53 = v48;

              v46 = v52;
              v175 = v53;
            }

          }
          v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v237, v248, 16);
        }
        while (v44);
      }
      else
      {
        v175 = 0;
      }

    }
    if (!v175)
    {
      v175 = 0;
      goto LABEL_56;
    }
    -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)v171, v175);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = v54;
    if (!v40)
    {
      objc_msgSend(v54, "center");
      x = v64 - width * 0.5;
      y = v65 - height * 0.5;
      goto LABEL_55;
    }
LABEL_52:
    objc_msgSend(v42, "frame");
    v56 = v55;
    v58 = v57;
    -[UICollectionViewData layoutAttributesForItemAtIndexPath:](v176[274], v175);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "frame");
    v61 = v60;
    objc_msgSend(v59, "frame");
    v63 = v62;

    x = v56 - (v61 - x);
    y = v58 - (v63 - y);
LABEL_55:

LABEL_56:
    -[UICollectionViewData collectionViewContentRect]((uint64_t)v171);
    v161 = v252.size.height;
    v163 = v252.size.width;
    v252.origin.x = 0.0;
    v252.origin.y = 0.0;
    v256.origin.x = x;
    v256.origin.y = y;
    v256.size.width = width;
    v256.size.height = height;
    if (CGRectContainsRect(v252, v256))
    {
      v66 = x;
      v67 = v176;
    }
    else
    {
      v253.origin.x = 0.0;
      v253.origin.y = 0.0;
      v253.size.height = v161;
      v253.size.width = v163;
      v257.origin.x = x;
      v257.origin.y = y;
      v257.size.width = width;
      v257.size.height = height;
      v254 = CGRectIntersection(v253, v257);
      v66 = 0.0;
      v67 = v176;
      if (v163 > width)
      {
        if (v254.size.width >= width)
        {
          v66 = x;
        }
        else
        {
          v68 = width - v254.size.width;
          if (v254.origin.x <= x)
            v69 = -v68;
          else
            v69 = v68;
          v66 = x + v69;
        }
      }
      if (v161 <= height)
      {
        y = 0.0;
      }
      else if (v254.size.height < height)
      {
        v70 = height - v254.size.height;
        if (v254.origin.y <= y)
          v70 = -(height - v254.size.height);
        y = y + v70;
      }
    }
    objc_msgSend(v67, "_effectiveContentInset");
    v72 = -v71;
    v74 = -v73;
    v75 = v66 - v71;
    v76 = y - v73;
    if (v39)
      v77 = v75;
    else
      v77 = v72;
    if (v39)
      v78 = v76;
    else
      v78 = v74;
    -[UICollectionViewLayout transitionContentOffsetForProposedContentOffset:keyItemIndexPath:](v181, "transitionContentOffsetForProposedContentOffset:keyItemIndexPath:", v175, v77, v78);
    -[UICollectionViewLayout targetContentOffsetForProposedContentOffset:](v181, "targetContentOffsetForProposedContentOffset:");
    objc_msgSend(v176, "_delegateTargetOffsetForProposedContentOffset:");
    v80 = v79;
    v82 = v81;
    -[UICollectionViewData layoutAttributesForElementsInRect:](v171, v79, v81, width, height);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v85 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v86 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke;
    aBlock[3] = &unk_1E16BD170;
    v158 = v84;
    v234 = v158;
    v156 = v85;
    v235 = v156;
    v155 = v86;
    v236 = v155;
    v177 = (void (**)(void *, void *, _QWORD *, uint64_t, uint64_t))_Block_copy(aBlock);
    v231 = 0u;
    v232 = 0u;
    v229 = 0u;
    v230 = 0u;
    obj = v83;
    v87 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v229, v247, 16);
    if (v87)
    {
      v88 = *(_QWORD *)v230;
      do
      {
        for (j = 0; j != v87; ++j)
        {
          if (*(_QWORD *)v230 != v88)
            objc_enumerationMutation(obj);
          v90 = *(_QWORD *)(*((_QWORD *)&v229 + 1) + 8 * j);
          v91 = -[UICollectionViewLayoutAttributes __indexPath]((_QWORD *)v90);
          if (!v90)
          {
            v93 = 0;
LABEL_88:
            objc_msgSend(*location, "layoutAttributesForItemAtIndexPath:", v91);
            v95 = objc_claimAutoreleasedReturnValue();
            -[UICollectionViewLayout layoutAttributesForItemAtIndexPath:](v181, "layoutAttributesForItemAtIndexPath:", v91);
            v96 = objc_claimAutoreleasedReturnValue();
            v97 = 0;
            goto LABEL_89;
          }
          v92 = *(_WORD *)(v90 + 288);
          v93 = *(_QWORD *)(v90 + 8);
          if ((v92 & 1) != 0)
            goto LABEL_88;
          v94 = *location;
          if ((v92 & 2) != 0)
          {
            objc_msgSend(v94, "layoutAttributesForDecorationViewOfKind:atIndexPath:", *(_QWORD *)(v90 + 8), v91);
            v95 = objc_claimAutoreleasedReturnValue();
            -[UICollectionViewLayout layoutAttributesForDecorationViewOfKind:atIndexPath:](v181, "layoutAttributesForDecorationViewOfKind:atIndexPath:", v93, v91);
            v96 = objc_claimAutoreleasedReturnValue();
            v97 = 2;
          }
          else
          {
            objc_msgSend(v94, "layoutAttributesForSupplementaryViewOfKind:atIndexPath:", *(_QWORD *)(v90 + 8), v91);
            v95 = objc_claimAutoreleasedReturnValue();
            -[UICollectionViewLayout layoutAttributesForSupplementaryViewOfKind:atIndexPath:](v181, "layoutAttributesForSupplementaryViewOfKind:atIndexPath:", v93, v91);
            v96 = objc_claimAutoreleasedReturnValue();
            v97 = 1;
          }
LABEL_89:
          if (v95 | v96)
          {
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            v99 = v98;
            if (v96)
              objc_msgSend(v98, "setObject:forKey:", v96, CFSTR("newLayoutInfos"));
            if (v95)
              objc_msgSend(v99, "setObject:forKey:", v95, CFSTR("previousLayoutInfos"));
            v177[2](v177, v99, v91, v93, v97);

          }
        }
        v87 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v229, v247, 16);
      }
      while (v87);
    }

    v100 = v176[363];
    v226[0] = MEMORY[0x1E0C809B0];
    v226[1] = 3221225472;
    v226[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_2;
    v226[3] = &unk_1E16BD198;
    v226[4] = v176;
    v101 = v181;
    v227 = v101;
    v178 = v177;
    v228 = v178;
    if (v100)
      -[_UICollectionViewSubviewCollection enumerateAllViewsWithEnumerator:](*(_QWORD **)(v100 + 8), (uint64_t)v226);
    objc_msgSend(v176, "_updateBackgroundView");
    v224[0] = MEMORY[0x1E0C809B0];
    v224[1] = 3221225472;
    v224[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_3;
    v224[3] = &unk_1E16BD1E8;
    v224[4] = v176;
    v102 = v101;
    v225 = v102;
    v103 = (void (**)(void *, id))_Block_copy(v224);
    v103[2](v103, v158);
    v222[0] = MEMORY[0x1E0C809B0];
    v222[1] = 3221225472;
    v222[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_6;
    v222[3] = &unk_1E16BDCE8;
    v104 = v103;
    v223 = v104;
    objc_msgSend(v156, "enumerateKeysAndObjectsUsingBlock:", v222);
    v220[0] = MEMORY[0x1E0C809B0];
    v220[1] = 3221225472;
    v220[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_7;
    v220[3] = &unk_1E16BDCE8;
    v154 = v104;
    v221 = v154;
    objc_msgSend(v155, "enumerateKeysAndObjectsUsingBlock:", v220);
    v218[0] = MEMORY[0x1E0C809B0];
    v218[1] = 3221225472;
    v218[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_8;
    v218[3] = &unk_1E16BD210;
    v218[4] = v176;
    v105 = v102;
    v219 = v105;
    objc_msgSend(v176, "_applyBlockToAllReusableViews:", v218);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v244 = __Block_byref_object_copy__40;
    v245 = __Block_byref_object_dispose__40;
    v246 = 0;
    objc_msgSend(v176, "bounds");
    v107 = v106;
    v109 = v108;
    v111 = v110;
    v113 = v112;
    v114 = [UIView alloc];
    v115 = v171;
    v116 = -[UIView initWithFrame:](v114, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    objc_msgSend(v176, "addSubview:", v116);
    v117 = *location;
    if (v171)
    {
      if ((v171[96] & 8) != 0)
      {
        if (!-[UICollectionViewLayout shouldInvalidateLayoutForBoundsChange:](v105, "shouldInvalidateLayoutForBoundsChange:", v80, v82, width, height))goto LABEL_105;
        v255.origin.x = v80;
        v255.origin.y = v82;
        v255.size.width = width;
        v255.size.height = height;
        v258.origin.x = v107;
        v258.origin.y = v109;
        v258.size.width = v111;
        v258.size.height = v113;
        if (!CGRectEqualToRect(v255, v258))
        {
          -[UICollectionViewLayout _invalidationContextForBoundsChange:fromOldBounds:](v105, "_invalidationContextForBoundsChange:fromOldBounds:", v80, v82, width, height, v107, v109, v111, v113);
          v115 = (void *)objc_claimAutoreleasedReturnValue();
          v118 = 1;
          v119 = 1;
        }
        else
        {
LABEL_105:
          v115 = 0;
          v119 = 0;
          v118 = 1;
        }
LABEL_107:
        v202[0] = MEMORY[0x1E0C809B0];
        v202[1] = 3221225472;
        v202[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_9;
        v202[3] = &unk_1E16BD2D8;
        v202[4] = v176;
        v211 = v80;
        v212 = v82;
        v213 = v163;
        v214 = v161;
        v215 = v118;
        v203 = v105;
        v216 = v170;
        v120 = v158;
        v204 = v120;
        v121 = v156;
        v205 = v121;
        v122 = v155;
        v206 = v122;
        v123 = v116;
        v217 = v166;
        v207 = v123;
        v210 = buf;
        v24 = v171;
        v208 = v24;
        v124 = v117;
        v209 = v124;
        v125 = (void (**)(_QWORD))_Block_copy(v202);
        v192[0] = MEMORY[0x1E0C809B0];
        v192[1] = 3221225472;
        v192[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_18;
        v192[3] = &unk_1E16BD300;
        v192[4] = v176;
        v167 = v124;
        v193 = v167;
        v157 = v120;
        v194 = v157;
        v159 = v121;
        v195 = v159;
        v162 = v122;
        v196 = v162;
        v200 = buf;
        v199 = v173;
        v201 = v119;
        v172 = v115;
        v197 = v172;
        v164 = v123;
        v198 = v164;
        v126 = _Block_copy(v192);
        if (v165)
        {
          v127 = v165;
          v128 = (void *)objc_msgSend(v127, "copy");
          v190 = 0u;
          v191 = 0u;
          v188 = 0u;
          v189 = 0u;
          objc_msgSend(v127, "_animations");
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          v130 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v188, v242, 16);
          if (v130)
          {
            v131 = *(_QWORD *)v189;
            do
            {
              for (k = 0; k != v130; ++k)
              {
                if (*(_QWORD *)v189 != v131)
                  objc_enumerationMutation(v129);
                v133 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v188 + 1) + 8 * k), "copy");
                objc_msgSend(v128, "addAnimations:", v133);

              }
              v130 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v188, v242, 16);
            }
            while (v130);
          }

          v186 = 0u;
          v187 = 0u;
          v184 = 0u;
          v185 = 0u;
          objc_msgSend(v127, "_completions");
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          v135 = objc_msgSend(v134, "countByEnumeratingWithState:objects:count:", &v184, v241, 16);
          if (v135)
          {
            v136 = *(_QWORD *)v185;
            do
            {
              for (m = 0; m != v135; ++m)
              {
                if (*(_QWORD *)v185 != v136)
                  objc_enumerationMutation(v134);
                v138 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v184 + 1) + 8 * m), "copy");
                objc_msgSend(v128, "addCompletion:", v138);

              }
              v135 = objc_msgSend(v134, "countByEnumeratingWithState:objects:count:", &v184, v241, 16);
            }
            while (v135);
          }

          objc_msgSend(v128, "addAnimations:", v125);
          v182[0] = MEMORY[0x1E0C809B0];
          v182[1] = 3221225472;
          v182[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_20;
          v182[3] = &unk_1E16BDBD8;
          v183 = v126;
          objc_msgSend(v128, "addCompletion:", v182);
          objc_msgSend(v128, "startAnimation");

          v139 = v176;
        }
        else if (v170)
        {
          v139 = v176;
          if (dyld_program_sdk_at_least())
            v140 = 7;
          else
            v140 = 5;
          +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", v140, v125, v126, 0.3, 0.0);
        }
        else
        {
          v125[2](v125);
          v139 = v176;
          (*((void (**)(void *, uint64_t))v126 + 2))(v126, 1);
        }
        v141 = *location;
        v142 = v139;
        v143 = v142;
        if (!v142 || !v141)
          goto LABEL_136;
        v144 = objc_msgSend(v142, "effectiveUserInterfaceLayoutDirection");
        if (v144 == objc_msgSend(v141, "developmentLayoutDirection"))
        {
          if (!objc_msgSend(v143, "_flipsHorizontalAxis"))
          {
LABEL_136:

            v176[331] &= ~0x2000000uLL;
            objc_msgSend(v143, "setNeedsFocusUpdate");
            v146 = v143[360];
            objc_msgSend(v143, "_focusedItemState");
            v147 = objc_claimAutoreleasedReturnValue();
            v148 = (void *)v147;
            if (v147)
              v149 = *(void **)(v147 + 16);
            else
              v149 = 0;
            v150 = v149;
            objc_msgSend(v146, "updateFocusedIndexPath:", v150);

            objc_msgSend(v143[360], "reloadSectionFocusGuides");
            _Block_object_dispose(buf, 8);

            v25 = v175;
            goto LABEL_139;
          }
          v145 = 0;
        }
        else
        {
          v145 = objc_msgSend(v141, "_wantsRightToLeftHorizontalMirroringIfNeeded");
        }
        objc_msgSend(v143, "_setFlipsHorizontalAxis:", v145);
        goto LABEL_136;
      }
      v118 = 0;
      v115 = 0;
    }
    else
    {
      v118 = 0;
    }
    v119 = 0;
    goto LABEL_107;
  }
LABEL_140:

}

- (BOOL)_allowsEffectiveMultipleSelection
{
  if (-[UICollectionView _isEditing](self, "_isEditing"))
    return -[UICollectionView allowsMultipleSelectionDuringEditing](self, "allowsMultipleSelectionDuringEditing");
  else
    return -[UICollectionView allowsMultipleSelection](self, "allowsMultipleSelection");
}

- (void)selectItemAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated scrollPosition:(UICollectionViewScrollPosition)scrollPosition
{
  _BOOL8 v6;
  uint64_t v8;
  int v9;
  NSIndexPath *v10;
  uint64_t v11;
  id v12;

  v6 = animated;
  v8 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((~v8 & 0x30000000000) == 0)
  {
    v9 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v8 & 0xFFFFFDFFFFFFFFFFLL;
    *((_WORD *)&self->_collectionViewFlags + 8) = v9;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v9);
  }
  v10 = indexPath;
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  -[UICollectionView _translateDataSourceIndexPathToPresentationIndexPathAsNeeded:](self, "_translateDataSourceIndexPathToPresentationIndexPathAsNeeded:", v10);
  v12 = (id)objc_claimAutoreleasedReturnValue();

  LOBYTE(v11) = 0;
  -[UICollectionView _selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:](self, "_selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:", v12, v6, scrollPosition, 0, 0, 0, v11);

}

- (BOOL)allowsMultipleSelection
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 11) & 1;
}

- (BOOL)_validateSelectionOrHighlightIndexPath:(id)a3 isSelection:(BOOL)a4 allowMassIndexPath:(BOOL)a5 assertIfInvalid:(BOOL)a6
{
  _BOOL4 v6;
  _BOOL4 v8;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  const __CFString *v16;
  const __CFString *v18;
  unint64_t v19;
  NSObject *v20;
  const __CFString *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  unint64_t v28;
  NSObject *v29;
  const __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  const __CFString *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  NSObject *v38;
  uint32_t v39;
  const __CFString *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t buf[4];
  const __CFString *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  UICollectionView *v51;
  __int16 v52;
  UICollectionView *v53;
  uint64_t v54;

  v6 = a6;
  v8 = a4;
  v54 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  if (dyld_program_sdk_at_least())
    -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  if (v11 && objc_msgSend(v11, "section") != 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(v11, "item") != 0x7FFFFFFFFFFFFFFFLL)
  {
    v12 = objc_msgSend(v11, "section");
    if (v12 >= -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData))
    {
      if (!v6)
      {
LABEL_17:
        a5 = 0;
        goto LABEL_18;
      }
      _UIIsPrivateMainBundle();
      if (dyld_program_sdk_at_least())
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          v18 = CFSTR("selection");
        else
          v18 = CFSTR("highlight");
        objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 8131, CFSTR("Attempted to modify the %@ of an item in an out-of-bounds section (%ld) when there are only %ld sections. Collection view: %@."), v18, objc_msgSend(v11, "section"), -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData), self, v43);
        goto LABEL_24;
      }
      if (!os_variant_has_internal_diagnostics())
      {
        v19 = qword_1EDDC6620;
        if (!qword_1EDDC6620)
        {
          v19 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v19, (unint64_t *)&qword_1EDDC6620);
        }
        v20 = *(NSObject **)(v19 + 8);
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          goto LABEL_17;
        if (v8)
          v21 = CFSTR("selection");
        else
          v21 = CFSTR("highlight");
        v22 = v20;
        v23 = objc_msgSend(v11, "section");
        v24 = -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData);
        *(_DWORD *)buf = 138413058;
        v45 = v21;
        v46 = 2048;
        v47 = v23;
        v48 = 2048;
        v49 = v24;
        v50 = 2112;
        v51 = self;
        v25 = "Attempted to modify the %@ of an item in an out-of-bounds section (%ld) when there are only %ld sections. "
              "Collection view: %@.  This will become an assert in a future version.";
        v26 = v22;
        v27 = 42;
LABEL_41:
        _os_log_impl(&dword_185066000, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);

        goto LABEL_17;
      }
      __UIFaultDebugAssertLog();
      v33 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
      {
LABEL_48:

        goto LABEL_17;
      }
      if (v8)
        v34 = CFSTR("selection");
      else
        v34 = CFSTR("highlight");
      v35 = objc_msgSend(v11, "section");
      v36 = -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData);
      *(_DWORD *)buf = 138413058;
      v45 = v34;
      v46 = 2048;
      v47 = v35;
      v48 = 2048;
      v49 = v36;
      v50 = 2112;
      v51 = self;
      v37 = "Attempted to modify the %@ of an item in an out-of-bounds section (%ld) when there are only %ld sections. Co"
            "llection view: %@.  This will become an assert in a future version.";
      v38 = v33;
      v39 = 42;
LABEL_53:
      _os_log_fault_impl(&dword_185066000, v38, OS_LOG_TYPE_FAULT, v37, buf, v39);
      goto LABEL_48;
    }
    v13 = objc_msgSend(v11, "item");
    a5 = v13 < -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, objc_msgSend(v11, "section"));
    if (!a5 && v6)
    {
      _UIIsPrivateMainBundle();
      if (dyld_program_sdk_at_least())
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          v16 = CFSTR("selection");
        else
          v16 = CFSTR("highlight");
        objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 8139, CFSTR("Attempted to modify the %@ of an out-of-bounds item (%ld) when there are only %ld items in section %ld. Collection view: %@."), v16, objc_msgSend(v11, "item"), -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, objc_msgSend(v11, "section")), objc_msgSend(v11, "section"), self);
LABEL_24:

        goto LABEL_17;
      }
      if (!os_variant_has_internal_diagnostics())
      {
        v28 = qword_1EDDC6628;
        if (!qword_1EDDC6628)
        {
          v28 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v28, (unint64_t *)&qword_1EDDC6628);
        }
        v29 = *(NSObject **)(v28 + 8);
        if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          goto LABEL_17;
        if (v8)
          v30 = CFSTR("selection");
        else
          v30 = CFSTR("highlight");
        v22 = v29;
        v31 = objc_msgSend(v11, "item");
        v32 = -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, objc_msgSend(v11, "section"));
        *(_DWORD *)buf = 138413314;
        v45 = v30;
        v46 = 2048;
        v47 = v31;
        v48 = 2048;
        v49 = v32;
        v50 = 2048;
        v51 = (UICollectionView *)objc_msgSend(v11, "section");
        v52 = 2112;
        v53 = self;
        v25 = "Attempted to modify the %@ of an out-of-bounds item (%ld) when there are only %ld items in section %ld. Co"
              "llection view: %@.  This will become an assert in a future version.";
        v26 = v22;
        v27 = 52;
        goto LABEL_41;
      }
      __UIFaultDebugAssertLog();
      v33 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
        goto LABEL_48;
      if (v8)
        v40 = CFSTR("selection");
      else
        v40 = CFSTR("highlight");
      v41 = objc_msgSend(v11, "item");
      v42 = -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, objc_msgSend(v11, "section"));
      *(_DWORD *)buf = 138413314;
      v45 = v40;
      v46 = 2048;
      v47 = v41;
      v48 = 2048;
      v49 = v42;
      v50 = 2048;
      v51 = (UICollectionView *)objc_msgSend(v11, "section");
      v52 = 2112;
      v53 = self;
      v37 = "Attempted to modify the %@ of an out-of-bounds item (%ld) when there are only %ld items in section %ld. Coll"
            "ection view: %@.  This will become an assert in a future version.";
      v38 = v33;
      v39 = 52;
      goto LABEL_53;
    }
  }
LABEL_18:

  return a5;
}

- (BOOL)_allowsEffectiveSelection
{
  if (-[UICollectionView _isEditing](self, "_isEditing"))
    return -[UICollectionView allowsSelectionDuringEditing](self, "allowsSelectionDuringEditing");
  else
    return -[UICollectionView allowsSelection](self, "allowsSelection");
}

- (void)setEditing:(BOOL)editing
{
  _BOOL4 v3;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  uint64_t v12;
  _QWORD v13[5];
  BOOL v14;

  v3 = editing;
  if (-[UICollectionView _isEditing](self, "_isEditing") != editing)
  {
    v5 = 0x200000000000;
    if (!v3)
      v5 = 0;
    *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFDFFFFFFFFFFFLL | v5;
    if (!dyld_program_sdk_at_least()
      || !v3
      || (~*((_DWORD *)&self->_collectionViewFlags + 2) & 0x4800) != 0
      || (-[UICollectionView _indexPathsForSelectedItems](self, "_indexPathsForSelectedItems"),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          v7 = objc_msgSend(v6, "count"),
          v6,
          v7 <= 1))
    {
      -[UICollectionView _deselectAllAnimated:notifyDelegate:](self, "_deselectAllAnimated:notifyDelegate:", 0, 0);
    }
    if (!v3)
      -[_UICollectionViewMultiSelectController clearSelectionState](self->_multiSelectController, "clearSelectionState");
    -[UIView traitCollection](self, "traitCollection");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    _UITableConstantsForTraitCollection(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "defaultEditAndUpdateAnimationDuration");
    v11 = v10;

    if (dyld_program_sdk_at_least())
      v12 = 6;
    else
      v12 = 4;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __31__UICollectionView_setEditing___block_invoke;
    v13[3] = &unk_1E16B1B78;
    v13[4] = self;
    v14 = v3;
    +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", v12, v13, 0, v11, 0.0);
  }
}

void __100__UICollectionView__configureSupplementaryViewForDisplay_withElementKind_indexPath_elementCategory___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "_updateEditing:forView:atIndexPath:elementCategory:", objc_msgSend(*(id *)(a1 + 32), "_isEditing"), *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "setSemanticContentAttribute:", objc_msgSend(*(id *)(a1 + 32), "semanticContentAttribute"));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v8 = *(id *)(v2 + 2072);
  v4 = v3;
  if (v8)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = objc_msgSend(v4, "effectiveUserInterfaceLayoutDirection");
    if (v6 != objc_msgSend(v8, "developmentLayoutDirection"))
    {
      v7 = objc_msgSend(v8, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      goto LABEL_9;
    }
    if (objc_msgSend(v4, "_flipsHorizontalAxis"))
    {
      v7 = 0;
LABEL_9:
      objc_msgSend(v4, "_setFlipsHorizontalAxis:", v7);
    }
  }

}

void __62__UICollectionView__configureCellForDisplay_indexPath_cached___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  if (!*(_BYTE *)(a1 + 56) && !dyld_program_sdk_at_least())
    goto LABEL_10;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2896);
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(v2 + 8), "containsObject:", *(_QWORD *)(a1 + 40));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2896);
    if (v4)
      v5 = objc_msgSend(*(id *)(v4 + 16), "containsObject:", *(_QWORD *)(a1 + 40));
    else
      v5 = 0;
    v6 = (id *)(a1 + 48);
    if ((_DWORD)v3 == objc_msgSend(*(id *)(a1 + 48), "isSelected"))
    {
LABEL_8:
      if ((_DWORD)v5 == objc_msgSend(*v6, "isHighlighted"))
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_7:
    objc_msgSend(*v6, "_setSelected:animated:", v3, 0);
    goto LABEL_8;
  }
  v6 = (id *)(a1 + 48);
  if ((objc_msgSend(*(id *)(a1 + 48), "isSelected") & 1) != 0)
  {
    v5 = 0;
    v3 = 0;
    goto LABEL_7;
  }
  if ((objc_msgSend(*v6, "isHighlighted") & 1) != 0)
  {
    v5 = 0;
LABEL_9:
    objc_msgSend(*v6, "_setHighlighted:animated:", v5, 0);
  }
LABEL_10:
  objc_msgSend(*(id *)(a1 + 32), "_updateEditing:forView:atIndexPath:elementCategory:", objc_msgSend(*(id *)(a1 + 32), "_isEditing"), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), 0);
  objc_msgSend(*(id *)(a1 + 48), "setSemanticContentAttribute:", objc_msgSend(*(id *)(a1 + 32), "semanticContentAttribute"));
  v7 = *(void **)(a1 + 48);
  v8 = *(id *)(*(_QWORD *)(a1 + 32) + 2072);
  v9 = v7;
  v10 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = objc_msgSend(v9, "effectiveUserInterfaceLayoutDirection");
    if (v12 != objc_msgSend(v8, "developmentLayoutDirection"))
    {
      v13 = objc_msgSend(v8, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      goto LABEL_18;
    }
    if (objc_msgSend(v10, "_flipsHorizontalAxis"))
    {
      v13 = 0;
LABEL_18:
      objc_msgSend(v10, "_setFlipsHorizontalAxis:", v13);
    }
  }

  objc_msgSend(*(id *)(a1 + 32), "_indexPathBeforeShadowUpdatesForIndexPath:", *(_QWORD *)(a1 + 40));
  v14 = (id)objc_claimAutoreleasedReturnValue();
  -[_UICollectionViewDragAndDropController updateAppearanceForCell:atIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2776), *(void **)(a1 + 48), v14);

}

- (BOOL)_isEditing
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 45) & 1;
}

- (void)_updateEditing:(BOOL)a3 forView:(id)a4 atIndexPath:(id)a5 elementCategory:(unint64_t)a6
{
  _BOOL4 v7;
  id v9;
  _BOOL8 v10;
  id v11;

  v7 = a3;
  v11 = a4;
  v9 = a5;
  if (objc_msgSend(v11, "canBeEdited"))
  {
    v10 = v7 && (!v9 || -[UICollectionView _canEditItemAtIndexPath:](self, "_canEditItemAtIndexPath:", v9));
    objc_msgSend(v11, "setEditing:", v10);
  }

}

- (BOOL)allowsSelection
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 10) & 1;
}

- (void)_deselectAllAnimated:(BOOL)a3 notifyDelegate:(BOOL)a4
{
  _BOOL4 v4;
  _BOOL8 v5;
  _UICollectionViewSelectionController *selectionController;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _UICollectionViewSelectionController *v14;
  void *v15;
  void *v16;
  _UICollectionViewMultiSelectController *multiSelectController;
  _UICollectionViewSelectionController *v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v4 = a4;
  v5 = a3;
  v27 = *MEMORY[0x1E0C80C00];
  selectionController = self->_selectionController;
  if (selectionController)
    v8 = (void *)-[NSMutableSet copy](selectionController->_selectedIndexPaths, "copy");
  else
    v8 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v23;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v8);
        v13 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v12);
        v14 = self->_selectionController;
        if (v14)
          -[NSMutableSet removeObject:](v14->_selectedIndexPaths, "removeObject:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v12));
        -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "_setSelected:animated:", 0, v5);

        if (v4 && (*(_QWORD *)&self->_collectionViewFlags & 0x40) != 0)
        {
          -[UICollectionView _delegateProxy](self, "_delegateProxy");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "collectionView:didDeselectItemAtIndexPath:", self, v13);

        }
        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v10);
  }
  if (v4)
  {
    multiSelectController = self->_multiSelectController;
    v18 = self->_selectionController;
    if (v18)
      v19 = (void *)-[NSMutableSet copy](v18->_selectedIndexPaths, "copy");
    else
      v19 = 0;
    objc_msgSend(v19, "allObjects");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UICollectionViewMultiSelectController selectedIndexPathsChanged:](multiSelectController, "selectedIndexPathsChanged:", v20);

  }
  if (dyld_program_sdk_at_least()
    && ((*((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16)) & 0x20000) == 0
    && -[UICollectionView _shouldSelectionFollowFocusForIndexPath:initiatedBySelection:](self, "_shouldSelectionFollowFocusForIndexPath:initiatedBySelection:", 0, 1))
  {
    -[UIView _focusSystem](self, "_focusSystem");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v21, "_focusedItemIsContainedInEnvironment:includeSelf:", self, 1))
      objc_msgSend(v21, "_startDeferringFocusIfSupported");

  }
}

- (BOOL)_shouldSelectionFollowFocusForIndexPath:(id)a3 initiatedBySelection:(BOOL)a4 focusItemStateCandidate:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  char v10;
  id *v12;
  void *v13;
  id v14;
  char v15;
  void *v16;
  void *v17;
  int v18;
  _BOOL4 v19;
  _BOOL4 v20;

  v6 = a4;
  v8 = a3;
  v9 = a5;
  if (_AXSFullKeyboardAccessEnabled())
    goto LABEL_2;
  if (dyld_program_sdk_at_least()
    && v6
    && -[_UICollectionViewMultiSelectController isInMultiselectInteraction](self->_multiSelectController, "isInMultiselectInteraction"))
  {
    if (v9)
    {
      v12 = (id *)v9;
    }
    else
    {
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v12 = (id *)objc_claimAutoreleasedReturnValue();
      if (!v12)
        goto LABEL_11;
    }
    -[UICollectionView _indexPathsForSelectedItems](self, "_indexPathsForSelectedItems");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v12[2];
    v15 = objc_msgSend(v13, "containsObject:", v14);

    if ((v15 & 1) != 0)
    {
LABEL_2:
      v10 = 0;
      goto LABEL_3;
    }
  }
LABEL_11:
  if (!v6)
  {
    -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v8);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v16 && (objc_msgSend(v16, "_hasCustomSelectionAction") & 1) != 0)
    {
      v10 = 0;
      goto LABEL_23;
    }

  }
  v18 = !v6;
  v19 = -[UICollectionView selectionFollowsFocus](self, "selectionFollowsFocus");
  v10 = v19;
  if (v8)
    v20 = v19;
  else
    v20 = 0;
  if ((v18 & v20) == 1)
  {
    if ((*(_QWORD *)&self->_collectionViewFlags & 0x4000000000000) == 0)
    {
      v10 = 1;
      goto LABEL_3;
    }
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v17, "collectionView:selectionFollowsFocusForItemAtIndexPath:", self, v8);
LABEL_23:

  }
LABEL_3:

  return v10;
}

- (BOOL)_shouldSelectionFollowFocusForIndexPath:(id)a3 initiatedBySelection:(BOOL)a4
{
  return -[UICollectionView _shouldSelectionFollowFocusForIndexPath:initiatedBySelection:focusItemStateCandidate:](self, "_shouldSelectionFollowFocusForIndexPath:initiatedBySelection:focusItemStateCandidate:", a3, a4, 0);
}

- (void)_setFocusedItemState:(id)a3
{
  id *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  unint64_t v13;
  UICollectionView *v14;
  unint64_t v15;
  NSObject *v16;
  UICollectionView *v17;
  double v18;
  UICollectionViewUpdate *currentUpdate;
  _UICollectionViewFocusedItemState *oldFocusedItemState;
  UICollectionViewUpdate *v21;
  _UICollectionViewFocusedItemState *newFocusedItemState;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  double v31;
  int v32;
  UICollectionView *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  id v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = (id *)a3;
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v6 = objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)&self->_focusedItemState, a3);
  if (v6)
  {
    v7 = *(id *)(v6 + 8);
    if (v7)
    {
      v8 = v7;
      v9 = *(id *)(v6 + 8);
      v10 = v5 ? v5[1] : 0;
      v11 = v10;

      if (v9 != v11)
      {
        v12 = *(id *)(v6 + 8);
        -[UICollectionView _reusePreviouslyFocusedManagedSubviewIfNeeded:](self, "_reusePreviouslyFocusedManagedSubviewIfNeeded:", v12);
        v13 = qword_1EDDC6768;
        if (!qword_1EDDC6768)
        {
          v13 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v13, (unint64_t *)&qword_1EDDC6768);
        }
        if ((*(_BYTE *)v13 & 1) != 0)
        {
          v24 = *(NSObject **)(v13 + 8);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            v25 = v24;
            if (v5)
            {
              v26 = v5[2];
              v27 = v5[1];
              v28 = v26;
            }
            else
            {
              v26 = 0;
              v28 = 0;
              v27 = 0;
            }
            v29 = v27;
            v30 = *(id *)(v6 + 8);
            v32 = 134218754;
            v33 = self;
            v34 = 2112;
            v35 = v26;
            v36 = 2112;
            v37 = v29;
            v38 = 2112;
            v39 = v30;
            _os_log_impl(&dword_185066000, v25, OS_LOG_TYPE_ERROR, "[UICV %p] _setFocusedItemState: Asked to update focus at %@ to cell %@ while cell %@ is already focused", (uint8_t *)&v32, 0x2Au);

          }
        }

      }
    }
  }
  if (v5)
  {
    v14 = (UICollectionView *)v5[1];
    if (os_variant_has_internal_diagnostics())
    {
      if (v14)
      {
        if (-[UIView isHidden](v14, "isHidden") || (-[UIView alpha](v14, "alpha"), v31 <= 0.0))
        {
          __UIFaultDebugAssertLog();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
          {
            v32 = 138412290;
            v33 = v14;
            _os_log_fault_impl(&dword_185066000, v23, OS_LOG_TYPE_FAULT, "Attempting store a hidden view as focused: %@", (uint8_t *)&v32, 0xCu);
          }

        }
      }
    }
    else if (v14)
    {
      if (-[UIView isHidden](v14, "isHidden") || (-[UIView alpha](v14, "alpha"), v18 <= 0.0))
      {
        v15 = qword_1EDDC6770;
        if (!qword_1EDDC6770)
        {
          v15 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v15, (unint64_t *)&qword_1EDDC6770);
        }
        v16 = *(NSObject **)(v15 + 8);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v32 = 138412290;
          v33 = v14;
          _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "Attempting store a hidden view as focused: %@", (uint8_t *)&v32, 0xCu);
        }
      }
    }
    v17 = 0;
  }
  else
  {
    v17 = (UICollectionView *)-[_UICollectionViewFocusedItemState copyWithReusableView:]((_QWORD *)v6, 0);
    v14 = v17;
  }
  -[UICollectionView _setRememberedFocusedItemState:](self, "_setRememberedFocusedItemState:", v17);

  currentUpdate = self->_currentUpdate;
  if (currentUpdate)
  {
    oldFocusedItemState = currentUpdate->_oldFocusedItemState;
    currentUpdate->_oldFocusedItemState = 0;

    v21 = self->_currentUpdate;
    newFocusedItemState = v21->_newFocusedItemState;
    v21->_newFocusedItemState = 0;

  }
}

- (void)_setRememberedFocusedItemState:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 3160);
}

- (void)_reusePreviouslyFocusedManagedSubviewIfNeeded:(id)a3
{
  id v4;
  unint64_t v5;
  _WORD *v6;
  __int16 v7;
  NSObject *v8;
  int v9;
  UICollectionView *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[UICollectionView _canReusePreviouslyFocusedManagedSubview:](self, "_canReusePreviouslyFocusedManagedSubview:", v4))
  {
    v5 = _reusePreviouslyFocusedManagedSubviewIfNeeded____s_category;
    if (!_reusePreviouslyFocusedManagedSubviewIfNeeded____s_category)
    {
      v5 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v5, (unint64_t *)&_reusePreviouslyFocusedManagedSubviewIfNeeded____s_category);
    }
    if ((*(_BYTE *)v5 & 1) != 0)
    {
      v8 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = 134218242;
        v10 = self;
        v11 = 2112;
        v12 = v4;
        _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "[UICV %p] Reusing previously focused managed subview %@", (uint8_t *)&v9, 0x16u);
      }
    }
    objc_msgSend(v4, "_layoutAttributes");
    v6 = (_WORD *)objc_claimAutoreleasedReturnValue();
    if (v6 && (v7 = v6[144], v6, (v7 & 1) != 0))
      -[UICollectionView _reuseCell:](self, "_reuseCell:", v4);
    else
      -[UICollectionView _reuseSupplementaryView:](self, "_reuseSupplementaryView:", v4);
  }

}

- (BOOL)_canReusePreviouslyFocusedManagedSubview:(id)a3
{
  UICollectionReusableView *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  UICollectionReusableView *v8;
  UICollectionReusableView *firstResponderView;
  _UICollectionViewSubviewManager *subviewManager;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  _QWORD *v16;
  UICollectionReusableView *v17;
  BOOL v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (UICollectionReusableView *)a3;
  if (!v4)
    goto LABEL_22;
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v5)
    v7 = *(void **)(v5 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (v8 == v4)
  {

LABEL_22:
    v18 = 0;
    goto LABEL_23;
  }
  firstResponderView = self->_firstResponderView;

  if (firstResponderView == v4)
    goto LABEL_22;
  if (-[UICollectionReusableView _isInUpdateAnimation](v4, "_isInUpdateAnimation"))
    goto LABEL_22;
  if ((-[_UICollectionViewSubviewManager isViewInReuseQueue:]((uint64_t)self->_subviewManager, v4) & 1) != 0)
    goto LABEL_22;
  subviewManager = self->_subviewManager;
  if (subviewManager)
  {
    if (-[_UICollectionViewSubviewCollection containsView:](&subviewManager->_visibleViews->super.isa, (uint64_t)v4))
      goto LABEL_22;
  }
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[NSMutableDictionary objectEnumerator](self->_prefetchCacheItems, "objectEnumerator", 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v21;
    while (2)
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v21 != v14)
          objc_enumerationMutation(v11);
        v16 = *(_QWORD **)(*((_QWORD *)&v20 + 1) + 8 * i);
        if (v16)
          v16 = (_QWORD *)v16[3];
        v17 = v16;

        if (v17 == v4)
        {
          v18 = 0;
          goto LABEL_25;
        }
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v13)
        continue;
      break;
    }
  }
  v18 = 1;
LABEL_25:

LABEL_23:
  return v18;
}

- (void)_setCollectionViewLayout:(id)a3 animated:(BOOL)a4 isInteractive:(BOOL)a5 completion:(id)a6
{
  -[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:](self, "_setCollectionViewLayout:animated:isInteractive:completion:animator:", a3, a4, a5, a6, 0);
}

- (BOOL)_allowsMultipleSelectionDuringEditing
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 14) & 1;
}

void __43__UICollectionView__updateVisibleCellsNow___block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    *(_BYTE *)(a3 + 8) |= 1u;
}

- (void)_willRemoveSubview:(id)a3
{
  id v4;
  void *v5;
  objc_super v6;

  v6.receiver = self;
  v6.super_class = (Class)UICollectionView;
  v4 = a3;
  -[UIView _willRemoveSubview:](&v6, sel__willRemoveSubview_, v4);
  -[UICollectionView subviewRouter]((id *)&self->super.super.super.super.isa);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "willRemoveSubview:", v4, v6.receiver, v6.super_class);

}

- (void)_scrollViewAnimationEnded:(id)a3 finished:(BOOL)a4
{
  uint64_t v5;
  __int16 v6;
  char v7;
  objc_super v8;

  v8.receiver = self;
  v8.super_class = (Class)UICollectionView;
  -[UIScrollView _scrollViewAnimationEnded:finished:](&v8, sel__scrollViewAnimationEnded_finished_, a3, a4);
  if (self->_scrollingTargetIndexPath)
  {
    v5 = *((_QWORD *)&self->_collectionViewFlags + 1);
    if ((v5 & 0x100) != 0)
    {
      v6 = *((_WORD *)&self->_collectionViewFlags + 8) | 0x2000;
      v7 = *((_BYTE *)&self->_collectionViewFlags + 18);
      *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
      *((_QWORD *)&self->_collectionViewFlags + 1) = v5;
      *((_BYTE *)&self->_collectionViewFlags + 18) = v7;
      *((_WORD *)&self->_collectionViewFlags + 8) = v6;
    }
    else
    {
      -[UICollectionView _clearTargetIndexPathForScrolling](self, "_clearTargetIndexPathForScrolling");
    }
  }
}

- (void)reloadItemsAtIndexPaths:(NSArray *)indexPaths
{
  id v4;

  -[UICollectionView _indexPathsAfterShadowUpdatesForIndexPaths:](self, "_indexPathsAfterShadowUpdatesForIndexPaths:", indexPaths);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _updateRowsAtIndexPaths:updateAction:](self, "_updateRowsAtIndexPaths:updateAction:", v4, 2);

}

- (void)deleteItemsAtIndexPaths:(NSArray *)indexPaths
{
  id v4;

  -[UICollectionView _indexPathsAfterShadowUpdatesForIndexPaths:](self, "_indexPathsAfterShadowUpdatesForIndexPaths:", indexPaths);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _updateRowsAtIndexPaths:updateAction:](self, "_updateRowsAtIndexPaths:updateAction:", v4, 1);

}

- (id)_indexPathsAfterShadowUpdatesForIndexPaths:(id)a3
{
  return -[UICollectionView _indexPathsAfterShadowUpdatesForIndexPaths:allowingAppendingInserts:](self, "_indexPathsAfterShadowUpdatesForIndexPaths:allowingAppendingInserts:", a3, 0);
}

- (void)insertItemsAtIndexPaths:(NSArray *)indexPaths
{
  id v4;

  -[UICollectionView _indexPathsAfterShadowUpdatesForIndexPaths:allowingAppendingInserts:](self, "_indexPathsAfterShadowUpdatesForIndexPaths:allowingAppendingInserts:", indexPaths, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _updateRowsAtIndexPaths:updateAction:](self, "_updateRowsAtIndexPaths:updateAction:", v4, 0);

}

- (id)_indexPathsAfterShadowUpdatesForIndexPaths:(id)a3 allowingAppendingInserts:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v4 = a4;
  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
  {
    v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v6, "count"));
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          -[_UICollectionViewShadowUpdatesController indexPathAfterShadowUpdates:allowingAppendingInserts:](self->_dragAndDropController, "indexPathAfterShadowUpdates:allowingAppendingInserts:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v12), v4, (_QWORD)v15);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            objc_msgSend(v7, "addObject:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = v6;
  }

  return v7;
}

- (void)_updateRowsAtIndexPaths:(id)a3 updateAction:(int)a4
{
  -[UICollectionView _updateRowsAtIndexPaths:updateAction:updates:](self, "_updateRowsAtIndexPaths:updateAction:updates:", a3, *(_QWORD *)&a4, 0);
}

- (void)accessoryInsetsDidChange:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  objc_super v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;
  UIEdgeInsets v30;
  UIEdgeInsets v31;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  v29 = *MEMORY[0x1E0C80C00];
  v24.receiver = self;
  v24.super_class = (Class)UICollectionView;
  -[UIScrollView accessoryInsetsDidChange:](&v24, sel_accessoryInsetsDidChange_);
  -[UIScrollView accessoryInsets](self, "accessoryInsets");
  if (v9 != left || v8 != top || v11 != right || v10 != bottom)
  {
    v15 = v8;
    v16 = v9;
    v17 = v10;
    v18 = v11;
    v19 = accessoryInsetsDidChange____s_category[0];
    if (!accessoryInsetsDidChange____s_category[0])
    {
      v19 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v19, accessoryInsetsDidChange____s_category);
    }
    if ((*(_BYTE *)v19 & 1) != 0)
    {
      v20 = *(NSObject **)(v19 + 8);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = v20;
        v30.top = top;
        v30.left = left;
        v30.bottom = bottom;
        v30.right = right;
        NSStringFromUIEdgeInsets(v30);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v31.top = v15;
        v31.left = v16;
        v31.bottom = v17;
        v31.right = v18;
        NSStringFromUIEdgeInsets(v31);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v26 = v22;
        v27 = 2112;
        v28 = v23;
        _os_log_impl(&dword_185066000, v21, OS_LOG_TYPE_ERROR, "Invalidating layout due to [UICollectionView accessoryInsetsDidChange:] previousInsets: %@, newInsets: %@", buf, 0x16u);

      }
    }
    -[UICollectionView _invalidateLayoutForUpdatedLayoutMarginsIfNeeded](self, "_invalidateLayoutForUpdatedLayoutMarginsIfNeeded");
  }
}

- (void)_safeAreaInsetsDidChangeFromOldInsets:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _UICollectionViewFeedbackLoopDebugger *debugger;
  objc_super v17;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  v17.receiver = self;
  v17.super_class = (Class)UICollectionView;
  -[UIView _safeAreaInsetsDidChangeFromOldInsets:](&v17, sel__safeAreaInsetsDidChangeFromOldInsets_);
  -[UIView safeAreaInsets](self, "safeAreaInsets");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  if (-[UICollectionViewLayout _shouldInvalidateLayoutForUpdatedSafeAreaInsets:fromOldInsets:](self->_layout, "_shouldInvalidateLayoutForUpdatedSafeAreaInsets:fromOldInsets:"))
  {
    debugger = self->_debugger;
    if (debugger)
      -[_UICollectionViewFeedbackLoopDebugger recordCollectionViewInsetsPropertyChange:fromInsets:toInsets:](debugger, "recordCollectionViewInsetsPropertyChange:fromInsets:toInsets:", CFSTR("safeAreaInsets"), top, left, bottom, right, v9, v11, v13, v15);
    -[UICollectionView _invalidateLayoutForUpdatedLayoutMarginsIfNeeded](self, "_invalidateLayoutForUpdatedLayoutMarginsIfNeeded");
  }
}

- (void)_layoutMarginsDidChangeFromOldMargins:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _UICollectionViewFeedbackLoopDebugger *debugger;
  objc_super v17;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  v17.receiver = self;
  v17.super_class = (Class)UICollectionView;
  -[UIView _layoutMarginsDidChangeFromOldMargins:](&v17, sel__layoutMarginsDidChangeFromOldMargins_);
  -[UIView layoutMargins](self, "layoutMargins");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  if (-[UICollectionViewLayout _shouldInvalidateLayoutForUpdatedLayoutMargins:fromOldMargins:](self->_layout, "_shouldInvalidateLayoutForUpdatedLayoutMargins:fromOldMargins:"))
  {
    debugger = self->_debugger;
    if (debugger)
      -[_UICollectionViewFeedbackLoopDebugger recordCollectionViewInsetsPropertyChange:fromInsets:toInsets:](debugger, "recordCollectionViewInsetsPropertyChange:fromInsets:toInsets:", CFSTR("layoutMargins"), top, left, bottom, right, v9, v11, v13, v15);
    -[UICollectionView _invalidateLayoutForUpdatedLayoutMarginsIfNeeded](self, "_invalidateLayoutForUpdatedLayoutMarginsIfNeeded");
  }
}

- (void)_invalidateLayoutForUpdatedLayoutMarginsIfNeeded
{
  UICollectionViewLayout *layout;
  void *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  UICollectionView *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;
  UIEdgeInsets v17;
  UIEdgeInsets v18;

  v16 = *MEMORY[0x1E0C80C00];
  layout = self->_layout;
  -[UIView layoutMargins](self, "layoutMargins");
  -[UICollectionViewLayout _invalidationContextForUpdatedLayoutMargins:](layout, "_invalidationContextForUpdatedLayoutMargins:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = _invalidateLayoutForUpdatedLayoutMarginsIfNeeded___s_category;
    if (!_invalidateLayoutForUpdatedLayoutMarginsIfNeeded___s_category)
    {
      v5 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v5, (unint64_t *)&_invalidateLayoutForUpdatedLayoutMarginsIfNeeded___s_category);
    }
    if ((*(_BYTE *)v5 & 1) != 0)
    {
      v6 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = v6;
        -[UIView safeAreaInsets](self, "safeAreaInsets");
        NSStringFromUIEdgeInsets(v17);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIView layoutMargins](self, "layoutMargins");
        NSStringFromUIEdgeInsets(v18);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = 134218498;
        v11 = self;
        v12 = 2112;
        v13 = v8;
        v14 = 2112;
        v15 = v9;
        _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "_invalidateLayoutForUpdatedLayoutMarginsIfNeeded: cv == %p; Invalidating layout for safeAreaInsets: %@, layoutMargins: %@",
          (uint8_t *)&v10,
          0x20u);

      }
    }
    -[UICollectionViewLayout invalidateLayoutWithContext:](self->_layout, "invalidateLayoutWithContext:", v4);
    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
  }

}

- (id)_delegateActual
{
  return objc_loadWeakRetained(&self->super._delegate);
}

- (void)setAllowsFocus:(BOOL)allowsFocus
{
  uint64_t v3;

  v3 = 0x80000;
  if (allowsFocus)
    v3 = 0x100000;
  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFFFFE7FFFFLL | v3;
}

- (void)setContentInset:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  void *v15;
  void *v16;
  UICollectionViewData *collectionViewData;
  int v18;
  uint64_t viewFlags;
  objc_super v20;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  v20.receiver = self;
  v20.super_class = (Class)UICollectionView;
  -[UIScrollView setContentInset:](&v20, sel_setContentInset_);
  if (!dyld_program_sdk_at_least()
    || ((-[UIScrollView contentInset](self, "contentInset"), left == v11) ? (v12 = top == v8) : (v12 = 0),
        v12 ? (v13 = right == v10) : (v13 = 0),
        v13 ? (v14 = bottom == v9) : (v14 = 0),
        !v14))
  {
    -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "_setParentContentInset:", top, left, bottom, right);

    }
    collectionViewData = self->_collectionViewData;
    if (collectionViewData)
      v18 = (*(_BYTE *)&collectionViewData->_collectionViewDataFlags >> 3) & 1;
    else
      v18 = 0;
    viewFlags = (uint64_t)self->super.super._viewFlags;
    if (dyld_program_sdk_at_least() && v18 && (viewFlags & 0x8000000000000000) == 0)
      -[UICollectionViewLayout invalidateLayout](self->_layout, "invalidateLayout");
    if (+[UIView _isInAnimationBlock](UIView, "_isInAnimationBlock"))
      -[UIView layoutBelowIfNeeded](self, "layoutBelowIfNeeded");
  }
}

- (void)_setShouldPrefetchCellsWhenPerformingReloadData:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x10000000000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFEFFFFFFFFFFFFFLL | v3;
}

- (void)deleteSections:(NSIndexSet *)sections
{
  id v4;

  -[UICollectionView _sectionIndexesAfterShadowUpdatesForSectionIndexes:](self, "_sectionIndexesAfterShadowUpdatesForSectionIndexes:", sections);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _updateSections:updateAction:](self, "_updateSections:updateAction:", v4, 1);

}

- (void)insertSections:(NSIndexSet *)sections
{
  id v4;

  -[UICollectionView _sectionIndexesAfterShadowUpdatesForSectionIndexes:allowingAppendingInserts:](self, "_sectionIndexesAfterShadowUpdatesForSectionIndexes:allowingAppendingInserts:", sections, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _updateSections:updateAction:](self, "_updateSections:updateAction:", v4, 0);

}

- (void)_updateSections:(id)a3 updateAction:(int)a4
{
  uint64_t v4;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  int v14;

  v4 = *(_QWORD *)&a4;
  v11 = a3;
  if (!(*((_WORD *)&self->_collectionViewFlags + 8) & 2 | (unint64_t)(~*((_DWORD *)&self->_collectionViewFlags
                                                                                                + 2) & 4)))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10046, CFSTR("UICollectionView must be updated via the UICollectionViewDiffableDataSource APIs when acting as the UICollectionView's dataSource: please do not call mutation APIs directly on UICollectionView. %@"), self);

  }
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  v7 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v7 & 0x200000000) == 0)
    -[UICollectionView _setupCellAnimations](self, "_setupCellAnimations");
  -[UICollectionView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __49__UICollectionView__updateSections_updateAction___block_invoke;
  v12[3] = &unk_1E16BD530;
  v14 = v4;
  v9 = v8;
  v13 = v9;
  objc_msgSend(v11, "enumerateIndexesUsingBlock:", v12);
  if ((v7 & 0x200000000) == 0)
    -[UICollectionView _endItemAnimationsWithInvalidationContext:](self, "_endItemAnimationsWithInvalidationContext:", 0);

}

- (id)_sectionIndexesAfterShadowUpdatesForSectionIndexes:(id)a3 allowingAppendingInserts:(BOOL)a4
{
  id v6;
  id v7;
  _QWORD v9[6];
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v6 = a3;
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
  {
    v11 = 0;
    v12 = &v11;
    v13 = 0x3032000000;
    v14 = __Block_byref_object_copy__40;
    v15 = __Block_byref_object_dispose__40;
    v16 = objc_alloc_init(MEMORY[0x1E0CB3788]);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __96__UICollectionView__sectionIndexesAfterShadowUpdatesForSectionIndexes_allowingAppendingInserts___block_invoke;
    v9[3] = &unk_1E16BD970;
    v10 = a4;
    v9[4] = self;
    v9[5] = &v11;
    objc_msgSend(v6, "enumerateIndexesUsingBlock:", v9);
    v7 = (id)v12[5];
    _Block_object_dispose(&v11, 8);

  }
  else
  {
    v7 = v6;
  }

  return v7;
}

- (id)_sectionIndexesAfterShadowUpdatesForSectionIndexes:(id)a3
{
  return -[UICollectionView _sectionIndexesAfterShadowUpdatesForSectionIndexes:allowingAppendingInserts:](self, "_sectionIndexesAfterShadowUpdatesForSectionIndexes:allowingAppendingInserts:", a3, 0);
}

- (void)setRemembersLastFocusedIndexPath:(BOOL)remembersLastFocusedIndexPath
{
  uint64_t v3;

  v3 = 0x8000000000;
  if (!remembersLastFocusedIndexPath)
    v3 = 0;
  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFF7FFFFFFFFFLL | v3;
}

void __94__UICollectionView__updateOrderingOfViewsInDisappearingViewAnimations_onScreenViewAnimations___block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  int has_internal_diagnostics;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = objc_msgSend(v4, "deleteAfterAnimation");
  if (has_internal_diagnostics)
  {
    if ((v6 & 1) == 0)
    {
      __UIFaultDebugAssertLog();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        v15 = *(_QWORD *)(a1 + 32);
        v16 = 138412546;
        v17 = v15;
        v18 = 2112;
        v19 = v4;
        _os_log_fault_impl(&dword_185066000, v11, OS_LOG_TYPE_FAULT, "UICollectionView internal inconsistency: expected disappearing view to be deleted after its animation completes. Collection view: %@; Animation: %@",
          (uint8_t *)&v16,
          0x16u);
      }

    }
  }
  else if ((v6 & 1) == 0)
  {
    v12 = _UIInternalPreference_CollectionViewShouldComputeVisibleBoundsForCurrentUpdateAfterPreparingLayout_block_invoke_9___s_category;
    if (!_UIInternalPreference_CollectionViewShouldComputeVisibleBoundsForCurrentUpdateAfterPreparingLayout_block_invoke_9___s_category)
    {
      v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v12, (unint64_t *)&_UIInternalPreference_CollectionViewShouldComputeVisibleBoundsForCurrentUpdateAfterPreparingLayout_block_invoke_9___s_category);
    }
    v13 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v16 = 138412546;
      v17 = v14;
      v18 = 2112;
      v19 = v4;
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "UICollectionView internal inconsistency: expected disappearing view to be deleted after its animation completes. Collection view: %@; Animation: %@",
        (uint8_t *)&v16,
        0x16u);
    }
  }
  objc_msgSend(v4, "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v7, "_layoutAttributes");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "finalLayoutAttributes");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, void *, void *))(v8 + 16))(v8, v9, v10, v7);

}

- (void)_addControlledSubview:(id)a3
{
  id v5;

  objc_msgSend(a3, "_layoutAttributes");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _addControlledSubview:atZIndex:forced:](self, "_addControlledSubview:atZIndex:forced:", a3, objc_msgSend(v5, "zIndex"), 1);

}

void __94__UICollectionView__updateOrderingOfViewsInDisappearingViewAnimations_onScreenViewAnimations___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  v7 = a4;
  if (v11)
  {
    if (a3)
    {
      v8 = a3;
      v9 = objc_msgSend(v11, "zIndex");
      v10 = objc_msgSend(v8, "zIndex");

      if (v9 == v10)
        objc_msgSend(*(id *)(a1 + 32), "_addControlledSubview:atZIndex:forced:", v7, objc_msgSend(v11, "zIndex"), 1);
    }
  }

}

- (void)_addControlledSubview:(id)a3 atZIndex:(int64_t)a4 forced:(BOOL)a5
{
  -[UICollectionView _addControlledSubview:atZIndex:forced:initialAttributes:](self, "_addControlledSubview:atZIndex:forced:initialAttributes:", a3, a4, a5, 0);
}

- (void)setAlwaysBounceHorizontal:(BOOL)a3
{
  objc_super v3;

  *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x1000000000000uLL;
  v3.receiver = self;
  v3.super_class = (Class)UICollectionView;
  -[UIScrollView setAlwaysBounceHorizontal:](&v3, sel_setAlwaysBounceHorizontal_, a3);
}

- (UICollectionReusableView)dequeueConfiguredReusableSupplementaryViewWithRegistration:(UICollectionViewSupplementaryRegistration *)registration forIndexPath:(NSIndexPath *)indexPath
{
  UICollectionViewSupplementaryRegistration *v7;
  NSIndexPath *v8;
  UICollectionView *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  BOOL v22;
  void *v23;
  void *v24;
  void (**v25)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint8_t buf[4];
  UICollectionViewSupplementaryRegistration *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = registration;
  v8 = indexPath;
  if (dyld_program_sdk_at_least())
  {
    -[UICollectionViewSupplementaryRegistration _collectionViewRequestingViewWhenCreated](v7, "_collectionViewRequestingViewWhenCreated");
    v9 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

    if (v9 == self)
    {
      if (_UIIsPrivateMainBundle())
      {
        __UIFaultDebugAssertLog();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          v28 = v7;
          _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Attempted to dequeue a supplementary view using a registration that was created inside -collectionView:viewForSupplementaryElementOfKind:atIndexPath: or inside a UICollectionViewDiffableDataSource supplementary view provider. Creating a new registration each time a supplementary view is requested will prevent reuse and cause created supplementary views to remain inaccessible in memory for the lifetime of the collection view. Registrations should be created up front and reused. Registration: %@", buf, 0xCu);
        }
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v10 = objc_claimAutoreleasedReturnValue();
        -[NSObject handleFailureInMethod:object:file:lineNumber:description:](v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9715, CFSTR("Attempted to dequeue a supplementary view using a registration that was created inside -collectionView:viewForSupplementaryElementOfKind:atIndexPath: or inside a UICollectionViewDiffableDataSource supplementary view provider. Creating a new registration each time a supplementary view is requested will prevent reuse and cause created supplementary views to remain inaccessible in memory for the lifetime of the collection view. Registrations should be created up front and reused. Registration: %@"), v7);
      }

    }
  }
  -[UICollectionViewSupplementaryRegistration elementKind](v7, "elementKind");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionViewSupplementaryRegistration reuseIdentifier](v7, "reuseIdentifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v11, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9718, CFSTR("UIKit internal inconsistency: registration missing element kind %@"), v7);

  }
  if (!objc_msgSend(v12, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9719, CFSTR("UIKit internal inconsistency: registration missing reuse identifier %@"), v7);

  }
  objc_msgSend((id)objc_opt_class(), "_reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:", v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[UICollectionViewSupplementaryRegistration hasSupplementaryClass](v7, "hasSupplementaryClass");
  v15 = -[UICollectionViewSupplementaryRegistration hasSupplementaryNib](v7, "hasSupplementaryNib");
  v16 = v15;
  if (v14 || v15)
  {
    if (v14)
      goto LABEL_15;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 9724, CFSTR("Supplementary registration is invalid (no view class or nib) %@"), v7);

    if (v14)
    {
LABEL_15:
      -[NSMutableDictionary objectForKeyedSubscript:](self->_supplementaryViewClassDict, "objectForKeyedSubscript:", v13);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v17)
        -[UICollectionView registerClass:forSupplementaryViewOfKind:withReuseIdentifier:](self, "registerClass:forSupplementaryViewOfKind:withReuseIdentifier:", -[UICollectionViewSupplementaryRegistration supplementaryClass](v7, "supplementaryClass"), v11, v12);
      goto LABEL_23;
    }
  }
  -[NSMutableDictionary objectForKeyedSubscript:](self->_supplementaryViewNibDict, "objectForKeyedSubscript:", v13);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
    v22 = 0;
  else
    v22 = v16;
  if (v22)
  {
    -[UICollectionViewSupplementaryRegistration supplementaryNib](v7, "supplementaryNib");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView registerNib:forSupplementaryViewOfKind:withReuseIdentifier:](self, "registerNib:forSupplementaryViewOfKind:withReuseIdentifier:", v23, v11, v12);

  }
LABEL_23:
  -[UICollectionView _dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:](self, "_dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:", v11, v12, v8, 1);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionViewSupplementaryRegistration configurationHandler](v7, "configurationHandler");
  v25 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, void *, NSIndexPath *))v25)[2](v25, v24, v11, v8);

  return (UICollectionReusableView *)v24;
}

- (void)setPrefetchingEnabled:(BOOL)prefetchingEnabled
{
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  p_collectionViewFlags = &self->_collectionViewFlags;
  v4 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if (((((v4 & 0x2000000000000000) == 0) ^ prefetchingEnabled) & 1) == 0)
  {
    v5 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    v6 = *(_QWORD *)p_collectionViewFlags;
    v7 = 0x2000000000000000;
    if (!prefetchingEnabled)
      v7 = 0;
    *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
    *(_QWORD *)p_collectionViewFlags = v6;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v4 & 0xDFFFFFFFFFFFFFFFLL | v7;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v5);
    if (!prefetchingEnabled)
      -[UICollectionView _resetPrefetchState](self, "_resetPrefetchState");
  }
}

- (void)setSelfSizingInvalidation:(UICollectionViewSelfSizingInvalidation)selfSizingInvalidation
{
  unint64_t v3;
  char v4;
  _QWORD v6[4];
  BOOL v7;

  v3 = *((unsigned __int16 *)&self->_collectionViewFlags + 8);
  v4 = *((_BYTE *)&self->_collectionViewFlags + 18);
  *((_WORD *)&self->_collectionViewFlags + 8) = v3 & 0xFFF3 | (4 * (selfSizingInvalidation & 3));
  *((_BYTE *)&self->_collectionViewFlags + 18) = v4;
  if (((v3 >> 2) & 3) != selfSizingInvalidation)
  {
    if ((selfSizingInvalidation & 3) != 0)
    {
      LOBYTE(v3) = v3 & 0xF3 | (4 * (selfSizingInvalidation & 3));
    }
    else
    {
      -[UICollectionView _clearNeedsRecomputePreferredAttributesForInvalidatedElements](self, "_clearNeedsRecomputePreferredAttributesForInvalidatedElements");
      LOWORD(v3) = *((_WORD *)&self->_collectionViewFlags + 8);
    }
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __46__UICollectionView_setSelfSizingInvalidation___block_invoke;
    v6[3] = &__block_descriptor_33_e34_v16__0__UICollectionReusableView_8l;
    v7 = (v3 & 0xC) == 8;
    -[UICollectionView _applyBlockToAllReusableViews:](self, "_applyBlockToAllReusableViews:", v6);
  }
}

- (void)_applyBlockToAllReusableViews:(id)a3
{
  void (**v4)(id, _QWORD);
  void *v5;
  _UICollectionViewSubviewManager *subviewManager;
  uint64_t v7;
  id v8;
  NSMutableDictionary *prefetchCacheItems;
  id v10;
  _UICollectionViewFocusedItemState *focusedItemState;
  _UICollectionViewFocusedItemState *v12;
  _UICollectionViewFocusedItemState *v13;
  _UICollectionViewFocusedItemState *v14;
  _UICollectionViewSubviewManager *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  _QWORD v30[4];
  id v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(id, _QWORD))a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3690]), "initWithOptions:capacity:", 512, 10);
  subviewManager = self->_subviewManager;
  v7 = MEMORY[0x1E0C809B0];
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __50__UICollectionView__applyBlockToAllReusableViews___block_invoke;
  v30[3] = &unk_1E16BDCC0;
  v8 = v5;
  v31 = v8;
  if (subviewManager)
    -[_UICollectionViewSubviewCollection enumerateAllViewsWithEnumerator:](&subviewManager->_visibleViews->super.isa, (uint64_t)v30);
  prefetchCacheItems = self->_prefetchCacheItems;
  v28[0] = v7;
  v28[1] = 3221225472;
  v28[2] = __50__UICollectionView__applyBlockToAllReusableViews___block_invoke_2;
  v28[3] = &unk_1E16BCEA8;
  v10 = v8;
  v29 = v10;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](prefetchCacheItems, "enumerateKeysAndObjectsUsingBlock:", v28);
  if (self->_firstResponderView)
    objc_msgSend(v10, "addObject:");
  focusedItemState = self->_focusedItemState;
  if (focusedItemState)
    focusedItemState = (_UICollectionViewFocusedItemState *)focusedItemState->_reusableView;
  v12 = focusedItemState;

  if (v12)
  {
    v13 = self->_focusedItemState;
    if (v13)
      v13 = (_UICollectionViewFocusedItemState *)v13->_reusableView;
    v14 = v13;
    objc_msgSend(v10, "addObject:", v14);

  }
  v15 = self->_subviewManager;
  v26[0] = v7;
  v26[1] = 3221225472;
  v26[2] = __50__UICollectionView__applyBlockToAllReusableViews___block_invoke_3;
  v26[3] = &unk_1E16BD148;
  v16 = v10;
  v27 = v16;
  -[_UICollectionViewSubviewManager enumerateAllViewsInReuseQueueWithEnumerator:]((uint64_t)v15, (uint64_t)v26);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v17 = v16;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v23 != v20)
          objc_enumerationMutation(v17);
        v4[2](v4, *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * i));
      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
    }
    while (v19);
  }

}

uint64_t __50__UICollectionView__applyBlockToAllReusableViews___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a5);
}

void __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  int v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  id *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;
  CGPoint v22;

  v21 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_incrementUpdateAnimationCountWithContext:", *(_QWORD *)(a1 + 40));
  -[_UICollectionViewSubviewManager allVisibleViewsHashTable](*(uint64_t **)(*(_QWORD *)(a1 + 32) + 2904));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UICollectionViewSubviewManager removeAllVisibleViews](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2904));
  objc_msgSend(*(id *)(a1 + 32), "_startViewAnimationsWithContext:oldVisibleViews:viewAnimator:viewAnimationsCompletedDispatchGroup:", *(_QWORD *)(a1 + 40), v2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  -[_UICollectionViewOrthogonalScrollerSectionController layoutScrollViews](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2872));
  objc_msgSend(*(id *)(a1 + 32), "_layoutSectionContainerViews");
  if (*(_BYTE *)(a1 + 64)
    || (objc_msgSend(*(id *)(a1 + 32), "isScrollAnimating") & 1) == 0
    && (objc_msgSend(*(id *)(a1 + 32), "isDragging") & 1) == 0)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(v3 + 2200);
    v5 = *(double *)(v4 + 48);
    v6 = *(double *)(v4 + 56);
    v7 = *(unsigned __int16 *)(v3 + 2656) | (*(unsigned __int8 *)(v3 + 2658) << 16);
    *(_WORD *)(v3 + 2656) = *(_WORD *)(v3 + 2656);
    *(_BYTE *)(v3 + 2658) = (v7 | 0x10000u) >> 16;
    objc_msgSend((id)v3, "setContentOffset:", v5, v6);
    v8 = *(unsigned __int16 *)(v3 + 2656);
    v9 = (v8 | (*(unsigned __int8 *)(v3 + 2658) << 16)) & 0xFFFEFFFF;
    *(_WORD *)(v3 + 2656) = v8;
    *(_BYTE *)(v3 + 2658) = (v9 | v7 & 0x10000) >> 16;
    if (objc_msgSend(*(id *)(a1 + 32), "isDecelerating"))
    {
      v10 = _UIInternalPreference_CollectionViewShouldComputeVisibleBoundsForCurrentUpdateAfterPreparingLayout_block_invoke_11___s_category;
      if (!_UIInternalPreference_CollectionViewShouldComputeVisibleBoundsForCurrentUpdateAfterPreparingLayout_block_invoke_11___s_category)
      {
        v10 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v10, (unint64_t *)&_UIInternalPreference_CollectionViewShouldComputeVisibleBoundsForCurrentUpdateAfterPreparingLayout_block_invoke_11___s_category);
      }
      if ((*(_BYTE *)v10 & 1) != 0)
      {
        v13 = *(NSObject **)(v10 + 8);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v14 = *(void **)(a1 + 32);
          v15 = v13;
          objc_msgSend(v14, "contentOffset");
          NSStringFromCGPoint(v22);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = 134218242;
          v18 = v14;
          v19 = 2112;
          v20 = v16;
          _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_ERROR, "_updateWithItems: cv == %p updating decel last offset to %@", (uint8_t *)&v17, 0x16u);

        }
      }
      v11 = *(void **)(a1 + 32);
      objc_msgSend(v11, "contentOffset");
      objc_msgSend(v11, "_updateDecelerationLastOffset:");
    }
  }
  -[UICollectionView _resumeDidScrollNotifications](*(CGFloat **)(a1 + 32));
  -[UICollectionViewData finalizeCollectionViewUpdates](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "_finalizeCollectionViewUpdate:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2200));
  if (_UIBarsApplyChromelessEverywhere())
  {
    v12 = *(id **)(a1 + 32);
    objc_msgSend(v12[259], "collectionViewContentSize");
    objc_msgSend(v12, "_setContentSizeFromLayout:isRecursivelyUpdatingVisibleCells:", 0);
  }

}

- (void)_removeUntrackedAuxillaryViewsForBeforeVisibleViews:(id)a3 afterVisibleViews:(id)a4 withTrackingViewAnimations:(id)a5
{
  uint64_t *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  _QWORD v24[5];
  _QWORD v25[5];
  _QWORD v26[4];
  id v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  id v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t *)a3;
  v8 = a4;
  v9 = a5;
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3690]), "initWithOptions:capacity:", 512, objc_msgSend(v9, "count"));
  v11 = MEMORY[0x1E0C809B0];
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = __117__UICollectionView__removeUntrackedAuxillaryViewsForBeforeVisibleViews_afterVisibleViews_withTrackingViewAnimations___block_invoke;
  v35[3] = &unk_1E16BDC98;
  v12 = v10;
  v36 = v12;
  -[_UICollectionViewSubviewCollection enumerateSupplementariesWithEnumerator:]((uint64_t)v8, (uint64_t)v35);
  v33[0] = v11;
  v33[1] = 3221225472;
  v33[2] = __117__UICollectionView__removeUntrackedAuxillaryViewsForBeforeVisibleViews_afterVisibleViews_withTrackingViewAnimations___block_invoke_2;
  v33[3] = &unk_1E16BDC98;
  v13 = v12;
  v34 = v13;
  -[_UICollectionViewSubviewCollection enumerateDecorationsWithEnumerator:]((uint64_t)v8, (uint64_t)v33);
  v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3690]), "initWithOptions:capacity:", 512, objc_msgSend(v9, "count"));
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v15 = v9;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v30;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v30 != v18)
          objc_enumerationMutation(v15);
        objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * v19), "view");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "addObject:", v20);

        ++v19;
      }
      while (v17 != v19);
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
    }
    while (v17);
  }

  v26[1] = 3221225472;
  v26[2] = __117__UICollectionView__removeUntrackedAuxillaryViewsForBeforeVisibleViews_afterVisibleViews_withTrackingViewAnimations___block_invoke_3;
  v26[3] = &unk_1E16BD210;
  v27 = v13;
  v28 = v14;
  v25[0] = v11;
  v25[1] = 3221225472;
  v25[2] = __117__UICollectionView__removeUntrackedAuxillaryViewsForBeforeVisibleViews_afterVisibleViews_withTrackingViewAnimations___block_invoke_4;
  v25[3] = &__block_descriptor_40_e67_v40__0__NSIndexPath_8__NSString_16__UICollectionReusableView_24_B32lu32l8;
  v25[4] = v26;
  v26[0] = v11;
  v21 = v14;
  v22 = v13;
  v23 = v21;
  if (v7)
  {
    -[_UICollectionViewSubviewCollection enumerateSupplementariesWithEnumerator:](v7[1], (uint64_t)v25);
    v24[0] = v11;
    v24[1] = 3221225472;
    v24[2] = __117__UICollectionView__removeUntrackedAuxillaryViewsForBeforeVisibleViews_afterVisibleViews_withTrackingViewAnimations___block_invoke_5;
    v24[3] = &__block_descriptor_40_e67_v40__0__NSIndexPath_8__NSString_16__UICollectionReusableView_24_B32lu32l8;
    v24[4] = v26;
    -[_UICollectionViewSubviewCollection enumerateDecorationsWithEnumerator:](v7[1], (uint64_t)v24);
    v23 = v28;
  }

}

- (id)_indexPathsForVisibleSupplementaryViewsOfKind:(id)a3 isDecorationView:(BOOL)a4
{
  id v6;
  uint64_t *subviewManager;
  void *v8;

  v6 = a3;
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  subviewManager = (uint64_t *)self->_subviewManager;
  if (a4)
    -[_UICollectionViewSubviewManager indexPathsForVisibleDecorationsOfKind:](subviewManager, (uint64_t)v6);
  else
    -[_UICollectionViewSubviewManager indexPathsForVisibleSupplementariesOfKind:](subviewManager, (uint64_t)v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (void)setScrollEnabled:(BOOL)a3
{
  _BOOL8 v3;
  _BOOL4 v5;
  objc_super v6;

  v3 = a3;
  v5 = -[UIScrollView isScrollEnabled](self, "isScrollEnabled");
  v6.receiver = self;
  v6.super_class = (Class)UICollectionView;
  -[UIScrollView setScrollEnabled:](&v6, sel_setScrollEnabled_, v3);
  if (v5 != v3)
    -[UICollectionView _updateDerivesVisibleBoundsFromContainingScrollView](self, "_updateDerivesVisibleBoundsFromContainingScrollView");
}

- (void)deselectItemAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated
{
  _BOOL8 v4;
  id v7;

  v4 = animated;
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  -[UICollectionView _translateDataSourceIndexPathToPresentationIndexPathAsNeeded:](self, "_translateDataSourceIndexPathToPresentationIndexPathAsNeeded:", indexPath);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _deselectItemAtIndexPath:animated:notifyDelegate:](self, "_deselectItemAtIndexPath:animated:notifyDelegate:", v7, v4, 0);

}

- (void)_deselectItemAtIndexPath:(id)a3 animated:(BOOL)a4 notifyDelegate:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL8 v6;
  id v8;
  _UICollectionViewSelectionController *selectionController;
  _BOOL4 v10;
  void *v11;
  void *v12;
  _UICollectionViewSelectionController *v13;
  void *v14;
  void *v15;
  void *v16;
  _UICollectionViewMultiSelectController *multiSelectController;
  _UICollectionViewSelectionController *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[6];
  _BYTE v41[128];
  uint64_t v42;

  v5 = a5;
  v6 = a4;
  v42 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  selectionController = self->_selectionController;
  if (selectionController
    && -[NSMutableSet containsObject:](selectionController->_selectedIndexPaths, "containsObject:", v8))
  {
    v10 = -[UICollectionView _validateSelectionOrHighlightIndexPath:isSelection:allowMassIndexPath:assertIfInvalid:](self, "_validateSelectionOrHighlightIndexPath:isSelection:allowMassIndexPath:assertIfInvalid:", v8, 1, 0, 0);
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (!v5
      || (*(_QWORD *)&self->_collectionViewFlags & 0x10) == 0
      || objc_msgSend(v11, "collectionView:shouldDeselectItemAtIndexPath:", self, v8))
    {
      v13 = self->_selectionController;
      if (v13)
        -[NSMutableSet removeObject:](v13->_selectedIndexPaths, "removeObject:", v8);
      -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v8);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v14;
      if (v14)
      {
        objc_msgSend(v14, "_setSelected:animated:", 0, v6);
      }
      else if (v10)
      {
        -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "_cellBackgroundOrBottomSeparatorChangedAtIndexPath:separatorOnly:", v8, 0);

      }
      if (v5)
      {
        multiSelectController = self->_multiSelectController;
        v18 = self->_selectionController;
        v19 = v18 ? (void *)-[NSMutableSet copy](v18->_selectedIndexPaths, "copy") : 0;
        objc_msgSend(v19, "allObjects");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UICollectionViewMultiSelectController selectedIndexPathsChanged:](multiSelectController, "selectedIndexPathsChanged:", v20);

        if ((*(_QWORD *)&self->_collectionViewFlags & 0x40) != 0)
          objc_msgSend(v12, "collectionView:didDeselectItemAtIndexPath:", self, v8);
      }
      if (dyld_program_sdk_at_least()
        && ((*((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                       + 18) << 16)) & 0x20000) == 0
        && -[UICollectionView _shouldSelectionFollowFocusForIndexPath:initiatedBySelection:](self, "_shouldSelectionFollowFocusForIndexPath:initiatedBySelection:", 0, 1))
      {
        -[UIView _focusSystem](self, "_focusSystem");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = v21;
        if (v15 && objc_msgSend(v21, "_focusedItemIsContainedInEnvironment:includeSelf:", v15, 1))
        {
          v35 = v22;
          v23 = -[UICollectionViewData globalIndexForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v8);
          -[UICollectionView indexPathsForSelectedItems](self, "indexPathsForSelectedItems");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v40[0] = MEMORY[0x1E0C809B0];
          v40[1] = 3221225472;
          v40[2] = __69__UICollectionView__deselectItemAtIndexPath_animated_notifyDelegate___block_invoke;
          v40[3] = &unk_1E16BCC30;
          v40[4] = self;
          v40[5] = v23;
          objc_msgSend(v24, "sortedArrayUsingComparator:", v40);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v26 = v25;
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
          if (v27)
          {
            v28 = v27;
            v29 = *(_QWORD *)v37;
            while (2)
            {
              for (i = 0; i != v28; ++i)
              {
                if (*(_QWORD *)v37 != v29)
                  objc_enumerationMutation(v26);
                v31 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * i);
                -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v31);
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                if (v32
                  && -[UICollectionView _shouldSelectionFollowFocusForIndexPath:initiatedBySelection:](self, "_shouldSelectionFollowFocusForIndexPath:initiatedBySelection:", v31, 1))
                {

                  v22 = v35;
                  objc_msgSend(v35, "_updateFocusImmediatelyToEnvironment:", v32);

                  goto LABEL_33;
                }

              }
              v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
              if (v28)
                continue;
              break;
            }
          }

          v22 = v35;
          objc_msgSend(v35, "_startDeferringFocusIfSupported");
LABEL_33:

        }
      }
      -[UIView traitCollection](self, "traitCollection");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend(v33, "userInterfaceIdiom");

      if (v34 == 3)
        -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");

    }
  }

}

- (UICollectionView)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout *)layout
{
  double height;
  double width;
  double y;
  double x;
  UICollectionViewLayout *v10;
  UICollectionView *v11;
  UICollectionView *v12;
  objc_super v14;

  height = frame.size.height;
  width = frame.size.width;
  y = frame.origin.y;
  x = frame.origin.x;
  v10 = layout;
  if (!v10)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("UICollectionView must be initialized with a non-nil layout parameter"));
  v14.receiver = self;
  v14.super_class = (Class)UICollectionView;
  v11 = -[UIScrollView initWithFrame:](&v14, sel_initWithFrame_, x, y, width, height);
  v12 = v11;
  if (v11)
  {
    objc_storeStrong((id *)&v11->_layout, layout);
    *((_QWORD *)&v12->_collectionViewFlags + 1) |= 0x2400uLL;
    UICollectionViewCommonSetup(v12);
  }

  return v12;
}

void __49__UICollectionView_reconfigureItemsAtIndexPaths___block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "_reconfigureItemAtIndexPath:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++), (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

- (void)_reconfigureItemAtIndexPath:(id)a3
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  _WORD *v10;
  __int16 v11;
  void *v12;
  void *v13;
  id v14;

  v5 = a3;
  v14 = v5;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10255, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("indexPath != nil"));

    v5 = 0;
  }
  -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = *(id *)(v6 + 24);
    if (v8)
    {
      v9 = v8;
      v10 = *(id *)(v7 + 16);
      if (v10)
      {
        v11 = v10[144];

        if ((v11 & 1) != 0)
        {
          *(_BYTE *)(v7 + 8) |= 4u;
          goto LABEL_10;
        }
      }
      else
      {

      }
    }
  }
  -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v14);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
    -[UICollectionView _reconfigureCell:forItemAtIndexPath:](self, "_reconfigureCell:forItemAtIndexPath:", v12, v14);

LABEL_10:
}

- (void)_reconfigureCell:(id)a3 forItemAtIndexPath:(id)a4
{
  id v8;
  id v9;
  void *v10;
  UICollectionViewCell **p_cellBeingReconfigured;
  NSIndexPath **p_indexPathBeingReconfigured;
  void *v13;
  unint64_t v14;
  NSObject *v15;
  id WeakRetained;
  void *v17;
  id v18;
  unint64_t v19;
  NSObject *v20;
  UICollectionViewCell *v21;
  NSIndexPath *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  UICollectionViewCell *v30;
  void *v31;

  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v8)
  {
    if (v9)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10276, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("cell != nil"));

    if (v10)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10277, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("indexPath != nil"));

LABEL_3:
  p_cellBeingReconfigured = &self->_cellBeingReconfigured;
  if (self->_cellBeingReconfigured)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView dataSourceIndexPathForPresentationIndexPath:](self, "dataSourceIndexPathForPresentationIndexPath:", v10);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = *p_cellBeingReconfigured;
    -[UICollectionView dataSourceIndexPathForPresentationIndexPath:](self, "dataSourceIndexPathForPresentationIndexPath:", self->_indexPathBeingReconfigured);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10280, CFSTR("Attempted to reconfigure a cell while already in the process of reconfiguring a cell. Check the backtrace to see what's causing this. (Attempted to reconfigure cell %@ for index path %@ while already reconfiguring cell %@ for index path %@)"), v8, v25, v30, v26);

  }
  objc_storeStrong((id *)&self->_cellBeingReconfigured, a3);
  p_indexPathBeingReconfigured = &self->_indexPathBeingReconfigured;
  objc_storeStrong((id *)&self->_indexPathBeingReconfigured, a4);
  v13 = (void *)_UISetCurrentFallbackEnvironment(self);
  v14 = qword_1EDDC6688;
  if (!qword_1EDDC6688)
  {
    v14 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v14, (unint64_t *)&qword_1EDDC6688);
  }
  v15 = *(id *)(v14 + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(v14 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v15))
  {
    objc_msgSend(v10, "section");
    objc_msgSend(v10, "item");
    _os_signpost_emit_unreliably_with_name_impl();
  }

  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10286, CFSTR("UICollectionView dataSource is not set: %@"), self);

  }
  -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "collectionView:cellForItemAtIndexPath:", self, v10);
  v18 = (id)objc_claimAutoreleasedReturnValue();

  if (v18 != v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView dataSourceIndexPathForPresentationIndexPath:](self, "dataSourceIndexPathForPresentationIndexPath:", v10);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10288, CFSTR("UICollectionView dataSource returned a different cell from -collectionView:cellForItemAtIndexPath: than the cell being reconfigured, which is not allowed. When reconfiguring an item, you must obtain the existing cell by dequeuing a cell for the index path specified, using the same registration or reuse identifier that was used to dequeue the cell originally, and return the same cell. Index path: %@; Existing cell: %@; Returned cell: %@"),
      v29,
      v8,
      v18);

  }
  v19 = qword_1EDDC6690;
  if (!qword_1EDDC6690)
  {
    v19 = __UILogCategoryGetNode("CollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v19, (unint64_t *)&qword_1EDDC6690);
  }
  v20 = *(id *)(v19 + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(v19 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v20))
  {
    _os_signpost_emit_unreliably_with_name_impl();
  }

  _UIRestorePreviousFallbackEnvironment(v13);
  v21 = *p_cellBeingReconfigured;
  *p_cellBeingReconfigured = 0;

  v22 = *p_indexPathBeingReconfigured;
  *p_indexPathBeingReconfigured = 0;

}

void __49__UICollectionView__invalidateLayoutWithContext___block_invoke_9(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;
  id v8;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2584), "objectForKeyedSubscript:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2584), "setObject:forKeyedSubscript:", v7, a2);
    v6 = v7;
  }
  v8 = v6;
  objc_msgSend(v6, "addObjectsFromArray:", a3);

}

- (void)_setReorderFeedbackGenerator:(id)a3
{
  _UIDragSnappingFeedbackGenerator *v5;
  _UIDragSnappingFeedbackGenerator *reorderFeedbackGenerator;
  void *v7;

  v5 = (_UIDragSnappingFeedbackGenerator *)a3;
  if (-[UIFeedbackGenerator isActive](self->_reorderFeedbackGenerator, "isActive"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 2147, CFSTR("Reorder feedback behavior should not be changed while active."));

  }
  reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
  self->_reorderFeedbackGenerator = v5;

}

- (void)_setShouldBecomeFocusedOnSelection:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x20000;
  if (a3)
    v3 = 0x40000;
  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFFFFF9FFFFLL | v3;
}

uint64_t __41__UICollectionView__invalidateWithBlock___block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t __49__UICollectionView__invalidateLayoutWithContext___block_invoke_7(uint64_t a1)
{
  -[UICollectionViewData invalidateItemsAtIndexPaths:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
  -[UICollectionViewData invalidateSupplementaryIndexPaths:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 48));
  return -[UICollectionViewData invalidateDecorationIndexPaths:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 56));
}

uint64_t __49__UICollectionView__invalidateLayoutWithContext___block_invoke_8(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t result;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _QWORD v19[5];
  _QWORD v20[5];

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v2 = *(void **)(*(_QWORD *)(a1 + 40) + 2576);
    if (!v2)
    {
      v3 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      v4 = *(_QWORD *)(a1 + 40);
      v5 = *(void **)(v4 + 2576);
      *(_QWORD *)(v4 + 2576) = v3;

      v2 = *(void **)(*(_QWORD *)(a1 + 40) + 2576);
    }
    objc_msgSend(v2, "addObjectsFromArray:", *(_QWORD *)(a1 + 32));
  }
  v6 = objc_msgSend(*(id *)(a1 + 48), "count");
  v7 = MEMORY[0x1E0C809B0];
  if (v6)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (!*(_QWORD *)(v8 + 2584))
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(void **)(v10 + 2584);
      *(_QWORD *)(v10 + 2584) = v9;

      v8 = *(_QWORD *)(a1 + 40);
    }
    v12 = *(void **)(a1 + 48);
    v20[0] = v7;
    v20[1] = 3221225472;
    v20[2] = __49__UICollectionView__invalidateLayoutWithContext___block_invoke_9;
    v20[3] = &unk_1E16B8590;
    v20[4] = v8;
    objc_msgSend(v12, "enumerateKeysAndObjectsUsingBlock:", v20);
  }
  result = objc_msgSend(*(id *)(a1 + 56), "count");
  if (result)
  {
    v14 = *(_QWORD *)(a1 + 40);
    if (!*(_QWORD *)(v14 + 2592))
    {
      v15 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v16 = *(_QWORD *)(a1 + 40);
      v17 = *(void **)(v16 + 2592);
      *(_QWORD *)(v16 + 2592) = v15;

      v14 = *(_QWORD *)(a1 + 40);
    }
    v18 = *(void **)(a1 + 56);
    v19[0] = v7;
    v19[1] = 3221225472;
    v19[2] = __49__UICollectionView__invalidateLayoutWithContext___block_invoke_10;
    v19[3] = &unk_1E16B8590;
    v19[4] = v14;
    return objc_msgSend(v18, "enumerateKeysAndObjectsUsingBlock:", v19);
  }
  return result;
}

- (void)setSelectionFollowsFocus:(BOOL)selectionFollowsFocus
{
  unint64_t v3;
  int v4;
  __int128 v5;
  unint64_t v6;

  if (selectionFollowsFocus)
    v3 = 2;
  else
    v3 = 1;
  v4 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  *((_QWORD *)&v5 + 1) = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | ((unint64_t)*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  *(_QWORD *)&v5 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if (((v5 >> 15) & 3) != v3)
  {
    v6 = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFFFFFE7FFFLL;
    *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v6 | (v3 << 15);
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v4);
    *((_WORD *)&self->_collectionViewFlags + 8) = v4 | (v3 >> 49);
    -[UICollectionView _updateSelectionIsKey](self, "_updateSelectionIsKey");
  }
}

- (void)setAllowsSelection:(BOOL)allowsSelection
{
  uint64_t v3;
  int v5;

  v3 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if (((((v3 & 0x400) == 0) ^ allowsSelection) & 1) == 0)
  {
    if (allowsSelection)
    {
      v5 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                     + 18) << 16);
      *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
      *((_QWORD *)&self->_collectionViewFlags + 1) = v3 | 0x400;
      *((_WORD *)&self->_collectionViewFlags + 8) = v5;
      *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v5);
    }
    else
    {
      if (!-[UICollectionView _isEditing](self, "_isEditing"))
        -[UICollectionView _deselectAllAnimated:notifyDelegate:](self, "_deselectAllAnimated:notifyDelegate:", 0, 0);
      *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x400uLL;
      -[UICollectionView setAllowsMultipleSelection:](self, "setAllowsMultipleSelection:", 0);
    }
  }
}

- (void)_setDelaysUserInitiatedItemSelection:(BOOL)a3
{
  int v3;
  __int16 v4;

  v3 = *((_WORD *)&self->_collectionViewFlags + 8) & 0xFEFF | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  if (a3)
    v4 = 256;
  else
    v4 = 0;
  *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8) & 0xFEFF | v4;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v3);
}

- (void)setDragInteractionEnabled:(BOOL)dragInteractionEnabled
{
  -[_UICollectionViewDragAndDropController setDragInteractionEnabled:]((uint64_t)self->_dragAndDropController, dragInteractionEnabled);
}

- (void)sendSubviewToBack:(id)a3
{
  id v4;
  void *v5;
  int v6;
  objc_super v7;

  v4 = a3;
  -[UICollectionView subviewRouter]((id *)&self->super.super.super.super.isa);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "shouldSendSubviewToBack:", v4);

  if (v6)
  {
    v7.receiver = self;
    v7.super_class = (Class)UICollectionView;
    -[UIView sendSubviewToBack:](&v7, sel_sendSubviewToBack_, v4);
  }

}

- (BOOL)_shouldFadeCellsForBoundChangeWhileRotating
{
  BOOL v3;
  void *v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  _QWORD v9[3];

  if (dyld_program_sdk_at_least()
    && (-[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes")
     || -[UICollectionViewLayout _disallowsFadeCellsForBoundsChange](self->_layout, "_disallowsFadeCellsForBoundsChange")))
  {
    return 0;
  }
  -[UIView window](self, "window");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _viewControllerForAncestor](self, "_viewControllerForAncestor");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  v3 = 1;
  if (v4 && v5 && objc_msgSend(v4, "isRotating"))
  {
    memset(v9, 0, sizeof(v9));
    objc_msgSend(v6, "_getRotationContentSettings:", v9);
    if (LOBYTE(v9[0]))
      v7 = BYTE3(v9[0]) == 0;
    else
      v7 = 0;
    v3 = !v7;
  }

  return v3;
}

void __45__UICollectionView__indexPathForView_ofType___block_invoke_2(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v8;
  id v9;
  id v10;
  id v11;

  v11 = a2;
  if (a3)
    v8 = *(void **)(a3 + 24);
  else
    v8 = 0;
  v9 = v8;
  v10 = *(id *)(a1 + 32);

  if (v9 == v10)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }

}

- (id)_visibleSupplementaryViewsOfKind:(id)a3 isDecorationView:(BOOL)a4
{
  id v6;
  uint64_t *subviewManager;
  void *v8;

  v6 = a3;
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  subviewManager = (uint64_t *)self->_subviewManager;
  if (a4)
    -[_UICollectionViewSubviewManager visibleDecorationsOfKind:](subviewManager, (uint64_t)v6);
  else
    -[_UICollectionViewSubviewManager visibleSupplementariesOfKind:](subviewManager, (uint64_t)v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (void)setDragDestinationDelegate:(id)a3
{
  id WeakRetained;
  void *v5;
  id obj;

  obj = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);

  v5 = obj;
  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dragDestinationDelegate, obj);
    -[_UICollectionViewDragAndDropController didUpdateDropDelegate]((id *)&self->_dragAndDropController->super.super.isa);
    v5 = obj;
  }

}

- (void)setDropDelegate:(id)dropDelegate
{
  id WeakRetained;
  id obj;

  obj = dropDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dropDelegate, obj);
    _UIValidateAccountBasedDelegateRespondsToSelector(obj, (uint64_t)sel__collectionView_dataOwnerForDropSession_withDestinationIndexPath_);
    -[_UICollectionViewDragAndDropController didUpdateDropDelegate]((id *)&self->_dragAndDropController->super.super.isa);
  }

}

- (void)setAllowsMultipleSelection:(BOOL)allowsMultipleSelection
{
  _UICollectionViewSelectionController *selectionController;
  _UICollectionViewSelectionController *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (((((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x800) == 0) ^ allowsMultipleSelection) & 1) == 0)
  {
    -[_UICollectionViewSelectionController setAllowsMultipleSelection:]((uint64_t)self->_selectionController, allowsMultipleSelection);
    if (allowsMultipleSelection)
    {
      *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x800uLL;
      -[UICollectionView _updateMultiSelectControllerIfNeeded](self, "_updateMultiSelectControllerIfNeeded");
      -[UICollectionView setAllowsSelection:](self, "setAllowsSelection:", 1);
    }
    else
    {
      selectionController = self->_selectionController;
      if (selectionController
        && -[NSMutableSet count](selectionController->_selectedIndexPaths, "count") >= 2
        && !-[UICollectionView _isEditing](self, "_isEditing"))
      {
        v6 = self->_selectionController;
        if (v6)
          v7 = (void *)-[NSMutableSet copy](v6->_selectedIndexPaths, "copy");
        else
          v7 = 0;
        v8 = (id)objc_msgSend(v7, "anyObject");
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v9 = v7;
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v16;
          do
          {
            v13 = 0;
            do
            {
              if (*(_QWORD *)v16 != v12)
                objc_enumerationMutation(v9);
              v14 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v13);
              if (v14 != v8)
                -[UICollectionView _deselectItemAtIndexPath:animated:notifyDelegate:](self, "_deselectItemAtIndexPath:animated:notifyDelegate:", v14, 0, 0, (_QWORD)v15);
              ++v13;
            }
            while (v11 != v13);
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
          }
          while (v11);
        }

      }
      *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x800uLL;
      -[UICollectionView _updateMultiSelectControllerIfNeeded](self, "_updateMultiSelectControllerIfNeeded", (_QWORD)v15);
    }
  }
}

void __33__UICollectionView_preparedCells__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD *v10;

  v4 = a3;
  v10 = v4;
  if (v4)
    v5 = (void *)v4[3];
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    v7 = *(void **)(a1 + 32);
    if (v10)
      v8 = (void *)v10[3];
    else
      v8 = 0;
    v9 = v8;
    objc_msgSend(v7, "addObject:", v9);

  }
}

- (BOOL)_updatePrefetchItemIfNeeded:(id)a3 forIndexPath:(id)a4 withLayoutAttributes:(id)a5 willDisplay:(BOOL)a6
{
  id *v10;
  UICollectionView *v11;
  id v12;
  id v13;
  char v14;
  unint64_t v15;
  id v16;
  int v17;
  BOOL v18;
  id v19;
  id v20;
  unint64_t v21;
  NSObject *v22;
  NSObject *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  NSObject *log;
  _QWORD v30[5];
  id v31;
  id v32;
  uint8_t buf[4];
  UICollectionView *v34;
  __int16 v35;
  id *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v10 = (id *)a3;
  v11 = (UICollectionView *)a4;
  v12 = a5;
  if (!v10)
  {
    v13 = 0;
    v18 = 1;
    goto LABEL_34;
  }
  v13 = v10[3];
  if (v13)
  {
    v14 = *((_BYTE *)v10 + 8);
    v15 = qword_1EDDC6520;
    if (!qword_1EDDC6520)
    {
      v15 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v15, (unint64_t *)&qword_1EDDC6520);
    }
    if ((*(_BYTE *)v15 & 1) != 0)
    {
      v24 = *(NSObject **)(v15 + 8);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        log = v24;
        -[UICollectionView _ui_shortDescription](v11, "_ui_shortDescription");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "_layoutAttributes");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v11);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 134219010;
        v34 = self;
        v35 = 2112;
        v36 = v10;
        v37 = 2112;
        v38 = v28;
        v39 = 2112;
        v40 = v25;
        v41 = 2112;
        v42 = v26;
        _os_log_impl(&dword_185066000, log, OS_LOG_TYPE_ERROR, "[UICV %p] _updatePrefetchItemIfNeeded:%@ indexPath:%@ cellAttrs: %@ attrsFromLayout: %@", buf, 0x34u);

      }
    }
    if ((v14 & 7) != 0)
    {
      objc_msgSend(v13, "_setHiddenForReuse:", 0);
      if ((v14 & 4) != 0)
        -[UICollectionView _reconfigureCell:forItemAtIndexPath:](self, "_reconfigureCell:forItemAtIndexPath:", v13, v11);
    }
    if (a6 || (v14 & 2) != 0)
    {
      -[UICollectionView _configureCachedCellForDisplay:withIndexPath:layoutAttributesToUpdate:](self, "_configureCachedCellForDisplay:withIndexPath:layoutAttributesToUpdate:", v13, v11, 0);
      if ((v14 & 1) == 0)
      {
LABEL_12:
        if ((v14 & 2) != 0)
          goto LABEL_13;
        goto LABEL_21;
      }
    }
    else if ((v14 & 1) == 0)
    {
      goto LABEL_12;
    }
    if (v12)
    {
      v19 = v12;
    }
    else
    {
      -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v11);
      v19 = (id)objc_claimAutoreleasedReturnValue();
      if (!v19)
      {
        v17 = 0;
        if (a6)
          goto LABEL_32;
        goto LABEL_30;
      }
    }
    -[UIBackgroundConfiguration _setCustomView:]((uint64_t)v10, v19);
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = __94__UICollectionView__updatePrefetchItemIfNeeded_forIndexPath_withLayoutAttributes_willDisplay___block_invoke;
    v30[3] = &unk_1E16B47A8;
    v30[4] = self;
    v31 = v19;
    v32 = v13;
    v20 = v19;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v30);

    if ((v14 & 2) != 0)
    {
LABEL_13:
      v16 = v10[2];
      if (v16)
      {
        objc_msgSend(v13, "_invalidatePreferredAttributes");
        -[UICollectionView _checkForPreferredAttributesInView:originalAttributes:](self, "_checkForPreferredAttributesInView:originalAttributes:", v13, v16);
        v17 = 1;
      }
      else
      {
        if (os_variant_has_internal_diagnostics())
        {
          __UIFaultDebugAssertLog();
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412546;
            v34 = v11;
            v35 = 2112;
            v36 = (id *)v13;
            _os_log_fault_impl(&dword_185066000, v27, OS_LOG_TYPE_FAULT, "UIKit internal inconsistency: prefetch items should never have nil attributes. Index path: %@; View: %@",
              buf,
              0x16u);
          }

        }
        else
        {
          v21 = qword_1EDDC6528;
          if (!qword_1EDDC6528)
          {
            v21 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v21, (unint64_t *)&qword_1EDDC6528);
          }
          v22 = *(NSObject **)(v21 + 8);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v34 = v11;
            v35 = 2112;
            v36 = (id *)v13;
            _os_log_impl(&dword_185066000, v22, OS_LOG_TYPE_ERROR, "UIKit internal inconsistency: prefetch items should never have nil attributes. Index path: %@; View: %@",
              buf,
              0x16u);
          }
        }
        v17 = 0;
      }

      if (a6)
        goto LABEL_32;
      goto LABEL_30;
    }
LABEL_21:
    v17 = 1;
    if (a6)
    {
LABEL_32:
      v18 = v17 != 0;
      goto LABEL_33;
    }
LABEL_30:
    if ((objc_msgSend(v13, "_isHiddenForReuse") & 1) == 0)
      objc_msgSend(v13, "_setHiddenForReuse:", 1);
    goto LABEL_32;
  }
  v18 = 1;
LABEL_33:
  *((_BYTE *)v10 + 8) &= 0xF8u;
LABEL_34:

  return v18;
}

- (void)_configureCachedCellForDisplay:(id)a3 withIndexPath:(id)a4 layoutAttributesToUpdate:(id)a5
{
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  _QWORD v14[7];
  uint8_t buf[4];
  UICollectionView *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = _configureCachedCellForDisplay_withIndexPath_layoutAttributesToUpdate____s_category;
  if (!_configureCachedCellForDisplay_withIndexPath_layoutAttributesToUpdate____s_category)
  {
    v9 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v9, (unint64_t *)&_configureCachedCellForDisplay_withIndexPath_layoutAttributesToUpdate____s_category);
  }
  if ((*(_BYTE *)v9 & 1) != 0)
  {
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      objc_msgSend(a4, "_ui_shortDescription");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a3, "_layoutAttributes");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134219010;
      v16 = self;
      v17 = 2112;
      v18 = a3;
      v19 = 2112;
      v20 = v12;
      v21 = 2112;
      v22 = v13;
      v23 = 2112;
      v24 = a5;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "[UICV %p] Configuring cached cell %@ with indexPath:%@ cellAttrs: %@ layoutAttrsToUpdate: %@", buf, 0x34u);

    }
  }
  if (a5)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __90__UICollectionView__configureCachedCellForDisplay_withIndexPath_layoutAttributesToUpdate___block_invoke;
    v14[3] = &unk_1E16BCDE0;
    v14[4] = self;
    v14[5] = a5;
    v14[6] = a3;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v14);
  }
  -[UICollectionView _configureCellForDisplay:indexPath:cached:](self, "_configureCellForDisplay:indexPath:cached:", a3, a4, 1);
}

void __49__UICollectionView__invalidateLayoutWithContext___block_invoke_10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;
  id v8;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2592), "objectForKeyedSubscript:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2592), "setObject:forKeyedSubscript:", v7, a2);
    v6 = v7;
  }
  v8 = v6;
  objc_msgSend(v6, "addObjectsFromArray:", a3);

}

- (void)setSpringLoaded:(BOOL)a3
{
  -[UIView _setSpringLoaded:interactionInitializer:](self, a3, &__block_literal_global_899);
}

- (void)setPrefetchDataSource:(id)prefetchDataSource
{
  id v4;
  char v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  id v13;
  unint64_t v14;
  unsigned int v15;
  _UIWeakHelper *v16;
  _UIWeakHelper *v17;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  int v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  id location;
  _QWORD block[4];
  id v29;
  UICollectionView *v30;

  v4 = prefetchDataSource;
  if (!v4)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  v5 = dyld_program_sdk_at_least();
  v6 = v4;
  if ((v5 & 1) == 0)
  {
    v7 = objc_msgSend(v4, sel_allowsWeakReference);
    v6 = v4;
    if ((v7 & 1) == 0)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __42__UICollectionView_setPrefetchDataSource___block_invoke;
      block[3] = &unk_1E16B1B50;
      v8 = v4;
      v29 = v8;
      v30 = self;
      if (setPrefetchDataSource__once != -1)
      {
        dispatch_once(&setPrefetchDataSource__once, block);
        v8 = v29;
      }

      goto LABEL_7;
    }
  }
LABEL_8:
  v9 = v6;

  WeakRetained = objc_loadWeakRetained((id *)&self->_prefetchDataSource);
  v11 = WeakRetained;
  if (WeakRetained != v9 || !v9 && (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x40) != 0)
  {
    if (WeakRetained)
      objc_setAssociatedObject(WeakRetained, (char *)&self->super.super.super.super.isa + 2, 0, (void *)1);
    objc_storeWeak((id *)&self->_prefetchDataSource, v9);
    v12 = v9;
    -[UICollectionView prefetchDataSource](self, "prefetchDataSource");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    if (v12 == v13)
    {
      v15 = -[UICollectionView allowsWeakReference](self, sel_allowsWeakReference);

      v14 = (unint64_t)(v12 != 0) << 6;
      if (v12 && v15)
      {
        objc_initWeak(&location, self);
        v16 = [_UIWeakHelper alloc];
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v25[2] = __42__UICollectionView_setPrefetchDataSource___block_invoke_248;
        v25[3] = &unk_1E16B3F40;
        objc_copyWeak(&v26, &location);
        v17 = -[_UIWeakHelper initWithDeallocationBlock:](v16, "initWithDeallocationBlock:", v25);
        objc_setAssociatedObject(v12, (char *)&self->super.super.super.super.isa + 2, v17, (void *)1);

        objc_destroyWeak(&v26);
        objc_destroyWeak(&location);
        v14 = 64;
      }
    }
    else
    {

      v14 = (unint64_t)(v12 != 0) << 6;
    }

    p_collectionViewFlags = &self->_collectionViewFlags;
    v19 = *((unsigned __int16 *)p_collectionViewFlags + 8) | (*((unsigned __int8 *)p_collectionViewFlags + 18) << 16);
    v20 = *((_QWORD *)p_collectionViewFlags + 1) & 0xFFFFFFFFFFFFFFBFLL | v14;
    *(_QWORD *)p_collectionViewFlags = *(_QWORD *)p_collectionViewFlags;
    *((_QWORD *)p_collectionViewFlags + 1) = v20;
    *((_WORD *)p_collectionViewFlags + 8) = v19;
    *((_BYTE *)p_collectionViewFlags + 18) = BYTE2(v19);
    v21 = objc_opt_respondsToSelector();
    v22 = 16;
    if ((v21 & 1) == 0)
      v22 = 0;
    *((_QWORD *)p_collectionViewFlags + 1) = *((_QWORD *)p_collectionViewFlags + 1) & 0xFFFFFFFFFFFFFFEFLL | v22;
    v23 = objc_opt_respondsToSelector();
    v24 = 32;
    if ((v23 & 1) == 0)
      v24 = 0;
    *((_QWORD *)p_collectionViewFlags + 1) = *((_QWORD *)p_collectionViewFlags + 1) & 0xFFFFFFFFFFFFFFDFLL | v24;
  }

}

- (id)prefetchDataSource
{
  return objc_loadWeakRetained((id *)&self->_prefetchDataSource);
}

- (void)_setAllowsSelectionDuringEditing:(BOOL)a3
{
  uint64_t v3;
  int v5;

  v3 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if (((((v3 & 0x1000) == 0) ^ a3) & 1) == 0)
  {
    if (a3)
    {
      v5 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                     + 18) << 16);
      *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
      *((_QWORD *)&self->_collectionViewFlags + 1) = v3 | 0x1000;
      *((_WORD *)&self->_collectionViewFlags + 8) = v5;
      *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v5);
    }
    else
    {
      if (-[UICollectionView _isEditing](self, "_isEditing"))
        -[UICollectionView _deselectAllAnimated:notifyDelegate:](self, "_deselectAllAnimated:notifyDelegate:", 0, 0);
      *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x1000uLL;
      -[UICollectionView setAllowsMultipleSelectionDuringEditing:](self, "setAllowsMultipleSelectionDuringEditing:", 0);
    }
  }
}

- (void)_setShouldSkipForcedLayoutBeforeBatchUpdates:(BOOL)a3
{
  int v3;
  __int16 v4;

  v3 = *((_WORD *)&self->_collectionViewFlags + 8) & 0xEFFF | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  if (a3)
    v4 = 4096;
  else
    v4 = 0;
  *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8) & 0xEFFF | v4;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v3);
}

- (UICollectionViewLayoutAttributes)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath
{
  void *v5;
  void *v6;
  void *v8;

  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController)
    && !-[UICollectionView _isOperatingWithPresentationValues](self, "_isOperatingWithPresentationValues"))
  {
    -[UICollectionView _translateDataSourceIndexPathToPresentationIndexPathAsNeeded:](self, "_translateDataSourceIndexPathToPresentationIndexPathAsNeeded:", indexPath);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = (void *)objc_msgSend(v8, "copy");

      if (v6)
        objc_msgSend(v6, "setIndexPath:", indexPath);
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)self->_collectionViewData, indexPath);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(v5, "copy");
  }

  return (UICollectionViewLayoutAttributes *)v6;
}

- (void)setDirectionalLayoutMargins:(NSDirectionalEdgeInsets)a3
{
  double trailing;
  double bottom;
  double leading;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  objc_super v17;

  trailing = a3.trailing;
  bottom = a3.bottom;
  leading = a3.leading;
  top = a3.top;
  -[UIView _rawLayoutMargins](self, "_rawLayoutMargins");
  v12 = *((_DWORD *)&self->super.super._viewFlags + 4);
  if ((v12 & 0x80000) != 0)
    v13 = v11;
  else
    v13 = v9;
  if ((*(_QWORD *)&v12 & 0x80000) == 0)
    v9 = v11;
  if (leading != v13 || top != v8 || trailing != v9 || bottom != v10)
  {
    *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFDFFFFFFFFFFFFLL | ((unint64_t)((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x6000000000000) != 0x4000000000000) << 49);
    v17.receiver = self;
    v17.super_class = (Class)UICollectionView;
    -[UIView setDirectionalLayoutMargins:](&v17, sel_setDirectionalLayoutMargins_, top, leading, bottom, trailing);
  }
}

void __55__UICollectionView__scrollFirstResponderCellToVisible___block_invoke(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;

  v7 = a2;
  if (objc_msgSend(a3, "_isAncestorOfFirstResponder")
    && objc_msgSend(*(id *)(a1 + 32), "_indexPathIsValid:", v7))
  {
    objc_msgSend(*(id *)(a1 + 32), "_scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:", v7, 0, *(unsigned __int8 *)(a1 + 40), 0.0, 0.0, 0.0, 0.0);
    *a4 = 1;
  }

}

- (void)_setAllowsMultipleSelectionDuringEditing:(BOOL)a3
{
  uint64_t v3;
  int v5;
  _UICollectionViewSelectionController *selectionController;
  _UICollectionViewSelectionController *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if (((((v3 & 0x4000) == 0) ^ a3) & 1) == 0)
  {
    if (a3)
    {
      v5 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                     + 18) << 16);
      *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
      *((_QWORD *)&self->_collectionViewFlags + 1) = v3 | 0x4000;
      *((_WORD *)&self->_collectionViewFlags + 8) = v5;
      *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v5);
      -[UICollectionView _updateMultiSelectControllerIfNeeded](self, "_updateMultiSelectControllerIfNeeded");
      -[UICollectionView setAllowsSelectionDuringEditing:](self, "setAllowsSelectionDuringEditing:", 1);
    }
    else
    {
      selectionController = self->_selectionController;
      if (selectionController
        && -[NSMutableSet count](selectionController->_selectedIndexPaths, "count") >= 2
        && -[UICollectionView _isEditing](self, "_isEditing"))
      {
        v7 = self->_selectionController;
        if (v7)
          v8 = (void *)-[NSMutableSet copy](v7->_selectedIndexPaths, "copy");
        else
          v8 = 0;
        v9 = (id)objc_msgSend(v8, "anyObject");
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v10 = v8;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v17;
          do
          {
            for (i = 0; i != v12; ++i)
            {
              if (*(_QWORD *)v17 != v13)
                objc_enumerationMutation(v10);
              v15 = *(id *)(*((_QWORD *)&v16 + 1) + 8 * i);
              if (v15 != v9)
                -[UICollectionView _deselectItemAtIndexPath:animated:notifyDelegate:](self, "_deselectItemAtIndexPath:animated:notifyDelegate:", v15, 0, 0, (_QWORD)v16);
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
          }
          while (v12);
        }

      }
      *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x4000uLL;
      -[UICollectionView _updateMultiSelectControllerIfNeeded](self, "_updateMultiSelectControllerIfNeeded", (_QWORD)v16);
    }
  }
}

- (void)_setAllowsVisibleCellUpdatesDuringUpdateAnimations:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x100000000000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFEFFFFFFFFFFFFFFLL | v3;
}

- (void)setSemanticContentAttribute:(int64_t)a3
{
  UISemanticContentAttribute v5;
  _UICollectionViewSubviewManager *subviewManager;
  UICollectionViewLayout *v7;
  UICollectionView *v8;
  UICollectionView *v9;
  uint64_t v10;
  uint64_t v11;
  UIView *backgroundView;
  UICollectionViewLayout *v13;
  UIView *v14;
  UIView *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  objc_super v20;

  v5 = -[UIView semanticContentAttribute](self, "semanticContentAttribute");
  v20.receiver = self;
  v20.super_class = (Class)UICollectionView;
  -[UIView setSemanticContentAttribute:](&v20, sel_setSemanticContentAttribute_, a3);
  if (v5 != a3)
  {
    subviewManager = self->_subviewManager;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __48__UICollectionView_setSemanticContentAttribute___block_invoke;
    v19[3] = &__block_descriptor_40_e70_v48__0Q8__NSIndexPath_16__NSString_24__UICollectionReusableView_32_B40l;
    v19[4] = a3;
    if (subviewManager)
      -[_UICollectionViewSubviewCollection enumerateAllViewsWithEnumerator:](&subviewManager->_visibleViews->super.isa, (uint64_t)v19);
    v7 = self->_layout;
    v8 = self;
    v9 = v8;
    if (v7)
    {
      v10 = -[UIView effectiveUserInterfaceLayoutDirection](v8, "effectiveUserInterfaceLayoutDirection");
      if (v10 == -[UICollectionViewLayout developmentLayoutDirection](v7, "developmentLayoutDirection"))
      {
        if (!-[UIView _flipsHorizontalAxis](v9, "_flipsHorizontalAxis"))
          goto LABEL_10;
        v11 = 0;
      }
      else
      {
        v11 = -[UICollectionViewLayout _wantsRightToLeftHorizontalMirroringIfNeeded](v7, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      }
      -[UIScrollView _setFlipsHorizontalAxis:](v9, "_setFlipsHorizontalAxis:", v11);
    }
LABEL_10:

    backgroundView = v9->_backgroundView;
    v13 = self->_layout;
    v14 = backgroundView;
    v15 = v14;
    if (v13)
      v16 = v14 == 0;
    else
      v16 = 1;
    if (v16)
      goto LABEL_19;
    v17 = -[UIView effectiveUserInterfaceLayoutDirection](v14, "effectiveUserInterfaceLayoutDirection");
    if (v17 == -[UICollectionViewLayout developmentLayoutDirection](v13, "developmentLayoutDirection"))
    {
      if (!-[UIView _flipsHorizontalAxis](v15, "_flipsHorizontalAxis"))
      {
LABEL_19:

        -[UICollectionView reloadData](v9, "reloadData");
        return;
      }
      v18 = 0;
    }
    else
    {
      v18 = -[UICollectionViewLayout _wantsRightToLeftHorizontalMirroringIfNeeded](v13, "_wantsRightToLeftHorizontalMirroringIfNeeded");
    }
    -[UIView _setFlipsHorizontalAxis:](v15, "_setFlipsHorizontalAxis:", v18);
    goto LABEL_19;
  }
}

BOOL __151__UICollectionView__contentOffsetForScrollingToItemAtIndexPath_atScrollPosition_additionalInsets_itemFrame_containingScrollView_clampToScrollableArea___block_invoke_2(uint64_t a1, void *a2)
{
  double v3;

  objc_msgSend(a2, "doubleValue");
  return vabdd_f64(v3, *(double *)(a1 + 32)) <= 0.0001;
}

- (void)_setPreferredDragDestinationVisualStyle:(int64_t)a3
{
  _UICollectionViewDragAndDropController *dragAndDropController;

  dragAndDropController = self->_dragAndDropController;
  if (dragAndDropController)
    dragAndDropController->_preferredDragDestinationVisualStyle = a3;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_debugger, 0);
  objc_storeStrong((id *)&self->_expectedDiffableUpdateItem, 0);
  objc_storeStrong((id *)&self->_currentPromiseFulfillmentCell, 0);
  objc_storeStrong((id *)&self->_endOfContentFocusContainerGuide, 0);
  objc_storeStrong(&self->_navigationCompletion, 0);
  objc_storeStrong((id *)&self->_indexOverlayManager, 0);
  objc_storeStrong((id *)&self->_reorderDestinationView, 0);
  objc_storeStrong((id *)&self->_indexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar, 0);
  objc_storeStrong((id *)&self->_horizontalIndexTitleBar, 0);
  objc_storeStrong((id *)&self->_selectedIndexTitleEntry, 0);
  objc_storeStrong((id *)&self->_rememberedFocusedItemState, 0);
  objc_storeStrong((id *)&self->_focusedItemState, 0);
  objc_storeStrong(&self->_reloadDataCompletionBlock, 0);
  objc_storeStrong((id *)&self->_targetFocusedItemState, 0);
  objc_storeStrong((id *)&self->_indexBarSectionIndexTitles, 0);
  objc_storeStrong((id *)&self->_indexBar, 0);
  objc_storeStrong((id *)&self->_viewsOptedOutOfBeingParentedIntoContainers, 0);
  objc_storeStrong((id *)&self->_selectionInteraction, 0);
  objc_storeStrong((id *)&self->_sceneActivationInteraction, 0);
  objc_storeStrong((id *)&self->_contextMenuInteraction, 0);
  objc_storeStrong((id *)&self->_sectionContainersQueuedForRemoval, 0);
  objc_storeStrong((id *)&self->_sectionToContainerViewMap, 0);
  objc_storeStrong((id *)&self->_scrollingTargetIndexPath, 0);
  objc_storeStrong((id *)&self->_contentOffsetRestorationAnchor, 0);
  objc_storeStrong((id *)&self->_subviewRouter, 0);
  objc_storeStrong((id *)&self->_subviewManager, 0);
  objc_storeStrong((id *)&self->_selectionController, 0);
  objc_storeStrong((id *)&self->_multiSelectController, 0);
  objc_storeStrong((id *)&self->_sectionFocusGuideController, 0);
  objc_storeStrong((id *)&self->_orthogonalScrollerController, 0);
  objc_storeStrong((id *)&self->_highlightedSpringLoadedItem, 0);
  objc_destroyWeak((id *)&self->_dragSourceDelegate);
  objc_destroyWeak((id *)&self->_dragDestinationDelegate);
  objc_destroyWeak((id *)&self->_dropDelegate);
  objc_destroyWeak((id *)&self->_dragDelegate);
  objc_storeStrong((id *)&self->_dragAndDropController, 0);
  objc_destroyWeak((id *)&self->_containerScrollView);
  objc_destroyWeak((id *)&self->_prefetchDataSource);
  objc_storeStrong((id *)&self->_prefetchVelocityIntegrator, 0);
  objc_storeStrong((id *)&self->_prefetchCacheItems, 0);
  objc_storeStrong((id *)&self->_activeOrthogonalPrefetchingContext, 0);
  objc_storeStrong((id *)&self->_orthogonalSectionPrefetchingContexts, 0);
  objc_storeStrong((id *)&self->_mainPrefetchingContext, 0);
  objc_storeStrong((id *)&self->_intrinsicContentSizeInvalidationContext, 0);
  objc_storeStrong((id *)&self->_reconfigureAnimator, 0);
  objc_storeStrong((id *)&self->_indexPathBeingReconfigured, 0);
  objc_storeStrong((id *)&self->_cellBeingReconfigured, 0);
  objc_storeStrong((id *)&self->_cancellingToIndexPath, 0);
  objc_storeStrong((id *)&self->_contentFocusContainerGuide, 0);
  objc_storeStrong(&self->_invalidationBlock, 0);
  objc_storeStrong((id *)&self->_indexPathsRequiringPreferredAttributes, 0);
  objc_storeStrong((id *)&self->_invalidatedDecorationIndexPaths, 0);
  objc_storeStrong((id *)&self->_invalidatedSupplementaryIndexPaths, 0);
  objc_storeStrong((id *)&self->_invalidatedItemIndexPaths, 0);
  objc_storeStrong((id *)&self->_trackedValuesKeys, 0);
  objc_storeStrong((id *)&self->_interactiveTransitionValueTrackingDict, 0);
  objc_storeStrong((id *)&self->_reorderFeedbackGenerator, 0);
  objc_storeStrong((id *)&self->_nextLayoutForInteractiveTranstion, 0);
  objc_storeStrong((id *)&self->_endInteractiveTransitionAnimationGroup, 0);
  objc_storeStrong(&self->_interactiveCompletionHandler, 0);
  objc_storeStrong((id *)&self->_interactiveTransitionInfos, 0);
  objc_storeStrong((id *)&self->_transitionLayoutAttributes, 0);
  objc_storeStrong((id *)&self->_supplementaryViewRegisteredKinds, 0);
  objc_storeStrong((id *)&self->_supplementaryViewNibExternalObjectsTables, 0);
  objc_storeStrong((id *)&self->_cellNibExternalObjectsTables, 0);
  objc_storeStrong((id *)&self->_supplementaryViewNibDict, 0);
  objc_storeStrong((id *)&self->_supplementaryViewClassDict, 0);
  objc_storeStrong((id *)&self->_cellNibDict, 0);
  objc_storeStrong((id *)&self->_cellClassDict, 0);
  objc_storeStrong(&self->_postUpdateBlock, 0);
  objc_storeStrong(&self->_updateCompletionHandler, 0);
  objc_storeStrong((id *)&self->_currentTouch, 0);
  objc_storeStrong((id *)&self->_originalDeleteItems, 0);
  objc_storeStrong((id *)&self->_originalInsertItems, 0);
  objc_storeStrong((id *)&self->_moveItems, 0);
  objc_storeStrong((id *)&self->_reloadItems, 0);
  objc_storeStrong((id *)&self->_deleteItems, 0);
  objc_storeStrong((id *)&self->_insertItems, 0);
  objc_storeStrong((id *)&self->_identityTracker, 0);
  objc_storeStrong((id *)&self->_currentUpdate, 0);
  objc_storeStrong((id *)&self->_collectionViewData, 0);
  objc_storeStrong((id *)&self->_pendingDeselectionIndexPaths, 0);
  objc_storeStrong((id *)&self->_pendingSelectionIndexPath, 0);
  objc_storeStrong((id *)&self->_clonedDecorationViewsDict, 0);
  objc_storeStrong((id *)&self->_clonedSupplementaryViewsDict, 0);
  objc_storeStrong((id *)&self->_clonedCellsDict, 0);
  objc_storeStrong((id *)&self->_firstResponderIndexPath, 0);
  objc_storeStrong((id *)&self->_firstResponderViewKind, 0);
  objc_storeStrong((id *)&self->_newContentView, 0);
  objc_storeStrong((id *)&self->_firstResponderView, 0);
  objc_storeStrong((id *)&self->_backgroundView, 0);
  objc_destroyWeak((id *)&self->_dataSource);
  objc_storeStrong((id *)&self->_layout, 0);
}

uint64_t __68__UICollectionView__processViewSpecificInvalidationsForVisibleViews__block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v5 = (void *)objc_msgSend(a3, "copy");
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "_visibleDecorationViewOfKind:atIndexPath:", a2, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v11;
        if (v11)
        {
          objc_msgSend(v11, "_invalidatePreferredAttributes");
          -[UICollectionViewData layoutAttributesForDecorationViewOfKind:atIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192), a2, v10);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
          {
            objc_msgSend(*(id *)(a1 + 32), "_checkForPreferredAttributesInView:originalAttributes:", v12, v13);
            objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", v13, v12);
          }
          else if ((objc_msgSend(v12, "_isInUpdateAnimation") & 1) == 0)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = *(_QWORD *)(a1 + 32);
            v18 = *(_QWORD *)(a1 + 40);
            objc_msgSend(v10, "_ui_shortDescription");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "layoutAttributesForDecorationViewOfKind:atIndexPath:", a2, v10);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "_layoutAttributes");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "handleFailureInMethod:object:file:lineNumber:description:", v18, v17, CFSTR("UICollectionView.m"), 6325, CFSTR("UICollectionView internal inconsistency: No attributes returned for invalidated decoration view. Element kind: %@; index path: %@; decoration view: %@; attributes from layout: %@; attributes from view: %@; collection view: %@"),
              a2,
              v19,
              v12,
              v14,
              v16,
              *(_QWORD *)(a1 + 32));

          }
        }

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v7);
  }

  return objc_msgSend(a3, "removeAllObjects");
}

- (void)scrollToItemAtIndexPath:(NSIndexPath *)indexPath atScrollPosition:(UICollectionViewScrollPosition)scrollPosition animated:(BOOL)animated
{
  -[UICollectionView _scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:](self, "_scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:", -[UICollectionView _translateDataSourceIndexPathToPresentationIndexPathAsNeeded:](self, "_translateDataSourceIndexPathToPresentationIndexPathAsNeeded:", indexPath), scrollPosition, animated, 0.0, 0.0, 0.0, 0.0);
}

- (void)setBackgroundView:(UIView *)backgroundView
{
  UIView *v5;
  UIView **p_backgroundView;
  UIView *v7;
  UIView *v8;
  UICollectionViewLayout *v9;
  UIView *v10;
  UIView *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  UIView *v15;

  v5 = backgroundView;
  p_backgroundView = &self->_backgroundView;
  v7 = self->_backgroundView;
  if (v7 != v5)
  {
    v15 = v5;
    -[UIView removeFromSuperview](v7, "removeFromSuperview");
    objc_storeStrong((id *)&self->_backgroundView, backgroundView);
    -[UIView bounds](self, "bounds");
    -[UIView setFrame:](*p_backgroundView, "setFrame:");
    v8 = *p_backgroundView;
    v9 = self->_layout;
    v10 = v8;
    v11 = v10;
    if (v9)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (v12)
      goto LABEL_11;
    v13 = -[UIView effectiveUserInterfaceLayoutDirection](v10, "effectiveUserInterfaceLayoutDirection");
    if (v13 == -[UICollectionViewLayout developmentLayoutDirection](v9, "developmentLayoutDirection"))
    {
      if (!-[UIView _flipsHorizontalAxis](v11, "_flipsHorizontalAxis"))
      {
LABEL_11:

        -[UIScrollView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", *p_backgroundView, 1);
        v5 = v15;
        goto LABEL_12;
      }
      v14 = 0;
    }
    else
    {
      v14 = -[UICollectionViewLayout _wantsRightToLeftHorizontalMirroringIfNeeded](v9, "_wantsRightToLeftHorizontalMirroringIfNeeded");
    }
    -[UIView _setFlipsHorizontalAxis:](v11, "_setFlipsHorizontalAxis:", v14);
    goto LABEL_11;
  }
LABEL_12:

}

- (BOOL)_viewIsReorderedCell:(id)a3
{
  void *v3;
  BOOL v4;

  -[UICollectionView _reorderedItemForView:](self, "_reorderedItemForView:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

- (id)_reorderedItemForView:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  id v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    -[UICollectionView _reorderedItems](self, "_reorderedItems", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v9, "cell");
          v10 = (id)objc_claimAutoreleasedReturnValue();

          if (v10 == v4)
          {
            v6 = v9;
            goto LABEL_13;
          }
        }
        v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_13:

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (BOOL)canBecomeFirstResponder
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  objc_super v9;

  -[UIView window](self, "window");
  v3 = objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (void *)v3;
    -[UIView window](self, "window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "screen");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "_userInterfaceIdiom");

    if (v7 == 3)
      return 1;
  }
  v9.receiver = self;
  v9.super_class = (Class)UICollectionView;
  return -[UIResponder canBecomeFirstResponder](&v9, sel_canBecomeFirstResponder);
}

- (void)_setShouldResetInitialLayoutOnDataSourceChange:(BOOL)a3
{
  int v3;
  __int16 v4;

  v3 = *((_WORD *)&self->_collectionViewFlags + 8) & 0xFDFF | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  if (a3)
    v4 = 512;
  else
    v4 = 0;
  *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8) & 0xFDFF | v4;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v3);
}

- (void)_setShouldPersistSelectionOnReloadDataWhenPossible:(BOOL)a3
{
  int v3;
  __int16 v4;

  v3 = *((_WORD *)&self->_collectionViewFlags + 8) & 0xFBFF | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  if (a3)
    v4 = 1024;
  else
    v4 = 0;
  *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8) & 0xFBFF | v4;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v3);
}

- (void)setDragSourceDelegate:(id)a3
{
  id WeakRetained;
  void *v5;
  id obj;

  obj = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);

  v5 = obj;
  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dragSourceDelegate, obj);
    -[_UICollectionViewDragAndDropController didUpdateDragDelegate]((id *)&self->_dragAndDropController->super.super.isa);
    v5 = obj;
  }

}

uint64_t __119__UICollectionView__endItemAnimationsWithInvalidationContext_tentativelyForReordering_animator_collectionViewAnimator___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (NSIndexPath)indexPathForItemAtPoint:(CGPoint)point
{
  void *v4;
  _UICollectionViewDragAndDropController *dragAndDropController;
  uint64_t v6;

  -[UICollectionView _indexPathForItemAtPoint:](self, "_indexPathForItemAtPoint:", point.x, point.y);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (dyld_program_sdk_at_least())
  {
    dragAndDropController = self->_dragAndDropController;
    if (!dragAndDropController || dragAndDropController->_sessionKind != 1)
    {
      -[UICollectionView _translatePresentationIndexPathToDataSourceIndexPathAsNeeded:](self, "_translatePresentationIndexPathToDataSourceIndexPathAsNeeded:", v4);
      v6 = objc_claimAutoreleasedReturnValue();

      v4 = (void *)v6;
    }
  }
  return (NSIndexPath *)v4;
}

- (id)_indexPathForItemAtPoint:(CGPoint)a3
{
  double y;
  double x;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  y = a3.y;
  x = a3.x;
  v22 = *MEMORY[0x1E0C80C00];
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[UICollectionViewData layoutAttributesForCellsInRect:validateLayout:](self->_collectionViewData, 1, x, y, 1.0, 1.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v6);
        v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        if (v9)
        {
          v13 = objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * i), "zIndex", (_QWORD)v17);
          if (v13 <= objc_msgSend(v9, "zIndex"))
            continue;
        }
        v14 = v12;

        v9 = v14;
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }

  objc_msgSend(v9, "indexPath");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

- (BOOL)__isKindOfUICollectionView
{
  return 1;
}

- (UICollectionView)initWithFrame:(CGRect)a3
{
  return -[UICollectionView initWithFrame:collectionViewLayout:](self, "initWithFrame:collectionViewLayout:", 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (UICollectionView)initWithCoder:(NSCoder *)coder
{
  NSCoder *v4;
  UICollectionView *v5;
  uint64_t v6;
  UICollectionViewLayout *layout;
  uint64_t v8;
  UIView *backgroundView;
  char v10;
  _BOOL4 v11;
  char v12;
  _BOOL4 v13;
  char v14;
  void *v15;
  uint64_t v16;
  NSMutableDictionary *cellNibExternalObjectsTables;
  void *v18;
  uint64_t v19;
  NSMutableDictionary *supplementaryViewNibExternalObjectsTables;
  uint64_t v21;
  NSMutableDictionary *cellNibDict;
  uint64_t v23;
  NSMutableDictionary *supplementaryViewNibDict;
  _BOOL4 v25;
  uint64_t v26;
  objc_super v28;

  v4 = coder;
  v28.receiver = self;
  v28.super_class = (Class)UICollectionView;
  v5 = -[UIScrollView initWithCoder:](&v28, sel_initWithCoder_, v4);
  if (v5)
  {
    -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UICollectionLayout"));
    v6 = objc_claimAutoreleasedReturnValue();
    layout = v5->_layout;
    v5->_layout = (UICollectionViewLayout *)v6;

    -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UIBackgroundView"));
    v8 = objc_claimAutoreleasedReturnValue();
    backgroundView = v5->_backgroundView;
    v5->_backgroundView = (UIView *)v8;

    if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIAllowsSelection")))
      v10 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIAllowsSelection"));
    else
      v10 = 1;
    *((_QWORD *)&v5->_collectionViewFlags + 1) = *((_QWORD *)&v5->_collectionViewFlags + 1) & 0xFFFFFFFFFFFFFBFFLL | ((unint64_t)(v10 & 1) << 10);
    v11 = -[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIAllowsMultipleSelection"));
    if (v11)
      LOBYTE(v11) = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIAllowsMultipleSelection"));
    *((_QWORD *)&v5->_collectionViewFlags + 1) = *((_QWORD *)&v5->_collectionViewFlags + 1) & 0xFFFFFFFFFFFFF7FFLL | ((unint64_t)v11 << 11);
    if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIAllowsSelectionDuringEditing")))
      v12 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIAllowsSelectionDuringEditing"));
    else
      v12 = 1;
    *((_QWORD *)&v5->_collectionViewFlags + 1) = *((_QWORD *)&v5->_collectionViewFlags + 1) & 0xFFFFFFFFFFFFEFFFLL | ((unint64_t)(v12 & 1) << 12);
    v13 = -[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIAllowsMultipleSelectionDuringEditing"));
    if (v13)
      LOBYTE(v13) = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIAllowsMultipleSelectionDuringEditing"));
    *((_QWORD *)&v5->_collectionViewFlags + 1) = *((_QWORD *)&v5->_collectionViewFlags + 1) & 0xFFFFFFFFFFFFBFFFLL | ((unint64_t)v13 << 14);
    if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIAllowsUserInitiatedMultipleSelection")))
      v14 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIAllowsUserInitiatedMultipleSelection"));
    else
      v14 = 1;
    *((_QWORD *)&v5->_collectionViewFlags + 1) = *((_QWORD *)&v5->_collectionViewFlags + 1) & 0xFFFFFFFFFFFFDFFFLL | ((unint64_t)(v14 & 1) << 13);
    -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UICollectionViewCellPrototypeNibExternalObjects"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    mutableDictionaryByTransformingLeafDictionariesToWeakValued(v15);
    v16 = objc_claimAutoreleasedReturnValue();
    cellNibExternalObjectsTables = v5->_cellNibExternalObjectsTables;
    v5->_cellNibExternalObjectsTables = (NSMutableDictionary *)v16;

    -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UICollectionViewSupplementaryViewPrototypeNibExternalObjects"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    mutableDictionaryByTransformingLeafDictionariesToWeakValued(v18);
    v19 = objc_claimAutoreleasedReturnValue();
    supplementaryViewNibExternalObjectsTables = v5->_supplementaryViewNibExternalObjectsTables;
    v5->_supplementaryViewNibExternalObjectsTables = (NSMutableDictionary *)v19;

    -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UICollectionViewCellNibDict"));
    v21 = objc_claimAutoreleasedReturnValue();
    cellNibDict = v5->_cellNibDict;
    v5->_cellNibDict = (NSMutableDictionary *)v21;

    -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UICollectionViewSupplementaryViewNibDict"));
    v23 = objc_claimAutoreleasedReturnValue();
    supplementaryViewNibDict = v5->_supplementaryViewNibDict;
    v5->_supplementaryViewNibDict = (NSMutableDictionary *)v23;

    UICollectionViewCommonSetup(v5);
    if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UICollectionViewPrefetchingEnabled")))
    {
      v25 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UICollectionViewPrefetchingEnabled"));
      v26 = 0x2000000000000000;
      if (!v25)
        v26 = 0;
      *((_QWORD *)&v5->_collectionViewFlags + 1) = *((_QWORD *)&v5->_collectionViewFlags + 1) & 0xDFFFFFFFFFFFFFFFLL | v26;
    }
    if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISpringLoaded")))
      -[UICollectionView setSpringLoaded:](v5, "setSpringLoaded:", -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UISpringLoaded")));
  }

  return v5;
}

- (void)encodeWithCoder:(id)a3
{
  id v4;
  UICollectionViewLayout *layout;
  UIView *backgroundView;
  uint64_t v7;
  objc_super v8;

  v4 = a3;
  v8.receiver = self;
  v8.super_class = (Class)UICollectionView;
  -[UIScrollView encodeWithCoder:](&v8, sel_encodeWithCoder_, v4);
  layout = self->_layout;
  if (layout)
    objc_msgSend(v4, "encodeObject:forKey:", layout, CFSTR("UICollectionLayout"));
  backgroundView = self->_backgroundView;
  if (backgroundView)
    objc_msgSend(v4, "encodeObject:forKey:", backgroundView, CFSTR("UIBackgroundView"));
  v7 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v7 & 0x400) != 0)
  {
    if ((v7 & 0x800) == 0)
      goto LABEL_7;
  }
  else
  {
    objc_msgSend(v4, "encodeBool:forKey:", 0, CFSTR("UIAllowsSelection"));
    v7 = *((_QWORD *)&self->_collectionViewFlags + 1);
    if ((v7 & 0x800) == 0)
    {
LABEL_7:
      if ((v7 & 0x1000) == 0)
        goto LABEL_8;
      goto LABEL_24;
    }
  }
  objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIAllowsMultipleSelection"));
  v7 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v7 & 0x1000) == 0)
  {
LABEL_8:
    if ((v7 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIAllowsSelectionDuringEditing"));
  v7 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v7 & 0x4000) == 0)
  {
LABEL_9:
    if ((v7 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_25:
  objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIAllowsMultipleSelectionDuringEditing"));
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x2000) != 0)
LABEL_10:
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIAllowsUserInitiatedMultipleSelection"));
LABEL_11:
  if (-[NSMutableDictionary count](self->_cellNibExternalObjectsTables, "count"))
    objc_msgSend(v4, "encodeObject:forKey:", self->_cellNibExternalObjectsTables, CFSTR("UICollectionViewCellPrototypeNibExternalObjects"));
  if (-[NSMutableDictionary count](self->_supplementaryViewNibExternalObjectsTables, "count"))
    objc_msgSend(v4, "encodeObject:forKey:", self->_supplementaryViewNibExternalObjectsTables, CFSTR("UICollectionViewSupplementaryViewPrototypeNibExternalObjects"));
  if (-[NSMutableDictionary count](self->_cellNibDict, "count"))
    objc_msgSend(v4, "encodeObject:forKey:", self->_cellNibDict, CFSTR("UICollectionViewCellNibDict"));
  if (-[NSMutableDictionary count](self->_supplementaryViewNibDict, "count"))
    objc_msgSend(v4, "encodeObject:forKey:", self->_supplementaryViewNibDict, CFSTR("UICollectionViewSupplementaryViewNibDict"));
  objc_msgSend(v4, "encodeBool:forKey:", -[UICollectionView isPrefetchingEnabled](self, "isPrefetchingEnabled"), CFSTR("UICollectionViewPrefetchingEnabled"));
  if (-[UICollectionView isSpringLoaded](self, "isSpringLoaded"))
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UISpringLoaded"));

}

- (NSString)description
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  UICollectionViewLayout *layout;
  id WeakRetained;
  void *v9;
  objc_class *v10;
  void *v11;
  id v12;
  objc_super v14;

  v3 = *((_QWORD *)&self->_collectionViewFlags + 1);
  v4 = v3 & 0x4000000000000000;
  *((_QWORD *)&self->_collectionViewFlags + 1) = v3 | 0x4000000000000000;
  v14.receiver = self;
  v14.super_class = (Class)UICollectionView;
  -[UIScrollView description](&v14, sel_description);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "mutableCopy");

  objc_msgSend(v6, "deleteCharactersInRange:", objc_msgSend(v6, "length") - 1, 1);
  layout = self->_layout;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  v9 = WeakRetained;
  if ((v3 & 0x4000000000000000) != 0)
  {
    v10 = (objc_class *)objc_opt_class();
    NSStringFromClass(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_loadWeakRetained((id *)&self->_dataSource);
    objc_msgSend(v6, "appendFormat:", CFSTR("; layout: %@; dataSource: <%@: %p>>"), layout, v11, v12);

  }
  else
  {
    objc_msgSend(v6, "appendFormat:", CFSTR("; layout: %@; dataSource: %@>"), layout, WeakRetained);
  }

  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xBFFFFFFFFFFFFFFFLL | v4;
  return (NSString *)v6;
}

- (void)_layoutDirectionTraitDidChange
{
  UICollectionView *v3;
  uint64_t v4;
  uint64_t v5;
  UICollectionViewLayout *v6;

  v6 = self->_layout;
  v3 = self;
  if (v3 && v6)
  {
    v4 = -[UIView effectiveUserInterfaceLayoutDirection](v3, "effectiveUserInterfaceLayoutDirection");
    if (v4 != -[UICollectionViewLayout developmentLayoutDirection](v6, "developmentLayoutDirection"))
    {
      v5 = -[UICollectionViewLayout _wantsRightToLeftHorizontalMirroringIfNeeded](v6, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      goto LABEL_7;
    }
    if (-[UIView _flipsHorizontalAxis](v3, "_flipsHorizontalAxis"))
    {
      v5 = 0;
LABEL_7:
      -[UIScrollView _setFlipsHorizontalAxis:](v3, "_setFlipsHorizontalAxis:", v5);
    }
  }

}

- (void)_invalidateLayoutForPreferredContentSizeCategoryTraitDidChange
{
  -[UICollectionViewLayout invalidateLayout](self->_layout, "invalidateLayout");
}

- (void)_traitsConsumedByLayoutInvalidated
{
  id v3;

  if (dyld_program_sdk_at_least()
    && ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges, (uint64_t)CFSTR("CollectionViewAutomaticallyInvalidatesForTraitChanges"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) != 0|| byte_1EDDA7E94))
  {
    v3 = objc_alloc_init((Class)objc_msgSend((id)objc_opt_class(), "invalidationContextClass"));
    objc_msgSend(v3, "_setIntent:", 14);
    -[UICollectionViewLayout invalidateLayoutWithContext:](self->_layout, "invalidateLayoutWithContext:", v3);

  }
}

- (BOOL)canBeEdited
{
  void *v4;
  char v5;

  if ((dyld_program_sdk_at_least() & 1) != 0)
    return 1;
  -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "canBeEdited");

  return v5;
}

void __31__UICollectionView_setEditing___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v15;
  uint64_t v16;
  uint64_t v17;

  objc_msgSend(*(id *)(a1 + 32), "collectionViewLayout");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "canBeEdited");

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "collectionViewLayout");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setEditing:", *(unsigned __int8 *)(a1 + 40));

  }
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 2904);
  v12 = MEMORY[0x1E0C809B0];
  v13 = 3221225472;
  v14 = __31__UICollectionView_setEditing___block_invoke_2;
  v15 = &unk_1E16BCB40;
  v16 = v5;
  LOBYTE(v17) = *(_BYTE *)(a1 + 40);
  if (v6)
  {
    -[_UICollectionViewSubviewCollection enumerateAllViewsWithEnumerator:](*(_QWORD **)(v6 + 8), (uint64_t)&v12);
    v5 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend(*(id *)(v5 + 2072), "_invalidationContextForRefreshingVisibleElementAttributes", v12, v13, v14, v15, v16, v17);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "collectionViewLayout");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "invalidateLayoutWithContext:", v7);

  objc_msgSend(*(id *)(a1 + 32), "window");
  v9 = objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled");

    if (v11)
      objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
  }

}

uint64_t __31__UICollectionView_setEditing___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
    a3 = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_updateEditing:forView:atIndexPath:elementCategory:", *(unsigned __int8 *)(a1 + 40), a5, a3, a2);
}

- (BOOL)_canEditItemAtIndexPath:(id)a3
{
  id v4;
  BOOL v5;
  void *v6;
  char v7;

  v4 = a3;
  if (!v4)
  {
    v5 = 0;
    goto LABEL_9;
  }
  if ((*(_QWORD *)&self->_collectionViewFlags & 0x40000000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "collectionView:canEditItemAtIndexPath:", self, v4);
LABEL_8:
    v5 = v7;

    goto LABEL_9;
  }
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 8) != 0)
  {
    -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "_collectionView:canEditItemAtIndexPath:", self, v4);
    goto LABEL_8;
  }
  v5 = 1;
LABEL_9:

  return v5;
}

- (id)_objectInDictionary:(id)a3 forKind:(id)a4 indexPath:(id)a5
{
  void *v6;
  void *v7;

  objc_msgSend(a3, "objectForKeyedSubscript:", a4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)_setObject:(id)a3 inDictionary:(id)a4 forKind:(id)a5 indexPath:(id)a6
{
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;

  v14 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v9, "objectForKeyedSubscript:", v10);
  v11 = objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = v14;
    if (!v14)
      goto LABEL_7;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
LABEL_7:
      objc_msgSend(v12, "removeObjectForKey:", a6);
      goto LABEL_8;
    }
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v12, v10);
    v13 = v14;
  }
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, a6);
LABEL_8:

}

- (void)_addEntriesFromDictionary:(id)a3 inDictionary:(id)a4 andSet:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id v14;

  v8 = a4;
  v9 = a5;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __66__UICollectionView__addEntriesFromDictionary_inDictionary_andSet___block_invoke;
  v12[3] = &unk_1E16BCB90;
  v12[4] = self;
  v13 = v8;
  v14 = v9;
  v10 = v9;
  v11 = v8;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v12);

}

void __66__UICollectionView__addEntriesFromDictionary_inDictionary_andSet___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  uint64_t v10;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[2] = __66__UICollectionView__addEntriesFromDictionary_inDictionary_andSet___block_invoke_2;
  v7[3] = &unk_1E16BCB68;
  v6 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v7[1] = 3221225472;
  v8 = v6;
  v10 = a2;
  v9 = *(id *)(a1 + 48);
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v7);

}

uint64_t __66__UICollectionView__addEntriesFromDictionary_inDictionary_andSet___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(*(id *)(a1 + 32), "_setObject:inDictionary:forKind:indexPath:", a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), a2);
  return objc_msgSend(*(id *)(a1 + 48), "addObject:", a3);
}

- (void)_addEntriesFromDictionary:(id)a3 inDictionary:(id)a4
{
  -[UICollectionView _addEntriesFromDictionary:inDictionary:andSet:](self, "_addEntriesFromDictionary:inDictionary:andSet:", a3, a4, 0);
}

- (id)_keysForObject:(id)a3 inDictionary:(id)a4
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v5 = a3;
  v6 = a4;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__40;
  v17 = __Block_byref_object_dispose__40;
  v18 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __48__UICollectionView__keysForObject_inDictionary___block_invoke;
  v10[3] = &unk_1E16BCBE0;
  v7 = v5;
  v11 = v7;
  v12 = &v13;
  objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v10);
  v8 = (id)v14[5];

  _Block_object_dispose(&v13, 8);
  return v8;
}

void __48__UICollectionView__keysForObject_inDictionary___block_invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __48__UICollectionView__keysForObject_inDictionary___block_invoke_2;
  v10[3] = &unk_1E16BCBB8;
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v11 = v8;
  v12 = v9;
  v13 = a2;
  v14 = a4;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v10);

}

void __48__UICollectionView__keysForObject_inDictionary___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  if (*(_QWORD *)(a1 + 32) == a3)
  {
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(_QWORD *)(a1 + 48), a2, 0);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    **(_BYTE **)(a1 + 56) = 1;
    *a4 = 1;
  }
}

- (BOOL)_hasRegisteredClassOrNibForSupplementaryViewOfKind:(id)a3
{
  return -[NSMutableSet containsObject:](self->_supplementaryViewRegisteredKinds, "containsObject:", a3);
}

void __32__UICollectionView_setDelegate___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = _UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke___s_category;
  if (!_UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke___s_category)
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "You are trying to set a deallocating object as a delegate. This will be a hard crash in the future. Offending object: %@ hostObject: %@", (uint8_t *)&v6, 0x16u);
  }
}

void __34__UICollectionView_setDataSource___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = _UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke_2___s_category;
  if (!_UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke_2___s_category)
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke_2___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "You are trying to set a deallocating object as dataSource. This will be a hard crash in the future. Offending object: %@ hosting object: %@", (uint8_t *)&v6, 0x16u);
  }
}

void __34__UICollectionView_setDataSource___block_invoke_219(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "dataSource");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v2)
      objc_msgSend(v3, "setDataSource:", 0);

    WeakRetained = v3;
  }

}

void __42__UICollectionView_setPrefetchDataSource___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = _UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke_3___s_category;
  if (!_UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke_3___s_category)
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIInternalPreference_CollectionViewAutomaticallyInvalidatesForTraitChanges_block_invoke_3___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "You are trying to set a deallocating object as prefetchDataSource. This will be a hard crash in the future. Offending object: %@ hosting object: %@", (uint8_t *)&v6, 0x16u);
  }
}

void __42__UICollectionView_setPrefetchDataSource___block_invoke_248(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "prefetchDataSource");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v2)
      objc_msgSend(v3, "setPrefetchDataSource:", 0);

    WeakRetained = v3;
  }

}

- (BOOL)_dataSourceMatchesCurrentCounts
{
  return -[UICollectionViewData dataSourceMatchesCurrentCounts]((uint64_t)self->_collectionViewData);
}

- (int64_t)_dataSourceNumberOfSections
{
  void *v3;
  char v4;
  void *v5;
  uint64_t v6;

  -[UICollectionView _dataSourceActual](self, "_dataSourceActual");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) == 0)
    return 1;
  -[UICollectionView _dataSourceActual](self, "_dataSourceActual");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "numberOfSectionsInCollectionView:", self);

  return v6 & ~(v6 >> 63);
}

- (int64_t)_dataSourceNumberOfItemsInSection:(int64_t)a3
{
  void *v5;
  int64_t v6;

  -[UICollectionView _dataSourceActual](self, "_dataSourceActual");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "collectionView:numberOfItemsInSection:", self, a3);

  return v6;
}

- (BOOL)_isIndexPathSelectedItem:(id)a3
{
  id v4;
  _UICollectionViewSelectionController *selectionController;
  void *v6;
  char v7;

  v4 = a3;
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  selectionController = self->_selectionController;
  if (selectionController)
    v6 = (void *)-[NSMutableSet copy](selectionController->_selectedIndexPaths, "copy");
  else
    v6 = 0;
  v7 = objc_msgSend(v6, "containsObject:", v4);

  return v7;
}

- (BOOL)_delegateAllowsHighlightingItemAtIndexPath:(id)a3
{
  UICollectionView *v4;
  id v5;
  void *v6;

  if ((*(_QWORD *)&self->_collectionViewFlags & 1) == 0)
    return 1;
  v4 = self;
  v5 = a3;
  -[UICollectionView _delegateProxy](v4, "_delegateProxy");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v4) = objc_msgSend(v6, "collectionView:shouldHighlightItemAtIndexPath:", v4, v5);

  return (char)v4;
}

- (BOOL)_delegateAllowsSelectingItemAtIndexPath:(id)a3
{
  UICollectionView *v4;
  id v5;
  void *v6;

  if ((*(_QWORD *)&self->_collectionViewFlags & 8) == 0)
    return 1;
  v4 = self;
  v5 = a3;
  -[UICollectionView _delegateProxy](v4, "_delegateProxy");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v4) = objc_msgSend(v6, "collectionView:shouldSelectItemAtIndexPath:", v4, v5);

  return (char)v4;
}

- (BOOL)_inferFocusabilityForCell:(id)a3 atIndexPath:(id)a4
{
  id v6;
  id v7;
  BOOL v8;
  void *v9;

  v6 = a3;
  v7 = a4;
  if (-[UICollectionView _isIndexPathSelectedItem:](self, "_isIndexPathSelectedItem:", v7))
  {
    v8 = 1;
  }
  else
  {
    objc_msgSend(v6, "_existingContentView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (!v9 || !dyld_program_sdk_at_least() || (_UIViewContainsFocusableSubviews(v9) & 1) == 0)
      && (dyld_program_sdk_at_least() && (objc_msgSend(v6, "_hasCustomSelectionAction") & 1) != 0
       || -[UICollectionView _allowsEffectiveSelection](self, "_allowsEffectiveSelection")
       && (!dyld_program_sdk_at_least()
        || -[UICollectionView _delegateAllowsHighlightingItemAtIndexPath:](self, "_delegateAllowsHighlightingItemAtIndexPath:", v7)));

  }
  return v8;
}

- (void)_selectItemAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(unint64_t)a5 notifyDelegate:(BOOL)a6 deselectPrevious:(BOOL)a7 performPrimaryAction:(BOOL)a8 performCustomSelectionAction:(BOOL)a9
{
  _BOOL4 v9;
  _BOOL8 v11;
  _BOOL8 v13;
  _BOOL4 v16;
  void *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int *v20;
  uint64_t v21;
  int *v22;
  int v23;
  _UICollectionViewSelectionController *selectionController;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  void *v31;
  unsigned int v32;
  void *v33;
  id v34;
  _BOOL4 v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  char v39;
  _BOOL4 v40;
  void *v41;
  id v42;
  void *v43;
  unsigned int v44;
  _UICollectionViewMultiSelectController *multiSelectController;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  unsigned __int16 *v50;
  unsigned int v51;
  void *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  _BOOL4 v56;
  int v57;
  void *v58;
  void *v59;
  int v60;
  id v61;
  id v62;

  v9 = a8;
  v11 = a6;
  v13 = a4;
  v16 = -[UICollectionView _validateSelectionOrHighlightIndexPath:isSelection:allowMassIndexPath:assertIfInvalid:](self, "_validateSelectionOrHighlightIndexPath:isSelection:allowMassIndexPath:assertIfInvalid:", a3, 1, 1, 1);
  -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", a3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = v17;
  if (a9)
  {
    objc_msgSend(v17, "_performCustomSelectionAction");
    goto LABEL_53;
  }
  v18 = -[UICollectionView _allowsEffectiveSelection](self, "_allowsEffectiveSelection");
  v19 = !a3 || objc_msgSend(a3, "section") == 0x7FFFFFFFFFFFFFFFLL || objc_msgSend(a3, "item") == 0x7FFFFFFFFFFFFFFFLL;
  if (v18 && v19)
  {
    -[UICollectionView _deselectAllAnimated:notifyDelegate:](self, "_deselectAllAnimated:notifyDelegate:", v13, v11);
    goto LABEL_53;
  }
  v20 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
  if (v11)
  {
    if (!-[UICollectionView _delegateAllowsSelectingItemAtIndexPath:](self, "_delegateAllowsSelectingItemAtIndexPath:", a3)|| !v18)
    {
      goto LABEL_50;
    }
LABEL_13:
    v56 = v9;
    v21 = 2640;
    v57 = *((unsigned __int8 *)&self->_collectionViewFlags + 18);
    v60 = *((unsigned __int16 *)&self->_collectionViewFlags + 8);
    *((_WORD *)&self->_collectionViewFlags + 8) = v60;
    *((_BYTE *)&self->_collectionViewFlags + 18) = ((v57 << 16) | 0x20000u) >> 16;
    v22 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
    if (a7)
      goto LABEL_14;
    v23 = 2896;
    if (!-[UICollectionView _allowsEffectiveMultipleSelection](self, "_allowsEffectiveMultipleSelection"))
    {
      selectionController = self->_selectionController;
      v25 = selectionController ? (void *)-[NSMutableSet copy](selectionController->_selectedIndexPaths, "copy") : 0;
      objc_msgSend(v25, "anyObject", 2640);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = objc_msgSend(v26, "isEqual:", a3);

      v21 = v53;
      v22 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
      if ((v54 & 1) == 0)
      {
LABEL_14:
        -[UICollectionView _deselectAllAnimated:notifyDelegate:](self, "_deselectAllAnimated:notifyDelegate:", v13, v11);
        v23 = v22[885];
      }
    }
    v55 = v23;
    v27 = *(uint64_t *)((char *)&self->super.super.super.super.isa + v23);
    if (v27)
    {
      if ((objc_msgSend(*(id *)(v27 + 8), "containsObject:", a3) & 1) == 0)
      {
        v28 = *(uint64_t *)((char *)&self->super.super.super.super.isa + v23);
        if (v28)
        {
          objc_msgSend(*(id *)(v28 + 8), "addObject:", a3);
          if (!*(_BYTE *)(v28 + 40))
            objc_msgSend(*(id *)(v28 + 32), "removeAllObjects");
        }
      }
    }
    v29 = v21;
    if (v62)
    {
      objc_msgSend(v62, "_setSelected:animated:", 1, v13);
      v20 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
      v30 = v57;
      v9 = v56;
    }
    else
    {
      v20 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
      v30 = v57;
      v9 = v56;
      if (v16)
      {
        -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "_cellBackgroundOrBottomSeparatorChangedAtIndexPath:separatorOnly:", a3, 0);

      }
    }
    if (a5)
      -[UICollectionView _scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:](self, "_scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:", a3, a5, v13, 0.0, 0.0, 0.0, 0.0);
    v32 = v60 & 0xFF00FFFF | (v30 << 16);
    -[UIView _focusSystem](self, "_focusSystem");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "focusedItem");
    v61 = (id)objc_claimAutoreleasedReturnValue();
    v34 = v62;
    v35 = -[UICollectionView _shouldSelectionFollowFocusForIndexPath:initiatedBySelection:](self, "_shouldSelectionFollowFocusForIndexPath:initiatedBySelection:", a3, 1);
    if (!v62 || v61 == v34 || !dyld_program_sdk_at_least())
    {
      if (!v35)
        goto LABEL_43;
      goto LABEL_41;
    }
    if (!v35)
      goto LABEL_43;
    v58 = v33;
    v36 = v32;
    v37 = v29;
    -[UIView _focusSystem](self, "_focusSystem");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v38, "_focusedItemIsContainedInEnvironment:includeSelf:", self, 1);

    if (!v11 || (v39 & 1) != 0)
    {
      v29 = v37;
      v32 = v36;
      v33 = v58;
      if (!v61)
      {
LABEL_41:
        if ((objc_msgSend(v33, "_focusedItemIsContainedInEnvironment:includeSelf:", self, 1) & 1) == 0)
          -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");
LABEL_43:
        if (!v11)
        {
LABEL_49:
          v50 = (unsigned __int16 *)((char *)&self->super.super.super.__layeringSceneIdentity + v29);
          v51 = (*v50 | (*((unsigned __int8 *)&self->super.super.super.__layeringSceneIdentity + v29 + 2) << 16)) & 0xFFFDFFFF;
          *v50 = *v50;
          *((_BYTE *)v50 + 2) = (v51 | v32 & 0x20000) >> 16;

          goto LABEL_50;
        }
LABEL_44:
        v59 = v33;
        objc_msgSend(v34, "_selectionSegueTemplate");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = (id)objc_msgSend(v41, "perform:", v34);

        if ((*(uint64_t *)((_BYTE *)&self->super.super.super.super.isa + v29) & 0x20) != 0)
        {
          +[UIViewController _sendPrepareForTapGesture:]((uint64_t)UIViewController, v34);
          -[UICollectionView _delegateProxy](self, "_delegateProxy");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "collectionView:didSelectItemAtIndexPath:", self, a3);

        }
        v44 = v32;
        multiSelectController = self->_multiSelectController;
        v46 = *(uint64_t *)((char *)&self->super.super.super.super.isa + v55);
        v47 = v29;
        if (v46)
          v48 = (void *)objc_msgSend(*(id *)(v46 + 8), "copy");
        else
          v48 = 0;
        objc_msgSend(v48, "allObjects");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UICollectionViewMultiSelectController selectedIndexPathsChanged:](multiSelectController, "selectedIndexPathsChanged:", v49);

        v29 = v47;
        v32 = v44;
        v33 = v59;
        goto LABEL_49;
      }
    }
    else
    {
      v40 = -[UICollectionView _shouldBecomeFocusedOnSelection](self, "_shouldBecomeFocusedOnSelection");
      v29 = v37;
      v32 = v36;
      v33 = v58;
      if (v40 || !v61)
      {
        if (v40)
        {
LABEL_56:
          objc_msgSend(v33, "_updateFocusImmediatelyToEnvironment:", v34);
          if (!v11)
            goto LABEL_49;
          goto LABEL_44;
        }
        goto LABEL_41;
      }
    }
    if ((objc_msgSend(v33, "_focusedItemIsContainedInEnvironment:includeSelf:", self, 1) & 1) != 0)
      goto LABEL_56;
    goto LABEL_41;
  }
  if (v18)
    goto LABEL_13;
LABEL_50:
  if (v9 && (*(uint64_t *)((_BYTE *)&self->super.super.super.super.isa + v20[873]) & 0x10000000000000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "collectionView:performPrimaryActionForItemAtIndexPath:", self, a3);

  }
LABEL_53:

}

- (BOOL)_delegateSupportsPrimaryAction
{
  return (*(_QWORD *)&self->_collectionViewFlags >> 52) & 1;
}

- (BOOL)_canPerformPrimaryActionForItemAtIndexPath:(id)a3
{
  id v4;
  void *v6;

  v4 = a3;
  if (v4 && -[UICollectionView _delegateSupportsPrimaryAction](self, "_delegateSupportsPrimaryAction"))
  {
    if ((*(_QWORD *)&self->_collectionViewFlags & 0x8000000000000) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(self) = objc_msgSend(v6, "collectionView:canPerformPrimaryActionForItemAtIndexPath:", self, v4);

    }
    else
    {
      LODWORD(self) = !-[UICollectionView _isEditing](self, "_isEditing");
    }
  }
  else
  {
    LOBYTE(self) = 0;
  }

  return (char)self;
}

uint64_t __69__UICollectionView__deselectItemAtIndexPath_animated_notifyDelegate___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192);
  v6 = a3;
  v7 = -[UICollectionViewData globalIndexForItemAtIndexPath:](v5, a2);
  v8 = -[UICollectionViewData globalIndexForItemAtIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192), v6);

  v9 = *(_QWORD *)(a1 + 40);
  v10 = v7 - v9;
  if (v7 - v9 < 0)
    v10 = v9 - v7;
  v11 = v8 - v9;
  if (v11 < 0)
    v11 = -v11;
  if (v10 < v11)
    v12 = -1;
  else
    v12 = v11 < v10;
  v13 = v8 < v7;
  if (v7 < v8)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

- (void)_deselectItemsAtIndexPaths:(id)a3 animated:(BOOL)a4 transitionCoordinator:(id)a5
{
  _BOOL8 v6;
  id v8;
  id v9;
  void *v10;
  _UICollectionViewSelectionController *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  uint64_t v18;
  _UICollectionViewSelectionController *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  _QWORD v25[4];
  _UICollectionViewSelectionController *v26;
  UICollectionView *v27;
  _QWORD v28[4];
  _UICollectionViewSelectionController *v29;
  UICollectionView *v30;
  BOOL v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v6 = a4;
  v42 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  if (objc_msgSend(v8, "count"))
  {
    v24 = v9;
    -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v8, "count"));
    v11 = self->_selectionController;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v12 = v8;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v37 != v15)
            objc_enumerationMutation(v12);
          -[UICollectionView _translateDataSourceIndexPathToPresentationIndexPathAsNeeded:](self, "_translateDataSourceIndexPathToPresentationIndexPathAsNeeded:", *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * i));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v11 && -[NSMutableSet containsObject:](v11->_selectedIndexPaths, "containsObject:", v17))
            objc_msgSend(v10, "addObject:", v17);

        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
      }
      while (v14);
    }

    v9 = v24;
    if (v24)
    {
      -[_UICollectionViewSelectionController addDeselectionTransitionIndexPaths:]((uint64_t)v11, (uint64_t)v10);
      v18 = MEMORY[0x1E0C809B0];
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = __78__UICollectionView__deselectItemsAtIndexPaths_animated_transitionCoordinator___block_invoke;
      v28[3] = &unk_1E16BCC58;
      v29 = v11;
      v30 = self;
      v31 = v6;
      v25[0] = v18;
      v25[1] = 3221225472;
      v25[2] = __78__UICollectionView__deselectItemsAtIndexPaths_animated_transitionCoordinator___block_invoke_2;
      v25[3] = &unk_1E16B2E68;
      v26 = v29;
      v27 = self;
      objc_msgSend(v24, "animateAlongsideTransition:completion:", v28, v25);

      v19 = v29;
    }
    else
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v19 = v10;
      v20 = -[_UICollectionViewSelectionController countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      if (v20)
      {
        v21 = v20;
        v22 = *(_QWORD *)v33;
        do
        {
          for (j = 0; j != v21; ++j)
          {
            if (*(_QWORD *)v33 != v22)
              objc_enumerationMutation(v19);
            -[UICollectionView _deselectItemAtIndexPath:animated:notifyDelegate:](self, "_deselectItemAtIndexPath:animated:notifyDelegate:", *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * j), v6, 0);
          }
          v21 = -[_UICollectionViewSelectionController countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
        }
        while (v21);
      }
    }

  }
}

void __78__UICollectionView__deselectItemsAtIndexPaths_animated_transitionCoordinator___block_invoke(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[3];
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(a1 + 40), "_deselectItemAtIndexPath:animated:notifyDelegate:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v7++), *(unsigned __int8 *)(a1 + 48), 0, (_QWORD)v8);
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

}

void __78__UICollectionView__deselectItemsAtIndexPaths_animated_transitionCoordinator___block_invoke_2(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a2, "isCancelled"))
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v3 = *(_QWORD **)(a1 + 32);
    if (v3)
      v3 = (_QWORD *)v3[3];
    v4 = v3;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          LOBYTE(v11) = 0;
          objc_msgSend(*(id *)(a1 + 40), "_selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v8++), 0, 0, 0, 0, 0, v11);
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v6);
    }

  }
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    v10 = *(void **)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;

  }
}

- (id)_multiSelectController
{
  return self->_multiSelectController;
}

- (BOOL)allowsUserInitiatedMultipleSelection
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 13) & 1;
}

- (void)setAllowsUserInitiatedMultipleSelection:(BOOL)a3
{
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  p_collectionViewFlags = &self->_collectionViewFlags;
  v4 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if (((((v4 & 0x2000) == 0) ^ a3) & 1) == 0)
  {
    v5 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    v6 = *(_QWORD *)p_collectionViewFlags;
    v7 = 0x2000;
    if (!a3)
      v7 = 0;
    *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
    *(_QWORD *)p_collectionViewFlags = v6;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v4 & 0xFFFFFFFFFFFFDFFFLL | v7;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v5);
  }
}

- (BOOL)_allowsSelectionDuringEditing
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 12) & 1;
}

- (void)_updateMultiSelectControllerIfNeeded
{
  -[_UICollectionViewMultiSelectController setEnabled:](self->_multiSelectController, "setEnabled:", (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x4800) != 0);
}

- (BOOL)_allowsEffectiveSelectionOrCustomActionAtIndexPath:(id)a3
{
  id v4;
  BOOL v5;
  void *v6;
  void *v7;
  char v8;

  v4 = a3;
  v5 = -[UICollectionView _allowsEffectiveSelection](self, "_allowsEffectiveSelection")
    || dyld_program_sdk_at_least()
    && (-[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v4),
        (v6 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
    && (v7 = v6, v8 = objc_msgSend(v6, "_hasCustomSelectionAction"), v7, (v8 & 1) != 0)
    || -[UICollectionView _canPerformPrimaryActionForItemAtIndexPath:](self, "_canPerformPrimaryActionForItemAtIndexPath:", v4);

  return v5;
}

- (BOOL)_delaysUserInitiatedItemSelection
{
  return ((unint64_t)*((unsigned __int16 *)&self->_collectionViewFlags + 8) >> 8) & 1;
}

- (BOOL)_shouldBecomeFocusedOnSelection
{
  __int128 v2;
  _QWORD v4[5];

  *((_QWORD *)&v2 + 1) = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | ((unint64_t)*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  *(_QWORD *)&v2 = *((_QWORD *)&self->_collectionViewFlags + 1);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __51__UICollectionView__shouldBecomeFocusedOnSelection__block_invoke;
  v4[3] = &unk_1E16B2268;
  v4[4] = self;
  return _UITriStateToBool((v2 >> 17) & 3, v4);
}

uint64_t __51__UICollectionView__shouldBecomeFocusedOnSelection__block_invoke(uint64_t a1)
{
  _BOOL8 v2;
  void *v3;

  if ((dyld_program_sdk_at_least() & 1) != 0)
    return 1;
  objc_msgSend(*(id *)(a1 + 32), "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v3, "_splitViewControllerContext") == 3;

  return v2;
}

- (BOOL)_defaultAllowsFocus
{
  void *v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL result;
  void *v7;
  char v8;

  -[UIView _focusBehavior](self, "_focusBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "cellFocusability");

  v5 = -[UICollectionView allowsSelection](self, "allowsSelection");
  result = 0;
  if (v5 && v4 != 3)
  {
    if (v4 == 2)
    {
      -[UIView traitCollection](self, "traitCollection");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "_hasSplitViewControllerContextSidebarColumn");

      return v8;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

- (BOOL)allowsFocus
{
  __int128 v2;
  _QWORD v4[5];

  *((_QWORD *)&v2 + 1) = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | ((unint64_t)*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  *(_QWORD *)&v2 = *((_QWORD *)&self->_collectionViewFlags + 1);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __31__UICollectionView_allowsFocus__block_invoke;
  v4[3] = &unk_1E16B2268;
  v4[4] = self;
  return _UITriStateToBool((v2 >> 19) & 3, v4);
}

uint64_t __31__UICollectionView_allowsFocus__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_defaultAllowsFocus");
}

- (void)setAllowsFocusDuringEditing:(BOOL)allowsFocusDuringEditing
{
  uint64_t v3;

  v3 = 0x200000;
  if (allowsFocusDuringEditing)
    v3 = 0x400000;
  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFFFFFFFFFF9FFFFFLL | v3;
}

- (BOOL)_defaultAllowsFocusDuringEditing
{
  void *v3;
  void *v4;
  char v5;

  if (!-[UICollectionView allowsSelectionDuringEditing](self, "allowsSelectionDuringEditing"))
    return 0;
  -[UIView _focusBehavior](self, "_focusBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "cellFocusability") == 2)
  {
    -[UIView traitCollection](self, "traitCollection");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "_hasSplitViewControllerContextSidebarColumn");

  }
  else
  {
    v5 = 1;
  }

  return v5;
}

- (BOOL)allowsFocusDuringEditing
{
  __int128 v2;
  _QWORD v4[5];

  *((_QWORD *)&v2 + 1) = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | ((unint64_t)*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  *(_QWORD *)&v2 = *((_QWORD *)&self->_collectionViewFlags + 1);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __44__UICollectionView_allowsFocusDuringEditing__block_invoke;
  v4[3] = &unk_1E16B2268;
  v4[4] = self;
  return _UITriStateToBool((v2 >> 21) & 3, v4);
}

uint64_t __44__UICollectionView_allowsFocusDuringEditing__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_defaultAllowsFocusDuringEditing");
}

- (BOOL)_allowsEffectiveFocus
{
  _BOOL4 v3;

  if (-[UICollectionView _isEditing](self, "_isEditing") || !-[UICollectionView allowsFocus](self, "allowsFocus"))
  {
    v3 = -[UICollectionView _isEditing](self, "_isEditing");
    if (v3)
      LOBYTE(v3) = -[UICollectionView allowsFocusDuringEditing](self, "allowsFocusDuringEditing");
  }
  else
  {
    LOBYTE(v3) = 1;
  }
  return v3;
}

- (BOOL)_effectiveDefaultAllowsFocus
{
  _BOOL4 v3;

  if (-[UICollectionView _isEditing](self, "_isEditing")
    || !-[UICollectionView _defaultAllowsFocus](self, "_defaultAllowsFocus"))
  {
    v3 = -[UICollectionView _isEditing](self, "_isEditing");
    if (v3)
      LOBYTE(v3) = -[UICollectionView _defaultAllowsFocusDuringEditing](self, "_defaultAllowsFocusDuringEditing");
  }
  else
  {
    LOBYTE(v3) = 1;
  }
  return v3;
}

- (id)_reorderFeedbackGenerator
{
  return self->_reorderFeedbackGenerator;
}

- (void)_unhighlightItemAtIndexPath:(id)a3 animated:(BOOL)a4
{
  -[UICollectionView _unhighlightItemAtIndexPath:animated:notifyDelegate:](self, "_unhighlightItemAtIndexPath:animated:notifyDelegate:", a3, a4, 0);
}

- (void)_unhighlightItemAtIndexPath:(id)a3 animated:(BOOL)a4 notifyDelegate:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL8 v6;
  id v8;
  _UICollectionViewSelectionController *selectionController;
  int v10;
  _BOOL4 v11;
  _UICollectionViewSelectionController *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v5 = a5;
  v6 = a4;
  v8 = a3;
  selectionController = self->_selectionController;
  if (selectionController)
  {
    v17 = v8;
    v10 = -[NSMutableSet containsObject:](selectionController->_highlightedIndexPaths, "containsObject:", v8);
    v8 = v17;
    if (v10)
    {
      v11 = -[UICollectionView _validateSelectionOrHighlightIndexPath:isSelection:allowMassIndexPath:assertIfInvalid:](self, "_validateSelectionOrHighlightIndexPath:isSelection:allowMassIndexPath:assertIfInvalid:", v17, 0, 0, 0);
      v12 = self->_selectionController;
      if (v12)
        -[NSMutableSet removeObject:](v12->_highlightedIndexPaths, "removeObject:", v17);
      -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v17);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v13)
      {
        objc_msgSend(v13, "_setHighlighted:animated:", 0, v6);
      }
      else if (v11)
      {
        -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "_cellBackgroundOrBottomSeparatorChangedAtIndexPath:separatorOnly:", v17, 0);

      }
      if (v5 && (*(_QWORD *)&self->_collectionViewFlags & 4) != 0)
      {
        -[UICollectionView _delegateProxy](self, "_delegateProxy");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "collectionView:didUnhighlightItemAtIndexPath:", self, v17);

      }
      v8 = v17;
    }
  }

}

- (BOOL)_highlightItemAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(unint64_t)a5 notifyDelegate:(BOOL)a6
{
  return -[UICollectionView _highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:playFeedback:](self, "_highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:playFeedback:", a3, a4, a5, a6, 0);
}

- (BOOL)_highlightItemAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(unint64_t)a5 notifyDelegate:(BOOL)a6 playFeedback:(BOOL)a7
{
  _BOOL4 v7;
  _BOOL4 v11;
  char v12;
  _UICollectionViewSelectionController *selectionController;
  _UICollectionViewSelectionController *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _UICollectionViewSelectionController *v24;
  _UICollectionViewSelectionController *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _BOOL4 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v7 = a6;
  v33 = a4;
  v39 = *MEMORY[0x1E0C80C00];
  v11 = -[UICollectionView _validateSelectionOrHighlightIndexPath:isSelection:allowMassIndexPath:assertIfInvalid:](self, "_validateSelectionOrHighlightIndexPath:isSelection:allowMassIndexPath:assertIfInvalid:", a3, 0, 1, 1, a7);
  v12 = 0;
  if (-[UICollectionView _allowsEffectiveSelectionOrCustomActionAtIndexPath:](self, "_allowsEffectiveSelectionOrCustomActionAtIndexPath:", a3))
  {
    selectionController = self->_selectionController;
    if (selectionController
      && (-[NSMutableSet containsObject:](selectionController->_highlightedIndexPaths, "containsObject:", a3) & 1) != 0)
    {
      return 0;
    }
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    if (!a3 || objc_msgSend(a3, "section") == 0x7FFFFFFFFFFFFFFFLL || objc_msgSend(a3, "item") == 0x7FFFFFFFFFFFFFFFLL)
    {
      v14 = self->_selectionController;
      if (v14)
        v15 = (void *)-[NSMutableSet copy](v14->_highlightedIndexPaths, "copy");
      else
        v15 = 0;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      if (!v16)
        goto LABEL_23;
      v17 = v16;
      v18 = *(_QWORD *)v35;
      while (1)
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v35 != v18)
            objc_enumerationMutation(v15);
          v20 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * i);
          -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = v21;
          if (v21)
          {
            objc_msgSend(v21, "_setHighlighted:animated:", 0, v33);
            if (!v7)
              goto LABEL_21;
          }
          else
          {
            -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "_cellBackgroundOrBottomSeparatorChangedAtIndexPath:separatorOnly:", v20, 0);

            if (!v7)
              goto LABEL_21;
          }
          if ((*(_QWORD *)&self->_collectionViewFlags & 4) != 0)
            objc_msgSend(v32, "collectionView:didUnhighlightItemAtIndexPath:", self, v20);
LABEL_21:

        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
        if (!v17)
        {
LABEL_23:
          v24 = self->_selectionController;
          if (v24)
            -[NSMutableSet removeAllObjects](v24->_highlightedIndexPaths, "removeAllObjects");

LABEL_26:
          v12 = 0;
          goto LABEL_27;
        }
      }
    }
    if (v7
      && (*(_QWORD *)&self->_collectionViewFlags & 1) != 0
      && !-[_UISelectionInteraction isHinting](self->_selectionInteraction, "isHinting")
      && !objc_msgSend(v32, "collectionView:shouldHighlightItemAtIndexPath:", self, a3))
    {
      if (!v11)
        goto LABEL_26;
      -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", a3);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = v30;
      if (v30)
        v12 = objc_msgSend(v30, "_hasCustomSelectionAction");
      else
        v12 = 0;

    }
    else
    {
      v26 = self->_selectionController;
      if (v26)
        -[NSMutableSet addObject:](v26->_highlightedIndexPaths, "addObject:", a3);
      -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", a3);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = v27;
      if (v27)
      {
        objc_msgSend(v27, "_setHighlighted:animated:", 1, v33);
      }
      else if (v11)
      {
        -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "_cellBackgroundOrBottomSeparatorChangedAtIndexPath:separatorOnly:", a3, 0);

      }
      if (a5)
        -[UICollectionView _scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:](self, "_scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:", a3, a5, v33, 0.0, 0.0, 0.0, 0.0);
      if (v7 && (*(_QWORD *)&self->_collectionViewFlags & 2) != 0)
        objc_msgSend(v32, "collectionView:didHighlightItemAtIndexPath:", self, a3);

      v12 = 1;
    }
LABEL_27:

  }
  return v12;
}

- (BOOL)_highlightItemAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(unint64_t)a5
{
  return -[UICollectionView _highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:](self, "_highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:", a3, a4, a5, 0);
}

- (BOOL)_isPerformingReloadData
{
  return self->_reloadingSuspendedCount > 0;
}

uint64_t __30__UICollectionView_reloadData__block_invoke_274(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __30__UICollectionView_reloadData__block_invoke_4(uint64_t a1)
{
  uint64_t v1;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  CGFloat v8;
  CGFloat v9;
  id v10;
  CGRect v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  v1 = *(_QWORD *)(a1 + 32);
  if ((*(_QWORD *)(v1 + 2648) & 0x8000000) == 0)
  {
    v3 = (double *)(v1 + 2208);
    v4 = *v3;
    v5 = v3[1];
    v6 = v3[2];
    v7 = v3[3];
    v11.origin.x = *v3;
    v11.origin.y = v5;
    v11.size.width = v6;
    v11.size.height = v7;
    if (CGRectGetWidth(v11) > 0.0)
    {
      v12.origin.x = v4;
      v12.origin.y = v5;
      v12.size.width = v6;
      v12.size.height = v7;
      if (CGRectGetHeight(v12) > 0.0)
      {
        v13.origin.x = v4;
        v13.origin.y = v5;
        v13.size.width = v6;
        v13.size.height = v7;
        v8 = CGRectGetWidth(v13) * -0.75;
        v14.origin.x = v4;
        v14.origin.y = v5;
        v14.size.width = v6;
        v14.size.height = v7;
        v9 = CGRectGetHeight(v14) * -0.75;
        v15.origin.x = v4;
        v15.origin.y = v5;
        v15.size.width = v6;
        v15.size.height = v7;
        v16 = CGRectInset(v15, v8, v9);
        v10 = (id)objc_msgSend(*(id *)(a1 + 32), "_computeMainPrefetchCandidatesForVisibleBounds:futureVisibleBounds:prefetchVector:", v4, v5, v6, v7, v16.origin.x, v16.origin.y, v16.size.width, v16.size.height, 0, 0);
      }
    }
  }
}

- (void)_addReloadDataCompletionBlock:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id reloadDataCompletionBlock;
  id v10;
  void *v11;
  void *v12;
  _QWORD aBlock[4];
  id v14;
  id v15;

  v5 = a3;
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x10000000) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 2549, CFSTR("Attempting to add a reload data completion block but a reload is not in progress. Collection view: %@"), self);

  }
  v6 = _Block_copy(self->_reloadDataCompletionBlock);
  v7 = v6;
  if (v6)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __50__UICollectionView__addReloadDataCompletionBlock___block_invoke;
    aBlock[3] = &unk_1E16B6740;
    v14 = v6;
    v15 = v5;
    v8 = _Block_copy(aBlock);
    reloadDataCompletionBlock = self->_reloadDataCompletionBlock;
    self->_reloadDataCompletionBlock = v8;

    v10 = v14;
  }
  else
  {
    v11 = _Block_copy(v5);
    v10 = self->_reloadDataCompletionBlock;
    self->_reloadDataCompletionBlock = v11;
  }

}

uint64_t __50__UICollectionView__addReloadDataCompletionBlock___block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

- (BOOL)_shouldPersistSelectionOnReloadDataWhenPossible
{
  return ((unint64_t)*((unsigned __int16 *)&self->_collectionViewFlags + 8) >> 10) & 1;
}

- (BOOL)_forcePreserveSemanticContentOffsetDuringUpdates
{
  return ((unint64_t)*((unsigned __int16 *)&self->_collectionViewFlags + 8) >> 11) & 1;
}

- (void)_setForcePreserveSemanticContentOffsetDuringUpdates:(BOOL)a3
{
  int v3;
  __int16 v4;

  v3 = *((_WORD *)&self->_collectionViewFlags + 8) & 0xF7FF | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
  if (a3)
    v4 = 2048;
  else
    v4 = 0;
  *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8) & 0xF7FF | v4;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v3);
}

- (id)dragDelegate
{
  return objc_loadWeakRetained((id *)&self->_dragDelegate);
}

- (id)dropDelegate
{
  return objc_loadWeakRetained((id *)&self->_dropDelegate);
}

- (BOOL)dragInteractionEnabled
{
  _UICollectionViewDragAndDropController *dragAndDropController;

  dragAndDropController = self->_dragAndDropController;
  return dragAndDropController && dragAndDropController->_dragInteractionEnabled;
}

- (id)dragDestinationDelegate
{
  return objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
}

- (id)dragSourceDelegate
{
  return objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
}

- (BOOL)_isCellInvolvedInDragOrDropAnimationAtIndexPath:(id)a3
{
  id v4;
  void *v5;

  v4 = a3;
  -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(self) = -[_UICollectionViewDragAndDropController isCellInvolvedInDragOrDropAnimation:atIndexPath:]((_BOOL8)self->_dragAndDropController, v5, (uint64_t)v4);

  return (char)self;
}

- (int64_t)_preferredDragDestinationVisualStyle
{
  _UICollectionViewDragAndDropController *dragAndDropController;

  dragAndDropController = self->_dragAndDropController;
  if (dragAndDropController)
    return dragAndDropController->_preferredDragDestinationVisualStyle;
  else
    return 0;
}

- (void)_immediatelyBeginDruidBasedReorderIfPossibleWithTouch:(id)a3
{
  _UICollectionViewDragAndDropController *dragAndDropController;

  dragAndDropController = self->_dragAndDropController;
  if (dragAndDropController)
    -[_UICollectionViewDragSourceController attemptToBeginDragImmediatelyWithTouch:]((uint64_t)dragAndDropController->_sourceController, a3);
}

- (void)_setIsAncestorOfFirstResponder:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  id v6;
  void *v7;
  UICollectionView *v8;
  uint64_t v9;
  uint64_t v10;
  UICollectionReusableView *firstResponderView;
  int64_t *p_firstResponderViewType;
  void *v13;
  void *v14;
  id *firstResponderViewKind;
  NSString *v16;
  NSString *v17;
  UICollectionReusableView *v18;
  _UICollectionViewSubviewManager *subviewManager;
  int64_t firstResponderViewType;
  NSIndexPath *firstResponderIndexPath;
  void *v22;
  void *v23;
  NSIndexPath *v24;
  objc_super v25;

  v3 = a3;
  v25.receiver = self;
  v25.super_class = (Class)UICollectionView;
  -[UIView _setIsAncestorOfFirstResponder:](&v25, sel__setIsAncestorOfFirstResponder_);
  -[UIView window](self, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstResponder");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    while (1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      objc_msgSend(v6, "nextResponder");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v6 = v7;
      if (!v7)
        goto LABEL_9;
    }
    v6 = v6;
    v7 = v6;
    do
    {
      objc_msgSend(v7, "superview");
      v8 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

      if (v8 == self)
        break;
      objc_msgSend(v7, "superview");
      v9 = objc_claimAutoreleasedReturnValue();

      v7 = (void *)v9;
    }
    while (v9);
  }
  else
  {
    v7 = 0;
  }
LABEL_9:
  if (v3)
  {
    objc_storeStrong((id *)&self->_firstResponderView, v7);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v7, "_layoutAttributes");
      v10 = objc_claimAutoreleasedReturnValue();
      firstResponderView = (UICollectionReusableView *)v10;
      if (v10)
      {
        p_firstResponderViewType = &self->_firstResponderViewType;
        if ((*(_WORD *)(v10 + 288) & 1) != 0)
        {
          *p_firstResponderViewType = 1;
          -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v7);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = v22;
          if (!v22)
          {
            -[UICollectionReusableView indexPath](firstResponderView, "indexPath");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
          }
          objc_storeStrong((id *)&self->_firstResponderIndexPath, v23);
          if (!v22)

          firstResponderViewKind = self->_firstResponderViewKind;
          self->_firstResponderViewKind = 0;
          goto LABEL_34;
        }
      }
      else
      {
        p_firstResponderViewType = &self->_firstResponderViewType;
      }
      *p_firstResponderViewType = 2;
      -[UICollectionView _indexPathForSupplementaryView:](self, "_indexPathForSupplementaryView:", v7);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (!v13)
      {
        -[UICollectionReusableView indexPath](firstResponderView, "indexPath");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_storeStrong((id *)&self->_firstResponderIndexPath, v14);
      if (!v13)

      objc_msgSend(v7, "_layoutAttributes");
      firstResponderViewKind = (id *)objc_claimAutoreleasedReturnValue();
      -[UIBarButtonItemGroup _items](firstResponderViewKind);
      v16 = (NSString *)objc_claimAutoreleasedReturnValue();
      v17 = self->_firstResponderViewKind;
      self->_firstResponderViewKind = v16;

LABEL_34:
      goto LABEL_37;
    }
    self->_firstResponderViewType = 0;
    firstResponderIndexPath = self->_firstResponderIndexPath;
    self->_firstResponderIndexPath = 0;

    firstResponderView = (UICollectionReusableView *)self->_firstResponderViewKind;
    self->_firstResponderViewKind = 0;
  }
  else
  {
    firstResponderView = self->_firstResponderView;
    if (self->_firstResponderViewType)
    {
      firstResponderView = firstResponderView;
      v18 = self->_firstResponderView;
      self->_firstResponderView = 0;

      subviewManager = self->_subviewManager;
      if ((!subviewManager
         || !-[_UICollectionViewSubviewCollection containsView:](&subviewManager->_visibleViews->super.isa, (uint64_t)firstResponderView))&& firstResponderView != self->_newContentView)
      {
        objc_opt_self();
        if ((__addingResponderToTree & 1) == 0
          && !-[UICollectionReusableView _isInUpdateAnimation](firstResponderView, "_isInUpdateAnimation"))
        {
          firstResponderViewType = self->_firstResponderViewType;
          if (firstResponderViewType == 2)
          {
            -[UICollectionView _reuseSupplementaryView:](self, "_reuseSupplementaryView:", firstResponderView);
          }
          else if (firstResponderViewType == 1)
          {
            -[UICollectionView _reuseCell:notifyDidEndDisplaying:](self, "_reuseCell:notifyDidEndDisplaying:", firstResponderView, 1);
          }
        }
      }
      v24 = self->_firstResponderIndexPath;
      self->_firstResponderIndexPath = 0;

      self->_firstResponderViewType = 0;
    }
    else
    {
      self->_firstResponderView = 0;
    }
  }
LABEL_37:

}

- (void)exchangeSubviewAtIndex:(int64_t)a3 withSubviewAtIndex:(int64_t)a4
{
  void *v7;
  int v8;
  objc_super v9;

  -[UICollectionView subviewRouter]((id *)&self->super.super.super.super.isa);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "shouldExchangeSubviewAtIndex:withSubviewAtIndex:", a3, a4);

  if (v8)
  {
    v9.receiver = self;
    v9.super_class = (Class)UICollectionView;
    -[UIView exchangeSubviewAtIndex:withSubviewAtIndex:](&v9, sel_exchangeSubviewAtIndex_withSubviewAtIndex_, a3, a4);
  }
}

void __75__UICollectionView__sectionContainerViewForSectionIndex_createIfNecessary___block_invoke(uint64_t a1)
{
  _UICollectionSectionContainerView *v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  v2 = [_UICollectionSectionContainerView alloc];
  v3 = *(double **)(a1 + 32);
  v4 = 0.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  if (v3)
  {
    v8 = v3[30];
    v5 = v3[31];
    v6 = v3[32];
    v7 = v3[33];
  }
  v9 = -[_UICollectionSectionContainerView initWithFrame:](v2, "initWithFrame:", v8, v5, v6, v7);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "frame");
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setBounds:");
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
    v4 = *(double *)(v12 + 48);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "layer");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setCornerRadius:", v4);

  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v15 = *(void **)(*(_QWORD *)(a1 + 40) + 3040);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 56));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v14, v16);

  -[UICollectionView subviewRouter](*(id **)(a1 + 40));
  v17 = (id)objc_claimAutoreleasedReturnValue();
  -[_UICollectionViewSubviewRouter addContainerView:]((uint64_t)v17, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

}

void __59__UICollectionView__reconfigureSectionContainersForUpdate___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = objc_msgSend(v14, "integerValue");
  if (v6)
    v7 = objc_msgSend(v6, "finalSectionIndexForInitialSectionIndex:", v7);
  if (v7 == 0x7FFFFFFFFFFFFFFFLL || !objc_msgSend(*(id *)(a1 + 40), "containsIndex:", v7))
  {
    v10 = *(void **)(*(_QWORD *)(a1 + 56) + 3048);
    if (v10)
    {
      objc_msgSend(v10, "addObject:", v5);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", v5);
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(void **)(v12 + 3048);
      *(_QWORD *)(v12 + 3048) = v11;

    }
  }
  else
  {
    v8 = *(void **)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v5, v9);

  }
}

void __48__UICollectionView__layoutSectionContainerViews__block_invoke(uint64_t a1, void *a2, void *a3)
{
  double *v5;
  double *v6;
  double v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a3;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "_sectionDescriptorForSectionIndex:", objc_msgSend(a2, "integerValue"));
  v5 = (double *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v11, "setFrame:", v5[30], v5[31], v5[32], v5[33]);
    objc_msgSend(v11, "frame");
    objc_msgSend(v11, "setBounds:");
    v7 = v6[6];
    objc_msgSend(v11, "layer");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setCornerRadius:", v7);

    v9 = *MEMORY[0x1E0CD2A68];
    objc_msgSend(v11, "layer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setCornerCurve:", v9);

    objc_msgSend(v11, "setClipsToBounds:", *((unsigned __int8 *)v6 + 8));
  }

}

- (BOOL)_shouldScrollToContentBeginningInRightToLeft
{
  return -[UICollectionViewLayout _shouldScrollToContentBeginningInRightToLeft](self->_layout, "_shouldScrollToContentBeginningInRightToLeft");
}

uint64_t __48__UICollectionView_setSemanticContentAttribute___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return objc_msgSend(a5, "setSemanticContentAttribute:", *(_QWORD *)(a1 + 32));
}

- (void)_setDefaultLayoutMargins:(UIEdgeInsets)a3
{
  -[UICollectionView _setDefaultLayoutMargins:fromViewController:](self, "_setDefaultLayoutMargins:fromViewController:", 1, a3.top, a3.left, a3.bottom, a3.right);
}

- (void)_didMoveFromSuperview:(id)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)UICollectionView;
  -[UIView _didMoveFromSuperview:](&v4, sel__didMoveFromSuperview_, a3);
  -[UICollectionView _updateDerivesVisibleBoundsFromContainingScrollView](self, "_updateDerivesVisibleBoundsFromContainingScrollView");
}

- (void)_invalidateLayoutForVisibleBounds:(CGRect)a3 oldVisibleBounds:(CGRect)a4
{
  -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height, a4.origin.x, a4.origin.y, a4.size.width, a4.size.height);
}

- (void)_setShouldDeriveVisibleBoundsFromContainingScrollView:(BOOL)a3
{
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  p_collectionViewFlags = &self->_collectionViewFlags;
  v4 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if (((((v4 & 0x400000000000) == 0) ^ a3) & 1) == 0)
  {
    v5 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    v6 = *(_QWORD *)p_collectionViewFlags;
    v7 = 0x400000000000;
    if (!a3)
      v7 = 0;
    *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
    *(_QWORD *)p_collectionViewFlags = v6;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v4 & 0xFFFFBFFFFFFFFFFFLL | v7;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v5);
    -[UICollectionView _updateDerivesVisibleBoundsFromContainingScrollView](self, "_updateDerivesVisibleBoundsFromContainingScrollView");
  }
}

- (BOOL)_canDeriveVisibleBoundsFromContainingScrollView
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 47) & 1;
}

- (void)_updateDerivesVisibleBoundsFromContainingScrollView
{
  UIScrollView **p_containerScrollView;
  id WeakRetained;
  id v5;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  uint64_t v7;
  int v8;
  uint64_t v9;
  id v10;

  p_containerScrollView = &self->_containerScrollView;
  WeakRetained = objc_loadWeakRetained((id *)&self->_containerScrollView);
  v10 = WeakRetained;
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x400000000000) != 0)
  {
    if (-[UIScrollView isScrollEnabled](self, "isScrollEnabled"))
    {
      v5 = 0;
    }
    else
    {
      -[UIView _containingScrollView](self, "_containingScrollView");
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }
    WeakRetained = v10;
  }
  else
  {
    v5 = 0;
  }
  if (WeakRetained != v5)
  {
    if (WeakRetained)
    {
      objc_storeWeak((id *)p_containerScrollView, 0);
      -[UIView _removeGeometryChangeObserver:](self, v10);
    }
    if (v5)
    {
      objc_storeWeak((id *)p_containerScrollView, v5);
      -[UIView _addGeometryChangeObserver:](self, v5);
    }
  }
  p_collectionViewFlags = &self->_collectionViewFlags;
  v7 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v5 != 0) == ((v7 & 0x800000000000) == 0))
  {
    v8 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    v9 = *(_QWORD *)p_collectionViewFlags;
    *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v8);
    *(_QWORD *)p_collectionViewFlags = v9;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v7 & 0xFFFF7FFFFFFFFFFFLL | ((unint64_t)(v5 != 0) << 47);
    -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 0);
  }

}

- (void)_setCellPrefetchMode:(int64_t)a3
{
  -[UICollectionView setPrefetchingEnabled:](self, "setPrefetchingEnabled:", a3 == 1);
}

- (int64_t)_cellPrefetchMode
{
  return -[UICollectionView isPrefetchingEnabled](self, "isPrefetchingEnabled");
}

- (BOOL)_hasPrefetchItems
{
  _UICollectionViewPrefetchingContext *mainPrefetchingContext;

  mainPrefetchingContext = self->_mainPrefetchingContext;
  return mainPrefetchingContext && -[NSMutableArray count](mainPrefetchingContext->_items, "count")
      || -[NSMutableDictionary count](self->_prefetchCacheItems, "count") != 0;
}

- (BOOL)isPrefetchingEnabled
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 61) & 1;
}

- (BOOL)_shouldPrefetchCellsWhenPerformingReloadData
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 52) & 1;
}

- (id)_prefetchingContextForOrthogonalScrollingSection:(int64_t)a3
{
  void *v5;
  int v6;
  NSMutableDictionary *orthogonalSectionPrefetchingContexts;
  void *v8;
  void *v9;

  -[UICollectionViewLayout _orthogonalScrollingSections](self->_layout, "_orthogonalScrollingSections");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "containsIndex:", a3);

  if (v6)
  {
    orthogonalSectionPrefetchingContexts = self->_orthogonalSectionPrefetchingContexts;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary objectForKeyedSubscript:](orthogonalSectionPrefetchingContexts, "objectForKeyedSubscript:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }
  return v9;
}

- (void)_setPrefetchingContext:(id)a3 forOrthogonalScrollingSection:(int64_t)a4
{
  void *v6;
  int v7;
  NSMutableDictionary *orthogonalSectionPrefetchingContexts;
  void *v9;
  id v10;

  v10 = a3;
  -[UICollectionViewLayout _orthogonalScrollingSections](self->_layout, "_orthogonalScrollingSections");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "containsIndex:", a4);

  if (v7)
  {
    orthogonalSectionPrefetchingContexts = self->_orthogonalSectionPrefetchingContexts;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](orthogonalSectionPrefetchingContexts, "setObject:forKeyedSubscript:", v10, v9);

  }
}

void __112__UICollectionView__createPreparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify___block_invoke_357(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_dataSourceProxy");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "collectionView:cellForItemAtIndexPath:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

- (void)_prepareViewForReuse:(uint64_t)a1
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  if (a1)
  {
    v6[1] = 3221225472;
    v6[2] = __41__UICollectionView__prepareViewForReuse___block_invoke;
    v6[3] = &unk_1E16B1B28;
    v5 = v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v4 = v3;
    v7 = v4;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v6);
    objc_msgSend(v4, "_setHiddenForReuse:", 0);

    v3 = v5;
  }

}

uint64_t __112__UICollectionView__createPreparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify___block_invoke_370(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

uint64_t __112__UICollectionView__createPreparedCellForItemAtIndexPath_withLayoutAttributes_applyAttributes_isFocused_notify___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

uint64_t __125__UICollectionView__createPreparedSupplementaryViewForElementOfKind_atIndexPath_layout_withLayoutAttributes_applyAttributes___block_invoke_388(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

uint64_t __90__UICollectionView__configureCachedCellForDisplay_withIndexPath_layoutAttributesToUpdate___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (uint64_t)_applyLayoutAttributes:(void *)a3 toView:(int)a4 addingControlledSubview:
{
  void *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  unint64_t v11;
  NSObject *v12;
  unint64_t v13;
  NSObject *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v7 = (void *)result;
  if (os_variant_has_internal_diagnostics())
  {
    if (!a3)
    {
      __UIFaultDebugAssertLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        v15 = 138412546;
        v16 = v7;
        v17 = 2112;
        v18 = a2;
        _os_log_fault_impl(&dword_185066000, v8, OS_LOG_TYPE_FAULT, "UICollectionView internal inconsistency: attempted to apply layout attributes to a nil view. Collection View: %@, Attributes: %@", (uint8_t *)&v15, 0x16u);
      }

    }
  }
  else if (!a3)
  {
    v11 = qword_1EDDC6510;
    if (!qword_1EDDC6510)
    {
      v11 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v11, (unint64_t *)&qword_1EDDC6510);
    }
    v12 = *(NSObject **)(v11 + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = 138412546;
      v16 = v7;
      v17 = 2112;
      v18 = a2;
      _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "UICollectionView internal inconsistency: attempted to apply layout attributes to a nil view. Collection View: %@, Attributes: %@", (uint8_t *)&v15, 0x16u);
    }
  }
  if (!os_variant_has_internal_diagnostics())
  {
    if (a2)
      goto LABEL_6;
    v13 = qword_1EDDC6518;
    if (!qword_1EDDC6518)
    {
      v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v13, (unint64_t *)&qword_1EDDC6518);
    }
    v14 = *(NSObject **)(v13 + 8);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      goto LABEL_6;
    v9 = v14;
    objc_msgSend(a3, "_layoutAttributes");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138412802;
    v16 = a3;
    v17 = 2112;
    v18 = v10;
    v19 = 2112;
    v20 = v7;
    _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "UICollectionView internal inconsistency: attempting to apply nil layout attributes to view. View: %@; current attr"
      "ibutes from view: %@; collection view: %@",
      (uint8_t *)&v15,
      0x20u);
    goto LABEL_25;
  }
  if (!a2)
  {
    __UIFaultDebugAssertLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
LABEL_26:

      goto LABEL_6;
    }
    objc_msgSend(a3, "_layoutAttributes");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138412802;
    v16 = a3;
    v17 = 2112;
    v18 = v10;
    v19 = 2112;
    v20 = v7;
    _os_log_fault_impl(&dword_185066000, v9, OS_LOG_TYPE_FAULT, "UICollectionView internal inconsistency: attempting to apply nil layout attributes to view. View: %@; current attr"
      "ibutes from view: %@; collection view: %@",
      (uint8_t *)&v15,
      0x20u);
LABEL_25:

    goto LABEL_26;
  }
LABEL_6:
  if (a4)
    objc_msgSend(v7, "_addControlledSubview:atZIndex:forced:initialAttributes:", a3, objc_msgSend(a2, "zIndex"), 0, a2);
  return objc_msgSend(a3, "_setLayoutAttributes:", a2);
}

- (CGPoint)_reorderingTargetPosition
{
  double x;
  double y;
  CGPoint result;

  x = self->_reorderingTargetPosition.x;
  y = self->_reorderingTargetPosition.y;
  result.y = y;
  result.x = x;
  return result;
}

uint64_t __94__UICollectionView__updatePrefetchItemIfNeeded_forIndexPath_withLayoutAttributes_willDisplay___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (unint64_t)_prefetchItemsForPrefetchingContext:(id)a3
{
  id *v4;
  _BOOL4 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  char v21;
  NSIndexPath *firstResponderIndexPath;
  void *v23;
  id v24;
  id v25;
  unint64_t v26;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  unint64_t v32;
  NSObject *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  id v37;
  uint8_t buf[4];
  UICollectionView *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (id *)a3;
  v5 = -[UICollectionView _useIdleObserverForCellPrefetching](self, "_useIdleObserverForCellPrefetching");
  if (v5)
    -[UICollectionView _beginReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate](self, "_beginReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate");
  if (v4 && objc_msgSend(v4[2], "count"))
  {
    v6 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
    while (1)
    {
      -[_UICollectionViewPrefetchingContext popNextItem]((uint64_t)v4);
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = (_QWORD *)v7;
      v9 = v7 ? *(void **)(v7 + 16) : 0;
      v10 = v9;
      objc_msgSend(v10, "indexPath");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      -[_UICollectionViewSubviewManager visibleCellAtIndexPath:]((id **)self->_subviewManager, (uint64_t)v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v12)
      {
        v13 = v6[922];
        objc_msgSend(*(id *)((char *)&self->super.super.super.super.isa + v13), "objectForKeyedSubscript:", v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v14)
        {
          -[UICollectionView _focusedItemState](self, "_focusedItemState");
          v15 = objc_claimAutoreleasedReturnValue();
          if (!v15)
            goto LABEL_14;
          v16 = (void *)v15;
          -[UICollectionView _focusedItemState](self, "_focusedItemState");
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = (void *)v17;
          v19 = v17 ? *(void **)(v17 + 16) : 0;
          v20 = v19;
          v21 = objc_msgSend(v20, "isEqual:", v11);

          v6 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
          if ((v21 & 1) == 0)
          {
LABEL_14:
            firstResponderIndexPath = self->_firstResponderIndexPath;
            if (!firstResponderIndexPath
              || (-[NSIndexPath isEqual:](firstResponderIndexPath, "isEqual:", v11) & 1) == 0)
            {
              v23 = v8 ? (void *)v8[2] : 0;
              v24 = v23;
              v25 = -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](self, "_createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", v11, v24, 0, 0, 0);

              if (v25)
                break;
            }
          }
        }
      }

      if (!objc_msgSend(v4[2], "count"))
      {
        v26 = 0;
        if (v5)
          goto LABEL_27;
        goto LABEL_28;
      }
    }
    if (v5)
      objc_msgSend(v25, "_setHiddenForReuse:", 1);
    -[_UICollectionCompositionalLayoutSolverOptions setLayoutAttributesClass:]((uint64_t)v8, v25);
    v28 = *(Class *)((char *)&self->super.super.super.super.isa + v13);
    if (v8)
      v29 = (void *)v8[2];
    else
      v29 = 0;
    v30 = v29;
    objc_msgSend(v30, "indexPath");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v8, v31);

    v32 = _prefetchItemsForPrefetchingContext____s_category;
    if (!_prefetchItemsForPrefetchingContext____s_category)
    {
      v32 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v32, (unint64_t *)&_prefetchItemsForPrefetchingContext____s_category);
    }
    if ((*(_BYTE *)v32 & 1) != 0)
    {
      v33 = *(NSObject **)(v32 + 8);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        v34 = v33;
        objc_msgSend(v11, "_ui_shortDescription");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          v36 = (void *)v8[2];
        else
          v36 = 0;
        v37 = v36;
        *(_DWORD *)buf = 134218754;
        v39 = self;
        v40 = 2112;
        v41 = v35;
        v42 = 2112;
        v43 = v25;
        v44 = 2112;
        v45 = v37;
        _os_log_impl(&dword_185066000, v34, OS_LOG_TYPE_ERROR, "[UICV %p] Prefetched cell for index path:%@ Cell: %@. Attributes: %@", buf, 0x2Au);

      }
    }

    v26 = 1;
    if (v5)
      goto LABEL_27;
  }
  else
  {
    v26 = 0;
    if (v5)
LABEL_27:
      -[UICollectionView _endReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate](self, "_endReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate");
  }
LABEL_28:

  return v26;
}

- (void)_computeMainPrefetchCandidatesForVelocity:(CGVector)a3
{
  double dy;
  double dx;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _UICollectionViewPrefetchingContext *v18;
  _UICollectionViewPrefetchingContext *mainPrefetchingContext;

  dy = a3.dy;
  dx = a3.dx;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  -[UICollectionView _computeFutureVisibleBoundsForPrefetchVelocity:visibleBounds:](self, "_computeFutureVisibleBoundsForPrefetchVelocity:visibleBounds:", dx, dy, v6, v8, v10, v12);
  -[UICollectionView _computeMainPrefetchCandidatesForVisibleBounds:futureVisibleBounds:prefetchVector:](self, "_computeMainPrefetchCandidatesForVisibleBounds:futureVisibleBounds:prefetchVector:", v7, v9, v11, v13, v14, v15, v16, v17, *(_QWORD *)&dx, *(_QWORD *)&dy);
  v18 = (_UICollectionViewPrefetchingContext *)objc_claimAutoreleasedReturnValue();
  mainPrefetchingContext = self->_mainPrefetchingContext;
  self->_mainPrefetchingContext = v18;

}

- (id)_computeMainPrefetchCandidatesForVisibleBounds:(CGRect)a3 futureVisibleBounds:(CGRect)a4 prefetchVector:(CGVector)a5
{
  double height;
  double width;
  double y;
  double x;
  double v9;
  double v10;
  _UICollectionViewPrefetchingContext *mainPrefetchingContext;
  _UICollectionViewPrefetchingContext *v13;
  void *v14;
  double v16;
  double v17;
  double v18;
  double v19;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v16 = a3.size.width;
  v17 = a3.size.height;
  v9 = a3.origin.y;
  v10 = a3.origin.x;
  mainPrefetchingContext = self->_mainPrefetchingContext;
  if (mainPrefetchingContext && CGRectEqualToRect(mainPrefetchingContext->_prefetchRect, a4))
  {
    v13 = self->_mainPrefetchingContext;
  }
  else
  {
    -[UICollectionViewData layoutAttributesForCellsInRect:validateLayout:](self->_collectionViewData, 1, x, y, width, height);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _prefetchingContextForVisibleBounds:prefetchVector:prefetchRect:attributes:](self, "_prefetchingContextForVisibleBounds:prefetchVector:prefetchRect:attributes:", v14, v10, v9, v16, v17, v18, v19, *(_QWORD *)&x, *(_QWORD *)&y, *(_QWORD *)&width, *(_QWORD *)&height);
    v13 = (_UICollectionViewPrefetchingContext *)objc_claimAutoreleasedReturnValue();

  }
  return v13;
}

- (id)_prefetchingContextForVisibleBounds:(CGRect)a3 prefetchVector:(CGVector)a4 prefetchRect:(CGRect)a5 attributes:(id)a6
{
  double dy;
  double dx;
  double height;
  double width;
  double y;
  double x;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  _WORD *v19;
  UICollectionViewLayout *layout;
  BOOL v21;
  void *v22;
  void *v23;
  void *v24;
  id *v25;
  id *v26;
  id *v27;
  void *v28;
  void *v29;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;
  CGRect v38;
  CGRect v39;

  dy = a4.dy;
  dx = a4.dx;
  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v37 = *MEMORY[0x1E0C80C00];
  v13 = a6;
  v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v13, "count"));
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v14 = v13;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v33 != v17)
          objc_enumerationMutation(v14);
        v19 = *(_WORD **)(*((_QWORD *)&v32 + 1) + 8 * i);
        layout = self->_layout;
        objc_msgSend(v19, "frame");
        -[UICollectionViewLayout _orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:](layout, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v19);
        v39.origin.x = x;
        v39.origin.y = y;
        v39.size.width = width;
        v39.size.height = height;
        v21 = CGRectIntersectsRect(v38, v39);
        if (v19 && !v21 && (v19[144] & 1) != 0)
        {
          objc_msgSend(v19, "indexPath");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UICollectionViewSubviewManager visibleCellAtIndexPath:]((id **)self->_subviewManager, (uint64_t)v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v23)
          {
            -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", v22);
            v24 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v24)
            {
              v25 = -[_UICollectionViewPrefetchItem initWithAttributes:]((id *)[_UICollectionViewPrefetchItem alloc], v19);
              objc_msgSend(v31, "addObject:", v25);

            }
          }

        }
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v16);
  }

  -[UICollectionView _reorderPrefetchCandidates:forPrefetchVelocity:visibleBounds:](self, "_reorderPrefetchCandidates:forPrefetchVelocity:visibleBounds:", v31, dx, dy, x, y, width, height);
  v26 = -[_UICollectionViewPrefetchingContext initWithPrefetchItems:prefetchRect:]((id *)[_UICollectionViewPrefetchingContext alloc], v31, a5.origin.x, a5.origin.y, a5.size.width, a5.size.height);
  v27 = v26;
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x10) != 0 && v26 && objc_msgSend(v26[2], "count"))
  {
    -[UICollectionView _prefetchDataSourceProxy](self, "_prefetchDataSourceProxy");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UICollectionViewPrefetchingContext remainingIndexPaths](v27);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "collectionView:prefetchItemsAtIndexPaths:", self, v29);

  }
  return v27;
}

- (CGRect)_computeFutureVisibleBoundsForPrefetchVelocity:(CGVector)a3 visibleBounds:(CGRect)a4
{
  CGFloat height;
  CGFloat width;
  double y;
  double x;
  double dy;
  double dx;
  double v11;
  double v12;
  double v13;
  double MaxX;
  double MinY;
  double v17;
  double v18;
  double v19;
  double v20;
  CGFloat v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect result;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  dy = a3.dy;
  dx = a3.dx;
  v26 = CGRectGetHeight(a4);
  v27.origin.x = x;
  v27.origin.y = y;
  v27.size.width = width;
  v27.size.height = height;
  v11 = CGRectGetWidth(v27);
  v12 = fabs(dx);
  v13 = fabs(dy);
  if (v12 < 2.22044605e-16 || v13 < 2.22044605e-16)
  {
    if (dx <= 0.0)
    {
      if (dx >= 0.0)
      {
        v20 = height;
        v17 = width;
        MinY = y;
        MaxX = x;
        goto LABEL_14;
      }
      v30.origin.x = x;
      v30.origin.y = y;
      v30.size.width = width;
      v30.size.height = height;
      v17 = v11 * 0.75;
      MaxX = CGRectGetMinX(v30) - v11 * 0.75;
      v31.origin.x = x;
      v31.origin.y = y;
      v31.size.width = width;
      v31.size.height = height;
      MinY = CGRectGetMinY(v31);
    }
    else
    {
      v28.origin.x = x;
      v28.origin.y = y;
      v28.size.width = width;
      v28.size.height = height;
      MaxX = CGRectGetMaxX(v28);
      v29.origin.x = x;
      v29.origin.y = y;
      v29.size.width = width;
      v29.size.height = height;
      MinY = CGRectGetMinY(v29);
      v17 = v11 * 0.75;
    }
    v20 = v26;
LABEL_14:
    if (dy <= 0.0)
    {
      if (dy >= 0.0)
        goto LABEL_22;
      v34.origin.x = x;
      v34.origin.y = y;
      v34.size.width = width;
      v34.size.height = height;
      MaxX = CGRectGetMinX(v34);
      v35.origin.x = x;
      v35.origin.y = y;
      v35.size.width = width;
      v35.size.height = height;
      v21 = CGRectGetMinY(v35);
      v20 = v26 * 0.75;
      MinY = v21 - v26 * 0.75;
    }
    else
    {
      v32.origin.x = x;
      v32.origin.y = y;
      v32.size.width = width;
      v32.size.height = height;
      MaxX = CGRectGetMinX(v32);
      v33.origin.x = x;
      v33.origin.y = y;
      v33.size.width = width;
      v33.size.height = height;
      MinY = CGRectGetMaxY(v33);
      v20 = v26 * 0.75;
    }
    v17 = v11;
    goto LABEL_22;
  }
  v18 = v12 / (v12 + v13);
  v19 = v13 / (v12 + v13);
  if (v18 <= v19 * 5.0)
  {
    if (v19 > v18 * 5.0)
      v18 = 0.0;
  }
  else
  {
    v19 = 0.0;
  }
  -[UICollectionView _unitVectorForVector:](self, "_unitVectorForVector:", dx, dy);
  MaxX = x + v11 * 0.5 * v18 * v22;
  MinY = y + v26 * 0.5 * v19 * v23;
  v17 = v11 * 1.25;
  v20 = v26 * 1.25;
LABEL_22:
  v24 = MaxX;
  v25 = v17;
  result.size.height = v20;
  result.size.width = v25;
  result.origin.y = MinY;
  result.origin.x = v24;
  return result;
}

- (CGRect)_computePrefetchCacheValidationBoundsForPrefetchVelocity:(CGVector)a3 visibleBounds:(CGRect)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v23;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  -[UICollectionView _computeFutureVisibleBoundsForPrefetchVelocity:visibleBounds:](self, "_computeFutureVisibleBoundsForPrefetchVelocity:visibleBounds:", a3.dx, a3.dy);
  v23.origin.x = v8;
  v23.origin.y = v9;
  v23.size.width = v10;
  v23.size.height = v11;
  v18.origin.x = x;
  v18.origin.y = y;
  v18.size.width = width;
  v18.size.height = height;
  v19 = CGRectUnion(v18, v23);
  v16 = v19.origin.y;
  v17 = v19.origin.x;
  v12 = v19.size.width;
  v13 = v19.size.height;
  v19.origin.x = x;
  v19.origin.y = y;
  v19.size.width = width;
  v19.size.height = height;
  v14 = CGRectGetWidth(v19) * -0.25;
  v20.origin.x = x;
  v20.origin.y = y;
  v20.size.width = width;
  v20.size.height = height;
  v15 = CGRectGetHeight(v20) * -0.25;
  v21.origin.y = v16;
  v21.origin.x = v17;
  v21.size.width = v12;
  v21.size.height = v13;
  return CGRectInset(v21, v14, v15);
}

void __57__UICollectionView__pruneCachedPrefetchViewsForVelocity___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  CGRect v32;

  if (a3)
    v6 = *(void **)(a3 + 24);
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    v8 = *(void **)(*(_QWORD *)(a1 + 32) + 2072);
    if (a3)
    {
      v9 = *(id *)(a3 + 16);
      v10 = *(void **)(a3 + 16);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v11 = v10;
    objc_msgSend(v11, "frame");
    objc_msgSend(v8, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v9);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;

    v32.origin.x = v13;
    v32.origin.y = v15;
    v32.size.width = v17;
    v32.size.height = v19;
    if (!CGRectIntersectsRect(*(CGRect *)(a1 + 56), v32))
    {
      v20 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      if (v20)
      {
        objc_msgSend(v20, "addObject:", a2);
      }
      else
      {
        v21 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", a2, 0);
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v23 = *(void **)(v22 + 40);
        *(_QWORD *)(v22 + 40) = v21;

      }
      v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      if (v24)
      {
        if (a3)
          v25 = *(void **)(a3 + 24);
        else
          v25 = 0;
        v31 = v25;
        objc_msgSend(v24, "addObject:");
      }
      else
      {
        v26 = objc_alloc(MEMORY[0x1E0C99DE8]);
        if (a3)
          v27 = *(void **)(a3 + 24);
        else
          v27 = 0;
        v31 = v27;
        v28 = objc_msgSend(v26, "initWithObjects:", v31, 0);
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v30 = *(void **)(v29 + 40);
        *(_QWORD *)(v29 + 40) = v28;

      }
    }
  }
}

- (void)_reusePrefetchedCell:(id)a3
{
  id v4;
  int v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  UICollectionView *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = -[_UICollectionViewSubviewManager isViewInReuseQueue:]((uint64_t)self->_subviewManager, v4);
  if ((v5 & 1) != 0 || (objc_msgSend(v4, "_isInUpdateAnimation") & 1) != 0)
  {
    v6 = _reusePrefetchedCell____s_category;
    if (!_reusePrefetchedCell____s_category)
    {
      v6 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&_reusePrefetchedCell____s_category);
    }
    if ((*(_BYTE *)v6 & 1) != 0)
    {
      v7 = *(NSObject **)(v6 + 8);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = v7;
        v9 = 134218754;
        v10 = self;
        v11 = 1024;
        v12 = v5;
        v13 = 1024;
        v14 = objc_msgSend(v4, "_isInUpdateAnimation");
        v15 = 2112;
        v16 = v4;
        _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "[UICV %p] Skipping reuse of prefetched cell for reason isViewInReuseQueue(%d) inUpdateAnimation(%d): %@", (uint8_t *)&v9, 0x22u);

      }
    }
  }
  else
  {
    -[UICollectionView _reuseCell:notifyDidEndDisplaying:](self, "_reuseCell:notifyDidEndDisplaying:", v4, 0);
  }

}

- (void)_prunePrefetchedViewsAtIndexPaths:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v4, "count"));
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v26;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v26 != v9)
          objc_enumerationMutation(v6);
        -[NSMutableDictionary objectForKeyedSubscript:](self->_prefetchCacheItems, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * v10));
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = (void *)v11;
        if (v11)
          v13 = *(void **)(v11 + 24);
        else
          v13 = 0;
        v14 = v13;

        if (v14)
          objc_msgSend(v5, "addObject:", v14);

        ++v10;
      }
      while (v8 != v10);
      v15 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
      v8 = v15;
    }
    while (v15);
  }

  -[NSMutableDictionary removeObjectsForKeys:](self->_prefetchCacheItems, "removeObjectsForKeys:", v6);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v16 = v5;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v22 != v19)
          objc_enumerationMutation(v16);
        -[UICollectionView _reusePrefetchedCell:](self, "_reusePrefetchedCell:", *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i), (_QWORD)v21);
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
    }
    while (v18);
  }

}

- (void)_reorderPrefetchCandidates:(id)a3 forPrefetchVelocity:(CGVector)a4 visibleBounds:(CGRect)a5
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double dy;
  double dx;
  double v12;
  double v13;
  char v14;
  double MinX;
  double MinY;
  BOOL v17;
  id v18;
  _QWORD v19[9];
  BOOL v20;
  char v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  height = a5.size.height;
  width = a5.size.width;
  y = a5.origin.y;
  x = a5.origin.x;
  dy = a4.dy;
  dx = a4.dx;
  v18 = a3;
  if (fabs(dx) >= 2.22044605e-16)
  {
    v12 = *MEMORY[0x1E0C9D538];
    v13 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    if (fabs(dy) < 2.22044605e-16)
      goto LABEL_4;
    if (dx <= 0.0)
    {
      if (dx >= 0.0)
        goto LABEL_10;
      v23.origin.x = x;
      v23.origin.y = y;
      v23.size.width = width;
      v23.size.height = height;
      MinX = CGRectGetMinX(v23);
    }
    else
    {
      v22.origin.x = x;
      v22.origin.y = y;
      v22.size.width = width;
      v22.size.height = height;
      MinX = CGRectGetMaxX(v22);
    }
    v12 = MinX;
LABEL_10:
    if (dy <= 0.0)
    {
      if (dy >= 0.0)
      {
LABEL_15:
        v14 = 0;
        goto LABEL_16;
      }
      v25.origin.x = x;
      v25.origin.y = y;
      v25.size.width = width;
      v25.size.height = height;
      MinY = CGRectGetMinY(v25);
    }
    else
    {
      v24.origin.x = x;
      v24.origin.y = y;
      v24.size.width = width;
      v24.size.height = height;
      MinY = CGRectGetMaxY(v24);
    }
    v13 = MinY;
    goto LABEL_15;
  }
  v12 = *MEMORY[0x1E0C9D538];
  v13 = *(double *)(MEMORY[0x1E0C9D538] + 8);
LABEL_4:
  v14 = 1;
LABEL_16:
  v17 = -[UICollectionViewLayout _hasOrthogonalScrollingSections](self->_layout, "_hasOrthogonalScrollingSections");
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __81__UICollectionView__reorderPrefetchCandidates_forPrefetchVelocity_visibleBounds___block_invoke;
  v19[3] = &unk_1E16BCE80;
  v20 = v17;
  v19[4] = self;
  v21 = v14;
  *(double *)&v19[5] = dx;
  *(double *)&v19[6] = dy;
  *(double *)&v19[7] = v12;
  *(double *)&v19[8] = v13;
  objc_msgSend(v18, "sortUsingComparator:", v19);

}

uint64_t __81__UICollectionView__reorderPrefetchCandidates_forPrefetchVelocity_visibleBounds___block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  double MinX;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double MinY;
  double MaxY;
  double v34;
  CGFloat rect;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  if (a2)
    a2 = (_QWORD *)a2[2];
  if (a3)
    v4 = *(void **)(a3 + 16);
  else
    v4 = 0;
  if (*(_BYTE *)(a1 + 72))
    v5 = -[UICollectionView _layoutAttributesFrameAdjustedForOrthogonalScrollingOffset:](*(_QWORD *)(a1 + 32), a2);
  else
    objc_msgSend(a2, "frame");
  v9 = v5;
  v10 = v6;
  v11 = v7;
  v12 = v8;
  if (*(_BYTE *)(a1 + 72))
    v13 = -[UICollectionView _layoutAttributesFrameAdjustedForOrthogonalScrollingOffset:](*(_QWORD *)(a1 + 32), v4);
  else
    objc_msgSend(v4, "frame");
  v17 = v13;
  v18 = v14;
  v19 = v15;
  v20 = v16;
  if (*(_BYTE *)(a1 + 73))
  {
    v21 = *(double *)(a1 + 40);
    rect = v12;
    if (v21 > 0.0)
    {
      v36.origin.x = v9;
      v36.origin.y = v10;
      v36.size.width = v11;
      v36.size.height = v12;
      MinX = CGRectGetMinX(v36);
      v37.origin.x = v17;
      v37.origin.y = v18;
      v37.size.width = v19;
      v37.size.height = v20;
      if (MinX <= CGRectGetMinX(v37))
      {
        v38.origin.x = v9;
        v38.origin.y = v10;
        v38.size.width = v11;
        v38.size.height = rect;
        v23 = CGRectGetMinX(v38);
        v39.origin.x = v17;
        v39.origin.y = v18;
        v39.size.width = v19;
        v39.size.height = v20;
        v24 = CGRectGetMinX(v39);
        goto LABEL_25;
      }
      return 1;
    }
    if (v21 < 0.0)
    {
      v40.origin.x = v9;
      v40.origin.y = v10;
      v40.size.width = v11;
      v40.size.height = v12;
      v28 = CGRectGetMinX(v40);
      v41.origin.x = v17;
      v41.origin.y = v18;
      v41.size.width = v19;
      v41.size.height = v20;
      if (v28 < CGRectGetMinX(v41))
        return 1;
      v42.origin.x = v9;
      v42.origin.y = v10;
      v42.size.width = v11;
      v42.size.height = rect;
      v29 = CGRectGetMinX(v42);
      v43.origin.x = v17;
      v43.origin.y = v18;
      v43.size.width = v19;
      v43.size.height = v20;
      if (v29 <= CGRectGetMinX(v43))
        return 0;
      return -1;
    }
    v30 = *(double *)(a1 + 48);
    if (v30 > 0.0)
    {
      v44.origin.x = v9;
      v44.origin.y = v10;
      v44.size.width = v11;
      v44.size.height = v12;
      MinY = CGRectGetMinY(v44);
      v45.origin.x = v17;
      v45.origin.y = v18;
      v45.size.width = v19;
      v45.size.height = v20;
      if (MinY <= CGRectGetMinY(v45))
      {
        v46.origin.x = v9;
        v46.origin.y = v10;
        v46.size.width = v11;
        v46.size.height = rect;
        v23 = CGRectGetMinY(v46);
        v47.origin.x = v17;
        v47.origin.y = v18;
        v47.size.width = v19;
        v47.size.height = v20;
        v24 = CGRectGetMinY(v47);
LABEL_25:
        if (v23 < v24)
          return -1;
        return 0;
      }
      return 1;
    }
    if (v30 < 0.0)
    {
      v48.origin.x = v9;
      v48.origin.y = v10;
      v48.size.width = v11;
      v48.size.height = v12;
      MaxY = CGRectGetMaxY(v48);
      v49.origin.x = v17;
      v49.origin.y = v18;
      v49.size.width = v19;
      v49.size.height = v20;
      if (MaxY > CGRectGetMaxY(v49))
        return -1;
      v50.origin.x = v9;
      v50.origin.y = v10;
      v50.size.width = v11;
      v50.size.height = rect;
      v34 = CGRectGetMaxY(v50);
      v51.origin.x = v17;
      v51.origin.y = v18;
      v51.size.width = v19;
      v51.size.height = v20;
      if (v34 < CGRectGetMaxY(v51))
        return 1;
    }
  }
  else
  {
    UIDistanceBetweenPointAndRect(*(CGFloat *)(a1 + 56), *(CGFloat *)(a1 + 64), v9, v10, v11, v12);
    v26 = v25;
    UIDistanceBetweenPointAndRect(*(CGFloat *)(a1 + 56), *(CGFloat *)(a1 + 64), v17, v18, v19, v20);
    if (v26 > v27)
      return 1;
    if (v26 < v27)
      return -1;
  }
  return 0;
}

- (CGVector)_unitVectorForVector:(CGVector)a3
{
  BOOL v3;
  double v4;
  BOOL v5;
  double v6;
  CGVector result;

  v3 = a3.dx < 0.0;
  if (a3.dx > 0.0)
    v4 = 1.0;
  else
    v4 = 0.0;
  if (v3)
    v4 = -1.0;
  v5 = a3.dy < 0.0;
  if (a3.dy > 0.0)
    v6 = 1.0;
  else
    v6 = 0.0;
  if (v5)
    v6 = -1.0;
  result.dy = v6;
  result.dx = v4;
  return result;
}

void __47__UICollectionView__resetPrefetchedCachedCells__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;

  if (a3)
  {
    v4 = *(id *)(a3 + 24);
    if (v4)
    {
      v5 = v4;
      if ((objc_msgSend(v4, "_isInUpdateAnimation") & 1) == 0)
        objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);
      v4 = v5;
    }
  }
  else
  {
    v4 = 0;
  }

}

uint64_t __45__UICollectionView__resetAllPrefetchContexts__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resetPrefetchingContext:");
}

void __70__UICollectionView__updatePrefetchVelocityIntegratorForVisibleBounds___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_resetAllPrefetchContexts");

}

void __63__UICollectionView__rebasePrefetchedCellIndexPathsWithMapping___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _QWORD *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  _QWORD *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = _UIInternalPreference_CollectionViewCellPrefetchingMode_block_invoke_5___s_category;
    if (!_UIInternalPreference_CollectionViewCellPrefetchingMode_block_invoke_5___s_category)
    {
      v8 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v8, (unint64_t *)&_UIInternalPreference_CollectionViewCellPrefetchingMode_block_invoke_5___s_category);
    }
    if ((*(_BYTE *)v8 & 1) != 0)
    {
      v12 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = *(_QWORD *)(a1 + 32);
        v14 = v12;
        if (v6)
          v15 = (void *)v6[3];
        else
          v15 = 0;
        v16 = v15;
        objc_msgSend(v5, "_ui_shortDescription");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "_ui_shortDescription");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 134219010;
        v20 = v13;
        v21 = 2048;
        v22 = v6;
        v23 = 2048;
        v24 = v16;
        v25 = 2112;
        v26 = v17;
        v27 = 2112;
        v28 = v18;
        _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "[UICV %p] Rebasing prefetch item (%p) with view %p from %@ to %@", (uint8_t *)&v19, 0x34u);

      }
    }
    if (v6)
      *((_BYTE *)v6 + 8) |= 1u;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2744), "setObject:forKey:", v6, v7);
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    if (v6)
      v10 = (void *)v6[3];
    else
      v10 = 0;
    v11 = v10;
    objc_msgSend(v9, "_reusePrefetchedCell:", v11);

  }
}

- (void)_updateCycleIdleUntil:(unint64_t)a3
{
  id WeakRetained;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  NSMutableDictionary *prefetchCacheItems;
  unint64_t v11;
  uint64_t v12;
  _UICollectionViewPrefetchingContext *v13;
  _UICollectionViewPrefetchingContext *v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD v17[7];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  uint8_t buf[4];
  UICollectionView *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);

  if (WeakRetained && -[UICollectionView _prefetchingAllowed](self, "_prefetchingAllowed"))
  {
    v6 = mach_absolute_time();
    v7 = v6;
    if (a3 >= v6)
      v8 = a3 - v6;
    else
      v8 = 0;
    v9 = (void *)_UISetCurrentFallbackEnvironment(self);
    if (-[NSMutableDictionary count](self->_prefetchCacheItems, "count"))
    {
      v18 = 0;
      v19 = &v18;
      v20 = 0x3032000000;
      v21 = __Block_byref_object_copy__40;
      v22 = __Block_byref_object_dispose__40;
      v23 = 0;
      -[UICollectionView _beginReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate](self, "_beginReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate");
      prefetchCacheItems = self->_prefetchCacheItems;
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = __42__UICollectionView__updateCycleIdleUntil___block_invoke;
      v17[3] = &unk_1E16BCF20;
      v17[4] = self;
      v17[5] = &v18;
      v17[6] = a3;
      -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](prefetchCacheItems, "enumerateKeysAndObjectsUsingBlock:", v17);
      -[UICollectionView _endReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate](self, "_endReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate");
      if (v19[5])
      {
        v11 = _updateCycleIdleUntil____s_category;
        if (!_updateCycleIdleUntil____s_category)
        {
          v11 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v11, (unint64_t *)&_updateCycleIdleUntil____s_category);
        }
        if ((*(_BYTE *)v11 & 1) != 0)
        {
          v15 = *(NSObject **)(v11 + 8);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v16 = v19[5];
            *(_DWORD *)buf = 134218242;
            v25 = self;
            v26 = 2112;
            v27 = v16;
            _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_ERROR, "[UICV %p] Pruning invalid prefetch items at index paths: %@", buf, 0x16u);
          }
        }
        -[UICollectionView _prunePrefetchedViewsAtIndexPaths:](self, "_prunePrefetchedViewsAtIndexPaths:", v19[5]);
      }
      _Block_object_dispose(&v18, 8);

    }
    v12 = mach_absolute_time();
    if (v7 < a3 && (float)((float)(v12 - v7) / (float)v8) <= 0.1)
    {
      v13 = self->_activeOrthogonalPrefetchingContext;
      v14 = v13;
      if (v13 && -[NSMutableArray count](v13->_items, "count"))
        -[UICollectionView _prefetchItemsForPrefetchingContext:](self, "_prefetchItemsForPrefetchingContext:", v14);
      else
        -[UICollectionView _updatePrefetchedCells:](self, "_updatePrefetchedCells:", 1);

    }
    _UIRestorePreviousFallbackEnvironment(v9);
  }
}

uint64_t __42__UICollectionView__updateCycleIdleUntil___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;

  if ((objc_msgSend(*(id *)(a1 + 32), "_updatePrefetchItemIfNeeded:forIndexPath:withLayoutAttributes:willDisplay:", a3, a2, 0, 0) & 1) == 0)
  {
    v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (v7)
    {
      objc_msgSend(v7, "addObject:", a2);
    }
    else
    {
      v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", a2, 0);
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;

    }
  }
  result = mach_absolute_time();
  if (result >= *(_QWORD *)(a1 + 48))
    *a4 = 1;
  return result;
}

BOOL __77__UICollectionView__saveContentOffsetRestorationAnchorIfNecessaryUsingModel___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;
  void *v6;

  objc_msgSend(a2, "indexPath");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2200)
    && +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled"))
  {
    if ((-[UICollectionViewUpdate hasMovedItemAtOldIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2200), v3) & 1) != 0)
    {
      v4 = 0;
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2200), "finalIndexPathForInitialIndexPath:", v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v6 != 0;

    }
  }
  else
  {
    v4 = 1;
  }

  return v4;
}

- (id)_layoutAttributesClosestToReferencePoint:(uint64_t)a3 amongCandidates:(void *)a4 onAxis:(double)a5 shouldConsiderBlock:(double)a6
{
  unsigned int (**v11)(id, void *);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  void *v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v11 = a4;
  if (a1)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v12 = a2;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    if (v13)
    {
      v14 = v13;
      a1 = 0;
      v15 = *(_QWORD *)v36;
      v16 = 1.79769313e308;
      do
      {
        v17 = 0;
        v34 = v14;
        do
        {
          if (*(_QWORD *)v36 != v15)
            objc_enumerationMutation(v12);
          v18 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v17);
          if (v11[2](v11, v18))
          {
            v19 = (id)objc_msgSend(v18, "indexPath");
            objc_msgSend(v18, "frame");
            v22 = _UICollectionLayoutDistanceBetweenPointsOnAxis(a3, a5, a6, v20, v21);
            v23 = v22;
            if (v22 < v16)
              goto LABEL_9;
            if (vabdd_f64(v22, v16) <= 0.001)
            {
              v25 = (id)objc_msgSend(a1, "indexPath");
              v26 = v15;
              v27 = a1;
              v28 = v12;
              v29 = a3;
              v30 = objc_msgSend(v19, "section");
              v31 = v30 < objc_msgSend(v25, "section");
              a3 = v29;
              v12 = v28;
              a1 = v27;
              v15 = v26;
              v14 = v34;
              if (v31 || (v32 = objc_msgSend(v19, "item"), v32 < objc_msgSend(v25, "item")))
              {
LABEL_9:
                v24 = v18;

                v16 = v23;
                a1 = v24;
              }
            }
          }
          ++v17;
        }
        while (v14 != v17);
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      }
      while (v14);
    }
    else
    {
      a1 = 0;
    }

  }
  return a1;
}

BOOL __70__UICollectionView__rebaseContentOffsetAnchorOrScrollTargetForUpdate___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;
  void *v5;

  v3 = a2;
  if ((-[UICollectionViewUpdate hasMovedItemAtOldIndexPath:](*(_QWORD *)(a1 + 32), v3) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "finalIndexPathForInitialIndexPath:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v5 == 0;

  }
  return v4;
}

- (double)_contentOffsetForRestoringPositionToCurrentRestorationAnchorWithContentInsets:(double)a3 shouldApply:(double)a4
{
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0.0;
  if (!a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "handleFailureInMethod:object:file:lineNumber:description:", sel__contentOffsetForRestoringPositionToCurrentRestorationAnchorWithContentInsets_shouldApply_, a1, CFSTR("UICollectionView.m"), 5317, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("shouldApply != NULL"));

  }
  objc_msgSend((id)a1, "contentOffset");
  v9 = v8;
  v11 = v10;
  *a2 = 0;
  v12 = objc_msgSend(*(id *)(a1 + 2072), "_layoutAxis");
  if ((unint64_t)(v12 - 1) > 1)
    return v9;
  v13 = v12;
  if ((objc_msgSend((id)a1, "isScrollAnimating") & 1) != 0
    || (dyld_program_sdk_at_least() & 1) == 0
    && ((objc_msgSend((id)a1, "isDecelerating") & 1) != 0 || (objc_msgSend((id)a1, "isTracking") & 1) != 0))
  {
    return v9;
  }
  if (*(_QWORD *)(a1 + 2200)
    && (dyld_program_sdk_at_least() & 1) == 0
    && objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2200) + 8), "count"))
  {
    v14 = qword_1EDDC65C0;
    if (!qword_1EDDC65C0)
    {
      v14 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v14, (unint64_t *)&qword_1EDDC65C0);
    }
    if ((*(_BYTE *)v14 & 1) == 0)
      return v9;
    v15 = *(NSObject **)(v14 + 8);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      return v9;
    *(_DWORD *)buf = 134217984;
    v37 = a1;
    v16 = "_contentOffsetForRestoringPosition: cv == %p; Not restoring -- have in-flight update";
    v17 = v15;
    v18 = 12;
LABEL_30:
    _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return v9;
  }
  v19 = *(_QWORD *)(a1 + 2192);
  if (v19 && (-[UICollectionViewData _isIndexPathValid:validateItemCounts:](v19, *(void **)(a1 + 2920), 1) & 1) != 0)
  {
    -[UICollectionViewData layoutAttributesForItemAtIndexPath:](*(_QWORD *)(a1 + 2192), *(void **)(a1 + 2920));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "frame");
    v23 = _UIPointValueForAxis(v13, v21, v22);
    v24 = v23 + _UIPointValueForAxis(v13, *(double *)(a1 + 2928), *(double *)(a1 + 2936));
    if (v13 == 2)
      v25 = a3;
    else
      v25 = a4;
    v26 = _UISetPointValueForAxis(v13, v9, v11, v24 - v25);
    v28 = v27;
    v29 = objc_msgSend((id)a1, "_isAutomaticContentOffsetAdjustmentEnabled");
    objc_msgSend((id)a1, "_setAutomaticContentOffsetAdjustmentEnabled:", 1);
    -[UICollectionViewData collectionViewContentRect](*(_QWORD *)(a1 + 2192));
    objc_msgSend((id)a1, "_adjustedContentOffsetForContentOffset:contentSize:skipsAdjustmentIfScrolling:", 0, v26, v28);
    v9 = v30;
    objc_msgSend((id)a1, "_setAutomaticContentOffsetAdjustmentEnabled:", v29);
    *a2 = 1;

    return v9;
  }
  v31 = qword_1EDDC65C8;
  if (!qword_1EDDC65C8)
  {
    v31 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v31, (unint64_t *)&qword_1EDDC65C8);
  }
  if ((*(_BYTE *)v31 & 1) != 0)
  {
    v34 = *(NSObject **)(v31 + 8);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = *(_QWORD *)(a1 + 2920);
      *(_DWORD *)buf = 134218242;
      v37 = a1;
      v38 = 2112;
      v39 = v35;
      v16 = "_contentOffsetForRestoringPosition: cv == %p; the anchor %@ is no longer valid";
      v17 = v34;
      v18 = 22;
      goto LABEL_30;
    }
  }
  return v9;
}

- (double)_frameOfElementAtScrollingTargetIndexPath:(uint64_t)a1
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  uint64_t v13;
  void *v14;
  double v15;
  CGRect v17;

  if (!a1)
    return 0.0;
  v4 = objc_msgSend(a2, "section");
  if (objc_msgSend(a2, "item") == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(*(id *)(a1 + 2072), "_frameForScrollingToFirstElementInSectionAtIndex:", v4);
    v6 = v5;
    v8 = v7;
    v10 = v9;
    v12 = v11;
  }
  else
  {
    v6 = *MEMORY[0x1E0C9D628];
    v8 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v10 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v12 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  v17.origin.x = v6;
  v17.origin.y = v8;
  v17.size.width = v10;
  v17.size.height = v12;
  if (CGRectIsNull(v17))
  {
    v13 = objc_msgSend(a2, "item");
    if (v13 < -[UICollectionViewData numberOfItemsInSection:](*(_QWORD *)(a1 + 2192), v4))
    {
      -[UICollectionViewData layoutAttributesForItemAtIndexPath:](*(_QWORD *)(a1 + 2192), a2);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "frame");
      v6 = v15;

    }
  }
  return v6;
}

- (id)_storeScrollingTargetInfoForIndexPath:(void *)a3 frame:(double)a4 scrollPosition:(double)a5 additionalInsets:(double)a6
{
  id *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;

  if (result)
  {
    if (a2)
    {
      v21 = result;
      objc_msgSend(result, "_contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:itemFrame:containingScrollView:clampToScrollableArea:", a2, a3, result, 0, a8, a9, a10, a11, a4, a5, a6, a7);
      v26 = v23;
      v27 = v22;
      objc_storeStrong(v21 + 368, a2);
      v21[371] = a3;
      *((double *)v21 + 376) = a8;
      *((double *)v21 + 377) = a9;
      *((double *)v21 + 378) = a10;
      *((double *)v21 + 379) = a11;
      *((double *)v21 + 372) = a4;
      *((double *)v21 + 373) = a5;
      *((double *)v21 + 374) = a6;
      *((double *)v21 + 375) = a7;
      result = (id *)objc_msgSend(v21, "_contentInsetIncludingDecorations");
      *((double *)v21 + 369) = v27 - a4 + v24;
      *((double *)v21 + 370) = v26 - a5 + v25;
    }
  }
  return result;
}

void __43__UICollectionView__updateVisibleCellsNow___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  objc_msgSend(a5, "_layoutAttributes");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObject:", v6);

}

uint64_t __43__UICollectionView__updateVisibleCellsNow___block_invoke_2(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = -[UICollectionViewLayoutAttributes __indexPath](a2);
  return objc_msgSend(v4, "compare:", -[UICollectionViewLayoutAttributes __indexPath](a3));
}

void __43__UICollectionView__updateVisibleCellsNow___block_invoke_444(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  _UIIsPrivateMainBundle();
  if (dyld_program_sdk_at_least())
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = objc_claimAutoreleasedReturnValue();
    -[NSObject handleFailureInMethod:object:file:lineNumber:description:](v4, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 40), v3, *(_QWORD *)(a1 + 32));
LABEL_3:

    goto LABEL_9;
  }
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v10 = v3;
      v11 = 2112;
      v12 = v8;
      _os_log_fault_impl(&dword_185066000, v4, OS_LOG_TYPE_FAULT, "Expected dequeued view to be returned to the collection view in preparation for display. When the collection view's data source is asked to provide a view for a given index path, ensure that a single view is dequeued and returned to the collection view. Avoid dequeuing views without a request from the collection view. For retrieving an existing view in the collection view, use -[UICollectionView cellForItemAtIndexPath:] or -[UICollectionView supplementaryViewForElementKind:atIndexPath:]. Dequeued view: %@; Collection view: %@  This will become an assert "
        "in a future version.",
        buf,
        0x16u);
    }
    goto LABEL_3;
  }
  v5 = _UIInternalPreference_CollectionViewCellPrefetchingMode_block_invoke_6___s_category;
  if (!_UIInternalPreference_CollectionViewCellPrefetchingMode_block_invoke_6___s_category)
  {
    v5 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v5, (unint64_t *)&_UIInternalPreference_CollectionViewCellPrefetchingMode_block_invoke_6___s_category);
  }
  v6 = *(NSObject **)(v5 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    v10 = v3;
    v11 = 2112;
    v12 = v7;
    _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "Expected dequeued view to be returned to the collection view in preparation for display. When the collection view's data source is asked to provide a view for a given index path, ensure that a single view is dequeued and returned to the collection view. Avoid dequeuing views without a request from the collection view. For retrieving an existing view in the collection view, use -[UICollectionView cellForItemAtIndexPath:] or -[UICollectionView supplementaryViewForElementKind:atIndexPath:]. Dequeued view: %@; Collection view: %@  This will become an assert in a future version.",
      buf,
      0x16u);
  }
LABEL_9:
  objc_msgSend(v3, "_setHiddenForReuse:", 1);

}

- (void)_incrementRotationAnimationCount
{
  ++self->_rotationAnimationCount;
}

- (void)_decrementRotationAnimationCount
{
  int64_t v2;
  CGFloat v4;
  CGFloat v5;

  v2 = self->_rotationAnimationCount - 1;
  self->_rotationAnimationCount = v2;
  if (!v2)
  {
    self->_rotationBoundsOffset = (CGPoint)*MEMORY[0x1E0C9D538];
    -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
    -[UIScrollView contentOffset](self, "contentOffset");
    self->_lastLayoutOffset.x = v4;
    self->_lastLayoutOffset.y = v5;
  }
}

- (void)_animateVisibleView:(id)a3 withLayoutAttributes:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  UICollectionView *v17;
  id v18;
  _QWORD *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  UICollectionView *v23;
  _QWORD *v24;
  _QWORD v25[3];
  char v26;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[UICollectionView _incrementRotationAnimationCount](self, "_incrementRotationAnimationCount");
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  v26 = 0;
  v11 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __79__UICollectionView__animateVisibleView_withLayoutAttributes_completionHandler___block_invoke;
  v20[3] = &unk_1E16BCFE0;
  v21 = v8;
  v12 = v9;
  v23 = self;
  v24 = v25;
  v22 = v12;
  v15[0] = v11;
  v15[1] = 3221225472;
  v15[2] = __79__UICollectionView__animateVisibleView_withLayoutAttributes_completionHandler___block_invoke_2;
  v15[3] = &unk_1E16BD008;
  v19 = v25;
  v13 = v21;
  v16 = v13;
  v14 = v10;
  v17 = self;
  v18 = v14;
  +[UIView animateWithDuration:animations:completion:](UIView, "animateWithDuration:animations:completion:", v20, v15, 0.0);

  _Block_object_dispose(v25, 8);
}

void __79__UICollectionView__animateVisibleView_withLayoutAttributes_completionHandler___block_invoke(uint64_t a1)
{
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  int v12;
  void *v13;
  _OWORD v14[8];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = *(id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "center");
    objc_msgSend(v2, "setPosition:");
    objc_msgSend(v2, "bounds");
    v4 = v3;
    v6 = v5;
    objc_msgSend(*(id *)(a1 + 40), "size");
    objc_msgSend(v2, "setBounds:", v4, v6, v7, v8);
    objc_msgSend(*(id *)(a1 + 40), "alpha");
    *(float *)&v9 = v9;
    objc_msgSend(v2, "setOpacity:", v9);
    v10 = *(void **)(a1 + 40);
    if (v10)
      objc_msgSend(v10, "transform3D");
    else
      memset(v14, 0, sizeof(v14));
    objc_msgSend(v2, "setTransform:", v14);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "alpha");
    if (v11 == 0.0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v12 = objc_msgSend(*(id *)(a1 + 32), "_disableRasterizeInAnimations") ^ 1;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
      }
      else
      {
        v12 = 1;
      }
      if (!dyld_program_sdk_at_least() && v12)
      {
        objc_msgSend(*(id *)(a1 + 32), "layer");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v13, "shouldRasterize") & 1) == 0)
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
        objc_msgSend(v13, "setShouldRasterize:", 1);
        objc_msgSend(*(id *)(a1 + 48), "_currentScreenScale");
        objc_msgSend(v13, "setRasterizationScale:");

      }
    }
    objc_msgSend(*(id *)(a1 + 48), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  }
}

uint64_t __79__UICollectionView__animateVisibleView_withLayoutAttributes_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    objc_msgSend(*(id *)(a1 + 32), "layer");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setShouldRasterize:", 0);

  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(void))(v3 + 16))();
  return objc_msgSend(*(id *)(a1 + 40), "_decrementRotationAnimationCount");
}

uint64_t __60__UICollectionView__removeVisibleViews_fadeForBoundsChange___block_invoke_451(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[6], a1[4]);
}

uint64_t __88__UICollectionView__updateLayoutAttributesForExistingVisibleViewsFadingForBoundsChange___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_incrementRotationAnimationCount");
}

uint64_t __88__UICollectionView__updateLayoutAttributesForExistingVisibleViewsFadingForBoundsChange___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_decrementRotationAnimationCount");
}

uint64_t __88__UICollectionView__updateLayoutAttributesForExistingVisibleViewsFadingForBoundsChange___block_invoke_3(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (void)_prepareClonedViewsForTransitionLayout
{
  UICollectionViewData *collectionViewData;
  UICollectionViewData *v4;
  UICollectionViewData *v5;
  UICollectionViewData *v6;
  UICollectionViewData *v7;
  UICollectionViewData *v8;
  UICollectionViewData *v9;
  UICollectionViewData *v10;
  UICollectionViewData *v11;
  UICollectionViewData *v12;
  UICollectionViewData *v13;
  UICollectionViewData *v14;
  UICollectionViewData *v15;
  UICollectionViewData *v16;
  UICollectionViewData *v17;
  UICollectionViewData *v18;
  NSMutableDictionary *v19;
  NSMutableDictionary *clonedCellsDict;
  NSMutableDictionary *v21;
  NSMutableDictionary *clonedSupplementaryViewsDict;
  NSMutableDictionary *v23;
  NSMutableDictionary *clonedDecorationViewsDict;
  void (**v25)(void *, NSMutableDictionary *, _QWORD);
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  int *v34;
  id v35;
  void *v36;
  NSMutableDictionary *v37;
  void *v38;
  uint64_t v39;
  UICollectionViewData *v40;
  UICollectionViewData *v41;
  UICollectionViewData *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD aBlock[5];
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  collectionViewData = self->_collectionViewData;
  if (collectionViewData)
    collectionViewData = (UICollectionViewData *)collectionViewData->_clonedCellAttributes;
  v4 = collectionViewData;
  v5 = v4;
  v6 = (UICollectionViewData *)MEMORY[0x1E0C9AA60];
  if (v4)
    v7 = v4;
  else
    v7 = (UICollectionViewData *)MEMORY[0x1E0C9AA60];
  v8 = v7;

  v9 = self->_collectionViewData;
  if (v9)
    v9 = (UICollectionViewData *)v9->_clonedSupplementaryAttributes;
  v10 = v9;
  v11 = v10;
  if (v10)
    v12 = v10;
  else
    v12 = v6;
  v13 = v12;

  v14 = self->_collectionViewData;
  if (v14)
    v14 = (UICollectionViewData *)v14->_clonedDecorationAttributes;
  v15 = v14;
  v16 = v15;
  if (v15)
    v17 = v15;
  else
    v17 = v6;
  v18 = v17;

  if (!self->_clonedCellsDict)
  {
    v19 = (NSMutableDictionary *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", -[UICollectionViewData count](v8, "count"));
    clonedCellsDict = self->_clonedCellsDict;
    self->_clonedCellsDict = v19;

    v21 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    clonedSupplementaryViewsDict = self->_clonedSupplementaryViewsDict;
    self->_clonedSupplementaryViewsDict = v21;

    v23 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    clonedDecorationViewsDict = self->_clonedDecorationViewsDict;
    self->_clonedDecorationViewsDict = v23;

  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __58__UICollectionView__prepareClonedViewsForTransitionLayout__block_invoke;
  aBlock[3] = &unk_1E16BD0D0;
  aBlock[4] = self;
  v25 = (void (**)(void *, NSMutableDictionary *, _QWORD))_Block_copy(aBlock);
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v41 = v13;
  v42 = v8;
  -[UICollectionViewData arrayByAddingObjectsFromArray:](v8, "arrayByAddingObjectsFromArray:", v13);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = v18;
  objc_msgSend(v26, "arrayByAddingObjectsFromArray:", v18);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)v44;
    do
    {
      v31 = 0;
      do
      {
        if (*(_QWORD *)v44 != v30)
          objc_enumerationMutation(v27);
        v32 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * v31);
        if (v32)
        {
          v33 = *(_WORD *)(v32 + 288);
          if ((v33 & 1) != 0)
          {
            v25[2](v25, self->_clonedCellsDict, *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * v31));
            goto LABEL_32;
          }
          if ((v33 & 3) != 0)
            v34 = &OBJC_IVAR___UICollectionView__clonedDecorationViewsDict;
          else
            v34 = &OBJC_IVAR___UICollectionView__clonedSupplementaryViewsDict;
        }
        else
        {
          v34 = &OBJC_IVAR___UICollectionView__clonedDecorationViewsDict;
        }
        v35 = *(id *)((char *)&self->super.super.super.super.isa + *v34);
        -[UIBarButtonItemGroup _items]((id *)v32);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "objectForKeyedSubscript:", v36);
        v37 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();

        if (!v37)
        {
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v37 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();
          -[UIBarButtonItemGroup _items]((id *)v32);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "setObject:forKeyedSubscript:", v37, v38);

        }
        v25[2](v25, v37, v32);

LABEL_32:
        ++v31;
      }
      while (v29 != v31);
      v39 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
      v29 = v39;
    }
    while (v39);
  }

}

void __58__UICollectionView__prepareClonedViewsForTransitionLayout__block_invoke(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  UICollectionReusableView *v8;
  UICollectionReusableView *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  UICollectionReusableView *v14;
  void *v15;
  void *v16;
  id v17;
  UICollectionReusableView *v18;
  UICollectionReusableView *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  UICollectionReusableView *v28;
  _QWORD *v29;

  v24 = a2;
  v5 = a3;
  v6 = -[UICollectionViewLayoutAttributes __indexPath](v5);
  objc_msgSend(v24, "objectForKeyedSubscript:", v6);
  v7 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    v9 = [UICollectionReusableView alloc];
    v10 = *MEMORY[0x1E0C9D538];
    v11 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    objc_msgSend(v5, "size");
    v14 = -[UICollectionReusableView initWithFrame:](v9, "initWithFrame:", v10, v11, v12, v13);
    -[UIView setAutoresizingMask:](v14, "setAutoresizingMask:", 0);
    -[UICollectionReusableView setTranslatesAutoresizingMaskIntoConstraints:](v14, "setTranslatesAutoresizingMaskIntoConstraints:", 1);
    -[UIView _setHostsLayoutEngine:](v14, "_setHostsLayoutEngine:", 1);
    -[UICollectionReusableView _markAsDequeued](v14, "_markAsDequeued");
    objc_msgSend(v24, "setObject:forKeyedSubscript:", v14, v6);
    objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", v5, v14);
    objc_msgSend(v24, "objectForKeyedSubscript:", v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2648) |= 0x20000000uLL;
    objc_msgSend(v15, "snapshotViewAfterScreenUpdates:", 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "bounds");
    objc_msgSend(v16, "setBounds:");
    objc_msgSend(v16, "setAutoresizingMask:", 18);
    -[UIView addSubview:](v14, "addSubview:", v16);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2648) &= ~0x20000000uLL;
    v17 = *(id *)(*(_QWORD *)(a1 + 32) + 2072);
    v18 = v14;
    v19 = v18;
    if (!v18 || !v17)
      goto LABEL_10;
    v20 = -[UIView effectiveUserInterfaceLayoutDirection](v18, "effectiveUserInterfaceLayoutDirection");
    if (v20 == objc_msgSend(v17, "developmentLayoutDirection"))
    {
      if (!-[UIView _flipsHorizontalAxis](v19, "_flipsHorizontalAxis"))
      {
LABEL_10:

        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v25[2] = __58__UICollectionView__prepareClonedViewsForTransitionLayout__block_invoke_2;
        v25[3] = &unk_1E16B51E8;
        v22 = *(_QWORD *)(a1 + 32);
        v26 = v15;
        v27 = v22;
        v8 = v19;
        v28 = v8;
        v29 = v5;
        v23 = v15;
        +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v25);

        goto LABEL_11;
      }
      v21 = 0;
    }
    else
    {
      v21 = objc_msgSend(v17, "_wantsRightToLeftHorizontalMirroringIfNeeded");
    }
    -[UIView _setFlipsHorizontalAxis:](v19, "_setFlipsHorizontalAxis:", v21);
    goto LABEL_10;
  }
  v8 = (UICollectionReusableView *)v7;
  objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", v5, v7);
LABEL_11:

}

uint64_t __58__UICollectionView__prepareClonedViewsForTransitionLayout__block_invoke_2(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32))
    return objc_msgSend(*(id *)(a1 + 40), "insertSubview:belowSubview:", *(_QWORD *)(a1 + 48));
  else
    return objc_msgSend(*(id *)(a1 + 40), "_addControlledSubview:atZIndex:forced:initialAttributes:", *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 56), "zIndex"), 0, 0);
}

void __65__UICollectionView__updateFocusAfterLoadingVisibleCellsIfNeeded___block_invoke(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _UIFocusUpdateRequest *v4;

  v2 = -[_UICollectionViewFocusedItemState copyWithReusableView:](*(_QWORD **)(a1 + 40), 0);
  objc_msgSend(*(id *)(a1 + 32), "_setFocusedItemState:", v2);

  v4 = -[_UIFocusUpdateRequest initWithEnvironment:]([_UIFocusUpdateRequest alloc], "initWithEnvironment:", *(_QWORD *)(a1 + 32));
  -[_UIFocusUpdateRequest setAllowsFocusingCurrentItem:](v4, "setAllowsFocusingCurrentItem:", 1);
  -[_UIFocusUpdateRequest setScrollIfNecessary:](v4, "setScrollIfNecessary:", (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2648) >> 41) & 1);
  objc_msgSend(*(id *)(a1 + 32), "_focusSystem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_requestFocusUpdate:", v4);
  objc_msgSend(v3, "updateFocusIfNeeded");

}

uint64_t __78__UICollectionView__setUpCompletionHandlerForAnimationInterruptionIfNecessary__block_invoke(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return objc_msgSend(*(id *)(result + 32), "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
  return result;
}

- (void)_ensureViewsAreLoadedInRect:(CGRect)a3
{
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;

  p_collectionViewFlags = &self->_collectionViewFlags;
  *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x100000000uLL;
  self->_visibleBounds = a3;
  -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 0);
  -[UIView layoutBelowIfNeeded](self, "layoutBelowIfNeeded");
  *((_QWORD *)p_collectionViewFlags + 1) &= ~0x100000000uLL;
}

- (void)_setVisibleRectEdgeInsets:(UIEdgeInsets)a3
{
  self->_visibleRectInsets = a3;
}

- (UIEdgeInsets)_visibleRectEdgeInsets
{
  double top;
  double left;
  double bottom;
  double right;
  UIEdgeInsets result;

  top = self->_visibleRectInsets.top;
  left = self->_visibleRectInsets.left;
  bottom = self->_visibleRectInsets.bottom;
  right = self->_visibleRectInsets.right;
  result.right = right;
  result.bottom = bottom;
  result.left = left;
  result.top = top;
  return result;
}

- (BOOL)_allowsVisibleCellUpdatesDuringUpdateAnimations
{
  return HIBYTE(*((_QWORD *)&self->_collectionViewFlags + 1)) & 1;
}

- (BOOL)_allowsVisibleViewUpdatesDuringLayoutTransitions
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 57) & 1;
}

- (void)_setAllowsVisibleViewUpdatesDuringLayoutTransitions:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x200000000000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFDFFFFFFFFFFFFFFLL | v3;
}

uint64_t __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "insertSubview:belowSubview:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "_setLayoutAttributes:", *(_QWORD *)(a1 + 40));
  v2 = *(void **)(*(_QWORD *)(a1 + 48) + 2072);
  v3 = *(void **)(a1 + 32);
  v8 = v2;
  v4 = v3;
  if (v8)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = objc_msgSend(v4, "effectiveUserInterfaceLayoutDirection");
    if (v6 != objc_msgSend(v8, "developmentLayoutDirection"))
    {
      v7 = objc_msgSend(v8, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      goto LABEL_9;
    }
    if (objc_msgSend(v4, "_flipsHorizontalAxis"))
    {
      v7 = 0;
LABEL_9:
      objc_msgSend(v4, "_setFlipsHorizontalAxis:", v7);
    }
  }

}

uint64_t __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_5(uint64_t a1, void *a2)
{
  void (**v4)(id, uint64_t);
  _QWORD v5[4];
  id v6;
  id v7;
  char v8;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_6;
  v5[3] = &unk_1E16B4008;
  v8 = *(_BYTE *)(a1 + 48);
  v6 = *(id *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v4 = a2;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v5);
  v4[2](v4, 1);

}

uint64_t __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_6(uint64_t a1)
{
  int v2;
  void *v3;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(v3, "frame");
    return objc_msgSend(*(id *)(a1 + 32), "setFrame:");
  }
  else
  {
    objc_msgSend(v3, "center");
    return objc_msgSend(*(id *)(a1 + 32), "setCenter:");
  }
}

uint64_t __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_7(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __198__UICollectionView__viewAnimationsForView_startingLayoutAttributes_endingLayoutAttributes_startingLayout_endingLayout_animationSetup_animationCompletion_enableCustomAnimations_customAnimationsType___block_invoke_8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __50__UICollectionView__applyBlockToAllReusableViews___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;

  if (a3)
  {
    v4 = *(id *)(a3 + 24);
    if (v4)
    {
      v5 = v4;
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
      v4 = v5;
    }
  }
  else
  {
    v4 = 0;
  }

}

uint64_t __50__UICollectionView__applyBlockToAllReusableViews___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

- (void)setCollectionViewLayout:(UICollectionViewLayout *)layout animated:(BOOL)animated completion:(void *)completion
{
  _BOOL8 v6;
  id v9;
  UICollectionViewLayout *v10;
  id v11;
  void *v12;
  UICollectionViewLayout *v13;

  v6 = animated;
  v13 = layout;
  v9 = completion;
  v10 = v13;
  v11 = v9;
  if (!v13)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 6861, CFSTR("layout cannot be nil in setCollectionViewLayout:animated:completion:"));

    v10 = 0;
  }
  -[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:](self, "_setCollectionViewLayout:animated:isInteractive:completion:", v10, v6, 0, v11);

}

- (void)setCollectionViewLayout:(id)a3 withAnimator:(id)a4
{
  -[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:](self, "_setCollectionViewLayout:animated:isInteractive:completion:animator:", a3, 1, 0, 0, a4);
}

void __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke(id *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  id v12;

  v9 = a4;
  v12 = v9;
  if (a5 == 1)
  {
    objc_msgSend(a1[5], "objectForKeyedSubscript:", v9);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v11 = a1[5];
LABEL_8:
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, v12);
    }
LABEL_9:
    objc_msgSend(v10, "setObject:forKeyedSubscript:", a2, a3);

    goto LABEL_10;
  }
  if (a5)
  {
    objc_msgSend(a1[6], "objectForKeyedSubscript:", v9);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v11 = a1[6];
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  objc_msgSend(a1[4], "setObject:forKeyedSubscript:", a2, a3);
LABEL_10:

}

void __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_2(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  _WORD *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;

  v16 = a3;
  v8 = a4;
  objc_msgSend(a5, "_layoutAttributes");
  v9 = (_WORD *)objc_claimAutoreleasedReturnValue();
  if (!v9 || (v10 = v9[144], (v10 & 1) != 0))
  {

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "layoutAttributesForItemAtIndexPath:", v16);
    v12 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "layoutAttributesForItemAtIndexPath:", v16);
    v13 = objc_claimAutoreleasedReturnValue();
  }
  else
  {

    v11 = *(void **)(*(_QWORD *)(a1 + 32) + 2072);
    if ((v10 & 2) != 0)
    {
      objc_msgSend(v11, "layoutAttributesForDecorationViewOfKind:atIndexPath:", v8, v16);
      v12 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "layoutAttributesForDecorationViewOfKind:atIndexPath:", v8, v16);
    }
    else
    {
      objc_msgSend(v11, "layoutAttributesForSupplementaryViewOfKind:atIndexPath:", v8, v16);
      v12 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "layoutAttributesForSupplementaryViewOfKind:atIndexPath:", v8, v16);
    }
    v13 = objc_claimAutoreleasedReturnValue();
  }
  if (v12 | v13)
  {
    v14 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v15 = v14;
    if (v13)
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, CFSTR("newLayoutInfos"));
    if (v12)
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v12, CFSTR("previousLayoutInfos"));
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  }
}

void __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD v4[5];
  id v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_4;
  v4[3] = &unk_1E16BD1C0;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v4);

}

void __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  id v7;
  id *v8;
  __int16 v9;
  uint64_t v10;
  void *v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id *v18;
  _QWORD v19[5];
  id *v20;
  id v21;

  objc_msgSend(a3, "objectForKey:", CFSTR("previousLayoutInfos"));
  v18 = (id *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a3, "objectForKey:", CFSTR("newLayoutInfos"));
  v6 = objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    v7 = v18[1];
    v8 = v18;
  }
  else
  {
    -[UIBarButtonItemGroup _items]((id *)v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    v8 = (id *)(id)v6;
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 2472), (id)v6);
    if (!v8)
    {
      if (objc_msgSend(0, "isHidden"))
        objc_msgSend(0, "isHidden");
      v8 = 0;
      goto LABEL_20;
    }
  }
  v9 = *((_WORD *)v8 + 144);
  if ((v9 & 1) != 0)
  {
    -[_UICollectionViewSubviewManager visibleCellAtIndexPath:](*(id ***)(*(_QWORD *)(a1 + 32) + 2904), a2);
    v10 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (!v7)
      goto LABEL_12;
    if ((v9 & 3) != 0)
    {
      if ((v9 & 2) == 0)
        goto LABEL_12;
      -[_UICollectionViewSubviewManager visibleDecorationOfKind:atIndexPath:](*(uint64_t **)(*(_QWORD *)(a1 + 32) + 2904), (uint64_t)v7, a2);
      v10 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[_UICollectionViewSubviewManager visibleSupplementaryOfKind:atIndexPath:](*(uint64_t **)(*(_QWORD *)(a1 + 32) + 2904), (uint64_t)v7, a2);
      v10 = objc_claimAutoreleasedReturnValue();
    }
  }
  v11 = (void *)v10;
  if (v10)
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_5;
    v19[3] = &unk_1E16B47A8;
    v19[4] = *(_QWORD *)(a1 + 32);
    v8 = v8;
    v20 = v8;
    v12 = v11;
    v21 = v12;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v19);

    goto LABEL_30;
  }
LABEL_12:
  if ((objc_msgSend((id)v6, "isHidden") & 1) != 0)
  {
    v12 = 0;
    if ((objc_msgSend(v18, "isHidden") & 1) != 0 || !v6)
      goto LABEL_30;
  }
  else if (!v6)
  {
LABEL_20:
    v12 = 0;
    goto LABEL_30;
  }
  v13 = *(_WORD *)(v6 + 288);
  if ((v13 & 1) != 0)
  {
    v12 = (id)objc_msgSend(*(id *)(a1 + 32), "_createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:", a2, v8, 1);
    if (v12)
      -[_UICollectionViewSubviewManager setVisibleCell:atIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2904), (uint64_t)v12, a2);
  }
  else if ((v13 & 3) != 0)
  {
    if ((v13 & 2) == 0)
      goto LABEL_20;
    v12 = (id)objc_msgSend(*(id *)(a1 + 32), "_createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:", v7, a2, *(_QWORD *)(a1 + 40), v8, 1);
    if (v12)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2904);
      if (v15)
        -[_UICollectionViewSubviewCollection setView:forDecorationOfKind:atIndexPath:](*(_QWORD *)(v15 + 8), (uint64_t)v12, (uint64_t)v7, a2);
    }
  }
  else
  {
    v12 = (id)objc_msgSend(*(id *)(a1 + 32), "_createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:", v7, a2, *(_QWORD *)(a1 + 40), v8, 1);
    if (v12)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2904);
      if (v14)
        -[_UICollectionViewSubviewCollection setView:forSupplementaryOfKind:atIndexPath:](*(_QWORD *)(v14 + 8), (uint64_t)v12, (uint64_t)v7, a2);
    }
  }
LABEL_30:
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(void **)(v16 + 2472);
  *(_QWORD *)(v16 + 2472) = 0;

}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_5(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_6(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_7(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "willTransitionFromLayout:toLayout:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2072), *(_QWORD *)(a1 + 40));
}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_9(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  int v4;
  uint64_t v5;
  void *v6;
  id *v7;
  void *v8;
  void *v9;
  id *v10;
  id v11;
  void *v12;
  id *v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t result;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[5];
  id v27;
  _QWORD v28[4];
  id v29;
  _QWORD v30[4];
  id v31;
  _QWORD aBlock[5];
  id v33;
  char v34;

  v2 = *(_QWORD **)(a1 + 32);
  if ((v2[330] & 0x2000) != 0)
  {
    objc_msgSend(v2, "_delegateProxy");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "_collectionView:shouldApplyTransitionContentOffset:contentSize:", *(_QWORD *)(a1 + 32), *(double *)(a1 + 104), *(double *)(a1 + 112), *(double *)(a1 + 120), *(double *)(a1 + 128));

    if (!v4)
      goto LABEL_5;
    v2 = *(_QWORD **)(a1 + 32);
  }
  objc_msgSend(v2, "setContentOffset:", *(double *)(a1 + 104), *(double *)(a1 + 112));
  objc_msgSend(*(id *)(a1 + 32), "setContentSize:", *(double *)(a1 + 120), *(double *)(a1 + 128));
LABEL_5:
  if (*(_BYTE *)(a1 + 136))
    objc_msgSend(*(id *)(a1 + 32), "_updateDefaultLayoutMargins");
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "_supportsAdvancedTransitionAnimations")
    && objc_msgSend(*(id *)(a1 + 40), "_supportsAdvancedTransitionAnimations"))
  {
    v5 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_10;
    aBlock[3] = &unk_1E16BD260;
    v6 = *(void **)(a1 + 40);
    aBlock[4] = *(_QWORD *)(a1 + 32);
    v34 = *(_BYTE *)(a1 + 137);
    v7 = &v33;
    v33 = v6;
    v8 = _Block_copy(aBlock);
    (*((void (**)(void *, _QWORD, _QWORD, _QWORD))v8 + 2))(v8, *(_QWORD *)(a1 + 48), 0, 0);
    v9 = *(void **)(a1 + 56);
    v30[0] = v5;
    v30[1] = 3221225472;
    v30[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_12;
    v30[3] = &unk_1E16BDCE8;
    v10 = &v31;
    v11 = v8;
    v31 = v11;
    objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v30);
    v12 = *(void **)(a1 + 64);
    v28[0] = v5;
    v28[1] = 3221225472;
    v28[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_13;
    v28[3] = &unk_1E16BDCE8;
    v13 = &v29;
    v29 = v11;
    v14 = v11;
    v15 = v28;
  }
  else
  {
    v16 = MEMORY[0x1E0C809B0];
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_14;
    v26[3] = &unk_1E16BD2B0;
    v17 = *(void **)(a1 + 40);
    v26[4] = *(_QWORD *)(a1 + 32);
    v7 = &v27;
    v27 = v17;
    v18 = _Block_copy(v26);
    (*((void (**)(void *, _QWORD, _QWORD, _QWORD))v18 + 2))(v18, *(_QWORD *)(a1 + 48), 0, 0);
    v19 = *(void **)(a1 + 56);
    v24[0] = v16;
    v24[1] = 3221225472;
    v24[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_16;
    v24[3] = &unk_1E16BDCE8;
    v10 = &v25;
    v20 = v18;
    v25 = v20;
    objc_msgSend(v19, "enumerateKeysAndObjectsUsingBlock:", v24);
    v12 = *(void **)(a1 + 64);
    v22[0] = v16;
    v22[1] = 3221225472;
    v22[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_17;
    v22[3] = &unk_1E16BDCE8;
    v13 = &v23;
    v23 = v20;
    v14 = v20;
    v15 = v22;
  }
  objc_msgSend(v12, "enumerateKeysAndObjectsUsingBlock:", v15);

  objc_msgSend(*(id *)(a1 + 72), "setAlpha:", 0.0);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 2072), *(id *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2880), "cleanupSectionFocusGuides");
  -[_UICollectionViewOrthogonalScrollerSectionController reconfigureScrollViewsForUpdate:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2872), 0);
  objc_msgSend(*(id *)(a1 + 32), "_reconfigureSectionContainersForUpdate:", 0);
  if (*(_BYTE *)(a1 + 138))
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 2192));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 2192), *(id *)(a1 + 80));
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "_finalizeLayoutTransition");
    return objc_msgSend(*(id *)(a1 + 88), "_finalizeLayoutTransition");
  }
  return result;
}

void __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_10(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  uint64_t v13;
  char v14;

  v7 = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_11;
  v10[3] = &unk_1E16BD238;
  v13 = a3;
  v8 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v7;
  v14 = *(_BYTE *)(a1 + 48);
  v12 = v8;
  v9 = v7;
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v10);

}

void __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_11(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 56);
  if (v5 == 2)
  {
    -[_UICollectionViewSubviewManager visibleDecorationOfKind:atIndexPath:](*(uint64_t **)(*(_QWORD *)(a1 + 32) + 2904), *(_QWORD *)(a1 + 40), a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else if (v5 == 1)
  {
    -[_UICollectionViewSubviewManager visibleSupplementaryOfKind:atIndexPath:](*(uint64_t **)(*(_QWORD *)(a1 + 32) + 2904), *(_QWORD *)(a1 + 40), a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v5)
      return;
    -[_UICollectionViewSubviewManager visibleCellAtIndexPath:](*(id ***)(*(_QWORD *)(a1 + 32) + 2904), a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "_addUpdateAnimation");
    objc_msgSend(a3, "setObject:forKey:", v7, CFSTR("view"));
    objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("previousLayoutInfos"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("newLayoutInfos"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v9)
    {
      v9 = (void *)objc_msgSend(v8, "copy");
      objc_msgSend(v9, "setAlpha:", 0.0);
    }
    if (*(_BYTE *)(a1 + 64))
    {
      LOBYTE(v15) = 1;
      objc_msgSend(*(id *)(a1 + 32), "_viewAnimationsForView:startingLayoutAttributes:endingLayoutAttributes:startingLayout:endingLayout:animationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:", v7, v8, v9, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2072), *(_QWORD *)(a1 + 48), 0, 0, v15, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v17;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v17 != v13)
              objc_enumerationMutation(v10);
            objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * i), "start");
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        }
        while (v12);
      }

    }
    else if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", v9, v7);
    }

  }
}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_12(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_13(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_14(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  uint64_t v13;

  v7 = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_15;
  v10[3] = &unk_1E16BD288;
  v13 = a3;
  v8 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v7;
  v12 = v8;
  v9 = v7;
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v10);

}

void __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_15(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD);
  id v11;

  v5 = *(_QWORD *)(a1 + 56);
  if (v5 == 2)
  {
    -[_UICollectionViewSubviewManager visibleDecorationOfKind:atIndexPath:](*(uint64_t **)(*(_QWORD *)(a1 + 32) + 2904), *(_QWORD *)(a1 + 40), a2);
    v6 = objc_claimAutoreleasedReturnValue();
    if (!v6)
      return;
  }
  else if (v5 == 1)
  {
    -[_UICollectionViewSubviewManager visibleSupplementaryOfKind:atIndexPath:](*(uint64_t **)(*(_QWORD *)(a1 + 32) + 2904), *(_QWORD *)(a1 + 40), a2);
    v6 = objc_claimAutoreleasedReturnValue();
    if (!v6)
      return;
  }
  else
  {
    if (v5)
      return;
    -[_UICollectionViewSubviewManager visibleCellAtIndexPath:](*(id ***)(*(_QWORD *)(a1 + 32) + 2904), a2);
    v6 = objc_claimAutoreleasedReturnValue();
    if (!v6)
      return;
  }
  v11 = (id)v6;
  objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("previousLayoutInfos"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("newLayoutInfos"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v8 = (void *)objc_msgSend(v7, "copy");
    objc_msgSend(v8, "setAlpha:", 0.0);
  }
  objc_msgSend(*(id *)(a1 + 48), "_animationForReusableView:toLayoutAttributes:type:", v11, v8, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void (**)(_QWORD, _QWORD))objc_msgSend(v9, "copy");

  if (v10)
  {
    objc_msgSend(v11, "_setBaseLayoutAttributes:", v8);
    v10[2](v10, 0);
    objc_msgSend(v11, "applyLayoutAttributes:", v8);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", v8, v11);
  }
  objc_msgSend(v11, "_addUpdateAnimation");
  objc_msgSend(a3, "setObject:forKey:", v11, CFSTR("view"));

}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_16(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_17(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_18(id *a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t k;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t m;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t n;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  void (**v38)(id, _QWORD);
  id v39;
  void (**v40)(id, uint64_t);
  id *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[4];
  id v63;
  id v64;
  _BYTE v65[128];
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v62[0] = MEMORY[0x1E0C809B0];
  v62[1] = 3221225472;
  v62[2] = __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_19;
  v62[3] = &unk_1E16BD210;
  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[4];
  v63 = v3;
  v64 = v4;
  objc_msgSend(v2, "_applyBlockToAllReusableViews:", v62);
  -[_UICollectionViewOrthogonalScrollerSectionController processQueuedScrollViewRemovals](*((_QWORD *)a1[4] + 359));
  objc_msgSend(a1[4], "_processQueuedSectionContainerRemovals");
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  objc_msgSend(a1[6], "objectEnumerator");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v58, v69, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v59;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v59 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v58 + 1) + 8 * i), "objectForKeyedSubscript:", CFSTR("view"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "_clearUpdateAnimation");

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v58, v69, 16);
    }
    while (v7);
  }

  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v41 = a1;
  objc_msgSend(a1[7], "objectEnumerator");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v54, v68, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v55;
    do
    {
      for (j = 0; j != v13; ++j)
      {
        if (*(_QWORD *)v55 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * j);
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        objc_msgSend(v16, "objectEnumerator");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v50, v67, 16);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD *)v51;
          do
          {
            for (k = 0; k != v19; ++k)
            {
              if (*(_QWORD *)v51 != v20)
                objc_enumerationMutation(v17);
              objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * k), "objectForKeyedSubscript:", CFSTR("view"));
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "_clearUpdateAnimation");

            }
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v50, v67, 16);
          }
          while (v19);
        }

      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v54, v68, 16);
    }
    while (v13);
  }

  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  objc_msgSend(v41[8], "objectEnumerator");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v46, v66, 16);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)v47;
    do
    {
      for (m = 0; m != v25; ++m)
      {
        if (*(_QWORD *)v47 != v26)
          objc_enumerationMutation(v23);
        v28 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * m);
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        objc_msgSend(v28, "objectEnumerator");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v42, v65, 16);
        if (v30)
        {
          v31 = v30;
          v32 = *(_QWORD *)v43;
          do
          {
            for (n = 0; n != v31; ++n)
            {
              if (*(_QWORD *)v43 != v32)
                objc_enumerationMutation(v29);
              objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * n), "objectForKeyedSubscript:", CFSTR("view"));
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "_clearUpdateAnimation");

            }
            v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v42, v65, 16);
          }
          while (v31);
        }

      }
      v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v46, v66, 16);
    }
    while (v25);
  }

  *((_QWORD *)v41[4] + 331) &= ~0x4000000uLL;
  objc_msgSend(v41[4], "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
  v35 = v41[4];
  v36 = v35[401];
  if (v36)
  {
    v37 = (*(uint64_t (**)(_QWORD))(v36 + 16))(v35[401]);
    objc_msgSend(v41[4], "_setNavigationCompletion:", 0);
    if ((v37 & 1) == 0)
    {
      objc_storeStrong((id *)v41[4] + 259, v41[5]);
      objc_storeStrong((id *)v41[4] + 274, *(id *)(*((_QWORD *)v41[12] + 1) + 40));
      objc_msgSend(*((id *)v41[4] + 259), "_didFinishLayoutTransitionAnimations:", 0);
      v38 = (void (**)(id, _QWORD))v41[11];
      if (v38)
        v38[2](v38, 0);
      objc_msgSend(v41[4], "layoutIfNeeded");
      goto LABEL_48;
    }
  }
  else
  {
    objc_msgSend(v35, "_setNavigationCompletion:", 0);
  }
  v39 = v41[5];
  if (v39 != *((id *)v41[4] + 259))
  {
    objc_msgSend(v39, "_setCollectionView:", 0);
    v39 = (id)*((_QWORD *)v41[4] + 259);
  }
  objc_msgSend(v39, "_didFinishLayoutTransitionAnimations:", 1);
  v40 = (void (**)(id, uint64_t))v41[11];
  if (v40)
    v40[2](v40, 1);
  if (*((_BYTE *)v41 + 104))
    objc_msgSend(*((id *)v41[4] + 259), "_invalidateLayoutUsingContext:", v41[9]);
LABEL_48:
  objc_msgSend(v41[10], "removeFromSuperview");

}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_19(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didTransitionFromLayout:toLayout:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 2072));
}

uint64_t __88__UICollectionView__setCollectionViewLayout_animated_isInteractive_completion_animator___block_invoke_20(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2 == 0);
}

- (UICollectionViewTransitionLayout)startInteractiveTransitionToCollectionViewLayout:(UICollectionViewLayout *)layout completion:(UICollectionViewLayoutInteractiveTransitionCompletion)completion
{
  UICollectionViewLayout *v8;
  UICollectionViewLayoutInteractiveTransitionCompletion v9;
  void *v10;
  void *v11;
  id interactiveCompletionHandler;
  UICollectionViewData *v13;
  UICollectionViewData *collectionViewData;
  UICollectionViewTransitionLayout *v15;
  void *v16;
  void *v17;
  void *v18;
  UICollectionViewTransitionLayout *v19;
  void *v21;

  v8 = layout;
  v9 = completion;
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 7489, CFSTR("layout cannot be nil in startInteractiveTransitionToCollectionViewLayout:"));

  }
  if (self->_isInInteractiveTransition)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 7492, CFSTR("the collection is already in the middle of an interactive transition"));

  }
  v11 = (void *)objc_msgSend(v9, "copy");
  interactiveCompletionHandler = self->_interactiveCompletionHandler;
  self->_interactiveCompletionHandler = v11;

  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x80000000) != 0)
  {
    -[UICollectionView _delegateActual](self, "_delegateActual");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "collectionView:transitionLayoutForOldLayout:newLayout:", self, v18, v8);
      v15 = (UICollectionViewTransitionLayout *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v19 = [UICollectionViewTransitionLayout alloc];
      -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = -[UICollectionViewTransitionLayout initWithCurrentLayout:nextLayout:](v19, "initWithCurrentLayout:nextLayout:", v17, v8);
    }

    -[UICollectionView setCollectionViewLayout:](self, "setCollectionViewLayout:", v15);
    self->_isInInteractiveTransition = 1;
    self->_shouldAccumulateTrackedLayoutValues = 1;

  }
  else
  {
    -[UICollectionViewLayout _setCollectionView:](self->_layout, "_setCollectionView:", 0);
    objc_storeStrong((id *)&self->_layout, layout);
    -[UICollectionViewLayout _setCollectionView:](self->_layout, "_setCollectionView:", self);
    v13 = (UICollectionViewData *)-[UICollectionViewData initWithCollectionView:layout:]([UICollectionViewData alloc], self, self->_layout);
    collectionViewData = self->_collectionViewData;
    self->_collectionViewData = v13;

    -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
    v15 = 0;
  }

  return v15;
}

- (void)_updateTransitionWithProgress:(double)a3
{
  id v5;

  -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[UICollectionViewData invalidate:]((uint64_t)self->_collectionViewData, 1);
  objc_msgSend(v5, "setTransitionProgress:", a3);
  -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);

}

- (void)_cleanUpAfterInteractiveTransitionDidFinish:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  uint64_t v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  void (**interactiveCompletionHandler)(id, uint64_t, _BOOL8);
  id v22;
  NSMutableArray *trackedValuesKeys;
  NSMutableDictionary *interactiveTransitionValueTrackingDict;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t j;
  NSMutableDictionary *clonedCellsDict;
  NSMutableDictionary *clonedSupplementaryViewsDict;
  NSMutableDictionary *clonedDecorationViewsDict;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];
  uint64_t v49;

  v3 = a3;
  v49 = *MEMORY[0x1E0C80C00];
  -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "currentLayout");
  v6 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nextLayout");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_oldVisibleBounds");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  objc_msgSend(v5, "_newVisibleBounds");
  if (v3)
  {
    v9 = v16;
    v11 = v17;
    v13 = v18;
    v15 = v19;
  }
  v38 = (void *)v6;
  if (v3)
    v20 = v7;
  else
    v20 = (void *)v6;
  -[UICollectionView setCollectionViewLayout:](self, "setCollectionViewLayout:", v20);
  -[UICollectionView setBounds:](self, "setBounds:", v9, v11, v13, v15);
  *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x4000000uLL;
  -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](self, "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
  interactiveCompletionHandler = (void (**)(id, uint64_t, _BOOL8))self->_interactiveCompletionHandler;
  if (interactiveCompletionHandler)
  {
    interactiveCompletionHandler[2](interactiveCompletionHandler, 1, v3);
    v22 = self->_interactiveCompletionHandler;
    self->_interactiveCompletionHandler = 0;

  }
  trackedValuesKeys = self->_trackedValuesKeys;
  self->_trackedValuesKeys = 0;

  interactiveTransitionValueTrackingDict = self->_interactiveTransitionValueTrackingDict;
  self->_interactiveTransitionValueTrackingDict = 0;

  self->_shouldAccumulateTrackedLayoutValues = 1;
  __64__UICollectionView__cleanUpAfterInteractiveTransitionDidFinish___block_invoke(self->_clonedCellsDict);
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  -[NSMutableDictionary objectEnumerator](self->_clonedSupplementaryViewsDict, "objectEnumerator");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v27; ++i)
      {
        if (*(_QWORD *)v44 != v28)
          objc_enumerationMutation(v25);
        __64__UICollectionView__cleanUpAfterInteractiveTransitionDidFinish___block_invoke(*(void **)(*((_QWORD *)&v43 + 1) + 8 * i));
      }
      v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
    }
    while (v27);
  }

  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  -[NSMutableDictionary objectEnumerator](self->_clonedDecorationViewsDict, "objectEnumerator");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v40;
    do
    {
      for (j = 0; j != v32; ++j)
      {
        if (*(_QWORD *)v40 != v33)
          objc_enumerationMutation(v30);
        __64__UICollectionView__cleanUpAfterInteractiveTransitionDidFinish___block_invoke(*(void **)(*((_QWORD *)&v39 + 1) + 8 * j));
      }
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
    }
    while (v32);
  }

  clonedCellsDict = self->_clonedCellsDict;
  self->_clonedCellsDict = 0;

  clonedSupplementaryViewsDict = self->_clonedSupplementaryViewsDict;
  self->_clonedSupplementaryViewsDict = 0;

  clonedDecorationViewsDict = self->_clonedDecorationViewsDict;
  self->_clonedDecorationViewsDict = 0;

}

void __64__UICollectionView__cleanUpAfterInteractiveTransitionDidFinish___block_invoke(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  objc_msgSend(a1, "objectEnumerator", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "removeFromSuperview");
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

- (void)_finishInteractiveTransitionShouldFinish:(BOOL)a3 finalAnimation:(BOOL)a4
{
  _BOOL8 v5;
  double currentInteractiveTransitionTimeStamp;
  double previousInteractiveTransitionTimeStamp;
  double v9;
  uint64_t v10;
  double v11;
  _UIDynamicValueAnimation *v12;
  void *v13;
  void *v14;
  _UIDynamicAnimationGroup *v15;
  _UIDynamicAnimationGroup *endInteractiveTransitionAnimationGroup;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[5];
  BOOL v32;
  _QWORD aBlock[5];
  _BYTE v34[128];
  uint64_t v35;

  v5 = a3;
  v35 = *MEMORY[0x1E0C80C00];
  if (!self->_isInInteractiveTransition)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 7585, CFSTR("the collection was not prepared for an interactive transition. see startInteractiveTransitionToCollectionViewLayout:completion:"));

  }
  self->_shouldAccumulateTrackedLayoutValues = 0;
  currentInteractiveTransitionTimeStamp = self->_currentInteractiveTransitionTimeStamp;
  previousInteractiveTransitionTimeStamp = self->_previousInteractiveTransitionTimeStamp;
  if (currentInteractiveTransitionTimeStamp == previousInteractiveTransitionTimeStamp)
  {
    v9 = 0.0;
    if (a4)
      goto LABEL_5;
LABEL_17:
    self->_isInInteractiveTransition = 0;
    -[UICollectionView _cleanUpAfterInteractiveTransitionDidFinish:](self, "_cleanUpAfterInteractiveTransitionDidFinish:", v5);
    return;
  }
  v9 = (self->_currentInteractiveTransitionProgress - self->_previousInteractiveTransitionProgress)
     / (currentInteractiveTransitionTimeStamp - previousInteractiveTransitionTimeStamp);
  if (!a4)
    goto LABEL_17;
LABEL_5:
  v10 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __76__UICollectionView__finishInteractiveTransitionShouldFinish_finalAnimation___block_invoke;
  aBlock[3] = &unk_1E16BDB68;
  aBlock[4] = self;
  v26 = _Block_copy(aBlock);
  v31[0] = v10;
  v31[1] = 3221225472;
  v31[2] = __76__UICollectionView__finishInteractiveTransitionShouldFinish_finalAnimation___block_invoke_2;
  v31[3] = &unk_1E16B7F38;
  v31[4] = self;
  v32 = v5;
  v25 = _Block_copy(v31);
  if (v5)
    v11 = 1.0;
  else
    v11 = 0.0;
  v12 = -[_UIDynamicValueAnimation initWithValue:velocity:unitSize:]([_UIDynamicValueAnimation alloc], "initWithValue:velocity:unitSize:", self->_currentInteractiveTransitionProgress, v9, 0.004);
  +[_UIDynamicAnimationActiveValue upperBoundary:ofType:](_UIDynamicAnimationActiveValue, "upperBoundary:ofType:", 1, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UIDynamicAnimationActiveValue lowerBoundary:ofType:](_UIDynamicAnimationActiveValue, "lowerBoundary:ofType:", 1, v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIDynamicValueAnimation addActiveValue:](v12, "addActiveValue:", v13);
  -[_UIDynamicValueAnimation addActiveValue:](v12, "addActiveValue:", v14);
  v15 = objc_alloc_init(_UIDynamicAnimationGroup);
  endInteractiveTransitionAnimationGroup = self->_endInteractiveTransitionAnimationGroup;
  self->_endInteractiveTransitionAnimationGroup = v15;

  -[_UIDynamicAnimation _setUsesNSTimer:](self->_endInteractiveTransitionAnimationGroup, "_setUsesNSTimer:", 1);
  -[_UIDynamicAnimationGroup addAnimation:](self->_endInteractiveTransitionAnimationGroup, "addAnimation:", v12);
  -[UICollectionView _dynamicAnimationsForTrackValues](self, "_dynamicAnimationsForTrackValues");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v28 != v20)
          objc_enumerationMutation(v17);
        -[_UIDynamicAnimationGroup addAnimation:](self->_endInteractiveTransitionAnimationGroup, "addAnimation:", *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i), v25);
      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
    }
    while (v19);
  }
  v22 = v25;
  -[_UIDynamicAnimationGroup runWithGroupApplier:completion:](self->_endInteractiveTransitionAnimationGroup, "runWithGroupApplier:completion:", v26, v25, v25);
  self->_isInInteractiveTransition = 0;

}

void __76__UICollectionView__finishInteractiveTransitionShouldFinish_finalAnimation___block_invoke(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  if ((a2 - 1) <= 1)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2536), "animations");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectAtIndex:", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "value");
    v6 = v5;

    objc_msgSend(*(id *)(a1 + 32), "_updateTransitionWithProgress:", v6);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2536), "animations");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "count");

    if (v8 >= 2)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2536), "animations");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (id)objc_msgSend(v9, "mutableCopy");

      objc_msgSend(v10, "removeObjectAtIndex:", 0);
      objc_msgSend(*(id *)(a1 + 32), "_updateTrackedLayoutValuesWith:", v10);

    }
  }
}

void __76__UICollectionView__finishInteractiveTransitionShouldFinish_finalAnimation___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "_cleanUpAfterInteractiveTransitionDidFinish:", *(unsigned __int8 *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 2536);
  *(_QWORD *)(v2 + 2536) = 0;

}

- (void)_finishInteractiveTransitionWithFinalAnimation:(BOOL)a3
{
  -[UICollectionView _finishInteractiveTransitionShouldFinish:finalAnimation:](self, "_finishInteractiveTransitionShouldFinish:finalAnimation:", 1, a3);
}

- (void)_cancelInteractiveTransitionWithFinalAnimation:(BOOL)a3
{
  -[UICollectionView _finishInteractiveTransitionShouldFinish:finalAnimation:](self, "_finishInteractiveTransitionShouldFinish:finalAnimation:", 0, a3);
}

- (void)finishInteractiveTransition
{
  -[UICollectionView _finishInteractiveTransitionShouldFinish:finalAnimation:](self, "_finishInteractiveTransitionShouldFinish:finalAnimation:", 1, 1);
}

- (void)cancelInteractiveTransition
{
  -[UICollectionView _finishInteractiveTransitionShouldFinish:finalAnimation:](self, "_finishInteractiveTransitionShouldFinish:finalAnimation:", 0, 1);
}

- (id)_pivotForTransitionFromLayout:(id)a3 toLayout:(id)a4
{
  void *v4;
  void *v6;

  if ((*(_QWORD *)&self->_collectionViewFlags & 0x1000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy", a3, a4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_indexPathOfReferenceItemForLayoutTransitionInCollectionView:", self);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

- (UICollectionViewLayoutAttributes)layoutAttributesForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath
{
  NSString *v6;
  void *v7;
  void *v8;

  v6 = kind;
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  -[UICollectionViewData layoutAttributesForSupplementaryElementOfKind:atIndexPath:]((uint64_t)self->_collectionViewData, (uint64_t)v6, indexPath);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)objc_msgSend(v7, "copy");
  return (UICollectionViewLayoutAttributes *)v8;
}

void __45__UICollectionView__indexPathForView_ofType___block_invoke_3(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v8;
  id v9;

  v8 = a2;
  if (*(_QWORD *)(a1 + 32) == a3)
  {
    v9 = v8;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    v8 = v9;
    *a4 = 1;
  }

}

void __45__UICollectionView__indexPathForView_ofType___block_invoke_4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v8;
  id v9;

  v8 = a2;
  if (*(_QWORD *)(a1 + 32) == a3)
  {
    v9 = v8;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    v8 = v9;
    *a4 = 1;
  }

}

- (id)indexPathForSupplementaryView:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a3;
  objc_msgSend(v4, "_layoutAttributes");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v5)
  {
    v7 = *(_WORD *)(v5 + 288);
    v8 = 1;
    if ((v7 & 2) != 0)
      v8 = 2;
    if ((v7 & 1) != 0)
      v9 = 0;
    else
      v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  -[UICollectionView _indexPathForView:ofType:](self, "_indexPathForView:ofType:", v4, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[UICollectionView _translatePresentationIndexPathToDataSourceIndexPathAsNeeded:](self, "_translatePresentationIndexPathToDataSourceIndexPathAsNeeded:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v11 = 0;
  }
  return v11;
}

- (id)_indexPathForSupplementaryView:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v4 = a3;
  objc_msgSend(v4, "_layoutAttributes");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v5)
  {
    v7 = *(_WORD *)(v5 + 288);
    v8 = 1;
    if ((v7 & 2) != 0)
      v8 = 2;
    if ((v7 & 1) != 0)
      v9 = 0;
    else
      v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  -[UICollectionView _indexPathForView:ofType:](self, "_indexPathForView:ofType:", v4, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (id)_indexPathsForPreparedItems
{
  void *v3;
  char v4;
  id v5;
  void (**v6)(void *, id, _QWORD, char *);
  _UICollectionViewSubviewManager *subviewManager;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  NSIndexPath *v13;
  void *v14;
  char v16;
  _QWORD aBlock[5];
  id v18;
  char v19;

  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  v3 = (void *)objc_opt_new();
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
    v4 = !-[UICollectionView _isOperatingWithPresentationValues](self, "_isOperatingWithPresentationValues");
  else
    v4 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __47__UICollectionView__indexPathsForPreparedItems__block_invoke;
  aBlock[3] = &unk_1E16BD378;
  v19 = v4;
  aBlock[4] = self;
  v5 = v3;
  v18 = v5;
  v6 = (void (**)(void *, id, _QWORD, char *))_Block_copy(aBlock);
  subviewManager = self->_subviewManager;
  if (subviewManager)
    -[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v6);
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](self->_prefetchCacheItems, "enumerateKeysAndObjectsUsingBlock:", v6);
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    v10 = *(id *)(v8 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v9 + 32);

      if (!v11)
      {
        v16 = 0;
        v12 = *(id *)(v9 + 16);
        v6[2](v6, v12, 0, &v16);

      }
    }
  }
  v13 = self->_firstResponderIndexPath;
  if (v13 && self->_firstResponderView && self->_firstResponderViewType == 1)
  {
    v16 = 0;
    v6[2](v6, v13, 0, &v16);
  }
  objc_msgSend(v5, "array");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void __47__UICollectionView__indexPathsForPreparedItems__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  v3 = a2;
  v4 = v3;
  if (!*(_BYTE *)(a1 + 48))
  {
    v7 = v3;
    objc_msgSend(*(id *)(a1 + 32), "_indexPathBeforeShadowUpdatesForIndexPath:", v3);
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v3)
  {
LABEL_3:
    v6 = v4;
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);
    v4 = v6;
  }
LABEL_4:

}

- (id)_visibleDecorationViewsOfKind:(id)a3
{
  return -[UICollectionView _visibleSupplementaryViewsOfKind:isDecorationView:](self, "_visibleSupplementaryViewsOfKind:isDecorationView:", a3, 1);
}

- (id)_indexPathsForVisibleDecorationViewsOfKind:(id)a3
{
  return -[UICollectionView _indexPathsForVisibleSupplementaryViewsOfKind:isDecorationView:](self, "_indexPathsForVisibleSupplementaryViewsOfKind:isDecorationView:", a3, 1);
}

- (BOOL)_validateScrollingTargetIndexPath:(id)a3 raisingExceptionIfNecessary:(BOOL)a4
{
  _BOOL4 v4;
  id v7;
  uint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  UICollectionView *v39;
  __int16 v40;
  UICollectionView *v41;
  uint64_t v42;

  v4 = a4;
  v42 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = objc_msgSend(v7, "section");
  if (v8 >= -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData))
  {
    if (!v4)
    {
LABEL_26:
      v9 = 0;
      goto LABEL_27;
    }
    _UIIsPrivateMainBundle();
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 8091, CFSTR("Attempted to scroll the collection view to an out-of-bounds section (%ld) when there are only %ld sections. Collection view: %@."), objc_msgSend(v7, "section"), -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData), self, v33);
LABEL_13:

      goto LABEL_26;
    }
    if (!os_variant_has_internal_diagnostics())
    {
      v13 = qword_1EDDC6610;
      if (!qword_1EDDC6610)
      {
        v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v13, (unint64_t *)&qword_1EDDC6610);
      }
      v14 = *(NSObject **)(v13 + 8);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
      v15 = v14;
      v16 = objc_msgSend(v7, "section");
      v17 = -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData);
      *(_DWORD *)buf = 134218498;
      v35 = v16;
      v36 = 2048;
      v37 = v17;
      v38 = 2112;
      v39 = self;
      v18 = "Attempted to scroll the collection view to an out-of-bounds section (%ld) when there are only %ld sections. "
            "Collection view: %@.  This will become an assert in a future version.";
      v19 = v15;
      v20 = 32;
LABEL_24:
      _os_log_impl(&dword_185066000, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
LABEL_25:

      goto LABEL_26;
    }
    __UIFaultDebugAssertLog();
    v15 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      goto LABEL_25;
    v26 = objc_msgSend(v7, "section");
    v27 = -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData);
    *(_DWORD *)buf = 134218498;
    v35 = v26;
    v36 = 2048;
    v37 = v27;
    v38 = 2112;
    v39 = self;
    v28 = "Attempted to scroll the collection view to an out-of-bounds section (%ld) when there are only %ld sections. Co"
          "llection view: %@.  This will become an assert in a future version.";
    v29 = v15;
    v30 = 32;
LABEL_32:
    _os_log_fault_impl(&dword_185066000, v29, OS_LOG_TYPE_FAULT, v28, buf, v30);
    goto LABEL_25;
  }
  if (objc_msgSend(v7, "item") == 0x7FFFFFFFFFFFFFFFLL)
  {
    v9 = 1;
    goto LABEL_27;
  }
  v11 = objc_msgSend(v7, "item");
  v9 = v11 < -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, objc_msgSend(v7, "section"));
  if (!v9 && v4)
  {
    _UIIsPrivateMainBundle();
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 8104, CFSTR("Attempted to scroll the collection view to an out-of-bounds item (%ld) when there are only %ld items in section %ld. Collection view: %@."), objc_msgSend(v7, "item"), -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, objc_msgSend(v7, "section")), objc_msgSend(v7, "section"), self);
      goto LABEL_13;
    }
    if (!os_variant_has_internal_diagnostics())
    {
      v21 = qword_1EDDC6618;
      if (!qword_1EDDC6618)
      {
        v21 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v21, (unint64_t *)&qword_1EDDC6618);
      }
      v22 = *(NSObject **)(v21 + 8);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
      v15 = v22;
      v23 = objc_msgSend(v7, "item");
      v24 = -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, objc_msgSend(v7, "section"));
      *(_DWORD *)buf = 134218754;
      v35 = v23;
      v36 = 2048;
      v37 = v24;
      v38 = 2048;
      v39 = (UICollectionView *)objc_msgSend(v7, "section");
      v40 = 2112;
      v41 = self;
      v18 = "Attempted to scroll the collection view to an out-of-bounds item (%ld) when there are only %ld items in sect"
            "ion %ld. Collection view: %@.  This will become an assert in a future version.";
      v19 = v15;
      v20 = 42;
      goto LABEL_24;
    }
    __UIFaultDebugAssertLog();
    v15 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      goto LABEL_25;
    v31 = objc_msgSend(v7, "item");
    v32 = -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, objc_msgSend(v7, "section"));
    *(_DWORD *)buf = 134218754;
    v35 = v31;
    v36 = 2048;
    v37 = v32;
    v38 = 2048;
    v39 = (UICollectionView *)objc_msgSend(v7, "section");
    v40 = 2112;
    v41 = self;
    v28 = "Attempted to scroll the collection view to an out-of-bounds item (%ld) when there are only %ld items in sectio"
          "n %ld. Collection view: %@.  This will become an assert in a future version.";
    v29 = v15;
    v30 = 42;
    goto LABEL_32;
  }
LABEL_27:

  return v9;
}

- (void)_scrollToItemAtIndexPath:(id)a3 atScrollPosition:(unint64_t)a4 additionalInsets:(NSDirectionalEdgeInsets)a5 animated:(BOOL)a6
{
  _BOOL8 v6;
  double trailing;
  double bottom;
  double leading;
  double top;
  id v13;

  v6 = a6;
  trailing = a5.trailing;
  bottom = a5.bottom;
  leading = a5.leading;
  top = a5.top;
  -[UICollectionView _translateDataSourceIndexPathToPresentationIndexPathAsNeeded:](self, "_translateDataSourceIndexPathToPresentationIndexPathAsNeeded:", a3);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:](self, "_scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:", v13, a4, v6, top, leading, bottom, trailing);

}

- (BOOL)_shouldResetInitialLayoutOnDataSourceChange
{
  return ((unint64_t)*((unsigned __int16 *)&self->_collectionViewFlags + 8) >> 9) & 1;
}

- (void)_scrollViewWillEndDraggingWithVelocity:(CGPoint)a3 targetContentOffset:(CGPoint *)a4
{
  CGFloat v5;
  CGFloat v6;

  -[UICollectionViewLayout targetContentOffsetForProposedContentOffset:withScrollingVelocity:](self->_layout, "targetContentOffsetForProposedContentOffset:withScrollingVelocity:", a4->x, a4->y, a3.x, a3.y);
  a4->x = v5;
  a4->y = v6;
}

- (CGPoint)_adjustFocusContentOffset:(CGPoint)a3 toShowFocusItemWithInfo:(id)a4
{
  double y;
  double x;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  objc_super v19;
  CGPoint result;

  y = a3.y;
  x = a3.x;
  v7 = a4;
  -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v8)
    goto LABEL_4;
  v9 = (void *)v8;
  -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "containingView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v10, "_isViewEntryCell:", v11);

  if (v12)
  {
    -[UIScrollView contentOffset](self, "contentOffset");
  }
  else
  {
LABEL_4:
    v19.receiver = self;
    v19.super_class = (Class)UICollectionView;
    -[UIScrollView _adjustFocusContentOffset:toShowFocusItemWithInfo:](&v19, sel__adjustFocusContentOffset_toShowFocusItemWithInfo_, v7, x, y);
  }
  v15 = v13;
  v16 = v14;

  v17 = v15;
  v18 = v16;
  result.y = v18;
  result.x = v17;
  return result;
}

- (unint64_t)_focusPrimaryScrollableAxis
{
  void *v3;
  unint64_t v4;
  objc_super v6;

  -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_layoutAxis");

  if (v4 != 1 && v4 != 2)
  {
    v6.receiver = self;
    v6.super_class = (Class)UICollectionView;
    return -[UIScrollView _focusPrimaryScrollableAxis](&v6, sel__focusPrimaryScrollableAxis);
  }
  return v4;
}

- (void)_setShouldPreventFocusScrollPastContentSize:(BOOL)a3
{
  _BOOL4 v3;
  objc_super v5;

  v3 = a3;
  v5.receiver = self;
  v5.super_class = (Class)UICollectionView;
  -[UIScrollView _setShouldPreventFocusScrollPastContentSize:](&v5, sel__setShouldPreventFocusScrollPastContentSize_);
  -[_UICollectionViewOrthogonalScrollerSectionController setShouldPreventFocusScrollPastContentSize:]((uint64_t)self->_orthogonalScrollerController, v3);
}

- (id)_createStaticScrollBar
{
  _UIIndexBarStaticScrollAccessory *v2;

  v2 = [_UIIndexBarStaticScrollAccessory alloc];
  return -[_UIStaticScrollBar initWithFrame:](v2, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
}

- (BOOL)indexBarView:(id)a3 didSelectEntry:(id)a4 atIndex:(int64_t)a5
{
  id v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  double x;
  double y;
  double width;
  double height;
  unint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  BOOL v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  int v39;
  uint64_t v40;
  __int16 v41;
  UICollectionView *v42;
  __int16 v43;
  int64_t v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  UICollectionView *v48;
  uint64_t v49;
  CGRect v50;

  v49 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  objc_msgSend(v7, "title");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "indexPath");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9
    || (-[UICollectionView _indexPathForEntryWithTitle:atIndex:validateTitles:](self, "_indexPathForEntryWithTitle:atIndex:validateTitles:", v8, a5, 1), (v9 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    v11 = v10;
    v13 = v12;
    -[UIView _focusBehavior](self, "_focusBehavior");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v14, "refinesIndexBarTargetContentOffset"))
    {
      +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "scrollManager");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16)
      {
        v50.origin.x = -[UICollectionView _frameOfElementAtScrollingTargetIndexPath:]((uint64_t)self, v9);
        x = v50.origin.x;
        y = v50.origin.y;
        width = v50.size.width;
        height = v50.size.height;
        if (CGRectIsNull(v50))
        {
          v21 = indexBarView_didSelectEntry_atIndex____s_category;
          if (!indexBarView_didSelectEntry_atIndex____s_category)
          {
            v21 = __UILogCategoryGetNode("UICollectionView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v21, (unint64_t *)&indexBarView_didSelectEntry_atIndex____s_category);
          }
          v22 = *(NSObject **)(v21 + 8);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            v23 = v22;
            v39 = 138413314;
            v40 = objc_opt_class();
            v41 = 2048;
            v42 = self;
            v43 = 2048;
            v44 = a5;
            v45 = 2112;
            v46 = v9;
            v47 = 2112;
            v48 = self;
            _os_log_impl(&dword_185066000, v23, OS_LOG_TYPE_ERROR, "<%@ %p> received null target element frame for scrolling to index bar entry index (%ld) at index path %@. Scrolling may not function correctly. \nCollection View: %@", (uint8_t *)&v39, 0x34u);

          }
        }
        else
        {
          -[UICollectionView _contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:](self, "_contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:", v9, 1, 0.0, 0.0, 0.0, 0.0);
          v27 = v26;
          v29 = v28;
          -[UIScrollView _focusTuple](self, "_focusTuple");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "contentOffsetForEnvironmentScrollableContainer:toShowRect:targetOffset:", v30, x, y, width, height, v27, v29);
          v32 = v31;
          v34 = v33;

          -[UICollectionView setContentOffset:animated:](self, "setContentOffset:animated:", 0, v32, v34);
        }
      }

    }
    else
    {
      if (-[UIScrollView _shouldReverseLayoutDirectionConsideringFlippedHorizontalAxis](self, "_shouldReverseLayoutDirectionConsideringFlippedHorizontalAxis"))
      {
        v24 = 33;
      }
      else
      {
        v24 = 9;
      }
      -[UICollectionView _scrollToItemAtIndexPath:atScrollPosition:additionalInsets:animated:](self, "_scrollToItemAtIndexPath:atScrollPosition:additionalInsets:animated:", v9, v24, 0, 0.0, 0.0, 0.0, 0.0);
    }
    -[UIScrollView contentOffset](self, "contentOffset");
    v37 = vabdd_f64(v35, v11) >= 0.00000011920929;
    v25 = vabdd_f64(v36, v13) >= 0.00000011920929 || v37;

  }
  else
  {
    v25 = 0;
  }

  return v25;
}

- (CGPoint)indexBarAccessoryView:(id)a3 contentOffsetForEntry:(id)a4 atIndex:(int64_t)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  objc_super v33;
  CGPoint result;

  v8 = a3;
  v9 = a4;
  objc_msgSend(v9, "title");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "indexPath");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11
    || (-[UICollectionView _indexPathForEntryWithTitle:atIndex:validateTitles:](self, "_indexPathForEntryWithTitle:atIndex:validateTitles:", v10, a5, 1), (v11 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    -[UICollectionView _contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:](self, "_contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:", v11, 1, 0.0, 0.0, 0.0, 0.0);
    v13 = v12;
    v15 = v14;
    -[UIView _focusBehavior](self, "_focusBehavior");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v16, "refinesIndexBarTargetContentOffset"))
    {
      +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "scrollManager");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18)
      {
        v19 = -[UICollectionView _frameOfElementAtScrollingTargetIndexPath:]((uint64_t)self, v11);
        v21 = v20;
        v23 = v22;
        v25 = v24;
        -[UIScrollView _focusTuple](self, "_focusTuple");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "contentOffsetForEnvironmentScrollableContainer:toShowRect:targetOffset:", v26, v19, v21, v23, v25, v13, v15);
        v13 = v27;
        v15 = v28;

      }
    }

  }
  else
  {
    v33.receiver = self;
    v33.super_class = (Class)UICollectionView;
    -[UIScrollView indexBarAccessoryView:contentOffsetForEntry:atIndex:](&v33, sel_indexBarAccessoryView_contentOffsetForEntry_atIndex_, v8, v9, a5);
    v13 = v31;
    v15 = v32;
  }

  v29 = v13;
  v30 = v15;
  result.y = v30;
  result.x = v29;
  return result;
}

- (CGPoint)_contentOffsetForLowFidelityScrollInDirection:(CGPoint)a3 duration:(double *)a4
{
  double y;
  double x;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  UICollectionViewLayout *layout;
  void *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _BOOL4 v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  CGFloat v74;
  CGFloat rect2;
  CGFloat v76;
  CGFloat v77;
  double v78;
  double v79;
  _QWORD v80[5];
  objc_super v81;
  CGPoint result;
  CGRect v83;
  CGRect v84;

  y = a3.y;
  x = a3.x;
  v81.receiver = self;
  v81.super_class = (Class)UICollectionView;
  -[UIScrollView _contentOffsetForLowFidelityScrollInDirection:duration:](&v81, sel__contentOffsetForLowFidelityScrollInDirection_duration_, a4);
  v8 = v7;
  v10 = v9;
  if (y == 0.0
    || (-[UIScrollView contentSize](self, "contentSize"), v12 = v11, -[UIView bounds](self, "bounds"), v12 > v13))
  {
    if (x == 0.0
      || (-[UIScrollView contentSize](self, "contentSize"), v15 = v14, -[UIView bounds](self, "bounds"), v15 > v16))
    {
      if (!self
        || y >= 0.0
        || (-[UIScrollView _contentInsetIncludingDecorations](self, "_contentInsetIncludingDecorations"),
            v10 + v17 > 0.001))
      {
        if (x >= 0.0
          && (x <= 0.0
           || !-[UIView _shouldReverseLayoutDirection](self, "_shouldReverseLayoutDirection")
           || -[UIView _flipsHorizontalAxis](self, "_flipsHorizontalAxis"))
          || (-[UICollectionView _isContentOffset:atStartOfAxis:](self, 1, v8, v10) & 1) == 0)
        {
          if (-[UIScrollView isScrollAnimating](self, "isScrollAnimating"))
            -[UIScrollView _animatedTargetOffset](self, "_animatedTargetOffset");
          else
            -[UIScrollView contentOffset](self, "contentOffset");
          v20 = v18;
          v21 = v19;
          -[UIView bounds](self, "bounds");
          v23 = v22;
          v25 = v24;
          v26 = v20 + x * v22;
          v27 = v21 + y * v24;
          v78 = v29;
          v79 = v28;
          -[UICollectionViewData layoutAttributesForCellsInRect:validateLayout:](self->_collectionViewData, 0, v28, v29, v22, v24);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = -[UICollectionViewLayout _layoutAxis](self->_layout, "_layoutAxis");
          v80[0] = MEMORY[0x1E0C809B0];
          v80[1] = 3221225472;
          v80[2] = __75__UICollectionView__contentOffsetForLowFidelityScrollInDirection_duration___block_invoke;
          v80[3] = &unk_1E16BCF48;
          v80[4] = self;
          -[UICollectionView _layoutAttributesClosestToReferencePoint:amongCandidates:onAxis:shouldConsiderBlock:](self, v30, v31, v80, v26, v27);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = v32;
          if (v32)
          {
            v70 = v27;
            v71 = v26;
            objc_msgSend(v32, "frame");
            v76 = v35;
            v77 = v34;
            v74 = v37;
            rect2 = v36;
            layout = self->_layout;
            objc_msgSend(v33, "indexPath");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            -[UICollectionViewLayout _supplementaryViewInsetsForScrollingToItemAtIndexPath:](layout, "_supplementaryViewInsetsForScrollingToItemAtIndexPath:", v39);
            v72 = v41;
            v73 = v40;
            v43 = v42;
            v45 = v44;

            if (-[UIView _shouldReverseLayoutDirection](self, "_shouldReverseLayoutDirection"))
            {
              v46 = -[UIView _flipsHorizontalAxis](self, "_flipsHorizontalAxis");
              if (v46)
                v47 = v43;
              else
                v47 = v45;
              if (!v46)
                v45 = v43;
              v43 = v47;
            }
            if (y < 0.0)
            {
              v48 = 4;
            }
            else
            {
              if (y > 0.0)
                v48 = 1;
              else
                v48 = 32;
              if (y <= 0.0 && x >= 0.0)
              {
                if (x <= 0.0)
                  v48 = 0;
                else
                  v48 = 8;
              }
            }
            -[UIScrollView _effectiveContentInset](self, "_effectiveContentInset");
            v50 = v78 + v49;
            v53 = v23 - (v51 + v52);
            v55 = v25 - (v49 + v54);
            v83.origin.x = v43 + v79 + v51;
            v84.size.height = v74;
            v83.origin.y = v73 + v50;
            v83.size.width = v53 - (v43 + v45);
            v83.size.height = v55 - (v73 + v72);
            v84.origin.y = v76;
            v84.origin.x = v77;
            v84.size.width = rect2;
            if (CGRectContainsRect(v83, v84))
            {
              if (y < 0.0)
                v56 = v25;
              else
                v56 = -0.0;
              v57 = v56 + v70;
              if (x >= 0.0)
                v58 = -0.0;
              else
                v58 = v23;
              v59 = v58 + v71;
              -[UICollectionViewData layoutAttributesForCellsInRect:validateLayout:](self->_collectionViewData, 0, v71, v70, v23, v25);
              v60 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionView _layoutAttributesClosestToReferencePoint:amongCandidates:onAxis:shouldConsiderBlock:](self, v60, -[UICollectionViewLayout _layoutAxis](self->_layout, "_layoutAxis"), &__block_literal_global_592, v59, v57);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              v62 = v61;
              if (v61)
              {
                objc_msgSend(v61, "indexPath");
                v63 = (void *)objc_claimAutoreleasedReturnValue();
                -[UICollectionView _contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:](self, "_contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:", v63, v48, 0.0, 0.0, 0.0, 0.0);
                v8 = v64;
                v10 = v65;

              }
            }
            else
            {
              objc_msgSend(v33, "indexPath");
              v60 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionView _contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:](self, "_contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:", v60, v48, 0.0, 0.0, 0.0, 0.0);
              v8 = v66;
              v10 = v67;
            }

          }
        }
      }
    }
  }
  v68 = v8;
  v69 = v10;
  result.y = v69;
  result.x = v68;
  return result;
}

BOOL __75__UICollectionView__contentOffsetForLowFidelityScrollInDirection_duration___block_invoke(uint64_t a1, void *a2)
{
  id **v2;
  void *v3;
  void *v4;
  _BOOL8 v5;

  v2 = *(id ***)(*(_QWORD *)(a1 + 32) + 2904);
  objc_msgSend(a2, "indexPath");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UICollectionViewSubviewManager visibleCellAtIndexPath:](v2, (uint64_t)v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 != 0;

  return v5;
}

uint64_t __75__UICollectionView__contentOffsetForLowFidelityScrollInDirection_duration___block_invoke_2()
{
  return 1;
}

- (id)_focusFastScrollingIndexBarEntries
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v9[5];
  id v10;
  objc_super v11;

  -[UICollectionView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count"))
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __54__UICollectionView__focusFastScrollingIndexBarEntries__block_invoke;
    v9[3] = &unk_1E16BD3E8;
    v9[4] = self;
    v5 = v4;
    v10 = v5;
    objc_msgSend(v3, "enumerateObjectsUsingBlock:", v9);
    v6 = v10;
    v7 = v5;

  }
  else
  {
    v11.receiver = self;
    v11.super_class = (Class)UICollectionView;
    -[UIScrollView _focusFastScrollingIndexBarEntries](&v11, sel__focusFastScrollingIndexBarEntries);
    v7 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v7;
}

void __54__UICollectionView__focusFastScrollingIndexBarEntries__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  double (*v14)(uint64_t);
  void *v15;
  id v16;
  id v17;
  id v18;
  id location;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "_indexPathForEntryWithTitle:atIndex:validateTitles:", v5, a3, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "length") == 1)
  {
    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", 0, objc_msgSend(v6, "indexAtPosition:", 0));
    v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = v6;
  }
  v8 = v7;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v12 = MEMORY[0x1E0C809B0];
  v13 = 3221225472;
  v14 = __54__UICollectionView__focusFastScrollingIndexBarEntries__block_invoke_2;
  v15 = &unk_1E16BD450;
  objc_copyWeak(&v18, &location);
  v9 = v6;
  v16 = v9;
  v10 = v8;
  v17 = v10;
  +[_UIFocusFastScrollingIndexBarEntry entryWithTitle:generator:](_UIFocusFastScrollingIndexBarEntry, "entryWithTitle:generator:", v5, &v12);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setTargetFocusedIndexPath:", v10, v12, v13, v14, v15);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v11);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&location);

}

double __54__UICollectionView__focusFastScrollingIndexBarEntries__block_invoke_2(uint64_t a1)
{
  id WeakRetained;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  NSObject *v22;
  unint64_t v23;
  NSObject *v24;
  uint8_t v26[16];
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (os_variant_has_internal_diagnostics())
  {
    if (!WeakRetained)
    {
      __UIFaultDebugAssertLog();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v22, OS_LOG_TYPE_FAULT, "Index entry's weak reference to UICollectionView could not be resolved to strong reference.", buf, 2u);
      }

      goto LABEL_14;
    }
  }
  else if (!WeakRetained)
  {
    v23 = _UIInternalPreference_CollectionViewLimitsCellsCreatedPerPass_block_invoke_8___s_category;
    if (!_UIInternalPreference_CollectionViewLimitsCellsCreatedPerPass_block_invoke_8___s_category)
    {
      v23 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v23, (unint64_t *)&_UIInternalPreference_CollectionViewLimitsCellsCreatedPerPass_block_invoke_8___s_category);
    }
    v24 = *(NSObject **)(v23 + 8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_185066000, v24, OS_LOG_TYPE_ERROR, "Index entry's weak reference to UICollectionView could not be resolved to strong reference.", v26, 2u);
    }
    goto LABEL_14;
  }
  objc_msgSend(WeakRetained, "contentSize");
  if (v3 == 0.0 || (objc_msgSend(WeakRetained, "contentSize"), v4 == 0.0))
  {
LABEL_14:
    v21 = INFINITY;
    goto LABEL_15;
  }
  objc_msgSend(WeakRetained, "_contentOffsetForScrollingToItemAtIndexPath:atScrollPosition:additionalInsets:", *(_QWORD *)(a1 + 32), 1, 0.0, 0.0, 0.0, 0.0);
  v6 = v5;
  v8 = v7;
  objc_msgSend(WeakRetained, "_collectionViewData");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[UICollectionViewData rectForItemAtIndexPath:]((uint64_t)v9, *(void **)(a1 + 40));
  v12 = v11;
  v14 = v13;
  v16 = v15;

  +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", WeakRetained);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "scrollManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "_focusTuple");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "contentOffsetForEnvironmentScrollableContainer:toShowRect:targetOffset:", v19, v10, v12, v14, v16, v6, v8);
  v21 = v20;

LABEL_15:
  return v21;
}

- (void)_setupIndexOverlayManagerIfNecessary
{
  void *v3;
  id *v4;

  -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = -[_UICollectionTableIndexOverlayManager initWithHost:]((id *)[_UICollectionTableIndexOverlayManager alloc], self);
    -[UICollectionView _setIndexOverlayManager:](self, "_setIndexOverlayManager:", v4);

  }
}

- (void)_wheelChangedWithEvent:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  BOOL v7;
  objc_super *v8;
  UICollectionView *v9;
  objc_super v10;

  v4 = a3;
  -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _screen](self, "_screen");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "_userInterfaceIdiom") != 3
    || !v5
    || !-[UICollectionView _wantsIndexOverlays](self, "_wantsIndexOverlays"))
  {

    goto LABEL_8;
  }
  v7 = -[UIView _isFocusedOrAncestorOfFocusedView](self, "_isFocusedOrAncestorOfFocusedView");

  if (!v7)
  {
LABEL_8:
    v10.receiver = self;
    v8 = &v10;
    goto LABEL_9;
  }
  if ((-[_UICollectionTableIndexOverlayManager handleWheelChangedEvent:]((uint64_t)v5, v4) & 1) == 0)
  {
    v9 = self;
    v8 = (objc_super *)&v9;
LABEL_9:
    v8->super_class = (Class)UICollectionView;
    -[objc_super _wheelChangedWithEvent:](v8, sel__wheelChangedWithEvent_, v4, v9);
  }

}

- (void)_moveWithEvent:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  UICollectionViewData *collectionViewData;
  BOOL v8;
  objc_super v9;

  v4 = a3;
  -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  collectionViewData = self->_collectionViewData;
  if (collectionViewData
    && (collectionViewData->_totalItemCount >= 1 ? (v8 = v5 == 0) : (v8 = 1), !v8 && (*(_BYTE *)(v5 + 48) & 1) != 0))
  {
    -[_UICollectionTableIndexOverlayManager handleMoveEvent:](v5, v4);
  }
  else
  {
    v9.receiver = self;
    v9.super_class = (Class)UICollectionView;
    -[UIResponder _moveWithEvent:](&v9, sel__moveWithEvent_, v4);
  }

}

- (int64_t)_currentSectionIndexTitleIndex
{
  unint64_t currentIndexTitleIndex;
  void *v4;
  unint64_t v5;
  int64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[7];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  currentIndexTitleIndex = self->_currentIndexTitleIndex;
  if (currentIndexTitleIndex != -1)
  {
    -[UICollectionView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "count");

    if (currentIndexTitleIndex < v5)
      return self->_currentIndexTitleIndex;
  }
  -[UIView bounds](self, "bounds");
  v8 = v7;
  v10 = v9;
  -[UICollectionViewData layoutAttributesForCellsInRect:validateLayout:](self->_collectionViewData, 0, v7, v9, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _layoutAttributesClosestToReferencePoint:amongCandidates:onAxis:shouldConsiderBlock:](self, v13, -[UICollectionViewLayout _layoutAxis](self->_layout, "_layoutAxis"), &__block_literal_global_602_0, v8, v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  v6 = 0x7FFFFFFFFFFFFFFFLL;
  if (v14)
  {
    objc_msgSend(v14, "indexPath");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "section");

    -[UICollectionView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 0;
    v22 = &v21;
    v23 = 0x2020000000;
    v24 = 0x7FFFFFFFFFFFFFFFLL;
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __50__UICollectionView__currentSectionIndexTitleIndex__block_invoke_2;
    v20[3] = &unk_1E16BD498;
    v20[5] = &v21;
    v20[6] = v17;
    v20[4] = self;
    objc_msgSend(v18, "enumerateObjectsUsingBlock:", v20);
    v6 = v22[3];
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (objc_msgSend(v18, "count"))
      {
        v6 = 0;
        v22[3] = 0;
      }
      else
      {
        v6 = v22[3];
      }
    }
    _Block_object_dispose(&v21, 8);

  }
  return v6;
}

uint64_t __50__UICollectionView__currentSectionIndexTitleIndex__block_invoke()
{
  return 1;
}

void __50__UICollectionView__currentSectionIndexTitleIndex__block_invoke_2(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  v7 = a2;
  v8 = (_QWORD *)a1[4];
  v9 = a3;
  if ((v8[331] & 1) != 0)
  {
    v12 = v7;
    objc_msgSend(v8, "_dataSourceProxy");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "collectionView:indexPathForIndexTitle:atIndex:", a1[4], v12, a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = objc_msgSend(v11, "section");
    v7 = v12;
  }
  if (v9 == a1[6])
  {
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = a3;
    *a4 = 1;
  }

}

- (void)_recomputeSectionIndexTitleIndex
{
  int64_t v3;
  id v4;

  self->_currentIndexTitleIndex = -1;
  v3 = -[UICollectionView _currentSectionIndexTitleIndex](self, "_currentSectionIndexTitleIndex");
  self->_currentIndexTitleIndex = v3;
  v4 = -[UICollectionView _updateIndexOverlayToShowTitleAtIndex:](self, "_updateIndexOverlayToShowTitleAtIndex:", v3);
}

- (id)_updateIndexOverlayToShowTitleAtIndex:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;

  -[UICollectionView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (a3 < 0 || objc_msgSend(v5, "count") <= (unint64_t)a3)
  {
    v7 = 0;
  }
  else
  {
    objc_msgSend(v6, "objectAtIndex:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UICollectionTableIndexOverlayManager setIndexOverlayIndicatorViewText:]((uint64_t)self->_indexOverlayManager, v7);
  }

  return v7;
}

- (void)_moveSectionIndexTitleIndexToIndex:(int64_t)a3 highlight:(BOOL)a4
{
  _BOOL4 v4;
  void *v7;
  int64_t v8;
  void *v9;
  int64_t v10;
  void *v11;

  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = a4;
    -[UICollectionView _updateIndexOverlayToShowTitleAtIndex:](self, "_updateIndexOverlayToShowTitleAtIndex:");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v11 = v7;
      v8 = -[UICollectionView _sectionIndexChangedToIndex:title:](self, "_sectionIndexChangedToIndex:title:", a3, v7);
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", 0, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v4)
      {
        v10 = -[UICollectionView _globalIndexPathForItemAtIndexPath:](self, "_globalIndexPathForItemAtIndexPath:", v9);
        if (v10 != 0x7FFFFFFFFFFFFFFFLL)
          -[UICollectionView _unhighlightAllItemsAndHighlightGlobalItem:](self, "_unhighlightAllItemsAndHighlightGlobalItem:", v10);
      }

      v7 = v11;
    }

  }
}

- (void)_shiftSectionIndexTitleIndexByAmount:(int64_t)a3
{
  -[UICollectionView _moveSectionIndexTitleIndexToIndex:highlight:](self, "_moveSectionIndexTitleIndexToIndex:highlight:", -[UICollectionView _currentSectionIndexTitleIndex](self, "_currentSectionIndexTitleIndex") + a3, 1);
}

- (void)userInteractionStoppedWithIndexBarView:(id)a3
{
  void *v4;
  uint64_t v5;
  id v6;

  -[UIView traitCollection](self, "traitCollection", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "userInterfaceIdiom");

  if (v5 == 3)
  {
    -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    -[_UICollectionTableIndexOverlayManager transitionIndexOverlaySelectionViewToVisible:]((uint64_t)v6, 1);

  }
}

- (int64_t)_sectionIndexChangedToIndex:(int64_t)a3 title:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  int64_t v9;
  void *v10;
  char v11;

  v6 = a4;
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 1) != 0)
  {
    -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "collectionView:indexPathForIndexTitle:atIndex:", self, v6, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = objc_msgSend(v7, "section");
    if (v7)
    {
      self->_currentIndexTitleIndex = a3;
      -[UICollectionView _scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:](self, "_scrollToItemAtPresentationIndexPath:atScrollPosition:additionalInsets:animated:", v7, 1, 0, 0.0, 0.0, 0.0, 0.0);
      -[UIView traitCollection](self, "traitCollection");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "interactionModel");

      if ((v11 & 2) != 0)
        -[UICollectionView _requestFocusOnItemAtIndexPath:](self, "_requestFocusOnItemAtIndexPath:", v7);
    }
    a3 = v9;
  }
  else
  {
    v7 = 0;
  }

  return a3;
}

- (void)_transitionIndexOverlaySelectionViewToVisible:(BOOL)a3
{
  _BOOL4 v3;
  id v4;

  v3 = a3;
  -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[_UICollectionTableIndexOverlayManager transitionIndexOverlaySelectionViewToVisible:]((uint64_t)v4, v3);

}

- (void)_hideIndexOverlay
{
  id v2;

  -[UICollectionView _indexOverlayManager](self, "_indexOverlayManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  -[_UICollectionTableIndexOverlayManager transitionIndexOverlayIndicatorViewToVisible:shouldFadeBackToInvisible:]((uint64_t)v2, 0, 0);

}

- (void)registerNib:(UINib *)nib forCellWithReuseIdentifier:(NSString *)identifier
{
  NSString *v7;
  NSMutableDictionary *v8;
  NSMutableDictionary *cellNibDict;
  NSMutableDictionary *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  UINib *v14;

  v14 = nib;
  v7 = identifier;
  if (!-[NSString length](v7, "length"))
  {
    v11 = (void *)MEMORY[0x1E0C99DA0];
    v12 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "raise:format:", v12, CFSTR("must pass a valid reuse identifier to -[UICollectionView %@]"), v13);

  }
  if (!self->_cellNibDict)
  {
    v8 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    cellNibDict = self->_cellNibDict;
    self->_cellNibDict = v8;

  }
  -[NSMutableDictionary removeObjectForKey:](self->_cellClassDict, "removeObjectForKey:", v7);
  v10 = self->_cellNibDict;
  if (v14)
    -[NSMutableDictionary setValue:forKey:](v10, "setValue:forKey:", v14, v7);
  else
    -[NSMutableDictionary removeObjectForKey:](v10, "removeObjectForKey:", v7);

}

- (void)registerNib:(UINib *)nib forSupplementaryViewOfKind:(NSString *)kind withReuseIdentifier:(NSString *)identifier
{
  NSString *v9;
  NSString *v10;
  NSMutableDictionary *v11;
  NSMutableDictionary *supplementaryViewNibDict;
  void *v13;
  NSMutableDictionary *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  UINib *v21;

  v21 = nib;
  v9 = kind;
  v10 = identifier;
  if (!-[NSString length](v9, "length"))
  {
    v15 = (void *)MEMORY[0x1E0C99DA0];
    v16 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "raise:format:", v16, CFSTR("must pass a valid element kind to -[UICollectionView %@]"), v17);

  }
  if (!-[NSString length](v10, "length"))
  {
    v18 = (void *)MEMORY[0x1E0C99DA0];
    v19 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "raise:format:", v19, CFSTR("must pass a valid reuse identifier to -[UICollectionView %@]"), v20);

  }
  if (!self->_supplementaryViewNibDict)
  {
    v11 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    supplementaryViewNibDict = self->_supplementaryViewNibDict;
    self->_supplementaryViewNibDict = v11;

  }
  objc_msgSend((id)objc_opt_class(), "_reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:", v9, v10);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary removeObjectForKey:](self->_supplementaryViewClassDict, "removeObjectForKey:", v13);
  v14 = self->_supplementaryViewNibDict;
  if (v21)
    -[NSMutableDictionary setValue:forKey:](v14, "setValue:forKey:", v21, v13);
  else
    -[NSMutableDictionary removeObjectForKey:](v14, "removeObjectForKey:", v13);
  -[UICollectionView _registeredSupplementaryViewKind:](self, "_registeredSupplementaryViewKind:", v9);

}

- (void)_setExternalObjectTable:(id)a3 forNibLoadingOfCellWithReuseIdentifier:(id)a4
{
  id v6;
  NSMutableDictionary *cellNibExternalObjectsTables;
  NSMutableDictionary *v8;
  NSMutableDictionary *v9;
  id v10;

  v10 = a3;
  v6 = a4;
  cellNibExternalObjectsTables = self->_cellNibExternalObjectsTables;
  if (!cellNibExternalObjectsTables)
  {
    v8 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    v9 = self->_cellNibExternalObjectsTables;
    self->_cellNibExternalObjectsTables = v8;

    cellNibExternalObjectsTables = self->_cellNibExternalObjectsTables;
  }
  -[NSMutableDictionary setObject:forKey:](cellNibExternalObjectsTables, "setObject:forKey:", v10, v6);

}

- (void)_setExternalObjectTable:(id)a3 forNibLoadingOfSupplementaryViewOfKind:(id)a4 withReuseIdentifier:(id)a5
{
  id v8;
  id v9;
  NSMutableDictionary *supplementaryViewNibExternalObjectsTables;
  NSMutableDictionary *v11;
  NSMutableDictionary *v12;
  void *v13;
  id v14;

  v14 = a3;
  v8 = a4;
  v9 = a5;
  supplementaryViewNibExternalObjectsTables = self->_supplementaryViewNibExternalObjectsTables;
  if (!supplementaryViewNibExternalObjectsTables)
  {
    v11 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    v12 = self->_supplementaryViewNibExternalObjectsTables;
    self->_supplementaryViewNibExternalObjectsTables = v11;

    supplementaryViewNibExternalObjectsTables = self->_supplementaryViewNibExternalObjectsTables;
  }
  objc_msgSend((id)objc_opt_class(), "_reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:", v8, v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKey:](supplementaryViewNibExternalObjectsTables, "setObject:forKey:", v14, v13);

}

- (void)_prepareViewForUse:(id)a3 withElementCategory:(unint64_t)a4 elementKind:(id)a5 reuseIdentifier:(id)a6 indexPath:(id)a7
{
  id v12;

  v12 = a3;
  -[UICollectionView _prepareViewForUse:withElementCategory:elementKind:reuseIdentifier:indexPath:applyDefaultAttributes:](self, "_prepareViewForUse:withElementCategory:elementKind:reuseIdentifier:indexPath:applyDefaultAttributes:", v12, a4, a5, a6, a7, 1);
  -[_UICollectionViewSubviewManager ensureViewIsRemovedFromReuseQueue:]((uint64_t)self->_subviewManager, v12);

}

uint64_t __41__UICollectionView__prepareViewForReuse___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "prepareForReuse");
}

- (id)_dequeueReusableCellWithRegistration:(id)a3 forIndexPath:(id)a4
{
  id v6;
  void *v7;
  void *v8;

  v6 = a3;
  -[UICollectionView _diffableIdentifierForIndexPath:](self, "_diffableIdentifierForIndexPath:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView dequeueConfiguredReusableCellWithRegistration:forIndexPath:item:](self, "dequeueConfiguredReusableCellWithRegistration:forIndexPath:item:", v6, a4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (void)_enqueueViewForReuse:(id)a3
{
  _UICollectionViewSubviewManager *subviewManager;
  id v4;

  subviewManager = self->_subviewManager;
  v4 = a3;
  if (-[_UICollectionViewSubviewManager enqueueViewForReuse:]((uint64_t)subviewManager, v4))
    objc_msgSend(v4, "_setHiddenForReuse:", 1);
  else
    objc_msgSend(v4, "removeFromSuperview");

}

- (id)_reusableViewWithoutAttributesForElementCategory:(unint64_t)a3 kind:(id)a4 indexPath:(id)a5
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t collectionViewFlags;
  int v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  _UICollectionViewSubviewManager *subviewManager;

  v8 = a4;
  v9 = a5;
  collectionViewFlags = (uint64_t)self->_collectionViewFlags;
  v10 = *((_QWORD *)&self->_collectionViewFlags + 1);
  v12 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16) | 1;
  *((_WORD *)&self->_collectionViewFlags + 8) |= 1u;
  if (a3 == 1)
  {
    -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "collectionView:viewForSupplementaryElementOfKind:atIndexPath:", self, v8, v9);
    v14 = objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  if (!a3)
  {
    -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "collectionView:cellForItemAtIndexPath:", self, v9);
    v14 = objc_claimAutoreleasedReturnValue();
LABEL_5:
    v15 = (void *)v14;

    v16 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    collectionViewFlags = (uint64_t)self->_collectionViewFlags;
    v10 = *((_QWORD *)&self->_collectionViewFlags + 1);
    goto LABEL_7;
  }
  v15 = 0;
  v16 = v12 & 0xFFFFFF;
LABEL_7:
  *(_QWORD *)&self->_collectionViewFlags = collectionViewFlags;
  *((_QWORD *)&self->_collectionViewFlags + 1) = v10;
  *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v16);
  *((_WORD *)&self->_collectionViewFlags + 8) = v16 & 0xFFFE;
  subviewManager = self->_subviewManager;
  if (subviewManager)
    -[NSHashTable removeObject:](subviewManager->_dequeuedViews, "removeObject:", v15);

  return v15;
}

- (void)reloadSections:(NSIndexSet *)sections
{
  id v4;

  -[UICollectionView _sectionIndexesAfterShadowUpdatesForSectionIndexes:](self, "_sectionIndexesAfterShadowUpdatesForSectionIndexes:", sections);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _updateSections:updateAction:](self, "_updateSections:updateAction:", v4, 2);

}

- (void)moveSection:(NSInteger)section toSection:(NSInteger)newSection
{
  void *v8;

  if (dyld_program_sdk_at_least()
    && !(*((_WORD *)&self->_collectionViewFlags + 8) & 2 | (unint64_t)(~*((_DWORD *)&self->_collectionViewFlags
                                                                                                + 2) & 4)))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10085, CFSTR("UICollectionView must be updated via the UICollectionViewDiffableDataSource APIs when acting as the UICollectionView's dataSource: please do not call mutation APIs directly on UICollectionView. %@"), self);

  }
  -[UICollectionView _moveSection:toSection:](self, "_moveSection:toSection:", -[UICollectionView presentationSectionIndexForDataSourceSectionIndex:](self, "presentationSectionIndexForDataSourceSectionIndex:", section), -[UICollectionView presentationSectionIndexForDataSourceSectionIndex:](self, "presentationSectionIndexForDataSourceSectionIndex:", newSection));
}

- (void)_moveSection:(int64_t)a3 toSection:(int64_t)a4
{
  UICollectionViewUpdateItem *v7;
  void *v8;
  void *v9;
  UICollectionViewUpdateItem *v10;
  id v11;

  -[UICollectionView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", 3);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v7 = [UICollectionViewUpdateItem alloc];
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[UICollectionViewUpdateItem initWithInitialIndexPath:finalIndexPath:updateAction:](v7, "initWithInitialIndexPath:finalIndexPath:updateAction:", v8, v9, 3);

  objc_msgSend(v11, "addObject:", v10);
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x200000000) == 0)
  {
    -[UICollectionView _setupCellAnimations](self, "_setupCellAnimations");
    -[UICollectionView _endItemAnimationsWithInvalidationContext:](self, "_endItemAnimationsWithInvalidationContext:", 0);
  }

}

- (void)_updateWithUpdates:(id)a3 updateAction:(int64_t)a4
{
  uint64_t v6;
  id v7;

  v7 = a3;
  v6 = objc_msgSend(v7, "count");
  if (a4 != 4 && v6)
    -[UICollectionView _updateRowsAtIndexPaths:updateAction:updates:](self, "_updateRowsAtIndexPaths:updateAction:updates:", 0, a4, v7);

}

uint64_t __65__UICollectionView__updateRowsAtIndexPaths_updateAction_updates___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_addUpdateToShadowControllerIfNeeded:", a2);
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

- (void)moveItemAtIndexPath:(NSIndexPath *)indexPath toIndexPath:(NSIndexPath *)newIndexPath
{
  void *v7;
  void *v9;
  id v10;

  if (!(*((_WORD *)&self->_collectionViewFlags + 8) & 2 | (unint64_t)(~*((_DWORD *)&self->_collectionViewFlags
                                                                                                + 2) & 4)))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10191, CFSTR("UICollectionView must be updated via the UICollectionViewDiffableDataSource APIs when acting as the UICollectionView's dataSource: please do not call mutation APIs directly on UICollectionView. %@"), self);

  }
  -[UICollectionView _indexPathAfterShadowUpdatesForIndexPath:](self, "_indexPathAfterShadowUpdatesForIndexPath:", indexPath);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  -[_UICollectionViewShadowUpdatesController indexPathAfterShadowUpdates:allowingAppendingInserts:](self->_dragAndDropController, "indexPathAfterShadowUpdates:allowingAppendingInserts:", newIndexPath, -[NSIndexPath section](indexPath, "section") != -[NSIndexPath section](newIndexPath, "section"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _moveItemAtIndexPath:toIndexPath:](self, "_moveItemAtIndexPath:toIndexPath:", v10, v7);

}

- (void)_moveItemAtIndexPath:(id)a3 toIndexPath:(id)a4
{
  UICollectionViewUpdateItem *v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  id v11;

  -[UICollectionView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", 3);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v7 = -[UICollectionViewUpdateItem initWithInitialIndexPath:finalIndexPath:updateAction:]([UICollectionViewUpdateItem alloc], "initWithInitialIndexPath:finalIndexPath:updateAction:", a3, a4, 3);
  objc_msgSend(v11, "addObject:", v7);
  v8 = -[UICollectionView _addUpdateToShadowControllerIfNeeded:](self, "_addUpdateToShadowControllerIfNeeded:", v7);
  v9 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if (v8)
  {
    if ((v9 & 0x200000000) == 0)
    {
      -[UICollectionView _setupCellAnimations](self, "_setupCellAnimations");
      -[UICollectionView _endItemAnimationsWithInvalidationContext:](self, "_endItemAnimationsWithInvalidationContext:", 0);
    }
  }
  else if ((v9 & 0x200000000) != 0)
  {
    v10 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v9 | 0x400000000;
    *((_WORD *)&self->_collectionViewFlags + 8) = v10;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v10);
  }
  else
  {
    -[UICollectionView reloadData](self, "reloadData");
  }

}

- (void)_endItemAnimationsWithInvalidationContext:(id)a3
{
  -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:](self, "_endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:", a3, 0, 0, 0);
}

- (void)_endItemAnimationsWithInvalidationContext:(id)a3 tentativelyForReordering:(BOOL)a4
{
  -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:](self, "_endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:", a3, a4, 0, 0);
}

- (void)_endItemAnimationsWithInvalidationContext:(id)a3 tentativelyForReordering:(BOOL)a4 animator:(id)a5
{
  -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:](self, "_endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:", a3, a4, a5, 0);
}

- (void)_Bug_Detected_In_Client_Of_UICollectionView_Invalid_Batch_Updates:(id)a3
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB3488];
  v6 = a3;
  objc_msgSend(v5, "currentHandler");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10759, CFSTR("%@"), v6);

}

- (void)_Bug_Detected_In_Client_Of_UICollectionView_Invalid_Number_Of_Sections:(id)a3
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB3488];
  v6 = a3;
  objc_msgSend(v5, "currentHandler");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10764, CFSTR("%@"), v6);

}

- (void)_Bug_Detected_In_Client_Of_UICollectionView_Invalid_Number_Of_Items_In_Section:(id)a3
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB3488];
  v6 = a3;
  objc_msgSend(v5, "currentHandler");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 10769, CFSTR("%@"), v6);

}

- (void)_updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSInteger v13;
  unint64_t v14;
  _BOOL4 v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  BOOL IsNull;
  void *v24;
  id v25;
  CGRect v26;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v8;
  if (v8)
    v10 = *(void **)(v8 + 16);
  else
    v10 = 0;
  v25 = v10;

  if (v25)
  {
    v11 = objc_msgSend(v25, "item");
    v12 = objc_msgSend(v25, "section");
    v13 = -[UICollectionView numberOfSections](self, "numberOfSections");
    if (v12 < v13)
      v14 = -[UICollectionView numberOfItemsInSection:](self, "numberOfItemsInSection:", objc_msgSend(v25, "section"));
    else
      v14 = 0;
    v15 = v11 == 0x7FFFFFFFFFFFFFFFLL || objc_msgSend(v25, "item") < v14;
    if (v12 < v13 && v15)
      goto LABEL_21;
    if (v12 >= v13)
      LOBYTE(v15) = 1;
    if (!v15 && v14)
    {
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", v14 - 1, objc_msgSend(v25, "section"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v17 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      v18 = -[_UICollectionViewFocusedItemState copyWithIndexPath:preservingReusableView:](v17, v16, 0);
      -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", v18);

    }
  }
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)v19;
  if (v19 && (v21 = *(id *)(v19 + 16)) != 0)
  {
    v22 = v21;
  }
  else
  {
    v26.origin.x = x;
    v26.origin.y = y;
    v26.size.width = width;
    v26.size.height = height;
    IsNull = CGRectIsNull(v26);

    if (IsNull)
      goto LABEL_21;
    _UIFocusClosestFocusableViewToRectInView(self, x, y, width, height);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _managedSubviewForView:](self, "_managedSubviewForView:", v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {
      +[_UICollectionViewFocusedItemState stateWithReusableView:]((uint64_t)_UICollectionViewFocusedItemState, v22);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", v24);

    }
    else
    {
      -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", 0);
    }
  }

LABEL_21:
}

- (void)_populateSubviewCollectionWithExistingVisibleViewsForCurrentUpdate:(id)a3 addingDeletedViewsToSet:(id)a4 updateLayoutAttributesIndexPaths:(BOOL)a5
{
  id v9;
  id v10;
  UICollectionViewUpdate *v11;
  _UICollectionViewSubviewManager *subviewManager;
  id v13;
  UICollectionViewUpdate *v14;
  UICollectionViewUpdate *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  UICollectionViewUpdate *v21;
  id v22;
  id v23;
  UICollectionView *v24;
  BOOL v25;

  v9 = a3;
  v10 = a4;
  v11 = self->_currentUpdate;
  if (!v11)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 11161, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("currentUpdate != nil"));

  }
  subviewManager = self->_subviewManager;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __144__UICollectionView__populateSubviewCollectionWithExistingVisibleViewsForCurrentUpdate_addingDeletedViewsToSet_updateLayoutAttributesIndexPaths___block_invoke;
  v20[3] = &unk_1E16BD578;
  v21 = v11;
  v22 = v9;
  v25 = a5;
  v23 = v10;
  v24 = self;
  v13 = v10;
  v19 = v9;
  v14 = v11;
  v15 = v14;
  v16 = v19;
  v17 = v13;
  if (subviewManager)
  {
    -[_UICollectionViewSubviewCollection enumerateAllViewsWithEnumerator:](&subviewManager->_visibleViews->super.isa, (uint64_t)v20);
    v16 = v22;
    v17 = v23;
    v15 = v21;
  }

}

void __144__UICollectionView__populateSubviewCollectionWithExistingVisibleViewsForCurrentUpdate_addingDeletedViewsToSet_updateLayoutAttributesIndexPaths___block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a3;
  v9 = a4;
  v10 = a5;
  if (a2)
  {
    if (objc_msgSend(v15, "length") == 1)
    {
      -[_UICollectionViewSubviewCollection setView:ofKind:inCategory:atIndexPath:](*(_QWORD *)(a1 + 40), (uint64_t)v10, (uint64_t)v9, a2, (uint64_t)v15);
    }
    else
    {
      -[UICollectionViewUpdate validatedNewIndexPathForSupplementaryElementOfKind:oldIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 56) + 2200), v9, v15);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        -[_UICollectionViewSubviewCollection setView:ofKind:inCategory:atIndexPath:](*(_QWORD *)(a1 + 40), (uint64_t)v10, (uint64_t)v9, a2, (uint64_t)v13);
        if (*(_BYTE *)(a1 + 64))
        {
          objc_msgSend(v10, "_layoutAttributes");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "setIndexPath:", v13);

        }
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 48), "addObject:", v10);
      }

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "finalIndexPathForInitialIndexPath:", v15);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      -[_UICollectionViewSubviewCollection setCell:atIndexPath:](*(_QWORD *)(a1 + 40), (uint64_t)v10, (uint64_t)v11);
      if (*(_BYTE *)(a1 + 64))
      {
        objc_msgSend(v10, "_layoutAttributes");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "setIndexPath:", v11);

      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v10);
    }

  }
}

- (void)_createAndAppendViewAnimationsForInsertsInCurrentUpdate:(id)a3 appearingAnimations:(id)a4 newSubviewCollection:(id)a5
{
  id v8;
  id v9;
  id v10;
  BOOL v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  void *v39;
  void *v40;
  UICollectionViewLayout *layout;
  uint64_t v42;
  void *v43;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  void *v60;
  id v61;
  void *v62;
  UICollectionViewAnimation *v63;
  void *v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSMutableArray *obj;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  UICollectionView *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD v91[2];
  void (*v92)(uint64_t, uint64_t);
  void *v93;
  UICollectionView *v94;
  id v95;
  id v96;
  id v97;
  double v98;
  double v99;
  double v100;
  double v101;
  BOOL v102;
  _BYTE v103[128];
  _BYTE v104[128];
  uint64_t v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;

  v105 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = -[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes");
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v91[0] = MEMORY[0x1E0C809B0];
  v91[1] = 3221225472;
  v92 = __117__UICollectionView__createAndAppendViewAnimationsForInsertsInCurrentUpdate_appearingAnimations_newSubviewCollection___block_invoke;
  v93 = &unk_1E16BD5C8;
  v94 = self;
  v98 = v12;
  v99 = v14;
  v100 = v16;
  v101 = v18;
  v102 = v11;
  v78 = v8;
  v95 = v78;
  v77 = v9;
  v96 = v77;
  v76 = v10;
  v97 = v76;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  obj = self->_insertItems;
  v20 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v87, v104, 16);
  if (v20)
  {
    v21 = v20;
    v22 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
    v23 = *(_QWORD *)v88;
    v73 = *(_QWORD *)v88;
    v82 = self;
    do
    {
      v24 = 0;
      v72 = v21;
      do
      {
        if (*(_QWORD *)v88 != v23)
          objc_enumerationMutation(obj);
        v25 = *(_QWORD **)(*((_QWORD *)&v87 + 1) + 8 * v24);
        if (v25 && v25[6] == 0x7FFFFFFFFFFFFFFFLL)
        {
          v75 = v24;
          -[UICollectionViewUpdateItem _indexPath](v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = objc_msgSend(v26, "section");

          v28 = v22[919];
          v29 = -[UICollectionViewData numberOfItemsInSection:]((*(_QWORD **)((char *)&self->super.super.super.super.isa + v28))[3], v27);
          v30 = (*(_QWORD **)((char *)&self->super.super.super.super.isa + v28))[3];
          objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", 0, v27);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = -[UICollectionViewData globalIndexForItemAtIndexPath:](v30, v31);

          if (v29 >= 1)
          {
            do
            {
              v92((uint64_t)v91, v32++);
              --v29;
            }
            while (v29);
          }
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          -[UICollectionViewData existingSupplementaryLayoutAttributesInSection:]((*(_QWORD **)((char *)&self->super.super.super.super.isa + v28))[3], v27);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v83, v103, 16);
          if (v34)
          {
            v35 = v34;
            v36 = *(_QWORD *)v84;
            v79 = v33;
            v80 = *(_QWORD *)v84;
            while (1)
            {
              v37 = 0;
              v81 = v35;
              do
              {
                if (*(_QWORD *)v84 != v36)
                  objc_enumerationMutation(v33);
                v38 = *(_WORD **)(*((_QWORD *)&v83 + 1) + 8 * v37);
                objc_msgSend(v38, "indexPath", v72);
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                -[UIBarButtonItemGroup _items]((id *)v38);
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v38)
                {
                  layout = self->_layout;
LABEL_17:
                  -[UICollectionViewLayout initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:](layout, "initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:", v40, v39);
                  v42 = objc_claimAutoreleasedReturnValue();
                  goto LABEL_19;
                }
                layout = self->_layout;
                if ((v38[144] & 2) == 0)
                  goto LABEL_17;
                -[UICollectionViewLayout initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:](layout, "initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:", v40, v39);
                v42 = objc_claimAutoreleasedReturnValue();
LABEL_19:
                v43 = (void *)v42;
                if (!v42)
                {
                  v43 = (void *)objc_msgSend(v38, "copy");
                  objc_msgSend(v43, "setAlpha:", 0.0);
                }
                objc_msgSend(v38, "frame");
                v45 = v44;
                v47 = v46;
                v49 = v48;
                v51 = v50;
                objc_msgSend(v43, "frame");
                v109.origin.x = v52;
                v109.origin.y = v53;
                v109.size.width = v54;
                v109.size.height = v55;
                v106.origin.x = v45;
                v106.origin.y = v47;
                v106.size.width = v49;
                v106.size.height = v51;
                v107 = CGRectUnion(v106, v109);
                -[UICollectionViewLayout _orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:](self->_layout, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v38, v107.origin.x, v107.origin.y, v107.size.width, v107.size.height);
                v110.origin.x = v56;
                v110.origin.y = v57;
                v110.size.width = v58;
                v110.size.height = v59;
                v108.origin.x = v13;
                v108.origin.y = v15;
                v108.size.width = v17;
                v108.size.height = v19;
                if (CGRectIntersectsRect(v108, v110)
                  && (!objc_msgSend(v43, "isHidden") || (objc_msgSend(v38, "isHidden") & 1) == 0))
                {
                  -[UIBarButtonItemGroup _items]((id *)v38);
                  v60 = (void *)objc_claimAutoreleasedReturnValue();
                  v61 = -[UICollectionView _createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:](self, "_createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:", v60, v39, self->_layout, v43, 1);

                  if (v61)
                  {
                    -[UICollectionViewLayout _animationForReusableView:toLayoutAttributes:type:](v82->_layout, "_animationForReusableView:toLayoutAttributes:type:", v61, v38, 2);
                    v62 = (void *)objc_claimAutoreleasedReturnValue();
                    v63 = -[UICollectionViewAnimation initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:]([UICollectionViewAnimation alloc], "initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:", v61, 2, v38, 0, 0, v62, 0.0, 1.0);
                    objc_msgSend(v78, "addObject:", v63);
                    +[_UICollectionViewItemKey collectionItemKeyForLayoutAttributes:]((uint64_t)_UICollectionViewItemKey, (uint64_t)v38);
                    v64 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v77, "setObject:forKey:", v63, v64);
                    if (v38)
                    {
                      v65 = v38[144];
                      v66 = 1;
                      if ((v65 & 2) != 0)
                        v66 = 2;
                      if ((v65 & 1) != 0)
                        v67 = 0;
                      else
                        v67 = v66;
                    }
                    else
                    {
                      v67 = 0;
                    }
                    -[_UICollectionViewSubviewCollection setView:ofKind:inCategory:atIndexPath:]((uint64_t)v76, (uint64_t)v61, (uint64_t)v40, v67, (uint64_t)v39);

                    v33 = v79;
                  }

                  v36 = v80;
                  v35 = v81;
                  self = v82;
                }

                ++v37;
              }
              while (v35 != v37);
              v68 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v83, v103, 16);
              v35 = v68;
              if (!v68)
              {
                v21 = v72;
                v22 = &OBJC_IVAR___UIBarButtonItem__minimumWidth;
                break;
              }
            }
          }
          v23 = v73;
          v69 = v33;
          v24 = v75;
        }
        else
        {
          v70 = (*(_QWORD **)((char *)&self->super.super.super.super.isa + v22[919]))[3];
          -[UICollectionViewUpdateItem _indexPath](v25);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = -[UICollectionViewData globalIndexForItemAtIndexPath:](v70, v69);
          v92((uint64_t)v91, v71);
        }

        ++v24;
      }
      while (v24 != v21);
      v21 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v87, v104, 16);
    }
    while (v21);
  }

}

void __117__UICollectionView__createAndAppendViewAnimationsForInsertsInCurrentUpdate_appearingAnimations_newSubviewCollection___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  int v30;
  int v31;
  void *v32;
  UICollectionViewAnimation *v33;
  void *v34;
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  id v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  -[UICollectionViewData indexPathForItemAtGlobalIndex:](*(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2200) + 24), a2);
  v35 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "initialLayoutAttributesForAppearingItemAtIndexPath:", v35);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionViewData layoutAttributesForItemAtIndexPath:](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2200) + 24), v35);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    if (!v3)
    {
      v3 = (void *)objc_msgSend(v4, "copy");
      objc_msgSend(v3, "setAlpha:", 0.0);
    }
    objc_msgSend(v3, "frame");
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;
    objc_msgSend(v5, "frame");
    v43.origin.x = v14;
    v43.origin.y = v15;
    v43.size.width = v16;
    v43.size.height = v17;
    v41.origin.x = v7;
    v41.origin.y = v9;
    v41.size.width = v11;
    v41.size.height = v13;
    v42 = CGRectUnion(v41, v43);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v3, v42.origin.x, v42.origin.y, v42.size.width, v42.size.height);
    v44.origin.x = v18;
    v44.origin.y = v19;
    v44.size.width = v20;
    v44.size.height = v21;
    if (!CGRectIntersectsRect(*(CGRect *)(a1 + 64), v44)
      || (objc_msgSend(v3, "isHidden") & 1) != 0
      || (objc_msgSend(v5, "isHidden") & 1) != 0)
    {
      v22 = v5;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "_preparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", v35, v3, 1, 0, 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (dyld_program_sdk_at_least() && *(_BYTE *)(a1 + 96))
      {
        v24 = *(_QWORD **)(a1 + 32);
        v25 = *(_QWORD *)(v24[275] + 24);
        objc_msgSend(v24, "_visibleBounds");
        -[UICollectionViewData validateLayoutInRect:](v25, v26, v27, v28, v29);
      }
      -[UICollectionViewData layoutAttributesForItemAtIndexPath:](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2200) + 24), v35);
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      v30 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "_initialAppearingLayoutAttributesCanBeOverriddenForEstimatedSizing");
      if (dyld_program_sdk_at_least())
      {
        if (*(_BYTE *)(a1 + 96))
          v31 = v30;
        else
          v31 = 0;
        if (v31 == 1)
        {
          v36[0] = MEMORY[0x1E0C809B0];
          v36[1] = 3221225472;
          v36[2] = __117__UICollectionView__createAndAppendViewAnimationsForInsertsInCurrentUpdate_appearingAnimations_newSubviewCollection___block_invoke_2;
          v36[3] = &unk_1E16B51E8;
          v37 = v3;
          v38 = v35;
          v39 = v22;
          v40 = v23;
          +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v36);

        }
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "_animationForReusableView:toLayoutAttributes:type:", v23, v22, 2);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = -[UICollectionViewAnimation initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:]([UICollectionViewAnimation alloc], "initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:", v23, 1, v22, 0, 0, v32, 0.0, 1.0);
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v33);
      +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v35);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKey:", v33, v34);
      -[_UICollectionViewSubviewCollection setCell:atIndexPath:](*(_QWORD *)(a1 + 56), (uint64_t)v23, (uint64_t)v35);

    }
  }
  else
  {
    v22 = 0;
  }

}

void __117__UICollectionView__createAndAppendViewAnimationsForInsertsInCurrentUpdate_appearingAnimations_newSubviewCollection___block_invoke_2(uint64_t a1)
{
  id v2;

  v2 = (id)objc_msgSend(*(id *)(a1 + 32), "copy");
  objc_msgSend(v2, "setIndexPath:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 48), "center");
  objc_msgSend(v2, "setCenter:");
  objc_msgSend(*(id *)(a1 + 48), "size");
  objc_msgSend(v2, "setSize:");
  objc_msgSend(*(id *)(a1 + 56), "_setLayoutAttributes:", v2);

}

- (void)_createAndAppendViewAnimationsForExistingAndNewlyVisibleItemsInCurrentUpdate:(id)a3 animationsForOnScreenViews:(id)a4 newSubviewCollection:(id)a5 oldVisibleViews:(id)a6 attributesForNewModel:(id)a7
{
  id v12;
  id v13;
  UICollectionView *v14;
  void *v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  void *v50;
  void *v51;
  uint64_t orthogonalScrollerController;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  UICollectionView *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  int has_internal_diagnostics;
  int v71;
  void *v72;
  void *v73;
  void *v74;
  char v75;
  void *v76;
  void *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  NSObject *v82;
  unint64_t v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  _BOOL4 v88;
  id v89;
  id v90;
  id v91;
  id v92;
  void *v93;
  uint64_t v94;
  id obj;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  void *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint8_t buf[4];
  uint64_t v113;
  _BYTE v114[128];
  _BYTE v115[128];
  uint64_t v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;

  v116 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = self;
  v92 = v13;
  v89 = a5;
  -[UICollectionView _attributesForItemsVisibleDuringCurrentUpdateWithOldVisibleViews:attributesForNewModel:](self, "_attributesForItemsVisibleDuringCurrentUpdateWithOldVisibleViews:attributesForNewModel:", a6, a7);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v88 = -[UICollectionViewLayout _estimatesSizes](self->_layout, "_estimatesSizes");
  v24 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v87 = v15;
  objc_msgSend(v15, "objectEnumerator");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v108, v115, 16);
  if (v25)
  {
    v26 = v25;
    v98 = *(_QWORD *)v109;
    v90 = v12;
    v91 = v24;
    do
    {
      v27 = 0;
      v94 = v26;
      do
      {
        if (*(_QWORD *)v109 != v98)
          objc_enumerationMutation(obj);
        v100 = v27;
        v28 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * v27);
        objc_msgSend(v28, "indexPath");
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        v99 = -[UICollectionViewData globalIndexForItemAtIndexPath:]((uint64_t)v14->_currentUpdate->_newModel, v101);
        v29 = -[UICollectionViewUpdate initialGlobalIndexForFinalGlobalIndex:](v14->_currentUpdate, "initialGlobalIndexForFinalGlobalIndex:");
        -[UICollectionViewData layoutAttributesForGlobalItemIndex:](v14->_currentUpdate->_oldModel, v29);
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = v29;
        v32 = (void *)v30;
        -[UICollectionViewData indexPathForItemAtGlobalIndex:](v14->_currentUpdate->_oldModel, v31);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UICollectionViewSubviewManager visibleCellAtIndexPath:]((id **)v14->_subviewManager, (uint64_t)v33);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v32)
        {
          objc_msgSend(v103, "_layoutAttributes");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v32)
          {
            -[UICollectionViewLayout initialLayoutAttributesForAppearingItemAtIndexPath:](v14->_layout, "initialLayoutAttributesForAppearingItemAtIndexPath:", v101);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v32)
            {
              v32 = (void *)objc_msgSend(v28, "copy");
              objc_msgSend(v32, "setAlpha:", 0.0);
            }
          }
        }
        objc_msgSend(v32, "frame");
        v35 = v34;
        v37 = v36;
        v39 = v38;
        v41 = v40;
        objc_msgSend(v28, "frame");
        v120.origin.x = v42;
        v120.origin.y = v43;
        v120.size.width = v44;
        v120.size.height = v45;
        v117.origin.x = v35;
        v117.origin.y = v37;
        v117.size.width = v39;
        v117.size.height = v41;
        v118 = CGRectUnion(v117, v120);
        -[UICollectionViewLayout _orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:](v14->_layout, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v28, v118.origin.x, v118.origin.y, v118.size.width, v118.size.height);
        v121.origin.x = v46;
        v121.origin.y = v47;
        v121.size.width = v48;
        v121.size.height = v49;
        v119.origin.x = v17;
        v119.origin.y = v19;
        v119.size.width = v21;
        v119.size.height = v23;
        if (!CGRectIntersectsRect(v119, v121))
        {
          v50 = v101;
          goto LABEL_47;
        }
        v102 = v28;
        if (v103)
        {
          v50 = v101;
LABEL_13:
          LOBYTE(v86) = 1;
          v96 = v32;
          -[UICollectionView _viewAnimationsForView:startingLayoutAttributes:endingLayoutAttributes:startingLayout:endingLayout:animationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:](v14, "_viewAnimationsForView:startingLayoutAttributes:endingLayoutAttributes:startingLayout:endingLayout:animationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:", v103, v32, v102, v14->_layout, v14->_layout, 0, 0, v86, 2);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          orthogonalScrollerController = (uint64_t)v14->_orthogonalScrollerController;
          objc_msgSend(v103, "_layoutAttributes");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(orthogonalScrollerController) = -[_UICollectionViewOrthogonalScrollerSectionController isElementInOrthogonalScrollingSectionWithLayoutAttributes:](orthogonalScrollerController, v53);

          v54 = v51;
          if ((orthogonalScrollerController & 1) == 0)
          {
            v93 = v33;
            v106 = 0u;
            v107 = 0u;
            v104 = 0u;
            v105 = 0u;
            v55 = v51;
            v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v104, v114, 16);
            if (v56)
            {
              v57 = v56;
              v58 = *(_QWORD *)v105;
              do
              {
                v59 = 0;
                do
                {
                  if (*(_QWORD *)v105 != v58)
                    objc_enumerationMutation(v55);
                  v60 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * v59);
                  objc_msgSend(v103, "superview");
                  v61 = (id)objc_claimAutoreleasedReturnValue();
                  v62 = v14;
                  -[UICollectionView _subviewRouterForView:attributes:createIfNecessary:](v14, "_subviewRouterForView:attributes:createIfNecessary:", v103, v102, 0);
                  v63 = objc_claimAutoreleasedReturnValue();
                  v64 = (void *)v63;
                  if (v63)
                    v65 = *(void **)(v63 + 40);
                  else
                    v65 = 0;
                  v66 = v65;

                  if (v61 != v66)
                    objc_msgSend(v60, "setParentInCollectionViewDuringAnimation:", 1);

                  ++v59;
                  v14 = v62;
                }
                while (v57 != v59);
                v51 = v54;
                v67 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v104, v114, 16);
                v57 = v67;
              }
              while (v67);
            }

            v12 = v90;
            v24 = v91;
            v50 = v101;
            v33 = v93;
          }
          objc_msgSend(v12, "addObjectsFromArray:", v51);
          if (objc_msgSend(v51, "count") == 1)
          {
            +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v50);
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v51, "objectAtIndexedSubscript:", 0);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v92, "setObject:forKeyedSubscript:", v69, v68);

          }
          has_internal_diagnostics = os_variant_has_internal_diagnostics();
          v71 = objc_msgSend(v24, "containsIndex:", v99);
          v26 = v94;
          if (has_internal_diagnostics)
          {
            if (v71)
            {
              __UIFaultDebugAssertLog();
              v82 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v82, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 134217984;
                v113 = v99;
                _os_log_fault_impl(&dword_185066000, v82, OS_LOG_TYPE_FAULT, "attempt to create two animations for new global item index %ld", buf, 0xCu);
              }

              v24 = v91;
              v26 = v94;
              v50 = v101;
              v51 = v54;
            }
          }
          else if (v71)
          {
            v83 = _createAndAppendViewAnimationsForExistingAndNewlyVisibleItemsInCurrentUpdate_animationsForOnScreenViews_newSubviewCollection_oldVisibleViews_attributesForNewModel____s_category;
            if (!_createAndAppendViewAnimationsForExistingAndNewlyVisibleItemsInCurrentUpdate_animationsForOnScreenViews_newSubviewCollection_oldVisibleViews_attributesForNewModel____s_category)
            {
              v83 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v83, (unint64_t *)&_createAndAppendViewAnimationsForExistingAndNewlyVisibleItemsInCurrentUpdate_animationsForOnScreenViews_newSubviewCollection_oldVisibleViews_attributesForNewModel____s_category);
            }
            v84 = *(NSObject **)(v83 + 8);
            if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134217984;
              v113 = v99;
              _os_log_impl(&dword_185066000, v84, OS_LOG_TYPE_ERROR, "attempt to create two animations for new global item index %ld", buf, 0xCu);
            }
          }
          objc_msgSend(v24, "addIndex:", v99);

          v32 = v96;
          goto LABEL_46;
        }
        v50 = v101;
        if ((!objc_msgSend(v32, "isHidden") || (objc_msgSend(v102, "isHidden") & 1) == 0)
          && (-[_UICollectionViewDragAndDropController isCellPerformingLegacyReorderingAtIndexPath:]((uint64_t)v14->_dragAndDropController, v101) & 1) == 0&& (-[NSIndexPath isEqual:](v14->_cancellingToIndexPath, "isEqual:", v101) & 1) == 0)
        {
          v72 = (void *)objc_msgSend(v32, "copy");
          if (dyld_program_sdk_at_least())
          {
            objc_msgSend(v72, "indexPath");
            v73 = v32;
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            v75 = objc_msgSend(v74, "isEqual:", v101);

            v32 = v73;
            if ((v75 & 1) == 0)
              objc_msgSend(v72, "setIndexPath:", v101);
          }
          -[UICollectionView _preparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](v14, "_preparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", v101, v72, 1, 0, 1);
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          if (v88 && (*((_QWORD *)&v14->_collectionViewFlags + 1) & 0x100) != 0)
          {
            v97 = v32;
            -[UICollectionViewData invalidate:]((uint64_t)v14->_collectionViewData, 1);
            -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)v14->_collectionViewData, v101);
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            v77 = (void *)objc_msgSend(v76, "copy");

            v32 = v97;
            objc_msgSend(v97, "frame");
            v79 = v78;
            v81 = v80;
            objc_msgSend(v77, "frame");
            objc_msgSend(v97, "setFrame:", v79, v81);
            -[UICollectionView _applyLayoutAttributes:toView:](v14, "_applyLayoutAttributes:toView:", v97, v103);
            v102 = v77;
          }
          v26 = v94;
          -[_UICollectionViewSubviewCollection setCell:atIndexPath:]((uint64_t)v89, (uint64_t)v103, (uint64_t)v101);

          if (v103)
            goto LABEL_13;
        }
        v103 = 0;
LABEL_46:

LABEL_47:
        v27 = v100 + 1;
      }
      while (v100 + 1 != v26);
      v85 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v108, v115, 16);
      v26 = v85;
    }
    while (v85);
  }

}

- (void)_createAndAppendViewAnimationsForExistingAndDeletedAuxiliariesInCurrentUpdate:(id)a3 disappearingAnimations:(id)a4 animationsForOnScreenViews:(id)a5 newSubviewCollection:(id)a6 oldVisibleViews:(id)a7
{
  id v12;
  id v13;
  void *v14;
  _UICollectionViewSubviewManager *subviewManager;
  id v16;
  uint64_t v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  UICollectionViewUpdate *currentUpdate;
  void *v35;
  void *v36;
  char v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  double v44;
  CGFloat v45;
  UICollectionViewLayout *layout;
  void *v47;
  void *v48;
  double v49;
  CGFloat v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  UICollectionViewData *newModel;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  id v70;
  unsigned __int16 v71;
  uint64_t v72;
  uint64_t v73;
  UICollectionViewAnimation *v74;
  uint64_t orthogonalScrollerController;
  void *v76;
  UICollectionView *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  id v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  CGFloat v99;
  CGFloat v100;
  void *v101;
  void *v102;
  UICollectionViewAnimation *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  UICollectionViewAnimation *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  UICollectionViewAnimation *obj;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _QWORD v129[4];
  id v130;
  id v131;
  _BYTE v132[128];
  _BYTE v133[128];
  uint64_t v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;

  v134 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v114 = a4;
  v111 = a5;
  v109 = a6;
  v13 = a7;
  v14 = (void *)objc_opt_new();
  subviewManager = self->_subviewManager;
  v129[0] = MEMORY[0x1E0C809B0];
  v129[1] = 3221225472;
  v129[2] = __185__UICollectionView__createAndAppendViewAnimationsForExistingAndDeletedAuxiliariesInCurrentUpdate_disappearingAnimations_animationsForOnScreenViews_newSubviewCollection_oldVisibleViews___block_invoke;
  v129[3] = &unk_1E16BD618;
  v108 = v13;
  v130 = v108;
  v16 = v14;
  v131 = v16;
  if (subviewManager)
    -[_UICollectionViewSubviewCollection enumerateAuxillariesWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v129);
  -[UICollectionViewData existingSupplementaryLayoutAttributes]((uint64_t)self->_currentUpdate->_oldModel);
  v17 = objc_claimAutoreleasedReturnValue();
  if (v17)
    objc_msgSend(v16, "addObjectsFromArray:", v17);
  v107 = (void *)v17;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v26 = v16;
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v125, v133, 16);
  if (v27)
  {
    v28 = v27;
    v116 = *(_QWORD *)v126;
    v112 = v12;
    v110 = v26;
    do
    {
      v29 = 0;
      v115 = v28;
      do
      {
        if (*(_QWORD *)v126 != v116)
          objc_enumerationMutation(v26);
        v30 = *(unsigned __int16 **)(*((_QWORD *)&v125 + 1) + 8 * v29);
        v31 = (id)objc_msgSend(v30, "indexPath");
        if ((unint64_t)objc_msgSend(v31, "length") < 2)
          v32 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v32 = objc_msgSend(v31, "section");
        if (!-[NSIndexSet containsIndex:](self->_currentUpdate->_deletedSections, "containsIndex:", v32))
        {
          v118 = v29;
          objc_msgSend(v31, "item");
          -[UIBarButtonItemGroup _items]((id *)v30);
          v119 = (void *)objc_claimAutoreleasedReturnValue();
          if (v30)
            v33 = (v30[144] >> 1) & 1;
          else
            v33 = 0;
          currentUpdate = self->_currentUpdate;
          if (v32 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v35 = v119;
            -[NSMutableDictionary objectForKeyedSubscript:](currentUpdate->_deletedSupplementaryTopLevelIndexesDict, "objectForKeyedSubscript:", v119);
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            v37 = objc_msgSend(v36, "containsIndex:", objc_msgSend(v31, "indexAtPosition:", 0));

            if ((v37 & 1) != 0)
              goto LABEL_18;
LABEL_21:
            -[UICollectionViewUpdate newIndexPathForSupplementaryElementOfKind:oldIndexPath:]((uint64_t)self->_currentUpdate, v35, v31);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "frame");
            v50 = v49;
            v52 = v51;
            v54 = v53;
            v56 = v55;
            if (v30)
            {
              newModel = self->_currentUpdate->_newModel;
              v29 = v118;
              if ((v30[144] & 2) == 0)
                goto LABEL_23;
              -[UICollectionViewData layoutAttributesForDecorationViewOfKind:atIndexPath:]((uint64_t)newModel, (uint64_t)v35, v48);
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              v59 = 1;
            }
            else
            {
              newModel = self->_currentUpdate->_newModel;
              v29 = v118;
LABEL_23:
              -[UICollectionViewData layoutAttributesForSupplementaryElementOfKind:atIndexPath:]((uint64_t)newModel, (uint64_t)v35, v48);
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              v59 = 0;
            }
            -[UICollectionView _visibleSupplementaryViewOfKind:atIndexPath:isDecorationView:](self, "_visibleSupplementaryViewOfKind:atIndexPath:isDecorationView:", v35, v31, v59);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            v61 = v60;
            if (!v58)
            {
              if (v60)
              {
                v117 = (uint64_t)v48;
                objc_msgSend(v60, "_layoutAttributes");
                v102 = (void *)objc_claimAutoreleasedReturnValue();
                v58 = (void *)objc_msgSend(v102, "copy");

                objc_msgSend(v58, "setAlpha:", 0.0);
                -[UICollectionViewLayout _animationForReusableView:toLayoutAttributes:type:](self->_layout, "_animationForReusableView:toLayoutAttributes:type:", v61, v58, 2);
                v74 = (UICollectionViewAnimation *)objc_claimAutoreleasedReturnValue();
                v103 = -[UICollectionViewAnimation initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:]([UICollectionViewAnimation alloc], "initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:", v61, 2, v58, 0, 1, v74, 0.0, 1.0);
                +[_UICollectionViewItemKey collectionItemKeyForLayoutAttributes:]((uint64_t)_UICollectionViewItemKey, (uint64_t)v58);
                v104 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v12, "addObject:", v103);
                objc_msgSend(v114, "setObject:forKey:", v103, v104);

                goto LABEL_64;
              }
              v58 = 0;
              v28 = v115;
              goto LABEL_69;
            }
            v117 = (uint64_t)v48;
            objc_msgSend(v58, "frame");
            v141.origin.x = v62;
            v141.origin.y = v63;
            v141.size.width = v64;
            v141.size.height = v65;
            v135.origin.x = v50;
            v135.origin.y = v52;
            v135.size.width = v54;
            v135.size.height = v56;
            v136 = CGRectUnion(v135, v141);
            -[UICollectionViewLayout _orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:](self->_layout, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v30, v136.origin.x, v136.origin.y, v136.size.width, v136.size.height);
            v142.origin.x = v66;
            v142.origin.y = v67;
            v142.size.width = v68;
            v142.size.height = v69;
            v137.origin.x = v19;
            v137.origin.y = v21;
            v137.size.width = v23;
            v137.size.height = v25;
            if (CGRectIntersectsRect(v137, v142) && v30 && !v61)
            {
              if (!objc_msgSend(v30, "isHidden") || (objc_msgSend(v58, "isHidden") & 1) == 0)
              {
                v70 = -[UICollectionView _createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:](self, "_createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:", v35, v48, self->_layout, v30, 1);
                if (v70)
                {
                  v61 = v70;
                  v71 = v30[144];
                  v72 = 1;
                  if ((v71 & 2) != 0)
                    v72 = 2;
                  if ((v71 & 1) != 0)
                    v73 = 0;
                  else
                    v73 = v72;
                  -[_UICollectionViewSubviewCollection setView:ofKind:inCategory:atIndexPath:]((uint64_t)v109, (uint64_t)v70, (uint64_t)v35, v73, (uint64_t)v48);
                  v12 = v112;
LABEL_39:
                  LOBYTE(v106) = 1;
                  -[UICollectionView _viewAnimationsForView:startingLayoutAttributes:endingLayoutAttributes:startingLayout:endingLayout:animationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:](self, "_viewAnimationsForView:startingLayoutAttributes:endingLayoutAttributes:startingLayout:endingLayout:animationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:", v61, v30, v58, self->_layout, self->_layout, 0, 0, v106, 2);
                  v74 = (UICollectionViewAnimation *)objc_claimAutoreleasedReturnValue();
                  orthogonalScrollerController = (uint64_t)self->_orthogonalScrollerController;
                  objc_msgSend(v61, "_layoutAttributes");
                  v76 = (void *)objc_claimAutoreleasedReturnValue();
                  LOBYTE(orthogonalScrollerController) = -[_UICollectionViewOrthogonalScrollerSectionController isElementInOrthogonalScrollingSectionWithLayoutAttributes:](orthogonalScrollerController, v76);

                  if ((orthogonalScrollerController & 1) == 0)
                  {
                    v77 = self;
                    v123 = 0u;
                    v124 = 0u;
                    v121 = 0u;
                    v122 = 0u;
                    v113 = v74;
                    obj = v74;
                    v78 = -[UICollectionViewAnimation countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v121, v132, 16);
                    if (v78)
                    {
                      v79 = v78;
                      v80 = *(_QWORD *)v122;
                      do
                      {
                        v81 = 0;
                        do
                        {
                          if (*(_QWORD *)v122 != v80)
                            objc_enumerationMutation(obj);
                          v82 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * v81);
                          objc_msgSend(v61, "superview");
                          v83 = (id)objc_claimAutoreleasedReturnValue();
                          v84 = v58;
                          -[UICollectionView _subviewRouterForView:attributes:createIfNecessary:](v77, "_subviewRouterForView:attributes:createIfNecessary:", v61, v58, 0);
                          v85 = objc_claimAutoreleasedReturnValue();
                          v86 = (void *)v85;
                          if (v85)
                            v87 = *(void **)(v85 + 40);
                          else
                            v87 = 0;
                          v88 = v87;

                          if (v83 != v88)
                            objc_msgSend(v82, "setParentInCollectionViewDuringAnimation:", 1);

                          ++v81;
                          v58 = v84;
                        }
                        while (v79 != v81);
                        v89 = -[UICollectionViewAnimation countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v121, v132, 16);
                        v79 = v89;
                      }
                      while (v89);
                    }

                    v12 = v112;
                    v74 = v113;
                    self = v77;
                    v26 = v110;
                    v29 = v118;
                  }
                  if (-[UICollectionViewAnimation count](v74, "count") == 1)
                  {
                    +[_UICollectionViewItemKey collectionItemKeyForLayoutAttributes:]((uint64_t)_UICollectionViewItemKey, (uint64_t)v58);
                    v90 = (void *)objc_claimAutoreleasedReturnValue();
                    -[UICollectionViewAnimation objectAtIndexedSubscript:](v74, "objectAtIndexedSubscript:", 0);
                    v91 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v111, "setObject:forKey:", v91, v90);

                  }
                  objc_msgSend(v12, "addObjectsFromArray:", v74);
LABEL_64:
                  v28 = v115;
LABEL_65:

                  goto LABEL_68;
                }
                v28 = v115;
                v12 = v112;
LABEL_69:

                goto LABEL_70;
              }
            }
            else if (v61)
            {
              goto LABEL_39;
            }
            v28 = v115;
            goto LABEL_68;
          }
          v35 = v119;
          -[UICollectionViewUpdate validatedNewIndexPathForSupplementaryElementOfKind:oldIndexPath:]((uint64_t)currentUpdate, v119, v31);
          v47 = (void *)objc_claimAutoreleasedReturnValue();

          if (v47)
            goto LABEL_21;
LABEL_18:
          objc_msgSend(v30, "frame");
          v39 = v38;
          v41 = v40;
          v43 = v42;
          v45 = v44;
          layout = self->_layout;
          if ((v33 & 1) != 0)
            -[UICollectionViewLayout finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:](layout, "finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:", v119, v31);
          else
            -[UICollectionViewLayout finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:](layout, "finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:", v119, v31);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = v115;
          objc_msgSend(v92, "frame");
          v143.origin.x = v93;
          v143.origin.y = v94;
          v143.size.width = v95;
          v143.size.height = v96;
          v138.origin.x = v39;
          v138.origin.y = v41;
          v138.size.width = v43;
          v138.size.height = v45;
          v139 = CGRectUnion(v138, v143);
          v117 = (uint64_t)v92;
          -[UICollectionViewLayout _orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:](self->_layout, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v92, v139.origin.x, v139.origin.y, v139.size.width, v139.size.height);
          v144.origin.x = v97;
          v144.origin.y = v98;
          v144.size.width = v99;
          v144.size.height = v100;
          v140.origin.x = v19;
          v140.origin.y = v21;
          v140.size.width = v23;
          v140.size.height = v25;
          if (CGRectIntersectsRect(v140, v144))
          {
            -[UICollectionView _visibleSupplementaryViewOfKind:atIndexPath:isDecorationView:](self, "_visibleSupplementaryViewOfKind:atIndexPath:isDecorationView:", v119, v31, v33);
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            if (v58)
            {
              -[UICollectionViewLayout _animationForReusableView:toLayoutAttributes:type:](self->_layout, "_animationForReusableView:toLayoutAttributes:type:", v58, v92, 2);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              v74 = -[UICollectionViewAnimation initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:]([UICollectionViewAnimation alloc], "initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:", v58, 2, v92, 1, 1, v61, 0.0, 1.0);
              objc_msgSend(v12, "addObject:", v74);
              +[_UICollectionViewItemKey collectionItemKeyForLayoutAttributes:]((uint64_t)_UICollectionViewItemKey, v117);
              v101 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v114, "setObject:forKey:", v74, v101);

              v29 = v118;
              goto LABEL_65;
            }
            v29 = v118;
LABEL_68:
            v48 = (void *)v117;
            goto LABEL_69;
          }
          v48 = v92;
          v29 = v118;
LABEL_70:

        }
        ++v29;
      }
      while (v29 != v28);
      v105 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v125, v133, 16);
      v28 = v105;
    }
    while (v105);
  }

}

void __185__UICollectionView__createAndAppendViewAnimationsForExistingAndDeletedAuxiliariesInCurrentUpdate_disappearingAnimations_animationsForOnScreenViews_newSubviewCollection_oldVisibleViews___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v6;
  id v7;

  v7 = a5;
  if ((objc_msgSend(v7, "_isInUpdateAnimation") & 1) == 0
    && objc_msgSend(*(id *)(a1 + 32), "containsObject:", v7))
  {
    objc_msgSend(v7, "_layoutAttributes");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

  }
}

- (void)_createAndAppendViewAnimationsForInsertedAuxiliariesInCurrentUpdate:(id)a3 appearingAnimations:(id)a4 newSubviewCollection:(id)a5
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  NSMutableDictionary *insertedSupplementaryTopLevelIndexesDict;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  id obj;
  UICollectionView *v37;
  _QWORD v38[5];
  id v39;
  id v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD v46[2];
  UICollectionViewAnimation *(*v47)(uint64_t, void *);
  void *v48;
  UICollectionView *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v35 = a3;
  v34 = a4;
  v8 = a5;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v47 = __129__UICollectionView__createAndAppendViewAnimationsForInsertedAuxiliariesInCurrentUpdate_appearingAnimations_newSubviewCollection___block_invoke;
  v48 = &unk_1E16BD640;
  v49 = self;
  v51 = v9;
  v52 = v10;
  v53 = v11;
  v54 = v12;
  v32 = v8;
  v50 = v32;
  v37 = self;
  v13 = -[UICollectionViewData numberOfSections]((uint64_t)self->_currentUpdate->_newModel);
  if (v13 >= 1)
  {
    v14 = v13;
    v15 = 0;
    v33 = v13;
    do
    {
      if (!-[NSIndexSet containsIndex:](v37->_currentUpdate->_insertedSections, "containsIndex:", v15))
      {
        -[UICollectionViewData existingSupplementaryLayoutAttributesInSection:]((uint64_t)v37->_currentUpdate->_newModel, v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        obj = v16;
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v42, v55, 16);
        if (v17)
        {
          v18 = v17;
          v19 = *(_QWORD *)v43;
          do
          {
            for (i = 0; i != v18; ++i)
            {
              if (*(_QWORD *)v43 != v19)
                objc_enumerationMutation(obj);
              v21 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * i);
              objc_msgSend(v21, "indexPath");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              -[UIBarButtonItemGroup _items]((id *)v21);
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              -[NSMutableArray objectAtIndexedSubscript:](v37->_currentUpdate->_insertedSupplementaryIndexesSectionArray, "objectAtIndexedSubscript:", v15);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "objectForKey:", v23);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              v26 = objc_msgSend(v25, "containsIndex:", objc_msgSend(v22, "item"));

              if (v26)
              {
                v47((uint64_t)v46, v21);
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                if (v27)
                {
                  objc_msgSend(v35, "addObject:", v27);
                  +[_UICollectionViewItemKey collectionItemKeyForLayoutAttributes:]((uint64_t)_UICollectionViewItemKey, (uint64_t)v21);
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v34, "setObject:forKey:", v27, v28);

                }
              }

            }
            v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v55, 16);
          }
          while (v18);
        }

        v14 = v33;
      }
      ++v15;
    }
    while (v15 != v14);
  }
  insertedSupplementaryTopLevelIndexesDict = v37->_currentUpdate->_insertedSupplementaryTopLevelIndexesDict;
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = __129__UICollectionView__createAndAppendViewAnimationsForInsertedAuxiliariesInCurrentUpdate_appearingAnimations_newSubviewCollection___block_invoke_2;
  v38[3] = &unk_1E16BD690;
  v38[4] = v37;
  v39 = v35;
  v41 = v46;
  v40 = v34;
  v30 = v34;
  v31 = v35;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](insertedSupplementaryTopLevelIndexesDict, "enumerateKeysAndObjectsUsingBlock:", v38);

}

UICollectionViewAnimation *__129__UICollectionView__createAndAppendViewAnimationsForInsertedAuxiliariesInCurrentUpdate_appearingAnimations_newSubviewCollection___block_invoke(uint64_t a1, void *a2)
{
  unsigned __int16 *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  char v30;
  UICollectionViewAnimation *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  v3 = a2;
  v4 = v3;
  if (v3)
    v5 = (v3[144] >> 1) & 1;
  else
    v5 = 0;
  -[UIBarButtonItemGroup _items]((id *)v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "indexPath");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(void **)(*(_QWORD *)(a1 + 32) + 2072);
  if ((v5 & 1) != 0)
    objc_msgSend(v8, "initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:", v6, v7);
  else
    objc_msgSend(v8, "initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:", v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    v9 = (void *)objc_msgSend(v4, "copy");
    objc_msgSend(v9, "setAlpha:", 0.0);
  }
  objc_msgSend(v9, "frame");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  objc_msgSend(v4, "frame");
  v39.origin.x = v18;
  v39.origin.y = v19;
  v39.size.width = v20;
  v39.size.height = v21;
  v37.origin.x = v11;
  v37.origin.y = v13;
  v37.size.width = v15;
  v37.size.height = v17;
  v38 = CGRectUnion(v37, v39);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v4, v38.origin.x, v38.origin.y, v38.size.width, v38.size.height);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  if (objc_msgSend(v9, "isHidden") && objc_msgSend(v4, "isHidden"))
    v30 = dyld_program_sdk_at_least();
  else
    v30 = 0;
  v40.origin.x = v23;
  v40.origin.y = v25;
  v40.size.width = v27;
  v40.size.height = v29;
  v31 = 0;
  if (CGRectIntersectsRect(*(CGRect *)(a1 + 48), v40) && (v30 & 1) == 0)
  {
    v32 = objc_msgSend(*(id *)(a1 + 32), "_createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:", v6, v7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2072), v9, 1);
    if (v32)
    {
      v33 = (void *)v32;
      v34 = *(_QWORD *)(a1 + 40);
      if (v5)
        -[_UICollectionViewSubviewCollection setView:forDecorationOfKind:atIndexPath:](v34, (uint64_t)v33, (uint64_t)v6, (uint64_t)v7);
      else
        -[_UICollectionViewSubviewCollection setView:forSupplementaryOfKind:atIndexPath:](v34, (uint64_t)v33, (uint64_t)v6, (uint64_t)v7);
      objc_msgSend(*(id *)(a1 + 32), "_addControlledSubview:atZIndex:forced:initialAttributes:", v33, objc_msgSend(v4, "zIndex"), 0, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "_animationForReusableView:toLayoutAttributes:type:", v33, v4, 2);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = -[UICollectionViewAnimation initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:]([UICollectionViewAnimation alloc], "initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:", v33, 2, v4, 0, 0, v35, 0.0, 1.0);

    }
    else
    {
      v31 = 0;
    }
  }

  return v31;
}

void __129__UICollectionView__createAndAppendViewAnimationsForInsertedAuxiliariesInCurrentUpdate_appearingAnimations_newSubviewCollection___block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __129__UICollectionView__createAndAppendViewAnimationsForInsertedAuxiliariesInCurrentUpdate_appearingAnimations_newSubviewCollection___block_invoke_3;
  v7[3] = &unk_1E16BD668;
  v5 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 56);
  v10 = a2;
  v11 = v6;
  v8 = v5;
  v9 = *(id *)(a1 + 48);
  objc_msgSend(a3, "enumerateIndexesUsingBlock:", v7);

}

void __129__UICollectionView__createAndAppendViewAnimationsForInsertedAuxiliariesInCurrentUpdate_appearingAnimations_newSubviewCollection___block_invoke_3(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  -[UICollectionViewData knownDecorationElementKinds](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2200) + 24));
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v11, "containsObject:", *(_QWORD *)(a1 + 56));
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathWithIndex:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2200) + 24);
  v7 = *(_QWORD *)(a1 + 56);
  if ((v4 & 1) != 0)
    -[UICollectionViewData layoutAttributesForDecorationViewOfKind:atIndexPath:](v6, v7, v5);
  else
    -[UICollectionViewData layoutAttributesForSupplementaryElementOfKind:atIndexPath:](v6, v7, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);
    +[_UICollectionViewItemKey collectionItemKeyForLayoutAttributes:]((uint64_t)_UICollectionViewItemKey, (uint64_t)v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "setObject:forKey:", v9, v10);

  }
}

- (void)_createAndAppendViewAnimationsForNewlyVisibleAuxiliariesInCurrentUpdate:(id)a3 appearingAnimations:(id)a4 animationsForOnScreenViews:(id)a5 newSubviewCollection:(id)a6 attributesForNewModel:(id)a7
{
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t oldModel;
  void *v31;
  UICollectionViewLayout *layout;
  char v33;
  id v34;
  void *v35;
  UICollectionViewAnimation *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  UICollectionView *v45;
  void *v46;
  id obj;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v40 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = v12;
  v39 = v14;
  v16 = a7;
  if (dyld_program_sdk_at_least()
    && -[UICollectionViewLayout _wantsAnimationsForOffscreenAuxillaries](self->_layout, "_wantsAnimationsForOffscreenAuxillaries"))
  {
    v45 = self;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v38 = v16;
    obj = v16;
    v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v52, 16);
    if (!v17)
      goto LABEL_41;
    v18 = v17;
    v19 = *(_QWORD *)v49;
    v42 = v15;
    v43 = v13;
    while (1)
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v49 != v19)
          objc_enumerationMutation(obj);
        v21 = *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * v20);
        if (v21)
        {
          v22 = *(_WORD *)(v21 + 288);
          if ((v22 & 2) != 0 || (v22 & 3) == 0)
          {
            +[_UICollectionViewItemKey collectionItemKeyForLayoutAttributes:]((uint64_t)_UICollectionViewItemKey, *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * v20));
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "objectForKey:", v23);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            if (v24)
              goto LABEL_12;
            objc_msgSend(v15, "objectForKey:", v23);
            v25 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v25)
            {
              -[UIBarButtonItemGroup _items]((id *)v21);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend((id)v21, "indexPath");
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionViewUpdate validatedOldIndexPathForSupplementaryElementOfKind:newIndexPath:]((uint64_t)v45->_currentUpdate, v24, v44);
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionView _visibleSupplementaryViewOfKind:atIndexPath:isDecorationView:](v45, "_visibleSupplementaryViewOfKind:atIndexPath:isDecorationView:", v24);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v26)
                goto LABEL_45;
              v27 = v26;
              v28 = objc_msgSend(v26, "section");
              v29 = v28 < -[UICollectionViewData numberOfSections]((uint64_t)v45->_currentUpdate->_oldModel);
              v26 = v27;
              if (!v29 && objc_msgSend(v27, "item") != 0x7FFFFFFFFFFFFFFFLL)
                goto LABEL_45;
              oldModel = (uint64_t)v45->_currentUpdate->_oldModel;
              if ((v22 & 2) != 0)
                -[UICollectionViewData layoutAttributesForDecorationViewOfKind:atIndexPath:](oldModel, (uint64_t)v24, v27);
              else
                -[UICollectionViewData layoutAttributesForSupplementaryElementOfKind:atIndexPath:](oldModel, (uint64_t)v24, v27);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v31)
              {
LABEL_45:
                objc_msgSend(v46, "_layoutAttributes");
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v31)
                {
                  layout = v45->_layout;
                  if ((v22 & 2) != 0)
                    -[UICollectionViewLayout initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:](layout, "initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:", v24, v44);
                  else
                    -[UICollectionViewLayout initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:](layout, "initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:", v24, v44);
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  if (!v31)
                  {
                    v31 = (void *)objc_msgSend((id)v21, "copy");
                    objc_msgSend(v31, "setAlpha:", 0.0);
                  }
                }
              }
              v33 = objc_msgSend((id)v21, "isHidden");
              if (v26 && (v33 & 1) == 0 && !v46)
              {
                v41 = v26;
                v34 = -[UICollectionView _createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:](v45, "_createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:", v24, v44, v45->_layout, v31, 1);
                if (v34)
                {
                  if ((v22 & 2) != 0)
                    -[_UICollectionViewSubviewCollection setView:forDecorationOfKind:atIndexPath:]((uint64_t)v39, (uint64_t)v34, (uint64_t)v24, (uint64_t)v44);
                  else
                    -[_UICollectionViewSubviewCollection setView:forSupplementaryOfKind:atIndexPath:]((uint64_t)v39, (uint64_t)v34, (uint64_t)v24, (uint64_t)v44);
                  -[UICollectionViewLayout _animationForReusableView:toLayoutAttributes:type:](v45->_layout, "_animationForReusableView:toLayoutAttributes:type:", v34, v21, 2);
                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                  v36 = -[UICollectionViewAnimation initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:]([UICollectionViewAnimation alloc], "initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:", v34, 2, v21, 0, 0, v35, 0.0, 1.0);
                  objc_msgSend(v43, "setObject:forKey:", v36, v23);
                  objc_msgSend(v40, "addObject:", v36);

                }
                v26 = v41;
              }

              v15 = v42;
              v13 = v43;
LABEL_12:

            }
          }
        }
        ++v20;
      }
      while (v18 != v20);
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v52, 16);
      v18 = v37;
      if (!v37)
      {
LABEL_41:

        v16 = v38;
        break;
      }
    }
  }

}

void __94__UICollectionView__updateOrderingOfViewsInDisappearingViewAnimations_onScreenViewAnimations___block_invoke_759(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  int has_internal_diagnostics;
  int v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v19;
  void *v20;
  void *v21;
  NSObject *v22;
  unint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = objc_msgSend(v4, "deleteAfterAnimation");
  if (has_internal_diagnostics)
  {
    if (v6)
    {
      __UIFaultDebugAssertLog();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      {
        v26 = *(_QWORD *)(a1 + 32);
        v27 = 138412546;
        v28 = v26;
        v29 = 2112;
        v30 = v4;
        _os_log_fault_impl(&dword_185066000, v22, OS_LOG_TYPE_FAULT, "UICollectionView internal inconsistency: on-screen view is unexpectedly scheduled to delete after its animation completes. Collection view: %@; Animation: %@",
          (uint8_t *)&v27,
          0x16u);
      }

    }
  }
  else if (v6)
  {
    v23 = _UIInternalPreference_CollectionViewShouldComputeVisibleBoundsForCurrentUpdateAfterPreparingLayout_block_invoke_10___s_category[0];
    if (!_UIInternalPreference_CollectionViewShouldComputeVisibleBoundsForCurrentUpdateAfterPreparingLayout_block_invoke_10___s_category[0])
    {
      v23 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v23, _UIInternalPreference_CollectionViewShouldComputeVisibleBoundsForCurrentUpdateAfterPreparingLayout_block_invoke_10___s_category);
    }
    v24 = *(NSObject **)(v23 + 8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_QWORD *)(a1 + 32);
      v27 = 138412546;
      v28 = v25;
      v29 = 2112;
      v30 = v4;
      _os_log_impl(&dword_185066000, v24, OS_LOG_TYPE_ERROR, "UICollectionView internal inconsistency: on-screen view is unexpectedly scheduled to delete after its animation completes. Collection view: %@; Animation: %@",
        (uint8_t *)&v27,
        0x16u);
    }
  }
  objc_msgSend(v4, "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "_layoutAttributes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "frame");
  v10 = v9;
  v12 = v11;
  objc_msgSend(v4, "finalLayoutAttributes");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "frame");
  v15 = vabdd_f64(v10, v14);
  v17 = vabdd_f64(v12, v16);

  if (v15 >= 0.00000011920929 || v17 >= 0.00000011920929)
  {
    v19 = *(_QWORD *)(a1 + 40);
    objc_msgSend(v7, "_layoutAttributes");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "finalLayoutAttributes");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, void *, void *))(v19 + 16))(v19, v20, v21, v7);

  }
}

- (void)_setupExpandCollapseAnimationsIfNeededWithContext:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  -[UICollectionView dataSource](self, "dataSource");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  v6 = v9;
  if ((v5 & 1) != 0)
  {
    -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_expandCollapseAnimationContextForCollectionView:", self);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
      _UICollectionViewSetupExpandCollapseAnimations(self, v9, v8);

    v6 = v9;
  }

}

uint64_t __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_776(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  int v11;
  unsigned int v12;
  void *v13;
  id *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;

  objc_msgSend(*(id *)(a1 + 32), "contentOffset");
  v3 = v2;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 2200);
  v8 = *(double *)(v7 + 48);
  v9 = *(double *)(v7 + 56);
  v10 = *(unsigned __int16 *)(v6 + 2656) | (*(unsigned __int8 *)(v6 + 2658) << 16);
  *(_WORD *)(v6 + 2656) = *(_WORD *)(v6 + 2656);
  *(_BYTE *)(v6 + 2658) = (v10 | 0x10000u) >> 16;
  objc_msgSend((id)v6, "setContentOffset:", v8, v9);
  v11 = *(unsigned __int16 *)(v6 + 2656);
  v12 = (v11 | (*(unsigned __int8 *)(v6 + 2658) << 16)) & 0xFFFEFFFF;
  *(_WORD *)(v6 + 2656) = v11;
  *(_BYTE *)(v6 + 2658) = (v12 | v10 & 0x10000) >> 16;
  v13 = (void *)_UISetCurrentFallbackEnvironment(*(void **)(a1 + 32));
  v14 = -[_UICollectionViewAnimationContext initWithDataSourceTranslator:updates:layout:]((id *)[_UICollectionViewAnimationContext alloc], *(void **)(*(_QWORD *)(a1 + 32) + 2200), *(void **)(a1 + 48), *(void **)(*(_QWORD *)(a1 + 32) + 2072));
  -[_UICollectionViewAnimator setAnimationContext:](*(_QWORD *)(a1 + 40), v14);

  v15 = *(void **)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
    objc_msgSend(v15, "_viewAnimationsForCurrentUpdateWithCollectionViewAnimator:updatingContentOffsetForRestorationAnchor:", v16, 1);
  else
    objc_msgSend(v15, "_viewAnimationsForCurrentUpdate");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIViewAnimationContext setViewAnimations:](*(_QWORD *)(a1 + 56), v17);

  -[UIBarButtonItemGroup _items](*(id **)(a1 + 40));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "_setCollectionViewAnimationContext:", v18);

  result = _UIRestorePreviousFallbackEnvironment(v13);
  v20 = *(_QWORD *)(a1 + 32);
  if (v20)
  {
    v21 = *(unsigned __int16 *)(v20 + 2656) | (*(unsigned __int8 *)(v20 + 2658) << 16);
    *(_WORD *)(v20 + 2656) = *(_WORD *)(v20 + 2656);
    *(_BYTE *)(v20 + 2658) = (v21 | 0x10000u) >> 16;
    result = objc_msgSend((id)v20, "setContentOffset:", v3, v5);
    v22 = *(unsigned __int16 *)(v20 + 2656);
    v23 = (v22 | (*(unsigned __int8 *)(v20 + 2658) << 16)) & 0xFFFEFFFF;
    *(_WORD *)(v20 + 2656) = v22;
    *(_BYTE *)(v20 + 2658) = (v23 | v21 & 0x10000) >> 16;
  }
  return result;
}

uint64_t __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_778(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateAnimationDidStop:finished:", *(_QWORD *)(a1 + 40), a2);
}

uint64_t __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_2_779(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_782(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

uint64_t __102__UICollectionView__updateWithItems_tentativelyForReordering_propertyAnimator_collectionViewAnimator___block_invoke_2_783(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (BOOL)_isFocusedViewInDeletedSectionOrItem
{
  uint64_t v3;
  id *v4;
  UICollectionViewUpdate *currentUpdate;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  UICollectionViewUpdate *v10;
  NSMutableDictionary *deletedSupplementaryTopLevelIndexesDict;
  id v12;
  void *v13;
  id v14;
  char v15;
  id v16;

  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (id *)v3;
  if (v3)
  {
    currentUpdate = self->_currentUpdate;
    if (currentUpdate)
    {
      v6 = *(_QWORD *)(v3 + 32);
      v7 = *(id *)(v3 + 16);
      v8 = v7;
      if (v6)
      {
        v9 = objc_msgSend(v7, "length");

        v10 = self->_currentUpdate;
        if (v9 == 1)
        {
          deletedSupplementaryTopLevelIndexesDict = v10->_deletedSupplementaryTopLevelIndexesDict;
          v12 = v4[3];
          -[NSMutableDictionary objectForKeyedSubscript:](deletedSupplementaryTopLevelIndexesDict, "objectForKeyedSubscript:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          v14 = v4[2];
          v15 = objc_msgSend(v13, "containsIndex:", objc_msgSend(v14, "indexAtPosition:", 0));

LABEL_10:
          goto LABEL_11;
        }
        v8 = v4[3];
        v16 = v4[2];
        -[UICollectionViewUpdate validatedNewIndexPathForSupplementaryElementOfKind:oldIndexPath:]((uint64_t)v10, v8, v16);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        -[UICollectionViewUpdate finalIndexPathForInitialIndexPath:](currentUpdate, "finalIndexPathForInitialIndexPath:", v7);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
      }

      v15 = v13 == 0;
      goto LABEL_10;
    }
  }
  v15 = 0;
LABEL_11:

  return v15;
}

- (void)_startViewAnimationsWithContext:(id)a3 oldVisibleViews:(id)a4 viewAnimator:(id)a5 viewAnimationsCompletedDispatchGroup:(id)a6
{
  _QWORD *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  _WORD *v29;
  _WORD *v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;
  id v35;
  id obj;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[5];
  _QWORD *v43;
  NSObject *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v35 = a4;
  v37 = a5;
  v11 = a6;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  if (v10)
    v12 = (void *)v10[1];
  else
    v12 = 0;
  obj = v12;
  v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v46;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v46 != v15)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
        objc_msgSend(v17, "view");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_msgSend(v18, "_addUpdateAnimation");
          objc_msgSend(v35, "removeObject:", v18);
          if ((objc_msgSend(v17, "deleteAfterAnimation") & 1) == 0)
          {
            objc_msgSend(v17, "finalLayoutAttributes");
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            if (v19)
            {
              objc_msgSend(v17, "finalLayoutAttributes");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              -[UICollectionView _setVisibleView:forLayoutAttributes:](self, "_setVisibleView:forLayoutAttributes:", v18, v20);

            }
          }
        }
        -[UICollectionView _incrementUpdateAnimationCountWithContext:](self, "_incrementUpdateAnimationCountWithContext:", v10);
        if (v11)
          dispatch_group_enter(v11);
        v42[0] = MEMORY[0x1E0C809B0];
        v42[1] = 3221225472;
        v42[2] = __118__UICollectionView__startViewAnimationsWithContext_oldVisibleViews_viewAnimator_viewAnimationsCompletedDispatchGroup___block_invoke;
        v42[3] = &unk_1E16B2B40;
        v42[4] = self;
        v43 = v10;
        v44 = v11;
        objc_msgSend(v17, "addCompletionHandler:", v42);
        v21 = (void *)objc_msgSend(v37, "copy");
        objc_msgSend(v17, "startWithAnimator:", v21);

      }
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
    }
    while (v14);
  }

  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v22 = v35;
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v38, v49, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v39;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v39 != v25)
          objc_enumerationMutation(v22);
        v27 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v26);
        v28 = objc_msgSend(v27, "_isInUpdateAnimation");
        objc_msgSend(v27, "_layoutAttributes");
        v29 = (_WORD *)objc_claimAutoreleasedReturnValue();
        v30 = v29;
        if ((v28 & 1) != 0)
        {

          if (!v30)
            goto LABEL_31;
          objc_msgSend(v27, "_layoutAttributes");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          -[UICollectionView _setVisibleView:forLayoutAttributes:](self, "_setVisibleView:forLayoutAttributes:", v27, v31);
          goto LABEL_29;
        }
        if (!v29 || (v32 = v29[144], v29, (v32 & 1) == 0))
        {
          -[UICollectionView _reuseSupplementaryView:](self, "_reuseSupplementaryView:", v27);
          goto LABEL_31;
        }
        if (dyld_program_sdk_at_least())
        {
          objc_msgSend(v27, "_layoutAttributes");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "indexPath");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          -[UICollectionView _cacheOrReuseCell:forIndexPath:invalidatePreferredAttributes:notifyDidEndDisplaying:](self, "_cacheOrReuseCell:forIndexPath:invalidatePreferredAttributes:notifyDidEndDisplaying:", v27, v33, 1, 1);

LABEL_29:
          goto LABEL_31;
        }
        -[UICollectionView _reuseCell:](self, "_reuseCell:", v27);
LABEL_31:
        ++v26;
      }
      while (v24 != v26);
      v34 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v38, v49, 16);
      v24 = v34;
    }
    while (v34);
  }

}

void __118__UICollectionView__startViewAnimationsWithContext_oldVisibleViews_viewAnimator_viewAnimationsCompletedDispatchGroup___block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  objc_msgSend(*(id *)(a1 + 32), "_updateAnimationDidStop:finished:", *(_QWORD *)(a1 + 40), a2);
  v3 = *(NSObject **)(a1 + 48);
  if (v3)
    dispatch_group_leave(v3);
}

- (void)_endUpdatesWithInvalidationContext:(id)a3 tentativelyForReordering:(BOOL)a4 animator:(id)a5
{
  -[UICollectionView _endUpdatesWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:](self, "_endUpdatesWithInvalidationContext:tentativelyForReordering:animator:collectionViewAnimator:", a3, a4, a5, 0);
}

- (void)performBatchUpdates:(id)a3 withAnimator:(id)a4
{
  -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:](self, "_performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:", a3, 0, 0, 0, a4, 0);
}

- (void)_performBatchUpdates:(id)a3 completion:(id)a4 invalidationContext:(id)a5
{
  -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:](self, "_performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:", a3, a4, a5, 0, 0, 0);
}

- (void)_performBatchUpdates:(id)a3 completion:(id)a4 invalidationContext:(id)a5 tentativelyForReordering:(BOOL)a6
{
  -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:](self, "_performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:", a3, a4, a5, a6, 0, 0);
}

- (void)_performBatchUpdates:(id)a3 completion:(id)a4 invalidationContext:(id)a5 tentativelyForReordering:(BOOL)a6 animator:(id)a7
{
  -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:](self, "_performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:", a3, a4, a5, a6, a7, 0);
}

void __49__UICollectionView__invalidateLayoutWithContext___block_invoke(uint64_t a1)
{
  -[UICollectionViewData invalidate:](*(_QWORD *)(a1 + 32), 1);
}

void __49__UICollectionView__invalidateLayoutWithContext___block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    *(_BYTE *)(a3 + 8) |= 3u;
}

uint64_t __46__UICollectionView_setSelfSizingInvalidation___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_setAutomaticIntrinsicContentSizeInvalidationEnabled:", *(unsigned __int8 *)(a1 + 32));
}

- (UICollectionViewSelfSizingInvalidation)selfSizingInvalidation
{
  return ((unint64_t)*((unsigned __int16 *)&self->_collectionViewFlags + 8) >> 2) & 3;
}

void __79__UICollectionView__recomputePreferredAttributesForInvalidatedElementsIfNeeded__block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        if (objc_msgSend(*(id *)(a1 + 32), "_isSectionValidInIndexPath:", v11))
        {
          -[_UICollectionViewSubviewManager visibleSupplementaryOfKind:atIndexPath:](*(uint64_t **)(*(_QWORD *)(a1 + 32) + 2904), (uint64_t)v5, (uint64_t)v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          -[UICollectionViewData layoutAttributesForSupplementaryElementOfKind:atIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192), (uint64_t)v5, v11);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 32), "_recomputePreferredAttributesForInvalidatedView:originalAttributes:", v12, v13);

        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v8);
  }

}

- (id)_setupAnimationsForResizedViewsWithOldModel:(id)a3
{
  UICollectionViewData *collectionViewData;
  id v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  UICollectionViewUpdate *v10;
  UICollectionViewData *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  UICollectionViewUpdate *v18;
  UICollectionViewUpdate *currentUpdate;
  UICollectionViewUpdate *v20;
  UICollectionViewUpdate *v21;
  uint64_t v22;
  UICollectionViewUpdate *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  UICollectionViewUpdate *v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  void *v33;
  id v34;
  UICollectionView *v35;

  collectionViewData = self->_collectionViewData;
  v5 = a3;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  -[UICollectionViewData validateLayoutInRect:]((uint64_t)collectionViewData, v6, v7, v8, v9);
  v10 = [UICollectionViewUpdate alloc];
  v11 = self->_collectionViewData;
  -[UIScrollView contentOffset](self, "contentOffset");
  v13 = v12;
  v15 = v14;
  -[UIScrollView contentOffset](self, "contentOffset");
  v18 = (UICollectionViewUpdate *)-[UICollectionViewUpdate initWithCollectionView:updateItems:moveItemSourceIndexPaths:oldModel:newModel:oldContentOffset:newContentOffset:]((id *)&v10->super.isa, self, MEMORY[0x1E0C9AA60], 0, v5, v11, v13, v15, v16, v17);

  currentUpdate = self->_currentUpdate;
  self->_currentUpdate = v18;

  v20 = self->_currentUpdate;
  if (v20)
  {
    *(_BYTE *)&v20->_flags |= 2u;
    v21 = self->_currentUpdate;
  }
  else
  {
    v21 = 0;
  }
  v22 = MEMORY[0x1E0C9AA60];
  -[UICollectionViewLayout _prepareForCollectionViewUpdates:withDataSourceTranslator:](self->_layout, "_prepareForCollectionViewUpdates:withDataSourceTranslator:", MEMORY[0x1E0C9AA60], v21);
  -[UICollectionViewLayout _prepareForCollectionViewUpdates:animated:](self->_layout, "_prepareForCollectionViewUpdates:animated:", v22, 1);
  v23 = self->_currentUpdate;
  if (v23)
    *(_BYTE *)&v23->_flags |= 1u;
  v24 = -[UIViewAnimationContext initWithCompletionHandler:]([UIViewAnimationContext alloc], 0);
  v30 = MEMORY[0x1E0C809B0];
  v31 = 3221225472;
  v32 = __64__UICollectionView__setupAnimationsForResizedViewsWithOldModel___block_invoke;
  v33 = &unk_1E16B1B50;
  v25 = v24;
  v34 = v25;
  v35 = self;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", &v30);
  -[UICollectionView _incrementUpdateAnimationCountWithContext:](self, "_incrementUpdateAnimationCountWithContext:", v25, v30, v31, v32, v33);
  -[_UICollectionViewSubviewManager allVisibleViewsHashTable]((uint64_t *)self->_subviewManager);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UICollectionViewSubviewManager removeAllVisibleViews]((uint64_t)self->_subviewManager);
  -[UICollectionView _startViewAnimationsWithContext:oldVisibleViews:viewAnimator:viewAnimationsCompletedDispatchGroup:](self, "_startViewAnimationsWithContext:oldVisibleViews:viewAnimator:viewAnimationsCompletedDispatchGroup:", v25, v26, 0, 0);
  -[UICollectionViewData finalizeCollectionViewUpdates]((uint64_t)self->_collectionViewData);
  -[UICollectionViewLayout _finalizeCollectionViewUpdate:](self->_layout, "_finalizeCollectionViewUpdate:", self->_currentUpdate);
  v27 = self->_currentUpdate;
  self->_currentUpdate = 0;

  v28 = v25;
  return v28;
}

void __64__UICollectionView__setupAnimationsForResizedViewsWithOldModel___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 40), "_viewAnimationsForCurrentUpdateWithCollectionViewAnimator:updatingContentOffsetForRestorationAnchor:", 0, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  -[UIViewAnimationContext setViewAnimations:](*(_QWORD *)(a1 + 32), v2);

}

- (void)_accessibilitySetInterfaceStyleIntent:(unint64_t)a3
{
  void *v4;
  objc_super v5;

  v5.receiver = self;
  v5.super_class = (Class)UICollectionView;
  -[UIView _accessibilitySetInterfaceStyleIntent:](&v5, sel__accessibilitySetInterfaceStyleIntent_, a3);
  -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "invalidateLayout");

}

- (void)_unhighlightAllItems
{
  _UICollectionViewSelectionController *selectionController;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  selectionController = self->_selectionController;
  if (selectionController)
    v4 = (void *)-[NSMutableSet copy](selectionController->_highlightedIndexPaths, "copy");
  else
    v4 = 0;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        -[UICollectionView _unhighlightItemAtIndexPath:animated:notifyDelegate:](self, "_unhighlightItemAtIndexPath:animated:notifyDelegate:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8++), 0, 1);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

- (id)_selectableIndexPathForItemContainingHitView:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;

  v4 = a3;
  if (!v4)
    goto LABEL_9;
  do
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      break;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      break;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_msgSend(v4, "isTracking") & 1) != 0)
      goto LABEL_9;
    objc_msgSend(v4, "superview");
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (id)v5;
  }
  while (v5);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
LABEL_9:
    v6 = 0;
  }

  return v6;
}

- (BOOL)_shouldDeselectItemsOnTouchesBegan
{
  return dyld_program_sdk_at_least() ^ 1;
}

- (void)touchesBegan:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  char v11;
  objc_super *v12;
  NSIndexPath **p_pendingSelectionIndexPath;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSMutableSet *pendingDeselectionIndexPaths;
  NSIndexPath *v19;
  NSMutableSet *v20;
  NSMutableSet *v21;
  _UICollectionViewSelectionController *selectionController;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  NSIndexPath **v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  unsigned int v35;
  objc_super v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  UICollectionView *v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[UICollectionView _currentTouch](self, "_currentTouch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = v8;
    if (objc_msgSend(v8, "phase") != 4 && objc_msgSend(v9, "phase") != 3)
      goto LABEL_9;

    -[UICollectionView _cancelTouches](self, "_cancelTouches");
  }
  if ((_UITouchesContainsTouchFromExternalTouchpad(v6) & 1) != 0)
  {
LABEL_8:
    v9 = 0;
LABEL_9:
    v41 = self;
    v12 = (objc_super *)&v41;
    goto LABEL_25;
  }
  v10 = v7;
  if (objc_msgSend(v10, "_buttonMask"))
  {
    v11 = objc_msgSend(v10, "_buttonMask");

    if ((v11 & 1) == 0)
      goto LABEL_8;
  }
  else
  {

  }
  objc_msgSend(v6, "anyObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _setCurrentTouch:](self, "_setCurrentTouch:", v9);
  if (v9)
  {
    p_pendingSelectionIndexPath = &self->_pendingSelectionIndexPath;
    if (!self->_pendingSelectionIndexPath)
    {
      objc_msgSend(v9, "view");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView _selectableIndexPathForItemContainingHitView:](self, "_selectableIndexPathForItemContainingHitView:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (v15)
      {
        if (-[UICollectionView _allowsEffectiveSelectionOrCustomActionAtIndexPath:](self, "_allowsEffectiveSelectionOrCustomActionAtIndexPath:", v15))
        {
          objc_storeStrong((id *)&self->_pendingSelectionIndexPath, v15);
          -[UIView traitCollection](self, "traitCollection");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = _UIShouldAnimateDefaultCellHighlightAndSelection(v16);

          if (-[UIScrollView isDragging](self, "isDragging")
            || !-[UICollectionView _highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:playFeedback:](self, "_highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:playFeedback:", *p_pendingSelectionIndexPath, v17, 0, 1, 1))
          {
            v19 = *p_pendingSelectionIndexPath;
            *p_pendingSelectionIndexPath = 0;

          }
          else if (-[UICollectionView _shouldDeselectItemsOnTouchesBegan](self, "_shouldDeselectItemsOnTouchesBegan"))
          {
            pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
            if (pendingDeselectionIndexPaths)
            {
              -[NSMutableSet removeAllObjects](pendingDeselectionIndexPaths, "removeAllObjects");
            }
            else
            {
              v20 = (NSMutableSet *)objc_alloc_init(MEMORY[0x1E0C99E20]);
              v21 = self->_pendingDeselectionIndexPaths;
              self->_pendingDeselectionIndexPaths = v20;

            }
            if (!-[UICollectionView _allowsEffectiveMultipleSelection](self, "_allowsEffectiveMultipleSelection"))
            {
              v39 = 0u;
              v40 = 0u;
              v37 = 0u;
              v38 = 0u;
              selectionController = self->_selectionController;
              v33 = v15;
              v34 = v14;
              v35 = v17;
              v32 = v7;
              if (selectionController)
                v23 = (void *)-[NSMutableSet copy](selectionController->_selectedIndexPaths, "copy");
              else
                v23 = 0;
              v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
              if (v24)
              {
                v25 = v24;
                v26 = *(_QWORD *)v38;
                do
                {
                  for (i = 0; i != v25; ++i)
                  {
                    if (*(_QWORD *)v38 != v26)
                      objc_enumerationMutation(v23);
                    v28 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
                    if ((objc_msgSend(v28, "isEqual:", *p_pendingSelectionIndexPath) & 1) == 0)
                    {
                      -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v28);
                      v29 = p_pendingSelectionIndexPath;
                      v30 = v23;
                      v31 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v31, "_setSelected:animated:", 0, v35);

                      v23 = v30;
                      p_pendingSelectionIndexPath = v29;
                      -[NSMutableSet addObject:](self->_pendingDeselectionIndexPaths, "addObject:", v28);
                    }
                  }
                  v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
                }
                while (v25);
              }

              v15 = v33;
              v14 = v34;
              v7 = v32;
            }
          }
        }
      }
      else if (!-[UICollectionView _allowsEffectiveMultipleSelection](self, "_allowsEffectiveMultipleSelection"))
      {
        -[UICollectionView _unhighlightAllItems](self, "_unhighlightAllItems");
      }

    }
  }
  v36.receiver = self;
  v12 = &v36;
LABEL_25:
  v12->super_class = (Class)UICollectionView;
  -[objc_super touchesBegan:withEvent:](v12, sel_touchesBegan_withEvent_, v6, v7);

}

- (void)touchesMoved:(id)a3 withEvent:(id)a4
{
  id v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  _BOOL4 v22;
  int v23;
  id v24;
  CGPoint v25;
  CGRect v26;

  v5 = a3;
  -[UICollectionView _currentTouch](self, "_currentTouch");
  v24 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "containsObject:", v24);

  v7 = v24;
  if (v6)
  {
    -[UIView traitCollection](self, "traitCollection");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = _UIShouldAnimateDefaultCellHighlightAndSelection(v8);

    if (self->_pendingSelectionIndexPath)
    {
      -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (v10)
      {
        objc_msgSend(v10, "bounds");
        v13 = v12;
        v15 = v14;
        v17 = v16;
        v19 = v18;
        objc_msgSend(v24, "locationInView:", v11);
        v25.x = v20;
        v25.y = v21;
        v26.origin.x = v13;
        v26.origin.y = v15;
        v26.size.width = v17;
        v26.size.height = v19;
        v22 = CGRectContainsPoint(v26, v25);
        v23 = objc_msgSend(v11, "isHighlighted");
        if (v22)
        {
          if ((v23 & 1) == 0)
            -[UICollectionView _highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:playFeedback:](self, "_highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:playFeedback:", self->_pendingSelectionIndexPath, v9, 0, 1, 1);
        }
        else if (v23)
        {
          -[UICollectionView _unhighlightItemAtIndexPath:animated:notifyDelegate:](self, "_unhighlightItemAtIndexPath:animated:notifyDelegate:", self->_pendingSelectionIndexPath, v9, 1);
        }
      }
    }
    else
    {
      v11 = 0;
    }

    v7 = v24;
  }

}

- (void)_userSelectItemAtIndexPath:(id)a3
{
  void *v5;
  int v6;
  void *v7;
  id v8;
  _QWORD v9[6];

  -[UIView traitCollection](self, "traitCollection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = _UIShouldAnimateDefaultCellHighlightAndSelection(v5);

  if (v6)
  {
    -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __47__UICollectionView__userSelectItemAtIndexPath___block_invoke;
      v9[3] = &unk_1E16BD8B0;
      v9[4] = self;
      v9[5] = a3;
      objc_msgSend(v7, "_performConfigurationStateModifications:", v9);
    }
    else
    {
      -[UICollectionView _userSelectItemAtIndexPath:animatedSelection:](self, "_userSelectItemAtIndexPath:animatedSelection:", a3, 0);
    }

  }
  else
  {
    -[UICollectionView _userSelectItemAtIndexPath:animatedSelection:](self, "_userSelectItemAtIndexPath:animatedSelection:", a3, 0);
  }
}

uint64_t __47__UICollectionView__userSelectItemAtIndexPath___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_userSelectItemAtIndexPath:animatedSelection:", *(_QWORD *)(a1 + 40), 1);
}

- (void)_userSelectItemAtIndexPath:(id)a3 animatedSelection:(BOOL)a4
{
  _BOOL8 v4;
  int v7;
  char v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v4 = a4;
  -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v12, "isSelected");
  if (v12 && objc_msgSend(v12, "_hasCustomSelectionAction"))
  {
    v8 = 1;
    -[UICollectionView _unhighlightItemAtIndexPath:animated:notifyDelegate:](self, "_unhighlightItemAtIndexPath:animated:notifyDelegate:", a3, 0, 1);
  }
  else
  {
    v9 = -[UICollectionView _canPerformPrimaryActionForItemAtIndexPath:](self, "_canPerformPrimaryActionForItemAtIndexPath:", a3);
    v10 = 1;
    -[UICollectionView _unhighlightItemAtIndexPath:animated:notifyDelegate:](self, "_unhighlightItemAtIndexPath:animated:notifyDelegate:", a3, v9, 1);
    v8 = 0;
    if (v9)
    {
LABEL_8:
      LOBYTE(v11) = v8;
      -[UICollectionView _selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:](self, "_selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:", a3, v4, 0, 1, v10, v10, v11);
      goto LABEL_9;
    }
  }
  if ((-[UICollectionView _allowsEffectiveMultipleSelection](self, "_allowsEffectiveMultipleSelection") & v7) != 1)
  {
    v10 = 0;
    goto LABEL_8;
  }
  -[UICollectionView _deselectItemAtIndexPath:animated:notifyDelegate:](self, "_deselectItemAtIndexPath:animated:notifyDelegate:", a3, v4, 1);
LABEL_9:

}

- (void)_springLoadedInteractionSelectItemAtIndexPath:(id)a3
{
  void *v5;
  _BOOL8 v6;
  char v7;
  uint64_t v8;
  id v9;

  -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v5;
  if (v5 && (objc_msgSend(v5, "_hasCustomSelectionAction") & 1) != 0)
  {
    v6 = 0;
    v7 = 1;
  }
  else
  {
    v6 = -[UICollectionView _canPerformPrimaryActionForItemAtIndexPath:](self, "_canPerformPrimaryActionForItemAtIndexPath:", a3);
    v7 = 0;
  }
  LOBYTE(v8) = v7;
  -[UICollectionView _selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:](self, "_selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:", a3, 0, 0, 1, 0, v6, v8);

}

- (void)_multiSelectInteractionSelectItemAtIndexPath:(id)a3
{
  uint64_t v3;

  LOBYTE(v3) = 0;
  -[UICollectionView _selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:](self, "_selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:", a3, 0, 0, 1, 0, 0, v3);
}

- (void)touchesEnded:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  void *v8;
  BOOL v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  uint64_t v23;
  void *v24;
  BOOL v25;
  NSIndexPath *pendingSelectionIndexPath;
  NSIndexPath *v27;
  NSIndexPath *v28;
  void *v29;
  NSIndexPath *v30;
  void *v31;
  uint64_t v32;
  NSIndexPath *v33;
  NSIndexPath *v34;
  _UICollectionViewSelectionController *selectionController;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  void *v41;
  NSMutableSet *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t j;
  void *v47;
  NSMutableSet *pendingDeselectionIndexPaths;
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[5];
  NSIndexPath *v59;
  objc_super v60;
  _BYTE v61[128];
  _BYTE v62[128];
  uint64_t v63;
  CGPoint v64;
  CGRect v65;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[UICollectionView _currentTouch](self, "_currentTouch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v6, "containsObject:", v8))
    goto LABEL_48;
  -[UICollectionView _setCurrentTouch:](self, "_setCurrentTouch:", 0);
  v60.receiver = self;
  v60.super_class = (Class)UICollectionView;
  -[UIScrollView touchesEnded:withEvent:](&v60, sel_touchesEnded_withEvent_, v6, v7);
  v9 = -[UIScrollView isDragging](self, "isDragging");
  if (v8 && !v9)
  {
    objc_msgSend(v8, "view");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (self->_pendingSelectionIndexPath)
    {
      -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v11;
      if (v11)
      {
        objc_msgSend(v11, "bounds");
        v14 = v13;
        v16 = v15;
        v18 = v17;
        v20 = v19;
        objc_msgSend(v8, "locationInView:", v12);
        v64.x = v21;
        v64.y = v22;
        v65.origin.x = v14;
        v65.origin.y = v16;
        v65.size.width = v18;
        v65.size.height = v20;
        if (!CGRectContainsPoint(v65, v64))
        {
          -[NSMutableSet removeAllObjects](self->_pendingDeselectionIndexPaths, "removeAllObjects");
LABEL_23:

          goto LABEL_24;
        }
      }
    }
    else
    {
      v12 = 0;
    }
    if (v10)
    {
      -[UICollectionView _selectableIndexPathForItemContainingHitView:](self, "_selectableIndexPathForItemContainingHitView:", v10);
      v23 = objc_claimAutoreleasedReturnValue();
      if (!v23)
        goto LABEL_23;
      v24 = (void *)v23;
      v25 = -[UICollectionView _allowsEffectiveSelectionOrCustomActionAtIndexPath:](self, "_allowsEffectiveSelectionOrCustomActionAtIndexPath:", self->_pendingSelectionIndexPath);

      if (!v25)
        goto LABEL_23;
    }
    else if (!-[UICollectionView _allowsEffectiveSelectionOrCustomActionAtIndexPath:](self, "_allowsEffectiveSelectionOrCustomActionAtIndexPath:", self->_pendingSelectionIndexPath))
    {
      goto LABEL_23;
    }
    pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
    if (!pendingSelectionIndexPath)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0
        || -[UICollectionView _allowsEffectiveMultipleSelection](self, "_allowsEffectiveMultipleSelection"))
      {
LABEL_22:
        v30 = self->_pendingSelectionIndexPath;
        self->_pendingSelectionIndexPath = 0;

        goto LABEL_23;
      }
      pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
    }
    v27 = pendingSelectionIndexPath;
    v28 = v27;
    if ((*((_WORD *)&self->_collectionViewFlags + 8) & 0x100) != 0)
    {
      v29 = (void *)UIApp;
      v58[0] = MEMORY[0x1E0C809B0];
      v58[1] = 3221225472;
      v58[2] = __43__UICollectionView_touchesEnded_withEvent___block_invoke;
      v58[3] = &unk_1E16B1B50;
      v58[4] = self;
      v59 = v27;
      objc_msgSend(v29, "_performBlockAfterCATransactionCommits:", v58);

    }
    else
    {
      -[UICollectionView _userSelectItemAtIndexPath:](self, "_userSelectItemAtIndexPath:", v27);
    }

    goto LABEL_22;
  }
LABEL_24:
  -[UIView traitCollection](self, "traitCollection");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = _UIShouldAnimateDefaultCellHighlightAndSelection(v31);

  v33 = self->_pendingSelectionIndexPath;
  if (v33)
  {
    -[UICollectionView _unhighlightItemAtIndexPath:animated:notifyDelegate:](self, "_unhighlightItemAtIndexPath:animated:notifyDelegate:", v33, 0, 1);
    v34 = self->_pendingSelectionIndexPath;
    self->_pendingSelectionIndexPath = 0;

  }
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  selectionController = self->_selectionController;
  if (selectionController)
    v36 = (void *)-[NSMutableSet copy](selectionController->_selectedIndexPaths, "copy");
  else
    v36 = 0;
  v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v54, v62, 16);
  if (v37)
  {
    v38 = v37;
    v39 = *(_QWORD *)v55;
    do
    {
      for (i = 0; i != v38; ++i)
      {
        if (*(_QWORD *)v55 != v39)
          objc_enumerationMutation(v36);
        -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", *(_QWORD *)(*((_QWORD *)&v54 + 1) + 8 * i));
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v41, "isSelected") & 1) == 0)
          objc_msgSend(v41, "_setSelected:animated:", 1, v32);

      }
      v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v54, v62, 16);
    }
    while (v38);
  }

  if (-[UICollectionView _shouldDeselectItemsOnTouchesBegan](self, "_shouldDeselectItemsOnTouchesBegan"))
  {
    v49 = v7;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v42 = self->_pendingDeselectionIndexPaths;
    v43 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v42, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
    if (v43)
    {
      v44 = v43;
      v45 = *(_QWORD *)v51;
      do
      {
        for (j = 0; j != v44; ++j)
        {
          if (*(_QWORD *)v51 != v45)
            objc_enumerationMutation(v42);
          -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * j));
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v47, "isSelected"))
            objc_msgSend(v47, "_setSelected:animated:", 0, v32);

        }
        v44 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v42, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
      }
      while (v44);
    }

    pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
    self->_pendingDeselectionIndexPaths = 0;

    v7 = v49;
  }
LABEL_48:

}

uint64_t __43__UICollectionView_touchesEnded_withEvent___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_userSelectItemAtIndexPath:", *(_QWORD *)(a1 + 40));
}

- (void)_selectAllSelectedItems
{
  _UICollectionViewSelectionController *selectionController;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  selectionController = self->_selectionController;
  if (selectionController)
    v4 = (void *)-[NSMutableSet copy](selectionController->_selectedIndexPaths, "copy", (_QWORD)v10);
  else
    v4 = 0;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i), (_QWORD)v10);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "_setSelected:animated:", 1, 0);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

- (void)_cancelTouches
{
  void *v3;
  uint64_t v4;
  NSIndexPath *pendingSelectionIndexPath;
  NSMutableSet *pendingDeselectionIndexPaths;

  -[UICollectionView _setCurrentTouch:](self, "_setCurrentTouch:", 0);
  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = _UIShouldAnimateDefaultCellHighlightAndSelection(v3);

  -[UICollectionView _unhighlightItemAtIndexPath:animated:notifyDelegate:](self, "_unhighlightItemAtIndexPath:animated:notifyDelegate:", self->_pendingSelectionIndexPath, v4, 1);
  pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
  self->_pendingSelectionIndexPath = 0;

  if (-[UICollectionView _shouldDeselectItemsOnTouchesBegan](self, "_shouldDeselectItemsOnTouchesBegan"))
  {
    if (!-[UIScrollView isTracking](self, "isTracking"))
      -[UICollectionView _selectAllSelectedItems](self, "_selectAllSelectedItems");
    pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
    self->_pendingDeselectionIndexPaths = 0;

  }
}

- (void)touchesCancelled:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  void *v8;
  int v9;
  objc_super v10;

  v6 = a3;
  v7 = a4;
  -[UICollectionView _currentTouch](self, "_currentTouch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "containsObject:", v8);

  if (v9)
  {
    v10.receiver = self;
    v10.super_class = (Class)UICollectionView;
    -[UIScrollView touchesCancelled:withEvent:](&v10, sel_touchesCancelled_withEvent_, v6, v7);
    -[UICollectionView _cancelTouches](self, "_cancelTouches");
  }

}

- (void)_scrollViewDidEndDraggingWithDeceleration:(BOOL)a3
{
  NSMutableSet *pendingDeselectionIndexPaths;
  objc_super v5;

  v5.receiver = self;
  v5.super_class = (Class)UICollectionView;
  -[UIScrollView _scrollViewDidEndDraggingWithDeceleration:](&v5, sel__scrollViewDidEndDraggingWithDeceleration_, a3);
  if (-[UICollectionView _shouldDeselectItemsOnTouchesBegan](self, "_shouldDeselectItemsOnTouchesBegan"))
  {
    -[UICollectionView _selectAllSelectedItems](self, "_selectAllSelectedItems");
    pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
    self->_pendingDeselectionIndexPaths = 0;

  }
}

- (BOOL)_shouldShowMenuForCell:(id)a3
{
  id v4;
  char v5;
  void *v6;
  void *v7;

  v4 = a3;
  if (-[UICollectionView _delegateSupportsMenuInteraction](self, "_delegateSupportsMenuInteraction"))
  {
    v5 = 0;
  }
  else
  {
    -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6 && (*(_QWORD *)&self->_collectionViewFlags & 0x80) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v7, "collectionView:shouldShowMenuForItemAtIndexPath:", self, v6);

    }
    else
    {
      v5 = 0;
    }

  }
  return v5;
}

- (BOOL)_canPerformAction:(SEL)a3 forCell:(id)a4 sender:(id)a5
{
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char v13;

  v8 = a4;
  v9 = a5;
  if (!-[UICollectionView _delegateSupportsMenuInteraction](self, "_delegateSupportsMenuInteraction")
    && (*(_QWORD *)&self->_collectionViewFlags & 0x80) != 0
    && (-[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v8),
        (v10 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    v11 = (void *)v10;
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "collectionView:canPerformAction:forItemAtIndexPath:withSender:", self, a3, v11, v9);

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

- (void)_performAction:(SEL)a3 forCell:(id)a4 sender:(id)a5
{
  id v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a4;
  v8 = a5;
  if (!-[UICollectionView _delegateSupportsMenuInteraction](self, "_delegateSupportsMenuInteraction")
    && (*(_QWORD *)&self->_collectionViewFlags & 0x80) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v11);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "collectionView:performAction:forItemAtIndexPath:withSender:", self, a3, v10, v8);

  }
}

- (void)_cellPreferredSeparatorInsetsChanged:(id)a3
{
  void *v4;
  id v5;

  -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[UICollectionView collectionViewLayout](self, "collectionViewLayout");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_cellBackgroundOrBottomSeparatorChangedAtIndexPath:separatorOnly:", v5, 1);

  }
}

- (void)_highlightFirstVisibleItemIfAppropriate
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  -[UIView window](self, "window");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "_screen");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "integerValue") != 2)
    goto LABEL_5;
  -[UICollectionView visibleCells](self, "visibleCells");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (!v6)
    return;
  -[UICollectionView _indexPathsForVisibleItems](self, "_indexPathsForVisibleItems");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "sortedArrayUsingSelector:", sel_compare_);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  -[UICollectionViewData indexPathForItemAtGlobalIndex:](self->_collectionViewData, -[UICollectionView highlightedGlobalItem](self, "highlightedGlobalItem"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v8, "containsObject:", v3) & 1) == 0)
  {
    objc_msgSend(v8, "firstObject");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _unhighlightAllItemsAndHighlightGlobalItem:](self, "_unhighlightAllItemsAndHighlightGlobalItem:", -[UICollectionViewData globalIndexForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v4));
LABEL_5:

  }
}

- (void)_unhighlightAllItemsAndHighlightGlobalItem:(int64_t)a3
{
  void *v4;
  id v5;

  -[UICollectionViewData indexPathForItemAtGlobalIndex:](self->_collectionViewData, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:](self, "_highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:", v4, 0, 0, 1);

  -[UICollectionView _highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:](self, "_highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:", v5, 0, 0, 1);
}

- (void)_handlePresses:(id)a3 keyHandler:(id)a4 defaultHandler:(id)a5
{
  id v8;
  void (**v9)(_QWORD, id, void *);
  void (**v10)(_QWORD);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  void (**v26)(_QWORD, id, void *);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (void (**)(_QWORD, id, void *))a4;
  v10 = (void (**)(_QWORD))a5;
  -[UIView _focusSystem](self, "_focusSystem");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "focusedItem");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  _UIFocusEnvironmentContainingView(v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12
    || (-[UICollectionView visibleCells](self, "visibleCells"),
        v14 = (void *)objc_claimAutoreleasedReturnValue(),
        v15 = objc_msgSend(v14, "containsObject:", v13),
        v14,
        !v15))
  {
    v16 = 0;
    v23 = 0;
    if (!v10)
      goto LABEL_16;
LABEL_15:
    v10[2](v10);
    goto LABEL_16;
  }
  v26 = v9;
  v16 = v13;
  -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v16);
  v24 = objc_claimAutoreleasedReturnValue();
  v25 = v8;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v17 = v8;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v28;
    while (2)
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v28 != v20)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * v21), "key");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (v22 && (objc_msgSend(v16, "_canPerformActionForKey:", v22) & 1) != 0)
        {

          v9 = v26;
          if (v26)
            v26[2](v26, v16, v22);
          v23 = (void *)v24;
          v8 = v25;
          goto LABEL_17;
        }

        ++v21;
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      if (v19)
        continue;
      break;
    }
  }

  v8 = v25;
  v9 = v26;
  v23 = (void *)v24;
  if (v10)
    goto LABEL_15;
LABEL_16:
  v22 = 0;
LABEL_17:

}

- (void)pressesBegan:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  UICollectionView *v13;

  v6 = a3;
  v7 = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __43__UICollectionView_pressesBegan_withEvent___block_invoke;
  v10[3] = &unk_1E16B47A8;
  v11 = v6;
  v12 = v7;
  v13 = self;
  v8 = v7;
  v9 = v6;
  -[UICollectionView _handlePresses:keyHandler:defaultHandler:](self, "_handlePresses:keyHandler:defaultHandler:", v9, 0, v10);

}

id __43__UICollectionView_pressesBegan_withEvent___block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_super v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)UICollectionView;
  return objc_msgSendSuper2(&v4, sel_pressesBegan_withEvent_, v2, v1);
}

- (void)pressesChanged:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  UICollectionView *v13;

  v6 = a3;
  v7 = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __45__UICollectionView_pressesChanged_withEvent___block_invoke;
  v10[3] = &unk_1E16B47A8;
  v11 = v6;
  v12 = v7;
  v13 = self;
  v8 = v7;
  v9 = v6;
  -[UICollectionView _handlePresses:keyHandler:defaultHandler:](self, "_handlePresses:keyHandler:defaultHandler:", v9, 0, v10);

}

id __45__UICollectionView_pressesChanged_withEvent___block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_super v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)UICollectionView;
  return objc_msgSendSuper2(&v4, sel_pressesChanged_withEvent_, v2, v1);
}

- (void)pressesEnded:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  UICollectionView *v13;

  v6 = a3;
  v7 = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __43__UICollectionView_pressesEnded_withEvent___block_invoke_2;
  v10[3] = &unk_1E16B47A8;
  v11 = v6;
  v12 = v7;
  v13 = self;
  v8 = v7;
  v9 = v6;
  -[UICollectionView _handlePresses:keyHandler:defaultHandler:](self, "_handlePresses:keyHandler:defaultHandler:", v9, &__block_literal_global_837, v10);

}

uint64_t __43__UICollectionView_pressesEnded_withEvent___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_performActionForKey:");
}

id __43__UICollectionView_pressesEnded_withEvent___block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_super v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)UICollectionView;
  return objc_msgSendSuper2(&v4, sel_pressesEnded_withEvent_, v2, v1);
}

- (void)pressesCancelled:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  UICollectionView *v13;

  v6 = a3;
  v7 = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __47__UICollectionView_pressesCancelled_withEvent___block_invoke;
  v10[3] = &unk_1E16B47A8;
  v11 = v6;
  v12 = v7;
  v13 = self;
  v8 = v7;
  v9 = v6;
  -[UICollectionView _handlePresses:keyHandler:defaultHandler:](self, "_handlePresses:keyHandler:defaultHandler:", v9, 0, v10);

}

id __47__UICollectionView_pressesCancelled_withEvent___block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_super v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)UICollectionView;
  return objc_msgSendSuper2(&v4, sel_pressesCancelled_withEvent_, v2, v1);
}

- (BOOL)_selectionInteractionShouldBegin:(id)a3
{
  void *v4;
  BOOL v5;

  _indexPathForSelectionInteraction(self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4
    && -[UICollectionView _allowsEffectiveSelectionOrCustomActionAtIndexPath:](self, "_allowsEffectiveSelectionOrCustomActionAtIndexPath:", v4)&& -[UICollectionView _delegateAllowsHighlightingItemAtIndexPath:](self, "_delegateAllowsHighlightingItemAtIndexPath:", v4);

  return v5;
}

- (void)_selectionInteractionDidBeginHinting:(id)a3
{
  void *v4;
  void *v5;

  _indexPathForSelectionInteraction(self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    -[UICollectionView _highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:](self, "_highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:", v4, 0, 0, 1);
    v4 = v5;
  }

}

- (void)_selectionInteractionDidCancelHinting:(id)a3
{
  void *v4;
  void *v5;

  _indexPathForSelectionInteraction(self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    -[UICollectionView _unhighlightItemAtIndexPath:animated:notifyDelegate:](self, "_unhighlightItemAtIndexPath:animated:notifyDelegate:", v4, 0, 1);
    v4 = v5;
  }

}

- (void)_selectionInteractionDidSelect:(id)a3
{
  _UICollectionViewSelectionController *selectionController;
  void *v5;
  void *v6;
  id v7;

  selectionController = self->_selectionController;
  if (selectionController)
    v5 = (void *)-[NSMutableSet copy](selectionController->_highlightedIndexPaths, "copy", a3);
  else
    v5 = 0;
  objc_msgSend(v5, "anyObject");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  if (-[UICollectionView _indexPathIsValid:](self, "_indexPathIsValid:", v7))
  {
    -[UICollectionView _userSelectItemAtIndexPath:](self, "_userSelectItemAtIndexPath:", v7);
  }
  else
  {
    _indexPathForSelectionInteraction(self);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
      -[UICollectionView _userSelectItemAtIndexPath:](self, "_userSelectItemAtIndexPath:", v6);

  }
}

- (int64_t)highlightedGlobalItem
{
  _UICollectionViewSelectionController *selectionController;
  _UICollectionViewSelectionController *v4;
  void *v5;
  void *v6;
  int64_t v7;

  selectionController = self->_selectionController;
  if (!selectionController || -[NSMutableSet count](selectionController->_highlightedIndexPaths, "count") < 1)
    return -1;
  v4 = self->_selectionController;
  if (v4)
    v5 = (void *)-[NSMutableSet copy](v4->_highlightedIndexPaths, "copy");
  else
    v5 = 0;
  objc_msgSend(v5, "anyObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = -[UICollectionViewData globalIndexForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v6);
  return v7;
}

- (int64_t)maximumGlobalItemIndex
{
  UICollectionViewData *collectionViewData;

  collectionViewData = self->_collectionViewData;
  if (!collectionViewData)
    return 0;
  if ((*(_BYTE *)&collectionViewData->_collectionViewDataFlags & 2) == 0)
    -[UICollectionViewData _updateItemCounts]((uint64_t)self->_collectionViewData);
  return collectionViewData->_totalItemCount;
}

- (void)_trackLayoutValue:(double)a3 forKey:(id)a4
{
  id v6;
  void *v7;
  NSMutableDictionary *v8;
  NSMutableDictionary *interactiveTransitionValueTrackingDict;
  NSMutableArray *v10;
  NSMutableArray *trackedValuesKeys;
  _UICollectionViewTrackedValue *v12;
  id v13;

  v6 = a4;
  v7 = v6;
  if (self->_shouldAccumulateTrackedLayoutValues)
  {
    v13 = v6;
    if (!self->_interactiveTransitionValueTrackingDict)
    {
      v8 = (NSMutableDictionary *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 2);
      interactiveTransitionValueTrackingDict = self->_interactiveTransitionValueTrackingDict;
      self->_interactiveTransitionValueTrackingDict = v8;

      v7 = v13;
    }
    if (!self->_trackedValuesKeys)
    {
      v10 = (NSMutableArray *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 2);
      trackedValuesKeys = self->_trackedValuesKeys;
      self->_trackedValuesKeys = v10;

      v7 = v13;
    }
    -[NSMutableDictionary objectForKey:](self->_interactiveTransitionValueTrackingDict, "objectForKey:", v7);
    v12 = (_UICollectionViewTrackedValue *)objc_claimAutoreleasedReturnValue();
    if (!v12)
    {
      v12 = objc_alloc_init(_UICollectionViewTrackedValue);
      -[NSMutableDictionary setValue:forKey:](self->_interactiveTransitionValueTrackingDict, "setValue:forKey:", v12, v13);
      -[NSMutableArray addObject:](self->_trackedValuesKeys, "addObject:", v13);
    }
    -[_UICollectionViewTrackedValue addValue:](v12, "addValue:", a3);

    v7 = v13;
  }

}

- (double)_trackedLayoutValueForKey:(id)a3
{
  void *v3;
  void *v4;
  double v5;
  double v6;

  -[NSMutableDictionary objectForKey:](self->_interactiveTransitionValueTrackingDict, "objectForKey:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "trackedValue");
    v6 = v5;
  }
  else
  {
    v6 = 0.0;
  }

  return v6;
}

- (void)_updateTrackedLayoutValuesWith:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  v4 = objc_msgSend(v12, "count");
  if (v4 >= 1)
  {
    v5 = v4;
    for (i = 0; i != v5; ++i)
    {
      objc_msgSend(v12, "objectAtIndex:", i);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "value");
      v9 = v8;

      -[NSMutableArray objectAtIndex:](self->_trackedValuesKeys, "objectAtIndex:", i);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary objectForKey:](self->_interactiveTransitionValueTrackingDict, "objectForKey:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setTrackedValue:", v9);

    }
  }

}

- (id)_dynamicAnimationsForTrackValues
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  _UIDynamicValueAnimation *v12;
  void *v13;
  void *v14;
  NSMutableArray *obj;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (-[NSMutableArray count](self->_trackedValuesKeys, "count"))
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", -[NSMutableArray count](self->_trackedValuesKeys, "count"));
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    obj = self->_trackedValuesKeys;
    v4 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v18;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v18 != v6)
            objc_enumerationMutation(obj);
          -[NSMutableDictionary objectForKey:](self->_interactiveTransitionValueTrackingDict, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v7));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "speed");
          v10 = v9;
          objc_msgSend(v8, "trackedValue");
          v12 = -[_UIDynamicValueAnimation initWithValue:velocity:unitSize:]([_UIDynamicValueAnimation alloc], "initWithValue:velocity:unitSize:", v11, v10, 0.05);
          +[_UIDynamicAnimationActiveValue upperBoundary:ofType:](_UIDynamicAnimationActiveValue, "upperBoundary:ofType:", 1, 0.0);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          +[_UIDynamicAnimationActiveValue lowerBoundary:ofType:](_UIDynamicAnimationActiveValue, "lowerBoundary:ofType:", 1, 0.0);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIDynamicValueAnimation addActiveValue:](v12, "addActiveValue:", v13);
          -[_UIDynamicValueAnimation addActiveValue:](v12, "addActiveValue:", v14);
          objc_msgSend(v3, "addObject:", v12);

          ++v7;
        }
        while (v5 != v7);
        v5 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v5);
    }

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (void)encodeRestorableStateWithCoder:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  objc_super v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[UICollectionView dataSource](self, "dataSource");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend((id)objc_opt_class(), "conformsToProtocol:", &unk_1EE02B570);

  v20.receiver = self;
  v20.super_class = (Class)UICollectionView;
  -[UIScrollView encodeRestorableStateWithCoder:](&v20, sel_encodeRestorableStateWithCoder_, v4);
  -[UICollectionView _indexPathsForSelectedItems](self, "_indexPathsForSelectedItems");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "count"))
  {
    objc_msgSend(v4, "encodeObject:forKey:", v7, CFSTR("CollectionViewSelectedCellIndexPaths"));
    if (v6)
    {
      -[UICollectionView dataSource](self, "dataSource");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "count"))
      {
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v10 = v7;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v17;
          do
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v17 != v13)
                objc_enumerationMutation(v10);
              objc_msgSend(v8, "modelIdentifierForElementAtIndexPath:inView:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v14), self, (_QWORD)v16);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              if (v15)
                objc_msgSend(v9, "addObject:", v15);

              ++v14;
            }
            while (v12 != v14);
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
          }
          while (v12);
        }

        if (objc_msgSend(v9, "count"))
          objc_msgSend(v4, "encodeObject:forKey:", v9, CFSTR("CollectionViewSelectedCellModelIdentifiers"));

      }
    }
  }

}

- (BOOL)_isSectionValidInIndexPath:(id)a3
{
  unint64_t v4;

  if (!a3)
    return 0;
  v4 = objc_msgSend(a3, "section");
  return -[UICollectionView numberOfSections](self, "numberOfSections") > v4;
}

- (void)_orthogonalScrollView:(id)a3 didScrollToOffset:(CGPoint)a4 inSection:(int64_t)a5
{
  double y;
  double x;
  id WeakRetained;
  void *v10;
  double v11;
  double v12;
  double v13;
  UICollectionViewData *collectionViewData;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  unint64_t v19;
  _BOOL8 v20;
  void *v21;
  id v22;

  y = a4.y;
  x = a4.x;
  v22 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);

  if (WeakRetained)
  {
    -[UICollectionViewLayout _sectionDescriptorForSectionIndex:](self->_layout, "_sectionDescriptorForSectionIndex:", a5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[_UICollectionLayoutSectionDescriptor scrollingUnitVector]((uint64_t)v10);
    v13 = v12;
    -[UICollectionViewLayout _setOffset:forOrthogonalScrollingSection:](self->_layout, "_setOffset:forOrthogonalScrollingSection:", a5, x, y);
    collectionViewData = self->_collectionViewData;
    -[UICollectionView _visibleBounds](self, "_visibleBounds");
    -[UICollectionViewData validateLayoutInRect:]((uint64_t)collectionViewData, v15, v16, v17, v18);
    v19 = -[UICollectionView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
    if (-[UICollectionView _prefetchingAllowed](self, "_prefetchingAllowed"))
    {
      if (v19)
        v20 = 0;
      else
        v20 = (*((_QWORD *)&self->_collectionViewFlags + 1) & 0x1000000000000000) == 0;
      -[UICollectionView _updatePrefetchedCellsForOrthogonalScrollingSection:withOriginalPrefetchingVector:canCompute:canPrefetch:](self, "_updatePrefetchedCellsForOrthogonalScrollingSection:withOriginalPrefetchingVector:canCompute:canPrefetch:", a5, v19 == 0, v20, v11, v13);
    }
    if ((*(_QWORD *)&self->_collectionViewFlags & 0x2000000000000) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "_collectionView:orthogonalScrollViewDidScroll:section:", self, v22, a5);

    }
  }

}

- (void)_updatePrefetchedCellsForOrthogonalScrollingSection:(int64_t)a3 withOriginalPrefetchingVector:(CGVector)a4 canCompute:(BOOL)a5 canPrefetch:(BOOL)a6
{
  _BOOL4 v6;
  _BOOL4 v7;
  double dy;
  double dx;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  CGFloat Width;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _UICollectionViewPrefetchingContext *activeOrthogonalPrefetchingContext;
  double v49;
  double v50;
  double v51;
  double v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  id v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v6 = a6;
  v7 = a5;
  dy = a4.dy;
  dx = a4.dx;
  -[UICollectionViewLayout _sectionDescriptorForSectionIndex:](self->_layout, "_sectionDescriptorForSectionIndex:");
  v57 = (id)objc_claimAutoreleasedReturnValue();
  v13 = -[_UICollectionLayoutSectionDescriptor scrollingUnitVector]((uint64_t)v57);
  v14 = v12;
  if (v13 == 0.0 && v12 == 0.0)
    -[_UIVelocityIntegrator velocity](self->_prefetchVelocityIntegrator, "velocity");
  -[UICollectionView _pruneCachedPrefetchViewsForVelocity:](self, "_pruneCachedPrefetchViewsForVelocity:");
  -[UICollectionView _prefetchingContextForOrthogonalScrollingSection:](self, "_prefetchingContextForOrthogonalScrollingSection:", a3);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (!v15)
  {
    if (!v7)
      goto LABEL_23;
    v52 = v14;
    goto LABEL_16;
  }
  if (vabdd_f64(v13, dx) > 0.1 || vabdd_f64(v14, dy) > 0.1)
  {
    -[UICollectionView _resetPrefetchingContext:](self, "_resetPrefetchingContext:", v15);

    if (!v7)
    {
      -[UICollectionView _setPrefetchingContext:forOrthogonalScrollingSection:](self, "_setPrefetchingContext:forOrthogonalScrollingSection:", 0, a3);
      v16 = 0;
      goto LABEL_23;
    }
    v52 = v14;
    v16 = 0;
LABEL_16:
    v17 = 1;
    goto LABEL_17;
  }
  if (!v7 || objc_msgSend(*(id *)(v15 + 16), "count"))
  {
    if (v6 && objc_msgSend(*(id *)(v16 + 16), "count"))
      -[UICollectionView _prefetchItemsForPrefetchingContext:](self, "_prefetchItemsForPrefetchingContext:", v16);
    goto LABEL_23;
  }
  v52 = v14;
  v17 = 0;
LABEL_17:
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  -[UICollectionViewLayout _contentFrameForSection:](self->_layout, "_contentFrameForSection:", a3);
  v55 = v27;
  v56 = v26;
  v53 = v29;
  v54 = v28;
  -[UICollectionViewLayout _offsetForOrthogonalScrollingSection:](self->_layout, "_offsetForOrthogonalScrollingSection:", a3);
  v31 = v19 + v30;
  v33 = v21 + v32;
  v58.origin.x = v19;
  v58.origin.y = v21;
  v58.size.width = v23;
  v58.size.height = v25;
  Width = CGRectGetWidth(v58);
  v50 = v21;
  v51 = v19;
  v59.origin.x = v19;
  v59.origin.y = v21;
  v49 = v23;
  v59.size.width = v23;
  v59.size.height = v25;
  v60.size.height = CGRectGetHeight(v59);
  v60.origin.x = v31;
  v60.origin.y = v33;
  v60.size.width = Width;
  v62.origin.y = v55;
  v62.origin.x = v56;
  v62.size.height = v53;
  v62.size.width = v54;
  v61 = CGRectIntersection(v60, v62);
  v35 = _UIRectExpandByFactorAndUnitVector(v61.origin.x, v61.origin.y, v61.size.width, v61.size.height, 0.75, v13, v52);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  if (v17)
    goto LABEL_21;
  if (v16)
  {
    v42 = *(_QWORD *)(v16 + 32);
    v43 = *(_QWORD *)(v16 + 40);
    v44 = *(_QWORD *)(v16 + 48);
    v45 = *(_QWORD *)(v16 + 56);
  }
  else
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v42 = 0;
  }
  v63.origin.x = v35;
  v63.origin.y = v37;
  v63.size.width = v39;
  v63.size.height = v41;
  if (!CGRectEqualToRect(*(CGRect *)&v42, v63))
  {
LABEL_21:
    -[UICollectionViewLayout layoutAttributesForElementsInRect:](self->_layout, "layoutAttributesForElementsInRect:", v35, v37, v39, v41);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _prefetchingContextForVisibleBounds:prefetchVector:prefetchRect:attributes:](self, "_prefetchingContextForVisibleBounds:prefetchVector:prefetchRect:attributes:", v46, v51, v50, v49, v25, v13, v52, *(_QWORD *)&v35, *(_QWORD *)&v37, *(_QWORD *)&v39, *(_QWORD *)&v41);
    v47 = objc_claimAutoreleasedReturnValue();

    -[UICollectionView _setPrefetchingContext:forOrthogonalScrollingSection:](self, "_setPrefetchingContext:forOrthogonalScrollingSection:", v47, a3);
    v16 = v47;
  }
LABEL_23:
  activeOrthogonalPrefetchingContext = self->_activeOrthogonalPrefetchingContext;
  self->_activeOrthogonalPrefetchingContext = (_UICollectionViewPrefetchingContext *)v16;

}

- (void)decodeRestorableStateWithCoder:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  objc_super v48;
  _BYTE v49[128];
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[UIView layoutIfNeeded](self, "layoutIfNeeded");
  -[UIScrollView contentOffset](self, "contentOffset");
  v6 = v5;
  v8 = v7;
  -[UICollectionView dataSource](self, "dataSource");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend((id)objc_opt_class(), "conformsToProtocol:", &unk_1EE02B570);

  v48.receiver = self;
  v48.super_class = (Class)UICollectionView;
  -[UIScrollView decodeRestorableStateWithCoder:](&v48, sel_decodeRestorableStateWithCoder_, v4);
  -[UICollectionView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  -[UIScrollView contentOffset](self, "contentOffset");
  v13 = v12;
  v14 = v11;
  if (v6 == v12 && v8 == v11)
  {
LABEL_6:
    if (v10)
      goto LABEL_7;
    goto LABEL_20;
  }
  -[UIScrollView contentSize](self, "contentSize");
  v16 = v15;
  -[UIView frame](self, "frame");
  if (v13 > v16 - v17
    || (-[UIScrollView contentSize](self, "contentSize"), v19 = v18, -[UIView frame](self, "frame"), v14 > v19 - v20))
  {
    -[UICollectionView setContentOffset:](self, "setContentOffset:", v6, v8);
    goto LABEL_6;
  }
  -[UICollectionView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
  if (v10)
  {
LABEL_7:
    -[UICollectionView dataSource](self, "dataSource");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)MEMORY[0x1E0C99E60];
    v23 = objc_opt_class();
    objc_msgSend(v22, "setWithObjects:", v23, objc_opt_class(), 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v24, CFSTR("CollectionViewSelectedCellModelIdentifiers"));
    v25 = (id)objc_claimAutoreleasedReturnValue();

    if (v25)
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v25 = v25;
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v45;
        do
        {
          for (i = 0; i != v27; ++i)
          {
            if (*(_QWORD *)v45 != v28)
              objc_enumerationMutation(v25);
            objc_msgSend(v21, "indexPathForElementWithModelIdentifier:inView:", *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * i), self);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            if (v30 && -[UICollectionView _indexPathIsValid:](self, "_indexPathIsValid:", v30))
            {
              LOBYTE(v39) = 0;
              -[UICollectionView _selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:](self, "_selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:", v30, 0, 0, 0, 0, 0, v39);
            }

          }
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
        }
        while (v27);
      }

    }
LABEL_31:

    goto LABEL_32;
  }
LABEL_20:
  v31 = (void *)MEMORY[0x1E0C99E60];
  v32 = objc_opt_class();
  objc_msgSend(v31, "setWithObjects:", v32, objc_opt_class(), 0);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v33, CFSTR("CollectionViewSelectedCellIndexPaths"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v21, "count"))
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v25 = v21;
    v34 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
    if (v34)
    {
      v35 = v34;
      v36 = *(_QWORD *)v41;
      do
      {
        for (j = 0; j != v35; ++j)
        {
          if (*(_QWORD *)v41 != v36)
            objc_enumerationMutation(v25);
          v38 = *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * j);
          if (-[UICollectionView _indexPathIsValid:](self, "_indexPathIsValid:", v38))
            -[UICollectionView selectItemAtIndexPath:animated:scrollPosition:](self, "selectItemAtIndexPath:animated:scrollPosition:", v38, 0, 0);
        }
        v35 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
      }
      while (v35);
    }
    v21 = v25;
    goto LABEL_31;
  }
LABEL_32:

}

- (id)_contentFocusContainerGuide
{
  return self->_contentFocusContainerGuide;
}

- (BOOL)remembersLastFocusedIndexPath
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 39) & 1;
}

- (BOOL)_displaysHorizontalIndexTitleBar
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 24) & 1;
}

- (void)_setDisplaysHorizontalIndexTitleBar:(BOOL)a3
{
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  p_collectionViewFlags = &self->_collectionViewFlags;
  v4 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if (((((v4 & 0x1000000) == 0) ^ a3) & 1) == 0)
  {
    v6 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    v7 = *(_QWORD *)p_collectionViewFlags;
    v8 = 0x1000000;
    if (!a3)
      v8 = 0;
    *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
    *(_QWORD *)p_collectionViewFlags = v7;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v4 & 0xFFFFFFFFFEFFFFFFLL | v8;
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v6);
    if (a3 && !-[UIScrollView _canScrollY](self, "_canScrollY"))
      -[UICollectionView setupHorizontalIndexTitleBar](self, "setupHorizontalIndexTitleBar");
    else
      -[UICollectionView teardownHorizontalIndexTitleBar](self, "teardownHorizontalIndexTitleBar");
  }
}

- (CGPoint)_horizontalIndexTitleBarOffset
{
  double x;
  double y;
  CGPoint result;

  x = self->_horizontalIndexTitleBarOffset.x;
  y = self->_horizontalIndexTitleBarOffset.y;
  result.y = y;
  result.x = x;
  return result;
}

- (void)_setHorizontalIndexTitleBarOffset:(CGPoint)a3
{
  if (self->_horizontalIndexTitleBarOffset.x != a3.x || self->_horizontalIndexTitleBarOffset.y != a3.y)
  {
    self->_horizontalIndexTitleBarOffset = a3;
    -[UICollectionView layoutHorizontalIndexTitleBar](self, "layoutHorizontalIndexTitleBar");
  }
}

- (BOOL)canBecomeFocused
{
  UICollectionViewData *collectionViewData;
  void *v4;
  void *v5;
  void *v6;
  _BOOL4 v7;

  if (!-[UICollectionView remembersLastFocusedIndexPath](self, "remembersLastFocusedIndexPath"))
    goto LABEL_11;
  if (-[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData) < 1)
    goto LABEL_11;
  collectionViewData = self->_collectionViewData;
  if (!collectionViewData)
    goto LABEL_11;
  if ((*(_BYTE *)&collectionViewData->_collectionViewDataFlags & 2) == 0)
    -[UICollectionViewData _updateItemCounts]((uint64_t)collectionViewData);
  if (collectionViewData->_totalItemCount >= 1)
  {
    -[UIView _focusSystem](self, "_focusSystem");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "focusedItem");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = !-[UIView containsView:](self, "containsView:", v6);

  }
  else
  {
LABEL_11:
    LOBYTE(v7) = 0;
  }
  return v7;
}

- (id)_primaryFocusItemForFocusGroup:(id)a3
{
  void *v4;
  void *v5;
  void *v6;

  -[UICollectionView indexPathsForSelectedItems](self, "indexPathsForSelectedItems", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count") == 1)
  {
    objc_msgSend(v4, "firstObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView cellForItemAtIndexPath:](self, "cellForItemAtIndexPath:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)_requestFocusOnItemAtIndexPath:(id)a3
{
  _UICollectionViewFocusedItemState *v4;
  _UICollectionViewFocusedItemState *targetFocusedItemState;

  +[_UICollectionViewFocusedItemState stateWithIndexPath:elementKind:viewType:]((uint64_t)_UICollectionViewFocusedItemState, a3, CFSTR("UICollectionElementKindCell"), 0);
  v4 = (_UICollectionViewFocusedItemState *)objc_claimAutoreleasedReturnValue();
  targetFocusedItemState = self->_targetFocusedItemState;
  self->_targetFocusedItemState = v4;

  -[UIView _setNeedsNonDeferredFocusUpdate](self, "_setNeedsNonDeferredFocusUpdate");
}

- (id)preferredFocusedView
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  UICollectionViewData *collectionViewData;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  BOOL v25;
  unint64_t v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  BOOL v34;
  _UICollectionViewFocusedItemState *targetFocusedItemState;
  _UICollectionViewFocusedItemState *v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  _QWORD *v45;
  int v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  _UICollectionViewSubviewManager *subviewManager;
  id v61;
  id v62;
  uint64_t v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t i;
  void *v74;
  void *v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  UICollectionViewData *v80;
  id v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  UICollectionViewData *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  objc_super v93;
  objc_super v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint8_t buf[4];
  void *v100;
  _BYTE v101[128];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_currentlyFocusedCell");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5
    && !-[UICollectionView isMovingFocusFromHorizontalIndexTitleBarToContent](self, "isMovingFocusFromHorizontalIndexTitleBarToContent"))
  {
    v6 = v5;
LABEL_7:
    v7 = v6;
    goto LABEL_8;
  }
  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x40810000000) != 0)
    goto LABEL_4;
  if (-[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData) < 1)
    goto LABEL_4;
  collectionViewData = self->_collectionViewData;
  if (!collectionViewData)
    goto LABEL_4;
  if ((*(_BYTE *)&collectionViewData->_collectionViewDataFlags & 2) == 0)
    -[UICollectionViewData _updateItemCounts]((uint64_t)self->_collectionViewData);
  if (collectionViewData->_totalItemCount < 1)
  {
LABEL_4:
    if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 0x40000000000) != 0)
    {
      if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
        {
          NSStringFromSelector(a2);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v100 = v87;
          _os_log_fault_impl(&dword_185066000, v30, OS_LOG_TYPE_FAULT, "Recursively calling out to %@ while already in the process of creating a reusable view or cell. This might lead to unexpected behavior.", buf, 0xCu);

        }
      }
      else
      {
        v26 = preferredFocusedView___s_category;
        if (!preferredFocusedView___s_category)
        {
          v26 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v26, (unint64_t *)&preferredFocusedView___s_category);
        }
        v27 = *(NSObject **)(v26 + 8);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v28 = v27;
          NSStringFromSelector(a2);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v100 = v29;
          _os_log_impl(&dword_185066000, v28, OS_LOG_TYPE_ERROR, "Recursively calling out to %@ while already in the process of creating a reusable view or cell. This might lead to unexpected behavior.", buf, 0xCu);

        }
      }
    }
    v93.receiver = self;
    v93.super_class = (Class)UICollectionView;
    -[UIView preferredFocusedView](&v93, sel_preferredFocusedView);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  if (!-[UICollectionView isMovingFocusFromHorizontalIndexTitleBarToContent](self, "isMovingFocusFromHorizontalIndexTitleBarToContent"))goto LABEL_19;
  -[UICollectionView selectedIndexTitleEntry](self, "selectedIndexTitleEntry");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[UICollectionView selectedIndexTitleEntry](self, "selectedIndexTitleEntry");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "targetFocusedIndexPath");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView cellForItemAtIndexPath:](self, "cellForItemAtIndexPath:", v12);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[UICollectionView indexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar](self, "indexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView cellForItemAtIndexPath:](self, "cellForItemAtIndexPath:", v11);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  if (!v7)
  {
LABEL_19:
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v13)
      goto LABEL_47;
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v14 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14 && v14[4] == 1)
    {

LABEL_25:
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = (void *)v18;
      if (!v18 || (v20 = *(id *)(v18 + 8)) == 0)
      {
        -[UICollectionView _focusedItemState](self, "_focusedItemState");
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = (void *)v21;
        if (v21)
          v23 = *(void **)(v21 + 16);
        else
          v23 = 0;
        v24 = v23;
        v25 = -[UICollectionView _isSectionValidInIndexPath:](self, "_isSectionValidInIndexPath:", v24);
        goto LABEL_45;
      }
      goto LABEL_41;
    }
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v16 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      v17 = v16[4];

      if (v17 == 2)
        goto LABEL_25;
    }
    else
    {

    }
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v31 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)v31;
    if (!v31 || (v20 = *(id *)(v31 + 8)) == 0)
    {
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v32 = objc_claimAutoreleasedReturnValue();
      v22 = (void *)v32;
      if (v32)
        v33 = *(void **)(v32 + 16);
      else
        v33 = 0;
      v24 = v33;
      v25 = -[UICollectionView _indexPathIsValid:](self, "_indexPathIsValid:", v24);
LABEL_45:
      v34 = v25;

      if (!v34)
      {
        v13 = 0;
LABEL_47:
        targetFocusedItemState = self->_targetFocusedItemState;
        v90 = v5;
        if (targetFocusedItemState)
        {
          v36 = targetFocusedItemState;
LABEL_49:
          v37 = (uint64_t)v36;
          goto LABEL_71;
        }
        if (dyld_program_sdk_at_least()
          && -[UICollectionView remembersLastFocusedIndexPath](self, "remembersLastFocusedIndexPath"))
        {
          if (v13)
          {
            v38 = v13;
            v39 = v13;
          }
          else
          {
            v38 = 0;
            -[UICollectionView _rememberedFocusedItemState](self, "_rememberedFocusedItemState");
            v39 = (id)objc_claimAutoreleasedReturnValue();
          }
          v37 = (uint64_t)v39;
        }
        else
        {
          v38 = v13;
          v37 = 0;
        }
        -[UICollectionView _indexPathsForSelectedItems](self, "_indexPathsForSelectedItems");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "firstObject");
        v41 = (void *)objc_claimAutoreleasedReturnValue();

        if (v41)
        {
          if (v37
            && !-[UICollectionView _shouldSelectionFollowFocusForIndexPath:initiatedBySelection:focusItemStateCandidate:](self, "_shouldSelectionFollowFocusForIndexPath:initiatedBySelection:focusItemStateCandidate:", v41, 1, v37))
          {

            v13 = v38;
            goto LABEL_71;
          }
          +[_UICollectionViewFocusedItemState stateWithIndexPath:elementKind:viewType:]((uint64_t)_UICollectionViewFocusedItemState, v41, CFSTR("UICollectionElementKindCell"), 0);
          v42 = objc_claimAutoreleasedReturnValue();

          v37 = v42;
        }

        v13 = v38;
        if (!v37)
        {
          v88 = v38;
          -[UICollectionView _delegatePreferredIndexPath](self, "_delegatePreferredIndexPath");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          if (v43)
          {
            +[_UICollectionViewFocusedItemState stateWithIndexPath:elementKind:viewType:]((uint64_t)_UICollectionViewFocusedItemState, v43, CFSTR("UICollectionElementKindCell"), 0);
            v37 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v37 = 0;
          }

          v13 = v38;
          if (!v37 && v38)
          {
            v36 = v38;
            goto LABEL_49;
          }
          if (!v37)
          {
            v97 = 0u;
            v98 = 0u;
            v95 = 0u;
            v96 = 0u;
            -[UICollectionView visibleCells](self, "visibleCells");
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v95, v101, 16);
            if (v70)
            {
              v71 = v70;
              v37 = 0;
              v72 = *(_QWORD *)v96;
              v91 = v69;
              do
              {
                for (i = 0; i != v71; ++i)
                {
                  if (*(_QWORD *)v96 != v72)
                    objc_enumerationMutation(v69);
                  v74 = *(void **)(*((_QWORD *)&v95 + 1) + 8 * i);
                  if (-[UIView _hasFocusableContents](v74))
                  {
                    -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v74);
                    v75 = (void *)objc_claimAutoreleasedReturnValue();
                    if (!v37)
                      goto LABEL_112;
                    v76 = *(id *)(v37 + 16);
                    if (!v76)
                      goto LABEL_112;
                    v77 = v76;
                    v92 = -[UICollectionViewData globalIndexForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v75);
                    v78 = v71;
                    v79 = v72;
                    v80 = self->_collectionViewData;
                    v81 = *(id *)(v37 + 16);
                    v82 = -[UICollectionViewData globalIndexForItemAtIndexPath:]((uint64_t)v80, v81);

                    v83 = v92 < v82;
                    v72 = v79;
                    v71 = v78;
                    v69 = v91;
                    if (v83)
                    {
LABEL_112:
                      +[_UICollectionViewFocusedItemState stateWithReusableView:]((uint64_t)_UICollectionViewFocusedItemState, v74);
                      v84 = objc_claimAutoreleasedReturnValue();

                      v37 = v84;
                    }

                  }
                }
                v71 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v95, v101, 16);
              }
              while (v71);

              v13 = v88;
              if (v37)
                goto LABEL_71;
            }
            else
            {

            }
            v85 = self->_collectionViewData;
            if (!v85)
              goto LABEL_124;
            if ((*(_BYTE *)&v85->_collectionViewDataFlags & 2) == 0)
              -[UICollectionViewData _updateItemCounts]((uint64_t)self->_collectionViewData);
            if (v85->_totalItemCount < 1)
              goto LABEL_124;
            -[UICollectionViewData indexPathForItemAtGlobalIndex:](self->_collectionViewData, 0);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            +[_UICollectionViewFocusedItemState stateWithIndexPath:elementKind:viewType:]((uint64_t)_UICollectionViewFocusedItemState, v86, CFSTR("UICollectionElementKindCell"), 0);
            v37 = objc_claimAutoreleasedReturnValue();

            if (!v37)
              goto LABEL_124;
          }
        }
LABEL_71:
        v44 = *(id *)(v37 + 8);

        if (v44)
        {
          v45 = (_QWORD *)v37;
          goto LABEL_100;
        }
        v89 = v13;
        -[UICollectionView _beginReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate](self, "_beginReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate");
        v46 = dyld_program_sdk_at_least();
        if (*(_QWORD *)(v37 + 32))
        {
          v47 = *(id *)(v37 + 24);
          v48 = *(id *)(v37 + 16);
          -[UICollectionView supplementaryViewForElementKind:atIndexPath:](self, "supplementaryViewForElementKind:atIndexPath:", v47, v48);
          v49 = (id)objc_claimAutoreleasedReturnValue();

          if (v49)
            goto LABEL_86;
          v50 = *(id *)(v37 + 24);
          v51 = *(id *)(v37 + 16);
          -[UICollectionView layoutAttributesForSupplementaryElementOfKind:atIndexPath:](self, "layoutAttributesForSupplementaryElementOfKind:atIndexPath:", v50, v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v52 || (objc_msgSend(v52, "isHidden") & 1) != 0)
          {
            v49 = 0;
            goto LABEL_85;
          }
          *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x40000000000uLL;
          v55 = *(id *)(v37 + 24);
          v49 = *(id *)(v37 + 16);
          v56 = -[UICollectionView _createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:](self, "_createPreparedSupplementaryViewForElementOfKind:atIndexPath:layout:withLayoutAttributes:applyAttributes:", v55, v49, self->_layout, v52, 1);
        }
        else
        {
          v53 = *(id *)(v37 + 16);
          -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v53);
          v49 = (id)objc_claimAutoreleasedReturnValue();

          if (v49 && !objc_msgSend(v49, "_isHiddenForReuse"))
          {
LABEL_86:
            v45 = -[_UICollectionViewFocusedItemState copyWithReusableView:]((_QWORD *)v37, v49);

            if ((v46 & 1) == 0)
            {
              -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", v45);
              goto LABEL_99;
            }
            if (v45)
              v58 = (void *)v45[1];
            else
              v58 = 0;
            v59 = v58;

            if (!v59)
            {
LABEL_99:
              -[UICollectionView _endReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate](self, "_endReusableViewCreationAndSelfSizingOutsideVisibleCellsUpdate");

              v13 = v89;
              if (v45)
              {
LABEL_100:
                v67 = (id)v45[1];
                if (v67)
                {
                  v68 = v67;
                  v7 = v68;
LABEL_126:

                  v5 = v90;
                  goto LABEL_8;
                }
LABEL_125:
                v94.receiver = self;
                v94.super_class = (Class)UICollectionView;
                -[UIView preferredFocusedView](&v94, sel_preferredFocusedView);
                v7 = (void *)objc_claimAutoreleasedReturnValue();
                v68 = 0;
                goto LABEL_126;
              }
LABEL_124:
              v45 = 0;
              goto LABEL_125;
            }
            if (v45)
            {
              subviewManager = self->_subviewManager;
              if (v45[4])
              {
                v61 = (id)v45[1];
                v62 = (id)v45[3];
                v63 = v45[4];
                v64 = (id)v45[2];
                if (subviewManager)
                  -[_UICollectionViewSubviewCollection setView:ofKind:inCategory:atIndexPath:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v61, (uint64_t)v62, v63, (uint64_t)v64);

                goto LABEL_98;
              }
              -[_UICollectionViewFocusedItemState cell](v45);
              v61 = (id)objc_claimAutoreleasedReturnValue();
              v65 = (void *)v45[2];
            }
            else
            {
              subviewManager = self->_subviewManager;
              -[_UICollectionViewFocusedItemState cell](0);
              v61 = (id)objc_claimAutoreleasedReturnValue();
              v65 = 0;
            }
            v66 = v65;
            -[_UICollectionViewSubviewManager setVisibleCell:atIndexPath:]((uint64_t)subviewManager, (uint64_t)v61, (uint64_t)v66);

LABEL_98:
            goto LABEL_99;
          }
          v54 = *(id *)(v37 + 16);
          -[UICollectionView layoutAttributesForItemAtIndexPath:](self, "layoutAttributesForItemAtIndexPath:", v54);
          v52 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v52 || (objc_msgSend(v52, "isHidden") & 1) != 0)
          {
LABEL_85:

            goto LABEL_86;
          }
          *((_QWORD *)&self->_collectionViewFlags + 1) |= 0x40000000000uLL;
          v55 = *(id *)(v37 + 16);
          -[UICollectionView _preparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](self, "_preparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", v55, v52, 1, v46 ^ 1u, 1);
          v56 = (id)objc_claimAutoreleasedReturnValue();
        }
        v57 = v56;

        *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x40000000000uLL;
        v49 = v57;
        goto LABEL_85;
      }
LABEL_46:
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_47;
    }
LABEL_41:

    goto LABEL_46;
  }
LABEL_8:

  return v7;
}

- (id)_delegatePreferredIndexPath
{
  uint64_t collectionViewFlags;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  collectionViewFlags = (uint64_t)self->_collectionViewFlags;
  if ((collectionViewFlags & 0x4000000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "indexPathForPreferredFocusedViewInCollectionView:", self);
    v7 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if ((collectionViewFlags & 0x1000000) == 0)
    {
      v5 = 0;
      return v5;
    }
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "indexPathForPreferredFocusedItemForCollectionView:", self);
    v7 = objc_claimAutoreleasedReturnValue();
  }
  v5 = (void *)v7;

  if (v5 && !-[UICollectionView _indexPathIsValid:](self, "_indexPathIsValid:", v5))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 14975, CFSTR("no cell for index path (%@) - the collection view's delegate must return an index path for a valid UICollectionViewCell from -indexPathForPreferredFocusedViewInCollectionView:"), v5);

  }
  return v5;
}

- (id)_layoutAttributesForFailedMovementWithHeading:(unint64_t)a3
{
  void *v3;
  char v4;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  CGFloat Height;
  CGRect v22;
  CGRect v23;

  if ((a3 & 0x300) != 0)
  {
    v3 = (void *)MEMORY[0x1E0C9AA60];
  }
  else
  {
    v4 = a3;
    -[UIScrollView visibleBounds](self, "visibleBounds");
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = _UIVectorForFocusHeading(v4);
    v16 = v15;
    v17 = fabs(v15);
    if (fabs(v14) > 2.22044605e-16 || v17 > 2.22044605e-16)
    {
      v22.origin.x = v7;
      v22.origin.y = v9;
      v22.size.width = v11;
      v22.size.height = v13;
      v19 = v7 + v14 * CGRectGetWidth(v22);
      v23.origin.x = v7;
      v23.origin.y = v9;
      v23.size.width = v11;
      v23.size.height = v13;
      Height = CGRectGetHeight(v23);
      -[UICollectionViewData layoutAttributesForElementsInRect:](self->_collectionViewData, v19, v9 + v16 * Height, v11, v13);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = (void *)MEMORY[0x1E0C9AA60];
    }
  }
  return v3;
}

- (void)_focusMovementDidFailNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  UICollectionView *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  int v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  double v31;
  uint64_t i;
  _WORD *v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  double v38;
  double v39;
  _WORD *v40;
  void *v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (self->_searchFullPageOnFocusUpdate)
  {
    -[UIView _focusRegionFocusSystem](self, "_focusRegionFocusSystem");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "object");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5 == v6)
    {
      objc_msgSend(v4, "userInfo");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("UIFocusUpdateContextKey"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v8, "previouslyFocusedItem");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v10 = v9;
        objc_msgSend(v10, "_collectionView");
        v11 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

        if (v11 == self)
        {
          -[UICollectionView _focusedItemState](self, "_focusedItemState");
          v12 = objc_claimAutoreleasedReturnValue();
          v13 = (void *)v12;
          v14 = v12 ? *(void **)(v12 + 16) : 0;
          v15 = v14;
          -[UICollectionView indexPathForCell:](self, "indexPathForCell:", v10);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "isEqual:", v16);

          if (v17)
          {
            objc_msgSend(v10, "frame");
            v19 = v18;
            v21 = v20;
            v23 = v22;
            v25 = v24;
            -[UICollectionView _layoutAttributesForFailedMovementWithHeading:](self, "_layoutAttributesForFailedMovementWithHeading:", objc_msgSend(v8, "focusHeading"));
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v43 = 0u;
            v44 = 0u;
            v45 = 0u;
            v46 = 0u;
            v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
            if (v27)
            {
              v28 = v27;
              v42 = v10;
              v29 = 0;
              v30 = *(_QWORD *)v44;
              v31 = 1.79769313e308;
              do
              {
                for (i = 0; i != v28; ++i)
                {
                  if (*(_QWORD *)v44 != v30)
                    objc_enumerationMutation(v26);
                  v33 = *(_WORD **)(*((_QWORD *)&v43 + 1) + 8 * i);
                  if (v33)
                  {
                    if ((v33[144] & 1) != 0)
                    {
                      objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * i), "frame");
                      v38 = UIDistanceBetweenRects(v34, v35, v36, v37, v19, v21, v23, v25);
                      if (v38 < v31)
                      {
                        v39 = v38;
                        v40 = v33;

                        v31 = v39;
                        v29 = v40;
                      }
                    }
                  }
                }
                v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
              }
              while (v28);
              v10 = v42;
              if (v29)
              {
                +[_UICollectionViewFocusedItemState stateWithLayoutAttributes:]((uint64_t)_UICollectionViewFocusedItemState, v29);
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", v41);

                -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");
              }
            }

          }
        }

      }
    }
  }

}

- (BOOL)_cellCanBecomeFocused:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  _BOOL4 v8;
  char v9;
  uint64_t collectionViewFlags;
  void *v11;
  void *v12;
  void *v14;
  uint64_t v15;

  v4 = a3;
  -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5
    || objc_msgSend(v5, "length") != 2
    || objc_msgSend(v6, "row") == 0x7FFFFFFFFFFFFFFFLL
    || objc_msgSend(v6, "section") == 0x7FFFFFFFFFFFFFFFLL
    || (p_collectionViewFlags = &self->_collectionViewFlags, (*((_WORD *)&self->_collectionViewFlags + 8) & 0x4000) != 0))
  {
    v9 = 0;
  }
  else
  {
    v8 = -[UICollectionView _allowsEffectiveFocus](self, "_allowsEffectiveFocus");
    v9 = v8;
    collectionViewFlags = *(_QWORD *)p_collectionViewFlags;
    if ((*(_QWORD *)p_collectionViewFlags & 0x280000) != 0)
    {
      if ((collectionViewFlags & 0x80000) != 0)
      {
        -[UICollectionView _delegateProxy](self, "_delegateProxy");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v11, "_collectionView:canFocusItemAtIndexPath:", self, v6);

        collectionViewFlags = (uint64_t)self->_collectionViewFlags;
      }
      if ((collectionViewFlags & 0x200000) != 0)
      {
        -[UICollectionView _delegateProxy](self, "_delegateProxy");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v12, "collectionView:canFocusItemAtIndexPath:", self, v6);

      }
    }
    else if (v8)
    {
      -[UIView _focusBehavior](self, "_focusBehavior");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "cellFocusability");

      if (v15 == 1)
        v9 = -[UICollectionView _inferFocusabilityForCell:atIndexPath:](self, "_inferFocusabilityForCell:atIndexPath:", v4, v6);
      else
        v9 = 1;
    }
  }

  return v9;
}

- (void)_cellBecameFocused:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((*(_QWORD *)&self->_collectionViewFlags & 0x400000) != 0)
  {
    v6 = v4;
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_collectionView:didFocusItemAtIndexPath:", self, v6);

    v4 = v6;
  }

}

- (int64_t)_cellFocusItemDeferral:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  int64_t v9;

  v4 = a3;
  if (!-[UICollectionView _shouldBecomeFocusedOnSelection](self, "_shouldBecomeFocusedOnSelection"))
    goto LABEL_6;
  if (!-[UICollectionView selectionFollowsFocus](self, "selectionFollowsFocus"))
    goto LABEL_6;
  -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v5)
    goto LABEL_6;
  v6 = (void *)v5;
  -[UICollectionView indexPathsForSelectedItems](self, "indexPathsForSelectedItems");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "containsObject:", v6);

  if ((v8 & 1) != 0)
    v9 = 2;
  else
LABEL_6:
    v9 = 0;

  return v9;
}

- (BOOL)_containsFocusedItem
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  BOOL v6;

  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)v2;
  if (v2)
    v4 = *(void **)(v2 + 8);
  else
    v4 = 0;
  v5 = v4;
  v6 = v5 != 0;

  return v6;
}

- (BOOL)_isMovingFocusFromHorizontalIndexBarToCellContent:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  UICollectionView *v9;
  BOOL v10;

  v4 = a3;
  -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "previouslyFocusedView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "_isViewEntryCell:", v7))
    {
      objc_msgSend(v4, "nextFocusedView");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "superview");
      v9 = (UICollectionView *)objc_claimAutoreleasedReturnValue();
      v10 = v9 == self;

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

- (void)_performWhileSuppressingPromiseRegionGeneration:(id)a3
{
  id v5;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  __int16 v7;
  int v8;
  unsigned int v9;
  void *v10;
  id v11;

  v5 = a3;
  v11 = v5;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 15139, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("block"));

    v5 = 0;
  }
  p_collectionViewFlags = &self->_collectionViewFlags;
  v7 = *((_WORD *)p_collectionViewFlags + 8);
  p_collectionViewFlags = ($91A2B40F64213FFC45A7830E5F2A00D4 *)((char *)p_collectionViewFlags + 16);
  *((_BYTE *)p_collectionViewFlags + 2) = *((_BYTE *)p_collectionViewFlags + 2);
  *(_WORD *)p_collectionViewFlags = v7 | 0x8000;
  (*((void (**)(void))v5 + 2))();
  v8 = *(_WORD *)p_collectionViewFlags;
  v9 = (v8 & 0xFFFF7FFF | (*((unsigned __int8 *)p_collectionViewFlags + 2) << 16)) >> 16;
  *(_WORD *)p_collectionViewFlags = v8 & 0x7FFF | v7 & 0x8000;
  *((_BYTE *)p_collectionViewFlags + 2) = v9;

}

- (id)focusItemsInRect:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  objc_super v13;
  objc_super v14;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  if (_UIViewShouldReturnSubviewsInFocusItemsInRect())
  {
    v14.receiver = self;
    v14.super_class = (Class)UICollectionView;
    -[UIView focusItemsInRect:](&v14, sel_focusItemsInRect_, x, y, width, height);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView coordinateSpace](self, "coordinateSpace");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _focusPromiseRegionsInRect:inCoordinateSpace:inSection:](self, "_focusPromiseRegionsInRect:inCoordinateSpace:inSection:", v9, 0x7FFFFFFFFFFFFFFFLL, x, y, width, height);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "arrayByAddingObjectsFromArray:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v13.receiver = self;
    v13.super_class = (Class)UICollectionView;
    -[UIView focusItemsInRect:](&v13, sel_focusItemsInRect_, x, y, width, height);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v11;
}

- (id)_extantFocusItemsInRect:(CGRect)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)UICollectionView;
  -[UIView focusItemsInRect:](&v4, sel_focusItemsInRect_, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)_childFocusRegionsInRect:(CGRect)a3 inCoordinateSpace:(id)a4
{
  double height;
  double width;
  double y;
  double x;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  objc_super v14;
  objc_super v15;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v9 = a4;
  if (_UIViewShouldReturnSubviewsInFocusItemsInRect())
  {
    v15.receiver = self;
    v15.super_class = (Class)UICollectionView;
    -[UIView _childFocusRegionsInRect:inCoordinateSpace:](&v15, sel__childFocusRegionsInRect_inCoordinateSpace_, v9, x, y, width, height);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14.receiver = self;
    v14.super_class = (Class)UICollectionView;
    -[UIView _childFocusRegionsInRect:inCoordinateSpace:](&v14, sel__childFocusRegionsInRect_inCoordinateSpace_, v9, x, y, width, height);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _focusPromiseRegionsInRect:inCoordinateSpace:inSection:](self, "_focusPromiseRegionsInRect:inCoordinateSpace:inSection:", v9, 0x7FFFFFFFFFFFFFFFLL, x, y, width, height);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "arrayByAddingObjectsFromArray:", v12);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v10;
}

- (id)_focusPromiseRegionsInRect:(CGRect)a3 inCoordinateSpace:(id)a4 inSection:(int64_t)a5
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _WORD *v18;
  _UICollectionViewOrthogonalScrollerSectionController *orthogonalScrollerController;
  void *v20;
  int v21;
  _UICollectionViewOrthogonalScrollerSectionController *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  char v27;
  void *v28;
  void *v29;
  UICollectionReusableView *newContentView;
  void *v31;
  char v32;
  _UICollectionViewCellPromiseRegion *v33;
  id v35;
  id obj;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)&self->_collectionViewFlags + 8) & 0x8000) != 0)
  {
    v35 = (id)MEMORY[0x1E0C9AA60];
  }
  else
  {
    -[UIView convertRect:fromCoordinateSpace:](self, "convertRect:fromCoordinateSpace:", a4, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v35 = (id)objc_opt_new();
    -[UICollectionViewData layoutAttributesForElementsInRect:](self->_collectionViewData, v8, v10, v12, v14);
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
    if (v15)
    {
      v16 = v15;
      v37 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v39 != v37)
            objc_enumerationMutation(obj);
          v18 = *(_WORD **)(*((_QWORD *)&v38 + 1) + 8 * i);
          orthogonalScrollerController = self->_orthogonalScrollerController;
          objc_msgSend(v18, "indexPath");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = -[_UICollectionViewOrthogonalScrollerSectionController isIndexPathInOrthogonalScrollingSection:]((uint64_t)orthogonalScrollerController, v20);

          if (a5 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v22 = self->_orthogonalScrollerController;
            objc_msgSend(v18, "indexPath");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v22) = -[_UICollectionViewOrthogonalScrollerSectionController isIndexPathInExtantOrthogonalScroller:]((_BOOL8)v22, v23);

            v24 = v21 & v22 ^ 1;
          }
          else
          {
            objc_msgSend(v18, "indexPath");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v25, "section") == a5)
            {
              objc_msgSend(v18, "indexPath");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              v24 = objc_msgSend(v26, "item") != 0x7FFFFFFFFFFFFFFFLL;

            }
            else
            {
              v24 = 0;
            }

          }
          v27 = objc_msgSend(v18, "isHidden");
          if (v18 && (v27 & 1) == 0 && v24 && (v18[144] & 1) != 0)
          {
            objc_msgSend(v18, "indexPath");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v28);
            v29 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v29 || objc_msgSend(v29, "_isHiddenForReuse"))
            {
              newContentView = self->_newContentView;
              if (!newContentView
                || (-[UICollectionReusableView _layoutAttributes](newContentView, "_layoutAttributes"),
                    v31 = (void *)objc_claimAutoreleasedReturnValue(),
                    v32 = objc_msgSend(v31, "isEqual:", v18),
                    v31,
                    (v32 & 1) == 0))
              {
                v33 = objc_alloc_init(_UICollectionViewCellPromiseRegion);
                -[_UICollectionViewCellPromiseRegion setCollectionView:](v33, "setCollectionView:", self);
                -[_UICollectionViewCellPromiseRegion setParentScrollView:](v33, "setParentScrollView:", self);
                -[_UICollectionViewCellPromiseRegion setLayoutAttributes:](v33, "setLayoutAttributes:", v18);
                if (v21)
                  -[_UICollectionViewOrthogonalScrollerSectionController updateParentScrollViewForCellPromiseRegion:]((id *)&self->_orthogonalScrollerController->super.isa, v33);
                objc_msgSend(v35, "addObject:", v33);

              }
            }

          }
        }
        v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
      }
      while (v16);
    }

  }
  return v35;
}

- (id)_fulfillPromisedFocusRegionForCell:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  unint64_t v15;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  int v20;
  UICollectionView *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "layoutAttributes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "indexPath");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7 && !objc_msgSend(v7, "_isHiddenForReuse"))
  {
    v15 = qword_1EDDC6780;
    if (!qword_1EDDC6780)
    {
      v15 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v15, (unint64_t *)&qword_1EDDC6780);
    }
    if ((*(_BYTE *)v15 & 1) != 0)
    {
      v17 = *(NSObject **)(v15 + 8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = v17;
        objc_msgSend(v6, "_ui_shortDescription");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 134218498;
        v21 = self;
        v22 = 2112;
        v23 = v19;
        v24 = 2112;
        v25 = v8;
        _os_log_impl(&dword_185066000, v18, OS_LOG_TYPE_ERROR, "[UICV %p] Returning existing cell to fulfill focus promise at %@: %@", (uint8_t *)&v20, 0x20u);

      }
    }
    v10 = v8;
  }
  else
  {
    objc_msgSend(v4, "layoutAttributes");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _preparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](self, "_preparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:", v6, v9, 1, 0, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    -[UICollectionView _setCurrentPromiseFulfillmentCell:](self, "_setCurrentPromiseFulfillmentCell:", v10);
    -[_UICollectionViewSubviewManager setVisibleCell:atIndexPath:]((uint64_t)self->_subviewManager, (uint64_t)v10, (uint64_t)v6);
    objc_msgSend(v10, "layoutIfNeeded");
    v11 = qword_1EDDC6778;
    if (!qword_1EDDC6778)
    {
      v11 = __UILogCategoryGetNode("UICollectionViewCellLifeCycle", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v11, (unint64_t *)&qword_1EDDC6778);
    }
    if ((*(_BYTE *)v11 & 1) != 0)
    {
      v12 = *(NSObject **)(v11 + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = v12;
        objc_msgSend(v6, "_ui_shortDescription");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 134218498;
        v21 = self;
        v22 = 2112;
        v23 = v14;
        v24 = 2112;
        v25 = v10;
        _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "[UICV %p] Creating (or unhiding prefetched) cell to fulfill focus promise at %@: %@", (uint8_t *)&v20, 0x20u);

      }
    }
  }

  return v10;
}

- (id)_focusScrollBoundaryMetricsForItem:(id)a3
{
  id v4;
  _UIFocusScrollBoundaryMetrics *v5;

  v4 = a3;
  v5 = -[_UIFocusScrollBoundaryMetrics initWithFocusItem:scrollView:]([_UIFocusScrollBoundaryMetrics alloc], "initWithFocusItem:scrollView:", v4, self);
  -[UICollectionView _updateFocusScrollBoundaryMetrics:forItem:inSection:](self, "_updateFocusScrollBoundaryMetrics:forItem:inSection:", v5, v4, 0x7FFFFFFFFFFFFFFFLL);

  return v5;
}

- (void)_updateFocusScrollBoundaryMetrics:(id)a3 forItem:(id)a4 inSection:(int64_t)a5
{
  id v8;
  id v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  UICollectionView *v17;
  _UIFocusScrollBoundaryMetrics *v18;
  _UIFocusScrollBoundaryMetrics *v19;
  UICollectionView *v20;
  UICollectionView *v21;
  UICollectionView *v22;
  _UIFocusScrollBoundaryMetrics *v23;
  BOOL v24;
  UICollectionView *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  UICollectionView *v29;
  _UIFocusScrollBoundaryMetrics *v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  UICollectionView *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE *v46;
  void *v47;
  int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  int64_t v54;
  objc_super v55;
  _QWORD v56[4];
  id v57;

  v8 = a3;
  v9 = a4;
  if ((objc_msgSend(v8, "hasDisprovedAllRelevantAssumptions") & 1) != 0)
    goto LABEL_55;
  if (a5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    -[UICollectionView _collectionViewData](self, "_collectionViewData");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[UICollectionViewData numberOfSections]((uint64_t)v10);

    if (a5 < 0 || v11 <= a5)
      goto LABEL_55;
  }
  -[UICollectionView _collectionViewData](self, "_collectionViewData");
  v12 = objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    v14 = 0;
    if (a5 != 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_9;
LABEL_54:
    v55.receiver = self;
    v55.super_class = (Class)UICollectionView;
    -[UIScrollView _focusScrollBoundaryMetricsForItem:](&v55, sel__focusScrollBoundaryMetricsForItem_, v9, v50);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "consumeOtherMetrics:", v49);

    goto LABEL_55;
  }
  v13 = (_QWORD *)v12;
  if ((*(_BYTE *)(v12 + 96) & 2) == 0)
    -[UICollectionViewData _updateItemCounts](v12);
  v14 = v13[21];

  if (a5 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v14 > 0)
    {
      v16 = 0;
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_9:
  -[UICollectionView _collectionViewData](self, "_collectionViewData");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[UICollectionViewData numberOfItemsInSection:]((uint64_t)v15, a5);

  if (v16 < 1)
    goto LABEL_55;
LABEL_13:
  v50 = v16;
  v51 = v14;
  objc_opt_class();
  _UIFocusEnvironmentContainingView(v9);
  v17 = (UICollectionView *)objc_claimAutoreleasedReturnValue();
  v52 = v8;
  v18 = (_UIFocusScrollBoundaryMetrics *)v8;
  v19 = v18;
  v20 = 0;
  v53 = v9;
  v54 = a5;
  if (v17 && v17 != self)
  {
    v20 = 0;
    while (1)
    {
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        -[UICollectionView _collectionView](v17, "_collectionView");
        v21 = (UICollectionView *)objc_claimAutoreleasedReturnValue();
        v22 = v21;
        if (v21 == self)
        {
          v25 = v17;

          -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          if (v26)
          {
            -[UICollectionView _collectionViewData](self, "_collectionViewData");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = -[UICollectionViewData validatedGlobalIndexForItemAtIndexPath:]((uint64_t)v27, v26);

            a5 = v54;
            if (v28 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v30 = -[_UIFocusScrollBoundaryMetrics initWithFocusItem:scrollView:]([_UIFocusScrollBoundaryMetrics alloc], "initWithFocusItem:scrollView:", v25, self);

              v17 = v25;
              v20 = v25;
              goto LABEL_32;
            }
          }

        }
        else if (a5 == 0x7FFFFFFFFFFFFFFFLL
               && v21
               && -[UICollectionView _canDeriveVisibleBoundsFromContainingScrollView](v21, "_canDeriveVisibleBoundsFromContainingScrollView"))
        {
          v9 = v53;
          v23 = -[_UIFocusScrollBoundaryMetrics initWithFocusItem:scrollView:]([_UIFocusScrollBoundaryMetrics alloc], "initWithFocusItem:scrollView:", v53, v22);
          -[_UIFocusScrollBoundaryMetrics consumeOtherMetrics:](v23, "consumeOtherMetrics:", v19);
          -[UICollectionView _updateFocusScrollBoundaryMetrics:forItem:inSection:](v22, "_updateFocusScrollBoundaryMetrics:forItem:inSection:", v23, v53, 0x7FFFFFFFFFFFFFFFLL);
          v24 = -[_UIFocusScrollBoundaryMetrics consumeOtherMetrics:](v19, "consumeOtherMetrics:", v23);

          if (v24)
          {
            v48 = 1;
            v30 = v19;
            goto LABEL_52;
          }
          v25 = v20;
          a5 = v54;
        }
        else
        {
          v25 = v20;
        }

        v20 = v25;
      }
      -[UIView superview](v17, "superview", v50);
      v29 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

      v28 = 0x7FFFFFFFFFFFFFFFLL;
      if (v29)
      {
        v17 = v29;
        if (v29 != self)
          continue;
      }
      v17 = v29;
      v30 = v19;
      goto LABEL_32;
    }
  }
  v30 = v18;
  v28 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_32:
  if (a5 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v35 = 0;
    v36 = v51;
  }
  else
  {
    -[UICollectionView _collectionViewData](self, "_collectionViewData");
    v31 = objc_claimAutoreleasedReturnValue();
    v32 = a5;
    v33 = (void *)v31;
    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", 0, v32);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = -[UICollectionViewData globalIndexForItemAtIndexPath:]((uint64_t)v33, v34);

    v36 = v35 + v50;
  }
  v37 = (UICollectionView *)objc_opt_new();
  v22 = v37;
  v38 = v35 + 5;
  if (v35 + 5 >= v36 - 1)
    v38 = v36 - 1;
  -[UICollectionView addIndexesInRange:](v37, "addIndexesInRange:", v35, v38 - v35 + 1, v50);
  if (v36 - 6 <= v35)
    v39 = v35;
  else
    v39 = v36 - 6;
  -[UICollectionView addIndexesInRange:](v22, "addIndexesInRange:", v39, v36 - v39);
  if (v28 != 0x7FFFFFFFFFFFFFFFLL)
  {
    -[UICollectionView addIndexesInRange:](v22, "addIndexesInRange:");
    -[UICollectionView removeIndex:](v22, "removeIndex:", v28);
  }
  v40 = (void *)objc_opt_new();
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 3221225472;
  v56[2] = __72__UICollectionView__updateFocusScrollBoundaryMetrics_forItem_inSection___block_invoke;
  v56[3] = &unk_1E16B2100;
  v41 = v40;
  v57 = v41;
  -[UICollectionView enumerateIndexesUsingBlock:](v22, "enumerateIndexesUsingBlock:", v56);
  if (objc_msgSend(v41, "count"))
  {
    v42 = 0;
    while (1)
    {
      v43 = (v42 & 1) != 0 ? objc_msgSend(v41, "count") + ~(v42 >> 1) : v42 >> 1;
      objc_msgSend(v41, "objectAtIndexedSubscript:", v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = objc_msgSend(v44, "integerValue");

      -[UICollectionView _collectionViewData](self, "_collectionViewData");
      v46 = (_BYTE *)objc_claimAutoreleasedReturnValue();
      -[UICollectionViewData layoutAttributesForGlobalItemIndex:](v46, v45);
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v47, "frame");
      -[_UIFocusScrollBoundaryMetrics checkOtherRect:](v30, "checkOtherRect:");
      LODWORD(v46) = -[_UIFocusScrollBoundaryMetrics consumeOtherMetrics:](v19, "consumeOtherMetrics:", v30);

      if ((_DWORD)v46)
        break;
      if (++v42 >= objc_msgSend(v41, "count"))
        goto LABEL_49;
    }
    v48 = 1;
  }
  else
  {
LABEL_49:
    v48 = 0;
  }

  v9 = v53;
LABEL_52:

  v8 = v52;
  if (v54 == 0x7FFFFFFFFFFFFFFFLL && !v48)
    goto LABEL_54;
LABEL_55:

}

void __72__UICollectionView__updateFocusScrollBoundaryMetrics_forItem_inSection___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

- (id)keyCommands
{
  return -[_UICollectionViewMultiSelectController keyCommandsForSelectionExtension](self->_multiSelectController, "keyCommandsForSelectionExtension");
}

- (id)targetForAction:(SEL)a3 withSender:(id)a4
{
  id v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  objc_super v12;

  v6 = a4;
  -[_UICollectionViewMultiSelectController targetForKeyCommands](self->_multiSelectController, "targetForKeyCommands");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_opt_respondsToSelector();

  if ((v8 & 1) != 0)
  {
    -[_UICollectionViewMultiSelectController targetForKeyCommands](self->_multiSelectController, "targetForKeyCommands");
    v9 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12.receiver = self;
    v12.super_class = (Class)UICollectionView;
    -[UIResponder targetForAction:withSender:](&v12, sel_targetForAction_withSender_, a3, v6);
    v9 = objc_claimAutoreleasedReturnValue();
  }
  v10 = (void *)v9;

  return v10;
}

- (id)_targetIndexPathForMoveOfItemFromOriginalIndexPath:(id)a3 atCurrentIndexPath:(id)a4 toProposedIndexPath:(id)a5
{
  id v8;
  id v9;
  id v10;
  uint64_t collectionViewFlags;
  void *v12;
  uint64_t v13;
  void *v14;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  collectionViewFlags = (uint64_t)self->_collectionViewFlags;
  if ((collectionViewFlags & 0x40000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "collectionView:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:", self, v8, v9, v10);
    v13 = objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  if ((collectionViewFlags & 0x20000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:", self, v9, v10);
    v13 = objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  if ((collectionViewFlags & 0x10000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "_collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:", self, v9, v10);
    v13 = objc_claimAutoreleasedReturnValue();
LABEL_7:
    v14 = (void *)v13;

    v10 = v14;
  }

  return v10;
}

- (BOOL)_canReorderItemAtIndexPath:(id)a3
{
  id v4;
  uint64_t collectionViewFlags;
  void *v6;
  char v7;
  BOOL v8;

  v4 = a3;
  if (!v4 || !-[UICollectionView _dataSourceSupportsReordering](self, "_dataSourceSupportsReordering"))
    goto LABEL_12;
  if (!-[UICollectionView _dataSourceImplementsReorderingHandlers](self, "_dataSourceImplementsReorderingHandlers"))
  {
    collectionViewFlags = (uint64_t)self->_collectionViewFlags;
    if ((~collectionViewFlags & 0x6000000000000000) != 0)
    {
      if ((~collectionViewFlags & 0x300000000000000) == 0)
      {
        -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "_collectionView:canMoveItemAtIndexPath:", self, v4);
        goto LABEL_6;
      }
      if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 4) == 0 || dyld_program_sdk_at_least())
      {
        v8 = (collectionViewFlags & 0x4200000000000000) != 0;
        goto LABEL_13;
      }
LABEL_12:
      v8 = 0;
      goto LABEL_13;
    }
  }
  -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "collectionView:canMoveItemAtIndexPath:", self, v4);
LABEL_6:
  v8 = v7;

LABEL_13:
  return v8;
}

- (BOOL)_canBeginReorderingItem
{
  int v3;

  v3 = -[UICollectionViewLayout _allowsItemInteractionsToBegin](self->_layout, "_allowsItemInteractionsToBegin");
  if (v3)
    LOBYTE(v3) = -[_UICollectionViewDragAndDropController canBeginReorderingSession]((uint64_t)self->_dragAndDropController);
  return v3;
}

- (BOOL)beginInteractiveMovementForItemAtIndexPath:(NSIndexPath *)indexPath
{
  return -[UICollectionView _beginReorderingItemAtIndexPath:isLegacyMovement:](self, "_beginReorderingItemAtIndexPath:isLegacyMovement:", indexPath, 1);
}

- (BOOL)_beginReorderingItemAtIndexPath:(id)a3 isLegacyMovement:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  _UICollectionViewDragAndDropController *dragAndDropController;
  unint64_t sessionKind;
  BOOL v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD v21[5];
  id v22;
  id v23;

  v4 = a4;
  v6 = a3;
  if ((!v4 || -[UICollectionView _canBeginReorderingItem](self, "_canBeginReorderingItem"))
    && ((dragAndDropController = self->_dragAndDropController) == 0
      ? (sessionKind = 0)
      : (sessionKind = dragAndDropController->_sessionKind),
        -[UICollectionView _canReorderItemAtIndexPath:](self, "_canReorderItemAtIndexPath:", v6)
     || (sessionKind & 0xFFFFFFFFFFFFFFFELL) == 2))
  {
    -[UICollectionView _resetPrefetchState](self, "_resetPrefetchState");
    -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_layoutAttributes");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "center");
    v13 = v12;
    v15 = v14;

    -[_UIDragFeedbackGenerator userInteractionStartedAtLocation:](self->_reorderFeedbackGenerator, "userInteractionStartedAtLocation:", v13, v15);
    if (sessionKind == 1)
      -[_UIDragSnappingFeedbackGenerator draggedObjectLiftedAtLocation:](self->_reorderFeedbackGenerator, "draggedObjectLiftedAtLocation:", v13, v15);
    -[_UICollectionViewDragAndDropController beginReorderingForItemAtIndexPath:cell:]((uint64_t)self->_dragAndDropController, v6, v10);
    -[UICollectionView _cellForItemAtIndexPath:](self, "_cellForItemAtIndexPath:", v6);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    self->_reorderingTargetPosition.x = v13;
    self->_reorderingTargetPosition.y = v15;
    -[UICollectionView _reparentViewIntoSelf:](self, "_reparentViewIntoSelf:", v16);
    -[UICollectionViewData layoutAttributesForItemAtIndexPath:]((uint64_t)self->_collectionViewData, v6);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (dyld_program_sdk_at_least())
    {
      -[UIView traitCollection](self, "traitCollection");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "userInterfaceIdiom");

      if (v19 == 6)
      {
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = __69__UICollectionView__beginReorderingItemAtIndexPath_isLegacyMovement___block_invoke;
        v21[3] = &unk_1E16B47A8;
        v21[4] = self;
        v22 = v17;
        v23 = v16;
        +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v21, 0.3);

      }
      else
      {
        -[UICollectionView _applyLayoutAttributes:toView:](self, "_applyLayoutAttributes:toView:", v17, v16);
      }
    }
    else
    {
      -[UICollectionView _addControlledSubview:atZIndex:forced:initialAttributes:](self, "_addControlledSubview:atZIndex:forced:initialAttributes:", v16, objc_msgSend(v17, "zIndex"), 1, 0);
    }

    v9 = 1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t __69__UICollectionView__beginReorderingItemAtIndexPath_isLegacyMovement___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_applyLayoutAttributes:toView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (void)updateInteractiveMovementTargetPosition:(CGPoint)targetPosition
{
  double y;
  double x;

  y = targetPosition.y;
  x = targetPosition.x;
  -[UICollectionView _updateReorderingTargetPosition:](self, "_updateReorderingTargetPosition:");
  -[_UIDragFeedbackGenerator positionUpdatedAtLocation:](self->_reorderFeedbackGenerator, "positionUpdatedAtLocation:", x, y);
}

- (void)_updateReorderingTargetPosition:(CGPoint)a3
{
  double y;
  double x;
  double v6;
  double v7;
  void *v9;
  uint64_t v10;
  UICollectionViewLayout *layout;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  _UIDragSnappingFeedbackGenerator *reorderFeedbackGenerator;
  _UICollectionViewDragAndDropController *dragAndDropController;
  void *v21;
  _QWORD v22[7];
  _QWORD v23[5];
  id v24;
  id v25;
  BOOL v26;

  y = a3.y;
  x = a3.x;
  if (-[UICollectionView _isReordering](self, "_isReordering"))
  {
    v6 = self->_reorderingTargetPosition.x;
    v7 = self->_reorderingTargetPosition.y;
    if (v6 != x || v7 != y)
    {
      self->_reorderingTargetPosition.x = x;
      self->_reorderingTargetPosition.y = y;
      -[_UICollectionViewDragAndDropController updateReorderingForTargetPosition:]((uint64_t)self->_dragAndDropController, x, y);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "count");
      layout = self->_layout;
      objc_msgSend(v9, "allValues");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "allKeys");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionViewLayout _invalidationContextForReorderingTargetPosition:targetIndexPaths:withPreviousPosition:previousIndexPaths:](layout, "_invalidationContextForReorderingTargetPosition:targetIndexPaths:withPreviousPosition:previousIndexPaths:", v12, v13, x, y, v6, v7);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      v15 = MEMORY[0x1E0C809B0];
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = __52__UICollectionView__updateReorderingTargetPosition___block_invoke;
      v23[3] = &unk_1E16B4030;
      v23[4] = self;
      v26 = v10 != 0;
      v16 = v9;
      v24 = v16;
      v17 = v14;
      v25 = v17;
      v18 = -[UICollectionView _performShadowUpdates:](self, "_performShadowUpdates:", v23);
      if (v10)
      {
        reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
        v22[0] = v15;
        v22[1] = 3221225472;
        v22[2] = __52__UICollectionView__updateReorderingTargetPosition___block_invoke_4;
        v22[3] = &unk_1E16B4E70;
        v22[4] = self;
        *(double *)&v22[5] = x;
        *(double *)&v22[6] = y;
        -[UIFeedbackGenerator performFeedbackWithDelay:insideBlock:](reorderFeedbackGenerator, "performFeedbackWithDelay:insideBlock:", v22, 0.05);
      }
      dragAndDropController = self->_dragAndDropController;
      if (!dragAndDropController || dragAndDropController->_sessionKind != 2)
      {
        -[UIScrollView _autoScrollAssistant](self, "_autoScrollAssistant");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "autoScrollFromPoint:", x, y);

      }
    }
  }
}

void __52__UICollectionView__updateReorderingTargetPosition___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  char v8;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __52__UICollectionView__updateReorderingTargetPosition___block_invoke_2;
  v5[3] = &unk_1E16B4008;
  v8 = *(_BYTE *)(a1 + 56);
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "_performBatchUpdates:completion:invalidationContext:tentativelyForReordering:", v5, 0, *(_QWORD *)(a1 + 48), 1);

}

uint64_t __52__UICollectionView__updateReorderingTargetPosition___block_invoke_2(uint64_t result)
{
  void *v1;
  _QWORD v2[5];

  if (*(_BYTE *)(result + 48))
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __52__UICollectionView__updateReorderingTargetPosition___block_invoke_3;
    v2[3] = &unk_1E16BD8F8;
    v1 = *(void **)(result + 32);
    v2[4] = *(_QWORD *)(result + 40);
    return objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v2);
  }
  return result;
}

void __52__UICollectionView__updateReorderingTargetPosition___block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "_indexPathBeforeShadowUpdatesForIndexPath:");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "_accessibilityPostReorderingAnnouncementForCurrentIndexPath:targetIndexPath:previousIndexPath:", v6, a3, a2);
  objc_msgSend(*(id *)(a1 + 32), "_moveItemAtIndexPath:toIndexPath:", a2, a3);

}

uint64_t __52__UICollectionView__updateReorderingTargetPosition___block_invoke_4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2552), "objectSnappedAtLocation:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

- (id)_autoScrollAssistantForIndexPath:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;

  v4 = a3;
  if (v4
    && -[_UICollectionViewOrthogonalScrollerSectionController isIndexPathInOrthogonalScrollingSection:]((uint64_t)self->_orthogonalScrollerController, v4))
  {
    -[_UICollectionViewOrthogonalScrollerSectionController autoScrollAssistantForOrthogonalScrollingSectionAtIndexPath:]((id *)&self->_orthogonalScrollerController->super.isa, v4);
    v5 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[UIScrollView _autoScrollAssistant](self, "_autoScrollAssistant");
    v5 = objc_claimAutoreleasedReturnValue();
  }
  v6 = (void *)v5;

  return v6;
}

- (void)_autoScrollAssistantUpdateContentOffset:(CGPoint)a3
{
  double y;
  double x;
  double v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  UIUserInterfaceLayoutDirection v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  double v32;
  double v33;
  double v34;
  double v35;
  objc_super v36;

  y = a3.y;
  x = a3.x;
  -[UIScrollView contentOffset](self, "contentOffset");
  v7 = v6;
  v9 = v8;
  v10 = -[UICollectionViewLayout _layoutAxis](self->_layout, "_layoutAxis");
  if (v10 - 1 > 1)
    goto LABEL_9;
  v11 = v10;
  -[UIView bounds](self, "bounds");
  v33 = v13;
  v34 = v12;
  -[UIScrollView contentSize](self, "contentSize");
  v32 = v14;
  v16 = v15;
  -[UIScrollView adjustedContentInset](self, "adjustedContentInset");
  v35 = v7;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = -[UIView effectiveUserInterfaceLayoutDirection](self, "effectiveUserInterfaceLayoutDirection");
  v26 = v25 == UIUserInterfaceLayoutDirectionRightToLeft ? v20 : v24;
  v27 = v25 == UIUserInterfaceLayoutDirectionRightToLeft ? v24 : v20;
  v28 = _UITotalEdgeDimensionsForLayoutAxis(v11, v18, v27, v22, v26);
  v29 = v28 + _UISizeValueForAxis(v11, v32, v16);
  v30 = v29 - _UISizeValueForAxis(v11, v34, v33);
  v31 = _UIPointValueForAxis(v11, x, y) > v30;
  v7 = v35;
  if (!v31)
  {
LABEL_9:
    v36.receiver = self;
    v36.super_class = (Class)UICollectionView;
    -[UIScrollView _autoScrollAssistantUpdateContentOffset:](&v36, sel__autoScrollAssistantUpdateContentOffset_, x, y);
    if (!-[UIScrollView isPagingEnabled](self, "isPagingEnabled"))
      -[UICollectionView _updateReorderingTargetPosition:](self, "_updateReorderingTargetPosition:", x - v7 + self->_reorderingTargetPosition.x, y - v9 + self->_reorderingTargetPosition.y);
  }
}

- (void)endInteractiveMovement
{
  -[UICollectionView _completeInteractiveMovementWithDisposition:](self, "_completeInteractiveMovementWithDisposition:", 0);
}

- (void)cancelInteractiveMovement
{
  -[UICollectionView _completeInteractiveMovementWithDisposition:](self, "_completeInteractiveMovementWithDisposition:", 1);
}

- (void)_completeInteractiveMovementWithDisposition:(int64_t)a3
{
  _UICollectionViewDragAndDropController *dragAndDropController;
  uint64_t v6;
  int v7;
  unint64_t v8;
  double x;
  double y;
  id v11;
  id v12;
  void *v13;
  _UIDragSnappingFeedbackGenerator *reorderFeedbackGenerator;
  void *v15;
  _UICollectionViewDragAndDropController *v16;
  unint64_t sessionKind;
  _UICollectionViewDragAndDropController *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  _UICollectionViewDragAndDropController *v29;
  NSIndexPath *cancellingToIndexPath;
  _UICollectionViewDragAndDropController *v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t i;
  void *v41;
  _UICollectionViewSubviewManager *subviewManager;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  _UIDragSnappingFeedbackGenerator *v47;
  uint64_t v48;
  BOOL v49;
  void *v50;
  void *v51;
  void *v52;
  BOOL v53;
  _QWORD v54[7];
  _QWORD v55[5];
  id v56;
  char v57;
  BOOL v58;
  _QWORD aBlock[5];
  id v60;
  id v61;
  id v62;
  BOOL v63;
  BOOL v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[7];
  _QWORD v70[7];
  _QWORD v71[7];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  id v76;
  id v77;
  id v78;
  _BYTE v79[128];
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (self)
  {
    dragAndDropController = self->_dragAndDropController;
    if (dragAndDropController)
    {
      if (-[NSMutableArray count](dragAndDropController->__reorderedItems, "count"))
      {
        v6 = *((_QWORD *)&self->_collectionViewFlags + 1);
        if ((v6 & 0x400000000000000) == 0)
        {
          v7 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                         + 18) << 16);
          *(_QWORD *)&self->_collectionViewFlags = self->_collectionViewFlags;
          *((_QWORD *)&self->_collectionViewFlags + 1) = v6 | 0x400000000000000;
          *((_WORD *)&self->_collectionViewFlags + 8) = v7;
          *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v7);
          -[UICollectionView _removeReorderDestinationView](self, "_removeReorderDestinationView");
          v8 = a3 - 1;
          x = self->_reorderingTargetPosition.x;
          y = self->_reorderingTargetPosition.y;
          if ((unint64_t)(a3 - 1) > 1)
          {
            v76 = 0;
            -[UICollectionView _getOriginalReorderingIndexPaths:targetIndexPaths:](self, "_getOriginalReorderingIndexPaths:targetIndexPaths:", 0, &v76);
            v11 = v76;
            v12 = v11;
          }
          else if (a3 == 2)
          {
            v11 = 0;
            v12 = 0;
          }
          else
          {
            v78 = 0;
            v77 = 0;
            -[UICollectionView _getOriginalReorderingIndexPaths:targetIndexPaths:](self, "_getOriginalReorderingIndexPaths:targetIndexPaths:", &v78, &v77);
            v12 = v78;
            v11 = v77;
          }
          -[UIScrollView _autoScrollAssistant](self, "_autoScrollAssistant");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "stop");

          reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
          if (v8 >= 2)
          {
            -[_UIDragFeedbackGenerator userInteractionEndedAtLocation:](reorderFeedbackGenerator, "userInteractionEndedAtLocation:", x, y);
          }
          else
          {
            -[_UIDragFeedbackGenerator userInteractionCancelledAtLocation:](reorderFeedbackGenerator, "userInteractionCancelledAtLocation:", x, y);
            if (a3 == 2)
            {
LABEL_15:
              -[UICollectionView _reorderedItems](self, "_reorderedItems");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              v16 = self->_dragAndDropController;
              if (v16)
                sessionKind = v16->_sessionKind;
              else
                sessionKind = 0;
              v53 = -[UICollectionView _dataSourceImplementsReorderingHandlers](self, "_dataSourceImplementsReorderingHandlers");
              v18 = self->_dragAndDropController;
              if (v8 >= 2)
              {
                v49 = (unint64_t)(a3 - 1) < 2;
                v50 = v11;
                v51 = v12;
                -[_UICollectionViewDragAndDropController endReordering](v18);
                v48 = objc_claimAutoreleasedReturnValue();
              }
              else
              {
                -[_UICollectionViewDragAndDropController cancelReorderingForced:]((uint64_t *)v18, a3 == 2);
                v19 = objc_claimAutoreleasedReturnValue();
                v20 = (void *)v19;
                if (a3 == 2)
                {
                  if (!v19)
                  {
LABEL_73:
                    *((_QWORD *)&self->_collectionViewFlags + 1) &= ~0x400000000000000uLL;

                    return;
                  }
                  -[UICollectionView _addReloadDataCompletionBlock:](self, "_addReloadDataCompletionBlock:", v19);
LABEL_72:

                  goto LABEL_73;
                }
                v48 = v19;
                v49 = (unint64_t)(a3 - 1) < 2;
                v50 = v11;
                v51 = v12;
              }
              v74 = 0u;
              v75 = 0u;
              v72 = 0u;
              v73 = 0u;
              v52 = v15;
              v21 = v15;
              v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v72, v80, 16);
              if (v22)
              {
                v23 = v22;
                v24 = *(_QWORD *)v73;
                do
                {
                  v25 = 0;
                  do
                  {
                    if (*(_QWORD *)v73 != v24)
                      objc_enumerationMutation(v21);
                    v26 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * v25);
                    v27 = (id)objc_msgSend(v26, "originalIndexPath");
                    v28 = (id)objc_msgSend(v26, "targetIndexPath");
                    if ((objc_msgSend(v27, "isEqual:", v28) & 1) == 0)
                    {
                      if (sessionKind == 1)
                      {
                        if ((*(_QWORD *)&self->_collectionViewFlags & 0x4000000000000000) != 0
                          || -[UICollectionView _dataSourceImplementsReorderingHandlers](self, "_dataSourceImplementsReorderingHandlers"))
                        {
                          if (v8 > 1)
                          {
                            -[UICollectionView _notifyDataSourceForMoveOfItemFromIndexPath:toIndexPath:](self, "_notifyDataSourceForMoveOfItemFromIndexPath:toIndexPath:", v27, v28);
                          }
                          else if (!dyld_program_sdk_at_least()
                                 || (v29 = self->_dragAndDropController) != 0 && v29->_sessionKind != 3)
                          {
                            objc_storeStrong((id *)&self->_cancellingToIndexPath, v27);
                            v71[0] = MEMORY[0x1E0C809B0];
                            v71[1] = 3221225472;
                            v71[2] = __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke;
                            v71[3] = &unk_1E16BCDE0;
                            v71[4] = self;
                            v71[5] = v28;
                            v71[6] = v27;
                            -[UICollectionView _performInternalBatchUpdates:](self, "_performInternalBatchUpdates:", v71);
                            cancellingToIndexPath = self->_cancellingToIndexPath;
                            self->_cancellingToIndexPath = 0;

                          }
                        }
                        else if (v8 >= 2 && (*(_QWORD *)&self->_collectionViewFlags & 0x200000000000000) != 0)
                        {
                          -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
                          v33 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v33, "_collectionView:moveItemAtIndexPath:toIndexPath:", self, v27, v28);

                        }
                      }
                      else if (v8 > 1)
                      {
                        if ((sessionKind & 0xFFFFFFFFFFFFFFFELL) != 2
                          || !v53
                          && -[UICollectionView _supportsAutomaticCatalystDragAndDropReordering](self, "_supportsAutomaticCatalystDragAndDropReordering"))
                        {
                          v69[0] = MEMORY[0x1E0C809B0];
                          v69[1] = 3221225472;
                          v69[2] = __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_3;
                          v69[3] = &unk_1E16BCDE0;
                          v69[4] = self;
                          v69[5] = v27;
                          v69[6] = v28;
                          -[UICollectionView _performInternalBatchUpdates:](self, "_performInternalBatchUpdates:", v69);
                        }
                      }
                      else
                      {
                        v31 = self->_dragAndDropController;
                        if (v31 && v31->_sessionKind != 3)
                        {
                          v70[0] = MEMORY[0x1E0C809B0];
                          v70[1] = 3221225472;
                          v70[2] = __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_2;
                          v70[3] = &unk_1E16BCDE0;
                          v70[4] = self;
                          v70[5] = v28;
                          v70[6] = v27;
                          v32 = -[UICollectionView _performShadowUpdates:](self, "_performShadowUpdates:", v70);
                        }
                      }
                    }
                    ++v25;
                  }
                  while (v23 != v25);
                  v34 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v72, v80, 16);
                  v23 = v34;
                }
                while (v34);
              }

              v67 = 0u;
              v68 = 0u;
              v65 = 0u;
              v66 = 0u;
              v35 = v21;
              v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v65, v79, 16);
              if (v36)
              {
                v37 = v36;
                v38 = *(_QWORD *)v66;
                v39 = 1;
                do
                {
                  for (i = 0; i != v37; ++i)
                  {
                    if (*(_QWORD *)v66 != v38)
                      objc_enumerationMutation(v35);
                    objc_msgSend(*(id *)(*((_QWORD *)&v65 + 1) + 8 * i), "cell");
                    v41 = (void *)objc_claimAutoreleasedReturnValue();
                    subviewManager = self->_subviewManager;
                    if (subviewManager
                      && -[_UICollectionViewSubviewCollection containsView:](&subviewManager->_visibleViews->super.isa, (uint64_t)v41))
                    {
                      if ((dyld_program_sdk_at_least() & 1) == 0)
                        objc_msgSend(v41, "_invalidatePreferredAttributes");
                    }
                    else
                    {
                      v39 = 0;
                    }

                  }
                  v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v65, v79, 16);
                }
                while (v37);
              }
              else
              {
                v39 = 1;
              }

              v43 = MEMORY[0x1E0C809B0];
              aBlock[0] = MEMORY[0x1E0C809B0];
              aBlock[1] = 3221225472;
              aBlock[2] = __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_5;
              aBlock[3] = &unk_1E16BD920;
              v63 = sessionKind == 1;
              aBlock[4] = self;
              v12 = v51;
              v60 = v51;
              v11 = v50;
              v61 = v50;
              v64 = v49;
              v44 = v35;
              v62 = v44;
              v45 = _Block_copy(aBlock);
              v55[0] = v43;
              v55[1] = 3221225472;
              v55[2] = __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_6;
              v55[3] = &unk_1E16B70E8;
              v57 = v39 & 1;
              v58 = sessionKind == 1;
              v55[4] = self;
              v56 = v44;
              v46 = _Block_copy(v55);
              +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 4, v45, v46, 0.3, 0.0);
              v20 = (void *)v48;
              if (v48)
                (*(void (**)(uint64_t))(v48 + 16))(v48);
              v15 = v52;
              if (v8 >= 2 && sessionKind == 1)
              {
                v47 = self->_reorderFeedbackGenerator;
                v54[0] = MEMORY[0x1E0C809B0];
                v54[1] = 3221225472;
                v54[2] = __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_8;
                v54[3] = &unk_1E16B4E70;
                v54[4] = self;
                *(double *)&v54[5] = x;
                *(double *)&v54[6] = y;
                -[UIFeedbackGenerator performFeedbackWithDelay:insideBlock:](v47, "performFeedbackWithDelay:insideBlock:", v54, 0.3);
              }

              goto LABEL_72;
            }
          }
          -[UIView layoutBelowIfNeeded](self, "layoutBelowIfNeeded");
          goto LABEL_15;
        }
      }
    }
  }
}

uint64_t __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_moveItemAtIndexPath:toIndexPath:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_moveItemAtIndexPath:toIndexPath:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_3(uint64_t a1)
{
  _QWORD v2[4];
  __int128 v3;
  uint64_t v4;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_4;
  v2[3] = &unk_1E16BCDE0;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  return objc_msgSend((id)v3, "performBatchUpdates:completion:", v2, 0);
}

uint64_t __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDataSourceForMoveOfItemFromIndexPath:toIndexPath:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_5(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  char v26;
  void *v27;
  id obj;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(void **)(*(_QWORD *)(a1 + 32) + 2072);
    objc_msgSend(v2, "_invalidationContextForEndingReorderingItemToFinalIndexPaths:previousIndexPaths:reorderingCancelled:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 65));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "invalidateLayoutWithContext:", v3);

    v4 = *(_QWORD **)(a1 + 32);
    v5 = v4[274];
    objc_msgSend(v4, "visibleBounds");
    -[UICollectionViewData validateLayoutInRect:](v5, v6, v7, v8, v9);
  }
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = *(id *)(a1 + 56);
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v10)
  {
    v11 = v10;
    v29 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v31 != v29)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
        objc_msgSend(v13, "cell");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (*(_BYTE *)(a1 + 65))
          objc_msgSend(v13, "originalIndexPath");
        else
          objc_msgSend(v13, "targetIndexPath");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UICollectionViewSubviewManager visibleCellAtIndexPath:](*(id ***)(*(_QWORD *)(a1 + 32) + 2904), (uint64_t)v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (v16)
          v17 = v16 == v14;
        else
          v17 = 1;
        v18 = !v17;

        if ((dyld_program_sdk_at_least() & 1) != 0)
        {
          if ((v18 & 1) != 0)
            goto LABEL_34;
        }
        else
        {
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2904);
          objc_msgSend(v13, "cell");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          if (v19)
            LODWORD(v19) = -[_UICollectionViewSubviewCollection containsView:](*(_QWORD **)(v19 + 8), (uint64_t)v20);

          if (((v19 | v18) & 1) != 0)
            goto LABEL_34;
        }
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192);
        if (v21 && -[UICollectionViewData _isIndexPathValid:validateItemCounts:](v21, v15, 1))
        {
          objc_msgSend(v14, "_layoutAttributes");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "indexPath");
          v23 = (id)objc_claimAutoreleasedReturnValue();
          v24 = v15;
          v25 = v24;
          if (v23 == v24)
          {

LABEL_31:
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "layoutAttributesForItemAtIndexPath:", v25);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = *(void **)(a1 + 32);
            objc_msgSend(v13, "cell");
            v23 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "_applyLayoutAttributes:toView:", v22, v23);
LABEL_33:

            goto LABEL_34;
          }
          if (!v24 || !v23)
          {

            goto LABEL_33;
          }
          v26 = objc_msgSend(v23, "isEqual:", v24);

          if ((v26 & 1) != 0)
            goto LABEL_31;
        }
LABEL_34:

      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v11);
  }

}

void __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_6(uint64_t a1)
{
  int64_t v2;
  dispatch_time_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  char v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD block[5];
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 48))
  {
    if (*(_BYTE *)(a1 + 49))
    {
      if (*(uint64_t *)(*(_QWORD *)(a1 + 32) + 2104) <= 0)
        v2 = 0;
      else
        v2 = 300000000;
      v3 = dispatch_time(0, v2);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_7;
      block[3] = &unk_1E16B1B28;
      block[4] = *(_QWORD *)(a1 + 32);
      dispatch_after(v3, MEMORY[0x1E0C80D38], block);
    }
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v4 = *(id *)(a1 + 40);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v32;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v32 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v8), "cell");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "superview");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          if (v10)
          {
            v11 = v10;
            v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2904);
            if (v12)
            {
              v13 = -[_UICollectionViewSubviewCollection containsView:](*(_QWORD **)(v12 + 8), (uint64_t)v9);

              if (v13)
                goto LABEL_16;
            }
            else
            {

            }
            objc_msgSend(v9, "removeFromSuperview");
          }
LABEL_16:

          ++v8;
        }
        while (v6 != v8);
        v14 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
        v6 = v14;
      }
      while (v14);
    }

  }
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v15 = *(id *)(a1 + 40);
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v36, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)v28 != v18)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend(v20, "cell", (_QWORD)v27);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "superview");
        v22 = objc_claimAutoreleasedReturnValue();
        if (v22)
        {
          v23 = (void *)v22;
          objc_msgSend(v20, "cell");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v24, "_isHiddenForReuse");

          if ((v25 & 1) != 0)
            continue;
          v26 = *(void **)(a1 + 32);
          objc_msgSend(v20, "cell");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "_reparentViewIntoCorrectContainer:", v21);
        }

      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v36, 16);
    }
    while (v17);
  }

}

uint64_t __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_7(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2072), "_estimatesSizes");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "_setNeedsVisibleCellsUpdate:withLayoutAttributes:", 1, 1);
  return result;
}

uint64_t __64__UICollectionView__completeInteractiveMovementWithDisposition___block_invoke_8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2552), "draggedObjectLandedAtLocation:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

- (void)_notifyDataSourceForMoveOfItemFromIndexPath:(id)a3 toIndexPath:(id)a4
{
  id v6;
  id v7;
  UICollectionViewUpdateItem *v8;
  id v9;
  id v10;
  UICollectionViewUpdateItem *v11;
  UICollectionViewUpdateItem *expectedDiffableUpdateItem;
  void *v13;
  UICollectionViewUpdateItem *v14;

  if ((*((_QWORD *)&self->_collectionViewFlags + 1) & 4) != 0)
  {
    v9 = a4;
    v10 = a3;
    v11 = -[UICollectionViewUpdateItem initWithInitialIndexPath:finalIndexPath:updateAction:]([UICollectionViewUpdateItem alloc], "initWithInitialIndexPath:finalIndexPath:updateAction:", v10, v9, 3);
    expectedDiffableUpdateItem = self->_expectedDiffableUpdateItem;
    self->_expectedDiffableUpdateItem = v11;

    -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "collectionView:moveItemAtIndexPath:toIndexPath:", self, v10, v9);

    v8 = self->_expectedDiffableUpdateItem;
    self->_expectedDiffableUpdateItem = 0;
  }
  else
  {
    v6 = a4;
    v7 = a3;
    -[UICollectionView _dataSourceProxy](self, "_dataSourceProxy");
    v14 = (UICollectionViewUpdateItem *)objc_claimAutoreleasedReturnValue();
    -[UICollectionViewUpdateItem collectionView:moveItemAtIndexPath:toIndexPath:](v14, "collectionView:moveItemAtIndexPath:toIndexPath:", self, v7, v6);

    v8 = v14;
  }

}

- (void)_getOriginalReorderingIndexPaths:(id *)a3 targetIndexPaths:(id *)a4
{
  _UICollectionViewDragAndDropController *dragAndDropController;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (self && (dragAndDropController = self->_dragAndDropController) != 0)
    v8 = -[NSMutableArray count](dragAndDropController->__reorderedItems, "count");
  else
    v8 = 0;
  if (a3)
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v8);
    if (a4)
    {
LABEL_6:
      v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v8);
      goto LABEL_9;
    }
  }
  else
  {
    v9 = 0;
    if (a4)
      goto LABEL_6;
  }
  v10 = 0;
LABEL_9:
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  -[UICollectionView _reorderedItems](self, "_reorderedItems", 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v20 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v16, "originalIndexPath");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "addObject:", v17);

        objc_msgSend(v16, "targetIndexPath");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "addObject:", v18);

      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v13);
  }

  if (a3)
    *a3 = objc_retainAutorelease(v9);
  if (a4)
    *a4 = objc_retainAutorelease(v10);

}

- (void)_removeReorderDestinationView
{
  _UIDragDestinationIndicatorView *reorderDestinationView;
  _UIDragDestinationIndicatorView *v4;

  reorderDestinationView = self->_reorderDestinationView;
  if (reorderDestinationView)
  {
    -[UIView removeFromSuperview](reorderDestinationView, "removeFromSuperview");
    v4 = self->_reorderDestinationView;
    self->_reorderDestinationView = 0;

  }
}

- (void)_updateReorderDestinationViewWithLayoutAttributes:(id)a3
{
  id v4;
  unint64_t v5;
  _QWORD *v6;
  _BOOL8 v7;
  _UIDragDestinationIndicatorView *v8;
  _UIDragDestinationIndicatorView *reorderDestinationView;
  double v10;
  double v11;
  double v12;
  double v13;
  _UIDragDestinationIndicatorView *v14;
  void *v15;
  id v16;

  v4 = a3;
  v16 = v4;
  if (!self->_reorderDestinationView)
  {
    -[UIView traitCollection](self, "traitCollection");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (_QWORD *)v5;
    if (v5)
    {
      _UIRecordTraitUsage(v5, 0x13uLL);
      v7 = v6[16] == 2;
    }
    else
    {
      v7 = 0;
    }

    v8 = -[_UIDragDestinationIndicatorView initWithSourceListStyle:]([_UIDragDestinationIndicatorView alloc], "initWithSourceListStyle:", v7);
    reorderDestinationView = self->_reorderDestinationView;
    self->_reorderDestinationView = v8;

    -[UIView addSubview:](self, "addSubview:", self->_reorderDestinationView);
    v4 = v16;
  }
  objc_msgSend(v4, "size");
  v11 = v10;
  v13 = v12;
  v14 = self->_reorderDestinationView;
  objc_msgSend(v16, "frame");
  if (v11 <= v13)
    -[_UIDragDestinationIndicatorView positionHorizontallyCenteredInFrame:](v14, "positionHorizontallyCenteredInFrame:");
  else
    -[_UIDragDestinationIndicatorView positionVerticallyCenteredInFrame:](v14, "positionVerticallyCenteredInFrame:");
  objc_msgSend(v16, "indexPath");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIDragDestinationIndicatorView setCurrentIndexPath:](self->_reorderDestinationView, "setCurrentIndexPath:", v15);

}

- (void)_cellDidBecomeFocused:(id)a3
{
  uint64_t collectionViewFlags;
  void *v5;
  void *v6;
  id v7;

  -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  collectionViewFlags = (uint64_t)self->_collectionViewFlags;
  if ((collectionViewFlags & 0x100000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_collectionView:didFocusItemAtIndexPath:", self, v7);

    collectionViewFlags = (uint64_t)self->_collectionViewFlags;
  }
  if ((collectionViewFlags & 0x400000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "collectionView:didFocusItemAtIndexPath:", self, v7);

  }
}

- (void)_cellDidBecomeUnfocused:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((*(_QWORD *)&self->_collectionViewFlags & 0x800000) != 0)
  {
    v6 = v4;
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "collectionView:didUnfocusItemAtIndexPath:", self, v6);

    v4 = v6;
  }

}

- (BOOL)_shouldUpdateFocusInContext:(id)a3
{
  id v4;
  unsigned __int8 v5;
  uint64_t collectionViewFlags;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  objc_super v12;

  v4 = a3;
  v12.receiver = self;
  v12.super_class = (Class)UICollectionView;
  v5 = -[UIScrollView _shouldUpdateFocusInContext:](&v12, sel__shouldUpdateFocusInContext_, v4);
  if (!-[UICollectionView _isMovingFocusFromHorizontalIndexBarToCellContent:](self, "_isMovingFocusFromHorizontalIndexBarToCellContent:", v4))
  {
    collectionViewFlags = (uint64_t)self->_collectionViewFlags;
    if ((collectionViewFlags & 0x8000000) != 0)
    {
      +[UICollectionViewFocusUpdateContext _contextWithContext:collectionView:](UICollectionViewFocusUpdateContext, "_contextWithContext:collectionView:", v4, self);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v8, "collectionView:shouldUpdateFocusInContext:", self, v7);
    }
    else
    {
      if ((collectionViewFlags & 0x2000000) == 0)
        goto LABEL_10;
      +[UICollectionViewFocusUpdateContext _contextWithContext:collectionView:](UICollectionViewFocusUpdateContext, "_contextWithContext:collectionView:", v4, self);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "previouslyFocusedIndexPath");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "nextFocusedView");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v8, "collectionView:shouldUpdateFocusFromItemAtIndexPath:toView:heading:", self, v9, v10, objc_msgSend(v7, "focusHeading"));

    }
    goto LABEL_10;
  }
  if (!-[UIScrollView isScrollAnimating](self, "isScrollAnimating"))
  {
    -[UICollectionView setIsMovingFocusFromHorizontalIndexTitleBarToContent:](self, "setIsMovingFocusFromHorizontalIndexTitleBarToContent:", 1);
    -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");
  }
  v5 = 0;
LABEL_10:

  return v5;
}

- (id)_managedSubviewForView:(id)a3
{
  UICollectionView *v4;
  UICollectionView *v5;
  UICollectionView *v6;
  UICollectionView *v7;
  UICollectionView *v8;
  UICollectionView *v9;
  UICollectionView *v10;

  v4 = (UICollectionView *)a3;
  v5 = v4;
  v6 = 0;
  v7 = v4;
  if (v4 && v4 != self)
  {
    v8 = v4;
    while (1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v9 = v8;
        -[UICollectionView _layoutAttributes](v9, "_layoutAttributes");
        v10 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

        if (v10)
        {
          -[UICollectionView _collectionView](v9, "_collectionView");
          v10 = (UICollectionView *)objc_claimAutoreleasedReturnValue();
        }

      }
      else
      {
        v10 = 0;
      }
      if (v10 == self)
        break;
      -[UIView superview](v8, "superview");
      v7 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

      v6 = 0;
      if (v7)
      {
        v8 = v7;
        if (v7 != self)
          continue;
      }
      goto LABEL_14;
    }
    v7 = v8;

    v6 = v7;
  }
LABEL_14:

  return v6;
}

- (void)_willUpdateFocusInContext:(id)a3
{
  void *v4;
  UICollectionView *v5;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  uint64_t v7;
  int v8;
  uint64_t v9;

  objc_msgSend(a3, "nextFocusedItem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _UIFocusEnvironmentFirstCommonAncestor(v4, self);
  v5 = (UICollectionView *)objc_claimAutoreleasedReturnValue();

  p_collectionViewFlags = &self->_collectionViewFlags;
  v7 = *((_QWORD *)&self->_collectionViewFlags + 1);
  if ((v5 == self) == ((v7 & 0x800000) == 0))
  {
    v8 = *((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags + 18) << 16);
    v9 = *(_QWORD *)p_collectionViewFlags;
    *((_WORD *)&self->_collectionViewFlags + 8) = *((_WORD *)&self->_collectionViewFlags + 8);
    *((_BYTE *)&self->_collectionViewFlags + 18) = BYTE2(v8);
    *(_QWORD *)p_collectionViewFlags = v9;
    *((_QWORD *)&self->_collectionViewFlags + 1) = v7 & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)(v5 == self) << 23);
    -[UICollectionView _updateSelectionIsKey](self, "_updateSelectionIsKey");
  }
}

- (void)_didUpdateFocusInContext:(id)a3
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _UICollectionViewFocusedItemState *targetFocusedItemState;
  UICollectionView *v11;
  UICollectionView *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  int has_internal_diagnostics;
  char v18;
  double v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unint64_t v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  _UICollectionViewSectionFocusGuideController *sectionFocusGuideController;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  int v50;
  void *v51;
  id v52;
  $91A2B40F64213FFC45A7830E5F2A00D4 *p_collectionViewFlags;
  void *v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  uint64_t v72;
  void *v73;
  BOOL v74;
  void *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  id v79;
  char v80;
  uint64_t v81;
  void *v82;
  void *v83;
  id v84;
  _BOOL4 v85;
  uint64_t v86;
  void *v87;
  void *v88;
  unint64_t v89;
  NSObject *v90;
  NSObject *v91;
  void *v92;
  double v93;
  void *v94;
  void *v95;
  uint64_t v96;
  const char *v97;
  objc_super v98;
  uint8_t buf[4];
  void *v100;
  __int16 v101;
  void *v102;
  __int16 v103;
  void *v104;
  __int16 v105;
  UICollectionView *v106;
  __int16 v107;
  void *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (-[UICollectionView _isMovingFocusFromHorizontalIndexBarToCellContent:](self, "_isMovingFocusFromHorizontalIndexBarToCellContent:", v5))
  {
    -[UICollectionView setSelectedIndexTitleEntry:](self, "setSelectedIndexTitleEntry:", 0);
    -[UICollectionView setIsMovingFocusFromHorizontalIndexTitleBarToContent:](self, "setIsMovingFocusFromHorizontalIndexTitleBarToContent:", 0);
    -[UICollectionView setIndexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar:](self, "setIndexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar:", 0);
  }
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v6 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "previouslyFocusedView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _managedSubviewForView:](self, "_managedSubviewForView:", v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v9 = *(id *)(v6 + 16);
    -[UICollectionView _unhighlightItemAtIndexPath:animated:notifyDelegate:](self, "_unhighlightItemAtIndexPath:animated:notifyDelegate:", v9, 0, 1);

  }
  targetFocusedItemState = self->_targetFocusedItemState;
  self->_targetFocusedItemState = 0;

  objc_msgSend(v5, "nextFocusedView");
  v11 = (UICollectionView *)objc_claimAutoreleasedReturnValue();
  if (v11 == self)
  {

    goto LABEL_15;
  }
  v12 = v11;
  objc_msgSend(v5, "nextFocusedView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "isDescendantOfView:", self);

  if (!v14)
  {
LABEL_15:
    -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", 0);
    goto LABEL_31;
  }
  objc_msgSend(v5, "nextFocusedView");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[UICollectionView _managedSubviewForView:](self, "_managedSubviewForView:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    has_internal_diagnostics = os_variant_has_internal_diagnostics();
    v18 = objc_msgSend(v16, "isHidden");
    if (has_internal_diagnostics)
    {
      if ((v18 & 1) != 0 || (objc_msgSend(v16, "alpha"), v93 <= 0.0))
      {
        __UIFaultDebugAssertLog();
        v91 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v91, OS_LOG_TYPE_FAULT))
          goto LABEL_88;
        objc_msgSend(v5, "nextFocusedView");
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v100 = v16;
        v101 = 2112;
        v102 = v92;
        _os_log_fault_impl(&dword_185066000, v91, OS_LOG_TYPE_FAULT, "Attempting to move focus into a hidden view: %@; Focused view: %@",
          buf,
          0x16u);
LABEL_87:

LABEL_88:
      }
    }
    else if ((v18 & 1) != 0 || (objc_msgSend(v16, "alpha"), v19 <= 0.0))
    {
      v89 = qword_1EDDC6788;
      if (!qword_1EDDC6788)
      {
        v89 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v89, (unint64_t *)&qword_1EDDC6788);
      }
      v90 = *(NSObject **)(v89 + 8);
      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      {
        v91 = v90;
        objc_msgSend(v5, "nextFocusedView");
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v100 = v16;
        v101 = 2112;
        v102 = v92;
        _os_log_impl(&dword_185066000, v91, OS_LOG_TYPE_ERROR, "Attempting to move focus into a hidden view: %@; Focused view: %@",
          buf,
          0x16u);
        goto LABEL_87;
      }
    }
    objc_msgSend(v16, "_layoutAttributes");
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v20;
    if (v20 && (*(_WORD *)(v20 + 288) & 1) != 0)
    {
      -[UICollectionView _indexPathForCell:](self, "_indexPathForCell:", v16);
      v22 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[UICollectionView indexPathForSupplementaryView:](self, "indexPathForSupplementaryView:", v16);
      v22 = objc_claimAutoreleasedReturnValue();
    }
    v23 = (void *)v22;
    if (!v22)
    {
      objc_msgSend(v21, "indexPath");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v97 = a2;
    if (-[UICollectionView _indexPathIsValid:allowSectionItemSentinel:](self, "_indexPathIsValid:allowSectionItemSentinel:", v23, 1))
    {
      +[_UICollectionViewFocusedItemState stateWithReusableView:overrideIndexPath:]((uint64_t)_UICollectionViewFocusedItemState, v16, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", v24);

      -[UICollectionView _updateHorizontalIndexTitleBarSelectionForFocusedIndexPath:](self, "_updateHorizontalIndexTitleBarSelectionForFocusedIndexPath:", v23);
LABEL_29:

      a2 = v97;
      goto LABEL_30;
    }
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
      {
        objc_msgSend(v5, "nextFocusedView");
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionViewData dataSourceCountsDescription](self->_collectionViewData);
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138413314;
        v100 = v16;
        v101 = 2112;
        v102 = v21;
        v103 = 2112;
        v104 = v94;
        v105 = 2112;
        v106 = self;
        v107 = 2112;
        v108 = v95;
        _os_log_fault_impl(&dword_185066000, v27, OS_LOG_TYPE_FAULT, "Attempted to move focus into a view with an invalid index path: %@; Layout attributes: %@; Focused view: %@; C"
          "ollection view: %@; Data source counts: %@",
          buf,
          0x34u);

      }
    }
    else
    {
      v25 = qword_1EDDC6790;
      if (!qword_1EDDC6790)
      {
        v25 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v25, (unint64_t *)&qword_1EDDC6790);
      }
      v26 = *(NSObject **)(v25 + 8);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        goto LABEL_28;
      v27 = v26;
      objc_msgSend(v5, "nextFocusedView");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionViewData dataSourceCountsDescription](self->_collectionViewData);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413314;
      v100 = v16;
      v101 = 2112;
      v102 = v21;
      v103 = 2112;
      v104 = v28;
      v105 = 2112;
      v106 = self;
      v107 = 2112;
      v108 = v29;
      _os_log_impl(&dword_185066000, v27, OS_LOG_TYPE_ERROR, "Attempted to move focus into a view with an invalid index path: %@; Layout attributes: %@; Focused view: %@; Col"
        "lection view: %@; Data source counts: %@",
        buf,
        0x34u);

    }
LABEL_28:
    -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", 0);
    goto LABEL_29;
  }
  -[UICollectionView _setFocusedItemState:](self, "_setFocusedItemState:", 0);
LABEL_30:

LABEL_31:
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UISelectionInteraction setEnabled:](self->_selectionInteraction, "setEnabled:", v30 != 0);

  -[UICollectionView _setCurrentPromiseFulfillmentCell:](self, "_setCurrentPromiseFulfillmentCell:", 0);
  v98.receiver = self;
  v98.super_class = (Class)UICollectionView;
  -[UIScrollView _didUpdateFocusInContext:](&v98, sel__didUpdateFocusInContext_, v5);
  if (v6)
    v31 = *(void **)(v6 + 8);
  else
    v31 = 0;
  v32 = v31;
  -[UICollectionView _reusePreviouslyFocusedManagedSubviewIfNeeded:](self, "_reusePreviouslyFocusedManagedSubviewIfNeeded:", v32);

  if ((dyld_program_sdk_at_least() & 1) == 0 && v8)
  {
    v33 = v6 ? *(void **)(v6 + 8) : 0;
    v34 = v33;

    if (v8 != v34)
      -[UICollectionView _reusePreviouslyFocusedManagedSubviewIfNeeded:](self, "_reusePreviouslyFocusedManagedSubviewIfNeeded:", v8);
  }
  -[UICollectionView _endOfContentFocusContainerGuide](self, "_endOfContentFocusContainerGuide");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (v35)
  {
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = (void *)v36;
    if (v36)
      v38 = *(void **)(v36 + 8);
    else
      v38 = 0;
    v39 = v38;
    -[UICollectionView _endOfContentFocusContainerGuide](self, "_endOfContentFocusContainerGuide");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "setEnabled:", v39 != 0);

  }
  sectionFocusGuideController = self->_sectionFocusGuideController;
  -[UICollectionView _focusedItemState](self, "_focusedItemState");
  v42 = objc_claimAutoreleasedReturnValue();
  v43 = (void *)v42;
  if (v42)
    v44 = *(void **)(v42 + 16);
  else
    v44 = 0;
  v45 = v44;
  -[_UICollectionViewSectionFocusGuideController updateFocusedIndexPath:](sectionFocusGuideController, "updateFocusedIndexPath:", v45);

  -[_UICollectionViewSectionFocusGuideController performLayout](self->_sectionFocusGuideController, "performLayout");
  -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
  v46 = objc_claimAutoreleasedReturnValue();
  if (v46)
  {
    v47 = (void *)v46;
    -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "nextFocusedView");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend(v48, "_isViewEntryCell:", v49);

    if (v50)
    {
      if (v6)
        v51 = *(void **)(v6 + 16);
      else
        v51 = 0;
      v52 = v51;
      -[UICollectionView setIndexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar:](self, "setIndexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar:", v52);

    }
  }
  p_collectionViewFlags = &self->_collectionViewFlags;
  if ((*(_QWORD *)&self->_collectionViewFlags & 0x10000000) != 0)
  {
    if (v6)
      v54 = *(void **)(v6 + 8);
    else
      v54 = 0;
    v55 = v54;
    objc_msgSend(v5, "previouslyFocusedView");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _managedSubviewForView:](self, "_managedSubviewForView:", v56);
    v57 = (id)objc_claimAutoreleasedReturnValue();

    if (v55 == v57)
    {
      if (v6)
        v59 = *(void **)(v6 + 16);
      else
        v59 = 0;
      v58 = v59;
    }
    else
    {
      v58 = 0;
    }
    +[_UIFocusAnimationCoordinatorManager animationCoordinatorForContext:](_UIFocusAnimationCoordinatorManager, "animationCoordinatorForContext:", v5);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v60)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 16321, CFSTR("Received call to _didUpdateFocusInContext: outside of a focus update."));

    }
    +[UICollectionViewFocusUpdateContext _contextWithContext:collectionView:cachedPreviouslyFocusedIndexPath:](UICollectionViewFocusUpdateContext, "_contextWithContext:collectionView:cachedPreviouslyFocusedIndexPath:", v5, self, v58);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "collectionView:didUpdateFocusInContext:withAnimationCoordinator:", self, v61, v60);

    p_collectionViewFlags = &self->_collectionViewFlags;
  }
  if (((*((unsigned __int16 *)p_collectionViewFlags + 8) | (*((unsigned __int8 *)p_collectionViewFlags + 18) << 16)) & 0x20000) == 0)
  {
    -[UICollectionView _focusedItemState](self, "_focusedItemState");
    v63 = objc_claimAutoreleasedReturnValue();
    if (v63)
    {
      v64 = (void *)v63;
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v65 = objc_claimAutoreleasedReturnValue();
      v66 = (id)v65;
      if (v65 && *(_QWORD *)(v65 + 32))
      {
LABEL_65:

        goto LABEL_82;
      }
      -[UICollectionView _focusedItemState](self, "_focusedItemState");
      v67 = objc_claimAutoreleasedReturnValue();
      v68 = (void *)v67;
      if (v67)
        v69 = *(void **)(v67 + 8);
      else
        v69 = 0;
      v70 = v69;
      objc_msgSend(v5, "nextFocusedItem");
      v71 = (id)objc_claimAutoreleasedReturnValue();

      if (v70 == v71)
      {
        if (dyld_program_sdk_at_least())
        {
          if (((*((unsigned __int16 *)&self->_collectionViewFlags + 8) | (*((unsigned __int8 *)&self->_collectionViewFlags
                                                                           + 18) << 16)) & 0x20000) == 0)
          {
            objc_msgSend(v5, "_focusMovement");
            v72 = objc_claimAutoreleasedReturnValue();
            if (v72)
            {
              v73 = (void *)v72;
              v74 = -[UICollectionView _delegateSupportsPrimaryAction](self, "_delegateSupportsPrimaryAction");

              if (v74)
                goto LABEL_76;
            }
          }
        }
        -[UICollectionView indexPathsForSelectedItems](self, "indexPathsForSelectedItems");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionView _focusedItemState](self, "_focusedItemState");
        v76 = objc_claimAutoreleasedReturnValue();
        v77 = (void *)v76;
        v78 = v76 ? *(void **)(v76 + 16) : 0;
        v79 = v78;
        v80 = objc_msgSend(v75, "containsObject:", v79);

        if ((v80 & 1) == 0)
        {
LABEL_76:
          -[UICollectionView _focusedItemState](self, "_focusedItemState");
          v81 = objc_claimAutoreleasedReturnValue();
          v82 = (void *)v81;
          v83 = v81 ? *(void **)(v81 + 16) : 0;
          v84 = v83;
          v85 = -[UICollectionView _shouldSelectionFollowFocusForIndexPath:initiatedBySelection:](self, "_shouldSelectionFollowFocusForIndexPath:initiatedBySelection:", v84, 0);

          if (v85)
          {
            -[UICollectionView _focusedItemState](self, "_focusedItemState");
            v86 = objc_claimAutoreleasedReturnValue();
            v64 = (void *)v86;
            if (v86)
              v87 = *(void **)(v86 + 16);
            else
              v87 = 0;
            v66 = v87;
            LOBYTE(v96) = 0;
            -[UICollectionView _selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:](self, "_selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:deselectPrevious:performPrimaryAction:performCustomSelectionAction:", v66, 0, 0, 1, 1, 0, v96);
            goto LABEL_65;
          }
        }
      }
    }
  }
LABEL_82:

}

- (BOOL)_focusTriggersSelectionDelegate
{
  return dyld_program_sdk_at_least();
}

- (id)_systemDefaultFocusGroupIdentifier
{
  void *v3;
  char v4;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  objc_super v10;
  objc_super v11;

  -[UIView _focusBehavior](self, "_focusBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "focusGroupContainmentBehavior");

  if ((v4 & 0x40) != 0)
  {
    _UIFocusGroupIdentifierOfAssociatedSearchTextFieldForView(self);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      v8 = v6;
    }
    else
    {
      v11.receiver = self;
      v11.super_class = (Class)UICollectionView;
      -[UIView _systemDefaultFocusGroupIdentifier](&v11, sel__systemDefaultFocusGroupIdentifier);
      v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    v9 = v8;

    return v9;
  }
  else
  {
    v10.receiver = self;
    v10.super_class = (Class)UICollectionView;
    -[UIView _systemDefaultFocusGroupIdentifier](&v10, sel__systemDefaultFocusGroupIdentifier);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

- (void)_updateHorizontalIndexTitleBarSelectionForFocusedIndexPath:(id)a3
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;

  v27 = a3;
  -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27 && v4)
  {
    v5 = *((_QWORD *)&self->_collectionViewFlags + 1);
    -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if ((v5 & 1) == 0)
    {
      objc_msgSend(v6, "_selectEntryForTitleIndex:", objc_msgSend(v27, "section"));
      v8 = v7;
LABEL_36:

      goto LABEL_37;
    }
    objc_msgSend(v6, "entries");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "selectedEntry");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      if (objc_msgSend(v8, "count") == 1)
        goto LABEL_35;
      objc_msgSend(v10, "targetFocusedIndexPath");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v27, "compare:", v11);
      switch(v12)
      {
        case 1:
          v13 = objc_msgSend(v8, "indexOfObject:", v10);
          if (v13 < (unint64_t)objc_msgSend(v8, "count"))
          {
            while (1)
            {
              objc_msgSend(v8, "objectAtIndexedSubscript:", v13);
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              if (v13 == objc_msgSend(v8, "count") - 1)
                goto LABEL_31;
              v17 = v13 + 1;
              objc_msgSend(v8, "objectAtIndexedSubscript:", v13 + 1);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "targetFocusedIndexPath");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v20 = objc_msgSend(v27, "compare:", v19);

              if (v20 == -1)
              {
                -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v26, "_selectEntryForTitleIndex:", v13);

                goto LABEL_32;
              }

              ++v13;
              if (v17 >= objc_msgSend(v8, "count"))
                goto LABEL_18;
            }
          }
          break;
        case 0:
LABEL_34:

          goto LABEL_35;
        case -1:
          v13 = objc_msgSend(v8, "indexOfObject:", v10) - 1;
          if (v13 >= 0)
          {
            while (1)
            {
              objc_msgSend(v8, "objectAtIndexedSubscript:", v13);
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "targetFocusedIndexPath");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              v16 = objc_msgSend(v27, "compare:", v15);

              if (!v13 || v16 == 1)
                break;

              --v13;
            }
LABEL_31:
            -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "_selectEntryForTitleIndex:", v13);
LABEL_32:

            goto LABEL_33;
          }
          break;
      }
LABEL_18:

    }
    if (objc_msgSend(v8, "count"))
    {
      v21 = 0;
      while (1)
      {
        objc_msgSend(v8, "objectAtIndexedSubscript:", v21);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "targetFocusedIndexPath");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v27, "compare:", v22);

        if (!v23 || v21 == objc_msgSend(v8, "count") - 1 && v23 == 1)
        {
          -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = v24;
          v25 = v21;
          goto LABEL_30;
        }
        if (v21 && v23 == -1)
          break;

        if (++v21 >= (unint64_t)objc_msgSend(v8, "count"))
          goto LABEL_35;
      }
      -[UICollectionView _horizontalIndexTitleBar](self, "_horizontalIndexTitleBar");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v24;
      v25 = v21 - 1;
LABEL_30:
      objc_msgSend(v24, "_selectEntryForTitleIndex:", v25);
LABEL_33:

      goto LABEL_34;
    }
LABEL_35:

    goto LABEL_36;
  }
LABEL_37:

}

- (BOOL)_keepsFirstResponderVisibleOnBoundsChange
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 44) & 1;
}

- (BOOL)_supportsAutomaticCatalystDragAndDropReordering
{
  void *v3;
  BOOL v4;
  void *v5;

  if (!-[UICollectionView _dragAndDropNeededForReordering](self, "_dragAndDropNeededForReordering"))
    return 0;
  -[UICollectionView _dragDelegateActual](self, "_dragDelegateActual");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = 0;
  }
  else
  {
    -[UICollectionView _dropDelegateActual](self, "_dropDelegateActual");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v5 == 0;

  }
  return v4;
}

- (id)_indexPathOfItemNearestToPoint:(CGPoint)a3 intersectingRect:(CGRect)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat v7;
  CGFloat v8;
  UICollectionViewData *collectionViewData;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  double v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  UICollectionViewLayout *layout;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  double v32;
  double v33;
  uint64_t v34;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat x;
  CGRect v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];
  uint64_t v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v7 = a3.y;
  v8 = a3.x;
  v50 = *MEMORY[0x1E0C80C00];
  collectionViewData = self->_collectionViewData;
  -[UICollectionView _visibleBounds](self, "_visibleBounds");
  -[UICollectionViewData layoutAttributesForCellsInRect:validateLayout:](collectionViewData, 1, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
  if (!v16)
    goto LABEL_14;
  v17 = v16;
  v40 = y;
  v41 = width;
  v42 = height;
  v18 = 0;
  v19 = 1.79769313e308;
  v20 = *(_QWORD *)v46;
  v36 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  v37 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v44.size.width = v37;
  v44.size.height = v36;
  v38 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v39 = *MEMORY[0x1E0C9D648];
  v44.origin.x = *(CGFloat *)MEMORY[0x1E0C9D648];
  v44.origin.y = v38;
  do
  {
    for (i = 0; i != v17; ++i)
    {
      if (*(_QWORD *)v46 != v20)
        objc_enumerationMutation(v15);
      v22 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
      layout = self->_layout;
      objc_msgSend(v22, "frame", *(_QWORD *)&v36, *(_QWORD *)&v37, *(_QWORD *)&v38, *(_QWORD *)&v39, *(_QWORD *)&v40, *(_QWORD *)&v41, *(_QWORD *)&v42);
      -[UICollectionViewLayout _orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:](layout, "_orthogonalFrameWithOffsetElidedForItemWithLayoutAttributes:frame:", v22);
      v25 = v24;
      v27 = v26;
      v29 = v28;
      v31 = v30;
      UIDistanceBetweenPointAndRect(v8, v7, v24, v26, v28, v30);
      v33 = fabs(v32);
      if (v33 < v19)
      {
        objc_msgSend(v22, "indexPath");
        v34 = objc_claimAutoreleasedReturnValue();

        v44.size.width = v29;
        v44.size.height = v31;
        v44.origin.x = v25;
        v44.origin.y = v27;
        v19 = v33;
        v18 = (void *)v34;
      }
    }
    v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
  }
  while (v17);
  if (v18)
  {
    v51.origin.y = v38;
    v51.origin.x = v39;
    v51.size.height = v36;
    v51.size.width = v37;
    v53.origin.x = x;
    v53.origin.y = v40;
    v53.size.width = v41;
    v53.size.height = v42;
    if (!CGRectEqualToRect(v51, v53))
    {
      v52.origin.x = x;
      v52.origin.y = v40;
      v52.size.width = v41;
      v52.size.height = v42;
      if (!CGRectIntersectsRect(v52, v44))
      {

LABEL_14:
        v18 = 0;
      }
    }
  }

  return v18;
}

uint64_t __96__UICollectionView__sectionIndexesAfterShadowUpdatesForSectionIndexes_allowingAppendingInserts___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2776), "sectionIndexAfterShadowUpdates:allowingAppendingInserts:", a2, *(unsigned __int8 *)(a1 + 48));
  if (result != 0x7FFFFFFFFFFFFFFFLL)
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addIndex:", result);
  return result;
}

- (id)_indexPathsBeforeShadowUpdatesForIndexPaths:(id)a3
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
  {
    v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v4, "count"));
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v14;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v6);
          -[_UICollectionViewShadowUpdatesController indexPathBeforeShadowUpdates:](self->_dragAndDropController, "indexPathBeforeShadowUpdates:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v10), (_QWORD)v13);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if (v11)
            objc_msgSend(v5, "addObject:", v11);

          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v8);
    }

  }
  else
  {
    v5 = v4;
  }

  return v5;
}

- (id)_indexPathAfterShadowUpdatesForIndexPath:(id)a3
{
  id v4;
  id v5;
  void *v6;

  v4 = a3;
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
  {
    -[_UICollectionViewShadowUpdatesController indexPathAfterShadowUpdates:](self->_dragAndDropController, "indexPathAfterShadowUpdates:", v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = v4;
  }
  v6 = v5;

  return v6;
}

- (id)_indexPathBeforeShadowUpdatesForIndexPath:(id)a3
{
  id v4;
  id v5;
  void *v6;

  v4 = a3;
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
  {
    -[_UICollectionViewShadowUpdatesController indexPathBeforeShadowUpdates:](self->_dragAndDropController, "indexPathBeforeShadowUpdates:", v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = v4;
  }
  v6 = v5;

  return v6;
}

- (BOOL)isDragSessionActive
{
  _UICollectionViewDragAndDropController *dragAndDropController;
  _UICollectionViewDragAndDropController *v5;

  dragAndDropController = self->_dragAndDropController;
  if (!dragAndDropController)
    return 0;
  if (-[_UICollectionViewDragSourceController isActive](&dragAndDropController->_sourceController->super.isa))
    return 1;
  v5 = self->_dragAndDropController;
  if (v5)
    return -[_UICollectionViewDragDestinationController isActive](&v5->_destinationController->super.isa);
  else
    return 0;
}

- (BOOL)hasUncommittedUpdates
{
  return -[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController);
}

- (id)_indexPathForInsertionAtPoint:(CGPoint)a3 dropIntent:(int64_t)a4 sourceIndexPath:(id)a5 indicatorLayoutAttributes:(id *)a6
{
  double y;
  double x;
  id v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;

  y = a3.y;
  x = a3.x;
  v11 = a5;
  v12 = -[_UICollectionViewDragAndDropController effectiveDragDestinationVisualStyle]((uint64_t)self->_dragAndDropController);
  v13 = v12;
  v14 = a4 == 1 && v12 == 2;
  v15 = v14;
  if (v14)
  {
    -[UICollectionViewLayout _layoutAttributesForInsertionIndicatorAtTargetPosition:sourceIndexPath:](self->_layout, "_layoutAttributesForInsertionIndicatorAtTargetPosition:sourceIndexPath:", v11, x, y);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "indexPath");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v11)
      goto LABEL_19;
  }
  else
  {
    -[UICollectionView _indexPathForItemAtPoint:](self, "_indexPathForItemAtPoint:", x, y);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 0;
    if (!v11)
      goto LABEL_19;
  }
  if (v13 != 2)
  {
LABEL_19:
    v22 = v17;
    goto LABEL_20;
  }
  -[_UIDragDestinationIndicatorView currentIndexPath](self->_reorderDestinationView, "currentIndexPath");
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)v18;
  if (v18)
    v20 = (void *)v18;
  else
    v20 = v11;
  v21 = v20;

  -[UICollectionView _targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:](self, "_targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:", v11, v21, v17);
  v22 = (id)objc_claimAutoreleasedReturnValue();

  if (v15 && (objc_msgSend(v22, "isEqual:", v17) & 1) == 0)
  {
    -[UICollectionViewLayout _layoutAttributesForInsertionIndicatorAtTargetIndexPath:](self->_layout, "_layoutAttributesForInsertionIndicatorAtTargetIndexPath:", v22);
    v23 = objc_claimAutoreleasedReturnValue();

    v16 = (void *)v23;
  }
LABEL_20:
  if (a6 && v16)
    *a6 = objc_retainAutorelease(v16);

  return v22;
}

- (void)_updateDropTargetAppearanceWithTargetIndexPath:(id)a3 intent:(int64_t)a4 indicatorLayoutAttributes:(id)a5
{
  id v8;
  id v9;
  _UICollectionViewSubviewManager *subviewManager;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  int64_t v15;

  v8 = a3;
  v9 = a5;
  subviewManager = self->_subviewManager;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __100__UICollectionView__updateDropTargetAppearanceWithTargetIndexPath_intent_indicatorLayoutAttributes___block_invoke;
  v13[3] = &unk_1E16BD9B8;
  v12 = v8;
  v14 = v12;
  v15 = a4;
  if (subviewManager)
    -[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v13);
  -[_UICollectionViewDragAndDropController indexPathForOriginalReorderedItem]((uint64_t)self->_dragAndDropController);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 && a4 == 1 && v9 && (objc_msgSend(v12, "isEqual:", v11) & 1) == 0)
    -[UICollectionView _updateReorderDestinationViewWithLayoutAttributes:](self, "_updateReorderDestinationViewWithLayoutAttributes:", v9);
  else
    -[UICollectionView _removeReorderDestinationView](self, "_removeReorderDestinationView");

}

void __100__UICollectionView__updateDropTargetAppearanceWithTargetIndexPath_intent_indicatorLayoutAttributes___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(a1 + 40) == 2 && (objc_msgSend(v7, "isEqual:") & 1) != 0)
    v6 = 2;
  else
    v6 = 1;
  objc_msgSend(v5, "_setDropState:", v6);

}

- (void)_resetDropTargetAppearance
{
  _UICollectionViewSubviewManager *subviewManager;

  subviewManager = self->_subviewManager;
  if (subviewManager)
    -[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)&__block_literal_global_901);
}

uint64_t __46__UICollectionView__resetDropTargetAppearance__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "_setDropState:", 0);
}

- (void)horizontalIndexBar:(id)a3 selectedEntry:(id)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a3;
  v6 = a4;
  -[UICollectionView setSelectedIndexTitleEntry:](self, "setSelectedIndexTitleEntry:", v6);
  if ((*(_QWORD *)&self->_collectionViewFlags & 0x20000000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_collectionView:horizontalIndexTitleBar:selectedEntry:", self, v10, v6);

  }
  else
  {
    -[UIView traitCollection](self, "traitCollection");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "layoutDirection") == 1)
      v8 = 32;
    else
      v8 = 8;

    objc_msgSend(v6, "targetFocusedIndexPath");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    -[UICollectionView scrollToItemAtIndexPath:atScrollPosition:animated:](self, "scrollToItemAtIndexPath:atScrollPosition:animated:", v9, v8, 1);
  }

}

- (id)_performShadowUpdates:(id)a3
{
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v18;
  _QWORD v19[4];
  id v20;

  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 16795, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("updates != NULL"));

  }
  -[_UICollectionViewShadowUpdatesController shadowUpdates](self->_dragAndDropController, "shadowUpdates");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count");

  v8 = *((_QWORD *)&self->_collectionViewFlags + 1);
  *((_QWORD *)&self->_collectionViewFlags + 1) = v8 | 0x80000000000000;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __42__UICollectionView__performShadowUpdates___block_invoke;
  v19[3] = &unk_1E16B1BF8;
  v9 = v5;
  v20 = v9;
  -[UICollectionView _performInternalBatchUpdates:](self, "_performInternalBatchUpdates:", v19);
  *((_QWORD *)&self->_collectionViewFlags + 1) = *((_QWORD *)&self->_collectionViewFlags + 1) & 0xFF7FFFFFFFFFFFFFLL | (((v8 >> 55) & 1) << 55);
  v10 = (void *)MEMORY[0x1E0CB3788];
  -[_UICollectionViewShadowUpdatesController shadowUpdates](self->_dragAndDropController, "shadowUpdates");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "indexSetWithIndexesInRange:", 0, objc_msgSend(v11, "count"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "removeIndexesInRange:", 0, v7);
  if (objc_msgSend(v12, "firstIndex") == 0x7FFFFFFFFFFFFFFFLL)
  {
    v13 = (void *)MEMORY[0x1E0C9AA60];
  }
  else
  {
    v14 = objc_msgSend(v12, "firstIndex");
    v15 = objc_msgSend(v12, "count");
    -[_UICollectionViewShadowUpdatesController shadowUpdates](self->_dragAndDropController, "shadowUpdates");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "subarrayWithRange:", v14, v15);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v13;
}

uint64_t __42__UICollectionView__performShadowUpdates___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (id)_diffableIdentifierForIndexPath:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  if (v4 && -[UICollectionView _isConnectedToDiffableDataSource](self, "_isConnectedToDiffableDataSource"))
  {
    -[UICollectionView _diffableDataSourceImpl](self, "_diffableDataSourceImpl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      objc_msgSend(v5, "itemIdentifierForIndexPath:", v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (int64_t)presentationSectionIndexForDataSourceSectionIndex:(int64_t)a3
{
  return -[_UICollectionViewShadowUpdatesController sectionIndexAfterShadowUpdates:](self->_dragAndDropController, "sectionIndexAfterShadowUpdates:", a3);
}

- (int64_t)dataSourceSectionIndexForPresentationSectionIndex:(int64_t)a3
{
  return -[_UICollectionViewShadowUpdatesController sectionIndexBeforeShadowUpdates:](self->_dragAndDropController, "sectionIndexBeforeShadowUpdates:", a3);
}

- (id)dataSourceIndexPathForPresentationIndexPath:(id)a3
{
  return -[_UICollectionViewShadowUpdatesController indexPathBeforeShadowUpdates:](self->_dragAndDropController, "indexPathBeforeShadowUpdates:", a3);
}

- (void)performUsingPresentationValues:(id)a3
{
  ++self->_performUsingPresentationValuesRefCount;
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  --self->_performUsingPresentationValuesRefCount;
}

- (BOOL)_isOperatingWithPresentationValues
{
  return self->_performUsingPresentationValuesRefCount > 0;
}

- (id)_translateDataSourceIndexPathsToPresentationIndexPathsAsNeeded:(id)a3
{
  id v4;
  id v5;
  void *v6;

  v4 = a3;
  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController)
    && !-[UICollectionView _isOperatingWithPresentationValues](self, "_isOperatingWithPresentationValues"))
  {
    -[UICollectionView _indexPathsAfterShadowUpdatesForIndexPaths:](self, "_indexPathsAfterShadowUpdatesForIndexPaths:", v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = v4;
  }
  v6 = v5;

  return v6;
}

- (id)_dragDelegateProxy
{
  _UICollectionViewDragAndDropController *WeakRetained;

  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
    WeakRetained = self->_dragAndDropController;
  else
    WeakRetained = (_UICollectionViewDragAndDropController *)objc_loadWeakRetained((id *)&self->_dragDelegate);
  return WeakRetained;
}

- (id)_dropDelegateProxy
{
  _UICollectionViewDragAndDropController *WeakRetained;

  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
    WeakRetained = self->_dragAndDropController;
  else
    WeakRetained = (_UICollectionViewDragAndDropController *)objc_loadWeakRetained((id *)&self->_dropDelegate);
  return WeakRetained;
}

- (id)_dragDelegateActual
{
  return objc_loadWeakRetained((id *)&self->_dragDelegate);
}

- (id)_dropDelegateActual
{
  return objc_loadWeakRetained((id *)&self->_dropDelegate);
}

- (id)_dragSourceDelegateProxy
{
  _UICollectionViewDragAndDropController *WeakRetained;

  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
    WeakRetained = self->_dragAndDropController;
  else
    WeakRetained = (_UICollectionViewDragAndDropController *)objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
  return WeakRetained;
}

- (id)_dragDestinationDelegateProxy
{
  _UICollectionViewDragAndDropController *WeakRetained;

  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
    WeakRetained = self->_dragAndDropController;
  else
    WeakRetained = (_UICollectionViewDragAndDropController *)objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  return WeakRetained;
}

- (id)_dragSourceDelegateActual
{
  return objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
}

- (id)_dragDestinationDelegateActual
{
  return objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
}

- (BOOL)_shouldSpringLoadItemAtIndexPath:(id)a3 withContext:(id)a4
{
  id v6;
  id v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  BOOL v14;

  v6 = a3;
  v7 = a4;
  -[UICollectionView _delegateActual](self, "_delegateActual");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_opt_respondsToSelector();

  if ((v9 & 1) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "collectionView:shouldSpringLoadItemAtIndexPath:withContext:", self, v6, v7);
  }
  else
  {
    -[UICollectionView _delegateActual](self, "_delegateActual");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_opt_respondsToSelector();

    if ((v13 & 1) == 0)
    {
      v14 = 1;
      goto LABEL_7;
    }
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "_collectionView:shouldSpringLoadItemAtIndexPath:withContext:", self, v6, v7);
  }
  v14 = v11;

LABEL_7:
  return v14;
}

- (void)_unhighlightSpringLoadedItem
{
  NSIndexPath *highlightedSpringLoadedItem;
  NSIndexPath *v4;

  highlightedSpringLoadedItem = self->_highlightedSpringLoadedItem;
  if (highlightedSpringLoadedItem)
  {
    -[UICollectionView _unhighlightItemAtIndexPath:animated:](self, "_unhighlightItemAtIndexPath:animated:", highlightedSpringLoadedItem, 0);
    v4 = self->_highlightedSpringLoadedItem;
    self->_highlightedSpringLoadedItem = 0;

  }
}

- (void)_highlightSpringLoadedItemAtIndexPath:(id)a3
{
  id v5;
  id v6;

  v5 = a3;
  if (v5)
  {
    v6 = v5;
    -[UICollectionView _highlightItemAtIndexPath:animated:scrollPosition:](self, "_highlightItemAtIndexPath:animated:scrollPosition:", v5, 0, 0);
    objc_storeStrong((id *)&self->_highlightedSpringLoadedItem, a3);
    v5 = v6;
  }

}

- (BOOL)_isPerformingShadowUpdates
{
  return (*((_QWORD *)&self->_collectionViewFlags + 1) >> 55) & 1;
}

- (void)_performUpdate:(id)a3
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  UICollectionView *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (v5 && v5[6] == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 17038, CFSTR("Section operations are not supported for this IPI"));

  }
  -[UICollectionViewUpdateItem _indexPath](v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "indexPathBeforeUpdate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "indexPathAfterUpdate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v6, "updateAction"))
  {
    if (!v7)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 17045, CFSTR("Original indexPath is nil. This is bad."));

    }
    -[UICollectionViewUpdateItem _indexPath](v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = v10;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = self;
    v13 = v11;
    v14 = 0;
    goto LABEL_12;
  }
  if (objc_msgSend(v6, "updateAction") != 1)
  {
    if (objc_msgSend(v6, "updateAction") != 3)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 17058, CFSTR("%s: Unhandled update item action for update: %@"), "-[UICollectionView _performUpdate:]", v6);

      goto LABEL_13;
    }
    if (v8)
    {
      if (v9)
      {
LABEL_17:
        -[UICollectionView _moveItemAtIndexPath:toIndexPath:](self, "_moveItemAtIndexPath:toIndexPath:", v8, v9);
        goto LABEL_13;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 17053, CFSTR("indexPathBeforeUpdate is nil. This is bad."));

      if (v9)
        goto LABEL_17;
    }
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 17054, CFSTR("indexPathAfterUpdate is nil. This is bad."));

    goto LABEL_17;
  }
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UICollectionView.m"), 17049, CFSTR("Original indexPath is nil. This is bad."));

  }
  -[UICollectionViewUpdateItem _indexPath](v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = self;
  v13 = v11;
  v14 = 1;
LABEL_12:
  -[UICollectionView _updateRowsAtIndexPaths:updateAction:](v12, "_updateRowsAtIndexPaths:updateAction:", v13, v14);

LABEL_13:
}

- (void)_purgeReuseQueues
{
  _UICollectionViewSubviewManager *subviewManager;

  -[UICollectionView _resetPrefetchState](self, "_resetPrefetchState");
  -[_UICollectionViewSubviewManager enumerateAllViewsInReuseQueueWithEnumerator:]((uint64_t)self->_subviewManager, (uint64_t)&__block_literal_global_919);
  subviewManager = self->_subviewManager;
  if (subviewManager)
    -[NSMutableDictionary removeAllObjects](subviewManager->_reuseQueues, "removeAllObjects");
}

uint64_t __37__UICollectionView__purgeReuseQueues__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "removeFromSuperview");
}

- (id)_prefetchDataSourceProxy
{
  _UICollectionViewDragAndDropController *WeakRetained;

  if (-[_UICollectionViewDragAndDropController hasShadowUpdates](self->_dragAndDropController))
    WeakRetained = self->_dragAndDropController;
  else
    WeakRetained = (_UICollectionViewDragAndDropController *)objc_loadWeakRetained((id *)&self->_prefetchDataSource);
  return WeakRetained;
}

- (id)_prefetchDataSourceActual
{
  return objc_loadWeakRetained((id *)&self->_prefetchDataSource);
}

- (void)_managedSubviewAdded:(id)a3
{
  id v4;
  UICollectionViewLayout *v5;
  id v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  id v11;

  v4 = a3;
  v5 = self->_layout;
  v6 = v4;
  v11 = v6;
  if (v6 && v5)
  {
    v7 = objc_msgSend(v6, "effectiveUserInterfaceLayoutDirection");
    if (v7 != -[UICollectionViewLayout developmentLayoutDirection](v5, "developmentLayoutDirection"))
    {
      v10 = -[UICollectionViewLayout _wantsRightToLeftHorizontalMirroringIfNeeded](v5, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      v9 = v11;
      goto LABEL_7;
    }
    v8 = objc_msgSend(v11, "_flipsHorizontalAxis");
    v9 = v11;
    if (v8)
    {
      v10 = 0;
LABEL_7:
      objc_msgSend(v9, "_setFlipsHorizontalAxis:", v10);
    }
  }

}

- (void)_performBatchUpdates:(id)a3 viewPropertyAnimator:(id)a4 customAnimationsProvider:(id)a5
{
  -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:](self, "_performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:", a3, 0, 0, 0, a4, a5);
}

- (void)_performBatchUpdates:(id)a3 customAnimationsProvider:(id)a4
{
  -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:](self, "_performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:animationHandler:", a3, 0, 0, 0, 0, a4);
}

- (id)_updateTranslator
{
  return self->_currentUpdate;
}

- (id)_orthogonalScrollerController
{
  return self->_orthogonalScrollerController;
}

- (int64_t)_totalItemCount
{
  UICollectionViewData *collectionViewData;

  collectionViewData = self->_collectionViewData;
  if (!collectionViewData)
    return 0;
  if ((*(_BYTE *)&collectionViewData->_collectionViewDataFlags & 2) == 0)
    -[UICollectionViewData _updateItemCounts]((uint64_t)self->_collectionViewData);
  return collectionViewData->_totalItemCount;
}

- (BOOL)_indexPathIsSectionAppendingIndexPath:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v4 = a3;
  v5 = v4;
  if (!v4
    || (unint64_t)objc_msgSend(v4, "length") < 2
    || (v6 = objc_msgSend(v5, "section"), v6 == 0x7FFFFFFFFFFFFFFFLL)
    || (v7 = v6, v6 >= -[UICollectionViewData numberOfSections]((uint64_t)self->_collectionViewData)))
  {
    v9 = 0;
  }
  else
  {
    v8 = objc_msgSend(v5, "item");
    v9 = v8 == -[UICollectionViewData numberOfItemsInSection:]((uint64_t)self->_collectionViewData, v7);
  }

  return v9;
}

- (id)contextMenuInteraction:(id)a3 configurationForMenuAtLocation:(CGPoint)a4
{
  double y;
  double x;
  uint64_t v7;
  void *v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD);
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v30;
  void (**v31)(_QWORD, _QWORD);
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD aBlock[7];
  _BYTE v37[128];
  _QWORD v38[3];

  y = a4.y;
  x = a4.x;
  v38[1] = *MEMORY[0x1E0C80C00];
  if (-[UICollectionView _delegateSupportsMenuInteraction](self, "_delegateSupportsMenuInteraction", a3)
    && -[UICollectionViewLayout _allowsItemInteractionsToBegin](self->_layout, "_allowsItemInteractionsToBegin"))
  {
    v7 = *(_QWORD *)&self->_collectionViewFlags & 0x80100000000;
    -[UICollectionView indexPathForItemAtPoint:](self, "indexPathForItemAtPoint:", x, y);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __74__UICollectionView_contextMenuInteraction_configurationForMenuAtLocation___block_invoke;
    aBlock[3] = &unk_1E16BDA40;
    aBlock[4] = self;
    *(double *)&aBlock[5] = x;
    *(double *)&aBlock[6] = y;
    v9 = _Block_copy(aBlock);
    v10 = (void (**)(_QWORD, _QWORD))v9;
    if (v8)
    {
      if (!-[UICollectionView _cellAtIndexPath:containsInteractiveControlAtPoint:](self, "_cellAtIndexPath:containsInteractiveControlAtPoint:", v8, x, y))
      {
        if (v7)
        {
          -[UICollectionView indexPathsForSelectedItems](self, "indexPathsForSelectedItems");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v11, "containsObject:", v8))
          {
            v12 = v11;
          }
          else
          {
            v38[0] = v8;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v38, 1);
            v12 = (id)objc_claimAutoreleasedReturnValue();
          }
          v15 = v12;
          ((void (**)(_QWORD, id))v10)[2](v10, v12);
          v17 = objc_claimAutoreleasedReturnValue();
          goto LABEL_23;
        }
        if ((*(_QWORD *)&self->_collectionViewFlags & 0x100000000000) != 0)
        {
          -[UICollectionView indexPathsForSelectedItems](self, "indexPathsForSelectedItems");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v14, "containsObject:", v8) & 1) != 0)
          {
            v15 = v14;
            -[UICollectionView _delegateProxy](self, "_delegateProxy");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "_dci_collectionView:contextMenuConfigurationForSelectedItemsAtIndexPaths:point:", self, v15, x, y);
            v13 = (void *)objc_claimAutoreleasedReturnValue();

            if (v13)
            {
LABEL_24:
              if (objc_msgSend(v15, "count"))
              {
                v31 = v10;
                objc_msgSend(MEMORY[0x1E0C99E20], "set");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                v32 = 0u;
                v33 = 0u;
                v34 = 0u;
                v35 = 0u;
                v30 = v15;
                v19 = v15;
                v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
                if (v20)
                {
                  v21 = v20;
                  v22 = *(_QWORD *)v33;
                  do
                  {
                    for (i = 0; i != v21; ++i)
                    {
                      if (*(_QWORD *)v33 != v22)
                        objc_enumerationMutation(v19);
                      v24 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
                      if ((objc_msgSend(v24, "isEqual:", v8, v30) & 1) == 0)
                      {
                        -[UICollectionView _identityTracker:](self, "_identityTracker:", 1);
                        v25 = (void *)objc_claimAutoreleasedReturnValue();
                        -[_UIIndexPathIdentityTracker identifierForIndexPath:]((uint64_t)v25, v24);
                        v26 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v18, "addObject:", v26);

                      }
                    }
                    v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
                  }
                  while (v21);
                }

                objc_msgSend(v13, "set_internalSecondaryItemIdentifiers:", v18);
                v15 = v30;
                v10 = v31;
              }
              -[UICollectionView _identityTracker:](self, "_identityTracker:", 1, v30);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              -[_UIIndexPathIdentityTracker identifierForIndexPath:]((uint64_t)v27, v8);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "set_internalIdentifier:", v28);

              goto LABEL_36;
            }
            goto LABEL_20;
          }

        }
        v15 = 0;
LABEL_20:
        if ((*(_QWORD *)&self->_collectionViewFlags & 0x800000000) == 0)
        {
          v13 = 0;
          goto LABEL_36;
        }
        -[UICollectionView _delegateProxy](self, "_delegateProxy");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "collectionView:contextMenuConfigurationForItemAtIndexPath:point:", self, v8, x, y);
        v17 = objc_claimAutoreleasedReturnValue();
LABEL_23:
        v13 = (void *)v17;

        if (v13)
          goto LABEL_24;
LABEL_36:

        goto LABEL_37;
      }
    }
    else if (v7)
    {
      (*((void (**)(void *, _QWORD))v9 + 2))(v9, MEMORY[0x1E0C9AA60]);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "set_internalIdentifier:", CFSTR("com.apple.UIKit.UICollectionView.backgroundMenu"));
LABEL_37:

      return v13;
    }
    v13 = 0;
    goto LABEL_37;
  }
  v13 = 0;
  return v13;
}

id __74__UICollectionView_contextMenuInteraction_configurationForMenuAtLocation___block_invoke(double *a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  double v9;
  double v10;
  void *v11;

  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  v4 = v3[330];
  v5 = a2;
  objc_msgSend(v3, "_delegateProxy");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  v8 = *((_QWORD *)a1 + 4);
  v9 = a1[5];
  v10 = a1[6];
  if ((v4 & 0x100000000) != 0)
    objc_msgSend(v6, "collectionView:contextMenuConfigurationForItemsAtIndexPaths:point:", v8, v5, v9, v10);
  else
    objc_msgSend(v6, "_dci_collectionView:contextMenuConfigurationForItemsAtIndexPaths:point:", v8, v5, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (BOOL)_cellAtIndexPath:(id)a3 containsInteractiveControlAtPoint:(CGPoint)a4
{
  double y;
  double x;
  void *v7;
  void *v8;
  BOOL v9;
  void *v10;

  y = a4.y;
  x = a4.x;
  -[UICollectionView cellForItemAtIndexPath:](self, "cellForItemAtIndexPath:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView convertPoint:toView:](self, "convertPoint:toView:", v7, x, y);
  objc_msgSend(v7, "hitTest:withEvent:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v9 = 0;
  if (v8 && v8 != v7)
  {
    while (!objc_msgSend(v8, "isUserInteractionEnabled") || (objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(v8, "superview");
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      v9 = 0;
      if (v10)
      {
        v8 = v10;
        if (v10 != v7)
          continue;
      }
      goto LABEL_10;
    }
    v9 = 1;
  }
  v10 = v8;
LABEL_10:

  return v9;
}

- (id)_defaultTargetedPreviewForIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    -[UICollectionView _existingIndexPathForIdentityTrackerIdentifier:](self, "_existingIndexPathForIdentityTrackerIdentifier:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5
      || (-[UICollectionView indexPathsForVisibleItems](self, "indexPathsForVisibleItems"),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          v7 = objc_msgSend(v6, "containsObject:", v5),
          v6,
          !v7))
    {
      v11 = 0;
LABEL_16:

      goto LABEL_17;
    }
    -[UICollectionView cellForItemAtIndexPath:](self, "cellForItemAtIndexPath:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      objc_msgSend(v8, "window");
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        _UITargetedPreviewForContextMenuFromCell(v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_15:

        goto LABEL_16;
      }
      if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
        {
          v18 = 138412802;
          v19 = v9;
          v20 = 2112;
          v21 = v5;
          v22 = 2112;
          v23 = v4;
          _os_log_fault_impl(&dword_185066000, v17, OS_LOG_TYPE_FAULT, "Cell (%@) at indexPath (%@) with identifier (%@) is not in a window. Was the collection view removed from its window?", (uint8_t *)&v18, 0x20u);
        }

      }
      else
      {
        v12 = _defaultTargetedPreviewForIdentifier____s_category;
        if (!_defaultTargetedPreviewForIdentifier____s_category)
        {
          v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v12, (unint64_t *)&_defaultTargetedPreviewForIdentifier____s_category);
        }
        v13 = *(NSObject **)(v12 + 8);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v18 = 138412802;
          v19 = v9;
          v20 = 2112;
          v21 = v5;
          v22 = 2112;
          v23 = v4;
          _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "Cell (%@) at indexPath (%@) with identifier (%@) is not in a window. Was the collection view removed from its window?", (uint8_t *)&v18, 0x20u);
        }
      }
    }
    v11 = 0;
    goto LABEL_15;
  }
  v11 = 0;
LABEL_17:
  +[UIColor clearColor](UIColor, "clearColor");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "parameters");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setBackgroundColor:", v14);

  objc_msgSend(v11, "set_captureHierarchyBelowSourceView:", 1);
  return v11;
}

- (id)_targetedPreviewForBackgroundMenuAtPoint:(CGPoint)a3
{
  UIPreviewTarget *v3;
  UITargetedPreview *v4;
  void *v5;
  void *v6;
  UITargetedPreview *v7;

  v3 = -[UIPreviewTarget initWithContainer:center:]([UIPreviewTarget alloc], "initWithContainer:center:", self, a3.x, a3.y);
  v4 = [UITargetedPreview alloc];
  v5 = (void *)objc_opt_new();
  v6 = (void *)objc_opt_new();
  v7 = -[UITargetedPreview initWithView:parameters:target:](v4, "initWithView:parameters:target:", v5, v6, v3);

  return v7;
}

- (id)contextMenuInteraction:(id)a3 configuration:(id)a4 highlightPreviewForItemWithIdentifier:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t collectionViewFlags;
  void *v14;
  uint64_t v15;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (!objc_msgSend(v9, "_isCollectionViewBackgroundMenu"))
  {
    -[UICollectionView _existingIndexPathForIdentityTrackerIdentifier:](self, "_existingIndexPathForIdentityTrackerIdentifier:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      collectionViewFlags = (uint64_t)self->_collectionViewFlags;
      if ((collectionViewFlags & 0x200000000) != 0)
      {
        -[UICollectionView _delegateProxy](self, "_delegateProxy");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "collectionView:contextMenuConfiguration:highlightPreviewForItemAtIndexPath:", self, v9, v12);
        v15 = objc_claimAutoreleasedReturnValue();
      }
      else if ((collectionViewFlags & 0x200000000000) != 0)
      {
        -[UICollectionView _delegateProxy](self, "_delegateProxy");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "_dci_collectionView:contextMenuConfiguration:previewForHighlightingItemAtIndexPath:", self, v9, v12);
        v15 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if ((collectionViewFlags & 0x1000000000) == 0)
        {
LABEL_12:
          -[UICollectionView _defaultTargetedPreviewForIdentifier:](self, "_defaultTargetedPreviewForIdentifier:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_13;
        }
        -[UICollectionView _delegateProxy](self, "_delegateProxy");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "collectionView:previewForHighlightingContextMenuWithConfiguration:", self, v9);
        v15 = objc_claimAutoreleasedReturnValue();
      }
      v11 = (void *)v15;

      if (!v11)
        goto LABEL_12;
    }
    else
    {
      v11 = 0;
    }
LABEL_13:

    goto LABEL_14;
  }
  objc_msgSend(v8, "locationInView:", self);
  -[UICollectionView _targetedPreviewForBackgroundMenuAtPoint:](self, "_targetedPreviewForBackgroundMenuAtPoint:");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:

  return v11;
}

- (id)contextMenuInteraction:(id)a3 configuration:(id)a4 dismissalPreviewForItemWithIdentifier:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t collectionViewFlags;
  void *v16;
  uint64_t v17;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (!objc_msgSend(v9, "_isCollectionViewBackgroundMenu"))
  {
    -[UICollectionView _existingIndexPathForIdentityTrackerIdentifier:](self, "_existingIndexPathForIdentityTrackerIdentifier:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12
      || (-[UICollectionView indexPathsForVisibleItems](self, "indexPathsForVisibleItems"),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          v14 = objc_msgSend(v13, "containsObject:", v12),
          v13,
          !v14))
    {
LABEL_13:
      v11 = 0;
      goto LABEL_14;
    }
    collectionViewFlags = (uint64_t)self->_collectionViewFlags;
    if ((collectionViewFlags & 0x400000000) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "collectionView:contextMenuConfiguration:dismissalPreviewForItemAtIndexPath:", self, v9, v12);
      v17 = objc_claimAutoreleasedReturnValue();
    }
    else if ((collectionViewFlags & 0x400000000000) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "_dci_collectionView:contextMenuConfiguration:previewForDismissingToItemAtIndexPath:", self, v9, v12);
      v17 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if ((collectionViewFlags & 0x2000000000) == 0)
      {
LABEL_12:
        if (!-[UICollectionView _isReordering](self, "_isReordering"))
        {
          -[UICollectionView _defaultTargetedPreviewForIdentifier:](self, "_defaultTargetedPreviewForIdentifier:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_14;
        }
        goto LABEL_13;
      }
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "collectionView:previewForDismissingContextMenuWithConfiguration:", self, v9);
      v17 = objc_claimAutoreleasedReturnValue();
    }
    v11 = (void *)v17;

    if (v11)
    {
LABEL_14:

      goto LABEL_15;
    }
    goto LABEL_12;
  }
  objc_msgSend(v8, "locationInView:", self);
  -[UICollectionView _targetedPreviewForBackgroundMenuAtPoint:](self, "_targetedPreviewForBackgroundMenuAtPoint:");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_15:

  return v11;
}

- (void)contextMenuInteraction:(id)a3 willPerformPreviewActionForMenuWithConfiguration:(id)a4 animator:(id)a5
{
  id v7;
  id v8;
  id v9;

  if ((*(_QWORD *)&self->_collectionViewFlags & 0x4000000000) != 0)
  {
    v7 = a5;
    v8 = a4;
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "collectionView:willPerformPreviewActionForMenuWithConfiguration:animator:", self, v8, v7);

  }
}

- (void)contextMenuInteraction:(id)a3 willDisplayMenuForConfiguration:(id)a4 animator:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  _QWORD aBlock[5];
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if ((*(_QWORD *)&self->_collectionViewFlags & 0x8000000000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "collectionView:willDisplayContextMenuWithConfiguration:animator:", self, v9, v10);

  }
  objc_msgSend(v9, "_internalSecondaryItemIdentifiers");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "count");

  if (v13)
  {
    v26 = v8;
    v14 = (void *)objc_opt_new();
    objc_msgSend(v9, "_internalIdentifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionView _existingIndexPathForIdentityTrackerIdentifier:](self, "_existingIndexPathForIdentityTrackerIdentifier:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
      objc_msgSend(v14, "addObject:", v16);
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    objc_msgSend(v9, "_internalSecondaryItemIdentifiers");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v30 != v20)
            objc_enumerationMutation(v17);
          -[UICollectionView _existingIndexPathForIdentityTrackerIdentifier:](self, "_existingIndexPathForIdentityTrackerIdentifier:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * i));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          if (v22)
            objc_msgSend(v14, "addObject:", v22);

        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v19);
    }

    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __84__UICollectionView_contextMenuInteraction_willDisplayMenuForConfiguration_animator___block_invoke;
    aBlock[3] = &unk_1E16B1B50;
    aBlock[4] = self;
    v28 = v14;
    v23 = v14;
    v24 = _Block_copy(aBlock);
    v25 = v24;
    if (v10)
      objc_msgSend(v10, "addAnimations:", v24);
    else
      (*((void (**)(void *))v24 + 2))(v24);
    v8 = v26;

  }
}

void __84__UICollectionView_contextMenuInteraction_willDisplayMenuForConfiguration_animator___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_focusSystem");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNeedsFocusUpdate");
  objc_msgSend(v2, "updateFocusIfNeeded");
  objc_msgSend(*(id *)(a1 + 32), "_updateContextMenuStateForVisibleCells:", *(_QWORD *)(a1 + 40));

}

- (void)contextMenuInteraction:(id)a3 willEndForConfiguration:(id)a4 animator:(id)a5
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD aBlock[5];

  v7 = a4;
  v8 = a5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __76__UICollectionView_contextMenuInteraction_willEndForConfiguration_animator___block_invoke;
  aBlock[3] = &unk_1E16B1B28;
  aBlock[4] = self;
  v9 = _Block_copy(aBlock);
  v10 = v9;
  if (v8)
    objc_msgSend(v8, "addAnimations:", v9);
  else
    (*((void (**)(void *))v9 + 2))(v9);
  if ((*(_QWORD *)&self->_collectionViewFlags & 0x10000000000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "collectionView:willEndContextMenuInteractionWithConfiguration:animator:", self, v7, v8);

  }
}

void __76__UICollectionView_contextMenuInteraction_willEndForConfiguration_animator___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_focusSystem");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNeedsFocusUpdate");
  objc_msgSend(v2, "updateFocusIfNeeded");
  objc_msgSend(*(id *)(a1 + 32), "_updateContextMenuStateForVisibleCells:", 0);

}

- (void)_updateContextMenuStateForVisibleCells:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _UICollectionViewSubviewManager *subviewManager;
  id v14;
  id v15;
  void *v16;
  void *v17;
  _UICollectionViewSubviewManager *v18;
  id v19;
  _QWORD v20[5];
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[4];
  void *v28;
  _QWORD aBlock[5];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __59__UICollectionView__updateContextMenuStateForVisibleCells___block_invoke;
  aBlock[3] = &unk_1E16BDA68;
  aBlock[4] = self;
  v6 = _Block_copy(aBlock);
  if (objc_msgSend(v4, "count"))
  {
    v7 = (void *)objc_opt_new();
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v8 = v4;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v30, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v24;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v24 != v11)
            objc_enumerationMutation(v8);
          objc_msgSend(v7, "addIndex:", -[UICollectionViewData globalIndexForItemAtIndexPath:]((uint64_t)self->_collectionViewData, *(void **)(*((_QWORD *)&v23 + 1) + 8 * v12++)));
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v30, 16);
      }
      while (v10);
    }

    subviewManager = self->_subviewManager;
    v20[0] = v5;
    v20[1] = 3221225472;
    v20[2] = __59__UICollectionView__updateContextMenuStateForVisibleCells___block_invoke_3;
    v20[3] = &unk_1E16BDA90;
    v20[4] = self;
    v21 = v7;
    v22 = v6;
    v14 = v6;
    v15 = v7;
    v16 = v15;
    v17 = v14;
    if (subviewManager)
    {
      -[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)subviewManager->_visibleViews, (uint64_t)v20);
      v16 = v21;
      v17 = v22;
    }

  }
  else
  {
    v18 = self->_subviewManager;
    v27[0] = v5;
    v27[1] = 3221225472;
    v27[2] = __59__UICollectionView__updateContextMenuStateForVisibleCells___block_invoke_2;
    v27[3] = &unk_1E16BDC70;
    v28 = v6;
    v19 = v6;
    v15 = v19;
    if (v18)
    {
      -[_UICollectionViewSubviewCollection enumerateCellsWithEnumerator:]((uint64_t)v18->_visibleViews, (uint64_t)v27);
      v14 = v28;
    }
    else
    {
      v14 = v19;
    }
  }

}

void __59__UICollectionView__updateContextMenuStateForVisibleCells___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (_UICollectionViewCellContextMenuSuppressesSelectionState())
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2896);
    if (v6)
      v7 = objc_msgSend(*(id *)(v6 + 8), "containsObject:", v8);
    else
      v7 = 0;
    objc_msgSend(v5, "_setSelected:animated:", v7, 0);
  }

}

void __59__UICollectionView__updateContextMenuStateForVisibleCells___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a2;
  objc_msgSend(v5, "_setContextMenuGroupLocation:", 0);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __59__UICollectionView__updateContextMenuStateForVisibleCells___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  id *v8;
  void *v9;
  void *v10;
  id *v11;
  void *v12;
  double MaxY;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id *v18;
  void *v19;
  double v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v24 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192);
  v6 = a2;
  v7 = -[UICollectionViewData globalIndexForItemAtIndexPath:](v5, v6);
  if ((objc_msgSend(*(id *)(a1 + 40), "containsIndex:", v7) & 1) != 0)
  {
    objc_msgSend(v24, "_layoutAttributes");
    v8 = (id *)objc_claimAutoreleasedReturnValue();
    -[UICollectionViewLayoutAttributes _existingListAttributes](v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      if (v7 >= 1 && objc_msgSend(*(id *)(a1 + 40), "containsIndex:", v7 - 1))
      {
        -[UICollectionViewData indexPathForItemAtGlobalIndex:](*(_BYTE **)(*(_QWORD *)(a1 + 32) + 2192), v7 - 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionViewData layoutAttributesForItemAtIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192), v10);
        v11 = (id *)objc_claimAutoreleasedReturnValue();
        -[UICollectionViewLayoutAttributes _existingListAttributes](v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (v12)
        {
          objc_msgSend(v11, "frame");
          MaxY = CGRectGetMaxY(v25);
          objc_msgSend(v8, "frame");
          v14 = MaxY - CGRectGetMinY(v26) + 0.0001 >= 0.0;
        }
        else
        {
          v14 = 0;
        }

      }
      else
      {
        v14 = 0;
      }
      v16 = v7 + 1;
      if (objc_msgSend(*(id *)(a1 + 40), "containsIndex:", v16))
      {
        -[UICollectionViewData indexPathForItemAtGlobalIndex:](*(_BYTE **)(*(_QWORD *)(a1 + 32) + 2192), v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionViewData layoutAttributesForItemAtIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2192), v17);
        v18 = (id *)objc_claimAutoreleasedReturnValue();
        -[UICollectionViewLayoutAttributes _existingListAttributes](v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19)
        {
          objc_msgSend(v8, "frame");
          v20 = CGRectGetMaxY(v27);
          objc_msgSend(v18, "frame");
          v21 = v20 - CGRectGetMinY(v28) + 0.0001 >= 0.0;
        }
        else
        {
          v21 = 0;
        }

        v23 = 3;
        if (v21 && v14)
          v23 = 1;
        v22 = 4;
        if (v21)
          v22 = 2;
      }
      else
      {
        v22 = 4;
        v23 = 3;
      }
      if (v14)
        v15 = v23;
      else
        v15 = v22;
    }
    else
    {
      v15 = 4;
    }
    objc_msgSend(v24, "_setContextMenuGroupLocation:", v15);

  }
  else
  {
    objc_msgSend(v24, "_setContextMenuGroupLocation:", 0);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

- (id)_contextMenuInteraction:(id)a3 styleForMenuWithConfiguration:(id)a4
{
  uint64_t collectionViewFlags;
  id v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;

  collectionViewFlags = (uint64_t)self->_collectionViewFlags;
  v6 = a4;
  v7 = v6;
  if ((collectionViewFlags & 0x20000000000) != 0)
  {
    -[UICollectionView _delegateProxy](self, "_delegateProxy");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_collectionView:styleForContextMenuWithConfiguration:", self, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = objc_msgSend(v6, "_isCollectionViewBackgroundMenu");

    if (v8)
    {
      +[_UIContextMenuStyle defaultStyle](_UIContextMenuStyle, "defaultStyle");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setPreferredLayout:", 3);
    }
    else
    {
      v9 = 0;
    }
  }
  return v9;
}

- (id)_contextMenuInteraction:(id)a3 accessoriesForMenuWithConfiguration:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  _OWORD v9[2];
  uint64_t v10;

  if ((*(_QWORD *)&self->_collectionViewFlags & 0x40000000000) == 0)
    return 0;
  v6 = a4;
  -[UICollectionView _delegateProxy](self, "_delegateProxy");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  objc_msgSend(v7, "_collectionView:accessoriesForContextMenuWithConfiguration:layoutAnchor:", self, v6, v9);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)_existingIndexPathForIdentityTrackerIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[UICollectionView _identityTracker:](self, "_identityTracker:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIIndexPathIdentityTracker currentIndexPathForIdentifier:]((uint64_t)v5, (uint64_t)v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id __64__UICollectionView__configureSceneActivationInteractionIfNeeded__block_invoke(uint64_t a1, double a2, double a3)
{
  id WeakRetained;
  void *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_sceneActivationConfigurationForLocation:", a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)_sceneActivationConfigurationForLocation:(CGPoint)a3
{
  double y;
  double x;
  void *v6;
  uint64_t collectionViewFlags;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  y = a3.y;
  x = a3.x;
  if (-[UICollectionViewLayout _allowsItemInteractionsToBegin](self->_layout, "_allowsItemInteractionsToBegin"))
  {
    -[UICollectionView indexPathForItemAtPoint:](self, "indexPathForItemAtPoint:", x, y);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      v9 = 0;
LABEL_16:

      return v9;
    }
    collectionViewFlags = (uint64_t)self->_collectionViewFlags;
    if ((collectionViewFlags & 0x800000000000) != 0)
    {
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "collectionView:sceneActivationConfigurationForItemAtIndexPath:point:", self, v6, x, y);
      v11 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if ((collectionViewFlags & 0x1000000000000) == 0)
      {
        v8 = 0;
        goto LABEL_14;
      }
      -[UICollectionView _delegateProxy](self, "_delegateProxy");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "_collectionView:sceneActivationConfigurationForItemAtIndexPath:point:", self, v6, x, y);
      v11 = objc_claimAutoreleasedReturnValue();
    }
    v8 = (id)v11;

    if (v8)
    {
      objc_msgSend(v8, "preview");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v12)
      {
        -[UICollectionView cellForItemAtIndexPath:](self, "cellForItemAtIndexPath:", v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "window");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v14)
        {

          v9 = 0;
          goto LABEL_15;
        }
        _UITargetedPreviewForContextMenuFromCell(v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setPreview:", v15);

      }
    }
LABEL_14:
    v8 = v8;
    v9 = v8;
LABEL_15:

    goto LABEL_16;
  }
  v9 = 0;
  return v9;
}

- (void)_subviewManagerDidUpdateVisibleCells
{
  -[_UICollectionViewMultiSelectController collectionViewDidUpdateVisibleCells](self->_multiSelectController, "collectionViewDidUpdateVisibleCells");
}

- (id)valueForUndefinedKey:(id)a3
{
  id v4;
  void *v6;
  objc_super v7;

  v4 = a3;
  if (objc_msgSend(v4, "isEqualToString:", CFSTR("_cellReuseQueues")))
  {
    UIKVCAccessProhibited((uint64_t)v4, (uint64_t)CFSTR("UICollectionView"));

    return MEMORY[0x1E0C9AA70];
  }
  else
  {
    v7.receiver = self;
    v7.super_class = (Class)UICollectionView;
    -[UICollectionView valueForUndefinedKey:](&v7, sel_valueForUndefinedKey_, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    return v6;
  }
}

- (void)_setCurrentTouch:(id)a3
{
  objc_storeStrong((id *)&self->_currentTouch, a3);
}

- (UICollectionViewReorderingCadence)reorderingCadence
{
  return self->_reorderingCadence;
}

- (void)setReorderingCadence:(UICollectionViewReorderingCadence)reorderingCadence
{
  self->_reorderingCadence = reorderingCadence;
}

- (_UICollectionViewFocusedItemState)_rememberedFocusedItemState
{
  return self->_rememberedFocusedItemState;
}

- (_UIFocusFastScrollingIndexBarEntry)selectedIndexTitleEntry
{
  return self->_selectedIndexTitleEntry;
}

- (void)setSelectedIndexTitleEntry:(id)a3
{
  objc_storeStrong((id *)&self->_selectedIndexTitleEntry, a3);
}

- (BOOL)_searchFullPageOnFocusUpdate
{
  return self->_searchFullPageOnFocusUpdate;
}

- (void)_setSearchFullPageOnFocusUpdate:(BOOL)a3
{
  self->_searchFullPageOnFocusUpdate = a3;
}

- (UIEdgeInsets)_defaultLayoutMargins
{
  double top;
  double left;
  double bottom;
  double right;
  UIEdgeInsets result;

  top = self->_defaultLayoutMargins.top;
  left = self->_defaultLayoutMargins.left;
  bottom = self->_defaultLayoutMargins.bottom;
  right = self->_defaultLayoutMargins.right;
  result.right = right;
  result.bottom = bottom;
  result.left = left;
  result.top = top;
  return result;
}

- (void)_setHorizontalIndexTitleBar:(id)a3
{
  objc_storeStrong((id *)&self->_horizontalIndexTitleBar, a3);
}

- (NSIndexPath)indexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar
{
  return self->_indexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar;
}

- (void)setIndexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar:(id)a3
{
  objc_storeStrong((id *)&self->_indexPathOfFocusedCellBeforeFocusingOnHorizontalIndexTitleBar, a3);
}

- (BOOL)isMovingFocusFromHorizontalIndexTitleBarToContent
{
  return self->_isMovingFocusFromHorizontalIndexTitleBarToContent;
}

- (void)setIsMovingFocusFromHorizontalIndexTitleBarToContent:(BOOL)a3
{
  self->_isMovingFocusFromHorizontalIndexTitleBarToContent = a3;
}

- (_UIDragDestinationIndicatorView)_reorderDestinationView
{
  return self->_reorderDestinationView;
}

- (void)_setReorderDestinationView:(id)a3
{
  objc_storeStrong((id *)&self->_reorderDestinationView, a3);
}

- (void)_setIndexOverlayManager:(id)a3
{
  objc_storeStrong((id *)&self->_indexOverlayManager, a3);
}

- (id)_navigationCompletion
{
  return self->_navigationCompletion;
}

- (void)_setNavigationCompletion:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 3208);
}

- (UIFocusContainerGuide)_endOfContentFocusContainerGuide
{
  return self->_endOfContentFocusContainerGuide;
}

- (void)_setCurrentPromiseFulfillmentCell:(id)a3
{
  objc_storeStrong((id *)&self->_currentPromiseFulfillmentCell, a3);
}

- (void)setExpectedDiffableUpdateItem:(id)a3
{
  objc_storeStrong((id *)&self->_expectedDiffableUpdateItem, a3);
}

@end
