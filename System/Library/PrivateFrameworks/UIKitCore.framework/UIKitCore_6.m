void sub_185C6FADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C73A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_185C766B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

uint64_t _indexOfButton(void *a1, void *a2)
{
  id v3;
  id *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  id v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v4[87], "isHidden") & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    if (v4[87] == v3)
    {
      v5 = 0;
      goto LABEL_31;
    }
    v5 = 1;
  }
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v6 = v4[84];
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v23;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v23 != v9)
          objc_enumerationMutation(v6);
        v11 = *(id *)(*((_QWORD *)&v22 + 1) + 8 * i);
        if ((objc_msgSend(v11, "isHidden") & 1) == 0)
        {
          if (v11 == v3)
          {
LABEL_29:

            goto LABEL_31;
          }
          ++v5;
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      if (v8)
        continue;
      break;
    }
  }

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = v4[85];
  v12 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v19;
    do
    {
      for (j = 0; j != v13; ++j)
      {
        if (*(_QWORD *)v19 != v14)
          objc_enumerationMutation(v6);
        v16 = *(id *)(*((_QWORD *)&v18 + 1) + 8 * j);
        if ((objc_msgSend(v16, "isHidden", (_QWORD)v18) & 1) == 0)
        {
          if (v16 == v3)
            goto LABEL_29;
          ++v5;
        }
      }
      v13 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v13);
  }

  if ((objc_msgSend(v4[86], "isHidden") & 1) == 0 && v4[86] != v3)
    ++v5;
LABEL_31:

  return v5;
}

void _separatorsForIndex(void *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  id *v7;
  id v8;
  unint64_t v9;
  id v10;
  unint64_t v11;
  id v12;
  id *v13;

  v7 = a1;
  v8 = v7[101];
  if (v8)
  {
    v13 = v7;
    if (a2 >= 1)
    {
      v9 = objc_msgSend(v8, "count");
      v7 = v13;
      if (v9 > a2 - 1)
      {
        objc_msgSend(v13[101], "objectAtIndexedSubscript:", a2 - 1);
        v10 = (id)objc_claimAutoreleasedReturnValue();
        v7 = v13;
        *a3 = v10;
      }
    }
    v11 = objc_msgSend(v7[101], "count");
    v7 = v13;
    if (v11 > a2)
    {
      objc_msgSend(v13[101], "objectAtIndexedSubscript:", a2);
      v12 = (id)objc_claimAutoreleasedReturnValue();
      v7 = v13;
      *a4 = v12;
    }
  }

}

id UICalloutBarAnimationContext(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v11[3];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  v12[0] = a1;
  v11[0] = CFSTR("UICalloutBarInfoKeyAnimationID");
  v11[1] = CFSTR("UICalloutBarInfoKeyWillDidShowReplacements");
  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a1;
  objc_msgSend(v5, "numberWithBool:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12[1] = v7;
  v11[2] = CFSTR("UICalloutBarInfoKeyDidPromptForReplacements");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12[2] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_185C794A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_185C79CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSTKImageGlyphDataSourceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7A5D0;
  v7 = qword_1ECD7A5D0;
  if (!qword_1ECD7A5D0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSTKImageGlyphDataSourceClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSTKImageGlyphDataSourceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185C7A258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSTKStickerViewClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD7A5C8)
    qword_1ECD7A5C8 = _sl_dlopen();
  result = objc_getClass("STKStickerView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_3_11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getSTKImageGlyphDataSourceClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD7A5C8)
    qword_1ECD7A5C8 = _sl_dlopen();
  result = objc_getClass("STKImageGlyphDataSource");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD7A5D0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185C7C594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIApplicationEndBackgroundTaskError(uint64_t a1)
{
  NSLog(CFSTR("Can't end BackgroundTask: no background task exists with identifier %lu (0x%lx), or it may have already been ended. Break in UIApplicationEndBackgroundTaskError() to debug."), a1, a1);
}

void _UIApplicationCallWhenBackgroundTaskCountReachesZero(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  dispatch_block_t block;

  block = a1;
  os_unfair_lock_lock(&stru_1ECD7DE4C);
  if (objc_msgSend((id)qword_1ECD7DE98, "count"))
  {
    v1 = (void *)qword_1ECD7DEA0;
    if (!qword_1ECD7DEA0)
    {
      v2 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      v3 = (void *)qword_1ECD7DEA0;
      qword_1ECD7DEA0 = (uint64_t)v2;

      v1 = (void *)qword_1ECD7DEA0;
    }
    v4 = (void *)objc_msgSend(block, "copy");
    objc_msgSend(v1, "addObject:", v4);

  }
  else
  {
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
  os_unfair_lock_unlock(&stru_1ECD7DE4C);

}

void ___fireBackgroundExpirationHandlers_block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint8_t v9[16];

  v2 = qword_1ECD7DEF0;
  if (!qword_1ECD7DEF0)
  {
    v2 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&qword_1ECD7DEF0);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_DEFAULT, "On backgroundTaskAssertionQueue, clearing shared assertion", v9, 2u);
  }
  v4 = (void *)qword_1ECD7DEA8;
  qword_1ECD7DEA8 = 0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "postNotificationName:object:", CFSTR("UIApplicationBackgroundTaskWillExpireNotification"), *(_QWORD *)(a1 + 32));

  os_unfair_lock_lock(&stru_1ECD7DE4C);
  v6 = objc_msgSend((id)qword_1ECD7DE98, "copy");
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  os_unfair_lock_unlock(&stru_1ECD7DE4C);
}

void ___doAddBackgroundTask_block_invoke_92(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[4];
  id v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECD7DF68;
  if (!qword_1ECD7DF68)
  {
    v2 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&qword_1ECD7DF68);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_DWORD *)buf = 134217984;
    v8 = v4;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_DEFAULT, "Calling expiration handler for non-acquired background assertion: task ID = %lu", buf, 0xCu);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___doAddBackgroundTask_block_invoke_93;
  block[3] = &unk_1E16B1B28;
  v6 = *(id *)(a1 + 32);
  dispatch_async(MEMORY[0x1E0C80D38], block);
  os_unfair_lock_lock(&stru_1ECD7DE4C);
  NSMapRemove((NSMapTable *)qword_1ECD7DE98, *(const void **)(*(_QWORD *)(a1 + 32) + 8));
  if (!objc_msgSend((id)qword_1ECD7DE98, "count"))
    _fireBackgroundTaskCountReachedZeroHandlers_Locked();
  os_unfair_lock_unlock(&stru_1ECD7DE4C);

}

uint64_t ___doAddBackgroundTask_block_invoke_93(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fireExpirationHandler");
}

void _backgroundTaskExpirationWarningTimerFired(uint64_t a1)
{
  int v2;
  __darwin_time_t v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  __darwin_time_t v9;
  int v10;
  NSObject *v11;
  unint64_t v12;
  NSObject *v13;
  void *value;
  NSMapEnumerator enumerator;
  timespec __tp;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (os_variant_has_internal_diagnostics())
  {
    if (qword_1ECD7DF10 != a1)
    {
      __UIFaultDebugAssertLog();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315650;
        v18 = "void _backgroundTaskExpirationWarningTimerFired(CFRunLoopTimerRef, void *)";
        v19 = 2112;
        v20 = qword_1ECD7DF10;
        v21 = 2112;
        v22 = a1;
        _os_log_fault_impl(&dword_185066000, v11, OS_LOG_TYPE_FAULT, "%s called with unexpected timer (_backgroundTaskExpirationTimer = %@, thisTimer = %@)", buf, 0x20u);
      }

    }
  }
  else if (qword_1ECD7DF10 != a1)
  {
    v12 = qword_1ECD7DF78;
    if (!qword_1ECD7DF78)
    {
      v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v12, (unint64_t *)&qword_1ECD7DF78);
    }
    v13 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v18 = "void _backgroundTaskExpirationWarningTimerFired(CFRunLoopTimerRef, void *)";
      v19 = 2112;
      v20 = qword_1ECD7DF10;
      v21 = 2112;
      v22 = a1;
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "%s called with unexpected timer (_backgroundTaskExpirationTimer = %@, thisTimer = %@)", buf, 0x20u);
    }
  }
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
  os_unfair_lock_lock(&stru_1ECD7DE4C);
  memset(&enumerator, 0, sizeof(enumerator));
  NSEnumerateMapTable(&enumerator, (NSMapTable *)qword_1ECD7DE98);
  value = 0;
  if (NSNextMapEnumeratorPair(&enumerator, 0, &value))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      if (!*((_BYTE *)value + 48))
      {
        v4 = *((_QWORD *)value + 5);
        if (__tp.tv_sec - v4 < 34)
        {
          v9 = v4 - __tp.tv_sec + 35;
          v10 = v2 ^ 1 | (v9 < v3);
          if ((v2 ^ 1) & 1 | (v9 < v3))
            v3 = v4 - __tp.tv_sec + 35;
          v2 |= v10;
        }
        else
        {
          if ((objc_msgSend(CFSTR("com.apple.WebKit.ProcessAssertion"), "isEqualToString:", *((_QWORD *)value + 4)) & 1) == 0)
          {
            v5 = qword_1ECD7DF80;
            if (!qword_1ECD7DF80)
            {
              v5 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v5, (unint64_t *)&qword_1ECD7DF80);
            }
            v6 = *(NSObject **)(v5 + 8);
            if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            {
              v7 = (const char *)*((_QWORD *)value + 1);
              v8 = *((_QWORD *)value + 4);
              *(_DWORD *)buf = 134218499;
              v18 = v7;
              v19 = 2113;
              v20 = v8;
              v21 = 2048;
              v22 = 30;
              _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "Background Task %lu (\"%{private}@\"), was created over %lu seconds ago. In applications running in the background, this creates a risk of termination. Remember to call UIApplication.endBackgroundTask(_:) for your task in a timely manner to avoid this.", buf, 0x20u);
            }
          }
          *((_BYTE *)value + 48) = 1;
        }
      }
    }
    while (NSNextMapEnumeratorPair(&enumerator, 0, &value));
  }
  else
  {
    v3 = 0;
    LOBYTE(v2) = 0;
  }
  NSEndMapTableEnumeration(&enumerator);
  if (qword_1ECD7DF10)
  {
    CFRelease((CFTypeRef)qword_1ECD7DF10);
    qword_1ECD7DF10 = 0;
  }
  if ((v2 & 1) != 0)
    _backgroundTaskExpirationWarningTimerSchedule_Locked(v3);
  os_unfair_lock_unlock(&stru_1ECD7DE4C);
}

const __CFString *_UICompositionSessionStateDescription(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 3)
    return CFSTR("Unknown");
  else
    return off_1E16C8D50[a1 + 1];
}

BOOL _UIGetUITextAssistantRewriteLogging()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_UITextAssistantRewriteLogging,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_UITextAssistantRewriteLogging))
  {
    v1 = 0;
  }
  else
  {
    do
    {
      v1 = v0 < v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_UITextAssistantRewriteLogging, (uint64_t)CFSTR("UITextAssistantRewriteLogging"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_UITextAssistantRewriteLogging;
    }
    while (v0 != _UIInternalPreference_UITextAssistantRewriteLogging);
  }
  return byte_1EDDA80CC && v1;
}

void DrawCheckeredPattern(uint64_t a1, CGContext *a2)
{
  uint64_t v4;
  void *v5;
  double v6;
  uint64_t *v7;
  void *v8;
  double v9;
  UIColor *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  double v15;
  double v16;
  id v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  BOOL v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", *(_QWORD *)a1);
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = (void *)v4;
    v24 = 0.0;
    v25 = 0.0;
    v22 = 0;
    v23 = 0.0;
LABEL_4:
    objc_msgSend(v5, "getRed:green:blue:alpha:", &v25, &v24, &v23, &v22);
    v6 = v25 + v24 + v23;
    goto LABEL_5;
  }
  +[UIColor whiteColor](UIColor, "whiteColor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0.0;
  v25 = 0.0;
  v22 = 0;
  v23 = 0.0;
  if (v5)
    goto LABEL_4;
  v6 = 0.0;
LABEL_5:
  if (v6 / 3.0 <= 0.5)
  {
    v7 = &qword_1ECD7A5E0;
    v8 = (void *)qword_1ECD7A5E0;
    if (!qword_1ECD7A5E0)
    {
      v9 = 1.0;
      goto LABEL_10;
    }
  }
  else
  {
    v7 = &_MergedGlobals_3_12;
    v8 = (void *)_MergedGlobals_3_12;
    if (!_MergedGlobals_3_12)
    {
      v9 = 0.0;
LABEL_10:
      v10 = [UIColor alloc];
      v11 = -[UIColor initWithWhite:alpha:](v10, "initWithWhite:alpha:", v9, 0.2, v22);
      v12 = (void *)*v7;
      *v7 = v11;

      v8 = (void *)*v7;
    }
  }
  v13 = v8;
  v14 = objc_retainAutorelease(v5);
  CGContextSetFillColorWithColor(a2, (CGColorRef)objc_msgSend(v14, "CGColor"));
  v15 = *(double *)(a1 + 8);
  v26.size.width = v15 * 96.0;
  v16 = 0.0;
  v26.origin.x = 0.0;
  v26.origin.y = 0.0;
  v26.size.height = v15 * 96.0;
  CGContextFillRect(a2, v26);
  v17 = objc_retainAutorelease(v13);
  CGContextSetFillColorWithColor(a2, (CGColorRef)objc_msgSend(v17, "CGColor"));
  v18 = 0;
  do
  {
    v19 = -2;
    v20 = 0.0;
    do
    {
      v27.origin.y = v15 * (v20 * 6.0);
      v27.origin.x = v15 * (v16 * 6.0);
      v27.size.width = v15 * 6.0;
      v27.size.height = v15 * 6.0;
      CGContextFillRect(a2, v27);
      v28.origin.y = v15 * ((double)(int)(v19 + 3) * 6.0);
      v28.origin.x = v15 * ((double)(int)(v18 | 1) * 6.0);
      v28.size.width = v15 * 6.0;
      v28.size.height = v15 * 6.0;
      CGContextFillRect(a2, v28);
      v20 = v20 + 2.0;
      v19 += 2;
    }
    while (v19 < 0xE);
    v16 = v16 + 2.0;
    v21 = v18 >= 0xE;
    v18 += 2;
  }
  while (!v21);

}

void ReleasePatternInfo(CGColorRef *a1)
{
  CGColorRelease(*a1);
  free(a1);
}

void sub_185C847C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C87420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C8762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UILocalizedFormat(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;

  v10 = a3;
  v11 = a1;
  _UIKitBundle();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "localizedStringForKey:value:table:", v11, v10, CFSTR("Localizable"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = objc_alloc(MEMORY[0x1E0CB3940]);
  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v14, "initWithFormat:locale:arguments:", v13, v15, &a9);

  return v16;
}

id _UILocalizedStringWithLocale(void *a1, uint64_t a2, void *a3, void *a4)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1E0CB34D0];
  v19 = a4;
  v7 = (void *)MEMORY[0x1E0C99D20];
  v8 = a4;
  v9 = a3;
  v10 = a1;
  objc_msgSend(v7, "arrayWithObjects:count:", &v19, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  _UIKitBundle();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "localizations", v19, v20);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "preferredLocalizationsFromArray:forPreferences:", v11, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  _UIKitBundle();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "firstObject");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "localizedStringForKey:value:table:localization:", v10, v9, CFSTR("Localizable"), v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_185C8AF98(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s0_s8(v1);
  _Unwind_Resume(a1);
}

void __destructor_8_s0_s8(id *a1)
{

}

void sub_185C8CAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C8CD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id UIFeedbackServiceLog()
{
  if (UIFeedbackServiceLog_onceToken != -1)
    dispatch_once(&UIFeedbackServiceLog_onceToken, &__block_literal_global_3_9);
  return (id)UIFeedbackServiceLog___instance;
}

id _UIKBMediaLog_0()
{
  if (qword_1ECD7E030 != -1)
    dispatch_once(&qword_1ECD7E030, &__block_literal_global_136_0);
  return (id)qword_1ECD7E028;
}

void sub_185C8F740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *_UIRectEdgeDescription(char a1)
{
  __CFString *v1;
  id v3;
  void *v4;

  if ((a1 & 0xF) == 0)
  {
    v1 = CFSTR("none");
    return v1;
  }
  if ((a1 & 0xF) != 0xFLL)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v4 = v3;
    if ((a1 & 1) != 0)
    {
      objc_msgSend(v3, "addObject:", CFSTR("top"));
      if ((a1 & 2) == 0)
      {
LABEL_7:
        if ((a1 & 4) == 0)
          goto LABEL_8;
        goto LABEL_14;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_7;
    }
    objc_msgSend(v4, "addObject:", CFSTR("left"));
    if ((a1 & 4) == 0)
    {
LABEL_8:
      if ((a1 & 8) == 0)
      {
LABEL_10:
        objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
        v1 = (__CFString *)objc_claimAutoreleasedReturnValue();

        return v1;
      }
LABEL_9:
      objc_msgSend(v4, "addObject:", CFSTR("right"));
      goto LABEL_10;
    }
LABEL_14:
    objc_msgSend(v4, "addObject:", CFSTR("bottom"));
    if ((a1 & 8) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  v1 = CFSTR("all");
  return v1;
}

uint64_t _patternCallback(void *a1, const char *a2)
{
  return objc_msgSend(a1, "_drawPatternWithContext:", a2);
}

void sub_185C944CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C9551C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C95700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const __CFString *_UITextFormattingViewControllerHighlightFromColorScheme(void *a1)
{
  id v1;
  const __CFString *v2;

  v1 = a1;
  if (*(id *)off_1E1679160 == v1)
  {
    v2 = CFSTR("UITextFormattingViewControllerHighlightPurple");
  }
  else if (*(id *)off_1E1679158 == v1)
  {
    v2 = CFSTR("UITextFormattingViewControllerHighlightPink");
  }
  else if (*(id *)off_1E1679150 == v1)
  {
    v2 = CFSTR("UITextFormattingViewControllerHighlightOrange");
  }
  else if (*(id *)off_1E1679148 == v1)
  {
    v2 = CFSTR("UITextFormattingViewControllerHighlightMint");
  }
  else if (*(id *)off_1E1679138 == v1)
  {
    v2 = CFSTR("UITextFormattingViewControllerHighlightBlue");
  }
  else
  {
    v2 = CFSTR("UITextFormattingViewControllerHighlightDefault");
  }

  return v2;
}

void sub_185C95D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UITextFormattingViewControllerFormattingDescriptorClasses()
{
  if (qword_1ECD7E040 != -1)
    dispatch_once(&qword_1ECD7E040, &__block_literal_global_259);
  return (id)_MergedGlobals_1071;
}

void _UIIntervalFromCGRect(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (CGRectIsNull(*(CGRect *)&a2))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIInterval _UIIntervalFromCGRect(CGRect, UIAxis)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("_UIInterval.m"), 16, CFSTR("Unable to convert CGRectNull to _UIInterval."));

  }
  if ((unint64_t)(a1 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIInterval _UIIntervalFromCGRect(CGRect, UIAxis)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("_UIInterval.m"), 17, CFSTR("Need to specify one and only one axis."));

  }
}

double _UIIntervalStandardize(double a1, double a2)
{
  if (a2 >= 0.0)
    a2 = -0.0;
  return a1 + a2;
}

double _UIIntervalGetMin(double a1, double a2)
{
  if (a2 >= 0.0)
    a2 = -0.0;
  return a1 + a2;
}

double _UIIntervalGetMid(double a1, double a2)
{
  double v2;

  v2 = -a2;
  if (a2 >= 0.0)
  {
    v2 = a2;
    a2 = -0.0;
  }
  return a1 + a2 + v2 * 0.5;
}

double _UIIntervalGetMax(double a1, double a2)
{
  double v2;

  v2 = -a2;
  if (a2 >= 0.0)
  {
    v2 = a2;
    a2 = -0.0;
  }
  return v2 + a1 + a2;
}

BOOL _UIIntervalContainsInterval(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;

  if (a2 >= 0.0)
    v4 = -0.0;
  else
    v4 = a2;
  v5 = a1 + v4;
  if (a4 >= 0.0)
    v6 = -0.0;
  else
    v6 = a4;
  v7 = a3 + v6;
  if (v5 > v7)
    return 0;
  if (a2 < 0.0)
    a2 = -a2;
  v9 = a2 + v5;
  v10 = -a4;
  if (a4 >= 0.0)
    v10 = a4;
  return v9 >= v10 + v7;
}

void sub_185C9D2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UISystemGestureLocationForScrollEventInView(void *a1, void *a2, void *a3)
{
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;

  objc_msgSend(a1, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
    v7 = a2;
  else
    v7 = a1;
  objc_msgSend(v7, "locationInView:", v6);
  v9 = v8;
  v11 = v10;

  return _ConvertDeviceReferenceSpacePointToView(a3, v9, v11);
}

uint64_t _UISystemGestureLocationInView(void *a1, void *a2)
{
  return _UISystemGestureLocationForTouchInView(a1, 0, a2);
}

uint64_t _UISystemGesturePreviousLocationForTouchInView(void *a1, void *a2, void *a3)
{
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v12;
  void *v13;

  if (!a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGPoint _UISystemGesturePreviousLocationForTouchInView(UIGestureRecognizer *const __strong, UITouch *const __strong, UIView *const __strong)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("_UISystemGestureUtilities.m"), 60, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("touch"));

  }
  objc_msgSend(a1, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a2, "previousLocationInView:", v6);
  v8 = v7;
  v10 = v9;

  return _ConvertDeviceReferenceSpacePointToView(a3, v8, v10);
}

double _UISystemGestureVelocityInView(void *a1, void *a2)
{
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;

  objc_msgSend(a1, "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "velocityInView:", v4);
  _ConvertDeviceReferenceSpaceVectorToView(a2, v5, v6);
  v8 = v7;

  return v8;
}

uint64_t _ConvertDeviceReferenceSpaceVectorToView(void *a1, double a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;

  objc_msgSend(a1, "origin");
  objc_msgSend(a1, "convertPoint:toView:", 0);
  v7 = v6;
  v9 = v8;
  objc_msgSend(a1, "_window");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "_convertPointToSceneReferenceSpace:", v7, v9);
  v12 = v11;
  v14 = v13;

  return _ConvertDeviceReferenceSpacePointToView(a1, a2 + v12, a3 + v14);
}

double _UISystemGestureTranslationInView(void *a1, void *a2)
{
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;

  objc_msgSend(a1, "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "translationInView:", v4);
  _ConvertDeviceReferenceSpaceVectorToView(a2, v5, v6);
  v8 = v7;

  return v8;
}

uint64_t _UIDocumentViewControllerWantsUIPDocumentLanding()
{
  if (qword_1ECD7B910 != -1)
    dispatch_once(&qword_1ECD7B910, &__block_literal_global_262);
  return _MergedGlobals_21_4;
}

void sub_185C9E848(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185C9F0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C9F95C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_185C9FED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185CA0110(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185CA0C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getUIDocumentBrowserViewControllerClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7B920)
    qword_1ECD7B920 = _sl_dlopen();
  if (!qword_1ECD7B920)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *DocumentManagerLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIDocumentViewController.m"), 31, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("UIDocumentBrowserViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getUIDocumentBrowserViewControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIDocumentViewController.m"), 32, CFSTR("Unable to find class %s"), "UIDocumentBrowserViewController");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7B918 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185CA1530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22,id a23)
{
  id *v23;
  id *v24;
  id *v25;
  id *v26;
  uint64_t v27;

  objc_destroyWeak(v25);
  objc_destroyWeak(v23);
  objc_destroyWeak(v26);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  objc_destroyWeak(&a23);
  objc_destroyWeak((id *)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_185CA16E0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185CA1838(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL _UIGetLogMoarUISystemGestureLogsForCarousel()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_LogMoarUISystemGestureLogsForCarousel,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_LogMoarUISystemGestureLogsForCarousel))
  {
    v1 = 0;
  }
  else
  {
    do
    {
      v1 = v0 < v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_LogMoarUISystemGestureLogsForCarousel, (uint64_t)CFSTR("LogMoarUISystemGestureLogsForCarousel"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_LogMoarUISystemGestureLogsForCarousel;
    }
    while (v0 != _UIInternalPreference_LogMoarUISystemGestureLogsForCarousel);
  }
  return byte_1EDDA80EC && v1;
}

void ___systemGestureLog_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.UIKit", "UISystemGesture");
  v1 = (void *)_MergedGlobals_1073;
  _MergedGlobals_1073 = (uint64_t)v0;

}

id _UIGestureEnvironmentSubgraphsBlockedFromResetDescription(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  double v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_opt_new();
  v5 = *(id *)(a1 + 48);
  v6 = mach_absolute_time();
  if (a2
    && (!_UIInternalPreferenceUsesDefault_1((int *)&_UIInternalPreference_GestureBlockedFromResetStateCaptureTimeout, (uint64_t)CFSTR("GestureBlockedFromResetStateCaptureTimeout"))? (v7 = *(double *)&qword_1ECD76550): (v7 = 2.0), (_UIGestureEnvironmentHasBlockedGestureRecognizerSurpassingTimeout(*(void **)(a1 + 48), v6, v7) & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("No gestures blocked from reset beyond %.1f timeout"), *(_QWORD *)&v7);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "appendString:withName:", v29, 0);
    v30 = v4;

  }
  else
  {
    v34 = v4;
    v35 = a1;
    v32 = v6;
    v8 = (void *)objc_opt_new();
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v33 = v5;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v44;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v44 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * v13);
          v47 = 0u;
          v48 = 0u;
          v49 = 0u;
          v50 = 0u;
          v15 = v8;
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
          if (v16)
          {
            v17 = v16;
            v18 = *(_QWORD *)v48;
            while (2)
            {
              v19 = 0;
              do
              {
                if (*(_QWORD *)v48 != v18)
                  objc_enumerationMutation(v15);
                if ((objc_msgSend(*(id *)(*((_QWORD *)&v47 + 1) + 8 * v19), "containsObject:", v14) & 1) != 0)
                {

                  goto LABEL_21;
                }
                ++v19;
              }
              while (v17 != v19);
              v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
              if (v17)
                continue;
              break;
            }
          }

          _UIGestureEnvironmentSubgraphForGestureRecognizer(v35, v14);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "addObject:", v20);

LABEL_21:
          ++v13;
        }
        while (v13 != v11);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
      }
      while (v11);
    }

    v21 = (void *)objc_opt_new();
    v22 = (void *)objc_opt_new();
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = ___UIGestureEnvironmentSubgraphsBlockedFromResetDescription_block_invoke;
    v36[3] = &unk_1E16C20D8;
    v37 = v8;
    v38 = v22;
    v39 = v9;
    v40 = v21;
    v4 = v34;
    v23 = v34;
    v41 = v23;
    v42 = v32;
    v24 = v21;
    v25 = v22;
    v26 = v8;
    objc_msgSend(v23, "appendBodySectionWithName:block:", CFSTR("subgraphs blocked from reset"), v36);
    v27 = v41;
    v28 = v23;

    v5 = v33;
  }

  return v4;
}

uint64_t _UIGestureEnvironmentHasBlockedGestureRecognizerSurpassingTimeout(void *a1, uint64_t a2, double a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = a1;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v9);
        if (v10)
          v10 = *(_QWORD *)(v10 + 216);
        if (_UIMediaTimeForMachTime(a2 - v10) > a3)
        {
          v11 = 1;
          goto LABEL_13;
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_13:

  return v11;
}

__CFString *_UIGestureRecognizerStateString(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E16C94F0[a1];
}

__CFString *_UIScreenEdgeSystemGestureModeDescription(unint64_t a1)
{
  if (a1 < 3)
    return off_1E16C94D8[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%li)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

id _UIGestureRecognizerAllowedTouchTypesArrayFromMask(unint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  BOOL v5;

  v1 = a1;
  if (a1 >= 0x10)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Touch type mask contains invalid value: %ld. Must be one of UITouchTypeDirect, UITouchTypeIndirect, UITouchTypeStylus, or UITouchTypeIndirectPointer"), a1 & 0xFFFFFFFFFFFFFFF0);
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (v1 >= 1)
  {
    v3 = 0;
    do
    {
      if ((v1 & 1) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v3);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v4);

      }
      ++v3;
      v5 = (unint64_t)v1 >= 2;
      v1 = (unint64_t)v1 >> 1;
    }
    while (v5);
  }
  return v2;
}

id viewFromContainer(void *a1)
{
  void *v1;

  if (a1)
  {
    v1 = a1;
    if (_IsKindOfUIView((uint64_t)a1))
      return v1;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v1, "_proxyView");
      a1 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      a1 = 0;
    }
  }
  return a1;
}

void _UIGestureRecognizerDistanceBetweenTouches(void *a1)
{
  void *v2;
  void *v3;

  if (objc_msgSend(a1, "count") == 2)
  {
    objc_msgSend(a1, "objectAtIndexedSubscript:", 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "locationInView:", 0);

    objc_msgSend(a1, "objectAtIndexedSubscript:", 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "locationInView:", 0);

  }
}

void _UIExclusionMatrixLog(uint64_t a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_t v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *loga;
  os_log_t log;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v28 = a2;
  v3 = objc_msgSend(v28, "count");
  v4 = qword_1ECD7E0E0;
  if (!qword_1ECD7E0E0)
  {
    v4 = __UILogCategoryGetNode("GestureExclusion", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v4, (unint64_t *)&qword_1ECD7E0E0);
  }
  if ((*(_BYTE *)v4 & 1) != 0)
  {
    v22 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v22, OS_LOG_TYPE_ERROR, "Gestures relevant to exclusion:", buf, 2u);
    }
  }
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("Exclusion matrix (a mark at row X, column Y indicates gesture Y will try to exclude X; a star next to column X indicates that X has recognized):\n   |"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v3;
  if ((int)v3 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = qword_1ECD7E0E8;
      if (!qword_1ECD7E0E8)
      {
        v8 = __UILogCategoryGetNode("GestureExclusion", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v8, (unint64_t *)&qword_1ECD7E0E8);
      }
      if ((*(_BYTE *)v8 & 1) != 0)
      {
        v12 = *(id *)(v8 + 8);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          loga = v12;
          objc_msgSend(v28, "objectAtIndexedSubscript:", v7);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "_excludableDescription");
          v14 = objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 134218242;
          v30 = (void *)(v7 + 1);
          v31 = 2112;
          v15 = (void *)v14;
          v32 = v14;
          _os_log_impl(&dword_185066000, loga, OS_LOG_TYPE_ERROR, "%2ld: %@", buf, 0x16u);

          v12 = loga;
        }

      }
      objc_msgSend(v28, "objectAtIndexedSubscript:", v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "_canExcludeOtherExcludables");

      ++v7;
      if (v10)
        v11 = 42;
      else
        v11 = 32;
      objc_msgSend(v5, "appendFormat:", CFSTR(" %2ld%c"), v7, v11);
    }
    while (v3 != v7);
  }
  objc_msgSend(v5, "appendFormat:", CFSTR("\n---+"));
  if ((int)v3 >= 1)
  {
    do
    {
      objc_msgSend(v5, "appendString:", CFSTR("----"));
      --v6;
    }
    while (v6);
    v16 = 0;
    log = (os_log_t)(int)v3;
    v26 = v3;
    v27 = v3 << 32;
    do
    {
      v17 = v16 + 1;
      objc_msgSend(v5, "appendFormat:", CFSTR("\n%2ld |"), v16 + 1);
      if (v27)
      {
        v18 = 0;
        v19 = log;
        do
        {
          if (((*(_QWORD *)(**(_QWORD **)(a1 + 8)
                           + (((unint64_t)(*(_QWORD *)a1 * v16 + (v18 >> 32)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(_BYTE *)a1 * v16 + BYTE4(v18))) & 1) != 0)
            v20 = 88;
          else
            v20 = 32;
          objc_msgSend(v5, "appendFormat:", CFSTR("  %c "), v20);
          v18 += 0x100000000;
          v19 = (os_log_t)((char *)v19 - 1);
        }
        while (v19);
      }
      ++v16;
    }
    while (v17 != v26);
  }
  v21 = qword_1ECD7E0F0;
  if (!qword_1ECD7E0F0)
  {
    v21 = __UILogCategoryGetNode("GestureExclusion", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v21, (unint64_t *)&qword_1ECD7E0F0);
  }
  if ((*(_BYTE *)v21 & 1) != 0)
  {
    v23 = *(NSObject **)(v21 + 8);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v30 = v5;
      _os_log_impl(&dword_185066000, v23, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
  }

}

void sub_185CA9FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_185CAA610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIContextMenuItemLayoutApply(double *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(id, BOOL, _QWORD);
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;
  double v16;
  void *v17;
  _BOOL4 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  double v22;
  _OWORD v23[3];
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v26;

  v5 = a2;
  v6 = a3;
  objc_msgSend(v5, "layer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "anchorPoint");
  v9 = v8;
  v11 = v10;
  v12 = a1[7];
  v13 = a1[8];

  if (v9 != v12 || v11 != v13)
  {
    v15 = a1[7];
    v16 = a1[8];
    objc_msgSend(v5, "layer");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setAnchorPoint:", v15, v16);

  }
  objc_msgSend(v5, "bounds");
  v18 = CGRectEqualToRect(v26, *(CGRect *)a1);
  if (!v18)
    objc_msgSend(v5, "setBounds:", *a1, a1[1], a1[2], a1[3]);
  -[UIView _center3D](v5);
  v19 = CAPoint3DEqualToPoint();
  if ((v19 & 1) == 0)
    -[UIView _setCenter3D:](v5, a1[4], a1[5], a1[6]);
  if (v5)
    objc_msgSend(v5, "transform");
  else
    memset(&t1, 0, sizeof(t1));
  v20 = *(_OWORD *)(a1 + 11);
  *(_OWORD *)&t2.a = *(_OWORD *)(a1 + 9);
  *(_OWORD *)&t2.c = v20;
  *(_OWORD *)&t2.tx = *(_OWORD *)(a1 + 13);
  if (!CGAffineTransformEqualToTransform(&t1, &t2))
  {
    v21 = *(_OWORD *)(a1 + 11);
    v23[0] = *(_OWORD *)(a1 + 9);
    v23[1] = v21;
    v23[2] = *(_OWORD *)(a1 + 13);
    objc_msgSend(v5, "setTransform:", v23);
  }
  objc_msgSend(v5, "alpha");
  if (vabdd_f64(v22, a1[15]) > 2.22044605e-16)
    objc_msgSend(v5, "setAlpha:");
  if (v6)
    v6[2](v6, !v18, v19 ^ 1u);

}

double _UIContextMenuItemFrameFromLayout(CGRect *a1)
{
  double x;
  double height;
  double v4;

  x = a1[1].origin.x;
  height = a1[1].size.height;
  v4 = x - height * CGRectGetWidth(*a1);
  CGRectGetHeight(*a1);
  return v4;
}

void _validatedItemLayout(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  double v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = (void *)objc_opt_new();
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v22 = *(double *)a2;
  v16 = a2[7];
  v17 = *((double *)a2 + 8);
  if (objc_msgSend(v9, "count", v17))
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v20 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
        goto LABEL_8;
      objc_msgSend(v9, "componentsJoinedByString:", CFSTR(", "));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v24 = v8;
      v25 = 2112;
      v26 = v21;
      v27 = 2112;
      v28 = v7;
      _os_log_fault_impl(&dword_185066000, v20, OS_LOG_TYPE_FAULT, "Encountered invalid context menu %@ layout output: [ %@ ], input: %@", buf, 0x20u);
LABEL_7:

LABEL_8:
      goto LABEL_9;
    }
    v18 = _validatedItemLayout___s_category;
    if (!_validatedItemLayout___s_category)
    {
      v18 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v18, (unint64_t *)&_validatedItemLayout___s_category);
    }
    v19 = *(NSObject **)(v18 + 8);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = v19;
      objc_msgSend(v9, "componentsJoinedByString:", CFSTR(", "));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v24 = v8;
      v25 = 2112;
      v26 = v21;
      v27 = 2112;
      v28 = v7;
      _os_log_impl(&dword_185066000, v20, OS_LOG_TYPE_ERROR, "Encountered invalid context menu %@ layout output: [ %@ ], input: %@", buf, 0x20u);
      goto LABEL_7;
    }
  }
LABEL_9:
  *(double *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v16;
  *(double *)(a1 + 64) = v17;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
  *(_QWORD *)(a1 + 120) = a2[15];

}

double _UIContextMenuInputViewOverlapBottomInsets(void *a1)
{
  id v1;
  void *v2;
  char v3;
  double v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  double v11;
  double v12;

  v1 = a1;
  objc_msgSend(v1, "_window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "_isRemoteInputHostWindow");

  v4 = 0.0;
  if ((v3 & 1) == 0)
  {
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      objc_msgSend(v5, "verticalOverlapForView:usingKeyboardInfo:", v1, 0);
      v8 = v7;
      objc_msgSend(v1, "traitCollection");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      _UIContextMenuGetPlatformMetrics(objc_msgSend(v9, "userInterfaceIdiom"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v10, "minimumContainerInsets");
      v12 = v11;

      v4 = v8 + v12;
    }

  }
  return v4;
}

double _UIContextMenuProjectFrameFromViewToView(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11;
  double v12;
  double v13;
  double v14;
  CGFloat v15;
  double v16;
  double v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  CGFloat v27;
  double MinX;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  v11 = a2;
  objc_msgSend(a1, "convertRect:toCoordinateSpace:", v11, a3, a4, a5, a6);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  objc_msgSend(v11, "bounds");
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;

  v30.origin.x = v13;
  v30.origin.y = v15;
  v30.size.width = v17;
  v30.size.height = v19;
  if (!CGRectIsNull(v30))
  {
    if (v25 < v17)
      v17 = v25;
    v31.origin.x = v21;
    v31.origin.y = v23;
    v31.size.width = v25;
    v31.size.height = v27;
    MinX = CGRectGetMinX(v31);
    v32.origin.x = v21;
    v32.origin.y = v23;
    v32.size.width = v25;
    v32.size.height = v27;
    v13 = fmax(MinX, fmin(v13, CGRectGetMaxX(v32) - v17));
    v33.origin.x = v21;
    v33.origin.y = v23;
    v33.size.width = v25;
    v33.size.height = v27;
    CGRectGetMinY(v33);
    v34.origin.x = v21;
    v34.origin.y = v23;
    v34.size.width = v25;
    v34.size.height = v27;
    CGRectGetMaxY(v34);
  }
  return v13;
}

double _UIContextMenuDefaultContentSpacing(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  double v5;
  double v6;
  uint64_t v7;
  void *v8;

  v1 = a1;
  objc_msgSend(v1, "traitCollection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  _UIContextMenuGetPlatformMetrics(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIViewController _horizontalContentMarginForView:](UIViewController, "_horizontalContentMarginForView:", v1);
  v6 = v5;
  objc_msgSend(v4, "contentSpacingForContainer");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (v7)
    v6 = (*(double (**)(uint64_t, id))(v7 + 16))(v7, v1);

  return v6;
}

double _CGRectConstrainedWithinRect(char a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double MaxY;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double MinY;
  double MaxX;
  double v39;
  double MinX;
  double v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;

  v42.origin.x = a6;
  v42.origin.y = a7;
  v42.size.width = a8;
  v42.size.height = a9;
  v53.origin.x = a2;
  v53.origin.y = a3;
  v53.size.width = a4;
  v53.size.height = a5;
  if (!CGRectContainsRect(v42, v53))
  {
    a2 = _CGRectScaledToAspectFitWithinRect(a2, a3, a4, a5, a6, a7, a8, a9);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v43.origin.x = a6;
    v43.origin.y = a7;
    v43.size.width = a8;
    v43.size.height = a9;
    v54.origin.x = a2;
    v54.origin.y = v19;
    v54.size.width = v21;
    v54.size.height = v23;
    if (!CGRectContainsRect(v43, v54))
    {
      v24 = 0.0;
      if ((a1 & 2) != 0)
      {
        v44.origin.x = a6;
        v44.origin.y = a7;
        v44.size.width = a8;
        v44.size.height = a9;
        MinX = CGRectGetMinX(v44);
        v45.origin.x = a2;
        v45.origin.y = v19;
        v45.size.width = v21;
        v45.size.height = v23;
        v24 = MinX - CGRectGetMinX(v45);
        if (v24 < 0.0)
          v24 = 0.0;
      }
      v41 = v24;
      v46.origin.x = a6;
      v46.origin.y = a7;
      v46.size.width = a8;
      v46.size.height = a9;
      MaxX = CGRectGetMaxX(v46);
      v47.origin.x = a2;
      v47.origin.y = v19;
      v47.size.width = v21;
      v47.size.height = v23;
      v25 = MaxX - CGRectGetMaxX(v47);
      v26 = 0.0;
      if ((a1 & 1) != 0)
      {
        v48.origin.x = a6;
        v39 = v25;
        v48.origin.y = a7;
        v48.size.width = a8;
        v48.size.height = a9;
        MinY = CGRectGetMinY(v48);
        v49.origin.x = a2;
        v49.origin.y = v19;
        v49.size.width = v21;
        v49.size.height = v23;
        v27 = MinY - CGRectGetMinY(v49);
        if (v27 >= 0.0)
          v26 = v27;
        else
          v26 = 0.0;
        v25 = v39;
      }
      v28 = 0.0;
      v29 = fmin(v25, 0.0);
      if ((a1 & 4) != 0)
      {
        v50.origin.x = a6;
        v50.origin.y = a7;
        v30 = v26;
        v50.size.width = a8;
        v31 = v29;
        v50.size.height = a9;
        MaxY = CGRectGetMaxY(v50);
        v51.origin.x = a2;
        v51.origin.y = v19;
        v51.size.width = v21;
        v51.size.height = v23;
        v33 = CGRectGetMaxY(v51);
        v29 = v31;
        v26 = v30;
        v28 = fmin(MaxY - v33, 0.0);
      }
      v34 = v41 + v29;
      v35 = v26 + v28;
      v52.origin.x = a2;
      v52.origin.y = v19;
      v52.size.width = v21;
      v52.size.height = v23;
      *(_QWORD *)&a2 = (unint64_t)CGRectOffset(v52, v34, v35);
    }
  }
  return a2;
}

double _UIContextMenuConvertPointBetweenViews(void *a1, void *a2, double a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  double (**v11)(_QWORD, _QWORD, _QWORD, double, double);
  double v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  int HaveAllBeenCommitted;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  void *v36;
  double v37;
  void *v38;
  void *v39;
  double v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  double v48;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;

  v7 = a1;
  v8 = a2;
  objc_msgSend(v7, "traitCollection");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  _UIContextMenuGetPlatformMetrics(objc_msgSend(v9, "userInterfaceIdiom"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "convertPointBetweenViews");
  v11 = (double (**)(_QWORD, _QWORD, _QWORD, double, double))objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v12 = ((double (**)(_QWORD, id, id, double, double))v11)[2](v11, v7, v8, a3, a4);
    goto LABEL_24;
  }
  v13 = v7;
  v14 = v8;
  v55 = v13;
  objc_msgSend(v13, "layer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "layer");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "presentationLayer");
  v17 = objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    v18 = (void *)v17;
    objc_msgSend(v16, "presentationLayer");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19 && (_UILayerAncestorsHaveAllBeenCommitted(v15) & 1) != 0)
    {
      v20 = v14;
      HaveAllBeenCommitted = _UILayerAncestorsHaveAllBeenCommitted(v16);

      if (!HaveAllBeenCommitted)
      {
        v53 = v16;
        v54 = v15;
        v14 = v20;
        goto LABEL_12;
      }
      objc_msgSend(v15, "presentationLayer");
      v22 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(v16, "presentationLayer");
      v18 = v16;
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = (void *)v22;
      v14 = v20;
    }
    else
    {
      v53 = v16;
      v54 = v15;

    }
  }
  else
  {
    v53 = v16;
    v54 = v15;
  }
LABEL_12:
  objc_msgSend(v55, "_window");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "_window");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "windowScene");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "windowScene");
  v26 = objc_claimAutoreleasedReturnValue();
  v27 = (void *)v26;
  if (v23 == v24)
  {
    v38 = v53;
    v39 = v54;
    objc_msgSend(v54, "convertPoint:toLayer:", v53, a3, a4);
    v12 = v40;
  }
  else if (v26 && v25 && v25 != (void *)v26)
  {
    objc_msgSend(v25, "screen");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "fixedCoordinateSpace");
    v29 = v25;
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "convertPoint:fromCoordinateSpace:", v55, a3, a4);
    v32 = v31;
    v34 = v33;

    objc_msgSend(v27, "screen");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "fixedCoordinateSpace");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "convertPoint:fromCoordinateSpace:", v36, v32, v34);
    v12 = v37;

    v25 = v29;
    v38 = v53;
    v39 = v54;
  }
  else
  {
    v51 = (void *)v26;
    v52 = v25;
    objc_msgSend(v23, "layer", v14);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "layer");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "presentationLayer");
    v43 = objc_claimAutoreleasedReturnValue();
    if (v43
      && (v44 = (void *)v43,
          objc_msgSend(v42, "presentationLayer"),
          v45 = (void *)objc_claimAutoreleasedReturnValue(),
          v45,
          v44,
          v45))
    {
      objc_msgSend(v41, "presentationLayer");
      v46 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(v42, "presentationLayer");
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      v41 = (void *)v46;
      v14 = v50;
    }
    else
    {
      v14 = v50;
      v47 = v42;
    }
    v39 = v54;
    objc_msgSend(v54, "convertPoint:toLayer:", v41, a3, a4);
    v38 = v53;
    objc_msgSend(v53, "convertPoint:fromLayer:", v47);
    v12 = v48;

    v27 = v51;
    v25 = v52;
  }

LABEL_24:
  return v12;
}

double _CGRectScaledToAspectFitWithinRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double x;
  double v16;
  double v17;
  double Height;
  double Width;
  CGFloat rect;
  CGAffineTransform v22;
  CGAffineTransform v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  x = a1;
  Width = CGRectGetWidth(*(CGRect *)&a1);
  rect = a4;
  v24.origin.x = x;
  v24.origin.y = a2;
  v24.size.width = a3;
  v24.size.height = a4;
  Height = CGRectGetHeight(v24);
  v25.origin.x = a5;
  v25.origin.y = a6;
  v25.size.width = a7;
  v25.size.height = a8;
  v16 = CGRectGetWidth(v25);
  v26.origin.x = a5;
  v26.origin.y = a6;
  v26.size.width = a7;
  v26.size.height = a8;
  v17 = CGRectGetHeight(v26);
  if (Width - v16 <= 2.22044605e-16)
  {
    if (Height - v17 > 2.22044605e-16)
    {
      CGAffineTransformMakeScale(&v22, v17 / Height, v17 / Height);
      v29.origin.x = x;
      v29.origin.y = a2;
      v29.size.width = a3;
      v29.size.height = rect;
      *(_QWORD *)&x = (unint64_t)CGRectApplyAffineTransform(v29, &v22);
    }
  }
  else
  {
    CGAffineTransformMakeScale(&v23, v16 / Width, v16 / Width);
    v27.origin.x = x;
    v27.origin.y = a2;
    v27.size.width = a3;
    v27.size.height = rect;
    v28 = CGRectApplyAffineTransform(v27, &v23);
    x = v28.origin.x;
    CGRectGetHeight(v28);
  }
  return x;
}

void UILabelNewAnimatingSummarySymbolView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  objc_class *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v6 = _MergedGlobals_1078;
  v20 = _MergedGlobals_1078;
  if (!_MergedGlobals_1078)
  {
    v7 = SwiftUILibrary();
    v6 = dlsym(v7, "SwiftUIGlue2Class");
    v18[3] = (uint64_t)v6;
    _MergedGlobals_1078 = v6;
  }
  _Block_object_dispose(&v17, 8);
  if (v6)
  {
    ((void (*)(void))v6)();
    v8 = (objc_class *)(id)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      v12 = (void *)objc_opt_new();
      +[UIColor redColor](UIColor, "redColor");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setBackgroundColor:", v9);
      goto LABEL_12;
    }
    v9 = objc_alloc_init(v8);
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      v12 = (void *)objc_opt_new();
      +[UIColor redColor](UIColor, "redColor");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setBackgroundColor:", v13);

      goto LABEL_12;
    }
    v17 = 0;
    v18 = &v17;
    v19 = 0x2020000000;
    v10 = off_1ECD7E118;
    v20 = off_1ECD7E118;
    if (!off_1ECD7E118)
    {
      v11 = SwiftUILibrary();
      v10 = dlsym(v11, "_IntelligenceSupportMakeSummarySymbol");
      v18[3] = (uint64_t)v10;
      off_1ECD7E118 = v10;
    }
    _Block_object_dispose(&v17, 8);
    if (v10)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_12:

      v14 = v12;
      return;
    }
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id _IntelligenceSupportMakeSummarySymbol(BOOL, CTFontRef, CGColorRef)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("_UILabelAnimatingSummarySymbolBridge.m"), 14, CFSTR("%s"), dlerror());
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class _SwiftUIGlue2Class(void)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("_UILabelAnimatingSummarySymbolBridge.m"), 13, CFSTR("%s"), dlerror());
  }

  __break(1u);
}

void sub_185CB2144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *SwiftUILibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!SwiftUILibraryCore_frameworkLibrary)
    SwiftUILibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)SwiftUILibraryCore_frameworkLibrary;
  if (!SwiftUILibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SwiftUILibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("_UILabelAnimatingSummarySymbolBridge.m"), 12, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_185CB4634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIUndoPinchGestureRecognizerCommonInit(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  double v3;
  double v4;
  id *v5;
  _UIGestureRecognizerTransformAnalyzer *v6;
  id v7;
  id v8;

  v1 = MEMORY[0x1E0C9BAA8];
  v2 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a1 + 280) = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 296) = v2;
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  v3 = *MEMORY[0x1E0C9D538];
  v4 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v5 = (id *)(id)a1;
  objc_msgSend(v5, "setBeginCentroid:", v3, v4);
  v5[43] = (id)3;
  *((_BYTE *)v5 + 352) = 0;
  v6 = objc_alloc_init(_UIGestureRecognizerTransformAnalyzer);
  v7 = v5[41];
  v5[41] = v6;

  objc_msgSend(v5, "_updateTransformAnalyzerWeights");
  objc_msgSend(v5[41], "setRotationWeight:", 0.330000013);
  objc_msgSend(v5[41], "setTranslationWeight:", 0.330000013);
  v8 = v5[41];

  return objc_msgSend(v8, "setPinchingWeight:", 0.330000013);
}

void sub_185CB732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _HDRInitialEDRStrength(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  double v4;
  double v5;

  v1 = a1;
  objc_msgSend(v1, "animationForKey:", CFSTR("contentsEDRStrength"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(v1, "presentationLayer");
    v3 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v3;
  }
  objc_msgSend(v1, "contentsEDRStrength");
  v5 = v4;

  return v5;
}

double _HDRAnimationDuration(double a1, double a2)
{
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  char v9;
  void *v10;
  void *v11;
  double v12;

  +[_UIHDRSettingsDomain rootSettings](_UIHDRSettingsDomain, "rootSettings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a2 <= a1)
  {
    v9 = objc_msgSend(v4, "asymmetricAnimationDurations");
    +[_UIHDRSettingsDomain rootSettings](_UIHDRSettingsDomain, "rootSettings");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if ((v9 & 1) != 0)
      objc_msgSend(v10, "animationDurationDown");
    else
      objc_msgSend(v10, "animationDurationUp");
    v7 = v12;

    v8 = a1 - a2;
  }
  else
  {
    objc_msgSend(v4, "animationDurationUp");
    v7 = v6;

    v8 = a2 - a1;
  }
  return v8 * v7;
}

id _HDRSpringAnimation(double a1, double a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CD2848]), "initWithPerceptualDuration:bounce:", a1, 0.0);
  objc_msgSend(v3, "setKeyPath:", CFSTR("contentsEDRStrength"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setFromValue:", v4);

  return v3;
}

uint64_t _shouldSuppressHDR(int a1)
{
  char v1;

  if (a1)
  {
    if ((dyld_program_sdk_at_least() & 1) != 0)
    {
      v1 = 1;
    }
    else
    {
      if (qword_1ECD7E138 != -1)
        dispatch_once(&qword_1ECD7E138, &__block_literal_global_86_1);
      v1 = _MergedGlobals_1079 ^ 1;
    }
  }
  else
  {
    v1 = 0;
  }
  return v1 & 1;
}

void ___shouldSuppressHDR_block_invoke()
{
  void *v0;
  id v1;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "bundleIdentifier");
  v1 = (id)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(CFSTR("com.move.Realtor"), "isEqualToString:", v1))
    _MergedGlobals_1079 = 1;

}

uint64_t ___commonInit_block_invoke_130(uint64_t a1)
{
  _UISEBackProjectEdgesFailGestureFeature *v2;
  uint64_t v3;
  void *v4;

  v2 = -[_UISEBackProjectEdgesFailGestureFeature initWithSettings:]([_UISEBackProjectEdgesFailGestureFeature alloc], "initWithSettings:", *(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  return objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

uint64_t ___commonInit_block_invoke_2_132(uint64_t a1)
{
  _UISEPerTypeEdgesFailGestureFeature *v2;
  _UISEFirmwareEdgesFailGestureFeature *v3;
  _UISEBackProjectEdgesFailGestureFeature *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v2 = [_UISEPerTypeEdgesFailGestureFeature alloc];
  v10[0] = &unk_1E1A97E00;
  v3 = -[_UISEFirmwareEdgesFailGestureFeature initWithSettings:]([_UISEFirmwareEdgesFailGestureFeature alloc], "initWithSettings:", *(_QWORD *)(a1 + 32));
  v10[1] = &unk_1E1A97E18;
  v11[0] = v3;
  v4 = -[_UISEBackProjectEdgesFailGestureFeature initWithSettings:]([_UISEBackProjectEdgesFailGestureFeature alloc], "initWithSettings:", *(_QWORD *)(a1 + 32));
  v11[1] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[_UISEPerTypeEdgesFailGestureFeature initWithEdgeTypeSubfeatures:](v2, "initWithEdgeTypeSubfeatures:", v5);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  return objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

uint64_t ___commonInit_block_invoke_138(uint64_t a1)
{
  _UISEHybridEdgesFailGestureFeature *v2;
  _UISEBackProjectEdgesFailGestureFeature *v3;
  _UISEFirmwareEdgesFailGestureFeature *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v2 = [_UISEHybridEdgesFailGestureFeature alloc];
  v3 = -[_UISEBackProjectEdgesFailGestureFeature initWithSettings:]([_UISEBackProjectEdgesFailGestureFeature alloc], "initWithSettings:", *(_QWORD *)(a1 + 32));
  v10[0] = v3;
  v4 = -[_UISEFirmwareEdgesFailGestureFeature initWithSettings:]([_UISEFirmwareEdgesFailGestureFeature alloc], "initWithSettings:", *(_QWORD *)(a1 + 32));
  v10[1] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[_UISEHybridEdgesFailGestureFeature initWithSubfeatures:](v2, "initWithSubfeatures:", v5);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  return objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void ___commonInit_block_invoke_2_141(_QWORD *a1)
{
  void *v1;
  _UISEOrthogonalHysteresisGestureFeature *v2;

  v1 = (void *)a1[4];
  v2 = -[_UISEOrthogonalHysteresisGestureFeature initWithSettings:touchedEdgesProvider:]([_UISEOrthogonalHysteresisGestureFeature alloc], "initWithSettings:touchedEdgesProvider:", a1[5], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  objc_msgSend(v1, "addObject:", v2);

}

void ___commonInit_block_invoke_3_143(uint64_t a1)
{
  void *v1;
  _UISEDiagonalHysteresisRecognizeGestureFeature *v2;

  v1 = *(void **)(a1 + 32);
  v2 = -[_UISEDiagonalHysteresisRecognizeGestureFeature initWithSettings:]([_UISEDiagonalHysteresisRecognizeGestureFeature alloc], "initWithSettings:", *(_QWORD *)(a1 + 40));
  objc_msgSend(v1, "addObject:", v2);

}

uint64_t ___commonInit_block_invoke_4_145(uint64_t a1, uint64_t a2)
{
  _UISEVelocityDirectionEdgesGestureFeature *v3;
  uint64_t v4;
  void *v5;

  v3 = -[_UISEVelocityDirectionEdgesGestureFeature initWithSettings:touchedEdgesProvider:exactMatchEdges:]([_UISEVelocityDirectionEdgesGestureFeature alloc], "initWithSettings:touchedEdgesProvider:exactMatchEdges:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void ___commonInit_block_invoke_5_147(uint64_t a1)
{
  void *v1;
  _UISEEdgeTypeRecognizeGestureFeature *v2;

  v1 = *(void **)(a1 + 32);
  v2 = objc_alloc_init(_UISEEdgeTypeRecognizeGestureFeature);
  objc_msgSend(v1, "addObject:", v2);

}

void ___commonInit_block_invoke_6(uint64_t a1)
{
  void *v1;
  _UISEEdgeTypeForceRecognizeGestureFeature *v2;

  v1 = *(void **)(a1 + 32);
  v2 = objc_alloc_init(_UISEEdgeTypeForceRecognizeGestureFeature);
  objc_msgSend(v1, "addObject:", v2);

}

id _colorByReducingAlphaInLightAddingWhiteWithAlphaInDark(void *a1, void *a2, double a3, double a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  if (objc_msgSend(v8, "userInterfaceStyle") == 2)
  {
    v9 = v7;
    objc_msgSend(v9, "resolvedColorWithTraitCollection:", v8);

    +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, a4);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_colorBlendedWithColor:compositingFilter:", v8, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    _colorByReducingAlpha(v7, (uint64_t)v8, a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

uint64_t _UIScreenEdgePanRecognizerShouldLog()
{
  uint64_t result;
  uint64_t v1;
  void *v2;

  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    if (_UIScreenEdgePanRecognizerShouldLog_onceToken != -1)
      dispatch_once(&_UIScreenEdgePanRecognizerShouldLog_onceToken, &__block_literal_global_269);
    v1 = _UIScreenEdgePanRecognizerCachedShouldLog;
    if (_UIScreenEdgePanRecognizerCachedShouldLog == -1)
    {
      _UIKitUserDefaults();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "synchronize");
      _UIScreenEdgePanRecognizerCachedShouldLog = objc_msgSend(v2, "BOOLForKey:", CFSTR("UIScreenEdgePanRecognizerShouldLog"));

      v1 = _UIScreenEdgePanRecognizerCachedShouldLog;
    }
    return v1 == 1;
  }
  return result;
}

unint64_t _interfaceOrientedRegionGivenScreenRegion(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 90;
  v3 = -90;
  v4 = 180;
  if (a2 != 2)
    v4 = 0;
  if (a2 != 4)
    v3 = v4;
  if (a2 != 3)
    v2 = v3;
  if (a2 == 1)
    v5 = 0;
  else
    v5 = v2;
  return _rotatedEdgesGivenOrientationInDegrees(a1, v5);
}

uint64_t _regionForLocation(double a1, double a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7)
{
  double v10;
  double v11;
  CGFloat v12;
  double v13;
  double v14;
  double y;
  uint64_t v16;
  double rect;
  double v20;
  CGPoint v22;
  CGPoint v23;
  CGPoint v24;
  CGPoint v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  if (a5 >= 0.0)
    v10 = a5;
  else
    v10 = 0.0;
  v11 = a3 + -1.0;
  if (v10 >= v11)
    v12 = v11;
  else
    v12 = v10;
  if (a6 >= 0.0)
    v13 = a6;
  else
    v13 = 0.0;
  if (v13 >= a4 + -1.0)
    v14 = a4 + -1.0;
  else
    v14 = v13;
  v20 = a4 - a7;
  v26.size.height = a4 - (a4 - a7 + 0.0);
  rect = a4 - (a4 - a7 + 0.0);
  v26.origin.x = a1 + 0.0;
  v26.origin.y = a2 + 0.0;
  y = v26.origin.y;
  v26.size.width = a3;
  v22.x = v12;
  v22.y = v14;
  v16 = CGRectContainsPoint(v26, v22);
  v27.origin.x = a1 + a3 - a7;
  v27.origin.y = y;
  v27.size.width = a3 - (a3 - a7 + 0.0);
  v27.size.height = a4;
  v23.x = v12;
  v23.y = v14;
  if (CGRectContainsPoint(v27, v23))
    v16 |= 8uLL;
  v28.origin.y = a2 + v20;
  v28.origin.x = a1 + 0.0;
  v28.size.width = a3;
  v28.size.height = rect;
  v24.x = v12;
  v24.y = v14;
  if (CGRectContainsPoint(v28, v24))
    v16 |= 4uLL;
  v29.origin.x = a1 + 0.0;
  v29.origin.y = y;
  v29.size.width = a3 - (a3 - a7 + 0.0);
  v29.size.height = a4;
  v25.x = v12;
  v25.y = v14;
  if (CGRectContainsPoint(v29, v25))
    return v16 | 2;
  else
    return v16;
}

unint64_t _screenRegionGivenInterfaceOrientedRegion(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = -90;
  v3 = 90;
  v4 = -180;
  if (a2 != 2)
    v4 = 0;
  if (a2 != 4)
    v3 = v4;
  if (a2 != 3)
    v2 = v3;
  if (a2 == 1)
    v5 = 0;
  else
    v5 = v2;
  return _rotatedEdgesGivenOrientationInDegrees(a1, v5);
}

const __CFString *_formatRegion(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB)
    return CFSTR("unknown");
  else
    return off_1E16C96D0[a1 - 1];
}

void _UIScreenEdgePanRecognizerShouldLogClear()
{
  _UIScreenEdgePanRecognizerCachedShouldLog = -1;
}

double _TimestampForTouches(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t i;
  void *v7;
  double v8;
  double v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v12;
    v5 = 0.0;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        objc_msgSend(v7, "timestamp", (_QWORD)v11);
        if (v8 > v5)
        {
          objc_msgSend(v7, "timestamp");
          v5 = v9;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v3);
  }
  else
  {
    v5 = 0.0;
  }

  return v5;
}

BOOL _buttonBackgroundColorIndicatesLiftEffect(void *a1)
{
  void *v1;
  void *v2;
  double v3;
  _BOOL8 v4;

  objc_msgSend(a1, "backgroundColor");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "alphaComponent");
    v4 = v3 >= 0.01;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void __roundCursorForBounds(void *a1, double *a2, double a3, double a4)
{
  id v7;
  _BOOL4 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v7 = a1;
  v8 = objc_msgSend(v7, "effectiveUserInterfaceLayoutDirection") == 1;
  objc_msgSend(v7, "bounds");
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;

  __outsetRectWithMinimumSize(v8, 1, v10, v12, v14, v16, a3, a3, a3, a3, a4);
  if (a2)
    *a2 = v17 * 0.5;
}

double __boundingPointerShapeInContainer(void *a1, _QWORD *a2)
{
  id v3;
  double v4;
  double v5;
  void *v6;
  uint64_t v7;

  v3 = a1;
  objc_msgSend(v3, "bounds");
  v5 = v4;
  if (a2)
  {
    objc_msgSend(v3, "layer");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "cornerRadius");
    *a2 = v7;

  }
  return v5;
}

double __outsetRectWithMinimumSize(int a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  if (a2)
  {
    if (a5 >= a6)
      v15 = a5;
    else
      v15 = a6;
    v16 = (v15 - a5) * 0.5;
    a7 = v16 + a7;
    a8 = v16 + a8;
  }
  v17 = a5 + a8 + a7;
  if (v17 >= a11)
    v18 = -0.0;
  else
    v18 = (a11 - v17) * 0.5;
  v19 = a8 + v18;
  v20 = a7 + v18;
  if (a1)
    v21 = v19;
  else
    v21 = v20;
  return a3 - v21;
}

unint64_t _UIContextualMenuGestureRecognizerIsEventValidForContextualClick(unint64_t result)
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    if ((objc_msgSend((id)result, "_modifierFlags") & 0x40000) != 0)
      return 1;
    else
      return ((unint64_t)objc_msgSend(v1, "_buttonMask") >> 1) & 1;
  }
  return result;
}

unint64_t _UIPreviousForceLevel(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
    return 0xFFFFFFFF80000000;
  else
    return a1 - 1;
}

void sub_185CC2BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

unint64_t _UINextForceLevel(unint64_t a1)
{
  if (a1 < 3)
    return a1 + 1;
  else
    return 0xFFFFFFFF80000000;
}

void __progressObservableCacheKey_block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = _UIForceLevelDoesNotExist_block_invoke___s_category;
  if (!_UIForceLevelDoesNotExist_block_invoke___s_category)
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIForceLevelDoesNotExist_block_invoke___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 134218754;
    v6 = v4;
    v7 = 2048;
    v8 = 2;
    v9 = 2080;
    v10 = "/Library/Caches/com.apple.xbs/Sources/UIKitCore/_UIForceLevelClassifier.m";
    v11 = 2080;
    v12 = "NSNumber *progressObservableCacheKey(UIPreviewForceState, UIPreviewForceState)_block_invoke";
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "WARNING: Min force state %ld is greater than %ld, %s:%s needs to be updated", (uint8_t *)&v5, 0x2Au);
  }
}

void sub_185CC3A00(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185CC3B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CC3EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_185CC4574(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185CC4678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

char *copyBytesWithNullAtEnd(char *a1, char *__src, size_t __n)
{
  char *result;

  if (!__src)
    return 0;
  if (__n >= 0x190)
    a1 = (char *)malloc_type_malloc(__n + 1, 0x95EA8578uLL);
  result = strncpy(a1, __src, __n);
  result[__n] = 0;
  return result;
}

void *_UIInternalContainerClassesForContainerClasses(void *a1, void **a2, int a3)
{
  void *v5;
  objc_class *v6;
  NSString *v7;
  void **v8;

  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  do
  {
    v6 = (objc_class *)_UIAppearanceInternalContainerClassForContainer(a1);
    if (v6)
    {
      v7 = (NSString *)v6;
      if (a3)
        v7 = NSStringFromClass(v6);
      objc_msgSend(v5, "addObject:", v7);
    }
    v8 = a2++;
    a1 = *v8;
  }
  while (*v8);
  return v5;
}

void *_UIAppearanceUntagObjectForSelector(void *result, const char *a2, void *a3)
{
  id AssociatedObject;

  if ((__isObjectTaggingEnabled & 1) == 0)
  {
    AssociatedObject = objc_getAssociatedObject(result, &_UIAppearanceCustomizedSelectorsAssociationKey);
    return (void *)objc_msgSend(AssociatedObject, "removeObject:", TagForSelectorWithAxes(a2, a3));
  }
  return result;
}

uint64_t TaggingAppearanceObjectSetter1IMP(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  IMP v8;
  id AssociatedObject;

  _UIAppearanceTagObjectForSelector(a1, a2, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a4)));
  PushNextClassForSettingIMP(a1, a2);
  v8 = CurrentOrginalSettingIMP(a1, a2);
  ((void (*)(void *, const char *, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
  AssociatedObject = objc_getAssociatedObject(a1, &unk_1ECD7E182);
  return objc_msgSend((id)objc_msgSend(AssociatedObject, "objectForKey:", NSStringFromSelector(a2)), "removeLastObject");
}

uint64_t TaggingAppearanceIntSetterIMP(void *a1, const char *a2, uint64_t a3)
{
  IMP v6;
  id AssociatedObject;

  _UIAppearanceTagObjectForSelector(a1, a2, 0);
  PushNextClassForSettingIMP(a1, a2);
  v6 = CurrentOrginalSettingIMP(a1, a2);
  ((void (*)(void *, const char *, uint64_t))v6)(a1, a2, a3);
  AssociatedObject = objc_getAssociatedObject(a1, &unk_1ECD7E182);
  return objc_msgSend((id)objc_msgSend(AssociatedObject, "objectForKey:", NSStringFromSelector(a2)), "removeLastObject");
}

void sub_185CC5E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _recursiveExamineAppearancesForTraitCollections(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(a1);
        v9 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (-[UITraitCollection _containsTraitsInCollectionConsideringTraitsThatCanRepresentUnspecifiedOnly:](a2, v9))
          {
            v6 = 1;
            return v6 & 1;
          }
        }
        else
        {
          v10 = objc_msgSend(a1, "objectForKey:", v9);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v6 = _recursiveExamineAppearancesForTraitCollections(v10, a2);
        }
      }
      v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

BOOL _enumerateAppearancesHelper(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = (void *)objc_msgSend((id)objc_msgSend(a1, "keyEnumerator"), "allObjects", 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v22, 16);
  if (!v5)
    return 1;
  v6 = *(_QWORD *)v13;
  while (2)
  {
    for (i = 0; i != v5; ++i)
    {
      if (*(_QWORD *)v13 != v6)
        objc_enumerationMutation(v4);
      v8 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i);
      v9 = objc_msgSend(a1, "objectForKey:", v8);
      objc_opt_self();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        (*(void (**)(uint64_t, uint64_t, void *, uint64_t, char *))(a2 + 16))(a2, v9, a1, v8, &v16);
      }
      else
      {
        objc_opt_self();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v16 = _enumerateAppearancesHelper(v9, a2) ^ 1;
          v18 = 0;
          v19 = &v18;
          v20 = 0x2020000000;
          v21 = 0;
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 3221225472;
          v17[2] = __containsAppearances_block_invoke;
          v17[3] = &unk_1E16C9968;
          v17[4] = &v18;
          _enumerateAppearancesHelper(v9, v17);
          v10 = *((unsigned __int8 *)v19 + 24);
          _Block_object_dispose(&v18, 8);
          if (!v10)
            objc_msgSend(a1, "removeObjectForKey:", v8);
        }
      }
      if (v16)
        return 0;
    }
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v22, 16);
    if (v5)
      continue;
    break;
  }
  return v16 == 0;
}

void sub_185CC95E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __containsAppearances_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  *a5 = 1;
  return result;
}

void __encodePathElementIntoData(void *a1, int *a2)
{
  id v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t i;
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  int v13;

  v3 = a1;
  v13 = *a2;
  objc_msgSend(v3, "appendBytes:length:", &v13, 4);
  v4 = *a2;
  if (v4 > 3)
    v5 = 0;
  else
    v5 = dword_18667D140[v4];
  v12 = v5;
  objc_msgSend(v3, "appendBytes:length:", &v12, 4);
  if (v12)
  {
    v6 = 0;
    for (i = 0; i < v12; ++i)
    {
      v8 = *(double *)(*((_QWORD *)a2 + 1) + v6);
      v11 = v8;
      objc_msgSend(v3, "appendBytes:length:", &v11, 4);
      v9 = *(double *)(*((_QWORD *)a2 + 1) + v6 + 8);
      v10 = v9;
      objc_msgSend(v3, "appendBytes:length:", &v10, 4);
      v6 += 16;
    }
  }

}

_QWORD *CountPathElements(_QWORD *result)
{
  ++*result;
  return result;
}

__n128 RecordPathElements(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  __n128 *v10;

  v3 = *a1;
  v2 = a1[1];
  ++*a1;
  v4 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 56 * v3) = *(_DWORD *)a2;
  if (v4 < 2)
  {
    v7 = v2 + 56 * v3;
    v8 = *(__n128 **)(a2 + 8);
    result = *v8;
    *(__n128 *)(v7 + 8) = *v8;
  }
  else if (v4 == 2)
  {
    v9 = v2 + 56 * v3;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(*(_QWORD *)(a2 + 8) + 16);
    v10 = *(__n128 **)(a2 + 8);
    result = *v10;
    *(__n128 *)(v9 + 24) = *v10;
  }
  else if (v4 == 3)
  {
    v5 = v2 + 56 * v3;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(*(_QWORD *)(a2 + 8) + 32);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)*(_QWORD *)(a2 + 8);
    result = *(__n128 *)(*(_QWORD *)(a2 + 8) + 16);
    *(__n128 *)(v5 + 40) = result;
  }
  return result;
}

void raiseWithColorSpaceError(void *a1, const char *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  id v6;

  v3 = (void *)MEMORY[0x1E0C99DA0];
  v4 = *MEMORY[0x1E0C99778];
  v5 = a1;
  NSStringFromSelector(a2);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "raise:format:", v4, CFSTR("*** -%@ not defined for the UIColor %@; need to first convert colorspace."),
    v6,
    v5);

}

double UIColorBlendPlusDarker(double a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;

  v5 = fabs(a5);
  v6 = 0.0;
  if (fabs(a4) >= 2.22044605e-16 && v5 >= 2.22044605e-16)
    return fmin(fmax(a5 - fmin(fmax(a3 - a1 * a3 + a4 - a2, 0.0), 1.0) / a4, 0.0), 1.0);
  return v6;
}

id _UIPinStripeImageColorRef()
{
  return +[UIColor pinStripeColor](UIColor, "pinStripeColor");
}

char *__colorValuesFromString(void *a1)
{
  void *v1;
  char *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  float v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(","));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v1, "count") < 3)
  {
    v2 = 0;
  }
  else
  {
    v2 = (char *)malloc_type_calloc(8uLL, 3uLL, 0x56B62C44uLL);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      v7 = *(_QWORD *)v14;
LABEL_4:
      v8 = 0;
      v9 = v6;
      v10 = &v2[8 * v6];
      while (1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v3);
        if (v9 + v8 == 3)
          break;
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v8), "floatValue", (_QWORD)v13);
        *(double *)&v10[8 * v8++] = v11 / 255.0;
        if (v5 == v8)
        {
          v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
          v6 = v9 + v8;
          if (v5)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  return v2;
}

id _colorsByThemeKeytablePlainHeaderFooterBackgroundColor()
{
  UICachedDeviceRGBColor *v0;
  void *v1;
  UICachedDeviceRGBColor *v2;
  void *v3;
  UICachedDeviceRGBColor *v4;
  void *v5;
  UICachedDeviceRGBColor *v6;
  void *v7;
  UICachedDeviceWhiteColor *v8;
  void *v9;
  void *v11;
  _QWORD v12[5];
  _QWORD v13[6];

  v13[5] = *MEMORY[0x1E0C80C00];
  _UIThemeKeyFromTraitValues(-1, 0, 0, 0, 0, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = v11;
  v0 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.898039216, 0.898039216, 0.898039216, 1.0);
  v13[0] = v0;
  _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 0, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v12[1] = v1;
  v2 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.196078431, 0.196078431, 0.203921569, 1.0);
  v13[1] = v2;
  _UIThemeKeyFromTraitValues(3, 0, 0, 0, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12[2] = v3;
  v4 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.949019608, 0.949019608, 0.949019608, 1.0);
  v13[2] = v4;
  _UIThemeKeyFromTraitValues(3, 2, 0, 0, 0, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v12[3] = v5;
  v6 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.101960784, 0.101960784, 0.101960784, 1.0);
  v13[3] = v6;
  _UIThemeKeyFromTraitValues(3, 2, 0, 0, 0, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12[4] = v7;
  v8 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 0.0, 1.0);
  v13[4] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

double _UIPortraitSafeAreaInsetsForSceneHosting(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = a1;
  objc_msgSend(v1, "window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_windowHostingScene");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v3, "_shouldRotateSafeAreaInsetsToInterfaceOrientation"))
  {
    objc_msgSend(v1, "window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "interfaceOrientation");

    objc_msgSend(v1, "safeAreaInsets");
    v10 = v9;
    if (v5 == 2)
    {
      v10 = v8;
    }
    else if (v5 == 3)
    {
      v10 = v7;
    }
    else if (v5 != 4)
    {
      v10 = v6;
    }
  }
  else
  {
    objc_msgSend(v1, "safeAreaInsets");
    v10 = v11;
  }

  return v10;
}

double _UIPortraitFrameForSceneHosting(void *a1)
{
  id v1;
  double v2;
  double v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  double v16;

  v1 = a1;
  objc_msgSend(v1, "bounds");
  v3 = v2;
  objc_msgSend(v1, "_window");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_windowHostingScene");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_screen");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v1, "bounds");
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v14 = v13;
    objc_msgSend(v6, "fixedCoordinateSpace");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "convertRect:toCoordinateSpace:", v15, v8, v10, v12, v14);
    v3 = v16;

  }
  if (v4)
    objc_msgSend(v4, "interfaceOrientation");

  return v3;
}

id UICGAffineTransformDescription(_OWORD *a1)
{
  void *v2;
  __int128 v3;
  const __CFString *v4;
  __int128 v5;
  CGFloat a;
  CGFloat b;
  _BOOL4 v8;
  void *v9;
  CGFloat tx;
  CGFloat d;
  CGFloat ty;
  void *v13;
  CGFloat c;
  void *v15;
  CGFloat v17;
  CGAffineTransform transform;
  CGAffineTransform vector;

  v2 = (void *)objc_msgSend(CFSTR("<CGAffineTransform: "), "mutableCopy");
  v3 = a1[1];
  *(_OWORD *)&vector.a = *a1;
  *(_OWORD *)&vector.c = v3;
  *(_OWORD *)&vector.tx = a1[2];
  if (CGAffineTransformIsIdentity(&vector))
  {
    v4 = CFSTR("identity");
LABEL_23:
    objc_msgSend(v2, "appendFormat:", v4, *(_QWORD *)&v17);
    goto LABEL_24;
  }
  v5 = a1[1];
  *(_OWORD *)&transform.a = *a1;
  *(_OWORD *)&transform.c = v5;
  *(_OWORD *)&transform.tx = a1[2];
  memset(&vector, 0, sizeof(vector));
  CGAffineTransformDecompose((CGAffineTransformComponents *)&vector, &transform);
  a = vector.a;
  b = vector.b;
  v8 = vector.b != 1.0 || vector.a != 1.0;
  if (v8)
  {
    NSStringFromCGSize(*(CGSize *)&a);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendFormat:", CFSTR("scale = %@"), v9);

  }
  tx = vector.tx;
  if (fabs(vector.tx) >= 2.22044605e-16 || fabs(vector.ty) >= 2.22044605e-16)
  {
    if (v8)
    {
      objc_msgSend(v2, "appendString:", CFSTR(", "));
      tx = vector.tx;
    }
    ty = vector.ty;
    NSStringFromCGVector(*(CGVector *)&tx);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendFormat:", CFSTR("translation = %@"), v13);

    if (fabs(vector.d) < 2.22044605e-16)
      goto LABEL_18;
  }
  else
  {
    d = vector.d;
    if (fabs(vector.d) < 2.22044605e-16)
      goto LABEL_19;
    if (!v8)
      goto LABEL_17;
  }
  objc_msgSend(v2, "appendString:", CFSTR(", "));
  d = vector.d;
LABEL_17:
  objc_msgSend(v2, "appendFormat:", CFSTR("rotation = %f"), *(_QWORD *)&d);
LABEL_18:
  v8 = 1;
LABEL_19:
  c = vector.c;
  if (fabs(vector.c) >= 2.22044605e-16)
  {
    if (v8)
    {
      objc_msgSend(v2, "appendString:", CFSTR(", "));
      c = vector.c;
    }
    v17 = c;
    v4 = CFSTR("horizontalShear = %f");
    goto LABEL_23;
  }
LABEL_24:
  objc_msgSend(v2, "appendString:", CFSTR(">"));
  v15 = (void *)objc_msgSend(v2, "copy");

  return v15;
}

NSString *__cdecl NSStringFromCGVector(CGVector vector)
{
  return (NSString *)(id)CFStringCreateWithFormat(0, 0, CFSTR("{%.*g, %.*g}"), 17, *(_QWORD *)&vector.dx, 17, *(_QWORD *)&vector.dy);
}

double UIDistanceBetweenRects(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double result;
  BOOL v17;
  double MaxY;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double MaxX;
  double MinY;
  double MinX;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  if (CGRectIsNull(*(CGRect *)&a1))
    return 1.79769313e308;
  v29.origin.x = a5;
  v29.origin.y = a6;
  v29.size.width = a7;
  v29.size.height = a8;
  if (CGRectIsNull(v29))
    return 1.79769313e308;
  v30.origin.x = a1;
  v30.origin.y = a2;
  v30.size.width = a3;
  v30.size.height = a4;
  v39.origin.x = a5;
  v39.origin.y = a6;
  v39.size.width = a7;
  v39.size.height = a8;
  v17 = CGRectIntersectsRect(v30, v39);
  result = 0.0;
  if (!v17)
  {
    v31.origin.x = a1;
    v31.origin.y = a2;
    v31.size.width = a3;
    v31.size.height = a4;
    MinX = CGRectGetMinX(v31);
    v32.origin.x = a1;
    v32.origin.y = a2;
    v32.size.width = a3;
    v32.size.height = a4;
    MinY = CGRectGetMinY(v32);
    v33.origin.x = a1;
    v33.origin.y = a2;
    v33.size.width = a3;
    v33.size.height = a4;
    MaxX = CGRectGetMaxX(v33);
    v34.origin.x = a1;
    v34.origin.y = a2;
    v34.size.width = a3;
    v34.size.height = a4;
    MaxY = CGRectGetMaxY(v34);
    v35.origin.x = a5;
    v35.origin.y = a6;
    v35.size.width = a7;
    v35.size.height = a8;
    v19 = CGRectGetMinX(v35);
    v36.origin.x = a5;
    v36.origin.y = a6;
    v36.size.width = a7;
    v36.size.height = a8;
    v20 = CGRectGetMinY(v36);
    v37.origin.x = a5;
    v37.origin.y = a6;
    v37.size.width = a7;
    v37.size.height = a8;
    v21 = CGRectGetMaxX(v37);
    v38.origin.x = a5;
    v38.origin.y = a6;
    v38.size.width = a7;
    v38.size.height = a8;
    v22 = CGRectGetMaxY(v38);
    if (v21 <= MinX && v22 <= MinY)
    {
      v23 = MinX - v21;
LABEL_9:
      v24 = MinY - v22;
      v25 = v23;
      return hypot(v25, v24);
    }
    if (v21 > MinX || MaxY > v20)
    {
      if (MaxX <= v19 && v22 <= MinY)
      {
        v23 = v19 - MaxX;
        goto LABEL_9;
      }
      if (MaxX > v19 || MaxY > v20)
      {
        if (v21 <= MinX)
          return MinX - v21;
        if (MaxX <= v19)
          return v19 - MaxX;
        if (v22 <= MinY)
          return MinY - v22;
        if (MaxY <= v20)
          return v20 - MaxY;
        return 1.79769313e308;
      }
      v25 = v19 - MaxX;
    }
    else
    {
      v25 = MinX - v21;
    }
    v24 = v20 - MaxY;
    return hypot(v25, v24);
  }
  return result;
}

double UIMidPointBetweenPoints(double a1, double a2, double a3)
{
  return (a1 + a3) * 0.5;
}

double UILowPassFilteredCGPoint(double a1, double a2, double a3, double a4)
{
  return a2 * a1 + (1.0 - a1) * a4;
}

double UILowPassFilteredCGFloat(double a1, double a2, double a3)
{
  return a1 * a2 + (1.0 - a1) * a3;
}

double UIDistanceBetweenPointAndLine(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double result;

  v6 = vabdd_f64(a4 * a5 + a1 * (a6 - a4) - a2 * (a5 - a3), a3 * a6);
  v7 = sqrt((a6 - a4) * (a6 - a4) + (a5 - a3) * (a5 - a3));
  result = v6 / v7;
  if (fabs(v7) < 2.22044605e-16)
    return 1.79769313e308;
  return result;
}

long double UIPointAlongLine(double a1, double a2, double a3, double a4, double a5)
{
  return a1 + (a3 - a1) / hypot(a3 - a1, a4 - a2) * a5;
}

double UINormalizePoint(double a1, double a2)
{
  double v2;

  v2 = *MEMORY[0x1E0C9D538];
  if (a1 != *MEMORY[0x1E0C9D538] || a2 != *(double *)(MEMORY[0x1E0C9D538] + 8))
    return a1 * (1.0 / sqrt(a1 * a1 + a2 * a2));
  return v2;
}

double UIPointLength(double a1, double a2)
{
  return sqrt(a1 * a1 + a2 * a2);
}

double UIDistanceBetweenPointAndPolygon(void *a1, double a2, double a3)
{
  id v5;
  double v6;
  const CGPath *v7;
  _QWORD block[9];
  _QWORD v10[6];
  _QWORD v11[6];
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a1;
  v12 = 0;
  v13 = (double *)&v12;
  v14 = 0x2020000000;
  v15 = 0x7FEFFFFFFFFFFFFFLL;
  if (objc_msgSend(v5, "containsPoint:", a2, a3))
  {
    v13[3] = 0.0;
    v6 = 0.0;
  }
  else
  {
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x3010000000;
    v11[4] = 0;
    v11[5] = 0;
    v11[3] = &unk_18685B0AF;
    v10[0] = 0;
    v10[1] = v10;
    v10[2] = 0x3010000000;
    v10[4] = 0;
    v10[5] = 0;
    v10[3] = &unk_18685B0AF;
    v7 = (const CGPath *)objc_msgSend(objc_retainAutorelease(v5), "CGPath");
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __UIDistanceBetweenPointAndPolygon_block_invoke;
    block[3] = &unk_1E16CAD30;
    *(double *)&block[7] = a2;
    *(double *)&block[8] = a3;
    block[4] = v11;
    block[5] = v10;
    block[6] = &v12;
    CGPathApplyWithBlock(v7, block);
    _Block_object_dispose(v10, 8);
    _Block_object_dispose(v11, 8);
    v6 = v13[3];
  }
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_185CD6B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL UIPointIsDiscrete(double a1, double a2)
{
  _BOOL8 result;

  result = 0;
  if (fabs(a1) != INFINITY)
    return fabs(a2) != INFINITY;
  return result;
}

BOOL UIRectContainsPointInYAxis(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a6 <= a2 + a4 && a2 <= a6;
}

BOOL UIRectContainsRectWithAccuracy(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  CGRect v22;
  CGRect v23;

  v22 = CGRectInset(*(CGRect *)&a1, -a9, -a9);
  v23.origin.x = a5;
  v23.origin.y = a6;
  v23.size.width = a7;
  v23.size.height = a8;
  return CGRectContainsRect(v22, v23);
}

double UISizeCeilToScale(double a1, double a2, double a3)
{
  double v5;
  double v6;

  UICeilToScale(a1, a3);
  v6 = v5;
  UICeilToScale(a2, a3);
  return v6;
}

double _UIIntersectionPointOfRayWithRect(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinX;
  double MaxX;
  double MinY;
  double MaxY;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  v32.origin.x = a5;
  v32.origin.y = a6;
  v32.size.width = a7;
  v32.size.height = a8;
  MinX = CGRectGetMinX(v32);
  v33.origin.x = a5;
  v33.origin.y = a6;
  v33.size.width = a7;
  v33.size.height = a8;
  MaxX = CGRectGetMaxX(v33);
  v34.origin.x = a5;
  v34.origin.y = a6;
  v34.size.width = a7;
  v34.size.height = a8;
  MinY = CGRectGetMinY(v34);
  v35.origin.x = a5;
  v35.origin.y = a6;
  v35.size.width = a7;
  v35.size.height = a8;
  MaxY = CGRectGetMaxY(v35);
  if (a1 < MinX || a1 > MaxX || a2 < MinY || a2 > MaxY)
  {
    if (a3 == 0.0)
    {
      if (a1 < MinX || a1 > MaxX)
        return *MEMORY[0x1E0C9D628];
      v23 = -INFINITY;
      v21 = INFINITY;
    }
    else
    {
      v20 = (MinX - a1) / a3;
      v21 = (MaxX - a1) / a3;
      if (v20 >= v21)
        v22 = (MaxX - a1) / a3;
      else
        v22 = (MinX - a1) / a3;
      if (v20 >= v21)
        v21 = (MinX - a1) / a3;
      v23 = fmax(v22, -INFINITY);
    }
    if (a4 == 0.0)
    {
      if (a2 < MinY || a2 > MaxY)
        return *MEMORY[0x1E0C9D628];
    }
    else
    {
      v24 = (MinY - a2) / a4;
      v25 = (MaxY - a2) / a4;
      if (v24 >= v25)
        v26 = v25;
      else
        v26 = (MinY - a2) / a4;
      if (v24 >= v25)
        v25 = (MinY - a2) / a4;
      if (v23 < v26)
        v23 = v26;
      if (v21 >= v25)
        v21 = v25;
    }
    v27 = 0.0;
    if (v23 >= 0.0)
      v27 = v23;
    if (v21 > v27)
      return (a1 + a3) * v23 + a1 * (1.0 - v23);
    return *MEMORY[0x1E0C9D628];
  }
  return a1;
}

double UIRectIntegralWithViewScale(void *a1, double a2, double a3, double a4, double a5)
{
  double v9;

  objc_msgSend(a1, "_currentScreenScale");
  return UIRectIntegralWithScale(a2, a3, a4, a5, v9);
}

double UIRectGetCorners(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double result;

  *a1 = a2;
  a1[1] = a3;
  v5 = a3 + a5;
  a1[2] = a2;
  a1[3] = v5;
  result = a2 + a4;
  a1[4] = result;
  a1[5] = v5;
  a1[6] = result;
  a1[7] = a3;
  return result;
}

double UIRectContainInRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v14;
  double MinX;
  double MaxX;
  double v17;
  double MinY;
  double MaxY;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  v14 = a1;
  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.width = a7;
  v22.size.height = a8;
  if (MinX >= CGRectGetMinX(v22))
  {
    v24.origin.x = v14;
    v24.origin.y = a2;
    v24.size.width = a3;
    v24.size.height = a4;
    MaxX = CGRectGetMaxX(v24);
    v25.origin.x = a5;
    v25.origin.y = a6;
    v25.size.width = a7;
    v25.size.height = a8;
    if (MaxX > CGRectGetMaxX(v25))
    {
      v26.origin.x = a5;
      v26.origin.y = a6;
      v26.size.width = a7;
      v26.size.height = a8;
      v17 = CGRectGetMaxX(v26);
      v27.origin.x = v14;
      v27.origin.y = a2;
      v27.size.width = a3;
      v27.size.height = a4;
      v14 = v17 - CGRectGetWidth(v27);
    }
  }
  else
  {
    v23.origin.x = a5;
    v23.origin.y = a6;
    v23.size.width = a7;
    v23.size.height = a8;
    v14 = CGRectGetMinX(v23);
  }
  v28.origin.x = v14;
  v28.origin.y = a2;
  v28.size.width = a3;
  v28.size.height = a4;
  MinY = CGRectGetMinY(v28);
  v29.origin.x = a5;
  v29.origin.y = a6;
  v29.size.width = a7;
  v29.size.height = a8;
  if (MinY >= CGRectGetMinY(v29))
  {
    v31.origin.x = v14;
    v31.origin.y = a2;
    v31.size.width = a3;
    v31.size.height = a4;
    MaxY = CGRectGetMaxY(v31);
    v32.origin.x = a5;
    v32.origin.y = a6;
    v32.size.width = a7;
    v32.size.height = a8;
    if (MaxY > CGRectGetMaxY(v32))
    {
      v33.origin.x = a5;
      v33.origin.y = a6;
      v33.size.width = a7;
      v33.size.height = a8;
      CGRectGetMaxY(v33);
      v34.origin.x = v14;
      v34.origin.y = a2;
      v34.size.width = a3;
      v34.size.height = a4;
      CGRectGetHeight(v34);
    }
  }
  else
  {
    v30.origin.x = a5;
    v30.origin.y = a6;
    v30.size.width = a7;
    v30.size.height = a8;
    CGRectGetMinY(v30);
  }
  return v14;
}

double UIPointIntegral(double a1)
{
  return floor(a1);
}

CGAffineTransform *_UITransformLerp@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  __int128 v6;
  __int128 v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v12;
  float64x2_t v13;
  CGAffineTransform v15;
  CGAffineTransform transform;
  CGAffineTransformComponents v17;

  memset(&v17, 0, sizeof(v17));
  v6 = a1[1];
  *(_OWORD *)&transform.a = *a1;
  *(_OWORD *)&transform.c = v6;
  *(_OWORD *)&transform.tx = a1[2];
  CGAffineTransformDecompose(&v17, &transform);
  v7 = a2[1];
  *(_OWORD *)&v15.a = *a2;
  *(_OWORD *)&v15.c = v7;
  *(_OWORD *)&v15.tx = a2[2];
  memset(&transform, 0, sizeof(transform));
  v12 = vmulq_n_f64((float64x2_t)v17.scale, 1.0 - a4);
  v13 = vmulq_n_f64((float64x2_t)v17.translation, 1.0 - a4);
  CGAffineTransformDecompose((CGAffineTransformComponents *)&transform, &v15);
  v8 = *(float64x2_t *)&transform.c;
  v9 = vaddq_f64(v12, vmulq_n_f64(*(float64x2_t *)&transform.a, a4));
  v10 = vaddq_f64(v13, vmulq_n_f64(*(float64x2_t *)&transform.tx, a4));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(float64x2_t *)&v15.a = v9;
  *(float64x2_t *)&v15.c = vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v17.horizontalShear, 1.0 - a4), vmulq_n_f64(v8, a4));
  *(float64x2_t *)&v15.tx = v10;
  return CGAffineTransformMakeWithComponents((CGAffineTransform *)a3, (CGAffineTransformComponents *)&v15);
}

CGAffineTransform *_UIScaleTransformForAspectFillOfSizeInTargetSize@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  return _UIScaleTransformForAspectFitOrFillOfSizeInTargetSize(0, a1, a2, a3, a4, a5);
}

double _UICGRectInsetZeroClamped(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6)
{
  double v12;
  double v13;
  double v14;
  double result;
  CGRect v16;
  CGRect v17;

  v12 = CGRectGetWidth(*(CGRect *)&a1) * 0.5;
  if (v12 <= a5)
    a5 = v12;
  v16.origin.x = a1;
  v16.origin.y = a2;
  v16.size.width = a3;
  v16.size.height = a4;
  v13 = CGRectGetHeight(v16) * 0.5;
  if (v13 <= a6)
    v14 = v13;
  else
    v14 = a6;
  v17.origin.x = a1;
  v17.origin.y = a2;
  v17.size.width = a3;
  v17.size.height = a4;
  *(_QWORD *)&result = (unint64_t)CGRectInset(v17, a5, v14);
  return result;
}

uint64_t UIRectCornersAtEdges(char a1)
{
  return ((~a1 & 3) == 0) | (2 * ((~a1 & 9) == 0)) | (4 * ((~a1 & 6) == 0)) | (8 * ((~a1 & 0xC) == 0));
}

unint64_t _UICGAffineTransformHasFiniteMembers(float64x2_t *a1)
{
  float64x2_t v1;
  float64x2_t v2;
  int16x8_t v3;
  int8x16_t v4;
  float64x2_t v5;
  int8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int64x2_t v9;
  int64x2_t v10;

  v1 = a1[1];
  v2 = a1[2];
  *(int32x2_t *)v3.i8 = vmovn_s64((int64x2_t)vorrq_s8((int8x16_t)vcltzq_f64(v2), (int8x16_t)vcgezq_f64(v2)));
  v3.i64[1] = -1;
  v4 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(*a1), (int8x16_t)vcgezq_f64(*a1)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v1), (int8x16_t)vcgezq_f64(v1))), v3);
  v5 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  *(int32x2_t *)&v2.f64[0] = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_f64(vabsq_f64(v2), v5)));
  v2.f64[1] = NAN;
  v6 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(vabsq_f64(*a1), v5), (int32x4_t)vceqq_f64(vabsq_f64(v1), v5))), (int16x8_t)v2), v4));
  LODWORD(v1.f64[0]) = v6.u8[4];
  HIDWORD(v1.f64[0]) = v6.u8[5];
  LODWORD(v2.f64[0]) = v6.u8[0];
  HIDWORD(v2.f64[0]) = v6.u8[1];
  v4.i32[0] = v6.u8[6];
  v4.i32[1] = v6.u8[7];
  v7.i32[0] = v6.u8[2];
  v7.i32[1] = v6.u8[3];
  v8 = vand_s8(vand_s8(*(int8x8_t *)&v2.f64[0], *(int8x8_t *)&v1.f64[0]), vand_s8(v7, *(int8x8_t *)v4.i8));
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  v10 = vcltzq_s64(vshlq_n_s64(v9, 0x3FuLL));
  return vandq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s64(v10, 1)).u64[0] >> 63;
}

CFStringRef _NSStringFromCAPoint3D(double a1, double a2, double a3)
{
  return (id)CFStringCreateWithFormat(0, 0, CFSTR("{%.*g, %.*g, %.*g}"), 17, *(_QWORD *)&a1, 17, *(_QWORD *)&a2, 17, *(_QWORD *)&a3);
}

CFStringRef _NSStringFromCATransform3D(_QWORD *a1)
{
  return objc_autoreleaseReturnValue((id)CFStringCreateWithFormat(0, 0, CFSTR("[%.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g]"), 17, *a1, 17, a1[1], 17, a1[2], 17, a1[3], 17, a1[4], 17, a1[5], 17, a1[6], 17, a1[7],
                                           17,
                                           a1[8],
                                           17,
                                           a1[9],
                                           17,
                                           a1[10],
                                           17,
                                           a1[11],
                                           17,
                                           a1[12],
                                           17,
                                           a1[13],
                                           17,
                                           a1[14],
                                           17,
                                           a1[15]));
}

NSString *__cdecl NSStringFromCGAffineTransform(CGAffineTransform *transform)
{
  return (NSString *)(id)CFStringCreateWithFormat(0, 0, CFSTR("[%.*g, %.*g, %.*g, %.*g, %.*g, %.*g]"), 17, *(_QWORD *)&transform->a, 17, *(_QWORD *)&transform->b, 17, *(_QWORD *)&transform->c, 17, *(_QWORD *)&transform->d, 17, *(_QWORD *)&transform->tx, 17, *(_QWORD *)&transform->ty);
}

NSString *__cdecl NSStringFromUIOffset(UIOffset offset)
{
  return (NSString *)(id)CFStringCreateWithFormat(0, 0, CFSTR("{%.*g, %.*g}"), 17, *(_QWORD *)&offset.horizontal, 17, *(_QWORD *)&offset.vertical);
}

CFStringRef NSStringFromUIRectCornerRadii(double a1, double a2, double a3, double a4)
{
  return (id)CFStringCreateWithFormat(0, 0, CFSTR("{%.*g, %.*g, %.*g, %.*g}"), 17, *(_QWORD *)&a1, 17, *(_QWORD *)&a2, 17, *(_QWORD *)&a3, 17, *(_QWORD *)&a4);
}

CFStringRef _NSStringFromCAFrameRateRange(float a1, float a2, float a3)
{
  return (id)CFStringCreateWithFormat(0, 0, CFSTR("{%d, %d, %d}"), (int)a1, (int)a2, (int)a3);
}

CGVector CGVectorFromString(NSString *string)
{
  NSString *v1;
  double v2;
  double DoubleValue;
  CFStringRef v4;
  CFStringRef v5;
  double v6;
  double v7;
  CFStringRef v8;
  CFStringRef str;
  CGVector result;

  v1 = string;
  v2 = 0.0;
  if (-[NSString length](v1, "length") < 5)
  {
    DoubleValue = 0.0;
  }
  else
  {
    v8 = 0;
    str = 0;
    DoubleValue = 0.0;
    if (SplitBracesAndComma(v1, &str, &v8))
    {
      v4 = str;
      DoubleValue = CFStringGetDoubleValue(str);
      v5 = v8;
      v2 = CFStringGetDoubleValue(v8);
      CFRelease(v4);
      CFRelease(v5);
    }
  }

  v6 = DoubleValue;
  v7 = v2;
  result.dy = v7;
  result.dx = v6;
  return result;
}

CGAffineTransform *__cdecl CGAffineTransformFromString(CGAffineTransform *__return_ptr retstr, NSString *string)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  CGAffineTransform *result;
  NSString *v8;
  _OWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = string;
  if (-[NSString length](v8, "length") >= 0xD && ParseNumbersWithDelimiter(v8, (uint64_t)v9, 6))
  {
    v3 = v9[1];
    *(_OWORD *)&retstr->a = v9[0];
    *(_OWORD *)&retstr->c = v3;
    v4 = v9[2];
  }
  else
  {
    v5 = MEMORY[0x1E0C9BAA8];
    v6 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&retstr->a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&retstr->c = v6;
    v4 = *(_OWORD *)(v5 + 32);
  }
  *(_OWORD *)&retstr->tx = v4;

  return result;
}

double _CAPoint3DFromString(void *a1)
{
  id v1;
  double *v2;
  double v3;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") >= 7 && ParseNumbersWithDelimiter(v1, (uint64_t)v5, 3))
    v2 = (double *)v5;
  else
    v2 = (double *)MEMORY[0x1E0CD2538];
  v3 = *v2;

  return v3;
}

NSDirectionalEdgeInsets NSDirectionalEdgeInsetsFromString(NSString *string)
{
  NSString *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _QWORD v10[5];
  NSDirectionalEdgeInsets result;

  v10[4] = *MEMORY[0x1E0C80C00];
  v1 = string;
  v2 = 0.0;
  if (-[NSString length](v1, "length") < 9)
  {
    v3 = 0.0;
    v4 = 0.0;
    v5 = 0.0;
  }
  else
  {
    v3 = 0.0;
    v4 = 0.0;
    v5 = 0.0;
    if (ParseNumbersWithDelimiter(v1, (uint64_t)v10, 4))
    {
      v4 = *(double *)v10;
      v3 = *(double *)&v10[1];
      v2 = *(double *)&v10[2];
      v5 = *(double *)&v10[3];
    }
  }

  v6 = v4;
  v7 = v3;
  v8 = v2;
  v9 = v5;
  result.trailing = v9;
  result.bottom = v8;
  result.leading = v7;
  result.top = v6;
  return result;
}

UIOffset UIOffsetFromString(NSString *string)
{
  NSString *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  _QWORD v6[3];
  UIOffset result;

  v6[2] = *MEMORY[0x1E0C80C00];
  v1 = string;
  v2 = 0.0;
  if (-[NSString length](v1, "length") < 5)
  {
    v3 = 0.0;
  }
  else
  {
    v3 = 0.0;
    if (ParseNumbersWithDelimiter(v1, (uint64_t)v6, 2))
    {
      v2 = *(double *)v6;
      v3 = *(double *)&v6[1];
    }
  }

  v4 = v2;
  v5 = v3;
  result.vertical = v5;
  result.horizontal = v4;
  return result;
}

double UIRectCornerRadiiFromString(void *a1)
{
  id v1;
  double v2;
  _QWORD v4[5];

  v4[4] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") < 9)
  {
    v2 = 0.0;
  }
  else
  {
    v2 = 0.0;
    if (ParseNumbersWithDelimiter(v1, (uint64_t)v4, 4))
      v2 = *(double *)v4;
  }

  return v2;
}

double _UIClampedCornerRadius(uint64_t a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v6;
  char v8;
  int v13;
  _BOOL4 v14;
  double Width;
  double Height;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  v6 = a2;
  if (a2 > 0.0 && a1 != 0)
  {
    v8 = a1;
    v18.origin.x = a3;
    v18.origin.y = a4;
    v18.size.width = a5;
    v18.size.height = a6;
    if (!CGRectIsEmpty(v18))
    {
      v19.origin.x = a3;
      v19.origin.y = a4;
      v19.size.width = a5;
      v19.size.height = a6;
      if (!CGRectIsNull(v19))
      {
        v13 = 1;
        if ((~v8 & 0xA) != 0)
        {
          v14 = (v8 & 5) == 5 || (~v8 & 0xC) == 0;
          v13 = (v8 & 3) == 3 || v14;
        }
        v20.origin.x = a3;
        v20.origin.y = a4;
        v20.size.width = a5;
        v20.size.height = a6;
        Width = CGRectGetWidth(v20);
        v21.origin.x = a3;
        v21.origin.y = a4;
        v21.size.width = a5;
        v21.size.height = a6;
        Height = CGRectGetHeight(v21);
        if (Width < Height)
          Height = Width;
        if (v13)
          Height = Height * 0.5;
        if (Height <= v6)
          return Height;
      }
    }
  }
  return v6;
}

uint64_t _UICACornerRadiiMakeWithRadiusAndMask@<X0>(uint64_t result@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double v3;
  double v4;
  double v5;

  if ((result & 1) != 0)
    v3 = a3;
  else
    v3 = 0.0;
  if ((result & 2) != 0)
    v4 = a3;
  else
    v4 = 0.0;
  if ((result & 4) != 0)
    v5 = a3;
  else
    v5 = 0.0;
  *a2 = v5;
  a2[1] = v5;
  if ((result & 8) == 0)
    a3 = 0.0;
  a2[2] = a3;
  a2[3] = a3;
  a2[4] = v4;
  a2[5] = v4;
  a2[6] = v3;
  a2[7] = v3;
  return result;
}

float _CAFrameRateRangeFromString(void *a1)
{
  id v1;
  __CFString *v2;
  float v5;
  uint64_t v7;
  CFIndex *v8;
  CFIndex *v9;
  CFIndex v10;
  CFIndex *v11;
  CFIndex v12;
  const __CFString *v13;
  CFIndex v14;
  CFIndex v15;
  uint64_t v16;
  _DWORD v17[3];
  CFIndex v18[3];
  CFRange v19;

  v18[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") >= 7)
  {
    v2 = (__CFString *)v1;
    v15 = 0;
    v16 = 2;
    v14 = 0;
    ParseBracesWithDelimiter(v2, &v15, &v14, v18, &v16);
    if (v15 != -1 && v14 != -1 && v16 == 2)
    {
      v7 = 0;
      v8 = v18;
      while (1)
      {
        v9 = v8 - 1;
        if (!v7)
          v9 = &v15;
        v10 = *v9;
        v11 = v16 <= v7 ? &v14 : v8;
        v12 = *v11 - v10;
        if (v12 - 2 < 0)
          break;
        v19.location = v10 + 1;
        v19.length = v12 - 1;
        v13 = CFStringCreateWithSubstring(0, v2, v19);
        v17[v7] = CFStringGetIntValue(v13);
        CFRelease(v13);
        ++v7;
        ++v8;
        if (v7 == 3)
        {

          LODWORD(v5) = CAFrameRateRangeMake((float)v17[0], (float)v17[1], (float)v17[2]);
          goto LABEL_11;
        }
      }
    }

  }
  v5 = *MEMORY[0x1E0CD23C0];
LABEL_11:

  return v5;
}

uint64_t _UIEncodeCGSizeForKey(void *a1, const char *a2)
{
  return objc_msgSend(a1, "encodeCGSize:forKey:", a2);
}

void _UIRTLConvertAllLTRFramesToRTL(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  id v22;
  CGRect v23;

  v22 = a1;
  v9 = objc_msgSend(v22, "count");
  if (v9)
  {
    v10 = v9;
    for (i = 0; i != v10; ++i)
    {
      objc_msgSend(v22, "objectAtIndexedSubscript:", i);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "CGRectValue");
      v14 = v13;
      v16 = v15;
      v18 = v17;
      v20 = v19;
      v23.origin.x = a2;
      v23.origin.y = a3;
      v23.size.width = a4;
      v23.size.height = a5;
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGRect:", CGRectGetMaxX(v23) - v18 - v14, v16, v18, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "replaceObjectAtIndex:withObject:", i, v21);

    }
  }

}

void _UIGetTransformBetweenViews(void *a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  __int128 v25;
  CGAffineTransform v26;
  CATransform3D v27;
  CATransform3D v28;

  v7 = a1;
  v8 = a2;
  objc_msgSend(v7, "layer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "presentationLayer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    v12 = v10;
  }
  else
  {
    objc_msgSend(v7, "layer");
    v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  v13 = v12;

  objc_msgSend(v8, "layer");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "presentationLayer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15)
  {
    v17 = v15;
  }
  else
  {
    objc_msgSend(v8, "layer");
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = v17;

  v19 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 80);
  *(_OWORD *)&v28.m31 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 64);
  *(_OWORD *)&v28.m33 = v19;
  v20 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 112);
  *(_OWORD *)&v28.m41 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 96);
  *(_OWORD *)&v28.m43 = v20;
  v21 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 16);
  *(_OWORD *)&v28.m11 = *MEMORY[0x1E0CD2610];
  *(_OWORD *)&v28.m13 = v21;
  v22 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 48);
  *(_OWORD *)&v28.m21 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 32);
  *(_OWORD *)&v28.m23 = v22;
  CALayerMapGeometry();
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  v27 = v28;
  CATransform3DGetAffineTransform((CGAffineTransform *)a4, &v27);
  if (a3)
  {
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
  }
  v23 = -[UIView _subviewsNeedAxisFlipping](v7);
  if (v23 != -[UIView _subviewsNeedAxisFlipping](v8))
  {
    v24 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v26.a = *(_OWORD *)a4;
    *(_OWORD *)&v26.c = v24;
    *(_OWORD *)&v26.tx = *(_OWORD *)(a4 + 32);
    CGAffineTransformScale((CGAffineTransform *)&v27, &v26, -1.0, 1.0);
    v25 = *(_OWORD *)&v27.m13;
    *(_OWORD *)a4 = *(_OWORD *)&v27.m11;
    *(_OWORD *)(a4 + 16) = v25;
  }

}

CGFloat _TransformFunction(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CGFloat result;
  __int128 v15;
  CATransform3D v16;
  CATransform3D a;
  CATransform3D v18;

  v3 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v3;
  v4 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v4;
  v5 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v5;
  v6 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v6;
  v7 = a2[5];
  *(_OWORD *)&v16.m31 = a2[4];
  *(_OWORD *)&v16.m33 = v7;
  v8 = a2[7];
  *(_OWORD *)&v16.m41 = a2[6];
  *(_OWORD *)&v16.m43 = v8;
  v9 = a2[1];
  *(_OWORD *)&v16.m11 = *a2;
  *(_OWORD *)&v16.m13 = v9;
  v10 = a2[3];
  *(_OWORD *)&v16.m21 = a2[2];
  *(_OWORD *)&v16.m23 = v10;
  CATransform3DConcat(&v18, &a, &v16);
  v11 = *(_OWORD *)&v18.m33;
  a1[4] = *(_OWORD *)&v18.m31;
  a1[5] = v11;
  v12 = *(_OWORD *)&v18.m43;
  a1[6] = *(_OWORD *)&v18.m41;
  a1[7] = v12;
  v13 = *(_OWORD *)&v18.m13;
  *a1 = *(_OWORD *)&v18.m11;
  a1[1] = v13;
  result = v18.m21;
  v15 = *(_OWORD *)&v18.m23;
  a1[2] = *(_OWORD *)&v18.m21;
  a1[3] = v15;
  return result;
}

double _UIConvertPointFromOrientationToOrientation(uint64_t a1, uint64_t a2, double result, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  if (a1 != a2)
  {
    if ((unint64_t)(a1 - 3) >= 2)
      v6 = a6;
    else
      v6 = a5;
    if ((unint64_t)(a1 - 3) >= 2)
      v7 = a5;
    else
      v7 = a6;
    v8 = a5 - result;
    v9 = a6 - a4;
    if (a1 == 4)
      v10 = a4;
    else
      v10 = result;
    if (a1 == 4)
      a4 = v8;
    if (a1 == 3)
      v10 = v9;
    else
      result = a4;
    if (a1 == 2)
      v11 = v8;
    else
      v11 = v10;
    if (a1 == 2)
      v12 = v9;
    else
      v12 = result;
    switch(a2)
    {
      case 2:
        return v7 - v11;
      case 3:
        return v12;
      case 4:
        return v6 - v12;
      default:
        return v11;
    }
  }
  return result;
}

double gradientInterpolater(double *a1, double *a2, double *a3)
{
  double v3;
  unint64_t v4;
  double *v5;
  double v6;
  double *v7;
  double v8;
  double result;

  v3 = *a2;
  if (*a2 < 0.0)
    v3 = 0.0;
  if (v3 > 1.0)
    v3 = 1.0;
  v4 = 0xFFFFFFFF00000000;
  v5 = a1;
  do
  {
    v6 = v5[9];
    v4 += 0x100000000;
    v5 += 5;
  }
  while (v6 < v3);
  v7 = &a1[5 * SHIDWORD(v4)];
  v8 = (v3 - v7[4]) / (v6 - v7[4]);
  *a3 = *v5 * v8 + *v7 * (1.0 - v8);
  a3[1] = (1.0 - v8) * v7[1] + v8 * v5[1];
  a3[2] = (1.0 - v8) * v7[2] + v8 * v5[2];
  result = (1.0 - v8) * v7[3] + v8 * v5[3];
  a3[3] = result;
  return result;
}

void UIRectFrameUsingOperation(int a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  _QWORD *ContextStack;
  CGContext *v11;
  int CompositeOperation;
  double v13;
  double v14;
  CGRect v15;
  CGRect v16;

  ContextStack = GetContextStack(0);
  if (*(int *)ContextStack < 1)
    v11 = 0;
  else
    v11 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  CompositeOperation = CGContextGetCompositeOperation();
  CGContextGetLineWidth();
  v14 = v13;
  if (CompositeOperation != a1)
    CGContextSetCompositeOperation();
  v15.origin.x = a2;
  v15.origin.y = a3;
  v15.size.width = a4;
  v15.size.height = a5;
  v16 = CGRectInset(v15, v14 * 0.5, v14 * 0.5);
  CGContextStrokeRect(v11, v16);
  if (CompositeOperation != a1)
    CGContextSetCompositeOperation();
  CGContextSetLineWidth(v11, v14);
}

void UIRectFrameUsingBlendMode(CGRect rect, CGBlendMode blendMode)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  _QWORD *ContextStack;
  CGContext *v8;
  CGBlendMode v9;
  double v10;
  double v11;
  CGRect v12;
  CGRect v13;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  ContextStack = GetContextStack(0);
  if (*(int *)ContextStack < 1)
    v8 = 0;
  else
    v8 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  v9 = CGContextGetBlendMode();
  CGContextGetLineWidth();
  v11 = v10;
  if (v9 != blendMode)
    CGContextSetBlendMode(v8, blendMode);
  v12.origin.x = x;
  v12.origin.y = y;
  v12.size.width = width;
  v12.size.height = height;
  v13 = CGRectInset(v12, v11 * 0.5, v11 * 0.5);
  CGContextStrokeRect(v8, v13);
  if (v9 != blendMode)
    CGContextSetBlendMode(v8, v9);
  CGContextSetLineWidth(v8, v11);
}

void UIRectFrame(CGRect rect)
{
  UIRectFrameUsingOperation(1, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
}

void UIRectClip(CGRect rect)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  _QWORD *ContextStack;
  CGContext *v6;
  CGRect v7;

  if (rect.size.width >= 0.0)
  {
    height = rect.size.height;
    if (rect.size.height >= 0.0)
    {
      width = rect.size.width;
      y = rect.origin.y;
      x = rect.origin.x;
      ContextStack = GetContextStack(0);
      if (*(int *)ContextStack < 1)
        v6 = 0;
      else
        v6 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
      v7.origin.x = x;
      v7.origin.y = y;
      v7.size.width = width;
      v7.size.height = height;
      CGContextClipToRect(v6, v7);
    }
  }
}

void UISetSystemColor(int a1)
{
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  id v6;

  switch(a1)
  {
    case 1:
      +[UIColor whiteColor](UIColor, "whiteColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 2:
      +[UIColor grayColor](UIColor, "grayColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 3:
      +[UIColor lightGrayColor](UIColor, "lightGrayColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 4:
      +[UIColor darkGrayColor](UIColor, "darkGrayColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 5:
      +[UIColor redColor](UIColor, "redColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 6:
      +[UIColor greenColor](UIColor, "greenColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 7:
      +[UIColor blueColor](UIColor, "blueColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 8:
      +[UIColor cyanColor](UIColor, "cyanColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 9:
      +[UIColor magentaColor](UIColor, "magentaColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 10:
      +[UIColor yellowColor](UIColor, "yellowColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 11:
      +[UIColor orangeColor](UIColor, "orangeColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 12:
      +[UIColor purpleColor](UIColor, "purpleColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 13:
      +[UIColor brownColor](UIColor, "brownColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 14:
      +[UIColor clearColor](UIColor, "clearColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 15:
      v2 = 0.8;
      v3 = 0.82;
      v4 = 0.85;
      goto LABEL_26;
    case 16:
      v2 = 0.88;
      v5 = 1.0;
      v3 = 0.88;
      v4 = 0.88;
      goto LABEL_27;
    case 17:
      v2 = 1.0;
      v3 = 1.0;
      v4 = 1.0;
      goto LABEL_26;
    case 18:
      v2 = 0.16;
      v3 = 0.43;
      v4 = 0.83;
      goto LABEL_26;
    case 19:
      v2 = 0.52;
      v3 = 0.56;
      v4 = 0.58;
      goto LABEL_23;
    case 20:
      v2 = 0.9;
      v3 = 0.93;
      v4 = 0.99;
LABEL_23:
      v5 = 0.8;
      goto LABEL_27;
    case 21:
      v2 = 0.92;
      v3 = 0.94;
      v4 = 0.99;
      goto LABEL_26;
    case 22:
      v2 = 0.85;
      v3 = 0.87;
      v4 = 0.91;
LABEL_26:
      v5 = 1.0;
LABEL_27:
      +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v2, v3, v4, v5);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      +[UIColor blackColor](UIColor, "blackColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
  }
  v6 = v1;
  objc_msgSend(v1, "set");

}

void UIGraphicsBeginImageContext(CGSize size)
{
  _UIGraphicsBeginImageContextWithOptions(0, 0, size.width, size.height, 1.0);
}

void _UIGraphicsBeginImageContextOpaque(int a1, CGFloat a2, CGFloat a3)
{
  _UIGraphicsBeginImageContextWithOptions(a1, 0, a2, a3, 1.0);
}

id _UIGraphicsDrawIntoImageContextWithOptions(uint64_t a1, void *a2, double a3, double a4, double a5)
{
  return _UIGraphicsDrawIntoImageContextWithMoreOptions(a1, 0, a2, a3, a4, a5);
}

id _UIGraphicsDrawIntoImageContextWithMoreOptions(uint64_t a1, int a2, void *a3, double a4, double a5, double a6)
{
  id v11;
  void *v12;
  UIGraphicsImageRenderer *v13;
  id v14;
  void *v15;
  _QWORD v17[4];
  id v18;

  v11 = a3;
  +[UIGraphicsImageRendererFormat preferredFormat](UIGraphicsImageRendererFormat, "preferredFormat");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setOpaque:", a1);
  if (a6 > 0.0)
    objc_msgSend(v12, "setScale:", a6);
  if (a2)
    objc_msgSend(v12, "setPreferredRange:", 0x7FFFLL);
  v13 = -[UIGraphicsImageRenderer initWithSize:format:]([UIGraphicsImageRenderer alloc], "initWithSize:format:", v12, a4, a5);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = ___UIGraphicsDrawIntoImageContextWithMoreOptions_block_invoke;
  v17[3] = &unk_1E16C4DA8;
  v18 = v11;
  v14 = v11;
  -[UIGraphicsImageRenderer imageWithActions:](v13, "imageWithActions:", v17);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

BOOL UIGraphicsBeginPDFContextToFile(NSString *path, CGRect bounds, NSDictionary *documentInfo)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  __CFString *v8;
  NSDictionary *v9;
  CFURLRef v10;
  const __CFURL *v11;
  const CGRect *v12;
  CGContextRef v13;
  CGContext *v14;
  BOOL v15;
  void *v17;
  void *v18;
  void *v19;
  CGRect v20;
  CGRect v21;

  height = bounds.size.height;
  width = bounds.size.width;
  y = bounds.origin.y;
  x = bounds.origin.x;
  v20 = bounds;
  v8 = path;
  v9 = documentInfo;
  v10 = CFURLCreateWithFileSystemPath(0, v8, kCFURLPOSIXPathStyle, 0);
  if (v10)
  {
    v11 = v10;
    v21.origin.x = x;
    v21.origin.y = y;
    v21.size.width = width;
    v21.size.height = height;
    if (CGRectIsEmpty(v21))
      v12 = 0;
    else
      v12 = &v20;
    v13 = CGPDFContextCreateWithURL(v11, v12, (CFDictionaryRef)v9);
    if (v13)
    {
      v14 = v13;
      CFRelease(v11);
      SetupPDFContext(v14, v9, 0, v20.origin.x, v20.origin.y, v20.size.width, v20.size.height);
    }
    else
    {
      if (dyld_program_sdk_at_least())
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL UIGraphicsBeginPDFContextToFile(NSString *__strong _Nonnull, CGRect, NSDictionary *__strong _Nullable)");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        NSStringFromCGRect(v20);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("UIGraphics.m"), 627, CFSTR("UIGraphicsBeginPDFContextToFile() failed to allocate CGPDFContext: bounds=%@, path=%@, documentInfo=%@. Use UIGraphicsPDFRenderer to avoid this assert."), v19, v8, v9);

      }
      CFRelease(v11);
    }
  }
  v15 = GetCurrentContext(2) != 0;

  return v15;
}

void SetupPDFContext(CGContext *a1, void *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  CGSize v13;
  CGSize size;
  CGSize *v15;
  void *v16;
  void *v17;
  CGSize v18;
  CGSize *v19;
  CGSize v20;
  int *ContextStack;
  CGContextRef v22;
  int v23;
  int *v24;
  CGRect v25;
  CGRect *v26;

  v25.origin.x = a4;
  v25.origin.y = a5;
  v25.size.width = a6;
  v25.size.height = a7;
  v9 = a2;
  v26 = &v25;
  v10 = *MEMORY[0x1E0C9DB58];
  objc_msgSend(v9, "objectForKey:", *MEMORY[0x1E0C9DB58]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
    objc_msgSend(v11, "getBytes:length:", &v26, 32);

  if (a3)
  {
    if (CGRectIsEmpty(v25))
    {
      v13 = *(CGSize *)(a3 + 16);
      v25.origin = *(CGPoint *)a3;
      v25.size = v13;
    }
    size = v25.size;
    *(CGPoint *)(a3 + 32) = v25.origin;
    *(CGSize *)(a3 + 48) = size;
    *(_BYTE *)(a3 + 64) = 1;
  }
  else
  {
    v15 = (CGSize *)malloc_type_malloc(0x48uLL, 0x1000040773C5DECuLL);
    objc_msgSend(v9, "objectForKey:", v10);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v16)
      objc_msgSend(v16, "getBytes:length:", &v25, 32);
    if (CGRectIsEmpty(v25))
    {
      v25.origin = 0uLL;
      v25.size = (CGSize)xmmword_18667DB50;
    }
    v18 = v25.size;
    v19 = (CGSize *)MEMORY[0x1E0C9D648];
    *v15 = (CGSize)v25.origin;
    v15[1] = v18;
    v20 = v19[1];
    v15[2] = *v19;
    v15[3] = v20;
    LOBYTE(v15[4].width) = 0;
    ContextStack = (int *)GetContextStack(1);
    v22 = CGContextRetain(a1);
    v23 = *ContextStack;
    v24 = &ContextStack[6 * *ContextStack];
    *((_QWORD *)v24 + 1) = v22;
    v24[4] = 2;
    *((_QWORD *)v24 + 3) = v15;
    *ContextStack = v23 + 1;

  }
}

void UIGraphicsBeginPDFContextToData(NSMutableData *data, CGRect bounds, NSDictionary *documentInfo)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  NSDictionary *v8;
  CGDataConsumerRef v9;
  CGDataConsumer *v10;
  const CGRect *v11;
  CGContextRef v12;
  CGContext *v13;
  void *v14;
  void *v15;
  void *v16;
  CGRect v17;
  CGRect v18;

  height = bounds.size.height;
  width = bounds.size.width;
  y = bounds.origin.y;
  x = bounds.origin.x;
  v17 = bounds;
  v8 = documentInfo;
  v9 = CGDataConsumerCreateWithCFData((CFMutableDataRef)data);
  if (v9)
  {
    v10 = v9;
    v18.origin.x = x;
    v18.origin.y = y;
    v18.size.width = width;
    v18.size.height = height;
    if (CGRectIsEmpty(v18))
      v11 = 0;
    else
      v11 = &v17;
    v12 = CGPDFContextCreate(v10, v11, (CFDictionaryRef)v8);
    if (v12)
    {
      v13 = v12;
      CGDataConsumerRelease(v10);
      SetupPDFContext(v13, v8, 0, v17.origin.x, v17.origin.y, v17.size.width, v17.size.height);
    }
    else
    {
      if (dyld_program_sdk_at_least())
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void UIGraphicsBeginPDFContextToData(NSMutableData *__strong _Nonnull, CGRect, NSDictionary *__strong _Nullable)");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        NSStringFromCGRect(v17);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("UIGraphics.m"), 643, CFSTR("UIGraphicsBeginPDFContextToData() failed to allocate CGPDFContext: bounds=%@, documentInfo=%@. Use UIGraphicsPDFRenderer to avoid this assert."), v16, v8);

      }
      CGDataConsumerRelease(v10);
    }
  }

}

void UIGraphicsEndPDFContext(void)
{
  CGContext *CurrentContext;
  uint64_t CurrentContextAuxInfo;
  int *ContextStack;

  CurrentContext = (CGContext *)GetCurrentContext(2);
  CurrentContextAuxInfo = GetCurrentContextAuxInfo(2);
  if (CurrentContext && CurrentContextAuxInfo)
  {
    if (*(_BYTE *)(CurrentContextAuxInfo + 64))
      CGPDFContextEndPage(CurrentContext);
    ContextStack = (int *)GetContextStack(0);
    PopContextFromStack(ContextStack);
    CGPDFContextClose(CurrentContext);
    CGContextRelease(CurrentContext);
  }
}

void UIGraphicsBeginPDFPage(void)
{
  uint64_t CurrentContext;
  CGRect *CurrentContextAuxInfo;

  CurrentContext = GetCurrentContext(2);
  CurrentContextAuxInfo = (CGRect *)GetCurrentContextAuxInfo(2);
  if (CurrentContext)
  {
    if (CurrentContextAuxInfo)
      UIGraphicsBeginPDFPageWithInfo(*CurrentContextAuxInfo, 0);
  }
}

void UIGraphicsBeginPDFPageWithInfo(CGRect bounds, NSDictionary *pageInfo)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  NSDictionary *v6;
  CGContext *CurrentContext;
  uint64_t CurrentContextAuxInfo;
  uint64_t v9;
  CGRect *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSDictionary *v14;
  CGAffineTransform v15;
  CGRect v16;

  height = bounds.size.height;
  width = bounds.size.width;
  y = bounds.origin.y;
  x = bounds.origin.x;
  v6 = pageInfo;
  CurrentContext = (CGContext *)GetCurrentContext(2);
  CurrentContextAuxInfo = GetCurrentContextAuxInfo(2);
  if (CurrentContext && CurrentContextAuxInfo)
  {
    v9 = GetCurrentContextAuxInfo(2);
    if (v9)
    {
      v10 = (CGRect *)v9;
      if (*(_BYTE *)(v9 + 64))
        CGPDFContextEndPage(CurrentContext);
      SetupPDFContext(CurrentContext, v6, (uint64_t)v10, x, y, width, height);
      v11 = *MEMORY[0x1E0C9DB58];
      -[NSDictionary objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0C9DB58]);
      v12 = objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        v13 = (void *)v12;
      }
      else if (CGRectEqualToRect(v10[1], *v10))
      {
        v13 = 0;
      }
      else
      {
        v16.size.width = 612.0;
        v16.size.height = 792.0;
        v16.origin.x = 0.0;
        v16.origin.y = 0.0;
        if (CGRectEqualToRect(v10[1], v16))
        {
LABEL_16:
          CGPDFContextBeginPage(CurrentContext, (CFDictionaryRef)v6);
          CGContextTranslateCTM(CurrentContext, 0.0, v10[1].size.height);
          CGContextScaleCTM(CurrentContext, 1.0, -1.0);
          CGAffineTransformMakeScale(&v15, 1.0, -1.0);
          CGContextSetBaseCTM();
          goto LABEL_17;
        }
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v10[1], 32);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v14 = (NSDictionary *)-[NSDictionary mutableCopy](v6, "mutableCopy");

          -[NSDictionary setObject:forKey:](v14, "setObject:forKey:", v13, v11);
          v6 = v14;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v13, v11);
          v6 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        }
      }

      goto LABEL_16;
    }
    NSLog(CFSTR("GetCurrentContextAuxInfo returned nil"));
  }
LABEL_17:

}

CGRect UIGraphicsGetPDFContextBounds(void)
{
  uint64_t CurrentContextAuxInfo;
  double *v1;
  double *v2;
  double *v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  CGRect result;

  CurrentContextAuxInfo = GetCurrentContextAuxInfo(2);
  if (CurrentContextAuxInfo)
  {
    v1 = (double *)(CurrentContextAuxInfo + 8);
    v2 = (double *)(CurrentContextAuxInfo + 16);
    if (*(_BYTE *)(CurrentContextAuxInfo + 64))
      v3 = (double *)(CurrentContextAuxInfo + 56);
    else
      v3 = (double *)(CurrentContextAuxInfo + 24);
    if (*(_BYTE *)(CurrentContextAuxInfo + 64))
    {
      v2 = (double *)(CurrentContextAuxInfo + 48);
      v1 = (double *)(CurrentContextAuxInfo + 40);
      v4 = (double *)(CurrentContextAuxInfo + 32);
    }
    else
    {
      v4 = (double *)CurrentContextAuxInfo;
    }
  }
  else
  {
    v4 = (double *)MEMORY[0x1E0C9D648];
    v1 = (double *)(MEMORY[0x1E0C9D648] + 8);
    v2 = (double *)(MEMORY[0x1E0C9D648] + 16);
    v3 = (double *)(MEMORY[0x1E0C9D648] + 24);
  }
  v5 = *v4;
  v6 = *v1;
  v7 = *v2;
  v8 = *v3;
  result.size.height = v8;
  result.size.width = v7;
  result.origin.y = v6;
  result.origin.x = v5;
  return result;
}

void UIGraphicsSetPDFContextURLForRect(NSURL *url, CGRect rect)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGContext *CurrentContext;
  NSURL *urla;
  CGRect v8;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  urla = url;
  CurrentContext = (CGContext *)GetCurrentContext(2);
  if (CurrentContext)
  {
    v8.origin.x = x;
    v8.origin.y = y;
    v8.size.width = width;
    v8.size.height = height;
    CGPDFContextSetURLForRect(CurrentContext, (CFURLRef)urla, v8);
  }

}

void UIGraphicsAddPDFContextDestinationAtPoint(NSString *name, CGPoint point)
{
  CGFloat y;
  CGFloat x;
  CGContext *CurrentContext;
  __CFString *namea;
  CGPoint v6;

  y = point.y;
  x = point.x;
  namea = name;
  CurrentContext = (CGContext *)GetCurrentContext(2);
  if (CurrentContext)
  {
    v6.x = x;
    v6.y = y;
    CGPDFContextAddDestinationAtPoint(CurrentContext, namea, v6);
  }

}

void UIGraphicsSetPDFContextDestinationForRect(NSString *name, CGRect rect)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGContext *CurrentContext;
  __CFString *namea;
  CGRect v8;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  namea = name;
  CurrentContext = (CGContext *)GetCurrentContext(2);
  if (CurrentContext)
  {
    v8.origin.x = x;
    v8.origin.y = y;
    v8.size.width = width;
    v8.size.height = height;
    CGPDFContextSetDestinationForRect(CurrentContext, namea, v8);
  }

}

void sub_185CD9FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CDA10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CDBCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIDocumentCarouselViewItemWidth(void *a1)
{
  CGRect v2;

  objc_msgSend(a1, "bounds");
  CGRectGetWidth(v2);
  objc_msgSend(a1, "layoutMargins");
  objc_msgSend(a1, "layoutMargins");
  _UIDocumentCarouselViewRevealDimension(a1);
  UIRoundToViewScale(a1);
}

void _UIDocumentCarouselViewRevealDimension(void *a1)
{
  CGRect v2;

  objc_msgSend(a1, "bounds");
  CGRectGetWidth(v2);
  UIRoundToViewScale(a1);
}

void sub_185CDD3F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t _UIDocumentCarouselViewAnimateWithTracking(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[6];
  char v8;
  CAFrameRateRange v9;

  v9 = CAFrameRateRangeMake(80.0, 120.0, 120.0);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___UIDocumentCarouselViewAnimateWithTracking_block_invoke;
  v7[3] = &unk_1E16CAED8;
  v8 = a1;
  v7[4] = a2;
  v7[5] = a3;
  return +[UIView _modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:](UIView, "_modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:", 1048633, v7, *(double *)&v9.minimum, *(double *)&v9.maximum, *(double *)&v9.preferred);
}

void sub_185CDD86C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185CDF28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185CDF350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIImageIdentityBundleIdentifier(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    objc_msgSend(a1, "_primitiveImageAsset");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_assetManager");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bundle");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "bundleIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

CFTypeRef _UIImageGetCGImageRepresentation(void *a1)
{
  id v1;
  CGImageRef v2;
  CFTypeRef v3;

  objc_msgSend(a1, "_rasterizedImage");
  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v2 = CGImageRetain((CGImageRef)objc_msgSend(v1, "CGImage"));
  v3 = CFAutorelease(v2);

  return v3;
}

id _UIImageSystemSymbolNames()
{
  void *v0;
  void *v1;

  _UIKitCoreGlyphsManager();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_allImageNames");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id LoadImageSequence(void *a1, void *a2, void *a3, char a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  id v17;
  id v18;
  id v19;
  void (**v20)(void *, uint64_t);
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  void *v32;
  void *v33;
  _QWORD aBlock[9];
  char v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;

  v17 = a1;
  v18 = a2;
  v19 = a3;
  v37 = 0;
  v38 = &v37;
  v39 = 0x3032000000;
  v40 = __Block_byref_object_copy__108;
  v41 = __Block_byref_object_dispose__108;
  v42 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __LoadImageSequence_block_invoke;
  aBlock[3] = &unk_1E16CB0B8;
  v35 = a4;
  *(double *)&aBlock[5] = a6;
  *(double *)&aBlock[6] = a7;
  *(double *)&aBlock[7] = a8;
  *(double *)&aBlock[8] = a9;
  v36 = a5 == 1;
  aBlock[4] = &v37;
  v20 = (void (**)(void *, uint64_t))_Block_copy(aBlock);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@0"), v17);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIImage imageNamed:inBundle:compatibleWithTraitCollection:](UIImage, "imageNamed:inBundle:compatibleWithTraitCollection:", v21, v18, v19);
  v22 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@1"), v17);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIImage imageNamed:inBundle:compatibleWithTraitCollection:](UIImage, "imageNamed:inBundle:compatibleWithTraitCollection:", v23, v18, v19);
  v24 = objc_claimAutoreleasedReturnValue();
  v32 = v19;
  v33 = v18;

  if (v22 | v24)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = (void *)v38[5];
    v38[5] = v25;

    v20[2](v20, v22);
    v20[2](v20, v24);
    v27 = 2;
    do
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%d"), v17, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIImage imageNamed:](UIImage, "imageNamed:", v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v29)
        break;
      v20[2](v20, (uint64_t)v29);

      v27 = (v27 + 1);
    }
    while ((_DWORD)v27 != 1025);
  }
  v30 = (id)v38[5];

  _Block_object_dispose(&v37, 8);
  return v30;
}

void sub_185CE4CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIImageDeviceSpecificName()
{
  if (qword_1ECD798B8 != -1)
    dispatch_once(&qword_1ECD798B8, &__block_literal_global_1037_0);
  return (id)qword_1ECD798B0;
}

double *__RGBtoHSV(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  double v6;
  float v7;
  double v8;
  double v9;
  float v10;
  float v11;
  double v12;
  double v13;
  BOOL v14;
  double v15;
  double v16;

  if (a4 >= a5)
    v6 = a4;
  else
    v6 = a5;
  if (v6 < a6)
    v6 = a6;
  v7 = v6;
  v8 = v7;
  *a3 = v7;
  if (v7 == 0.0)
  {
    *result = NAN;
    *a2 = 0.0;
    *a3 = 0.0;
  }
  else
  {
    if (a4 <= a5)
      v9 = a4;
    else
      v9 = a5;
    if (v9 > a6)
      v9 = a6;
    v10 = v9;
    v11 = v7 - v10;
    *a2 = (float)(v11 / v7);
    v12 = v11;
    if (v8 == a4)
    {
      v13 = (a5 - a6) / v12;
    }
    else
    {
      v14 = v8 == a5;
      v15 = (a4 - a5) / v12 + 4.0;
      v13 = (a6 - a4) / v12 + 2.0;
      if (!v14)
        v13 = v15;
    }
    v16 = v13 * 60.0;
    if (v16 < 0.0)
      v16 = v16 + 360.0;
    *result = v16;
  }
  return result;
}

void compositeCGImageRefInRect(CGImage *a1, CGFloat a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, uint64_t a10, uint64_t a11, CGFloat a12)
{
  _QWORD *ContextStack;
  CGContext *v27;
  double v28;
  __int128 v29;
  CGFloat v30;
  double v31;
  CGAffineTransform transform;
  CGRect v34;
  CGRect v35;

  ContextStack = GetContextStack(0);
  if (*(int *)ContextStack < 1)
    v27 = 0;
  else
    v27 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  CGContextSaveGState(v27);
  CGContextSetAlpha(v27, a12);
  CGContextSetCompositeOperation();
  CGContextTranslateCTM(v27, a2, a3 + a5);
  v28 = -a5;
  CGContextScaleCTM(v27, a4 / a8, -a5 / a9);
  if (a5 > 0.0 && a4 > 0.0 && a11)
  {
    v29 = xmmword_18667DCB0;
    v30 = -1.0;
    v31 = 0.0;
    switch(a11)
    {
      case 1:
        break;
      case 2:
        v31 = a5 / a4;
        *((_QWORD *)&v29 + 1) = 0;
        *(double *)&v29 = -a4 / a5;
        a5 = 0.0;
        goto LABEL_16;
      case 3:
        v31 = v28 / a4;
        *((_QWORD *)&v29 + 1) = 0;
        *(double *)&v29 = a4 / a5;
        goto LABEL_15;
      case 4:
        v29 = xmmword_18666F250;
        a5 = 0.0;
        break;
      case 5:
        v30 = 1.0;
        a4 = 0.0;
        break;
      case 6:
        v31 = v28 / a4;
        *((_QWORD *)&v29 + 1) = 0;
        *(double *)&v29 = -a4 / a5;
        goto LABEL_16;
      case 7:
        v31 = a5 / a4;
        *((_QWORD *)&v29 + 1) = 0;
        *(double *)&v29 = a4 / a5;
        a5 = 0.0;
LABEL_15:
        a4 = 0.0;
LABEL_16:
        v30 = 0.0;
        break;
      default:
        v30 = *MEMORY[0x1E0C9BAA8];
        v31 = *(double *)(MEMORY[0x1E0C9BAA8] + 8);
        v29 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
        a4 = *(double *)(MEMORY[0x1E0C9BAA8] + 32);
        a5 = *(double *)(MEMORY[0x1E0C9BAA8] + 40);
        break;
    }
    transform.a = v30;
    transform.b = v31;
    *(_OWORD *)&transform.c = v29;
    transform.tx = a4;
    transform.ty = a5;
    CGContextConcatCTM(v27, &transform);
  }
  v34.origin.y = a7;
  v34.origin.x = a6;
  v34.size.width = a8;
  v34.size.height = a9;
  v35 = CGRectOffset(v34, -a6, -a7);
  CGContextDrawImage(v27, v35, a1);
  CGContextRestoreGState(v27);
}

void compositeCGImageRef(CGImage *a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, uint64_t a10)
{
  _QWORD *ContextStack;
  CGContext *v20;
  CGFloat v21;
  __int128 v22;
  CGFloat v23;
  double v24;
  CGFloat rect;
  CGAffineTransform transform;
  CGRect v27;

  ContextStack = GetContextStack(0);
  if (*(int *)ContextStack < 1)
    v20 = 0;
  else
    v20 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  rect = a7;
  v21 = a6;
  CGContextSaveGState(v20);
  CGContextSetAlpha(v20, a8);
  CGContextSetCompositeOperation();
  CGContextTranslateCTM(v20, a2 - a4, a5 + a3 + a7);
  CGContextScaleCTM(v20, 1.0, -1.0);
  if (a7 > 0.0 && a6 > 0.0 && a10)
  {
    v22 = xmmword_18667DCB0;
    v23 = -1.0;
    v24 = 0.0;
    switch(a10)
    {
      case 1:
        break;
      case 2:
        v24 = a7 / a6;
        *((_QWORD *)&v22 + 1) = 0;
        *(double *)&v22 = -a6 / a7;
        a7 = 0.0;
        goto LABEL_16;
      case 3:
        v24 = -a7 / a6;
        *((_QWORD *)&v22 + 1) = 0;
        *(double *)&v22 = a6 / a7;
        goto LABEL_15;
      case 4:
        v22 = xmmword_18666F250;
        a7 = 0.0;
        break;
      case 5:
        v23 = 1.0;
        a6 = 0.0;
        break;
      case 6:
        v24 = -a7 / a6;
        *((_QWORD *)&v22 + 1) = 0;
        *(double *)&v22 = -a6 / a7;
        goto LABEL_16;
      case 7:
        v24 = a7 / a6;
        *((_QWORD *)&v22 + 1) = 0;
        *(double *)&v22 = a6 / a7;
        a7 = 0.0;
LABEL_15:
        a6 = 0.0;
LABEL_16:
        v23 = 0.0;
        break;
      default:
        v23 = *MEMORY[0x1E0C9BAA8];
        v24 = *(double *)(MEMORY[0x1E0C9BAA8] + 8);
        v22 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
        a6 = *(double *)(MEMORY[0x1E0C9BAA8] + 32);
        a7 = *(double *)(MEMORY[0x1E0C9BAA8] + 40);
        break;
    }
    transform.a = v23;
    transform.b = v24;
    *(_OWORD *)&transform.c = v22;
    transform.tx = a6;
    transform.ty = a7;
    CGContextConcatCTM(v20, &transform);
  }
  v27.origin.x = a4;
  v27.origin.y = a5;
  v27.size.width = v21;
  v27.size.height = rect;
  CGContextDrawImage(v20, v27, a1);
  CGContextRestoreGState(v20);
}

BOOL _UIImageIsFilledSystemSymbolImage(void *a1)
{
  id v1;
  void *v2;
  int v3;
  id *v4;
  void *v5;
  _BOOL8 v6;

  v1 = a1;
  if (_UIIsSystemSymbolImage(v1))
  {
    _UIImageName(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = _UIIsPrivateSystemSymbolImage(v1);
    v4 = (id *)MEMORY[0x1E0D89798];
    if (!v3)
      v4 = (id *)MEMORY[0x1E0D89790];
    objc_msgSend(*v4, "allKeysForObject:", v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count") != 0;

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id _UIImageVariantName(void *a1, uint64_t a2)
{
  id v3;
  unsigned int v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  void *v18;
  unsigned int v19;
  int v20;
  void *v21;
  void *v22;
  const __CFString *v23;
  id v24;
  void *v26;
  unsigned int v27;

  v3 = a1;
  if ((unint64_t)objc_msgSend(v3, "length") < 6)
  {
    v4 = 0;
    if (a2)
      goto LABEL_27;
LABEL_36:
    v24 = v3;
    goto LABEL_43;
  }
  v4 = _UIImageVariantValueForName(v3);
  v5 = v3;
  v3 = v5;
  if ((unint64_t)objc_msgSend(v5, "length") >= 6)
  {
    v26 = v5;
    v27 = v4;
    objc_msgSend(v5, "componentsSeparatedByString:", CFSTR("."));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_opt_new();
    v8 = objc_msgSend(v6, "count");
    if (v8 - 1 >= 1)
    {
      v9 = v8;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      do
      {
        objc_msgSend(v6, "objectAtIndexedSubscript:", --v9);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = v13;
        if ((v10 & 1) == 0
          && ((objc_msgSend(v13, "isEqualToString:", CFSTR("circle")) & 1) != 0
           || (objc_msgSend(v14, "isEqualToString:", CFSTR("square")) & 1) != 0
           || (objc_msgSend(v14, "isEqualToString:", CFSTR("rectangle")) & 1) != 0))
        {
          v10 = 1;
        }
        else if ((v12 & 1) != 0 || (objc_msgSend(v14, "isEqualToString:", CFSTR("fill")) & 1) == 0)
        {
          if ((v11 & 1) != 0)
          {
            v11 = 1;
            goto LABEL_19;
          }
          if (!objc_msgSend(v14, "isEqualToString:", CFSTR("slash")))
          {
            v11 = 0;
            goto LABEL_19;
          }
          v11 = 1;
        }
        else
        {
          v12 = 1;
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v9);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v15);

LABEL_19:
      }
      while (v9 > 1);
    }
    v5 = v26;
    v4 = v27;
    v3 = v26;
    if (objc_msgSend(v7, "count"))
    {
      v16 = (void *)objc_msgSend(v6, "mutableCopy");
      if (objc_msgSend(v7, "count"))
      {
        v17 = 0;
        do
        {
          objc_msgSend(v7, "objectAtIndexedSubscript:", v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "removeObjectAtIndex:", objc_msgSend(v18, "integerValue"));

          ++v17;
        }
        while (v17 < objc_msgSend(v7, "count"));
      }
      objc_msgSend(v16, "componentsJoinedByString:", CFSTR("."));
      v3 = (id)objc_claimAutoreleasedReturnValue();

    }
  }

  if (!a2)
    goto LABEL_36;
LABEL_27:
  v19 = v4 & 0xFFFFFFF1;
  if ((a2 & 0xE) == 0)
    v19 = v4;
  v20 = v19 | a2;
  v21 = (void *)objc_msgSend(v3, "mutableCopy");
  v22 = v21;
  if ((v20 & 0x10000) != 0)
    objc_msgSend(v21, "appendString:", CFSTR(".slash"));
  if ((v20 & 2) != 0)
  {
    v23 = CFSTR(".circle");
    goto LABEL_39;
  }
  if ((v20 & 4) != 0)
  {
    v23 = CFSTR(".square");
    goto LABEL_39;
  }
  if ((v20 & 8) != 0)
  {
    v23 = CFSTR(".rectangle");
LABEL_39:
    objc_msgSend(v22, "appendString:", v23);
  }
  if ((v20 & 0x40000000) != 0)
    objc_msgSend(v22, "appendString:", CFSTR(".fill"));
  v24 = (id)objc_msgSend(v22, "copy");

LABEL_43:
  return v24;
}

uint64_t _UIImageVariantValueForName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  void *v9;
  void *v10;
  int v11;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") < 6)
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v1, "componentsSeparatedByString:", CFSTR("."));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "count");
    if (v3 - 1 >= 1)
    {
      v4 = v3;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        objc_msgSend(v2, "objectAtIndexedSubscript:", --v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = v9;
        if ((v8 & 1) != 0)
          break;
        if (objc_msgSend(v9, "isEqualToString:", CFSTR("circle")))
        {
          v5 |= 2uLL;
        }
        else if (objc_msgSend(v10, "isEqualToString:", CFSTR("square")))
        {
          v5 |= 4uLL;
        }
        else
        {
          if (!objc_msgSend(v10, "isEqualToString:", CFSTR("rectangle")))
            break;
          v5 |= 8uLL;
        }
        v8 = 1;
LABEL_20:

        if (v4 <= 1)
          goto LABEL_24;
      }
      if ((v7 & 1) != 0 || !objc_msgSend(v10, "isEqualToString:", CFSTR("fill")))
      {
        if ((v6 & 1) != 0)
        {
          v6 = 1;
        }
        else
        {
          v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("slash"));
          v6 = v11;
          if (v11)
            v5 |= 0x10000uLL;
        }
      }
      else
      {
        v5 |= 0x40000000uLL;
        v7 = 1;
      }
      goto LABEL_20;
    }
    v5 = 0;
LABEL_24:

  }
  return v5;
}

id UIImageGetPinstripe()
{
  return _UIImageWithName(CFSTR("UIPinstripe.png"));
}

id UIImageGetLCDBackground()
{
  void *v0;
  uint64_t v1;
  __CFString *v2;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if ((v1 & 0xFFFFFFFFFFFFFFFBLL) == 1)
    v2 = CFSTR("UILCDBackgroundT.png");
  else
    v2 = CFSTR("UILCDBackground.png");
  return _UIImageWithName(v2);
}

id UIImageGetPressedUnreadIndicator()
{
  return _UIImageWithName(CFSTR("UIImageNameStandaloneIndicatorDot.png"));
}

id UIImageGetPartialUnreadIndicator()
{
  return _UIImageWithName(CFSTR("UIImageNameStandaloneIndicatorPartialDot.png"));
}

id UIImageGetPartialPressedUnreadIndicator()
{
  return _UIImageWithName(CFSTR("UIImageNameStandaloneIndicatorPartialDot.png"));
}

id UIImageGetTableNext()
{
  return _UIImageWithName(CFSTR("UITableNext.png"));
}

id UIImageGetTableNextSelected()
{
  return _UIImageWithName(CFSTR("UITableNextSelected.png"));
}

id UIImageGetTableNextButton()
{
  return _UIImageWithName(CFSTR("UITableNextButton.png"));
}

id UIImageGetTableNextButtonPressed()
{
  return _UIImageWithName(CFSTR("UITableNextButtonPressed.png"));
}

id UIImageGetTableSelectionBackground()
{
  void *v0;
  void *v1;
  _QWORD *ContextStack;
  CGContext *v3;
  uint64_t v4;
  void *v5;
  CGRect v7;

  v0 = (void *)UIImageGetTableSelectionBackground_selectedBackgroundImage;
  if (!UIImageGetTableSelectionBackground_selectedBackgroundImage)
  {
    _UIGraphicsBeginImageContextWithOptions(1, 0, 1.0, 1.0, 1.0);
    +[UIColor tableCellDefaultSelectionTintColor](UIColor, "tableCellDefaultSelectionTintColor");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "set");

    ContextStack = GetContextStack(0);
    if (*(int *)ContextStack < 1)
      v3 = 0;
    else
      v3 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
    v7.origin.x = 0.0;
    v7.origin.y = 0.0;
    v7.size.width = 1.0;
    v7.size.height = 1.0;
    CGContextFillRect(v3, v7);
    _UIGraphicsGetImageFromCurrentImageContext(0);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)UIImageGetTableSelectionBackground_selectedBackgroundImage;
    UIImageGetTableSelectionBackground_selectedBackgroundImage = v4;

    v0 = (void *)UIImageGetTableSelectionBackground_selectedBackgroundImage;
  }
  return v0;
}

id UIImageGetTextFieldClearButton()
{
  return _GetTextFieldClearButton(0, 0);
}

id UIImageGetTextFieldClearButtonPressed()
{
  return _GetTextFieldClearButton((void *)1, 0);
}

id UIImageGetTextFieldClearButtonDisabled()
{
  return _GetTextFieldClearButton((void *)2, 0);
}

id UIImageGetContactAddButton()
{
  return _UIImageWithName(CFSTR("UIButtonBarContactAdd.png"));
}

id UIImageGetContactAddButtonPressed()
{
  return _UIImageWithName(CFSTR("UIButtonBarContactAddPressed.png"));
}

id UIImageGetNavigationBarAddButton()
{
  return _UIImageWithName(CFSTR("UINavigationBarAddButton.png"));
}

id UIImageGetNavigationBarBackArrow()
{
  return _UIImageWithName(CFSTR("UINavigationBarBackArrow.png"));
}

id UIImageGetButtonBarDefaultBackground()
{
  return _UIImageWithName(CFSTR("UIButtonBarDefaultBackground.png"));
}

id UIImageGetButtonBarPressedIndicator()
{
  return _UIImageWithName(CFSTR("UIButtonBarPressedIndicator.png"));
}

id UIImageGetBlackCloseButton()
{
  return _UIImageWithName(CFSTR("UIBlackCloseButton.png"));
}

id UIImageGetBlackCloseButtonPressed()
{
  return _UIImageWithName(CFSTR("UIBlackCloseButtonPressed.png"));
}

id _UIImageGetActivityBookmark()
{
  return _UIImageWithName(CFSTR("UIActivityBookmark.png"));
}

id _UIImageGetSearchGlass()
{
  return _UIImageWithName(CFSTR("UISearchFieldIcon.png"));
}

id _UIImageGetListIcon()
{
  return _UIImageWithName(CFSTR("UIButtonBarListIcon.png"));
}

void draw9PartSlice(void *a1, double *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8)
{
  CGFloat v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CGRect slice;
  CGRect remainder;
  CGRect v37;

  remainder.origin.x = a4;
  remainder.origin.y = a5;
  remainder.size.width = a6;
  remainder.size.height = a7;
  memset(&slice, 0, sizeof(slice));
  v15 = a2[2];
  v16 = a1;
  v37.origin.x = a4;
  v37.origin.y = a5;
  v37.size.width = a6;
  v37.size.height = a7;
  CGRectDivide(v37, &slice, &remainder, v15, CGRectMinXEdge);
  draw9PartPart(v16, a3, *a2, a2[1], a2[2], a2[3], slice.origin.x, slice.origin.y, slice.size.width, slice.size.height, v17, v18, v19, v20, v21, v22, *(uint64_t *)&a8);
  CGRectDivide(remainder, &slice, &remainder, a2[10], CGRectMaxXEdge);
  draw9PartPart(v16, a3, a2[4], a2[5], a2[6], a2[7], remainder.origin.x, remainder.origin.y, remainder.size.width, remainder.size.height, v23, v24, v25, v26, v27, v28, *(uint64_t *)&a8);
  draw9PartPart(v16, a3, a2[8], a2[9], a2[10], a2[11], slice.origin.x, slice.origin.y, slice.size.width, slice.size.height, v29, v30, v31, v32, v33, v34, *(uint64_t *)&a8);

}

void draw9PartPart(void *a1, uint64_t a2, double a3, double a4, double a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  id v25;
  BOOL v26;
  _QWORD *ContextStack;
  CGContext *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v34;
  double v35;
  id v36;
  CGRect v37;

  v25 = a1;
  v26 = a5 == 1.0 || a6 == 1.0;
  v36 = v25;
  if (v26)
  {
    objc_msgSend(v25, "compositeToRect:fromRect:operation:fraction:", 2, a7, a8, a9, a10, a3, a4, a5, a6, a17);
  }
  else
  {
    ContextStack = GetContextStack(0);
    if (*(int *)ContextStack < 1)
      v28 = 0;
    else
      v28 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
    CGContextSaveGState(v28);
    v35 = a7;
    v37.origin.x = a7;
    v37.origin.y = a8;
    v29 = a9;
    v37.size.width = a9;
    v30 = a10;
    v37.size.height = a10;
    CGContextClipToRect(v28, v37);
    v34 = a8 + a10;
    if (a8 < a8 + v30)
    {
      v31 = v35 + v29;
      do
      {
        if (v35 < v31)
        {
          v32 = v35;
          do
          {
            objc_msgSend(v36, "compositeToRect:fromRect:operation:fraction:", a2, v32, a8, a5, a6, a3, a4, a5, a6, a17);
            v32 = a5 + v32;
          }
          while (v32 < v31);
        }
        a8 = a6 + a8;
      }
      while (a8 < v34);
    }
    CGContextRestoreGState(v28);
  }

}

void __destructor_8_sb8_sb16(uint64_t a1)
{

}

void sub_185CED220(_Unwind_Exception *a1)
{
  uint64_t v1;

  __destructor_8_sb8_sb16(v1);
  _Unwind_Resume(a1);
}

__CFString *_UIDataSourceUpdateActionDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 3)
    return off_1E16CB1A8[a1 - 1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unhandled action: %ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

unint64_t _UISceneLifecycleStateIsInTaskSwitcher(void *a1)
{
  return ((unint64_t)objc_msgSend(a1, "deactivationReasons") >> 3) & 1;
}

uint64_t _UISceneLifecycleCompositeActionMaskFromStateToState(uint64_t a1, uint64_t a2)
{
  return _UISceneLifecycleCompositeActionMaskFromStateToState__staticStateMap[4 * a1 + 5 + a2];
}

uint64_t _UISceneLifecycleCompositeActionMaskContainsActionType(unsigned int a1, char a2)
{
  return (a1 >> a2) & 1;
}

const __CFString *_UISceneLifecycleActionDescription(unsigned int a1)
{
  if (a1 > 6)
    return &stru_1E16EDF20;
  else
    return off_1E16CB1E8[a1];
}

id _UISceneLifecycleCompositeActionMaskComponentDescriptionComponents(int a1)
{
  id v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = __Block_byref_object_copy__109;
  v9 = __Block_byref_object_dispose__109;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___UISceneLifecycleCompositeActionMaskComponentDescriptionComponents_block_invoke;
  v4[3] = &unk_1E16CB1C8;
  v4[4] = &v5;
  _UIScenePerformActionsWithLifecycleActionMask(a1, v4);
  v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_185CED3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CEE4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185CEF088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double UIInterfaceDefaultCornerRadius()
{
  return 4.5;
}

BOOL _UIUserInterfaceStyleIsDarkUI(uint64_t a1)
{
  return a1 == 2 || a1 == 1000;
}

unint64_t _UISSlotAccessibilityContrastFromAccessibilityContrast(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  NSObject *v3;
  NSObject *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  v1 = a1;
  v8 = *MEMORY[0x1E0C80C00];
  if (a1 >= 2)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        v6 = 134217984;
        v7 = v1;
        _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpected accessibility contrast for slot: %ld", (uint8_t *)&v6, 0xCu);
      }

    }
    else
    {
      v2 = _UISSlotAccessibilityContrastFromAccessibilityContrast___s_category;
      if (!_UISSlotAccessibilityContrastFromAccessibilityContrast___s_category)
      {
        v2 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v2, (unint64_t *)&_UISSlotAccessibilityContrastFromAccessibilityContrast___s_category);
      }
      v3 = *(NSObject **)(v2 + 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v6 = 134217984;
        v7 = v1;
        _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "Unexpected accessibility contrast for slot: %ld", (uint8_t *)&v6, 0xCu);
      }
    }
    return 0;
  }
  return v1;
}

uint64_t _UISSlotDisplayRangeFromDisplayGamut(uint64_t a1)
{
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1 == 1)
      return 2;
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        v6 = 134217984;
        v7 = a1;
        _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpected display gamut for slot: %ld", (uint8_t *)&v6, 0xCu);
      }

    }
    else
    {
      v3 = _UISSlotDisplayRangeFromDisplayGamut___s_category;
      if (!_UISSlotDisplayRangeFromDisplayGamut___s_category)
      {
        v3 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v3, (unint64_t *)&_UISSlotDisplayRangeFromDisplayGamut___s_category);
      }
      v4 = *(NSObject **)(v3 + 8);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v6 = 134217984;
        v7 = a1;
        _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "Unexpected display gamut for slot: %ld", (uint8_t *)&v6, 0xCu);
      }
    }
  }
  return 1;
}

uint64_t _UISSlotDisplayScaleFromDisplayScale(double a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v5;
  NSObject *v6;
  NSObject *v8;
  int v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = llround(a1);
  if (v1 >= 7)
    v2 = 7;
  else
    v2 = v1;
  if (v1)
    v3 = v2;
  else
    v3 = 1;
  if ((_DWORD)v3 != v1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        v9 = 134217984;
        v10 = a1;
        _os_log_fault_impl(&dword_185066000, v8, OS_LOG_TYPE_FAULT, "Unexpected display scale for slot: %f", (uint8_t *)&v9, 0xCu);
      }

    }
    else
    {
      v5 = _UISSlotDisplayScaleFromDisplayScale___s_category;
      if (!_UISSlotDisplayScaleFromDisplayScale___s_category)
      {
        v5 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v5, (unint64_t *)&_UISSlotDisplayScaleFromDisplayScale___s_category);
      }
      v6 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v9 = 134217984;
        v10 = a1;
        _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "Unexpected display scale for slot: %f", (uint8_t *)&v9, 0xCu);
      }
    }
  }
  return v3;
}

unint64_t _UISSlotLayoutDirectionFromTraitEnvironmentLayoutDirection(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  NSObject *v3;
  NSObject *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  v1 = a1;
  v8 = *MEMORY[0x1E0C80C00];
  if (a1 >= 2)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        v6 = 134217984;
        v7 = v1;
        _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpected layout direction for slot: %ld", (uint8_t *)&v6, 0xCu);
      }

    }
    else
    {
      v2 = _UISSlotLayoutDirectionFromTraitEnvironmentLayoutDirection___s_category;
      if (!_UISSlotLayoutDirectionFromTraitEnvironmentLayoutDirection___s_category)
      {
        v2 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v2, (unint64_t *)&_UISSlotLayoutDirectionFromTraitEnvironmentLayoutDirection___s_category);
      }
      v3 = *(NSObject **)(v2 + 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v6 = 134217984;
        v7 = v1;
        _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "Unexpected layout direction for slot: %ld", (uint8_t *)&v6, 0xCu);
      }
    }
    return 0;
  }
  return v1;
}

unint64_t _UISSlotLegibilityWeightFromLegibilityWeight(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  NSObject *v3;
  NSObject *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  v1 = a1;
  v8 = *MEMORY[0x1E0C80C00];
  if (a1 >= 2)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        v6 = 134217984;
        v7 = v1;
        _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpected legibility weight for slot: %ld", (uint8_t *)&v6, 0xCu);
      }

    }
    else
    {
      v2 = _UISSlotLegibilityWeightFromLegibilityWeight___s_category;
      if (!_UISSlotLegibilityWeightFromLegibilityWeight___s_category)
      {
        v2 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v2, (unint64_t *)&_UISSlotLegibilityWeightFromLegibilityWeight___s_category);
      }
      v3 = *(NSObject **)(v2 + 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v6 = 134217984;
        v7 = v1;
        _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "Unexpected legibility weight for slot: %ld", (uint8_t *)&v6, 0xCu);
      }
    }
    return 0;
  }
  return v1;
}

uint64_t _UISSlotUserInterfaceStyleFromUserInterfaceStyle(uint64_t a1)
{
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1 != 1)
  {
    if (a1 == 2)
      return 1;
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        v6 = 134217984;
        v7 = a1;
        _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpected user interface style for slot: %ld", (uint8_t *)&v6, 0xCu);
      }

    }
    else
    {
      v3 = _UISSlotUserInterfaceStyleFromUserInterfaceStyle___s_category;
      if (!_UISSlotUserInterfaceStyleFromUserInterfaceStyle___s_category)
      {
        v3 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v3, (unint64_t *)&_UISSlotUserInterfaceStyleFromUserInterfaceStyle___s_category);
      }
      v4 = *(NSObject **)(v3 + 8);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v6 = 134217984;
        v7 = a1;
        _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "Unexpected user interface style for slot: %ld", (uint8_t *)&v6, 0xCu);
      }
    }
  }
  return 0;
}

UIImage *_UIImageForView(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __IOSurface *v9;
  UIImage *v10;
  _QWORD v12[4];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return (UIImage *)0;
  v13[0] = CFSTR("src-rect");
  v1 = (void *)MEMORY[0x1E0CB3B18];
  v2 = a1;
  objc_msgSend(v2, "bounds");
  v12[0] = v3;
  v12[1] = v4;
  v12[2] = v5;
  v12[3] = v6;
  objc_msgSend(v1, "valueWithBytes:objCType:", v12, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13[1] = CFSTR("dst-gamut");
  v14[0] = v7;
  v14[1] = &unk_1E1A97EA8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = _UIRenderView(v2, v8, &__block_literal_global_453);

  if (!v9)
    return (UIImage *)0;
  v10 = -[UIImage initWithIOSurface:]([UIImage alloc], "initWithIOSurface:", v9);
  CFRelease(v9);
  return v10;
}

CGImage *_UIBezierPathAroundViewAlpha(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  CGImage *v10;
  CGImage *v11;
  unint64_t Width;
  unint64_t Height;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGColorSpace *DeviceGray;
  CGContext *v19;
  id v20;
  id v21;
  CGImageRef Image;
  uint64_t v23;
  const CGPath *v24;
  double v25;
  CGFloat v26;
  double v27;
  size_t v28;
  CGAffineTransform v30;
  _QWORD v31[4];
  _QWORD v32[2];
  _QWORD v33[3];
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  v33[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_6;
  v32[0] = CFSTR("src-rect");
  v3 = (void *)MEMORY[0x1E0CB3B18];
  objc_msgSend(v1, "bounds");
  v31[0] = v4;
  v31[1] = v5;
  v31[2] = v6;
  v31[3] = v7;
  objc_msgSend(v3, "valueWithBytes:objCType:", v31, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v32[1] = CFSTR("dst-gamut");
  v33[0] = v8;
  v33[1] = &unk_1E1A97EA8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, v32, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = _UIRenderView(v2, v9, &__block_literal_global_453);

  if (!v10)
    goto LABEL_9;
  v11 = _UICreateCGImageFromIOSurfaceWithOptions(v10, 0);
  CFRelease(v10);
  if (!v11)
  {
LABEL_6:
    v10 = 0;
    goto LABEL_9;
  }
  Width = CGImageGetWidth(v11);
  Height = CGImageGetHeight(v11);
  v14 = *MEMORY[0x1E0C9D538];
  v15 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v16 = (double)Width;
  v17 = (double)Height;
  DeviceGray = CGColorSpaceCreateDeviceGray();
  v19 = CGBitmapContextCreate(0, Width, Height, 8uLL, Width, DeviceGray, 0);
  +[UIColor blackColor](UIColor, "blackColor");
  v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  CGContextSetFillColorWithColor(v19, (CGColorRef)objc_msgSend(v20, "CGColor"));

  v34.origin.x = v14;
  v34.origin.y = v15;
  v34.size.width = v16;
  v34.size.height = v17;
  CGContextFillRect(v19, v34);
  v35.origin.x = v14;
  v35.origin.y = v15;
  v35.size.width = v16;
  v35.size.height = v17;
  CGContextClipToMask(v19, v35, v11);
  +[UIColor whiteColor](UIColor, "whiteColor");
  v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  CGContextSetFillColorWithColor(v19, (CGColorRef)objc_msgSend(v21, "CGColor"));

  v36.origin.x = v14;
  v36.origin.y = v15;
  v36.size.width = v16;
  v36.size.height = v17;
  CGContextFillRect(v19, v36);
  Image = CGBitmapContextCreateImage(v19);
  CGContextRelease(v19);
  CGColorSpaceRelease(DeviceGray);
  v23 = CGPathCreateWithThresholdedImage();
  if (v23)
  {
    v24 = (const CGPath *)v23;
    +[UIBezierPath bezierPathWithCGPath:](UIBezierPath, "bezierPathWithCGPath:", v23);
    v10 = (CGImage *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bounds");
    v25 = CGRectGetWidth(v37);
    v26 = v25 / (double)CGImageGetWidth(v11);
    objc_msgSend(v2, "bounds");
    v27 = CGRectGetHeight(v38);
    v28 = CGImageGetHeight(v11);
    CGAffineTransformMakeScale(&v30, v26, v27 / (double)v28);
    -[CGImage applyTransform:](v10, "applyTransform:", &v30);
    CGPathRelease(v24);
  }
  else
  {
    v10 = 0;
  }
  CFRelease(Image);
  CFRelease(v11);
LABEL_9:

  return v10;
}

id GetTintedToolbarBackgroundImage(int a1, void *a2)
{
  void *v2;
  CGFloat v3;
  id v4;
  void *v5;
  int *ContextStack;

  v2 = 0;
  if (a1 >= 1 && a2)
  {
    v3 = (double)a1;
    v4 = a2;
    _UIGraphicsBeginImageContextWithOptions(0, 0, 1.0, v3, 0.0);
    objc_msgSend(v4, "colorWithAlphaComponent:", 1.0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "setFill");
    UIRectFillUsingOperation(1, 0.0, 0.0, 1.0, v3);
    _UIGraphicsGetImageFromCurrentImageContext(0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    ContextStack = (int *)GetContextStack(0);
    PopContextFromStack(ContextStack);
  }
  return v2;
}

id GetTintedPromptTextColor(void *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;

  v9 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v6 = 0.0;
  if (a1)
  {
    objc_msgSend(a1, "getRed:green:blue:alpha:", &v9, &v8, &v7, &v6);
    v1 = v6;
    v2 = v9 * 0.4;
    v3 = v8 * 0.4;
    v4 = v7 * 0.4;
  }
  else
  {
    v1 = 0.0;
    v4 = 0.0;
    v3 = 0.0;
    v2 = 0.0;
  }
  +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v2, v3, v4, v1, *(_QWORD *)&v6, *(_QWORD *)&v7, *(_QWORD *)&v8, *(_QWORD *)&v9);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t _UIGetTintedCircularButtonImage()
{
  return 0;
}

UIColor *_UIGetTintedCircularButtonDefaultRedColor()
{
  return +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.643137255, 0.0352941176, 0.109803922, 1.0);
}

UIColor *_UIGetTintedCircularButtonDefaultGreenColor()
{
  return +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.0235294118, 0.701960784, 0.0, 1.0);
}

UIColor *_UIGetTintedCircularButtonDefaultBlueColor()
{
  return +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.215686275, 0.349019608, 0.866666667, 1.0);
}

uint64_t _UIGetTintedCircularButtonImageOfType()
{
  return 0;
}

uint64_t _UIGetTintedBackButtonImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarBackgroundImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarSelectedBackgroundImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarDividerImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarFillSelectedImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarLeftCapSelectedImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarRightCapSelectedImage()
{
  return 0;
}

id _GetLightenedTintColor(void *a1)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;

  if (a1)
  {
    v5 = 0.0;
    v3 = 0.0;
    v4 = 0.0;
    v2 = 0;
    objc_msgSend(a1, "getRed:green:blue:alpha:", &v5, &v4, &v3, &v2);
    v5 = v5 * 0.6 + 0.4;
    v3 = v3 * 0.6 + 0.4;
    v4 = v4 * 0.6 + 0.4;
    +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:");
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

id _UIImagePressedTintColor(void *a1, int a2)
{
  id v3;
  void *v4;
  double v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  id v16;
  double v17;
  float v18;
  double v19;
  float64x2_t v20;
  float64x2_t v26;
  unint64_t v27;
  double v28;
  float v29;
  double v30;
  float64x2_t v33;
  void *v34;
  uint64_t v36;
  float64x2_t v37;
  double v38;

  v3 = a1;
  v4 = v3;
  if (a2)
  {
    v38 = 0.0;
    v36 = 0;
    v37 = 0uLL;
    if (v3)
    {
      objc_msgSend(v3, "getRed:green:blue:alpha:", &v38, &v37.f64[1], &v37, &v36);
      v5 = v38;
      v6 = v37;
    }
    else
    {
      v6 = 0uLL;
      v5 = 0.0;
    }
    v7 = v5 + v6.f64[1] + v6.f64[0];
    v8 = 0.03;
    if (3.0 - v7 >= 0.3)
      v8 = (3.0 - v7) * 0.1;
    if (a2 == 3 || a2 == 1)
      v10 = v8;
    else
      v10 = 0.0;
    v11 = v5 / v7 * v10;
    if (v10 >= v11)
      v11 = v10;
    v12 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
    v13 = vmulq_n_f64(vdivq_f64(v6, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7, 0)), v10);
    v14 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v13, v12), (int8x16_t)v13, (int8x16_t)v12);
    if (a2 == 1)
    {
      v38 = fmax(v5 - v11, 0.0);
      v15 = vmaxnmq_f64(vsubq_f64(v6, v14), (float64x2_t)0);
    }
    else
    {
      if (a2 == 2)
      {
        v17 = v5 * 0.6;
        v18 = (1.0 - v5) / 0.56;
        v19 = v17 + (1.0 - fminf(v18, 1.0)) * 0.4 - v11;
        if (v19 < 0.0)
          v19 = 0.0;
        v38 = v19;
        v20 = vmulq_f64(v6, (float64x2_t)vdupq_n_s64(0x3FE3333333333333uLL));
        __asm
        {
          FMOV            V4.2D, #1.0
          FMOV            V5.2S, #1.0
        }
        v26 = vsubq_f64(_Q4, vcvtq_f64_f32(vminnm_f32(vcvt_f32_f64(vdivq_f64(vsubq_f64(_Q4, v6), (float64x2_t)vdupq_n_s64(0x3FE1EB851EB851ECuLL))), _D5)));
        v27 = 0x3FD999999999999ALL;
      }
      else
      {
        if (a2 != 3)
        {
LABEL_27:
          +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v36, *(_OWORD *)&v37, *(_QWORD *)&v38);
          v16 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_28;
        }
        v28 = v5 * 0.3;
        v29 = (1.0 - v5) / 0.46;
        v30 = v28 + (1.0 - fminf(v29, 1.0)) * 0.7 - v11;
        if (v30 < 0.0)
          v30 = 0.0;
        v38 = v30;
        v20 = vmulq_f64(v6, (float64x2_t)vdupq_n_s64(0x3FD3333333333334uLL));
        __asm
        {
          FMOV            V4.2D, #1.0
          FMOV            V5.2S, #1.0
        }
        v26 = vsubq_f64(_Q4, vcvtq_f64_f32(vminnm_f32(vcvt_f32_f64(vdivq_f64(vsubq_f64(_Q4, v6), (float64x2_t)vdupq_n_s64(0x3FDD70A3D70A3D70uLL))), _D5)));
        v27 = 0x3FE6666666666666;
      }
      v33 = vsubq_f64(vaddq_f64(v20, vmulq_f64(v26, (float64x2_t)vdupq_n_s64(v27))), v14);
      v15 = (float64x2_t)vbicq_s8((int8x16_t)v33, (int8x16_t)vcltzq_f64(v33));
    }
    v37 = v15;
    goto LABEL_27;
  }
  v16 = v3;
LABEL_28:
  v34 = v16;

  return v34;
}

void sub_185CF26E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t _DecrementImageUsage(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (qword_1ECD78B40 != -1)
      dispatch_once(&qword_1ECD78B40, &__block_literal_global_396);
    objc_msgSend((id)qword_1ECD78B38, "removeObject:", v1);
    if (qword_1ECD78B40 != -1)
      dispatch_once(&qword_1ECD78B40, &__block_literal_global_396);
    result = objc_msgSend((id)qword_1ECD78B38, "containsObject:", v1);
    if ((result & 1) == 0)
    {
      if (qword_1ECD78B50 != -1)
        dispatch_once(&qword_1ECD78B50, &__block_literal_global_398);
      objc_msgSend((id)qword_1ECD78B48, "removeObjectForKey:", v1);
      if (qword_1ECD78B60 != -1)
        dispatch_once(&qword_1ECD78B60, &__block_literal_global_400);
      return objc_msgSend((id)qword_1ECD78B58, "removeObjectForKey:", v1);
    }
  }
  return result;
}

uint64_t isRectInBoundingPathCornerWithMinimumPadding(__int128 *a1, int64x2_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8)
{
  double v11;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  char v28;
  char v29;
  double v30;
  double v31;
  double v32;
  double v33;
  __double2 v34;
  __int128 v35;
  unint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  __double2 v41;
  __int128 v42;
  double v43;
  double v44;
  double v45;
  double v46;
  __double2 v47;
  __int128 v48;
  double v49;
  double v50;
  double v51;
  double v52;
  __double2 v53;
  __int128 v54;
  char v55;
  char v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  char v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  int64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  int64_t v75;
  int64_t v76;
  char v77;
  unint64_t v79;
  int64_t v80;
  int64_t v81;
  char v82;
  double v83;
  double v84;
  double v85;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v11 = a6;
  v14 = a4 + a6;
  v15 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a8, 0);
  v16 = (float64x2_t)vdupq_n_s64(0x3FF921FB54442D18uLL);
  v17 = vmulq_f64(vaddq_f64(v15, vcvtq_f64_s64(*a2)), v16);
  v18 = a5 + a7;
  v19 = vmulq_f64(vaddq_f64(v15, vcvtq_f64_s64(a2[1])), v16);
  v20 = ceil(0.5* vaddq_f64(vaddq_f64(vaddq_f64(v17, (float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1)), v19), (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)).f64[0]);
  if (v20 < 8.0)
    v20 = 8.0;
  v21 = (double)(unint64_t)v20 * 0.125;
  v22 = vcvtpd_u64_f64(v21);
  if (v22)
  {
    v23 = 0;
    v24 = 0.785398163 / (double)(unint64_t)ceil(v21);
    v84 = v11;
    v85 = a7;
    v83 = v24;
LABEL_5:
    v25 = v24 * (double)v23;
    if (a3 == 1)
    {
      v26 = 0;
      goto LABEL_11;
    }
    v27 = 0.0;
    v28 = 1;
    while (1)
    {
      v29 = v28;
      v30 = (double)a2[1].i64[0];
      v31 = v14 - v30;
      v32 = v18 - v30;
      v33 = v30 + a8;
      v34 = __sincos_stret(v25 + v27);
      v35 = a1[1];
      v92 = *a1;
      v93 = v35;
      v94 = a1[2];
      v95 = *((_QWORD *)a1 + 6);
      if ((_UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, llround(v31 + v34.__cosval * v33), llround(v32 + v34.__sinval * v33)) & 1) == 0)return 0;
      v28 = 0;
      v27 = 0.785398163;
      if ((v29 & 1) == 0)
      {
        v26 = 2;
        v36 = 2;
        if (a3 == 2)
          goto LABEL_14;
LABEL_11:
        while (1)
        {
          v37 = (double)a2->i64[1];
          v38 = a4 + v37;
          v39 = v18 - v37;
          v40 = v37 + a8;
          v41 = __sincos_stret(v25 + (double)v26 * 0.785398163);
          v42 = a1[1];
          v92 = *a1;
          v93 = v42;
          v94 = a1[2];
          v95 = *((_QWORD *)a1 + 6);
          if ((_UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, llround(v38 + v40 * v41.__cosval), llround(v39 + v40 * v41.__sinval)) & 1) == 0)return 0;
          if (++v26 == 4)
          {
            v36 = 4;
            if (a3 == 8)
              goto LABEL_18;
LABEL_14:
            while (1)
            {
              v43 = (double)a2->i64[0];
              v44 = a4 + v43;
              v45 = a5 + v43;
              v46 = v43 + a8;
              v47 = __sincos_stret(v25 + (double)v36 * 0.785398163);
              v48 = a1[1];
              v92 = *a1;
              v93 = v48;
              v94 = a1[2];
              v95 = *((_QWORD *)a1 + 6);
              if ((_UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, llround(v44 + v46 * v47.__cosval), llround(v45 + v46 * v47.__sinval)) & 1) == 0)return 0;
              if (++v36 == 6)
              {
                if (a3 != 4)
                {
                  v26 = 6;
LABEL_18:
                  do
                  {
                    v49 = (double)a2[1].i64[1];
                    v50 = v14 - v49;
                    v51 = a5 + v49;
                    v52 = v49 + a8;
                    v53 = __sincos_stret(v25 + (double)v26 * 0.785398163);
                    v54 = a1[1];
                    v92 = *a1;
                    v93 = v54;
                    v94 = a1[2];
                    v95 = *((_QWORD *)a1 + 6);
                    if ((_UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, llround(v50 + v52 * v53.__cosval), llround(v51 + v52 * v53.__sinval)) & 1) == 0)return 0;
                  }
                  while (++v26 != 8);
                }
                ++v23;
                v11 = v84;
                a7 = v85;
                v24 = v83;
                if (v23 != v22)
                  goto LABEL_5;
                goto LABEL_21;
              }
            }
          }
        }
      }
    }
  }
  else
  {
LABEL_21:
    v55 = 1;
    v56 = 3;
    switch(a3)
    {
      case 1:
        break;
      case 2:
        v55 = 0;
        v56 = 9;
        break;
      case 4:
        v56 = 6;
        break;
      case 8:
        v55 = 0;
        v56 = 12;
        break;
      default:
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIRectEdge edgesForCorner(const UIRectCorner)");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "handleFailureInFunction:file:lineNumber:description:", v58, CFSTR("_UIComplexBoundingPath.m"), 709, CFSTR("Invalid UIRectCorner value (%ld)"), a3);

        v56 = 0;
        v55 = 1;
        break;
    }
    v88 = *a1;
    v89 = a1[1];
    v90 = a1[2];
    v91 = *((_QWORD *)a1 + 6);
    v60 = a2->i64[0];
    v59 = a2->i64[1];
    v62 = a2[1].i64[0];
    v61 = a2[1].i64[1];
    if (v11 > 0.0)
    {
      if ((v56 & 1) != 0)
      {
        v64 = llround(a4 + (double)v60);
        v65 = llround(a5 - a8);
        v66 = llround(v14 - (double)v61);
        while (v64 <= v66)
        {
          v92 = v88;
          v93 = v89;
          v94 = v90;
          v95 = v91;
          v67 = _UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, v64, v65);
          v64 += v68;
          if ((v67 & 1) == 0)
            return 0;
        }
      }
      if ((v56 & 4) != 0)
      {
        v69 = llround(a4 + (double)v59);
        v70 = llround(v18 + a8);
        v71 = llround(v14 - (double)v62);
        while (v69 <= v71)
        {
          v92 = v88;
          v93 = v89;
          v94 = v90;
          v95 = v91;
          v72 = _UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, v69, v70);
          v69 += v73;
          if ((v72 & 1) == 0)
            return 0;
        }
      }
    }
    if (a7 <= 0.0)
      return 1;
    if ((v56 & 2) != 0)
    {
      v74 = llround(a4 - a8);
      v75 = llround(a5 + (double)v60);
      v76 = llround(v18 - (double)v59);
      while (v75 <= v76)
      {
        v92 = v88;
        v93 = v89;
        v94 = v90;
        v95 = v91;
        v77 = _UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, v74, v75++);
        if ((v77 & 1) == 0)
          return 0;
      }
    }
    if ((v55 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v79 = llround(v14 + a8);
      v80 = llround(a5 + (double)v61);
      v81 = llround(v18 - (double)v62);
      do
      {
        v63 = v80 > v81;
        if (v80 > v81)
          break;
        v92 = v88;
        v93 = v89;
        v94 = v90;
        v95 = v91;
        v82 = _UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, v79, v80++);
      }
      while ((v82 & 1) != 0);
    }
  }
  return v63;
}

double pointOnRectClosestToCorner(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double MinX;
  double v11;
  void *v12;
  void *v13;
  double MaxX;
  CGRect v16;
  CGRect v17;

  switch(a1)
  {
    case 1:
      MinX = CGRectGetMinX(*(CGRect *)&a2);
      goto LABEL_4;
    case 2:
      MinX = CGRectGetMaxX(*(CGRect *)&a2);
LABEL_4:
      v11 = MinX;
      v16.origin.x = a2;
      v16.origin.y = a3;
      v16.size.width = a4;
      v16.size.height = a5;
      CGRectGetMinY(v16);
      return v11;
    case 4:
      MaxX = CGRectGetMinX(*(CGRect *)&a2);
      goto LABEL_8;
    case 8:
      MaxX = CGRectGetMaxX(*(CGRect *)&a2);
LABEL_8:
      v11 = MaxX;
      v17.origin.x = a2;
      v17.origin.y = a3;
      v17.size.width = a4;
      v17.size.height = a5;
      CGRectGetMaxY(v17);
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGPoint pointOnRectClosestToCorner(CGRect, UIRectCorner)");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("_UIComplexBoundingPath.m"), 837, CFSTR("Invalid UIRectCorner value (%ld)"), a1);

      v11 = *MEMORY[0x1E0C9D538];
      break;
  }
  return v11;
}

double testRectForPointOnArcInCorner(uint64_t a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  void *v9;

  switch(a6)
  {
    case 1:
      a2 = (double)a1;
      break;
    case 2:
      a2 = (double)a1 - a4;
      break;
    case 4:
      a2 = (double)a1;
      break;
    case 8:
      a2 = (double)a1 - a4;
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGRect testRectForPointOnArcInCorner(CGRect, _UIIntegralPoint, UIRectCorner)");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("_UIComplexBoundingPath.m"), 859, CFSTR("Invalid UIRectCorner value (%ld)"), a6);

      break;
  }
  return a2;
}

double _scrollRange(void *a1)
{
  id v1;
  double v2;
  double v3;

  v1 = a1;
  objc_msgSend(v1, "contentInset");
  v3 = -v2;
  objc_msgSend(v1, "contentSize");
  objc_msgSend(v1, "bounds");

  return v3;
}

unint64_t _UIRectCornerConvertedFromOrientationToPortrait(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result != -1)
  {
    switch(a2)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = __rbit32(result) >> 28;
        break;
      case 3:
        v2 = (4 * (int)result) & 8 | (2 * (result & 1)) | (result >> 2) & 1;
        v3 = (result >> 1) & 4;
        goto LABEL_8;
      case 4:
        v2 = (4 * (result & 1)) & 0xF7 | (result >> 1) & 1 | (8 * ((result >> 2) & 1));
        v3 = (result >> 2) & 2;
LABEL_8:
        result = v2 | v3;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

double _UIDirectionVectorForCorner(uint64_t a1)
{
  double result;
  void *v3;
  void *v4;

  result = 1.0;
  switch(a1)
  {
    case 1:
    case 4:
      return result;
    case 2:
      result = -1.0;
      break;
    case 8:
      result = -1.0;
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", 1.0, 1.0);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGVector _UIDirectionVectorForCorner(const UIRectCorner)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIBoundingPath.m"), 150, CFSTR("Invalid UIRectCorner value (%ld)"), a1);

      result = 0.0;
      break;
  }
  return result;
}

void sub_185CF6D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIComputeSkipRegionForBoundingPathData(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t (**v5)(id, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a3;
  if (!a2)
  {
    v7 = 0;
    v8 = 1;
    v9 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
    v10 = 0x7FFFFFFFFFFFFFFFLL;
    v14 = v7;
    goto LABEL_22;
  }
  v6 = 0;
  v7 = 0;
  v8 = 1;
  v9 = 0x7FFFFFFFFFFFFFFFLL;
  v10 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    if (a1)
    {
      v11 = 0;
      do
      {
        if (v10 == 0x7FFFFFFFFFFFFFFFLL)
          v12 = v7;
        else
          v12 = v10;
        v13 = v6 - v12;
        if ((v8 & 1) == 0)
        {
          v12 = v10;
          v13 = v9;
        }
        if (v6 != v7)
        {
          v10 = v12;
          v9 = v13;
          v8 = 1;
        }
        if ((v5[2](v5, v11, v6) & 1) == 0)
        {
          if (v9 != 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_27;
          v8 = 0;
        }
        ++v11;
        v7 = v6;
      }
      while (a1 != v11);
      v7 = v6;
    }
    ++v6;
  }
  while (v6 != a2);
  v14 = v10;
  if (v10 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_21;
LABEL_22:
  v15 = a2 - v14;
  if ((v8 & 1) == 0)
  {
    v14 = v10;
    v15 = v9;
  }
  if (v15 == 0x7FFFFFFFFFFFFFFFLL)
    v10 = 0;
  else
    v10 = v14;
LABEL_27:

  return v10;
}

void _UICreateBoundingPathBitmapData(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, unint64_t *a6@<X8>)
{
  id v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  _WORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  __int16 v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  size_t v33;
  unint64_t *v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  id v41;

  v41 = a5;
  v34 = a6;
  if ((uint64_t)a1 < 1 || a2 < 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapData _UICreateBoundingPathBitmapData(const _UIIntegralSize, const _UIBoundingPathBitmapDataSkipRegion, BOOL (^__strong _Nonnull)(_UIIntegralPoint))");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, CFSTR("_UIBoundingPathBitmapData.m"), 102, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("size.width > 0 && size.height > 0"));

    v30 = v41;
    if (!a2)
    {
      v11 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    v10 = v41;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    if (v12 < a3 || v12 >= a3 + a4)
    {
      v13 = 0;
      if (a1)
      {
        v14 = 0;
        do
        {
          v15 = (*((uint64_t (**)(id, unint64_t, unint64_t))v41 + 2))(v41, v14++, v12);
          if (v14 < a1)
          {
            while (v15 == (*((unsigned int (**)(id, unint64_t, unint64_t))v41 + 2))(v41, v14, v12))
            {
              if (a1 == ++v14)
              {
                ++v13;
                goto LABEL_14;
              }
            }
          }
          ++v13;
        }
        while (v14 < a1);
      }
LABEL_14:
      if (v13 > v11)
        v11 = v13;
    }
    ++v12;
  }
  while (v12 != a2);
LABEL_17:

  v33 = v11 * (a2 - a4);
  v16 = malloc_type_calloc(v33, 2uLL, 0x1000040BDFB0063uLL);
  if (v16)
  {
    if (!a2)
      goto LABEL_41;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapData _UICreateBoundingPathBitmapData(const _UIIntegralSize, const _UIBoundingPathBitmapDataSkipRegion, BOOL (^__strong _Nonnull)(_UIIntegralPoint))");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("_UIBoundingPathBitmapData.m"), 107, CFSTR("Failed to allocate memory for storing the bitmap data."));

    if (!a2)
      goto LABEL_41;
  }
  v17 = 0;
  v37 = a3;
  v38 = a3 + a4;
  v36 = a2;
  do
  {
    if (v17 < a3 || v17 >= v38)
    {
      v18 = a4;
      if (v17 < v38)
        v18 = 0;
      if (a1)
      {
        v19 = 0;
        v20 = 0;
        v21 = (v17 - v18) * v11;
        v39 = v21;
        do
        {
          if (v20 >= v11)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapData _UICreateBoundingPathBitmapData(const _UIIntegralSize, const _UIBoundingPathBitmapDataSkipRegion, BOOL (^__strong _Nonnull)(_UIIntegralPoint))");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, CFSTR("_UIBoundingPathBitmapData.m"), 127, CFSTR("maximumNodesPerRow was computed incorrectly (too small)"));

          }
          v22 = (*((uint64_t (**)(id, unint64_t, unint64_t))v41 + 2))(v41, v19, v17);
          if (v19 + 1 >= a1)
          {
            ++v19;
            LOWORD(v23) = 1;
          }
          else
          {
            v23 = 1;
            while (v22 == (*((unsigned int (**)(id, unint64_t, unint64_t))v41 + 2))(v41, v19 + v23, v17))
            {
              ++v23;
              if (!(v19 - a1 + v23))
              {
                v23 = a1 - v19;
                v19 = a1;
                goto LABEL_35;
              }
            }
            v19 += v23;
LABEL_35:
            v21 = v39;
            if (v23 >= 0x8000)
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapDataNode _UIBoundingPathBitmapDataNodeMake(BOOL, size_t)");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("_UIBoundingPathBitmapData.h"), 105, CFSTR("columns value %lu is too large to be stored in available space"), v23);

            }
          }
          v24 = v23 | 0x8000;
          if (!v22)
            v24 = v23;
          v16[v20 + v21] = v24;
          ++v20;
        }
        while (v19 < a1);
      }
    }
    ++v17;
    a2 = v36;
    a3 = v37;
  }
  while (v17 != v36);
LABEL_41:
  *v34 = a1;
  v34[1] = a2;
  v34[2] = a3;
  v34[3] = a4;
  v34[4] = v33;
  v34[5] = v11;
  v34[6] = (unint64_t)v16;

}

void _UIBoundingPathBitmapDataFromDataWithRectAndRadii(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v8 = a2[3];
  v9 = *a2;
  v36 = a2[2];
  v10 = *a2 + v36 - *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v13 = *((_OWORD *)a2 + 1);
  v37 = *(_OWORD *)a2;
  v38 = v13;
  v14 = *(_OWORD *)(a3 + 16);
  v51 = *(_OWORD *)a3;
  v52 = v14;
  *(_QWORD *)&v15 = _UIBoundingPathBitmapDataCreateRoundRectWithCornerRadii((uint64_t)&v37, (uint64_t *)&v51, (uint64_t)&v55).n128_u64[0];
  v16 = v9;
  v17 = 0;
  v18 = 0;
  if ((v16 & 0x8000000000000000) == 0 && v10 <= 0)
  {
    v19 = a2[1];
    if (v19 >= v12 + v11)
    {
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = (v11 - v19) & ~((v11 - v19) >> 63);
      v21 = v12 + v11 - v19 - v20;
      if (v21 >= (uint64_t)(v8 - v20))
        v21 = v8 - v20;
      v22 = v58;
      if ((unint64_t)v58 <= (unint64_t)v67)
        v22 = v67;
      if (v20 < v22)
        v21 = (v21 & ~(v21 >> 63)) + v20 - v22;
      if (v20 <= v22)
        v17 = v22;
      else
        v17 = v20;
      if ((unint64_t)v61 <= (unint64_t)v64)
        v23 = v64;
      else
        v23 = v61;
      v24 = v8 - v23;
      if ((v21 & ~(v21 >> 63)) + v17 >= v24)
        v21 = v24 - v17;
      v18 = v21 & ~(v21 >> 63);
      if (v8 < v18)
      {
        v25 = v10;
        v26 = v16;
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", v15);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapData _UIBoundingPathBitmapDataFromDataWithRectAndRadii(const _UIBoundingPathBitmapData, const _UIIntegralRect, const _UIIntegralCornerRadii)");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, CFSTR("_UIBoundingPathBitmapData.m"), 485, CFSTR("Invalid skip region height %ld which exceeds bitmap height %ld"), v18, v8);

        v16 = v26;
        v10 = v25;
      }
    }
  }
  v29 = *(_QWORD *)(a1 + 40);
  if (v29)
    v30 = 1;
  else
    v30 = v8 == v18;
  if (v30)
    v31 = *(_QWORD *)(a1 + 40);
  else
    v31 = 1;
  if (v31 <= 2)
  {
    if ((v16 & 0x8000000000000000) == 0 && !*(_QWORD *)a3 && !*(_QWORD *)(a3 + 8))
    {
LABEL_33:
      if (v10 <= 0 && *(_QWORD *)(a3 + 24) == 0 && *(_QWORD *)(a3 + 16) == 0)
        v29 = v31;
      else
        v29 = v31 + 1;
      goto LABEL_43;
    }
    if (v31 <= 1)
    {
      ++v31;
      goto LABEL_33;
    }
    v29 = 3;
  }
LABEL_43:
  *a4 = v36;
  a4[1] = v8;
  v34 = v29 * (v8 - v18);
  a4[2] = v17;
  a4[3] = v18;
  a4[5] = 0;
  a4[6] = 0;
  a4[4] = 0;
  if (v34)
  {
    a4[4] = v34;
    a4[5] = v29;
    v35 = *(_OWORD *)(a1 + 16);
    v51 = *(_OWORD *)a1;
    v52 = v35;
    v53 = *(_OWORD *)(a1 + 32);
    v54 = *(_QWORD *)(a1 + 48);
    v47 = v65;
    v48 = v66;
    v49 = v67;
    v50 = v68;
    v43 = v61;
    v44 = v62;
    v45 = v63;
    v46 = v64;
    v39 = v57;
    v40 = v58;
    v41 = v59;
    v42 = v60;
    v37 = v55;
    v38 = v56;
    _createRowsNodes(&v51, &v37, -v16 & ~(-v16 >> 63), v10 & ~(v10 >> 63), a4);
  }
  v47 = v65;
  v48 = v66;
  v49 = v67;
  v50 = v68;
  v43 = v61;
  v44 = v62;
  v45 = v63;
  v46 = v64;
  v39 = v57;
  v40 = v58;
  v41 = v59;
  v42 = v60;
  v37 = v55;
  v38 = v56;
  _UIBoundingPathBitmapDataDestroyRoundRect(&v37);
}

void _createRowsNodes(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  uint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[3];
  uint64_t v70;
  _QWORD block[4];
  id v72;
  __int128 *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD aBlock[8];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  size_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  if (!a5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v43 = a1;
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "handleFailureInFunction:file:lineNumber:description:", v45, CFSTR("_UIBoundingPathBitmapData.m"), 226, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("outBitmapData != NULL"));

    a1 = v43;
  }
  v10 = *a5;
  v9 = a5[1];
  v11 = a5[2];
  v12 = a5[3];
  v14 = a5[4];
  v13 = a5[5];
  v15 = malloc_type_calloc(v14, 2uLL, 0x1000040BDFB0063uLL);
  v51 = v9;
  v53 = v15;
  if (!v15)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)");
    v50 = v12;
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "handleFailureInFunction:file:lineNumber:description:", v47, CFSTR("_UIBoundingPathBitmapData.m"), 235, CFSTR("Failed to allocate memory to store rows for new bitmap data"));

    v12 = v50;
    v15 = 0;
    v9 = v51;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___createRowsNodes_block_invoke;
  aBlock[3] = &__block_descriptor_384_e11_Q24__0Q8Q16l;
  aBlock[4] = v9;
  aBlock[5] = v11;
  aBlock[6] = v12;
  v52 = v13;
  aBlock[7] = v13;
  v16 = a2[11];
  v92 = a2[10];
  v93 = v16;
  v17 = a2[13];
  v94 = a2[12];
  v95 = v17;
  v18 = a2[7];
  v88 = a2[6];
  v89 = v18;
  v19 = a2[9];
  v90 = a2[8];
  v91 = v19;
  v20 = a2[3];
  v84 = a2[2];
  v85 = v20;
  v21 = a2[5];
  v86 = a2[4];
  v87 = v21;
  v22 = a2[1];
  v82 = *a2;
  v83 = v22;
  v23 = a1[1];
  v96 = *a1;
  v97 = v23;
  v98 = a1[2];
  v99 = *((_QWORD *)a1 + 6);
  v100 = v14;
  v101 = v15;
  v102 = v10;
  v103 = a3;
  v24 = a4;
  v104 = a4;
  v25 = _Block_copy(aBlock);
  if (v14 >> 6 <= 0x7C)
  {
    v77 = 0;
    v78 = &v77;
    v79 = 0x2020000000;
    v80 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v49 = v12;
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "activeProcessorCount");

    v12 = v49;
    v77 = 0;
    v78 = &v77;
    if (v27 >= v14 / 0xFA0)
      v27 = v14 / 0xFA0;
    v79 = 0x2020000000;
    v80 = 0;
    if (v27 > 1)
    {
      v48 = a3;
      *(_QWORD *)&v55 = 0;
      *((_QWORD *)&v55 + 1) = &v55;
      *(_QWORD *)&v56 = 0x2810000000;
      *((_QWORD *)&v56 + 1) = &unk_18685B0AF;
      LODWORD(v57) = 0;
      v28 = dispatch_group_create();
      dispatch_get_global_queue(33, 0);
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = 0;
      v31 = MEMORY[0x1E0C809B0];
      do
      {
        block[0] = v31;
        block[1] = 3221225472;
        block[2] = ___createRowsNodes_block_invoke_2;
        block[3] = &unk_1E16CB4F0;
        v32 = v25;
        v75 = v30;
        v76 = v27;
        v72 = v32;
        v73 = &v55;
        v74 = &v77;
        dispatch_group_async(v28, v29, block);

        ++v30;
      }
      while (v27 != v30);
      dispatch_group_wait(v28, 0xFFFFFFFFFFFFFFFFLL);

      _Block_object_dispose(&v55, 8);
      v33 = v78[3];
      a3 = v48;
      v24 = a4;
      v12 = v49;
      goto LABEL_14;
    }
  }
  v33 = (*((uint64_t (**)(void *, _QWORD, uint64_t))v25 + 2))(v25, 0, 1);
  v78[3] = v33;
LABEL_14:
  if (v33 <= v52)
  {
    a5[6] = (uint64_t)v53;
  }
  else
  {
    free(v53);
    v34 = v78;
    a5[5] = v78[3];
    a5[4] = v34[3] * (v51 - v12);
    v35 = a1[1];
    v69[0] = *a1;
    v69[1] = v35;
    v69[2] = a1[2];
    v70 = *((_QWORD *)a1 + 6);
    v36 = a2[11];
    v65 = a2[10];
    v66 = v36;
    v37 = a2[13];
    v67 = a2[12];
    v68 = v37;
    v38 = a2[7];
    v61 = a2[6];
    v62 = v38;
    v39 = a2[9];
    v63 = a2[8];
    v64 = v39;
    v40 = a2[3];
    v57 = a2[2];
    v58 = v40;
    v41 = a2[5];
    v59 = a2[4];
    v60 = v41;
    v42 = a2[1];
    v55 = *a2;
    v56 = v42;
    _createRowsNodes(v69, &v55, a3, v24, a5);
  }
  _Block_object_dispose(&v77, 8);

}

void sub_185CF7F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;

  _Block_object_dispose(&a64, 8);
  _Unwind_Resume(a1);
}

id _UIBoundingPathBitmapDataDescription(_QWORD *a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  void *v16;
  void *v17;

  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendFormat:", CFSTR("<_UIBoundingPathBitmapData width=%ld; height=%lu; skipRegionY=%lu; skipRegionHeight=%lu; nodeCount=%lu; maximumNodesPerRow=%lu>"),
    *a1,
    a1[1],
    a1[2],
    a1[3],
    a1[4],
    a1[5]);
  objc_msgSend(v2, "appendFormat:", CFSTR(" Bitmap data:\n[\n"));
  v3 = a1[1];
  if (v3)
  {
    v4 = 0;
    for (i = 0; i < v3; ++i)
    {
      v6 = a1[2];
      if (i < v6 || i >= a1[3] + v6)
      {
        objc_msgSend(v2, "appendFormat:", CFSTR("    [ "));
        if (i >= a1[3] + a1[2])
          v9 = a1[3];
        else
          v9 = 0;
        v10 = a1[5];
        if (v10)
        {
          v11 = 0;
          v12 = v10 * (i - v9);
          do
          {
            if (v12 + v11 >= a1[4])
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull _UIBoundingPathBitmapDataDescription(const _UIBoundingPathBitmapData)");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("_UIBoundingPathBitmapData.m"), 535, CFSTR("Out of bounds rows memory read: %@"), v2);

            }
            v13 = *(unsigned __int16 *)(a1[6] + 2 * v12 + 2 * v11);
            if ((v13 & 0x7FFF) != 0)
              objc_msgSend(v2, "appendFormat:", CFSTR("{ %u, %u}"), v13 >> 15, v13 & 0x7FFF);
            else
              objc_msgSend(v2, "appendString:", CFSTR("NULL"));
            v14 = a1[5];
            if (v11 < v14 - 1)
            {
              objc_msgSend(v2, "appendFormat:", CFSTR(", "));
              v14 = a1[5];
            }
            ++v11;
          }
          while (v11 < v14);
        }
        objc_msgSend(v2, "appendFormat:", CFSTR(" ]"));
        if (i < a1[1] - 1)
          objc_msgSend(v2, "appendFormat:", CFSTR(","));
        v8 = CFSTR("\n");
        v7 = v4;
      }
      else
      {
        v7 = 1;
        v8 = CFSTR("    <<< SKIP REGION >>>\n");
        if ((v4 & 1) != 0)
          goto LABEL_24;
      }
      objc_msgSend(v2, "appendFormat:", v8);
      v3 = a1[1];
LABEL_24:
      v4 = v7;
    }
  }
  objc_msgSend(v2, "appendFormat:", CFSTR("]"));
  return v2;
}

id _UIBoundingPathBitmapDataImageRepresentation(unint64_t *a1)
{
  double v2;
  double v3;
  UIGraphicsImageRendererFormat *v4;
  UIGraphicsImageRenderer *v5;
  __int128 v6;
  void *v7;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;

  v2 = (double)*a1;
  v3 = (double)a1[1];
  v4 = objc_alloc_init(UIGraphicsImageRendererFormat);
  -[UIGraphicsImageRendererFormat setScale:](v4, "setScale:", 1.0);
  -[UIGraphicsImageRendererFormat setOpaque:](v4, "setOpaque:", 1);
  -[UIGraphicsImageRendererFormat setPreferredRange:](v4, "setPreferredRange:", 2);
  v5 = -[UIGraphicsImageRenderer initWithSize:format:]([UIGraphicsImageRenderer alloc], "initWithSize:format:", v4, v2, v3);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___UIBoundingPathBitmapDataImageRepresentation_block_invoke;
  v9[3] = &__block_descriptor_88_e40_v16__0__UIGraphicsImageRendererContext_8l;
  v6 = *((_OWORD *)a1 + 1);
  v10 = *(_OWORD *)a1;
  v11 = v6;
  v12 = *((_OWORD *)a1 + 2);
  v13 = a1[6];
  -[UIGraphicsImageRenderer imageWithActions:](v5, "imageWithActions:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

unint64_t ___createRowsNodes_block_invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int64_t MaxXForY;
  unint64_t v30;
  _BOOL4 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  void *v47;
  void *v48;
  unint64_t v49;
  BOOL v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  int v68;
  void *v69;
  void *v70;
  uint64_t v71;
  int64_t v72;
  int v73;
  void *v74;
  void *v75;
  void *v76;
  unint64_t v77;
  void *v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v89;
  uint64_t v90;
  int64_t MinXForY;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BOOL4 v95;
  int64_t v96;
  unint64_t v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;

  if (*(_QWORD *)(a1 + 32) > a2)
  {
    v3 = a3;
    v4 = a2;
    result = 0;
    v90 = a2 - a3;
    v98 = (__int128 *)(a1 + 64);
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 48);
      v9 = v7 + v8;
      if (v4 >= v8 && v4 < v9)
      {
        v4 = v90 + v8 + v7;
        goto LABEL_80;
      }
      if (v4 < v9)
        v7 = 0;
      v11 = *(_QWORD *)(a1 + 56);
      v99 = v11 * (v4 - v7);
      v12 = *(_QWORD *)(a1 + 72) + v4;
      if ((v12 & 0x8000000000000000) != 0 || v12 >= *(_QWORD *)(a1 + 296))
      {
        result = _insertRowsNodeIfPossible(result, v11, *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), v99, 0, 0, *(_QWORD *)(a1 + 360));
        goto LABEL_80;
      }
      v13 = result;
      v14 = v12 >= *(_QWORD *)(a1 + 312) + *(_QWORD *)(a1 + 304) ? *(_QWORD *)(a1 + 312) : 0;
      v15 = *(_OWORD *)(a1 + 240);
      v110 = *(_OWORD *)(a1 + 224);
      v111 = v15;
      v16 = *(_OWORD *)(a1 + 272);
      v112 = *(_OWORD *)(a1 + 256);
      v113 = v16;
      v17 = *(_OWORD *)(a1 + 176);
      v106 = *(_OWORD *)(a1 + 160);
      v107 = v17;
      v18 = *(_OWORD *)(a1 + 208);
      v108 = *(_OWORD *)(a1 + 192);
      v109 = v18;
      v19 = *(_OWORD *)(a1 + 112);
      v102 = *(_OWORD *)(a1 + 96);
      v103 = v19;
      v20 = *(_OWORD *)(a1 + 144);
      v104 = *(_OWORD *)(a1 + 128);
      v105 = v20;
      v21 = *(_OWORD *)(a1 + 80);
      v100 = *v98;
      v101 = v21;
      MinXForY = _UIBoundingPathBitmapDataRoundRectGetMinXForY((uint64_t)&v100, v12);
      v22 = *(_OWORD *)(a1 + 240);
      v110 = *(_OWORD *)(a1 + 224);
      v111 = v22;
      v23 = *(_OWORD *)(a1 + 272);
      v112 = *(_OWORD *)(a1 + 256);
      v113 = v23;
      v24 = *(_OWORD *)(a1 + 176);
      v106 = *(_OWORD *)(a1 + 160);
      v107 = v24;
      v25 = *(_OWORD *)(a1 + 208);
      v108 = *(_OWORD *)(a1 + 192);
      v109 = v25;
      v26 = *(_OWORD *)(a1 + 112);
      v102 = *(_OWORD *)(a1 + 96);
      v103 = v26;
      v27 = *(_OWORD *)(a1 + 144);
      v104 = *(_OWORD *)(a1 + 128);
      v105 = v27;
      v28 = *(_OWORD *)(a1 + 80);
      v100 = *v98;
      v101 = v28;
      MaxXForY = _UIBoundingPathBitmapDataRoundRectGetMaxXForY((uint64_t)&v100, v12);
      v30 = *(_QWORD *)(a1 + 304);
      v31 = v12 >= v30 && v12 < *(_QWORD *)(a1 + 312) + v30;
      result = v13;
      if (*(_QWORD *)(a1 + 360))
        break;
LABEL_80:
      v4 += v3;
      if (v4 >= *(_QWORD *)(a1 + 32))
        return result;
    }
    v89 = v4;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = *(_QWORD *)(a1 + 64);
    v96 = MaxXForY;
    v97 = MinXForY - v36;
    v92 = v36 - MaxXForY + *(_QWORD *)(a1 + 80);
    v37 = *(_QWORD *)(a1 + 328) * (v12 - v14);
    v38 = 2 * v37;
    v95 = v31;
    v93 = 2 * v37;
    v94 = v37;
    while (1)
    {
      v39 = *(_QWORD *)v98 + v32;
      if (v39 > MaxXForY)
      {
        v40 = 1;
        v41 = v92;
        goto LABEL_34;
      }
      if (v31)
      {
        if (!v35)
        {
          v41 = *(_QWORD *)(a1 + 288);
          v40 = v41 + v34 > v39;
          goto LABEL_34;
        }
      }
      else if (v35 < *(_QWORD *)(a1 + 328))
      {
        while (1)
        {
          if (v37 + v35 >= *(_QWORD *)(a1 + 320))
          {
            v43 = result;
            v44 = v32;
            v45 = v33;
            v46 = v39;
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)_block_invoke");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "handleFailureInFunction:file:lineNumber:description:", v48, CFSTR("_UIBoundingPathBitmapData.m"), 312, CFSTR("Out of bounds source rows memory read."));

            v39 = v46;
            v38 = v93;
            v37 = v94;
            v33 = v45;
            v32 = v44;
            v31 = v95;
            MaxXForY = v96;
            result = v43;
          }
          v41 = *(_WORD *)(*(_QWORD *)(a1 + 336) + v38 + 2 * v35) & 0x7FFF;
          if ((*(_WORD *)(*(_QWORD *)(a1 + 336) + v38 + 2 * v35) & 0x7FFF) == 0)
            break;
          v42 = v34 + v41;
          if (v34 + v41 > v39)
          {
            v40 = 1;
            goto LABEL_34;
          }
          ++v35;
          v34 += v41;
          if (v35 >= *(_QWORD *)(a1 + 328))
          {
            v40 = 0;
            v34 = v42;
            goto LABEL_34;
          }
        }
      }
      v40 = 0;
      v41 = 0;
LABEL_34:
      if (*(_QWORD *)(a1 + 368) <= v97)
        v49 = v97;
      else
        v49 = *(_QWORD *)(a1 + 368);
      if (v49)
        v50 = v33 == 0;
      else
        v50 = 0;
      v51 = v50;
      if (!v40 && (v51 & 1) == 0)
      {
        if (*(_QWORD *)(a1 + 376) <= v92)
          v77 = v92;
        else
          v77 = *(_QWORD *)(a1 + 376);
        if (v77)
          result = _insertRowsNodeIfPossible(result, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), v99, v33, 0, v77);
LABEL_79:
        v3 = a3;
        v4 = v89;
        goto LABEL_80;
      }
      v52 = v39 > MaxXForY || !v40;
      if (((v52 | v31) & 1) != 0)
      {
        v53 = v52 ^ 1;
      }
      else
      {
        v54 = v35 + v37;
        if (v35 + v37 >= *(_QWORD *)(a1 + 320))
        {
          v84 = v32;
          v87 = result;
          v79 = v39;
          v81 = v33;
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)_block_invoke");
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "handleFailureInFunction:file:lineNumber:description:");

          v39 = v79;
          v33 = v81;
          v38 = v93;
          v37 = v94;
          v32 = v84;
          result = v87;
          v31 = v95;
          MaxXForY = v96;
        }
        v53 = *(__int16 *)(*(_QWORD *)(a1 + 336) + 2 * v54) < 0;
      }
      v55 = v34;
      v56 = v41;
      if (!v51)
        goto LABEL_59;
      if ((!v40 | v53) != 1)
      {
        v59 = MinXForY - (v41 + v34);
        if (MinXForY <= (uint64_t)(v41 + v34))
          v59 = 0;
        v60 = *(_QWORD *)(a1 + 368);
        v55 = v34 - v60;
        v56 = v59 + v41 + v60;
LABEL_59:
        if (!v40)
        {
          v82 = v32;
          v85 = result;
          v80 = v33;
          v67 = v39;
          v68 = v53;
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)_block_invoke");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "handleFailureInFunction:file:lineNumber:description:", v70, CFSTR("_UIBoundingPathBitmapData.m"), 386, CFSTR("Should always have found a source node to copy data from at this point."));

          v53 = v68;
          v39 = v67;
          v38 = v93;
          v37 = v94;
          v33 = v80;
          v32 = v82;
          v31 = v95;
          MaxXForY = v96;
          result = v85;
        }
        v61 = MaxXForY;
        if ((v53 & 1) == 0)
          v61 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 64);
        if ((uint64_t)(v56 + v55) >= v61)
          v62 = v61;
        else
          v62 = v56 + v55;
        if (v62 < v39)
        {
          v83 = v32;
          v86 = result;
          v71 = v33;
          v72 = v39;
          v73 = v53;
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)_block_invoke");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v74, "handleFailureInFunction:file:lineNumber:description:", v75, CFSTR("_UIBoundingPathBitmapData.m"), 396, CFSTR("Source node contains fewer columns than required."));

          v53 = v73;
          v39 = v72;
          v38 = v93;
          v37 = v94;
          v33 = v71;
          v32 = v83;
          result = v86;
          v31 = v95;
          MaxXForY = v96;
        }
        v63 = v62 - v39;
        if (v62 != v39)
        {
          v64 = v33;
          v65 = v62 - v39;
          v66 = v32;
          result = _insertRowsNodeIfPossible(result, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), v99, v33, v53, v65);
          v38 = v93;
          v37 = v94;
          v31 = v95;
          MaxXForY = v96;
          v33 = v64 + 1;
          v32 = v63 + v66;
        }
        ++v35;
        v34 += v41;
        goto LABEL_71;
      }
      v57 = v32;
      result = _insertRowsNodeIfPossible(result, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), v99, 0, 0, v49);
      v38 = v93;
      v37 = v94;
      v58 = v57;
      v31 = v95;
      MaxXForY = v96;
      v35 = 0;
      v34 = 0;
      v32 = v49 + v58;
      v33 = 1;
LABEL_71:
      if (v32 >= *(_QWORD *)(a1 + 360))
        goto LABEL_79;
    }
  }
  return 0;
}

unint64_t _insertRowsNodeIfPossible(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unint64_t a8)
{
  unint64_t v8;
  uint64_t v12;
  __int16 v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (a6 + 1 > a1)
    v8 = a6 + 1;
  else
    v8 = a1;
  if (v8 <= a2)
  {
    v12 = a6 + a5;
    if (a6 + a5 >= a3)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "size_t _insertRowsNodeIfPossible(size_t, size_t, size_t, _UIBoundingPathBitmapDataNode *, size_t, size_t, BOOL, size_t)");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("_UIBoundingPathBitmapData.m"), 199, CFSTR("Out of bounds rows memory read."));

    }
    if (a8 >= 0x8000)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapDataNode _UIBoundingPathBitmapDataNodeMake(BOOL, size_t)");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("_UIBoundingPathBitmapData.h"), 105, CFSTR("columns value %lu is too large to be stored in available space"), a8);

    }
    v13 = a8 | 0x8000;
    if (!a7)
      v13 = a8;
    *(_WORD *)(a4 + 2 * v12) = v13;
  }
  return v8;
}

void ___createRowsNodes_block_invoke_2(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (*(uint64_t (**)(void))(a1[4] + 16))();
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1[5] + 8) + 32));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 <= v2)
    v4 = v2;
  *(_QWORD *)(v3 + 24) = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1[5] + 8) + 32));
}

void _UIBoundingPathBitmapDataDestroyCorner(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 40);
  if (v2 && *(void **)(a1 + 32) != v2)
    free(v2);
  v3 = *(void **)(a1 + 32);
  if (v3)
    free(v3);
}

void _UIBoundingPathBitmapDataCreateReferenceCornerWithRadius(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  size_t v4;
  void *v5;
  char *v6;
  CGContext *v7;
  _BYTE *v8;
  size_t v9;
  void *v10;
  size_t v11;
  size_t v12;
  char *v13;
  unint64_t v14;
  int64_t v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  char *v27;
  CGRect v28;

  v3 = (double)a1;
  v4 = vcvtpd_s64_f64((double)a1 * 1.528665);
  if (v4 >= 0x10000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapDataCorner _UIBoundingPathBitmapDataCreateReferenceCornerWithRadius(const NSInteger)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 123, CFSTR("Corner edge positions will be too large to be stored in available space"));

  }
  +[UIBezierPath _continuousRoundedRectBezierPath:withRoundedCorners:cornerRadius:segments:](UIBezierPath, "_continuousRoundedRectBezierPath:withRoundedCorners:cornerRadius:segments:", 1, 16, 0.0, 0.0, (double)v4, (double)v4, v3, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (char *)malloc_type_calloc(v4 * v4, 1uLL, 0x100004077774924uLL);
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapDataCorner _UIBoundingPathBitmapDataCreateReferenceCornerWithRadius(const NSInteger)");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 136, CFSTR("Failed to allocate memory for rendering the bitmap data corner."));

    v6 = 0;
  }
  v27 = v6;
  v7 = CGBitmapContextCreate(v6, v4, v4, 8uLL, v4, 0, 7u);
  CGContextTranslateCTM(v7, 0.0, (double)v4);
  CGContextScaleCTM(v7, 1.0, -1.0);
  v28.origin.x = 0.0;
  v28.origin.y = 0.0;
  v28.size.width = (double)v4;
  v28.size.height = (double)v4;
  CGContextClearRect(v7, v28);
  v25 = objc_retainAutorelease(v5);
  CGContextAddPath(v7, (CGPathRef)objc_msgSend(v25, "CGPath"));
  CGContextFillPath(v7);
  CGContextRelease(v7);
  v8 = malloc_type_malloc(v4 << (v4 > 0xFF), 0xAC21EB7BuLL);
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapDataCorner _UIBoundingPathBitmapDataCreateReferenceCornerWithRadius(const NSInteger)");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 154, CFSTR("Failed to allocate memory for storing the corner edge positions."));

  }
  v9 = v4 - 1;
  v10 = v27;
  if ((uint64_t)(v4 - 1) >= 0)
  {
    v11 = 0;
    v12 = v4 * v9;
    v13 = &v27[v4 * v9];
    v14 = 0x1E0CB3000uLL;
    v15 = v4 - 1;
    do
    {
      if (v11 < v9)
      {
        while (1)
        {
          if (v12 + v11 >= v4 * v4)
          {
            objc_msgSend(*(id *)(v14 + 1160), "currentHandler");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _referenceCornerByteDataContainsCornerPoint(UInt8 *const, const size_t, const size_t, const _UIIntegralPoint)");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v23, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 113, CFSTR("Attempt to access out of bounds index in corner byte data"));

            v14 = 0x1E0CB3000;
            v10 = v27;
          }
          if (v13[v11] > 0x7Eu)
            break;
          if (v9 == ++v11)
          {
            v11 = v4 - 1;
            break;
          }
        }
      }
      if (v4 < 0x100)
        v8[v15] = v11;
      else
        *(_WORD *)&v8[2 * v15] = v11;
      v13 -= v4;
      v12 -= v4;
    }
    while (v15-- > 0);
  }
  free(v10);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = a1;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = v4 > 0xFF;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v8;

}

__n128 _UIBoundingPathBitmapDataCreateRoundRectWithCornerRadii@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  __int128 v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  _createCornerWithRadius((uint64_t)&v36, 0, *a2);
  v34 = 0u;
  v35 = 0u;
  v33 = 0u;
  _createCornerWithRadius((uint64_t)&v33, 1, a2[1]);
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  _createCornerWithRadius((uint64_t)&v30, 2, a2[2]);
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  _createCornerWithRadius((uint64_t)&v27, 3, a2[3]);
  v6 = v37;
  v7 = v34;
  if ((unint64_t)v37 <= (unint64_t)v34)
    v8 = v34;
  else
    v8 = v37;
  v9 = v28;
  v10 = v31;
  if ((unint64_t)v28 <= (unint64_t)v31)
    v11 = v31;
  else
    v11 = v28;
  v12 = v11 + v8;
  if (*(_QWORD *)(a1 + 16) < v11 + v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapDataRoundRect _UIBoundingPathBitmapDataCreateRoundRectWithCornerRadii(const _UIIntegralRect, const _UIIntegralCornerRadii)");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "handleFailureInFunction:file:lineNumber:description:", v24, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 216, CFSTR("Rect width (%ld) is too narrow to fit corners (required width: %ld)."), *(_QWORD *)(a1 + 16), v12);

    v6 = v37;
    v9 = v28;
    v7 = v34;
    v10 = v31;
  }
  if (v6 <= v9)
    v6 = v9;
  if (v7 <= v10)
    v7 = v10;
  v13 = v6 + v7;
  if (*(_QWORD *)(a1 + 24) < (int64_t)(v6 + v7))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapDataRoundRect _UIBoundingPathBitmapDataCreateRoundRectWithCornerRadii(const _UIIntegralRect, const _UIIntegralCornerRadii)");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 218, CFSTR("Rect height (%ld) is too short to fit corners (required height: %ld)."), *(_QWORD *)(a1 + 24), v13);

  }
  v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v14;
  v15 = v37;
  *(_OWORD *)(a3 + 32) = v36;
  *(_OWORD *)(a3 + 48) = v15;
  v16 = v33;
  v17 = v34;
  *(_OWORD *)(a3 + 64) = v38;
  *(_OWORD *)(a3 + 80) = v16;
  v18 = v35;
  *(_OWORD *)(a3 + 96) = v17;
  *(_OWORD *)(a3 + 112) = v18;
  v19 = v31;
  v20 = v32;
  *(_OWORD *)(a3 + 128) = v30;
  *(_OWORD *)(a3 + 144) = v19;
  result = v29;
  v22 = v27;
  *(_OWORD *)(a3 + 192) = v28;
  *(__n128 *)(a3 + 208) = result;
  *(_OWORD *)(a3 + 160) = v20;
  *(_OWORD *)(a3 + 176) = v22;
  return result;
}

void _createCornerWithRadius(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a3 < 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapDataCorner _createCornerWithRadius(const _UIBoundingPathBitmapDataCornerLocation, const NSInteger)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 198, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("radius >= 0"));

  }
  else if (!a3)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2;
    return;
  }
  +[_UICachedBoundingPathBitmapDataReferenceCorner cachedReferenceCornerForRadius:](_UICachedBoundingPathBitmapDataReferenceCorner, "cachedReferenceCornerForRadius:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (v6)
  {
    v9 = v6;
    objc_msgSend(v6, "referenceCornerCopy");
    v6 = v9;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0uLL;
    *(_OWORD *)(a1 + 8) = 0uLL;
  }
  *(_QWORD *)a1 = a2;

}

void _UIBoundingPathBitmapDataDestroyRoundRect(_OWORD *a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = a1[3];
  v6 = a1[2];
  v7 = v2;
  v8 = a1[4];
  _UIBoundingPathBitmapDataDestroyCorner((uint64_t)&v6);
  v3 = a1[6];
  v6 = a1[5];
  v7 = v3;
  v8 = a1[7];
  _UIBoundingPathBitmapDataDestroyCorner((uint64_t)&v6);
  v4 = a1[9];
  v6 = a1[8];
  v7 = v4;
  v8 = a1[10];
  _UIBoundingPathBitmapDataDestroyCorner((uint64_t)&v6);
  v5 = a1[12];
  v6 = a1[11];
  v7 = v5;
  v8 = a1[13];
  _UIBoundingPathBitmapDataDestroyCorner((uint64_t)&v6);
}

unint64_t _UIBoundingPathBitmapDataRoundRectGetMinXForY(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v11;
  void *v12;
  __int128 v13;
  _BYTE v14[32];

  v4 = a2 - *(_QWORD *)(a1 + 8);
  if (v4 < 0 || v4 >= *(_QWORD *)(a1 + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSInteger _UIBoundingPathBitmapDataRoundRectGetMinXForY(const _UIBoundingPathBitmapDataRoundRect, const NSInteger)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 257, CFSTR("Attempted to get MinX of rect {x=%ld, y=%ld, width=%ld, height=%ld} for out of bounds y value %ld"), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);

  }
  if ((unint64_t)v4 < *(_QWORD *)(a1 + 48))
  {
    v5 = *(_OWORD *)(a1 + 48);
    v13 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v14 = v5;
    *(_OWORD *)&v14[16] = *(_OWORD *)(a1 + 64);
    v6 = v4;
LABEL_8:
    v9 = _cornerCurveDistanceFromLeftEdgeAtRow((uint64_t *)&v13, v6);
    return *(_QWORD *)a1 + v9;
  }
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 96);
  if (v4 >= (unint64_t)(v7 - v8))
  {
    v13 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)&v14[8] = *(_OWORD *)(a1 + 104);
    *(_QWORD *)&v14[24] = *(_QWORD *)(a1 + 120);
    v6 = v4 - v7 + v8;
    *(_QWORD *)v14 = v8;
    goto LABEL_8;
  }
  v9 = 0;
  return *(_QWORD *)a1 + v9;
}

unint64_t _cornerCurveDistanceFromLeftEdgeAtRow(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v2 = a2;
  v4 = *a1;
  v5 = a1[2];
  if (v5 <= a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIIntegralPoint _UIBoundingPathBitmapDataReferenceCornerPointForPointInCorner(const _UIIntegralPoint, const _UIBoundingPathBitmapDataCornerLocation, const size_t)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 27, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("cornerPoint.x < cornerSize && cornerPoint.y < cornerSize"));

  }
  v6 = v5 - 1 - v2;
  v7 = v5 + ~v2;
  if (v4 == 1)
    v8 = 0;
  else
    v8 = v2;
  if (v4 != 1)
    v7 = 0;
  if (v4 == 2)
    v7 = v5 - 1;
  else
    v6 = v8;
  v9 = v4 == 3;
  if (v4 == 3)
    v10 = v5 - 1;
  else
    v10 = v6;
  if (!v9)
    v2 = v7;
  if ((*a1 | 2) != 3)
  {
    v13 = *((unsigned __int8 *)a1 + 24);
    v14 = a1[4];
    if ((v10 & 0x8000000000000000) != 0 || a1[2] <= v10)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSInteger _UIBoundingPathBitmapDataCornerGetReferenceEdgePositionForRow(_UIBoundingPathBitmapDataCorner, NSInteger)");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("_UIBoundingPathBitmapDataCorner.h"), 56, CFSTR("Attempt to get edge position for out of bounds row %ld"), v10);

      if (v13)
        goto LABEL_24;
    }
    else if (*((_BYTE *)a1 + 24))
    {
LABEL_24:
      v2 = *(unsigned __int16 *)(v14 + 2 * v10);
      goto LABEL_29;
    }
    v2 = *(unsigned __int8 *)(v14 + v10);
    goto LABEL_29;
  }
  v11 = *((unsigned __int8 *)a1 + 24);
  v12 = a1[5];
  if ((v2 & 0x8000000000000000) != 0 || a1[2] <= v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSInteger _UIBoundingPathBitmapDataCornerGetReferenceEdgePositionForCol(_UIBoundingPathBitmapDataCorner, NSInteger)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("_UIBoundingPathBitmapDataCorner.h"), 66, CFSTR("Attempt to get edge position for out of bounds col %ld"), v2);

    if (v11)
      goto LABEL_20;
LABEL_26:
    v10 = *(unsigned __int8 *)(v12 + v2);
    goto LABEL_29;
  }
  if (!*((_BYTE *)a1 + 24))
    goto LABEL_26;
LABEL_20:
  v10 = *(unsigned __int16 *)(v12 + 2 * v2);
LABEL_29:
  v21 = *a1;
  v22 = a1[2];
  if (v2 >= v22 || v10 >= v22)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIIntegralPoint _UIBoundingPathBitmapDataCornerPointForPointInReferenceCorner(const _UIIntegralPoint, const _UIBoundingPathBitmapDataCornerLocation, const size_t)");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 53, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("referencePoint.x < cornerSize && referencePoint.y < cornerSize"));

  }
  switch(v21)
  {
    case 3:
      v23 = ~v10;
LABEL_37:
      v2 = v22 + v23;
      break;
    case 2:
      v23 = ~v2;
      goto LABEL_37;
    case 1:
      v2 = v10;
      break;
  }
  if ((v2 & 0x8000000000000000) != 0 || v2 >= a1[2])
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSInteger _cornerCurveDistanceFromLeftEdgeAtRow(const _UIBoundingPathBitmapDataCorner, const NSInteger)");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 250, CFSTR("The corner curve distance from the left edge (%ld) must be at least zero and less than the corner size (%ld)."), v2, a1[2]);

  }
  return v2;
}

unint64_t _UIBoundingPathBitmapDataRoundRectGetMaxXForY(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v10;
  void *v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = a2 - *(_QWORD *)(a1 + 8);
  if (v4 < 0 || v4 >= *(_QWORD *)(a1 + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSInteger _UIBoundingPathBitmapDataRoundRectGetMaxXForY(const _UIBoundingPathBitmapDataRoundRect, const NSInteger)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("_UIBoundingPathBitmapDataCorner.m"), 283, CFSTR("Attempted to get MaxX of rect {x=%ld, y=%ld, width=%ld, height=%ld} for out of bounds y value %ld"), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);

  }
  v5 = *(_QWORD *)(a1 + 192);
  if (v4 < v5)
  {
    v12 = *(_OWORD *)(a1 + 176);
    v14 = *(_OWORD *)(a1 + 200);
    v15 = *(_QWORD *)(a1 + 216);
    v13 = v5;
    v6 = v4;
LABEL_8:
    v8 = _cornerCurveDistanceFromLeftEdgeAtRow((uint64_t *)&v12, v6) - v5 + 1;
    return *(_QWORD *)a1 + v8 + *(_QWORD *)(a1 + 16);
  }
  v7 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 144);
  if (v4 >= v7 - v5)
  {
    v12 = *(_OWORD *)(a1 + 128);
    v14 = *(_OWORD *)(a1 + 152);
    v15 = *(_QWORD *)(a1 + 168);
    v6 = v4 - v7 + v5;
    v13 = v5;
    goto LABEL_8;
  }
  v8 = 0;
  return *(_QWORD *)a1 + v8 + *(_QWORD *)(a1 + 16);
}

void *_allocateHostReferenceEdgePositionsFromDecodedStandardizedEndiannessByteArray(const void *a1, uint64_t a2, char a3)
{
  size_t v4;
  void *v5;
  void *v7;
  void *v8;

  v4 = a2 << a3;
  v5 = malloc_type_malloc(a2 << a3, 0x1FC9CF3EuLL);
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *_allocateHostReferenceEdgePositionsFromDecodedStandardizedEndiannessByteArray(const uint8_t *, const size_t, const BOOL)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("_UIBoundingPathBitmapDataCornerCache.m"), 66, CFSTR("Failed to allocate memory for storing the bitmap data corner edge positions."));

  }
  return memcpy(v5, a1, v4);
}

void *_allocateStandardizedEndiannessByteArrayForEncodingHostReferenceEdgePositions(const void *a1, uint64_t a2, char a3)
{
  size_t v4;
  void *v5;
  void *v7;
  void *v8;

  v4 = a2 << a3;
  v5 = malloc_type_malloc(a2 << a3, 0x5E9B4970uLL);
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "uint8_t *_allocateStandardizedEndiannessByteArrayForEncodingHostReferenceEdgePositions(const void *, const size_t, const BOOL)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("_UIBoundingPathBitmapDataCornerCache.m"), 48, CFSTR("Failed to allocate memory for encoding the bitmap data corner edge positions."));

  }
  return memcpy(v5, a1, v4);
}

uint64_t _UISceneSettingsDiffActionPerformActionsWithDelayForTransitionContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

void _UISceneSettingsDiffActionPerformChangesWithTransitionContext(void *a1, void *a2)
{
  _UISceneSettingsDiffActionPerformChangesWithTransitionContextAndCompletion(a1, a2, 0);
}

id getIATextInputActionsAnalyticsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7E2A0;
  v7 = qword_1ECD7E2A0;
  if (!qword_1ECD7E2A0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getIATextInputActionsAnalyticsClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getIATextInputActionsAnalyticsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185CFCE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CFE278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CFE3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_185D0134C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getIATextInputActionsAnalyticsClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD7E2A8)
    qword_1ECD7E2A8 = _sl_dlopen();
  result = objc_getClass("IATextInputActionsAnalytics");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD7E2A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getIATextInputActionsInputModeClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD7E2A8)
    qword_1ECD7E2A8 = _sl_dlopen();
  result = objc_getClass("IATextInputActionsInputMode");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD7E2B0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getTIInputModeFunctionsClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD7E2C0)
    qword_1ECD7E2C0 = _sl_dlopen();
  result = objc_getClass("TIInputModeFunctions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD7E2B8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185D02AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_185D05188(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

id getSBSKeyboardFocusServiceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7E2E8;
  v7 = qword_1ECD7E2E8;
  if (!qword_1ECD7E2E8)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSBSKeyboardFocusServiceClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSBSKeyboardFocusServiceClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185D0524C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D0585C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_185D06E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D07088(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_185D077C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D08500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void accelCallback(__int128 *a1)
{
  _QWORD block[4];
  __int128 v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 2);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __accelCallback_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

uint64_t __accelCallback_block_invoke(uint64_t a1)
{
  float v2;
  float v3;
  float v4;
  void *v5;
  double v6;
  double v7;
  double v8;

  v2 = *(float *)(a1 + 32);
  v3 = *(float *)(a1 + 36);
  v4 = *(float *)(a1 + 40);
  +[UIAccelerometer sharedAccelerometer](UIAccelerometer, "sharedAccelerometer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_acceleratedInX:y:z:timestamp:", v2, v3, v4, *(double *)(a1 + 48));

  *(float *)&v6 = v2;
  *(float *)&v7 = v3;
  *(float *)&v8 = v4;
  return objc_msgSend((id)UIApp, "acceleratedInX:Y:Z:", v6, v7, v8);
}

void HardwareKeyboardAvailabilityChanged()
{
  id v0;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "performSelectorOnMainThread:withObject:waitUntilDone:", sel__hardwareKeyboardAvailabilityChanged, 0, 0);

}

void sub_185D08E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIDeviceSupportsGlobalEdgeSwipeTouches()
{
  if (qword_1ECD7E420 != -1)
    dispatch_once(&qword_1ECD7E420, &__block_literal_global_304);
  return byte_1ECD7E310;
}

id _UILocalizedNameForIdiom(uint64_t a1)
{
  __CFString *v1;
  const __CFString *v2;
  __CFString *v3;

  switch(a1)
  {
    case 0:
      v1 = CFSTR("ui.idiom.phone");
      v2 = CFSTR("iPhone user interface idiom name");
      v3 = CFSTR("iPhone");
      break;
    case 1:
      v1 = CFSTR("ui.idiom.ipad");
      v2 = CFSTR("iPad user interface idiom name");
      v3 = CFSTR("iPad");
      break;
    case 2:
      v1 = CFSTR("ui.idiom.tv");
      v2 = CFSTR("AppleTV user interface idiom name");
      v3 = CFSTR("Apple TV");
      break;
    case 3:
      v1 = CFSTR("ui.idiom.carplay");
      v2 = CFSTR("CarPlay user interface idiom name");
      v3 = CFSTR("CarPlay");
      break;
    case 4:
      v1 = CFSTR("ui.idiom.watch");
      v2 = CFSTR("Apple Watch user interface idiom name");
      v3 = CFSTR("Apple Watch");
      break;
    case 5:
      v1 = CFSTR("ui.idiom.mac");
      v2 = CFSTR("Mac user interface idiom name");
      v3 = CFSTR("Mac");
      break;
    case 6:
      v1 = CFSTR("ui.idiom.visionPro");
      v2 = CFSTR("Apple Vision Pro user interface idiom name");
      v3 = CFSTR("Vision Pro");
      break;
    default:
      v1 = CFSTR("ui.idiom.unspecified");
      v2 = CFSTR("Unspecified user interface idiom");
      v3 = CFSTR("Unspecified");
      break;
  }
  _UILocalizedString(v1, (uint64_t)v2, v3);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t _UISSlotUserInterfaceIdiomFromUserInterfaceIdiom(unint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  NSObject *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1 < 9 && ((0x17Fu >> a1) & 1) != 0)
    return qword_18667E078[a1];
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      v6 = 134217984;
      v7 = a1;
      _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpected user interface idiom for slot: %ld", (uint8_t *)&v6, 0xCu);
    }

  }
  else
  {
    v2 = _UISSlotUserInterfaceIdiomFromUserInterfaceIdiom___s_category;
    if (!_UISSlotUserInterfaceIdiomFromUserInterfaceIdiom___s_category)
    {
      v2 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v2, (unint64_t *)&_UISSlotUserInterfaceIdiomFromUserInterfaceIdiom___s_category);
    }
    v3 = *(NSObject **)(v2 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v6 = 134217984;
      v7 = a1;
      _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "Unexpected user interface idiom for slot: %ld", (uint8_t *)&v6, 0xCu);
    }
  }
  return 0;
}

void _MatchedBatteries(IONotificationPort **a1, io_iterator_t a2)
{
  IONotificationPort *v4;
  io_object_t v5;
  io_service_t v6;
  kern_return_t v7;
  NSObject *v8;
  NSObject *v9;
  void *context;
  uint8_t v11[16];
  uint8_t buf[16];

  context = (void *)MEMORY[0x186DC9484]();
  v4 = *a1;
  v5 = IOIteratorNext(a2);
  if (v5)
  {
    v6 = v5;
    do
    {
      v7 = IOServiceAddInterestNotification(v4, v6, "IOGeneralInterest", (IOServiceInterestCallback)_BatteryStatusChanged, 0, (io_object_t *)&dword_1ECD7E320);
      _batteryLog();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (v7)
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v11 = 0;
          _os_log_error_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "Failed to add interest notification for battery", v11, 2u);
        }

      }
      else
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_INFO, "Added interest notification for battery", buf, 2u);
        }

        _UpdateBatteryStatus(v6);
      }
      IOObjectRelease(v6);
      v6 = IOIteratorNext(a2);
    }
    while (v6);
  }
  objc_autoreleasePoolPop(context);
}

void sub_185D0AD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D0B0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIScreenBacklightLevelDidChangeCallback(uint64_t a1, uint64_t a2)
{
  void (**v2)(_QWORD);
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___UIScreenBacklightLevelDidChangeCallback_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  aBlock[4] = a2;
  v2 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (pthread_main_np() == 1)
    v2[2](v2);
  else
    dispatch_async(MEMORY[0x1E0C80D38], v2);

}

void _UIScreenAccessibilityInvertColorsDidChangeCallback(uint64_t a1, uint64_t a2)
{
  void (**v2)(_QWORD);
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___UIScreenAccessibilityInvertColorsDidChangeCallback_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  aBlock[4] = a2;
  v2 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (pthread_main_np() == 1)
    v2[2](v2);
  else
    dispatch_async(MEMORY[0x1E0C80D38], v2);

}

double _UIScreenConvertToCAScreen(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v7;
  double v8;
  double v9;
  double v11;

  v7 = a1 * a3;
  v8 = a2 * a3;
  v9 = -(a4 + -1.57079633);
  if (a4 + -1.57079633 >= 0.0)
    v9 = a4 + -1.57079633;
  if (v9 < 0.01)
    return v8;
  v11 = a4 + -4.71238898;
  if (v11 < 0.0)
    v11 = -v11;
  if (v11 >= 0.01)
    return v7;
  else
    return a6 + -1.0 - v8;
}

double _UIScreenConvertFromCAScreen(double result, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;

  v5 = -(a4 + -1.57079633);
  if (a4 + -1.57079633 >= 0.0)
    v5 = a4 + -1.57079633;
  if (v5 >= 0.01)
  {
    v6 = a4 + -4.71238898;
    if (v6 < 0.0)
      v6 = -v6;
    if (v6 < 0.01)
      result = a2;
  }
  else
  {
    result = a5 + -1.0 - a2;
  }
  if (a3 != 1.0)
    return result / a3;
  return result;
}

void *CarKitLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CarKitLibraryCore_frameworkLibrary)
    CarKitLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)CarKitLibraryCore_frameworkLibrary;
  if (!CarKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CarKitLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIScreen.m"), 107, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void *_UITraitTraceForTraitEnvironmentAndQueryString(void *a1, void *a2)
{
  void *i;
  void *v5;
  objc_class *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t j;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  for (i = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array"); a1; a1 = (void *)objc_msgSend(a1, "_parentTraitEnvironment"))
  {
    v5 = (void *)MEMORY[0x1E0CB37A0];
    v6 = (objc_class *)objc_opt_class();
    v7 = (void *)objc_msgSend(v5, "stringWithFormat:", CFSTR("<%@: %p"), NSStringFromClass(v6), a1);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v8 = (void *)objc_msgSend(a1, "_extraInfoForTraitTrace");
    else
      v8 = 0;
    if (objc_msgSend(v8, "length"))
      objc_msgSend(v7, "appendFormat:", CFSTR("; %@"), v8);
    objc_msgSend(v7, "appendFormat:", CFSTR("; traits = { %@ }"),
      objc_msgSend((id)objc_msgSend(a1, "traitCollection"), "_traitsDescriptionMatching:", a2));
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v9 = objc_msgSend(a1, "traitOverrides");
      if (v9)
      {
        v10 = (void *)v9;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v11 = -[_UITraitOverrides _traitOverridesDescriptionMatching:](v10, a2);
          if (objc_msgSend(v11, "length"))
            objc_msgSend(v7, "appendFormat:", CFSTR("; %@"), v11);
        }
      }
    }
    objc_msgSend(v7, "appendString:", CFSTR(">"));
    objc_msgSend(i, "addObject:", v7);
    if ((objc_opt_respondsToSelector() & 1) == 0)
      break;
  }
  v12 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v13 = (void *)objc_msgSend(i, "reverseObjectEnumerator");
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v14)
  {
    v15 = v14;
    v16 = 0;
    v17 = *(_QWORD *)v24;
    do
    {
      v18 = 0;
      v22 = v16;
      do
      {
        if (*(_QWORD *)v24 != v17)
          objc_enumerationMutation(v13);
        v19 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v18);
        if (objc_msgSend(v19, "length"))
          objc_msgSend(v12, "appendString:", CFSTR("\n"));
        for (j = v16; j; --j)
          objc_msgSend(v12, "appendString:", CFSTR("|  "));
        objc_msgSend(v12, "appendString:", v19);
        ++v16;
        ++v18;
      }
      while (v18 != v15);
      v16 = v15 + v22;
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v15);
  }
  return v12;
}

void _UIRecordTraitUsage(unint64_t a1, unint64_t a2)
{
  uint64_t *TraitCollectionTSD;
  uint64_t *v5;
  __n128 v6;
  uint64_t *v7;

  if (_UITraitUsageTrackingEnabled())
  {
    TraitCollectionTSD = (uint64_t *)GetTraitCollectionTSD();
    if (!*((_BYTE *)TraitCollectionTSD + 9))
    {
      v5 = TraitCollectionTSD;
      if (TraitCollectionTSD[18] && _UIInlinePointerSetContainsElement(TraitCollectionTSD + 2, a1))
      {
        v7 = v5 + 19;
      }
      else
      {
        if (!v5[40] || !_UIInlinePointerSetContainsElement(v5 + 24, a1))
          return;
        v7 = v5 + 41;
      }
      _UITraitTokenSetInsert(v7, a2, v6);
    }
  }
}

void _UITraitCollectionWasCopied(unint64_t a1, unint64_t a2)
{
  uint64_t *TraitCollectionTSD;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  NSHashTable *v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  NSHashTable *v15;
  const void **v16;
  const void *v17;

  TraitCollectionTSD = (uint64_t *)GetTraitCollectionTSD();
  v5 = TraitCollectionTSD;
  if (TraitCollectionTSD[18])
  {
    v6 = TraitCollectionTSD + 2;
    if (_UIInlinePointerSetContainsElement(TraitCollectionTSD + 2, a1))
    {
      if (_UIInlinePointerSetContainsElement(v5 + 2, a2))
        return;
      v7 = *v6;
      if ((unint64_t)*v6 > 0xC)
      {
        v10 = (NSHashTable *)v5[4];
        if (!v10)
        {
          v5[4] = __UIInlinePointerSetCreateHashTableWithCapacity(26);
          v11 = (const void **)(v5 + 5);
          do
          {
            v12 = *v11++;
            NSHashInsert((NSHashTable *)v5[4], v12);
            --v7;
          }
          while (v7);
          v10 = (NSHashTable *)v5[4];
        }
        NSHashInsert(v10, (const void *)a2);
        v7 = *v6;
      }
      else
      {
        v6[v7 + 3] = a2;
      }
      v5[2] = v7 + 1;
      v13 = (1 << (a2 >> 4)) | (1 << (a2 >> 10)) | (1 << SBYTE2(a2));
      v14 = v5 + 3;
      goto LABEL_23;
    }
  }
  if (v5[40])
  {
    v8 = v5 + 24;
    if (_UIInlinePointerSetContainsElement(v5 + 24, a1) && !_UIInlinePointerSetContainsElement(v5 + 24, a2))
    {
      v9 = *v8;
      if ((unint64_t)*v8 > 0xC)
      {
        v15 = (NSHashTable *)v5[26];
        if (!v15)
        {
          v5[26] = __UIInlinePointerSetCreateHashTableWithCapacity(26);
          v16 = (const void **)(v5 + 27);
          do
          {
            v17 = *v16++;
            NSHashInsert((NSHashTable *)v5[26], v17);
            --v9;
          }
          while (v9);
          v15 = (NSHashTable *)v5[26];
        }
        NSHashInsert(v15, (const void *)a2);
        v9 = *v8;
      }
      else
      {
        v8[v9 + 3] = a2;
      }
      v5[24] = v9 + 1;
      v13 = (1 << (a2 >> 4)) | (1 << (a2 >> 10)) | (1 << SBYTE2(a2));
      v14 = v5 + 25;
LABEL_23:
      *v14 |= v13;
    }
  }
}

void sub_185D12C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_185D13BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UITraitCollectionUserInterfaceStyleDidChangeTV()
{
  return 0;
}

uint64_t _UITraitUsageTrackingEnabled()
{
  int v0;
  uint64_t v1;

  v0 = _UIInternalPreferenceUsesDefault_2((int *)&_UIInternalPreference_TraitUsageTrackingMode, (uint64_t)CFSTR("TraitUsageTrackingMode"));
  v1 = qword_1ECD76600;
  if (v0)
    v1 = 1;
  if (v1 == -1)
    return 0;
  if (v1 == 1)
    return 1;
  return dyld_program_sdk_at_least();
}

void _UITraitEnvironmentGeneratedTraitCollection(uint64_t a1, unint64_t a2)
{
  uint64_t *TraitCollectionTSD;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  NSHashTable *v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  NSHashTable *v15;
  const void **v16;
  const void *v17;

  TraitCollectionTSD = (uint64_t *)GetTraitCollectionTSD();
  v5 = TraitCollectionTSD;
  if (TraitCollectionTSD[18] == a1)
  {
    v8 = TraitCollectionTSD + 2;
    if (_UIInlinePointerSetContainsElement(TraitCollectionTSD + 2, a2))
      return;
    v9 = *v8;
    if ((unint64_t)*v8 > 0xC)
    {
      v10 = (NSHashTable *)v5[4];
      if (!v10)
      {
        v5[4] = __UIInlinePointerSetCreateHashTableWithCapacity(26);
        v11 = (const void **)(v5 + 5);
        do
        {
          v12 = *v11++;
          NSHashInsert((NSHashTable *)v5[4], v12);
          --v9;
        }
        while (v9);
        v10 = (NSHashTable *)v5[4];
      }
      NSHashInsert(v10, (const void *)a2);
      v9 = *v8;
    }
    else
    {
      v8[v9 + 3] = a2;
    }
    v5[2] = v9 + 1;
    v13 = (1 << (a2 >> 4)) | (1 << (a2 >> 10)) | (1 << SBYTE2(a2));
    v14 = v5 + 3;
    goto LABEL_21;
  }
  if (TraitCollectionTSD[40] == a1)
  {
    v6 = TraitCollectionTSD + 24;
    if (!_UIInlinePointerSetContainsElement(TraitCollectionTSD + 24, a2))
    {
      v7 = *v6;
      if ((unint64_t)*v6 > 0xC)
      {
        v15 = (NSHashTable *)v5[26];
        if (!v15)
        {
          v5[26] = __UIInlinePointerSetCreateHashTableWithCapacity(26);
          v16 = (const void **)(v5 + 27);
          do
          {
            v17 = *v16++;
            NSHashInsert((NSHashTable *)v5[26], v17);
            --v7;
          }
          while (v7);
          v15 = (NSHashTable *)v5[26];
        }
        NSHashInsert(v15, (const void *)a2);
        v7 = *v6;
      }
      else
      {
        v6[v7 + 3] = a2;
      }
      v5[24] = v7 + 1;
      v13 = (1 << (a2 >> 4)) | (1 << (a2 >> 10)) | (1 << SBYTE2(a2));
      v14 = v5 + 25;
LABEL_21:
      *v14 |= v13;
    }
  }
}

void *_UIBeginTrackingTraitUsage@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  char *v6;
  __int128 v7;
  uint64_t v8;
  void *v10;
  _OWORD __src[22];
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, unint64_t);
  void *v15;
  _OWORD *v16;

  if (!a1)
  {
    v10 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UITraitUsageTrackingState _UIBeginTrackingTraitUsage(id<_UITraitTrackingSupporting>, id<_UITraitTrackingSupporting> _Nullable)"), CFSTR("UITraitCollection_NonARC.m"), 3049, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("primaryTraitEnvironment != nil"));
  }
  v6 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(a3, v6, 0x160uLL);
  v7 = 0uLL;
  memset(__src, 0, sizeof(__src));
  v8 = MEMORY[0x1E0C809B0];
  if (a1)
  {
    v12 = MEMORY[0x1E0C809B0];
    v13 = 3221225472;
    v14 = ___UITraitCollectionInlinePointerSetForTraitEnvironment_block_invoke;
    v15 = &__block_descriptor_40_e27_v16__0__UITraitCollection_8l;
    v16 = __src;
    objc_msgSend(a1, "_collectExistingTraitCollectionsForTraitTracking:", &v12);
    v7 = 0uLL;
  }
  *(_OWORD *)((char *)&__src[8] + 8) = v7;
  *(_OWORD *)((char *)&__src[9] + 8) = v7;
  *(_QWORD *)&__src[8] = a1;
  *((_QWORD *)&__src[10] + 1) = 0;
  __src[11] = v7;
  __src[12] = v7;
  __src[13] = v7;
  __src[14] = v7;
  __src[15] = v7;
  __src[16] = v7;
  __src[17] = v7;
  __src[18] = v7;
  if (a2)
  {
    v12 = v8;
    v13 = 3221225472;
    v14 = ___UITraitCollectionInlinePointerSetForTraitEnvironment_block_invoke;
    v15 = &__block_descriptor_40_e27_v16__0__UITraitCollection_8l;
    v16 = &__src[11];
    objc_msgSend(a2, "_collectExistingTraitCollectionsForTraitTracking:", &v12);
  }
  *(_OWORD *)((char *)&__src[19] + 8) = 0u;
  *(_OWORD *)((char *)&__src[20] + 8) = 0u;
  *(_QWORD *)&__src[19] = a2;
  *((_QWORD *)&__src[21] + 1) = 0;
  return memcpy(v6, __src, 0x160uLL);
}

double _UITraitUsageTrackingResultDestroy(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double result;

  v2 = *(void **)(a1 + 16);
  if (v2)

  v3 = *(void **)(a1 + 136);
  if (v3)

  v4 = *(void **)(a1 + 192);
  if (v4)

  v5 = *(void **)(a1 + 312);
  if (v5)

  result = 0.0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t ___colorAppearanceTraitChanged_block_invoke_2(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v5;
  __CFString *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  _UIGetTraitMetadataWithTraitTokenValueAcquireLock(0, a2, 0, (uint64_t)&v14);
  v5 = a1[4];
  v10 = v14;
  v11 = v15;
  v12 = v16;
  v13 = v17;
  v6 = (__CFString *)-[UITraitCollection _valueForTraitWithMetadata:](v5, (uint64_t)&v10);
  v7 = a1[5];
  v10 = v14;
  v11 = v15;
  v12 = v16;
  v13 = v17;
  result = (uint64_t)-[UITraitCollection _valueForTraitWithMetadata:](v7, (uint64_t)&v10);
  if (v6 != (__CFString *)result)
  {
    if (*((_QWORD *)&v14 + 1) != 1)
      goto LABEL_9;
    v9 = result;
    result = v16;
    if ((_QWORD)v16)
    {
      result = (*(uint64_t (**)(void))(v16 + 16))();
      if ((result & 1) != 0)
        return result;
LABEL_9:
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
      *a3 = 1;
      return result;
    }
    if (!v6)
      goto LABEL_9;
    if (!v9)
      goto LABEL_9;
    result = -[__CFString isEqual:](v6, "isEqual:");
    if ((result & 1) == 0)
      goto LABEL_9;
  }
  return result;
}

void FreeTraitCollectionTSD(uint64_t a1)
{
  char has_internal_diagnostics;
  unint64_t v3;
  NSObject *v4;
  int8x16_t v5;
  int8x8_t v6;
  char v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t v14[16];
  uint8_t buf[16];
  uint8_t v16[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  if (*(_QWORD *)(a1 + 152))
  {
    if ((has_internal_diagnostics & 1) == 0)
    {
LABEL_3:
      v3 = qword_1ECD7E7B0;
      if (!qword_1ECD7E7B0)
      {
        v3 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v3, (unint64_t *)&qword_1ECD7E7B0);
      }
      v4 = *(NSObject **)(v3 + 8);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "primaryTarget.traitsUsed is not NULL; this means tracking state was not reset",
          buf,
          2u);
      }
      goto LABEL_9;
    }
  }
  else
  {
    v5 = vorrq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 176));
    v6 = vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
    if ((has_internal_diagnostics & 1) == 0)
    {
      if (!*(_QWORD *)&v6)
        goto LABEL_9;
      goto LABEL_3;
    }
    if (!*(_QWORD *)&v6)
      goto LABEL_9;
  }
  v11 = __UIFaultDebugAssertLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v16 = 0;
    _os_log_fault_impl(&dword_185066000, v11, OS_LOG_TYPE_FAULT, "primaryTarget.traitsUsed is not NULL; this means tracking state was not reset",
      v16,
      2u);
  }
LABEL_9:
  v7 = os_variant_has_internal_diagnostics();
  if (*(_QWORD *)(a1 + 328))
  {
    if ((v7 & 1) == 0)
    {
LABEL_11:
      v8 = qword_1ECD7E7B8;
      if (!qword_1ECD7E7B8)
      {
        v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v8, (unint64_t *)&qword_1ECD7E7B8);
      }
      v9 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "secondaryTarget.traitsUsed is not NULL; this means tracking state was not reset",
          v13,
          2u);
      }
      goto LABEL_17;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 344) | *(_QWORD *)(a1 + 336) | *(_QWORD *)(a1 + 352) | *(_QWORD *)(a1 + 360);
    if ((v7 & 1) == 0)
    {
      if (!v10)
        goto LABEL_17;
      goto LABEL_11;
    }
    if (!v10)
      goto LABEL_17;
  }
  v12 = __UIFaultDebugAssertLog();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_fault_impl(&dword_185066000, v12, OS_LOG_TYPE_FAULT, "secondaryTarget.traitsUsed is not NULL; this means tracking state was not reset",
      v14,
      2u);
  }
LABEL_17:
  free((void *)a1);
}

BOOL _UIInlinePointerSetContainsElement(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  const void **v5;
  const void *v6;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = v2 - 1;
  if (v2 == 1)
    return a1[3] == a2;
  if ((((1 << (a2 >> 4)) | (1 << (a2 >> 10)) | (1 << SBYTE2(a2))) & ~a1[1]) != 0)
    return 0;
  if (a1[2])
    return NSHashGet((NSHashTable *)a1[2], (const void *)a2) != 0;
  v5 = (const void **)(a1 + 3);
  do
  {
    v6 = *v5++;
    result = v6 == (const void *)a2;
  }
  while (v6 != (const void *)a2 && v3-- != 0);
  return result;
}

uint64_t _UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection(void *a1)
{
  void *v2;
  objc_class *v3;
  uint64_t result;

  if (_UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection___reentranceGuard == 1)
  {
    v2 = (void *)MEMORY[0x1E0CB3940];
    v3 = (objc_class *)objc_opt_class();
    return objc_msgSend(v2, "stringWithFormat:", CFSTR("<%@: %p>"), NSStringFromClass(v3), a1);
  }
  else
  {
    _UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection___reentranceGuard = 1;
    result = objc_msgSend(a1, "description");
    _UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection___reentranceGuard = 0;
  }
  return result;
}

const __CFString *_additionalDebuggingDescriptionForFallbackEnvironment(void *a1)
{
  void *v1;

  v1 = (void *)_viewForFallbackEnvironment(a1);
  if (v1)
    return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" with view controller %@ in window %@"), objc_msgSend(v1, "_viewControllerForAncestor"), objc_msgSend(v1, "window"));
  else
    return &stru_1E16EDF20;
}

uint64_t __UISimulateCrash_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  void *v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))off_1ECD7E870;
  v13 = off_1ECD7E870;
  if (!off_1ECD7E870)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __getSimulateCrashSymbolLoc_block_invoke_0;
    v9[3] = &unk_1E16B14C0;
    v9[4] = &v10;
    __getSimulateCrashSymbolLoc_block_invoke_0(v9);
    v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (v6)
    return v6(a1, a2, a3);
  v8 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  result = objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL __UISimulateCrash(pid_t, mach_exception_data_type_t, NSString *)"), CFSTR("UIDebug_Internal.h"), 19, CFSTR("%s"), dlerror());
  __break(1u);
  return result;
}

void sub_185D190EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSimulateCrashSymbolLoc_block_invoke_0(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1ECD7E878)
    qword_1ECD7E878 = _sl_dlopen();
  v2 = (void *)qword_1ECD7E878;
  if (!qword_1ECD7E878)
  {
    a1 = (_QWORD *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CrashReporterSupportLibrary(void)"), CFSTR("UIDebug_Internal.h"), 18, CFSTR("%s"), 0);
    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "SimulateCrash");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  off_1ECD7E870 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

BOOL _UIScreenTypePrivateIsRectangular(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  if (a1 <= 10070)
  {
    switch(a1)
    {
      case 10030:
        v1 = 9;
        break;
      case 10031:
        v1 = 10;
        break;
      case 10032:
      case 10033:
      case 10034:
      case 10035:
      case 10036:
      case 10037:
      case 10038:
      case 10039:
      case 10044:
      case 10045:
      case 10046:
      case 10047:
      case 10048:
      case 10049:
      case 10054:
      case 10055:
      case 10056:
      case 10057:
      case 10058:
      case 10059:
        goto LABEL_33;
      case 10040:
        v1 = 11;
        break;
      case 10041:
        v1 = 12;
        break;
      case 10042:
        v1 = 17;
        break;
      case 10043:
        v1 = 18;
        break;
      case 10050:
        v1 = 13;
        break;
      case 10051:
        v1 = 14;
        break;
      case 10052:
        v1 = 19;
        break;
      case 10053:
        v1 = 20;
        break;
      case 10060:
        v1 = 15;
        break;
      case 10061:
        v1 = 16;
        break;
      case 10062:
        v1 = 21;
        break;
      case 10063:
        v1 = 22;
        break;
      default:
        v2 = a1 - 10000;
        v1 = 0;
        switch(v2)
        {
          case 0:
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          case 1:
            v1 = 1;
            break;
          case 2:
            v1 = 2;
            break;
          case 3:
            v1 = 3;
            break;
          case 4:
            v1 = 4;
            break;
          case 10:
            v1 = 5;
            break;
          case 11:
            v1 = 6;
            break;
          case 20:
            v1 = 7;
            break;
          case 21:
            v1 = 8;
            break;
          default:
            goto LABEL_33;
        }
        break;
    }
  }
  else
  {
    if (a1 <= 20009)
    {
      if (a1 <= 10090)
      {
        if (a1 > 10080)
        {
          if (a1 == 10081)
          {
            v1 = 26;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          }
          if (a1 == 10090)
          {
            v1 = 27;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          }
        }
        else
        {
          if (a1 == 10071)
          {
            v1 = 24;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          }
          if (a1 == 10080)
          {
            v1 = 25;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          }
        }
      }
      else if (a1 <= 10100)
      {
        if (a1 == 10091)
        {
          v1 = 28;
          return _UIScreenCornerRadiusForType(v1) == 0.0;
        }
        if (a1 == 10100)
        {
          v1 = 29;
          return _UIScreenCornerRadiusForType(v1) == 0.0;
        }
      }
      else
      {
        switch(a1)
        {
          case 10101:
            v1 = 30;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          case 20000:
            v1 = 31;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          case 20001:
            v1 = 32;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
        }
      }
LABEL_33:
      v1 = -1;
      return _UIScreenCornerRadiusForType(v1) == 0.0;
    }
    switch(a1)
    {
      case 20020:
        v1 = 35;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20021:
        v1 = 36;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20022:
        v1 = 37;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20023:
        v1 = 38;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20024:
        v1 = 39;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20025:
        v1 = 40;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20026:
      case 20027:
      case 20028:
      case 20029:
      case 20032:
      case 20034:
      case 20035:
      case 20036:
      case 20037:
      case 20038:
      case 20039:
      case 20042:
      case 20043:
      case 20044:
      case 20045:
      case 20046:
      case 20047:
      case 20048:
      case 20049:
        goto LABEL_33;
      case 20030:
        v1 = 41;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20031:
        v1 = 42;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20033:
        v1 = 43;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20040:
        v1 = 44;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20041:
        v1 = 45;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20050:
        v1 = 46;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20051:
        v1 = 47;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20052:
        v1 = 48;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      default:
        if (a1 == 20010)
        {
          v1 = 33;
        }
        else
        {
          if (a1 != 20011)
            goto LABEL_33;
          v1 = 34;
        }
        break;
    }
  }
  return _UIScreenCornerRadiusForType(v1) == 0.0;
}

uint64_t _UIScreenTypePrivateForScreen(void *a1)
{
  unint64_t v1;

  v1 = _UIScreenTypeForScreen(a1);
  if (v1 > 0x30)
    return -1;
  else
    return qword_18667E1E0[v1];
}

uint64_t _UIUserInterfaceIdiomForType(unint64_t a1)
{
  void *v3;
  void *v4;

  if (a1 < 0x31)
    return qword_18667EDF8[a1];
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIUserInterfaceIdiom _UIUserInterfaceIdiomForType(_UIScreenType)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIScreenTypes.m"), 769, CFSTR("Unknown or invalid type: %ld"), a1);

  return -1;
}

double _UIScreenNativeDisplayExclusionRectForType(uint64_t a1)
{
  char *v1;

  v1 = (char *)MEMORY[0x1E0C9D628];
  if ((unint64_t)(a1 - 5) <= 0x19)
    v1 = (char *)&unk_18667F120 + 8 * a1 - 40;
  return *(double *)v1;
}

BOOL _UIScreenIsPhyiscallyLargePhone(unint64_t a1)
{
  double v3;

  if (a1 == -1)
    return 0;
  if (_UIUserInterfaceIdiomForType(a1))
    return 0;
  _UIScreenReferenceBoundsSizeForType(a1);
  return v3 > 874.0;
}

void sub_185D19B34(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_185D1A57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIImageConfigurationWithFlippedLayoutDirection(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  objc_msgSend(v1, "traitCollection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2 && objc_msgSend(v2, "layoutDirection") != -1)
  {
    objc_msgSend(v3, "_traitCollectionByReplacingNSIntegerValue:forTraitToken:", objc_msgSend(v3, "layoutDirection") == 0, 0x1E1A994C8);
    v4 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v1, "configurationWithTraitCollection:", v4);
    v5 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v4;
    v1 = (id)v5;
  }

  return v1;
}

void sub_185D21060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v19 = v18;
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v20 = objc_begin_catch(exception_object);
  v21 = *(_QWORD *)(v19 + 16);
  v22 = objc_opt_class();
  objc_msgSend(v20, "reason");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  NSLog(CFSTR("Failed to set (%@) user defined inspected property on (%@): %@"), v21, v22, v23);

  objc_end_catch();
}

void sub_185D21100(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
}

uint64_t isDescendantOfContainer(void *a1, id a2, void *a3)
{
  uint64_t v3;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;

  v3 = 0;
  if (a1 && a2)
  {
    v6 = a1;
    v7 = 0;
    while (v6 != a2)
    {
      v8 = (id)objc_msgSend(v6, "_actingParentGestureRecognizerContainer");
      if (v8)
      {
        v9 = v8;
        if (!v7)
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
        }
        objc_msgSend(v7, "addObject:", v9);
      }
      v10 = (id)objc_msgSend(v6, "_parentGestureRecognizerContainer");
      v6 = v10;
      if (a3 && v10)
        objc_msgSend(a3, "addObject:", v10);
      if (!v6)
      {
        while (1)
        {
          if (!objc_msgSend(v7, "count"))
          {
            v3 = 0;
            goto LABEL_25;
          }
          objc_msgSend(v7, "lastObject");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "removeLastObject");
          if (v11)
            break;
LABEL_20:

        }
        v12 = v11;
        while (v12 != a2)
        {
          v13 = (id)objc_msgSend(v12, "_actingParentGestureRecognizerContainer");
          if (v13)
            objc_msgSend(v7, "addObject:", v13);
          v12 = (id)objc_msgSend(v12, "_parentGestureRecognizerContainer");
          if (!v12)
            goto LABEL_20;
        }

        break;
      }
    }
    v3 = 1;
LABEL_25:

  }
  return v3;
}

uint64_t _UIGestureRecognizerContainerCompare(_BYTE *a1, _BYTE *a2, int a3)
{
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  id v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  int has_internal_diagnostics;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v46;
  NSObject *v47;
  unint64_t v48;
  NSObject *v49;
  unint64_t v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  unint64_t v54;
  NSObject *v55;
  unint64_t v56;
  NSObject *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint8_t buf[8];
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (os_variant_has_internal_diagnostics())
  {
    if (!a1)
    {
      __UIFaultDebugAssertLog();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v46, OS_LOG_TYPE_FAULT, "Unexpected nil gesture container", buf, 2u);
      }

    }
  }
  else if (!a1)
  {
    v48 = _MergedGlobals_1101;
    if (!_MergedGlobals_1101)
    {
      v48 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v48, (unint64_t *)&_MergedGlobals_1101);
    }
    v49 = *(NSObject **)(v48 + 8);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v49, OS_LOG_TYPE_ERROR, "Unexpected nil gesture container", buf, 2u);
    }
  }
  if (os_variant_has_internal_diagnostics())
  {
    if (!a2)
    {
      __UIFaultDebugAssertLog();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v47, OS_LOG_TYPE_FAULT, "Unexpected nil other container", buf, 2u);
      }

    }
  }
  else if (!a2)
  {
    v50 = qword_1ECD7E940;
    if (!qword_1ECD7E940)
    {
      v50 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v50, (unint64_t *)&qword_1ECD7E940);
    }
    v51 = *(NSObject **)(v50 + 8);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v51, OS_LOG_TYPE_ERROR, "Unexpected nil other container", buf, 2u);
    }
  }
  if (a1 == a2)
    return 0;
  v6 = (id)objc_msgSend(a1, "_eventReceivingWindow");
  v7 = (id)objc_msgSend(a2, "_eventReceivingWindow");
  if (v6 == v7)
  {
    v22 = (void *)objc_opt_new();
    v23 = (void *)objc_opt_new();
    if ((isDescendantOfContainer(a1, a2, v22) & 1) != 0)
      goto LABEL_15;
    if ((isDescendantOfContainer(a2, a1, v23) & 1) == 0)
    {
      if (objc_msgSend(v23, "count"))
      {
        v30 = a1;
        while (1)
        {
          a1 = v30;
          v31 = (id)objc_msgSend(v30, "_parentGestureRecognizerContainer");
          if (!v31)
            break;
          v30 = v31;
          if (objc_msgSend(v23, "containsObject:", v31))
            goto LABEL_38;
        }
        v21 = 0;
        goto LABEL_67;
      }
      objc_msgSend(v22, "lastObject");
      v32 = (_BYTE *)objc_claimAutoreleasedReturnValue();

      v21 = 0;
      if (!a2 || (v30 = a2, v32 != a2))
      {
LABEL_67:

        return v21;
      }
      do
      {
LABEL_38:
        v33 = a2;
        v34 = (id)objc_msgSend(a2, "_parentGestureRecognizerContainer");
        if (!v34)
          break;
        a2 = v34;
      }
      while (v34 != v30);
      if (_IsKindOfUIView((uint64_t)a1))
      {
        if (_IsKindOfUIView((uint64_t)v33))
        {
          if ((a1[128] & 0x10) != 0)
          {
            objc_msgSend(a1, "superview");
            v35 = (_BYTE *)objc_claimAutoreleasedReturnValue();

            if (v35 == v33)
            {
LABEL_15:
              v21 = 1;
              goto LABEL_67;
            }
          }
        }
      }
      if (!_IsKindOfUIView((uint64_t)v33)
        || !_IsKindOfUIView((uint64_t)a1)
        || (v33[128] & 0x10) == 0
        || (objc_msgSend(v33, "superview"),
            v36 = (_BYTE *)objc_claimAutoreleasedReturnValue(),
            v36,
            v36 != a1))
      {
        objc_msgSend(v30, "_childGestureRecognizerContainers");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = objc_msgSend(v37, "indexOfObject:", a1);
        v39 = objc_msgSend(v37, "indexOfObject:", v33);
        has_internal_diagnostics = os_variant_has_internal_diagnostics();
        v42 = v38 == 0x7FFFFFFFFFFFFFFFLL || v39 == 0x7FFFFFFFFFFFFFFFLL;
        if (has_internal_diagnostics)
        {
          if (v42)
          {
            __UIFaultDebugAssertLog();
            v52 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_fault_impl(&dword_185066000, v52, OS_LOG_TYPE_FAULT, "Failed to lookup child index from the common ancestor", buf, 2u);
            }

          }
        }
        else if (v42)
        {
          v54 = qword_1ECD7E948;
          if (!qword_1ECD7E948)
          {
            v54 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v54, (unint64_t *)&qword_1ECD7E948);
          }
          v55 = *(NSObject **)(v54 + 8);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_185066000, v55, OS_LOG_TYPE_ERROR, "Failed to lookup child index from the common ancestor", buf, 2u);
          }
        }
        if (os_variant_has_internal_diagnostics())
        {
          if (v38 == v39)
          {
            __UIFaultDebugAssertLog();
            v53 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_fault_impl(&dword_185066000, v53, OS_LOG_TYPE_FAULT, "Unexpected equal node indexes", buf, 2u);
            }

          }
        }
        else if (v38 == v39)
        {
          v56 = qword_1ECD7E950;
          if (!qword_1ECD7E950)
          {
            v56 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v56, (unint64_t *)&qword_1ECD7E950);
          }
          v57 = *(NSObject **)(v56 + 8);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_185066000, v57, OS_LOG_TYPE_ERROR, "Unexpected equal node indexes", buf, 2u);
          }
        }
        v43 = -1;
        if (!a3)
          v43 = 1;
        v44 = 1;
        if (!a3)
          v44 = -1;
        if (v38 >= v39)
          v21 = v44;
        else
          v21 = v43;

        goto LABEL_67;
      }
    }
    v21 = -1;
    goto LABEL_67;
  }
  v8 = v7;
  v9 = (id)objc_msgSend(v6, "windowScene");
  v10 = (id)objc_msgSend(v8, "windowScene");
  if (v9 == v10)
  {
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    objc_msgSend(v9, "_allWindows", 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v58, v63, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v59;
      v21 = 1;
      while (2)
      {
        for (i = 0; i != v26; ++i)
        {
          if (*(_QWORD *)v59 != v27)
            objc_enumerationMutation(v24);
          v29 = *(id *)(*((_QWORD *)&v58 + 1) + 8 * i);
          if (v29 == v6)
            goto LABEL_35;
          if (v29 == v8)
          {
            v21 = -1;
LABEL_35:

            return v21;
          }
        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v58, v63, 16);
        if (v26)
          continue;
        break;
      }
    }

    return 0;
  }
  v11 = v10;
  objc_msgSend(v9, "_FBSScene");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "settings");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "level");
  v15 = v14;

  objc_msgSend(v11, "_FBSScene");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "settings");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "level");
  v19 = v18;

  if (v15 >= v19)
    v20 = 0;
  else
    v20 = -1;
  if (v15 > v19)
    return 1;
  else
    return v20;
}

void _UIGestureRecognizerRegisterInContainer(uint64_t a1, id a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained == a2)
      return;
    v8 = objc_loadWeakRetained((id *)(a1 + 48));
  }
  else
  {
    v8 = 0;
    if (!a2)
      return;
  }
  -[UIGestureRecognizer setContainer:](a1, a2);
  v5 = v8;
  if (!v8)
  {
    objc_msgSend((id)UIApp, "_gestureEnvironment");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addGestureRecognizer:", a1);

    objc_msgSend((id)UIApp, "_gestureDelayedEventComponentDispatcher");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIGestureRecognizer setDelayedEventComponentDispatcher:](a1, v7);

    v5 = 0;
  }

}

void _UIGestureRecognizerUnregisterFromContainer(uint64_t a1, id a2)
{
  id WeakRetained;
  void *v5;

  if (a1)
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  else
    WeakRetained = 0;

  if (WeakRetained == a2)
  {
    -[UIGestureRecognizer setContainer:](a1, 0);
    objc_msgSend((id)UIApp, "_gestureEnvironment");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "removeGestureRecognizer:", a1);

    -[UIGestureRecognizer setDelayedEventComponentDispatcher:](a1, 0);
  }
}

id _UIGestureRecognizerContainerRecursiveDescription(void *a1, uint64_t a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD v7[5];

  if (a2)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___UIGestureRecognizerContainerRecursiveDescription_block_invoke;
    v7[3] = &unk_1E16CC938;
    v3 = v7;
    v7[4] = a2;
  }
  else
  {
    v3 = 0;
  }
  v4 = _Block_copy(v3);
  _UIRecursiveDescription(a1, (uint64_t)sel__childGestureRecognizerContainers, (uint64_t)v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _UIGestureRecognizerContainerAncestralDescription(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD v7[5];

  if (a2)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___UIGestureRecognizerContainerAncestralDescription_block_invoke;
    v7[3] = &unk_1E16CC938;
    v3 = v7;
    v7[4] = a2;
  }
  else
  {
    v3 = 0;
  }
  v4 = _Block_copy(v3);
  _UIAncestralDescription(a1, (uint64_t)sel__parentGestureRecognizerContainer, (uint64_t)v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id UIResourceIdentifierForStringsFileForNIBBeingDecodedWithCoder(void *a1)
{
  id v1;
  const __CFDictionary *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  v2 = UICoderToNibIdentifierForStringsFileMap();
  CFDictionaryGetValue(v2, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 == v4)
    v5 = 0;
  else
    v5 = v3;
  v6 = v5;

  return v6;
}

void sub_185D234A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPKTextInputSettingsClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7E960)
    qword_1ECD7E960 = _sl_dlopen();
  if (!qword_1ECD7E960)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PencilKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardSuppressionPolicyDelegate.m"), 15, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("PKTextInputSettings");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPKTextInputSettingsClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKeyboardSuppressionPolicyDelegate.m"), 16, CFSTR("Unable to find class %s"), "PKTextInputSettings");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _UIUpdateCycleIsNotifyingIdleObservers()
{
  return _isNotifyingIdleObservers;
}

uint64_t scrollingKeyForPress(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v1 = a1;
  v2 = objc_msgSend(v1, "type");
  if (v2 > 20)
  {
    if (v2 > 29)
    {
      if (v2 == 30)
      {
        v3 = 5;
        goto LABEL_29;
      }
      if (v2 == 31)
      {
        v3 = 6;
        goto LABEL_29;
      }
    }
    else
    {
      if (v2 == 21)
      {
        v3 = 7;
        goto LABEL_29;
      }
      if (v2 == 22)
      {
        v3 = 8;
        goto LABEL_29;
      }
    }
LABEL_15:
    objc_msgSend(v1, "key");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "keyCode");
    objc_msgSend(v1, "key");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "modifierFlags");
    if (v7 == 0x100000)
    {
      v8 = 8 * (v5 == 81);
      v9 = v5 == 82;
      v10 = 7;
    }
    else
    {
      if (v7 != 0x80000)
      {
        if (v7 || (unint64_t)(v5 - 74) >= 5)
          v3 = 0;
        else
          v3 = qword_18667F318[v5 - 74];
        goto LABEL_28;
      }
      v8 = 6;
      if (v5 != 81)
        v8 = 0;
      v9 = v5 == 82;
      v10 = 5;
    }
    if (v9)
      v3 = v10;
    else
      v3 = v8;
LABEL_28:

    goto LABEL_29;
  }
  v3 = 1;
  switch(v2)
  {
    case 0:
      v3 = 3;
      break;
    case 1:
      v3 = 4;
      break;
    case 2:
      break;
    case 3:
      v3 = 2;
      break;
    default:
      goto LABEL_15;
  }
LABEL_29:

  return v3;
}

void sub_185D28A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _UIShouldApplyTraitStorageRecordsForTraitChanges(uint64_t a1)
{
  if (qword_1ECD7E988 != -1)
    dispatch_once(&qword_1ECD7E988, &__block_literal_global_203_1);
  if ((_UITraitTokenSetIntersectsSet((uint64_t)&unk_1ECD7E998, a1) & 1) != 0)
    return 1;
  if (qword_1ECD7E990 != -1)
    dispatch_once(&qword_1ECD7E990, &__block_literal_global_205_0);
  return _MergedGlobals_1103 != 0;
}

void ___supportedTraitsForIBVariations_block_invoke()
{
  unint64_t v0;
  __n128 v1;
  unint64_t v2;
  __n128 v3;
  unint64_t v4;
  __n128 v5;
  unint64_t v6;
  __n128 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v0 = _UIGetTraitTokenValue((const __CFNumber *)&unk_1E1A99498);
  _UITraitTokenSetInsert(qword_1ECD7E998, v0, v1);
  v2 = _UIGetTraitTokenValue((const __CFNumber *)&unk_1E1A994F8);
  _UITraitTokenSetInsert(qword_1ECD7E998, v2, v3);
  v4 = _UIGetTraitTokenValue((const __CFNumber *)&unk_1E1A99510);
  _UITraitTokenSetInsert(qword_1ECD7E998, v4, v5);
  v6 = _UIGetTraitTokenValue((const __CFNumber *)&unk_1E1A99558);
  _UITraitTokenSetInsert(qword_1ECD7E998, v6, v7);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  +[UITraitCollection _systemTraitTokensAffectingColorAppearance](UITraitCollection, "_systemTraitTokensAffectingColorAppearance", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v16;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v8);
        v13 = _UIGetTraitTokenValue(*(const __CFNumber **)(*((_QWORD *)&v15 + 1) + 8 * v12));
        _UITraitTokenSetInsert(qword_1ECD7E998, v13, v14);
        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v10);
  }

}

void ___appNeedsCompatibilityBehavior_block_invoke()
{
  id v0;

  if (dyld_program_sdk_at_least())
  {
    _MergedGlobals_1103 = 0;
  }
  else
  {
    _UIMainBundleIdentifier();
    v0 = (id)objc_claimAutoreleasedReturnValue();
    _MergedGlobals_1103 = objc_msgSend(v0, "isEqualToString:", CFSTR("com.crunchyroll.iphone"));

  }
}

id castToWindow(id a1)
{
  void *v3;
  void *v4;

  if (a1)
  {
    if (qword_1ECD7AB70 != -1)
      dispatch_once(&qword_1ECD7AB70, &__block_literal_global_301);
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIWindow * _Nonnull castToWindow(UIView * _Nullable const __strong)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIHomeAffordanceGateGestureRecognizer.m"), 68, CFSTR("_UIHomeAffordanceGateGestureRecognizer must be attached to a window."));

    }
  }
  return a1;
}

void sub_185D342F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D34BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTUICandidateViewClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getTUICandidateViewClass_softClass;
  v7 = getTUICandidateViewClass_softClass;
  if (!getTUICandidateViewClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getTUICandidateViewClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getTUICandidateViewClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185D35BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id TIGetCandidateViewExperimentsValue()
{
  void *v0;
  void *v1;

  if (TIGetCandidateViewExperimentsValue_onceToken != -1)
    dispatch_once(&TIGetCandidateViewExperimentsValue_onceToken, &__block_literal_global_560);
  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForPreferenceKey:", CFSTR("CandidateViewExperiments"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_185D36ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D38A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D38EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getTUICandidateViewClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  TextInputUILibrary_2();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TUICandidateView");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTUICandidateViewClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUICandidateViewClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardCandidateController.m"), 20, CFSTR("Unable to find class %s"), "TUICandidateView");

    __break(1u);
  }
}

void __getTUIEmojiSearchTextFieldClass_block_invoke_0(uint64_t a1)
{
  void *v2;
  void *v3;

  TextInputUILibrary_2();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TUIEmojiSearchTextField");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD7E9F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIEmojiSearchTextFieldClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardCandidateController.m"), 26, CFSTR("Unable to find class %s"), "TUIEmojiSearchTextField");

    __break(1u);
  }
}

void sub_185D3C624(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_185D3C9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nullMethodIMP(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  void *v5;
  id v6;

  v3 = a1;
  NSStringFromSelector(a2);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (objc_class *)objc_opt_class();

  NSStringFromClass(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  NSLog(CFSTR("Method %@ not found on class %@."), v6, v5);

}

id _documentTextFont()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;

  +[UIKeyboard currentDocumentState](UIKeyboard, "currentDocumentState");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0 || (objc_opt_respondsToSelector() & 1) == 0)
    goto LABEL_10;
  objc_msgSend(v0, "autocorrectBubbleStyling");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "fontName");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(v1, "fontName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "fontSize");
    objc_msgSend(off_1E167A828, "fontWithName:size:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(v1, "fontSize");
    if (v5 <= 12.0)
    {

LABEL_10:
      objc_msgSend(off_1E167A828, "systemFontOfSize:", 16.5);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_11;
    }
    objc_msgSend(v1, "fontSize");
    v7 = v6;
    objc_msgSend(v1, "fontWeight");
    objc_msgSend(off_1E167A828, "systemFontOfSize:weight:", v7, v8);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }

  if (!v4)
    goto LABEL_10;
LABEL_11:
  objc_msgSend(v4, "pointSize");
  if (v9 < 12.0 || (objc_msgSend(v4, "pointSize"), v10 > 36.0))
  {
    objc_msgSend(v4, "fontWithSize:");
    v11 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v11;
  }

  return v4;
}

id _typedTextBackgroundColor()
{
  void *v0;
  void *v1;

  +[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "colorWithAlphaComponent:", 0.185);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

BOOL SubviewAutoSizesWithPredictionBar(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  _BOOL8 v5;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;
  v3 = v2;
  v4 = v3;
  v5 = v3 && (objc_msgSend(v3, "assertSizingWithPredictionBar") & 1) != 0;

  return v5;
}

BOOL _UIPopoverShapeLayerChromeViewWantsCurvedPinnedArrows()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_PopoverShapeLayerChromeViewWantsCurvedPinnedArrows,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_PopoverShapeLayerChromeViewWantsCurvedPinnedArrows))
  {
    v1 = 0;
  }
  else
  {
    do
    {
      v1 = v0 < v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_PopoverShapeLayerChromeViewWantsCurvedPinnedArrows, (uint64_t)CFSTR("PopoverShapeLayerChromeViewWantsCurvedPinnedArrows"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_PopoverShapeLayerChromeViewWantsCurvedPinnedArrows;
    }
    while (v0 != _UIInternalPreference_PopoverShapeLayerChromeViewWantsCurvedPinnedArrows);
  }
  return byte_1EDDA8164 && v1;
}

double UIRectGetMaxX(double a1, double a2, double a3)
{
  return a1 + a3;
}

uint64_t IsMobileNotes()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  const char *ClassName;
  uint64_t v6;

  if ((_MergedGlobals_1106 & 1) == 0)
  {
    _UIMainBundleIdentifier();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    byte_1ECD7EA09 = objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.mobilenotes"));
    _MergedGlobals_1106 = 1;

  }
  if (byte_1ECD7EA09)
  {
    +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "inputDelegateManager");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "keyInputDelegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v4 = 0;
LABEL_14:

        return v4;
      }
      v4 = v3;
      while (1)
      {
        ClassName = object_getClassName((id)v4);
        if (!strcmp("NoteContentLayer", ClassName))
          break;
        objc_msgSend((id)v4, "superview");
        v6 = objc_claimAutoreleasedReturnValue();

        v4 = v6;
        if (!v6)
          goto LABEL_14;
      }

    }
    v4 = 1;
    goto LABEL_14;
  }
  return 0;
}

id textFont()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;

  +[UIKeyboard currentDocumentState](UIKeyboard, "currentDocumentState");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v0, "autocorrectBubbleStyling");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "fontName");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    if (v2)
    {
      objc_msgSend(v1, "fontName");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "fontSize");
      objc_msgSend(off_1E167A828, "fontWithName:size:", v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_7;
    }
    if (v1)
    {
      objc_msgSend(v1, "fontSize");
      v6 = v5;
      objc_msgSend(v1, "fontWeight");
      objc_msgSend(off_1E167A828, "systemFontOfSize:weight:", v6, v7);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

      if (v4)
        goto LABEL_10;
    }
  }
  +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "inputDelegate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "_fontForCaretSelection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    objc_msgSend(off_1E167A828, "boldSystemFontOfSize:", 13.0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_10:

  return v4;
}

id inlinePromptTextFont()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  id v4;
  void *v5;

  textFont();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "pointSize");
  if (v1 >= 12.0)
  {
    objc_msgSend(v0, "pointSize");
    if (v3 <= 36.0)
    {
      v4 = v0;
      goto LABEL_7;
    }
    v2 = 36.0;
  }
  else
  {
    v2 = 12.0;
  }
  objc_msgSend(v0, "fontWithSize:", v2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_7:
  v5 = v4;

  return v5;
}

id AutocorrectTextColor()
{
  void *v0;
  UIColor *v1;
  uint64_t *v2;
  void *v3;

  if (IsAutoFillMode())
  {
    v0 = (void *)qword_1ECD7EA30;
    if (!qword_1ECD7EA30)
    {
      v1 = -[UIColor initWithRed:green:blue:alpha:]([UIColor alloc], "initWithRed:green:blue:alpha:", 0.596, 0.282, 0.071, 1.0);
      v2 = &qword_1ECD7EA30;
LABEL_6:
      v3 = (void *)*v2;
      *v2 = (uint64_t)v1;

      v0 = (void *)*v2;
    }
  }
  else
  {
    v0 = (void *)qword_1ECD7EA10;
    if (!qword_1ECD7EA10)
    {
      +[UIColor systemBlueColor](UIColor, "systemBlueColor");
      v1 = (UIColor *)objc_claimAutoreleasedReturnValue();
      v2 = &qword_1ECD7EA10;
      goto LABEL_6;
    }
  }
  return v0;
}

uint64_t IsAutoFillMode()
{
  void *v0;
  uint64_t v1;

  +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isAutoFillMode");

  return v1;
}

id autocorrectTextBackgroundColor()
{
  void *v0;
  UIColor *v1;
  uint64_t *v2;
  void *v3;

  if (IsAutoFillMode())
  {
    v0 = (void *)qword_1ECD7EA38;
    if (!qword_1ECD7EA38)
    {
      v1 = -[UIColor initWithRed:green:blue:alpha:]([UIColor alloc], "initWithRed:green:blue:alpha:", 0.969, 0.925, 0.529, 1.0);
      v2 = &qword_1ECD7EA38;
LABEL_6:
      v3 = (void *)*v2;
      *v2 = (uint64_t)v1;

      v0 = (void *)*v2;
    }
  }
  else
  {
    v0 = (void *)qword_1ECD7EA18;
    if (!qword_1ECD7EA18)
    {
      +[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor");
      v1 = (UIColor *)objc_claimAutoreleasedReturnValue();
      v2 = &qword_1ECD7EA18;
      goto LABEL_6;
    }
  }
  return v0;
}

id AutocorrectTextOutlineColor()
{
  void *v0;
  UIColor *v1;
  uint64_t *v2;
  void *v3;

  if (IsAutoFillMode())
  {
    v0 = (void *)qword_1ECD7EA40;
    if (!qword_1ECD7EA40)
    {
      v1 = -[UIColor initWithRed:green:blue:alpha:]([UIColor alloc], "initWithRed:green:blue:alpha:", 0.992, 0.902, 0.392, 1.0);
      v2 = &qword_1ECD7EA40;
LABEL_6:
      v3 = (void *)*v2;
      *v2 = (uint64_t)v1;

      v0 = (void *)*v2;
    }
  }
  else
  {
    v0 = (void *)qword_1ECD7EA20;
    if (!qword_1ECD7EA20)
    {
      +[UIColor systemGray2Color](UIColor, "systemGray2Color");
      v1 = (UIColor *)objc_claimAutoreleasedReturnValue();
      v2 = &qword_1ECD7EA20;
      goto LABEL_6;
    }
  }
  return v0;
}

id typedTextColor()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  +[UIKeyboard currentDocumentState](UIKeyboard, "currentDocumentState");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0
    || (objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend(v0, "autocorrectTextColor"), (v1 = (void *)objc_claimAutoreleasedReturnValue()) == 0)
    || (v2 = v1,
        +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", objc_msgSend(v1, "cgColor")),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v2,
        !v3))
  {
    +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "inputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "_textColorForCaretSelection");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      +[UIColor labelColor](UIColor, "labelColor");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }

  return v3;
}

id documentBackgroundColor()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)documentBackgroundColor_color;
  if (!documentBackgroundColor_color)
  {
    +[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor");
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)documentBackgroundColor_color;
    documentBackgroundColor_color = v1;

    v0 = (void *)documentBackgroundColor_color;
  }
  return v0;
}

id TypedTextBackgroundColor()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  UIColor *v8;
  void *v9;

  +[UIKeyboard currentDocumentState](UIKeyboard, "currentDocumentState");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v0, "autocorrectTextBackgroundColor");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      if (v1)
      {
        v2 = v1;
        +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", objc_msgSend(v1, "cgColor"));
        v3 = (void *)objc_claimAutoreleasedReturnValue();

        if (v3)
          goto LABEL_6;
      }
    }
  }
  +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "textInputTraits");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "selectionHighlightColor");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
LABEL_6:
    objc_msgSend(v3, "colorWithAlphaComponent:", 0.185);
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = (void *)TypedTextBackgroundColor_color;
    if (!TypedTextBackgroundColor_color)
    {
      v8 = -[UIColor initWithRed:green:blue:alpha:]([UIColor alloc], "initWithRed:green:blue:alpha:", 0.0, 0.33, 1.0, 0.1);
      v9 = (void *)TypedTextBackgroundColor_color;
      TypedTextBackgroundColor_color = (uint64_t)v8;

      v7 = (void *)TypedTextBackgroundColor_color;
    }
    v6 = v7;
  }

  return v6;
}

id AutoCorrectCancelImage()
{
  void *v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  if (IsAutoFillMode())
  {
    v0 = (void *)qword_1ECD7EA48;
    if (!qword_1ECD7EA48)
    {
      _UIImageWithName(CFSTR("kb-autofill-cancel.png"));
      v1 = objc_claimAutoreleasedReturnValue();
      v2 = &qword_1ECD7EA48;
      v3 = (void *)qword_1ECD7EA48;
      qword_1ECD7EA48 = v1;
LABEL_6:

      v0 = (void *)*v2;
    }
  }
  else
  {
    v0 = (void *)qword_1ECD7EA28;
    if (!qword_1ECD7EA28)
    {
      +[UIImageSymbolConfiguration configurationWithPointSize:weight:scale:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:scale:", 2, 1, 16.0);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIImage _systemImageNamed:withConfiguration:](UIImage, "_systemImageNamed:withConfiguration:", CFSTR("xmark"), v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "imageWithRenderingMode:", 2);
      v5 = objc_claimAutoreleasedReturnValue();
      v2 = &qword_1ECD7EA28;
      v6 = (void *)qword_1ECD7EA28;
      qword_1ECD7EA28 = v5;

      goto LABEL_6;
    }
  }
  return v0;
}

BOOL _CGRectContainsRectVertically(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinY;
  double MaxY;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v19.origin.x = a5;
  v19.origin.y = a6;
  v19.size.width = a7;
  v19.size.height = a8;
  MinY = CGRectGetMinY(v19);
  v20.origin.x = a1;
  v20.origin.y = a2;
  v20.size.width = a3;
  v20.size.height = a4;
  if (MinY < CGRectGetMinY(v20))
    return 0;
  v21.origin.x = a5;
  v21.origin.y = a6;
  v21.size.width = a7;
  v21.size.height = a8;
  MaxY = CGRectGetMaxY(v21);
  v22.origin.x = a1;
  v22.origin.y = a2;
  v22.size.width = a3;
  v22.size.height = a4;
  return MaxY <= CGRectGetMaxY(v22);
}

double AutocorrectAdjustedInlineRect(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CGFloat v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  int v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  void *v63;
  void *v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  void *v85;
  CGFloat height;
  CGFloat width;
  double rect;
  CGFloat v90;
  CGFloat y;
  CGFloat v92;
  CGFloat x;
  uint64_t v94;
  double v95;
  double v96;
  double v97;
  double v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;

  v9 = a1;
  v10 = a2;
  if (!+[UIKeyboard isInputSystemUI](UIKeyboard, "isInputSystemUI"))
  {
    +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "inputDelegate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "inputDelegateManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v12)
      goto LABEL_19;
    objc_msgSend(v12, "selectedTextRange");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v15)
      goto LABEL_19;
    objc_msgSend(v12, "selectedTextRange");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "end");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "caretRectForPosition:", v17);
    v22 = _convertFromInputDelegateRect(v10, v18, v19, v20, v21);
    v94 = v23;
    v95 = v22;
    v25 = v24;
    v96 = v26;

    objc_msgSend(v12, "markedTextRange");
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (v27)
    {
      objc_msgSend(v12, "markedTextRange");
      v38 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "firstRectForRange:", v38);
      v32 = _convertFromInputDelegateRect(v10, v28, v29, v30, v31);
      v90 = v33;
      v92 = v32;
      v35 = v34;
      v37 = v36;

      LODWORD(v38) = v35 != v25;
      v39 = v95;
      v40 = v96;
      v41 = v94;
      v42 = v25;
      goto LABEL_14;
    }
    rect = v25;
    v43 = *MEMORY[0x1E0C9D628];
    v35 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v44 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v37 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    objc_msgSend(v14, "asyncCapableInputDelegate");
    v38 = objc_claimAutoreleasedReturnValue();
    if (v38)
    {
      v45 = objc_msgSend(v14, "hasMarkedText");

      if (v45)
      {
        objc_msgSend(v14, "textLastRect");
        v47 = v46;
        v49 = v48;
        v51 = v50;
        v53 = v52;
        objc_msgSend(v14, "textFirstRect");
        v103.origin.x = v54;
        v103.origin.y = v55;
        v103.size.width = v56;
        v103.size.height = v57;
        v99.origin.x = v47;
        v99.origin.y = v49;
        v99.size.width = v51;
        v99.size.height = v53;
        y = v103.origin.y;
        x = v103.origin.x;
        height = v103.size.height;
        width = v103.size.width;
        if (!CGRectEqualToRect(v99, v103))
        {
          v100.origin.x = v47;
          v100.origin.y = v49;
          v100.size.width = v51;
          v100.size.height = v53;
          v104.origin.y = y;
          v104.origin.x = x;
          v104.size.height = height;
          v104.size.width = width;
          v101 = CGRectUnion(v100, v104);
          v47 = v101.origin.x;
          v49 = v101.origin.y;
          v51 = v101.size.width;
          v53 = v101.size.height;
        }
        v58 = _convertFromInputDelegateRect(v10, v47, v49, v51, v53);
        v90 = v59;
        v92 = v58;
        v35 = v60;
        v37 = v61;
        v42 = rect;
        LODWORD(v38) = v35 != rect;
        v39 = v95;
        v40 = v96;
        v41 = v94;
LABEL_14:
        v62 = v40;
        if (!CGRectIsNull(*(CGRect *)&v39))
        {
          v102.size.width = v90;
          v102.origin.x = v92;
          v102.origin.y = v35;
          v102.size.height = v37;
          if (((CGRectIsNull(v102) | ~(_DWORD)v38) & (a6 > v40)) != 0)
            a6 = v40;
        }
        if ((v38 & 1) != 0)
        {
          textFont();
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          _textSize(v9, v63);

LABEL_30:
          goto LABEL_31;
        }
LABEL_19:
        textFont();
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        v65 = _textSize(v9, v64);
        v67 = v66;

        v68 = _convertFromInputDelegateRect(v10, 0.0, 0.0, v65, v67);
        if ((a6 <= v69 || v69 <= 0.0) && v69 > a6)
        {
          objc_msgSend(v12, "selectedTextRange", v68);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v70, "end");
          v71 = (void *)objc_claimAutoreleasedReturnValue();

          if (v71)
          {
            objc_msgSend(v12, "selectedTextRange");
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v72, "end");
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "caretRectForPosition:", v73);
            v97 = v74;
            v76 = v75;
            v78 = v77;
            v80 = v79;

            v81 = v97;
          }
          else
          {
            v81 = *MEMORY[0x1E0C9D648];
            v76 = *(double *)(MEMORY[0x1E0C9D648] + 8);
            v78 = *(double *)(MEMORY[0x1E0C9D648] + 16);
            v80 = *(double *)(MEMORY[0x1E0C9D648] + 24);
          }
          v98 = v81;
          v82 = v76;
          v83 = v78;
          v84 = v80;
          if (!CGRectIsEmpty(*(CGRect *)&v81))
          {
            objc_msgSend(v12, "textInputView");
            v85 = (void *)objc_claimAutoreleasedReturnValue();

            if (v10)
            {
              if (v85)
                _convertFromInputDelegateRect(v10, v98, v76, v78, v80);
            }
          }

        }
        goto LABEL_30;
      }
      v90 = v44;
      v92 = v43;
      LODWORD(v38) = 0;
    }
    else
    {
      v90 = v44;
      v92 = v43;
    }
    v39 = v95;
    v40 = v96;
    v41 = v94;
    v42 = rect;
    goto LABEL_14;
  }
LABEL_31:

  return a3;
}

double _convertFromInputDelegateRect(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;

  v9 = a1;
  +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "inputDelegate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "textInputView");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9 && v12)
  {
    +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "textInputView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "convertRectToAutocorrectRect:delegateView:container:", v14, v9, a2, a3, a4, a5);
    a2 = v15;

  }
  return a2;
}

double _textSize(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;

  v3 = a1;
  v4 = a2;
  if (v3 && objc_msgSend(v3, "length"))
  {
    objc_msgSend(v3, "_legacy_sizeWithFont:forWidth:lineBreakMode:", v4, 2, 3.40282347e38);
    v6 = v5;
  }
  else
  {
    objc_msgSend(CFSTR(" "), "_legacy_sizeWithFont:forWidth:lineBreakMode:", v4, 2, 3.40282347e38);
    v6 = 0.0;
  }

  return v6;
}

void sub_185D51760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIKeyboardHasCompletedBuddy()
{
  uint64_t (*v0)(void);
  void *v1;
  void *v2;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  if (!_MergedGlobals_53)
  {
    v4 = 0;
    v5 = &v4;
    v6 = 0x2020000000;
    v0 = (uint64_t (*)(void))off_1ECD79078;
    v7 = off_1ECD79078;
    if (!off_1ECD79078)
    {
      v3[0] = MEMORY[0x1E0C809B0];
      v3[1] = 3221225472;
      v3[2] = __getBYSetupAssistantHasCompletedInitialRunSymbolLoc_block_invoke;
      v3[3] = &unk_1E16B14C0;
      v3[4] = &v4;
      __getBYSetupAssistantHasCompletedInitialRunSymbolLoc_block_invoke(v3);
      v0 = (uint64_t (*)(void))v5[3];
    }
    _Block_object_dispose(&v4, 8);
    if (v0)
    {
      _MergedGlobals_53 = v0();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL UIBYSetupAssistantHasCompletedInitialRun(void)");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIKeyboardInputModeController.m"), 106, CFSTR("%s"), dlerror());

      __break(1u);
    }
  }
}

void sub_185D51A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D52458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D54F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UITextInputTraitsAllowedInputMode(void *a1, void *a2)
{
  id v3;
  id v4;
  unsigned int v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "isAllowedForTraits:", v4))
  {
    v5 = objc_msgSend(v4, "keyboardType");
    v6 = 1;
    if (v5 <= 0xB && ((1 << v5) & 0x930) != 0 || v5 == 127)
      v6 = _AllowedNumberPadInputMode(v3);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t _UITextInputTraitsAllowedInputModeExceptEmoji(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a1;
  if (_UITextInputTraitsAllowedInputMode(v3, a2))
  {
    objc_msgSend(v3, "normalizedIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("emoji")) ^ 1;

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t _UITextInputTraitsAllowedInputModeExcludeLastAndCurrentInputModesAndEmoji(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a1;
  if (_UITextInputTraitsAllowedInputModeExcludeLastAndCurrentInputModes(v3, a2))
  {
    objc_msgSend(v3, "normalizedIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("emoji")) ^ 1;

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t _UIKeyboardInputModeDefaultLayoutIsCarPlayEnabled(void *a1)
{
  id v1;
  void *v2;
  BOOL IsSecure;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t i;
  void *v16;
  int v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  IsSecure = UIKeyboardLayoutDefaultTypeForInputModeIsSecure(v2);

  if (!IsSecure)
  {
    objc_msgSend(v1, "primaryLanguage");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "hasPrefix:", CFSTR("ko"));

    if ((v5 & 1) == 0)
    {
      objc_msgSend(v1, "identifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      UIKeyboardPhoneLayoutToUseForCarPlayInputMode(v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v7)
      {
LABEL_15:
        v18 = 0;
        goto LABEL_20;
      }
    }
  }
  objc_msgSend(v1, "softwareLayout");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("Thai-Four-Row"));

  if (v9)
  {
    v10 = (id)UIKeyboardActiveInputModes;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v21;
      v14 = 1;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v21 != v13)
            objc_enumerationMutation(v10);
          KBStarLayoutString(*(void **)(*((_QWORD *)&v20 + 1) + 8 * i));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "isEqualToString:", CFSTR("Thai"));

          if (v17)
            v14 = 0;
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v12);

      if ((v14 & 1) == 0)
        goto LABEL_15;
    }
    else
    {

    }
  }
  if (UIKeyboardCarPlayFiveRowKeyboardEnabled)
    v18 = 1;
  else
    v18 = UIKeyboardIsFiveRowKeyboard(v1) ^ 1;
LABEL_20:

  return v18;
}

void sub_185D581A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __userNotificationCallback(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (a2)
    objc_msgSend(v3, "releaseAddKeyboardNotification");
  else
    objc_msgSend(v3, "didAcceptAddKeyboardInputMode");

}

void sub_185D5A6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBYSetupAssistantHasCompletedInitialRunSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1ECD79080)
    qword_1ECD79080 = _sl_dlopen();
  v2 = (void *)qword_1ECD79080;
  if (!qword_1ECD79080)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SetupAssistantLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIKeyboardInputModeController.m"), 105, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "BYSetupAssistantHasCompletedInitialRun");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  off_1ECD79078 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

uint64_t _AllowedNumberPadInputMode(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  if (v3 > 1)
  {
    v6 = 1;
  }
  else
  {
    v4 = (id)UIKeyboardActiveInputModes;
    objc_msgSend(v1, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "containsObject:", v5);

  }
  return v6;
}

Class __getEMFEmojiSearchEngineClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD790A8)
    qword_1ECD790A8 = _sl_dlopen();
  if (!qword_1ECD790A8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *EmojiFoundationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardInputModeController.m"), 97, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("EMFEmojiSearchEngine");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiSearchEngineClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKeyboardInputModeController.m"), 98, CFSTR("Unable to find class %s"), "EMFEmojiSearchEngine");

LABEL_8:
    __break(1u);
  }
  qword_1ECD790A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void UIKeyboardSetCurrentUILanguage(void *a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_msgSend(a1, "copy");
  v2 = (void *)UIKeyboardCurrentUILanguage;
  UIKeyboardCurrentUILanguage = v1;

}

uint64_t UIKeyboardShowsTransliterationCandidatesForInputMode()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  UIKeyboardGetCurrentInputMode();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  TIInputModeGetNormalizedIdentifier();
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  TIGetInputModeProperties();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0DBE138]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLValue");

  return v4;
}

uint64_t UIKeyboardShowsTransliterationCandidatesForCurrentInputMode()
{
  void *v0;
  uint64_t v1;

  UIKeyboardGetCurrentInputMode();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = UIKeyboardShowsTransliterationCandidatesForInputMode();

  return v1;
}

uint64_t UIKeyboardCurrentInputModeIsKoreanEnglishBilingual()
{
  void *v0;
  void *v1;
  uint64_t IsKoreanEnglishBilingual;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "currentInputMode");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  IsKoreanEnglishBilingual = UIKeyboardInputModeIsKoreanEnglishBilingual(v1);

  return IsKoreanEnglishBilingual;
}

uint64_t UIKeyboardInputModeIsKoreanEnglishBilingual(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "softwareLayout");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (_os_feature_enabled_impl())
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("Korean-With-QWERTY"));
  else
    v2 = 0;

  return v2;
}

uint64_t UIKeyboardNeverShowCandidateBarForCurrentInputMode()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  UIKeyboardGetCurrentInputMode();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  TIInputModeGetNormalizedIdentifier();
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  TIGetInputModeProperties();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", CFSTR("UIKeyboardNeverShowCandidateBar"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLValue");

  return v4;
}

uint64_t UIKeyboardPredictionEnabledForInputModes(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v14;
    v5 = *MEMORY[0x1E0DBE0B8];
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v14 != v4)
          objc_enumerationMutation(v1);
        TIInputModeGetNormalizedIdentifier();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        TIGetInputModeProperties();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "objectForKey:", v5, v13);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "BOOLValue");

        if ((v10 & 1) != 0)
        {
          v11 = 1;
          goto LABEL_11;
        }
        ++v6;
      }
      while (v3 != v6);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v3)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_11:

  return v11;
}

uint64_t UIKeyboardHasWordNgramModelForInputMode()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  TIInputModeGetNormalizedIdentifier();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  TIGetInputModeProperties();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0DBE0D0]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  return v3;
}

id UIKeyboardInputModeGetLocalizedVariant(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = a1;
  TIInputModeGetVariant();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UI-%@"), v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    TICanonicalInputModeName();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    _UIKitBundle();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    UIKeyboardLocalizedString(v3, v4, v5, v2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id UIKeyboardInputModesMatchingMode(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v2 = a2;
  TIInputModeGetNormalizedIdentifier();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB3880];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __UIKeyboardInputModesMatchingMode_block_invoke;
  v9[3] = &unk_1E16CD0E8;
  v10 = v3;
  v5 = v3;
  objc_msgSend(v4, "predicateWithBlock:", v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "filteredArrayUsingPredicate:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id UIKeyboardInputModeWithNewSWLayout(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)MEMORY[0x1E0C99E08];
  v3 = a2;
  TIInputModeGetComponentsFromIdentifier();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dictionaryWithDictionary:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setObject:forKey:", v3, CFSTR("sw"));
  UIKeyboardInputModeGetIdentifierFromComponents(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id UIKeyboardInputModeWithNewHWLayout(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)MEMORY[0x1E0C99E08];
  v3 = a2;
  TIInputModeGetComponentsFromIdentifier();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dictionaryWithDictionary:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setObject:forKey:", v3, CFSTR("hw"));
  UIKeyboardInputModeGetIdentifierFromComponents(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t UIKeyboardInputModesEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "length") && objc_msgSend(v4, "length"))
    v5 = objc_msgSend(v3, "isEqualToString:", v4);
  else
    v5 = 0;

  return v5;
}

id UIKeyboardLocalizedInputModeName(void *a1)
{
  __CFString *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  const __CFString *CanonicalLanguageIdentifierFromString;
  const __CFLocale *v11;
  const __CFString *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  __CFString *v17;

  v1 = a1;
  if (-[__CFString hasPrefix:](v1, "hasPrefix:", CFSTR("emoji")))
  {
    _UIKitBundle();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("emoji"), CFSTR("Emoji"), CFSTR("Localizable"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (!v1)
      v1 = CFSTR("intl");
    v4 = (void *)MEMORY[0x1E0CB37A0];
    TIInputModeGetNormalizedIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("UI-%@"), v5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    UIKeyboardLocalizedString(v2, v1, 0, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "length"))
    {
      v7 = v6;
      v3 = v7;
    }
    else
    {
      UIKeyboardLocalizedString(CFSTR("UI-LanguageIndicator"), v1, 0, 0);
      v7 = (id)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v7, "length"))
      {
        UIKeyboardInputModeGetLocalizedVariant(v1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v8, "length"))
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v7, v8);
          v9 = objc_claimAutoreleasedReturnValue();

          v7 = (id)v9;
        }
        v7 = v7;

        v3 = v7;
      }
      else
      {
        CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString(0, v1);
        v11 = CFLocaleCreate(0, CanonicalLanguageIdentifierFromString);
        v12 = CFLocaleCopyDisplayNameForPropertyValue(v11, (CFLocaleKey)*MEMORY[0x1E0C9B080], CanonicalLanguageIdentifierFromString);
        v13 = (__CFString *)v12;
        if (v12 && CFStringGetLength(v12))
        {
          -[__CFString capitalizedString](v13, "capitalizedString");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v14, "rangeOfString:options:", CFSTR(" ("), 2);
          if (v15 != 0x7FFFFFFFFFFFFFFFLL)
          {
            objc_msgSend(v14, "substringToIndex:", v15);
            v16 = objc_claimAutoreleasedReturnValue();

            v14 = (void *)v16;
          }
          v3 = (void *)objc_msgSend(v14, "copy");

        }
        else
        {
          if (CanonicalLanguageIdentifierFromString && CFStringGetLength(CanonicalLanguageIdentifierFromString))
            v17 = (__CFString *)CanonicalLanguageIdentifierFromString;
          else
            v17 = v1;
          v3 = (void *)-[__CFString copy](v17, "copy");
        }
        if (v11)
          CFRelease(v11);
        if (CanonicalLanguageIdentifierFromString)
          CFRelease(CanonicalLanguageIdentifierFromString);
        if (v13)
          CFRelease(v13);
      }
    }

  }
  return v3;
}

id TextInputUIBundle()
{
  if (qword_1ECD7EA70 != -1)
    dispatch_once(&qword_1ECD7EA70, &__block_literal_global_306);
  return (id)qword_1ECD7EA68;
}

id UIKeyboardSettingsBundle()
{
  if (qword_1ECD7EA80 != -1)
    dispatch_once(&qword_1ECD7EA80, &__block_literal_global_133);
  return (id)qword_1ECD7EA78;
}

id UIKeyboardLocalizedSWLayoutName(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (qword_1ECD7EA90 != -1)
    dispatch_once(&qword_1ECD7EA90, &__block_literal_global_136_1);
  objc_msgSend((id)qword_1ECD7EA88, "objectForKey:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    TIInputModeGetLanguageWithRegion();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1E0CB34D0];
    UIKeyboardSettingsBundle();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "localizations");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DC8], "_deviceLanguage");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "arrayByAddingObject:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "preferredLocalizationsFromArray:forPreferences:", v7, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v11, "count"))
      goto LABEL_7;
    UIKeyboardSettingsBundle();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    KBStarLayoutString(v1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "firstObject");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "localizedStringForKey:value:table:localization:", v13, 0, CFSTR("KeyboardLayouts"), v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v15)
    {
LABEL_7:
      UIKeyboardSettingsBundle();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      KBStarLayoutString(v1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "localizedStringForKey:value:table:", v17, &stru_1E16EDF20, CFSTR("KeyboardLayouts"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend((id)qword_1ECD7EA88, "setObject:forKey:", v15, v1);
    v3 = v15;

  }
  return v3;
}

id UIKeyboardLocalizedDictationDisplayName(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  int v13;
  int v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  int v32;
  __CFString *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __CFString *v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (qword_1ECD7EAA0 != -1)
    dispatch_once(&qword_1ECD7EAA0, &__block_literal_global_140_0);
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "keyboardLanguageForDictationLanguage:", v1);
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("zh_HK")) & 1) != 0
    || objc_msgSend(v1, "isEqualToString:", CFSTR("yue_Hant")))
  {

    v3 = CFSTR("zh_HK");
  }
  else if (!v3)
  {
    if ((objc_msgSend(v1, "hasPrefix:", CFSTR("zh")) & 1) == 0
      && !objc_msgSend(v1, "hasSuffix:", CFSTR("CN")))
    {
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
      -[__CFString inputModeWithIdentifier:](v3, "inputModeWithIdentifier:", v1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "extendedDisplayName");
      v18 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_36;
    }
    v32 = objc_msgSend(v1, "hasSuffix:", CFSTR("CN"));
    v33 = CFSTR("zh_Hant");
    if (v32)
      v33 = CFSTR("zh_Hans");
    v3 = v33;
  }
  v4 = v1;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "activeDictationSupportedInputModeIdentifiers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v39;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v39 != v9)
          objc_enumerationMutation(v6);
        if ((-[__CFString isEqualToString:](v3, "isEqualToString:", *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * i)) & 1) == 0)
        {
          TIInputModeGetBaseLanguage();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          TIInputModeGetBaseLanguage();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v11, "isEqualToString:", v12);

          if (v13)
          {
            objc_msgSend(v4, "stringByAppendingString:", CFSTR("_long"));
            v15 = (void *)objc_claimAutoreleasedReturnValue();

            v14 = 1;
            goto LABEL_17;
          }
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
      if (v8)
        continue;
      break;
    }
  }
  v14 = 0;
  v15 = v4;
LABEL_17:

  v16 = &qword_1ECD7E000;
  objc_msgSend((id)qword_1ECD7EA98, "objectForKey:", v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v17)
  {
    v19 = (void *)MEMORY[0x1E0CB34D0];
    TextInputUIBundle();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "localizations");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = v3;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v42, 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "preferredLocalizationsFromArray:forPreferences:", v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v23, "count"))
    {
      TextInputUIBundle();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "firstObject");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "localizedStringForKey:value:table:localization:", v15, 0, CFSTR("Dictation"), v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14)
      {
        objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", v4);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "regionCode");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v27, "localizedStringForCountryCode:", v28);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "localizedStringWithFormat:", v26, v30);
        v31 = objc_claimAutoreleasedReturnValue();

        v16 = &qword_1ECD7E000;
        v26 = (void *)v31;
      }
      if (v26 && !objc_msgSend(v26, "isEqualToString:", v15))
        goto LABEL_33;
    }
    else
    {
      v26 = 0;
    }
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "inputModeWithIdentifier:", v4);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "extendedDisplayName");
    v36 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v36;
    if (!v36)
    {
LABEL_34:
      v18 = v26;

      goto LABEL_35;
    }
LABEL_33:
    objc_msgSend((id)v16[339], "setObject:forKey:", v26, v15);
    goto LABEL_34;
  }
  v18 = v17;
LABEL_35:

LABEL_36:
  return v18;
}

id UIKeyboardDictationDisplayNameInUILanguage(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = a1;
  TextInputUIBundle();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "localizedStringForKey:value:table:", v3, &stru_1E16EDF20, CFSTR("Dictation"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5 || objc_msgSend(v5, "isEqualToString:", v3))
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "baseLanguageFromLanguage:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedStringForLanguage:context:", v6, a2);
    v8 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v8;
  }

  return v5;
}

id UIKeyboardLanguageNameInUILanguage(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v1 = a1;
  if (v1)
  {
    if (qword_1ECD7EAB0 != -1)
      dispatch_once(&qword_1ECD7EAB0, &__block_literal_global_157_0);
    objc_msgSend((id)qword_1ECD7EAA8, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      v3 = v2;
LABEL_16:

      goto LABEL_17;
    }
    v4 = (void *)MEMORY[0x1E0CB34D0];
    UIKeyboardSettingsBundle();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "localizations");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "preferredLocalizationsFromArray:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "firstObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      UIKeyboardSettingsBundle();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "localizedStringForKey:value:table:localization:", v1, 0, CFSTR("KeyboardTitles"), v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        v11 = v10;
        if (!objc_msgSend(v10, "isEqualToString:", v1))
        {
LABEL_14:
          objc_msgSend((id)qword_1ECD7EAA8, "setObject:forKey:", v11, v1);
LABEL_15:
          v3 = v11;

          goto LABEL_16;
        }
      }
    }
    else
    {
      v10 = 0;
    }
    objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLocale");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "displayNameForKey:value:", *MEMORY[0x1E0C997E0], v1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v11)
    {
      +[UIKeyboardInputMode keyboardInputModeWithIdentifier:](UIKeyboardInputMode, "keyboardInputModeWithIdentifier:", v1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "displayName");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v11)
        goto LABEL_15;
    }
    goto LABEL_14;
  }
  v3 = 0;
LABEL_17:

  return v3;
}

id UIKeyboardGetActiveUserSelectableInputModes()
{
  return (id)UIKeyboardActiveUserSelectableInputModes;
}

id UIKeyboardGetActiveInputModes()
{
  return (id)UIKeyboardActiveInputModes;
}

id UIKeyboardGetActiveUniqueInputModesForHardwareKeyboard()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id obj;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v0 = (id)UIKeyboardActiveInputModes;
  objc_msgSend(MEMORY[0x1E0C99E10], "orderedSetWithCapacity:", objc_msgSend(v0, "count"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v0, "count"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = v0;
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v28;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v28 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v5);
        +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "inputModeWithIdentifier:", v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        if ((objc_msgSend(v8, "isMultilingualOnly") & 1) == 0)
        {
          if (objc_msgSend(v8, "isExtensionInputMode"))
          {
            v9 = v6;
          }
          else
          {
            TIInputModeGetNormalizedIdentifier();
            v9 = (id)objc_claimAutoreleasedReturnValue();
          }
          v10 = v9;
          UIKeyboardGetCurrentInputMode();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v6, "isEqualToString:", v11) & 1) != 0)
          {

            goto LABEL_13;
          }
          v12 = objc_msgSend(v22, "containsObject:", v10);

          if ((v12 & 1) == 0)
          {
LABEL_13:
            objc_msgSend(v22, "addObject:", v10);
            objc_msgSend(v1, "setObject:forKey:", v6, v10);
          }

        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v3);
  }

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(obj, "count"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v14 = v22;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v24;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v24 != v17)
          objc_enumerationMutation(v14);
        objc_msgSend(v1, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v18));
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend(v13, "addObject:", v19);

        ++v18;
      }
      while (v16 != v18);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    }
    while (v16);
  }

  return v13;
}

BOOL UIKeyboardHasMultipleActiveInputModes()
{
  return (unint64_t)objc_msgSend((id)UIKeyboardActiveInputModes, "count") > 1;
}

uint64_t UIKeyboardHasMultipleActiveLinguisticNonExtensionInputModes()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v0 = (id)UIKeyboardActiveInputModes;
  v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    v4 = *(_QWORD *)v14;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v14 != v4)
          objc_enumerationMutation(v0);
        v6 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v5);
        TIInputModeGetLanguage();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        if (UIKeyboardInputModeIsNonLinguistic(v7))
        {

        }
        else
        {
          +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController", (_QWORD)v13);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_msgSend(v8, "identifierIsValidSystemInputMode:", v6);

          if (v9)
          {
            v10 = 1;
            v11 = v3 <= 0;
            v3 = 1;
            if (!v11)
              goto LABEL_14;
          }
        }
        ++v5;
      }
      while (v2 != v5);
      v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v2);
  }
  v10 = 0;
LABEL_14:

  return v10;
}

uint64_t UIKeyboardHasMultipleActiveSecureInputModes()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  BOOL v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v0 = (id)UIKeyboardActiveInputModes;
  v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    v4 = *(_QWORD *)v11;
LABEL_3:
    v5 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v4)
        objc_enumerationMutation(v0);
      v6 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v5);
      if ((objc_msgSend(v6, "isEqualToString:", CFSTR("autofillsignup"), (_QWORD)v10) & 1) == 0
        && UIKeyboardLayoutDefaultTypeForInputModeIsSecure(v6))
      {
        v7 = 1;
        v8 = v3 <= 0;
        v3 = 1;
        if (!v8)
          break;
      }
      if (v2 == ++v5)
      {
        v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v2)
          goto LABEL_3;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v7 = 0;
  }

  return v7;
}

BOOL UIKeyboardLayoutDefaultTypeForInputModeIsSecure(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  _BOOL8 v6;
  void *v7;
  void *v8;

  v1 = a1;
  TIInputModeGetNormalizedIdentifier();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  TIGetInputModeProperties();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3
    || (+[UIKeyboardInputMode keyboardInputModeWithIdentifier:](UIKeyboardInputMode, "keyboardInputModeWithIdentifier:", v1), v4 = (void *)objc_claimAutoreleasedReturnValue(), v5 = objc_msgSend(v4, "isExtensionInputMode"), v4, (v5 & 1) == 0))
  {
    objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0DBE0A0]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    v6 = !v7 || objc_msgSend(v7, "BOOLValue");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

BOOL UIKeyboardRequiresInternationalKey()
{
  return (unint64_t)objc_msgSend((id)UIKeyboardActiveUserSelectableInputModes, "count") > 1;
}

id UIKeyboardGetABCStringForActiveInputMode()
{
  void *v0;
  void *v1;

  UIKeyboardGetCurrentInputMode();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardLocalizedString(CFSTR("UI-ABC"), v0, 0, CFSTR("ABC"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id UIKeyboardGetJapaneseAIUStringForActiveInputMode()
{
  void *v0;
  void *v1;

  UIKeyboardGetCurrentInputMode();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardLocalizedString(CFSTR("UI-JapaneseAIU"), v0, 0, CFSTR("あいう"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id UIKeyboardGetNumbersSymbolsStringForActiveInputMode()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (_ShouldLocalizeNumbersForPreferredLocale())
  {
    UIKeyboardGetNumberFormatterForPreferredLocale();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "stringFromNumber:", &unk_1E1A98130);
    v1 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".?%@"), v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("UI-NumbersSymbols"), v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    UIKeyboardGetCurrentInputMode();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    UIKeyboardLocalizedString(v3, v4, 0, v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    UIKeyboardGetCurrentInputMode();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    UIKeyboardLocalizedString(CFSTR("UI-NumbersSymbols"), v1, 0, CFSTR(".?123"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

id UIKeyboardGetNumbersStringForPreferredLocale()
{
  void *v0;
  void *v1;
  char v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLocale");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localeIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isEqualToString:", qword_1ECD7EAD0);

  if ((v2 & 1) == 0)
  {
    objc_msgSend(v0, "localeIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "copy");
    v5 = (void *)qword_1ECD7EAD0;
    qword_1ECD7EAD0 = v4;

    v6 = (void *)objc_opt_new();
    objc_msgSend(v6, "setLocale:", v0);
    objc_msgSend(v6, "setNumberStyle:", 0);
    objc_msgSend(v6, "stringFromNumber:", &unk_1E1A98148);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "copy");
    v9 = (void *)qword_1ECD7EAC8;
    qword_1ECD7EAC8 = v8;

  }
  v10 = (id)qword_1ECD7EAC8;

  return v10;
}

id UIKeyboardGetInputModesForLanguage(void *a1, void *a2, int a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  id v58;
  _QWORD v59[4];

  v59[2] = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  TIInputModeGetBaseLanguage();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v59[0] = v6;
  TIInputModeGetLanguage();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v59[1] = v7;
  v8 = 0x1E0C99000uLL;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v59, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "allKeys");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "arrayByAddingObjectsFromArray:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)MEMORY[0x1E0CB34D0];
  v58 = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v58, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "preferredLocalizationsFromArray:forPreferences:", v11, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "firstObject");
  v15 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "languageCode");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", v5);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "languageCode");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v17, "isEqualToString:", v19);

  v48 = (void *)v15;
  if (v20)
  {
    objc_msgSend(v4, "objectForKey:", v15);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v21 = 0;
  }
  if (!objc_msgSend(v21, "count"))
  {
    TIInputModeGetRegion();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKey:", v22);
    v23 = objc_claimAutoreleasedReturnValue();

    v21 = (void *)v23;
  }
  if (!objc_msgSend(v21, "count") && a3)
  {
    TIGetDefaultInputModesForLanguage();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v21;
    v26 = (void *)v15;
    goto LABEL_34;
  }
  UIKeyboardGetSupportedInputModes();
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v21, "count"))
  {
    v42 = v21;
    goto LABEL_29;
  }
  v45 = v11;
  v46 = v5;
  v47 = v4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v21, "count"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v28 = v21;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v53, v57, 16);
  if (!v29)
    goto LABEL_27;
  v30 = v29;
  v31 = *(_QWORD *)v54;
  v49 = v28;
  v50 = v27;
  do
  {
    for (i = 0; i != v30; ++i)
    {
      if (*(_QWORD *)v54 != v31)
        objc_enumerationMutation(v28);
      v33 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
      TIInputModeGetComponentsFromIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      TIInputModeGetNormalizedIdentifierFromComponents();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v52, "containsObject:", v35))
      {
        v36 = v33;
        objc_msgSend(v34, "objectForKey:", CFSTR("sw"));
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v37)
          goto LABEL_21;
        v38 = v31;
        UIKeyboardGetSupportedSoftwareKeyboardsForInputMode(v35);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v39, "count"))
        {
          if ((objc_msgSend(v39, "containsObject:", v37) & 1) == 0)
          {
            objc_msgSend(v39, "firstObject");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "stringByReplacingOccurrencesOfString:withString:", v37, v40);
            v41 = objc_claimAutoreleasedReturnValue();

            v36 = (id)v41;
            v28 = v49;
            v27 = v50;
          }

          v31 = v38;
LABEL_21:
          if ((objc_msgSend(v27, "containsObject:", v36) & 1) == 0)
            objc_msgSend(v27, "addObject:", v36);
        }
        else
        {

          v31 = v38;
        }

      }
    }
    v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v53, v57, 16);
  }
  while (v30);
LABEL_27:

  v42 = v27;
  v5 = v46;
  v4 = v47;
  v11 = v45;
  v8 = 0x1E0C99000;
LABEL_29:
  v25 = v42;
  v26 = v48;
  if (objc_msgSend(v42, "count") || !objc_msgSend(v52, "containsObject:", v5))
  {
    v43 = v25;
  }
  else
  {
    objc_msgSend(*(id *)(v8 + 3360), "arrayWithObject:", v5);
    v43 = (id)objc_claimAutoreleasedReturnValue();
  }
  v24 = v43;

LABEL_34:
  return v24;
}

id UIKeyboardGetSupportedInputModes()
{
  void *v0;
  void *v1;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "supportedInputModeIdentifiers");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id UIKeyboardGetSuggestedInputModesForLanguage(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  TIGetSuggestedInputModesByLocaleForLanguage();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardGetInputModesForLanguage(v4, v3, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id UIKeyboardGetSuggestedDefaultInputModesForLanguage(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  void *v5;
  void *v6;

  v1 = a1;
  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1)
    goto LABEL_5;
  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_referenceBounds");
  v4 = v3;

  if (v4 <= 768.0
    || (TIGetSuggestedDefaultInputModesForFudgeByLocaleForLanguage(),
        (v5 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    TIGetSuggestedDefaultInputModesForPadByLocaleForLanguage();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
LABEL_5:
      TIGetSuggestedDefaultInputModesByLocaleForLanguage();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  UIKeyboardGetInputModesForLanguage(v5, v1, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id UIKeyboardGetSupportedLanguages()
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (UIKeyboardSupportedLanguages)
    return (id)UIKeyboardSupportedLanguages;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  UIKeyboardGetSupportedInputModes();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v6), "isEqualToString:", CFSTR("emoji"), (_QWORD)v12) & 1) == 0)
        {
          TIInputModeGetLanguageWithRegion();
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v1, "addObject:", v7);

        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }

  objc_msgSend(v1, "allObjects");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sortedArrayUsingSelector:", sel_caseInsensitiveCompare_);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)UIKeyboardSupportedLanguages;
  UIKeyboardSupportedLanguages = v9;

  v11 = (id)UIKeyboardSupportedLanguages;
  return v11;
}

id UIKeyboardGetDomainForCurrentLocale()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (!UIKeyboardGetDomainForCurrentLocale___dict)
  {
    v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithObjectsAndKeys:", CFSTR("UK"), CFSTR("GB"), 0);
    v1 = (void *)UIKeyboardGetDomainForCurrentLocale___dict;
    UIKeyboardGetDomainForCurrentLocale___dict = v0;

  }
  objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLocale");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0C997B0]);
  v3 = (id)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend((id)UIKeyboardGetDomainForCurrentLocale___dict, "objectForKey:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    v6 = (void *)MEMORY[0x1E0CB3940];
    if (!v4)
      v4 = v3;
    objc_msgSend(v4, "lowercaseString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR(".%@"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v3 = v8;
  }
  return v3;
}

id UIKeyboardGetInputModesSupportingHardwareKeyboard()
{
  void *v0;
  void *v1;

  TIGetLanguageSupportForHardwareKeyboard();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("MatchedModes"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id UIKeyboardGetDefaultInputModeLayoutForHardwareKeyboardWithCountryCode(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  TIGetLanguageSupportForHardwareKeyboard();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", CFSTR("DefaultHWLayouts"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKey:", v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    UIKeyboardGetInputModesSupportingHardwareKeyboard();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v11, "containsObject:", v5))
    {
      v12 = v5;
    }
    else
    {
      objc_msgSend(v11, "firstObject");
      v12 = (id)objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        objc_msgSend(v9, "allValues");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "firstObject");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12)
          goto LABEL_8;
        goto LABEL_10;
      }
    }
    v10 = 0;
    if (v12)
    {
LABEL_8:
      if (!v10)
      {
        TIGetHardwareLayoutsForInputMode();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "firstObject");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

      }
    }
LABEL_10:

  }
  return v10;
}

id UIKeyboardGetHardwareLayoutFromInputMode(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  objc_msgSend(v5, "softwareLayout");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  TIGetLanguageSupportForHardwareKeyboard();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKey:", CFSTR("HWLayoutsForSWVariants"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (!v10 || (objc_msgSend(v10, "objectForKey:", v8), (v12 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    objc_msgSend(v5, "normalizedIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    UIKeyboardGetDefaultInputModeLayoutForHardwareKeyboardWithCountryCode(v13, v6, v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v12;
}

id UIKeyboardGetSoftwareLayoutForHardwareKeyboardAndInputMode(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = a2;
  TIGetLanguageSupportForHardwareKeyboard();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("SWLayoutsForHW"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    UIKeyboardGetDefaultSoftwareKeyboardForInputMode(v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

id UIKeyboardGetDefaultHardwareKeyboardLayoutForInputMode(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((UIKeyboardInputModeSoftwareOnly(v1) & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    UIKeyboardGetSupportedHardwareKeyboardsForInputMode(v1);
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v3 = (id)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
          if (!objc_msgSend(v8, "isEqualToString:", CFSTR("Automatic"), (_QWORD)v10))
          {
            v2 = v8;
            goto LABEL_13;
          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v5)
          continue;
        break;
      }
    }
    v2 = 0;
LABEL_13:

  }
  return v2;
}

uint64_t UIKeyboardRequiresFontFallbacksForInputMode()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  TIInputModeGetNormalizedIdentifier();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  TIGetInputModeProperties();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0DBE0C8]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  return v3;
}

id UIKeyboardFontFallbackLanguageForInputMode()
{
  void *v0;
  void *v1;
  void *v2;

  TIInputModeGetNormalizedIdentifier();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  TIGetInputModeProperties();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0DBE0C0]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t UIKeyboardTypeAllowsRightToLeft(unint64_t a1)
{
  return (a1 > 0xB) | (0x6CFu >> a1) & 1;
}

uint64_t UIKeyboardIsEmojiInputModeActive()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v0 = (id)UIKeyboardActiveInputModes;
  v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v8;
    while (2)
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v0);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v4), "hasPrefix:", CFSTR("emoji"), (_QWORD)v7) & 1) != 0)
        {
          v5 = 1;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v2 != v4);
      v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
  v5 = 0;
LABEL_11:

  return v5;
}

uint64_t UIKeyboardEnabledInputModesAllowChineseTransliterationForText(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend((id)UIKeyboardActiveInputModes, "indexOfObjectPassingTest:", &__block_literal_global_252_2) == 0x7FFFFFFFFFFFFFFFLL
    || (unint64_t)objc_msgSend(v1, "length") >> 2 > 0x800)
  {
    v2 = 0;
  }
  else
  {
    v2 = objc_msgSend(v1, "_containsIdeographicCharacters");
  }

  return v2;
}

uint64_t UIKeyboardCurrentInputModeAllowsChineseOrJapaneseReanalysisForText()
{
  return 0;
}

uint64_t _TextInputBundlesRoot()
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/System/Library/TextInput");
}

uint64_t UIKeyboardSupportsSplit()
{
  void *v0;
  void *v1;
  void *v2;
  int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  uint64_t v11;

  UIKeyboardGetCurrentInputMode();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
    goto LABEL_11;
  +[UIKeyboardInputMode dictationInputMode](UIKeyboardInputMode, "dictationInputMode");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v0, "isEqualToString:", v2);

  if (v3)
  {
    +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "currentInputModeForDictation");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "identifier");
    v6 = objc_claimAutoreleasedReturnValue();

    v0 = (void *)v6;
  }
  if (objc_msgSend(v0, "rangeOfString:", CFSTR("HWR")) != 0x7FFFFFFFFFFFFFFFLL
    || (_UIApplicationIsStickerPickerService() & 1) != 0
    || +[UIKeyboard isRemoteEmojiCollectionViewEnabled](UIKeyboard, "isRemoteEmojiCollectionViewEnabled")
    && (objc_msgSend(v0, "hasPrefix:", CFSTR("emoji")) & 1) != 0)
  {
    goto LABEL_11;
  }
  if (_os_feature_enabled_impl())
  {
    +[UIKeyboardInputMode keyboardInputModeWithIdentifier:](UIKeyboardInputMode, "keyboardInputModeWithIdentifier:", v0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isMultiscript");

    if ((v8 & 1) != 0)
      goto LABEL_11;
  }
  TIInputModeGetSWLayout();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(&unk_1E1A93818, "containsObject:", v9);

  if ((v10 & 1) != 0)
LABEL_11:
    v11 = 0;
  else
    v11 = UIKeyboardDeviceSupportsSplit();

  return v11;
}

id UIKeyboardSplitTransitionViewClass()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  void *v10;

  UIKeyboardGetCurrentInputMode();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  KBStarLayoutString(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)UIKeyboardSplitTransitionViewClass___customTransitionViewClasses;
  if (!UIKeyboardSplitTransitionViewClass___customTransitionViewClasses)
  {
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("Emoji"), CFSTR("UIKeyboardFlipTransitionView"), CFSTR("Kana"), CFSTR("UIKeyboardFlipTransitionView"), CFSTR("Kana-Flick"), CFSTR("UIKeyboardFlipTransitionView"), CFSTR("Kana-RTL"), CFSTR("UIKeyboardFlipTransitionView"), CFSTR("Kana-RTL-Flick"), CFSTR("UIKeyboardFlipTransitionView"), CFSTR("Wubihua-Simplified"), CFSTR("UIKeyboardFlipTransitionView"), CFSTR("Wubihua-Traditional"), 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)UIKeyboardSplitTransitionViewClass___customTransitionViewClasses;
    UIKeyboardSplitTransitionViewClass___customTransitionViewClasses = v3;

    v2 = (void *)UIKeyboardSplitTransitionViewClass___customTransitionViewClasses;
  }
  objc_msgSend(v2, "valueForKey:", v1);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  v7 = CFSTR("UIKeyboardSliceTransitionView");
  if (v5)
    v7 = (__CFString *)v5;
  v8 = v7;
  _UIKitBundle();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "classNamed:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

uint64_t UIKeyboardSplitTransitionViewSupportsPinch()
{
  objc_class *v0;
  void *v1;
  uint64_t v2;

  v0 = (objc_class *)UIKeyboardSplitTransitionViewClass();
  NSStringFromClass(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardSliceTransitionView"));

  return v2;
}

BOOL UIKeyboardShouldMatchHeightWithPredictionViewOnLandscapeLargePhoneKeyboard(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    KBStarLayoutString(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (objc_msgSend(v2, "containsString:", CFSTR("Pinyin10")) & 1) != 0
      || (objc_msgSend(v2, "containsString:", CFSTR("Kana")) & 1) != 0
      || (objc_msgSend(v2, "containsString:", CFSTR("Wubihua")) & 1) != 0
      || objc_msgSend(v2, "containsString:", CFSTR("HWR"));

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL UIKeyboardShouldAddMarginOnLandscapeLargePhoneKeyboard(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    KBStarLayoutString(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (objc_msgSend(v2, "containsString:", CFSTR("Pinyin10")) & 1) != 0
      || (objc_msgSend(v2, "containsString:", CFSTR("Korean10Key")) & 1) != 0
      || (objc_msgSend(v2, "containsString:", CFSTR("Kana")) & 1) != 0
      || (objc_msgSend(v2, "containsString:", CFSTR("Wubihua")) & 1) != 0
      || objc_msgSend(v2, "containsString:", CFSTR("HWR"));

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

__CFString *UIKeyboardPhoneLayoutToUseForCarPlayInputMode(void *a1)
{
  id v1;
  __CFString *v2;
  void *v3;
  void *v4;
  int v5;

  v1 = a1;
  KBStarLayoutString(v1);
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!_UIKeyboardCarPlaySupportsTouch())
  {
    if (UIKeyboardLayoutDefaultTypeForInputModeIsSecure(v1))
      goto LABEL_11;
    goto LABEL_10;
  }
  if (-[__CFString isEqualToString:](v2, "isEqualToString:", CFSTR("Kana-Flick")))
  {

    v2 = CFSTR("Kana");
  }
  if (-[__CFString isEqualToString:](v2, "isEqualToString:", CFSTR("Thai-Four-Row")))
  {

    v2 = CFSTR("Thai");
  }
  if ((-[__CFString hasPrefix:](v2, "hasPrefix:", CFSTR("HWR")) & 1) != 0
    || (objc_msgSend(v1, "hasPrefix:", CFSTR("emoji")) & 1) != 0)
  {
LABEL_10:

    v2 = 0;
  }
LABEL_11:
  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferencesActions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "inputModeSupportsCrescendo:", v1);

  if (v5)
  {

    v2 = CFSTR("QWERTY");
  }

  return v2;
}

id UIKeyboardGetKBStarKeyboard(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  +[UIKeyboardImpl keyboardScreen](UIKeyboardImpl, "keyboardScreen");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKeyboard activeKeyboard](UIKeyboard, "activeKeyboard");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", v4, objc_msgSend(v5, "interfaceOrientation"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  UIKeyboardGetKBStarName(v3, v6, a2, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  UIKeyboardGetKBStarKeyboardWithName(v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id UIKeyboardGetKBStarKeyboardWithName(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  objc_msgSend(getTUIKeyboardLayoutFactoryClass(), "sharedKeyboardFactory");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "keyboardWithName:inCache:", v1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t UIKeyboardCarPlayRequiresTouch()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!_UIKeyboardCarPlaySupportsTouch())
    return 0;
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "activeInputModeIdentifiers");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = v1;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v2);
        if ((UIKeyboardAlwaysShowCandidateBarForInputMode() & 1) != 0)
        {
          v3 = 1;
          goto LABEL_13;
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_13:

  return v3;
}

uint64_t _UIKeyboardCarPlaySupportsTouch()
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  if (UIKeyboardSupportsTouch)
    return objc_msgSend((id)UIKeyboardSupportsTouch, "BOOLValue");
  +[_UICarPlaySession sharedInstance]();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UICarPlaySession carSessionStatus]((uint64_t)v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "currentSession");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "configuration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "screens");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6 && (objc_msgSend(v6, "availableInteractionModels") & 2) != 0)
    v7 = MEMORY[0x1E0C9AAB0];
  else
    v7 = MEMORY[0x1E0C9AAA0];
  v8 = (void *)UIKeyboardSupportsTouch;
  UIKeyboardSupportsTouch = v7;

  v9 = objc_msgSend((id)UIKeyboardSupportsTouch, "BOOLValue");
  return v9;
}

uint64_t UIKeyboardCarPlayIsRightHandDrive()
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  if (UIKeyboardCachedIsRightHandDrive)
    return objc_msgSend((id)UIKeyboardCachedIsRightHandDrive, "BOOLValue");
  +[_UICarPlaySession sharedInstance]();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UICarPlaySession carSessionStatus]((uint64_t)v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v2, "currentSession");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "configuration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "numberWithBool:", objc_msgSend(v5, "rightHandDrive"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)UIKeyboardCachedIsRightHandDrive;
  UIKeyboardCachedIsRightHandDrive = v6;

  v8 = objc_msgSend((id)UIKeyboardCachedIsRightHandDrive, "BOOLValue");
  return v8;
}

void UIKeyboardResetCarPlayInformationCache()
{
  void *v0;
  void *v1;

  v0 = (void *)UIKeyboardSupportsTouch;
  UIKeyboardSupportsTouch = 0;

  v1 = (void *)UIKeyboardCachedIsRightHandDrive;
  UIKeyboardCachedIsRightHandDrive = 0;

}

uint64_t UIKeyboardIsCarPlayFiveRowKeyboardEnabled()
{
  return UIKeyboardCarPlayFiveRowKeyboardEnabled;
}

uint64_t UIKeyboardSetCarPlayFiveRowKeyboardEnabled(uint64_t result)
{
  UIKeyboardCarPlayFiveRowKeyboardEnabled = result;
  return result;
}

uint64_t UIKeyboardIsFiveRowKeyboard(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;

  v1 = a1;
  if (qword_1ECD7EAF0 != -1)
    dispatch_once(&qword_1ECD7EAF0, &__block_literal_global_307_0);
  objc_msgSend(v1, "softwareLayout");
  v2 = objc_claimAutoreleasedReturnValue();
  if (v2
    && (v3 = (void *)v2,
        v4 = qword_1ECD7EAF8,
        objc_msgSend(v1, "softwareLayout"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        LOBYTE(v4) = objc_msgSend((id)v4, "containsObject:", v5),
        v5,
        v3,
        (v4 & 1) != 0))
  {
    v6 = 1;
  }
  else
  {
    objc_msgSend(v1, "primaryLanguage");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "hasPrefix:", CFSTR("ja"));

    if (v8)
    {
      objc_msgSend(v1, "softwareLayout");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v9, "isEqualToString:", CFSTR("QWERTY-Japanese"));
    }
    else
    {
      objc_msgSend(v1, "primaryLanguage");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v10, "hasPrefix:", CFSTR("zh")))
      {

      }
      else
      {
        objc_msgSend(v1, "primaryLanguage");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "hasPrefix:", CFSTR("yue"));

        if (!v12)
        {
          v6 = 0;
          goto LABEL_15;
        }
      }
      objc_msgSend(v1, "softwareLayout");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v9, "hasPrefix:", CFSTR("Pinyin10")) & 1) != 0)
      {
        v6 = 0;
      }
      else
      {
        objc_msgSend(v1, "softwareLayout");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = objc_msgSend(v13, "hasPrefix:", CFSTR("Wubihua")) ^ 1;

      }
    }

  }
LABEL_15:

  return v6;
}

id UIKeyboardGetKBStarKeyboardName(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  void *v5;
  void *v6;

  v4 = a1;
  +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", 0, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardGetKBStarName(v4, v5, a3, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

BOOL UIKeyboardTypeIsNumberPad(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 > 0xB || ((1 << a1) & 0x930) == 0)
    return a1 == 127;
  return result;
}

const __CFString *KBStarTypeStringWithTVLinearKeyboardLayout(int a1, int a2)
{
  int v2;
  const __CFString *result;

  if (a1 > 119)
  {
    switch(a1)
    {
      case '\x7F':
        return CFSTR("PasscodePad");
      case 'y':
        if (!a2)
          return CFSTR("Numbered");
        break;
      case 'x':
LABEL_7:
        if (a2)
          return CFSTR("Slim");
        else
          return CFSTR("AlphaWithURL");
    }
    return &stru_1E16EDF20;
  }
  v2 = a1 - 4;
  result = CFSTR("Email");
  switch(v2)
  {
    case 0:
    case 7:
      result = CFSTR("NumberPad");
      break;
    case 1:
      result = CFSTR("PhonePad");
      break;
    case 3:
      return result;
    case 4:
      result = CFSTR("DecimalPad");
      break;
    case 6:
      goto LABEL_7;
    default:
      return &stru_1E16EDF20;
  }
  return result;
}

id UIKeyboardGetKBStarKeyboardLayout(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("-"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = v1;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if ((objc_msgSend(v7, "isEqualToString:", CFSTR("Portrait")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("Caymen")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("Landscape")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("Email")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("NamePhonePad")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("URL")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("Twitter")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("Capital")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("Small")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("Display")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("Keyset")) & 1) == 0)
        {
          objc_msgSend(v10, "addObject:", v7);
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

  if (objc_msgSend(v10, "count"))
  {
    objc_msgSend(v10, "componentsJoinedByString:", CFSTR("-"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t UIKeyboardLayoutSupportsNumberPads(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v1 = a1;
  if (!UIKeyboardLayoutSupportsNumberPads___dict)
  {
    v2 = objc_alloc(MEMORY[0x1E0C99E08]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v2, "initWithObjectsAndKeys:", v3, CFSTR("emoji"), 0);
    v5 = (void *)UIKeyboardLayoutSupportsNumberPads___dict;
    UIKeyboardLayoutSupportsNumberPads___dict = v4;

  }
  TICanonicalInputModeName();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)UIKeyboardLayoutSupportsNumberPads___dict, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
    v9 = objc_msgSend(v7, "BOOLValue");
  else
    v9 = 1;

  return v9;
}

BOOL UIKeyboardTypeSupportsDictationSpelling(uint64_t a1)
{
  return (unint64_t)(a1 - 2) < 7 || a1 == 123 || a1 == 11;
}

uint64_t UIKeyboardInputModeSWLayoutScript(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  v1 = a1;
  if (!UIKeyboardInputModeSWLayoutScript___dict)
  {
    v21 = objc_alloc(MEMORY[0x1E0C99E08]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1281455214);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1281455214);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1281455214);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1281455214);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1132032620);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1132032620);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1132032620);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1132032620);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1132032620);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1098015074);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1098015074);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1214603890);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1198679403);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1147500129);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1197830002);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1215262311);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v21, "initWithObjectsAndKeys:", v20, CFSTR("QWERTY"), v26, CFSTR("QWERTZ"), v25, CFSTR("AZERTY"), v24, CFSTR("Czech"), v23, CFSTR("Russian"), v19, CFSTR("Bulgarian"), v22, CFSTR("Macedonian"), v2, CFSTR("Serbian"), v3,
           CFSTR("Ukrainian"),
           v4,
           CFSTR("Arabic"),
           v18,
           CFSTR("Persian"),
           v17,
           CFSTR("Hebrew"),
           v5,
           CFSTR("Greek"),
           v6,
           CFSTR("Devangari"),
           v7,
           CFSTR("Georgian"),
           v8,
           CFSTR("Korean"),
           0);
    v10 = (void *)UIKeyboardInputModeSWLayoutScript___dict;
    UIKeyboardInputModeSWLayoutScript___dict = v9;

  }
  objc_msgSend(v1, "componentsSeparatedByString:", CFSTR("-"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectAtIndex:", 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)UIKeyboardInputModeSWLayoutScript___dict, "objectForKey:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13)
    v15 = objc_msgSend(v13, "unsignedIntValue");
  else
    v15 = 0;

  return v15;
}

unint64_t UIKeyboardGetTIUserInterfaceIdiom(unint64_t result)
{
  if (result >= 5)
    return -1;
  return result;
}

id UIKeyboardLayoutClassForInputMode(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v1 = a1;
  if (!UIKeyboardLayoutClassForInputMode___dict)
  {
    v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithObjectsAndKeys:", CFSTR("UIKeyboardLayoutDictation"), CFSTR("dictation"), 0);
    v3 = (void *)UIKeyboardLayoutClassForInputMode___dict;
    UIKeyboardLayoutClassForInputMode___dict = v2;

  }
  TICanonicalInputModeName();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)UIKeyboardLayoutClassForInputMode___dict, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v6 = v5;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v7 = v5;
    TIBundleForInputMode();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8 && (v6 = (void *)objc_msgSend(v8, "classNamed:", v7)) != 0
      || (_UIKitBundle(),
          v10 = (void *)objc_claimAutoreleasedReturnValue(),
          v6 = (void *)objc_msgSend(v10, "classNamed:", v7),
          v10,
          v6))
    {
      objc_msgSend((id)UIKeyboardLayoutClassForInputMode___dict, "setObject:forKey:", v6, v4);
    }

  }
  v11 = v6;

  return v11;
}

uint64_t UIKeyboardLayoutDefaultTypeForInputModeIsASCIICapableExtended(void *a1)
{
  id v1;
  void *v2;
  int v3;
  unsigned int IsASCIICapable;
  uint64_t v5;
  void *v6;

  v1 = a1;
  _UIMainBundleIdentifier();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.sidecar.extension.display"));

  IsASCIICapable = UIKeyboardLayoutDefaultTypeForInputModeIsASCIICapable(v1);
  v5 = v3 ^ 1 | IsASCIICapable;
  if ((v3 & 1) == 0 && (IsASCIICapable & 1) == 0)
  {
    TICanonicalInputModeName();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v6, "isEqualToString:", CFSTR("ja_JP-Kana"));

  }
  return v5;
}

uint64_t UIKeyboardLayoutDefaultTypeForInputModeIsASCIICapable(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v1 = a1;
  TIInputModeGetNormalizedIdentifier();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  TIGetInputModeProperties();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    +[UIKeyboardInputMode keyboardInputModeWithIdentifier:](UIKeyboardInputMode, "keyboardInputModeWithIdentifier:", v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isExtensionInputMode"))
    {
      v5 = objc_msgSend(v4, "defaultLayoutIsASCIICapable");
      goto LABEL_9;
    }

  }
  objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0DBE098]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v6;
  v5 = !v6 || objc_msgSend(v6, "BOOLValue");
LABEL_9:

  return v5;
}

uint64_t UIKeyboardLayoutSupportsASCIIToggleKey(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;

  v1 = a1;
  if ((UIKeyboardLayoutDefaultTypeForInputModeIsASCIICapable(v1) & 1) == 0)
  {
    TIInputModeGetNormalizedIdentifier();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    TIGetInputModeProperties();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKey:", *MEMORY[0x1E0DBE150]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if ((objc_msgSend(v5, "BOOLValue") & 1) == 0)
      {
LABEL_11:
        v2 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if ((objc_msgSend(v5, "isEqualToString:", CFSTR("Never")) & 1) != 0)
          goto LABEL_11;
        if (objc_msgSend(v5, "isEqualToString:", CFSTR("Hardware")))
        {
          +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          v7 = objc_msgSend(v6, "isInHardwareKeyboardMode");

          if (!v7)
            goto LABEL_11;
        }
      }
    }
    v2 = 1;
LABEL_12:

    goto LABEL_13;
  }
  v2 = 0;
LABEL_13:

  return v2;
}

id UIKeyboardGetPreferredASCIICapableInputModeForInputMode(uint64_t a1)
{
  return UIKeyboardGetInputModeForKey(a1, CFSTR("UIKeyboardPreferredASCIICapableInputMode"));
}

id UIKeyboardGetInputModeForKey(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = a2;
  TIInputModeGetNormalizedIdentifier();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  TIGetInputModeProperties();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;

  return v6;
}

id UIKeyboardGetPreferredNonASCIICapableInputModeForInputMode(uint64_t a1)
{
  return UIKeyboardGetInputModeForKey(a1, CFSTR("UIKeyboardPreferredNonASCIICapableInputMode"));
}

id UIKeyboardImageWithName(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v1 = a1;
  UIKeyboardGetCurrentInputMode();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v1;
  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "preferencesActions");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "rivenSizeFactor:", 1.0);
  v7 = v6;

  v8 = v3;
  if (v7 > 1.0)
  {
    objc_msgSend(v3, "stringByAppendingString:", CFSTR("-163r.png"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if ((objc_msgSend(v8, "hasSuffix:", CFSTR(".png")) & 1) == 0)
  {
    objc_msgSend(v8, "stringByAppendingString:", CFSTR(".png"));
    v9 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v9;
  }
  _UIImageWithName(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

uint64_t UIKeyboardCheckSpellingEnabled()
{
  void *v0;
  uint64_t v1;

  +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "checkSpellingPreferenceForTraits");

  return v1;
}

uint64_t UIKeyboardAutocorrectSpellingEnabled()
{
  return UIKeyboardAutocorrectSpellingFlag;
}

uint64_t UIKeyboardSetAutocorrectSpellingEnabled(uint64_t result)
{
  UIKeyboardAutocorrectSpellingFlag = result;
  return result;
}

uint64_t UIKeyboardAutocorrectSpellingForInputMode()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  if (!UIKeyboardAutocorrectSpellingFlag)
    return 0;
  TIInputModeGetNormalizedIdentifier();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  TIGetInputModeProperties();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0DBE068]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  return v3;
}

id UIKeyboardGetKeyGlyphImage(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  int v5;
  double v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v1 = a1;
  +[UIKeyboardImpl keyboardScreen](UIKeyboardImpl, "keyboardScreen");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKeyboard activeKeyboard](UIKeyboard, "activeKeyboard");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", v2, objc_msgSend(v3, "interfaceOrientation"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "isKeyboardMinorEdgeWidth");
  objc_msgSend(v4, "keyboardWidth");
  v7 = CFSTR("_portrait");
  if (v6 > 768.0)
    v7 = CFSTR("_fudge_portrait");
  v8 = CFSTR("_landscape");
  if (v6 > 1024.0)
    v8 = CFSTR("_fudge_landscape");
  if (v5)
    v9 = v7;
  else
    v9 = v8;
  objc_msgSend(v1, "stringByAppendingString:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (_AXSEnhanceTextLegibilityEnabled())
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("bold_%@"), v10);
    v11 = objc_claimAutoreleasedReturnValue();

    v10 = (void *)v11;
  }
  objc_msgSend(v10, "stringByAppendingString:", CFSTR(".png"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  _UIImageWithName(v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

id UIKeyboardGetGlobeKeyImage()
{
  return UIKeyboardGetKeyGlyphImage(CFSTR("global"));
}

id UIKeyboardGetDeleteKeyImage()
{
  return UIKeyboardGetKeyGlyphImage(CFSTR("delete"));
}

id UIKeyboardGetDeleteOnKeyImage()
{
  return UIKeyboardGetKeyGlyphImage(CFSTR("delete_on"));
}

id UIKeyboardGetKeyboardKeyImage()
{
  return _UIImageWithName(CFSTR("keyboard_dockitem-portrait"));
}

UIColor *UIKeyboardGetLightCandidateActiveTextColor()
{
  return +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.9);
}

UIColor *UIKeyboardGetLightCandidateHighlightedTextColor()
{
  return +[UIColor blackColor](UIColor, "blackColor");
}

UIColor *UIKeyboardGetLightCandidateHighlightColor()
{
  return +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.921568627, 0.929411765, 0.941176471, 1.0);
}

id UIKeyboardGetCandidateUISingleLineFont()
{
  void *v0;
  char v1;
  double v2;
  char v3;
  const char *v4;
  int IsAccessibilityContentSizeCategory;
  void *v6;

  objc_msgSend((id)UIApp, "preferredContentSizeCategory");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isEqualToString:", CFSTR("UICTContentSizeCategoryXL"));
  v2 = 20.0;
  if ((v1 & 1) == 0)
  {
    v3 = objc_msgSend(v0, "isEqualToString:", CFSTR("UICTContentSizeCategoryXXL"), 20.0);
    v2 = 22.0;
    if ((v3 & 1) == 0)
    {
      if ((objc_msgSend(v0, "isEqualToString:", CFSTR("UICTContentSizeCategoryXXXL"), 22.0) & 1) != 0
        || (IsAccessibilityContentSizeCategory = _UIContentSizeCategoryIsAccessibilityContentSizeCategory(v0, v4),
            v2 = 18.0,
            IsAccessibilityContentSizeCategory))
      {
        v2 = 24.0;
      }
    }
  }
  objc_msgSend(off_1E167A828, "systemFontOfSize:", v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

UIColor *UIKeyboardGetCandidateAndPredictionBarHighlightColor()
{
  return +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.2, 1.0);
}

double UIKeyboardGetSingleCenteredCellForWidth(double a1)
{
  void *v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  if ((v3 & 0xFFFFFFFFFFFFFFFBLL) != 1)
  {
    v4 = (a1 + -4.0) / 12.0;
    v5 = floorf(v4);
    a1 = a1 - (float)(v5 + v5) + -4.0;
  }
  v6 = a1;
  return floorf(v6);
}

objc_class *_shortcutEditorController(void *a1)
{
  id v1;
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = a1;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2050000000;
  v2 = (void *)qword_1ECD7EB10;
  v22 = qword_1ECD7EB10;
  if (!qword_1ECD7EB10)
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __getUIEditUserWordControllerClass_block_invoke;
    v18[3] = &unk_1E16B14C0;
    v18[4] = &v19;
    __getUIEditUserWordControllerClass_block_invoke((uint64_t)v18);
    v2 = (void *)v20[3];
  }
  v3 = objc_retainAutorelease(v2);
  _Block_object_dispose(&v19, 8);
  if (v3)
  {
    UIKeyboardGetCurrentInputMode();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    TIInputModeGetVariant();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    TIInputModeGetLanguageWithRegion();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v1, "_containsCJScripts"))
    {
      if (objc_msgSend(v5, "isEqualToString:", CFSTR("Pinyin")))
      {
        objc_msgSend(v1, "_stringByTranscribingFromLanguage:", v6);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "_stringByApplyingTransform:", *MEMORY[0x1E0C9B358]);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_16:
        if ((objc_msgSend(v8, "_containsIdeographicCharacters") & 1) != 0)
        {
          v12 = 0;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
          v13 = objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "_stringByReplacingCharactersInSet:withCharacter:", v13, 0);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          v8 = (void *)v13;
        }

        v14 = objc_msgSend(v12, "length");
        v15 = [v3 alloc];
        if (v14)
          v16 = objc_msgSend(v15, "initWithText:andShortcut:", v1, v12);
        else
          v16 = objc_msgSend(v15, "initWithText:", v1);
        v3 = (objc_class *)v16;

        goto LABEL_23;
      }
      if (objc_msgSend(v5, "isEqualToString:", CFSTR("Zhuyin")))
      {
        objc_msgSend(v1, "_stringByTransliteratingToZhuyin");
        v9 = objc_claimAutoreleasedReturnValue();
LABEL_15:
        v8 = (void *)v9;
        goto LABEL_16;
      }
      UIKeyboardGetCurrentUILanguage();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v10, "isEqualToString:", CFSTR("ja")) & 1) != 0)
      {

        goto LABEL_14;
      }
      v11 = objc_msgSend(v6, "isEqualToString:", CFSTR("ja_JP"));

      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    else if (objc_msgSend(v1, "_containsJapanese"))
    {
LABEL_14:
      objc_msgSend(v1, "_stringByTranscribingFromLanguage:", CFSTR("ja"));
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_15;
    }
    v8 = 0;
    goto LABEL_16;
  }
LABEL_23:

  return v3;
}

void sub_185D6378C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _dismissShortcutEditorController(void *a1)
{
  id v1;

  objc_msgSend(a1, "visibleViewController");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v1, "_dismiss");

}

void _swapInCompletionForShortcutEditor(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(a1, "visibleViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v4, "dismissCompletionHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___swapInCompletionForShortcutEditor_block_invoke;
    v7[3] = &unk_1E16B6740;
    v8 = v5;
    v9 = v3;
    v6 = v5;
    objc_msgSend(v4, "setDismissCompletionHandler:", v7);

  }
}

uint64_t ___swapInCompletionForShortcutEditor_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t UIKeyboardNextPreferredInputMode()
{
  return 0;
}

Class __getUIEditUserWordControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7EB18)
    qword_1ECD7EB18 = _sl_dlopen();
  if (!qword_1ECD7EB18)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *KeyboardSettingsLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardIntl.m"), 3246, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("UIEditUserWordController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getUIEditUserWordControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKeyboardIntl.m"), 3247, CFSTR("Unable to find class %s"), "UIEditUserWordController");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7EB10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL _UIGetEnableLayoutAwareShortcutsAutomatic()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_EnableLayoutAwareShortcutsAutomatic,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_EnableLayoutAwareShortcutsAutomatic))
  {
    v1 = 0;
  }
  else
  {
    do
    {
      v1 = v0 < v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_EnableLayoutAwareShortcutsAutomatic, (uint64_t)CFSTR("EnableLayoutAwareShortcutsAutomatic"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_EnableLayoutAwareShortcutsAutomatic;
    }
    while (v0 != _UIInternalPreference_EnableLayoutAwareShortcutsAutomatic);
  }
  return byte_1ECD76674 && v1;
}

void sub_185D6654C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_UITraitChangeRegistry;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_185D669B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_185D66AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _UIInlinePointerSetEnumerate(_QWORD *a1, void *a2)
{
  void (**v3)(id, void *, _BYTE *);
  NSHashTable *v4;
  void *v5;
  uint64_t v6;
  void **v7;
  BOOL v8;
  char v9;
  NSHashEnumerator enumerator;

  v3 = a2;
  if (*a1)
  {
    v4 = (NSHashTable *)a1[2];
    if (v4)
    {
      memset(&enumerator, 0, sizeof(enumerator));
      NSEnumerateHashTable(&enumerator, v4);
      do
      {
        v5 = NSNextHashEnumeratorItem(&enumerator);
        if (!v5)
          break;
        v9 = 0;
        v3[2](v3, v5, &v9);
      }
      while (!v9);
      NSEndHashTableEnumeration(&enumerator);
    }
    else
    {
      v6 = *a1 - 1;
      v7 = (void **)(a1 + 3);
      do
      {
        LOBYTE(enumerator._pi) = 0;
        ((void (**)(id, void *, NSHashEnumerator *))v3)[2](v3, *v7, &enumerator);
        if (LOBYTE(enumerator._pi))
          v8 = 1;
        else
          v8 = v6 == 0;
        --v6;
        ++v7;
      }
      while (!v8);
    }
  }

}

void sub_185D66B9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185D66D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_185D66DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_185D66EE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185D66FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_185D670E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL30_UIShouldLogTraitUsageTrackingv_block_invoke()
{
  int v0;
  int v1;
  id v2;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1)
    goto LABEL_4;
  v1 = _UIInternalPreference_TraitUsageTrackingLoggingEnabled;
  if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_TraitUsageTrackingLoggingEnabled)
    goto LABEL_4;
  while (v0 >= v1)
  {
    _UIInternalPreferenceSync(v0, &_UIInternalPreference_TraitUsageTrackingLoggingEnabled, (uint64_t)CFSTR("TraitUsageTrackingLoggingEnabled"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    v1 = _UIInternalPreference_TraitUsageTrackingLoggingEnabled;
    if (v0 == _UIInternalPreference_TraitUsageTrackingLoggingEnabled)
      goto LABEL_4;
  }
  if (!byte_1ECD7667C)
  {
LABEL_4:
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    _MergedGlobals_1109 = objc_msgSend(v2, "BOOLForKey:", CFSTR("UITraitUsageTrackingLoggingEnabled"));

  }
  else
  {
    _MergedGlobals_1109 = 1;
  }
}

void sub_185D6722C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void __UIInlinePointerSetInsertElement(uint64_t *a1, unint64_t pointer, int a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSHashTable *v10;
  void **v11;
  id v12;
  unint64_t v13;
  NSHashTable *v14;
  void *v15;
  const void **v16;
  const void *v17;
  uint64_t v18;

  v6 = pointer >> 4;
  v7 = *a1;
  v8 = pointer >> 10;
  v9 = pointer >> 16;
  if (!*a1)
    goto LABEL_12;
  if (v7 == 1)
  {
    if (a1[3] == pointer)
      return;
    goto LABEL_12;
  }
  if ((((1 << v6) | (1 << v8) | (1 << SBYTE2(pointer))) & ~a1[1]) != 0)
  {
LABEL_12:
    if (a3)
      v12 = (id)pointer;
    v13 = *a1;
    if ((unint64_t)*a1 > 0xC)
    {
      v14 = (NSHashTable *)a1[2];
      if (!v14)
      {
        __UIInlinePointerSetCreateHashTableWithCapacity(26);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        a1[2] = (uint64_t)v15;

        v16 = (const void **)(a1 + 3);
        do
        {
          v17 = *v16++;
          NSHashInsert((NSHashTable *)a1[2], v17);
          --v13;
        }
        while (v13);
        v14 = (NSHashTable *)a1[2];
      }
      NSHashInsert(v14, (const void *)pointer);
      v13 = *a1;
    }
    else
    {
      a1[v13 + 3] = pointer;
    }
    v18 = (1 << v6) | (1 << v8) | (1 << v9) | a1[1];
    *a1 = v13 + 1;
    a1[1] = v18;
    return;
  }
  v10 = (NSHashTable *)a1[2];
  if (v10)
  {
    if (NSHashGet(v10, (const void *)pointer))
      return;
    goto LABEL_12;
  }
  v11 = (void **)(a1 + 3);
  while (*v11 != (void *)pointer)
  {
    ++v11;
    if (!--v7)
      goto LABEL_12;
  }
}

char *std::__hash_table<std::__hash_value_type<void (*)(void),_UITrackedTraitUsageRecord>,std::__unordered_map_hasher<void (*)(void),std::__hash_value_type<void (*)(void),_UITrackedTraitUsageRecord>,std::hash<void (*)(void)>,std::equal_to<void (*)(void)>,true>,std::__unordered_map_equal<void (*)(void),std::__hash_value_type<void (*)(void),_UITrackedTraitUsageRecord>,std::equal_to<void (*)(void)>,std::hash<void (*)(void)>,true>,std::allocator<std::__hash_value_type<void (*)(void),_UITrackedTraitUsageRecord>>>::__emplace_unique_key_args<void (*)(void),std::piecewise_construct_t const&,std::tuple<void (* const&)(void)>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x48uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *(_QWORD *)v12 = *v32;
LABEL_72:
    *v32 = v12;
    goto LABEL_73;
  }
  *(_QWORD *)v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v31[v3] = a1 + 4;
  if (*(_QWORD *)v12)
  {
    v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_185D677A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_185D682BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_185D68F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

id TIGetTypoTrackerButtonValue()
{
  void *v0;
  void *v1;

  if (TIGetTypoTrackerButtonValue_onceToken != -1)
    dispatch_once(&TIGetTypoTrackerButtonValue_onceToken, &__block_literal_global_427);
  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForPreferenceKey:", CFSTR("TypoTrackerButton"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_185D6F90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGMutablePathRef UIInputSwitcherCreatePopupPath(int a1, int a2, char a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  double v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  id v54;
  CGMutablePathRef MutableCopy;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double MaxX;
  double v69;
  double v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;

  v71.origin.x = a9;
  v71.origin.y = a10;
  v71.size.width = a11;
  v71.size.height = a12;
  CGRectGetMinX(v71);
  v72.origin.x = a5;
  v72.origin.y = a6;
  v72.size.width = a7;
  v72.size.height = a8;
  CGRectGetMinX(v72);
  v73.origin.x = a9;
  v73.origin.y = a10;
  v73.size.width = a11;
  v73.size.height = a12;
  MaxX = CGRectGetMaxX(v73);
  v74.origin.x = a5;
  v74.origin.y = a6;
  v74.size.width = a7;
  v74.size.height = a8;
  v24 = CGRectGetMaxX(v74);
  v75.origin.x = a9;
  v75.origin.y = a10;
  v75.size.width = a11;
  v75.size.height = a12;
  v66 = v24 - CGRectGetMaxX(v75);
  +[UIBezierPath bezierPath](UIBezierPath, "bezierPath");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "scale");
  v28 = v27;

  v29 = 3.0;
  if (v28 <= 1.0)
    v30 = 3.0;
  else
    v30 = 6.0;
  v31 = v30 + 1.0;
  if (v28 > 1.0)
    v29 = 2.0;
  v32 = 12.0;
  if (v28 > 1.0)
    v32 = 13.0;
  if ((unint64_t)(a4 - 3) >= 2)
    v31 = v30;
  v33 = a5 + v30;
  v57 = v33;
  if (a1)
    v33 = a9;
  v62 = v31;
  v63 = v33;
  if (a2)
    v34 = 0.0;
  else
    v34 = 6.0;
  v35 = a9 + 2.0;
  if (a1)
    v35 = a9;
  v36 = a6 + a8 - v29;
  if ((a3 & 4) != 0)
    v37 = v35;
  else
    v37 = a9;
  if ((a3 & 4) != 0)
    v38 = v36;
  else
    v38 = a10 + a12;
  if ((a3 & 4) != 0)
    v39 = a10 + 1.0;
  else
    v39 = a10;
  v64 = a10 - v32;
  v60 = a10 - v32 + v39;
  v61 = v34;
  v40 = a12 + a10;
  v41 = a9 + a11 + -2.0;
  v59 = a9 + a11;
  if ((a3 & 8) != 0)
  {
    v42 = v36;
  }
  else
  {
    v41 = a9 + a11;
    v42 = a12 + a10;
  }
  if ((a3 & 8) != 0)
    v43 = a10 + 1.0;
  else
    v43 = a10;
  v44 = v38;
  v45 = MaxX + v66;
  v65 = v42;
  v67 = v41;
  v69 = v37 + (v41 - v37) * 0.5;
  objc_msgSend(v25, "moveToPoint:", *(_QWORD *)&v57);
  v70 = v44;
  if ((a3 & 4) != 0)
  {
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 4, 0, v37, v44, 4.0, 4.0);
  }
  else
  {
    objc_msgSend(v25, "addLineToPoint:", a9, v40);
    objc_msgSend(v25, "addLineToPoint:", v37, v44);
  }
  v46 = v64 + v43;
  v47 = a6 + v61;
  v48 = v60 * 0.5;
  v49 = v45 - v62;
  if (a1)
  {
    v50 = v46;
    objc_msgSend(v25, "addLineToPoint:", a9, v60 * 0.5);
    v51 = v50;
  }
  else
  {
    v52 = v46;
    objc_msgSend(v25, "addLineToPoint:", v37, v39);
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 2, 1, v37, v48, 10.0, 10.0);
    objc_msgSend(v25, "addLineToPoint:", v58 + 10.0, v48);
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 4, 0, v58, v48, 10.0, 10.0);
    v51 = v52;
  }
  v53 = v51 * 0.5;
  if (a2)
  {
    objc_msgSend(v25, "addLineToPoint:", v63, v47);
    objc_msgSend(v25, "addLineToPoint:", v49, v47);
  }
  else
  {
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 1, 0, v63, v47, 10.0, 10.0);
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 2, 0, v49, v47, 10.0, 10.0);
  }
  objc_msgSend(v25, "addLineToPoint:", v49, v64);
  objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 8, 0, v49, v53, 10.0, 10.0);
  objc_msgSend(v25, "addLineToPoint:", v67 + 10.0, v53);
  objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 1, 1, v67, v53, 10.0, 10.0);
  if ((a3 & 8) != 0)
  {
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 8, 0, v67, v65, 4.0, 4.0);
  }
  else
  {
    objc_msgSend(v25, "addLineToPoint:", v59, v40);
    objc_msgSend(v25, "addLineToPoint:", v67, v65);
  }
  objc_msgSend(v25, "addLineToPoint:", v69, v70);
  objc_msgSend(v25, "closePath");
  v54 = objc_retainAutorelease(v25);
  MutableCopy = CGPathCreateMutableCopy((CGPathRef)objc_msgSend(v54, "CGPath"));

  return MutableCopy;
}

void sub_185D77C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185D799D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D7AF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id get_SFAutomaticPasswordInputViewControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7C628;
  v7 = qword_1ECD7C628;
  if (!qword_1ECD7C628)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_SFAutomaticPasswordInputViewControllerClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __get_SFAutomaticPasswordInputViewControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185D7B798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *TCCLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!TCCLibraryCore_frameworkLibrary)
    TCCLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)TCCLibraryCore_frameworkLibrary;
  if (!TCCLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TCCLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIInputViewController.m"), 59, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

BOOL UIInputViewControllerRequiresInputModeSwitchKey()
{
  void *v0;
  void *v1;
  _BOOL8 v2;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "activeInputModeIdentifiers");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if ((unint64_t)objc_msgSend(v1, "count") < 2)
    v2 = 0;
  else
    v2 = (UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1
      || +[UIDevice _hasHomeButton](UIDevice, "_hasHomeButton");

  return v2;
}

void sub_185D8173C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D82438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIKeyCommandHardwareKeyboardLayoutChanged()
{
  void *v0;
  uint64_t v1;
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  id v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v0, "_isHardwareKeyboardAvailable"))
  {
    v1 = objc_msgSend((id)UIApp, "_hardwareKeyboard:", 0);

    if (v1)
    {
      objc_msgSend((id)UIApp, "_hardwareKeyboard:", 0);
      GSKeyboardGetLayout();
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
  }
  else
  {

  }
  v2 = CFSTR("US");
LABEL_6:
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = objc_msgSend(&unk_1E1A93860, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(&unk_1E1A93860);
        v7 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(MEMORY[0x1E0DBDC68], "shortcutWithKeyEquivalent:modifierFlags:", v7, 0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0DBDC68], "localizedKeyboardShortcut:forKeyboardLayout:", v8, v2);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "keyEquivalent");
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = (void *)v10;
        if (v7)
          v12 = v10 == 0;
        else
          v12 = 1;
        if (!v12)
        {
          v13 = v7;
          _UIKeyCommandGetLocalizedSymbolDict();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "setObject:forKeyedSubscript:", v11, v13);

        }
      }
      v4 = objc_msgSend(&unk_1E1A93860, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v4);
  }

}

BOOL iPhoneVisualStyle(int a1)
{
  return (a1 - 1) < 5;
}

BOOL iPadVisualStyle(int a1)
{
  return (a1 - 101) < 9;
}

uint64_t visualStyleFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone-Standard")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone-Dictation")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone-Alert")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone-Emoji")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone-Passcode")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Wildcat-50On")) & 1) != 0)
  {
    v2 = 101;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Wildcat-Standard")) & 1) != 0)
  {
    v2 = 102;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Wildcat-Dictation")) & 1) != 0)
  {
    v2 = 103;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Wildcat-Alert")) & 1) != 0)
  {
    v2 = 104;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Wildcat-Passcode")) & 1) != 0)
  {
    v2 = 105;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Wildcat-Split")) & 1) != 0)
  {
    v2 = 106;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Wildcat-Split-Full-Width")) & 1) != 0)
  {
    v2 = 107;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Wildcat-Emoji")) & 1) != 0)
  {
    v2 = 108;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Wildcat-Emoji-Split")) & 1) != 0)
  {
    v2 = 109;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Monolith-Standard")) & 1) != 0)
  {
    v2 = 201;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Car-Standard")))
  {
    v2 = 301;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *enumStringForVisualStyle(int a1)
{
  const __CFString *result;
  const __CFString *v2;

  if (a1 <= 100)
  {
    switch(a1)
    {
      case 1:
        result = CFSTR("UIKBVisualStyleiPhoneStandard");
        break;
      case 2:
        result = CFSTR("UIKBVisualStyleiPhoneDictation");
        break;
      case 3:
        result = CFSTR("UIKBVisualStyleiPhoneAlert");
        break;
      case 4:
        result = CFSTR("UIKBVisualStyleiPhoneEmoji");
        break;
      case 5:
        result = CFSTR("UIKBVisualStyleiPhonePasscode");
        break;
      default:
        result = 0;
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 'e':
        result = CFSTR("UIKBVisualStyleWildcat50On");
        break;
      case 'f':
        result = CFSTR("UIKBVisualStyleWildcatStandard");
        break;
      case 'g':
        result = CFSTR("UIKBVisualStyleWildcatDictation");
        break;
      case 'h':
        result = CFSTR("UIKBVisualStyleWildcatAlert");
        break;
      case 'i':
        result = CFSTR("UIKBVisualStyleWildcatPasscode");
        break;
      case 'j':
        result = CFSTR("UIKBVisualStyleWildcatSplit");
        break;
      case 'k':
        result = CFSTR("UIKBVisualStyleWildcatSplitFullWidth");
        break;
      case 'l':
        result = CFSTR("UIKBVisualStyleWildcatEmoji");
        break;
      case 'm':
        result = CFSTR("UIKBVisualStyleWildcatEmojiSplit");
        break;
      default:
        v2 = CFSTR("UIKBVisualStyleCarStandard");
        if (a1 != 301)
          v2 = 0;
        if (a1 == 201)
          result = CFSTR("UIKBVisualStyleMonolithStandard");
        else
          result = v2;
        break;
    }
  }
  return result;
}

uint64_t interactionTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("None")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("String")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("String-Popup")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CandidateList")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Delete")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Dictation")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Dismiss")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Drag")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Handwriting")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("International")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KeyplaneSwitch")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("More")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Redo")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Return")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Shift")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Space")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("String-Flick")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Undo")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EmojiInputView")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EmojiCategoryControl")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MultitapComplete")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MultitapReverse")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("RecentInput")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Clear")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("RevealHiddenCandidates")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SelectNextCandidate")) & 1) != 0)
  {
    v2 = 25;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SelectPreviousCandidate")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AcceptAutocorrection")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Bold")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Italic")) & 1) != 0)
  {
    v2 = 29;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Underline")) & 1) != 0)
  {
    v2 = 30;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Cut")) & 1) != 0)
  {
    v2 = 31;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Copy")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Paste")) & 1) != 0)
  {
    v2 = 33;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("LeftArrow")) & 1) != 0)
  {
    v2 = 34;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("RightArrow")) & 1) != 0)
  {
    v2 = 35;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AssertLayoutTag")) & 1) != 0)
  {
    v2 = 36;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Tab")) & 1) != 0)
  {
    v2 = 37;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Caps-Lock")) & 1) != 0)
  {
    v2 = 38;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Dictation-Display")) & 1) != 0)
  {
    v2 = 39;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MessageWriteboard")) & 1) != 0)
  {
    v2 = 40;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MultitapForward")) & 1) != 0)
  {
    v2 = 41;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EmojiSearchControl")) & 1) != 0)
  {
    v2 = 42;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CandidateExtension")) & 1) != 0)
  {
    v2 = 43;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("CustomAction")))
  {
    v2 = 44;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *enumStringForInteractionType(unsigned int a1)
{
  if (a1 > 0x2C)
    return 0;
  else
    return off_1E16CD8F0[a1];
}

uint64_t displayTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("String")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CandidateList")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Command")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Delete")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Dictation")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Dismiss")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Drag")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("DualString")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("DynamicString")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Emoji")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TenKeyKeyplaneSwitchOff")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TenKeyKeyplaneSwitchOn")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Handwriting")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("International")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KeyplaneSwitch")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("LeftDarkAndNoRightDivider")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("LightBottom")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("LightBottomAndRight")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("More")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NoRightDivider")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NumberPad")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Return")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ReverseVerticalDark")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Shift")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SmallKana")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Space")) & 1) != 0)
  {
    v2 = 25;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Tab")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Top-Level-Domain")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Top-Level-Domain-Variant")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TwoVerticalDark")) & 1) != 0)
  {
    v2 = 29;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TwoVerticalLight")) & 1) != 0)
  {
    v2 = 30;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("VoicedKey")) & 1) != 0)
  {
    v2 = 31;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MultitapComplete")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MultitapReverse")) & 1) != 0)
  {
    v2 = 33;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("WALongVowelSign")) & 1) != 0)
  {
    v2 = 34;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TenKeyRoman")) & 1) != 0)
  {
    v2 = 35;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EmojiInputView")) & 1) != 0)
  {
    v2 = 36;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EmojiCategoryControl")) & 1) != 0)
  {
    v2 = 37;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Letter-Line")) & 1) != 0)
  {
    v2 = 38;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Bold")) & 1) != 0)
  {
    v2 = 39;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Italic")) & 1) != 0)
  {
    v2 = 40;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Underline")) & 1) != 0)
  {
    v2 = 41;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Cut")) & 1) != 0)
  {
    v2 = 42;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Copy")) & 1) != 0)
  {
    v2 = 43;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Paste")) & 1) != 0)
  {
    v2 = 44;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("LeftArrow")) & 1) != 0)
  {
    v2 = 45;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("RightArrow")) & 1) != 0)
  {
    v2 = 46;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PredictionActive")) & 1) != 0)
  {
    v2 = 47;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UCBSelectionBackground")) & 1) != 0)
  {
    v2 = 48;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("BIU")) & 1) != 0)
  {
    v2 = 49;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Divider")) & 1) != 0)
  {
    v2 = 50;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Caps-Lock")) & 1) != 0)
  {
    v2 = 51;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Dictation-Display")) & 1) != 0)
  {
    v2 = 52;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MessageWriteboard")) & 1) != 0)
  {
    v2 = 53;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KeyplaneSwitchCollapsed")) & 1) != 0)
  {
    v2 = 54;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EmojiSearchControl")) & 1) != 0)
  {
    v2 = 55;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CustomAction")) & 1) != 0)
  {
    v2 = 56;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Image")))
  {
    v2 = 57;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *enumStringForDisplayType(unsigned int a1)
{
  if (a1 > 0x39)
    return 0;
  else
    return off_1E16CDA58[a1];
}

uint64_t variantsTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("accents")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("currency")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("email")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("immediate-accents")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("input-modes")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("URL")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("keyplane-accents")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("BIU")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("skin-tone-emoji-accents")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("prepopulated-accents")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("extended-skin-tone-emoji-selector")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("prepopulated-extended-skin-tone-emoji")) & 1) != 0)
  {
    v2 = 13;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("keyplane-switcher")))
  {
    v2 = 14;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t enumStringForVariantsType(int a1)
{
  if ((a1 - 1) > 0xD)
    return 0;
  else
    return (uint64_t)*(&off_1E16CDC28 + a1 - 1);
}

uint64_t attributeValueFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("10key")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("center")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("dark")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("disabled")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("enabled")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("extended-symbols")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("flick")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("glyph")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("handwriting")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("highlighted")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("japanese50on")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeASCIICapable")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeDecimalPad")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeDefault")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeEmailAddress")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeNamePhonePad")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeNumberPad")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeNumbersAndPunctuation")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypePhonePad")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeURL")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("left")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("letters")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("light")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("name")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("no")) & 1) != 0)
  {
    v2 = 25;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("numbers")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("phonepad")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pressed")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("right")) & 1) != 0)
  {
    v2 = 29;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("straight")) & 1) != 0)
  {
    v2 = 30;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("symbols")) & 1) != 0)
  {
    v2 = 31;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("yes")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("chinese10key")) & 1) != 0)
  {
    v2 = 33;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("korean10key")) & 1) != 0)
  {
    v2 = 34;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("japanese-aiu")) & 1) != 0)
  {
    v2 = 35;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("strictly-left")) & 1) != 0)
  {
    v2 = 36;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("strictly-right")) & 1) != 0)
  {
    v2 = 37;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("emoji")) & 1) != 0)
  {
    v2 = 38;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("dictation")) & 1) != 0)
  {
    v2 = 39;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("popup-menu")) & 1) != 0)
  {
    v2 = 40;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("high")) & 1) != 0)
  {
    v2 = 41;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("linear")) & 1) != 0)
  {
    v2 = 42;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fixed-left")) & 1) != 0)
  {
    v2 = 43;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fixed-right")) & 1) != 0)
  {
    v2 = 44;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cased")) & 1) != 0)
  {
    v2 = 45;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("literal")) & 1) != 0)
  {
    v2 = 46;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("none")) & 1) != 0)
  {
    v2 = 47;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("linear-slim")))
  {
    v2 = 48;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *enumStringForAttributeValue(int a1)
{
  if ((a1 - 1) > 0x2F)
    return 0;
  else
    return off_1E16CDC98[a1 - 1];
}

uint64_t themeTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKBThemeDefault")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKBThemeBlue")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKBThemeDarkGray")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKBThemeDarkSteel")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKBThemeDarkWood")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKBThemeLightGray")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKBThemeLightSteel")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKBThemeMidGray")) & 1) != 0)
  {
    v2 = 7;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("UIKBThemeMidSteel")))
  {
    v2 = 8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *stringForAttributeName(void *a1)
{
  id v1;
  __CFString *v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("adaptive-keys")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameAdaptiveKeys");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("autoshift")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameAutoshift");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("diacritic-forward-compose")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameDiacriticForwardCompose");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("display-corner")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameDisplayCorner");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("DisplayImage")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameDisplayImage");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("drag-threshold")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameDragThreshold");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("gesture-keyplane")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameGestureKeyplane");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("group-neighbor")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameGroupNeighbor");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("home-indicator")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameHomeIndicator");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ignore-hand-bias")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameIgnoreHandBias");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ignore-shift-state")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameIgnoreShiftState");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("is-alphabetic-plane")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameIsAlphabeticPlane");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("keycharging")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameKeyCharging");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("label")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameLabel");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("looks-like-shift-alternate")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameLooksLikeShiftAlternate");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("merge-as-more-key")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameMergeAsMoreKey");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("modify-for-writeboard-key")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameModifyForWriteboardKey");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("more-after")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameMoreAfter");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("more-alternate")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameMoreAlternate");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("more-alternate-small-display")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameMoreAlternateSmallDisplay");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("more-rendering")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameMoreRendering");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("no-language-indicator")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameNoLanguageIndicator");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("notusecandidateselection")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameNotUseCandidateSelection");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("popup-bias")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNamePopupBias");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rendering")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameRendering");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("restable")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameRestable");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shift")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameShift");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shift-after")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameShiftAfter");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shift-alternate")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameShiftAlternate");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shift-alternate-small-display")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameShiftAlternateSmallDisplay");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shift-is-plane-chooser")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameShiftIsPlaneChooser");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shift-rendering")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameShiftRendering");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shouldskipcandidateselection")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameShouldSkipCandidateSelection");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shouldskipcandidateselectionforvariants")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameShouldSkipCandidateSelectionForVariants");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shouldsuppressdragretest")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameShouldSuppressDragRetest");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("slide-down")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameSlideDown");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("split-alternate")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameSplitAlternate");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("state")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameState");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("supported-types")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameSupportedTypes");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("supports-continuous-path")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameSupportsContinuousPath");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("supports-multitap")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameSupportsMultitap");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("text-alignment")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameTextAlignment");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tint")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameTint");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("variant-popup-bias")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameVariantPopupBias");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("variant-type")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameVariantType");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("visible")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeNameVisible");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeASCIICapableNumberPad")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeASCIICapableNumberPadStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeASCIICapable")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeASCIICapableStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeDecimalPad")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeDecimalPadStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeDefault")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeDefaultStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeEmailAddress")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeEmailAddressStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeNamePhonePad")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeNamePhonePadStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeNumberPad")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeNumberPadStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeNumbersAndPunctuation")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeNumbersAndPunctuationStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypePhonePad")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypePhonePadStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeTwitter")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeTwitterStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeURL")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeURLStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIKeyboardTypeWebSearch")) & 1) != 0)
  {
    v2 = CFSTR("UIKBAttributeValueKeyboardTypeWebSearchStr");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBabstract")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyAbstract");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBactiveGeometriesList")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyActiveGeometriesList");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBcachedGestureLayout")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyCachedGestureLayout");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBCachedKeyboardType")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyCachedKeyboardType");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBclipCorners")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyClipCorners");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBdisplayRowHint")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyDisplayRowHint");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBdisplayString")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyDisplayString");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBdisplayType")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyDisplayType");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBdisplayTypeHint")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyDisplayTypeHint");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBdynamic")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyDynamicLayout");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBflickDirection")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyFlickDirection");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBforceMultitap")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyForceMultitap");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBgeometriesList")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyGeometriesList");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBgeometry")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyGeometry");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBgestureKey")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyGestureKey");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBghost")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyGhost");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBhighlightedVariantsList")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyHighlightedVariantsList");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBhint")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyHint");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBinteractionType")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyInteractionType");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBunionFrame")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyKeyUnionFrame");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBunionPaddedFrame")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyKeyUnionPaddedFrame");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBlocalizationKey")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyLocalizationKey");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBname")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyName");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBoverrideDisplayString")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyOverrideDisplayString");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBother")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyParent");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBparentKey")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyParentKey");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBpopupDirection")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyPopupDirection");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBpreventPaddle")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyPreventPaddle");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBrepresentedString")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyRepresentedString");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBRowSetVariantType")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyRowSetVariantType");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBsecondaryDisplayStrings")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertySecondaryDisplayStrings");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBsecondaryRepresentedStrings")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertySecondaryRepresentedStrings");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBselectedVariantIndex")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertySelectedVariantIndex");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBselectedVariantIndices")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertySelectedVariantIndices");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBshape")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyShape");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBsplitMode")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertySplitMode");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBtheme")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyTheme");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBToggleKeys")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyTogglePrefix");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBvisualStyle")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyVisualStyle");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("KBvisualStyling")) & 1) != 0)
  {
    v2 = CFSTR("UIKBTreePropertyVisualStyling");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("@\"%@\""), v1);
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

uint64_t textAlignmentFromAttribute(int a1)
{
  uint64_t v1;

  v1 = 1;
  if (a1 == 29)
    v1 = 2;
  if (a1 == 21)
    return 0;
  else
    return v1;
}

void sub_185D941A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

id nameByRemovingHash(void *a1)
{
  id v1;
  void *v2;
  int v3;
  uint64_t v4;
  id v5;
  void *v6;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "rangeOfString:", CFSTR("_"));
    if (v3)
    {
      v4 = 0;
      while (objc_msgSend(v2, "characterAtIndex:", v4) - 48 < 0xA)
      {
        if (v3 == ++v4)
          goto LABEL_6;
      }
      v5 = v2;
    }
    else
    {
LABEL_6:
      objc_msgSend(v2, "substringFromIndex:", (v3 + 1));
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_185D986EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t keyPositionSort(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  char v7;
  id v8;
  id v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;

  v5 = a1;
  v6 = a2;
  if (a3)
    v7 = objc_msgSend(a3, "BOOLValue") ^ 1;
  else
    v7 = 1;
  v8 = v5;
  v9 = v6;
  objc_msgSend(v8, "frame");
  v11 = v10;
  objc_msgSend(v9, "frame");
  if (v11 > v12)
    goto LABEL_5;
  objc_msgSend(v8, "frame");
  v15 = v14;
  objc_msgSend(v9, "frame");
  if (v15 < v16)
  {
LABEL_13:
    v13 = -1;
    goto LABEL_14;
  }
  objc_msgSend(v8, "frame");
  v18 = v17;
  objc_msgSend(v9, "frame");
  if ((v7 & 1) == 0)
  {
    if (v18 <= v19)
    {
      objc_msgSend(v8, "frame");
      v25 = v24;
      objc_msgSend(v9, "frame");
      v13 = v25 < v26;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v18 > v19)
  {
LABEL_5:
    v13 = 1;
    goto LABEL_14;
  }
  objc_msgSend(v8, "frame");
  v21 = v20;
  objc_msgSend(v9, "frame");
  if (v21 >= v22)
    v13 = 0;
  else
    v13 = -1;
LABEL_14:

  return v13;
}

void sub_185D9D508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t variantOrderSort(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int v7;
  id v8;
  id v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;

  v5 = a1;
  v6 = a2;
  v7 = objc_msgSend(a3, "BOOLValue");
  v8 = v5;
  v9 = v6;
  objc_msgSend(v8, "frame");
  v11 = v10;
  objc_msgSend(v9, "frame");
  if (v11 <= v12)
  {
    objc_msgSend(v8, "frame");
    v15 = v14;
    objc_msgSend(v9, "frame");
    if (v15 >= v16)
    {
      objc_msgSend(v8, "frame");
      v18 = v17;
      objc_msgSend(v9, "frame");
      if (v18 <= v19)
      {
        objc_msgSend(v8, "frame");
        v23 = v22;
        objc_msgSend(v9, "frame");
        if (v23 >= v24)
        {
          v13 = 0;
          goto LABEL_13;
        }
        v20 = v7 == 0;
        v21 = -1;
      }
      else
      {
        v20 = v7 == 0;
        v21 = 1;
      }
      if (v20)
        v13 = -v21;
      else
        v13 = v21;
    }
    else
    {
      v13 = -1;
    }
  }
  else
  {
    v13 = 1;
  }
LABEL_13:

  return v13;
}

void sub_185DA1750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

id _UIKeyShortcutHUDLog()
{
  if (qword_1ECD7EBB0 != -1)
    dispatch_once(&qword_1ECD7EBB0, &__block_literal_global_317);
  return (id)qword_1ECD7EBA8;
}

void _HandleUIKeyShortcutHUDCancelScheduledHUDPresentationDarwinNotification()
{
  id v0;

  +[UIKeyShortcutHUDService sharedHUDService](UIKeyShortcutHUDService, "sharedHUDService");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "performSelectorOnMainThread:withObject:waitUntilDone:", sel__handleCancelScheduledHUDPresentationDarwinNotification, 0, 0);

}

void _HandleUIKeyShortcutSystemHUDDidPresentDarwinNotification()
{
  id v0;

  +[UIKeyShortcutHUDService sharedHUDService](UIKeyShortcutHUDService, "sharedHUDService");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "performSelectorOnMainThread:withObject:waitUntilDone:", sel__handleSystemHUDPresentationDarwinNotification, 0, 0);

}

void _HandleUIKeyShortcutSystemHUDPreventUnintendedPresentationDarwinNotification()
{
  id v0;

  +[UIKeyShortcutHUDService sharedHUDService](UIKeyShortcutHUDService, "sharedHUDService");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "performSelectorOnMainThread:withObject:waitUntilDone:", sel__handleSystemHUDPreventUnintendedPresentationDarwinNotificationIfNeeded, 0, 0);

}

void sub_185DA511C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185DA63A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___isSystemHUDProcess_block_invoke()
{
  id v0;

  if (objc_msgSend((id)UIApp, "isFrontBoard"))
  {
    byte_1ECD7EBA1 = 1;
  }
  else
  {
    _UIMainBundleIdentifier();
    v0 = (id)objc_claimAutoreleasedReturnValue();
    byte_1ECD7EBA1 = objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.Spotlight"));

  }
}

unsigned __int8 **UIKBColorDefLookup(const char *a1, int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned __int8 **v8;

  if ((a2 - 12) <= 0x38)
  {
    v2 = a2;
    v3 = a2;
    v4 = a2;
    v5 = a2;
    v6 = a2;
    switch(a2)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
        goto LABEL_8;
      case 5:
      case 6:
      case 7:
      case 8:
        goto LABEL_7;
      case 9:
        goto LABEL_6;
      case 10:
      case 11:
        goto LABEL_5;
      case 12:
        goto LABEL_4;
      default:
        v2 = hash_asso_values[*((unsigned __int8 *)a1 + 24) + 1] + a2;
LABEL_4:
        v3 = v2 + hash_asso_values[*((unsigned __int8 *)a1 + 23)];
LABEL_5:
        v4 = v3 + hash_asso_values[*((unsigned __int8 *)a1 + 21) + 3];
LABEL_6:
        v5 = v4 + hash_asso_values[*((unsigned __int8 *)a1 + 20)];
LABEL_7:
        v6 = v5 + hash_asso_values[*((unsigned __int8 *)a1 + 16)];
LABEL_8:
        v7 = v6 + hash_asso_values[*((unsigned __int8 *)a1 + 9)] + hash_asso_values[a1[a2 - 1]];
        if (v7 > 0x2E5)
          return 0;
        v8 = (unsigned __int8 **)((char *)&UIKBColorDefLookup_wordlist + 24 * v7);
        if (*(unsigned __int8 *)a1 != **v8 || strcmp(a1 + 1, (const char *)*v8 + 1))
          return 0;
        return v8;
    }
  }
  return 0;
}

void *UIKBRectsCreate(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  v8 = 0;
  if (v5 && v6)
  {
    v8 = malloc_type_calloc(1uLL, 0xB0uLL, 0x1000040C3A7E6FCuLL);
    objc_msgSend(v7, "frame");
    *(_QWORD *)v8 = v9;
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v11;
    *((_QWORD *)v8 + 3) = v12;
    objc_msgSend(v7, "paddedFrame");
    *((_QWORD *)v8 + 4) = v13;
    *((_QWORD *)v8 + 5) = v14;
    *((_QWORD *)v8 + 6) = v15;
    *((_QWORD *)v8 + 7) = v16;
    objc_msgSend(v7, "paddedFrame");
    *((_QWORD *)v8 + 8) = v17;
    *((_QWORD *)v8 + 9) = v18;
    *((_QWORD *)v8 + 10) = v19;
    *((_QWORD *)v8 + 11) = v20;
    objc_msgSend(v7, "paddedFrame");
    *((_QWORD *)v8 + 12) = v21;
    *((_QWORD *)v8 + 13) = v22;
    *((_QWORD *)v8 + 14) = v23;
    *((_QWORD *)v8 + 15) = v24;
    objc_msgSend(v7, "paddedFrame");
    *((_QWORD *)v8 + 16) = v25;
    *((_QWORD *)v8 + 17) = v26;
    *((_QWORD *)v8 + 18) = v27;
    *((_QWORD *)v8 + 19) = v28;
    *((_QWORD *)v8 + 20) = 0;
    *((_QWORD *)v8 + 21) = 0;
    if (objc_msgSend(v5, "visualStyle") == 1
      || objc_msgSend(v5, "visualStyle") == 2
      || objc_msgSend(v5, "visualStyle") == 3
      || objc_msgSend(v5, "visualStyle") == 5
      || objc_msgSend(v5, "visualStyle") == 4
      || objc_msgSend(v5, "visualStyle") == 103)
    {
      UIKBRectsInit_iPhone((uint64_t)v8, v5, v7, a3);
    }
    else if (objc_msgSend(v5, "visualStyle") == 102
           || objc_msgSend(v5, "visualStyle") == 104
           || objc_msgSend(v5, "visualStyle") == 105
           || objc_msgSend(v5, "visualStyle") == 101
           || objc_msgSend(v5, "visualStyle") == 106
           || objc_msgSend(v5, "visualStyle") == 107
           || objc_msgSend(v5, "visualStyle") == 108
           || objc_msgSend(v5, "visualStyle") == 109)
    {
      UIKBRectsInit_Wildcat((uint64_t)v8, v5, v7, a3);
    }
    *(CGRect *)v8 = CGRectIntegral(*(CGRect *)v8);
    *((CGRect *)v8 + 1) = CGRectIntegral(*((CGRect *)v8 + 1));
    *((CGRect *)v8 + 2) = CGRectIntegral(*((CGRect *)v8 + 2));
    *((CGRect *)v8 + 4) = CGRectIntegral(*((CGRect *)v8 + 4));
  }

  return v8;
}

void UIKBRectsRelease(void *a1)
{
  if (a1)
    free(a1);
}

double UIKBRectsGetFrame(uint64_t a1)
{
  return *(double *)a1;
}

double *UIKBRectsSetFrame(double *result, double a2, double a3, double a4, double a5)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

double UIKBRectsGetPaddedFrame(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double *UIKBRectsSetPaddedFrame(double *result, double a2, double a3, double a4, double a5)
{
  result[4] = a2;
  result[5] = a3;
  result[6] = a4;
  result[7] = a5;
  return result;
}

double UIKBRectsGetDisplayFrame(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

double *UIKBRectsSetDisplayFrame(double *result, double a2, double a3, double a4, double a5)
{
  result[8] = a2;
  result[9] = a3;
  result[10] = a4;
  result[11] = a5;
  return result;
}

double UIKBRectsGetSymbolFrame(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

double *UIKBRectsSetSymbolFrame(double *result, double a2, double a3, double a4, double a5)
{
  result[12] = a2;
  result[13] = a3;
  result[14] = a4;
  result[15] = a5;
  return result;
}

double UIKBRectsGetVariantsFrame(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

double *UIKBRectsSetVariantsFrame(double *result, double a2, double a3, double a4, double a5)
{
  result[16] = a2;
  result[17] = a3;
  result[18] = a4;
  result[19] = a5;
  return result;
}

uint64_t UIKBRectsGetVariantsOffset(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t UIKBRectsSetVariantsOffset(uint64_t result, int a2)
{
  *(_DWORD *)(result + 160) = a2;
  return result;
}

uint64_t UIKBRectsGetStringPairMargin(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t UIKBRectsSetStringPairMargin(uint64_t result, int a2)
{
  *(_DWORD *)(result + 164) = a2;
  return result;
}

double UIKBRectsGetStretchHeight(uint64_t a1)
{
  return *(double *)(a1 + 168);
}

uint64_t UIKBRectsSetStretchHeight(uint64_t result, double a2)
{
  *(double *)(result + 168) = a2;
  return result;
}

uint64_t UIKBPopupBiasForKey(void *a1, void *a2)
{
  id v3;
  id v4;
  unsigned int v5;
  double MinX;
  double v7;
  double v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double MaxX;
  unsigned int v18;
  unsigned int v19;
  CGRect v21;
  CGRect v22;

  v3 = a2;
  v4 = a1;
  v5 = objc_msgSend(v3, "intForProperty:", CFSTR("popup-bias"));
  objc_msgSend(v3, "paddedFrame");
  MinX = CGRectGetMinX(v21);
  objc_msgSend(v4, "frame");
  v8 = v7;

  objc_msgSend(v3, "paddedFrame");
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;

  v22.origin.x = v10;
  v22.origin.y = v12;
  v22.size.width = v14;
  v22.size.height = v16;
  MaxX = CGRectGetMaxX(v22);
  if (MinX < 15.0)
    v18 = 29;
  else
    v18 = 0;
  if (v8 - MaxX < 15.0)
    v19 = 21;
  else
    v19 = 0;
  if (v5 != 21)
    v19 = v5;
  if (v5 == 29)
    return v18;
  else
    return v19;
}

void UIKBAddRoundedRect(CGContext *a1, char a2, CGFloat a3, CGFloat a4, double a5, double a6, CGFloat a7)
{
  CGPath *Mutable;

  Mutable = CGPathCreateMutable();
  UIKBAddRoundedRectToPath(Mutable, a2, 0, a3, a4, a5, a6, a7);
  CGContextAddPath(a1, Mutable);
  CGPathRelease(Mutable);
}

void UIKBAddRoundedRectToPath(CGMutablePathRef path, char a2, int a3, CGFloat a4, CGFloat a5, double a6, double a7, CGFloat a8)
{
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;

  if ((a2 & 1) == 0)
  {
    CGPathMoveToPoint(path, 0, a4, a5);
    if ((a2 & 4) != 0)
    {
      v24 = a6;
      v16 = a5 + a7;
      if (a3)
      {
        v17 = a4 + 0.5;
        v18 = a4 + 1.0;
        v19 = a4 + a8;
        goto LABEL_8;
      }
      v19 = a4 + a8;
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  v19 = a4 + a8;
  if ((a3 & 1) != 0)
  {
    CGPathMoveToPoint(path, 0, a4 + a8, a5);
    v18 = a4 + 1.0;
    v17 = a4 + 0.5;
    CGPathAddCurveToPoint(path, 0, a4 + 1.0, a5 + 0.5, a4 + 0.5, a5 + 1.0, a4, a5 + a8);
    if ((a2 & 4) != 0)
    {
      v24 = a6;
      v16 = a5 + a7;
LABEL_8:
      CGPathAddLineToPoint(path, 0, a4, v16 - a8);
      CGPathAddCurveToPoint(path, 0, v17, v16 + -1.0, v18, v16 + -0.5, v19, v16);
      a6 = v24;
      if ((a2 & 8) != 0)
      {
        v20 = a4 + v24;
        v21 = a5 + a7;
        goto LABEL_13;
      }
LABEL_18:
      v22 = a4 + a6;
      CGPathAddLineToPoint(path, 0, a4 + a6, a5 + a7);
      if ((a2 & 2) != 0)
      {
        if (a3)
          goto LABEL_20;
        goto LABEL_25;
      }
LABEL_23:
      CGPathAddLineToPoint(path, 0, a4 + a6, a5);
      goto LABEL_26;
    }
    goto LABEL_11;
  }
  CGPathAddArc(path, 0, a4 + a8, a5 + a8, a8, 4.71238898, 3.14159265, 1);
  if ((a2 & 4) == 0)
  {
LABEL_11:
    v21 = a5 + a7;
    CGPathAddLineToPoint(path, 0, a4, a5 + a7);
    if ((a2 & 8) == 0)
      goto LABEL_18;
    v20 = a4 + a6;
    if ((a3 & 1) != 0)
    {
LABEL_13:
      CGPathAddLineToPoint(path, 0, v20 - a8, v21);
      CGPathAddCurveToPoint(path, 0, v20 + -1.0, v21 + -0.5, v20 + -0.5, v21 + -1.0, v20, v21 - a8);
      if ((a2 & 2) != 0)
      {
        v22 = a4 + a6;
LABEL_20:
        CGPathAddLineToPoint(path, 0, v22, a5 + a8);
        CGPathAddCurveToPoint(path, 0, v22 + -0.5, a5 + 1.0, v22 + -1.0, a5 + 0.5, v22 - a8, a5);
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v24 = a6;
  v16 = a5 + a7;
LABEL_17:
  CGPathAddArc(path, 0, v19, v16 - a8, a8, 3.14159265, 1.57079633, 1);
  a6 = v24;
  if ((a2 & 8) == 0)
    goto LABEL_18;
  v20 = a4 + v24;
  v21 = a5 + a7;
LABEL_22:
  CGPathAddArc(path, 0, v20 - a8, v21 - a8, a8, 1.57079633, 0.0, 1);
  if ((a2 & 2) == 0)
    goto LABEL_23;
  v22 = a4 + a6;
LABEL_25:
  CGPathAddArc(path, 0, v22 - a8, a5 + a8, a8, 0.0, 4.71238898, 1);
LABEL_26:
  v23 = -0.0;
  if ((a2 & 1) != 0)
    v23 = a8;
  CGPathAddLineToPoint(path, 0, a4 + v23, a5);
}

void *UIKBGetNamedLinearGradient(void *a1)
{
  id v1;
  const __CFDictionary *Mutable;
  void *Value;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = a1;
  Mutable = (const __CFDictionary *)UIKBGetNamedLinearGradient_cache;
  if (!UIKBGetNamedLinearGradient_cache)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    UIKBGetNamedLinearGradient_cache = (uint64_t)Mutable;
  }
  Value = (void *)CFDictionaryGetValue(Mutable, v1);
  if (!Value)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", v1);
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", v1);
    objc_msgSend(v4, "appendString:", CFSTR("Start"));
    objc_msgSend(v5, "appendString:", CFSTR("End"));
    v6 = UIKBGetNamedColor(v4);
    v7 = UIKBGetNamedColor(v5);
    if (v6 && v7)
    {
      Value = UIKBCreateTwoColorLinearGradient((_BOOL8)v6, (_BOOL8)v7);

      if (Value)
        CFDictionarySetValue((CFMutableDictionaryRef)UIKBGetNamedLinearGradient_cache, v1, Value);
    }
    else
    {

      Value = 0;
    }
    CGGradientRelease((CGGradientRef)Value);
  }

  return Value;
}

void *UIKBGetNamedColor(void *a1)
{
  id v1;
  const __CFDictionary *Mutable;
  void *Value;
  id v4;
  const char *v5;
  int v6;
  unsigned __int8 **v7;

  v1 = a1;
  Mutable = (const __CFDictionary *)UIKBGetNamedColor_cache;
  if (!UIKBGetNamedColor_cache)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    UIKBGetNamedColor_cache = (uint64_t)Mutable;
  }
  Value = (void *)CFDictionaryGetValue(Mutable, v1);
  if (!Value)
  {
    v4 = objc_retainAutorelease(v1);
    v5 = (const char *)objc_msgSend(v4, "UTF8String");
    v6 = strlen(v5);
    v7 = UIKBColorDefLookup(v5, v6);
    if (v7)
    {
      Value = UIKBColorCreate(*((unsigned int *)v7 + 2), *((unsigned int *)v7 + 3), *((unsigned int *)v7 + 4), *((float *)v7 + 5));
    }
    else
    {
      Value = (void *)UIKBGetNamedColor_black;
      if (!UIKBGetNamedColor_black)
      {
        Value = UIKBColorCreate(0, 0, 0, 1.0);
        UIKBGetNamedColor_black = (uint64_t)Value;
      }
    }
    CFDictionarySetValue((CFMutableDictionaryRef)UIKBGetNamedColor_cache, v4, Value);
    CGColorRelease((CGColorRef)Value);
  }

  return Value;
}

CGGradientRef UIKBCreateTwoColorLinearGradient(_BOOL8 a1, _BOOL8 a2)
{
  CGColorSpace *DeviceRGB;
  const __CFArray *v5;
  CGGradientRef v6;
  __int128 v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2)
    abort();
  if (UIKBColorUsesRGB(a1) || UIKBColorUsesRGB(a2))
  {
    DeviceRGB = (CGColorSpace *)UIKBColorSpaceDeviceRGB_colorspace;
    if (!UIKBColorSpaceDeviceRGB_colorspace)
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      UIKBColorSpaceDeviceRGB_colorspace = (uint64_t)DeviceRGB;
    }
  }
  else
  {
    DeviceRGB = (CGColorSpace *)UIKBColorSpaceDeviceGray_colorspace;
    if (!UIKBColorSpaceDeviceGray_colorspace)
    {
      DeviceRGB = CGColorSpaceCreateDeviceGray();
      UIKBColorSpaceDeviceGray_colorspace = (uint64_t)DeviceRGB;
    }
  }
  v9[0] = a1;
  v9[1] = a2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 2);
  v5 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
  v8 = xmmword_18666F250;
  v6 = CGGradientCreateWithColors(DeviceRGB, v5, (const CGFloat *)&v8);

  return v6;
}

BOOL UIKBColorUsesRGB(_BOOL8 result)
{
  CGColor *v1;
  const CGFloat *Components;
  double v3;

  if (result)
  {
    v1 = (CGColor *)result;
    result = CGColorGetNumberOfComponents((CGColorRef)result) == 4
          && ((Components = CGColorGetComponents(v1), v3 = Components[1], *Components != v3) || v3 != Components[2]);
  }
  return result;
}

CGColorSpaceRef UIKBColorSpaceDeviceRGB()
{
  CGColorSpaceRef result;

  result = (CGColorSpaceRef)UIKBColorSpaceDeviceRGB_colorspace;
  if (!UIKBColorSpaceDeviceRGB_colorspace)
  {
    result = CGColorSpaceCreateDeviceRGB();
    UIKBColorSpaceDeviceRGB_colorspace = (uint64_t)result;
  }
  return result;
}

CGColorSpaceRef UIKBColorSpaceDeviceGray()
{
  CGColorSpaceRef result;

  result = (CGColorSpaceRef)UIKBColorSpaceDeviceGray_colorspace;
  if (!UIKBColorSpaceDeviceGray_colorspace)
  {
    result = CGColorSpaceCreateDeviceGray();
    UIKBColorSpaceDeviceGray_colorspace = (uint64_t)result;
  }
  return result;
}

CGFloat UIKBDrawLinearGradient(CGContext *a1, CGGradient *a2, CGFloat result, double a4, double a5, double a6)
{
  CGPoint v6;

  if (a2)
  {
    v6.y = a4 + a6;
    v6.x = result;
    CGContextDrawLinearGradient(a1, a2, *(CGPoint *)&result, v6, 0);
  }
  return result;
}

CGColorRef UIKBColorCreate(unint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  CGColorSpace *DeviceGray;
  uint64x2_t v5;
  CGFloat components;
  float64x2_t v8;
  double v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1 == a2 && a2 == a3)
  {
    components = (double)a1 / 255.0;
    v8.f64[0] = a4;
    DeviceGray = (CGColorSpace *)UIKBColorSpaceDeviceGray_colorspace;
    if (!UIKBColorSpaceDeviceGray_colorspace)
    {
      DeviceGray = CGColorSpaceCreateDeviceGray();
      UIKBColorSpaceDeviceGray_colorspace = (uint64_t)DeviceGray;
    }
  }
  else
  {
    components = (double)a1 / 255.0;
    v5.i64[0] = a2;
    v5.i64[1] = a3;
    v8 = vdivq_f64(vcvtq_f64_u64(v5), (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL));
    v9 = a4;
    DeviceGray = (CGColorSpace *)UIKBColorSpaceDeviceRGB_colorspace;
    if (!UIKBColorSpaceDeviceRGB_colorspace)
    {
      DeviceGray = CGColorSpaceCreateDeviceRGB();
      UIKBColorSpaceDeviceRGB_colorspace = (uint64_t)DeviceGray;
    }
  }
  return CGColorCreate(DeviceGray, &components);
}

void UIKBClipTwoPieceBackground(CGContext *a1, char a2, double a3, double a4, double a5, double a6, CGFloat a7, CGFloat a8, double a9, double a10, double a11, CGFloat a12, double a13, double a14)
{
  double v27;

  v27 = UIKBCornerRadius();
  UIKBAddRoundedRect(a1, a2 & 0xA, a7, a8, a9, a10, v27);
  UIKBAddRoundedRect(a1, a2 & 5, a5 - a13, a12, a13, a14, v27);
  CGContextClip(a1);
}

double UIKBCornerRadius()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "preferencesActions");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "rivenSizeFactor:", 10.0);
  v3 = v2;

  return v3;
}

__CFString *UIKBReturnKeyStringForActiveInputMode(void *a1)
{
  return UIKeyboardLocalizedReturnKeyName((int)objc_msgSend(a1, "displayTypeHint"));
}

BOOL UIKBKeyboardIsURLKeyboard(void *a1)
{
  void *v1;
  _BOOL8 v2;

  objc_msgSend(a1, "name");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "rangeOfString:", CFSTR("URL")) != 0x7FFFFFFFFFFFFFFFLL;

  return v2;
}

BOOL UIKBKeyboardIsEmailKeyboard(void *a1)
{
  void *v1;
  _BOOL8 v2;

  objc_msgSend(a1, "name");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "rangeOfString:", CFSTR("Email")) != 0x7FFFFFFFFFFFFFFFLL;

  return v2;
}

uint64_t UIKBGlyphForCharacter(void *a1, __int16 a2, double a3, double a4, double a5)
{
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  int8x16_t v21;
  const __CTFont *v22;
  uint64_t i;
  CGGlyph glyphs[16];
  UniChar characters;
  int8x16_t v27;
  int8x8_t v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (!UIKBGlyphForCharacter___fontDict)
  {
    v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
    v11 = (void *)UIKBGlyphForCharacter___fontDict;
    UIKBGlyphForCharacter___fontDict = v10;

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringValue");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringByAppendingString:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)UIKBGlyphForCharacter___fontDict, "objectForKey:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v15)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)UIKBGlyphForCharacter___fontDict, "setObject:forKey:", v15, v14);
  }
  v16 = a2 & 0xFFF0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", a2 & 0xFFF0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "objectForKey:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    v19 = objc_retainAutorelease(v18);
    v20 = *(unsigned __int16 *)(objc_msgSend(v19, "bytes") + 2 * (a2 & 0xF));
  }
  else
  {
    characters = a2 & 0xFFF0;
    v21 = (int8x16_t)vdupq_n_s16(v16);
    v27 = vorrq_s8(v21, (int8x16_t)xmmword_18667FE80);
    v28 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)0xC000B000A0009);
    v29 = v16 | 0xD;
    v30 = v16 | 0xE;
    v31 = a2 | 0xF;
    v22 = (const __CTFont *)UIKBCreateCTFont(v9, a3, a4, a5);
    CTFontGetGlyphsForCharacters(v22, &characters, glyphs, 16);
    for (i = 0; i != 32; i += 2)
      CTFontTransformGlyphs();
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", glyphs, 32);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setObject:forKey:", v19, v17);
    v20 = glyphs[a2 & 0xF];
  }

  return v20;
}

uint64_t UIKBCreateCTFont(void *a1, double a2, double a3, double a4)
{
  id v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v7 = a1;
  v8 = objc_msgSend(v7, "isEqualToString:", qword_1ECD7EC48);
  v9 = objc_msgSend(v7, "isEqualToString:", CFSTR("UIKBRenderFactorySystemFontName"));
  if (!v8 || a2 > 0.0 && *(double *)&qword_1ECD7EC50 != a2 || v9 && a3 != 0.0 && *(double *)&qword_1ECD7EC58 != a3)
  {
    if (a2 <= 0.0)
      a2 = 22.0;
    if (qword_1ECD7EC60)
      CFRelease((CFTypeRef)qword_1ECD7EC60);
    if (objc_msgSend(v7, "isEqualToString:", CFSTR("UIKBRenderFactorySystemFontName")))
      objc_msgSend(off_1E167A828, "systemFontOfSize:weight:width:", a2, a3, a4);
    else
      objc_msgSend(off_1E167A828, "fontWithName:size:traits:", v7, 4096, a2);
    qword_1ECD7EC60 = objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v7, "copy");
    v11 = (void *)qword_1ECD7EC48;
    qword_1ECD7EC48 = v10;

    qword_1ECD7EC50 = *(_QWORD *)&a2;
    qword_1ECD7EC58 = *(_QWORD *)&a3;
  }
  v12 = qword_1ECD7EC60;

  return v12;
}

void UIKBDrawCTLineAtPoint(CGContext *a1, const __CTLine *a2, CGColor *a3, int a4, double a5, CGFloat a6)
{
  __int128 v12;
  CGContext *v13;
  CGFloat v14;
  double v15;
  CGAffineTransform v16;

  if (a2 && a3)
  {
    CGContextSaveGState(a1);
    v12 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&v16.a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&v16.c = v12;
    *(_OWORD *)&v16.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    CGContextSetTextMatrix(a1, &v16);
    CGContextScaleCTM(a1, 1.0, -1.0);
    if (a4)
    {
      CGContextRotateCTM(a1, -1.57079633);
      v13 = a1;
      v14 = a6;
      v15 = a5;
    }
    else
    {
      v15 = -a6;
      v13 = a1;
      v14 = a5;
    }
    CGContextSetTextPosition(v13, v14, v15);
    CGContextSetFillColorWithColor(a1, a3);
    CTLineDraw(a2, a1);
    CGContextRestoreGState(a1);
  }
}

const __CTLine *UIKBCreateFitCTLine(void *a1, void *a2, double *a3, _QWORD *a4, uint64_t a5, int a6, int a7, double a8, double a9, double a10, CGFloat a11, double a12, double a13, double a14)
{
  id v25;
  void *v26;
  double v27;
  double v28;
  const __CTLine *v29;
  double TypographicBounds;
  double v32;
  CGFloat ascent;

  v25 = a1;
  v26 = v25;
  v27 = a10 + -4.0;
  v28 = *a3;
  do
  {
    UIKBGetFontAttributes(v28, a12, a13, a14, (uint64_t)v25, a2, a4, a5, a7);
    v29 = (const __CTLine *)CTLineCreateWithString();
    v32 = 0.0;
    ascent = 0.0;
    TypographicBounds = CTLineGetTypographicBounds(v29, &ascent, &v32, 0);
    if (a7)
      TypographicBounds = ascent + v32;
    if (TypographicBounds <= v27)
    {
      if (ascent + v32 <= a11 || (a6 & 1) != 0)
        goto LABEL_11;
    }
    else if (a6)
    {
      goto LABEL_11;
    }
    CFRelease(v29);
    v28 = *a3 + -1.0;
    *a3 = v28;
  }
  while (v28 > 0.0);
  v29 = 0;
LABEL_11:

  return v29;
}

uint64_t UIKBGetFontAttributes(CGFloat a1, double a2, double a3, double a4, uint64_t a5, void *a6, _QWORD *a7, uint64_t a8, int a9)
{
  id v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  __CFDictionary *v38;
  CTParagraphStyleRef v39;
  __CFDictionary *v40;
  const void *v41;
  void *v42;
  const void *v43;
  void *v44;
  __CFDictionary *Mutable;
  const void **v46;
  int v47;
  const void *v48;
  const void *v49;
  __CFDictionary *v50;
  const void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  __CFDictionary *v56;
  void *v57;
  const void *v58;
  id v59;
  void *v60;
  const __CTFontDescriptor *v61;
  const __CTFont *v62;
  const __CTFontDescriptor *v63;
  int v64;
  uint64_t v66;
  void *v67;
  int v70;
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];

  v73[1] = *MEMORY[0x1E0C80C00];
  v14 = a6;
  v15 = _AXSEnhanceTextLegibilityEnabled() != 0;
  v16 = objc_msgSend(v14, "isEqualToString:", CFSTR("UIKBRenderFactorySystemFontName"));
  v17 = objc_msgSend(v14, "isEqualToString:", qword_1ECD7EBF0);
  UIKeyboardGetCurrentInputMode();
  v18 = objc_claimAutoreleasedReturnValue();
  v70 = UIKeyboardRequiresFontFallbacksForInputMode();
  UIKeyboardFontFallbackLanguageForInputMode();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v19;
  v67 = (void *)v18;
  if (v19)
  {
    v21 = v19;
  }
  else
  {
    TIInputModeGetLanguageWithRegion();
    v21 = (id)objc_claimAutoreleasedReturnValue();
  }
  v22 = v21;

  objc_msgSend(MEMORY[0x1E0C99DC8], "canonicalLanguageIdentifierFromString:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  TIInputModeGetLanguage();
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99DC8], "canonicalLanguageIdentifierFromString:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v26 = objc_msgSend(v25, "isEqualToString:", qword_1ECD7EBF8);
  v27 = qword_1ECD7EC08;
  v28 = v70 & ~v26;
  if (*(double *)&qword_1ECD7EC08 == a2)
    v29 = 0;
  else
    v29 = v16;
  if (*(double *)&qword_1ECD7EC10 == a3)
    v30 = 0;
  else
    v30 = v16;
  v31 = qword_1ECD7EC20;
  if (qword_1ECD7EC20)
    v32 = v17 ^ 1;
  else
    v32 = 1;
  v33 = &qword_1ECD7E000;
  if (byte_1ECD7EBE9 == a9 && (v32 & 1) == 0 && (v28 & 1) == 0)
  {
    v27 = qword_1ECD7EC00;
    if (*(double *)&qword_1ECD7EC00 == a1 && (v29 & 1) == 0 && (v30 & 1) == 0)
    {
      v27 = qword_1ECD7EC18;
      if (*(double *)&qword_1ECD7EC18 == a4 && qword_1ECD7EC40 == a8 && _MergedGlobals_1113 == v15)
        goto LABEL_62;
    }
  }
  v66 = qword_1ECD7EC40;
  if ((v17 & 1) == 0)
  {
    v34 = objc_msgSend(v14, "copy", *(double *)&v27);
    v35 = (void *)qword_1ECD7EBF0;
    qword_1ECD7EBF0 = v34;

  }
  if (v28)
  {
    v36 = objc_msgSend(v25, "copy", *(double *)&v27);
    v37 = (void *)qword_1ECD7EBF8;
    qword_1ECD7EBF8 = v36;

  }
  qword_1ECD7EC00 = *(_QWORD *)&a1;
  qword_1ECD7EC08 = *(_QWORD *)&a2;
  qword_1ECD7EC10 = *(_QWORD *)&a3;
  qword_1ECD7EC18 = *(_QWORD *)&a4;
  qword_1ECD7EC40 = a8;
  _MergedGlobals_1113 = v15;
  byte_1ECD7EBE9 = a9;
  v38 = (__CFDictionary *)qword_1ECD7EC20;
  if (!qword_1ECD7EC20)
  {
    qword_1ECD7EC20 = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v39 = CTParagraphStyleCreate(0, 0);
    CTParagraphStyleSetCompositionLanguage();
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1ECD7EC20, *(const void **)off_1E1678F98, v39);
    CFRelease(v39);
    v38 = (__CFDictionary *)qword_1ECD7EC20;
  }
  CFDictionarySetValue(v38, (const void *)*MEMORY[0x1E0CA8558], &unk_1E1A98298);
  v40 = (__CFDictionary *)qword_1ECD7EC20;
  v41 = (const void *)*MEMORY[0x1E0CA85F8];
  if (a4 == 0.0)
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1ECD7EC20, (const void *)*MEMORY[0x1E0CA85F8]);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a4);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    CFDictionarySetValue(v40, v41, v42);

  }
  v43 = (const void *)*MEMORY[0x1E0CA86C8];
  if (a9)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1ECD7EC20, v43, (const void *)*MEMORY[0x1E0C9AE50]);
    if (!v16)
    {
LABEL_33:
      v44 = v25;
      Mutable = (__CFDictionary *)qword_1ECD7EC28;
      v46 = (const void **)MEMORY[0x1E0CA8380];
      if (qword_1ECD7EC28 && v66 == a8)
      {
        if ((v17 & 1) != 0)
        {
          v47 = 0;
LABEL_46:
          if ((v70 & (v28 | v47)) == 1)
          {
            v56 = (__CFDictionary *)qword_1ECD7EC28;
            v57 = (void *)MEMORY[0x1E0C99D80];
            v58 = *v46;
            v59 = (id)qword_1ECD7EBF8;
            objc_msgSend(v57, "dictionaryWithObject:forKey:", v14, v58);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            v61 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithAttributesAndOptions();
            v62 = CTFontCreateWithFontDescriptor(v61, a1, 0);
            UIKBSetFontCascadeListAttributeFromFont(v56, (uint64_t)v59, v62);

            CFRelease(v61);
            CFRelease(v62);

          }
          v63 = (const __CTFontDescriptor *)qword_1ECD7EC30;
          if (qword_1ECD7EC30)
            v64 = v47;
          else
            v64 = 1;
          if (((v64 | v28) & 1) != 0 || v66 != a8)
          {
            v25 = v44;
            if (qword_1ECD7EC30)
              CFRelease((CFTypeRef)qword_1ECD7EC30);
            v63 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithAttributesAndOptions();
            qword_1ECD7EC30 = (uint64_t)v63;
          }
          else
          {
            v25 = v44;
          }
          v48 = CTFontCreateWithFontDescriptor(v63, a1, 0);
          v50 = (__CFDictionary *)qword_1ECD7EC20;
          v51 = (const void *)*MEMORY[0x1E0CA8188];
          v49 = v48;
          goto LABEL_58;
        }
      }
      else
      {
        if (qword_1ECD7EC28)
        {
          CFRelease((CFTypeRef)qword_1ECD7EC28);
          qword_1ECD7EC28 = 0;
        }
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        qword_1ECD7EC28 = (uint64_t)Mutable;
        if (a8)
        {
          v52 = *MEMORY[0x1E0CA8318];
          v71[0] = *MEMORY[0x1E0CA8328];
          v71[1] = v52;
          v72[0] = &unk_1E1A982B0;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a8);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          v72[1] = v53;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v72, v71, 2);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v73[0] = v54;
          v28 = 1;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v73, 1);
          v55 = (void *)objc_claimAutoreleasedReturnValue();

          CFDictionarySetValue((CFMutableDictionaryRef)qword_1ECD7EC28, (const void *)*MEMORY[0x1E0CA8320], v55);
          Mutable = (__CFDictionary *)qword_1ECD7EC28;
        }
        else
        {
          v28 = 1;
        }
      }
      CFDictionarySetValue(Mutable, *v46, v14);
      v47 = 1;
      goto LABEL_46;
    }
  }
  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1ECD7EC20, v43);
    if (!v16)
      goto LABEL_33;
  }
  objc_msgSend(off_1E167A828, "systemFontOfSize:weight:width:", a1, a2, a3);
  v48 = (const void *)objc_claimAutoreleasedReturnValue();
  CFDictionarySetValue((CFMutableDictionaryRef)qword_1ECD7EC20, (const void *)*MEMORY[0x1E0CA8188], v48);
  v49 = (const void *)qword_1ECD7EBF8;
  if (qword_1ECD7EBF8)
  {
    v50 = (__CFDictionary *)qword_1ECD7EC20;
    v51 = (const void *)*MEMORY[0x1E0CA8590];
LABEL_58:
    CFDictionarySetValue(v50, v51, v49);
  }
  qword_1ECD7EC38 = UIKBGetXHeight(v14, a1);
  if (*(double *)&qword_1ECD7EC38 == 0.0)
    qword_1ECD7EC38 = CTFontGetXHeight((CTFontRef)v48);
  CFRelease(v48);
  v31 = qword_1ECD7EC20;
  v33 = &qword_1ECD7E000;
LABEL_62:
  *a7 = v33[391];

  return v31;
}

double UIKBGetXHeight(void *a1, double a2)
{
  id v3;
  void *v4;
  void *v5;
  float v6;
  double v7;

  v3 = a1;
  v4 = (void *)UIKBGetXHeight_xheights;
  if (!UIKBGetXHeight_xheights)
  {
    v4 = &unk_1E1A9B3B0;
    UIKBGetXHeight_xheights = (uint64_t)&unk_1E1A9B3B0;
  }
  objc_msgSend(v4, "objectForKey:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "floatValue");
  v7 = v6 * a2;

  return v7;
}

void UIKBSetFontCascadeListAttributeFromFont(__CFDictionary *a1, uint64_t a2, const __CTFont *a3)
{
  const __CFArray *v5;
  CFArrayRef v6;

  if (a2)
    v5 = (const __CFArray *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", a2);
  else
    v5 = (const __CFArray *)objc_msgSend(MEMORY[0x1E0C99D20], "array");
  v6 = CTFontCopyDefaultCascadeListForLanguages(a3, v5);
  CFDictionarySetValue(a1, (const void *)*MEMORY[0x1E0CA81D8], v6);
  CFRelease(v6);
}

CTFontRef UIKBCTFontForInputMode(void *a1, void *a2, CGFloat a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  CTFontRef CopyWithAttributes;
  __CFDictionary *Mutable;
  void *v13;
  void *v14;
  const __CTFontDescriptor *v15;

  v5 = a1;
  v6 = a2;
  if (qword_1ECD7EC70 != -1)
    dispatch_once(&qword_1ECD7EC70, &__block_literal_global_318);
  TIInputModeGetLanguageWithRegion();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "fontName");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringByAppendingFormat:", CFSTR(":%@:%f"), v8, *(_QWORD *)&a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_msgSend((id)qword_1ECD7EC68, "objectForKey:", v9);
  if (v10)
  {
    CopyWithAttributes = (CTFontRef)v10;
  }
  else
  {
    if (UIKeyboardRequiresFontFallbacksForInputMode())
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      objc_msgSend(MEMORY[0x1E0C99DC8], "canonicalLanguageIdentifierFromString:", v7);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      TIInputModeGetLanguage();
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99DC8], "canonicalLanguageIdentifierFromString:", v14);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      UIKBSetFontCascadeListAttributeFromFont(Mutable, (uint64_t)v7, (const __CTFont *)v6);
      v15 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithAttributesAndOptions();
      CFRelease(Mutable);
    }
    else
    {
      v15 = 0;
    }
    CopyWithAttributes = CTFontCreateCopyWithAttributes((CTFontRef)v6, a3, 0, v15);
    objc_msgSend((id)qword_1ECD7EC68, "setObject:forKey:", CopyWithAttributes, v9);

    if (v15)
      CFRelease(v15);
  }

  return CopyWithAttributes;
}

CGImageRef UIKBCreateFadeClipImage(int a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  double v25;
  CGColor *v26;
  size_t v27;
  CGContext *v28;
  CGColor *v29;
  CGColor *v30;
  const __CFArray *v31;
  CGGradient *v32;
  double x;
  double y;
  double width;
  double height;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  CGImageRef Image;
  CGAffineTransform transform;
  CGFloat v48[2];
  CGFloat v49[2];
  CGFloat components[3];
  uint64_t v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;

  v51 = *MEMORY[0x1E0C80C00];
  if (!UIKBCreateFadeClipImage_colorspace)
    UIKBCreateFadeClipImage_colorspace = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA18]);
  v25 = UIKBScale();
  *(_OWORD *)components = xmmword_18666F250;
  v26 = CGColorCreate((CGColorSpaceRef)UIKBCreateFadeClipImage_colorspace, components);
  v27 = vcvtpd_u64_f64(a5 * v25);
  v28 = CGBitmapContextCreate(0, v27, vcvtpd_u64_f64(a6 * v25), 8uLL, v27, (CGColorSpaceRef)UIKBCreateFadeClipImage_colorspace, 0);
  CGAffineTransformMakeScale(&transform, v25, v25);
  CGContextConcatCTM(v28, &transform);
  *(_OWORD *)v49 = xmmword_18667FE90;
  v29 = CGColorCreate((CGColorSpaceRef)UIKBCreateFadeClipImage_colorspace, v49);
  CGContextSetFillColorWithColor(v28, v29);
  v52.origin.x = a3;
  v52.origin.y = a4;
  v52.size.width = a5;
  v52.size.height = a6;
  CGContextFillRect(v28, v52);
  CGColorRelease(v29);
  v48[0] = a11;
  v48[1] = 1.0;
  v30 = CGColorCreate((CGColorSpaceRef)UIKBCreateFadeClipImage_colorspace, v48);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", v26, v30, 0);
  v31 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
  CGColorRelease(v30);
  CGColorRelease(v26);
  v32 = CGGradientCreateWithColors((CGColorSpaceRef)UIKBCreateFadeClipImage_colorspace, v31, 0);
  v53.origin.x = a7;
  v53.origin.y = a8;
  v53.size.width = a9;
  v53.size.height = a10;
  v54 = CGRectOffset(v53, -a3, -a4);
  x = v54.origin.x;
  y = v54.origin.y;
  width = v54.size.width;
  height = v54.size.height;
  CGContextClipToRect(v28, v54);
  if (a1)
    v37 = y;
  else
    v37 = y + height;
  if (a1)
    v38 = y + height;
  else
    v38 = y;
  if (a1)
    v39 = x;
  else
    v39 = x + width;
  if (a1)
    v40 = x + width;
  else
    v40 = x;
  if (a2)
    v41 = v39;
  else
    v41 = x;
  if (a2)
  {
    v37 = y;
    v42 = v40;
  }
  else
  {
    v42 = x;
  }
  if (a2)
    v38 = y;
  CGContextDrawLinearGradient(v28, v32, *(CGPoint *)(&v37 - 1), *(CGPoint *)(&v38 - 1), 0);
  CGGradientRelease(v32);
  Image = CGBitmapContextCreateImage(v28);
  CGContextRelease(v28);

  return Image;
}

double UIKBScale()
{
  double result;
  void *v1;
  uint64_t v2;

  result = *(double *)&UIKBScale_scale;
  if (*(double *)&UIKBScale_scale == 0.0)
  {
    +[UIScreen mainScreen](UIScreen, "mainScreen", *(double *)&UIKBScale_scale);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "scale");
    UIKBScale_scale = v2;

    return *(double *)&UIKBScale_scale;
  }
  return result;
}

BOOL UIKBKeyboardIsLandscape(void *a1)
{
  return !UIKBKeyboardIsPortrait(a1);
}

BOOL UIKBKeyboardIsPortrait(void *a1)
{
  void *v1;
  _BOOL8 v2;

  objc_msgSend(a1, "name");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "rangeOfString:", CFSTR("Portrait")) != 0x7FFFFFFFFFFFFFFFLL;

  return v2;
}

BOOL UIKBKeyboardIsSplit(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  v2 = objc_msgSend(v1, "visualStyle") == 106 || objc_msgSend(v1, "visualStyle") == 107;

  return v2;
}

uint64_t UIKBKeyboardDrawsOpaque()
{
  return 0;
}

BOOL UIKBRectContainsRectHorizontally(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a1 + a3 >= a5 + a7 && a1 <= a5;
}

uint64_t UIKBGetFlickDirection(double a1, double a2, double a3, double a4)
{
  long double v6;
  long double v7;
  _QWORD *v8;
  __n128 v9;
  double v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, uint64_t, __n128);
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[5];

  v6 = a3 - a1;
  v7 = hypot(a3 - a1, a4 - a2);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __UIKBGetFlickDirection_block_invoke;
  aBlock[3] = &__block_descriptor_40_e11_q24__0q8d16l;
  *(long double *)&aBlock[4] = v7;
  v8 = _Block_copy(aBlock);
  v9.n128_f64[0] = atan2(a2 - a4, v6);
  if (v9.n128_f64[0] < 0.0)
    v9.n128_f64[0] = v9.n128_f64[0] + 6.28318531;
  v10 = v9.n128_f64[0] * 180.0 / 3.14159265;
  if (v10 <= 45.0)
  {
    v12 = (uint64_t (*)(_QWORD *, uint64_t, __n128))v8[2];
    goto LABEL_7;
  }
  if (v10 > 135.0)
  {
    if (v10 <= 225.0)
    {
      v9.n128_u64[0] = 26.0;
      v11 = ((uint64_t (*)(_QWORD *, uint64_t, __n128))v8[2])(v8, 3, v9);
      goto LABEL_9;
    }
    v12 = (uint64_t (*)(_QWORD *, uint64_t, __n128))v8[2];
    if (v10 <= 315.0)
    {
      v9.n128_u64[0] = 26.0;
      v13 = v8;
      v14 = 2;
      goto LABEL_8;
    }
LABEL_7:
    v9.n128_u64[0] = 26.0;
    v13 = v8;
    v14 = 1;
LABEL_8:
    v11 = v12(v13, v14, v9);
    goto LABEL_9;
  }
  v9.n128_u64[0] = 26.0;
  v11 = ((uint64_t (*)(_QWORD *, _QWORD, __n128))v8[2])(v8, 0, v9);
LABEL_9:
  v15 = v11;

  return v15;
}

void UIKBRectsInit_iPhone(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGFloat v18;
  float64x2_t v23;
  float64x2_t v25;
  CGFloat x;
  double y;
  CGFloat width;
  CGFloat height;
  _BOOL4 IsPortrait;
  double v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  int v46;
  int v47;
  void *v48;
  unsigned int v49;
  double v50;
  CGFloat v51;
  double v52;
  double v53;
  double v54;
  _BOOL4 v55;
  int v56;
  int v57;
  double v58;
  double v59;
  double v60;
  double v61;
  void *v62;
  unsigned int v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  CGFloat v69;
  void *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  int v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v101;
  double v102;
  double v103;
  long double v104;
  double v105;
  long double v106;
  double v107;
  double v108;
  double MinX;
  double v110;
  BOOL v111;
  double v112;
  double MaxX;
  double v114;
  double v115;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  unsigned int v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  CGFloat v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  CGFloat v150;
  CGFloat v151;
  double v152;
  CGRect rect;
  uint64_t v154;
  void (*v155)(uint64_t, void *, uint64_t, _BYTE *);
  void *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;

  v7 = a2;
  v8 = a3;
  switch(objc_msgSend(v8, "displayType"))
  {
    case 0x12u:
      v9 = *(_QWORD *)(a1 + 96);
      v10 = *(_QWORD *)(a1 + 104);
      v11 = *(_QWORD *)(a1 + 112);
      v12 = *(_QWORD *)(a1 + 120);
      v13 = 4.0;
      goto LABEL_8;
    case 0x14u:
      goto LABEL_15;
    case 0x15u:
      v14 = *(_QWORD *)(a1 + 96);
      v15 = *(_QWORD *)(a1 + 104);
      v16 = *(_QWORD *)(a1 + 112);
      v17 = *(_QWORD *)(a1 + 120);
      v18 = 4.0;
      goto LABEL_12;
    case 0x17u:
      __asm { FMOV            V2.2D, #-20.0 }
      v23 = vaddq_f64(*(float64x2_t *)(a1 + 48), _Q2);
      __asm { FMOV            V2.2D, #0.5 }
      v25 = vrndaq_f64(vaddq_f64(*(float64x2_t *)(a1 + 32), vmulq_f64(v23, _Q2)));
      __asm { FMOV            V1.2D, #20.0 }
      *(float64x2_t *)(a1 + 96) = v25;
      *(_OWORD *)(a1 + 112) = _Q1;
      goto LABEL_15;
    case 0x19u:
      v14 = *(_QWORD *)(a1 + 96);
      v15 = *(_QWORD *)(a1 + 104);
      v16 = *(_QWORD *)(a1 + 112);
      v17 = *(_QWORD *)(a1 + 120);
      v18 = 6.0;
LABEL_12:
      v162 = CGRectInset(*(CGRect *)&v14, v18, 0.0);
      x = v162.origin.x;
      y = v162.origin.y;
      width = v162.size.width;
      height = v162.size.height;
      IsPortrait = UIKBKeyboardIsPortrait(v7);
      v32 = y + -1.0;
      if (IsPortrait)
        v32 = y;
      *(CGFloat *)(a1 + 96) = x;
      *(double *)(a1 + 104) = v32;
      *(CGFloat *)(a1 + 112) = width;
      *(CGFloat *)(a1 + 120) = height;
      goto LABEL_15;
    default:
      if (objc_msgSend(v8, "rendering") != 1
        && objc_msgSend(v8, "rendering") != 33
        && objc_msgSend(v8, "rendering") != 34)
      {
        if (objc_msgSend(v8, "interactionType") == 1)
        {
          if (a4 != 4)
            goto LABEL_28;
        }
        else
        {
          v33 = objc_msgSend(v8, "interactionType");
          if (a4 != 4 || v33 != 2)
          {
LABEL_28:
            if (objc_msgSend(v8, "interactionType") == 1)
            {
              if (a4 != 16)
                goto LABEL_15;
            }
            else
            {
              v46 = objc_msgSend(v8, "interactionType");
              if (a4 != 16 || v46 != 2)
                goto LABEL_15;
            }
            v47 = objc_msgSend(v7, "visualStyle");
            objc_msgSend(v8, "stringForProperty:", CFSTR("variant-popup-bias"));
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            v49 = objc_msgSend(v8, "variantType");
            v50 = *(double *)(a1 + 72);
            rect.origin.x = *(CGFloat *)(a1 + 64);
            v51 = *(double *)(a1 + 80);
            v52 = *(double *)(a1 + 88);
            v53 = *(double *)(a1 + 16);
            v54 = *(double *)(a1 + 24);
            v55 = UIKBKeyboardIsPortrait(v7);
            v56 = objc_msgSend(v8, "displayType");
            v57 = v47 == 106 || v55;
            v58 = 60.0;
            v59 = 44.0;
            if (v57)
            {
              v58 = 44.0;
              v59 = 30.0;
            }
            v148 = v59;
            if (v56 == 27)
              v60 = v58;
            else
              v60 = v53;
            if (v57)
              v61 = v60;
            else
              v61 = v60 + -1.0;
            objc_msgSend(v8, "subtrees");
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            v63 = objc_msgSend(v62, "count") - 1;

            rect.origin.y = v61;
            v149 = (double)v63;
            v64 = v61 * (double)v63;
            objc_msgSend(v7, "frame");
            v66 = v65;
            v150 = v68;
            v151 = v67;
            rect.size.width = v69;
            v158 = 0;
            v159 = &v158;
            v160 = 0x2020000000;
            v161 = 0x7FFFFFFFFFFFFFFFLL;
            if (v55)
            {
              objc_msgSend(v8, "subtrees");
              v70 = (void *)objc_claimAutoreleasedReturnValue();
              *(_QWORD *)&rect.size.height = MEMORY[0x1E0C809B0];
              v154 = 3221225472;
              v155 = __UIKBRectsInit_iPhone_block_invoke;
              v156 = &unk_1E16D37A0;
              v157 = &v158;
              objc_msgSend(v70, "enumerateObjectsUsingBlock:", &rect.size.height);

              v71 = 0.0;
              if (v54 >= v60)
                v72 = v54;
              else
                v72 = v60;
              v73 = v72 - v60;
              if (v159[3] != 0x7FFFFFFFFFFFFFFFLL)
              {
                v64 = v73 + v64;
                v71 = v73;
              }
            }
            else
            {
              v71 = 0.0;
            }
            v152 = v71;
            v76 = 102.0 - v52;
            v77 = v52 + 3.0;
            v78 = v50 - fmax(102.0 - v52, 0.0) + -3.0;
            if (v76 <= 0.0)
              v79 = v77;
            else
              v79 = 105.0;
            if (v47 == 106)
            {
              objc_msgSend(v8, "frame");
              v81 = v80;
              objc_msgSend(v7, "frame");
              v78 = v78 + -6.0;
              v79 = v79 + 6.0;
              if (v81 > v82 * 0.5)
              {
                objc_msgSend(v7, "frame");
                v66 = v83 + -384.0;
              }
              rect.size.width = 384.0;
            }
            v163.origin.x = rect.origin.x;
            v163.origin.y = v78;
            v163.size.width = v51;
            v163.size.height = v79;
            v164 = CGRectInset(v163, 0.0, -4.0);
            v84 = v164.origin.x;
            v85 = v164.origin.y;
            v86 = v164.size.width;
            v87 = v164.size.height;
            if ((objc_msgSend(v48, "isEqualToString:", CFSTR("right")) & 1) != 0)
            {
              v88 = 1;
              v89 = v84;
            }
            else
            {
              v88 = objc_msgSend(v48, "isEqualToString:", CFSTR("strictly-right"));
              v90 = 0.0;
              if (!v88)
                v90 = v64;
              v89 = v84 - v90;
            }
            v91 = rect.origin.y;
            v92 = v64 + v86;
            v93 = v66 + rect.size.width;
            v94 = v64 + v86 + v89;
            v95 = *(double *)a1;
            v96 = *(double *)(a1 + 16);
            v97 = v66;
            if (v55)
              v98 = *(double *)(a1 + 24);
            else
              v98 = 41.0;
            v99 = v85 + 8.0 + 1.0 + 2.0;
            _NF = v97 > v89 || v93 < v94;
            if (!_NF)
            {
              v119 = rect.origin.y;
              v84 = v89;
LABEL_124:
              v135 = (v96 - v119) * 0.5;
              if (v119 == v91)
                v135 = -0.0;
              v136 = v95 + v135;
              if (v119 == v91)
                v119 = v91;
              *(double *)(a1 + 96) = v136;
              *(double *)(a1 + 104) = v99;
              *(double *)(a1 + 112) = v119;
              *(double *)(a1 + 120) = v98;
              v137 = 0.0;
              if (v84 >= 0.0)
                v138 = v84;
              else
                v138 = 0.0;
              if (v92 + v138 > v93)
                v137 = v92 + v138 - v93;
              v139 = v92 - v137;
              v170.origin.x = v138;
              v170.origin.y = v85;
              v170.size.width = v139;
              v170.size.height = v87;
              *(CGRect *)(a1 + 64) = CGRectInset(v170, -11.0, 0.0);
              v171.origin.x = v138;
              v171.origin.y = v85;
              v171.size.width = v139;
              v171.size.height = v87;
              *(CGRect *)(a1 + 64) = CGRectInset(v171, -24.0, 0.0);
              _Block_object_dispose(&v158, 8);

              goto LABEL_15;
            }
            v142 = v92;
            v143 = v86;
            v146 = v87;
            v147 = v85;
            v145 = v93;
            v141 = v93 - (v84 + v86);
            v101 = (v141 - v152) / rect.origin.y;
            rect.origin.x = v97;
            v140 = v84 - v97;
            v102 = (v84 - v97 - v152) / rect.origin.y;
            v103 = dbl_18667FEC0[v102 + v101 >= 5.0];
            v104 = fmod(v102, 1.0);
            v105 = floor(v102);
            if (v104 < v103)
              v102 = v105;
            v106 = fmod(v101, 1.0);
            v107 = floor(v101);
            if (v106 >= v103)
              v108 = (v141 - v152) / rect.origin.y;
            else
              v108 = v107;
            v165.origin.x = v95;
            v165.origin.y = v99;
            v165.size.width = v96;
            v165.size.height = v98;
            MinX = CGRectGetMinX(v165);
            v166.origin.x = v95;
            v166.origin.y = v99;
            v166.size.width = v96;
            v166.size.height = v98;
            v110 = CGRectGetMinX(v166) * 0.5;
            v111 = v102 > 0.0 || MinX > v110;
            v112 = 0.0;
            if (v111)
              v112 = v102;
            v144 = v112;
            v167.origin.x = v95;
            v167.origin.y = v99;
            v167.size.width = v96;
            v167.size.height = v98;
            MaxX = CGRectGetMaxX(v167);
            v168.origin.x = rect.origin.x;
            v168.size.height = v150;
            v168.origin.y = v151;
            v168.size.width = rect.size.width;
            v114 = CGRectGetWidth(v168);
            v169.origin.x = v95;
            v169.origin.y = v99;
            v169.size.width = v96;
            v169.size.height = v98;
            v115 = v114 + CGRectGetMinX(v169) * -0.5;
            if (v108 > 0.0 || MaxX < v115)
              v117 = v108;
            else
              v117 = 0.0;
            v118 = v144;
            if (v144 + v117 - v149 > -0.3)
            {
              v91 = rect.origin.y;
              if (!v88)
              {
                if (v144 <= v149)
                  v121 = v144;
                else
                  v121 = (double)v63;
                v84 = v84 - rect.origin.y * v121;
                v119 = rect.origin.y;
                v87 = v146;
                v85 = v147;
                v93 = v145;
                v92 = v142;
                goto LABEL_124;
              }
              v92 = v142;
              if (v117 < v149)
                v84 = v84 - (v152 + rect.origin.y * (v149 - v117));
              v119 = rect.origin.y;
              goto LABEL_123;
            }
            v91 = rect.origin.y;
            if (rect.origin.y <= v148)
            {
              v119 = rect.origin.y;
              v120 = v143;
              goto LABEL_107;
            }
            v120 = v143;
            if (v49 > 0xA)
            {
              v119 = rect.origin.y;
              goto LABEL_107;
            }
            v119 = rect.origin.y;
            if (((1 << v49) & 0x42A) == 0)
            {
LABEL_107:
              v122 = floor(v118);
              v123 = floor(v117);
              v124 = v119 * (v122 + v123);
              v125 = v84 - v122 * v119;
              v126 = v122 + v123 + 1.0;
              v127 = (v149 / v126);
              v128 = (double)(int)(v126 - (double)(int)vcvtpd_s64_f64(((float)v63 + 1.0) / ((float)v127 + 1.0)));
              v129 = v119 * v128;
              if ((((v47 == 106) ^ v88) & 1) != 0)
              {
                _NF = v123 < v128;
                v130 = v125 + v119 * (v128 - v123);
                if (_NF)
                  v84 = v130;
                else
                  v84 = v125;
              }
              else
              {
                v84 = v125 + v129;
              }
              v93 = v145;
              v131 = v120 + v124;
              v132 = v98 + 10.0;
              if (v127 >= 2)
                *(double *)(a1 + 168) = v146 + ceil(v132);
              v92 = v131 - v129;
              v133 = ceil(v132 * (double)v127);
              v85 = v147 - v133;
              v87 = v146 + v133;
              goto LABEL_124;
            }
            v117 = floor(v141 / v148);
            v118 = floor(v140 / v148);
            if (v118 + v117 < v149)
            {
              v119 = v148;
              goto LABEL_107;
            }
            v92 = v148 * v149 + v143;
            if (v88)
            {
              if (v117 >= v149)
              {
LABEL_122:
                v119 = v148;
LABEL_123:
                v87 = v146;
                v85 = v147;
                v93 = v145;
                goto LABEL_124;
              }
              v134 = v149 - v117;
            }
            else if (v118 <= v149)
            {
              v134 = v118;
            }
            else
            {
              v134 = (double)v63;
            }
            v84 = v84 - v148 * v134;
            goto LABEL_122;
          }
        }
        v34 = *(double *)(a1 + 64);
        v36 = *(double *)(a1 + 80);
        v35 = *(double *)(a1 + 88);
        v37 = 111.0 - v35;
        v38 = v35 + 3.0;
        v39 = *(double *)(a1 + 72) - fmax(v37, 0.0);
        if (v37 <= 0.0)
          v40 = v38;
        else
          v40 = 114.0;
        v41 = UIKBPopupBiasForKey(v7, v8);
        if (v41 == 30)
        {
          v74 = v34 + -36.0;
          v43 = v36 + 72.0;
          v75 = v36 + 72.0;
          v42 = v34 + -36.0;
        }
        else
        {
          if (v41 == 29)
          {
            v42 = v34 + -1.0;
            v43 = v36 + 72.0;
            v44 = v34 + -1.0 + -36.0;
            v45 = 3.0;
          }
          else
          {
            if (v41 != 21)
            {
              v42 = v34 + -36.0;
              v75 = v36 + 72.0;
              v74 = v34 + -36.0 + 25.0;
              v43 = v36 + 72.0 + -50.0;
              goto LABEL_54;
            }
            v42 = v34 + -71.0;
            v43 = v36 + 72.0;
            v44 = v34 + -71.0 + 36.0;
            v45 = -3.0;
          }
          v74 = v44 + v45;
          v75 = v43;
        }
LABEL_54:
        *(double *)(a1 + 96) = v74;
        *(double *)(a1 + 104) = v39 + -2.0;
        *(double *)(a1 + 112) = v43;
        *(double *)(a1 + 120) = v37 + 16.0;
        *(double *)(a1 + 64) = v42;
        *(double *)(a1 + 72) = v39;
        *(double *)(a1 + 80) = v75;
        *(double *)(a1 + 88) = v40;
        goto LABEL_15;
      }
      if (objc_msgSend(v8, "displayTypeHint") == 3)
      {
        v9 = *(_QWORD *)(a1 + 96);
        v10 = *(_QWORD *)(a1 + 104);
        v11 = *(_QWORD *)(a1 + 112);
        v12 = *(_QWORD *)(a1 + 120);
        v13 = 16.0;
LABEL_8:
        *(CGRect *)(a1 + 96) = CGRectInset(*(CGRect *)&v9, v13, 0.0);
      }
LABEL_15:

      return;
  }
}

void sub_185DAA58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_185DAABD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void UIKBRectsInit_Wildcat(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;
  int v11;
  double v12;
  int v13;
  double v14;
  CGFloat x;
  double v16;
  CGFloat width;
  uint64_t v18;
  uint64_t v19;
  double y;
  double height;
  _BOOL4 IsPortrait;
  int v23;
  void *v24;
  unsigned int v25;
  id v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  unsigned int v31;
  double v32;
  unsigned int v33;
  void *v34;
  void *v35;
  double v36;
  double v37;
  void *v38;
  void *v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  int v57;
  void *v58;
  double v59;
  double v60;
  double v61;
  _BOOL4 v62;
  double v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  int v72;
  void *v73;
  double v74;
  double v75;
  void *v76;
  void *v77;
  double v78;
  void *v79;
  void *v80;
  double v81;
  void *v82;
  void *v83;
  double v84;
  void *v85;
  void *v86;
  double v87;
  void *v88;
  void *v89;
  double v90;
  int v91;
  double v92;
  id v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;

  v93 = a2;
  v7 = a3;
  if (objc_msgSend(v93, "visualStyle") == 106 || objc_msgSend(v93, "visualStyle") == 107)
  {
    v8 = objc_msgSend(v7, "rendering") == 33;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  if (objc_msgSend(v93, "visualStyle") == 101 && objc_msgSend(v7, "rendering") == 1)
    v10 = 1;
  else
    v10 = objc_msgSend(v93, "visualStyle") == 106 && objc_msgSend(v7, "rendering") == 33;
  v11 = v9 | v10;
  if (v9 | v10)
    v12 = 6.0;
  else
    v12 = 12.0;
  v13 = objc_msgSend(v7, "displayType");
  if (a4 == 16)
  {
LABEL_15:
    x = *(double *)(a1 + 96);
    v14 = *(double *)(a1 + 104);
    width = *(double *)(a1 + 112);
    v16 = *(double *)(a1 + 120);
    if (v13 == 24)
    {
      v18 = *(_QWORD *)(a1 + 96);
      v19 = *(_QWORD *)(a1 + 112);
      v94 = CGRectInset(*(CGRect *)(&v14 - 1), v12, 0.0);
      x = v94.origin.x;
      y = v94.origin.y;
      width = v94.size.width;
      height = v94.size.height;
      IsPortrait = UIKBKeyboardIsPortrait(v93);
      v14 = y + 17.0;
      v16 = height + -20.0;
      if (!IsPortrait)
      {
        v14 = y + 24.0;
        v16 = height + -32.0;
      }
    }
LABEL_18:
    *(CGFloat *)(a1 + 96) = x;
    *(double *)(a1 + 104) = v14;
    *(CGFloat *)(a1 + 112) = width;
    *(double *)(a1 + 120) = v16;
    if (UIKBKeyboardIsPortrait(v93))
      v23 = 2;
    else
      v23 = 4;
    *(_DWORD *)(a1 + 164) = v23;
    if (a4 == 16)
    {
      objc_msgSend(v7, "subtrees");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "count");

      v26 = v7;
      v27 = v26;
      if ((id)qword_1ECD7EC80 != v26)
      {
        _MergedGlobals_1114 = 5;
        objc_msgSend(v26, "name");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v28, "isEqualToString:", CFSTR("EmojiPopupKey"));

        if (v29)
        {
          objc_msgSend(v27, "subtrees");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          _MergedGlobals_1114 = objc_msgSend(v30, "count");

        }
        objc_storeStrong((id *)&qword_1ECD7EC80, a3);
      }
      v31 = _MergedGlobals_1114;

      if (v31 < v25)
        v32 = (double)((v25 + v31 - 1) / v31);
      else
        v32 = 1.0;
      if (v31 < v25)
        v33 = v31;
      else
        v33 = v25;
      if (UIKBKeyboardIsSplit(v93))
      {
        +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "preferencesActions");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "rivenSizeFactor:", 54.0);
        v37 = v36;

        +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "preferencesActions");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "rivenSizeFactor:", 54.0);
        v41 = v40;

      }
      else
      {
        v37 = 65.0;
        v41 = 66.0;
      }
      v47 = v37 * (double)v33;
      v48 = v32 * v41;
      v49 = round(*(double *)(a1 + 64) + (*(double *)(a1 + 80) - v47) * 0.5);
      v50 = v37 * 0.5;
      if ((v33 & 1) != 0)
        v50 = -0.0;
      v51 = v50 + v49;
      v52 = *(double *)(a1 + 72) - v48 + 2.0;
      v95 = CGRectInset(*(CGRect *)(&v47 - 2), -30.0, -20.0);
      v53 = v95.origin.x;
      v54 = v95.origin.y;
      v55 = v95.size.width;
      v56 = v95.size.height;
      v57 = 0;
      if (v95.origin.x >= 0.0)
      {
        v58 = v93;
      }
      else
      {
        v58 = v93;
        do
        {
          v53 = v37 + v53;
          ++v57;
        }
        while (v53 < 0.0);
      }
      v59 = v95.size.width + v53;
      while (1)
      {
        objc_msgSend(v58, "frame");
        if (v59 <= v60 + v61)
          break;
        v53 = v53 - v37;
        --v57;
        v59 = v55 + v53;
        v58 = v93;
      }
      *(double *)(a1 + 128) = v53;
      *(CGFloat *)(a1 + 136) = v54;
      *(double *)(a1 + 144) = v55;
      *(CGFloat *)(a1 + 152) = v56;
      *(_DWORD *)(a1 + 160) = v57;
      v97.origin.x = v53;
      v97.origin.y = v54;
      v97.size.width = v55;
      v97.size.height = v56;
      *(CGRect *)(a1 + 64) = CGRectUnion(*(CGRect *)(a1 + 64), v97);
    }
  }
  else
  {
    switch(v13)
    {
      case 0:
      case 7:
      case 24:
        goto LABEL_15;
      case 2:
        if (!v11)
          goto LABEL_73;
        v42 = *(_QWORD *)(a1 + 96);
        v43 = *(_QWORD *)(a1 + 104);
        v44 = *(double *)(a1 + 112);
        v45 = *(double *)(a1 + 120);
        v46 = 6.0;
        break;
      case 3:
      case 14:
      case 18:
      case 26:
        v42 = *(_QWORD *)(a1 + 96);
        v43 = *(_QWORD *)(a1 + 104);
        v44 = *(double *)(a1 + 112);
        v45 = *(double *)(a1 + 120);
        v46 = v12;
        break;
      case 5:
        if (objc_msgSend(v7, "rendering") != 1 && objc_msgSend(v7, "rendering") != 33)
        {
          v62 = UIKBKeyboardIsPortrait(v93);
          v63 = 83.0;
          if (v62)
            v63 = 62.0;
          v64 = 79.0;
          if (v62)
            v64 = 60.0;
          v65.f64[0] = v63;
          v65.f64[1] = v64;
          v66 = vsubq_f64(*(float64x2_t *)(a1 + 112), v65);
          __asm { FMOV            V4.2D, #0.5 }
          *(float64x2_t *)(a1 + 96) = vrndaq_f64(vaddq_f64(*(float64x2_t *)(a1 + 96), vmulq_f64(v66, _Q4)));
          *(double *)(a1 + 112) = v63;
          *(double *)(a1 + 120) = v64;
        }
        goto LABEL_73;
      case 20:
        x = *(double *)(a1 + 96);
        v14 = *(double *)(a1 + 104);
        width = *(double *)(a1 + 112);
        v16 = *(double *)(a1 + 120);
        goto LABEL_18;
      case 21:
        v42 = *(_QWORD *)(a1 + 96);
        v43 = *(_QWORD *)(a1 + 104);
        v44 = *(double *)(a1 + 112);
        v45 = *(double *)(a1 + 120);
        if (v44 - v12 > v45)
          v46 = v12;
        else
          v46 = v12 * 0.5;
        break;
      case 23:
        if (((v11 ^ 1 | v8) & 1) != 0)
        {
          v72 = UIKBKeyboardIsPortrait(v93) || v8;
          v73 = v93;
          if (v72)
            v74 = 18.0;
          else
            v74 = 23.0;
          if (v72)
            v75 = 20.0;
          else
            v75 = 26.0;
        }
        else
        {
          +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v76, "preferencesActions");
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v77, "rivenSizeFactor:", 20.0);
          v75 = v78;
          +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v79, "preferencesActions");
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v80, "rivenSizeFactor:", 18.0);
          v74 = v81;

          v73 = v93;
        }
        if (objc_msgSend(v73, "visualStyle") == 101)
        {
          v74 = v74 + 1.0;
        }
        else if ((v11 & 1) == 0)
        {
          +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v82, "preferencesActions");
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v83, "rivenSizeFactor:", v75);
          v75 = v84;
          +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v85, "preferencesActions");
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v86, "rivenSizeFactor:", v74);
          v74 = v87;

        }
        +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v88, "preferencesActions");
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v89, "rivenSizeFactor:", 1.0);
        if (v90 > 1.0 && objc_msgSend(v7, "displayTypeHint"))
        {
          v91 = objc_msgSend(v7, "displayTypeHint");

          if (v91 != 5)
          {
            v96 = CGRectInset(*(CGRect *)(a1 + 96), v12, 0.0);
            v75 = v96.size.width;
            v74 = v96.size.height;
          }
        }
        else
        {

        }
        v92 = round(*(double *)(a1 + 104) + (*(double *)(a1 + 120) - v74) * 0.5);
        *(double *)(a1 + 96) = round(*(double *)(a1 + 96) + (*(double *)(a1 + 112) - v75) * 0.5);
        *(double *)(a1 + 104) = v92;
        *(double *)(a1 + 112) = v75;
        *(double *)(a1 + 120) = v74;
        goto LABEL_73;
      case 25:
        if (objc_msgSend(v93, "visualStyle") != 108)
          goto LABEL_73;
        v42 = *(_QWORD *)(a1 + 96);
        v43 = *(_QWORD *)(a1 + 104);
        v44 = *(double *)(a1 + 112);
        v45 = *(double *)(a1 + 120);
        v46 = 2.0;
        break;
      case 28:
        if (!v11)
          goto LABEL_73;
        v42 = *(_QWORD *)(a1 + 96);
        v43 = *(_QWORD *)(a1 + 104);
        v44 = *(double *)(a1 + 112);
        v45 = *(double *)(a1 + 120);
        v46 = 4.0;
        break;
      default:
        goto LABEL_73;
    }
    *(CGRect *)(a1 + 96) = CGRectInset(*(CGRect *)&v42, v46, 0.0);
  }
LABEL_73:

}

uint64_t _UIFocusGroupCompare(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  int v33;
  int v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  _BOOL4 v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  double v65;
  CGFloat v66;
  double v67;
  CGFloat v68;
  double v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  double v77;
  double v78;
  double v79;
  double v80;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  CGFloat v90;
  CGFloat v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIFocusGroupCompare(_UIFocusGroup * _Nonnull __strong, _UIFocusGroup * _Nonnull __strong)");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v82, "handleFailureInFunction:file:lineNumber:description:", v83, CFSTR("_UIFocusGroupHelperFuncs.m"), 28, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("group1"));

    if (v5)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIFocusGroupCompare(_UIFocusGroup * _Nonnull __strong, _UIFocusGroup * _Nonnull __strong)");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v84, "handleFailureInFunction:file:lineNumber:description:", v85, CFSTR("_UIFocusGroupHelperFuncs.m"), 29, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("group2"));

LABEL_3:
  objc_msgSend(v3, "parentGroup");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "parentGroup");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6 != v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIFocusGroupCompare(_UIFocusGroup * _Nonnull __strong, _UIFocusGroup * _Nonnull __strong)");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v86, "handleFailureInFunction:file:lineNumber:description:", v87, CFSTR("_UIFocusGroupHelperFuncs.m"), 31, CFSTR("Comparing groups with different parents is invalid."));

  }
  objc_msgSend(v3, "coordinateSpace");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "coordinateSpace");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v8;
  v11 = v9;
  if (v10 == v11)
  {
    v14 = v10;
    v15 = v10;
    v16 = v10;
  }
  else
  {
    v12 = v11;
    if (v10 && v11)
    {
      v13 = objc_msgSend(v10, "isEqual:", v11);

      if ((v13 & 1) != 0)
        goto LABEL_12;
    }
    else
    {

    }
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIFocusGroupCompare(_UIFocusGroup * _Nonnull __strong, _UIFocusGroup * _Nonnull __strong)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "identifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "coordinateSpace");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "identifier");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "coordinateSpace");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("_UIFocusGroupHelperFuncs.m"), 33, CFSTR("Trying to compare groups with different coordinate spaces. Group %@ uses %@ while group %@ uses %@."), v14, v10, v88, v89);

  }
LABEL_12:
  objc_msgSend(v3, "owningEnvironment");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "owningEnvironment");
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)v18;
  if (!v17)
  {
    v21 = 0;
    if (!v18)
      goto LABEL_19;
LABEL_17:
    +[UIFocusSystem focusSystemForEnvironment:](UIFocusSystem, "focusSystemForEnvironment:", v19);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21 == v22)
      goto LABEL_19;
    goto LABEL_18;
  }
  +[UIFocusSystem focusSystemForEnvironment:](UIFocusSystem, "focusSystemForEnvironment:", v17);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = (void *)v20;
  if (v19)
    goto LABEL_17;
  if (v20)
  {
LABEL_18:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIFocusGroupCompare(_UIFocusGroup * _Nonnull __strong, _UIFocusGroup * _Nonnull __strong)");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "handleFailureInFunction:file:lineNumber:description:", v24, CFSTR("_UIFocusGroupHelperFuncs.m"), 39, CFSTR("Unable to compare focus groups from different focus systems."));

  }
LABEL_19:
  objc_msgSend(v21, "behavior");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "shouldUseAccessibilityCompareForFocusGroupsInExternallyPlacedWindows");

  if (v26)
  {
    _UIFocusEnvironmentContainingView(v17);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "_window");
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    _UIFocusEnvironmentContainingView(v19);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "_window");
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    if (v28
      && v30
      && v28 != v30
      && ((objc_msgSend(v28, "_isExternallyPlaced") & 1) != 0 || (objc_msgSend(v30, "_isExternallyPlaced") & 1) != 0))
    {
      v31 = _UIFocusItemCompare(v28, v30);

      goto LABEL_40;
    }

  }
  objc_msgSend(v3, "parentGroup");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "owningEnvironment");
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  v33 = objc_msgSend(v21, "_shouldReverseLayoutDirectionForEnvironment:", v28);
  v34 = objc_msgSend(v21, "_shouldReverseLinearWrappingForEnvironment:", v28);
  objc_msgSend(v3, "boundingBox");
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v42 = v41;
  objc_msgSend(v5, "boundingBox");
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v92.origin.x = v36;
  v92.origin.y = v38;
  v92.size.width = v40;
  v92.size.height = v42;
  if (CGRectIsNull(v92))
    goto LABEL_38;
  v93.origin.x = v44;
  v93.origin.y = v46;
  v93.size.width = v48;
  v93.size.height = v50;
  if (CGRectIsNull(v93))
    goto LABEL_38;
  v94.origin.x = v36;
  v94.origin.y = v38;
  v94.size.width = v40;
  v94.size.height = v42;
  v95 = CGRectStandardize(v94);
  x = v95.origin.x;
  y = v95.origin.y;
  width = v95.size.width;
  height = v95.size.height;
  v95.origin.x = v44;
  v95.origin.y = v46;
  v95.size.width = v48;
  v95.size.height = v50;
  v96 = CGRectStandardize(v95);
  v55 = v96.origin.x;
  v56 = v96.origin.y;
  v57 = v96.size.width;
  v58 = v96.size.height;
  v90 = y;
  v91 = x;
  v96.origin.x = x;
  v96.origin.y = y;
  v96.size.width = width;
  v96.size.height = height;
  v59 = CGRectGetMinX(v96) + 0.0001;
  v97.origin.x = v55;
  v97.origin.y = v56;
  v97.size.width = v57;
  v97.size.height = v58;
  if (v59 <= CGRectGetMaxX(v97))
  {
    v98.origin.y = v90;
    v98.origin.x = x;
    v98.size.width = width;
    v98.size.height = height;
    v61 = CGRectGetMaxX(v98) + -0.0001;
    v99.origin.x = v55;
    v99.origin.y = v56;
    v99.size.width = v57;
    v99.size.height = v58;
    v60 = v61 >= CGRectGetMinX(v99);
  }
  else
  {
    v60 = 0;
  }
  v100.origin.x = x;
  v100.origin.y = v90;
  v100.size.width = width;
  v100.size.height = height;
  v62 = CGRectGetMinY(v100) + 0.0001;
  v101.origin.x = v55;
  v101.origin.y = v56;
  v101.size.width = v57;
  v101.size.height = v58;
  if (v62 > CGRectGetMaxY(v101))
    goto LABEL_38;
  v102.origin.x = v91;
  v102.origin.y = v90;
  v102.size.width = width;
  v102.size.height = height;
  v63 = CGRectGetMaxY(v102) + -0.0001;
  v103.origin.x = v55;
  v103.origin.y = v56;
  v103.size.width = v57;
  v103.size.height = v58;
  if (v63 < CGRectGetMinY(v103) || !v60)
  {
LABEL_38:
    objc_msgSend(v3, "boundingBox");
    v66 = v77;
    v68 = v78;
    v70 = v79;
    v72 = v80;
    objc_msgSend(v5, "boundingBox");
  }
  else
  {
    objc_msgSend(v3, "primaryRect");
    v66 = v65;
    v68 = v67;
    v70 = v69;
    v72 = v71;
    objc_msgSend(v5, "primaryRect");
  }
  v31 = _UIFocusRectCompare(v33, v34, v66, v68, v70, v72, v73, v74, v75, v76);
LABEL_40:

  return v31;
}

id _UIFocusGroupIdentifierForInstance(void *a1)
{
  id v1;
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  void *v7;
  void *v8;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull _UIFocusGroupIdentifierForInstance(id  _Nonnull __strong)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("_UIFocusGroupHelperFuncs.m"), 221, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("object"));

  }
  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("<%@: %p>"), v4, v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _UIFocusGroupInferIdentifierForEnvironment(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  int v21;
  void *v22;
  int v23;

  v1 = a1;
  +[UIFocusSystem focusSystemForEnvironment:](UIFocusSystem, "focusSystemForEnvironment:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "behavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "focusGroupContainmentBehavior");

  objc_msgSend(v1, "focusItemContainer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if ((v4 & 8) != 0)
  {
    v14 = v1;
    v15 = _UIFocusEnvironmentRotaryFocusMovementAxis(v14);
    if (v15 == -1)
    {
      v7 = 0;
      goto LABEL_22;
    }
    v16 = v15;
    if (_UIInternalPreferencesRevisionOnce != -1)
      dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
    v17 = _UIInternalPreferencesRevisionVar;
    if (_UIInternalPreferencesRevisionVar < 1)
      goto LABEL_13;
    v21 = _UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis;
    if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis)
      goto LABEL_13;
    while (v17 >= v21)
    {
      objc_msgSend((id)_revisionDefaults, "objectForKey:", CFSTR("FocusGroupSeparateNestedEqualRotaryMovementAxis"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v17;
      if (v22)
        v23 = v17
            + _UIInternalPreferenceUpdateBool((uint64_t)&_UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis, v22);
      _UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis = v23;

      v21 = _UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis;
      if (v17 == _UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis)
        goto LABEL_13;
    }
    if (!byte_1EDDA8174)
    {
LABEL_13:
      objc_msgSend(v14, "parentFocusEnvironment");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = _UIFocusEnvironmentResolvedRotaryFocusMovementAxis(v18, 0);

      v7 = 0;
      if (v16 == v19)
      {
LABEL_22:

        goto LABEL_23;
      }
    }
    _UIFocusGroupIdentifierForInstance(v14);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_22;
  }
  v7 = 0;
  if (_UIFocusItemContainerIsScrollableContainer(v5) && (v4 & 6) != 0)
  {
    v8 = v1;
    v9 = _UIFocusItemScrollableContainerPrimaryAxis(v6);
    _UIFocusNearestAncestorEnvironmentScrollableContainer(v8, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
    {
      objc_msgSend(v10, "scrollableContainer");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = _UIFocusItemScrollableContainerPrimaryAxis(v12);

      if ((v4 & 4) == 0)
      {
LABEL_6:
        v7 = 0;
        if ((v4 & 2) == 0 || v11)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
      if ((v4 & 4) == 0)
        goto LABEL_6;
    }
    if (v11 && v9 == v13)
    {
      v7 = 0;
LABEL_21:

      goto LABEL_22;
    }
LABEL_20:
    _UIFocusGroupIdentifierForInstance(v8);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_21;
  }
LABEL_23:

  return v7;
}

id _UIFocusGroupUnresolvedIdentifierForEnvironment(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (_UIFocusEnvironmentIsViewOrViewControllerOrRespondsToSelector(v1))
    objc_msgSend(v1, "focusGroupIdentifier");
  else
    _UIFocusGroupInferIdentifierForEnvironment(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t _UIFocusGroupPriorityForItem(void *a1, id a2, id a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a1;
  v6 = v5;
  v7 = 1000;
  if (v5 != a3)
    v7 = 0;
  if (v5 == a2)
    v8 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v8 = v7;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v9 = objc_msgSend(v6, "_systemDefaultFocusGroupPriority");
    if (v9 > v8)
      v8 = v9;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v10 = objc_msgSend(v6, "focusGroupPriority");
    if (v10 > v8)
      v8 = v10;
  }

  return v8;
}

void sub_185DAEBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)UIKBHandwritingStrokeView;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_185DAEE4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DAEEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_185DAF408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DAF6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_185DAFB94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void clipHandwritingPath(uint64_t a1, int *a2)
{
  double *v4;
  int v5;
  _OWORD *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  _BOOL4 v27;
  BOOL v28;
  __int128 v29;
  _BOOL4 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  _BOOL4 v41;
  CGRect v42;
  CGRect v43;

  v4 = (double *)*((_QWORD *)a2 + 1);
  if (!*(_BYTE *)(a1 + 64))
    CGContextMoveToPoint(*(CGContextRef *)a1, *(CGFloat *)(a1 + 40), *(CGFloat *)(a1 + 48));
  v5 = *a2;
  if (*a2)
  {
    if (v5 == 1)
    {
      v6 = (_OWORD *)(a1 + 40);
      v31 = *(double *)(a1 + 40);
      v32 = v4[1];
      if (v31 >= *v4)
        v33 = *v4;
      else
        v33 = *(double *)(a1 + 40);
      v35 = *(double *)(a1 + 48);
      v34 = *(double *)(a1 + 56);
      v36 = v33 - v34 * 0.5;
      if (v35 >= v32)
        v37 = v4[1];
      else
        v37 = *(double *)(a1 + 48);
      v38 = v37 - v34 * 0.5;
      v39 = v34 + vabdd_f64(*v4, v31);
      v40 = v34 + vabdd_f64(v32, v35);
      v41 = CGRectIntersectsRect(*(CGRect *)(a1 + 8), *(CGRect *)&v36);
      v28 = v41;
      if (v41)
        CGContextAddLineToPoint(*(CGContextRef *)a1, *v4, v4[1]);
      v29 = *(_OWORD *)v4;
    }
    else
    {
      if (v5 != 2)
      {
        v28 = 0;
        goto LABEL_35;
      }
      v6 = (_OWORD *)(a1 + 40);
      v7 = *(double *)(a1 + 40);
      v8 = *v4;
      v9 = v4[1];
      if (v7 >= *v4)
        v10 = *v4;
      else
        v10 = *(double *)(a1 + 40);
      v11 = *(double *)(a1 + 48);
      v12 = *(double *)(a1 + 56);
      v13 = v12 * 0.5;
      v14 = v10 - v12 * 0.5;
      if (v11 >= v9)
        v15 = v4[1];
      else
        v15 = *(double *)(a1 + 48);
      v16 = v15 - v13;
      v17 = v12 + vabdd_f64(v8, v7);
      v18 = v4[2];
      v19 = v12 + vabdd_f64(v9, v11);
      if (v8 >= v18)
        v20 = v4[2];
      else
        v20 = *v4;
      v21 = v20 - v13;
      v22 = v4[3];
      if (v9 >= v22)
        v23 = v4[3];
      else
        v23 = v4[1];
      v24 = v23 - v13;
      v25 = v12 + vabdd_f64(v18, v8);
      v26 = v12 + vabdd_f64(v22, v9);
      v42 = CGRectUnion(*(CGRect *)&v14, *(CGRect *)&v21);
      v27 = CGRectIntersectsRect(*(CGRect *)(a1 + 8), v42);
      v28 = v27;
      if (v27)
        CGContextAddQuadCurveToPoint(*(CGContextRef *)a1, *v4, v4[1], v4[2], v4[3]);
      v29 = *((_OWORD *)v4 + 1);
    }
    *v6 = v29;
  }
  else
  {
    v43.size.width = *(CGFloat *)(a1 + 56);
    v43.origin.x = *v4 - v43.size.width * 0.5;
    v43.origin.y = v4[1] - v43.size.width * 0.5;
    v43.size.height = v43.size.width;
    v30 = CGRectIntersectsRect(*(CGRect *)(a1 + 8), v43);
    v28 = v30;
    if (v30)
      CGContextMoveToPoint(*(CGContextRef *)a1, *v4, v4[1]);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v4;
  }
LABEL_35:
  *(_BYTE *)(a1 + 64) = v28;
}

void sub_185DB044C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_185DB0724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_185DB0994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_185DB0F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_185DB1208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB1290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB13BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB1430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)UIKBHandwritingView;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_185DB17A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_185DB1980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB19F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB1C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB1E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB1E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB1F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB1FF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_185DB2118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB22E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB2780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_185DB294C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_185DB2A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_185DB2B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB2E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_185DB31D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_185DB32E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_185DB3388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB33EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_185DB35C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_185DB3630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB3740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB390C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_185DB3DD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB3EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB3F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB403C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_185DB4208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB4304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB4450(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185DB4560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_185DB4744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id _UIDocumentCreationIntentFromActionIdentifier(void *a1)
{
  void *v2;

  if (objc_msgSend(a1, "hasPrefix:", CFSTR("com.apple.documents.action.create.document.")))
  {
    objc_msgSend(a1, "substringFromIndex:", objc_msgSend(CFSTR("com.apple.documents.action.create.document."), "length"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_185DBDBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 216), 8);
  _Block_object_dispose((const void *)(v36 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_185DC177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_185DD3450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

BOOL _tabElementsContainsTab(void *a1, void *a2)
{
  id v3;
  id v4;
  _BOOL8 v5;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___tabElementsContainsTab_block_invoke;
  v7[3] = &unk_1E16BFD48;
  v8 = v3;
  v4 = v3;
  v5 = objc_msgSend(a1, "indexOfObjectPassingTest:", v7) != 0x7FFFFFFFFFFFFFFFLL;

  return v5;
}

void sub_185DD40EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___tabElementsContainsTab_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5;
}

void sub_185DD4B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_185DD4C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_185DD4F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_185DD5164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFString *_labelColorSecondary(int a1)
{
  int v2;
  __CFString **v3;
  __CFString **v4;

  v2 = _AXDarkenSystemColors();
  v3 = UIKBColorBlack_Alpha60;
  if (v2)
  {
    v3 = UIKBColorBlack_Alpha80;
    v4 = UIKBColorWhite_Alpha85;
  }
  else
  {
    v4 = UIKBColorWhite_Alpha50;
  }
  if (!a1)
    v3 = v4;
  return *v3;
}

uint64_t geometryPositionSort(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  id v10;
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v5 = a1;
  v6 = a2;
  v7 = -1;
  if (a3)
  {
    v8 = objc_msgSend(a3, "BOOLValue");
    if (v8)
      v9 = 1;
    else
      v9 = -1;
    if (!v8)
      v7 = 1;
  }
  else
  {
    v9 = 1;
  }
  v10 = v5;
  v11 = v6;
  objc_msgSend(v10, "frame");
  v13 = v12;
  objc_msgSend(v11, "frame");
  if (v13 <= v14)
  {
    objc_msgSend(v10, "frame");
    v16 = v15;
    objc_msgSend(v11, "frame");
    if (v16 >= v17)
      v9 = 0;
    else
      v9 = v7;
  }

  return v9;
}

void sub_185DE6564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  id *v30;

  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185DE7884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_185DE8EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGMutablePathRef createMutablePathWithPoints(CGFloat *a1, uint64_t a2, int a3)
{
  CGPath *Mutable;
  uint64_t v7;
  int v8;
  double *v9;
  uint64_t v11;
  CGMutablePathRef v12;
  CGAffineTransform v14;
  CGAffineTransform transform;

  Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, *a1, a1[1]);
  v7 = 1;
  v8 = 1;
  while (1)
  {
    v9 = &a1[2 * v7];
    if (*v9 == -1.0 && v9[1] == -1.0)
      break;
    v11 = v8;
LABEL_12:
    CGPathAddLineToPoint(Mutable, 0, a1[2 * v11], a1[2 * v11 + 1]);
    v7 = ++v8;
    if (v8 >= a2)
      goto LABEL_13;
  }
  if (v8 + 1 < a2)
    ++v8;
  else
    v8 = 0;
  CGPathMoveToPoint(Mutable, 0, a1[2 * v8], a1[2 * v8 + 1]);
  if (v8)
  {
    v11 = v8;
    goto LABEL_12;
  }
LABEL_13:
  if (a3)
    CGPathCloseSubpath(Mutable);
  memset(&transform, 0, sizeof(transform));
  CGAffineTransformMakeScale(&v14, 1.0, -1.0);
  CGAffineTransformTranslate(&transform, &v14, 0.0, -15.0);
  v12 = CGPathCreateMutableCopyByTransformingPath(Mutable, &transform);
  CGPathRelease(Mutable);
  return v12;
}

unint64_t UIKBIntHash(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = 9 * ((~(a1 << 15) + a1) ^ ((unint64_t)(~(a1 << 15) + a1) >> 10));
  v2 = (v1 ^ (v1 >> 6)) + ~((v1 ^ (v1 >> 6)) << 11);
  return v2 ^ (v2 >> 16);
}

uint64_t UIKBNextUID()
{
  return UIKBNextUID_counter++;
}

id _UICalendarSanitizeWithCalendar(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v11;
  void *v12;

  v3 = a2;
  if (a1)
  {
    a1 = (void *)objc_msgSend(a1, "copy");
    objc_msgSend(a1, "calendar");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
      objc_msgSend(a1, "setCalendar:", v3);
    if (v3)
    {
      objc_msgSend(a1, "calendar");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "isEqual:", v3);

      if ((v6 & 1) == 0)
      {
        objc_msgSend(a1, "calendar");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "dateFromComponents:", a1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v8)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSDateComponents * _Nullable _UICalendarSanitizeWithCalendar(NSDateComponents * _Nonnull __strong, NSCalendar * _Nonnull __strong)");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("_UICalendarViewHelper.h"), 92, CFSTR("Date components yielded an invalid NSDate"));

        }
        objc_msgSend(v3, "components:fromDate:", 1048606, v8);
        v9 = objc_claimAutoreleasedReturnValue();

        a1 = (void *)v9;
      }
    }
  }

  return a1;
}

void AXSSensitiveSettingChanged()
{
  void *v0;
  char v1;

  +[UIKeyboardLayoutStar accessibilitySensitivityChanged](UIKeyboardLayoutStar, "accessibilitySensitivityChanged");
  +[UIKBRenderer clearInternalCaches](UIKBRenderer, "clearInternalCaches");
  v0 = (void *)__cache;
  if (__cache && *(_QWORD *)(__cache + 8) && (v1 = objc_opt_respondsToSelector(), v0 = (void *)__cache, (v1 & 1) != 0))
  {
    objc_msgSend(*(id *)(__cache + 8), "purgeMemoryCache");
  }
  else
  {
    __cache = 0;

  }
}

uint64_t _nonPersistentCacheForKey(void *a1, const void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  CFTypeID v6;
  id v7;

  v3 = a1;
  if (!v3)
    goto LABEL_8;
  if (qword_1ECD7EDE8 != -1)
    dispatch_once(&qword_1ECD7EDE8, &__block_literal_global_111_1);
  objc_msgSend((id)_MergedGlobals_1121, "objectForKey:", v3);
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v5 = objc_msgSend(v4, "CGImage");

  if (!v5)
  {
    if (a2)
    {
      v6 = CFGetTypeID(a2);
      if (v6 == CGImageGetTypeID())
      {
        +[UIImage imageWithCGImage:](UIImage, "imageWithCGImage:", a2);
        v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v5 = objc_msgSend(v7, "CGImage");
        objc_msgSend((id)_MergedGlobals_1121, "setObject:forKey:", v7, v3);

        goto LABEL_9;
      }
    }
LABEL_8:
    v5 = 0;
  }
LABEL_9:

  return v5;
}

void sub_185DEFAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___nonPersistentCacheForKey_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)_MergedGlobals_1121;
  _MergedGlobals_1121 = (uint64_t)v0;

}

void sub_185DF4B1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_185DF7700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTUIKeyplaneViewClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getTUIKeyplaneViewClass_softClass;
  v7 = getTUIKeyplaneViewClass_softClass;
  if (!getTUIKeyplaneViewClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getTUIKeyplaneViewClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getTUIKeyplaneViewClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185DF94F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185DFD4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E00664(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185E01444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t keyPositionSortByHorizontalDistanceFromPoint(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  float v7;
  double v8;
  id v9;
  id v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  float v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  v5 = a1;
  v6 = a2;
  objc_msgSend(a3, "floatValue");
  v8 = v7;
  v9 = v6;
  v10 = v5;
  objc_msgSend(v10, "frame");
  v11 = v8 - CGRectGetMinX(v38);
  if (v11 >= 0.0)
    v12 = v11;
  else
    v12 = -v11;
  objc_msgSend(v10, "frame");
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;

  v39.origin.x = v14;
  v39.origin.y = v16;
  v39.size.width = v18;
  v39.size.height = v20;
  v21 = v8 - CGRectGetMaxX(v39);
  if (v21 < 0.0)
    v21 = -v21;
  if (v12 >= v21)
    v21 = v12;
  v22 = v21;
  objc_msgSend(v9, "frame");
  v23 = v8 - CGRectGetMinX(v40);
  if (v23 >= 0.0)
    v24 = v23;
  else
    v24 = -v23;
  objc_msgSend(v9, "frame");
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;

  v41.origin.x = v26;
  v41.origin.y = v28;
  v41.size.width = v30;
  v41.size.height = v32;
  v33 = v8 - CGRectGetMaxX(v41);
  if (v33 < 0.0)
    v33 = -v33;
  if (v24 >= v33)
    v33 = v24;
  v34 = v33;
  if (v22 >= v34)
    v35 = 0;
  else
    v35 = -1;
  if (v22 > v34)
    v36 = 1;
  else
    v36 = v35;

  return v36;
}

void sub_185E0C560(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

BOOL isFlickOutOfBounds(double a1, double a2, double a3, double a4)
{
  void *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  double v10;

  +[UIKeyboard activeKeyboard](UIKeyboard, "activeKeyboard");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "interfaceOrientation") - 5;

  v8 = UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL;
  v9 = v7 < 0xFFFFFFFFFFFFFFFELL || v8 == 1;
  v10 = 80.0;
  if (v9)
    v10 = 110.0;
  return vabdd_f64(a2, a4) > v10;
}

id getFlickString(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  getFlickPopupInfoArray(a1, CFSTR("Strings"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "objectAtIndex:", a2 + 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_185E154EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185E167A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __getTUIKeyplaneViewClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  TextInputUILibrary_3();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyplaneView");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyplaneViewClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIKeyplaneViewClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardLayoutStar.m"), 183, CFSTR("Unable to find class %s"), "TUIKeyplaneView");

    __break(1u);
  }
}

id getFlickPopupInfoArray(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;

  v3 = a2;
  if (a1)
  {
    v4 = a1;
    UIKeyboardGetCurrentInputMode();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    TIInputModeGetNormalizedIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    UIKeyboardRomanAccentVariants((uint64_t)v4, v6, 38);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "objectForKey:", CFSTR("Direction"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("flick"));

    if (v9)
    {
      objc_msgSend(v7, "objectForKey:", v3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id getAFSpeechCorrectionInfoClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAFSpeechCorrectionInfoClass_softClass;
  v7 = getAFSpeechCorrectionInfoClass_softClass;
  if (!getAFSpeechCorrectionInfoClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAFSpeechCorrectionInfoClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getAFSpeechCorrectionInfoClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E17664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E180B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E1867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAFSpeechRequestOptionsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAFSpeechRequestOptionsClass_softClass;
  v7 = getAFSpeechRequestOptionsClass_softClass;
  if (!getAFSpeechRequestOptionsClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAFSpeechRequestOptionsClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getAFSpeechRequestOptionsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E18830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E1B5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_185E1BC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_185E1DB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAFOfflineDictationStatusHighQualityKey()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getAFOfflineDictationStatusHighQualityKeySymbolLoc_ptr;
  v8 = getAFOfflineDictationStatusHighQualityKeySymbolLoc_ptr;
  if (!getAFOfflineDictationStatusHighQualityKeySymbolLoc_ptr)
  {
    v1 = AssistantServicesLibrary_0();
    v0 = (id *)dlsym(v1, "AFOfflineDictationStatusHighQualityKey");
    v6[3] = (uint64_t)v0;
    getAFOfflineDictationStatusHighQualityKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getAFOfflineDictationStatusHighQualityKey(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIDictationConnection.m"), 65, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E1DDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAFOfflineDictationStatusInstalledKey()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getAFOfflineDictationStatusInstalledKeySymbolLoc_ptr;
  v8 = getAFOfflineDictationStatusInstalledKeySymbolLoc_ptr;
  if (!getAFOfflineDictationStatusInstalledKeySymbolLoc_ptr)
  {
    v1 = AssistantServicesLibrary_0();
    v0 = (id *)dlsym(v1, "AFOfflineDictationStatusInstalledKey");
    v6[3] = (uint64_t)v0;
    getAFOfflineDictationStatusInstalledKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getAFOfflineDictationStatusInstalledKey(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIDictationConnection.m"), 66, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E1DEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E1E170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAFSpeechCorrectionInfoClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AssistantServicesLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AFSpeechCorrectionInfo");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAFSpeechCorrectionInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAFSpeechCorrectionInfoClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationConnection.m"), 58, CFSTR("Unable to find class %s"), "AFSpeechCorrectionInfo");

    __break(1u);
  }
}

void __getAFLanguageDetectionUserContextClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AssistantServicesLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AFLanguageDetectionUserContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAFLanguageDetectionUserContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAFLanguageDetectionUserContextClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationConnection.m"), 59, CFSTR("Unable to find class %s"), "AFLanguageDetectionUserContext");

    __break(1u);
  }
}

void __getAFDictationOptionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AssistantServicesLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AFDictationOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAFDictationOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAFDictationOptionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationConnection.m"), 56, CFSTR("Unable to find class %s"), "AFDictationOptions");

    __break(1u);
  }
}

void __getAFSpeechRequestOptionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AssistantServicesLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AFSpeechRequestOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAFSpeechRequestOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAFSpeechRequestOptionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationConnection.m"), 57, CFSTR("Unable to find class %s"), "AFSpeechRequestOptions");

    __break(1u);
  }
}

void sub_185E1EB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E1ED48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E1F078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E1FF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  uint64_t v16;

  _Block_object_dispose((const void *)(v16 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_185E20EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_185E21850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E23B04(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185E26BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEILaunchContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSISchemaUEILaunchContextClass_softClass;
  v7 = getSISchemaUEILaunchContextClass_softClass;
  if (!getSISchemaUEILaunchContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEILaunchContextClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSISchemaUEILaunchContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E26CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E289CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E28C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_185E295E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_185E2AEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E2C95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E2D858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEIDictationInputModeSwitchContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSISchemaUEIDictationInputModeSwitchContextClass_softClass;
  v7 = getSISchemaUEIDictationInputModeSwitchContextClass_softClass;
  if (!getSISchemaUEIDictationInputModeSwitchContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEIDictationInputModeSwitchContextClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSISchemaUEIDictationInputModeSwitchContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E2D91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E2F7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAFAggregatorClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAFAggregatorClass_softClass;
  v7 = getAFAggregatorClass_softClass;
  if (!getAFAggregatorClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAFAggregatorClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getAFAggregatorClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E31F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E333F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E33C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUUIDClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSISchemaUUIDClass_softClass;
  v7 = getSISchemaUUIDClass_softClass;
  if (!getSISchemaUUIDClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUUIDClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSISchemaUUIDClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E33D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E34184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_185E342A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E344D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E34694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E34C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEIDictationInputModeSwitchStartedClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSISchemaUEIDictationInputModeSwitchStartedClass_softClass;
  v7 = getSISchemaUEIDictationInputModeSwitchStartedClass_softClass;
  if (!getSISchemaUEIDictationInputModeSwitchStartedClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEIDictationInputModeSwitchStartedClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSISchemaUEIDictationInputModeSwitchStartedClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E35A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E3632C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _stringForObject(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "string");
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v3 = 0;
      goto LABEL_7;
    }
    v2 = v1;
  }
  v3 = v2;
LABEL_7:

  return v3;
}

void sub_185E37F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E385E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEIDictationVoiceCommandExecutedClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSISchemaUEIDictationVoiceCommandExecutedClass_softClass;
  v7 = getSISchemaUEIDictationVoiceCommandExecutedClass_softClass;
  if (!getSISchemaUEIDictationVoiceCommandExecutedClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEIDictationVoiceCommandExecutedClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSISchemaUEIDictationVoiceCommandExecutedClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E386AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E39110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E39278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E3AC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  _Block_object_dispose(&a60, 8);
  _Unwind_Resume(a1);
}

void sub_185E3D2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E3E30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_softClass;
  v7 = getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_softClass;
  if (!getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E3F250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E3F564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getOBPrivacyPresenterClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD79760)
    qword_1ECD79760 = _sl_dlopen();
  if (!qword_1ECD79760)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *OnBoardingKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIDictationController.m"), 243, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("OBPrivacyPresenter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getOBPrivacyPresenterClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIDictationController.m"), 244, CFSTR("Unable to find class %s"), "OBPrivacyPresenter");

LABEL_8:
    __break(1u);
  }
  qword_1ECD79758 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getVTUIDictationDataSharingOptInPresenterClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD79770)
    qword_1ECD79770 = _sl_dlopen();
  if (!qword_1ECD79770)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *VoiceTriggerUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIDictationController.m"), 146, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("VTUIDictationDataSharingOptInPresenter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVTUIDictationDataSharingOptInPresenterClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIDictationController.m"), 147, CFSTR("Unable to find class %s"), "VTUIDictationDataSharingOptInPresenter");

LABEL_8:
    __break(1u);
  }
  qword_1ECD79768 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __getSISchemaAutoPunctuationEditClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaAutoPunctuationEdit");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaAutoPunctuationEditClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaAutoPunctuationEditClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 187, CFSTR("Unable to find class %s"), "SISchemaAutoPunctuationEdit");

    __break(1u);
  }
}

void SiriInstrumentationLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!SiriInstrumentationLibraryCore_frameworkLibrary)
    SiriInstrumentationLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!SiriInstrumentationLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SiriInstrumentationLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIDictationController.m"), 167, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getASRSchemaASRConfusionPairTokenClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ASRSchemaASRConfusionPairToken");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getASRSchemaASRConfusionPairTokenClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getASRSchemaASRConfusionPairTokenClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 195, CFSTR("Unable to find class %s"), "ASRSchemaASRConfusionPairToken");

    __break(1u);
  }
}

void __getSISchemaUEIDictationAlternativeTextPairsSelectedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationAlternativeTextPairsSelected");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD79788 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationAlternativeTextPairsSelectedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 188, CFSTR("Unable to find class %s"), "SISchemaUEIDictationAlternativeTextPairsSelected");

    __break(1u);
  }
}

void __getSISchemaDictationContentEditedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationContentEdited");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD79790 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaDictationContentEditedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 180, CFSTR("Unable to find class %s"), "SISchemaDictationContentEdited");

    __break(1u);
  }
}

void __getSISchemaUEIDictationContentEditedTier1Class_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationContentEditedTier1");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD79798 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationContentEditedTier1Class(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 181, CFSTR("Unable to find class %s"), "SISchemaUEIDictationContentEditedTier1");

    __break(1u);
  }
}

void __getSISchemaInvocationClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaInvocation");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD797A8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaInvocationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 168, CFSTR("Unable to find class %s"), "SISchemaInvocation");

    __break(1u);
  }
}

void __getSISchemaUEILaunchContextClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEILaunchContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEILaunchContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEILaunchContextClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 177, CFSTR("Unable to find class %s"), "SISchemaUEILaunchContext");

    __break(1u);
  }
}

void __getSISchemaUEILaunchStartedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEILaunchStarted");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD797B0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEILaunchStartedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 178, CFSTR("Unable to find class %s"), "SISchemaUEILaunchStarted");

    __break(1u);
  }
}

void __getSISchemaUEIDictationEnablementPromptShownClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationEnablementPromptShown");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationEnablementPromptShownClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                            + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationEnablementPromptShownClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 193, CFSTR("Unable to find class %s"), "SISchemaUEIDictationEnablementPromptShown");

    __break(1u);
  }
}

void __getSISchemaDictationEndPointCancelClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationEndPointCancel");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaDictationEndPointCancelClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaDictationEndPointCancelClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 170, CFSTR("Unable to find class %s"), "SISchemaDictationEndPointCancel");

    __break(1u);
  }
}

void __getSISchemaDictationEndPointStopClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationEndPointStop");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaDictationEndPointStopClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaDictationEndPointStopClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 169, CFSTR("Unable to find class %s"), "SISchemaDictationEndPointStop");

    __break(1u);
  }
}

void __getSISchemaUEIDictationPartialResultUpdatedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationPartialResultUpdated");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD797B8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationPartialResultUpdatedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 182, CFSTR("Unable to find class %s"), "SISchemaUEIDictationPartialResultUpdated");

    __break(1u);
  }
}

void __getSISchemaUEIDictationInputModeSwitchContextClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationInputModeSwitchContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationInputModeSwitchContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                             + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationInputModeSwitchContextClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 184, CFSTR("Unable to find class %s"), "SISchemaUEIDictationInputModeSwitchContext");

    __break(1u);
  }
}

void __getSISchemaUEIDictationInputModeSwitchEndedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationInputModeSwitchEnded");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD797C0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationInputModeSwitchEndedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 186, CFSTR("Unable to find class %s"), "SISchemaUEIDictationInputModeSwitchEnded");

    __break(1u);
  }
}

void __getSISchemaUEILaunchEndedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEILaunchEnded");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEILaunchEndedClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEILaunchEndedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 179, CFSTR("Unable to find class %s"), "SISchemaUEILaunchEnded");

    __break(1u);
  }
}

void __getAFAggregatorClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AssistantServicesLibrary_1();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AFAggregator");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAFAggregatorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAFAggregatorClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 228, CFSTR("Unable to find class %s"), "AFAggregator");

    __break(1u);
  }
}

void __getSISchemaDictationContextClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaDictationContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaDictationContextClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 171, CFSTR("Unable to find class %s"), "SISchemaDictationContext");

    __break(1u);
  }
}

void __getSISchemaUUIDClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUUID");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUUIDClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUUIDClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 183, CFSTR("Unable to find class %s"), "SISchemaUUID");

    __break(1u);
  }
}

void __getSISchemaDictationAlternativesPresentClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationAlternativesPresent");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD797C8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaDictationAlternativesPresentClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 174, CFSTR("Unable to find class %s"), "SISchemaDictationAlternativesPresent");

    __break(1u);
  }
}

void __getSISchemaDictationTranscriptionMetadataClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationTranscriptionMetadata");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD797D0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaDictationTranscriptionMetadataClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 173, CFSTR("Unable to find class %s"), "SISchemaDictationTranscriptionMetadata");

    __break(1u);
  }
}

void __getSISchemaLocaleIdentifierClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaLocaleIdentifier");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaLocaleIdentifierClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaLocaleIdentifierClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 172, CFSTR("Unable to find class %s"), "SISchemaLocaleIdentifier");

    __break(1u);
  }
}

void __getSISchemaDictationAlternativesViewedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationAlternativesViewed");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaDictationAlternativesViewedClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaDictationAlternativesViewedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 175, CFSTR("Unable to find class %s"), "SISchemaDictationAlternativesViewed");

    __break(1u);
  }
}

void __getSISchemaDictationAlternativeSelectedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationAlternativeSelected");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaDictationAlternativeSelectedClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaDictationAlternativeSelectedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 176, CFSTR("Unable to find class %s"), "SISchemaDictationAlternativeSelected");

    __break(1u);
  }
}

void __getAFDictationDiscoverabilitySignalsStreamManagerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AssistantServicesLibrary_1();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AFDictationDiscoverabilitySignalsStreamManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAFDictationDiscoverabilitySignalsStreamManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                                 + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAFDictationDiscoverabilitySignalsStreamManagerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 231, CFSTR("Unable to find class %s"), "AFDictationDiscoverabilitySignalsStreamManager");

    __break(1u);
  }
}

void __getSISchemaUEIDictationInputModeSwitchStartedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationInputModeSwitchStarted");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationInputModeSwitchStartedClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                             + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationInputModeSwitchStartedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 185, CFSTR("Unable to find class %s"), "SISchemaUEIDictationInputModeSwitchStarted");

    __break(1u);
  }
}

Class __getRTIDocumentRequestClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD797E0)
    qword_1ECD797E0 = _sl_dlopen();
  if (!qword_1ECD797E0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *RemoteTextInputLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIDictationController.m"), 202, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("RTIDocumentRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getRTIDocumentRequestClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIDictationController.m"), 203, CFSTR("Unable to find class %s"), "RTIDocumentRequest");

LABEL_8:
    __break(1u);
  }
  qword_1ECD797D8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __getSISchemaUEIDictationVoiceCommandExecutedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationVoiceCommandExecuted");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationVoiceCommandExecutedClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                           + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationVoiceCommandExecutedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 189, CFSTR("Unable to find class %s"), "SISchemaUEIDictationVoiceCommandExecuted");

    __break(1u);
  }
}

void __getSISchemaUEIDictationVoiceCommandUndoTapActionClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationVoiceCommandUndoTapAction");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationVoiceCommandUndoTapActionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                                + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationVoiceCommandUndoTapActionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 190, CFSTR("Unable to find class %s"), "SISchemaUEIDictationVoiceCommandUndoTapAction");

    __break(1u);
  }
}

void __getSISchemaUEIDictationVoiceCommandDisambiguationActionClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationVoiceCommandDisambiguationAction");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationVoiceCommandDisambiguationActionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                                       + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationVoiceCommandDisambiguationActionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 191, CFSTR("Unable to find class %s"), "SISchemaUEIDictationVoiceCommandDisambiguationAction");

    __break(1u);
  }
}

void __getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationEuclidSpeechAlternativesSelected");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                                       + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 197, CFSTR("Unable to find class %s"), "SISchemaUEIDictationEuclidSpeechAlternativesSelected");

    __break(1u);
  }
}

void __getSISchemaUEIDictationEuclidSpeechAlternativesSelectedTier1Class_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationEuclidSpeechAlternativesSelectedTier1");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD797E8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationEuclidSpeechAlternativesSelectedTier1Class(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 198, CFSTR("Unable to find class %s"), "SISchemaUEIDictationEuclidSpeechAlternativesSelectedTier1");

    __break(1u);
  }
}

void __getSISchemaEuclidConfusionPairClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaEuclidConfusionPair");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD797F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaEuclidConfusionPairClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationController.m"), 199, CFSTR("Unable to find class %s"), "SISchemaEuclidConfusionPair");

    __break(1u);
  }
}

void sub_185E44258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E448A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_185E4509C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAFSpeechPhraseClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAFSpeechPhraseClass_softClass;
  v7 = getAFSpeechPhraseClass_softClass;
  if (!getAFSpeechPhraseClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAFSpeechPhraseClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getAFSpeechPhraseClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E45510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E455FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E45844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E4876C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void *SpeechLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!SpeechLibraryCore_frameworkLibrary)
    SpeechLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)SpeechLibraryCore_frameworkLibrary;
  if (!SpeechLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpeechLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIDictationUtilities.m"), 49, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id getSFSpeechAssetManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSFSpeechAssetManagerClass_softClass;
  v7 = getSFSpeechAssetManagerClass_softClass;
  if (!getSFSpeechAssetManagerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSFSpeechAssetManagerClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSFSpeechAssetManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E48978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E48AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E4927C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E4BEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_185E4C314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 200), 8);
  _Block_object_dispose((const void *)(v32 - 168), 8);
  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

void __getAFSpeechInterpretationClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AssistantServicesLibrary_2();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AFSpeechInterpretation");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAFSpeechInterpretationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAFSpeechInterpretationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationUtilities.m"), 55, CFSTR("Unable to find class %s"), "AFSpeechInterpretation");

    __break(1u);
  }
}

void __getAFSpeechPhraseClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AssistantServicesLibrary_2();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AFSpeechPhrase");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAFSpeechPhraseClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAFSpeechPhraseClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationUtilities.m"), 56, CFSTR("Unable to find class %s"), "AFSpeechPhrase");

    __break(1u);
  }
}

void __getSFSpeechAssetManagerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SpeechLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SFSpeechAssetManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSFSpeechAssetManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSFSpeechAssetManagerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationUtilities.m"), 51, CFSTR("Unable to find class %s"), "SFSpeechAssetManager");

    __break(1u);
  }
}

void __getSFEntitledAssetConfigClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SpeechLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SFEntitledAssetConfig");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD7EE90 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSFEntitledAssetConfigClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationUtilities.m"), 52, CFSTR("Unable to find class %s"), "SFEntitledAssetConfig");

    __break(1u);
  }
}

void __trimAttachmentCharactersAndWhiteSpaceInString_block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  __int16 v4;

  v4 = -4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCharacters:length:", &v4, 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3780], "whitespaceCharacterSet");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "addCharactersInString:", v0);
  v2 = objc_msgSend(v1, "copy");
  v3 = (void *)qword_1ECD7EE98;
  qword_1ECD7EE98 = v2;

}

id getSUICFlamesViewClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)_MergedGlobals_11_6;
  v7 = _MergedGlobals_11_6;
  if (!_MergedGlobals_11_6)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSUICFlamesViewClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSUICFlamesViewClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E4F880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSUICFlamesViewClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7AED0)
    qword_1ECD7AED0 = _sl_dlopen();
  if (!qword_1ECD7AED0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SiriUICoreLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIDictationView.m"), 62, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("SUICFlamesView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSUICFlamesViewClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIDictationView.m"), 63, CFSTR("Unable to find class %s"), "SUICFlamesView");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_11_6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185E56628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E57C6C(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_185E58704(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(v1);
  _Unwind_Resume(a1);
}

__n128 __copy_constructor_8_8_s0_s8_s16_s24_s32_s40_t48w32(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = *(id *)a2;
  *(_QWORD *)(a1 + 8) = *(id *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(id *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(id *)(a2 + 40);
  result = *(__n128 *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(__n128 *)(a1 + 64) = result;
  return result;
}

void sub_185E5891C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

void sub_185E58A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

id ImageWithOpacity(void *a1)
{
  id v1;
  CGFloat v2;
  CGFloat v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int *ContextStack;

  v1 = a1;
  objc_msgSend(v1, "size");
  v4 = 0;
  if (v2 > 0.0)
  {
    v5 = v3;
    if (v3 > 0.0)
    {
      v6 = v2;
      v7 = *MEMORY[0x1E0C9D538];
      v8 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      _UIGraphicsBeginImageContextWithOptions(0, 0, v2, v3, 0.0);
      objc_msgSend(v1, "drawInRect:blendMode:alpha:", 0, v7, v8, v6, v5, 0.4);
      _UIGraphicsGetImageFromCurrentImageContext(0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      ContextStack = (int *)GetContextStack(0);
      PopContextFromStack(ContextStack);
    }
  }

  return v4;
}

id getEMFEmojiTokenClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)_MergedGlobals_1126;
  v7 = _MergedGlobals_1126;
  if (!_MergedGlobals_1126)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiTokenClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFEmojiTokenClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E5BD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getEMFEmojiTokenClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7EF50)
    qword_1ECD7EF50 = _sl_dlopen();
  if (!qword_1ECD7EF50)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *EmojiFoundationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmoji.m"), 18, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("EMFEmojiToken");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiTokenClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKeyboardEmoji.m"), 19, CFSTR("Unable to find class %s"), "EMFEmojiToken");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1126 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185E5D9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryPrepopulated()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFEmojiCategoryPrepopulatedSymbolLoc_ptr;
  v8 = getEMFEmojiCategoryPrepopulatedSymbolLoc_ptr;
  if (!getEMFEmojiCategoryPrepopulatedSymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_0();
    v0 = (id *)dlsym(v1, "EMFEmojiCategoryPrepopulated");
    v6[3] = (uint64_t)v0;
    getEMFEmojiCategoryPrepopulatedSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFEmojiCategoryPrepopulated(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiCategory.m"), 42, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E5DAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryPeople()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFEmojiCategoryPeopleSymbolLoc_ptr;
  v8 = getEMFEmojiCategoryPeopleSymbolLoc_ptr;
  if (!getEMFEmojiCategoryPeopleSymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_0();
    v0 = (id *)dlsym(v1, "EMFEmojiCategoryPeople");
    v6[3] = (uint64_t)v0;
    getEMFEmojiCategoryPeopleSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFEmojiCategoryPeople(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiCategory.m"), 34, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E5DB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryNature()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFEmojiCategoryNatureSymbolLoc_ptr;
  v8 = getEMFEmojiCategoryNatureSymbolLoc_ptr;
  if (!getEMFEmojiCategoryNatureSymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_0();
    v0 = (id *)dlsym(v1, "EMFEmojiCategoryNature");
    v6[3] = (uint64_t)v0;
    getEMFEmojiCategoryNatureSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFEmojiCategoryNature(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiCategory.m"), 35, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E5DC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryFoodAndDrink()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFEmojiCategoryFoodAndDrinkSymbolLoc_ptr;
  v8 = getEMFEmojiCategoryFoodAndDrinkSymbolLoc_ptr;
  if (!getEMFEmojiCategoryFoodAndDrinkSymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_0();
    v0 = (id *)dlsym(v1, "EMFEmojiCategoryFoodAndDrink");
    v6[3] = (uint64_t)v0;
    getEMFEmojiCategoryFoodAndDrinkSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFEmojiCategoryFoodAndDrink(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiCategory.m"), 36, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E5DD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryActivity()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFEmojiCategoryActivitySymbolLoc_ptr;
  v8 = getEMFEmojiCategoryActivitySymbolLoc_ptr;
  if (!getEMFEmojiCategoryActivitySymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_0();
    v0 = (id *)dlsym(v1, "EMFEmojiCategoryActivity");
    v6[3] = (uint64_t)v0;
    getEMFEmojiCategoryActivitySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFEmojiCategoryActivity(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiCategory.m"), 37, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E5DE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryTravelAndPlaces()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFEmojiCategoryTravelAndPlacesSymbolLoc_ptr;
  v8 = getEMFEmojiCategoryTravelAndPlacesSymbolLoc_ptr;
  if (!getEMFEmojiCategoryTravelAndPlacesSymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_0();
    v0 = (id *)dlsym(v1, "EMFEmojiCategoryTravelAndPlaces");
    v6[3] = (uint64_t)v0;
    getEMFEmojiCategoryTravelAndPlacesSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFEmojiCategoryTravelAndPlaces(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiCategory.m"), 38, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E5DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryObjects()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFEmojiCategoryObjectsSymbolLoc_ptr;
  v8 = getEMFEmojiCategoryObjectsSymbolLoc_ptr;
  if (!getEMFEmojiCategoryObjectsSymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_0();
    v0 = (id *)dlsym(v1, "EMFEmojiCategoryObjects");
    v6[3] = (uint64_t)v0;
    getEMFEmojiCategoryObjectsSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFEmojiCategoryObjects(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiCategory.m"), 39, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E5E074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategorySymbols()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFEmojiCategorySymbolsSymbolLoc_ptr;
  v8 = getEMFEmojiCategorySymbolsSymbolLoc_ptr;
  if (!getEMFEmojiCategorySymbolsSymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_0();
    v0 = (id *)dlsym(v1, "EMFEmojiCategorySymbols");
    v6[3] = (uint64_t)v0;
    getEMFEmojiCategorySymbolsSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFEmojiCategorySymbols(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiCategory.m"), 40, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E5E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryFlags()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFEmojiCategoryFlagsSymbolLoc_ptr;
  v8 = getEMFEmojiCategoryFlagsSymbolLoc_ptr;
  if (!getEMFEmojiCategoryFlagsSymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_0();
    v0 = (id *)dlsym(v1, "EMFEmojiCategoryFlags");
    v6[3] = (uint64_t)v0;
    getEMFEmojiCategoryFlagsSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFEmojiCategoryFlags(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiCategory.m"), 41, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185E5E264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFEmojiCategoryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEMFEmojiCategoryClass_softClass;
  v7 = getEMFEmojiCategoryClass_softClass;
  if (!getEMFEmojiCategoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiCategoryClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFEmojiCategoryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E5E73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *EmojiFoundationLibrary_0()
{
  void *v0;
  void *v2;
  void *v3;

  if (!EmojiFoundationLibraryCore_frameworkLibrary_0)
    EmojiFoundationLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  v0 = (void *)EmojiFoundationLibraryCore_frameworkLibrary_0;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *EmojiFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIKeyboardEmojiCategory.m"), 31, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getEMFEmojiCategoryClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiCategory");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiCategoryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiCategoryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiCategory.m"), 32, CFSTR("Unable to find class %s"), "EMFEmojiCategory");

    __break(1u);
  }
}

void sub_185E5F694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFStringUtilitiesClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEMFStringUtilitiesClass_softClass;
  v7 = getEMFStringUtilitiesClass_softClass;
  if (!getEMFStringUtilitiesClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFStringUtilitiesClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFStringUtilitiesClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E622E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFEmojiCategoryClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEMFEmojiCategoryClass_softClass_0;
  v7 = getEMFEmojiCategoryClass_softClass_0;
  if (!getEMFEmojiCategoryClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiCategoryClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFEmojiCategoryClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E62474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E63798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_185E685F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E68770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E68984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEMFStringUtilitiesClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_1();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFStringUtilities");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFStringUtilitiesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFStringUtilitiesClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiCollectionInputView.m"), 61, CFSTR("Unable to find class %s"), "EMFStringUtilities");

    __break(1u);
  }
}

void EmojiFoundationLibrary_1()
{
  void *v0;
  void *v1;
  void *v2;

  if (!EmojiFoundationLibraryCore_frameworkLibrary_1)
    EmojiFoundationLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  if (!EmojiFoundationLibraryCore_frameworkLibrary_1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *EmojiFoundationLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIKeyboardEmojiCollectionInputView.m"), 59, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getEMFEmojiCategoryClass_block_invoke_0(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_1();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiCategory");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiCategoryClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiCategoryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiCollectionInputView.m"), 60, CFSTR("Unable to find class %s"), "EMFEmojiCategory");

    __break(1u);
  }
}

void __getEMFEmojiTokenClass_block_invoke_1(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_1();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiToken");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiTokenClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiTokenClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiCollectionInputView.m"), 62, CFSTR("Unable to find class %s"), "EMFEmojiToken");

    __break(1u);
  }
}

void _UICoreMaterialUpdateBlurEffectDescriptorForMTMaterial(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[3];
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  v9 = a3;
  v10 = a1;
  v11 = objc_msgSend(v9, "reducedTransperancy");
  if (v7)
  {
    v12 = *MEMORY[0x1E0D16C18];
    v19[0] = MEMORY[0x1E0C9AAB0];
    v13 = *MEMORY[0x1E0D16C20];
    v18[0] = v12;
    v18[1] = v13;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v18[2] = *MEMORY[0x1E0D16C10];
    v19[1] = v14;
    v19[2] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    MTMaterialCreateDictionaryRepresentation();
    v16 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v9, "traitCollection");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    _lookupBlurEffectDescription(v10, v11, objc_msgSend(v15, "userInterfaceLevel"));
    v16 = objc_claimAutoreleasedReturnValue();
  }
  v17 = (void *)v16;

  _UICoreMaterialUpdateBlurEffectDescriptorInternal(v17, v9, v8);
}

id _UICoreMaterialSanitizeMaterial(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  v2 = (void *)_UICoreMaterialSanitizeMaterial_filter;
  if (!_UICoreMaterialSanitizeMaterial_filter)
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", *MEMORY[0x1E0D16BC0], *MEMORY[0x1E0D16BC8], *MEMORY[0x1E0D16B60], *MEMORY[0x1E0D16B68], *MEMORY[0x1E0D16BD0], *MEMORY[0x1E0D16B78], *MEMORY[0x1E0D16B70], *MEMORY[0x1E0D16BB8], *MEMORY[0x1E0D16BA8], *MEMORY[0x1E0D16B88], *MEMORY[0x1E0D16B98], *MEMORY[0x1E0D16BB0], *MEMORY[0x1E0D16BA0], *MEMORY[0x1E0D16B80], *MEMORY[0x1E0D16B90], 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)_UICoreMaterialSanitizeMaterial_filter;
    _UICoreMaterialSanitizeMaterial_filter = v3;

    v2 = (void *)_UICoreMaterialSanitizeMaterial_filter;
  }
  objc_msgSend(v2, "member:", v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5)
    v5 = v1;
  v7 = v5;

  return v7;
}

void _UICoreMaterialUpdateVibrancyEffectDescriptorForMTMaterial(void *a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;

  v7 = a4;
  v8 = a1;
  _lookupVibrancyEffectDescription(v8, a2, objc_msgSend(a3, "reducedTransperancy"));
  v9 = (id)objc_claimAutoreleasedReturnValue();

  _UICoreMaterialUpdateVibrancyEffectDescriptorInternal(v9, v7);
}

id getEMFEmojiPreferencesClientClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEMFEmojiPreferencesClientClass_softClass;
  v7 = getEMFEmojiPreferencesClientClass_softClass;
  if (!getEMFEmojiPreferencesClientClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiPreferencesClientClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFEmojiPreferencesClientClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E7020C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E7086C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFEmojiTokenClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEMFEmojiTokenClass_softClass_0;
  v7 = getEMFEmojiTokenClass_softClass_0;
  if (!getEMFEmojiTokenClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiTokenClass_block_invoke_2;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFEmojiTokenClass_block_invoke_2((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E70E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFEmojiLocaleDataClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEMFEmojiLocaleDataClass_softClass;
  v7 = getEMFEmojiLocaleDataClass_softClass;
  if (!getEMFEmojiLocaleDataClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiLocaleDataClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFEmojiLocaleDataClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185E7130C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEMFEmojiPreferencesClientClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_2();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiPreferencesClient");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiPreferencesClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiPreferencesClientClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiPreferences.m"), 31, CFSTR("Unable to find class %s"), "EMFEmojiPreferencesClient");

    __break(1u);
  }
}

void EmojiFoundationLibrary_2()
{
  void *v0;
  void *v1;
  void *v2;

  if (!EmojiFoundationLibraryCore_frameworkLibrary_2)
    EmojiFoundationLibraryCore_frameworkLibrary_2 = _sl_dlopen();
  if (!EmojiFoundationLibraryCore_frameworkLibrary_2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *EmojiFoundationLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIKeyboardEmojiPreferences.m"), 27, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getEMFEmojiPreferencesClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_2();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiPreferences");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiPreferencesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiPreferencesClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiPreferences.m"), 30, CFSTR("Unable to find class %s"), "EMFEmojiPreferences");

    __break(1u);
  }
}

uint64_t __deviceSupportsARKit_block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  _MergedGlobals_1129 = result;
  return result;
}

void __getEMFEmojiTokenClass_block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_2();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiToken");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiTokenClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiTokenClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiPreferences.m"), 28, CFSTR("Unable to find class %s"), "EMFEmojiToken");

    __break(1u);
  }
}

void __getEMFEmojiLocaleDataClass_block_invoke_0(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_2();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiLocaleData");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiLocaleDataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiLocaleDataClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiPreferences.m"), 29, CFSTR("Unable to find class %s"), "EMFEmojiLocaleData");

    __break(1u);
  }
}

void sub_185E73E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t UIInputAssistantViewIsHidden()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "systemInputAssistantViewController");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "isInputAssistantItemEmpty"))
  {
    objc_msgSend(v0, "inputViews");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isCustomInputView") ^ 1;

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_185E7E264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIContextMenuItemPrimaryColor(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  _UIContextMenuGetPlatformMetrics(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIColor labelColor](UIColor, "labelColor");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "itemPrimaryColorProvider");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, a2);
    v7 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v7;
  }

  return v4;
}

void sub_185E81A18(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185E81C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E823CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E84C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E85D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E85EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E87E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_185E8BC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E8BD50(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

Class __getTUIKeyboardPathEffectViewClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7A288)
    qword_1ECD7A288 = _sl_dlopen();
  if (!qword_1ECD7A288)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TextInputUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIInputWindowController.m"), 74, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("TUIKeyboardPathEffectView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIKeyboardPathEffectViewClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIInputWindowController.m"), 75, CFSTR("Unable to find class %s"), "TUIKeyboardPathEffectView");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7A280 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = qword_1ECD7A2A8;
  v6 = qword_1ECD7A2A8;
  if (!qword_1ECD7A2A8)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc_block_invoke;
    v2[3] = &unk_1E16B14C0;
    v2[4] = &v3;
    __getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc_block_invoke(v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_185E8C784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1ECD7A2A0)
    qword_1ECD7A2A0 = _sl_dlopen();
  v2 = (void *)qword_1ECD7A2A0;
  if (!qword_1ECD7A2A0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIInputWindowController.m"), 82, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "SBSAcquireFocusPreventingFullScreenPresentationAssertion");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  qword_1ECD7A2A8 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void sub_185E8D628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E912B0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

Class __getTUIInputAssistantHostViewClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7EFC8)
    qword_1ECD7EFC8 = _sl_dlopen();
  if (!qword_1ECD7EFC8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TextInputUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIInputWindowControllerHosting.m"), 43, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("TUIInputAssistantHostView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIInputAssistantHostViewClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIInputWindowControllerHosting.m"), 44, CFSTR("Unable to find class %s"), "TUIInputAssistantHostView");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id TIGetKeyboardOOPUsingEndInputSessionCompletionValue()
{
  void *v0;
  void *v1;

  if (TIGetKeyboardOOPUsingEndInputSessionCompletionValue_onceToken != -1)
    dispatch_once(&TIGetKeyboardOOPUsingEndInputSessionCompletionValue_onceToken, &__block_literal_global_1371);
  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForPreferenceKey:", CFSTR("KeyboardOOPUsingEndInputSessionCompletion"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_185E9B7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIKeyboardSetSplit(uint64_t a1)
{
  id v2;

  +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setSplit:animated:", a1, 1);

}

void UIKeyboardSetUndocked(int a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  id v5;

  if (a1)
  {
    if (+[UIKeyboardImpl isFloating](UIKeyboardImpl, "isFloating"))
      +[UIKeyboardImpl floatingPersistentOffset](UIKeyboardImpl, "floatingPersistentOffset");
    else
      +[UIPeripheralHost defaultUndockedOffset](UIPeripheralHost, "defaultUndockedOffset");
    v3 = v1;
    v4 = v2;
  }
  else
  {
    v3 = *MEMORY[0x1E0C9D538];
    v4 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  }
  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setUndockedWithOffset:animated:", 1, v3, v4);

}

void UIKeyboardSetSplitAndUndocked(uint64_t a1)
{
  id v2;

  +[UIKeyboardSplitControlMenu sharedInstance](UIKeyboardSplitControlMenu, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setSplitAndUndocked:", a1);

}

uint64_t UIKeyboardSetLoadsAddressBook(uint64_t result)
{
  loadsAddressBook = result;
  return result;
}

uint64_t UIKeyboardLoadsAddressBook()
{
  return loadsAddressBook;
}

void UIKeyboardEnableAutomaticAppearanceForCanvas(void *a1)
{
  id v1;

  objc_msgSend(a1, "keyboardSceneDelegate");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAutomaticAppearanceEnabled:", 1);

}

void UIKeyboardEnableAutomaticAppearanceForWindowScene(void *a1)
{
  id v1;

  objc_msgSend(a1, "keyboardSceneDelegate");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAutomaticAppearanceEnabled:", 1);

}

void UIKeyboardDisableAutomaticAppearanceForCanvas(void *a1)
{
  id v1;

  objc_msgSend(a1, "keyboardSceneDelegate");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAutomaticAppearanceEnabled:", 0);

}

void UIKeyboardDisableAutomaticAppearanceForWindowScene(void *a1)
{
  id v1;

  objc_msgSend(a1, "keyboardSceneDelegate");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAutomaticAppearanceEnabled:", 0);

}

uint64_t UIKeyboardEnableAutomaticAppearance()
{
  return +[UIKeyboardSceneDelegate performOnControllers:](UIKeyboardSceneDelegate, "performOnControllers:", &__block_literal_global_1285);
}

uint64_t UIKeyboardDisableAutomaticAppearance()
{
  return +[UIKeyboardSceneDelegate performOnControllers:](UIKeyboardSceneDelegate, "performOnControllers:", &__block_literal_global_1286);
}

void UIKeyboardOrderInAutomatic()
{
  id v0;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "orderInAutomatic");

}

void UIKeyboardOrderInAutomaticFromDirectionWithDuration(uint64_t a1, double a2)
{
  id v4;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "orderInAutomaticFromDirection:withDuration:", a1, a2);

}

void UIKeyboardOrderOutAutomatic()
{
  id v0;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "orderOutAutomatic");

}

void UIKeyboardOrderOutAutomaticToDirectionWithDuration(uint64_t a1, double a2)
{
  id v4;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "orderOutAutomaticToDirection:withDuration:", a1, a2);

}

void UIKeyboardOrderInAutomaticSkippingAnimation()
{
  id v0;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "orderInAutomaticSkippingAnimation");

}

void UIKeyboardOrderOutAutomaticSkippingAnimation()
{
  id v0;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "orderOutAutomaticSkippingAnimation");

}

uint64_t UIKeyboardAutomaticIsOffScreen()
{
  void *v0;
  uint64_t v1;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isOffScreen");

  return v1;
}

void UIKeyboardPrepareForRotationToOrientation(void *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = a1;
  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "prepareForRotationOfKeyboard:toOrientation:", v3, a2);

}

void UIKeyboardRotateToOrientation(void *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = a1;
  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "rotateKeyboard:toOrientation:", v3, a2);

}

void UIKeyboardFinishRotation(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "finishRotationOfKeyboard:", v1);

}

void UIKeyboardAutomaticPrepareForRotationToOrientation(uint64_t a1)
{
  id v2;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "prepareForRotationToOrientation:", a1);

}

void UIKeyboardAutomaticRotateToOrientation(uint64_t a1)
{
  id v2;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "rotateToOrientation:", a1);

}

void UIKeyboardAutomaticFinishRotation()
{
  id v0;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "finishRotation");

}

uint64_t UIKeyboardIsAutomaticAppearanceEnabled()
{
  void *v0;
  uint64_t v1;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "automaticAppearanceEnabled");

  return v1;
}

void UIKeyboardForceOrderInAutomatic()
{
  id v0;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "forceOrderInAutomatic");

}

void UIKeyboardForceOrderOutAutomatic()
{
  id v0;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "forceOrderOutAutomatic");

}

void UIKeyboardForceOrderInAutomaticAnimated(uint64_t a1)
{
  id v2;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "forceOrderInAutomaticAnimated:", a1);

}

void UIKeyboardForceOrderOutAutomaticAnimated(uint64_t a1)
{
  id v2;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "forceOrderOutAutomaticAnimated:", a1);

}

void UIKeyboardForceOrderInAutomaticFromDirectionWithDuration(uint64_t a1, double a2)
{
  id v4;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "forceOrderInAutomaticFromDirection:withDuration:", a1, a2);

}

void UIKeyboardForceOrderOutAutomaticToDirectionWithDuration(uint64_t a1, double a2)
{
  id v4;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "forceOrderOutAutomaticToDirection:withDuration:", a1, a2);

}

id _UIHardwareKeyboardLog()
{
  if (qword_1ECD7C7E0 != -1)
    dispatch_once(&qword_1ECD7C7E0, &__block_literal_global_1362);
  return (id)qword_1ECD7C7D8;
}

Class __getTUIKeyboardPathEffectViewClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7C7F8)
    qword_1ECD7C7F8 = _sl_dlopen();
  if (!qword_1ECD7C7F8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TextInputUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboard.m"), 95, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("TUIKeyboardPathEffectView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIKeyboardPathEffectViewClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKeyboard.m"), 96, CFSTR("Unable to find class %s"), "TUIKeyboardPathEffectView");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7C7F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id _dictionaryFromUISceneOpenURLOptions(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "sourceApplication");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v3, CFSTR("UIApplicationOpenURLOptionsSourceApplicationKey"));

  objc_msgSend(v1, "annotation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v4, CFSTR("UIApplicationOpenURLOptionsAnnotationKey"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v1, "openInPlace"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v5, CFSTR("UIApplicationOpenURLOptionsOpenInPlaceKey"));

  objc_msgSend(v1, "_sourceProcessHandle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v1, "_sourceProcessHandle");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v7, CFSTR("_UIApplicationOpenURLOptionsSourceProcessHandleKey"));

  }
  if (objc_msgSend(v1, "_contentOwner"))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v1, "_contentOwner"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v8, CFSTR("_UIApplicationOpenURLOptionsManagedContentKey"));

  }
  v9 = (void *)objc_msgSend(v2, "copy");

  return v9;
}

id _filteredCandidates(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___filteredCandidates_block_invoke;
    v8[3] = &unk_1E16D6530;
    v9 = v4;
    objc_msgSend(v3, "indexesOfObjectsPassingTest:", v8);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectsAtIndexes:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v6;
}

unint64_t ___smartReplyPredictionsFromList_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  unint64_t v3;

  v2 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v3 = ((unint64_t)objc_msgSend(v2, "candidateProperty") >> 1) & 1;
  else
    v3 = 0;

  return v3;
}

uint64_t ___filteredCandidates_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

BOOL ___listByRemovingSmartReplyPredictions_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  _BOOL8 v3;

  v2 = a2;
  v3 = (objc_opt_respondsToSelector() & 1) == 0 || (objc_msgSend(v2, "candidateProperty") & 2) == 0;

  return v3;
}

uint64_t _UITouchAuthenticationIsEnabledForCurrentProcess()
{
  if (qword_1ECD7EFD8 != -1)
    dispatch_once(&qword_1ECD7EFD8, &__block_literal_global_347);
  return _MergedGlobals_1132;
}

void sub_185E9F818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_185EA03F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __activateActionListItem_block_invoke(uint64_t a1, uint64_t a2)
{
  char *v3;
  double *v4;

  if (off_1ECD75C00)
  {
    if (*((_DWORD *)off_1ECD75C00 + 160) == 1)
      v3 = (char *)off_1ECD75C00 + 648;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = -[UIUpdateInfo initWithUpdateParameters:]([UIUpdateInfo alloc], (uint64_t)v3);
  (*(void (**)(void))(*(_QWORD *)(a2 + 8) + 16))();

}

uint64_t __highFidelityDevice_block_invoke()
{
  uint64_t result;

  result = MGIsDeviceOneOfType();
  if ((_DWORD)result)
    _MergedGlobals_1133 = 1;
  return result;
}

void sub_185EA3FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185EA503C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v17 - 56));
  _Unwind_Resume(a1);
}

void sub_185EA57A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185EA5980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185EA7570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_185EA920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185EB4BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  uint64_t v16;

  _Block_object_dispose((const void *)(v16 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_185EB50F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAFUIPanelClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD78468)
    qword_1ECD78468 = _sl_dlopen();
  result = objc_getClass("AFUIPanel");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD78460 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getKFAViewControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD78480)
    qword_1ECD78480 = _sl_dlopen();
  if (!qword_1ECD78480)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *KeyboardFeedbackAssistantLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardImpl.m"), 314, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("KFAViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKFAViewControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKeyboardImpl.m"), 315, CFSTR("Unable to find class %s"), "KFAViewController");

LABEL_8:
    __break(1u);
  }
  qword_1ECD78478 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSBSTagTouchForTypingMenuSymbolLoc_block_invoke_0(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1ECD78490)
    qword_1ECD78490 = _sl_dlopen();
  v2 = (void *)qword_1ECD78490;
  if (!qword_1ECD78490)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIKeyboardImpl.m"), 291, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "SBSTagTouchForTypingMenu");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  off_1ECD78488 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void sub_185EBAE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EBB074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EBB7C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_185EBD690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_185EBD8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EBDA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EC04E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185EC09D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EC0DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_185EC12D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  id *v33;
  uint64_t v34;

  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v34 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_185EC1B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location,char a32)
{
  id *v32;
  uint64_t v33;

  objc_destroyWeak(v32);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__198(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_185EC20B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_185EC23B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185EC299C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  id *v33;
  uint64_t v34;

  objc_destroyWeak(v33);
  _Block_object_dispose(&a33, 8);
  objc_destroyWeak((id *)(v34 - 176));
  _Block_object_dispose((const void *)(v34 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_185EC2B58(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185EC3000(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_185EC3178(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_185EC3928(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_185EC3F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  id *v38;
  uint64_t v39;

  objc_destroyWeak(v38);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v39 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_185EC4344(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185EC4C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EC52F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_185EC5554(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_185EC69F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UIKeyboardRomanAccentVariants(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;

  v5 = (void *)MEMORY[0x1E0CB3940];
  v6 = a2;
  objc_msgSend(v5, "stringWithFormat:", CFSTR("Roman-Accent-%@"), a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardVariants(v7, v6, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id UIKeyboardVariants(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t (**v20)(void *, uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  void (**v29)(void *, void *, _QWORD);
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[4];
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  void (*v72)(uint64_t);
  id v73;
  _QWORD aBlock[4];
  id v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[128];
  _BYTE v82[128];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v55 = a1;
  v5 = a2;
  objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR(" "));
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  if (!UIKeyboardVariants___cache)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v7 = (void *)UIKeyboardVariants___cache;
    UIKeyboardVariants___cache = (uint64_t)v6;

  }
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "appendString:", v5);
  objc_msgSend(v8, "appendString:", CFSTR(":"));
  objc_msgSend(v8, "appendString:", v55);
  objc_msgSend(v8, "appendFormat:", CFSTR(":%d"), a3);
  objc_msgSend(v8, "appendFormat:", CFSTR(":%ld"), UIKeyboardGetCurrentIdiom());
  if ((a3 & 8) != 0)
  {
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v9 = (id)UIKeyboardActiveInputModes;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v77, v82, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v78;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v78 != v11)
            objc_enumerationMutation(v9);
          objc_msgSend(v8, "appendString:", CFSTR(":"));
          TIInputModeGetLanguageWithRegion();
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "appendString:", v13);

        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v77, v82, 16);
      }
      while (v10);
    }

  }
  else
  {
    v9 = 0;
  }
  objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLocale");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0C997B0]);
  v54 = (void *)objc_claimAutoreleasedReturnValue();

  if (v54)
  {
    objc_msgSend(v8, "appendString:", CFSTR(":"));
    objc_msgSend(v8, "appendString:", v54);
  }
  objc_msgSend((id)UIKeyboardVariants___cache, "objectForKey:", v8);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    v16 = v15;
  }
  else
  {
    if (objc_msgSend(v55, "hasPrefix:", CFSTR("Roman-Accent-")))
    {
      v17 = objc_msgSend(v55, "length");
      v51 = objc_msgSend(CFSTR("Roman-Accent-"), "length");
      v48 = v17 - objc_msgSend(CFSTR("Roman-Accent-"), "length");
      v18 = objc_msgSend(v55, "rangeOfString:options:range:", CFSTR("-"), 2, v51);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __UIKeyboardVariants_block_invoke;
      aBlock[3] = &unk_1E16D6F20;
      v76 = v17;
      v19 = v55;
      v75 = v19;
      v20 = (uint64_t (**)(void *, uint64_t))_Block_copy(aBlock);
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
      {
LABEL_21:
        v21 = 0;
        v22 = v48;
      }
      else
      {
        while ((v20[2](v20, v18) & 1) == 0)
        {
          v18 = objc_msgSend(v19, "rangeOfString:options:range:", CFSTR("-"), 2, v18 + 1, v17 - (v18 + 1));
          if (v18 == 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_21;
        }
        objc_msgSend(v19, "substringToIndex:", v18);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = v18 - v51;
      }
      objc_msgSend(v19, "substringWithRange:", v51, v22);
      v23 = objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v21 = 0;
      v23 = 0;
    }
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = (void *)v23;
    v68 = 0;
    v69 = &v68;
    v70 = 0x3032000000;
    v71 = __Block_byref_object_copy__132;
    v72 = __Block_byref_object_dispose__132;
    v73 = 0;
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 3221225472;
    v60[2] = __UIKeyboardVariants_block_invoke_2;
    v60[3] = &unk_1E16D6F48;
    v61 = v55;
    v26 = v21;
    v62 = v26;
    v67 = (a3 & 0x20) != 0;
    v63 = v24;
    v64 = v53;
    v52 = v25;
    v65 = v52;
    v66 = &v68;
    v27 = v63;
    v28 = v49;
    v29 = (void (**)(void *, void *, _QWORD))_Block_copy(v60);
    if ((a3 & 1) != 0)
    {
      TIInputModeGetBaseLanguage();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_%@"), v30, v54);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v29[2](v29, v31, 0);

    }
    if ((a3 & 2) != 0)
      v29[2](v29, v5, 1);
    if ((a3 & 4) != 0)
      v29[2](v29, CFSTR("default"), 0);
    if ((a3 & 8) != 0)
    {
      v45 = v27;
      v46 = v26;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v32 = v9;
      v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v56, v81, 16);
      if (v33)
      {
        v34 = *(_QWORD *)v57;
        do
        {
          for (j = 0; j != v33; ++j)
          {
            if (*(_QWORD *)v57 != v34)
              objc_enumerationMutation(v32);
            v36 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * j);
            if ((UIKeyboardInputModesEqual(v36, v5) & 1) == 0)
              v29[2](v29, v36, 0);
          }
          v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v56, v81, 16);
        }
        while (v33);
      }

      v28 = v49;
      v27 = v45;
      v26 = v46;
    }
    if (v28)
    {
      v37 = objc_msgSend(v27, "indexOfObject:", v28);
      if (v37 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if ((a3 & 0x10) != 0)
        {
          objc_msgSend(v27, "removeObjectsInRange:", v37, objc_msgSend(v27, "count") - v37);
          objc_msgSend(v52, "removeObjectsInRange:", v37, objc_msgSend(v27, "count") - v37);
        }
        else
        {
          objc_msgSend(v27, "objectAtIndex:", v37);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "removeObjectAtIndex:", v37);
          objc_msgSend(v27, "insertObject:atIndex:", v50, 0);
          objc_msgSend(v52, "objectAtIndex:", v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "removeObjectAtIndex:", v37);
          objc_msgSend(v52, "insertObject:atIndex:", v38, 0);

        }
      }
    }
    if (!objc_msgSend((id)v69[5], "caseInsensitiveCompare:", CFSTR("left"))
      || !objc_msgSend((id)v69[5], "caseInsensitiveCompare:", CFSTR("strictly-left"))
      || !objc_msgSend((id)v69[5], "caseInsensitiveCompare:", CFSTR("fixed-left")))
    {
      objc_msgSend(v27, "_kb_reverse");
      objc_msgSend(v52, "_kb_reverse");
    }
    v39 = objc_msgSend(v27, "indexOfObject:", CFSTR("Đ"));
    v40 = objc_msgSend(v27, "indexOfObject:", CFSTR("Ð"));
    v41 = v47;
    if (v39 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v42 = v40;
      if (v40 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(v27, "replaceObjectAtIndex:withObject:", v39, CFSTR("đ"));
        objc_msgSend(v27, "replaceObjectAtIndex:withObject:", v42, CFSTR("ð"));
      }
    }
    objc_msgSend(v47, "setObject:forKey:", v27, CFSTR("Keycaps"));
    objc_msgSend(v47, "setObject:forKey:", v52, CFSTR("Strings"));
    v43 = v69[5];
    if (!v43)
    {
      v69[5] = (uint64_t)&stru_1E16EDF20;
      v43 = v69[5];
      v41 = v47;
    }
    objc_msgSend(v41, "setObject:forKey:", v43, CFSTR("Direction"));
    if (v41)
      objc_msgSend((id)UIKeyboardVariants___cache, "setObject:forKey:", v41, v8);
    v16 = v41;

    _Block_object_dispose(&v68, 8);
  }

  return v16;
}

void sub_185EC7874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

id _insertAdditionalPopup(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;

  v5 = a1;
  v6 = a2;
  if (v6)
  {
    objc_msgSend(v5, "objectForKey:", CFSTR("Keycaps"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v7, "mutableCopy");

    objc_msgSend(v5, "objectForKey:", CFSTR("Strings"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)objc_msgSend(v9, "mutableCopy");

    if (objc_msgSend(v8, "containsObject:", v6))
    {
      v11 = v5;
    }
    else
    {
      if (a3)
      {
        objc_msgSend(v8, "insertObject:atIndex:", v6, 0);
        objc_msgSend(v10, "insertObject:atIndex:", v6, 0);
      }
      else
      {
        objc_msgSend(v8, "addObject:", v6);
        objc_msgSend(v10, "addObject:", v6);
      }
      v12 = (void *)MEMORY[0x1E0C99E08];
      objc_msgSend(v5, "objectForKey:", CFSTR("Direction"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "dictionaryWithObjectsAndKeys:", v13, CFSTR("Direction"), v8, CFSTR("Keycaps"), v10, CFSTR("Strings"), 0);
      v11 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v11 = v5;
  }

  return v11;
}

id UIKeyboardTopLevelDomainVariants(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;

  v3 = a1;
  if (!objc_msgSend(v3, "length"))
  {
    UIKeyboardGetCurrentInputMode();
    v4 = objc_claimAutoreleasedReturnValue();

    v3 = (id)v4;
  }
  UIKeyboardVariants(CFSTR("UI-TopLevelDomain"), v3, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if ((a2 & 8) != 0)
  {
    UIKeyboardGetDomainForCurrentLocale();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    _insertAdditionalPopup(v6, v8, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = v5;
  }

  return v7;
}

id UIKeyboardCurrencyVariants(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a2;
  objc_msgSend(v3, "stringWithFormat:", CFSTR("UI-Currency-%@"), a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardVariants(v5, v4, 15);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  UIKeyboardGetCurrentInputMode();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardLocalizedString(CFSTR("UI-PrimaryCurrencySign"), v7, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  _insertAdditionalPopup(v6, v8, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

__CFString *UIKeyboardLocalizedReturnKeyNameForLocale(uint64_t a1, void *a2)
{
  return UIKeyboardLocalizedReturnKeyNameForLocaleIncludingDefaults(a1, a2, 0);
}

__CFString *UIKeyboardLocalizedReturnKeyNameForLocaleIncludingDefaults(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;

  v5 = a2;
  objc_msgSend(v5, "languageCode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "scriptCode");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "variantCode");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  KeyboardReturnKeyStringConstantFromReturnKeyType(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    LookupInternationalObject(v9, v6, v7, v8, CFSTR("return"), a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v12 = v11;
    else
      v12 = 0;
    v13 = v12;

  }
  else
  {
    v13 = CFSTR("return");
  }

  return v13;
}

void sub_185EC862C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *__getSimulateCrashSymbolLoc_block_invoke_1(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1ECD7F018)
    qword_1ECD7F018 = _sl_dlopen();
  v2 = (void *)qword_1ECD7F018;
  if (!qword_1ECD7F018)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CrashReporterSupportLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIKeyboardTaskQueue.m"), 31, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "SimulateCrash");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  _MergedGlobals_1136 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void sub_185ECB76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185ECEF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185ED2500(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_185ED3A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t UIAssistantViewAllowsMinimization()
{
  void *v0;
  void *v1;
  uint64_t v2;

  +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "systemInputAssistantViewController");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  v2 = objc_msgSend(v1, "supportsCompactStyle");
  return v2;
}

uint64_t UIAssistantViewVisualStateForPointInRect(char a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  int v14;
  CGFloat v15;
  CGFloat v16;
  double MidX;
  double MaxY;
  double v19;
  double v20;
  double v21;
  double MinX;
  double v23;
  double MaxX;
  CGPoint v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  if ((a1 & 1) != 0)
    return 3;
  v14 = UIAssistantViewAllowsMinimization();
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  v15 = CGRectGetWidth(v26) * 0.25;
  v27.origin.x = a2;
  v27.origin.y = a3;
  v27.size.width = a4;
  v27.size.height = a5;
  v16 = CGRectGetHeight(v27) * 0.25;
  v28.origin.x = a2;
  v28.origin.y = a3;
  v28.size.width = a4;
  v28.size.height = a5;
  v29 = CGRectInset(v28, v15, v16);
  if (v14)
  {
    v25.x = a6;
    v25.y = a7;
    if (CGRectContainsPoint(v29, v25))
      return 1;
  }
  v30.origin.x = a2;
  v30.origin.y = a3;
  v30.size.width = a4;
  v30.size.height = a5;
  MidX = CGRectGetMidX(v30);
  v31.origin.x = a2;
  v31.origin.y = a3;
  v31.size.width = a4;
  v31.size.height = a5;
  MaxY = CGRectGetMaxY(v31);
  v32.origin.x = a2;
  v32.origin.y = a3;
  v32.size.width = a4;
  v32.size.height = a5;
  MaxX = CGRectGetMaxX(v32);
  v33.origin.x = a2;
  v33.origin.y = a3;
  v33.size.width = a4;
  v33.size.height = a5;
  v23 = CGRectGetMaxY(v33);
  v34.origin.x = a2;
  v34.origin.y = a3;
  v34.size.width = a4;
  v34.size.height = a5;
  MinX = CGRectGetMinX(v34);
  v35.origin.x = a2;
  v35.origin.y = a3;
  v35.size.width = a4;
  v35.size.height = a5;
  v21 = CGRectGetMaxY(v35);
  UIAssistantViewClosestReferencePointFromPointInRect(a2, a3, a4, a5, a6, a7);
  if (MidX == v19 && MaxY == v20)
    return 2;
  if (v14 && (MaxX == v19 && v23 == v20 || MinX == v19 && v21 == v20))
    return 1;
  else
    return 2;
}

id UIInputViewSetPlacementFromAssistantViewVisualState(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  void *v6;

  objc_opt_class();
  if ((unint64_t)(a1 - 2) >= 2 && a1 != 1)
  {
    v5 = 0;
    if (a3)
      goto LABEL_4;
LABEL_6:
    objc_msgSend(v5, "placement");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    return v6;
  }
  v5 = (void *)objc_opt_class();
  if (!a3)
    goto LABEL_6;
LABEL_4:
  objc_msgSend(v5, "placementForDraggingAssistant");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  return v6;
}

void UIAssistantViewClosestReferencePointFromPointInRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6)
{
  CGFloat v12;
  CGFloat MidX;
  CGFloat v14;
  uint64_t v15;
  double v16;
  double v17;
  CGFloat MinX;
  CGFloat MaxY;
  CGFloat MaxX;
  _QWORD v21[7];
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;

  v21[6] = *MEMORY[0x1E0C80C00];
  MaxX = CGRectGetMaxX(*(CGRect *)&a1);
  v22.origin.x = a1;
  v22.origin.y = a2;
  v22.size.width = a3;
  v22.size.height = a4;
  MaxY = CGRectGetMaxY(v22);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  MinX = CGRectGetMinX(v23);
  v24.origin.x = a1;
  v24.origin.y = a2;
  v24.size.width = a3;
  v24.size.height = a4;
  v12 = CGRectGetMaxY(v24);
  v25.origin.x = a1;
  v25.origin.y = a2;
  v25.size.width = a3;
  v25.size.height = a4;
  MidX = CGRectGetMidX(v25);
  v26.origin.x = a1;
  v26.origin.y = a2;
  v26.size.width = a3;
  v26.size.height = a4;
  v14 = CGRectGetMaxY(v26);
  v15 = 0;
  *(CGFloat *)v21 = MaxX;
  *(CGFloat *)&v21[1] = MaxY;
  *(CGFloat *)&v21[2] = MinX;
  *(CGFloat *)&v21[3] = v12;
  *(CGFloat *)&v21[4] = MidX;
  *(CGFloat *)&v21[5] = v14;
  v16 = 3.40282347e38;
  do
  {
    v17 = sqrt((*(double *)&v21[v15] - a5) * (*(double *)&v21[v15] - a5)+ (*(double *)&v21[v15 + 1] - a6) * (*(double *)&v21[v15 + 1] - a6));
    if (v17 < v16)
      v16 = v17;
    v15 += 2;
  }
  while (v15 != 6);
}

void sub_185ED78A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_185ED951C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void _logRejectedTapAction()
{
  unint64_t v0;
  NSObject *v1;
  uint8_t v2[16];

  v0 = _logRejectedTapAction___s_category;
  if (!_logRejectedTapAction___s_category)
  {
    v0 = __UILogCategoryGetNode("KeyboardDock", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v0, (unint64_t *)&_logRejectedTapAction___s_category);
  }
  if ((*(_BYTE *)v0 & 1) != 0)
  {
    v1 = *(NSObject **)(v0 + 8);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_185066000, v1, OS_LOG_TYPE_ERROR, "Rejected tap outside tapAction boundary", v2, 2u);
    }
  }
}

void _UIInvalidateSwipeActionsLayoutForDecorationViewAtIndexPath(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  id v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "collectionView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "_isPerformingReloadData") & 1) == 0)
  {
    if (_UIIsIndexPathValidInCollectionView(v5, v4))
    {
      v6 = objc_alloc_init((Class)objc_msgSend((id)objc_opt_class(), "invalidationContextClass"));
      objc_msgSend(v6, "_setIntent:", 9);
      v13[0] = v4;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "invalidateDecorationElementsOfKind:atIndexPaths:", CFSTR("UICollectionViewListLayoutElementKindSwipeActions"), v7);

      objc_msgSend(v3, "invalidateLayoutWithContext:", v6);
    }
    else
    {
      if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        {
          v11 = 138412290;
          v12 = v4;
          _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Attempted to invalidate swipe actions layout for invalid decoration index path: %@", (uint8_t *)&v11, 0xCu);
        }

      }
      else
      {
        v8 = _UIInvalidateSwipeActionsLayoutForDecorationViewAtIndexPath___s_category;
        if (!_UIInvalidateSwipeActionsLayoutForDecorationViewAtIndexPath___s_category)
        {
          v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v8, (unint64_t *)&_UIInvalidateSwipeActionsLayoutForDecorationViewAtIndexPath___s_category);
        }
        v9 = *(NSObject **)(v8 + 8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          v11 = 138412290;
          v12 = v4;
          _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "Attempted to invalidate swipe actions layout for invalid decoration index path: %@", (uint8_t *)&v11, 0xCu);
        }
      }
      objc_msgSend(v3, "invalidateLayout");
    }
  }

}

void _UIPerformImmediateCollectionViewLayoutAndVisibleCellsUpdate(void *a1)
{
  uint64_t v1;
  id v2;

  v2 = a1;
  v1 = objc_msgSend(v2, "_allowsVisibleCellUpdatesDuringUpdateAnimations");
  objc_msgSend(v2, "_setAllowsVisibleCellUpdatesDuringUpdateAnimations:", 1);
  objc_msgSend(v2, "layoutIfNeeded");
  objc_msgSend(v2, "_setAllowsVisibleCellUpdatesDuringUpdateAnimations:", v1);

}

void _UIUpdateMaskViewClippingFromView(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  objc_msgSend(a1, "layer");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "layer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "cornerCurve");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setCornerCurve:", v5);

  objc_msgSend(v4, "cornerRadius");
  objc_msgSend(v6, "setCornerRadius:");
  objc_msgSend(v6, "setMaskedCorners:", objc_msgSend(v4, "maskedCorners"));
  objc_msgSend(v6, "setMasksToBounds:", 1);

}

void _UIInvalidateSwipeActionsLayoutForItemAtIndexPath(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  unint64_t v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  uint8_t buf[4];
  id v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "collectionView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "_isPerformingReloadData") & 1) == 0)
  {
    if (_UIIsIndexPathValidInCollectionView(v5, v4))
    {
      v6 = objc_alloc_init((Class)objc_msgSend((id)objc_opt_class(), "invalidationContextClass"));
      objc_msgSend(v6, "_setIntent:", 9);
      v15[0] = v4;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "invalidateItemsAtIndexPaths:", v7);

      if ((unint64_t)(objc_msgSend(v5, "_globalIndexPathForItemAtIndexPath:", v4) - 1) > 0x7FFFFFFFFFFFFFFDLL)
      {
        v8 = 0;
      }
      else
      {
        objc_msgSend(v5, "_indexPathForGlobalIndex:");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", v4, v8, 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "invalidateDecorationElementsOfKind:atIndexPaths:", CFSTR("UICollectionViewListLayoutElementKindBottomSeparator"), v11);
      objc_msgSend(v6, "invalidateDecorationElementsOfKind:atIndexPaths:", CFSTR("UICollectionViewListLayoutElementKindTopSeparator"), v11);
      objc_msgSend(v3, "invalidateLayoutWithContext:", v6);

    }
    else
    {
      if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          v14 = v4;
          _os_log_fault_impl(&dword_185066000, v12, OS_LOG_TYPE_FAULT, "Attempted to invalidate swipe actions layout for invalid item index path: %@", buf, 0xCu);
        }

      }
      else
      {
        v9 = _UIInvalidateSwipeActionsLayoutForItemAtIndexPath___s_category;
        if (!_UIInvalidateSwipeActionsLayoutForItemAtIndexPath___s_category)
        {
          v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v9, (unint64_t *)&_UIInvalidateSwipeActionsLayoutForItemAtIndexPath___s_category);
        }
        v10 = *(NSObject **)(v9 + 8);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v14 = v4;
          _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Attempted to invalidate swipe actions layout for invalid item index path: %@", buf, 0xCu);
        }
      }
      objc_msgSend(v3, "invalidateLayout");
    }
  }

}

void _UIUpdateMaskViewFrameForSwipedCellAtIndexPath(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  unint64_t v29;
  NSObject *v30;
  unint64_t v31;
  NSObject *v32;
  unint64_t v33;
  NSObject *v34;
  int v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "_isPerformingReloadData") & 1) == 0)
  {
    objc_msgSend(v3, "_visibleDecorationViewOfKind:atIndexPath:", CFSTR("UICollectionViewListLayoutElementKindSwipeActions"), v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_variant_has_internal_diagnostics())
    {
      if (!v5)
      {
        __UIFaultDebugAssertLog();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
        {
          v35 = 138412290;
          v36 = v4;
          _os_log_fault_impl(&dword_185066000, v26, OS_LOG_TYPE_FAULT, "Unable to get visible swipe actions view for index path: %@", (uint8_t *)&v35, 0xCu);
        }

      }
    }
    else if (!v5)
    {
      v29 = qword_1ECD7F080;
      if (!qword_1ECD7F080)
      {
        v29 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v29, (unint64_t *)&qword_1ECD7F080);
      }
      v30 = *(NSObject **)(v29 + 8);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        v35 = 138412290;
        v36 = v4;
        _os_log_impl(&dword_185066000, v30, OS_LOG_TYPE_ERROR, "Unable to get visible swipe actions view for index path: %@", (uint8_t *)&v35, 0xCu);
      }
    }
    objc_msgSend(v3, "cellForItemAtIndexPath:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_variant_has_internal_diagnostics())
    {
      if (!v6)
      {
        __UIFaultDebugAssertLog();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        {
          v35 = 138412290;
          v36 = v4;
          _os_log_fault_impl(&dword_185066000, v27, OS_LOG_TYPE_FAULT, "Unable to get visible cell for index path: %@", (uint8_t *)&v35, 0xCu);
        }

      }
    }
    else if (!v6)
    {
      v31 = qword_1ECD7F088;
      if (!qword_1ECD7F088)
      {
        v31 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v31, (unint64_t *)&qword_1ECD7F088);
      }
      v32 = *(NSObject **)(v31 + 8);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v35 = 138412290;
        v36 = v4;
        _os_log_impl(&dword_185066000, v32, OS_LOG_TYPE_ERROR, "Unable to get visible cell for index path: %@", (uint8_t *)&v35, 0xCu);
      }
    }
    -[UIView _safeMaskView](v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_variant_has_internal_diagnostics())
    {
      if (!v7)
      {
        __UIFaultDebugAssertLog();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
        {
          v35 = 138412290;
          v36 = v4;
          _os_log_fault_impl(&dword_185066000, v28, OS_LOG_TYPE_FAULT, "Unable to get mask from cell for index path: %@", (uint8_t *)&v35, 0xCu);
        }

      }
    }
    else if (!v7)
    {
      v33 = qword_1ECD7F090;
      if (!qword_1ECD7F090)
      {
        v33 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v33, (unint64_t *)&qword_1ECD7F090);
      }
      v34 = *(NSObject **)(v33 + 8);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        v35 = 138412290;
        v36 = v4;
        _os_log_impl(&dword_185066000, v34, OS_LOG_TYPE_ERROR, "Unable to get mask from cell for index path: %@", (uint8_t *)&v35, 0xCu);
      }
    }
    objc_msgSend(v5, "_outermostLayer");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "bounds");
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;
    objc_msgSend(v6, "_outermostLayer");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "convertRect:toLayer:", v17, v10, v12, v14, v16);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v25 = v24;

    objc_msgSend(v7, "setCenter:", v19 + v23 * 0.5, v21 + v25 * 0.5);
    objc_msgSend(v7, "bounds");
    objc_msgSend(v7, "setBounds:");
    _UIUpdateMaskViewClippingFromView(v7, v5);

  }
}

BOOL _UIIsIndexPathValidInCollectionView(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4 && (v6 = objc_msgSend(v4, "section"), v6 < objc_msgSend(v3, "numberOfSections")))
  {
    v7 = objc_msgSend(v5, "item");
    v8 = v7 < objc_msgSend(v3, "numberOfItemsInSection:", objc_msgSend(v5, "section"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_185EDD5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL _UICellAccessoryCustomViewDefaultUsesStandardLayoutWidthForCustomButton(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v1 = a1;
  if (dyld_program_sdk_at_least())
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___UICellAccessoryCustomViewDefaultUsesStandardLayoutWidthForCustomButton_block_invoke;
    v9[3] = &unk_1E16B1B28;
    v2 = v1;
    v10 = v2;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v9);
    objc_msgSend(v2, "_currentConfiguration");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
      objc_msgSend(v3, "title");
    else
      objc_msgSend(v2, "titleForState:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v7, "length");

    v5 = v10;
  }
  else
  {
    objc_msgSend(v1, "titleForState:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "length");
  }

  return v6 == 0;
}

UICellAccessoryPosition UICellAccessoryPositionBeforeAccessoryOfClass(Class accessoryClass)
{
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __UICellAccessoryPositionBeforeAccessoryOfClass_block_invoke;
  aBlock[3] = &__block_descriptor_40_e17_Q16__0__NSArray_8lu32l8;
  aBlock[4] = accessoryClass;
  return _Block_copy(aBlock);
}

UICellAccessoryPosition UICellAccessoryPositionAfterAccessoryOfClass(Class accessoryClass)
{
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __UICellAccessoryPositionAfterAccessoryOfClass_block_invoke;
  aBlock[3] = &__block_descriptor_40_e17_Q16__0__NSArray_8lu32l8;
  aBlock[4] = accessoryClass;
  return _Block_copy(aBlock);
}

void sub_185EE0928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getLPLinkMetadataClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7F0A0)
    qword_1ECD7F0A0 = _sl_dlopen();
  if (!qword_1ECD7F0A0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *LinkPresentationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UINavigationBarTitleRenamerSession.m"), 24, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("LPLinkMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLPLinkMetadataClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UINavigationBarTitleRenamerSession.m"), 25, CFSTR("Unable to find class %s"), "LPLinkMetadata");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1141 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _UIGetUIKeyboardTypingSpeedLogger()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_UIKeyboardTypingSpeedLogger,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_UIKeyboardTypingSpeedLogger))
  {
    v1 = 1;
  }
  else
  {
    do
    {
      v1 = v0 >= v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_UIKeyboardTypingSpeedLogger, (uint64_t)CFSTR("UIKeyboardTypingSpeedLogger"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_UIKeyboardTypingSpeedLogger;
    }
    while (v0 != _UIInternalPreference_UIKeyboardTypingSpeedLogger);
  }
  return byte_1ECD766C4 || v1;
}

uint64_t _UIObservationTrackingEnabled()
{
  if (qword_1ECD7F0B0 != -1)
    dispatch_once(&qword_1ECD7F0B0, &__block_literal_global_362);
  return _MergedGlobals_1142;
}

id _UIPathConvertedToPreviewContainerSpace(void *a1, void *a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  double MinX;
  void *v17;
  void *v18;
  CGFloat v19;
  double MinY;
  void *v21;
  void *v22;
  CGFloat v23;
  CGFloat v24;
  CGAffineTransform v26;
  CGAffineTransform v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  v3 = a2;
  v4 = (void *)objc_msgSend(a1, "copy");
  memset(&v27, 0, sizeof(v27));
  objc_msgSend(v3, "size");
  v6 = v5;
  v8 = v7;
  objc_msgSend(v3, "target");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "center");
  v11 = round(v10 - v8 * 0.5);
  v13 = round(v12 - v6 * 0.5);

  objc_msgSend(v3, "parameters");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "visiblePath");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v28.origin.x = v13;
  v28.origin.y = v11;
  v28.size.width = v6;
  v28.size.height = v8;
  MinX = CGRectGetMinX(v28);
  if (v15)
  {
    objc_msgSend(v3, "parameters");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "visiblePath");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "bounds");
    v19 = MinX - CGRectGetMinX(v29);
    v30.origin.x = v13;
    v30.origin.y = v11;
    v30.size.width = v6;
    v30.size.height = v8;
    MinY = CGRectGetMinY(v30);
    objc_msgSend(v3, "parameters");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "visiblePath");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "bounds");
    v23 = CGRectGetMinY(v31);
    CGAffineTransformMakeTranslation(&v27, v19, MinY - v23);

  }
  else
  {
    v32.origin.x = v13;
    v32.origin.y = v11;
    v32.size.width = v6;
    v32.size.height = v8;
    v24 = CGRectGetMinY(v32);
    CGAffineTransformMakeTranslation(&v27, MinX, v24);
  }
  v26 = v27;
  objc_msgSend(v4, "applyTransform:", &v26);

  return v4;
}

__n128 _UISizeRespectingTransformsFromPreview(void *a1, double a2, double a3)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  float64x2_t v10;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v13;
  CGAffineTransform v14;

  objc_msgSend(a1, "target");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  memset(&v14, 0, sizeof(v14));
  objc_msgSend(v3, "container");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "container");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  _UIGetTransformBetweenViews(v4, v6, 1, (uint64_t)&v14);

  memset(&v13, 0, sizeof(v13));
  if (v3)
    objc_msgSend(v3, "transform");
  else
    memset(&t1, 0, sizeof(t1));
  t2 = v14;
  CGAffineTransformConcat(&v13, &t1, &t2);
  v10 = vabsq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v13.a, a2), vmulq_n_f64(*(float64x2_t *)&v13.c, a3)));

  return (__n128)v10;
}

id _UIRemoteKeyboardsFBSSceneIdentityStringFromSettingsSceneOfWindow(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(a1, "windowScene");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_settingsScene");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "_FBSScene");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "identityToken");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringRepresentation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_185EEF304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185EF0248(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

Class __getSTKPrewarmingViewControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7A3A0)
    qword_1ECD7A3A0 = _sl_dlopen();
  if (!qword_1ECD7A3A0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *StickerKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIRemoteKeyboards.m"), 75, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("STKPrewarmingViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSTKPrewarmingViewControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIRemoteKeyboards.m"), 76, CFSTR("Unable to find class %s"), "STKPrewarmingViewController");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7A398 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185EF1BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

const __CFString *_NSStringFromUIPointerLockStatus(uint64_t a1)
{
  if (a1)
    return CFSTR("_UIPointerLockStatusLocked");
  else
    return CFSTR("_UIPointerLockStatusUnlocked");
}

uint64_t _UIListEnvironmentFromTableViewStyle(unint64_t a1)
{
  void *v3;
  void *v4;

  if (a1 < 3)
    return a1 + 2;
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIListEnvironment _UIListEnvironmentFromTableViewStyle(UITableViewStyle)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UITraitListEnvironment.m"), 61, CFSTR("Received unknown UITableViewStyle %ld"), a1);

  return 2;
}

uint64_t _UICollectionViewListStyleFromListEnvironment(unint64_t a1)
{
  void *v3;
  void *v4;

  if (a1 < 7)
    return qword_186681610[a1];
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UICollectionViewListLayoutAppearanceStyle _UICollectionViewListStyleFromListEnvironment(UIListEnvironment)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UITraitListEnvironment.m"), 88, CFSTR("Received unknown list environment %ld"), a1);

  return 0;
}

uint64_t _UIListEnvironmentFromListStyle(unint64_t a1)
{
  void *v3;
  void *v4;

  if (a1 < 5)
    return a1 + 2;
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIListEnvironment _UIListEnvironmentFromListStyle(_UICollectionViewListLayoutAppearanceStyle)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UITraitListEnvironment.m"), 126, CFSTR("Received unknown list style %ld"), a1);

  return 2;
}

void sub_185EF4450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185EF46C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EF49BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EFD578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

id TIGetDocumentRequestSurroundingGranularityCountValue()
{
  void *v0;
  void *v1;

  if (TIGetDocumentRequestSurroundingGranularityCountValue_onceToken != -1)
    dispatch_once(&TIGetDocumentRequestSurroundingGranularityCountValue_onceToken, &__block_literal_global_923_0);
  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForPreferenceKey:", CFSTR("DocumentRequestSurroundingGranularityCount"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id TIGetDocumentRequestRectCountBeforeValue()
{
  void *v0;
  void *v1;

  if (TIGetDocumentRequestRectCountBeforeValue_onceToken != -1)
    dispatch_once(&TIGetDocumentRequestRectCountBeforeValue_onceToken, &__block_literal_global_933);
  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForPreferenceKey:", CFSTR("DocumentRequestRectCountBefore"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id TIGetDocumentRequestRectCountAfterValue()
{
  void *v0;
  void *v1;

  if (TIGetDocumentRequestRectCountAfterValue_onceToken != -1)
    dispatch_once(&TIGetDocumentRequestRectCountAfterValue_onceToken, &__block_literal_global_939);
  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForPreferenceKey:", CFSTR("DocumentRequestRectCountAfter"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t _UIHyperFill()
{
  return catlas_dset_NEWLAPACK();
}

uint64_t _UIHyperFillStride()
{
  return catlas_dset_NEWLAPACK();
}

uint64_t _UIHyperCopy()
{
  return cblas_dcopy_NEWLAPACK();
}

BOOL _UIHyperEqual(const void *a1, const void *a2, uint64_t a3)
{
  return memcmp(a1, a2, 8 * a3) == 0;
}

void _UIHyperAdd(double *__C, const double *__A, const double *a3, vDSP_Length __N)
{
  vDSP_vaddD(__A, 1, a3, 1, __C, 1, __N);
}

void _UIHyperSubtract(double *__C, const double *__A, const double *__B, vDSP_Length __N)
{
  vDSP_vsubD(__B, 1, __A, 1, __C, 1, __N);
}

void _UIHyperMultiply(double *__C, const double *__A, const double *a3, vDSP_Length __N)
{
  vDSP_vmulD(__A, 1, a3, 1, __C, 1, __N);
}

void _UIHyperDivide(double *__C, const double *__A, const double *__B, vDSP_Length __N)
{
  vDSP_vdivD(__B, 1, __A, 1, __C, 1, __N);
}

void _UIHyperScalarMultiply(double *__C, const double *__A, vDSP_Length __N, double a4)
{
  double __B;

  __B = a4;
  vDSP_vsmulD(__A, 1, &__B, __C, 1, __N);
}

void _UIHyperScalarDivide(double *__C, const double *__A, vDSP_Length __N, double a4)
{
  double __B;

  __B = a4;
  vDSP_vsdivD(__A, 1, &__B, __C, 1, __N);
}

void _UIHyperScalarMultiplyAdd(double *__D, const double *__A, const double *__C, vDSP_Length __N, double a5)
{
  double __B;

  __B = a5;
  vDSP_vsmaD(__A, 1, &__B, __C, 1, __D, 1, __N);
}

void _UIHyperScalarMultiplySubtract(double *__D, const double *__A, const double *__C, vDSP_Length __N, double a5)
{
  double __B;

  __B = a5;
  vDSP_vsmsbD(__A, 1, &__B, __C, 1, __D, 1, __N);
}

void _UIHyperRemainder(double *a1, const double *a2, const double *a3, int a4)
{
  int v4;

  v4 = a4;
  vvremainder(a1, a2, a3, &v4);
}

void _UIHyperFloor(double *a1, const double *a2, int a3)
{
  int v3;

  v3 = a3;
  vvfloor(a1, a2, &v3);
}

void _UIHyperCeil(double *a1, const double *a2, int a3)
{
  int v3;

  v3 = a3;
  vvceil(a1, a2, &v3);
}

void _UIHyperMinimum(double *__C, const double *__A, const double *a3, vDSP_Length __N)
{
  vDSP_vminD(__A, 1, a3, 1, __C, 1, __N);
}

void _UIHyperMaximum(double *__C, const double *__A, const double *a3, vDSP_Length __N)
{
  vDSP_vmaxD(__A, 1, a3, 1, __C, 1, __N);
}

void _UIHyperScalarMinimum(double *__C, const double *__A, vDSP_Length __N, double a4)
{
  double __B;

  __B = a4;
  vDSP_vminD(__A, 1, &__B, 0, __C, 1, __N);
}

void _UIHyperScalarMaximum(double *__C, const double *__A, vDSP_Length __N, double a4)
{
  double __B;

  __B = a4;
  vDSP_vmaxD(__A, 1, &__B, 0, __C, 1, __N);
}

double _UIHyperMinimumValue(const double *a1, vDSP_Length __N)
{
  double __C;

  __C = 0.0;
  vDSP_minvD(a1, 1, &__C, __N);
  return __C;
}

double _UIHyperMaximumValue(const double *a1, vDSP_Length __N)
{
  double __C;

  __C = 0.0;
  vDSP_maxvD(a1, 1, &__C, __N);
  return __C;
}

double _UIHyperDot(const double *a1, const double *__B, vDSP_Length __N)
{
  double __C;

  __C = 0.0;
  vDSP_dotprD(a1, 1, __B, 1, &__C, __N);
  return __C;
}

uint64_t _UIHyperMagnitude()
{
  return cblas_dnrm2_NEWLAPACK();
}

void _UIHyperUnit(double *a1, const double *a2, vDSP_Length a3)
{
  double v6;
  double __B;

  cblas_dnrm2_NEWLAPACK();
  __B = v6;
  vDSP_vsdivD(a2, 1, &__B, a1, 1, a3);
}

double _UIHyperDistanceSquaredTo(const double *a1, const double *__B, vDSP_Length __N)
{
  double __C;

  __C = 0.0;
  vDSP_distancesqD(a1, 1, __B, 1, &__C, __N);
  return __C;
}

double _UIHyperDistanceTo(const double *a1, const double *__B, vDSP_Length __N)
{
  double __C;

  __C = 0.0;
  vDSP_distancesqD(a1, 1, __B, 1, &__C, __N);
  return sqrt(__C);
}

void _UIHyperUnitTo(double *__C, const double *__B, const double *a3, vDSP_Length __N)
{
  double v6;
  double __Ba;

  vDSP_vsubD(__B, 1, a3, 1, __C, 1, __N);
  cblas_dnrm2_NEWLAPACK();
  __Ba = v6;
  vDSP_vsdivD(__C, 1, &__Ba, __C, 1, __N);
}

void _UIHyperInterpolate(double *__B, const double *a2, const double *__A, vDSP_Length __N, double a5)
{
  double __Ba;

  if (__B == a2)
  {
    vDSP_vsubD(__B, 1, __A, 1, __B, 1, __N);
    __Ba = 1.0 - a5;
    vDSP_vsmulD(__B, 1, &__Ba, __B, 1, __N);
    vDSP_vsubD(__B, 1, __A, 1, __B, 1, __N);
  }
  else
  {
    vDSP_vsubD(a2, 1, __A, 1, __B, 1, __N);
    __Ba = a5;
    vDSP_vsmulD(__B, 1, &__Ba, __B, 1, __N);
    vDSP_vaddD(a2, 1, __B, 1, __B, 1, __N);
  }
}

void _UIHyperExtend(double *a1, const double *__A, const double *a3, vDSP_Length __N, double a5)
{
  double __C;

  __C = 0.0;
  vDSP_distancesqD(__A, 1, a3, 1, &__C, __N);
  _UIHyperInterpolate(a1, __A, a3, __N, a5 / sqrt(__C));
}

double _UIHyperFractionOfProjectionOnto(const double *a1, const double *__B, vDSP_Length __N)
{
  double v5;
  double __C;

  __C = 0.0;
  vDSP_dotprD(a1, 1, __B, 1, &__C, __N);
  v5 = __C;
  __C = 0.0;
  vDSP_dotprD(__B, 1, __B, 1, &__C, __N);
  return v5 / __C;
}

void _UIHyperProjectionOnto(double *a1, const double *a2, const double *__B, vDSP_Length __N)
{
  double __Ba;

  __Ba = _UIHyperFractionOfProjectionOnto(a2, __B, __N);
  vDSP_vsmulD(__B, 1, &__Ba, a1, 1, __N);
}

void _UIHyperFractionalProjectionOntoHyperplane(double *a1, const double *a2, const double *__B, vDSP_Length __N, double a5)
{
  double __Ba;

  __Ba = -(_UIHyperFractionOfProjectionOnto(a2, __B, __N) * a5);
  vDSP_vsmaD(__B, 1, &__Ba, a2, 1, a1, 1, __N);
}

void _UIHyperProjectionOntoHyperplane(double *a1, const double *a2, const double *a3, vDSP_Length a4)
{
  _UIHyperFractionalProjectionOntoHyperplane(a1, a2, a3, a4, 1.0);
}

uint64_t _UIHyperMatrixVectorMultiply()
{
  return cblas_dgemv_NEWLAPACK();
}

uint64_t _UIHyperProjectionMatrixForBasis(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1E0C80A78](a1);
  v1 = cblas_dgemm_NEWLAPACK();
  MEMORY[0x1E0C80A78](v1);
  dgetrf_NEWLAPACK();
  v2 = dgetri_NEWLAPACK();
  MEMORY[0x1E0C80A78](v2);
  cblas_dgemm_NEWLAPACK();
  return cblas_dgemm_NEWLAPACK();
}

uint64_t _UIHyperKernelBasis(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  dgetrf_NEWLAPACK();
  dtrtrs_NEWLAPACK();
  return dlaswp_NEWLAPACK();
}

BOOL _UIHyperIsFinite(const double *a1, vDSP_Length __N)
{
  double v2;
  double __C;

  __C = 0.0;
  vDSP_minvD(a1, 1, &__C, __N);
  v2 = fabs(__C);
  return v2 > INFINITY || v2 < INFINITY;
}

id _UIVectorDescription(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;

  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("["));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
  {
    v5 = 0;
    do
    {
      objc_msgSend(v4, "appendFormat:", CFSTR("%g"), *(_QWORD *)(a1 + 8 * v5));
      if (v5 < a2 - 1)
        objc_msgSend(v4, "appendString:", CFSTR(", "));
      ++v5;
    }
    while (a2 != v5);
  }
  objc_msgSend(v4, "appendString:", CFSTR("]"));
  return v4;
}

id _UINSUIntegerVectorDescription(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;

  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("["));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
  {
    v5 = 0;
    do
    {
      objc_msgSend(v4, "appendFormat:", CFSTR("%lu"), *(_QWORD *)(a1 + 8 * v5));
      if (v5 < a2 - 1)
        objc_msgSend(v4, "appendString:", CFSTR(", "));
      ++v5;
    }
    while (a2 != v5);
  }
  objc_msgSend(v4, "appendString:", CFSTR("]"));
  return v4;
}

id _UIMatrixDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("["));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3)
  {
    v7 = a3;
    v8 = 0;
    v11 = a3 - 1;
    do
    {
      objc_msgSend(v6, "appendString:", CFSTR("["));
      if (a2)
      {
        v9 = 0;
        do
        {
          objc_msgSend(v6, "appendFormat:", CFSTR("%g"), *(_QWORD *)(a1 + 8 * v9));
          if (v9 < a2 - 1)
            objc_msgSend(v6, "appendString:", CFSTR(", "));
          ++v9;
        }
        while (a2 != v9);
      }
      objc_msgSend(v6, "appendString:", CFSTR("]"));
      if (v8 < v11)
        objc_msgSend(v6, "appendString:", CFSTR(", "));
      ++v8;
      a1 += 8 * a2;
    }
    while (v8 != v7);
  }
  objc_msgSend(v6, "appendString:", CFSTR("]"));
  return v6;
}

void sub_185F058EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185F05F78(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  id v13;

  if (a2 == 2)
  {
    v13 = objc_begin_catch(exc_buf);
    objc_msgSend(v12, "notifyDelegateOfCancelledTouch:", a12);
    NSLog(CFSTR("Exception when handling touch up: %@"));

    objc_end_catch();
    JUMPOUT(0x185F05F00);
  }
  objc_begin_catch(exc_buf);
  JUMPOUT(0x185F05F04);
}

void sub_185F061FC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_185F074C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F07960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F081B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _NSTextHighlightColorSchemeForTextFormattingChangeValue(void *a1)
{
  id v1;
  __CFString *v2;
  id v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  id *v10;

  v1 = a1;
  objc_msgSend(v1, "changeType");
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v2 != CFSTR("UITextFormattingViewControllerHighlightChange"))
    goto LABEL_2;
  objc_msgSend(v1, "highlight");
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v4 == CFSTR("UITextFormattingViewControllerHighlightDefault"))
  {
    v10 = (id *)off_1E1679140;
    goto LABEL_15;
  }
  objc_msgSend(v1, "highlight");
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v5 == CFSTR("UITextFormattingViewControllerHighlightPurple"))
  {
    v10 = (id *)off_1E1679160;
    goto LABEL_15;
  }
  objc_msgSend(v1, "highlight");
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v6 == CFSTR("UITextFormattingViewControllerHighlightPink"))
  {
    v10 = (id *)off_1E1679158;
    goto LABEL_15;
  }
  objc_msgSend(v1, "highlight");
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v7 == CFSTR("UITextFormattingViewControllerHighlightOrange"))
  {
    v10 = (id *)off_1E1679150;
    goto LABEL_15;
  }
  objc_msgSend(v1, "highlight");
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v8 == CFSTR("UITextFormattingViewControllerHighlightMint"))
  {
    v10 = (id *)off_1E1679148;
    goto LABEL_15;
  }
  objc_msgSend(v1, "highlight");
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v9 == CFSTR("UITextFormattingViewControllerHighlightBlue"))
  {
    v10 = (id *)off_1E1679138;
LABEL_15:
    v3 = *v10;
    goto LABEL_16;
  }
LABEL_2:
  v3 = 0;
LABEL_16:

  return v3;
}

id _UITextFormattingViewControllerChangeValueClasses()
{
  if (qword_1ECD7F110 != -1)
    dispatch_once(&qword_1ECD7F110, &__block_literal_global_371);
  return (id)_MergedGlobals_1145;
}

void sub_185F0A65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185F0BE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_185F0C878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_185F0E434(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185F0F044(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_185F0F2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_185F11CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_185F1230C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_185F12F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_185F137C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIGet_UIKBRT_SetDownTapInterval()
{
  int v0;
  double result;
  int v2;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  result = 0.04;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    v2 = _UIInternalPreference__UIKBRT_SetDownTapInterval;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference__UIKBRT_SetDownTapInterval)
    {
      while (v0 >= v2)
      {
        _UIInternalPreferenceSync(v0, &_UIInternalPreference__UIKBRT_SetDownTapInterval, (uint64_t)CFSTR("_UIKBRT_SetDownTapInterval"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
        v2 = _UIInternalPreference__UIKBRT_SetDownTapInterval;
        if (v0 == _UIInternalPreference__UIKBRT_SetDownTapInterval)
          return 0.04;
      }
      return *(double *)&qword_1EDDA7E08;
    }
  }
  return result;
}

void *__Block_byref_object_copy__106(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_185F15BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F15E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F1653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185F187EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_185F1AA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getIAChannelSmartReplies()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getIAChannelSmartRepliesSymbolLoc_ptr;
  v8 = getIAChannelSmartRepliesSymbolLoc_ptr;
  if (!getIAChannelSmartRepliesSymbolLoc_ptr)
  {
    v1 = InputAnalyticsLibrary();
    v0 = (id *)dlsym(v1, "IAChannelSmartReplies");
    v6[3] = (uint64_t)v0;
    getIAChannelSmartRepliesSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getIAChannelSmartReplies(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UISmartReplyFeedbackManager.m"), 29, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185F1AB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F1B438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getIAUtilityClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7F150;
  v7 = qword_1ECD7F150;
  if (!qword_1ECD7F150)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getIAUtilityClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getIAUtilityClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185F1B4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F1B8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getIAChannelFeedbackService()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getIAChannelFeedbackServiceSymbolLoc_ptr;
  v8 = getIAChannelFeedbackServiceSymbolLoc_ptr;
  if (!getIAChannelFeedbackServiceSymbolLoc_ptr)
  {
    v1 = InputAnalyticsLibrary();
    v0 = (id *)dlsym(v1, "IAChannelFeedbackService");
    v6[3] = (uint64_t)v0;
    getIAChannelFeedbackServiceSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getIAChannelFeedbackService(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UISmartReplyFeedbackManager.m"), 30, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185F1B9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getIAPayloadKeyFeedbackServiceOriginalContent()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getIAPayloadKeyFeedbackServiceOriginalContentSymbolLoc_ptr;
  v8 = getIAPayloadKeyFeedbackServiceOriginalContentSymbolLoc_ptr;
  if (!getIAPayloadKeyFeedbackServiceOriginalContentSymbolLoc_ptr)
  {
    v1 = InputAnalyticsLibrary();
    v0 = (id *)dlsym(v1, "IAPayloadKeyFeedbackServiceOriginalContent");
    v6[3] = (uint64_t)v0;
    getIAPayloadKeyFeedbackServiceOriginalContentSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getIAPayloadKeyFeedbackServiceOriginalContent(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UISmartReplyFeedbackManager.m"), 36, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185F1BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getIAPayloadKeyFeedbackServiceGeneratedContent()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getIAPayloadKeyFeedbackServiceGeneratedContentSymbolLoc_ptr;
  v8 = getIAPayloadKeyFeedbackServiceGeneratedContentSymbolLoc_ptr;
  if (!getIAPayloadKeyFeedbackServiceGeneratedContentSymbolLoc_ptr)
  {
    v1 = InputAnalyticsLibrary();
    v0 = (id *)dlsym(v1, "IAPayloadKeyFeedbackServiceGeneratedContent");
    v6[3] = (uint64_t)v0;
    getIAPayloadKeyFeedbackServiceGeneratedContentSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getIAPayloadKeyFeedbackServiceGeneratedContent(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UISmartReplyFeedbackManager.m"), 37, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185F1BBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getIASignalFeedbackServiceLaunchSmartRepliesThumbsDown()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getIASignalFeedbackServiceLaunchSmartRepliesThumbsDownSymbolLoc_ptr;
  v8 = getIASignalFeedbackServiceLaunchSmartRepliesThumbsDownSymbolLoc_ptr;
  if (!getIASignalFeedbackServiceLaunchSmartRepliesThumbsDownSymbolLoc_ptr)
  {
    v1 = InputAnalyticsLibrary();
    v0 = (id *)dlsym(v1, "IASignalFeedbackServiceLaunchSmartRepliesThumbsDown");
    v6[3] = (uint64_t)v0;
    getIASignalFeedbackServiceLaunchSmartRepliesThumbsDownSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getIASignalFeedbackServiceLaunchSmartRepliesThumbsDown(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UISmartReplyFeedbackManager.m"), 34, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185F1C694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F1C7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F1CAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F1CDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void *InputAnalyticsLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!_MergedGlobals_1148)
    _MergedGlobals_1148 = _sl_dlopen();
  v0 = (void *)_MergedGlobals_1148;
  if (!_MergedGlobals_1148)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *InputAnalyticsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("_UISmartReplyFeedbackManager.m"), 25, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

Class __getIAUtilityClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!_MergedGlobals_1148)
    _MergedGlobals_1148 = _sl_dlopen();
  result = objc_getClass("IAUtility");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD7F150 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getIASignalAnalyticsClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!_MergedGlobals_1148)
    _MergedGlobals_1148 = _sl_dlopen();
  result = objc_getClass("IASignalAnalytics");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD7F168 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185F29094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185F296D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _getGestureKeyboardFlag(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_getAssociatedObject(a1, &s_gestureKeyboardKey);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "integerValue");

  return v2;
}

uint64_t IsGestureWithinSpecialRegion(void *a1)
{
  id v1;
  void *v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  uint64_t v7;

  v1 = a1;
  objc_msgSend(v1, "view");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "locationInView:", v2);
  v4 = v3;
  v6 = v5;

  v7 = IsTouchPointWithinSpecialRegion(v2, v4, v6);
  return v7;
}

uint64_t IsTouchPointWithinSpecialRegion(void *a1, CGFloat a2, CGFloat a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;
  CGPoint v22;
  CGRect v23;
  CGRect v24;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v5, "_keyboardLongPressInteractionRegions");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = 0;
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * i), "CGRectValue", (_QWORD)v16);
        x = v23.origin.x;
        y = v23.origin.y;
        width = v23.size.width;
        height = v23.size.height;
        if (!CGRectIsNull(v23))
        {
          v24.origin.x = x;
          v24.origin.y = y;
          v24.size.width = width;
          v24.size.height = height;
          v22.x = a2;
          v22.y = a3;
          if (CGRectContainsPoint(v24, v22))
          {
            v8 = 1;
            goto LABEL_15;
          }
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_15:

  return v8;
}

BOOL _gestureIsEnded(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  v2 = objc_msgSend(v1, "state") == 3 || objc_msgSend(v1, "state") == 4 || objc_msgSend(v1, "state") == 5;

  return v2;
}

void sub_185F42B98(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void _UIUpdateLabelUsingConfiguration(void *a1, id *a2, void *a3)
{
  _QWORD *v5;
  UILabel *v6;
  UILabel *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a1;
  v5 = a3;
  if (!a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIUpdateLabelUsingConfiguration(UIView * _Nonnull __strong, UILabel * _Nullable __strong * _Nonnull, _UIContentViewLabelConfiguration * _Nonnull __strong)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("_UIContentViewLabelConfiguration_Internal.h"), 73, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("labelPtr != NULL"));

  }
  v6 = (UILabel *)*a2;
  v7 = v6;
  if (v5 && (v5[2] || v5[7]))
  {
    if (v6)
    {
      if (-[UIView isHidden](v6, "isHidden"))
        -[UIView setHidden:](v7, "setHidden:", 0);
    }
    else
    {
      v7 = objc_alloc_init(UILabel);
      objc_storeStrong(a2, v7);
      objc_msgSend(v10, "addSubview:", v7);
    }
    objc_msgSend(v5, "applyToLabel:", v7);
  }
  else if (v6 && !-[UIView isHidden](v6, "isHidden"))
  {
    -[UIView setHidden:](v7, "setHidden:", 1);
  }

}

uint64_t _UIHIDEventSynchronizationStrategyForEvent(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  unint64_t v4;
  NSObject *v5;
  _BYTE buf[18];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (_getTritiumVendorDefinedEvent(a1))
  {
    *(_QWORD *)buf = 0;
    IOHIDEventGetVendorDefinedData();
  }
  v2 = _MergedGlobals_1155;
  if (!_MergedGlobals_1155)
  {
    v2 = __UILogCategoryGetNode("HIDEventSynchronization", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_MergedGlobals_1155);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_DEFAULT, "Unable to find vendor defined event or it has unexpected data: %@", buf, 0xCu);
  }
  v4 = qword_1ECD7F1E8;
  if (!qword_1ECD7F1E8)
  {
    v4 = __UILogCategoryGetNode("HIDEventSynchronization", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v4, (unint64_t *)&qword_1ECD7F1E8);
  }
  v5 = *(NSObject **)(v4 + 8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2048;
    *(_QWORD *)&buf[10] = 0;
    _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_DEFAULT, "Gesture type '%u' -> synchronization strategy '%lu'.", buf, 0x12u);
  }
  return 0;
}

uint64_t ___getTritiumVendorDefinedEvent_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t IntegerValue;
  uint64_t result;

  IntegerValue = IOHIDEventGetIntegerValue();
  result = IOHIDEventGetIntegerValue();
  if (IntegerValue == 65376 && result == 11)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
    *a4 = 1;
  }
  return result;
}

id KeyboardUIClientLog()
{
  if (qword_1ECD7F1F8 != -1)
    dispatch_once(&qword_1ECD7F1F8, &__block_literal_global_386);
  return (id)_MergedGlobals_1156;
}

void sub_185F4F9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185F4FB3C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

float ValueForPoint(void *a1, int a2, double a3, double a4, double a5, double a6, float a7, float a8)
{
  id *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id WeakRetained;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  double x;
  double width;
  uint64_t v30;
  id v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  void *v40;
  float v41;
  double v42;
  void *v43;
  void *v44;
  double v45;
  float v47;
  CGRect v48;
  CGRect v49;

  v13 = a1;
  objc_msgSend(v13, "bounds");
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  WeakRetained = objc_loadWeakRetained(v13 + 68);
  objc_msgSend(WeakRetained, "trackRectForBounds:", v15, v17, v19, v21);
  v24 = v23;
  v26 = v25;

  if (dyld_program_sdk_at_least())
    v27 = -3.0;
  else
    v27 = -2.0;
  v48.origin.x = v24;
  v48.origin.y = v17;
  v48.size.width = v26;
  v48.size.height = v21;
  v49 = CGRectInset(v48, v27, 0.0);
  x = v49.origin.x;
  width = v49.size.width;
  v30 = 5;
  if (!*((_BYTE *)v13 + 529))
    v30 = 6;
  v31 = *(id *)((char *)v13 + OBJC_IVAR____UISlideriOSVisualElement__sliderFlags[v30]);
  objc_msgSend(v31, "frame");
  v33 = v32;
  if (a2)
    v34 = width - (a5 + *((double *)v13 + 63) - x);
  else
    v34 = a5 + *((double *)v13 + 63) - x;
  objc_msgSend(v13, "data");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "sliderSpeedMultiplier");
  v37 = a3 + (v34 - a3) * v36;

  v38 = v37 + v33 * -0.5;
  v39 = (float)((float)(a8 - a7) * v38) / (width - v33) + a7;
  if (((_BYTE)v13[60] & 8) != 0)
  {
    objc_msgSend(v13, "data");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "sliderSpeedMultiplier");
    v42 = fabs(v41 + -1.0);

    if (v42 <= 0.01)
    {
      objc_msgSend(v13, "slider");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "_sliderConfiguration");
      v44 = (void *)objc_claimAutoreleasedReturnValue();

      v47 = 0.0;
      *(float *)&v45 = v39;
      if (objc_msgSend(v44, "adjustPositionForTargetPosition:adjustedPosition:startPosition:endPosition:", &v47, 0, 0, v45))v39 = v47;

    }
  }
  if (v39 >= a7)
  {
    a7 = v39;
    if (v39 > a8)
      a7 = a8;
  }

  return a7;
}

uint64_t UITextRangeContainsPointInViewWithSlop(void *a1, void *a2, double a3, double a4, double a5)
{
  id v9;
  id v10;
  void *v11;
  CGFloat v12;
  CGFloat v13;
  uint64_t v14;

  v9 = a2;
  v10 = a1;
  objc_msgSend(v10, "textInputView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "convertPoint:fromView:", v10, a3, a4);
  v14 = UITextRangeContainsPointWithSlop(v10, (uint64_t)v9, v12, v13, a5);

  return v14;
}

uint64_t UITextRangeContainsPointWithSlop(void *a1, uint64_t a2, CGFloat a3, CGFloat a4, double a5)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGFloat v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CGFloat v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;
  CGPoint v35;
  CGRect v36;

  v34 = *MEMORY[0x1E0C80C00];
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  objc_msgSend(a1, "selectionRectsForRange:", a2, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v30;
    v11 = -a5;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v30 != v10)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        objc_msgSend(v13, "rect");
        v15 = v14;
        v17 = v16;
        v19 = v18;
        v21 = v20;
        if (objc_msgSend(v13, "isVertical"))
        {
          v22 = 0.0;
          v23 = v15;
          v24 = v17;
          v25 = v19;
          v26 = v21;
          v27 = v11;
        }
        else
        {
          v27 = 0.0;
          v23 = v15;
          v24 = v17;
          v25 = v19;
          v26 = v21;
          v22 = v11;
        }
        v36 = CGRectInset(*(CGRect *)&v23, v27, v22);
        v35.x = a3;
        v35.y = a4;
        if (CGRectContainsPoint(v36, v35))
        {
          v9 = 1;
          goto LABEL_14;
        }
      }
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_14:

  return v9;
}

void sub_185F56C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F5CDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F63294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F6C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIKBTextSignalsFoundInKeywordsList(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a1;
  v4 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___UIKBTextSignalsFoundInKeywordsList_block_invoke;
  v8[3] = &unk_1E16D9170;
  v5 = v4;
  v9 = v5;
  v10 = &v11;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v8);
  v6 = *((unsigned __int8 *)v12 + 24);

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_185F6DC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F6E0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F6F418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

id get_SFAppPasswordSavingViewControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7F2D0;
  v7 = qword_1ECD7F2D0;
  if (!qword_1ECD7F2D0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_SFAppPasswordSavingViewControllerClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __get_SFAppPasswordSavingViewControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185F6FD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F70F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185F71FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F7230C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185F7241C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void UIKBLADarwinUIPresented()
{
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_153);
}

void UIKBLADarwinUIDismissed()
{
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_154);
}

void _AttemptDismiss(void *a1, void *a2)
{
  id v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  void (**v9)(_QWORD);

  v3 = a1;
  v4 = a2;
  objc_msgSend((id)s_presentations, "removeObject:", v3);
  if (!objc_msgSend((id)s_presentations, "count"))
  {
    v5 = (void *)s_presentations;
    s_presentations = 0;

  }
  objc_msgSend(v3, "presentingViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___AttemptDismiss_block_invoke;
    v7[3] = &unk_1E16B1D18;
    v8 = v3;
    v9 = v4;
    objc_msgSend(v8, "dismissViewControllerAnimated:completion:", 0, v7);

  }
  else
  {
    v4[2](v4);
  }

}

id get_SFAppAutoFillPasswordViewControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_SFAppAutoFillPasswordViewControllerClass_softClass;
  v7 = get_SFAppAutoFillPasswordViewControllerClass_softClass;
  if (!get_SFAppAutoFillPasswordViewControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_SFAppAutoFillPasswordViewControllerClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __get_SFAppAutoFillPasswordViewControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185F74440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIKeyboardSafariPresentCredentialPickerVC(void *a1)
{
  objc_class *v1;
  id v2;

  v2 = a1;
  get_SFAppAutoFillPasswordViewControllerClass();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (get_SFAppPasswordSavingViewControllerClass_0(), (objc_opt_isKindOfClass() & 1) != 0)
    || (get_SFExternalPasswordCredentialViewControllerClass(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v1 = (objc_class *)objc_opt_class();
    if (v1)
      UIKeyboardPresentHiddenViewController(v1, v2);
  }

}

id get_SFAppPasswordSavingViewControllerClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_SFAppPasswordSavingViewControllerClass_softClass;
  v7 = get_SFAppPasswordSavingViewControllerClass_softClass;
  if (!get_SFAppPasswordSavingViewControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_SFAppPasswordSavingViewControllerClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __get_SFAppPasswordSavingViewControllerClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185F7499C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_SFExternalPasswordCredentialViewControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_SFExternalPasswordCredentialViewControllerClass_softClass;
  v7 = get_SFExternalPasswordCredentialViewControllerClass_softClass;
  if (!get_SFExternalPasswordCredentialViewControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_SFExternalPasswordCredentialViewControllerClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __get_SFExternalPasswordCredentialViewControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185F74A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIKeyboardPresentHiddenViewController(objc_class *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_alloc_init(a1);
  objc_msgSend(v4, "setAutofillVC:", v3);

  objc_msgSend(v4, "presentSelfWithAnimation:", 1);
}

void UIKeyboardSafariPresentCredentialPickerForType(uint64_t a1)
{
  objc_class *v2;
  objc_class *SFAppPasswordSavingViewControllerClass_0;
  id v4;
  id v5;

  objc_opt_class();
  if (a1 == 2)
  {
    v2 = (objc_class *)objc_opt_class();
    SFAppPasswordSavingViewControllerClass_0 = (objc_class *)get_SFAppPasswordSavingViewControllerClass_0();
  }
  else
  {
    if (a1 != 1)
      return;
    v2 = (objc_class *)objc_opt_class();
    SFAppPasswordSavingViewControllerClass_0 = (objc_class *)get_SFAppAutoFillPasswordViewControllerClass();
  }
  v4 = objc_alloc_init(SFAppPasswordSavingViewControllerClass_0);
  if (v4)
  {
    v5 = v4;
    UIKeyboardPresentHiddenViewController(v2, v4);

  }
}

void UIKeyboardSafariPresentExternalCredentialViewControllerForCredentialData(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = a1;
  v2 = (void *)MEMORY[0x1E0CB3710];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2050000000;
  v3 = (void *)qword_1ECD7F2F0;
  v15 = qword_1ECD7F2F0;
  if (!qword_1ECD7F2F0)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __getSFSafariCredentialClass_block_invoke;
    v11[3] = &unk_1E16B14C0;
    v11[4] = &v12;
    __getSFSafariCredentialClass_block_invoke((uint64_t)v11);
    v3 = (void *)v13[3];
  }
  v4 = objc_retainAutorelease(v3);
  _Block_object_dispose(&v12, 8);
  objc_msgSend(v2, "unarchivedObjectOfClass:fromData:error:", v4, v1, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_alloc_init((Class)get_SFExternalPasswordCredentialViewControllerClass());
  UIKeyboardSafariPresentCredentialPickerVC(v6);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_autofillContext");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "objectForKey:", CFSTR("_page_id"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKey:", CFSTR("_frame_id"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "autoFillWithExternalCredential:pageID:frameID:", v5, v9, v10);

  }
  else
  {
    objc_msgSend(v6, "autoFillWithExternalCredential:", v5);
  }

}

void sub_185F74CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIKeyboardSafariDepresentForViewService()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend((id)s_presentations, "copy");
  v1 = (void *)s_presentations;
  s_presentations = 0;

  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = v0;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (objc_msgSend(v7, "presentedAutofill", (_QWORD)v9))
        {
          +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "setDeactivatedKeyboard:forScene:", 0, 0);

        }
        _AttemptDismiss(v7, &__block_literal_global_152_3);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void SafariServicesLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!SafariServicesLibraryCore_frameworkLibrary)
    SafariServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!SafariServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SafariServicesLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIKeyboardVCPresenter.m"), 44, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

Class __getSFSafariCredentialClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7F2F8)
    qword_1ECD7F2F8 = _sl_dlopen();
  if (!qword_1ECD7F2F8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SafariFoundationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardVCPresenter.m"), 49, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("SFSafariCredential");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSFSafariCredentialClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKeyboardVCPresenter.m"), 50, CFSTR("Unable to find class %s"), "SFSafariCredential");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7F2F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185F7A3A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_185F88E34(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

double ConvertRectToScene(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;

  v9 = a1;
  objc_msgSend(v9, "window");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "windowScene");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "coordinateSpace");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "convertRect:fromCoordinateSpace:", v9, a2, a3, a4, a5);
  v14 = v13;

  return v14;
}

id _UIFloatingTabBarGetPlatformMetrics(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)_UIFloatingTabBarGetPlatformMetrics_metricsByIdiom;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    if (!_UIFloatingTabBarGetPlatformMetrics_metricsByIdiom)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = (void *)_UIFloatingTabBarGetPlatformMetrics_metricsByIdiom;
      _UIFloatingTabBarGetPlatformMetrics_metricsByIdiom = v5;

    }
    +[_UIVisualStyleRegistry registryForIdiom:](_UIVisualStyleRegistry, "registryForIdiom:", a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "visualStyleClassForStylableClass:", objc_opt_class());

    v4 = (void *)objc_opt_new();
    v8 = (void *)_UIFloatingTabBarGetPlatformMetrics_metricsByIdiom;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKey:", v4, v9);

  }
  return v4;
}

void sub_185F92D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___queue_scheduleUpdateAndSaveForPersistedSceneSessions_block_invoke()
{
  NSObject *v0;

  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Background task %lu expired, ending it"), "void _queue_scheduleUpdateAndSaveForPersistedSceneSessions(void)_block_invoke", qword_1ECD7F340);
  _persistenceQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v0, &__block_literal_global_437_0);

}

void UILocalNotificationCommonInit(void *a1)
{
  id v1;

  v1 = a1;
  objc_msgSend(v1, "setHasAction:", 1);
  objc_msgSend(v1, "setRegionTriggersOnce:", 1);

}

void sub_185F9464C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t comparePotentiallyNilObjects(void *a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  v5 = (void *)v4;
  if (v3 | v4)
    v6 = -1;
  else
    v6 = 0;
  if (v3)
    v7 = 1;
  else
    v7 = v6;
  if (v3 && v4)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v7 = objc_msgSend((id)v3, "compare:", v5);
    else
      v7 = 0;
  }

  return v7;
}

id _nextAdjustedFireDateForPreviousDateAndComponentsWithRepeatIntervalForCalendar(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v42;
  void *v43;

  v9 = a4;
  v10 = a5;
  objc_msgSend(v9, "dateByAddingComponents:toDate:options:", a2, a1, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10 || objc_msgSend(v10, "hour") == 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(v10, "minute") == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_29:
    if (((objc_msgSend(MEMORY[0x1E0C99D78], "_ui_largerComponentsRelativeToComponent:", 16) | 0x10) & a3) != 0)
    {
      v33 = objc_alloc_init(MEMORY[0x1E0C99D78]);
      objc_msgSend(v33, "setHour:", -13);
      objc_msgSend(v9, "timeZone");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "dateByAddingComponents:toDate:options:", v33, v11, 0);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "nextDaylightSavingTimeTransitionAfterDate:", v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      if (v36)
      {
        if (objc_msgSend(v11, "compare:", v36) != -1)
        {
          v37 = objc_msgSend(v34, "secondsFromGMTForDate:", v36);
          v38 = v37 - objc_msgSend(v34, "secondsFromGMTForDate:", v35);
          if (v38 < 0)
          {
            v39 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeInterval:sinceDate:", v36, (double)-v38);
            if (objc_msgSend(v11, "compare:", v39) == -1)
            {
              objc_msgSend(v11, "dateByAddingTimeInterval:", (double)v38);
              v40 = objc_claimAutoreleasedReturnValue();

              v11 = (void *)v40;
            }

          }
        }
      }

    }
    goto LABEL_37;
  }
  objc_msgSend(v9, "components:fromDate:", 254, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "hour") == 0x7FFFFFFFFFFFFFFFLL)
  {
    v13 = 0;
  }
  else
  {
    v14 = objc_msgSend(v10, "hour");
    v13 = v14 != objc_msgSend(v12, "hour");
  }
  if (objc_msgSend(v10, "minute") == 0x7FFFFFFFFFFFFFFFLL)
  {
    v15 = 0;
  }
  else
  {
    v16 = objc_msgSend(v10, "minute");
    v15 = v16 != objc_msgSend(v12, "minute");
  }
  if (!v13 && !v15)
  {

    goto LABEL_29;
  }
  v42 = a3;
  objc_msgSend(v9, "timeZone");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "nextDaylightSavingTimeTransitionAfterDate:", v11);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v17, "secondsFromGMTForDate:", v18);
  v20 = objc_msgSend(v17, "secondsFromGMTForDate:", v11);
  v21 = 0;
  v43 = (void *)v18;
  if (v18 && v19 - v20 >= 1)
  {
    v22 = v19 - v20;
    v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeInterval:sinceDate:", v11, (double)v22);
    v24 = objc_msgSend(v23, "compare:", v18);
    v21 = v24 != -1;
    if (v24 != -1)
    {
      objc_msgSend(v9, "components:fromDate:", 254, v23);
      v25 = objc_claimAutoreleasedReturnValue();

      v12 = (void *)v25;
    }

  }
  if (v13)
    objc_msgSend(v12, "setHour:", objc_msgSend(v10, "hour"));
  if (v15)
    objc_msgSend(v12, "setMinute:", objc_msgSend(v10, "minute"));
  objc_msgSend(v9, "dateFromComponents:", v12);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "components:fromDate:", 254, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v27;
  if (v21
    || (!v13 || (v29 = objc_msgSend(v27, "hour"), v29 == objc_msgSend(v10, "hour")))
    && (!v15 || (v30 = objc_msgSend(v28, "minute"), v30 == objc_msgSend(v10, "minute"))))
  {
    v31 = v26;

    v32 = 1;
    v11 = v31;
  }
  else
  {
    v32 = 0;
  }

  a3 = v42;
  if ((v32 & 1) == 0)
    goto LABEL_29;
LABEL_37:

  return v11;
}

Class __getCLRegionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD79E90)
    qword_1ECD79E90 = _sl_dlopen();
  if (!qword_1ECD79E90)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UILocalNotification.m"), 21, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CLRegion");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCLRegionClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UILocalNotification.m"), 22, CFSTR("Unable to find class %s"), "CLRegion");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1_15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void _skinToneImageVariantNameForSpecifierType(void *a1)
{
  id v1;
  id v2;
  id *v3;
  void *v4;
  id *v5;
  void *v6;
  id *v7;
  void *v8;
  id *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = a1;
  getEMFSkinToneSpecifierTypeFitzpatrickSilhouette();
  v2 = (id)objc_claimAutoreleasedReturnValue();

  if (v2 == v1)
    goto LABEL_21;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v3 = (id *)_MergedGlobals_1162;
  v18 = _MergedGlobals_1162;
  if (!_MergedGlobals_1162)
  {
    v4 = EmojiFoundationLibrary_3();
    v3 = (id *)dlsym(v4, "EMFSkinToneSpecifierTypeFitzpatrick1_2");
    v16[3] = (uint64_t)v3;
    _MergedGlobals_1162 = (uint64_t)v3;
  }
  _Block_object_dispose(&v15, 8);
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFSkinToneSpecifierTypeFitzpatrick1_2(void)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("UIKeyboardEmojiFamilyConfigurationUtilities.m"), 22, CFSTR("%s"), dlerror());
    goto LABEL_27;
  }
  if (*v3 == v1)
    goto LABEL_21;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v5 = (id *)qword_1ECD7F358;
  v18 = qword_1ECD7F358;
  if (!qword_1ECD7F358)
  {
    v6 = EmojiFoundationLibrary_3();
    v5 = (id *)dlsym(v6, "EMFSkinToneSpecifierTypeFitzpatrick3");
    v16[3] = (uint64_t)v5;
    qword_1ECD7F358 = (uint64_t)v5;
  }
  _Block_object_dispose(&v15, 8);
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFSkinToneSpecifierTypeFitzpatrick3(void)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("UIKeyboardEmojiFamilyConfigurationUtilities.m"), 23, CFSTR("%s"), dlerror());
    goto LABEL_27;
  }
  if (*v5 == v1)
    goto LABEL_21;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v7 = (id *)qword_1ECD7F360;
  v18 = qword_1ECD7F360;
  if (!qword_1ECD7F360)
  {
    v8 = EmojiFoundationLibrary_3();
    v7 = (id *)dlsym(v8, "EMFSkinToneSpecifierTypeFitzpatrick4");
    v16[3] = (uint64_t)v7;
    qword_1ECD7F360 = (uint64_t)v7;
  }
  _Block_object_dispose(&v15, 8);
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFSkinToneSpecifierTypeFitzpatrick4(void)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("UIKeyboardEmojiFamilyConfigurationUtilities.m"), 24, CFSTR("%s"), dlerror());
    goto LABEL_27;
  }
  if (*v7 == v1)
  {
LABEL_21:

    return;
  }
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v9 = (id *)qword_1ECD7F368;
  v18 = qword_1ECD7F368;
  if (!qword_1ECD7F368)
  {
    v10 = EmojiFoundationLibrary_3();
    v9 = (id *)dlsym(v10, "EMFSkinToneSpecifierTypeFitzpatrick5");
    v16[3] = (uint64_t)v9;
    qword_1ECD7F368 = (uint64_t)v9;
  }
  _Block_object_dispose(&v15, 8);
  if (v9)
  {
    if (*v9 == v1)
      goto LABEL_21;
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v11 = (void *)qword_1ECD7F370;
    v18 = qword_1ECD7F370;
    if (!qword_1ECD7F370)
    {
      v12 = EmojiFoundationLibrary_3();
      v11 = dlsym(v12, "EMFSkinToneSpecifierTypeFitzpatrick6");
      v16[3] = (uint64_t)v11;
      qword_1ECD7F370 = (uint64_t)v11;
    }
    _Block_object_dispose(&v15, 8);
    if (v11)
      goto LABEL_21;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFSkinToneSpecifierTypeFitzpatrick6(void)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("UIKeyboardEmojiFamilyConfigurationUtilities.m"), 26, CFSTR("%s"), dlerror());
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFSkinToneSpecifierTypeFitzpatrick5(void)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("UIKeyboardEmojiFamilyConfigurationUtilities.m"), 25, CFSTR("%s"), dlerror());
  }
LABEL_27:

  __break(1u);
}

void sub_185F9699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFSkinToneSpecifierTypeFitzpatrickSilhouette()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr;
  v8 = getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr;
  if (!getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_3();
    v0 = (id *)dlsym(v1, "EMFSkinToneSpecifierTypeFitzpatrickSilhouette");
    v6[3] = (uint64_t)v0;
    getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFSkinToneSpecifierTypeFitzpatrickSilhouette(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiFamilyConfigurationUtilities.m"), 27, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185F96AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UIKBImageSetForCoupleCharacter(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  char v14;
  id v15;
  void *v16;
  void **v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  _BOOL4 v32;
  id v33;
  id v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  _BOOL4 v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  _BOOL4 v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  void *v55;
  int v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  _BYTE v64[128];
  _QWORD v65[2];
  void *v66;
  void *v67;
  _QWORD v68[2];
  void (*v69)(uint64_t);
  void *v70;
  void **v71;
  void *v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v5;
  if ((objc_msgSend(getEMFEmojiCategoryClass_1(), "_isCoupleMultiSkinToneEmoji:", v8) & 1) == 0
    && !objc_msgSend(getEMFEmojiCategoryClass_1(), "_isComposedCoupleMultiSkinToneEmoji:", v8))
  {
    v30 = 0;
    v9 = v8;
    goto LABEL_60;
  }
  v9 = v8;
  if (objc_msgSend(v9, "length"))
  {
    v72 = 0;
    v73 = &v72;
    v74 = 0x2050000000;
    v10 = (void *)getEMFEmojiTokenClass_softClass_1;
    v75 = getEMFEmojiTokenClass_softClass_1;
    if (!getEMFEmojiTokenClass_softClass_1)
    {
      v68[0] = MEMORY[0x1E0C809B0];
      v68[1] = 3221225472;
      v69 = __getEMFEmojiTokenClass_block_invoke_3;
      v70 = &unk_1E16B14C0;
      v71 = &v72;
      __getEMFEmojiTokenClass_block_invoke_3((uint64_t)v68);
      v10 = v73[3];
    }
    v11 = objc_retainAutorelease(v10);
    _Block_object_dispose(&v72, 8);
    objc_msgSend(v11, "emojiTokenWithString:localeData:", v9, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12 && (objc_msgSend(v12, "supportsSkinToneVariants") & 1) != 0)
    {
      v14 = objc_msgSend(getEMFEmojiCategoryClass_1(), "_isCoupleMultiSkinToneEmoji:", v9);
      v15 = v9;
      if ((v14 & 1) == 0)
      {
        if (objc_msgSend(getEMFEmojiCategoryClass_1(), "_isComposedCoupleMultiSkinToneEmoji:", v15))
        {
          getEMFSkinToneSpecifierTypeFitzpatrickNone();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = v16;
          getEMFSkinToneSpecifierTypeFitzpatrickNone();
          v17 = (void **)objc_claimAutoreleasedReturnValue();
          v73 = v17;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v72, 2);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = (void *)objc_msgSend(v13, "copyWithSkinToneVariantSpecifier:", v18);

          objc_msgSend(v19, "string");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = _stringToScalarValues(v20, (uint64_t)v68);

          if (v21 == 5)
          {
            if ((_DWORD)v69 == 128104)
              v57 = 128107;
            else
              v57 = 128109;
            if (LODWORD(v68[0]) == 128104)
              v58 = 128108;
            else
              v58 = v57;
            v63 = v58;
            v22 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", &v63, 4, 2617245952);
          }
          else
          {
            if (v21 != 1)
            {
LABEL_71:

              goto LABEL_14;
            }
            objc_msgSend(v19, "string");
            v22 = objc_claimAutoreleasedReturnValue();
          }

        }
        else
        {
          v19 = (void *)objc_msgSend(v13, "copyWithSkinToneVariant:", 0);
          objc_msgSend(v19, "string");
          v22 = objc_claimAutoreleasedReturnValue();

        }
        v15 = (id)v22;
        goto LABEL_71;
      }
    }
    else
    {
      v15 = v9;
    }
LABEL_14:

    goto LABEL_16;
  }
  v15 = 0;
LABEL_16:

  v23 = _stringToScalarValues(v15, (uint64_t)v68);
  v24 = LODWORD(v68[0]);
  v27 = v23 == 1 && LODWORD(v68[0]) > 0x1F46A && LODWORD(v68[0]) < 0x1F46E;

  if (!v27)
  {
    v30 = 0;
LABEL_60:

    goto LABEL_61;
  }

  if ((v24 - 128107) <= 2)
  {
    v28 = (void *)qword_1E16D9680[(int)v24 - 128107];
    getEMFSkinToneSpecifierTypeFitzpatrickNone();
    v29 = (id)objc_claimAutoreleasedReturnValue();
    if (v29 == v6)
    {
      getEMFSkinToneSpecifierTypeFitzpatrickNone();
      v31 = (id)objc_claimAutoreleasedReturnValue();
      v32 = v31 == v7;

      if (v32)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%X-0-0-L"), v24);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v67 = v44;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v67, 1);
        v51 = objc_claimAutoreleasedReturnValue();
        goto LABEL_49;
      }
    }
    else
    {

    }
    getEMFSkinToneSpecifierTypeFitzpatrickSilhouette();
    v33 = (id)objc_claimAutoreleasedReturnValue();
    if (v33 != v6)
    {

LABEL_36:
      _skinToneImageVariantNameForSpecifierType(v6);
      v37 = v36;
      _skinToneImageVariantNameForSpecifierType(v7);
      v39 = v38;
      getEMFSkinToneSpecifierTypeFitzpatrickSilhouette();
      v40 = (id)objc_claimAutoreleasedReturnValue();
      v41 = v40 == v6;

      if (v41)
      {
        v42 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v28, "objectAtIndexedSubscript:", 0);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "stringWithFormat:", CFSTR("Silhouette_%@-Left-L"), v43);
        v44 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        if ((_DWORD)v24 == 128108)
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%X-%d-Left-L"), 128108, v37);
        else
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Women-%d-Left-L"), v37);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
      }
      getEMFSkinToneSpecifierTypeFitzpatrickSilhouette();
      v45 = (id)objc_claimAutoreleasedReturnValue();
      v46 = v45 == v7;

      v47 = (void *)MEMORY[0x1E0CB3940];
      if (v46)
      {
        objc_msgSend(v28, "objectAtIndexedSubscript:", 1);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "stringWithFormat:", CFSTR("Silhouette_%@-Right-L"), v49);
        v48 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%X-%d-Right-L"), v24, v39);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v65[0] = v48;
      v65[1] = v44;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v65, 2);
      v50 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_50;
    }
    getEMFSkinToneSpecifierTypeFitzpatrickSilhouette();
    v34 = (id)objc_claimAutoreleasedReturnValue();
    v35 = v34 == v7;

    if (!v35)
      goto LABEL_36;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Silhouette_%X-L"), v24);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v66 = v44;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v66, 1);
    v51 = objc_claimAutoreleasedReturnValue();
LABEL_49:
    v50 = (void *)v51;
LABEL_50:

    objc_msgSend(MEMORY[0x1E0C99E10], "orderedSet");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v9 = v50;
    v52 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v59, v64, 16);
    if (v52)
    {
      v53 = *(_QWORD *)v60;
      do
      {
        for (i = 0; i != v52; ++i)
        {
          if (*(_QWORD *)v60 != v53)
            objc_enumerationMutation(v9);
          +[UIImage kitImageNamed:](UIImage, "kitImageNamed:", *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * i));
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          if (v55)
            objc_msgSend(v30, "addObject:", v55);

        }
        v52 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v59, v64, 16);
      }
      while (v52);
    }

    goto LABEL_60;
  }
  v30 = 0;
LABEL_61:

  return v30;
}

void sub_185F97118(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void getEMFSkinToneSpecifierTypeFitzpatrickNone()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFSkinToneSpecifierTypeFitzpatrickNoneSymbolLoc_ptr;
  v8 = getEMFSkinToneSpecifierTypeFitzpatrickNoneSymbolLoc_ptr;
  if (!getEMFSkinToneSpecifierTypeFitzpatrickNoneSymbolLoc_ptr)
  {
    v1 = EmojiFoundationLibrary_3();
    v0 = (id *)dlsym(v1, "EMFSkinToneSpecifierTypeFitzpatrickNone");
    v6[3] = (uint64_t)v0;
    getEMFSkinToneSpecifierTypeFitzpatrickNoneSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFSkinToneSpecifierTypeFitzpatrickNone(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiFamilyConfigurationUtilities.m"), 21, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_185F97218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *EmojiFoundationLibrary_3()
{
  void *v0;
  void *v2;
  void *v3;

  if (!EmojiFoundationLibraryCore_frameworkLibrary_3)
    EmojiFoundationLibraryCore_frameworkLibrary_3 = _sl_dlopen();
  v0 = (void *)EmojiFoundationLibraryCore_frameworkLibrary_3;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *EmojiFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIKeyboardEmojiFamilyConfigurationUtilities.m"), 17, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

uint64_t _stringToScalarValues(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = objc_msgSend(v3, "length");
  *(_QWORD *)&v5 = MEMORY[0x1E0C80A78](v4).n128_u64[0];
  v7 = (char *)v16 - v6;
  objc_msgSend(v3, "getCharacters:range:", (char *)v16 - v6, 0, v4, v5);
  if (v4 < 1)
  {
    v14 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = &v7[2 * v8];
      v11 = *(unsigned __int16 *)v10;
      if (v4 - v8 >= 2 && (v11 & 0xFC00) == 0xD800 && (v12 = *((_WORD *)v10 + 1), v12 >> 10 == 55))
      {
        v11 = (v11 << 10) + v12 - 56613888;
        v13 = 2;
      }
      else
      {
        v13 = 1;
      }
      v14 = v9 + 1;
      *(_DWORD *)(a2 + 4 * v9) = v11;
      v8 += v13;
      ++v9;
    }
    while (v8 < v4);
  }

  return v14;
}

id getEMFEmojiCategoryClass_1()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEMFEmojiCategoryClass_softClass_1;
  v7 = getEMFEmojiCategoryClass_softClass_1;
  if (!getEMFEmojiCategoryClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiCategoryClass_block_invoke_1;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFEmojiCategoryClass_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185F97510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEMFEmojiCategoryClass_block_invoke_1(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_3();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiCategory");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiCategoryClass_softClass_1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiCategoryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiFamilyConfigurationUtilities.m"), 19, CFSTR("Unable to find class %s"), "EMFEmojiCategory");

    __break(1u);
  }
}

void __getEMFEmojiTokenClass_block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_3();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiToken");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiTokenClass_softClass_1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiTokenClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiFamilyConfigurationUtilities.m"), 18, CFSTR("Unable to find class %s"), "EMFEmojiToken");

    __break(1u);
  }
}

id UILocalNotificationToUNNotificationRequest_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  char v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = v2;
  if (objc_msgSend(v5, "isTriggeredByDate"))
  {
    v6 = (void *)MEMORY[0x1E0CEC6C0];
    objc_msgSend(v5, "fireDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeZone");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v5, "repeatInterval");
    objc_msgSend(v5, "repeatCalendar");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "triggerWithDate:timeZone:repeatInterval:repeatCalendar:", v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_5:
    goto LABEL_7;
  }
  if (objc_msgSend(v5, "isTriggeredByRegion"))
  {
    v12 = (void *)MEMORY[0x1E0CEC6C8];
    objc_msgSend(v5, "region");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "triggerWithRegion:repeats:", v7, objc_msgSend(v5, "regionTriggersOnce") ^ 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  v11 = 0;
LABEL_7:

  v13 = v5;
  v14 = objc_alloc_init(MEMORY[0x1E0CEC6E0]);
  v15 = objc_msgSend(v13, "applicationIconBadgeNumber");
  if (v15)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setBadge:", v16);

  }
  else
  {
    objc_msgSend(v14, "setBadge:");
  }
  v17 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(v13, "alertBody");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "localizedUserNotificationStringForKey:arguments:", v18, 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setBody:", v19);

  objc_msgSend(v13, "category");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setCategoryIdentifier:", v20);

  objc_msgSend(v14, "setHasDefaultAction:", objc_msgSend(v13, "hasAction"));
  objc_msgSend(v13, "alertAction");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setDefaultActionTitle:", v21);

  objc_msgSend(v13, "alertLaunchImage");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setLaunchImageName:", v22);

  v23 = v13;
  objc_msgSend(v23, "soundName");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "length");

  if (v25)
  {
    objc_msgSend(MEMORY[0x1E0CEC6E8], "soundWithAlertType:", 17);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "soundName");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "isEqualToString:", CFSTR("UILocalNotificationDefaultSoundName"));

    if ((v28 & 1) == 0)
    {
      objc_msgSend(v23, "soundName");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setToneFileName:", v29);

    }
  }
  else
  {
    v26 = 0;
  }

  objc_msgSend(v14, "setSound:", v26);
  v30 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(v23, "alertTitle");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "localizedUserNotificationStringForKey:arguments:", v31, 0);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTitle:", v32);

  objc_msgSend(v23, "userInfo");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setUserInfo:", v33);

  objc_msgSend(MEMORY[0x1E0CEC740], "requestWithIdentifier:content:trigger:", v4, v14, v11);
  v34 = (void *)objc_claimAutoreleasedReturnValue();

  return v34;
}

id UNNotificationToUILocalNotification_block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = a2;
  objc_msgSend(v2, "request");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _UNNotificationRequestToUILocalNotification(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "date");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setFireDate:", v5);
  return v4;
}

UILocalNotification *UNNotificationRequestToUILocalNotification_block_invoke_3(uint64_t a1, void *a2)
{
  return _UNNotificationRequestToUILocalNotification(a2);
}

UILocalNotification *_UNNotificationRequestToUILocalNotification(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  UILocalNotification *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v35;
  void *v36;

  v1 = a1;
  objc_msgSend(v1, "content");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "sound");
  v3 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "trigger");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "body");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "un_localizedStringKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = v7;
  }
  else
  {
    objc_msgSend(v2, "body");
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v9;

  objc_msgSend(v2, "title");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "un_localizedStringKey");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    v14 = v12;
  }
  else
  {
    objc_msgSend(v2, "title");
    v14 = (id)objc_claimAutoreleasedReturnValue();
  }
  v15 = v14;

  objc_msgSend(v2, "launchImageName");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v16, "length"))
  {
    objc_msgSend(v2, "launchImageName");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v17 = 0;
  }

  objc_msgSend(v2, "categoryIdentifier");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v18, "length"))
  {
    objc_msgSend(v2, "categoryIdentifier");
    v19 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v19 = 0;
  }

  v20 = objc_alloc_init(UILocalNotification);
  v36 = v10;
  -[UILocalNotification setAlertBody:](v20, "setAlertBody:", v10);
  -[UILocalNotification setAlertLaunchImage:](v20, "setAlertLaunchImage:", v17);
  -[UILocalNotification setAlertTitle:](v20, "setAlertTitle:", v15);
  objc_msgSend(v2, "badge");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[UILocalNotification setApplicationIconBadgeNumber:](v20, "setApplicationIconBadgeNumber:", objc_msgSend(v21, "integerValue"));

  v35 = (void *)v19;
  -[UILocalNotification setCategory:](v20, "setCategory:", v19);
  -[UILocalNotification setHasAction:](v20, "setHasAction:", objc_msgSend(v2, "hasDefaultAction"));
  objc_msgSend(v2, "defaultActionTitle");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[UILocalNotification setAlertAction:](v20, "setAlertAction:", v22);

  v23 = (void *)v3;
  if (v3)
  {
    v24 = v1;
    v25 = v15;
    v26 = v4;
    objc_msgSend(v23, "toneFileName");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "length");

    if (v28)
    {
      objc_msgSend(v23, "toneFileName");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      -[UILocalNotification setSoundName:](v20, "setSoundName:", v29);

    }
    else
    {
      -[UILocalNotification setSoundName:](v20, "setSoundName:", CFSTR("UILocalNotificationDefaultSoundName"));
    }
    v4 = v26;
    v15 = v25;
    v1 = v24;
  }
  -[UILocalNotification setUserInfo:](v20, "setUserInfo:", v4);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v5, "date");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[UILocalNotification setFireDate:](v20, "setFireDate:", v30);

    objc_msgSend(v5, "timeZone");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[UILocalNotification setTimeZone:](v20, "setTimeZone:", v31);

    objc_msgSend(v5, "repeatCalendar");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[UILocalNotification setRepeatCalendar:](v20, "setRepeatCalendar:", v32);

    -[UILocalNotification setRepeatInterval:](v20, "setRepeatInterval:", objc_msgSend(v5, "repeatInterval"));
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v5, "region");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      -[UILocalNotification setRegion:](v20, "setRegion:", v33);

      -[UILocalNotification setRegionTriggersOnce:](v20, "setRegionTriggersOnce:", objc_msgSend(v5, "repeats") ^ 1);
    }
  }

  return v20;
}

id UILocalNotificationFromData(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = (void *)MEMORY[0x186DC9484]();
  if (v1)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v1, 0);
    objc_msgSend(v3, "decodeObjectOfClass:forKey:", objc_opt_class(), *MEMORY[0x1E0CB2CD0]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "finishDecoding");

  }
  else
  {
    v4 = 0;
  }
  objc_autoreleasePoolPop(v2);

  return v4;
}

void _confirmMatchingWritingToolsSession(void *a1, void *a2, const char *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;

  v5 = a1;
  v6 = a2;
  v16 = v5;
  v7 = v6;
  v8 = v7;
  if (v16 == v7)
  {

    v10 = v16;
  }
  else
  {
    if (v16 && v7)
    {
      v9 = objc_msgSend(v16, "isEqual:", v7);

      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {

    }
    v11 = (void *)MEMORY[0x1E0CB3940];
    NSStringFromSelector(a3);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v12;
    if (v16)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("different active session %@"), v16);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "stringWithFormat:", CFSTR("-%@ for session %@ with %@"), v13, v8, v14);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(v11, "stringWithFormat:", CFSTR("-%@ for session %@ with %@"), v12, v8, CFSTR("no active session"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }

    if (os_variant_has_internal_diagnostics())
    {
      objc_msgSend(CFSTR("Problem with WritingTools delegate-message delivery. "), "stringByAppendingString:", v10);
      v15 = objc_claimAutoreleasedReturnValue();

      v10 = (void *)v15;
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("%@"), v10);
  }

LABEL_15:
}

void UIUserNotificationActionCommonSetup(void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, char a7, char a8)
{
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;

  v15 = a5;
  v16 = a3;
  v23 = a1;
  v17 = objc_msgSend(a2, "copy");
  v18 = (void *)v23[4];
  v23[4] = v17;

  v19 = objc_msgSend(v16, "copy");
  v20 = (void *)v23[5];
  v23[5] = v19;

  v23[6] = a4;
  v21 = objc_msgSend(v15, "copy");

  v22 = (void *)v23[7];
  v23[7] = v21;

  v23[8] = a6;
  *((_BYTE *)v23 + 8) = a7;
  *((_BYTE *)v23 + 9) = a8;

}

id UIUserNotificationCategoryToUNNotificationCategory_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = a2;
  objc_msgSend(v2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "actionsForContext:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bs_map:", &__block_literal_global_4_12);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "actionsForContext:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "bs_map:", &__block_literal_global_5_7);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEC720], "categoryWithIdentifier:actions:minimalActions:intentIdentifiers:options:", v3, v5, v7, MEMORY[0x1E0C9AA60], 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id _UNNotificationActionFromUIUserNotificationAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = a1;
  objc_msgSend(v1, "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "title");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v1, "isAuthenticationRequired");
  if (objc_msgSend(v1, "isDestructive"))
    v4 |= 2uLL;
  if (!objc_msgSend(v1, "activationMode"))
    v4 |= 4uLL;
  if (objc_msgSend(v1, "behavior") == 1)
  {
    objc_msgSend(v1, "parameters");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKey:", CFSTR("UIUserNotificationTextInputActionButtonTitleKey"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CEC780], "actionWithIdentifier:title:options:textInputButtonTitle:textInputPlaceholder:", v2, v3, v4, v6, &stru_1E16EDF20);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEC700], "actionWithIdentifier:title:options:", v2, v3, v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v7;
}

__n128 _UIUpdateSchedulerRequestUpdate@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6;
  __n128 *v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  double v18;
  __n128 result;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 640) != 1
    || (v7 = (__n128 *)(v6 + 616), a2)
    && (*(_QWORD *)(v6 + 616) == *(_QWORD *)a2 ? (v8 = *(_QWORD *)(v6 + 624) == *(_QWORD *)(a2 + 8)) : (v8 = 0),
        v8 ? (v9 = *(_QWORD *)(v6 + 632) == *(_QWORD *)(a2 + 16)) : (v9 = 0),
        !v9))
  {
    applyRequestRegistryChanges(*(_QWORD *)(a1 + 8));
    applyTimingChanges((uint64_t *)v6);
    if (a2)
    {
      v10 = *(_QWORD *)(a2 + 16);
      *(_OWORD *)(v6 + 616) = *(_OWORD *)a2;
      *(_QWORD *)(v6 + 632) = v10;
      *(_DWORD *)(v6 + 640) = 1;
      *(_OWORD *)(v6 + 696) = 0u;
      v11 = *(_QWORD *)(v6 + 616);
      *(_QWORD *)(v6 + 648) = v11;
      *(_OWORD *)(v6 + 664) = *(_OWORD *)(v6 + 624);
      *(_QWORD *)(v6 + 656) = *(_QWORD *)(v6 + 560) + v11;
    }
    else
    {
      v12 = *(_QWORD *)(v6 + 600) + *(_QWORD *)(v6 + 744) + 1000000000000000;
      v13 = mach_absolute_time() + 1000000000000000 + *(_QWORD *)(v6 + 576);
      v14 = *(_QWORD *)(v6 + 552);
      if (!v14 || !*(_BYTE *)(v14 + 28))
        -[_UIUpdateTarget start](v14);
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      frameSourceGetTiming(&v20, v6, v12, v13, &v22);
      *(_OWORD *)(v6 + 616) = v20;
      v15 = v22;
      *(_QWORD *)(v6 + 632) = v21;
      *(_DWORD *)(v6 + 640) = 1;
      *(_QWORD *)(v6 + 696) = *((_QWORD *)&v24 + 1);
      *(_QWORD *)(v6 + 704) = v23;
      *(_QWORD *)(v6 + 648) = *(_QWORD *)(v6 + 616);
      *(_OWORD *)(v6 + 664) = *(_OWORD *)(v6 + 624);
      *(_QWORD *)(v6 + 656) = v15;
    }
    *(_WORD *)(v6 + 680) = 0;
    *(_QWORD *)(v6 + 688) = *(_QWORD *)(v6 + 592);
    v7 = (__n128 *)(v6 + 616);
    v16 = _UIUpdateSetCurrentTiming((unint64_t *)(v6 + 616), 1);
    if (!*(_DWORD *)(v6 + 584))
      objc_msgSend(MEMORY[0x1E0CD28B0], "finishFrameWithToken:", 0, v16);
    v17 = *(_QWORD *)(v6 + 664);
    v18 = _UIMediaTimeForMachTime(*(_QWORD *)(v6 + 648));
    *(_DWORD *)(v6 + 584) = objc_msgSend(MEMORY[0x1E0CD28B0], "startFrameWithReason:beginTime:commitDeadline:", 35, v18, _UIMediaTimeForMachTime(v17));
    **(_DWORD **)v6 = 3;
    signalChanges(a1, 1);
  }
  result = *v7;
  *a3 = *v7;
  a3[1].n128_u64[0] = v7[1].n128_u64[0];
  return result;
}

uint64_t (*(*schedulerStepScheduledBegin(uint64_t a1))(uint64_t a1, uint64_t *a2))()
{
  double v3;

  if ((uint64_t *)_UIUpdateScheduledSequence != &_UIUpdateSequenceScheduledItemInternal
    || _UIUpdateSequenceScheduledItemInternal != 0)
  {
    v3 = _UIMediaTimeForMachTime(*(_QWORD *)(a1 + 648));
    if (_UIUpdateCycleDebugTracingCheck && _UIUpdateCycleDebugTracingCheck())
    {
      kdebug_trace();
      _UIUpdateSequenceRun((uint64_t **)&_UIUpdateScheduledSequence, a1 + 616, v3);
      kdebug_trace();
    }
    else
    {
      _UIUpdateSequenceRun((uint64_t **)&_UIUpdateScheduledSequence, a1 + 616, v3);
    }
  }
  return schedulerStepScheduledWaitingMainInputs;
}

uint64_t (*(*schedulerStepScheduledLowLatencySection(uint64_t a1))(uint64_t a1))()
{
  double v2;
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)(a1 + 681) = *(_BYTE *)(a1 + 761);
  v2 = _UIMediaTimeForMachTime(*(_QWORD *)(a1 + 648));
  v3 = mach_absolute_time();
  _UIQOSManagedCommitsBegin(CFSTR("LowLatency"), CFSTR("LowLatency"));
  _UIQOSProcessingBegin("UIUCLoLa", 2, v3, *(_QWORD *)(a1 + 664));
  kdebug_trace();
  qword_1ECD82BF8 = v3;
  _UIUpdateSequenceRun((uint64_t **)&_UIUpdateLowLatencySequence, a1 + 616, v2);
  v4 = _UIMachTimeForMediaTime(0.0003);
  if (v4 <= mach_absolute_time() - v3)
    _UIQOSMarkIntervalRelevant();
  kdebug_trace();
  _UIQOSProcessingEnd();
  _UIQOSManagedCommitsEnd(CFSTR("LowLatency"), CFSTR("LowLatency"));
  return schedulerStepScheduledDone;
}

uint64_t __setupUpdateSequence_block_invoke_3(uint64_t a1, uint64_t a2)
{
  if (objc_msgSend(MEMORY[0x1E0CD28B0], "currentState"))
    _UIQOSMarkIntervalRelevant();
  if ((_QWORD)xmmword_1ECD82BE0)
    objc_msgSend(MEMORY[0x1E0CD28B0], "setFrameInputTime:withToken:", *(unsigned int *)(a2 + 584), _UIMediaTimeForMachTime(xmmword_1ECD82BE0));
  if (*((_QWORD *)&xmmword_1ECD82BE0 + 1))
    objc_msgSend(MEMORY[0x1E0CD28B0], "setRemoteInputMachTime:");
  if (*(_BYTE *)(a2 + 761) && !*(_BYTE *)(a2 + 762))
  {
    if (qword_1ECD7F490 != -1)
      dispatch_once(&qword_1ECD7F490, &__block_literal_global_26_4);
    if (_MergedGlobals_1165)
      objc_msgSend(MEMORY[0x1E0CD28B0], "setEmptyLowLatency:", 1);
    else
      objc_msgSend(MEMORY[0x1E0CD28B0], "setLowLatency:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "activate");
  }
  *(_DWORD *)(a2 + 352) = 0;
  _UIUpdateInputSetInputChanged(*(_DWORD **)(a2 + 400), a2 + 352);
  return _UIApplicationFlushCATransaction(1);
}

unint64_t __minScheduledDuration_block_invoke()
{
  int v0;
  double v1;
  unint64_t result;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  v1 = 0.002;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    v3 = _UIInternalPreference_UpdateSchedulerMinScheduledDurationSeconds;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_UpdateSchedulerMinScheduledDurationSeconds)
    {
      while (v0 >= v3)
      {
        _UIInternalPreferenceSync(v0, &_UIInternalPreference_UpdateSchedulerMinScheduledDurationSeconds, (uint64_t)CFSTR("UpdateSchedulerMinScheduledDurationSeconds"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
        v3 = _UIInternalPreference_UpdateSchedulerMinScheduledDurationSeconds;
        if (v0 == _UIInternalPreference_UpdateSchedulerMinScheduledDurationSeconds)
        {
          v1 = 0.002;
          goto LABEL_4;
        }
      }
      v1 = *(double *)&qword_1EDDA8208;
    }
  }
LABEL_4:
  result = _UIMachDurationForMediaDuration(v1);
  qword_1ECD7F498 = result;
  return result;
}

id _bestMatchConformingToTypes(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  void *v26;
  id v27;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = v4;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v42;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v42 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
        if ((objc_msgSend(v6, "containsObject:", v12) & 1) != 0)
        {
          v27 = v12;
          goto LABEL_31;
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
      if (v9)
        continue;
      break;
    }
  }

  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v13 = v7;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v38;
    v29 = *(_QWORD *)v38;
    v30 = v13;
    do
    {
      v17 = 0;
      v31 = v15;
      do
      {
        if (*(_QWORD *)v38 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(MEMORY[0x1E0CEC3F8], "_typeWithIdentifier:allowUndeclared:", *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * v17), 1, v29, v30);
        v18 = objc_claimAutoreleasedReturnValue();
        if (v18)
        {
          v19 = (void *)v18;
          v32 = v17;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v20 = v6;
          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v33, v45, 16);
          if (v21)
          {
            v22 = v21;
            v23 = *(_QWORD *)v34;
            while (2)
            {
              for (j = 0; j != v22; ++j)
              {
                if (*(_QWORD *)v34 != v23)
                  objc_enumerationMutation(v20);
                v25 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * j);
                objc_msgSend(MEMORY[0x1E0CEC3F8], "_typeWithIdentifier:allowUndeclared:", v25, 1);
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                if (v26 && (objc_msgSend(v19, "conformsToType:", v26) & 1) != 0)
                {
                  v27 = v25;

                  goto LABEL_31;
                }

              }
              v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v33, v45, 16);
              if (v22)
                continue;
              break;
            }
          }

          v16 = v29;
          v13 = v30;
          v15 = v31;
          v17 = v32;
        }
        ++v17;
      }
      while (v17 != v15);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
      v27 = 0;
    }
    while (v15);
  }
  else
  {
    v27 = 0;
  }
LABEL_31:

  return v27;
}

void sub_185FA81D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  id *v14;
  uint64_t v15;

  objc_destroyWeak(v14);
  objc_destroyWeak((id *)(v15 - 88));
  _Block_object_dispose(&a14, 8);
  _Unwind_Resume(a1);
}

void sub_185FA8AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 224), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__117(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_185FA8EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___initializeAllowsCreationOfFileURLFromItemProvider_block_invoke()
{
  uint64_t result;

  result = _UIIsPrivateMainBundle();
  _MergedGlobals_1166 = result ^ 1;
  return result;
}

void sub_185FA92EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _itemLayoutFromPreview(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  _OWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  __int128 v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  __int128 v30;
  CGAffineTransform v36;
  CGAffineTransform t1;
  CGAffineTransform v38;

  v7 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v8 = (_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v9 = a3;
  objc_msgSend(v7, "size");
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  objc_msgSend(v7, "target");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "center");
  v14 = v13;
  v16 = v15;
  objc_msgSend(v7, "target");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "container");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = _UIContextMenuConvertPointBetweenViews(v18, v9, v14, v16);
  v21 = v20;

  *(double *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 48) = 0;
  objc_msgSend(v7, "target");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v22;
  if (v22)
    objc_msgSend(v22, "transform");
  else
    memset(&v38, 0, sizeof(v38));
  v24 = *(_OWORD *)&v38.c;
  *v8 = *(_OWORD *)&v38.a;
  *(_OWORD *)(a1 + 88) = v24;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v38.tx;

  if (a4)
  {
    memset(&v38, 0, sizeof(v38));
    objc_msgSend(v7, "target");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "container");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "target");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "container");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "_window");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    _UIGetTransformBetweenViews(v26, v29, 1, (uint64_t)&v38);

    v30 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)&t1.a = *v8;
    *(_OWORD *)&t1.c = v30;
    *(_OWORD *)&t1.tx = *(_OWORD *)(a1 + 104);
    v36 = v38;
    CGAffineTransformConcat((CGAffineTransform *)(a1 + 72), &t1, &v36);
  }
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;

}

id _DefaultParametersForView(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = (void *)objc_opt_new();
  objc_msgSend(v1, "backgroundColor");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    objc_msgSend(v1, "backgroundColor");
  else
    +[UIColor clearColor](UIColor, "clearColor");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setBackgroundColor:", v4);

  return v2;
}

void sub_185FAA89C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_185FAB890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FAC164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FAD694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __mergedOptionDictionaries(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "count"))
  {
    v5 = (void *)objc_msgSend(v3, "mutableCopy");
    objc_msgSend(v5, "addEntriesFromDictionary:", v4);

    v3 = v5;
  }

  return v3;
}

void sub_185FAF26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

id _UIFontPickerLoadRecentFontDescriptors()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 7);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "arrayForKey:", CFSTR("UIFontPickerRecentFamilies"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        +[_UIFontPickerFontInfo infoWithName:](_UIFontPickerFontInfo, "infoWithName:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v6));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v7, "isFontFamilyAvailable") && (unint64_t)objc_msgSend(v0, "count") <= 7)
        {
          objc_msgSend(v7, "fontDescriptor");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v0, "addObject:", v8);

        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  return v0;
}

void _UIFontPickerLoadRecentsMatchingConfiguration(void *a1)
{
  _UIFontPickerLoadRecentsMatchingConfigurationForSuite(a1, CFSTR("com.apple.UIKit.FontPickerStorage"));
}

void _UIFontPickerLoadRecentsMatchingConfigurationForSuite(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v3 = a1;
  v4 = a2;
  v32 = 0;
  v33 = &v32;
  v34 = 0x2050000000;
  v5 = (void *)qword_1ECD7F4F0;
  v35 = qword_1ECD7F4F0;
  v6 = MEMORY[0x1E0C809B0];
  if (!qword_1ECD7F4F0)
  {
    v27 = MEMORY[0x1E0C809B0];
    v28 = 3221225472;
    v29 = (uint64_t)__getFontPickerClientFontContextClass_block_invoke;
    v30 = &unk_1E16B14C0;
    v31 = &v32;
    __getFontPickerClientFontContextClass_block_invoke((uint64_t)&v27);
    v5 = (void *)v33[3];
  }
  v7 = objc_retainAutorelease(v5);
  _Block_object_dispose(&v32, 8);
  objc_msgSend(v3, "_clientFontContextEndpoint");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(v7, "sharedInstanceForEndpoint:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", v4);
    objc_msgSend(v14, "arrayForKey:", CFSTR("UIFontPickerRecentFamilies"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v23[0] = v6;
    v23[1] = 3221225472;
    v23[2] = ___UIFontPickerLoadRecentsMatchingConfigurationForSuite_block_invoke;
    v23[3] = &unk_1E16D9B68;
    v24 = v3;
    v16 = v13;
    v25 = v16;
    v26 = v15;
    v17 = v15;
    v18 = v3;
    objc_msgSend(v9, "runBlockInClientFontContext:", v23);
    v19 = v26;
    v20 = v16;

    return;
  }
  v27 = 0;
  v28 = (uint64_t)&v27;
  v29 = 0x2020000000;
  v10 = off_1ECD7F4F8;
  v30 = off_1ECD7F4F8;
  if (!off_1ECD7F4F8)
  {
    v11 = FontServicesLibrary();
    v10 = dlsym(v11, "FSFontPickerSupportListenerEndpoint");
    *(_QWORD *)(v28 + 24) = v10;
    off_1ECD7F4F8 = v10;
  }
  _Block_object_dispose(&v27, 8);
  if (v10)
  {
    ((void (*)(void))v10)();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "sharedInstanceForEndpoint:", v12);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSXPCListenerEndpoint *_FSFontPickerSupportListenerEndpoint(void)");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("UIFontPickerViewControllerConfiguration.m"), 20, CFSTR("%s"), dlerror());

  __break(1u);
}

void sub_185FB00B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIFontPickerPersistToRecents(void *a1)
{
  _UIFontPickerPersistToRecentsForSuite(a1, CFSTR("com.apple.UIKit.FontPickerStorage"));
}

void _UIFontPickerPersistToRecentsForSuite(void *a1, void *a2)
{
  id v3;
  objc_class *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;

  v3 = a1;
  v4 = (objc_class *)MEMORY[0x1E0C99EA0];
  v5 = a2;
  v6 = (void *)objc_msgSend([v4 alloc], "initWithSuiteName:", v5);

  objc_msgSend(v6, "arrayForKey:", CFSTR("UIFontPickerRecentFamilies"));
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  v9 = (void *)MEMORY[0x1E0C9AA60];
  if (v7)
    v9 = (void *)v7;
  v10 = v9;

  v11 = (void *)objc_opt_new();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = ___UIFontPickerPersistToRecentsForSuite_block_invoke;
  v16[3] = &unk_1E16BD3E8;
  v15 = v3;
  v17 = v15;
  v12 = v11;
  v18 = v12;
  objc_msgSend(v10, "enumerateObjectsUsingBlock:", v16);

  if (objc_msgSend(v15, "isFontFamilyAvailable"))
  {
    objc_msgSend(v15, "fontName");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      objc_msgSend(v12, "insertObject:atIndex:", v13, 0);
    }
    else
    {
      objc_msgSend(v15, "familyName");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "insertObject:atIndex:", v14, 0);

    }
  }
  objc_msgSend(v6, "setObject:forKey:", v12, CFSTR("UIFontPickerRecentFamilies"));

}

void __getFontPickerClientFontContextClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  FontServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("FontPickerClientFontContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD7F4F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFontPickerClientFontContextClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIFontPickerViewControllerConfiguration.m"), 19, CFSTR("Unable to find class %s"), "FontPickerClientFontContext");

    __break(1u);
  }
}

void *FontServicesLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!FontServicesLibraryCore_frameworkLibrary)
    FontServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)FontServicesLibraryCore_frameworkLibrary;
  if (!FontServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *FontServicesLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIFontPickerViewControllerConfiguration.m"), 18, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_185FB252C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __createDataWithCompletion_block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __createDataWithCompletion_block_invoke_2;
  v3[3] = &unk_1E16D9A08;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  if ((objc_msgSend(v2, "_createUserActivityDataWithOptions:completionHandler:", 0, v3) & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t __createDataWithCompletion_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_185FB4340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getFSFontPickerSupportListenerEndpointSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1ECD7F520)
    qword_1ECD7F520 = _sl_dlopen();
  v2 = (void *)qword_1ECD7F520;
  if (!qword_1ECD7F520)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *FontServicesLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("_UIFontPickerActionHostToClient.m"), 18, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "FSFontPickerSupportListenerEndpoint");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  _MergedGlobals_1170 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void sub_185FB5B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_185FB5F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_185FB6160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t _createDataOwnerKey()
{
  return pthread_key_create((pthread_key_t *)&_dataOwnerKey, 0);
}

void _pasteboardCacheQueue_removeItemCollectionForName(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  _pasteboardCacheQueue_PasteboardNametoItemCollectionMap();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObjectForKey:", v1);

}

void sub_185FB8B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _sendPasteboardChangedNotification(void *a1)
{
  void *v1;
  id v2;
  id v3;

  v1 = (void *)MEMORY[0x1E0CB37D0];
  v2 = a1;
  objc_msgSend(v1, "defaultCenter");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "postNotificationName:object:", CFSTR("UIPasteboardChangedNotification"), v2);

}

void _pasteboardCacheQueue_removePasteboardForName(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  _pasteboardCacheQueue_PasteboardNameToPasteboardMap();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObjectForKey:", v1);

}

void sub_185FB9074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _pasteboardAuthenticatedMessageQueue()
{
  if (qword_1ECD7B268 != -1)
    dispatch_once(&qword_1ECD7B268, &__block_literal_global_301_0);
  return (id)qword_1ECD7B260;
}

void sub_185FB94B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185FBA750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UISecurelyDecodePasteboardDataToObject(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v3, 0);
  objc_msgSend(v4, "decodeObjectOfClass:forKey:", a2, *MEMORY[0x1E0CB2CD0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "finishDecoding");

  return v5;
}

void sub_185FBAD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185FBB51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 200), 8);
  _Block_object_dispose((const void *)(v11 - 152), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _recordHangAssertionIfNecessaryForResponseMetadata(void *a1)
{
  id v1;

  v1 = a1;
  if (pthread_main_np() == 1
    && objc_msgSend(v1, "authorizationMachAbsoluteStartTime")
    && objc_msgSend(v1, "authorizationMachAbsoluteEndTime"))
  {
    objc_msgSend(v1, "authorizationMachAbsoluteStartTime");
    HTBeginNonResponsiveTaskWithNameAndExpirationAtTime();
    objc_msgSend(v1, "authorizationMachAbsoluteEndTime");
    HTEndNonResponsiveTaskAtTime();
  }

}

void sub_185FBB8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185FBBCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 176), 8);
  _Block_object_dispose((const void *)(v28 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_185FBC264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

UIImage *ConvertValueToData(void *a1, void *a2)
{
  UIImage *v3;
  id v4;
  UIImage *v5;
  UIImage *v6;

  v3 = a1;
  v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = v3;
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[UIImage dataUsingEncoding:](v3, "dataUsingEncoding:", 4);
    v5 = (UIImage *)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
LABEL_8:
    _UIEncodeObjectToPasteboardData(v3);
    v5 = (UIImage *)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (!objc_msgSend(v4, "isEqual:", 0x1E1759AC0))
    {
      UIImagePNGRepresentation(v3);
      v5 = (UIImage *)objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    _convertURLToDataRepresentation(v3);
  else
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v3, 200, 0, 0);
  v5 = (UIImage *)objc_claimAutoreleasedReturnValue();
LABEL_9:
  v6 = v5;

  return v6;
}

void sub_185FBD1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

id _convertURLToDataRepresentation(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = a1;
  objc_msgSend(v1, "baseURL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1E0C99D20];
  if (v2)
  {
    objc_msgSend(v1, "relativeString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "absoluteString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "arrayWithObjects:", v4, v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(v1, "absoluteString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "arrayWithObjects:", v4, &stru_1E16EDF20, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v6, 200, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id _UIEncodeObjectToPasteboardData(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  v2 = -[NSKeyedArchiver initRequiringSecureCoding:]([_UIInterprocessKeyedArchiver alloc], "initRequiringSecureCoding:", 0);
  objc_msgSend(v2, "encodeObject:forKey:", v1, *MEMORY[0x1E0CB2CD0]);
  objc_msgSend(v2, "encodedData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _coerceItemToClass(void *a1, uint64_t a2)
{
  id v3;
  dispatch_semaphore_t v4;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  _QWORD v10[4];
  NSObject *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v3 = a1;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__148;
  v24 = __Block_byref_object_dispose__148;
  v25 = 0;
  if (objc_msgSend(v3, "uikit_canInstantiateObjectOfClass:", a2))
  {
    v14 = 0;
    v15 = &v14;
    v16 = 0x3032000000;
    v17 = __Block_byref_object_copy__148;
    v18 = __Block_byref_object_dispose__148;
    v19 = 0;
    v4 = dispatch_semaphore_create(0);
    +[_UIConcretePasteboard _loadRequestContextForBlockingUIKitCall](_UIConcretePasteboard, "_loadRequestContextForBlockingUIKitCall");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___coerceItemToClass_block_invoke;
    v10[3] = &unk_1E16D9F88;
    v12 = &v20;
    v13 = &v14;
    v6 = v4;
    v11 = v6;
    v7 = (id)objc_msgSend(v3, "uikit_loadObjectOfClass:context:completionBlock:", a2, v5, v10);

    dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    _recordHangAssertionIfNecessaryForResponseMetadata((void *)v15[5]);
    _Block_object_dispose(&v14, 8);

  }
  v8 = (id)v21[5];
  _Block_object_dispose(&v20, 8);

  return v8;
}

void sub_185FBE7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185FBEB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _pasteboardCompletionQueue()
{
  if (qword_1ECD7B278 != -1)
    dispatch_once(&qword_1ECD7B278, &__block_literal_global_308);
  return (id)qword_1ECD7B270;
}

void sub_185FC112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PBUTIForNSAttributedStringDocumentType(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECD7B288;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECD7B288, &__block_literal_global_310);
  objc_msgSend((id)qword_1ECD7B280, "objectForKeyedSubscript:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void ___serverConnection_block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  id v4;
  _QWORD block[4];
  id v6;

  v2 = a2;
  _notificationStateQueue();
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___serverConnection_block_invoke_3;
  block[3] = &unk_1E16B1B28;
  v6 = v2;
  v4 = v2;
  dispatch_sync(v3, block);

}

void ___serverConnection_block_invoke_3(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0D6C170]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedLongLongValue");

  if (v3 == _notificationStateQueue_notificationState)
  {
    dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_290_1);
  }
  else
  {
    _notificationStateQueue_notificationState = v3;
    _pasteboardCacheQueue();
    v4 = objc_claimAutoreleasedReturnValue();
    dispatch_async(v4, &__block_literal_global_284);

  }
}

void ___serverConnection_block_invoke_4()
{
  _pasteboardCacheQueue_removePersistentPasteboardsFromNameToItemCollectionMap();
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_290_1);
}

void _pasteboardCacheQueue_removePersistentPasteboardsFromNameToItemCollectionMap()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _pasteboardCacheQueue_PasteboardNametoItemCollectionMap();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        v6 = *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i);
        objc_msgSend(v1, "objectForKeyedSubscript:", v6);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v7, "isPersistent"))
          objc_msgSend(v0, "addObject:", v6);

      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }
  objc_msgSend(v1, "removeObjectsForKeys:", v0);

}

void ___serverConnection_block_invoke_6()
{
  NSObject *v0;

  _pasteboardCacheQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v0, &__block_literal_global_287_0);

}

void ___serverConnection_block_invoke_8()
{
  NSObject *v0;

  _pasteboardCacheQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v0, &__block_literal_global_289_0);

}

void ___dispatchPasteboardChangedSyncNotification_block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", 0x1E1759BA0, 0);

}

id ___pasteboardCacheQueue_existingItemCollectionWithName_block_invoke()
{
  NSObject *v0;
  id v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  id v9;

  v4 = 0;
  v5 = &v4;
  v6 = 0x3032000000;
  v7 = __Block_byref_object_copy__148;
  v8 = __Block_byref_object_dispose__148;
  v9 = 0;
  _pasteboardAuthenticatedMessageQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___pasteboardCacheQueue_existingItemCollectionWithName_block_invoke_2;
  block[3] = &unk_1E16B14C0;
  block[4] = &v4;
  dispatch_sync(v0, block);

  v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void ___pasteboardCacheQueue_existingItemCollectionWithName_block_invoke_2(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (id)_pasteboardLastAuthenticatedMessage);
}

void *___pasteboardCacheQueue_existingItemCollectionWithName_block_invoke_3()
{
  pthread_once(&_dataOwnerKeyOnce, (void (*)(void))_createDataOwnerKey);
  return pthread_getspecific(_dataOwnerKey);
}

void *___getTemporaryLocalGeneralPasteboard_block_invoke()
{
  pthread_once(&_dataOwnerKeyOnce, (void (*)(void))_createDataOwnerKey);
  return pthread_getspecific(_dataOwnerKey);
}

void ___pasteboardAuthenticatedMessageQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.UIKit.pasteboard.authenticated-message-queue", 0);
  v1 = (void *)qword_1ECD7B260;
  qword_1ECD7B260 = (uint64_t)v0;

}

void ___coerceItemToType_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___coerceItemToType_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___coerceItemToType_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___coerceItemToType_block_invoke_4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___coerceItemToType_block_invoke_5(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___coerceItemToClass_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v12 = a2;
  v8 = a3;
  if (!a4)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;
  v11 = v8;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___pasteboardCompletionQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.UIKit.pasteboard.completion-queue", 0);
  v1 = (void *)qword_1ECD7B270;
  qword_1ECD7B270 = (uint64_t)v0;

}

void sub_185FC4594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_185FC6138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FC6EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FC92C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UITextInputSourceIsKeyboard(unint64_t a1)
{
  return (a1 < 9) & (0x1F2u >> a1);
}

void UIContentConfigurationAlertForReplacedContentView(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  int v18;
  id v19;
  __int16 v20;
  id v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = UIContentConfigurationAlertForReplacedContentView___s_category;
  if (!UIContentConfigurationAlertForReplacedContentView___s_category)
  {
    v14 = __UILogCategoryGetNode("ContentConfiguration", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v14, (unint64_t *)&UIContentConfigurationAlertForReplacedContentView___s_category);
  }
  v15 = *(NSObject **)(v14 + 8);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v16 = v15;
    objc_msgSend(v9, "capitalizedString");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138413570;
    v19 = v9;
    v20 = 2112;
    v21 = v13;
    v22 = 2112;
    v23 = v17;
    v24 = 2112;
    v25 = v10;
    v26 = 2112;
    v27 = v11;
    v28 = 2112;
    v29 = v12;
    _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "Warning: You are setting a new content configuration to a %@ that has an existing content configuration, but the existing content view does not support the new configuration. This means the existing content view must be replaced with a new content view created from the new configuration, instead of updating the existing content view directly, which is expensive. %@ Make a symbolic breakpoint at UIContentConfigurationAlertForReplacedContentView to catch this in the debugger.\n%@: %@;\n"
      "Existing content configuration: %@;\n"
      "New content configuration: %@",
      (uint8_t *)&v18,
      0x3Eu);

  }
}

void sub_185FCC268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185FCE0F4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_185FCED20(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_185FD3A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _updateAffordanceFrameOrigin(void *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;

  v13 = a2;
  v3 = a1;
  objc_msgSend(v3, "frameOrigin");
  v5 = v4;
  objc_msgSend(v3, "size");
  v7 = v5 + v6 * 0.5;
  objc_msgSend(v13, "size");
  v9 = v7 - v8 * 0.5;
  objc_msgSend(v3, "frameOrigin");
  v11 = v10;

  objc_msgSend(v13, "size");
  objc_msgSend(v13, "setFrameOrigin:", v9, v11 + -12.0 - v12);

}

void sub_185FD4794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FD5C6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void _UIPreviewQuickActionViewCommonInit(void *a1)
{
  id v1;
  UIImageView *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  UIImageView *v7;
  double v8;
  double v9;
  UILabel *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  UIImageView *v38;

  v1 = a1;
  v2 = [UIImageView alloc];
  v3 = *MEMORY[0x1E0C9D648];
  v4 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v5 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v6 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  v38 = -[UIImageView initWithFrame:](v2, "initWithFrame:", *MEMORY[0x1E0C9D648], v4, v5, v6);
  -[UIImageView setTranslatesAutoresizingMaskIntoConstraints:](v38, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "addSubview:", v38);
  objc_msgSend(v1, "setBackgroundViewImage:", v38);
  v7 = -[UIImageView initWithFrame:]([UIImageView alloc], "initWithFrame:", v3, v4, v5, v6);
  -[UIImageView setTranslatesAutoresizingMaskIntoConstraints:](v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  -[UIImageView setContentMode:](v7, "setContentMode:", 1);
  LODWORD(v8) = 1148829696;
  -[UIView setContentHuggingPriority:forAxis:](v7, "setContentHuggingPriority:forAxis:", 0, v8);
  LODWORD(v9) = 1148829696;
  -[UIView setContentHuggingPriority:forAxis:](v7, "setContentHuggingPriority:forAxis:", 1, v9);
  -[UIView addSubview:](v38, "addSubview:", v7);
  objc_msgSend(v1, "setImageView:", v7);
  v10 = -[UILabel initWithFrame:]([UILabel alloc], "initWithFrame:", v3, v4, v5, v6);
  -[UIView setTranslatesAutoresizingMaskIntoConstraints:](v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  +[UIColor clearColor](UIColor, "clearColor");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView setBackgroundColor:](v10, "setBackgroundColor:", v11);

  objc_msgSend(off_1E167A828, "systemFontOfSize:", 16.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[UILabel setFont:](v10, "setFont:", v12);

  -[UILabel setTextAlignment:](v10, "setTextAlignment:", 1);
  -[UILabel setNumberOfLines:](v10, "setNumberOfLines:", 0);
  objc_msgSend(v1, "addSubview:", v10);
  objc_msgSend(v1, "setLabel:", v10);

  _NSDictionaryOfVariableBindings(CFSTR("imageView,label,backgroundViewImage"), v7, v10, v38, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)objc_opt_new();
  v15 = MEMORY[0x1E0C9AA70];
  objc_msgSend(MEMORY[0x1E0D156E0], "constraintsWithVisualFormat:options:metrics:views:", CFSTR("H:|-5-[backgroundViewImage]-5-|"), 0, MEMORY[0x1E0C9AA70], v13);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObjectsFromArray:", v16);

  objc_msgSend(MEMORY[0x1E0D156E0], "constraintsWithVisualFormat:options:metrics:views:", CFSTR("H:[imageView(<=44)]"), 0, v15, v13);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObjectsFromArray:", v17);

  objc_msgSend(MEMORY[0x1E0D156E0], "constraintsWithVisualFormat:options:metrics:views:", CFSTR("V:|[backgroundViewImage]-[label]|"), 0, v15, v13);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObjectsFromArray:", v18);

  objc_msgSend(MEMORY[0x1E0D156E0], "constraintsWithVisualFormat:options:metrics:views:", CFSTR("H:|[label]|"), 0, v15, v13);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObjectsFromArray:", v19);

  -[UIView centerXAnchor](v7, "centerXAnchor");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView centerXAnchor](v38, "centerXAnchor");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "constraintEqualToAnchor:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObject:", v22);

  -[UIView centerYAnchor](v7, "centerYAnchor");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView centerYAnchor](v38, "centerYAnchor");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "constraintEqualToAnchor:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObject:", v25);

  -[UIView heightAnchor](v7, "heightAnchor");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView widthAnchor](v7, "widthAnchor");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "constraintEqualToAnchor:", v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObject:", v28);

  -[UIView heightAnchor](v38, "heightAnchor");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView heightAnchor](v7, "heightAnchor");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "constraintEqualToAnchor:multiplier:", v30, 1.57079633);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObject:", v31);

  -[UIView widthAnchor](v38, "widthAnchor");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView widthAnchor](v7, "widthAnchor");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "constraintEqualToAnchor:multiplier:", v33, 1.57079633);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObject:", v34);

  objc_msgSend(MEMORY[0x1E0D156E0], "activateConstraints:", v14);
  -[UIView widthAnchor](v7, "widthAnchor");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView heightAnchor](v7, "heightAnchor");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "constraintEqualToAnchor:", v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "setActive:", 1);

}

id ___sendAnalyticsEvent_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = &v11;
  v13 = 0x2050000000;
  v2 = (void *)qword_1ECD7A728;
  v14 = qword_1ECD7A728;
  if (!qword_1ECD7A728)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __getIAUtilityClass_block_invoke_0;
    v10[3] = &unk_1E16B14C0;
    v10[4] = &v11;
    __getIAUtilityClass_block_invoke_0((uint64_t)v10);
    v2 = (void *)v12[3];
  }
  v3 = objc_retainAutorelease(v2);
  _Block_object_dispose(&v11, 8);
  _UIMainBundleIdentifier();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "lookupAppBundle:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 40);
    v16[0] = *(_QWORD *)(a1 + 32);
    v15[0] = CFSTR("hapticTrigger");
    v15[1] = CFSTR("deviceType");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v16[1] = v7;
    v15[2] = CFSTR("bundleId_category");
    v16[2] = v5;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_185FD8290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getIAUtilityClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7A730)
    qword_1ECD7A730 = _sl_dlopen();
  if (!qword_1ECD7A730)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *InputAnalyticsLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIFeedbackBackBoardEngine.m"), 22, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("IAUtility");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIAUtilityClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIFeedbackBackBoardEngine.m"), 24, CFSTR("Unable to find class %s"), "IAUtility");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7A728 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id _eventMessageQueue()
{
  if (qword_1ECD7F568 != -1)
    dispatch_once(&qword_1ECD7F568, &__block_literal_global_29_4);
  return (id)_MergedGlobals_1174;
}

void ___slotContent_block_invoke()
{
  int v0;
  const __CFString *v1;
  CGDataProvider *v2;
  CGImage *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  int v13;
  const __CFData *v14;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1)
    goto LABEL_4;
  v13 = _UIInternalPreference_UIEventAttributionViewDebugMode;
  if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_UIEventAttributionViewDebugMode)
    goto LABEL_4;
  while (v0 >= v13)
  {
    _UIInternalPreferenceSync(v0, &_UIInternalPreference_UIEventAttributionViewDebugMode, (uint64_t)CFSTR("UIEventAttributionViewDebugMode"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    v13 = _UIInternalPreference_UIEventAttributionViewDebugMode;
    if (v0 == _UIInternalPreference_UIEventAttributionViewDebugMode)
      goto LABEL_4;
  }
  if (!byte_1EDDA821C)
LABEL_4:
    v1 = CFSTR("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=");
  else
    v1 = CFSTR("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==");
  v14 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v1, 0);
  v2 = CGDataProviderCreateWithCFData(v14);
  v3 = CGImageCreateWithPNGDataProvider(v2, 0, 0, kCGRenderingIntentDefault);
  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0DC5C58]), "initWithContentSize:contentScale:localImage:toLayerContext:", 1, v3, &_slotContent___layerContext, 1.0, 1.0);
  v5 = (void *)__slotContent;
  __slotContent = v4;

  objc_msgSend(MEMORY[0x1E0D00E18], "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0C99E60];
  LODWORD(v8) = 2143289344;
  LODWORD(v9) = 2143289344;
  LODWORD(v10) = 2143289344;
  v11 = (void *)objc_msgSend((id)__slotContent, "newTouchAuthenticationSpecificationWithAuthenticationMessageContext:backgroundStatisticsRegion:backgroundStatisticsForeground:backgroundStatisticsPassingContrast:backgroundStatisticsFailingContrast:hitTestInformationMask:initialSampleEvent:secureName:", 1589136771, 0, 0, 1, 0, v8, v9, v10);
  objc_msgSend(v7, "setWithObject:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addTouchAuthenticationSpecifications:forReason:", v12, CFSTR("event attribution"));

  CGImageRelease(v3);
  CGDataProviderRelease(v2);

}

void ___eventMessageQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.UIKit.event_attribution.event-message-queue", 0);
  v1 = (void *)_MergedGlobals_1174;
  _MergedGlobals_1174 = (uint64_t)v0;

}

BOOL std::deque<_UIVelocityIntegratorDataSample>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = 51 * ((v1 - v2) >> 3) - 1;
  v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x66)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x65;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a1);
}

_QWORD *std::__deque_iterator<_UIVelocityIntegratorDataSample,_UIVelocityIntegratorDataSample*,_UIVelocityIntegratorDataSample&,_UIVelocityIntegratorDataSample**,long,51l>::operator+=[abi:nn180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x3333333333333333 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      v5 = 50 - v3;
      v6 = &v2[-(v5 / 0x33)];
      *result = v6;
      v4 = *v6 + 80 * (51 * (v5 / 0x33) - v5) + 4000;
    }
    else
    {
      *result = &v2[v3 / 0x33];
      v4 = v2[v3 / 0x33] + 80 * (v3 % 0x33);
    }
    result[1] = v4;
  }
  return result;
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<_UIVelocityIntegratorDataSample *,std::__deque_iterator<_UIVelocityIntegratorDataSample,_UIVelocityIntegratorDataSample *,_UIVelocityIntegratorDataSample&,_UIVelocityIntegratorDataSample **,long,51l>,0>(_QWORD *result, char *a2, char *a3, _QWORD *a4, char *a5)
{
  _QWORD *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v6 = a4;
  v8 = result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a5[-v10] >> 4);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a2) >> 4)) < v12)
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a2) >> 4);
      v11 -= 80 * v12;
      a5 -= 80 * v12;
      if (v12)
        result = memmove(a5, v11, 80 * v12);
      if (v11 == a2)
        break;
      v13 = *--v6;
      v10 = v13;
      a5 = (char *)(v13 + 4080);
    }
    if ((char *)(*v6 + 4080) == a5)
    {
      v14 = (char *)v6[1];
      ++v6;
      a5 = v14;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

_QWORD *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<_UIVelocityIntegratorDataSample *,std::__deque_iterator<_UIVelocityIntegratorDataSample,_UIVelocityIntegratorDataSample *,_UIVelocityIntegratorDataSample&,_UIVelocityIntegratorDataSample **,long,51l>,0>(_QWORD *result, _BYTE *__src, _BYTE *a3, void **a4, char *__dst)
{
  void **v6;
  _BYTE *v7;
  _QWORD *v8;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  char *v13;

  v6 = a4;
  v7 = __src;
  v8 = result;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 4);
      v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 4)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 4);
      if (v12)
        result = memmove(__dst, v7, 80 * v12);
      v7 += 80 * v12;
      if (v7 == v9)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 80 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

uint64_t _UIPreviewInteractionIsTextGestureRecognizer(void *a1)
{
  id v1;
  void *v2;
  char isKindOfClass;
  char v4;

  v1 = a1;
  objc_msgSend(v1, "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    objc_opt_class();
    v4 = objc_opt_isKindOfClass();
  }

  return v4 & 1;
}

uint64_t _UIStatusBarPartStyleFromStyle(uint64_t a1)
{
  if (a1 == 1)
    return 1;
  else
    return 2 * (a1 == 3);
}

uint64_t _UIStatusBarStyleFromPartStyle(uint64_t result)
{
  void *v1;
  void *v2;

  if (result != 1)
  {
    if (result == 4)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIStatusBarStyle _UIStatusBarStyleFromPartStyle(_UIStatusBarPartStyle)");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("_UIStatusBarStyle.m"), 44, CFSTR("_UIStatusBarPartStyleInherited cannot be converted to a UIStatusBarStyle"));

      return 0;
    }
    else if (result == 2)
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_185FDBC24(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 136));
  _Unwind_Resume(a1);
}

id _UIInteractiveHighlightingEnvironmentFromView(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;

  v1 = a1;
  objc_getAssociatedObject(v1, &_UIInteractiveHighlightingEnvironmentProperty);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v4 = v2;
  }
  else
  {
    objc_msgSend(v1, "superview");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    if (v5)
    {
      _UIInteractiveHighlightingEnvironmentFromView(v5);
      v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4 = 0;
    }

  }
  return v4;
}

void _UIPreviewInteractionPlatterInsetsForRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRect v8;
  CGRect v9;
  CGRect v10;
  CGRect v11;
  CGRect v12;

  CGRectGetHeight(*(CGRect *)&a1);
  v8.origin.x = a1;
  v8.origin.y = a2;
  v8.size.width = a3;
  v8.size.height = a4;
  CGRectGetWidth(v8);
  v9.origin.x = a1;
  v9.origin.y = a2;
  v9.size.width = a3;
  v9.size.height = a4;
  CGRectGetHeight(v9);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetWidth(v10);
  v11.origin.x = a1;
  v11.origin.y = a2;
  v11.size.width = a3;
  v11.size.height = a4;
  CGRectGetHeight(v11);
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  CGRectGetWidth(v12);
}

uint64_t _UIUpdateAdaptiveRateNeeded()
{
  if (qword_1ECD7F588 != -1)
    dispatch_once(&qword_1ECD7F588, &__block_literal_global_1_14);
  return byte_1ECD7F571;
}

double _UIUpdateModelMediaTime()
{
  return *(double *)&_currentModelMediaTime;
}

uint64_t _UIUpdateModelMachTime()
{
  return qword_1ECD7F590;
}

char *_UIUpdateGetTiming(int a1)
{
  if (dword_1ECD7F574 <= a1)
    return 0;
  else
    return &_MergedGlobals_1175[24
                              * ((~(_BYTE)a1
                                - (dword_1ECD7F574 & (a1 >> 31))
                                + (_BYTE)dword_1ECD7F578) & 3)
                              + 112];
}

char *_UIMachTimeDebugDescriptionCopyCStr(unint64_t a1, unint64_t a2, char *a3, size_t a4)
{
  if (qword_1ECD7F5A0 != -1)
    dispatch_once(&qword_1ECD7F5A0, &__block_literal_global_23_8);
  return _UIMediaTimeDebugDescriptionCopyCStr(a3, a4, (double)a1 / *(double *)&qword_1ECD7F5A8, (double)a2 / *(double *)&qword_1ECD7F5A8);
}

char *_UIMediaTimeDebugDescriptionCopyCStr(char *a1, size_t a2, double a3, double a4)
{
  uint64_t v7;
  size_t v8;

  if (a4 == 0.0)
  {
    v7 = mach_absolute_time();
    if (qword_1ECD7F5A0 != -1)
      dispatch_once(&qword_1ECD7F5A0, &__block_literal_global_23_8);
    a4 = (double)v7 / *(double *)&qword_1ECD7F5A8;
  }
  if (a1)
    v8 = a2;
  else
    v8 = 48;
  if (!a1)
    a1 = (char *)&unk_1ECD7F5B0;
  snprintf(a1, v8, "%.06f(%+.06f)s", a3, a3 - a4);
  return a1;
}

char *_UIMachDurationDebugDescriptionCopyCStr(uint64_t a1, char *a2, size_t a3)
{
  size_t v6;

  if (qword_1ECD7F5A0 != -1)
    dispatch_once(&qword_1ECD7F5A0, &__block_literal_global_23_8);
  if (a2)
  {
    v6 = a3;
  }
  else
  {
    a2 = (char *)&unk_1ECD7F5B0;
    v6 = 48;
  }
  snprintf(a2, v6, "%+.06fs", (double)a1 / *(double *)&qword_1ECD7F5A8);
  return a2;
}

char *_UIMediaDurationDebugDescriptionCopyCStr(char *a1, size_t a2, double a3)
{
  char *v3;

  if (a1)
    v3 = a1;
  else
    v3 = (char *)&unk_1ECD7F5B0;
  if (!a1)
    a2 = 48;
  snprintf(v3, a2, "%+.06fs", a3);
  return v3;
}

id _UIUpdateDebugDescriptionIndented(void *a1, __CFString *a2, __CFString *a3)
{
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  __CFString *v18;
  void *v19;

  v5 = CFSTR("    ");
  if (a2)
    v5 = a2;
  if (a3)
    v5 = a3;
  v6 = v5;
  v7 = v6;
  if (a2)
    v8 = a2;
  else
    v8 = v6;
  v9 = v8;
  objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "componentsSeparatedByCharactersInSet:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v11, "mutableCopy");

  v13 = objc_msgSend(v12, "count");
  if (v13)
  {
    v14 = v13 - 1;
    do
    {
      v15 = v14;
      objc_msgSend(v12, "objectAtIndexedSubscript:", v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[__CFString stringByAppendingString:](v9, "stringByAppendingString:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setObject:atIndexedSubscript:", v17, v14);

      v18 = v7;
      --v14;
      v9 = v18;
    }
    while (v15);
  }
  else
  {
    v18 = v9;
  }
  objc_msgSend(v12, "componentsJoinedByString:", CFSTR("\n"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return v19;
}

uint64_t debugTracingTracepoints()
{
  return 1;
}

uint64_t debugTracingTracepointsWithCallstacks()
{
  return 2;
}

void sub_185FE1F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIViewControllerIsChildOfTwoColumnSplitViewController(void *a1)
{
  id v1;
  uint64_t IsChildOfTwoColumnSplitViewController;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      IsChildOfTwoColumnSplitViewController = objc_msgSend(v1, "_isCollapsed") ^ 1;
    }
    else
    {
      objc_msgSend(v1, "parentViewController");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v3)
      {
        objc_msgSend(v1, "presentationController");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = v4;
        if (v4 && (objc_msgSend(v4, "shouldPresentInFullscreen") & 1) == 0)
        {
          objc_msgSend(v1, "presentingViewController");
          v3 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v3 = 0;
        }

      }
      IsChildOfTwoColumnSplitViewController = _UIViewControllerIsChildOfTwoColumnSplitViewController(v3);

    }
  }
  else
  {
    IsChildOfTwoColumnSplitViewController = 0;
  }

  return IsChildOfTwoColumnSplitViewController;
}

void sub_185FE9628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FE98F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FE9D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FEA1F8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_185FEA558(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_185FF2358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FF3708(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_185FF3AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  id *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_185FF3D20(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id _UIGetPreviewPresentationController(void *a1)
{
  void *v1;
  id v2;

  objc_msgSend(a1, "_existingPresentationControllerImmediate:effective:", 1, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_185FF8514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_185FF926C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _enumerateMapTableKeysAndObjectsUsingBlock(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, uint64_t, void *, unsigned __int8 *);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v16 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  objc_msgSend(v3, "keyEnumerator", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v8)
        objc_enumerationMutation(v5);
      v10 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v9);
      objc_msgSend(v3, "objectForKey:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v4[2](v4, v10, v11, &v16);
      LODWORD(v10) = v16;

      if ((_DWORD)v10)
        break;
      if (v7 == ++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
        if (v7)
          goto LABEL_3;
        break;
      }
    }
  }

}

char *_sanitizedIndexPath(void *a1)
{
  id v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (char *)(objc_msgSend(v1, "length") + 1);
  do
  {
    v3 = objc_msgSend(v1, "indexAtPosition:", v2 - 2);
    --v2;
  }
  while (v3 == 0x7FFFFFFFFFFFFFFFLL);
  v4 = objc_msgSend(v1, "length");
  if ((char *)v4 == v2)
  {
    v2 = (char *)v1;
  }
  else if (v2)
  {
    MEMORY[0x1E0C80A78](v4);
    v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    objc_msgSend(v1, "getIndexes:range:", v6, 0, v2);
    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathWithIndexes:length:", v6, v2);
    v2 = (char *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

id _manuallyUpdateSanitizedIndexPath(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = objc_msgSend(v5, "length");
  if (v7 >= objc_msgSend(v6, "length") && objc_msgSend(v6, "length"))
  {
    v8 = 0;
    while (1)
    {
      v9 = objc_msgSend(v5, "indexAtPosition:", v8);
      v10 = objc_msgSend(v6, "indexAtPosition:", v8);
      if (v9 < v10)
        break;
      v11 = v10;
      if (v8 == objc_msgSend(v6, "length") - 1)
      {
        if (a3 == 1 && v9 == v11)
        {
          v12 = 0;
        }
        else
        {
          v14 = objc_msgSend(v5, "length");
          MEMORY[0x1E0C80A78](v14);
          v16 = (char *)v18 - v15;
          objc_msgSend(v5, "getIndexes:", (char *)v18 - v15);
          v17 = v9 - 1;
          if (!a3)
            v17 = v9 + 1;
          *(_QWORD *)&v16[8 * v8] = v17;
          objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathWithIndexes:length:", v16, objc_msgSend(v5, "length"));
          v12 = (id)objc_claimAutoreleasedReturnValue();
        }
        goto LABEL_9;
      }
      if (v9 == v11 && ++v8 < (unint64_t)objc_msgSend(v6, "length"))
        continue;
      break;
    }
  }
  v12 = v5;
LABEL_9:

  return v12;
}

void sub_185FFBF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FFE650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FFE804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMLULookupItemClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)_MergedGlobals_1179;
  v7 = _MergedGlobals_1179;
  if (!_MergedGlobals_1179)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getMLULookupItemClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getMLULookupItemClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186000964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMLULookupItemClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7F6A8)
    qword_1ECD7F6A8 = _sl_dlopen();
  if (!qword_1ECD7F6A8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MobileLookupLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIPreviewItemController.m"), 39, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("MLULookupItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getMLULookupItemClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIPreviewItemController.m"), 40, CFSTR("Unable to find class %s"), "MLULookupItem");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1179 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void _accessibilityMaximumWidthWhenUsingAccessibilitySizes()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  double v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "bounds");
  if (v1 >= v2)
    v3 = v2;
  else
    v3 = v1;
  v4 = v3 + -64.0;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if ((v6 & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    +[UIWindow _applicationKeyWindow](UIWindow, "_applicationKeyWindow");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      objc_msgSend(v7, "bounds");
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      +[UIWindow allWindowsIncludingInternalWindows:onlyVisibleWindows:](UIWindow, "allWindowsIncludingInternalWindows:onlyVisibleWindows:", 0, 1, 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v19;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v19 != v12)
              objc_enumerationMutation(v9);
            objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i), "bounds");
            if (v14 >= v15)
              v16 = v15;
            else
              v16 = v14;
            v17 = v16 + -64.0;
            if (v4 >= v17)
              v4 = v17;
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v11);
      }

    }
  }
}

id _UIGetLookupBackgroundEffect(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_AXSEnhanceBackgroundContrastEnabled())
  {
    +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.4);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIVisualEffect effectCompositingColor:](UIVisualEffect, "effectCompositingColor:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    __UIStatusBarManagerForWindow(0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "statusBarStyle");

    if (v5 || objc_msgSend(v1, "userInterfaceStyle") == 2)
    {
      v6 = 0.0;
      v7 = 0.1;
    }
    else
    {
      v6 = 0.35;
      v7 = 0.35;
    }
    +[UIBlurEffect _effectWithBlurRadius:scale:](UIBlurEffect, "_effectWithBlurRadius:scale:", 8.0, 0.5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIColorEffect _colorEffectSourceOver:](UIColorEffect, "_colorEffectSourceOver:", v6, v6, v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13[1] = v9;
    +[UIColorEffect _colorEffectSourceOver:](UIColorEffect, "_colorEffectSourceOver:", 0.0, 0.0, 0.0, 0.1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13[2] = v10;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIVisualEffect effectCombiningEffects:](UIVisualEffect, "effectCombiningEffects:", v11);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v3;
}

void sub_186003718(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_186003974(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_186003BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, id a19)
{
  id *v19;
  id *v20;
  id *v21;
  uint64_t v22;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  objc_destroyWeak((id *)(v22 - 72));
  _Unwind_Resume(a1);
}

void sub_1860043D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{

  _Unwind_Resume(a1);
}

void sub_186007098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIPreviewInteractionAllowedToBeginForView(id a1)
{
  uint64_t result;
  __int128 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD7F6B8 != -1)
    dispatch_once(&qword_1ECD7F6B8, &__block_literal_global_427);
  if (!_MergedGlobals_1180)
    return 0;
  result = _AXSForceTouchEnabled();
  if ((_DWORD)result)
  {
    NSClassFromString(CFSTR("UIContextMenuInteraction"));
    if (a1)
    {
      v3 = 0uLL;
      do
      {
        v11 = v3;
        v12 = v3;
        v10 = v3;
        objc_msgSend(a1, "interactions", v3);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v5)
        {
          v6 = v5;
          v7 = *(_QWORD *)v10;
          while (2)
          {
            for (i = 0; i != v6; ++i)
            {
              if (*(_QWORD *)v10 != v7)
                objc_enumerationMutation(v4);
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {

                return 0;
              }
            }
            v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
            if (v6)
              continue;
            break;
          }
        }

        a1 = (id)objc_msgSend(a1, "superview");
        v3 = 0uLL;
      }
      while (a1);
    }
    return 1;
  }
  return result;
}

void sub_186008188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18600917C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186009538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1860096E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18600B340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  id *v10;
  uint64_t v11;

  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 112));
  _Unwind_Resume(a1);
}

void sub_18600B430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s24_sb32_sb40(&a9);
  _Unwind_Resume(a1);
}

void __destructor_8_s24_sb32_sb40(id *a1)
{

}

void sub_18600C6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t previewTransition_block_invoke(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  int v9;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = v2[1];
  if (!*((_BYTE *)v2 + 51))
  {
    if (v3 == 4 || !*((_BYTE *)v2 + 32))
    {
      if (*((_BYTE *)v2 + 18))
      {
        objc_msgSend(*a2, "delegate");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "clickPresentationInteractionShouldPresent:", v2);

        if (!v9)
          return 4;
      }
    }
    else
    {
      v11 = 0;
      v12 = &v11;
      v13 = 0x3032000000;
      v14 = __Block_byref_object_copy__156;
      v15 = __Block_byref_object_dispose__156;
      v16 = 0;
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __61___UIClickPresentationInteraction__handleTransitionToPreview__block_invoke;
      v10[3] = &unk_1E16B72E8;
      v10[4] = v2;
      v10[5] = &v11;
      v5 = _Block_copy(v10);
      objc_msgSend(v2, "delegate");
      v3 = objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v3, "_clickPresentationInteraction:shouldPresentWithCompletion:", v2, v5);

      v6 = (void *)v12[5];
      if (v6)
      {
        if ((objc_msgSend(v6, "BOOLValue") & 1) != 0)
        {
          v7 = 1;
        }
        else
        {
          v7 = 0;
          v3 = v2[1];
        }
      }
      else
      {
        v7 = 0;
        v3 = 4;
      }

      _Block_object_dispose(&v11, 8);
      if ((v7 & 1) == 0)
        return v3;
    }
    if ((objc_msgSend(v2, "_canPerformPresentation") & 1) != 0)
      return 5;
    else
      return v2[1];
  }
  return v3;
}

void sub_18600CB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void postPreviewTransition_block_invoke_2(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  void *v6;
  char v7;
  char v8;
  _BYTE *v9;

  v5 = *a2;
  if (!v5 || v5[1] != 4)
  {
    v9 = v5;
    objc_msgSend(v5, "_clickDragDriver");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isPreparingToDrag");

    if (a4 == 5)
    {
      v5 = v9;
      if (v9)
      {
        objc_msgSend(v9, "_performPresentation");
LABEL_11:
        v5 = v9;
      }
    }
    else
    {
      v5 = v9;
      if (v9[51])
        v8 = 1;
      else
        v8 = v7;
      if ((v8 & 1) == 0)
      {
        -[_UIClickPresentationInteraction _endInteractionDidComplete:completion:](v9, 0);
        goto LABEL_11;
      }
    }
  }

}

uint64_t stateMachineSpec_block_invoke_5_3(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (!*a2)
    return 0;
  if (*(_QWORD *)(*a2 + 8) != 4)
    return 1;
  v2 = a2[2];
  if (v2 == 1 || v2 == 11)
    return 1;
  else
    return 4;
}

void stateMachineSpec_block_invoke_6_2(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;

  if (a4 == 2)
  {
    v4 = *a2;
    if (*a2)
    {
      if (v4[23])
      {
        objc_msgSend(*a2, "delegate");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = objc_msgSend(v5, "_clickPresentationInteractionShouldAssociateWithDrag:", v4);

        if (v6)
          objc_msgSend(v4, "_associateWithActiveDragInteraction");
      }
      objc_msgSend(v4, "presentationAssistant");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v7)
      {
        objc_msgSend(v4, "presentationAssistant");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setLifecycleCompletion:", 0);

        objc_msgSend(v4, "setPresentationAssistant:", 0);
      }
    }
  }
}

uint64_t stateMachineSpec_block_invoke_7_1(uint64_t a1, _QWORD *a2)
{
  return 2 * (*a2 != 0);
}

void stateMachineSpec_block_invoke_8_0(uint64_t a1, id *a2)
{
  _BYTE *v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  void *v9;
  void *v10;
  id v11;

  v2 = *a2;
  if (*a2)
  {
    if (objc_msgSend(*a2, "_supportsRapidRestart"))
    {
      objc_msgSend(v2, "locationInView:", 0);
      objc_msgSend(v2, "_attemptDragLiftAtLocation:useDefaultLiftAnimation:", v2[51]);
    }
    if (v2[51])
    {
      objc_msgSend(v2, "_clickDragDriver");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "isPreparingToDrag");

      if ((v4 & 1) == 0)
        -[_UIClickPresentationInteraction _endInteractionDidComplete:completion:](v2, 0);
    }
    else
    {
      objc_msgSend(v2, "exclusionRelationshipGestureRecognizer");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "_succeed");

      objc_msgSend(v2, "failureRelationshipGestureRecognizer");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "_succeed");

      objc_msgSend(v2, "activeDriver");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = _UIClickPresentationAllowableMovementForDriver(v7, 1);
      objc_msgSend(v2, "activeDriver");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setAllowableMovement:", v8);

      if (v2[49])
      {
        objc_msgSend(v2, "feedbackGenerator");
        v11 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "view");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "locationInView:", v10);
        objc_msgSend(v11, "previewedAtLocation:");

      }
    }
  }
}

uint64_t stateMachineSpec_block_invoke_9_0(uint64_t a1, _QWORD *a2)
{
  if (*a2)
    return 3;
  else
    return 0;
}

void sub_18600D434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIWillResetDatePicker()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", 0x1E175CE40, 0);

}

void _UIResetDatePicker()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", 0x1E175D120, 0);

}

id _UIDatePickerClassForStyleAndMode(uint64_t a1, int64_t a2)
{
  void *v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v4 = (void *)objc_opt_class();
  v5 = (unint64_t)(a2 - 3) >= 2 && a2 <= 4268;
  v6 = 1;
  if (v5)
    v6 = 2;
  if (!a1)
    a1 = v6;
  if ((a1 & 0xFFFFFFFFFFFFFFFELL) == 2
    && ((unint64_t)(a2 - 5) > 0xFFFFFFFFFFFFFFFDLL || a2 >= 4269 && a2 != 4272))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIDatePickerAssertUnsupportedStyleAndMode(UIDatePickerStyle, UIDatePickerMode)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    _UIDatePickerStringFromMode(a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    _UIDatePickerStringFromStyle(a1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("UIDatePicker.m"), 133, CFSTR("UIDatePickerMode %@ is unsupported when using style %@."), v12, v13);

  }
  if (dyld_program_sdk_at_least())
  {
    if (a1 == 1 || a1 == 3 || a1 == 2)
    {
      v4 = (void *)objc_opt_class();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class _UIDatePickerClassForStyleAndMode(UIDatePickerStyle, UIDatePickerMode)");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("UIDatePicker.m"), 173, CFSTR("Unknown UIDatePickerStyle %li"), a1);

    }
  }
  return v4;
}

__CFString *_UIDatePickerStringFromMode(unint64_t a1)
{
  __CFString *v1;
  void *v2;

  if (a1 >= 5)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringValue");
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v1 = off_1E16DB308[a1];
  }
  return v1;
}

__CFString *_UIDatePickerStringFromStyle(uint64_t a1)
{
  __CFString *v1;
  void *v2;

  if ((unint64_t)(a1 - 1) >= 3)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringValue");
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v1 = off_1E16DB330[a1 - 1];
  }
  return v1;
}

void sub_186011150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186011D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  id *v10;
  uint64_t v11;

  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 112));
  _Unwind_Resume(a1);
}

id getSTKImageGlyphClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7AEF8;
  v7 = qword_1ECD7AEF8;
  if (!qword_1ECD7AEF8)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSTKImageGlyphClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSTKImageGlyphClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186012130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFStringUtilitiesClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEMFStringUtilitiesClass_softClass_0;
  v7 = getEMFStringUtilitiesClass_softClass_0;
  if (!getEMFStringUtilitiesClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFStringUtilitiesClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFStringUtilitiesClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186012C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFEmojiCategoryClass_2()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEMFEmojiCategoryClass_softClass_2;
  v7 = getEMFEmojiCategoryClass_softClass_2;
  if (!getEMFEmojiCategoryClass_softClass_2)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiCategoryClass_block_invoke_2;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFEmojiCategoryClass_block_invoke_2((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186012DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860145B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_186016B84(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18601A194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSTKImageGlyphDataSourceClass_block_invoke_0(uint64_t a1)
{
  Class result;

  if (!qword_1ECD7AEF0)
    qword_1ECD7AEF0 = _sl_dlopen();
  result = objc_getClass("STKImageGlyphDataSource");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_11_8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getSTKImageGlyphClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD7AEF0)
    qword_1ECD7AEF0 = _sl_dlopen();
  result = objc_getClass("STKImageGlyph");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD7AEF8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __getEMFStringUtilitiesClass_block_invoke_0(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_4();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFStringUtilities");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFStringUtilitiesClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFStringUtilitiesClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiAndStickerCollectionInputView.m"), 67, CFSTR("Unable to find class %s"), "EMFStringUtilities");

    __break(1u);
  }
}

void EmojiFoundationLibrary_4()
{
  void *v0;
  void *v1;
  void *v2;

  if (!EmojiFoundationLibraryCore_frameworkLibrary_4)
    EmojiFoundationLibraryCore_frameworkLibrary_4 = _sl_dlopen();
  if (!EmojiFoundationLibraryCore_frameworkLibrary_4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *EmojiFoundationLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIKeyboardEmojiAndStickerCollectionInputView.m"), 65, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getEMFEmojiCategoryClass_block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_4();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiCategory");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiCategoryClass_softClass_2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiCategoryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiAndStickerCollectionInputView.m"), 66, CFSTR("Unable to find class %s"), "EMFEmojiCategory");

    __break(1u);
  }
}

void __getEMFEmojiTokenClass_block_invoke_4(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_4();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiToken");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiTokenClass_softClass_2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFEmojiTokenClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiAndStickerCollectionInputView.m"), 68, CFSTR("Unable to find class %s"), "EMFEmojiToken");

    __break(1u);
  }
}

__CFString *_NSStringFromUITouchSenstiveButtonPositionHint(unint64_t a1)
{
  void *v2;
  id v3;
  __CFString *v4;
  id v5;
  _QWORD v7[4];
  id v8;
  __CFString *v9;
  const __CFString *v10;
  _QWORD *v11;
  _QWORD v12[4];

  if (!a1)
    return CFSTR("none");
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2020000000;
  v12[3] = 0;
  v2 = (void *)objc_opt_new();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___NSStringFromUITouchSenstiveButtonPositionHint_block_invoke;
  v7[3] = &unk_1E16DB5A8;
  v3 = v2;
  v8 = v3;
  v9 = &stru_1E16EDF20;
  v10 = CFSTR(", ");
  v11 = v12;
  _UIEnumerateOptions(a1, v7);
  v4 = (__CFString *)v10;
  v5 = v3;

  _Block_object_dispose(v12, 8);
  return (__CFString *)v5;
}

void sub_18601C000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UITouchSensitiveButtonRadiusInPointsFromMM(void *a1, double a2)
{
  void *v4;
  _BYTE *v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  _QWORD block[5];

  objc_msgSend(a1, "_eventRoutingScene");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_screen");
  v5 = (_BYTE *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v5, "_isEmbeddedScreen") & 1) != 0 || v5 && (v5[210] & 1) != 0)
  {
    v7 = (void *)MGCopyAnswer();
    v8 = (void *)MGCopyAnswer();
    if (v8 && v7)
    {
      objc_msgSend(v5, "displayConfiguration");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "doubleValue");
      v11 = v10 / 25.4;
      objc_msgSend(v9, "bounds");
      v13 = v12;
      objc_msgSend(v9, "pointScale");
      v15 = v14 * v13;
      objc_msgSend(v7, "doubleValue");
      v17 = v11 * (v15 / v16);
      objc_msgSend(v5, "scale");
      v6 = v17 / v18 * a2;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat _UITouchSensitiveButtonRadiusInPointsFromMM(CGFloat, UIWindow * _Nonnull const __strong)");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("_UITouchSensitiveButton.m"), 106, CFSTR("%s: Unexpected nil screen information from query"), "CGFloat _UITouchSensitiveButtonRadiusInPointsFromMM(CGFloat, UIWindow * _Nonnull const __strong)");

      v6 = 0.0;
    }

  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___UITouchSensitiveButtonRadiusInPointsFromMM_block_invoke;
    block[3] = &unk_1E16B1B28;
    block[4] = a1;
    if (_UITouchSensitiveButtonRadiusInPointsFromMM_once != -1)
      dispatch_once(&_UITouchSensitiveButtonRadiusInPointsFromMM_once, block);
    v6 = 0.0;
  }

  return v6;
}

void sub_18601CBA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t _UIUpdateRequestRecordSortedSetRemoveRequest(char **a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t *v8;
  char *v9;
  unint64_t v10;
  char *v12;
  uint64_t v13;

  v3 = (unint64_t)a1[1];
  if (!v3)
    return 0;
  v5 = *a1;
  v6 = &v5[24 * v3];
  do
  {
    v7 = v3 >> 1;
    v8 = (unint64_t *)&v5[24 * (v3 >> 1)];
    v10 = *v8;
    v9 = (char *)(v8 + 3);
    v3 += ~(v3 >> 1);
    if (v10 < a2)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v6 == v5 || *(_QWORD *)v5 != a2)
    return 0;
  *a3 = *(_OWORD *)(v5 + 8);
  v12 = *a1;
  v13 = (uint64_t)(a1[1] - 1);
  a1[1] = (char *)v13;
  memmove(v5, v5 + 24, v12 - v5 + 24 * v13);
  return 1;
}

id _UIDateFormatStripOtherFormatCharacters(void *a1, int a2)
{
  id v3;
  size_t v4;
  _WORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = a1;
  v4 = objc_msgSend(v3, "length");
  v5 = malloc_type_calloc(v4, 2uLL, 0x1000040BDFB0063uLL);
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = objc_msgSend(v3, "characterAtIndex:", v6);
      v10 = v9;
      if (v9 == 39)
        break;
      if (!(v7 & 1 | (v9 == a2)))
      {
        if (_UICalendarUnitForFormatCharacter(v9) != 0x7FFFFFFFFFFFFFFFLL)
        {
          v7 = 0;
          goto LABEL_8;
        }
        v7 = 0;
        if (v10 <= 0x29 && ((1 << v10) & 0x30000000001) != 0)
          goto LABEL_8;
        goto LABEL_7;
      }
      if (v9)
        goto LABEL_7;
LABEL_8:
      if (v4 == ++v6)
        goto LABEL_16;
    }
    v7 ^= 1u;
LABEL_7:
    v5[v8++] = v10;
    goto LABEL_8;
  }
  v8 = 0;
LABEL_16:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCharacters:length:", v5, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  free(v5);
  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByTrimmingCharactersInSet:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void sub_1860207FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860218A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t _UIViewControllerCompareToViewController(id *a1, id *a2)
{
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id *v10;
  id v11;
  void *v12;
  id *v13;
  id *v14;
  id *v15;
  char v16;
  id *v17;
  id *v18;
  id v19;
  void *v20;
  id v21;
  double v22;
  double v23;
  double v24;
  id *v25;
  void *v26;
  void *v27;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  double v32;
  double v33;
  double v34;

  v3 = a1;
  objc_msgSend(a1, "_existingView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(a2, "_existingView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "window");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3 == a2)
    goto LABEL_29;
  if (v5 && v7 && v5 != v7)
  {
    if (objc_msgSend(v5, "isHidden") && (objc_msgSend(v7, "isHidden") & 1) != 0)
      goto LABEL_29;
    if ((objc_msgSend(v7, "isHidden") & 1) != 0)
    {
      v8 = 1;
      goto LABEL_40;
    }
    if ((objc_msgSend(v5, "isHidden") & 1) != 0)
    {
      v8 = -1;
      goto LABEL_40;
    }
    objc_msgSend(v7, "windowLevel");
    v23 = v22;
    objc_msgSend(v5, "windowLevel");
    if (v23 == v24)
    {
LABEL_29:
      v8 = 0;
      goto LABEL_40;
    }
    objc_msgSend(v7, "windowLevel");
    v33 = v32;
    objc_msgSend(v5, "windowLevel");
    if (v33 <= v34)
      v8 = 1;
    else
      v8 = -1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", v3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIViewController _parentViewController](v3);
    v10 = (id *)objc_claimAutoreleasedReturnValue();
    if (v10
      || (objc_msgSend(v3, "_parentModalViewController"), (v10 = (id *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      do
      {
        objc_msgSend(v9, "addObject:", v10);
        v11 = v10[13];
        v12 = v11;
        if (v11)
        {
          v13 = (id *)v11;
        }
        else
        {
          objc_msgSend(v10, "_parentModalViewController");
          v13 = (id *)objc_claimAutoreleasedReturnValue();
        }
        v14 = v13;

        v10 = v14;
      }
      while (v14);
    }
    if ((objc_msgSend(v9, "containsObject:", a2) & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      v15 = a2;
      -[UIViewController _parentViewController](v15);
      v8 = objc_claimAutoreleasedReturnValue();
      if (v8 || (objc_msgSend(v15, "_parentModalViewController"), (v8 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        while (1)
        {
          if ((id *)v8 == v3)
          {
            v18 = 0;
            v8 = -1;
            goto LABEL_38;
          }
          v16 = objc_msgSend(v9, "containsObject:", v8);
          v17 = (id *)(id)v8;
          v18 = v17;
          if ((v16 & 1) != 0)
            break;

          v19 = v18[13];
          v20 = v19;
          if (v19)
          {
            v21 = v19;
          }
          else
          {
            objc_msgSend(v18, "_parentModalViewController");
            v21 = (id)objc_claimAutoreleasedReturnValue();
          }
          v8 = (uint64_t)v21;

          v15 = v18;
          if (!v8)
          {
            v3 = 0;
            v15 = v18;
            goto LABEL_37;
          }
        }
        objc_msgSend(v17, "childModalViewController");
        v25 = (id *)objc_claimAutoreleasedReturnValue();

        v8 = -1;
        if (v25 != v15)
        {
          objc_msgSend(v9, "objectAtIndex:", objc_msgSend(v9, "indexOfObjectIdenticalTo:", v18) - 1);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "childViewControllers");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = objc_msgSend(v27, "indexOfObjectIdenticalTo:", v26);

          objc_msgSend(v18, "childViewControllers");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = objc_msgSend(v29, "indexOfObjectIdenticalTo:", v15);

          if (v30 <= v28)
            v8 = 1;

        }
        v3 = v18;
      }
      else
      {
        v3 = 0;
LABEL_37:
        v18 = 0;
      }
LABEL_38:

    }
  }
LABEL_40:

  return v8;
}

uint64_t _UIEventDeferringBehaviorCompareRuleOwningElementToElement(void *a1, void *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  id *v9;
  void *v10;
  id *v11;
  id *v12;
  id *v13;
  id *v14;
  int v15;
  void *v16;
  void *v17;
  id *v18;
  uint64_t v19;
  void *v20;
  id *v21;
  void *v22;
  void *v23;
  id *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  if (!a1 || !a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, CFSTR("_UIEventDeferringBehavior.m"), 377, CFSTR("%s: Invalid state, an object is missing: r1: %@; r2: %@"),
      "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _No"
      "nnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
      a1,
      a2);

  }
  v4 = objc_msgSend(a1, "interfaceElementCategory");
  v5 = objc_msgSend(a2, "interfaceElementCategory");
  if (!(v4 | v5))
    return 0;
  if (v4 && !v5)
    return 1;
  if (!v4 && v5)
    return -1;
  if (v4 == 1 && v5 == 1)
    return 0;
  if (v4 != 1 || v5 == 1)
  {
    if (v5 == 1 && v4 != 1)
      return -1;
    if (v4 == 2 && v5 == 3)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v8 = a1;
      else
        v8 = 0;
      v9 = v8;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v10 = a2;
      else
        v10 = 0;
      v11 = v10;
      v12 = v11;
      if (!v9 || !v11)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, CFSTR("_UIEventDeferringBehavior.m"), 429, CFSTR("%s: Invalid state. Should be comparing two a window and a vc: window1: %p; vc2: %p"),
          "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning> "
          " _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
          a1,
          a2);

      }
      v13 = v9;
      v14 = v12;
      v15 = 1;
    }
    else
    {
      if (v5 != 2 || v4 != 3)
      {
        if (v4 != 2 || v5 != 2)
        {
          if (v4 != 3 || v5 != 3)
          {
            v31 = v5;
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            _NSStringFromUIEventDeferringInterfaceElementCategory(v4);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            _NSStringFromUIEventDeferringInterfaceElementCategory(v31);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, CFSTR("_UIEventDeferringBehavior.m"), 452, CFSTR("%s: Invalid state. Should be comparing two view controllers: r1: %@; r2: %@"),
              "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwni"
              "ng>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
              v34,
              v35);

          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v20 = a1;
          else
            v20 = 0;
          v9 = v20;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v21 = (id *)a2;
          else
            v21 = 0;
          v6 = _UIViewControllerCompareToViewController(v9, v21);
          goto LABEL_42;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v22 = a1;
        else
          v22 = 0;
        v9 = v22;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v23 = a2;
        else
          v23 = 0;
        v24 = v23;
        v12 = v24;
        if (!v9 || !v24)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "handleFailureInFunction:file:lineNumber:description:", v37, CFSTR("_UIEventDeferringBehavior.m"), 447, CFSTR("%s: Invalid state. Should be comparing two valid windows: window1: %p; window2: %p"),
            "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning"
            ">  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
            a1,
            a2);

        }
        v19 = _UIWindowCompareToWindow(v9, v12);
LABEL_41:
        v6 = v19;

LABEL_42:
        return v6;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v16 = a1;
      else
        v16 = 0;
      v9 = v16;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v17 = a2;
      else
        v17 = 0;
      v18 = v17;
      v12 = v18;
      if (!v9 || !v18)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "handleFailureInFunction:file:lineNumber:description:", v30, CFSTR("_UIEventDeferringBehavior.m"), 439, CFSTR("%s: Invalid state. Should be comparing two a window and a vc: vc1: %p; window2: %p"),
          "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning> "
          " _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
          a1,
          a2);

      }
      v13 = v12;
      v14 = v9;
      v15 = 0;
    }
    v19 = _UIWindowCompareToViewController(v13, v14, v15, 0);
    goto LABEL_41;
  }
  return 1;
}

uint64_t _UIWindowCompareToViewController(void *a1, void *a2, int a3, int a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  double v14;
  double v15;
  double v16;
  char v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  void *v22;

  if (!a1 || !a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIWindowCompareToViewController(UIWindow * _Nonnull const __strong, UIViewController * _Nonnull const __strong, BOOL, BOOL)");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("_UIEventDeferringBehavior.m"), 246, CFSTR("%s: Invalid state. Should be comparing two valid objects: window: %@; vc: %@"),
      "NSComparisonResult _UIWindowCompareToViewController(UIWindow * _Nonnull const __strong, UIViewController * _Nonnul"
      "l const __strong, BOOL, BOOL)",
      a1,
      a2);

  }
  objc_msgSend(a2, "_existingView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "window");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9 && (objc_msgSend(a1, "isHidden") & 1) != 0
    || objc_msgSend(v9, "isHidden") && (objc_msgSend(a1, "isHidden") & 1) != 0)
  {
    v10 = 0;
    goto LABEL_18;
  }
  if (!v9 && !objc_msgSend(a1, "isHidden")
    || !a4 && v9 == a1
    || objc_msgSend(v9, "isHidden"))
  {
    v11 = a3 == 0;
LABEL_14:
    v12 = 1;
    goto LABEL_15;
  }
  if (objc_msgSend(a1, "isHidden"))
  {
    v11 = a3 == 0;
    v12 = -1;
LABEL_15:
    if (v11)
      v10 = -v12;
    else
      v10 = v12;
    goto LABEL_18;
  }
  objc_msgSend(v9, "windowLevel");
  v15 = v14;
  objc_msgSend(a1, "windowLevel");
  v10 = 0;
  if (v9 == a1)
    v17 = a4;
  else
    v17 = 0;
  if (v15 != v16 && (v17 & 1) == 0)
  {
    objc_msgSend(v9, "windowLevel");
    v19 = v18;
    objc_msgSend(a1, "windowLevel");
    v11 = v19 > v20 == a3;
    goto LABEL_14;
  }
LABEL_18:

  return v10;
}

uint64_t _UIEventDeferringBehaviorIsElementOccludedByWindow(void *a1, void *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (!a1 || !a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("_UIEventDeferringBehavior.m"), 459, CFSTR("%s: Invalid state, an object is missing: ruleOwner: %@; window: %@"),
      "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull co"
      "nst __strong, UIWindow * _Nonnull const __strong)",
      a1,
      a2);

  }
  v4 = objc_msgSend(a1, "interfaceElementCategory");
  if (v4 < 2)
    return 0;
  v6 = v4;
  if (v4 == 3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = a1;
    else
      v7 = 0;
    v8 = v7;
    v9 = a2;
    if (!a2 || !v8)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("_UIEventDeferringBehavior.m"), 480, CFSTR("%s: Invalid state. Should be comparing a vc and a window: ruleOwner: %p; window: %p"),
        "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull "
        "const __strong, UIWindow * _Nonnull const __strong)",
        a1,
        v9);

    }
    v10 = _UIWindowCompareToViewController(v9, v8, 0, 1);
  }
  else
  {
    if (v4 != 2)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      _NSStringFromUIEventDeferringInterfaceElementCategory(v6);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("_UIEventDeferringBehavior.m"), 486, CFSTR("%s: Invalid state. Should be comparing two windows: ruleOwner: %@"), "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)", v20);

    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v11 = a1;
    else
      v11 = 0;
    v8 = v11;
    v12 = a2;
    if (!a2 || !v8)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("_UIEventDeferringBehavior.m"), 489, CFSTR("%s: Invalid state. Should be comparing two valid windows: ruleOwner: %p; window: %p"),
        "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull "
        "const __strong, UIWindow * _Nonnull const __strong)",
        a1,
        v12);

    }
    v10 = _UIWindowCompareToWindow(v8, v12);
  }
  v5 = v10;

  return v5;
}

uint64_t _UIEventDeferringBehaviorCarPlayShouldAllowFallbackWindowForEnvironment(void *a1, void *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id *v7;
  id *v8;
  void *v9;
  int v10;
  _BOOL4 v11;
  unsigned int v12;
  int v14;

  objc_msgSend(MEMORY[0x1E0D00CA8], "keyboardFocusEnvironment");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(a2, "isEqual:", v4);

  if ((_DWORD)v5)
  {
    objc_msgSend(a1, "eventDeferringManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "windowHostingScene");
    v7 = (id *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    -[UIWindowScene _keyWindow](v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (_UIInternalPreferencesRevisionOnce != -1)
      dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
    v10 = _UIInternalPreferencesRevisionVar;
    if (_UIInternalPreferencesRevisionVar < 1
      || (v14 = _UIInternalPreference_AllowCarPlayScenesToCallMakeKeyWindow,
          _UIInternalPreferencesRevisionVar == _UIInternalPreference_AllowCarPlayScenesToCallMakeKeyWindow))
    {
      v11 = 1;
    }
    else
    {
      do
      {
        v11 = v10 >= v14;
        if (v10 < v14)
          break;
        _UIInternalPreferenceSync(v10, &_UIInternalPreference_AllowCarPlayScenesToCallMakeKeyWindow, (uint64_t)CFSTR("AllowCarPlayScenesToCallMakeKeyWindow"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
        v14 = _UIInternalPreference_AllowCarPlayScenesToCallMakeKeyWindow;
      }
      while (v10 != _UIInternalPreference_AllowCarPlayScenesToCallMakeKeyWindow);
    }
    if (byte_1EDDA7D44)
      v12 = v11;
    else
      v12 = 1;
    if (v9)
      v5 = v12;
    else
      v5 = 1;

  }
  return v5;
}

uint64_t _UIDateComponentsEquivalentUnit(uint64_t result)
{
  uint64_t v1;

  if (result < 0x2000)
  {
    if (result == 512 || result == 1024)
    {
      return 16;
    }
    else if (result == 4096)
    {
      return 0x2000;
    }
  }
  else if (result >= 0x100000)
  {
    if (result == 0x100000 || result == 0x200000)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v1 = 4;
    if (result != 0x4000)
      v1 = result;
    if (result == 0x2000)
      return 0x2000;
    else
      return v1;
  }
  return result;
}

void _UIDateComponentsSetValue(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  BOOL v7;
  id v8;

  v5 = a1;
  v8 = v5;
  if (a2 > 511)
  {
    if (a2 <= 4095)
    {
      switch(a2)
      {
        case 512:
          objc_msgSend(v5, "setWeekday:", a3);
          break;
        case 1024:
          objc_msgSend(v5, "setWeekdayOrdinal:", a3);
          break;
        case 2048:
          objc_msgSend(v5, "setQuarter:", a3);
          break;
        default:
          goto LABEL_43;
      }
    }
    else if (a2 >= 0x4000)
    {
      if (a2 != 0x4000)
      {
        if (a2 != 0x10000)
          goto LABEL_43;
        if (a3)
        {
          if (a3 != 1)
            goto LABEL_43;
          v7 = objc_msgSend(v5, "hour") <= 11;
          v5 = v8;
          if (!v7)
            goto LABEL_43;
          v6 = objc_msgSend(v8, "hour") + 12;
        }
        else
        {
          v7 = objc_msgSend(v5, "hour") < 12;
          v5 = v8;
          if (v7)
            goto LABEL_43;
          v6 = objc_msgSend(v8, "hour") - 12;
        }
        v5 = v8;
        goto LABEL_41;
      }
      objc_msgSend(v5, "setYearForWeekOfYear:", a3);
    }
    else if (a2 == 4096)
    {
      objc_msgSend(v5, "setWeekOfMonth:", a3);
    }
    else
    {
      if (a2 != 0x2000)
        goto LABEL_43;
      objc_msgSend(v5, "setWeekOfYear:", a3);
    }
LABEL_42:
    v5 = v8;
    goto LABEL_43;
  }
  if (a2 <= 15)
  {
    switch(a2)
    {
      case 2:
        objc_msgSend(v5, "setEra:", a3);
        break;
      case 4:
        objc_msgSend(v5, "setYear:", a3);
        break;
      case 8:
        objc_msgSend(v5, "setMonth:", a3);
        break;
      default:
        goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (a2 > 63)
  {
    if (a2 == 64)
    {
      objc_msgSend(v5, "setMinute:", a3);
    }
    else
    {
      if (a2 != 128)
        goto LABEL_43;
      objc_msgSend(v5, "setSecond:", a3);
    }
    goto LABEL_42;
  }
  if (a2 == 16)
  {
    objc_msgSend(v5, "setDay:", a3);
    goto LABEL_42;
  }
  if (a2 == 32)
  {
    v6 = a3;
LABEL_41:
    objc_msgSend(v5, "setHour:", v6);
    goto LABEL_42;
  }
LABEL_43:

}

uint64_t _UIDateComponentsGetValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1;
  v4 = v3;
  v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (a2 > 511)
  {
    if (a2 <= 4095)
    {
      switch(a2)
      {
        case 512:
          v6 = objc_msgSend(v3, "weekday");
          goto LABEL_35;
        case 1024:
          v6 = objc_msgSend(v3, "weekdayOrdinal");
          goto LABEL_35;
        case 2048:
          v6 = objc_msgSend(v3, "quarter");
          goto LABEL_35;
      }
    }
    else if (a2 >= 0x4000)
    {
      if (a2 == 0x4000)
      {
        v6 = objc_msgSend(v3, "yearForWeekOfYear");
        goto LABEL_35;
      }
      if (a2 == 0x10000 && objc_msgSend(v3, "hour") != 0x7FFFFFFFFFFFFFFFLL)
        v5 = objc_msgSend(v4, "hour") > 11;
    }
    else
    {
      if (a2 == 4096)
      {
        v6 = objc_msgSend(v3, "weekOfMonth");
        goto LABEL_35;
      }
      if (a2 == 0x2000)
      {
        v6 = objc_msgSend(v3, "weekOfYear");
        goto LABEL_35;
      }
    }
  }
  else if (a2 <= 15)
  {
    switch(a2)
    {
      case 2:
        v6 = objc_msgSend(v3, "era");
        goto LABEL_35;
      case 4:
        v6 = objc_msgSend(v3, "year");
        goto LABEL_35;
      case 8:
        v6 = objc_msgSend(v3, "month");
        goto LABEL_35;
    }
  }
  else if (a2 > 63)
  {
    if (a2 == 64)
    {
      v6 = objc_msgSend(v3, "minute");
      goto LABEL_35;
    }
    if (a2 == 128)
    {
      v6 = objc_msgSend(v3, "second");
      goto LABEL_35;
    }
  }
  else
  {
    if (a2 == 16)
    {
      v6 = objc_msgSend(v3, "day");
      goto LABEL_35;
    }
    if (a2 == 32)
    {
      v6 = objc_msgSend(v3, "hour");
LABEL_35:
      v5 = v6;
    }
  }

  return v5;
}

uint64_t _UIDatePickerCompareDateComponents(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Value;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = a1;
  v6 = a2;
  if ((a3 & 2) != 0
    && objc_msgSend(v5, "era") != 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend(v6, "era") != 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = objc_msgSend(v5, "era");
    if (v7 < objc_msgSend(v6, "era"))
      goto LABEL_43;
    v8 = objc_msgSend(v5, "era");
    if (v8 > objc_msgSend(v6, "era"))
      goto LABEL_45;
  }
  if ((a3 & 4) != 0
    && objc_msgSend(v5, "year") != 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend(v6, "year") != 0x7FFFFFFFFFFFFFFFLL)
  {
    v18 = objc_msgSend(v5, "year");
    if (v18 < objc_msgSend(v6, "year"))
      goto LABEL_43;
    v19 = objc_msgSend(v5, "year");
    if (v19 > objc_msgSend(v6, "year"))
      goto LABEL_45;
  }
  if ((a3 & 8) != 0
    && objc_msgSend(v5, "month") != 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend(v6, "month") != 0x7FFFFFFFFFFFFFFFLL)
  {
    v20 = objc_msgSend(v5, "month");
    if (v20 < objc_msgSend(v6, "month"))
      goto LABEL_43;
    v21 = objc_msgSend(v5, "month");
    if (v21 > objc_msgSend(v6, "month"))
      goto LABEL_45;
  }
  if ((a3 & 0x10) != 0
    && objc_msgSend(v5, "day") != 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend(v6, "day") != 0x7FFFFFFFFFFFFFFFLL)
  {
    v22 = objc_msgSend(v5, "day");
    if (v22 < objc_msgSend(v6, "day"))
      goto LABEL_43;
    v23 = objc_msgSend(v5, "day");
    if (v23 > objc_msgSend(v6, "day"))
      goto LABEL_45;
  }
  if ((a3 & 0x20) != 0
    && objc_msgSend(v5, "hour") != 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend(v6, "hour") != 0x7FFFFFFFFFFFFFFFLL)
  {
    v9 = objc_msgSend(v5, "hour");
    if (v9 < objc_msgSend(v6, "hour"))
      goto LABEL_43;
    v10 = objc_msgSend(v5, "hour");
    if (v10 > objc_msgSend(v6, "hour"))
      goto LABEL_45;
  }
  if ((a3 & 0x40) != 0
    && objc_msgSend(v5, "minute") != 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend(v6, "minute") != 0x7FFFFFFFFFFFFFFFLL)
  {
    v11 = objc_msgSend(v5, "minute");
    if (v11 < objc_msgSend(v6, "minute"))
      goto LABEL_43;
    v12 = objc_msgSend(v5, "minute");
    if (v12 > objc_msgSend(v6, "minute"))
      goto LABEL_45;
  }
  if ((a3 & 0x80) != 0
    && objc_msgSend(v5, "second") != 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend(v6, "second") != 0x7FFFFFFFFFFFFFFFLL)
  {
    v13 = objc_msgSend(v5, "second");
    if (v13 < objc_msgSend(v6, "second"))
      goto LABEL_43;
    v14 = objc_msgSend(v5, "second");
    if (v14 > objc_msgSend(v6, "second"))
    {
LABEL_45:
      v17 = 1;
      goto LABEL_46;
    }
  }
  Value = _UIDateComponentsGetValue(v5, 0x10000);
  v16 = _UIDateComponentsGetValue(v6, 0x10000);
  if ((a3 & 0x10000) == 0 || Value == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_35;
  if (Value < v16)
  {
LABEL_43:
    v17 = -1;
    goto LABEL_46;
  }
  if (Value > v16)
    goto LABEL_45;
LABEL_35:
  v17 = 0;
LABEL_46:

  return v17;
}

uint64_t _UICalendarUnitForFormatCharacter(int a1)
{
  if ((a1 - 69) > 0x35)
    return 0x7FFFFFFFFFFFFFFFLL;
  else
    return qword_186682178[(__int16)(a1 - 69)];
}

uint64_t _UICalendarUnitIsSupported(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = 1;
  if (a1 <= 127)
  {
    v3 = a1 - 2;
    if (v3 <= 0x3E && ((1 << v3) & 0x4000000040004045) != 0)
      return result;
    return 0;
  }
  if (a1 <= 4095)
  {
    if (a1 != 128 && a1 != 512)
      return 0;
  }
  else if (a1 != 4096 && a1 != 0x2000 && a1 != 0x4000)
  {
    return 0;
  }
  return result;
}

_QWORD *_UICopyCalendarUnitsFromFormatString(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  void *v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v5 = a1;
  v6 = v5;
  if (a3)
  {
    v7 = objc_msgSend(v5, "length");
    v8 = malloc_type_calloc(v7, 8uLL, 0x100004000313F17uLL);
    *a3 = 0;
    if (v7)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = objc_msgSend(v6, "characterAtIndex:", v9);
        if (v12 == 39)
        {
          v10 ^= 1u;
        }
        else if ((v10 & 1) != 0)
        {
          v10 = 1;
        }
        else
        {
          v13 = _UICalendarUnitForFormatCharacter(v12);
          v10 = 0;
          if (v13 != 0x7FFFFFFFFFFFFFFFLL && (v13 & a2) != 0 && (v13 & v11) == 0)
          {
            v10 = 0;
            v8[(*a3)++] = v13;
            v11 |= v13;
          }
        }
        ++v9;
      }
      while (v7 != v9);
    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id _UIDatePickerDateFormatFromTemplate(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;

  v5 = a1;
  v6 = a2;
  if (a3)
  {
    if (objc_msgSend(MEMORY[0x1E0C99DC8], "_usesTwelveHourClock"))
      v7 = 2;
    else
      v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", v5, v7, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_186035884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void (*_UIGetSystemTraitTokensAffectingColorAppearance())(_QWORD, _QWORD, _QWORD)
{
  void (*v0)(_QWORD, _QWORD, _QWORD);
  void (*v2[5])(_QWORD, _QWORD, _QWORD);

  os_unfair_lock_lock((os_unfair_lock_t)&_UITraitLock);
  v0 = (void (*)(_QWORD, _QWORD, _QWORD))objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", _UITraitTokenSetCount((uint64_t)qword_1ECD7F7D8));
  v2[0] = (void (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v2[1] = (void (*)(_QWORD, _QWORD, _QWORD))3221225472;
  v2[2] = (void (*)(_QWORD, _QWORD, _QWORD))___UIGetSystemTraitTokensAffectingColorAppearance_block_invoke;
  v2[3] = (void (*)(_QWORD, _QWORD, _QWORD))&unk_1E16CC810;
  v2[4] = v0;
  _UITraitTokenSetEnumerate(qword_1ECD7F7D8, v2);
  os_unfair_lock_unlock((os_unfair_lock_t)&_UITraitLock);
  return v0;
}

uint64_t _UIGetTraitTokenValue(const __CFNumber *a1)
{
  void *v3;
  uint64_t valuePtr;

  valuePtr = 0;
  if (!CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr))
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSUInteger _getTraitTokenValue(_UITraitToken)"), CFSTR("UITrait_NonARC.m"), 95, CFSTR("Invalid trait token: %@"), a1);
  }
  return valuePtr;
}

__CFString *_UITraitDataTypeToString(unint64_t a1)
{
  if (a1 >= 5)
    return (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid _UITraitDataType (%ld)"), a1);
  else
    return off_1E16DBEA8[a1];
}

void _UIPickerViewCommonInit(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  UIView *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  UISelectionFeedbackGenerator *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[4];

  v30[3] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  *((_BYTE *)v1 + 520) = 1;
  *((_QWORD *)v1 + 66) = dyld_program_sdk_at_least();
  +[UIColor clearColor](UIColor, "clearColor");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)*((_QWORD *)v1 + 62);
  *((_QWORD *)v1 + 62) = v2;

  *((_BYTE *)v1 + 521) = 1;
  objc_msgSend(v1, "setClipsToBounds:", 1);
  v4 = [UIView alloc];
  objc_msgSend(v1, "bounds");
  v5 = -[UIView initWithFrame:](v4, "initWithFrame:");
  v6 = (void *)*((_QWORD *)v1 + 56);
  *((_QWORD *)v1 + 56) = v5;

  objc_msgSend(MEMORY[0x1E0CD2790], "layer");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)*((_QWORD *)v1 + 57);
  *((_QWORD *)v1 + 57) = v7;

  v9 = (void *)*((_QWORD *)v1 + 57);
  v29[0] = *MEMORY[0x1E0CD3060];
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = v10;
  v29[1] = CFSTR("bounds");
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v30[1] = v11;
  v29[2] = CFSTR("position");
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v30[2] = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, v29, 3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setActions:", v13);

  v14 = (void *)*((_QWORD *)v1 + 57);
  objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", *MEMORY[0x1E0CD2C48]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setCompositingFilter:", v15);

  objc_msgSend(v1, "_style");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "configureMaskGradientLayer:", *((_QWORD *)v1 + 57));

  v17 = [UISelectionFeedbackGenerator alloc];
  objc_msgSend(*((id *)v1 + 63), "selectionFeedbackGeneratorConfiguration");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = -[UIFeedbackGenerator initWithConfiguration:view:](v17, "initWithConfiguration:view:", v18, v1);
  v20 = (void *)*((_QWORD *)v1 + 67);
  *((_QWORD *)v1 + 67) = v19;

  if (dyld_program_sdk_at_least())
  {
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = ___UIPickerViewCommonInit_block_invoke;
    v26[3] = &unk_1E16B1B28;
    v27 = v1;
    +[UIView _performSystemAppearanceModifications:](UIView, "_performSystemAppearanceModifications:", v26);

  }
  objc_msgSend(v1, "backgroundColor");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v21)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = ___UIPickerViewCommonInit_block_invoke_2;
    v24[3] = &unk_1E16B1B28;
    v25 = v1;
    +[UIView _performSystemAppearanceModifications:](UIView, "_performSystemAppearanceModifications:", v24);

  }
  if (dyld_program_sdk_at_least())
  {
    v28[0] = 0x1E1A99498;
    v28[1] = 0x1E1A994F8;
    v28[2] = 0x1E1A99510;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 3);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (id)objc_msgSend(v1, "_registerForTraitTokenChanges:withTarget:action:", v22, v1, sel_invalidateIntrinsicContentSize);

  }
}

void sub_18603D930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIUpdateInputSetDebugDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = a2;
  if (!a2)
    v2 = mach_absolute_time();
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("Input Set, alignment=%i, inputListChanged=%i, inputs=%u:"), *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(unsigned int *)(a1 + 68));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = *(_QWORD *)(a1 + 72); i; i = *(_QWORD *)(i + 56))
  {
    _UIUpdateInputDebugDescription((unsigned int *)i, v2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    _UIUpdateDebugDescriptionIndented(v6, CFSTR("\n  - "), CFSTR("    "));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "appendString:", v7);

  }
  _UIUpdateInputAggregateCacheDebugDescription((unsigned int *)(a1 + 8), v2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  _UIUpdateDebugDescriptionIndented(v8, CFSTR("\n  "), CFSTR("  "));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "appendString:", v9);

  return v4;
}

void BUG_IN_CLIENT_OF_DIFFABLE_DATA_SOURCE__DUPLICATE_ITEM_IDENTIFIERS_IN_SECTION_SNAPSHOT(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(a1, "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "mutableCopy");

  v6 = objc_alloc_init(MEMORY[0x1E0C99E10]);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = v3;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i);
        if (objc_msgSend(v5, "containsObject:", v12))
          v13 = v6;
        else
          v13 = v5;
        objc_msgSend(v13, "addObject:", v12);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v9);
  }

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void BUG_IN_CLIENT_OF_DIFFABLE_DATA_SOURCE__DUPLICATE_ITEM_IDENTIFIERS_IN_SECTION_SNAPSHOT(NSOrderedSet *__strong, NSArray *__strong)");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("NSDiffableDataSourceSectionSnapshot.m"), 24, CFSTR("Identifiers in a section snapshot must be unique. Duplicate item identifiers: %@"), v6);

}

void sub_186046BCC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x228], 8);
  _Unwind_Resume(a1);
}

id _UIStatusBarGetLowestPrioritizedItem(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v14;
    v6 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v1);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        v9 = objc_msgSend(v8, "priority");
        if (v9 < v6)
        {
          v10 = v9;
          v11 = v8;

          v4 = v11;
          v6 = v10;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void *_UIStatusBarGetPriorityComparator()
{
  if (_UIStatusBarGetPriorityComparator_onceToken != -1)
    dispatch_once(&_UIStatusBarGetPriorityComparator_onceToken, &__block_literal_global_437);
  return _Block_copy((const void *)_UIStatusBarGetPriorityComparator_priorityComparator);
}

uint64_t _UIFocusEffectIsSystemDefaultVisible(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  _UIFocusEnvironmentContainingView(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v2)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Trying to apply an effect to an item that is no longer associated with a window.", buf, 2u);
      }

    }
    else
    {
      v8 = _UIFocusEffectIsSystemDefaultVisible___s_category;
      if (!_UIFocusEffectIsSystemDefaultVisible___s_category)
      {
        v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v8, (unint64_t *)&_UIFocusEffectIsSystemDefaultVisible___s_category);
      }
      v9 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "Trying to apply an effect to an item that is no longer associated with a window.", v11, 2u);
      }
    }
  }
  objc_msgSend(v1, "_window");
  v3 = objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v1, "_focusBehavior");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "focusRingVisibility");

    if (v5)
      v6 = v5 == 3;
    else
      v6 = 1;
    v3 = !v6;
  }

  return v3;
}

id _prefixForItem(int a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v9;
  void *v10;

  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull _prefixForItem(BOOL, BOOL, _UIDebugLogNodeTreeStyle * _Nonnull __strong)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("_UIDebugLogTree.m"), 203, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("treeStyle != nil"));

  }
  if (a1)
  {
    if (a2)
      objc_msgSend(v5, "node");
    else
      objc_msgSend(v5, "lastNode");
  }
  else if (a2)
  {
    objc_msgSend(v5, "intermediate");
  }
  else
  {
    objc_msgSend(v5, "trailing");
  }
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;

  return v7;
}

uint64_t stateMachineSpec_block_invoke_5_4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)a2, "_didTransitionToPossibleEndingTransition:", *(unsigned __int8 *)(a2 + 8));
}

void sub_18604CA0C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 112));
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_18604CD3C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_186050570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1860506BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1860509C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t numberOfItemsForWidth(void *a1, double a2, double a3)
{
  id v5;
  uint64_t v6;
  double v7;
  void *v8;
  void *v9;
  double v10;
  double v11;

  v5 = a1;
  if (objc_msgSend(v5, "count"))
  {
    v6 = 0;
    v7 = a3 * 0.9;
    while (1)
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (v8)
        objc_msgSend(v8, "doubleValue");
      else
        v10 = 0.0;
      v11 = v7 * v10;

      if (v11 >= a2)
        break;
      if (++v6 >= (unint64_t)objc_msgSend(v5, "count"))
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v6 = objc_msgSend(v5, "count");
  }

  return v6;
}

void scaleForWidth(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "lastObject");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
    objc_msgSend(v1, "doubleValue");

}

void _UIStatusBarDynamicSplitPerformBaseAnimation(void *a1, int a2, char a3, int a4, void *a5, double a6, double a7, double a8)
{
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  _QWORD v30[4];
  id v31;
  double v32;
  char v33;
  char v34;

  v15 = a1;
  v16 = (void *)MEMORY[0x1E0CD2710];
  v17 = a5;
  objc_msgSend(v16, "animationWithKeyPath:", CFSTR("filters.gaussianBlur.inputRadius"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (a2)
  {
    objc_msgSend(v15, "view");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "layer");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "presentationLayer");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "valueForKeyPath:", CFSTR("filters.gaussianBlur.inputRadius"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
      v24 = v23;
    else
      v24 = &unk_1E1A95D30;
    objc_msgSend(v19, "setFromValue:", v24);
    objc_msgSend(v19, "setToValue:", &unk_1E1A95D40);

  }
  else
  {
    objc_msgSend(v18, "setFromValue:", &unk_1E1A95D40);
    objc_msgSend(v19, "setToValue:", &unk_1E1A95D30);
  }
  objc_msgSend(v19, "setDuration:", a7);
  objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithName:", *MEMORY[0x1E0CD3048]);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setTimingFunction:", v25);

  objc_msgSend(v19, "setBeginTimeMode:", CFSTR("relative"));
  objc_msgSend(v19, "setBeginTime:", a8);
  objc_msgSend(v15, "view");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "layer");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "addAnimation:forKey:", v19, CFSTR("blur"));

  if (a4)
    v28 = 4;
  else
    v28 = 0;
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___UIStatusBarDynamicSplitPerformBaseAnimation_block_invoke;
  v30[3] = &unk_1E16C0840;
  v33 = a2;
  v34 = a3;
  v31 = v15;
  v32 = a6;
  v29 = v15;
  +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", v28, v30, v17, a7, a8);

}

void sub_186054074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id location)
{
  id *v44;
  id *v45;

  objc_destroyWeak(v44);
  objc_destroyWeak(v45);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _avoidanceFrameInLocalCoordinateSpace(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGRect v16;

  v1 = a1;
  objc_msgSend(v1, "statusBar");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "statusBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "avoidanceFrame");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  memset(&v15, 0, sizeof(v15));
  if (v2)
    objc_msgSend(v2, "_effectiveScaleTransform");
  v14 = v15;
  if (!CGAffineTransformIsIdentity(&v14))
  {
    v13 = v15;
    CGAffineTransformInvert(&v14, &v13);
    v15 = v14;
    v16.origin.x = v5;
    v16.origin.y = v7;
    v16.size.width = v9;
    v16.size.height = v11;
    *(_QWORD *)&v5 = (unint64_t)CGRectApplyAffineTransform(v16, &v14);
  }

  return v5;
}

id _UIStatusBarDynamicSplitDefaultAnimation(void *a1, void *a2)
{
  id v3;
  id v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[6];
  _QWORD v15[4];
  __int128 v16;
  __int128 v17;
  _QWORD v18[5];
  id v19;

  v3 = a1;
  v4 = a2;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x3032000000;
  v18[3] = __Block_byref_object_copy__160;
  v18[4] = __Block_byref_object_dispose__160;
  v19 = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x4010000000;
  v15[3] = &unk_18685B0AF;
  v5 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v16 = *MEMORY[0x1E0C9D648];
  v17 = v5;
  v6 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___UIStatusBarDynamicSplitDefaultAnimation_block_invoke;
  v14[3] = &unk_1E16DC510;
  v14[4] = v18;
  v14[5] = v15;
  +[_UIStatusBarAnimation animationWithBlock:](_UIStatusBarAnimation, "animationWithBlock:", v14);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = v6;
  v13[1] = 3221225472;
  v13[2] = ___UIStatusBarDynamicSplitDefaultAnimation_block_invoke_2;
  v13[3] = &unk_1E16DC538;
  v13[4] = v15;
  objc_msgSend(v7, "setPrepareBlock:", v13);
  objc_msgSend(v7, "setDelaysAnimatingItems:", 1);
  v12[0] = v6;
  v12[1] = 3221225472;
  v12[2] = ___UIStatusBarDynamicSplitDefaultAnimation_block_invoke_3;
  v12[3] = &unk_1E16DC560;
  v12[4] = v18;
  _UIStatusBarAddDefaultAnimationReposition(v3, v7, v4, v12);
  v8 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend(v3, "orderedDisplayItemPlacementsInRegionWithIdentifier:", 0x1E176D500);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setWithArray:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setDelayedDisplayItemPlacements:", v10);

  objc_msgSend(v7, "setPriority:", -100);
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(v18, 8);

  return v7;
}

void sub_186054868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_186056CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __ASSERT_UNTRACKED_SESSION__(void *a1, void *a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  id v7;

  v3 = a2;
  objc_msgSend(a1, "trackedSessions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "containsObject:", v3);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void __ASSERT_UNTRACKED_SESSION__(_UINavigationBarTitleRenamer * _Nonnull __strong, _UINavigationBarTitleRenamerSession * _Nonnull __strong)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("_UINavigationBarTitleRenamer.m"), 79, CFSTR("Renamer received a callback from a session not attached to this renamer."));

  }
}

_BYTE *_UIUpdateLinkMakeTrackingScene(void *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  int v4;
  int v5;
  void *v7;
  void *v8;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIUpdateLink * _Nonnull _UIUpdateLinkMakeTrackingScene(UIScene *const  _Nonnull const __strong)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("_UIUpdateLinkTracking.m"), 391, CFSTR("UIUpdateLink requires a non-null scene."));

  }
  objc_opt_self();
  v2 = -[_UIUpdateLinkTrackingScene _initWithScene:]([_UIUpdateLinkTrackingScene alloc], a1);
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, "_canEngage");
    if (v3[48] != v4)
    {
      v3[48] = v4;
      if (v3[50])
        v5 = v4;
      else
        v5 = 0;
      -[UIUpdateLink _setActive:]((uint64_t)v3, v5);
    }
  }
  return v3;
}

_UIUpdateLinkTrackingWindow *_UIUpdateLinkMakeTrackingView(void *a1)
{
  _UIUpdateLinkTrackingWindow *v2;
  void *v3;
  _UIUpdateLinkTrackingWindow *v4;
  _BOOL4 v5;
  int v6;
  _UIUpdateLinkViewInteraction *v7;
  id v8;
  void *v10;
  void *v11;
  objc_super v12;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIUpdateLink * _Nonnull _UIUpdateLinkMakeTrackingView(UIView *const  _Nonnull const __strong)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("_UIUpdateLinkTracking.m"), 397, CFSTR("UIUpdateLink requires a non-null view."));

  }
  if (!objc_msgSend(a1, "__isKindOfUIWindow"))
  {
    objc_opt_self();
    v2 = (_UIUpdateLinkTrackingWindow *)-[UIUpdateLink _init]([_UIUpdateLinkTrackingView alloc]);
    v7 = [_UIUpdateLinkViewInteraction alloc];
    if (v7)
    {
      v12.receiver = v7;
      v12.super_class = (Class)_UIUpdateLinkViewInteraction;
      v8 = objc_msgSendSuper2(&v12, sel_init);
      v3 = v8;
      if (v8)
        *((_QWORD *)v8 + 2) = v2;
    }
    else
    {
      v3 = 0;
    }
    *(_QWORD *)&v2->super._sceneForeground = v3;
    objc_msgSend(a1, "addInteraction:", v3);
    goto LABEL_15;
  }
  objc_opt_self();
  v2 = [_UIUpdateLinkTrackingWindow alloc];
  if (!v2)
    return v2;
  objc_msgSend(a1, "_windowHostingScene");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (_UIUpdateLinkTrackingWindow *)-[_UIUpdateLinkTrackingScene _initWithScene:](v2, v3);
  v2 = v4;
  if (!v4)
  {
LABEL_15:

    return v2;
  }
  -[_UIUpdateLinkTrackingWindow _switchWindowFrom:to:]((uint64_t)v4, 0, a1);
  v2 = v2;

  v5 = -[_UIUpdateLinkTrackingWindow _canEngage](v2, "_canEngage");
  if (v2->super.super.super._engaged != v5)
  {
    v2->super.super.super._engaged = v5;
    v6 = v2->super.super.super._enabled && v5;
    -[UIUpdateLink _setActive:]((uint64_t)v2, v6);
  }
  return v2;
}

void sub_18605AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18605BF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *_UIApplicationDeactivationReasonDescription(int a1)
{
  if ((a1 + 1) > 0x1F)
    return CFSTR("unknown");
  else
    return off_1E16DDE20[a1 + 1];
}

id _UIApplicationDeactivationReasonLoggableDescription(uint64_t a1)
{
  int has_internal_diagnostics;
  void *v3;
  void *v4;
  void *v6;

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v3 = (void *)MEMORY[0x1E0CB3940];
  if (has_internal_diagnostics)
  {
    _UIApplicationDeactivationReasonDescription(a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("%@ (%i)"), v6, a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%i"), a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

id _UIApplicationDeactivationReasonMaskLoggableDescription(uint64_t a1)
{
  void *v2;
  void *v4;
  int i;
  void *v6;
  void *v7;
  void *v8;

  if (os_variant_has_internal_diagnostics())
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i != 30; ++i)
    {
      if (((a1 >> i) & 1) != 0)
      {
        _UIApplicationDeactivationReasonDescription(i);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v6);

      }
    }
    v7 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringWithFormat:", CFSTR("[%@] (%i)"), v8, a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%i"), a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

uint64_t _UIAppStatusBarOrientation()
{
  uint64_t result;

  result = __SplashBoardOverrideStatusBarOrientation;
  if (!__SplashBoardOverrideStatusBarOrientation)
    return objc_msgSend((id)UIApp, "_safeInterfaceOrientationForNoWindow");
  return result;
}

double _UIAppStatusBarDefaultDoubleHeight()
{
  return 0.0;
}

uint64_t _UIAppSetStatusBarOrientation(uint64_t result)
{
  __SplashBoardOverrideStatusBarOrientation = result;
  return result;
}

void _UIAppSetStatusBarHeight(double a1)
{
  __SplashBoardOverrideStatusBarHeight = *(_QWORD *)&a1;
}

double UIInterfaceGetContentDisabledAlpha()
{
  return 0.4;
}

void _UIApplicationPerformWithViewServiceFallbackOrientationResolver(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void (**v6)(_QWORD);
  void *v7;
  id v8;

  v3 = a1;
  v4 = (id)_viewServiceFallbackOrientationMapResolver;
  v5 = (void *)_viewServiceFallbackOrientationMapResolver;
  _viewServiceFallbackOrientationMapResolver = (uint64_t)v3;
  v8 = v3;
  v6 = a2;

  v6[2](v6);
  v7 = (void *)_viewServiceFallbackOrientationMapResolver;
  _viewServiceFallbackOrientationMapResolver = (uint64_t)v4;

}

void getPGPictureInPictureProxyPictureInPictureActiveChangedNotification()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPGPictureInPictureProxyPictureInPictureActiveChangedNotificationSymbolLoc_ptr;
  v8 = getPGPictureInPictureProxyPictureInPictureActiveChangedNotificationSymbolLoc_ptr;
  if (!getPGPictureInPictureProxyPictureInPictureActiveChangedNotificationSymbolLoc_ptr)
  {
    v1 = PegasusLibrary();
    v0 = (id *)dlsym(v1, "PGPictureInPictureProxyPictureInPictureActiveChangedNotification");
    v6[3] = (uint64_t)v0;
    getPGPictureInPictureProxyPictureInPictureActiveChangedNotificationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getPGPictureInPictureProxyPictureInPictureActiveChangedNotification(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIApplication.m"), 7595, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_18605D4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIApplicationSupportsGlobalEdgeSwipeTouches()
{
  uint64_t result;

  if (qword_1EDDC80A0 != -1)
    dispatch_once(&qword_1EDDC80A0, &__block_literal_global_818);
  result = _UIDeviceSupportsGlobalEdgeSwipeTouches();
  if ((_DWORD)result)
  {
    LODWORD(result) = objc_msgSend((id)UIApp, "_isSpringBoard");
    if (byte_1EDDC7FF8)
      return 1;
    else
      return result;
  }
  return result;
}

void sub_18605DFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

BOOL _UIApplicationFlushRunLoopCATransactionIfTooLate(void *a1)
{
  double v2;
  void *v3;

  v2 = CFAbsoluteTimeGetCurrent() - *(double *)&__UIApplicationLastCAFlushTime;
  if (v2 > 0.0666666667)
  {
    v3 = (void *)MEMORY[0x186DC9484]();
    objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
    _cleanUpAfterCAFlushAndRunDeferredBlocks(a1, 0);
    objc_autoreleasePoolPop(v3);
  }
  return v2 > 0.0666666667;
}

void _UIApplicationAssertForExtensionType(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  uint64_t i;
  void *v10;
  const char *v11;
  unint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (qword_1EDDC80D0 != -1)
    dispatch_once(&qword_1EDDC80D0, &__block_literal_global_902);
  if (byte_1EDDC7FFB)
  {
    if (qword_1EDDC80F0 != -1)
      dispatch_once(&qword_1EDDC80F0, &__block_literal_global_912);
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v15;
      v6 = 0x1E0CB3000uLL;
      v7 = 0x1E0CB3000uLL;
      v8 = "void _UIApplicationAssertForExtensionType(NSArray *__strong)";
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v15 != v5)
            objc_enumerationMutation(v2);
          if (objc_msgSend((id)qword_1EDDC80E8, "isEqualToString:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i)))
          {
            objc_msgSend(*(id *)(v6 + 1160), "currentHandler");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(v7 + 2368), "stringWithUTF8String:", v8);
            v11 = v8;
            v12 = v7;
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("UIApplication.m"), 3486, CFSTR("Feature not available in extensions of type %@"), qword_1EDDC80E8);

            v7 = v12;
            v8 = v11;

            v6 = 0x1E0CB3000;
          }
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v4);
    }

  }
}

uint64_t _UIApplicationIsKeyboardMediaService()
{
  if (qword_1EDDC8100 != -1)
    dispatch_once(&qword_1EDDC8100, &__block_literal_global_917_0);
  return byte_1EDDC7FFE;
}

uint64_t _UIApplicationIsStickerPickerService()
{
  if (qword_1EDDC8140 != -1)
    dispatch_once(&qword_1EDDC8140, &__block_literal_global_933_0);
  return byte_1EDDC8006;
}

uint64_t _UIApplicationProcessIsPointerUI()
{
  if (qword_1EDDC8160 != -1)
    dispatch_once(&qword_1EDDC8160, &__block_literal_global_945_0);
  return byte_1EDDC800A;
}

uint64_t _UIApplicationProcessIsUIKitester()
{
  if (qword_1EDDC8168 != -1)
    dispatch_once(&qword_1EDDC8168, &__block_literal_global_948);
  return byte_1EDDC800B;
}

uint64_t _UIApplicationProcessIsControlCenterHostApp()
{
  if (qword_1EDDC8178 != -1)
    dispatch_once(&qword_1EDDC8178, &__block_literal_global_954_0);
  return byte_1EDDC800D;
}

void _alertItemStateChanged()
{
  if (pthread_main_np() == 1)
    objc_msgSend((id)UIApp, "_alertItemStateChanged");
  else
    dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_3074);
}

void _significantTimeChange()
{
  if (pthread_main_np() == 1)
    ___significantTimeChange_block_invoke();
  else
    dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_3075);
}

void _languageChanged()
{
  if (pthread_main_np() == 1)
    ___languageChanged_block_invoke();
  else
    dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_3077);
}

void _localeWillChange()
{
  if (pthread_main_np() == 1)
    ___localeWillChange_block_invoke();
  else
    dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_3078);
}

void _localeChanged()
{
  if (pthread_main_np() == 1)
    ___localeChanged_block_invoke();
  else
    dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_3079);
}

void _keybagLockStatusChanged(uint64_t a1, uint64_t a2)
{
  void (**v2)(_QWORD);
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___keybagLockStatusChanged_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  aBlock[4] = a2;
  v2 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (pthread_main_np() == 1)
    v2[2](v2);
  else
    dispatch_async(MEMORY[0x1E0C80D38], v2);

}

void _UIApplicationLoadWebKit()
{
  if (_UIApplicationLoadWebKit_onceToken != -1)
    dispatch_once(&_UIApplicationLoadWebKit_onceToken, &__block_literal_global_1086_0);
}

BOOL _UIApplicationIsWebKitLoaded()
{
  return WebKitFramework != 0;
}

uint64_t _UIAppEffectiveUserInterfaceStyle()
{
  return objc_msgSend((id)UIApp, "_systemUserInterfaceStyle");
}

uint64_t _UIAppSetEffectiveUserInterfaceStyle(uint64_t a1)
{
  return objc_msgSend((id)UIApp, "_setSystemUserInterfaceStyle:", a1);
}

void sub_186063404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18606350C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _FBSSceneForPressesEvent(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  objc_msgSend(a1, "anyObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "windowScene");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "_FBSScene");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend(v3, "_screen");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "displayIdentity");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    __UIApplicationFirstSceneMatchingDisplayIdentityAssertingUISceneLifecycle(v9, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v7;
}

void _logApplicationLifecycleMemoryMetricApplicationWillBeSuspended()
{
  NSObject *v0;
  int v1;
  void *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  _applicationLifecycleMemoryMetricLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v0))
  {
    v1 = 138543362;
    v2 = _MXSignpostMetricsSnapshot();
    _os_signpost_emit_with_name_impl(&dword_185066000, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ApplicationWillBeSuspended", "\n%{public, signpost:metrics}@", (uint8_t *)&v1, 0xCu);
  }

}

id getPGPictureInPictureProxyClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPGPictureInPictureProxyClass_softClass;
  v7 = getPGPictureInPictureProxyClass_softClass;
  if (!getPGPictureInPictureProxyClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getPGPictureInPictureProxyClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getPGPictureInPictureProxyClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18606445C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _annotationValueToReportToDelegateForPayload(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  const __CFString *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "valueForKey:", CFSTR("UIApplicationLaunchOptionsAnnotationKey"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    if (v1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v2 = v1;
        objc_msgSend(v2, "valueForKey:", CFSTR("UIApplicationOpenURLOptionsAnnotationKey"));
        v3 = (void *)objc_claimAutoreleasedReturnValue();

        v1 = v2;
        if (!v3)
        {
          v6 = CFSTR("UIApplicationOpenURLOptionsAnnotationKey");
          v7[0] = v2;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
          v1 = (void *)objc_claimAutoreleasedReturnValue();

        }
      }
    }
  }
  v4 = v1;

  return v4;
}

void _UIApplicationResolveURLUsingModalProgressControllerForNonOpenInPlaceBookmarkableString(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  uint8_t buf[4];
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v6)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v25, OS_LOG_TYPE_FAULT, "Attempted to resolve a URL with a nil scene", buf, 2u);
      }

    }
    else
    {
      v20 = qword_1EDDC8290;
      if (!qword_1EDDC8290)
      {
        v20 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v20, (unint64_t *)&qword_1EDDC8290);
      }
      v21 = *(NSObject **)(v20 + 8);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_185066000, v21, OS_LOG_TYPE_ERROR, "Attempted to resolve a URL with a nil scene", buf, 2u);
      }
    }
  }
  +[_UIApplicationModalProgressController sharedInstance](_UIApplicationModalProgressController, "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = v6;
    +[_UIApplicationModalProgressController instanceForScene:](_UIApplicationModalProgressController, "instanceForScene:", v9);
    v10 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "traitCollection");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "userInterfaceIdiom");

    if (v12 == 6)
    {
      objc_msgSend(v9, "keyWindow");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "rootViewController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v14 = 0;
    }

    v8 = (void *)v10;
  }
  else
  {
    v14 = 0;
  }
  objc_msgSend(MEMORY[0x1E0C99E98], "ui_URLFromExportBookmark:", v5);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (os_variant_has_internal_diagnostics())
  {
    if (v15)
      goto LABEL_10;
    __UIFaultDebugAssertLog();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      v31 = v5;
      _os_log_fault_impl(&dword_185066000, v22, OS_LOG_TYPE_FAULT, "Could not resolve URL for import bookmark %@", buf, 0xCu);
    }

  }
  else
  {
    if (v15)
    {
LABEL_10:
      objc_msgSend(v15, "startAccessingSecurityScopedResource");
      objc_msgSend(MEMORY[0x1E0C99E98], "ui_incomingDirectory:", 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "lastPathComponent");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "URLByAppendingPathComponent:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = ___UIApplicationResolveURLUsingModalProgressControllerForNonOpenInPlaceBookmarkableString_block_invoke;
      v26[3] = &unk_1E16C3FE0;
      v27 = v15;
      v28 = v18;
      v29 = v7;
      v19 = v18;
      objc_msgSend(v8, "displayForCopyingFileAtURL:toURL:sourceViewController:completionHandler:", v27, v19, v14, v26);

      goto LABEL_11;
    }
    v23 = qword_1EDDC8298;
    if (!qword_1EDDC8298)
    {
      v23 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v23, (unint64_t *)&qword_1EDDC8298);
    }
    v24 = *(NSObject **)(v23 + 8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v31 = v5;
      _os_log_impl(&dword_185066000, v24, OS_LOG_TYPE_ERROR, "Could not resolve URL for import bookmark %@", buf, 0xCu);
    }
  }
LABEL_11:

}

void sub_186065CD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_186066494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860666E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18606690C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void softlink_SBSSpringBoardServerPort()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = getSBSSpringBoardServerPortSymbolLoc_ptr;
  v7 = getSBSSpringBoardServerPortSymbolLoc_ptr;
  if (!getSBSSpringBoardServerPortSymbolLoc_ptr)
  {
    v1 = SpringBoardServicesLibrary_1();
    v0 = dlsym(v1, "SBSSpringBoardServerPort");
    v5[3] = (uint64_t)v0;
    getSBSSpringBoardServerPortSymbolLoc_ptr = v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
  {
    ((void (*)(void))v0)();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "mach_port_t softlink_SBSSpringBoardServerPort(void)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIApplication.m"), 485, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_186066A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186067A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_18606857C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186068894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186068B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __UIApplicationFirstSceneMatchingDisplayIdentityAssertingUISceneLifecycle(void *a1, int a2)
{
  id v3;
  BOOL v4;
  void *v5;
  id v6;
  id v7;
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (os_variant_has_internal_diagnostics())
    v4 = a2 == 0;
  else
    v4 = 1;
  if (!v4 && objc_msgSend((id)UIApp, "_appAdoptsUISceneLifecycle"))
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "FBSScene *__UIApplicationFirstSceneMatchingDisplayIdentityAssertingUISceneLifecy"
                                        "cle(FBSDisplayIdentity *__strong, BOOL)";
        _os_log_fault_impl(&dword_185066000, v11, OS_LOG_TYPE_FAULT, "Error in UIKit client: %s should not be called if the client adopts UIScene lifecycle as it will return unexpected results.", (uint8_t *)&buf, 0xCu);
      }

    }
    else
    {
      v9 = qword_1EDDC8488;
      if (!qword_1EDDC8488)
      {
        v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v9, (unint64_t *)&qword_1EDDC8488);
      }
      v10 = *(NSObject **)(v9 + 8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "FBSScene *__UIApplicationFirstSceneMatchingDisplayIdentityAssertingUISceneLifecy"
                                        "cle(FBSDisplayIdentity *__strong, BOOL)";
        _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Error in UIKit client: %s should not be called if the client adopts UIScene lifecycle as it will return unexpected results.", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__161;
  v18 = __Block_byref_object_dispose__161;
  v19 = 0;
  v5 = (void *)qword_1EDDC8098;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ____UIApplicationFirstSceneMatchingDisplayIdentityAssertingUISceneLifecycle_block_invoke;
  v12[3] = &unk_1E16DD548;
  v6 = v3;
  v13 = v6;
  p_buf = &buf;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v12);
  v7 = *(id *)(*((_QWORD *)&buf + 1) + 40);

  _Block_object_dispose(&buf, 8);
  return v7;
}

void sub_18606B520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _UIApplicationPressEventConformsToType(uint64_t a1, uint64_t a2)
{
  int Type;
  void *v5;
  uint64_t v6;
  uint64_t IntegerValue;
  _BOOL8 result;

  Type = IOHIDEventGetType();
  if (Type == 3)
  {
    if (_UIEventHIDPressTypeForKeyboardHIDEvent() == -1)
      return 0;
    return _UIEventHIDPressTypeForKeyboardHIDEvent() == a2;
  }
  if (Type != 29)
  {
    if (Type != 17)
      return 0;
    _UIEventHIDUIScreenForHIDEvent(a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "_userInterfaceIdiom");

    if (v6 != 3)
      return 0;
    return _UIEventHIDPressTypeForKeyboardHIDEvent() == a2;
  }
  IntegerValue = IOHIDEventGetIntegerValue();
  result = 0;
  if (IntegerValue && IntegerValue != 3)
    return _UIEventHIDPressTypeForKeyboardHIDEvent() == a2;
  return result;
}

id getSDRDiagnosticReporterClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EDDC8490;
  v7 = qword_1EDDC8490;
  if (!qword_1EDDC8490)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSDRDiagnosticReporterClass_block_invoke_1;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSDRDiagnosticReporterClass_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18606DBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _SetUIAnimationDragCoefficient(float a1)
{
  _UISetUIAnimationDragCoefficient(a1);
}

void _UISetUIAnimationDragCoefficient(double a1)
{
  uint64_t *v2;
  uint64_t v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    qword_1ECD76818 = *(_QWORD *)&a1;
    dword_1ECD76810 = 0x7FFFFFFF;
    if (&_UIInternalPreferencesListener___COUNTER__ != &__PhotoLibraryFrameworkHandle)
    {
      v2 = &_UIInternalPreferencesListener___COUNTER__;
      do
      {
        v3 = *v2++;
        (*(void (**)(void))(v3 + 16))();
      }
      while (v2 != &__PhotoLibraryFrameworkHandle);
    }
  }
}

void _ResetUIAnimationDragCoefficient()
{
  _UISetUIAnimationDragCoefficient(1.0);
}

void _setNextWakeDate()
{
  double v0;
  void *v1;
  double v2;
  void *v3;
  id v4;

  if (*(double *)&qword_1EDDC8340 == -1.0)
  {
    v0 = *MEMORY[0x1E0DC5C98];
  }
  else
  {
    if (*(double *)&qword_1EDDC8340 <= 0.0)
      objc_msgSend(MEMORY[0x1E0C99D68], "distantPast", *(double *)&qword_1EDDC8340);
    else
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceNow:", *(double *)&qword_1EDDC8340);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "timeIntervalSinceReferenceDate");
    v0 = v2;

  }
  v3 = *(void **)(UIApp + 392);
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_setNextWakeDate:", v4);

}

void _backgroundRefreshStatusDidChange(uint64_t a1, uint64_t a2)
{
  void (**v2)(_QWORD);
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___backgroundRefreshStatusDidChange_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  aBlock[4] = a2;
  v2 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (pthread_main_np() == 1)
    v2[2](v2);
  else
    dispatch_async(MEMORY[0x1E0C80D38], v2);

}

void __MRMediaRemoteSetCanBeNowPlayingApplication(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getMRMediaRemoteSetCanBeNowPlayingApplicationSymbolLoc_ptr;
  v9 = getMRMediaRemoteSetCanBeNowPlayingApplicationSymbolLoc_ptr;
  if (!getMRMediaRemoteSetCanBeNowPlayingApplicationSymbolLoc_ptr)
  {
    v3 = MediaRemoteLibrary();
    v2 = dlsym(v3, "MRMediaRemoteSetCanBeNowPlayingApplication");
    v7[3] = (uint64_t)v2;
    getMRMediaRemoteSetCanBeNowPlayingApplicationSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(uint64_t))v2)(a1);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean __MRMediaRemoteSetCanBeNowPlayingApplication(Boolean)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIApplication.m"), 15389, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1860739C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __MRMediaRemoteSetCommandHandlerBlock(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getMRMediaRemoteSetCommandHandlerBlockSymbolLoc_ptr;
  v9 = getMRMediaRemoteSetCommandHandlerBlockSymbolLoc_ptr;
  if (!getMRMediaRemoteSetCommandHandlerBlockSymbolLoc_ptr)
  {
    v3 = MediaRemoteLibrary();
    v2 = dlsym(v3, "MRMediaRemoteSetCommandHandlerBlock");
    v7[3] = (uint64_t)v2;
    getMRMediaRemoteSetCommandHandlerBlockSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(id))v2)(v1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void __MRMediaRemoteSetCommandHandlerBlock(__strong MRMediaRemoteCommandHandlerBlock)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIApplication.m"), 15390, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_186073AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18607416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186074398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UISystemShellAllowsSceneRequests()
{
  if (qword_1EDDC8350 != -1)
    dispatch_once(&qword_1EDDC8350, &__block_literal_global_1678_0);
  return byte_1EDDC801A;
}

uint64_t _UIApplicationUsesAlternateUI()
{
  return 0;
}

id _UIAdaptLocalizedStringForView(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  if (qword_1EDDC8380 != -1)
    dispatch_once(&qword_1EDDC8380, &__block_literal_global_2772);
  objc_msgSend(v4, "_window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    objc_msgSend(v4, "_window");
  else
    +[UIWindow _applicationKeyWindow](UIWindow, "_applicationKeyWindow");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "bounds");
  v8 = v7;

  objc_msgSend(v3, "variantFittingPresentationWidth:", (unint64_t)(v8 / *(double *)&qword_1EDDC8378));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id _UILocalizedStringWithDefaultValueInLanguage(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    v8 = (void *)MEMORY[0x1E0CB34D0];
    _UIKitBundle();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizations");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = v6;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "preferredLocalizationsFromArray:forPreferences:", v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "firstObject");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      v14 = v13;

      v6 = v14;
    }

  }
  _UIKitBundle();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "localizedStringForKey:value:table:localization:", v5, v7, 0, v6);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void _deleteRestorationArchive(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char v4;
  id v5;
  id v6;

  v1 = a1;
  _restorationPath(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _deleteRestorationInProgressFile(v1);

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 0;
  v4 = objc_msgSend(v3, "removeItemAtURL:error:", v2, &v6);
  v5 = v6;

  if ((v4 & 1) == 0 && _UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Warning: Unable to delete State Restoration archive: %@"), "BOOL _deleteRestorationArchive(NSString *__strong)", v5);

}

void sub_186077454(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v14;
  id v16;

  v14 = v12;
  objc_sync_exit(v14);
  if (a2 == 2)
  {
    v16 = objc_begin_catch(a1);
    NSLog(CFSTR("Exception occurred restoring state for session %@: %@"));

    objc_end_catch();
    JUMPOUT(0x1860773E8);
  }
  objc_begin_catch(a1);
  JUMPOUT(0x1860773ECLL);
}

void sub_186078718(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_186078730(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18607873CLL);
}

void _encodeStateRestorationClassForObject(void *a1, void *a2)
{
  id v3;
  objc_class *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = a1;
  v3 = a2;
  v4 = (objc_class *)objc_opt_class();
  if (v4 && (NSStringFromClass(v4), (v5 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    v6 = (void *)v5;
    objc_msgSend(v3, "encodeObject:forKey:", v5, CFSTR("kUIStateRestorationClassNameKey"));

  }
  else
  {
    NSLog(CFSTR("Warning: Can't get class name for object for state restoration archive: %@"), v7);
  }

}

void _encodeRestorationStateForViewAndSubviews(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  char v23;

  v19 = a1;
  v7 = a2;
  v8 = a3;
  +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", v19);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v9)
    v11 = v9 == (_QWORD)v7;
  else
    v11 = 1;
  if (v11)
  {
    objc_msgSend(v19, "_restorationIdentifierPath");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      if (_UIStateRestorationDebugLogEnabled())
        NSLog(CFSTR("%s: Encoding state for view with restoration identifier path %@: %@"), "void _encodeRestorationStateForViewAndSubviews(UIView *__strong, UIViewController *__strong, NSMutableDictionary *__strong, BOOL)", v12, v19);
      v13 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
      v14 = -[NSKeyedArchiver initRequiringSecureCoding:]([UIStateRestorationKeyedArchiver alloc], "initRequiringSecureCoding:", a4);
      +[_UIStateRestorationKeyedArchiverDelegate sharedDelegate](_UIStateRestorationKeyedArchiverDelegate, "sharedDelegate");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setDelegate:", v15);

      _encodeStateRestorationClassForObject(v19, v14);
      objc_msgSend(v19, "encodeRestorableStateWithCoder:", v14);
      objc_msgSend(v14, "finishEncoding");
      objc_msgSend(v14, "encodedData");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKey:", v16, v12);

    }
    objc_msgSend(v19, "subviews");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = ___encodeRestorationStateForViewAndSubviews_block_invoke;
    v20[3] = &unk_1E16DDD30;
    v21 = v7;
    v22 = v8;
    v23 = a4;
    objc_msgSend(v17, "enumerateObjectsUsingBlock:", v20);

  }
  else if (_UIStateRestorationDebugLogEnabled())
  {
    NSLog(CFSTR("%s: Skipping state encoding for view %@, viewDelegate controller is not the same as the controller we're walking: %@, %@"), "void _encodeRestorationStateForViewAndSubviews(UIView *__strong, UIViewController *__strong, NSMutableDictionary *__strong, BOOL)", v19, v10, v7);
  }

}

void _UIApplicationHandleEvent(uint64_t a1)
{
  void *v2;
  double v3;
  uint64_t v4;
  void *v5;
  unint64_t HIDTimestamp;
  unsigned int v7;
  int v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x186DC9484]();
  v3 = CACurrentMediaTime();
  v4 = objc_msgSend(MEMORY[0x1E0CD28B0], "startFrameWithReason:beginTime:commitDeadline:", 32, v3, v3 + _UIQOSMaxFrameDurationSeconds());
  v5 = (void *)MEMORY[0x1E0CD28B0];
  HIDTimestamp = GSEventGetHIDTimestamp();
  objc_msgSend(v5, "setFrameInputTime:withToken:", v4, _UIMediaTimeForMachTime(HIDTimestamp));
  if (GSEventShouldRouteToFrontMost())
  {
    GSEventRemoveShouldRouteToFrontMost();
    v7 = GSEventGetType() - 1000;
    if (v7 < 0x14 && ((0xC3FC3u >> v7) & 1) != 0)
      v8 = 0;
    else
      v8 = objc_msgSend((id)UIApp, "_frontmostApplicationPort");
    if ((objc_msgSend((id)UIApp, "_accessibilityCaptureSimulatorEvent:", a1) & 1) != 0)
      goto LABEL_19;
    if ((v8 - 1) <= 0xFFFFFFFD)
    {
      _GSEventGetGSEventRecord();
      GSSendEvent();
      goto LABEL_19;
    }
  }
  objc_msgSend((id)UIApp, "_event");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "_setGSEvent:", a1);
  v10 = qword_1EDDC84F0;
  if (!qword_1EDDC84F0)
  {
    v10 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v10, (unint64_t *)&qword_1EDDC84F0);
  }
  if ((*(_BYTE *)v10 & 1) != 0)
  {
    v12 = *(NSObject **)(v10 + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = v12;
      v15 = 67109120;
      LODWORD(v16) = GSEventGetType();
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "Received event of type: %d", (uint8_t *)&v15, 8u);

    }
  }
  if (!objc_msgSend((id)UIApp, "isIgnoringInteractionEvents")
    || (objc_msgSend((id)UIApp, "_isInteractionEvent:", a1) & 1) == 0)
  {
    v11 = qword_1EDDC84F8;
    if (!qword_1EDDC84F8)
    {
      v11 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v11, (unint64_t *)&qword_1EDDC84F8);
    }
    if ((*(_BYTE *)v11 & 1) != 0)
    {
      v14 = *(NSObject **)(v11 + 8);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = 138412290;
        v16 = v9;
        _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "Delivering event %@", (uint8_t *)&v15, 0xCu);
      }
    }
    objc_msgSend((id)UIApp, "sendEvent:", v9);
  }

LABEL_19:
  objc_msgSend(MEMORY[0x1E0CD28B0], "finishFrameWithToken:", v4);
  objc_autoreleasePoolPop(v2);
}

uint64_t _UIUpdatedVisualStyleEnabled()
{
  return 1;
}

uint64_t _UIUpdatedVisualStyleAllowed()
{
  return 1;
}

uint64_t _UIHidesUpdatedVisualStyle()
{
  return 0;
}

uint64_t _UIDynamicUserInterfaceStyleEnabled()
{
  return 1;
}

id _applicationLifecycleMemoryMetricLogHandle()
{
  if (qword_1EDDC8450 != -1)
    dispatch_once(&qword_1EDDC8450, &__block_literal_global_3056);
  return (id)qword_1EDDC8448;
}

void ___applicationLifecycleMemoryMetricLogHandle_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.UIKit", "UIApplicationLifecycle");
  v1 = (void *)qword_1EDDC8448;
  qword_1EDDC8448 = (uint64_t)v0;

}

void *PegasusLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!PegasusLibraryCore_frameworkLibrary)
    PegasusLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)PegasusLibraryCore_frameworkLibrary;
  if (!PegasusLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PegasusLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIApplication.m"), 7593, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getPGPictureInPictureProxyClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PegasusLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PGPictureInPictureProxy");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPGPictureInPictureProxyClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPGPictureInPictureProxyClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIApplication.m"), 7594, CFSTR("Unable to find class %s"), "PGPictureInPictureProxy");

    __break(1u);
  }
}

void *__getFPDocumentURLFromBookmarkableStringSymbolLoc_block_invoke_0(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1EDDC8460)
    qword_1EDDC8460 = _sl_dlopen();
  v2 = (void *)qword_1EDDC8460;
  if (!qword_1EDDC8460)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *FileProviderLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIApplication.m"), 7973, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "FPDocumentURLFromBookmarkableString");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  off_1EDDC8458 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

Class __getINUIAppIntentForwardingActionExecutorClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1EDDC8470)
    qword_1EDDC8470 = _sl_dlopen();
  if (!qword_1EDDC8470)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *IntentsUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIApplication.m"), 8208, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("INUIAppIntentForwardingActionExecutor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getINUIAppIntentForwardingActionExecutorClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIApplication.m"), 8209, CFSTR("Unable to find class %s"), "INUIAppIntentForwardingActionExecutor");

LABEL_8:
    __break(1u);
  }
  qword_1EDDC8468 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void ___keybagLockStatusChanged_block_invoke(uint64_t a1)
{
  int v1;
  void *v2;
  char v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFString *v7;
  void *v8;
  char v9;
  void *v10;
  id v11;

  v11 = *(id *)(a1 + 32);
  v1 = MKBGetDeviceLockState();
  if (!v1)
  {
    objc_msgSend(v11, "delegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_respondsToSelector();

    if ((v9 & 1) != 0)
    {
      objc_msgSend(v11, "delegate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "applicationProtectedDataDidBecomeAvailable:", v11);

    }
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = CFSTR("UIApplicationProtectedDataDidBecomeAvailable");
    goto LABEL_9;
  }
  if (v1 == 2)
  {
    objc_msgSend(v11, "delegate");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_opt_respondsToSelector();

    if ((v3 & 1) != 0)
    {
      objc_msgSend(v11, "delegate");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "applicationProtectedDataWillBecomeUnavailable:", v11);

    }
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = CFSTR("UIApplicationProtectedDataWillBecomeUnavailable");
LABEL_9:
    objc_msgSend(v5, "postNotificationName:object:userInfo:", v7, v11, 0);

  }
}

uint64_t ___alertItemStateChanged_block_invoke()
{
  return objc_msgSend((id)UIApp, "_alertItemStateChanged");
}

uint64_t ___significantTimeChange_block_invoke()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0C99E80], "resetSystemTimeZone");
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:userInfo:", CFSTR("_UIApplicationSignificantTimeChangeNotification"), UIApp, 0);

  return objc_msgSend((id)UIApp, "significantTimeChange");
}

void ___languageChanged_block_invoke()
{
  id v0;

  UIResetDateFormats();
  _UIResetDatePicker();
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:userInfo:", CFSTR("_UIApplicationLanguageChangedNotification"), UIApp, 0);

}

void ___localeWillChange_block_invoke()
{
  id v0;

  _UIWillResetDatePicker();
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:userInfo:", CFSTR("_UIApplicationLocaleWillChange"), UIApp, 0);

}

void ___localeChanged_block_invoke()
{
  id v0;

  _UIResetDatePicker();
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:userInfo:", CFSTR("_UIApplicationLocaleDidChange"), UIApp, 0);

}

Class __getSDRDiagnosticReporterClass_block_invoke_1(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1EDDC8498)
    qword_1EDDC8498 = _sl_dlopen();
  if (!qword_1EDDC8498)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SymptomDiagnosticReporterLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIApplication.m"), 549, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("SDRDiagnosticReporter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSDRDiagnosticReporterClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIApplication.m"), 550, CFSTR("Unable to find class %s"), "SDRDiagnosticReporter");

LABEL_8:
    __break(1u);
  }
  qword_1EDDC8490 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void ___backgroundRefreshStatusDidChange_block_invoke(uint64_t a1)
{
  id v2;

  _cachedBackgroundRefreshStatus = -1;
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("UIApplicationBackgroundRefreshStatusDidChangeNotification"), *(_QWORD *)(a1 + 32));

}

void *MediaRemoteLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MediaRemoteLibraryCore_frameworkLibrary)
    MediaRemoteLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)MediaRemoteLibraryCore_frameworkLibrary;
  if (!MediaRemoteLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MediaRemoteLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIApplication.m"), 15376, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

uint64_t _updateRestorationInProgressFile(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  _restorationInProgressFilePath(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "writeToURL:atomically:", v4, 1);

  return v5;
}

uint64_t ___encodeRestorationStateForViewAndSubviews_block_invoke(uint64_t a1, uint64_t a2)
{
  return _encodeRestorationStateForViewAndSubviews(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void ___restoreState_block_invoke_3186(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  char v16;
  char v17;
  char v18;
  int IsSuitableForDecoding;
  int v20;
  void *v21;
  const __CFString *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __objc2_class **v45;
  __objc2_class **v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  int v52;
  void *v53;
  void *v54;
  uint64_t v55;
  __objc2_class **v56;
  __objc2_class **v57;
  id v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t j;
  void (**v72)(_QWORD);
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  const __CFString *v81;
  __CFString *v82;
  __CFString *v83;
  __CFString *v84;
  __CFString *v85;
  void *v86;
  uint64_t v87;
  __CFString *v88;
  __CFString *v89;
  void *v90;
  uint64_t v91;
  const __CFString *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  id v96;
  void *v97;
  void *v98;
  void *v99;
  id v100;
  uint64_t v101;
  id obj;
  id obja;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _BYTE v123[128];
  _BYTE v124[128];
  _BYTE v125[128];
  _BYTE v126[128];
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 40);
  v95 = a1;
  v94 = *(unsigned __int8 *)(a1 + 88);
  v5 = *(id *)(a1 + 32);
  v96 = v4;
  v100 = v2;
  obj = v3;
  if (objc_msgSend(v5, "count"))
  {
    v6 = 0;
    v104 = v5;
    do
    {
      objc_msgSend(v5, "objectAtIndex:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectAtIndex:", 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectAtIndex:", 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectAtIndex:", 2);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v8;
      v12 = v9;
      v13 = v10;
      v14 = v100;
      v15 = obj;
      v16 = objc_opt_respondsToSelector();
      v17 = objc_opt_respondsToSelector();
      v18 = v17;
      if ((v16 & 1) != 0 || (v17 & 1) != 0)
      {
        IsSuitableForDecoding = _stateRestorationClassForObjectIsSuitableForDecoding(v12, v13);
        v20 = _UIStateRestorationDebugLogEnabled();
        if (IsSuitableForDecoding)
        {
          if (v20)
            NSLog(CFSTR("%s: Restoring object %@ from State Restoration archive"), "void _decodeRestorableStateForObject(NSString *__strong, NSObject *__strong, NSCoder *__strong, NSMutableArray *__strong, NSMutableArray *__strong)", v11);
          if ((v18 & 1) != 0)
          {
            objc_msgSend(v12, "_decodeRestorableStateAndReturnContinuationWithCoder:", v13);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            if (_UIStateRestorationDebugLogEnabled())
            {
              v22 = CFSTR("returned continuation");
              if (!v21)
                v22 = CFSTR("no continuation returned");
              NSLog(CFSTR("%s: Called _decodeRestorableStateAndReturnContinuationWithCoder: %@"), "void _decodeRestorableStateForObject(NSString *__strong, NSObject *__strong, NSCoder *__strong, NSMutableArray *__strong, NSMutableArray *__strong)", v22);
            }
            if (v21)
            {
              v23 = (void *)objc_msgSend(v21, "copy");
              objc_msgSend(v15, "addObject:", v23);

            }
          }
          else if ((v16 & 1) != 0)
          {
            objc_msgSend(v12, "decodeRestorableStateWithCoder:", v13);
            if (_UIStateRestorationDebugLogEnabled())
              NSLog(CFSTR("%s: Called decodeRestorableStateWithCoder:"), "void _decodeRestorableStateForObject(NSString *__strong, NSObject *__strong, NSCoder *__strong, NSMutableArray *__strong, NSMutableArray *__strong)", v93);
          }
        }
        else if (v20)
        {
          NSLog(CFSTR("%s: Class name for object doesn't match class name in state restoration archive. Skipping decode for object %@"), "void _decodeRestorableStateForObject(NSString *__strong, NSObject *__strong, NSCoder *__strong, NSMutableArray *__strong, NSMutableArray *__strong)", v11);
        }
      }
      else if (_UIStateRestorationDebugLogEnabled())
      {
        NSLog(CFSTR("%s: restored object with identifier %@ doesn't implement decodeRestorableStateWithCoder:, skipping call"), "void _decodeRestorableStateForObject(NSString *__strong, NSObject *__strong, NSCoder *__strong, NSMutableArray *__strong, NSMutableArray *__strong)", v11);
      }
      objc_msgSend(v14, "addObject:", v12);

      if (objc_msgSend(v13, "decodeBoolForKey:", CFSTR("kObjectIsViewControllerKey")))
      {
        v24 = (void *)MEMORY[0x1E0C99E60];
        v25 = objc_opt_class();
        v93 = 0;
        objc_msgSend(v24, "setWithObjects:", v25, objc_opt_class());
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "decodeObjectOfClasses:forKey:", v26, CFSTR("kViewRestorationDataKey"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v13, "decodeBoolForKey:", CFSTR("kViewControllerViewWasLoadedKey")))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v28 = v12;
            if ((objc_msgSend(v28, "_shouldLoadViewDuringRestoration:", v13) & 1) != 0)
            {
              objc_msgSend(v28, "view");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              if (v29)
              {
                v30 = v29;
                _restoreStateForViewAndSubviews(v29, v28, v27, v96, v14, v94 != 0);

              }
            }
            else if (_UIStateRestorationDebugLogEnabled())
            {
              NSLog(CFSTR("%s: Special case path: skipping load and restoration of ViewController's views for %@"), "void _performSecondPassStateRestoration(NSArray *__strong, NSDictionary *__strong, NSMutableArray *__strong, NSMutableArray *__strong, BOOL)", v11);
            }

          }
          else
          {
            NSLog(CFSTR("Warning: archive indicates object %@ had views loaded (and thus is a View Controller), but it is actually not a View Controller: %@"), v11, v12);
          }
        }

      }
      objc_msgSend(v13, "finishDecoding");

      ++v6;
      v5 = v104;
    }
    while (objc_msgSend(v104, "count") > v6);
  }

  v31 = v95;
  if (!*(_QWORD *)(v95 + 48) && (objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(*(id *)(v95 + 56), "application:didDecodeRestorableStateWithCoder:", *(_QWORD *)(v95 + 64), *(_QWORD *)(v95 + 72));
  v32 = *(void **)(v95 + 72);
  v33 = (void *)MEMORY[0x1E0C99E60];
  v34 = objc_opt_class();
  objc_msgSend(v33, "setWithObjects:", v34, objc_opt_class(), 0);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "decodeObjectOfClasses:forKey:", v35, CFSTR("kFirstRespondersKey"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  v99 = v36;
  if (v36)
  {
    v37 = v36;
    if (_UIStateRestorationDebugLogEnabled())
    {
      v38 = objc_msgSend(v37, "count");
      v39 = objc_msgSend(v37, "count");
      v40 = "s";
      if (v39 == 1)
        v40 = "";
      NSLog(CFSTR("%s: %ld first responder%s to restore %@"), "void _restoreFirstResponders(NSArray *__strong)", v38, v40, v37);
    }
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v41 = v37;
    v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v119, v126, 16);
    if (v42)
    {
      v43 = v42;
      v44 = *(_QWORD *)v120;
      v45 = off_1E167B000;
      v46 = off_1E167B000;
      do
      {
        v47 = 0;
        v105 = v43;
        do
        {
          if (*(_QWORD *)v120 != v44)
            objc_enumerationMutation(v41);
          v48 = *(_QWORD *)(*((_QWORD *)&v119 + 1) + 8 * v47);
          -[__objc2_class objectWithRestorationIdentifierPath:](v45[108], "objectWithRestorationIdentifierPath:", v48);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v50 = v49;
          else
            v50 = 0;
          v51 = v50;
          if (v51)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend(v49, "isEditable"))
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v51, "isProgrammaticScrollEnabled"))
              {
                objc_msgSend(v51, "setProgrammaticScrollEnabled:", 0);
                v52 = 1;
              }
              else
              {
                v52 = 0;
              }
              objc_msgSend(v51, "window");
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              v54 = v53;
              if (v53 && !objc_msgSend(v53, "_isApplicationKeyWindow"))
              {
                objc_msgSend(v51, "window");
                v55 = v44;
                v56 = v46;
                v57 = v45;
                v58 = v41;
                v59 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v59, "_setFirstResponder:", v51);

                v41 = v58;
                v45 = v57;
                v46 = v56;
                v44 = v55;
                v43 = v105;
                if (v52)
LABEL_63:
                  objc_msgSend(v51, "setProgrammaticScrollEnabled:", 1);
              }
              else
              {
                objc_msgSend(v51, "becomeFirstResponder");
                if (v52)
                  goto LABEL_63;
              }

            }
          }
          else if (_UIStateRestorationDebugLogEnabled())
          {
            NSLog(CFSTR("%s: Restored first responder is not a view, ignoring. FirstResponder = %@, identifier = %@"), "void _restoreFirstResponders(NSArray *__strong)", v49, v48);
          }

          ++v47;
        }
        while (v43 != v47);
        v60 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v119, v126, 16);
        v43 = v60;
      }
      while (v60);
    }

    v31 = v95;
  }
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v61 = v100;
  v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v115, v125, 16);
  if (v62)
  {
    v63 = v62;
    v64 = *(_QWORD *)v116;
    do
    {
      for (i = 0; i != v63; ++i)
      {
        if (*(_QWORD *)v116 != v64)
          objc_enumerationMutation(v61);
        v66 = *(void **)(*((_QWORD *)&v115 + 1) + 8 * i);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v66, "applicationFinishedRestoringState");
      }
      v63 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v115, v125, 16);
    }
    while (v63);
  }

  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v67 = obj;
  v68 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v111, v124, 16);
  if (v68)
  {
    v69 = v68;
    v70 = *(_QWORD *)v112;
    do
    {
      for (j = 0; j != v69; ++j)
      {
        if (*(_QWORD *)v112 != v70)
          objc_enumerationMutation(v67);
        v72 = *(void (***)(_QWORD))(*((_QWORD *)&v111 + 1) + 8 * j);
        if (_UIStateRestorationDebugLogEnabled())
        {
          v73 = _Block_copy(v72);
          NSLog(CFSTR("%s: Calling continuation %@"), "void _restoreState(UIApplication *__strong, NSData *__strong, NSObject<UIApplicationDelegate> *__strong, NSURL *__strong, NSString *__strong, __strong UIStateRestorationRestoreStateBeginHandler)_block_invoke", v73);

        }
        v72[2](v72);
      }
      v69 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v111, v124, 16);
    }
    while (v69);
  }
  v97 = v67;
  v98 = v61;

  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Windows with overrides for size classes: %@"), "void _restoreState(UIApplication *__strong, NSData *__strong, NSObject<UIApplicationDelegate> *__strong, NSURL *__strong, NSString *__strong, __strong UIStateRestorationRestoreStateBeginHandler)_block_invoke", *(_QWORD *)(v31 + 80));
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  obja = *(id *)(v31 + 80);
  v74 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v107, v123, 16);
  if (v74)
  {
    v75 = v74;
    v106 = *(_QWORD *)v108;
    do
    {
      v76 = 0;
      v101 = v75;
      do
      {
        if (*(_QWORD *)v108 != v106)
          objc_enumerationMutation(obja);
        v77 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * v76);
        if (_UIStateRestorationDebugLogEnabled())
          NSLog(CFSTR("%s: Clearing size class override for window %@"), "void _restoreState(UIApplication *__strong, NSData *__strong, NSObject<UIApplicationDelegate> *__strong, NSURL *__strong, NSString *__strong, __strong UIStateRestorationRestoreStateBeginHandler)_block_invoke", v77);
        objc_msgSend(v77, "traitCollection");
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        v79 = objc_msgSend(v78, "verticalSizeClass");
        v80 = objc_msgSend(v78, "horizontalSizeClass");
        objc_msgSend(v77, "_clearSizeClassesForStateRestoration");
        if (_UIStateRestorationDebugLogEnabled())
        {
          if (v80 == 2)
            v81 = CFSTR("UIUserInterfaceSizeClassRegular");
          else
            v81 = CFSTR("UIUserInterfaceSizeClassUnspecified");
          if (v80 == 1)
            v82 = CFSTR("UIUserInterfaceSizeClassCompact");
          else
            v82 = (__CFString *)v81;
          if (v79 == 2)
            v83 = CFSTR("UIUserInterfaceSizeClassRegular");
          else
            v83 = CFSTR("UIUserInterfaceSizeClassUnspecified");
          if (v79 == 1)
            v83 = CFSTR("UIUserInterfaceSizeClassCompact");
          v84 = v83;
          v85 = v82;
          objc_msgSend(v77, "traitCollection");
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          v87 = objc_msgSend(v86, "horizontalSizeClass");
          if (v87 == 2)
            v88 = CFSTR("UIUserInterfaceSizeClassRegular");
          else
            v88 = CFSTR("UIUserInterfaceSizeClassUnspecified");
          if (v87 == 1)
            v88 = CFSTR("UIUserInterfaceSizeClassCompact");
          v89 = v88;
          objc_msgSend(v77, "traitCollection");
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          v91 = objc_msgSend(v90, "verticalSizeClass");
          v92 = CFSTR("UIUserInterfaceSizeClassUnspecified");
          if (v91 == 2)
            v92 = CFSTR("UIUserInterfaceSizeClassRegular");
          if (v91 == 1)
            v92 = CFSTR("UIUserInterfaceSizeClassCompact");
          NSLog(CFSTR("%s: Reset window %@ size collection traits from Horizontal %@/Vertical %@ to Horizontal %@/Vertical %@"), "void _restoreState(UIApplication *__strong, NSData *__strong, NSObject<UIApplicationDelegate> *__strong, NSURL *__strong, NSString *__strong, __strong UIStateRestorationRestoreStateBeginHandler)_block_invoke", v77, v85, v84, v89, v92);

          v75 = v101;
        }

        ++v76;
      }
      while (v75 != v76);
      v75 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v107, v123, 16);
    }
    while (v75);
  }

}

uint64_t _sizeClassFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIUserInterfaceSizeClassCompact")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("UIUserInterfaceSizeClassRegular")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void _restoreStateForViewAndSubviews(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  void *v18;
  void *v19;
  id v20;
  int IsSuitableForDecoding;
  int v22;
  void *v23;
  id v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  char v30;

  v24 = a1;
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", v24);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)v15;
  if (v15)
    v17 = v15 == (_QWORD)v11;
  else
    v17 = 1;
  if (v17)
  {
    objc_msgSend(v24, "_restorationIdentifierPath");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      objc_msgSend(v12, "objectForKey:", v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19)
      {
        v20 = -[UIStateRestorationKeyedUnarchiver initForReadingWithData:defaultValues:requiresSecureCoding:]([UIStateRestorationKeyedUnarchiver alloc], "initForReadingWithData:defaultValues:requiresSecureCoding:", v19, v13, a6);
        IsSuitableForDecoding = _stateRestorationClassForObjectIsSuitableForDecoding(v24, v20);
        v22 = _UIStateRestorationDebugLogEnabled();
        if (IsSuitableForDecoding)
        {
          if (v22)
            NSLog(CFSTR("%s: Restoring view %@"), "void _restoreStateForViewAndSubviews(UIView *__strong, UIViewController *__strong, NSDictionary *__strong, NSDictionary *__strong, NSMutableArray *__strong, BOOL)", v18);
          objc_msgSend(v24, "decodeRestorableStateWithCoder:", v20);
        }
        else if (v22)
        {
          NSLog(CFSTR("%s: Class name for view doesn't match class name in archive. Skipping decode for view %@"), "void _restoreStateForViewAndSubviews(UIView *__strong, UIViewController *__strong, NSDictionary *__strong, NSDictionary *__strong, NSMutableArray *__strong, BOOL)", v18);
        }
        objc_msgSend(v20, "finishDecoding");
        objc_msgSend(v14, "addObject:", v24);

      }
      else if (_UIStateRestorationDebugLogEnabled())
      {
        NSLog(CFSTR("%s: No restoration data for view with identifier path %@, skipping call to decodeRestorableStateWithCoder"), "void _restoreStateForViewAndSubviews(UIView *__strong, UIViewController *__strong, NSDictionary *__strong, NSDictionary *__strong, NSMutableArray *__strong, BOOL)", v18);
      }

    }
    objc_msgSend(v24, "subviews");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = ___restoreStateForViewAndSubviews_block_invoke;
    v25[3] = &unk_1E16DDDA0;
    v26 = v11;
    v27 = v12;
    v28 = v13;
    v29 = v14;
    v30 = a6;
    objc_msgSend(v23, "enumerateObjectsUsingBlock:", v25);

  }
}

uint64_t _stateRestorationClassForObjectIsSuitableForDecoding(void *a1, void *a2)
{
  id v3;
  id v4;
  NSString *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kUIStateRestorationClassNameKey"));
  v5 = (NSString *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    NSLog(CFSTR("Warning: Can't get class name for object from state restoration archive: Object = %@"), v3);
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  v6 = (uint64_t)NSClassFromString(v5);
  if (!v6)
  {
    NSLog(CFSTR("Warning: Decoded class %@ doesn't exist in runtime for object from state restoration archive: Object = %@"), v5, v3);
    goto LABEL_9;
  }
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v8 = objc_opt_class();
    NSLog(CFSTR("Warning: Decoded object's class is %@, but class of object saved in state restoration archive is %@: Object = %@"), v8, v6, v3);
    goto LABEL_8;
  }
  v6 = 1;
LABEL_9:

  return v6;
}

uint64_t ___restoreStateForViewAndSubviews_block_invoke(uint64_t a1, uint64_t a2)
{
  return _restoreStateForViewAndSubviews(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
}

void forwardMethod1(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v7 = a3;
  v5 = a1;
  objc_msgSend(v5, "nextResponder");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  if (v6 && v6 != v5)
    ((void (*)(id, uint64_t, id))objc_msgSend(v6, "methodForSelector:", a2))(v6, a2, v7);

}

void forwardMethodIntId(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;

  v9 = a4;
  v7 = a1;
  objc_msgSend(v7, "nextResponder");
  v8 = (id)objc_claimAutoreleasedReturnValue();

  if (v8 && v8 != v7)
    ((void (*)(id, uint64_t, uint64_t, id))objc_msgSend(v8, "methodForSelector:", a2))(v8, a2, a3, v9);

}

uint64_t _UICanPasteItemProviders(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v4, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v17;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v10), "registeredTypeIdentifiers", (_QWORD)v16);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObjectsFromArray:", v11);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v8);
  }

  objc_msgSend(v5, "allObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "acceptableTypeIdentifiers");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = _UIOneOfTypesConformsToAcceptableTypes(v12, v13);

  return v14;
}

void forwardMethod2(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;

  v10 = a3;
  v7 = a4;
  v8 = a1;
  objc_msgSend(v8, "nextResponder");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  if (v9 && v9 != v8)
    ((void (*)(id, uint64_t, id, id))objc_msgSend(v9, "methodForSelector:", a2))(v9, a2, v10, v7);

}

void sub_18607BDB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18607D1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIResponderChainDescription(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  objc_class *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3748], "mapTableWithKeyOptions:valueOptions:", 517, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v3;
  objc_msgSend(v4, "appendString:", CFSTR("Responder traversal BEGINS:\n"));
  if (v6)
  {
    v7 = 0;
    v8 = v6;
    while (1)
    {
      v9 = (void *)MEMORY[0x1E0CB3940];
      v10 = v8;
      v11 = (objc_class *)objc_opt_class();
      NSStringFromClass(v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "stringWithFormat:", CFSTR("<%@: %p>"), v12, v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "appendFormat:", CFSTR("%3lu: %@\n"), v7, v13);
      objc_msgSend(v5, "objectForKey:", v10);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
        break;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v7);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setObject:forKey:", v15, v10);

      objc_msgSend(v10, "_nextResponderUsingTraversalStrategy:", a2);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      ++v7;
      if (!v8)
        goto LABEL_7;
    }
    v16 = v14;
    objc_msgSend(v4, "appendFormat:", CFSTR("ERROR: Responder loop! Found responder again: %@ originally at index: %lu\n"), v13, objc_msgSend(v14, "unsignedIntegerValue"));

  }
LABEL_7:
  objc_msgSend(v4, "appendString:", CFSTR("Responder traversal ENDS"));

  return v4;
}

id _UIResponderFindInputAssistantItem(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    while (1)
    {
      objc_msgSend(v3, "inputAssistantItem");
      v4 = objc_claimAutoreleasedReturnValue();
      if (v4)
        break;
      objc_msgSend(v3, "nextResponder");
      v5 = objc_claimAutoreleasedReturnValue();

      v3 = (void *)v5;
      if (!v5)
        goto LABEL_5;
    }
    v6 = (id)v4;

  }
  else
  {
LABEL_5:
    if (qword_1ECD7F8B8 != -1)
      dispatch_once(&qword_1ECD7F8B8, &__block_literal_global_962);
    v6 = (id)qword_1ECD7F8C0;
  }

  return v6;
}

uint64_t _UISpecialKeyInputFromHIDUsage(uint64_t a1)
{
  if ((unint64_t)(a1 - 41) > 0x29)
    return 0;
  else
    return (uint64_t)*(&off_1E16DE198 + a1 - 41);
}

void _UIAdditionalScaleFactorForClassicPresentationWithHomeAffordance(void *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (objc_msgSend(a1, "_isMainScreen"))
  {
    +[UIDevice currentDevice](UIDevice, "currentDevice", 1.0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "userInterfaceIdiom");

    if ((v2 & 0xFFFFFFFFFFFFFFFBLL) != 1)
      +[UIDevice _hasHomeButton](UIDevice, "_hasHomeButton", 20.0);
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "userInterfaceIdiom");

    if ((v4 & 0xFFFFFFFFFFFFFFFBLL) != 1)
      +[UIDevice _hasHomeButton](UIDevice, "_hasHomeButton", 24.0);
  }
}

double _UIScaleFactorForClassicPresentationWithHomeAffordance(void *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;

  if (a2 / a4 <= a3 / a5)
    v5 = a2 / a4;
  else
    v5 = a3 / a5;
  _UIAdditionalScaleFactorForClassicPresentationWithHomeAffordance(a1);
  return v5 * v6;
}

void _UIInsetAndTranslateLayerForClassicPresentationWithHomeAffordance(void *a1, void *a2, int a3, uint64_t a4, int a5, double a6, double a7, double a8, double a9, double a10)
{
  id v15;
  id v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  uint64_t v21;
  int v22;
  void *v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  CGFloat v32;
  double v33;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGAffineTransform v36;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v39;

  v15 = a1;
  v16 = a2;
  if (objc_msgSend(v16, "_isMainScreen"))
  {
    _UIAdditionalScaleFactorForClassicPresentationWithHomeAffordance(v16);
    v18 = v17;
    if (a5)
      v19 = 1.0 / a10;
    else
      v19 = 1.0;
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "userInterfaceIdiom");

    v22 = 20;
    if ((v21 & 0xFFFFFFFFFFFFFFFBLL) != 1)
    {
      if (+[UIDevice _hasHomeButton](UIDevice, "_hasHomeButton"))
        v22 = 0;
      else
        v22 = 20;
    }
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "userInterfaceIdiom");

    if ((v24 & 0xFFFFFFFFFFFFFFFBLL) == 1)
    {
      v25 = -24;
    }
    else if (+[UIDevice _hasHomeButton](UIDevice, "_hasHomeButton"))
    {
      v25 = 0;
    }
    else
    {
      v25 = -6;
    }
    v26 = 0.0;
    if (v18 != 1.0)
      v26 = -((double)((v25 + v22) >> 1) * v19);
    v27 = v19 * 5.0;
    v28 = -0.0;
    v29 = -v26;
    v30 = -0.0;
    if (a4 == 2)
      v31 = -v26;
    else
      v31 = v26;
    if (a4 != 2)
      v30 = 0.0;
    if (a4 == 3)
      v31 = 0.0;
    else
      v29 = v30;
    if (a4 == 4)
      v29 = v26;
    else
      v28 = v31;
    if (a3)
      v32 = v28;
    else
      v32 = v26;
    memset(&v39.c, 0, 32);
    if (a3)
      v33 = v29;
    else
      v33 = 0.0;
    *(_OWORD *)&v39.a = 0uLL;
    CGAffineTransformMakeScale(&t1, v18, v18);
    CGAffineTransformMakeTranslation(&t2, v33, v32);
    CGAffineTransformConcat(&v39, &t1, &t2);
    if (v15)
      objc_msgSend(v15, "affineTransform");
    else
      memset(&v35, 0, sizeof(v35));
    v34 = v39;
    CGAffineTransformConcat(&v36, &v35, &v34);
    objc_msgSend(v15, "setAffineTransform:", &v36);
    objc_msgSend(v15, "setCornerRadius:", v27);
  }

}

void sub_186080424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  id *v30;

  _Block_object_dispose(&a24, 8);
  objc_destroyWeak(v30);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__281(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __Block_byref_object_dispose__282(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_1860823F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __preFenceHandler_block_invoke_8(uint64_t a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id WeakRetained;
  void *v9;
  uint64_t result;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t k;
  id v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
  {
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    __caCommitState = 2;
    if (!a2)
      goto LABEL_13;
  }
  v2 = (void *)MEMORY[0x186DC9484]();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  __windowsWithContexts();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v34 != v6)
          objc_enumerationMutation(v3);
        WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * i) + 472));
        objc_msgSend(WeakRetained, "layer");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "layoutIfNeeded");

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
    }
    while (v5);
  }

  objc_autoreleasePoolPop(v2);
LABEL_13:
  for (result = objc_msgSend((id)qword_1EDDC8658, "count"); result; result = objc_msgSend((id)qword_1EDDC8658, "count"))
  {
    v11 = (void *)MEMORY[0x186DC9484]();
    v12 = (void *)objc_msgSend((id)qword_1EDDC8658, "copy");
    objc_msgSend((id)qword_1EDDC8658, "removeAllObjects");
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v13 = v12;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v30;
      do
      {
        for (j = 0; j != v15; ++j)
        {
          if (*(_QWORD *)v30 != v16)
            objc_enumerationMutation(v13);
          (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * j) + 16))();
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
      }
      while (v15);
    }

    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    __windowsWithContexts();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v25, v37, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v26;
      do
      {
        for (k = 0; k != v20; ++k)
        {
          if (*(_QWORD *)v26 != v21)
            objc_enumerationMutation(v18);
          v23 = objc_loadWeakRetained((id *)(*(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * k) + 472));
          objc_msgSend(v23, "layer");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "layoutIfNeeded");

        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v25, v37, 16);
      }
      while (v20);
    }

    objc_autoreleasePoolPop(v11);
  }
  return result;
}

double _UIWindowConvertRectFromSceneSpaceToSceneReferenceSpace(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  _QWORD v15[7];

  if (+[UIWindow _transformLayerRotationsAreEnabled](UIWindow, "_transformLayerRotationsAreEnabled"))
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = ___UIWindowConvertRectFromSceneSpaceToSceneReferenceSpace_block_invoke;
    v15[3] = &__block_descriptor_56_e30__CGPoint_dd_24__0_CGPoint_dd_8l;
    *(double *)&v15[4] = a6;
    *(double *)&v15[5] = a7;
    v15[6] = a1;
    return _UIRectTransformByTransformingCorners((uint64_t)v15, a2, a3, a4, a5);
  }
  return a2;
}

uint64_t _UIWindowCompareToWindow(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3 || !v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _UIWindowCompareToWindow(UIWindow *__strong, UIWindow *__strong)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("UIWindow.m"), 8038, CFSTR("%s: Invalid state. Should be comparing two valid objects: window1: %@; window2: %@"),
      "NSComparisonResult _UIWindowCompareToWindow(UIWindow *__strong, UIWindow *__strong)",
      v3,
      v5);

  }
  if (v3 == v5 || objc_msgSend(v3, "isHidden") && (objc_msgSend(v5, "isHidden") & 1) != 0)
    goto LABEL_11;
  if ((objc_msgSend(v5, "isHidden") & 1) != 0)
  {
    v6 = 1;
    goto LABEL_12;
  }
  if ((objc_msgSend(v3, "isHidden") & 1) != 0)
  {
    v6 = -1;
    goto LABEL_12;
  }
  objc_msgSend(v5, "windowLevel");
  v8 = v7;
  objc_msgSend(v3, "windowLevel");
  if (v8 == v9)
  {
LABEL_11:
    v6 = 0;
    goto LABEL_12;
  }
  objc_msgSend(v5, "windowLevel");
  v12 = v11;
  objc_msgSend(v3, "windowLevel");
  if (v12 <= v13)
    v6 = 1;
  else
    v6 = -1;
LABEL_12:

  return v6;
}

id _UIWindowVisible()
{
  return +[UIWindow allWindowsIncludingInternalWindows:onlyVisibleWindows:](UIWindow, "allWindowsIncludingInternalWindows:onlyVisibleWindows:", 1, 1);
}

double _UIConvertSceneRectToWindow(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11;
  id *v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  double v34;
  double v35;

  v11 = a1;
  v12 = a2;
  -[UIWindow _fbsScene](v12);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  if (v13 != v11)
  {
    if (v11)
    {
      objc_msgSend(v11, "settings");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "frame");
      v16 = v15;
      v18 = v17;
      v21 = _UIWindowConvertRectFromOrientationToOrientation(objc_msgSend(v14, "interfaceOrientation"), 1, a3, a4, a5, a6, v19, v20);
      a5 = v22;
      a6 = v23;
      a3 = v16 + v21;
      a4 = v18 + v24;

    }
    if (v13)
    {
      objc_msgSend(v13, "settings");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "frame");
      a3 = _UIWindowConvertRectFromOrientationToOrientation(1, objc_msgSend(v25, "interfaceOrientation"), a3 - v26, a4 - v27, a5, a6, v28, v29);
      a4 = v30;
      a5 = v31;
      a6 = v32;

    }
  }
  objc_msgSend(v12, "layer");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "convertRect:fromLayer:", 0, a3, a4, a5, a6);
  v35 = v34;

  return v35;
}

CGImage *UICreateScreenImage()
{
  CGImage *v0;
  CGImage *v1;
  CFTypeID v2;
  CGImage *v4;

  if (objc_msgSend((id)UIApp, "applicationState") == 2)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Cannot call UICreateScreenImage() while app is in the background."));
  v0 = +[UIWindow createScreenIOSurface](UIWindow, "createScreenIOSurface");
  v1 = v0;
  if (!v0)
    return v1;
  v2 = CFGetTypeID(v0);
  if (v2 == CGImageGetTypeID())
    return v1;
  v4 = _UICreateCGImageFromIOSurfaceWithOptions(v1, 0);
  CFRelease(v1);
  return v4;
}

CGImage *UICreateCGImageFromIOSurface(CGImage *a1)
{
  return _UICreateCGImageFromIOSurfaceWithOptions(a1, 0);
}

CGImage *_UICreateCGImageFromIOSurfaceWithOptions(CGImage *cf, uint64_t a2)
{
  CGImage *CGImage;
  CFTypeID v4;
  void *v5;
  void *v6;
  const __CFString *v8;
  _QWORD v9[2];

  CGImage = cf;
  v9[1] = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CGImageGetTypeID())
    {
      CGImageRetain(CGImage);
    }
    else
    {
      v8 = CFSTR("dst-opaque");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v9[0] = v5;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      CGImage = (CGImage *)_UIRenderingBufferCreateCGImage(CGImage, v6);

    }
  }
  return CGImage;
}

uint64_t _UICreateScreenUIImageFromRectUncheckedWithRotation(int a1, double a2, double a3, double a4, double a5)
{
  return _UICreateScreenUIImageFromRectUncheckedWithRotationEnforceSecureMode(a1, 0, a2, a3, a4, a5);
}

uint64_t _UICreateScreenUIImageFromRectUncheckedWithRotationEnforceSecureMode(int a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  __IOSurface *v25;
  __IOSurface *v26;
  void *v27;
  CGImage *CGImage;
  UIImage *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[4];
  const __CFString *v34;
  uint64_t v35;
  _QWORD v36[7];
  _QWORD v37[9];

  v37[7] = *MEMORY[0x1E0C80C00];
  if (qword_1EDDC8698 == -1)
  {
    if (a1)
      goto LABEL_3;
LABEL_6:
    v12 = 1;
    goto LABEL_7;
  }
  dispatch_once(&qword_1EDDC8698, &__block_literal_global_1349_0);
  if (!a1)
    goto LABEL_6;
LABEL_3:
  v12 = objc_msgSend((id)UIApp, "activeInterfaceOrientation");
  if (!v12)
  {
    v13 = objc_alloc_init(MEMORY[0x1E0D23188]);
    v12 = objc_msgSend(v13, "activeInterfaceOrientation");

  }
LABEL_7:
  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "_scale");
  v16 = v15;
  if ((byte_1EDDC8590 & 1) != 0)
    v17 = 0;
  else
    v17 = objc_msgSend(v14, "gamut");
  v36[0] = CFSTR("enforce-secure-mode");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v37[0] = v18;
  v37[1] = v14;
  v36[1] = CFSTR("src-screen");
  v36[2] = CFSTR("src-rect");
  *(double *)v33 = a3;
  *(double *)&v33[1] = a4;
  *(double *)&v33[2] = a5;
  *(double *)&v33[3] = a6;
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v33, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v37[2] = v19;
  v36[3] = CFSTR("src-orientation");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v12);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v37[3] = v20;
  v36[4] = CFSTR("dst-scale");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v16);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v37[4] = v21;
  v36[5] = CFSTR("dst-gamut");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v17);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v36[6] = CFSTR("dst-opaque");
  v23 = MEMORY[0x1E0C9AAB0];
  v37[5] = v22;
  v37[6] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, v36, 7);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = (__IOSurface *)_UIRenderDisplay(v24, &__block_literal_global_1357);
  if (v25)
  {
    v26 = v25;
    v34 = CFSTR("dst-opaque");
    v35 = v23;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    CGImage = (CGImage *)_UIRenderingBufferCreateCGImage(v26, v27);

    if (CGImage)
    {
      v29 = [UIImage alloc];
      if ((a1 & 1) != 0)
        v30 = 0;
      else
        v30 = objc_msgSend(v14, "_imageOrientation");
      v31 = -[UIImage initWithCGImage:scale:orientation:](v29, "initWithCGImage:scale:orientation:", CGImage, v30, v16);
      CGImageRelease(CGImage);
    }
    else
    {
      v31 = 0;
    }
    CFRelease(v26);
  }
  else
  {
    v31 = 0;
  }

  return v31;
}

uint64_t _UICreateScreenUIImageFromRectUnchecked(double a1, double a2, double a3, double a4)
{
  return _UICreateScreenUIImageFromRectUncheckedWithRotationEnforceSecureMode(0, 0, a1, a2, a3, a4);
}

uint64_t _UICreateScreenUIImageFromRectWithRotation(int a1, double a2, double a3, double a4, double a5)
{
  if (objc_msgSend((id)UIApp, "applicationState") == 2)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Cannot call _UICreateScreenUIImage() while app is in the background."));
  return _UICreateScreenUIImageFromRectUncheckedWithRotationEnforceSecureMode(a1, 0, a2, a3, a4, a5);
}

uint64_t _UICreateScreenUIImageFromRect(double a1, double a2, double a3, double a4)
{
  return _UICreateScreenUIImageFromRectWithRotation(0, a1, a2, a3, a4);
}

uint64_t _UICreateScreenUIImageWithRotation(int a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;

  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_referenceBounds");
  v7 = _UICreateScreenUIImageFromRectWithRotation(a1, v3, v4, v5, v6);

  return v7;
}

uint64_t _UICreateScreenUIImage()
{
  return _UICreateScreenUIImageWithRotation(0);
}

void ____updateTouchVisualisation_block_invoke()
{
  char v0;
  id v1;

  _UIMainBundleIdentifier();
  v1 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.PointerUI.pointeruid")) & 1) != 0)
    v0 = 1;
  else
    v0 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.DragUI.druid"));
  byte_1EDDC8591 = v0;

}

uint64_t ____updateTouchVisualisation_block_invoke_1380(uint64_t a1)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(a1 + 72);
  objc_msgSend(*(id *)(a1 + 32), "setTransform:", v4);
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

uint64_t ____updateTouchVisualisation_block_invoke_2(uint64_t a1)
{
  void *v1;
  CGAffineTransform v3;
  CGAffineTransform v4;

  v1 = *(void **)(a1 + 32);
  CGAffineTransformMakeScale(&v4, 0.001, 0.001);
  v3 = v4;
  objc_msgSend(v1, "setTransform:", &v3);
  return objc_msgSend(v1, "setAlpha:", 0.0);
}

uint64_t ____updateTouchVisualisation_block_invoke_3(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  return objc_msgSend((id)qword_1EDDC86A8, "addObject:", *(_QWORD *)(a1 + 32));
}

id NSStringFrom_UI_UIResponder_Override_Type(int a1)
{
  void *v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37A0], "string", 0x1E1765600, 0x1E1765620);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = v3;
    if (((1 << v4) & a1) != 0)
    {
      v6 = *((_QWORD *)&v9 + v4);
      if (v6)
      {
        if (objc_msgSend(v2, "length"))
          objc_msgSend(v2, "appendString:", CFSTR("|"));
        objc_msgSend(v2, "appendString:", v6);
      }
    }
    v3 = 1;
    v4 = 1;
  }
  while ((v5 & 1) == 0);
  for (i = 8; i != -8; i -= 8)

  return v2;
}

BOOL _UIGetFocusCastingVisualization()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_FocusCastingVisualization,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_FocusCastingVisualization))
  {
    v1 = 0;
  }
  else
  {
    do
    {
      v1 = v0 < v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_FocusCastingVisualization, (uint64_t)CFSTR("FocusCastingVisualization"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_FocusCastingVisualization;
    }
    while (v0 != _UIInternalPreference_FocusCastingVisualization);
  }
  return byte_1EDDA8254 && v1;
}

id _UIDatePickerFontWithMonospacedNumbers(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(off_1E167A830, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)off_1E167DC18;
  v14[0] = *(_QWORD *)off_1E167DC20;
  v14[1] = v3;
  v15[0] = &unk_1E1A99DC8;
  v15[1] = &unk_1E1A99DE0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)off_1E167DBE8;
  v11 = v4;
  v12 = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v11, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fontDescriptorByAddingAttributes:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(off_1E167A828, "fontWithDescriptor:size:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_186091A34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_186093054(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

id _UIFocusGroupIdentifierOfAssociatedSearchTextFieldForView(void *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  objc_msgSend(a1, "_viewControllerForAncestor");
  v1 = objc_claimAutoreleasedReturnValue();
  if (!v1)
  {
LABEL_8:
    v3 = 0;
    goto LABEL_12;
  }
  v2 = (void *)v1;
  while (1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v3 = v2;
      goto LABEL_12;
    }
    objc_msgSend(v2, "presentedViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_7;
    objc_msgSend(v3, "searchResultsController");
    v4 = objc_claimAutoreleasedReturnValue();
    if ((void *)v4 == v2)
      break;
    v5 = (void *)v4;
    objc_msgSend(v3, "searchResultsController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
      goto LABEL_11;
LABEL_7:
    objc_msgSend(v2, "parentViewController");
    v7 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v7;
    if (!v7)
      goto LABEL_8;
  }

LABEL_11:
LABEL_12:
  objc_msgSend(v3, "searchBar");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "_searchBarTextField");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "focusGroupIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id _UIFirstResponderCandidateForEnvironment(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIResponder * _Nullable _UIFirstResponderCandidateForEnvironment(id<UIFocusEnvironment>  _Nonnull __strong)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("_UIFocusPlatformHelper.m"), 62, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("environment"));

  }
  v2 = v1;
  if ((objc_opt_respondsToSelector() & 1) != 0
    && (objc_msgSend(v2, "_focusResponderForwardingTarget"), (v3 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    v4 = (id)v3;

  }
  else
  {
    v14 = 0;
    v15 = &v14;
    v16 = 0x3032000000;
    v17 = __Block_byref_object_copy__165;
    v18 = __Block_byref_object_dispose__165;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___UIFocusEnvironmentContainingResponder_block_invoke;
    v13[3] = &unk_1E16C6008;
    v13[4] = &v14;
    _UIFocusEnvironmentEnumerateAncestorEnvironments(v2, v13);
    v4 = (id)v15[5];
    _Block_object_dispose(&v14, 8);

    if (!v4)
    {
      _UIFocusEnvironmentContainingView(v2);
      v4 = (id)objc_claimAutoreleasedReturnValue();
      if (!v4)
      {
        v5 = v2;
        if (!v1)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIWindowScene * _Nullable _UIWindowSceneForEnvironment(id<UIFocusEnvironment>  _Nonnull __strong)");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("_UIFocusPlatformHelper.m"), 124, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("environment"));

        }
        +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "_windowScene");
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v7, "keyWindow");
        v4 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
  }

  return v4;
}

void sub_18609A784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIFocusClosestFocusableViewToRectInView(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _UIFocusMap *v22;
  void *v23;
  _UIFocusMap *v24;
  void *v25;
  void *v26;
  void *v28;
  void *v29;

  v9 = a1;
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIView * _Nullable _UIFocusClosestFocusableViewToRectInView(UIView * _Nonnull __strong, CGRect)");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, CFSTR("_UIFocusPlatformHelper.m"), 83, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("containingView"));

  }
  objc_msgSend(v9, "bounds");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  if (objc_msgSend(v9, "__isKindOfUIScrollView"))
  {
    objc_msgSend(v9, "visibleBounds");
    v11 = v18;
    v13 = v19;
    v15 = v20;
    v17 = v21;
  }
  v22 = [_UIFocusMap alloc];
  objc_msgSend(v9, "_focusSystem");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = -[_UIFocusMap initWithFocusSystem:rootEnvironment:coordinateSpace:searchInfo:ignoresRootContainerClippingRect:](v22, "initWithFocusSystem:rootEnvironment:coordinateSpace:searchInfo:ignoresRootContainerClippingRect:", v23, v9, v9, 0, 1);

  -[_UIFocusMap _closestFocusableItemToPoint:inRect:excludingItems:distanceMeasuringUnitPoint:](v24, "_closestFocusableItemToPoint:inRect:excludingItems:distanceMeasuringUnitPoint:", 0, a2 + a4 * 0.5, a3 + a5 * 0.5, v11, v13, v15, v17, 0.5, 0.5);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  _UIFocusEnvironmentContainingView(v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  return v26;
}

uint64_t _UIFocusedSoundForItem(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1;
  if (_UIFocusItemIsViewOrRespondsToSelector(v1))
    v2 = objc_msgSend(v1, "_focusedSound");
  else
    v2 = _UIFocusedDefaultSoundForItem(v1);
  v3 = v2;

  return v3;
}

uint64_t _UIFocusedDefaultSoundForItem(void *a1)
{
  id v1;
  double Width;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double Height;
  CGRect v13;
  CGRect v14;

  v1 = a1;
  objc_msgSend(v1, "frame");
  Width = CGRectGetWidth(v13);
  objc_msgSend(v1, "frame");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v14.origin.x = v4;
  v14.origin.y = v6;
  v14.size.width = v8;
  v14.size.height = v10;
  Height = CGRectGetHeight(v14);
  if (Width < Height)
    Height = Width;
  if (Height < 100.0)
    return 1;
  else
    return 2;
}

uint64_t _UIViewContainsFocusableSubviews(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  id v4;
  uint64_t IsFocusedOrFocusable;
  void *v6;
  void *v8;
  void *v9;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _UIViewContainsFocusableSubviews(UIView * _Nonnull __strong)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("_UIFocusPlatformHelper.m"), 130, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("view"));

  }
  v2 = (void *)objc_opt_new();
  objc_msgSend(v2, "addObject:", v1);
  if (objc_msgSend(v2, "count"))
  {
    v3 = 0;
    do
    {
      v4 = (id)objc_msgSend(v2, "objectAtIndex:", v3);
      IsFocusedOrFocusable = _UIFocusItemIsFocusedOrFocusable(v4);
      if ((IsFocusedOrFocusable & 1) != 0)
        break;
      objc_msgSend(v4, "subviews");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObjectsFromArray:", v6);

      ++v3;
    }
    while (v3 < objc_msgSend(v2, "count"));
  }
  else
  {
    IsFocusedOrFocusable = 0;
  }

  return IsFocusedOrFocusable;
}

BOOL _UIGetShowSceneIdentifiers()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_ShowSceneIdentifiers,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_ShowSceneIdentifiers))
  {
    v1 = 0;
  }
  else
  {
    do
    {
      v1 = v0 < v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_ShowSceneIdentifiers, (uint64_t)CFSTR("ShowSceneIdentifiers"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_ShowSceneIdentifiers;
    }
    while (v0 != _UIInternalPreference_ShowSceneIdentifiers);
  }
  return byte_1ECD7684C && v1;
}

void _UIRecursivelyCacheCommandsInMenu(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id obj;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend(a1, "children");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v8);
        v13[0] = v7;
        v13[1] = 3221225472;
        v13[2] = ___UIRecursivelyCacheCommandsInMenu_block_invoke;
        v13[3] = &unk_1E16BC7B8;
        v14 = v3;
        v11[0] = v7;
        v11[1] = 3221225472;
        v11[2] = ___UIRecursivelyCacheCommandsInMenu_block_invoke_2;
        v11[3] = &unk_1E16DEC00;
        v12 = v14;
        objc_msgSend(v9, "_acceptMenuVisit:commandVisit:actionVisit:deferredElementVisit:", v13, v11, 0, 0);

        ++v8;
      }
      while (v5 != v8);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v5);
  }

}

void sub_18609D254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(&a9);
  _Unwind_Resume(a1);
}

void sub_18609DC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(&a31);
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(&a37);
  _Unwind_Resume(a1);
}

void _UILogSetDuplicatesExisting(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1;
  v5 = (void *)objc_msgSend(v3, "mutableCopy");
  objc_msgSend(v5, "intersectSet:", v4);
  v6 = (void *)objc_msgSend(v4, "mutableCopy");

  objc_msgSend(v6, "intersectSet:", v3);
  v7 = _UILogSetDuplicatesExisting___s_category;
  if (!_UILogSetDuplicatesExisting___s_category)
  {
    v7 = __UILogCategoryGetNode("MenuBuilder", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v7, (unint64_t *)&_UILogSetDuplicatesExisting___s_category);
  }
  v8 = *(NSObject **)(v7 + 8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v9 = 138412546;
    v10 = v6;
    v11 = 2112;
    v12 = v5;
    _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Duplicates existing --\n%@\n%@\nMake a symbolic breakpoint at _UIMenuBuilderError to catch this in the debugger.", (uint8_t *)&v9, 0x16u);
  }

}

void sub_18609E398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40((id *)va);
  _Unwind_Resume(a1);
}

void sub_18609F004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(&a9);
  _Unwind_Resume(a1);
}

void ThrowRangeException(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = (void *)MEMORY[0x1E0C99DA0];
  v3 = *MEMORY[0x1E0C99858];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Token index %ld out of range: [0, %ld)"), a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "exceptionWithName:reason:userInfo:", v3, v4, 0);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_exception_throw(v5);
}

void sub_18609F650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18609FCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1860A1D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _firstChildViewControllerDefiningPresentationContext(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "definesPresentationContext")
    && (objc_msgSend(v1, "_isPresentationContextByDefault") & 1) == 0)
  {
    v8 = v1;
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    objc_msgSend(v1, "childViewControllers", 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v11;
      while (2)
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v11 != v5)
            objc_enumerationMutation(v2);
          _firstChildViewControllerDefiningPresentationContext(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v6));
          v7 = objc_claimAutoreleasedReturnValue();
          if (v7)
          {
            v8 = (id)v7;
            goto LABEL_13;
          }
          ++v6;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v4)
          continue;
        break;
      }
    }
    v8 = 0;
LABEL_13:

  }
  return v8;
}

void sub_1860A4F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1860A5824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  uint64_t v10;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v10 - 152));
  _Unwind_Resume(a1);
}

void sub_1860A94A0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 88));
  _Unwind_Resume(a1);
}

CGFloat _UIRenderingSurfaceTransform@<D0>(double *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  CGFloat result;
  __int128 v8;
  CATransform3D v9;
  CATransform3D a;
  CATransform3D v11;
  CATransform3D v12;
  CATransform3D v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  CATransform3DMakeTranslation(&v12, -*a1, -a1[1], 0.0);
  CATransform3DMakeScale(&v13, a1[4], a1[4], 1.0);
  a = v12;
  v9 = v13;
  CATransform3DConcat(&v11, &a, &v9);
  v4 = *(_OWORD *)&v11.m33;
  a2[4] = *(_OWORD *)&v11.m31;
  a2[5] = v4;
  v5 = *(_OWORD *)&v11.m43;
  a2[6] = *(_OWORD *)&v11.m41;
  a2[7] = v5;
  v6 = *(_OWORD *)&v11.m13;
  *a2 = *(_OWORD *)&v11.m11;
  a2[1] = v6;
  result = v11.m21;
  v8 = *(_OWORD *)&v11.m23;
  a2[2] = *(_OWORD *)&v11.m21;
  a2[3] = v8;
  return result;
}

uint64_t _UIRenderingDefaultGamut(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (!v1 || objc_msgSend(v1, "gamut") == -1)
  {
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v4, "_supportsDeepColor");

  }
  else
  {
    v3 = objc_msgSend(v2, "gamut");
  }

  return v3;
}

uint64_t _UIRenderingSlotGetTypeID()
{
  if (qword_1ECD7F910 != -1)
    dispatch_once(&qword_1ECD7F910, &__block_literal_global_4_14);
  return _MergedGlobals_1194;
}

void _renderingSlotFinalize(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 16), "deleteSlot:", *(unsigned int *)(a1 + 24));
  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;

}

uint64_t _UIRenderingSlotCreate(void *a1, double a2, double a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t Instance;
  uint64_t v17;

  v5 = a1;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("context"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
  {
    if (qword_1ECD7F920 != -1)
      dispatch_once(&qword_1ECD7F920, &__block_literal_global_25_1);
    v7 = (void *)qword_1ECD7F918;
  }
  v8 = v7;

  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("dst-scale"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("dst-gamut"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("dst-opaque"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v12 = (int)objc_msgSend(v10, "intValue");
    if (v11)
    {
LABEL_7:
      v13 = objc_msgSend(v11, "BOOLValue") ^ 1;
      goto LABEL_10;
    }
  }
  else
  {
    v12 = -1;
    if (v11)
      goto LABEL_7;
  }
  v13 = 1;
LABEL_10:
  if (v12 == -1)
    v14 = objc_msgSend(v8, "createImageSlot:hasAlpha:", v13, a2, a3);
  else
    v14 = objc_msgSend(v8, "createImageSlot:hasAlpha:extendedColors:", v13, v12 != 0, a2, a3);
  v15 = v14;
  if (v14)
  {
    if (qword_1ECD7F910 != -1)
      dispatch_once(&qword_1ECD7F910, &__block_literal_global_4_14);
    Instance = _CFRuntimeCreateInstance();
    objc_storeStrong((id *)(Instance + 16), v8);
    *(_DWORD *)(Instance + 24) = v15;
    if (v9)
      objc_msgSend(v9, "doubleValue");
    else
      v17 = 0;
    *(_QWORD *)(Instance + 32) = v17;
  }
  else
  {
    Instance = 0;
  }

  return Instance;
}

uint64_t _UIRenderingSlotGetName(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

id _UIRenderingSlotGetObject(uint64_t a1)
{
  void *v1;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0CD2720], "objectForSlot:", *(unsigned int *)(a1 + 24));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id  _Nonnull _UIRenderingSlotGetObject(const _UIRenderingSlotRef _Nonnull)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIRendering.m"), 357, CFSTR("Failed to get proxy object for rendering slot."));

  }
  return v1;
}

double _UIRenderingSlotGetScale(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double _UIRenderingDestinationGetScale(double *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (IOSurfaceGetTypeID() == v2)
    return _UIRenderingBufferGetScale((__IOSurface *)a1);
  if (qword_1ECD7F910 != -1)
    dispatch_once(&qword_1ECD7F910, &__block_literal_global_4_14);
  if (_MergedGlobals_1194 != v2)
    _unsupportedDestinationType(v2);
  return a1[4];
}

id _UIRenderingDestinationGetContentsObject(void *a1)
{
  CFTypeID v2;
  id v3;

  v2 = CFGetTypeID(a1);
  if (IOSurfaceGetTypeID() == v2)
  {
    v3 = a1;
  }
  else
  {
    if (qword_1ECD7F910 != -1)
      dispatch_once(&qword_1ECD7F910, &__block_literal_global_4_14);
    if (_MergedGlobals_1194 != v2)
      _unsupportedDestinationType(v2);
    _UIRenderingSlotGetObject((uint64_t)a1);
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

unsigned int *_UIRenderingDestinationGetSnapshotDestinationObject(unsigned int *a1)
{
  CFTypeID v2;
  unsigned int *v3;

  v2 = CFGetTypeID(a1);
  if (IOSurfaceGetTypeID() == v2)
  {
    v3 = a1;
  }
  else
  {
    if (qword_1ECD7F910 != -1)
      dispatch_once(&qword_1ECD7F910, &__block_literal_global_4_14);
    if (_MergedGlobals_1194 != v2)
      _unsupportedDestinationType(v2);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1[6]);
    v3 = (unsigned int *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

id _makeIOSurfacePlaneProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v16[5];
  _QWORD v17[6];

  v17[5] = *MEMORY[0x1E0C80C00];
  v16[0] = *MEMORY[0x1E0CBC178];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v9;
  v16[1] = *MEMORY[0x1E0CBC140];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17[1] = v10;
  v16[2] = *MEMORY[0x1E0CBC098];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v17[2] = v11;
  v16[3] = *MEMORY[0x1E0CBC160];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[3] = v12;
  v16[4] = *MEMORY[0x1E0CBC168];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17[4] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 5);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void ___renderingSlotDefaultContext_block_invoke()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0CD2A40];
  v6[0] = *MEMORY[0x1E0CD2A20];
  v6[1] = v0;
  v7[0] = CFSTR("RenderingSlotDefaultContext");
  v7[1] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CD2720], "remoteContextWithOptions:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ECD7F918;
  qword_1ECD7F918 = v2;

  if (!qword_1ECD7F918)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CAContext * _Nonnull _renderingSlotDefaultContext(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIRendering.m"), 284, CFSTR("Failed to create rendering slot default CAContext."));

  }
}

double _UIPlatterLiftScaleForEdgeDimensions(double a1)
{
  int v2;
  double v3;
  double v4;
  double v5;
  int v6;
  double v7;

  v2 = _UIInternalPreferenceUsesDefault_1((int *)&_MergedGlobals_917, (uint64_t)CFSTR("UIDragPlatterLiftDimension"));
  v3 = *(double *)&qword_1ECD76858 + *(double *)&qword_1ECD76858;
  if (v2)
    v3 = 12.0;
  v4 = (v3 + a1) / a1;
  if (_UIInternalPreferenceUsesDefault_1((int *)&unk_1ECD76860, (uint64_t)CFSTR("UIDragPlatterLiftedMinScale")))v5 = 1.01;
  else
    v5 = *(double *)&qword_1ECD76868;
  v6 = _UIInternalPreferenceUsesDefault_1((int *)&unk_1ECD76870, (uint64_t)CFSTR("UIDragPlatterLiftedMaxScale"));
  v7 = *(double *)&qword_1ECD76878;
  if (v6)
    v7 = 1.1;
  return fmax(v5, fmin(v4, v7));
}

CATransform3D *_UISnapshotContainerTransform(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, __n128 a7, __n128 a8)
{
  double v9;
  double v10;
  double v14;
  double v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  double (**v20)(double, double, double, double);
  double v21;
  double v22;
  int v23;
  int v24;
  double (**v25)(double, double, double, double);
  double v26;
  CGFloat v27;
  CATransform3D *result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  CATransform3D v34;
  CATransform3D b;
  CATransform3D a;
  CATransform3D v37;
  CATransform3D v38;
  CATransform3D v39;
  CATransform3D v40;
  uint64_t v41;

  v9 = a8.n128_f64[0];
  v10 = a7.n128_f64[0];
  v41 = *MEMORY[0x1E0C80C00];
  v14 = 0.0;
  v15 = 0.0;
  if (a3 != 1)
  {
    if (a3 == 3)
    {
      v15 = 1.57079633;
    }
    else if (a3 == 4)
    {
      v15 = -1.57079633;
    }
    else
    {
      v15 = 3.14159265;
      if (a3 != 2)
        v15 = 0.0;
    }
  }
  v33 = v15;
  if (a4 != 1)
  {
    switch(a4)
    {
      case 3:
        v14 = 1.57079633;
        break;
      case 4:
        v14 = -1.57079633;
        break;
      case 2:
        v14 = 3.14159265;
        break;
      default:
        v14 = 0.0;
        break;
    }
  }
  v16 = _orientationDistance_angles[a2];
  v17 = _orientationDistance_angles[a3];
  v18 = __OFSUB__(v17, v16);
  v19 = v17 - v16;
  if (v19 < 0 != v18)
    v19 += 4;
  v20 = (double (**)(double, double, double, double))((char *)&_UISnapshotRectOriginForOrientation_origins
                                                               + 16 * v19);
  v21 = ((double (*)(double, double, __n128, __n128))*v20)(a5, a6, a7, a8);
  v22 = v20[1](a5, a6, v10, v9);
  v23 = _orientationDistance_angles[a4];
  v18 = __OFSUB__(v23, v16);
  v24 = v23 - v16;
  if (v24 < 0 != v18)
    v24 += 4;
  v25 = (double (**)(double, double, double, double))((char *)&_UISnapshotRectOriginForOrientation_origins
                                                               + 16 * v24);
  v26 = (*v25)(a5, a6, v10, v9);
  v27 = v25[1](a5, a6, v10, v9) - a6;
  CATransform3DMakeTranslation(&v38, -v21, -v22, 0.0);
  CATransform3DMakeRotation(&v39, v14 - v33, 0.0, 0.0, 1.0);
  CATransform3DMakeTranslation(&v40, v26 - a5, v27, 0.0);
  a = v38;
  b = v39;
  CATransform3DConcat(&v37, &a, &b);
  b = v37;
  v34 = v40;
  result = CATransform3DConcat(&a, &b, &v34);
  *(_OWORD *)&v37.m41 = *(_OWORD *)&a.m41;
  *(_OWORD *)&v37.m43 = *(_OWORD *)&a.m43;
  *(_OWORD *)&v37.m11 = *(_OWORD *)&a.m11;
  *(_OWORD *)&v37.m13 = *(_OWORD *)&a.m13;
  *(_OWORD *)&v37.m21 = *(_OWORD *)&a.m21;
  *(_OWORD *)&v37.m23 = *(_OWORD *)&a.m23;
  v29 = *(_OWORD *)&a.m33;
  a1[4] = *(_OWORD *)&a.m31;
  a1[5] = v29;
  v30 = *(_OWORD *)&v37.m43;
  a1[6] = *(_OWORD *)&v37.m41;
  a1[7] = v30;
  v31 = *(_OWORD *)&v37.m13;
  *a1 = *(_OWORD *)&v37.m11;
  a1[1] = v31;
  v32 = *(_OWORD *)&v37.m23;
  a1[2] = *(_OWORD *)&v37.m21;
  a1[3] = v32;
  return result;
}

id _makeUISceneViewForLiveResize(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  void *v7;

  v1 = a1;
  objc_msgSend(v1, "bounds");
  _UISnapshotScreenAtViewRectAfterCommit(v1, 0, v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "setAutoresizingMask:", 18);
  objc_msgSend(v6, "setUserInteractionEnabled:", 0);
  objc_msgSend(v6, "layer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setDisableUpdateMask:", 2);

  return v6;
}

id _UISnapshotScreenAtViewRectAfterCommit(void *a1, int a2, double a3, double a4, double a5, double a6)
{
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  void *v26;
  unint64_t v27;
  NSObject *v28;
  NSObject *v29;
  unint64_t v30;
  NSObject *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[32];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  objc_msgSend(v11, "_window");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "windowScene");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      objc_msgSend(v14, "_effectiveUISettings");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "hostContextIdentifierForSnapshotting");
      v18 = objc_msgSend(v16, "scenePresenterRenderIdentifierForSnapshotting");
      if (v17 && (v19 = v18) != 0)
      {
        objc_msgSend(v11, "layer");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 80);
        v47 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 64);
        v48 = v21;
        v22 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 112);
        v49 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 96);
        v50 = v22;
        v23 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 16);
        *(_OWORD *)buf = *MEMORY[0x1E0CD2610];
        *(_OWORD *)&buf[16] = v23;
        v24 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 48);
        v45 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 32);
        v46 = v24;
        CALayerMapGeometry();

        objc_msgSend(v11, "_screen");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = v47;
        v41 = v48;
        v42 = v49;
        v43 = v50;
        v36 = *(_OWORD *)buf;
        v37 = *(_OWORD *)&buf[16];
        v38 = v45;
        v39 = v46;
        _UISnapshotLayerIdRectAfterCommit(v17, v19, v25, &v36, a2, a3, a4, a5, a6);
        v26 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        memset(buf, 0, sizeof(buf));
        objc_msgSend(v11, "_screen", _makeViewSnapshotTransform(buf, v11));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "_visibleWindows");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = v47;
        v41 = v48;
        v42 = v49;
        v43 = v50;
        v36 = *(_OWORD *)buf;
        v37 = *(_OWORD *)&buf[16];
        v38 = v45;
        v39 = v46;
        _UISnapshotScreenWindowsRectAfterCommit(v33, v34, &v36, a2, a3, a4, a5, a6);
        v26 = (void *)objc_claimAutoreleasedReturnValue();

      }
    }
    else
    {
      v30 = qword_1ECD7F988;
      if (!qword_1ECD7F988)
      {
        v30 = __UILogCategoryGetNode("Snapshotting", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v30, (unint64_t *)&qword_1ECD7F988);
      }
      v31 = *(NSObject **)(v30 + 8);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v32 = v31;
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = v11;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = objc_opt_class();
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v13;
        LOWORD(v45) = 2112;
        *(_QWORD *)((char *)&v45 + 2) = objc_opt_class();
        _os_log_impl(&dword_185066000, v32, OS_LOG_TYPE_ERROR, "Application screen snapshot requires view (%p, %@) window (%p, %@) to have a scene.", buf, 0x2Au);

      }
      v26 = 0;
    }

  }
  else
  {
    v27 = qword_1ECD7F980;
    if (!qword_1ECD7F980)
    {
      v27 = __UILogCategoryGetNode("Snapshotting", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v27, (unint64_t *)&qword_1ECD7F980);
    }
    v28 = *(NSObject **)(v27 + 8);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = v28;
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = objc_opt_class();
      _os_log_impl(&dword_185066000, v29, OS_LOG_TYPE_ERROR, "Snapshot at view rect requires view (%p, %@) to be in a window.", buf, 0x16u);

    }
    v26 = 0;
  }

  return v26;
}

BOOL _UIViewCanBeRenderedAfterCommit(void *a1, int a2)
{
  _BOOL8 v2;
  void *v3;
  void *v4;

  if (a2)
    return (objc_msgSend(MEMORY[0x1E0CD28B0], "currentState") & 8) == 0;
  objc_msgSend(a1, "layer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v4 != 0;

  return v2;
}

id _moveViewToTemporaryWindow(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  _QWORD aBlock[4];
  id v27;
  uint64_t v28;

  v3 = a1;
  if (qword_1ECD7F9E8 != -1)
    dispatch_once(&qword_1ECD7F9E8, &__block_literal_global_124_0);
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = v3;
    objc_msgSend(v4, "alpha");
    v6 = v5;
    objc_msgSend(v4, "setAlpha:", 0.0);
    objc_msgSend(v4, "setHidden:", 0);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___moveViewToTemporaryWindow_block_invoke;
    aBlock[3] = &unk_1E16B1888;
    v7 = v4;
    v27 = v7;
    v28 = v6;
    *a2 = _Block_copy(aBlock);
    v8 = v27;
  }
  else
  {
    +[UIWindowScene _keyWindowScene]();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      +[UIScreen mainScreen](UIScreen, "mainScreen");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIWindowScene _unassociatedWindowSceneForScreen:create:](UIWindowScene, "_unassociatedWindowSceneForScreen:create:", v9, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

    }
    _makeWindowMatchingUIScene(v8, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setWindowLevel:", 0.0);
    objc_msgSend(v10, "setAlpha:", 0.0);
    objc_msgSend(v10, "setHidden:", 0);
    objc_msgSend(v3, "superview");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "subviews");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "indexOfObjectIdenticalTo:", v3);

    _UIViewPotentiallyDisrubtibleConstraintsForView(v3, v11, v10);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "addSubview:", v3);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = ___moveViewToTemporaryWindow_block_invoke_2;
    v20[3] = &unk_1E16B2900;
    v15 = v10;
    v21 = v15;
    v22 = v3;
    v24 = v14;
    v25 = v13;
    v23 = v11;
    v16 = v14;
    v17 = v11;
    *a2 = _Block_copy(v20);
    v18 = v24;
    v7 = v15;

  }
  return v7;
}

uint64_t _performAfterContextCommitUnderCoverAllowDefer(void *a1, int a2, int a3, void *a4)
{
  uint64_t v5;
  id v7;
  void (**v8)(_QWORD);
  char v9;
  char v10;
  int v11;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  __CFRunLoop *Current;
  __CFRunLoop *v23;
  _QWORD v25[5];
  _QWORD v26[6];
  _QWORD v27[4];
  char v28;
  char v29;

  LODWORD(v5) = a3;
  v7 = a1;
  v8 = a4;
  v9 = objc_msgSend(MEMORY[0x1E0CD28B0], "currentState");
  if ((v9 & 8) != 0)
    v5 = v5;
  else
    v5 = 1;
  if ((_DWORD)v5 == 1)
  {
    v10 = v9;
    if (v7)
      v11 = a2;
    else
      v11 = 1;
    if (v11)
    {
      if (!dword_1ECD7F92C++)
      {
        v13 = objc_opt_new();
        v14 = (void *)qword_1ECD7F9C8;
        qword_1ECD7F9C8 = v13;

      }
      _enumScenes(&__block_literal_global_135);
      if (a2)
      {
        if (!dword_1ECD7F930++)
        {
          v16 = objc_opt_new();
          v17 = (void *)qword_1ECD7F9D0;
          qword_1ECD7F9D0 = v16;

          v18 = objc_opt_new();
          v19 = (void *)qword_1ECD7F9D8;
          qword_1ECD7F9D8 = v18;

        }
        _enumScenes(&__block_literal_global_142_0);
      }
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = ___performAfterContextCommitUnderCoverAllowDefer_block_invoke;
      v27[3] = &__block_descriptor_34_e5_v8__0l;
      v28 = a2;
      v29 = v11;
      v20 = v27;
    }
    else
    {
      v20 = 0;
    }
    v21 = _Block_copy(v20);
    if ((v10 & 8) != 0)
    {
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_2;
      v26[3] = &unk_1E16B6740;
      v26[4] = v8;
      v26[5] = v21;
      objc_msgSend(MEMORY[0x1E0CD28B0], "addCommitHandler:forPhase:", v26, 5);
    }
    else
    {
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_4;
      v25[3] = &unk_1E16B1B28;
      v25[4] = v7;
      objc_msgSend((id)UIApp, "_performWithUICACommitStateSnapshotting:", v25);
      v8[2](v8);
      if (v21)
      {
        Current = CFRunLoopGetCurrent();
        CFRunLoopPerformBlock(Current, (CFTypeRef)*MEMORY[0x1E0C9B270], v21);
        v23 = CFRunLoopGetCurrent();
        CFRunLoopWakeUp(v23);
      }
    }

  }
  return v5;
}

_UIReplicantView *_UISnapshotLayerIdRectAfterCommit(int a1, uint64_t a2, void *a3, __int128 *a4, int a5, double a6, double a7, double a8, double a9)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  _UIReplicantView *v21;
  _UIReplicantView *v22;
  _UIReplicantView *v23;
  void *v24;
  void *v25;
  _UIReplicantView *v26;
  void (**v27)(_QWORD);
  void *v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[88];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  uint64_t v47;

  v16 = a4[5];
  *(_OWORD *)&v33[16] = a4[4];
  *(_OWORD *)&v33[32] = v16;
  v17 = a4[7];
  *(_OWORD *)&v33[48] = a4[6];
  *(_OWORD *)&v33[64] = v17;
  v18 = a4[1];
  v30 = *a4;
  v31 = v18;
  v19 = a4[3];
  v32 = a4[2];
  *(_OWORD *)v33 = v19;
  v47 = 0;
  memset(v46, 0, sizeof(v46));
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v20 = a3;
  _UISnapshotCaptureScreen(v20, &v30, (uint64_t)v46, &v38, a6, a7, a8, a9);
  v21 = [_UIReplicantView alloc];
  v22 = -[_UIReplicantView initWithSurface:](v21, "initWithSurface:", v46, v30, v31, v32, *(_OWORD *)v33, *(_OWORD *)&v33[16], *(_OWORD *)&v33[32], *(_OWORD *)&v33[48], *(_OWORD *)&v33[64]);
  *(_QWORD *)&v30 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v30 + 1) = 3221225472;
  *(_QWORD *)&v31 = ___UISnapshotLayerIdRectBlock_block_invoke;
  *((_QWORD *)&v31 + 1) = &unk_1E16DEEA8;
  v37 = a1;
  *(_QWORD *)&v32 = v20;
  *(_QWORD *)v33 = a2;
  v23 = v22;
  *(_OWORD *)&v33[72] = v42;
  v34 = v43;
  v35 = v44;
  v36 = v45;
  *(_OWORD *)&v33[8] = v38;
  *(_OWORD *)&v33[24] = v39;
  *(_OWORD *)&v33[40] = v40;
  *((_QWORD *)&v32 + 1) = v23;
  *(_OWORD *)&v33[56] = v41;
  v24 = _Block_copy(&v30);
  v25 = (void *)*((_QWORD *)&v32 + 1);
  v26 = v23;

  v27 = v24;
  v28 = v27;
  if (a5)
    _performAfterContextCommitUnderCoverAllowDefer(0, 1, 1, v27);
  else
    v27[2](v27);

  return v26;
}

CGFloat _makeViewSnapshotTransform(_OWORD *a1, void *a2)
{
  id v3;
  void *v4;
  __n128 v5;
  __n128 v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CGFloat result;
  __int128 v16;
  CATransform3D v17;
  CATransform3D a;
  CATransform3D v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  CATransform3D v23;
  CATransform3D v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v20 = 0;
  v3 = a2;
  objc_msgSend(v3, "_window");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _windowSceneSettings(v4, &v21, &v20);

  v6.n128_u64[0] = *((_QWORD *)&v22 + 1);
  v5.n128_u64[0] = v22;
  _UISnapshotContainerTransform(&v23, 1, v20, 1, *(double *)&v21, *((double *)&v21 + 1), v5, v6);
  objc_msgSend(v3, "layer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 80);
  *(_OWORD *)&v24.m31 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 64);
  *(_OWORD *)&v24.m33 = v8;
  v9 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 112);
  *(_OWORD *)&v24.m41 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 96);
  *(_OWORD *)&v24.m43 = v9;
  v10 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 16);
  *(_OWORD *)&v24.m11 = *MEMORY[0x1E0CD2610];
  *(_OWORD *)&v24.m13 = v10;
  v11 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 48);
  *(_OWORD *)&v24.m21 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 32);
  *(_OWORD *)&v24.m23 = v11;
  CALayerMapGeometry();

  a = v23;
  v17 = v24;
  CATransform3DConcat(&v19, &a, &v17);
  v12 = *(_OWORD *)&v19.m33;
  a1[4] = *(_OWORD *)&v19.m31;
  a1[5] = v12;
  v13 = *(_OWORD *)&v19.m43;
  a1[6] = *(_OWORD *)&v19.m41;
  a1[7] = v13;
  v14 = *(_OWORD *)&v19.m13;
  *a1 = *(_OWORD *)&v19.m11;
  a1[1] = v14;
  result = v19.m21;
  v16 = *(_OWORD *)&v19.m23;
  a1[2] = *(_OWORD *)&v19.m21;
  a1[3] = v16;
  return result;
}

_UIReplicantView *_UISnapshotScreenWindowsRectAfterCommit(void *a1, void *a2, __int128 *a3, int a4, double a5, double a6, double a7, double a8)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  id v19;
  void *v20;
  _UIReplicantView *v21;
  _UIReplicantView *v22;
  _UIReplicantView *v23;
  void *v24;
  _UIReplicantView *v25;
  void (**v26)(_QWORD);
  void *v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[88];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  uint64_t v45;

  v14 = a3[5];
  *(_OWORD *)&v32[16] = a3[4];
  *(_OWORD *)&v32[32] = v14;
  v15 = a3[7];
  *(_OWORD *)&v32[48] = a3[6];
  *(_OWORD *)&v32[64] = v15;
  v16 = a3[1];
  v29 = *a3;
  v30 = v16;
  v17 = a3[3];
  v31 = a3[2];
  *(_OWORD *)v32 = v17;
  v45 = 0;
  memset(v44, 0, sizeof(v44));
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v18 = a2;
  v19 = a1;
  _UISnapshotCaptureScreen(v19, &v29, (uint64_t)v44, &v36, a5, a6, a7, a8);
  _makeContextList(v18, 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = [_UIReplicantView alloc];
  v22 = -[_UIReplicantView initWithSurface:](v21, "initWithSurface:", v44, v29, v30, v31, *(_OWORD *)v32, *(_OWORD *)&v32[16], *(_OWORD *)&v32[32], *(_OWORD *)&v32[48], *(_OWORD *)&v32[64]);
  *(_QWORD *)&v29 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v29 + 1) = 3221225472;
  *(_QWORD *)&v30 = ___UISnapshotScreenWindowsRectBlock_block_invoke;
  *((_QWORD *)&v30 + 1) = &unk_1E16DEED0;
  *(_QWORD *)&v31 = v19;
  v23 = v22;
  *(_OWORD *)&v32[72] = v40;
  v33 = v41;
  v34 = v42;
  v35 = v43;
  *(_OWORD *)&v32[8] = v36;
  *(_OWORD *)&v32[24] = v37;
  *(_OWORD *)&v32[40] = v38;
  *(_OWORD *)&v32[56] = v39;
  *((_QWORD *)&v31 + 1) = v23;
  *(_QWORD *)v32 = v20;
  v24 = _Block_copy(&v29);
  v25 = v23;

  v26 = v24;
  v27 = v26;
  if (a4)
    _performAfterContextCommitUnderCoverAllowDefer(0, 1, 1, v26);
  else
    v26[2](v26);

  return v25;
}

id _UISnapshotScreenCompatibilityRectAfterCommit(void *a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v11;
  int v12;
  id (*v13)();
  void *v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  unint64_t v29;
  NSObject *v30;
  void *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[16];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  CGRect v51;

  v11 = a1;
  if (v11)
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    *(_OWORD *)buf = 0u;
    v42 = 0u;
    _guessScreenSnapshotTransform(buf, v11, (uint64_t)&v49);
    v51.origin.x = a3;
    v51.origin.y = a4;
    v51.size.width = a5;
    v51.size.height = a6;
    if (CGRectIsNull(v51))
    {
      a4 = *((double *)&v49 + 1);
      a3 = *(double *)&v49;
      a6 = *((double *)&v50 + 1);
      a5 = *(double *)&v50;
    }
    v12 = objc_msgSend(v11, "_isMainLikeScreen");
    v13 = _externalKeyWindow;
    if (v12)
      v13 = _keyWindow;
    v13();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "windowScene");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "_effectiveUISettings");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "hostContextIdentifierForSnapshotting");
    v18 = objc_msgSend(v16, "scenePresenterRenderIdentifierForSnapshotting");
    if (v17 && (v19 = v18) != 0)
    {
      objc_msgSend(v11, "bounds");
      v20 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 80);
      v37 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 64);
      v38 = v20;
      v21 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 112);
      v39 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 96);
      v40 = v21;
      v22 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 16);
      v33 = *MEMORY[0x1E0CD2610];
      v34 = v22;
      v23 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 48);
      v35 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 32);
      v36 = v23;
      _UISnapshotLayerIdRectAfterCommit(v17, v19, v11, &v33, a2, v24, v25, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v15)
        objc_msgSend(v15, "_visibleWindows");
      else
        +[UIWindow allWindowsIncludingInternalWindows:onlyVisibleWindows:forScreen:](UIWindow, "allWindowsIncludingInternalWindows:onlyVisibleWindows:forScreen:", 1, 1, v11);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = v45;
      v38 = v46;
      v39 = v47;
      v40 = v48;
      v33 = *(_OWORD *)buf;
      v34 = v42;
      v35 = v43;
      v36 = v44;
      _UISnapshotScreenWindowsRectAfterCommit(v11, v31, &v33, a2, a3, a4, a5, a6);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v29 = _UISnapshotScreenCompatibilityRectAfterCommit___s_category;
    if (!_UISnapshotScreenCompatibilityRectAfterCommit___s_category)
    {
      v29 = __UILogCategoryGetNode("Snapshotting", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v29, (unint64_t *)&_UISnapshotScreenCompatibilityRectAfterCommit___s_category);
    }
    v30 = *(NSObject **)(v29 + 8);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v30, OS_LOG_TYPE_ERROR, "Screen snapshot requires non-nil screen.", buf, 2u);
    }
    v28 = 0;
  }

  return v28;
}

void _guessScreenSnapshotTransform(_OWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  int v6;
  id (*v7)();
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  __n128 v45;
  __n128 v46;
  CATransform3D v47;
  CATransform3D a;
  CATransform3D v49;
  CATransform3D v50;
  CATransform3D v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = objc_msgSend(v5, "_isMainLikeScreen");
  v7 = _externalKeyWindow;
  if (v6)
    v7 = _keyWindow;
  v7();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "bounds");
    v11 = v10;
    v13 = v12;
    v14 = objc_msgSend(v9, "interfaceOrientation");
    v15 = _orientationDistance_angles[objc_msgSend(v5, "_interfaceOrientation")] - _orientationDistance_angles[v14];
    if ((v15 & 1) != 0)
      v16 = v13;
    else
      v16 = v11;
    if ((v15 & 1) != 0)
      v17 = v11;
    else
      v17 = v13;
    v18 = *MEMORY[0x1E0C9D538];
    v19 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    *(_QWORD *)a3 = *MEMORY[0x1E0C9D538];
    *(double *)(a3 + 8) = v19;
    *(double *)(a3 + 16) = v16;
    *(double *)(a3 + 24) = v17;
    objc_msgSend(v9, "bounds", _makeViewSnapshotTransform(&v50, v9));
    v21 = v20;
    v23 = v22;
    v24 = objc_msgSend(v9, "interfaceOrientation");
    v25 = objc_msgSend(v5, "_interfaceOrientation");
    v26 = objc_msgSend(v9, "interfaceOrientation");
    v27.n128_u64[0] = v21;
    v28.n128_u64[0] = v23;
    _UISnapshotContainerTransform(&v51, v24, v25, v26, v18, v19, v27, v28);
    a = v50;
    v47 = v51;
    CATransform3DConcat(&v49, &a, &v47);
    v29 = *(_OWORD *)&v49.m33;
    a1[4] = *(_OWORD *)&v49.m31;
    a1[5] = v29;
    v30 = *(_OWORD *)&v49.m43;
    a1[6] = *(_OWORD *)&v49.m41;
    a1[7] = v30;
    v31 = *(_OWORD *)&v49.m13;
    *a1 = *(_OWORD *)&v49.m11;
    a1[1] = v31;
    v32 = *(_OWORD *)&v49.m23;
    a1[2] = *(_OWORD *)&v49.m21;
    a1[3] = v32;
  }
  else
  {
    objc_msgSend(v5, "_unjailedReferenceBounds");
    v34 = v33;
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v41 = objc_msgSend(v5, "_interfaceOrientation");
    if ((unint64_t)(v41 - 5) >= 0xFFFFFFFFFFFFFFFELL)
      v42 = *(double *)&v40;
    else
      v42 = *(double *)&v38;
    *(_OWORD *)a3 = *MEMORY[0x1E0C9D538];
    if ((unint64_t)(v41 - 5) >= 0xFFFFFFFFFFFFFFFELL)
      v43 = *(double *)&v38;
    else
      v43 = *(double *)&v40;
    *(double *)(a3 + 16) = v42;
    *(double *)(a3 + 24) = v43;
    v44 = objc_msgSend(v5, "_interfaceOrientation");
    v45.n128_u64[0] = v38;
    v46.n128_u64[0] = v40;
    _UISnapshotContainerTransform(a1, 1, v44, 1, v34, v36, v45, v46);
  }

}

id _UISnapshotWindowsAtViewRect(void *a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  __int128 v23[8];
  uint8_t buf[32];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v14 = a2;
  v15 = a3;
  objc_msgSend(v14, "_window");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    memset(buf, 0, sizeof(buf));
    objc_msgSend(v14, "_screen", _makeViewSnapshotTransform(buf, v14));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v23[4] = v27;
    v23[5] = v28;
    v23[6] = v29;
    v23[7] = v30;
    v23[0] = *(_OWORD *)buf;
    v23[1] = *(_OWORD *)&buf[16];
    v23[2] = v25;
    v23[3] = v26;
    _UISnapshotWindowsRectAfterCommit(v13, v17, v23, v15, a4, a5, a6, a7);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v19 = _UISnapshotWindowsAtViewRect___s_category;
    if (!_UISnapshotWindowsAtViewRect___s_category)
    {
      v19 = __UILogCategoryGetNode("Snapshotting", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v19, (unint64_t *)&_UISnapshotWindowsAtViewRect___s_category);
    }
    v20 = *(NSObject **)(v19 + 8);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = v20;
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = objc_opt_class();
      _os_log_impl(&dword_185066000, v21, OS_LOG_TYPE_ERROR, "Snapshot at view rect requires view (%p, %@) to be in a window.", buf, 0x16u);

    }
    v18 = 0;
  }

  return v18;
}

_UIReplicantView *_UISnapshotWindowsRectAfterCommit(void *a1, void *a2, __int128 *a3, void *a4, double a5, double a6, double a7, double a8)
{
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  _UIReplicantView *v24;
  _UIReplicantView *v25;
  _UIReplicantView *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  _UIReplicantView *v31;
  void (**v32)(void);
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  uint64_t v51;

  v15 = a4;
  v16 = a3[5];
  v38 = a3[4];
  v39 = v16;
  v17 = a3[7];
  v40 = a3[6];
  v41 = v17;
  v18 = a3[1];
  v34 = *a3;
  v35 = v18;
  v19 = a3[3];
  v36 = a3[2];
  v37 = v19;
  v20 = v15;
  v51 = 0;
  memset(v50, 0, sizeof(v50));
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v21 = a2;
  v22 = a1;
  _UISnapshotCaptureScreen(v21, &v34, (uint64_t)v50, &v42, a5, a6, a7, a8);
  _makeContextList(v22, &v42);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  v24 = [_UIReplicantView alloc];
  v25 = -[_UIReplicantView initWithSurface:](v24, "initWithSurface:", v50, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49);
  *(_QWORD *)&v34 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v34 + 1) = 3221225472;
  *(_QWORD *)&v35 = ___UISnapshotWindowsRectBlock_block_invoke;
  *((_QWORD *)&v35 + 1) = &unk_1E16B51E8;
  *(_QWORD *)&v36 = v21;
  v26 = v25;
  *((_QWORD *)&v36 + 1) = v26;
  *(_QWORD *)&v37 = v23;
  *((_QWORD *)&v37 + 1) = v20;
  v27 = v20;
  v28 = v23;
  v29 = _Block_copy(&v34);
  v30 = (void *)*((_QWORD *)&v37 + 1);
  v31 = v26;

  v32 = v29;
  v32[2]();

  return v31;
}

id _UISnapshotWindowsCompatibilityRect(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v11;
  id v12;
  void *v13;
  unint64_t v14;
  NSObject *v15;
  __int128 v17[8];
  uint8_t buf[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  CGRect v28;

  v11 = a1;
  v12 = a2;
  if (v12)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)buf = 0u;
    v19 = 0u;
    _guessScreenSnapshotTransform(buf, v12, (uint64_t)&v26);
    v28.origin.x = a3;
    v28.origin.y = a4;
    v28.size.width = a5;
    v28.size.height = a6;
    if (CGRectIsNull(v28))
    {
      a4 = *((double *)&v26 + 1);
      a3 = *(double *)&v26;
      a6 = *((double *)&v27 + 1);
      a5 = *(double *)&v27;
    }
    v17[4] = v22;
    v17[5] = v23;
    v17[6] = v24;
    v17[7] = v25;
    v17[0] = *(_OWORD *)buf;
    v17[1] = v19;
    v17[2] = v20;
    v17[3] = v21;
    _UISnapshotWindowsRectAfterCommit(v11, v12, v17, 0, a3, a4, a5, a6);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14 = _UISnapshotWindowsCompatibilityRect___s_category;
    if (!_UISnapshotWindowsCompatibilityRect___s_category)
    {
      v14 = __UILogCategoryGetNode("Snapshotting", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v14, (unint64_t *)&_UISnapshotWindowsCompatibilityRect___s_category);
    }
    v15 = *(NSObject **)(v14 + 8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_ERROR, "Windows snapshot requires non-nil screen.", buf, 2u);
    }
    v13 = 0;
  }

  return v13;
}

const void *_UIRenderDisplay(void *a1, void *a2)
{
  id v3;
  uint64_t (**v4)(_QWORD, void *, double, double);
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  unint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  const void *v47;
  CFTypeID v48;
  __n128 v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  unint64_t v61;
  NSObject *v62;
  unint64_t v63;
  NSObject *v64;
  NSObject *v65;
  __CFString *v66;
  unint64_t v67;
  NSObject *v68;
  unsigned int v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t (**v74)(_QWORD, void *, double, double);
  uint8_t buf[16];
  CATransform3D v76;
  CATransform3D b;
  CATransform3D a;
  _QWORD v79[2];
  _QWORD v80[5];
  _QWORD v81[5];
  CATransform3D v82;
  _QWORD v83[4];
  _QWORD v84[6];

  v84[4] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("enforce-secure-mode"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "BOOLValue");

  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("src-screen"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = v7;
  }
  else
  {
    +[UIScreen mainScreen](UIScreen, "mainScreen");
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v9;

  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("src-orientation"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("src-rect"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("dst-scale"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "displayConfiguration");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14)
  {
    v70 = v6;
    objc_msgSend(v14, "bounds");
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v23 = v22;
    objc_msgSend(v15, "scale");
    v25 = v24;
    if (v11)
    {
      v26 = (int)objc_msgSend(v11, "intValue");
      if (!v12)
        goto LABEL_8;
    }
    else
    {
      v26 = 1;
      if (!v12)
      {
LABEL_8:
        v73 = v10;
        v74 = v4;
        v71 = v12;
        v72 = v11;
        if (v13)
        {
          objc_msgSend(v13, "doubleValue");
          v25 = v31;
        }
        if ((unint64_t)(v26 - 5) >= 0xFFFFFFFFFFFFFFFELL)
          v32 = v23;
        else
          v32 = v21;
        v83[0] = CFSTR("dst-size");
        if ((unint64_t)(v26 - 5) >= 0xFFFFFFFFFFFFFFFELL)
          v33 = v21;
        else
          v33 = v23;
        *(double *)v79 = v32;
        *(double *)&v79[1] = v33;
        objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v79, "{CGSize=dd}");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v84[0] = v34;
        v83[1] = CFSTR("dst-scale");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v25);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v84[1] = v35;
        v83[2] = CFSTR("dst-gamut");
        objc_msgSend(v3, "objectForKeyedSubscript:");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = v36;
        if (!v36)
        {
          v38 = (void *)MEMORY[0x1E0CB37E8];
          v39 = objc_msgSend(v15, "colorGamut");
          if (v39 >= 2)
            abort();
          objc_msgSend(v38, "numberWithInteger:", v39);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
        }
        v40 = v32 * v25;
        v41 = v33 * v25;
        v84[2] = v37;
        v83[3] = CFSTR("dst-opaque");
        objc_msgSend(v3, "objectForKeyedSubscript:");
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = (void *)v42;
        v44 = MEMORY[0x1E0C9AAB0];
        if (v42)
          v44 = v42;
        v84[3] = v44;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v84, v83, 4);
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v36)
        v4 = v74;
        v46 = (const void *)v74[2](v74, v45, v40, v41);
        v47 = v46;
        if (v46)
        {
          v48 = CFGetTypeID(v46);
          if (IOSurfaceGetTypeID() == v48)
          {
            memset(&v82, 0, sizeof(v82));
            v49.n128_f64[0] = v21;
            v50.n128_f64[0] = v23;
            _UISnapshotContainerTransform(&a, 1, v26, 1, v17, v19, v49, v50);
            CATransform3DMakeScale(&b, v25, v25, 1.0);
            CATransform3DConcat(&v82, &a, &b);
            v51 = *MEMORY[0x1E0CD30F0];
            v81[0] = *MEMORY[0x1E0CD30F8];
            v52 = *MEMORY[0x1E0CD30B0];
            v80[0] = v51;
            v80[1] = v52;
            objc_msgSend(v15, "name");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v54 = *MEMORY[0x1E0CD30A8];
            v81[1] = v53;
            v81[2] = v47;
            v55 = *MEMORY[0x1E0CD3140];
            v80[2] = v54;
            v80[3] = v55;
            v76 = v82;
            objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v76, "{CATransform3D=dddddddddddddddd}");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            v81[3] = v56;
            v80[4] = *MEMORY[0x1E0CD30C0];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v70);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            v81[4] = v57;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v81, v80, 5);
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            -[UIScreen _appendSnapshotDisplaySystemIdentifierToOptionsIfNeeded:](v73, v58);
            v59 = (void *)objc_claimAutoreleasedReturnValue();

            if ((CARenderServerSnapshot() & 1) != 0)
            {
              v10 = v73;
              v4 = v74;
              v11 = v72;
            }
            else
            {
              v67 = qword_1ECD7F9A0;
              v11 = v72;
              if (!qword_1ECD7F9A0)
              {
                v67 = __UILogCategoryGetNode("Snapshotting", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                atomic_store(v67, (unint64_t *)&qword_1ECD7F9A0);
              }
              v68 = *(NSObject **)(v67 + 8);
              v10 = v73;
              v4 = v74;
              if (os_log_type_enabled(v68, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_185066000, v68, OS_LOG_TYPE_FAULT, "Render server returned error.", buf, 2u);
              }
              CFRelease(v47);
              v47 = 0;
            }

            goto LABEL_46;
          }
          v63 = qword_1ECD7F998;
          if (!qword_1ECD7F998)
          {
            v63 = __UILogCategoryGetNode("Snapshotting", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v63, (unint64_t *)&qword_1ECD7F998);
          }
          v64 = *(NSObject **)(v63 + 8);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          {
            v65 = v64;
            v66 = (__CFString *)CFCopyTypeIDDescription(v48);
            LODWORD(v82.m11) = 138412290;
            *(_QWORD *)((char *)&v82.m11 + 4) = v66;
            _os_log_impl(&dword_185066000, v65, OS_LOG_TYPE_ERROR, "Rendering into destination of type %@ not supported.", (uint8_t *)&v82, 0xCu);

          }
          CFRelease(v47);
          v47 = 0;
        }
        v11 = v72;
        v10 = v73;
LABEL_46:
        v60 = v71;

        goto LABEL_47;
      }
    }
    objc_msgSend(v12, "CGRectValue");
    v17 = v27;
    v19 = v28;
    v21 = v29;
    v23 = v30;
    goto LABEL_8;
  }
  v60 = v12;
  v61 = qword_1ECD7F990;
  if (!qword_1ECD7F990)
  {
    v61 = __UILogCategoryGetNode("Snapshotting", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v61, (unint64_t *)&qword_1ECD7F990);
  }
  v62 = *(NSObject **)(v61 + 8);
  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v82.m11) = 0;
    _os_log_impl(&dword_185066000, v62, OS_LOG_TYPE_ERROR, "Rendering of display with missing configuration not supported.", (uint8_t *)&v82, 2u);
  }
  v47 = 0;
LABEL_47:

  return v47;
}

uint64_t _UISnapshotViewGetSlotId(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "_layer");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "_slotId");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "value");

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id _keyWindow()
{
  return +[UIWindow _applicationKeyWindow](UIWindow, "_applicationKeyWindow");
}

id _externalKeyWindow()
{
  return +[UIWindow _externalKeyWindow](UIWindow, "_externalKeyWindow");
}

uint64_t ___moveViewToTemporaryWindow_block_invoke(uint64_t a1)
{
  uint64_t result;
  double v3;

  objc_msgSend(*(id *)(a1 + 32), "setHidden:", 1);
  result = objc_msgSend(*(id *)(a1 + 32), "alpha");
  if (v3 == 0.0)
    return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", *(double *)(a1 + 40));
  return result;
}

_UISnapshotWindow *_makeWindowMatchingUIScene(void *a1, uint64_t a2)
{
  id v3;
  _UISnapshotWindow *v4;
  void *v5;

  v3 = a1;
  v4 = objc_alloc_init(_UISnapshotWindow);
  -[UIWindow _bindingLayer](v4, "_bindingLayer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setAllowsHitTesting:", 0);

  -[UIWindow _setWindowHostingScene:](v4, "_setWindowHostingScene:", v3);
  -[_UISnapshotWindow set_extendsScreenSceneLifetime:](v4, "set_extendsScreenSceneLifetime:", a2);
  return v4;
}

void ___moveViewToTemporaryWindow_block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "setHidden:", 1);
  objc_msgSend(*(id *)(a1 + 40), "_window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(a1 + 32);

  if (v2 == v3)
  {
    objc_msgSend(*(id *)(a1 + 40), "removeFromSuperview");
    v4 = *(void **)(a1 + 48);
    if (v4)
    {
      objc_msgSend(v4, "insertSubview:atIndex:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
      _UIViewReactivatePotentiallyDisruptedConstraintsForView(*(void **)(a1 + 56));
    }
  }
}

void ___allowPerContextCommits_block_invoke()
{
  id v0;

  _UIMainBundleIdentifier();
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _MergedGlobals_1195 = objc_msgSend(&unk_1E1A94778, "containsObject:", v0);

}

void ___performAfterContextCommitUnderCoverAllowDefer_block_invoke(uint64_t a1)
{
  int v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  int v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = dword_1ECD7F930;
    if (dword_1ECD7F930)
    {
      --dword_1ECD7F930;
      if (v2 == 1)
      {
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v3 = (id)qword_1ECD7F9D8;
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v4)
        {
          v5 = v4;
          v6 = *(_QWORD *)v18;
          do
          {
            for (i = 0; i != v5; ++i)
            {
              if (*(_QWORD *)v18 != v6)
                objc_enumerationMutation(v3);
              objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * i), "setHidden:", 1, (_QWORD)v17);
            }
            v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
          }
          while (v5);
        }

        v8 = (void *)qword_1ECD7F9D0;
        qword_1ECD7F9D0 = 0;

        v9 = (void *)qword_1ECD7F9D8;
        qword_1ECD7F9D8 = 0;

      }
    }
  }
  if (*(_BYTE *)(a1 + 33))
  {
    v10 = dword_1ECD7F92C;
    if (dword_1ECD7F92C)
    {
      --dword_1ECD7F92C;
      if (v10 == 1)
      {
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v11 = (id)qword_1ECD7F9C8;
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v12)
        {
          v13 = v12;
          v14 = *(_QWORD *)v18;
          do
          {
            for (j = 0; j != v13; ++j)
            {
              if (*(_QWORD *)v18 != v14)
                objc_enumerationMutation(v11);
              _stopWindowTime(*(void **)(*((_QWORD *)&v17 + 1) + 8 * j), 0);
            }
            v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
          }
          while (v13);
        }

        v16 = (void *)qword_1ECD7F9C8;
        qword_1ECD7F9C8 = 0;

      }
    }
  }
}

void ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_2(uint64_t a1)
{
  _QWORD v1[4];
  __int128 v2;

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_3;
  v1[3] = &unk_1E16B6740;
  v2 = *(_OWORD *)(a1 + 32);
  dispatch_async(MEMORY[0x1E0C80D38], v1);
}

uint64_t ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_3(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_4(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v1 = (void *)MEMORY[0x1E0CD28B0];
    v4[0] = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setCommittingContexts:", v2);

  }
  objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
  return objc_msgSend(MEMORY[0x1E0CD28B0], "synchronize");
}

void _enumScenes(void *a1)
{
  void (**v1)(id, void *);
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  +[UIScene _scenesIncludingInternal:](UIScene, "_scenesIncludingInternal:", 1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v7, "activationState") != -1 && objc_msgSend(v7, "_hostsWindows"))
          v1[2](v1, v7);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

}

void ___pauseWindows_block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  objc_msgSend(a2, "_allWindows", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * v6);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0
          && (objc_msgSend(v7, "_isHostedInAnotherProcess") & 1) == 0
          && (objc_msgSend((id)qword_1ECD7F9C8, "containsObject:", v7) & 1) == 0)
        {
          _stopWindowTime(v7, 1);
          objc_msgSend((id)qword_1ECD7F9C8, "addObject:", v7);
        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

}

void _stopWindowTime(void *a1, int a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;

  objc_msgSend(a1, "_layerForTimeOffsetModification");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeOffset");
  v4 = v3;
  v5 = CACurrentMediaTime();
  objc_msgSend(v10, "convertTime:fromLayer:", 0);
  v6 = v7;
  LODWORD(v7) = 1.0;
  if (a2)
    *(float *)&v7 = 0.0;
  objc_msgSend(v10, "setSpeed:", v7);
  if (qword_1ECD7F9F8 != -1)
    dispatch_once(&qword_1ECD7F9F8, &__block_literal_global_137_1);
  v8 = v10;
  if (byte_1ECD7F929)
  {
    objc_msgSend(v10, "setDisableDeferredAnimationCallbacks:", 1);
    v8 = v10;
  }
  objc_msgSend(v8, "convertTime:fromLayer:", 0, v5);
  objc_msgSend(v10, "setTimeOffset:", v4 + v6 - v9);

}

uint64_t ___stopWindowTime_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CD27A8], "instancesRespondToSelector:", sel_setDisableDeferredAnimationCallbacks_);
  byte_1ECD7F929 = result;
  return result;
}

void ___coverCanvases_block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  id v9;

  v9 = a2;
  if ((objc_msgSend((id)qword_1ECD7F9D0, "containsObject:") & 1) == 0)
  {
    objc_msgSend((id)qword_1ECD7F9D0, "addObject:", v9);
    v2 = (void *)qword_1ECD7F9D8;
    _makeWindowMatchingUIScene(v9, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "bounds");
    _UISnapshotScreenAtViewRectAfterCommit(v3, 0, v4, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addSubview:", v8);
    objc_msgSend(v3, "setWindowLevel:", 15000002.0);
    objc_msgSend(v3, "_orderFrontWithoutMakingKey");

    objc_msgSend(v2, "addObject:", v3);
  }

}

CGFloat _transformApplyUnapply(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CGFloat result;
  __int128 v15;
  CATransform3D v16;
  CATransform3D a;
  CATransform3D v18;

  v3 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v3;
  v4 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v4;
  v5 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v5;
  v6 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v6;
  v7 = a2[5];
  *(_OWORD *)&v16.m31 = a2[4];
  *(_OWORD *)&v16.m33 = v7;
  v8 = a2[7];
  *(_OWORD *)&v16.m41 = a2[6];
  *(_OWORD *)&v16.m43 = v8;
  v9 = a2[1];
  *(_OWORD *)&v16.m11 = *a2;
  *(_OWORD *)&v16.m13 = v9;
  v10 = a2[3];
  *(_OWORD *)&v16.m21 = a2[2];
  *(_OWORD *)&v16.m23 = v10;
  CATransform3DConcat(&v18, &a, &v16);
  v11 = *(_OWORD *)&v18.m33;
  a1[4] = *(_OWORD *)&v18.m31;
  a1[5] = v11;
  v12 = *(_OWORD *)&v18.m43;
  a1[6] = *(_OWORD *)&v18.m41;
  a1[7] = v12;
  v13 = *(_OWORD *)&v18.m13;
  *a1 = *(_OWORD *)&v18.m11;
  a1[1] = v13;
  result = v18.m21;
  v15 = *(_OWORD *)&v18.m23;
  a1[2] = *(_OWORD *)&v18.m21;
  a1[3] = v15;
  return result;
}

CATransform3D *_UISnapshotCaptureScreen(void *a1, _OWORD *a2, uint64_t a3, _OWORD *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CATransform3D *result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CATransform3D v25;
  CATransform3D a;
  CATransform3D v27;
  CATransform3D v28;
  CATransform3D v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "_scale");
  *(double *)(a3 + 24) = a8;
  *(_QWORD *)(a3 + 32) = v15;
  *(double *)a3 = a5;
  *(double *)(a3 + 8) = a6;
  *(double *)(a3 + 16) = a7;
  v16 = a2[5];
  *(_OWORD *)&v28.m31 = a2[4];
  *(_OWORD *)&v28.m33 = v16;
  v17 = a2[7];
  *(_OWORD *)&v28.m41 = a2[6];
  *(_OWORD *)&v28.m43 = v17;
  v18 = a2[1];
  *(_OWORD *)&v28.m11 = *a2;
  *(_OWORD *)&v28.m13 = v18;
  v19 = a2[3];
  *(_OWORD *)&v28.m21 = a2[2];
  *(_OWORD *)&v28.m23 = v19;
  _UIRenderingSurfaceTransform((double *)a3, &v29);
  a = v28;
  v25 = v29;
  result = CATransform3DConcat(&v27, &a, &v25);
  v21 = *(_OWORD *)&v27.m33;
  a4[4] = *(_OWORD *)&v27.m31;
  a4[5] = v21;
  v22 = *(_OWORD *)&v27.m43;
  a4[6] = *(_OWORD *)&v27.m41;
  a4[7] = v22;
  v23 = *(_OWORD *)&v27.m13;
  *a4 = *(_OWORD *)&v27.m11;
  a4[1] = v23;
  v24 = *(_OWORD *)&v27.m23;
  a4[2] = *(_OWORD *)&v27.m21;
  a4[3] = v24;
  return result;
}

void _windowSceneSettings(void *a1, _QWORD *a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v17 = a1;
  objc_msgSend(v17, "windowScene");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_FBSScene");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v6, "settings");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "frame");
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v10;
    a2[3] = v11;
    *a3 = objc_msgSend(v7, "interfaceOrientation");

  }
  else
  {
    objc_msgSend(v17, "screen");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "_unjailedReferenceBounds");
    *a2 = v13;
    a2[1] = v14;
    a2[2] = v15;
    a2[3] = v16;

    *a3 = 1;
  }

}

id _makeContextList(void *a1, __int128 *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __n128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  id v29;
  CATransform3D b;
  CATransform3D a;
  CATransform3D v32;
  CATransform3D v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  CATransform3D v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v29 = (id)objc_opt_new();
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v37, v50, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v38;
    v28 = *MEMORY[0x1E0CD3098];
    v27 = *MEMORY[0x1E0CD3140];
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v38 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v10 = objc_msgSend(v9, "_contextId");
          if ((_DWORD)v10)
          {
            v11 = v10;
            v12 = (void *)objc_opt_new();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v11);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, v28);

            if (a2)
            {
              v35 = 0u;
              v36 = 0u;
              v34 = 0;
              _windowSceneSettings(v9, &v35, &v34);
              memset(&v33, 0, sizeof(v33));
              v15.n128_u64[0] = *((_QWORD *)&v36 + 1);
              v14.n128_u64[0] = v36;
              _UISnapshotContainerTransform(&v33, 1, v34, 1, *(double *)&v35, *((double *)&v35 + 1), v14, v15);
              v32 = v33;
              CATransform3DInvert(&v41, &v32);
              v16 = a2[5];
              v17 = a2[3];
              v46 = a2[4];
              v47 = v16;
              v18 = a2[5];
              v19 = a2[7];
              v48 = a2[6];
              v49 = v19;
              v20 = a2[1];
              v42 = *a2;
              v43 = v20;
              v21 = a2[3];
              v23 = *a2;
              v22 = a2[1];
              v44 = a2[2];
              v45 = v21;
              a = v41;
              *(_OWORD *)&b.m31 = v46;
              *(_OWORD *)&b.m33 = v18;
              v24 = a2[7];
              *(_OWORD *)&b.m41 = v48;
              *(_OWORD *)&b.m43 = v24;
              *(_OWORD *)&b.m11 = v23;
              *(_OWORD *)&b.m13 = v22;
              *(_OWORD *)&b.m21 = v44;
              *(_OWORD *)&b.m23 = v17;
              CATransform3DConcat(&v32, &a, &b);
              v41 = v32;
              objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCATransform3D:", &v41);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "setObject:forKeyedSubscript:", v25, v27);

            }
            objc_msgSend(v29, "addObject:", v12);

          }
        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v37, v50, 16);
    }
    while (v6);
  }

  return v29;
}

void sub_1860B26E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,id a25,id a26)
{
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

BOOL isModifierFlag(uint64_t a1)
{
  return (unint64_t)(a1 - 224) < 8 || a1 == 57;
}

void sub_1860B5CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860B710C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 120), 8);
  _Unwind_Resume(a1);
}

const __CFString *UIStringFromScrollPhase(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("<Unknown>");
  else
    return off_1E16DF0C0[a1];
}

void _UIScrollEventCommonInit(void *a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;

  v1 = (void *)MEMORY[0x1E0CB3748];
  v2 = a1;
  objc_msgSend(v1, "strongToStrongObjectsMapTable");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (id)v2[15];
  v2[15] = v3;

}

void sub_1860BC4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a40, 8);
  _Unwind_Resume(a1);
}

void sub_1860BCA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void _UIAppGameControllerProcessDPad(double *a1, double *a2, void *a3, _BYTE *a4, _BYTE *a5, double a6)
{
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  double v18;
  double v19;
  uint64_t v20;
  id v21;
  double v22;
  double v23;
  uint64_t v24;
  id v25;
  double v26;
  double v27;
  uint64_t v28;
  id v29;
  double v30;
  double v31;
  _BOOL4 v32;
  id v33;

  v33 = a3;
  objc_msgSend(v33, "_hidEvent");
  BKSHIDEventGetBaseAttributes();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "contextID");

  _UIAppGameControllerPressInfoForState(0, 1, v12, a1[1], a2[1], a6);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  _UIAppGameControllerPressInfoForState(1, 1, v12, a1[2], a2[2], a6);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  _UIAppGameControllerPressInfoForState(2, 1, v12, a1[3], a2[3], a6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  _UIAppGameControllerPressInfoForState(3, 1, v12, a1[4], a2[4], a6);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
    objc_msgSend((id)UIApp, "_prepareButtonEvent:withPressInfo:", v33, v13);
  if (v14)
    objc_msgSend((id)UIApp, "_prepareButtonEvent:withPressInfo:", v33, v14);
  if (v15)
    objc_msgSend((id)UIApp, "_prepareButtonEvent:withPressInfo:", v33, v15);
  if (v16)
    objc_msgSend((id)UIApp, "_prepareButtonEvent:withPressInfo:", v33, v16);
  if (a4 && (v13 || v14 || v15 || v16))
    *a4 = 1;
  v17 = v13;
  v18 = _UIGetGameControllerMinimumForce();
  if ((objc_msgSend(v17, "phase") || (objc_msgSend(v17, "force"), v19 > v18)) && objc_msgSend(v17, "phase") != 3)
  {
    v20 = objc_msgSend(v17, "phase");

    if (v20 != 4)
      goto LABEL_38;
  }
  else
  {

  }
  v21 = v14;
  v22 = _UIGetGameControllerMinimumForce();
  if ((objc_msgSend(v21, "phase") || (objc_msgSend(v21, "force"), v23 > v22)) && objc_msgSend(v21, "phase") != 3)
  {
    v24 = objc_msgSend(v21, "phase");

    if (v24 != 4)
      goto LABEL_38;
  }
  else
  {

  }
  v25 = v15;
  v26 = _UIGetGameControllerMinimumForce();
  if ((objc_msgSend(v25, "phase") || (objc_msgSend(v25, "force"), v27 > v26)) && objc_msgSend(v25, "phase") != 3)
  {
    v28 = objc_msgSend(v25, "phase");

    if (v28 != 4)
      goto LABEL_38;
  }
  else
  {

  }
  v29 = v16;
  v30 = _UIGetGameControllerMinimumForce();
  v32 = !objc_msgSend(v29, "phase") && (objc_msgSend(v29, "force"), v31 <= v30)
     || objc_msgSend(v29, "phase") == 3
     || objc_msgSend(v29, "phase") == 4;

  if (a5 && v32)
    *a5 = 1;
LABEL_38:

}

void _UIAppGameControllerProcessShoulders(double *a1, double *a2, void *a3, _BYTE *a4, _BYTE *a5, double a6)
{
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  double v21;
  double v22;
  uint64_t v23;
  id v24;
  double v25;
  double v26;
  _BOOL4 v27;
  id v28;

  v11 = a3;
  if (a1[25] >= a1[26])
    v12 = a1[25];
  else
    v12 = a1[26];
  if (a2[25] >= a2[26])
    v13 = a2[25];
  else
    v13 = a2[26];
  if (a1[27] >= a1[28])
    v14 = a1[27];
  else
    v14 = a1[28];
  if (a2[27] >= a2[28])
    v15 = a2[27];
  else
    v15 = a2[28];
  v28 = v11;
  objc_msgSend(v11, "_hidEvent");
  BKSHIDEventGetBaseAttributes();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "contextID");

  _UIAppGameControllerPressInfoForState(2, 5, v17, v12, v13, a6);
  v18 = objc_claimAutoreleasedReturnValue();
  _UIAppGameControllerPressInfoForState(3, 5, v17, v14, v15, a6);
  v19 = objc_claimAutoreleasedReturnValue();
  if (v18)
    objc_msgSend((id)UIApp, "_prepareButtonEvent:withPressInfo:", v28, v18);
  if (v19)
    objc_msgSend((id)UIApp, "_prepareButtonEvent:withPressInfo:", v28, v19);
  if (a4 && v18 | v19)
    *a4 = 1;
  v20 = (id)v18;
  v21 = _UIGetGameControllerMinimumForce();
  if ((objc_msgSend(v20, "phase") || (objc_msgSend(v20, "force"), v22 > v21)) && objc_msgSend(v20, "phase") != 3)
  {
    v23 = objc_msgSend(v20, "phase");

    if (v23 != 4)
      goto LABEL_33;
  }
  else
  {

  }
  v24 = (id)v19;
  v25 = _UIGetGameControllerMinimumForce();
  v27 = !objc_msgSend(v24, "phase") && (objc_msgSend(v24, "force"), v26 <= v25)
     || objc_msgSend(v24, "phase") == 3
     || objc_msgSend(v24, "phase") == 4;

  if (a5 && v27)
    *a5 = 1;
LABEL_33:

}

UIPressInfo *_UIAppGameControllerPressInfoForState(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  double v12;
  UIPressInfo *v13;
  uint64_t v14;
  uint64_t v15;
  UIPressInfo *v16;
  uint64_t v17;
  UIPressInfo *v18;
  UIPressInfo *v19;

  v12 = _UIGetGameControllerMinimumForce();
  v13 = objc_alloc_init(UIPressInfo);
  -[UIPressInfo setType:](v13, "setType:", a1);
  -[UIPressInfo setSource:](v13, "setSource:", 2);
  -[UIPressInfo setGameControllerComponent:](v13, "setGameControllerComponent:", a2);
  -[UIPressInfo setForce:](v13, "setForce:", a5);
  -[UIPressInfo setTimestamp:](v13, "setTimestamp:", a6);
  -[UIPressInfo setContextID:](v13, "setContextID:", a3);
  v14 = 3;
  v15 = 2;
  if (a5 != a4)
    v15 = 1;
  if (v12 >= a5)
  {
    v16 = 0;
  }
  else
  {
    v14 = v15;
    v16 = v13;
  }
  if (v12 >= a4)
    v17 = 0;
  else
    v17 = v14;
  if (v12 >= a4)
    v18 = v16;
  else
    v18 = v13;
  -[UIPressInfo setPhase:](v13, "setPhase:", v17);
  v19 = v18;

  return v19;
}

double _UIGetGameControllerMinimumForce()
{
  int v0;
  double result;
  int v2;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1)
    return 0.001953125;
  v2 = _UIInternalPreference_GameControllerMinimumForce;
  if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_GameControllerMinimumForce)
    return 0.001953125;
  while (v0 >= v2)
  {
    _UIInternalPreferenceSync(v0, &_UIInternalPreference_GameControllerMinimumForce, (uint64_t)CFSTR("GameControllerMinimumForce"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
    v2 = _UIInternalPreference_GameControllerMinimumForce;
    result = 0.001953125;
    if (v0 == _UIInternalPreference_GameControllerMinimumForce)
      return result;
  }
  return *(double *)&qword_1EDDA8278;
}

void _UIAppGameControllerProcessGenericStick(uint64_t a1, double *a2, double *a3, void *a4, _BYTE *a5, _BYTE *a6, double a7)
{
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  double v20;
  double v21;
  uint64_t v22;
  id v23;
  double v24;
  double v25;
  uint64_t v26;
  id v27;
  double v28;
  double v29;
  uint64_t v30;
  id v31;
  double v32;
  double v33;
  _BOOL4 v34;
  id v35;

  v35 = a4;
  objc_msgSend(v35, "_hidEvent");
  BKSHIDEventGetBaseAttributes();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "contextID");

  _UIAppGameControllerPressInfoForState(0, a1, v14, *a2, *a3, a7);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  _UIAppGameControllerPressInfoForState(1, a1, v14, a2[1], a3[1], a7);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  _UIAppGameControllerPressInfoForState(2, a1, v14, a2[2], a3[2], a7);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  _UIAppGameControllerPressInfoForState(3, a1, v14, a2[3], a3[3], a7);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
    objc_msgSend((id)UIApp, "_prepareButtonEvent:withPressInfo:", v35, v15);
  if (v16)
    objc_msgSend((id)UIApp, "_prepareButtonEvent:withPressInfo:", v35, v16);
  if (v17)
    objc_msgSend((id)UIApp, "_prepareButtonEvent:withPressInfo:", v35, v17);
  if (v18)
    objc_msgSend((id)UIApp, "_prepareButtonEvent:withPressInfo:", v35, v18);
  if (a5 && (v15 || v16 || v17 || v18))
    *a5 = 1;
  v19 = v15;
  v20 = _UIGetGameControllerMinimumForce();
  if ((objc_msgSend(v19, "phase") || (objc_msgSend(v19, "force"), v21 > v20)) && objc_msgSend(v19, "phase") != 3)
  {
    v22 = objc_msgSend(v19, "phase");

    if (v22 != 4)
      goto LABEL_38;
  }
  else
  {

  }
  v23 = v16;
  v24 = _UIGetGameControllerMinimumForce();
  if ((objc_msgSend(v23, "phase") || (objc_msgSend(v23, "force"), v25 > v24)) && objc_msgSend(v23, "phase") != 3)
  {
    v26 = objc_msgSend(v23, "phase");

    if (v26 != 4)
      goto LABEL_38;
  }
  else
  {

  }
  v27 = v17;
  v28 = _UIGetGameControllerMinimumForce();
  if ((objc_msgSend(v27, "phase") || (objc_msgSend(v27, "force"), v29 > v28)) && objc_msgSend(v27, "phase") != 3)
  {
    v30 = objc_msgSend(v27, "phase");

    if (v30 != 4)
      goto LABEL_38;
  }
  else
  {

  }
  v31 = v18;
  v32 = _UIGetGameControllerMinimumForce();
  v34 = !objc_msgSend(v31, "phase") && (objc_msgSend(v31, "force"), v33 <= v32)
     || objc_msgSend(v31, "phase") == 3
     || objc_msgSend(v31, "phase") == 4;

  if (a6 && v34)
    *a6 = 1;
LABEL_38:

}

void sub_1860C013C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1860C0470(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __screenBlanked(uint64_t a1, uint64_t a2)
{
  qos_class_t v3;
  NSObject *v4;
  _QWORD block[5];

  v3 = qos_class_main();
  dispatch_get_global_queue(v3, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ____screenBlanked_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(v4, block);

}

uint64_t ____screenBlanked_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_enablePeakDetectionIfNecessary");
}

uint64_t _UIPressesContainsPressType(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = a1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7), "type", (_QWORD)v10) == a2)
        {
          v8 = 1;
          goto LABEL_11;
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_11:

  return v8;
}

uint64_t _UIPressesContainsExternalKeyboardSource(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v7;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v7 != v3)
          objc_enumerationMutation(v1);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * i), "_source", (_QWORD)v6) == 1)
        {
          v2 = 1;
          goto LABEL_11;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_11:

  return v2;
}

uint64_t _UIPressesContainsPressTypes(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v5 = v3;
  v20 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v20)
  {
    v6 = *(_QWORD *)v26;
    v19 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v26 != v6)
          objc_enumerationMutation(v5);
        v8 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v9 = v4;
        v10 = v4;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v22;
          while (2)
          {
            for (j = 0; j != v12; ++j)
            {
              if (*(_QWORD *)v22 != v13)
                objc_enumerationMutation(v10);
              v15 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * j);
              v16 = objc_msgSend(v8, "type", v19);
              if (v16 == objc_msgSend(v15, "integerValue"))
              {

                v17 = 1;
                v4 = v9;
                goto LABEL_19;
              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
            if (v12)
              continue;
            break;
          }
        }

        v4 = v9;
        v6 = v19;
      }
      v17 = 0;
      v20 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v20);
  }
  else
  {
    v17 = 0;
  }
LABEL_19:

  return v17;
}

uint64_t _UIPressesOnlyContainsPressTypes(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int v19;
  id obj;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "count"))
    v5 = objc_msgSend(v4, "count") != 0;
  else
    v5 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = v3;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
  if (v6)
  {
    v7 = v6;
    v19 = v5;
    v21 = *(_QWORD *)v27;
    while (1)
    {
      v8 = 0;
LABEL_7:
      if (*(_QWORD *)v27 != v21)
        objc_enumerationMutation(obj);
      v9 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v8);
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v10 = v4;
      v11 = v4;
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      if (!v12)
        break;
      v13 = v12;
      v14 = *(_QWORD *)v23;
LABEL_11:
      v15 = 0;
      while (1)
      {
        if (*(_QWORD *)v23 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v15);
        v17 = objc_msgSend(v9, "type");
        if (v17 == objc_msgSend(v16, "integerValue"))
          break;
        if (v13 == ++v15)
        {
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
          if (v13)
            goto LABEL_11;
          goto LABEL_21;
        }
      }

      ++v8;
      v4 = v10;
      if (v8 != v7)
        goto LABEL_7;
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      if (!v7)
      {
        v5 = v19;
        goto LABEL_22;
      }
    }
LABEL_21:

    v5 = 0;
    v4 = v10;
  }
LABEL_22:

  return v5;
}

uint64_t _UIPressesContainsDirectionalPress(void *a1)
{
  return _UIPressesContainsPressTypes(a1, &unk_1E1A94790);
}

const __CFString *_NSStringFromUIPressPhase(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("Unknown");
  else
    return off_1E16DF1E0[a1];
}

id _eventComponentPhaseMapping_0()
{
  void *v0;
  uint64_t v1;
  void *v2;
  _QWORD v4[5];
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  v0 = (void *)_eventComponentPhaseMapping_mapping_0;
  if (!_eventComponentPhaseMapping_mapping_0)
  {
    v4[0] = &unk_1E1A99EE8;
    v4[1] = &unk_1E1A99F00;
    v5[0] = &unk_1E1A99EE8;
    v5[1] = &unk_1E1A99F00;
    v4[2] = &unk_1E1A99EB8;
    v4[3] = &unk_1E1A99ED0;
    v5[2] = &unk_1E1A99EB8;
    v5[3] = &unk_1E1A99ED0;
    v4[4] = &unk_1E1A99F18;
    v5[4] = &unk_1E1A99F18;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 5);
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)_eventComponentPhaseMapping_mapping_0;
    _eventComponentPhaseMapping_mapping_0 = v1;

    v0 = (void *)_eventComponentPhaseMapping_mapping_0;
  }
  return v0;
}

double _UITouchStandardForceAmountForTouchType(uint64_t a1)
{
  double result;

  result = 60.0;
  if (a1 == 2)
    result = 120.0;
  if (a1 == 3)
    return 115.0;
  return result;
}

uint64_t _UITouchShouldCancelDelayingGesturesFromPreviousSequence(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (_UITouchCancellationOfDelayingGesturesFromPreviousSequenceIsEnabled_onceToken != -1)
    dispatch_once(&_UITouchCancellationOfDelayingGesturesFromPreviousSequenceIsEnabled_onceToken, &__block_literal_global_456);
  if (objc_msgSend(v1, "isDelayed") && !objc_msgSend(v1, "phase"))
    v2 = objc_msgSend(v1, "_isPointerTouch");
  else
    v2 = 0;

  return v2;
}

BOOL _UIDelayedTouchCanBeConsideredForSentTouchesEnded(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  if (_UITouchCancellationOfDelayingGesturesFromPreviousSequenceIsEnabled_onceToken != -1)
    dispatch_once(&_UITouchCancellationOfDelayingGesturesFromPreviousSequenceIsEnabled_onceToken, &__block_literal_global_456);
  if (objc_msgSend(v1, "_isPointerTouch"))
    v2 = objc_msgSend(v1, "phase") != 0;
  else
    v2 = 1;

  return v2;
}

double _UITouchConvertCADisplayAzimuthAngleToWindow(void *a1, double a2)
{
  id v3;
  double v4;
  uint64_t v5;
  double v6;

  v3 = a1;
  v4 = -a2;
  if (!v3 || !_UIAppUseModernRotationAndPresentationBehaviors())
    goto LABEL_15;
  v5 = objc_msgSend(v3, "_windowInterfaceOrientation");
  switch(v5)
  {
    case 2:
      v6 = 3.14159265;
      goto LABEL_9;
    case 3:
      v6 = -1.57079633;
      goto LABEL_9;
    case 4:
      v6 = 1.57079633;
LABEL_9:
      v4 = v6 - a2;
      break;
  }
  for (; v4 > 6.28318531; v4 = v4 + -6.28318531)
    ;
  while (v4 < 0.0)
    v4 = v4 + 6.28318531;
LABEL_15:

  return v4;
}

double _UITouchAzimuthUnitVectorInView(void *a1, void *a2, CGFloat a3)
{
  id v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;
  CGAffineTransform v17;

  v5 = a1;
  v6 = a2;
  objc_msgSend(v5, "convertPoint:fromView:", v6, 0.0, 0.0);
  v8 = v7;
  v10 = v9;
  CGAffineTransformMakeRotation(&v17, a3);
  v11 = v17.tx + v17.a + v17.c * 0.0;
  if (v5 && v6)
  {
    v11 = v8 + v11;
    objc_msgSend(v6, "convertPoint:fromView:", v5, v11, v10 + v17.ty + v17.b + v17.d * 0.0);
    if (v12 != *MEMORY[0x1E0C9D538] || v13 != *(double *)(MEMORY[0x1E0C9D538] + 8))
    {
      v15 = v12 * v12 + v13 * v13;
      v11 = v12;
      if (fabs(v15 + -1.0) >= 2.22044605e-16)
        v11 = v12 / sqrt(v15);
    }
  }

  return v11;
}

id _eventComponentPhaseMapping_1()
{
  void *v0;
  uint64_t v1;
  void *v2;
  _QWORD v4[5];
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  v0 = (void *)_eventComponentPhaseMapping_mapping_1;
  if (!_eventComponentPhaseMapping_mapping_1)
  {
    v4[0] = &unk_1E1A99F30;
    v4[1] = &unk_1E1A99F48;
    v5[0] = &unk_1E1A99F30;
    v5[1] = &unk_1E1A99F48;
    v4[2] = &unk_1E1A99F60;
    v4[3] = &unk_1E1A99F78;
    v5[2] = &unk_1E1A99F60;
    v5[3] = &unk_1E1A99F78;
    v4[4] = &unk_1E1A99F90;
    v5[4] = &unk_1E1A99F90;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 5);
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)_eventComponentPhaseMapping_mapping_1;
    _eventComponentPhaseMapping_mapping_1 = v1;

    v0 = (void *)_eventComponentPhaseMapping_mapping_1;
  }
  return v0;
}

uint64_t _UITouchesContainsTouchFromCarTouchpad(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v11 != v3)
          objc_enumerationMutation(v1);
        v5 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v5, "type", (_QWORD)v10) == 1)
        {
          objc_msgSend(v5, "view");
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "traitCollection");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v8 = objc_msgSend(v7, "userInterfaceIdiom");

          if (v8 == 3)
          {
            v2 = 1;
            goto LABEL_12;
          }
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

uint64_t _UITouchesContainsTouchFromExternalTouchpad(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v13 != v3)
          objc_enumerationMutation(v1);
        v5 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v5, "type", (_QWORD)v12) == 1)
        {
          objc_msgSend(v5, "view");
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "traitCollection");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v7, "userInterfaceIdiom") == 3)
          {

LABEL_13:
            v2 = 1;
            goto LABEL_14;
          }
          objc_msgSend(v5, "view");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "traitCollection");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_msgSend(v9, "userInterfaceIdiom");

          if (v10 == 2)
            goto LABEL_13;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_14:

  return v2;
}

void ___getStateMachineSpec_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  int v27;
  _QWORD v28[4];
  id v29;
  _QWORD v30[4];
  id v31;
  _QWORD aBlock[4];
  char v33;

  xmmword_1ECD7FA60 = xmmword_186682A80;
  qword_1ECD7FA70 = 9;
  unk_1ECD7FA78 = &_UIHIDInputEventString_block_invoke_debugging;
  v0 = (void *)qword_1ECD7FA90;
  qword_1ECD7FA90 = (uint64_t)&__block_literal_global_132;

  v1 = (void *)qword_1ECD7FB88;
  qword_1ECD7FB88 = (uint64_t)&__block_literal_global_133_1;

  v2 = (void *)qword_1ECD7FBB8;
  qword_1ECD7FBB8 = (uint64_t)&__block_literal_global_138_0;

  v3 = (void *)qword_1ECD7FC98;
  qword_1ECD7FC98 = (uint64_t)&__block_literal_global_140_1;

  v4 = (void *)qword_1ECD7FD78;
  qword_1ECD7FD78 = (uint64_t)&__block_literal_global_141_0;

  v5 = (void *)qword_1ECD7FD48;
  qword_1ECD7FD48 = (uint64_t)&__block_literal_global_142_1;

  v6 = (void *)qword_1ECD7FD60;
  qword_1ECD7FD60 = (uint64_t)&__block_literal_global_143;

  v7 = (void *)qword_1ECD7FC68;
  qword_1ECD7FC68 = (uint64_t)&__block_literal_global_144_0;

  v8 = (void *)qword_1ECD7FC80;
  qword_1ECD7FC80 = (uint64_t)&__block_literal_global_145_0;

  v9 = (void *)qword_1ECD7FCB0;
  qword_1ECD7FCB0 = (uint64_t)&__block_literal_global_146_1;

  v10 = (void *)qword_1ECD7FBD0;
  qword_1ECD7FBD0 = (uint64_t)&__block_literal_global_151;

  v11 = (void *)qword_1ECD7FD90;
  qword_1ECD7FD90 = (uint64_t)&__block_literal_global_153_0;

  v12 = (void *)qword_1ECD7FCE0;
  qword_1ECD7FCE0 = (uint64_t)&__block_literal_global_155_1;

  v13 = (void *)qword_1ECD7FC00;
  qword_1ECD7FC00 = (uint64_t)&__block_literal_global_157_1;

  v14 = (void *)qword_1ECD7FCF8;
  qword_1ECD7FCF8 = (uint64_t)&__block_literal_global_159_1;

  v15 = (void *)qword_1ECD7FC18;
  qword_1ECD7FC18 = (uint64_t)&__block_literal_global_161_1;

  if (objc_msgSend((id)UIApp, "_supportsIndirectInputEvents"))
  {
    if (_UIInternalPreferencesRevisionOnce != -1)
      dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
    v16 = _UIInternalPreferencesRevisionVar;
    if (_UIInternalPreferencesRevisionVar >= 1)
    {
      v27 = _UIInternalPreference_ShouldIncludeTranslationHIDEvent;
      if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_ShouldIncludeTranslationHIDEvent)
      {
        do
        {
          if (v16 < v27)
            break;
          _UIInternalPreferenceSync(v16, &_UIInternalPreference_ShouldIncludeTranslationHIDEvent, (uint64_t)CFSTR("ShouldIncludeTranslationHIDEvent"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
          v27 = _UIInternalPreference_ShouldIncludeTranslationHIDEvent;
        }
        while (v16 != _UIInternalPreference_ShouldIncludeTranslationHIDEvent);
      }
    }
    v17 = (void *)qword_1ECD7FCC8;
    qword_1ECD7FCC8 = (uint64_t)&__block_literal_global_163_1;

    v18 = (void *)qword_1ECD7FBE8;
    qword_1ECD7FBE8 = (uint64_t)&__block_literal_global_165_1;

    v19 = (void *)qword_1ECD7FDA8;
    qword_1ECD7FDA8 = (uint64_t)&__block_literal_global_166_0;

  }
  else
  {
    v20 = MEMORY[0x1E0C809B0];
    qword_1ECD7FA48 = 0x4041AD7BC01366B8;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___getStateMachineSpec_block_invoke_10;
    aBlock[3] = &__block_descriptor_33_e42_____IOHIDEvent__16__0___UIHIDTransformer_8l;
    v33 = 0;
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = ___getStateMachineSpec_block_invoke_2_178;
    v30[3] = &unk_1E16DF420;
    v21 = _Block_copy(aBlock);
    v31 = v21;
    v22 = _Block_copy(v30);
    v23 = (void *)qword_1ECD7FD10;
    qword_1ECD7FD10 = (uint64_t)v22;

    v28[0] = v20;
    v28[1] = 3221225472;
    v28[2] = ___getStateMachineSpec_block_invoke_180;
    v28[3] = &unk_1E16DF420;
    v29 = v21;
    v24 = v21;
    v25 = _Block_copy(v28);
    v26 = (void *)qword_1ECD7FED0;
    qword_1ECD7FED0 = (uint64_t)v25;

  }
}

uint64_t ___getStateMachineSpec_block_invoke_130(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  if (a2)
    v4 = a2[5];
  else
    v4 = 0;
  objc_msgSend(a2, "addOutputHIDEvent:", v4);
  return a3;
}

uint64_t ___getStateMachineSpec_block_invoke_2(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = a2;
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
    v5 = v2[5];
  else
    v5 = 0;
  objc_msgSend(v3, "updateWithHIDEvent:", v5);

  v6 = (void *)objc_opt_new();
  objc_msgSend(v6, "setOverridePathId:", &unk_1E1A9A020);
  if (v2)
    v7 = v2[5];
  else
    v7 = 0;
  objc_msgSend(v6, "updateWithHIDEvent:", v7);
  objc_msgSend(v6, "setDeliveryPhase:", 1);
  -[_UIHIDTransformer pathCollection](v2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addPath:", v6);

  -[_UIHIDTransformer pathCollection](v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "hidEventFromCurrentState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v10);

  return 2;
}

uint64_t ___getStateMachineSpec_block_invoke_137(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = a2;
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
    v5 = v2[5];
  else
    v5 = 0;
  objc_msgSend(v3, "updateWithHIDEvent:", v5);

  v6 = (void *)objc_opt_new();
  objc_msgSend(v6, "setOverridePathId:", &unk_1E1A9A020);
  if (v2)
    v7 = v2[5];
  else
    v7 = 0;
  objc_msgSend(v6, "updateWithHIDEvent:", v7);
  -[_UIHIDTransformer pathCollection](v2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addPath:", v6);

  objc_msgSend(v6, "setDeliveryPhase:", 1);
  -[_UIHIDTransformer pathCollection](v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "hidEventFromCurrentState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v10);

  objc_msgSend(v6, "setDeliveryPhase:", 4);
  -[_UIHIDTransformer pathCollection](v2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hidEventFromCurrentState");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v12);

  return 3;
}

uint64_t ___getStateMachineSpec_block_invoke_2_139(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = a2;
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
    v5 = v2[5];
  else
    v5 = 0;
  objc_msgSend(v3, "updateWithHIDEvent:", v5);

  -[_UIHIDTransformer pathCollection](v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "pathWithId:", &unk_1E1A9A020);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    v8 = v2[5];
  else
    v8 = 0;
  objc_msgSend(v7, "updateWithHIDEvent:", v8);
  objc_msgSend(v7, "setDeliveryPhase:", 4);
  -[_UIHIDTransformer pathCollection](v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "hidEventFromCurrentState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v10);

  return 3;
}

uint64_t ___getStateMachineSpec_block_invoke_3(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = a2;
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
    v5 = v2[5];
  else
    v5 = 0;
  objc_msgSend(v3, "updateWithHIDEvent:", v5);

  -[_UIHIDTransformer pathCollection](v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "pathWithId:", &unk_1E1A9A020);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    v8 = v2[5];
  else
    v8 = 0;
  objc_msgSend(v7, "updateWithHIDEvent:", v8);
  objc_msgSend(v7, "setDeliveryPhase:", 5);
  -[_UIHIDTransformer pathCollection](v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "hidEventFromCurrentState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v10);

  return 3;
}

uint64_t ___getStateMachineSpec_block_invoke_4(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = a2;
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
    v5 = v2[5];
  else
    v5 = 0;
  objc_msgSend(v3, "updateWithHIDEvent:", v5);

  -[_UIHIDTransformer pathCollection](v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "pathWithId:", &unk_1E1A9A020);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    objc_msgSend(v7, "updateWithHIDEvent:", v2[5]);
  else
    objc_msgSend(v7, "updateWithHIDEvent:", 0);
  if ((IOHIDEventGetPhase() & 8) != 0)
    v8 = 7;
  else
    v8 = 6;
  objc_msgSend(v7, "setDeliveryPhase:", v8);
  -[_UIHIDTransformer pathCollection](v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "hidEventFromCurrentState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v10);

  return 2;
}

uint64_t ___getStateMachineSpec_block_invoke_5(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = a2;
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
    v5 = v2[5];
  else
    v5 = 0;
  objc_msgSend(v3, "updateWithHIDEvent:", v5);

  -[_UIHIDTransformer pathCollection](v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "pathWithId:", &unk_1E1A9A020);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    objc_msgSend(v7, "updateWithHIDEvent:", v2[5]);
  else
    objc_msgSend(v7, "updateWithHIDEvent:", 0);
  if ((IOHIDEventGetPhase() & 8) != 0)
    v8 = 7;
  else
    v8 = 6;
  objc_msgSend(v7, "setDeliveryPhase:", v8);
  -[_UIHIDTransformer pathCollection](v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "hidEventFromCurrentState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v10);

  objc_msgSend(v7, "setDeliveryPhase:", 3);
  -[_UIHIDTransformer pathCollection](v2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hidEventFromCurrentState");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v12);

  -[_UIHIDTransformer pathCollection](v2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "removePath:", v7);

  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_6(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = a2;
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
    v5 = v2[5];
  else
    v5 = 0;
  objc_msgSend(v3, "updateWithHIDEvent:", v5);

  -[_UIHIDTransformer pathCollection](v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "pathWithId:", &unk_1E1A9A020);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    v8 = v2[5];
  else
    v8 = 0;
  objc_msgSend(v7, "updateWithHIDEvent:", v8);
  objc_msgSend(v7, "setDeliveryPhase:", 2);
  -[_UIHIDTransformer pathCollection](v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "hidEventFromCurrentState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v10);

  return 2;
}

uint64_t ___getStateMachineSpec_block_invoke_7(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = a2;
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
    v5 = v2[5];
  else
    v5 = 0;
  objc_msgSend(v3, "updateWithHIDEvent:", v5);

  -[_UIHIDTransformer pathCollection](v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "pathWithId:", &unk_1E1A9A020);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    v8 = v2[5];
  else
    v8 = 0;
  objc_msgSend(v7, "updateWithHIDEvent:", v8);
  objc_msgSend(v7, "setDeliveryPhase:", 3);
  -[_UIHIDTransformer pathCollection](v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "hidEventFromCurrentState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v10);

  -[_UIHIDTransformer pathCollection](v2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "removePath:", v7);

  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_8(uint64_t a1, void *a2)
{
  addOutputEventOfType(a2, 6, &unk_1E1A947F0);
  return 2;
}

void addOutputEventOfType(void *a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _QWORD *v10;

  v10 = a1;
  v5 = a3;
  if (a2 == 17)
  {
    if (v10)
      v6 = v10[5];
    else
      v6 = 0;
    objc_msgSend(v10, "addOutputHIDEvent:", v6);
  }
  else
  {
    if (v10)
      v7 = v10[5];
    else
      v7 = 0;
    v8 = _UIHIDCopyEventPromotingChildOfType(a2, v7, v5);
    if (v8)
    {
      v9 = (const void *)v8;
      objc_msgSend(v10, "addOutputHIDEvent:", v8);
      CFRelease(v9);
    }
  }

}

uint64_t ___getStateMachineSpec_block_invoke_150(uint64_t a1, void *a2)
{
  addOutputEventOfType(a2, 6, MEMORY[0x1E0C9AA60]);
  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_2_152(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = a2;
  addOutputEventOfType(v2, 6, MEMORY[0x1E0C9AA60]);
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pathWithId:", &unk_1E1A9A020);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "deliveryPhase") == 5)
  {
    -[_UIHIDTransformer pathCollection](v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hidEventFromCurrentState");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addOutputHIDEvent:", v6);

  }
  return 3;
}

uint64_t ___getStateMachineSpec_block_invoke_3_154(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v2 = a2;
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pathWithId:", &unk_1E1A9A020);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setDeliveryPhase:", 7);
  -[_UIHIDTransformer pathCollection](v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hidEventFromCurrentState");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v6);

  -[_UIHIDTransformer pathCollection](v2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removePath:", v4);

  if (v2)
    v8 = v2[5];
  else
    v8 = 0;
  objc_msgSend(v2, "addOutputHIDEvent:", v8);

  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_4_156(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (a2)
    v2 = a2[5];
  else
    v2 = 0;
  objc_msgSend(a2, "addOutputHIDEvent:", v2);
  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_5_158(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v2 = a2;
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pathWithId:", &unk_1E1A9A020);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setDeliveryPhase:", 7);
  -[_UIHIDTransformer pathCollection](v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hidEventFromCurrentState");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOutputHIDEvent:", v6);

  -[_UIHIDTransformer pathCollection](v2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removePath:", v4);

  if (v2)
    v8 = v2[5];
  else
    v8 = 0;
  objc_msgSend(v2, "addOutputHIDEvent:", v8);

  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_6_160(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (a2)
    v2 = a2[5];
  else
    v2 = 0;
  objc_msgSend(a2, "addOutputHIDEvent:", v2);
  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_7_162(uint64_t a1, void *a2)
{
  addOutputEventOfType(a2, 17, MEMORY[0x1E0C9AA60]);
  return 2;
}

uint64_t ___getStateMachineSpec_block_invoke_8_164(uint64_t a1, void *a2)
{
  addOutputEventOfType(a2, 17, MEMORY[0x1E0C9AA60]);
  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_9(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = a2;
  addOutputEventOfType(v2, 17, MEMORY[0x1E0C9AA60]);
  -[_UIHIDTransformer pathCollection](v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pathWithId:", &unk_1E1A9A020);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "deliveryPhase") == 5)
  {
    -[_UIHIDTransformer pathCollection](v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hidEventFromCurrentState");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addOutputHIDEvent:", v6);

  }
  return 3;
}

CFTypeRef ___getStateMachineSpec_block_invoke_10(uint64_t a1, void *a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  CFTypeRef v6;
  id v7;
  const void *Copy;
  const void *ScaleEvent;
  const void *v10;
  CFTypeRef v11;
  void *v13;
  void *v14;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)(a1 + 32))
    v5 = &unk_1E1A94808;
  else
    v5 = &unk_1E1A94820;
  if (v3)
    v6 = (CFTypeRef)v3[5];
  else
    v6 = 0;
  -[_UIHIDTransformer scaleEventTracker](v3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___UIHIDCreateScaleEventAndAppendIfNeeded_block_invoke;
  v15[3] = &unk_1E16B1D90;
  v15[4] = &v16;
  _UIEventHIDEnumerateChildren((uint64_t)v6, 7, v15);
  if (!v17[3])
  {
    Copy = (const void *)IOHIDEventCreateCopy();
    IOHIDEventGetTimeStamp();
    IOHIDEventGetSenderID();
    objc_msgSend(v7, "scaleZ");
    objc_msgSend(v7, "compositePhase");
    ScaleEvent = (const void *)IOHIDEventCreateScaleEvent();
    IOHIDEventSetSenderID();
    IOHIDEventSetPhase();
    IOHIDEventAppendEvent();
    CFRelease(ScaleEvent);
    v6 = CFAutorelease(Copy);
  }
  _Block_object_dispose(&v16, 8);

  v10 = (const void *)_UIHIDCopyEventPromotingChildOfType(7, (uint64_t)v6, v5);
  if (!v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIStateMachineSpecPtr _getStateMachineSpec(void)_block_invoke");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("_UIHIDTransformer.m"), 730, CFSTR("Unexpected nil outputEvent attempting to create event of type: %lu"), 7);

  }
  v11 = CFAutorelease(v10);

  return v11;
}

void sub_1860C71A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIHIDCopyEventPromotingChildOfType(int a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t Copy;
  const void *v7;
  const __CFArray *Children;
  const __CFArray *v9;
  unsigned __int8 Count;
  uint64_t v11;
  void *v12;
  int v13;
  const void *v14;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = a3;
  if (a2)
  {
    IOHIDEventGetType();
    v17 = 0;
    v18 = &v17;
    v19 = 0x2020000000;
    v20 = 0;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = ___UIHIDCopyEventPromotingChildOfType_block_invoke;
    v16[3] = &unk_1E16B1D90;
    v16[4] = &v17;
    _UIEventHIDEnumerateChildren(a2, a1, v16);
    if (v18[3])
    {
      Copy = IOHIDEventCreateCopy();
      if (IOHIDEventGetAttributeDataLength() >= 1)
      {
        IOHIDEventGetAttributeDataPtr();
        IOHIDEventSetAttributeData();
      }
      v7 = (const void *)IOHIDEventCreateCopy();
      Children = (const __CFArray *)IOHIDEventGetChildren();
      v9 = Children;
      if (Children)
        Count = CFArrayGetCount(Children);
      else
        Count = 0;
      v11 = Count;
      while (v11 > 0)
      {
        CFArrayGetValueAtIndex(v9, --v11);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", IOHIDEventGetType());
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v5, "containsObject:", v12);

        if (v13)
        {
          v14 = (const void *)IOHIDEventCreateCopy();
          IOHIDEventAppendEvent();
          CFRelease(v14);
        }
        IOHIDEventRemoveEvent();
      }
      IOHIDEventAppendEvent();
      CFRelease(v7);
    }
    else
    {
      Copy = 0;
    }
    _Block_object_dispose(&v17, 8);
  }
  else
  {
    Copy = 0;
  }

  return Copy;
}

void sub_1860C73C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___getStateMachineSpec_block_invoke_2_178(uint64_t a1, void *a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  CGAffineTransform v24;
  CGAffineTransform v25;
  uint8_t buf[4];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  -[_UIHIDTransformer scaleEventTracker](v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v3)
    v6 = v3[5];
  else
    v6 = 0;
  objc_msgSend(v4, "updateWithHIDEvent:", v6);

  -[_UIHIDTransformer scaleEventTracker](v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "compositePhase");

  if (v8)
  {
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    -[_UIHIDTransformer pathCollection](v3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "updateWithHIDEvent:", v9);

    -[_UIHIDTransformer pathCollection](v3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "pathWithId:", &unk_1E1A9A020);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "setOverridePathId:", &unk_1E1A9A020);
    objc_msgSend(v12, "updateWithHIDEvent:", v9);
    CGAffineTransformMakeTranslation(&v25, -*(double *)&qword_1ECD7FA48, *(CGFloat *)&qword_1ECD7FA48);
    objc_msgSend(v12, "applyTransform:", &v25);
    v13 = (void *)objc_opt_new();
    objc_msgSend(v13, "setOverridePathId:", &unk_1E1A9A080);
    objc_msgSend(v13, "updateWithHIDEvent:", v9);
    CGAffineTransformMakeTranslation(&v24, *(CGFloat *)&qword_1ECD7FA48, -*(double *)&qword_1ECD7FA48);
    objc_msgSend(v13, "applyTransform:", &v24);
    objc_msgSend(v12, "setDeliveryPhase:", 4);
    objc_msgSend(v13, "setDeliveryPhase:", 4);
    -[_UIHIDTransformer pathCollection](v3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addPath:", v13);

    -[_UIHIDTransformer pathCollection](v3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "hidEventFromCurrentState");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addOutputHIDEvent:", v16);

    if (v3)
    {
      v17 = MEMORY[0x1E0C9BAA8];
      v18 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *((_OWORD *)v3 + 4) = *MEMORY[0x1E0C9BAA8];
      *((_OWORD *)v3 + 5) = v18;
      *((_OWORD *)v3 + 6) = *(_OWORD *)(v17 + 32);
    }

    v19 = 4;
  }
  else
  {
    v20 = qword_1ECD7FA58;
    if (!qword_1ECD7FA58)
    {
      v20 = __UILogCategoryGetNode("HIDTransformer", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v20, (unint64_t *)&qword_1ECD7FA58);
    }
    v21 = *(NSObject **)(v20 + 8);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      if (v3)
        v22 = v3[5];
      else
        v22 = 0;
      *(_DWORD *)buf = 138412290;
      v27 = v22;
      _os_log_impl(&dword_185066000, v21, OS_LOG_TYPE_DEFAULT, "HIDTransformer is attempting to process a transform event (scale, rotate, translate) with an improper phase transition, this is likely a FW issue. %@", buf, 0xCu);
    }
    v19 = 2;
  }

  return v19;
}

uint64_t ___getStateMachineSpec_block_invoke_180(uint64_t a1, void *a2)
{
  CGFloat *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  CGFloat v10;
  CGFloat v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t VendorDefinedEvent;
  const void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  CGAffineTransform v29;
  CGAffineTransform v30;
  CGAffineTransform v31;
  CGAffineTransform v32;
  CGAffineTransform v33;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGAffineTransform v36;
  CGAffineTransform v37;
  CGAffineTransform v38;
  CGAffineTransform v39;
  CGAffineTransform v40;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v43;
  CGAffineTransform v44;
  __int128 v45;
  __int128 v46;

  v3 = a2;
  -[_UIHIDTransformer scaleEventTracker](v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v3)
    v6 = *((_QWORD *)v3 + 5);
  else
    v6 = 0;
  objc_msgSend(v4, "updateWithHIDEvent:", v6);

  v7 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  -[_UIHIDTransformer pathCollection](v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "updateWithHIDEvent:", v7);

  if (v3)
  {
    v9 = *((_OWORD *)v3 + 5);
    v45 = *((_OWORD *)v3 + 4);
    v46 = v9;
    v11 = v3[12];
    v10 = v3[13];
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
    v10 = 0.0;
    v11 = 0.0;
  }
  memset(&v44, 0, sizeof(v44));
  CGAffineTransformMakeTranslation(&v44, v11, v10);
  memset(&v43, 0, sizeof(v43));
  t1 = v44;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v45;
  *(_OWORD *)&t1.c = v46;
  t1.tx = v11;
  t1.ty = v10;
  CGAffineTransformConcat(&v43, &t1, &t2);
  memset(&t1, 0, sizeof(t1));
  _UIEventGetAffineTransformForScaleEvent(v7, (uint64_t)&t1);
  memset(&v40, 0, sizeof(v40));
  CGAffineTransformMakeTranslation(&v40, t1.tx, t1.ty);
  memset(&v39, 0, sizeof(v39));
  v37 = v40;
  CGAffineTransformInvert(&v38, &v37);
  v37 = t1;
  CGAffineTransformConcat(&v39, &v37, &v38);
  v36 = v43;
  memset(&v37, 0, sizeof(v37));
  v35 = v39;
  CGAffineTransformConcat(&v37, &v36, &v35);
  v35 = v44;
  memset(&v36, 0, sizeof(v36));
  v34 = v40;
  CGAffineTransformConcat(&v36, &v35, &v34);
  v35 = v37;
  v34 = v36;
  CGAffineTransformConcat(&v33, &v35, &v34);
  if (v3)
  {
    v12 = *(_OWORD *)&v33.a;
    v13 = *(_OWORD *)&v33.c;
    *((_OWORD *)v3 + 4) = *(_OWORD *)&v33.a;
    *((_OWORD *)v3 + 5) = v13;
    v14 = *(_OWORD *)&v33.tx;
    *((_OWORD *)v3 + 6) = *(_OWORD *)&v33.tx;
    memset(&v35, 0, sizeof(v35));
    *(_OWORD *)&v32.a = v12;
    *(_OWORD *)&v32.c = v13;
    *(_OWORD *)&v32.tx = v14;
  }
  else
  {
    memset(&v35, 0, sizeof(v35));
    memset(&v32, 0, sizeof(v32));
  }
  v34 = v36;
  CGAffineTransformInvert(&v31, &v34);
  CGAffineTransformConcat(&v35, &v32, &v31);
  mach_absolute_time();
  v34 = v44;
  VendorDefinedEvent = IOHIDEventCreateVendorDefinedEvent();
  if (VendorDefinedEvent)
  {
    v16 = (const void *)VendorDefinedEvent;
    IOHIDEventAppendEvent();
    CFRelease(v16);
  }
  -[_UIHIDTransformer pathCollection](v3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "pathWithId:", &unk_1E1A9A020);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v18, "updateWithHIDEvent:", v7);
  CGAffineTransformMakeTranslation(&v30, v35.tx + *(double *)&qword_1ECD7FA48 * v35.c - *(double *)&qword_1ECD7FA48 * v35.a, v35.ty + *(double *)&qword_1ECD7FA48 * v35.d - *(double *)&qword_1ECD7FA48 * v35.b);
  objc_msgSend(v18, "applyTransform:", &v30);
  -[_UIHIDTransformer pathCollection](v3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "pathWithId:", &unk_1E1A9A080);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v20, "updateWithHIDEvent:", v7);
  CGAffineTransformMakeTranslation(&v29, v35.tx + *(double *)&qword_1ECD7FA48 * v35.a - *(double *)&qword_1ECD7FA48 * v35.c, v35.ty + *(double *)&qword_1ECD7FA48 * v35.b - *(double *)&qword_1ECD7FA48 * v35.d);
  objc_msgSend(v20, "applyTransform:", &v29);
  v21 = IOHIDEventGetPhase() & 0xC;
  if (v21)
    v22 = 6;
  else
    v22 = 5;
  objc_msgSend(v18, "setDeliveryPhase:", v22);
  objc_msgSend(v20, "setDeliveryPhase:", v22);
  -[_UIHIDTransformer pathCollection](v3);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "hidEventFromCurrentState");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[CGFloat addOutputHIDEvent:](v3, "addOutputHIDEvent:", v24);

  if (v21)
  {
    -[_UIHIDTransformer pathCollection](v3);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "removePath:", v20);

    -[_UIHIDTransformer scaleEventTracker](v3);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "reset");

    v27 = 2;
  }
  else
  {
    v27 = 4;
  }

  return v27;
}

void sub_1860C7C74(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id _UIDragEventPasteConfigurationForOwner(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id *v4;
  void *v5;
  void *v6;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v1, "_effectivePasteConfiguration");
  else
    objc_msgSend(v1, "pasteConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = v1;
  }
  else if (objc_msgSend(v1, "__isKindOfUIView"))
  {
    v4 = (id *)v1;
    -[UIView __viewDelegate](v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v5, "_effectivePasteConfiguration");
    else
      objc_msgSend(v5, "pasteConfiguration");
    v3 = (id)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      -[UIView __viewDelegate](v4);
      v3 = (id)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v3 = 0;
  }

  objc_msgSend(v3, "pasteConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t _UIDragEventCanPasteItemProvidersForOwner(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id *v7;
  void *v8;
  uint64_t v9;

  v3 = a2;
  v4 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "_effectivePasteConfiguration");
  else
    objc_msgSend(v3, "pasteConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = v3;
  }
  else if (objc_msgSend(v3, "__isKindOfUIView"))
  {
    v7 = (id *)v3;
    -[UIView __viewDelegate](v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v8, "_effectivePasteConfiguration");
    else
      objc_msgSend(v8, "pasteConfiguration");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[UIView __viewDelegate](v7);
      v6 = (id)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v6 = 0;
  }

  v9 = objc_msgSend(v6, "canPasteItemProviders:", v4);
  return v9;
}

void _UIDragEventPasteItemProvidersForOwner(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id *v6;
  void *v7;
  id v8;

  v8 = a2;
  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v8, "_effectivePasteConfiguration");
  else
    objc_msgSend(v8, "pasteConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = v8;
  }
  else if (objc_msgSend(v8, "__isKindOfUIView"))
  {
    v6 = (id *)v8;
    -[UIView __viewDelegate](v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v7, "_effectivePasteConfiguration");
    else
      objc_msgSend(v7, "pasteConfiguration");
    v5 = (id)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      -[UIView __viewDelegate](v6);
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v5 = 0;
  }

  objc_msgSend(v5, "pasteItemProviders:", v3);
}

void sub_1860C8D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

BOOL _UIEventHIDIsDragEventLocusType(uint64_t a1, int a2)
{
  const __CFArray *Children;
  const __CFArray *v4;
  void *v5;
  uint64_t IntegerValue;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  id v13;
  _BOOL8 v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  Children = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children)
    return 0;
  v4 = Children;
  if (CFArrayGetCount(Children) < 1)
    return 0;
  CFArrayGetValueAtIndex(v4, 0);
  BKSHIDEventGetDigitizerAttributes();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  IntegerValue = IOHIDEventGetIntegerValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  objc_msgSend(v5, "pathAttributes", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        if (objc_msgSend(v12, "pathIndex") == IntegerValue)
        {
          v13 = v12;
          goto LABEL_14;
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v9)
        continue;
      break;
    }
  }
  v13 = 0;
LABEL_14:

  v14 = objc_msgSend(v13, "locus") == a2;
  return v14;
}

void sub_1860C9BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _StatusBar_UITimeSizeForLabel(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  double v7;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v4, "bounds");
  v7 = _UIComputedSizeForLabel(v4, v3, 0, 1uLL, 0, 0, 0, v5, v6);

  return v7;
}

void _StatusBar_UIGetDurationOfSpringAnimation(double a1, double a2, double a3, double a4)
{
  objc_opt_self();
  _durationOfSpringAnimation(a1, a2, a3, a4);
}

UIEventButtonMask UIEventButtonMaskForButtonNumber(NSInteger buttonNumber)
{
  char v1;
  UIEventButtonMask v2;

  if (buttonNumber <= 1)
    v1 = 1;
  else
    v1 = buttonNumber;
  v2 = 1 << (v1 - 1);
  if ((unint64_t)buttonNumber >= 0x3F)
    return 0;
  else
    return v2;
}

id _UINonComponentEventHitTestGestureRecognizers(void *a1, void *a2, uint64_t a3, double a4, double a5)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[6];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = ___UINonComponentEventHitTestGestureRecognizers_block_invoke;
  v24[3] = &__block_descriptor_48_e32__CAPoint3D_ddd_16__0__UIWindow_8l;
  *(double *)&v24[4] = a4;
  *(double *)&v24[5] = a5;
  _UIHitTestGestureContainer((uint64_t)v9, a2, a3, 1, (uint64_t)v24, 1.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_opt_new();
  if (v10)
  {
    do
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      objc_msgSend(v10, "gestureRecognizers", 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v21;
        do
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v21 != v15)
              objc_enumerationMutation(v12);
            v17 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
            if (objc_msgSend(v17, "isEnabled")
              && objc_msgSend(v17, "state") <= 2
              && objc_msgSend(v17, "_shouldReceiveEvent:", v9)
              && -[UIGestureRecognizer _delegateShouldReceiveEvent:]((uint64_t)v17, (uint64_t)v9))
            {
              objc_msgSend(v11, "addObject:", v17);
            }
          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
        }
        while (v14);
      }

      objc_msgSend(v10, "_parentGestureRecognizerContainer");
      v18 = objc_claimAutoreleasedReturnValue();

      v10 = (void *)v18;
    }
    while (v18);
  }

  return v11;
}

id perfLog()
{
  if (perfLog_onceToken != -1)
    dispatch_once(&perfLog_onceToken, &__block_literal_global_461);
  return (id)perfLog_log;
}

void __perfLog_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.avatar.AvatarUI", "perf");
  v1 = (void *)perfLog_log;
  perfLog_log = (uint64_t)v0;

}

void __eventQueueSourceCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  _UIApplicationDrainManagedAutoreleasePool();
  v2 = _UIMachTimeForMediaTime(*(double *)(a1 + 72));
  v3 = _UIMachTimeForMediaTime(*(double *)(a1 + 80));
  _UIQOSProcessingBegin("HIDQueue", 0, v2, v3);
  __processEventQueue(a1, 4);
  _UIQOSProcessingEnd();
}

void sub_1860CF800(_Unwind_Exception *a1)
{
  _UIQOSProcessingEnd();
  _Unwind_Resume(a1);
}

void *__dispatchDragEvent(void *a1, _QWORD *a2, uint64_t a3)
{
  void *result;
  _QWORD v7[6];

  result = (void *)objc_msgSend(a1, "_isReadyForReset");
  if ((_DWORD)result)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ____dispatchDragEvent_block_invoke;
    v7[3] = &__block_descriptor_48_e5_v8__0lu32l8u40l8;
    v7[4] = a3;
    v7[5] = a1;
    result = _Block_copy(v7);
    *a2 = result;
  }
  return result;
}

void ____dispatchDragEvent_block_invoke(uint64_t a1)
{
  -[UIEventEnvironment _removeDragEvent:](*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  UITouch *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t IntegerValue;
  BOOL v14;
  char v15;
  double v16;
  void *v17;
  uint64_t v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  double maxObservedPressure;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  double v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  id v45;
  __int128 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  unint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  unint64_t v70;
  double v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  char v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  int v84;
  int v85;
  double v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL8 v92;
  NSObject *v93;
  NSObject *v94;
  NSObject *v95;
  _BOOL4 v96;
  NSObject *v97;
  uint64_t v98;
  NSObject *v99;
  NSObject *v100;
  NSObject *v101;
  void *v102;
  NSObject *v103;
  NSObject *v104;
  void *v105;
  NSObject *v106;
  NSObject *v107;
  void *v108;
  NSObject *v109;
  NSObject *v110;
  NSObject *v111;
  unsigned int v112;
  void *v113;
  double v114;
  double v115;
  CGFloat v116;
  double v117;
  double v118;
  CGFloat v119;
  double v120;
  double v121;
  double v122;
  double v123;
  _BOOL4 v124;
  os_log_t log;
  os_log_t loga;
  NSObject *logb;
  _QWORD aBlock[6];
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _BYTE v134[32];
  __int128 v135;
  uint64_t v136;
  uint8_t buf[32];
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  CGPoint v141;

  v140 = *MEMORY[0x1E0C80C00];
  v6 = (const void *)_UIEventHIDPathIndexForDigitizerEvent();
  v7 = qword_1ECD7FF10;
  if (!qword_1ECD7FF10)
  {
    v7 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v7, (unint64_t *)&qword_1ECD7FF10);
  }
  if ((*(_BYTE *)v7 & 1) != 0)
  {
    v93 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a3;
      _os_log_impl(&dword_185066000, v93, OS_LOG_TYPE_ERROR, "\tProcessing digitizer child %ld info at child index: %ld", buf, 0x16u);
    }
  }
  CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), v6);
  v8 = objc_claimAutoreleasedReturnValue();
  -[UIEventEnvironment _setCurrentTouch:forWindow:](*(_QWORD *)(a1 + 80), v8, *(void **)(a1 + 32));
  v9 = *(void **)(a1 + 88);
  if (v9)
  {
    objc_msgSend(v9, "hoverTouchForContextId:pathIndex:", *(unsigned int *)(a1 + 120), v6);
    v10 = (UITouch *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = 0;
  }
  v11 = qword_1ECD7FF18;
  if (!qword_1ECD7FF18)
  {
    v11 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v11, (unint64_t *)&qword_1ECD7FF18);
  }
  if ((*(_BYTE *)v11 & 1) != 0)
  {
    v94 = *(NSObject **)(v11 + 8);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
    {
      v95 = v94;
      v96 = IOHIDEventGetIntegerValue() != 0;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v96;
      _os_log_impl(&dword_185066000, v95, OS_LOG_TYPE_ERROR, "\tChild event is touching: %d", buf, 8u);

    }
  }
  if (!IOHIDEventGetIntegerValue())
  {
    if (!*(_QWORD *)(a1 + 88))
      goto LABEL_34;
    IntegerValue = IOHIDEventGetIntegerValue();
    if (v8)
      v14 = 1;
    else
      v14 = v10 == 0;
    v15 = v14;
    if (!IntegerValue)
    {
      if ((v15 & 1) == 0)
        _UITouchSetBasicTouchPropertiesFromEvent(v10, *(void **)(a1 + 40), *(_QWORD *)(a1 + 64), a2);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_31;
      aBlock[3] = &__block_descriptor_52_e5_v8__0lu32l8;
      v28 = *(_QWORD *)(a1 + 88);
      v129 = *(_DWORD *)(a1 + 120);
      aBlock[4] = v28;
      aBlock[5] = v6;
      v29 = _Block_copy(aBlock);
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v31 = *(void **)(v30 + 40);
      *(_QWORD *)(v30 + 40) = v29;

      -[UITouch setPhase:](v10, "setPhase:", 7);
      if (v10)
        goto LABEL_33;
      goto LABEL_34;
    }
    if (v10)
    {
      _UIEventHIDGetDescendantPointerEvent(*(_QWORD *)(a1 + 64));
      if ((v15 & 1) == 0)
      {
        _UITouchSetBasicTouchPropertiesFromEvent(v10, *(void **)(a1 + 40), *(_QWORD *)(a1 + 64), a2);
        v16 = *(double *)(a1 + 96);
        v17 = *(void **)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 64);
        v139 = 0;
        v138 = 0u;
        memset(buf, 0, sizeof(buf));
        __baseTouchLocationsForChild((uint64_t)buf, a2, v18, v17, (uint64_t)v10, 0, 0);
        -[UIWindow _fbsScene]((id *)v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = _UIConvertScenePoint3DToWindow(v19, v17, *(double *)buf, *(double *)&buf[8]);
        v22 = v21;
        v23 = _UIConvertScenePoint3DToWindow(v19, v17, *(double *)&buf[16], *(double *)&buf[24]);
        v25 = v24;
        if (-[UITouch phase](v10, "phase") <= UITouchPhaseCancelled)
          -[UITouch _clearForReenteringHoverInWindow:](v10, "_clearForReenteringHoverInWindow:", v17);
        -[UITouch setPhase:](v10, "setPhase:", 6);
        v10->_movementMagnitudeSquared = (v20 - v10->_locationInWindow.x) * (v20 - v10->_locationInWindow.x)
                                       + (v22 - v10->_locationInWindow.y) * (v22 - v10->_locationInWindow.y);
        IOHIDEventGetFloatValue();
        maxObservedPressure = v10->_maxObservedPressure;
        if (maxObservedPressure < v26)
          maxObservedPressure = v26;
        v10->_previousPressure = v10->_pressure;
        v10->_pressure = v26;
        v10->_maxObservedPressure = maxObservedPressure;
        -[UITouch setTimestamp:](v10, "setTimestamp:", v16);
        v10->_previousLocationInWindow = v10->_locationInWindow;
        v10->_precisePreviousLocationInWindow = v10->_preciseLocationInWindow;
        v10->_locationInWindow.x = v20;
        v10->_locationInWindow.y = v22;
        v10->_preciseLocationInWindow.x = v23;
        v10->_preciseLocationInWindow.y = v25;

      }
LABEL_33:
      objc_msgSend(*(id *)(a1 + 88), "_addHasOutstandingUpdateTouch:", v10);
      goto LABEL_34;
    }
    v75 = objc_msgSend(*(id *)(a1 + 32), "isHidden");
    v76 = v75;
    v77 = v75 ^ 1;
    v78 = _UIEventHIDGetDescendantPointerEvent(*(_QWORD *)(a1 + 64));
    if ((v76 & 1) != 0 || !v78)
      goto LABEL_81;
    if ((_UIApplicationProcessIsPointerUI() & 1) == 0)
    {
      v79 = objc_msgSend(0, "phase");
      +[_UIPointerArbiter sharedArbiter](_UIPointerArbiter, "sharedArbiter");
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      v81 = objc_msgSend(v80, "pointerState");

      objc_msgSend(*(id *)(a1 + 32), "windowScene");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "pointerLockState");
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = objc_msgSend(v83, "isLocked");

      v77 = v81 != 0;
      v85 = v84 ^ 1;
      if (v81)
        v85 = 1;
      if (v79 != 7 && v85)
      {
LABEL_81:
        if (!v77)
        {
          v10 = 0;
          v12 = v8;
          if (!v8)
            goto LABEL_73;
          goto LABEL_35;
        }
      }
    }
    v86 = *(double *)(a1 + 96);
    v87 = *(void **)(a1 + 32);
    v88 = *(void **)(a1 + 40);
    v89 = *(_QWORD *)(a1 + 64);
    v10 = objc_alloc_init(UITouch);
    -[UITouch setTimestamp:](v10, "setTimestamp:", v86);
    -[UITouch setPhase:](v10, "setPhase:", 5);
    -[UITouch setWindow:](v10, "setWindow:", v87);
    -[UITouch _setWindowServerHitTestWindow:]((uint64_t)v10, v87);
    v90 = _UIEventHIDGetDescendantPointerEvent(v89);
    v91 = _UIEventHIDGetPointerEventSource(v90);
    if (v10)
    {
      v10->_pointerSource = v91;
      if (v90)
      {
LABEL_84:
        v92 = v91 != 4;
        goto LABEL_110;
      }
    }
    else if (v90)
    {
      v91 = 0;
      goto LABEL_84;
    }
    v92 = 0;
LABEL_110:
    -[UITouch _setIsPointerTouch:](v10, "_setIsPointerTouch:", v92);
    _UITouchSetBasicTouchPropertiesFromEvent(v10, v88, v89, a2);
    v139 = 0;
    v138 = 0u;
    memset(buf, 0, sizeof(buf));
    __baseTouchLocationsForChild((uint64_t)buf, a2, v89, v87, 0, 0, 0);
    -[UIWindow _fbsScene]((id *)v87);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    v114 = _UIConvertScenePoint3DToWindow(v113, v87, *(double *)buf, *(double *)&buf[8]);
    v116 = v115;
    v117 = _UIConvertScenePoint3DToWindow(v113, v87, *(double *)&buf[16], *(double *)&buf[24]);
    v119 = v118;
    _UIConvertScenePoint3DToWindow(v113, v87, *(double *)&v138, *((double *)&v138 + 1));
    if (v10)
    {
      v10->_previousLocationInWindow.x = v114;
      v10->_previousLocationInWindow.y = v116;
      v10->_precisePreviousLocationInWindow.x = v117;
      v10->_precisePreviousLocationInWindow.y = v119;
      v10->_locationInWindow.x = v114;
      v10->_locationInWindow.y = v116;
      v10->_preciseLocationInWindow.x = v117;
      v10->_preciseLocationInWindow.y = v119;
      IOHIDEventGetFloatValue();
      v121 = v10->_maxObservedPressure;
      if (v121 < v120)
        v121 = v120;
      v10->_previousPressure = v120;
      v10->_pressure = v120;
      v10->_maxObservedPressure = v121;
    }
    else
    {
      IOHIDEventGetFloatValue();
    }

    objc_msgSend(*(id *)(a1 + 88), "setHoverTouch:forContextId:pathIndex:", v10, *(unsigned int *)(a1 + 120), v6);
    if (v10)
      goto LABEL_33;
LABEL_34:
    v12 = v8;
    if (!v8)
      goto LABEL_73;
    goto LABEL_35;
  }
  v12 = v8;
  if (!v8)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    __startNewUITouch(v10, *(void **)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 104), *(_QWORD *)(a1 + 64), a2, (uint64_t)v6, *(const __CFDictionary **)(a1 + 72), *(double *)(a1 + 96), *(const __CFDictionary **)(a1 + 112), *(_QWORD *)(a1 + 80));
    v12 = objc_claimAutoreleasedReturnValue();
  }
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 112), v6, (const void *)v12);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v6);
  if (v8)
  {
LABEL_35:
    if (v12)
    {
      _UITouchSetBasicTouchPropertiesFromEvent((void *)v12, *(void **)(a1 + 40), *(_QWORD *)(a1 + 64), a2);
      v32 = *(double *)(a1 + 96);
      v33 = *(void **)(a1 + 32);
      v34 = *(_QWORD *)(a1 + 64);
      v35 = qword_1ECD80048;
      if (!qword_1ECD80048)
      {
        v35 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v35, (unint64_t *)&qword_1ECD80048);
      }
      if ((*(_BYTE *)v35 & 1) != 0)
      {
        v97 = *(NSObject **)(v35 + 8);
        if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v6;
          _os_log_impl(&dword_185066000, v97, OS_LOG_TYPE_ERROR, "\t\tUpdating existing touch instance for path index: %ld", buf, 0xCu);
        }
      }
      objc_msgSend((id)v12, "window");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v139 = 0;
      v138 = 0u;
      memset(buf, 0, sizeof(buf));
      v133 = 0;
      v131 = 0u;
      v132 = 0u;
      v130 = 0u;
      __baseTouchLocationsForChild((uint64_t)&v130, a2, v34, v33, v12, 0, (uint64_t)buf);
      *(_OWORD *)v134 = *(_OWORD *)buf;
      *(_OWORD *)&v134[16] = *(_OWORD *)&buf[16];
      v135 = v138;
      v136 = v139;
      _LogTouchLocationsIfNeeded((uint64_t)"rawChildTouchLocations", (CGFloat *)v134);
      *(_OWORD *)v134 = v130;
      *(_OWORD *)&v134[16] = v131;
      v135 = v132;
      v136 = v133;
      _LogTouchLocationsIfNeeded((uint64_t)"childTouchSceneLocations", (CGFloat *)v134);
      -[UIWindow _fbsScene]((id *)v33);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = _UIConvertScenePoint3DToWindow(v37, v36, *(double *)&v130, *((double *)&v130 + 1));
      v40 = v39;
      *(double *)&v130 = v38;
      *((double *)&v130 + 1) = v39;
      v133 = v41;
      v42 = _UIConvertScenePoint3DToWindow(v37, v36, *(double *)&v131, *((double *)&v131 + 1));
      v44 = v43;
      *(double *)&v131 = v42;
      *((double *)&v131 + 1) = v43;
      v45 = *(id *)(v12 + 88);

      if (v45)
      {
        *(double *)&log = v32;
        v46 = v132;
        objc_msgSend(v36, "warpPoint:", v38, v40);
        v48 = v47;
        v50 = v49;
        objc_msgSend(v36, "warpPoint:", v42, v44);
        v122 = v52;
        v123 = v51;
        objc_msgSend(v36, "warpPoint:", v46);
        v54 = v53;
        v56 = v55;
        v38 = __lockWarpedPointToViewEdge(v45, v38, v40, v48, v50);
        v40 = v57;
        v42 = __lockWarpedPointToViewEdge(v45, v42, v44, v123, v122);
        v44 = v58;
        *(double *)&v130 = v38;
        *((double *)&v130 + 1) = v40;
        *(double *)&v131 = v42;
        *((double *)&v131 + 1) = v58;
        *(_QWORD *)&v132 = v54;
        *((_QWORD *)&v132 + 1) = v56;
        v133 = 0;
        v59 = qword_1ECD80050;
        if (!qword_1ECD80050)
        {
          v59 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v59, (unint64_t *)&qword_1ECD80050);
        }
        v32 = *(double *)&log;
        if ((*(_BYTE *)v59 & 1) != 0)
        {
          v109 = *(NSObject **)(v59 + 8);
          if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v134 = 0;
            _os_log_impl(&dword_185066000, v109, OS_LOG_TYPE_ERROR, "\t\tWarping Point", v134, 2u);
          }
        }
      }
      *(_OWORD *)v134 = v130;
      *(_OWORD *)&v134[16] = v131;
      v135 = v132;
      v136 = v133;
      _LogTouchLocationsIfNeeded((uint64_t)"childTouchWindowLocations", (CGFloat *)v134);
      _UpdateTouchTapCount((_WORD *)v12, 1, v32, v38, v40);
      -[UITouch _updateWithChildEvent:](v12);
      *(double *)(v12 + 8) = (v38 - *(double *)(v12 + 112)) * (v38 - *(double *)(v12 + 112))
                           + (v40 - *(double *)(v12 + 120)) * (v40 - *(double *)(v12 + 120));
      IOHIDEventGetFloatValue();
      v61 = v60;
      IOHIDEventGetFloatValue();
      v63 = v62;
      v64 = qword_1ECD80058;
      if (!qword_1ECD80058)
      {
        v64 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v64, (unint64_t *)&qword_1ECD80058);
      }
      if ((*(_BYTE *)v64 & 1) != 0)
      {
        loga = *(os_log_t *)(v64 + 8);
        if (os_log_type_enabled(loga, OS_LOG_TYPE_ERROR))
        {
          logb = loga;
          v124 = IOHIDEventGetIntegerValue() != 0;
          v98 = IOHIDEventGetIntegerValue();
          *(_DWORD *)v134 = 67109376;
          *(_DWORD *)&v134[4] = v124;
          *(_WORD *)&v134[8] = 2048;
          *(_QWORD *)&v134[10] = v98;
          _os_log_impl(&dword_185066000, logb, OS_LOG_TYPE_ERROR, "\t\tTouch isTouching: %d inRange: %ld", v134, 0x12u);

        }
      }
      v65 = qword_1ECD80060;
      if (!qword_1ECD80060)
      {
        v65 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v65, (unint64_t *)&qword_1ECD80060);
      }
      if ((*(_BYTE *)v65 & 1) != 0)
      {
        v99 = *(NSObject **)(v65 + 8);
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v134 = 134217984;
          *(double *)&v134[4] = v61;
          _os_log_impl(&dword_185066000, v99, OS_LOG_TYPE_ERROR, "\t\tTouch pressure: %f", v134, 0xCu);
        }
      }
      objc_msgSend((id)v12, "preciseLocationInView:", 0);
      if (v42 != v67
        || v44 != v66
        || (objc_msgSend((id)v12, "_pressure"), v61 != v68)
        || objc_msgSend((id)v12, "type") == 2
        || _UIEventHIDGetDescendantPointerEvent(v34)
        || (objc_msgSend((id)v12, "_rollAngle"), v63 != v69))
      {
        v70 = qword_1ECD80068;
        if (!qword_1ECD80068)
        {
          v70 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v70, (unint64_t *)&qword_1ECD80068);
        }
        if ((*(_BYTE *)v70 & 1) != 0)
        {
          v100 = *(NSObject **)(v70 + 8);
          if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
          {
            v101 = v100;
            v141.x = v38;
            v141.y = v40;
            NSStringFromCGPoint(v141);
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v134 = 138412290;
            *(_QWORD *)&v134[4] = v102;
            _os_log_impl(&dword_185066000, v101, OS_LOG_TYPE_ERROR, "\t\tTouch moved to %@", v134, 0xCu);

          }
        }
        objc_msgSend((id)v12, "setTimestamp:", v32);
        *(_OWORD *)(v12 + 128) = *(_OWORD *)(v12 + 112);
        *(_OWORD *)(v12 + 160) = *(_OWORD *)(v12 + 144);
        *(double *)(v12 + 112) = v38;
        *(double *)(v12 + 120) = v40;
        *(double *)(v12 + 144) = v42;
        *(double *)(v12 + 152) = v44;
        v71 = *(double *)(v12 + 224);
        if (v71 < v61)
          v71 = v61;
        *(_QWORD *)(v12 + 176) = *(_QWORD *)(v12 + 216);
        *(double *)(v12 + 216) = v61;
        *(double *)(v12 + 224) = v71;
        -[UITouch _setRollAngle:resetPrevious:](v12, 0, v63);
        v72 = qword_1ECD80070;
        if (!qword_1ECD80070)
        {
          v72 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v72, (unint64_t *)&qword_1ECD80070);
        }
        if ((*(_BYTE *)v72 & 1) != 0)
        {
          v103 = *(NSObject **)(v72 + 8);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            v104 = v103;
            objc_msgSend((id)v12, "_phaseDescription");
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v134 = 138412290;
            *(_QWORD *)&v134[4] = v105;
            _os_log_impl(&dword_185066000, v104, OS_LOG_TYPE_ERROR, "\t\tCurrent touch phase: %@", v134, 0xCu);

          }
        }
        if ((objc_msgSend((id)v12, "phase") | 2) == 2)
          objc_msgSend((id)v12, "setPhase:", 1);
        v73 = qword_1ECD80078;
        if (!qword_1ECD80078)
        {
          v73 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v73, (unint64_t *)&qword_1ECD80078);
        }
        if ((*(_BYTE *)v73 & 1) != 0)
        {
          v106 = *(NSObject **)(v73 + 8);
          if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
          {
            v107 = v106;
            objc_msgSend((id)v12, "_phaseDescription");
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v134 = 138412290;
            *(_QWORD *)&v134[4] = v108;
            _os_log_impl(&dword_185066000, v107, OS_LOG_TYPE_ERROR, "\t\tNew touch phase: %@", v134, 0xCu);

          }
        }
      }
      if (_UIApplicationSupportsGlobalEdgeSwipeTouches())
      {
        v74 = qword_1ECD80080;
        if (!qword_1ECD80080)
        {
          v74 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v74, (unint64_t *)&qword_1ECD80080);
        }
        if ((*(_BYTE *)v74 & 1) != 0)
        {
          v110 = *(NSObject **)(v74 + 8);
          if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
          {
            v111 = v110;
            v112 = *(unsigned __int16 *)(v12 + 236);
            *(_DWORD *)v134 = 134218496;
            *(_QWORD *)&v134[4] = v12;
            *(_WORD *)&v134[12] = 1024;
            *(_DWORD *)&v134[14] = (v112 >> 13) & 1;
            *(_WORD *)&v134[18] = 1024;
            *(_DWORD *)&v134[20] = (v112 >> 14) & 1;
            _os_log_impl(&dword_185066000, v111, OS_LOG_TYPE_ERROR, "\t\tTouch %p isGESTouch: %d; isTransitioningFromGESTouch: %d",
              v134,
              0x18u);

          }
        }
      }

    }
  }
LABEL_73:
  -[UIEventEnvironment _setCurrentTouch:forWindow:](*(_QWORD *)(a1 + 80), 0, *(void **)(a1 + 32));

}

uint64_t ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_31(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeHoverTouchForContextId:pathIndex:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_35(uint64_t a1, void *a2)
{
  if (objc_msgSend(a2, "_senderID") != *(_QWORD *)(a1 + 32))
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 40), (const void *)objc_msgSend(a2, "_pathIndex"), a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)objc_msgSend(a2, "_pathIndex"));
  }
}

void ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_2(uint64_t a1, _BYTE *a2)
{
  int v4;

  if (a2)
    v4 = a2[270] != 0;
  else
    v4 = 0;
  if (*(unsigned __int8 *)(a1 + 48) != v4)
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), (const void *)objc_msgSend(a2, "_pathIndex"), a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), (const void *)objc_msgSend(a2, "_pathIndex"));
  }
}

uint64_t ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_41(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  return objc_msgSend(v4, "addObject:", a2);
}

uint64_t ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_45(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  _WORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = objc_msgSend(a3, "phase");
  result = objc_msgSend(a3, "phase");
  if (result == 3)
    return result;
  if (*(_BYTE *)(a1 + 56) || (objc_msgSend(a3, "_hidEvent"), (IOHIDEventGetIntegerValue() & 0x80) != 0))
  {
    v9 = qword_1ECD7FF30;
    if (!qword_1ECD7FF30)
    {
      v9 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&qword_1ECD7FF30);
    }
    if ((*(_BYTE *)v9 & 1) != 0)
    {
      v12 = *(NSObject **)(v9 + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v14 = 134217984;
        v15 = a3;
        _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "\tTouch in previous map was not ended, but we're cancelling; move touch to cancelled: %p",
          (uint8_t *)&v14,
          0xCu);
      }
    }
    v8 = 4;
    goto LABEL_13;
  }
  if (v5 != 4)
  {
    v7 = qword_1ECD7FF38;
    if (!qword_1ECD7FF38)
    {
      v7 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&qword_1ECD7FF38);
    }
    if ((*(_BYTE *)v7 & 1) != 0)
    {
      v13 = *(NSObject **)(v7 + 8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = 134217984;
        v15 = a3;
        _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "\tTouch in previous map was not ended and not cancelled; move touch to ended: %p",
          (uint8_t *)&v14,
          0xCu);
      }
    }
    v8 = 3;
LABEL_13:
    objc_msgSend(a3, "setPhase:", v8);
  }
  objc_msgSend(a3, "setTimestamp:", *(double *)(a1 + 40));
  _UpdateTouchTapCount(a3, 0, *(double *)(a1 + 40), *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  if (*(_BYTE *)(a1 + 57))
  {
    objc_msgSend(a3, "window");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "_canIgnoreInteractionEvents");

  }
  else
  {
    v11 = 0;
  }
  result = _AddTouchToEventAndDetermineIfNeedsCancel(v11, (uint64_t)a3, v5 == 4, *(void **)(a1 + 48));
  if ((_DWORD)result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return result;
}

uint64_t ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_50(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  int v6;
  uint64_t result;

  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend(a3, "window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "_canIgnoreInteractionEvents");

  }
  else
  {
    v6 = 0;
  }
  result = _AddTouchToEventAndDetermineIfNeedsCancel(v6, (uint64_t)a3, objc_msgSend(a3, "phase") == 4, *(void **)(a1 + 40));
  if ((_DWORD)result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return result;
}

void ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_54(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  unint64_t v32;
  CFIndex v33;
  char **v34;
  void *v35;
  NSObject *v36;
  NSObject *v37;
  int Count;
  NSObject *v39;
  NSObject *v40;
  objc_class *v41;
  void *v42;
  int v43;
  uint64_t v44;
  const __CFDictionary *v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[4];
  id v56;
  _QWORD v57[6];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint8_t v62[128];
  uint8_t v63[4];
  void *v64;
  __int16 v65;
  void *v66;
  __int16 v67;
  id v68;
  uint8_t buf[4];
  int v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    objc_msgSend(*(id *)(a1 + 56), "_dispatchWindows");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v47, v62, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v48;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v48 != v6)
            objc_enumerationMutation(v3);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {

            goto LABEL_14;
          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v47, v62, 16);
        if (v5)
          continue;
        break;
      }
    }

    _UIPencilEventRequestBarrelFocusIfAbleForWindow(*(void **)(a1 + 32), 0);
  }
LABEL_14:
  v8 = *(void **)(a1 + 56);
  v9 = *(void **)(a1 + 64);
  v45 = *(const __CFDictionary **)(a1 + 72);
  v46 = *(void **)(a1 + 80);
  v43 = *(unsigned __int8 *)(a1 + 96);
  v44 = *(_QWORD *)(a1 + 88);
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  objc_msgSend(v8, "allTouches");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v58, v71, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v59;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v59 != v13)
          objc_enumerationMutation(v10);
        v15 = *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * v14);
        if (!objc_msgSend((id)v15, "phase") || objc_msgSend((id)v15, "phase") == 1)
          objc_msgSend((id)v15, "setPhase:", 2);
        if (v15)
          v16 = *(void **)(v15 + 360);
        else
          v16 = 0;
        v17 = v16;
        objc_msgSend(v9, "hoverTouchForContextId:pathIndex:", objc_msgSend(v17, "_contextId"), objc_msgSend((id)v15, "_pathIndex"));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18 && (objc_msgSend((id)v15, "phase") == 3 || objc_msgSend((id)v15, "phase") == 4))
          objc_msgSend((id)v15, "_clearForReenteringHoverInWindow:", v17);
        if (v15)
          *(_WORD *)(v15 + 236) &= ~0x4000u;

        ++v14;
      }
      while (v12 != v14);
      v19 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v58, v71, 16);
      v12 = v19;
    }
    while (v19);
  }

  v20 = qword_1ECD800C8;
  if (!qword_1ECD800C8)
  {
    v20 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v20, (unint64_t *)&qword_1ECD800C8);
  }
  if ((*(_BYTE *)v20 & 1) != 0)
  {
    v36 = *(NSObject **)(v20 + 8);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = v36;
      Count = CFDictionaryGetCount(v45);
      *(_DWORD *)buf = 67109120;
      v70 = Count;
      _os_log_impl(&dword_185066000, v37, OS_LOG_TYPE_ERROR, "Current touch count: %d", buf, 8u);

    }
  }
  v21 = MEMORY[0x1E0C809B0];
  v57[0] = MEMORY[0x1E0C809B0];
  v57[1] = 3221225472;
  v57[2] = ____finishDigitizerEventDispatch_block_invoke;
  v57[3] = &__block_descriptor_48_e24_v32__0_8__UITouch_16_B24lu32l8u40l8;
  v57[4] = v9;
  v57[5] = v8;
  -[__CFDictionary enumerateKeysAndObjectsUsingBlock:](v45, "enumerateKeysAndObjectsUsingBlock:", v57);
  v22 = *(void **)(v44 + 8);
  objc_msgSend(v8, "_exclusiveTouchWindows");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)objc_msgSend(v23, "mutableCopy");

  v55[0] = v21;
  v55[1] = 3221225472;
  v55[2] = ____finishDigitizerEventDispatch_block_invoke_2;
  v55[3] = &unk_1E16DF7A8;
  v25 = v24;
  v56 = v25;
  objc_msgSend(v46, "enumerateKeysAndObjectsUsingBlock:", v55);
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v26 = v25;
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v51, buf, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v52;
    do
    {
      for (j = 0; j != v28; ++j)
      {
        if (*(_QWORD *)v52 != v29)
          objc_enumerationMutation(v26);
        objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * j), "_setExclusiveTouchView:", 0);
      }
      v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v51, buf, 16);
    }
    while (v28);
  }

  objc_msgSend(v8, "_exclusiveTouchWindows");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "minusSet:", v26);

  if (objc_msgSend(v26, "count"))
  {
    v32 = qword_1ECD800D0;
    if (!qword_1ECD800D0)
    {
      v32 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v32, (unint64_t *)&qword_1ECD800D0);
    }
    if ((*(_BYTE *)v32 & 1) != 0)
    {
      v39 = *(NSObject **)(v32 + 8);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        v40 = v39;
        v41 = (objc_class *)objc_opt_class();
        NSStringFromClass(v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v63 = 138412802;
        v64 = v42;
        v65 = 2048;
        v66 = v8;
        v67 = 2112;
        v68 = v26;
        _os_log_impl(&dword_185066000, v40, OS_LOG_TYPE_ERROR, "%@<%p> - Windows are no longer exclusive touch (%@)", v63, 0x20u);

      }
    }
  }
  if (objc_msgSend(v22, "_rotationDisabledDuringTouch"))
  {
    v33 = CFDictionaryGetCount((CFDictionaryRef)v46);
    if (!v43 && v33)
    {
      v34 = &selRef_beginDisablingInterfaceAutorotation;
LABEL_55:
      +[UIWindow allWindowsIncludingInternalWindows:onlyVisibleWindows:](UIWindow, "allWindowsIncludingInternalWindows:onlyVisibleWindows:", 0, 0);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "makeObjectsPerformSelector:", *v34);

      goto LABEL_56;
    }
    if (v43 && !v33)
    {
      v34 = &selRef_endDisablingInterfaceAutorotation;
      goto LABEL_55;
    }
  }
LABEL_56:

  CFRelease(*(CFTypeRef *)(a1 + 72));
}

unint64_t ____dispatchPreprocessedEventFromEventQueue_block_invoke(uint64_t a1)
{
  unint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "phase");
  if (result <= 5 && ((1 << result) & 0x31) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "_removeGestureRecognizersFromWindows");
  return result;
}

unint64_t ____dispatchPreprocessedEventFromEventQueue_block_invoke_2(uint64_t a1)
{
  unint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "phase");
  if (result <= 4 && ((1 << result) & 0x19) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "_removeGestureRecognizersFromWindows");
  return result;
}

double ____baseTouchLocationsForChild_block_invoke(double a1, double a2)
{
  return 1.0 - a2;
}

double ____baseTouchLocationsForChild_block_invoke_2(double a1)
{
  return 1.0 - a1;
}

double ____baseTouchLocationsForChild_block_invoke_3(double a1, double a2)
{
  return a2;
}

uint64_t ____applySynthesizedTouchTranslationAndModifyIfNeeded_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = IOHIDEventGetIntegerValue();
  if (result == 65280)
  {
    result = IOHIDEventGetIntegerValue();
    if (result == 43)
    {
      result = IOHIDEventGetDataValue();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
      *a4 = 1;
    }
  }
  return result;
}

void ____dispatchEstimationUpdateEvents_block_invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  int IntegerValue;
  BOOL v7;
  char v8;
  double v9;
  BOOL v10;
  double v11;
  uint64_t v12;
  void *v13;
  char v14;
  id v15;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a4);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  -[UIEventEnvironment _estimatedTouchRecordForContextID:estimationIndex:](a1[6], a1[4], (uint64_t)v15);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  IntegerValue = IOHIDEventGetIntegerValue();
  v7 = (IntegerValue & 0x400) == 0 || v5 == 0;
  v8 = v7;
  if (!v7)
  {
    IOHIDEventGetFloatValue();
    *(float *)&v9 = v9;
    objc_msgSend(v5, "dispatchUpdateWithPressure:stillEstimated:", 0, *(float *)&v9);
  }
  if (v5)
    v10 = (IntegerValue & 0x800000) == 0;
  else
    v10 = 1;
  if (!v10)
  {
    IOHIDEventGetFloatValue();
    *(float *)&v11 = v11;
    objc_msgSend(v5, "dispatchUpdateWithRollAngle:stillEstimated:", 0, *(float *)&v11);
    v8 = 0;
  }
  if (v5 && (v8 & 1) == 0)
  {
    v12 = a1[5];
    v13 = *(void **)(*(_QWORD *)(v12 + 8) + 40);
    if (v13)
    {
      v14 = objc_msgSend(v13, "hasRemainingUpdates");
      v12 = a1[5];
      if ((v14 & 1) == 0)
      {
        -[UIEventEnvironment _removeEstimatedTouchRecord:](a1[6], *(void **)(*(_QWORD *)(v12 + 8) + 40));
        v12 = a1[5];
      }
    }
    objc_storeStrong((id *)(*(_QWORD *)(v12 + 8) + 40), v5);
  }

}

CGFloat __lockWarpedPointToViewEdge(void *a1, CGFloat a2, CGFloat a3, double a4, double a5)
{
  void *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  double v15;
  double v16;
  double v17;

  objc_msgSend(a1, "superview");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "frame");
  objc_msgSend(v10, "convertRect:toView:", 0);
  UIDistanceBetweenPointAndRect(a2, a3, v11, v12, v13, v14);
  v16 = v15;

  v17 = sqrt((a2 - a4) * (a2 - a4) + (a3 - a5) * (a3 - a5));
  if (fabs(v17) >= 2.22044605e-16 && v17 >= v16)
    return a2 + (a4 - a2) * (v16 / v17);
  return a4;
}

BOOL ____startNewUITouch_block_invoke_119(uint64_t a1, void *a2)
{
  CGFloat v3;
  CGFloat v4;
  CGPoint v6;

  if (!*(_BYTE *)(a1 + 72))
    return 1;
  objc_msgSend(a2, "locationInView:", *(_QWORD *)(a1 + 32));
  v6.x = v3;
  v6.y = v4;
  return CGRectContainsPoint(*(CGRect *)(a1 + 40), v6);
}

void ____startNewUITouch_block_invoke_122(_QWORD *a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  int v7;
  id v8;
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  int v13;
  id v14;

  v5 = (void *)a1[4];
  if (v5)
  {
    objc_msgSend(a3, "_responder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5 == v6)
    {
      v7 = (*(uint64_t (**)(void))(a1[8] + 16))();

      if (v7)
        *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else
    {

    }
  }
  v14 = (id)a1[5];
  objc_msgSend(a3, "window");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (v14 != v8)
    goto LABEL_7;
  objc_msgSend(a3, "_responder");
  v9 = objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = (*(uint64_t (**)(void))(a1[8] + 16))();

    if ((v11 & 1) == 0)
      return;
    goto LABEL_10;
  }
  objc_msgSend(a3, "gestureRecognizers");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v12, "count"))
  {

    v8 = v14;
LABEL_7:

    return;
  }
  v13 = (*(uint64_t (**)(void))(a1[8] + 16))();

  if (v13)
LABEL_10:
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
}

void ____startNewUITouch_block_invoke_125(_QWORD *a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  int v7;
  id v8;
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  int v13;
  id v14;

  v5 = (void *)a1[4];
  if (v5)
  {
    objc_msgSend(a3, "_responder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5 == v6)
    {
      v7 = (*(uint64_t (**)(void))(a1[8] + 16))();

      if (v7)
        *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else
    {

    }
  }
  v14 = (id)a1[5];
  objc_msgSend(a3, "window");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (v14 != v8)
    goto LABEL_7;
  objc_msgSend(a3, "_responder");
  v9 = objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = (*(uint64_t (**)(void))(a1[8] + 16))();

    if ((v11 & 1) == 0)
      return;
    goto LABEL_10;
  }
  objc_msgSend(a3, "gestureRecognizers");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v12, "count"))
  {

    v8 = v14;
LABEL_7:

    return;
  }
  v13 = (*(uint64_t (**)(void))(a1[8] + 16))();

  if (v13)
LABEL_10:
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
}

void __setTouchViewNilWithGestureCheck(void *a1, void *a2, void *a3, void *a4)
{
  void *v8;
  void *v9;
  int v10;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  objc_msgSend(a2, "view");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "_shouldApplyExclusiveTouch"))
  {
    v12 = 0;
    v13 = &v12;
    v14 = 0x2020000000;
    v15 = 0;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = ____existingTouchOutsideViewInTouchMap_block_invoke;
    v11[3] = &unk_1E16DF760;
    v11[4] = v8;
    v11[5] = &v12;
    v9 = _Block_copy(v11);
    objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v9);
    if (*((_BYTE *)v13 + 24))
    {

      _Block_object_dispose(&v12, 8);
      goto LABEL_7;
    }
    objc_msgSend(a4, "enumerateKeysAndObjectsUsingBlock:", v9);
    v10 = *((unsigned __int8 *)v13 + 24);

    _Block_object_dispose(&v12, 8);
    if (v10)
      goto LABEL_7;
  }
  if (objc_msgSend(a1, "_anyInterestedGestureRecognizersForTouchInView:", v8))
    objc_msgSend(a1, "_addTouch:forDelayedDelivery:", a2, 0);
LABEL_7:
  objc_msgSend(a1, "_clearViewForTouch:", a2);

}

void sub_1860D1A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ____existingTouchOutsideViewInTouchMap_block_invoke(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v6;
  char v7;
  char v8;
  void *v9;

  objc_msgSend(a3, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v9 = v6;
    v7 = objc_msgSend(*(id *)(a1 + 32), "isDescendantOfView:", v6);
    v6 = v9;
    v8 = v7 ^ 1;
  }
  else
  {
    v8 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v8;
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

}

uint64_t ____dispatchPressesEvent_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 40), "_finishButtonEvent:", *(_QWORD *)(a1 + 32));
}

void sub_1860D3C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __deviceEventDrainPolicy(uint64_t a1)
{
  const void *v3;
  uint64_t v4;

  if (qword_1ECD7A3E0 != -1)
    dispatch_once(&qword_1ECD7A3E0, &__block_literal_global_101);
  if (!byte_1ECD7A3AA || (_UIEventHIDEventWantsImmediateDelivery() & 1) != 0)
    return 0;
  v3 = _UIEventHIDGetChildStylusEvent(a1);
  v4 = 1;
  if (!byte_1ECD7A3AB)
    v4 = 2;
  if (v3)
    return 0;
  else
    return v4;
}

id ___logFilter_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD aBlock[4];
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___logFilter_block_invoke_2;
  aBlock[3] = &unk_1E16DF9C0;
  v4 = *(void **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v9 = v4;
  v10 = v3;
  v5 = v3;
  v6 = _Block_copy(aBlock);

  return v6;
}

uint64_t ___logFilter_block_invoke_2(uint64_t a1, uint64_t a2)
{
  unint64_t Node;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  Node = __UILogCategoryGetNode(*(_BYTE **)(a1 + 48), (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode);
  if ((*(_BYTE *)(Node - 16) & 1) != 0)
  {
    v6 = *(NSObject **)(Node - 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 138412546;
      v9 = v7;
      v10 = 2112;
      v11 = a2;
      _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "%@:\n%@", (uint8_t *)&v8, 0x16u);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t ___hoverEventMemoryFilter_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = IOHIDEventGetIntegerValue();
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
LABEL_3:
    *a4 = 1;
    return result;
  }
  result = IOHIDEventGetIntegerValue();
  if (!result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    goto LABEL_3;
  }
  return result;
}

void ___dragEventExtractionFilter_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const __CFArray *Children;
  void *v8;
  void *v9;
  int v10;
  int v11;
  void *v12;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v5 = a2;
  v6 = a3;
  Children = (const __CFArray *)IOHIDEventGetChildren();
  CFArrayGetValueAtIndex(Children, 0);
  BKSHIDEventGetDigitizerAttributes();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  _UIEventHIDPathAttributesForChild(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "locus");

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___UIEventHIDAnyChildIsTouching_block_invoke_0;
  v13[3] = &unk_1E16B1D90;
  v13[4] = &v14;
  _UIEventHIDEnumerateChildren((uint64_t)v6, 11, v13);
  v11 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  v12 = *(void **)(a1 + 32);
  if (v10 == 1 && v11)
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v6, v5);
  else
    objc_msgSend(v12, "removeObjectForKey:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1860D5EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___dragEventExtractionFilter_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "resendDragMoveEventsOnTimer:withInterval:", a2, 0.0333333333);
}

id ___dwellEventDiscardFilterGenerator_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  _QWORD aBlock[4];
  id v7;

  v2 = a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___dwellEventDiscardFilterGenerator_block_invoke_2;
  aBlock[3] = &unk_1E16DF8D8;
  v7 = v2;
  v3 = v2;
  v4 = _Block_copy(aBlock);

  return v4;
}

void ___dwellEventDiscardFilterGenerator_block_invoke_2(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  if (IOHIDEventGetType() == 11)
  {
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = ___dwellEventDiscardFilterGenerator_block_invoke_3;
    v4[3] = &unk_1E16DFAB0;
    v4[4] = &v5;
    v4[5] = a2;
    _UIEventHIDEnumerateChildren(a2, 11, v4);
  }
  if (!*((_BYTE *)v6 + 24))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_object_dispose(&v5, 8);
}

void sub_1860D605C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___dwellEventDiscardFilterGenerator_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int Phase;

  Phase = IOHIDEventGetPhase();
  _UIEventHIDPathIndexForDigitizerEvent();
  if (Phase == 128)
  {
    if (qword_1ECD7A3C0 != -1)
      dispatch_once(&qword_1ECD7A3C0, &__block_literal_global_88_3);
    if (!_MergedGlobals_49_0 || (objc_msgSend((id)UIApp, "_applicationWantsGESEvents") & 1) == 0)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      *a4 = 1;
    }
  }
}

uint64_t ___shouldFilterDwellEvents_block_invoke()
{
  uint64_t result;

  result = _UIApplicationSupportsGlobalEdgeSwipeTouches();
  _MergedGlobals_49_0 = result;
  return result;
}

uint64_t ___wakeOnTouchSynchronizationFilter_block_invoke_89(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v4;
  _QWORD v5[5];

  v2 = *(_QWORD *)(result + 32);
  if (v2)
  {
    v4 = (_BYTE *)_receiveSynchronizedHIDEvent____s_category;
    if (!_receiveSynchronizedHIDEvent____s_category)
    {
      v4 = (_BYTE *)(__UILogCategoryGetNode("HIDEventSynchronization", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
      atomic_store((unint64_t)v4, (unint64_t *)&_receiveSynchronizedHIDEvent____s_category);
    }
    if ((*v4 & 1) != 0)
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = __40__UIEventFetcher__logSynchronizedEvent___block_invoke;
      v5[3] = &__block_descriptor_40_e30_v32__0____IOHIDEvent__8Q16_B24l;
      v5[4] = a2;
      _UIEventHIDEnumerateChildren(a2, 11, v5);
    }
    os_unfair_lock_lock((os_unfair_lock_t)&__UIEventFetcherEventArrayAccessLock);
    (*(void (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
    os_unfair_lock_unlock((os_unfair_lock_t)&__UIEventFetcherEventArrayAccessLock);
    if ((_UIUpdateCycleEnabled() & 1) == 0)
    {
      objc_msgSend(*(id *)(v2 + 8), "count");
      -[UIEventFetcher signalEventsAvailableWithReason:filteredEventCount:](v2, 4);
    }
    result = _UIUpdateCycleEnabled();
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(v2 + 256), "eventFetcherDidReceiveEvents:", v2);
  }
  return result;
}

void ___wakeOnTouchSynchronizationFilter_block_invoke_2_90(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = _UIInternalPreference_HIDEventsDeliverImmediatly_block_invoke_5___s_category;
  if (!_UIInternalPreference_HIDEventsDeliverImmediatly_block_invoke_5___s_category)
  {
    v2 = __UILogCategoryGetNode("HIDEventSynchronization", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIInternalPreference_HIDEventsDeliverImmediatly_block_invoke_5___s_category);
  }
  if ((*(_BYTE *)v2 & 1) != 0)
  {
    v3 = *(NSObject **)(v2 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "[UIEventFetcher] synchronization completed. Resuming normal event routing.", v4, 2u);
    }
  }
  -[UIEventFetcher setSynchronizer:](*(_QWORD *)(a1 + 32), 0);
}

uint64_t ___pencilRangeAndTouchingSeparationFilter_block_invoke_3(uint64_t a1)
{
  char v2;
  uint64_t IntegerValue;
  uint64_t result;
  _BOOL4 v5;
  _BOOL4 v6;
  const void *Copy;
  const void *v8;

  v2 = ~IOHIDEventGetIntegerValue();
  IntegerValue = IOHIDEventGetIntegerValue();
  result = IOHIDEventGetIntegerValue();
  v5 = (v2 & 3) == 0;
  if (!IntegerValue)
    v5 = 0;
  if (!result)
    v5 = 0;
  v6 = (v2 & 3 | result | IntegerValue) == 0;
  if (v5 || !(v2 & 3 | result | IntegerValue))
  {
    if (v5)
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ___pencilRangeAndTouchingSeparationFilter_block_invoke_4();
      IOHIDEventSetIntegerValue();
      IOHIDEventGetIntegerValue();
      IOHIDEventSetIntegerValue();
      Copy = (const void *)IOHIDEventCreateCopy();
      IOHIDEventSetIntegerValue();
      IOHIDEventGetIntegerValue();
      IOHIDEventSetIntegerValue();
      IOHIDEventAppendEvent();
      CFRelease(Copy);
      result = IOHIDEventSetIntegerValue();
    }
    if (v6)
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = ___pencilRangeAndTouchingSeparationFilter_block_invoke_4();
      IOHIDEventGetIntegerValue();
      IOHIDEventSetIntegerValue();
      v8 = (const void *)IOHIDEventCreateCopy();
      IOHIDEventGetIntegerValue();
      IOHIDEventSetIntegerValue();
      IOHIDEventAppendEvent();
      CFRelease(v8);
      IOHIDEventSetIntegerValue();
      return IOHIDEventSetIntegerValue();
    }
  }
  return result;
}

uint64_t ___pencilRangeAndTouchingSeparationFilter_block_invoke_4()
{
  uint64_t Copy;
  const __CFArray *Children;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;

  Copy = IOHIDEventCreateCopy();
  Children = (const __CFArray *)IOHIDEventGetChildren();
  if (Children)
  {
    v2 = Children;
    Count = CFArrayGetCount(Children);
    v4 = Count - 1;
    if (Count >= 1)
    {
      do
      {
        CFArrayGetValueAtIndex(v2, v4);
        IOHIDEventRemoveEvent();
        --v4;
      }
      while (v4 != -1);
    }
  }
  return Copy;
}

void ___pencilRangeAndTouchingSeparationFilter_block_invoke_5()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  BKSHIDEventGetDigitizerAttributes();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  objc_msgSend(v0, "pathAttributes", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v8;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * i);
        if ((objc_msgSend(v6, "locus") & 0xFE) == 2)
          objc_msgSend(v6, "setLocus:", 0);
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v3);
  }

  BKSHIDEventSetDigitizerAttributes();
}

uint64_t ____deviceHasHighFrequencyDigitizer_block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  byte_1ECD7A3A9 = result;
  return result;
}

uint64_t ____deviceEventDrainPolicy_block_invoke()
{
  char v0;
  char v1;
  char v2;
  uint64_t result;

  if (qword_1ECD7A400 != -1)
    dispatch_once(&qword_1ECD7A400, &__block_literal_global_153_1);
  byte_1ECD7A3AA |= byte_1ECD7A3AE;
  byte_1ECD7A3AB |= byte_1ECD7A3AE;
  v0 = MGIsDeviceOneOfType();
  byte_1ECD7A3AA |= v0;
  byte_1ECD7A3AB |= v0;
  v1 = MGIsDeviceOneOfType();
  v2 = MGIsDeviceOneOfType();
  byte_1ECD7A3AA |= v1 | v2;
  byte_1ECD7A3AB |= v1 | v2;
  byte_1ECD7A3AA |= MGIsDeviceOneOfType();
  result = MGIsDeviceOneOfType();
  byte_1ECD7A3AA |= result;
  return result;
}

void ____signal_queue_threshold_count_block_invoke()
{
  void *v0;
  void *v1;
  id v2;

  _UIKitPreferencesOnce();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForKey:", CFSTR("SignalEventCountThreshold"));
  v2 = (id)objc_claimAutoreleasedReturnValue();

  v1 = v2;
  if (v2)
  {
    _MergedGlobals_899 = objc_msgSend(v2, "integerValue");
    v1 = v2;
  }

}

void ____deviceCanMatchHighFrequencyDigitizer_block_invoke()
{
  void *v0;
  double v1;
  double v2;
  BOOL v3;

  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_refreshRate");
  v2 = v1;

  v3 = v2 > 0.0 && round(1.0 / v2) > 60.0;
  byte_1ECD7A3AC = v3;
}

uint64_t ____deviceShouldUsuallyActivateDelay_block_invoke()
{
  uint64_t result;

  byte_1ECD7A3AD |= MGIsDeviceOneOfType();
  byte_1ECD7A3AD |= MGIsDeviceOneOfType();
  result = MGIsDeviceOneOfType();
  byte_1ECD7A3AD |= result;
  return result;
}

uint64_t ____deviceShouldSignalOnDisplayLinkForNonImportantEvents_block_invoke()
{
  uint64_t result;

  byte_1ECD7A3AE |= MGIsDeviceOneOfType();
  result = MGIsDeviceOneOfType();
  byte_1ECD7A3AE |= result;
  return result;
}

uint64_t ____deviceNeedsToConsiderNearVsyncTouches_block_invoke()
{
  int v0;
  char v1;
  void *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t result;

  if (qword_1ECD7A400 != -1)
    dispatch_once(&qword_1ECD7A400, &__block_literal_global_153_1);
  v0 = byte_1ECD7A3AE;
  if (qword_1ECD7A3D8 != -1)
    dispatch_once(&qword_1ECD7A3D8, &__block_literal_global_98_1);
  v1 = byte_1ECD7A3A9;
  if (byte_1ECD7A3A9)
  {
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "userInterfaceIdiom");

    if (v0)
      v4 = 1;
    else
      v4 = (v3 & 0xFFFFFFFFFFFFFFFBLL) == 1;
    v1 = !v4;
  }
  byte_1ECD7A3AF = v1;
  byte_1ECD7A3AF = v1 | MGIsDeviceOneOfType();
  result = MGIsDeviceOneOfType();
  byte_1ECD7A3AF |= result;
  return result;
}

uint64_t _UIEventHIDEventWantsImmediateDelivery()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t IntegerValue;
  unint64_t v4;
  BOOL v5;

  BKSHIDEventGetBaseAttributes();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v0, "options") & 8) != 0)
    goto LABEL_7;
  if (IOHIDEventGetType() != 11)
  {
    v2 = 0;
    goto LABEL_15;
  }
  if ((v1 = IOHIDEventGetIntegerValue(), (IOHIDEventGetIntegerValue() & 2) != 0) && !v1
    || (IOHIDEventGetIntegerValue() & 2) != 0 && !v1)
  {
LABEL_7:
    v2 = 1;
  }
  else
  {
    IntegerValue = IOHIDEventGetIntegerValue();
    v4 = IOHIDEventGetSenderID() & 0xFFFFFFFFFFFFFFFDLL;
    if (IntegerValue)
      v5 = 1;
    else
      v5 = v4 == 0x8000000800A15171;
    v2 = !v5;
  }
LABEL_15:

  return v2;
}

uint64_t _UIEventHIDEventRemoteTimestamp(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___UIEventHIDEventRemoteTimestamp_block_invoke;
  v3[3] = &unk_1E16DFB28;
  v3[4] = &v4;
  v3[5] = a1;
  _UIEventHIDEnumerateChildren(a1, 0, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1860D73EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventHIDPressTypeForKeyboardHIDEvent()
{
  uint64_t IntegerValue;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  BOOL v5;
  BOOL v7;
  BOOL v9;
  BOOL v11;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v24;
  BOOL v26;
  BOOL v27;
  BOOL v29;

  IntegerValue = IOHIDEventGetIntegerValue();
  v1 = IOHIDEventGetIntegerValue();
  if (IntegerValue == 12)
  {
    v2 = 0;
    if (v1 > 547)
    {
      if (v1 == 548)
        return 7;
      if (v1 == 562)
        return 416;
    }
    else
    {
      v3 = 4;
      if (v1 == 65 || v1 == 128)
        return v3;
    }
  }
  else
  {
    v2 = IntegerValue == 1;
    if (IntegerValue == 1 && v1 == 137)
      return 4;
  }
  v5 = (v1 == 134 || v1 == 136) && v2;
  v7 = IntegerValue == 12 && v1 == 70;
  v3 = 5;
  if (!v5 && !v7)
  {
    v9 = v1 == 205 || v1 == 102;
    if (IntegerValue == 12 && v9)
    {
      return 6;
    }
    else
    {
      v3 = 0;
      v11 = v1 == 140 && v2;
      v13 = IntegerValue == 12 && v1 == 66;
      if (!v11 && !v13)
      {
        v14 = v1 == 141 && v2;
        v15 = IntegerValue == 12 && v1 == 67;
        v16 = v15;
        v3 = 1;
        if (!v14 && !v16)
        {
          v17 = v1 == 139 && v2;
          v18 = IntegerValue == 12 && v1 == 68;
          v19 = v18;
          v3 = 2;
          if (!v17 && !v19)
          {
            v20 = v1 == 138 && v2;
            v21 = IntegerValue == 12 && v1 == 69;
            v22 = v21;
            v3 = 3;
            if (!v20 && !v22)
            {
              v24 = v1 == 64 || v1 == 547;
              if (IntegerValue == 12 && v24)
              {
                return 101;
              }
              else if (IntegerValue == 12 && v1 == 233)
              {
                return 102;
              }
              else if (IntegerValue == 12 && v1 == 234)
              {
                return 103;
              }
              else if (IntegerValue == 12 && v1 == 48)
              {
                return 104;
              }
              else if (IntegerValue == 12 && v1 == 149)
              {
                return 300;
              }
              else if (IntegerValue == 11 && v1 == 33)
              {
                return 400;
              }
              else if (IntegerValue == 11 && v1 == 32)
              {
                return 401;
              }
              else if (IntegerValue == 11 && v1 == 38)
              {
                return 402;
              }
              else if (IntegerValue == 11 && v1 == 176)
              {
                return 403;
              }
              else if (IntegerValue == 11 && v1 == 177)
              {
                return 404;
              }
              else if (IntegerValue == 11 && v1 == 178)
              {
                return 405;
              }
              else if (IntegerValue == 11 && v1 == 179)
              {
                return 406;
              }
              else if (IntegerValue == 11 && v1 == 180)
              {
                return 407;
              }
              else if (IntegerValue == 11 && v1 == 181)
              {
                return 408;
              }
              else if (IntegerValue == 11 && v1 == 182)
              {
                return 409;
              }
              else if (IntegerValue == 11 && v1 == 183)
              {
                return 410;
              }
              else if (IntegerValue == 11 && v1 == 184)
              {
                return 411;
              }
              else if (IntegerValue == 11 && v1 == 185)
              {
                return 412;
              }
              else if (IntegerValue == 11 && v1 == 186)
              {
                return 413;
              }
              else if (IntegerValue == 11 && v1 == 187)
              {
                return 414;
              }
              else if (IntegerValue == 11 && v1 == 47)
              {
                return 415;
              }
              else
              {
                v26 = IntegerValue == 12 && v1 == 448;
                v27 = v1 == 4 && IntegerValue == 65281;
                v3 = 500;
                if (!v27 && !v26)
                {
                  if (IntegerValue == 65281 && v1 == 16)
                  {
                    return 501;
                  }
                  else if (IntegerValue == 144 && v1 == 33)
                  {
                    return 601;
                  }
                  else if (v1 == 155 && v2)
                  {
                    return 503;
                  }
                  else if (IntegerValue == 12 && v1 == 414)
                  {
                    return 502;
                  }
                  else
                  {
                    v29 = v1 == 207 && IntegerValue == 12;
                    v3 = 504;
                    if (!v29)
                      return -1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v3;
}

uint64_t _UIEventHIDIsPencilBarrelEvent()
{
  uint64_t result;

  if (IOHIDEventGetType() != 39)
    return 0;
  result = IOHIDEventGetIntegerValue();
  if (result == 5)
    return _UIPencilInteractionSqueezeIsEnabled();
  if (result != 1)
  {
    if (!result)
      return IOHIDEventGetIntegerValue() == 2;
    return 0;
  }
  return result;
}

BOOL _UIEventHIDIsDynamicButtonEvent(uint64_t a1)
{
  int Type;
  uint64_t v3;

  Type = IOHIDEventGetType();
  if (Type == 1)
  {
    if (IOHIDEventGetIntegerValue() == 65280 && IOHIDEventGetIntegerValue() == 102 && IOHIDEventGetIntegerValue() >= 8)
    {
      v3 = _UIEventHIDGetChildVendorDefinedForceStageEvent(a1);
      return v3 != 0;
    }
  }
  else if (Type == 42)
  {
    v3 = _UIEventHIDGetChildForceStageEvent(a1);
    return v3 != 0;
  }
  return 0;
}

uint64_t _UIEventHIDGetChildForceStageEvent(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___UIEventHIDGetChildForceStageEvent_block_invoke;
  v3[3] = &unk_1E16B1D90;
  v3[4] = &v4;
  _UIEventHIDEnumerateChildren(a1, 41, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1860D7B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventHIDGetChildVendorDefinedForceStageEvent(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___UIEventHIDGetChildVendorDefinedForceStageEvent_block_invoke;
  v3[3] = &unk_1E16B1D90;
  v3[4] = &v4;
  _UIEventHIDEnumerateChildren(a1, 1, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1860D7C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIEventGetChildScrollVector(uint64_t a1)
{
  double v2;
  void *v4;
  void *v5;
  _QWORD v6[5];
  uint64_t v7;
  double *v8;
  uint64_t v9;
  void *v10;
  int64x2_t v11;

  if (IOHIDEventGetType() != 6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGVector _UIEventGetChildScrollVector(IOHIDEventRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIEventHIDHelpers.m"), 752, 0);

  }
  v7 = 0;
  v8 = (double *)&v7;
  v9 = 0x3010000000;
  v10 = &unk_18685B0AF;
  v11 = vdupq_n_s64(0x7FF8000000000000uLL);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___UIEventGetChildScrollVector_block_invoke;
  v6[3] = &unk_1E16B1D90;
  v6[4] = &v7;
  _UIEventHIDEnumerateChildren(a1, 6, v6);
  v2 = v8[4];
  _Block_object_dispose(&v7, 8);
  return v2;
}

void sub_1860D7D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *_UIEventHIDGetChildScrollEvent(uint64_t a1)
{
  const __CFArray *Children;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const void *ValueAtIndex;

  if (!a1)
    return 0;
  Children = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children)
    return 0;
  v2 = Children;
  Count = CFArrayGetCount(Children);
  if (Count < 1)
    return 0;
  v4 = Count;
  v5 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
    if (IOHIDEventGetType() == 6)
      break;
    if (v4 == ++v5)
      return 0;
  }
  return ValueAtIndex;
}

uint64_t _UIEventHIDIsScrollEvent(uint64_t a1)
{
  uint64_t result;

  if (IOHIDEventGetType() != 6)
    return 0;
  result = _UIEventHIDShouldTransformEvent();
  if ((_DWORD)result)
    return _UIEventHIDGetDescendantPointerEvent(a1) != 0;
  return result;
}

void _UIEventHIDGetTransformEventComponents(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  if (IOHIDEventGetType() == 17)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___UIEventHIDGetTransformEventComponents_block_invoke;
    v8[3] = &unk_1E16DF840;
    v8[4] = &v17;
    v8[5] = &v13;
    v8[6] = &v9;
    _UIEventHIDEnumerateChildren(a1, 0, v8);
  }
  if (a2)
    *a2 = v18[3];
  if (a3)
    *a3 = v14[3];
  if (a4)
    *a4 = v10[3];
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_1860D7FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventHIDTransformPhaseForComponentEvent(uint64_t a1)
{
  unsigned __int16 v2;
  NSObject *v4;
  unint64_t v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t buf[16];

  if (os_variant_has_internal_diagnostics())
  {
    if (!a1)
    {
      __UIFaultDebugAssertLog();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v4, OS_LOG_TYPE_FAULT, "unable to determine transform phase because the hidEvent is nil", buf, 2u);
      }

      return 0;
    }
  }
  else if (!a1)
  {
    v5 = _UIEventHIDTransformPhaseForComponentEvent___s_category;
    if (!_UIEventHIDTransformPhaseForComponentEvent___s_category)
    {
      v5 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v5, (unint64_t *)&_UIEventHIDTransformPhaseForComponentEvent___s_category);
    }
    v6 = *(NSObject **)(v5 + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "unable to determine transform phase because the hidEvent is nil", v7, 2u);
    }
    return 0;
  }
  v2 = IOHIDEventGetPhase() - 1;
  if (v2 <= 7u)
    return qword_186682DC0[(__int16)v2];
  return 0;
}

uint64_t _UIEventHIDTransformPhaseForComponentPhases(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  v3 = a2 | a1 | a3;
  if (v3)
  {
    if (a1 == 4 && a2 == 4 && a3 == 4)
    {
      return 4;
    }
    else if (a1 <= 4
           && ((1 << a1) & 0x19) != 0
           && a2 <= 4
           && ((1 << a2) & 0x19) != 0
           && a3 <= 4
           && ((1 << a3) & 0x19) != 0)
    {
      return 3;
    }
    else
    {
      v3 = 2;
      if (a1 != 2)
      {
        v6 = a1 == 1 || a2 == 1 || a3 == 1;
        if (a3 == 2)
          v6 = 2;
        if (a2 != 2)
          return v6;
      }
    }
  }
  return v3;
}

BOOL _UIEventHIDIsTransformEvent(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (IOHIDEventGetType() != 17)
    return 0;
  v4 = 0;
  v5 = 0;
  v3 = 0;
  _UIEventHIDGetTransformEventComponents(a1, &v5, &v4, &v3);
  return (v5 | v4 | v3) != 0;
}

const void *_UIEventHIDGetChildPointerEvent(uint64_t a1)
{
  const __CFArray *Children;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const void *ValueAtIndex;

  if (!a1)
    return 0;
  Children = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children)
    return 0;
  v2 = Children;
  Count = CFArrayGetCount(Children);
  if (Count < 1)
    return 0;
  v4 = Count;
  v5 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
    if (IOHIDEventGetType() == 17)
      break;
    if (v4 == ++v5)
      return 0;
  }
  return ValueAtIndex;
}

uint64_t _UIEventHIDGetPointerEventSource(uint64_t a1)
{
  void *v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;

  if (!a1)
    return 0;
  BKSHIDEventGetBaseAttributes();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 && (v3 = objc_msgSend(v1, "source") - 9, v3 <= 4))
    v4 = qword_186682E00[v3];
  else
    v4 = 0;

  return v4;
}

uint64_t _UIEventHIDGetInterfaceOrientationForEvent(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  _UIEventHIDUIWindowForHIDEvent();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
LABEL_8:
    v4 = 1;
    goto LABEL_9;
  }
  v4 = objc_msgSend(v2, "_windowInterfaceOrientation");
  if (objc_msgSend((id)UIApp, "isFrontBoard"))
    v4 = objc_msgSend(v3, "_overriddenInterfaceOrientation");
  if (!v4)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___UIEventHIDGetInterfaceOrientationForEvent_block_invoke;
    v7[3] = &unk_1E16B1888;
    v5 = v3;
    v8 = v5;
    v9 = a1;
    if (_UIEventHIDGetInterfaceOrientationForEvent_once != -1)
    {
      dispatch_once(&_UIEventHIDGetInterfaceOrientationForEvent_once, v7);
      v5 = v8;
    }

    goto LABEL_8;
  }
LABEL_9:

  return v4;
}

uint64_t _UIEventHIDButtonMaskFromPointerEventAndChildren(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  if (IOHIDEventGetType() == 17)
  {
    v6[3] = IOHIDEventGetIntegerValue();
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = ___UIEventHIDButtonMaskFromPointerEventAndChildren_block_invoke;
    v4[3] = &unk_1E16B1D90;
    v4[4] = &v5;
    _UIEventHIDEnumerateChildren(a1, 0, v4);
  }
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1860D8710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIEventHIDConvertPointerLocation3DToWindow(uint64_t a1, void *a2)
{
  id *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  double v8;

  if (!a1)
    return *MEMORY[0x1E0CD2538];
  v2 = a2;
  IOHIDEventGetFloatValue();
  v4 = v3;
  IOHIDEventGetFloatValue();
  v6 = v5;
  IOHIDEventGetFloatValue();
  -[UIWindow _fbsScene](v2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = _UIConvertScenePoint3DToWindow(v7, v2, v4, v6);

  return v8;
}

uint64_t _UIEventGetForceEvent(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___UIEventGetForceEvent_block_invoke;
  v3[3] = &unk_1E16B1D90;
  v3[4] = &v4;
  _UIEventHIDEnumerateChildren(a1, 32, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1860D88EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventGetAffineTransformForScaleEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  const __CFArray *v10;
  CGFloat v11;
  CGFloat v12;
  uint64_t v13;
  CFIndex v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  CGAffineTransform v30;
  CGAffineTransform v31;

  result = IOHIDEventGetType();
  if ((_DWORD)result != 7)
  {
    v18 = MEMORY[0x1E0C9BAA8];
    v19 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)a2 = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)(a2 + 16) = v19;
    v20 = *(_OWORD *)(v18 + 32);
LABEL_23:
    *(_OWORD *)(a2 + 32) = v20;
    return result;
  }
  result = IOHIDEventGetDoubleValue();
  v6 = v5;
  v7 = *MEMORY[0x1E0C9D538];
  v8 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v9 = 0.0;
  if (a1 && (result = IOHIDEventGetChildren()) != 0)
  {
    v10 = (const __CFArray *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    v11 = v7;
    v12 = v8;
    if (result >= 1)
    {
      v13 = result;
      v14 = 0;
      v12 = v8;
      v11 = v7;
      do
      {
        CFArrayGetValueAtIndex(v10, v14);
        result = IOHIDEventGetType();
        if ((_DWORD)result == 4)
        {
          IOHIDEventGetDoubleValue();
          v11 = v16;
          result = IOHIDEventGetDoubleValue();
          v12 = v17;
        }
        else if ((_DWORD)result == 5)
        {
          result = IOHIDEventGetDoubleValue();
          v9 = v15;
        }
        ++v14;
      }
      while (v13 != v14);
    }
  }
  else
  {
    v11 = v7;
    v12 = v8;
  }
  v21 = MEMORY[0x1E0C9BAA8];
  v22 = *MEMORY[0x1E0C9BAA8];
  v23 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a2 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a2 + 16) = v23;
  v24 = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(a2 + 32) = v24;
  if (v6 != 0.0)
  {
    *(_OWORD *)&v31.a = v22;
    *(_OWORD *)&v31.c = v23;
    *(_OWORD *)&v31.tx = v24;
    result = (uint64_t)CGAffineTransformScale((CGAffineTransform *)a2, &v31, v6 + 1.0, v6 + 1.0);
  }
  if (v9 != 0.0)
  {
    v25 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v30.a = *(_OWORD *)a2;
    *(_OWORD *)&v30.c = v25;
    *(_OWORD *)&v30.tx = *(_OWORD *)(a2 + 32);
    result = (uint64_t)CGAffineTransformRotate(&v31, &v30, -v9);
    v26 = *(_OWORD *)&v31.c;
    *(_OWORD *)a2 = *(_OWORD *)&v31.a;
    *(_OWORD *)(a2 + 16) = v26;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v31.tx;
  }
  if (v11 != v7 || v12 != v8)
  {
    v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v30.a = *(_OWORD *)a2;
    *(_OWORD *)&v30.c = v28;
    *(_OWORD *)&v30.tx = *(_OWORD *)(a2 + 32);
    result = (uint64_t)CGAffineTransformTranslate(&v31, &v30, v11, v12);
    v29 = *(_OWORD *)&v31.c;
    *(_OWORD *)a2 = *(_OWORD *)&v31.a;
    *(_OWORD *)(a2 + 16) = v29;
    v20 = *(_OWORD *)&v31.tx;
    goto LABEL_23;
  }
  return result;
}

uint64_t _UIPencilInteractionSqueezeIsEnabled()
{
  if (qword_1ECD80100 != -1)
    dispatch_once(&qword_1ECD80100, &__block_literal_global_466);
  return _MergedGlobals_1202;
}

const __CFString *_NSStringFromUIPencilInteractionPhase(unint64_t a1)
{
  if (a1 > 3)
    return &stru_1E16EDF20;
  else
    return off_1E16DFB70[a1];
}

uint64_t _UIPencilPrefersHoverToolPreview()
{
  void *v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  NSObject *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  _UIKitUserDefaults();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("PKUIPencilHoverPreviewEnabledKey"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v2 = objc_msgSend(v1, "BOOLValue");
  else
    v2 = 1;
  v3 = _UIPencilPrefersHoverToolPreview___s_category;
  if (!_UIPencilPrefersHoverToolPreview___s_category)
  {
    v3 = __UILogCategoryGetNode("PencilPreferences", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v3, (unint64_t *)&_UIPencilPrefersHoverToolPreview___s_category);
  }
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v5 = *(NSObject **)(v3 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 134218498;
      v7 = v2;
      v8 = 2112;
      v9 = v1;
      v10 = 2112;
      v11 = CFSTR("PKUIPencilHoverPreviewEnabledKey");
      _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "NSUserDefaults returns value: %li; from object value: %@; for key: %@; ",
        (uint8_t *)&v6,
        0x20u);
    }
  }

  return v2;
}

void _accessibilityOpaqueTouchGestureValueChangedCallback(uint64_t a1, void *a2)
{
  id v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = _accessibilityOpaqueTouchGestureValueChangedCallback___s_category;
  if (!_accessibilityOpaqueTouchGestureValueChangedCallback___s_category)
  {
    v3 = __UILogCategoryGetNode("PencilPreferences", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v3, (unint64_t *)&_accessibilityOpaqueTouchGestureValueChangedCallback___s_category);
  }
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v4 = *(NSObject **)(v3 + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *MEMORY[0x1E0DDDFD8];
      v6 = 138412290;
      v7 = v5;
      _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "Accessibility callback received for notification: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  -[_UIPencilPreferences _preferredTapActionDidChange](v2);
  -[_UIPencilPreferences _preferredSqueezeActionDidChange](v2);

}

void sub_1860DC948(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1860DCAE8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1860DCC7C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1860DD0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIInitializeStateRestorationCollections(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  id result;

  _UIViewControllerRootSet = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E20]);
  *a1 = _UIViewControllerRootSet;
  _UICurrentViewControllerRoots = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  *a2 = _UICurrentViewControllerRoots;
  result = objc_alloc_init(MEMORY[0x1E0C99E08]);
  _UIViewControllerRestorationClassMap = (uint64_t)result;
  *a3 = result;
  return result;
}

void _UIReleaseStateRestorationCollections()
{

  _UIViewControllerRootSet = 0;
  _UICurrentViewControllerRoots = 0;

  _UIViewControllerRestorationClassMap = 0;
}

uint64_t _restorationIdentifierPathArrayForResponder(void *a1)
{
  void *v1;
  uint64_t result;
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = a1;
  result = objc_msgSend(a1, "restorationIdentifier");
  if (!result)
    return result;
  v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", result, 0);
  if (!v1)
    return (uint64_t)v3;
  v4 = v1;
  while (1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      break;
    v5 = +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", v4);
    if (v5)
    {
      v1 = 0;
LABEL_12:
      v4 = v5;
      goto LABEL_13;
    }
    v4 = (void *)objc_msgSend(v4, "superview");
    if (!v4)
      return (uint64_t)v3;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Warning: Asked to chase down view/controller path for unknown type of UIResponder: %@"), "NSArray *_restorationIdentifierPathArrayForResponder(UIResponder *)", v4);
    return (uint64_t)v3;
  }
  if (v4 != v1)
  {
    v1 = 0;
    goto LABEL_13;
  }
  result = objc_msgSend((id)qword_1ECD80168, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%p"), v1));
  if (!result)
  {
    v5 = (id)objc_msgSend(v1, "parentViewController");
    if (v5)
      goto LABEL_12;
    v5 = (id)objc_msgSend(v1, "presentingViewController");
    if (v5)
      goto LABEL_12;
    v4 = (void *)objc_msgSend(v1, "splitViewController");
    if (!v4)
      return (uint64_t)v3;
    while (1)
    {
LABEL_13:
      v6 = v1;
      v12 = 0x7FFFFFFFFFFFFFFFLL;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v7 = objc_msgSend(v4, "_stateRestorationParentForChildViewController:index:", v1, &v12);
        if (v7)
          v1 = (void *)v7;
        else
          v1 = v4;
      }
      else
      {
        v1 = v4;
      }
      v8 = v12;
      if (v12 != 0x7FFFFFFFFFFFFFFFLL
        || v6
        && ((v9 = (void *)objc_msgSend(v1, "childViewControllers")) == 0
          ? (v8 = v12)
          : (v8 = objc_msgSend(v9, "indexOfObject:", v6), v12 = v8),
            v8 != 0x7FFFFFFFFFFFFFFFLL))
      {
        objc_msgSend(v3, "insertObject:atIndex:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(":[%lu]:"), v8), 0);
      }
      v10 = (void *)objc_msgSend((id)qword_1ECD80168, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%p"), v1));
      if (v10)
        break;
      v11 = objc_msgSend(v1, "restorationIdentifier");
      if (v11)
        objc_msgSend(v3, "insertObject:atIndex:", v11, 0);
      v4 = (void *)objc_msgSend(v1, "parentViewController");
      if (!v4)
      {
        v4 = (void *)objc_msgSend(v1, "presentingViewController");
        if (!v4)
        {
          v4 = (void *)objc_msgSend(v1, "splitViewController");
          if (!v4)
            return (uint64_t)v3;
        }
      }
    }
    return objc_msgSend(v10, "arrayByAddingObjectsFromArray:", v3);
  }
  return result;
}

uint64_t _restorationIdentifierPathStringForObject(void *a1)
{
  return objc_msgSend((id)_restorationIdentifierPathArrayForObject(a1), "componentsJoinedByString:", CFSTR("/"));
}

uint64_t _restorationIdentifierPathArrayForObject(void *a1)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id AssociatedObject;
  uint64_t v11;

  if (objc_msgSend(a1, "__isKindOfUIResponder"))
    return _restorationIdentifierPathArrayForResponder(a1);
  if (!objc_msgSend(a1, "conformsToProtocol:", &unk_1EE0CED08))
  {
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Asked to get restoration identifier path for object that is neither a UIResponder or UIStateRestoring - returning nil: %@"), "NSArray *_restorationIdentifierPathArrayForObject", a1);
    return 0;
  }
  if (!objc_getAssociatedObject(a1, &_MergedGlobals_1204))
  {
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Warning: Asked for restoration identifier path for restorable object which doesn't have restoration identifier: %@"), "NSArray *_restorationIdentifierPathForRestorableObject(id<UIStateRestoring>)", a1);
    return 0;
  }
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_opt_class();
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  if (!a1)
    return (uint64_t)v3;
  v5 = v4;
  if ((objc_msgSend(v4, "containsObject:", a1) & 1) != 0)
  {
    v6 = 0;
    v7 = a1;
LABEL_8:
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Warning: restoration path loop found while traversing object's parent. Returning path up to loop point. Initial object: %@, object causing loop: %@, looping is object is parent for %@"), "NSArray *_restorationIdentifierPathForRestorableObject(id<UIStateRestoring>)", a1, v7, v6);
    return (uint64_t)v3;
  }
  v8 = a1;
  while (1)
  {
    objc_msgSend(v5, "addObject:", v8);
    v9 = (void *)objc_msgSend((id)qword_1ECD80168, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%p"), v8));
    if (v9)
      return objc_msgSend(v9, "arrayByAddingObjectsFromArray:", v3);
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v9 = (void *)_restorationIdentifierPathArrayForResponder(v8);
      return objc_msgSend(v9, "arrayByAddingObjectsFromArray:", v3);
    }
    AssociatedObject = objc_getAssociatedObject(v8, &_MergedGlobals_1204);
    if (AssociatedObject)
      objc_msgSend(v3, "insertObject:atIndex:", AssociatedObject, 0);
    if ((objc_opt_respondsToSelector() & 1) == 0)
      return (uint64_t)v3;
    v11 = objc_msgSend(v8, "restorationParent");
    if (!v11)
      return (uint64_t)v3;
    v7 = (void *)v11;
    v6 = v8;
    v8 = (void *)v11;
    if (objc_msgSend(v5, "containsObject:", v11))
      goto LABEL_8;
  }
}

void _UIAddViewControllerToRoots(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((objc_msgSend((id)_UIViewControllerRootSet, "containsObject:", a1) & 1) == 0)
  {
    objc_msgSend((id)_UIViewControllerRootSet, "addObject:", a1);
    objc_msgSend((id)_UICurrentViewControllerRoots, "addObject:", a1);
    v2 = objc_msgSend(a1, "_restorationClassName");
    if (v2)
    {
      v3 = v2;
      v4 = objc_msgSend(a1, "_restorationIdentifierPath");
      if (v4)
      {
        objc_msgSend((id)_UIViewControllerRestorationClassMap, "setObject:forKey:", v3, v4);
      }
      else if (_UIStateRestorationDebugLogEnabled())
      {
        NSLog(CFSTR("%s: Warning: View Controller added to root set doesn't have an identifier path, can't save mapping for restoration class: %@"), "void _UIAddViewControllerToRoots(UIViewController *)", a1);
      }
    }
  }
}

void _UIAddObjectToStateRestorationRoots(void *a1)
{
  objc_class *v2;
  NSString *v3;
  NSString *v4;
  uint64_t v5;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    _UIAddViewControllerToRoots(a1);
  }
  else if (objc_msgSend(a1, "conformsToProtocol:", &unk_1EE0CED08))
  {
    if ((objc_msgSend((id)_UIViewControllerRootSet, "containsObject:", a1) & 1) == 0)
    {
      objc_msgSend((id)_UIViewControllerRootSet, "addObject:", a1);
      objc_msgSend((id)_UICurrentViewControllerRoots, "addObject:", a1);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v2 = (objc_class *)objc_msgSend(a1, "objectRestorationClass");
        if (v2)
        {
          v3 = NSStringFromClass(v2);
          if (v3)
          {
            v4 = v3;
            v5 = objc_msgSend((id)_restorationIdentifierPathArrayForObject(a1), "componentsJoinedByString:", CFSTR("/"));
            if (v5)
            {
              objc_msgSend((id)_UIViewControllerRestorationClassMap, "setObject:forKey:", v4, v5);
            }
            else if (_UIStateRestorationDebugLogEnabled())
            {
              NSLog(CFSTR("%s: Warning: Restorable Object added to root set doesn't have an identifier path, can't save mapping for restoration class: %@"), "void _UIAddRestorableObjectToRoots(NSObject<UIStateRestoring> *)", a1);
            }
          }
        }
      }
    }
  }
  else if (_UIStateRestorationDebugLogEnabled())
  {
    NSLog(CFSTR("%s: Warning: called with object which is not a View Controller, or is not a Restorable Object, skipping: %@"), "void _UIAddObjectToStateRestorationRoots", a1);
  }
}

uint64_t decodeSomeKindOfObject(void *a1, uint64_t a2, const char *a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v18;
  objc_super v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v22;
    v18 = a1;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v22 != v8)
          objc_enumerationMutation(a1);
        v10 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        v11 = objc_opt_class();
        v12 = objc_opt_class();
        if ((void *)v11 == v10
          || (objc_msgSend(v10, "isSubclassOfClass:", v11) & 1) != 0
          || (v13 = (uint64_t)v10, objc_msgSend(v10, "conformsToProtocol:", &unk_1EE0CED08)))
        {
          v13 = objc_opt_class();
        }
        if ((void *)v12 == v10 || objc_msgSend(v10, "isSubclassOfClass:", v12))
          v13 = objc_opt_class();
        if (v10 != (void *)v13)
        {
          if (_UIStateRestorationDebugLogEnabled())
            NSLog(CFSTR("%s: Unarchiving building class list, replaced class in list for key %@ from requested class %@, to class %@"), "id decodeSomeKindOfObject(NSSet<Class> *, NSString *, SEL, UIStateRestorationKeyedUnarchiver *)", a2, v10, v13);
          if (!v7)
          {
            v7 = (void *)objc_msgSend(a1, "mutableCopy");
            v18 = v7;
          }
          objc_msgSend(v7, "addObject:", v13);
        }
      }
      v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v6);
  }
  else
  {
    v7 = 0;
    v18 = a1;
  }
  v20.receiver = a4;
  v20.super_class = (Class)objc_msgSend(a4, "superclass");
  v14 = (uint64_t)objc_msgSendSuper(&v20, a3, v18, a2);
  if (v14 && v7)
    v14 = verifyDecodedObject(v14, a2, a1, objc_msgSend(a4, "decodingFailurePolicy"));

  return v14;
}

uint64_t verifyDecodedObject(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    while (2)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(a3);
        v12 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v11);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (_UIStateRestorationDebugLogEnabled())
          {
            v14 = objc_opt_class();
            NSLog(CFSTR("%s: Unarchiving verified object for key %@ isKindOfClass %@, object class is %@"), "id verifyDecodedObject(id, NSString *, NSSet<Class> *, NSDecodingFailurePolicy)", a2, v12, v14);
          }
          return a1;
        }
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v9)
        continue;
      break;
    }
  }
  v13 = objc_opt_class();
  NSLog(CFSTR("%s: Unarchiving error: value for key %@ was of unexpected class %@. Allowed classes are %@"), "id verifyDecodedObject(id, NSString *, NSSet<Class> *, NSDecodingFailurePolicy)", a2, v13, a3);
  if (a4)
    return 0;
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("value for key %@ was of unexpected class %@. Allowed classes are %@"), a2, objc_opt_class(), a3);
  return a1;
}

void _UISaveReferencedChildViewControllers(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  if (objc_msgSend(a1, "count"))
  {
    v4 = 0;
    while (1)
    {
      v5 = (void *)objc_msgSend(a1, "objectAtIndex:", v4);
      v6 = objc_msgSend(v5, "_restorationIdentifierPath");
      if (v6)
      {
        _UIAddViewControllerToRoots(v5);
      }
      else if (_UIStateRestorationDebugLogEnabled())
      {
        NSLog(CFSTR("%s: Child view controller at index [%d] doesn't have restoration identifier, not adding to root set: %@"), "void _UISaveReferencedChildViewControllers(NSArray *, BOOL (^)(UIViewController *, NSString *))", v4, v5);
      }
      if (a2 && ((*(uint64_t (**)(uint64_t, void *, uint64_t))(a2 + 16))(a2, v5, v6) & 1) == 0)
        break;
      if (objc_msgSend(a1, "count") <= (unint64_t)++v4)
        return;
    }
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Callback returned NO for child view controller at index [%d], bailing: %@"), "void _UISaveReferencedChildViewControllers(NSArray *, BOOL (^)(UIViewController *, NSString *))", v4, v5);
  }
}

uint64_t _rebuildStateRestorationIdentifierPath(void *a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a2, "containsObject:", a1);
  if ((result & 1) == 0)
  {
    objc_msgSend(a2, "addObject:", a1);
    result = objc_msgSend(a1, "restorationIdentifier");
    if (result)
    {
      objc_msgSend(a1, "setRestorationIdentifier:", result);
      v5 = objc_msgSend(a1, "childModalViewController");
      if (v5)
        _rebuildStateRestorationIdentifierPath(v5, a2);
      v6 = (void *)objc_msgSend(a1, "_allContainedViewControllers");
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0u;
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v12;
        do
        {
          v10 = 0;
          do
          {
            if (*(_QWORD *)v12 != v9)
              objc_enumerationMutation(v6);
            _rebuildStateRestorationIdentifierPath(*(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v10++), a2);
          }
          while (v8 != v10);
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        }
        while (v8);
      }
      result = objc_msgSend(a1, "isViewLoaded");
      if ((_DWORD)result)
      {
        result = objc_msgSend(a1, "view");
        if (result)
          return (uint64_t)_rebuildStateRestorationIdentifierPathForViews((void *)result, a1);
      }
    }
  }
  return result;
}

void UIAddObjectToStateRestorationRoots(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;

  v2 = _restorationIdentifierForObject(a1);
  if (v2)
  {
    v3 = (uint64_t)v2;
    v4 = (id)qword_1ECD80190;
    if (!qword_1ECD80190)
    {
      v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      qword_1ECD80190 = (uint64_t)v4;
    }
    _putObjectIdentifierIntoRestorationIdentifierMap(a1, v3, v4);
  }
  else if (_UIStateRestorationDebugLogEnabled())
  {
    NSLog(CFSTR("%s: Object does not have restoration identifier, or is not a UIResponder or UIStateRestoring: %@"), "void UIAddObjectToStateRestorationRoots(id<UIStateRestoring>)", a1);
  }
}

id _restorationIdentifierForObject(void *a1)
{
  if (objc_msgSend(a1, "__isKindOfUIResponder"))
    return (id)objc_msgSend(a1, "restorationIdentifier");
  if (objc_msgSend(a1, "conformsToProtocol:", &unk_1EE0CED08))
    return objc_getAssociatedObject(a1, &_MergedGlobals_1204);
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Asked to get restoration identifier for object that is neither a UIResponder or UIStateRestoring - returning nil: %@"), "NSString *_restorationIdentifierForObject", a1);
  return 0;
}

void _putObjectIdentifierIntoRestorationIdentifierMap(void *a1, uint64_t a2, void *a3)
{
  void *v6;
  void *v7;

  v6 = (void *)_restorationIdentifierPathArrayForObject(a1);
  if (v6 && (v7 = v6, objc_msgSend(v6, "count")))
    objc_msgSend(a3, "setObject:forKey:", a1, objc_msgSend(v7, "componentsJoinedByString:", CFSTR("/")));
  else
    NSLog(CFSTR("%s: Warning: Couldn't get identifier components for restoration identifier path for object with identifier %@: %@"), "void _putObjectIdentifierIntoRestorationIdentifierMap(NSObject *, NSString *, NSMutableDictionary *, NSString *)", a2, a1);
}

void UIRemoveObjectFromStateRestorationRoots(void *a1)
{
  uint64_t v2;

  v2 = objc_msgSend((id)_restorationIdentifierPathArrayForObject(a1), "componentsJoinedByString:", CFSTR("/"));
  if (v2)
  {
    objc_msgSend((id)qword_1ECD80190, "removeObjectForKey:", v2);
  }
  else if (_UIStateRestorationDebugLogEnabled())
  {
    NSLog(CFSTR("%s: Object does not have restoration identifier path, or is not a UIResponder or UIStateRestoring: %@"), "void UIRemoveObjectFromStateRestorationRoots(id<UIStateRestoring>)", a1);
  }
}

uint64_t _deleteStateRestorationArchiveForApplication(uint64_t a1, void *a2)
{
  uint64_t result;

  result = CFPreferencesGetAppBooleanValue(CFSTR("UIStateRestorationDeveloperMode"), (CFStringRef)*MEMORY[0x1E0C9B248], 0);
  if (!(_DWORD)result)
  {
    result = _stateRestorationPathForBundleIdentifier(a1, a2);
    if (result)
      return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtURL:error:", result, 0);
  }
  return result;
}

void sub_1860E2CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  id v14;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v14 = objc_begin_catch(exception_object);
  NSLog(CFSTR("%s: Exception occurred trying to delete restorable state: %@"), "void _deleteStateRestorationArchiveForApplication(NSString *, NSString *)", v14);
  objc_end_catch();
}

uint64_t _applicationCanBeRestored(uint64_t a1, void *a2)
{
  unsigned int v2;
  const char *v3;
  const char *v4;
  const char *v5;
  char v7;

  v7 = 1;
  v2 = _checkApplicationRestorationState(a1, a2, &v7);
  if (_UIStateRestorationDebugLogEnabled())
  {
    v3 = "No";
    if (v2)
      v4 = "Yes";
    else
      v4 = "No";
    if (v7)
      v5 = v4;
    else
      v5 = "No";
    if (v7)
      v3 = "Yes";
    NSLog(CFSTR("%s: Returning %s, useSnapshot = %s, canBeRestored = %s"), "BOOL _applicationCanBeRestored(NSString *, NSString *)", v5, v3, v4);
  }
  if (v7)
    return v2;
  else
    return 0;
}

id _rebuildStateRestorationIdentifierPathForViews(void *a1, id a2)
{
  id result;
  BOOL v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];

  result = +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", a1);
  if (result)
    v5 = result == a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = objc_msgSend(a1, "restorationIdentifier");
    if (v6)
      objc_msgSend(a1, "setRestorationIdentifier:", v6);
    v7 = (void *)objc_msgSend(a1, "subviews");
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___rebuildStateRestorationIdentifierPathForViews_block_invoke;
    v8[3] = &unk_1E16DFC30;
    v8[4] = a2;
    return (id)objc_msgSend(v7, "enumerateObjectsUsingBlock:", v8);
  }
  return result;
}

uint64_t ___rebuildStateRestorationIdentifierPathForViews_block_invoke(uint64_t a1, uint64_t a2)
{
  return _rebuildStateRestorationIdentifierPathForViews(a2, *(_QWORD *)(a1 + 32));
}

void sub_1860E3C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1860E3F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _cacheAccessQueue()
{
  if (qword_1ECD801A0 != -1)
    dispatch_once(&qword_1ECD801A0, &__block_literal_global_468);
  return (id)_MergedGlobals_1205;
}

void ___cacheAccessQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.UIKit UIstatusBarForegroundStyleAttributes cache access queue", 0);
  v1 = (void *)_MergedGlobals_1205;
  _MergedGlobals_1205 = (uint64_t)v0;

}

void sub_1860ED298(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1860EDEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UICollectionViewSetupExpandCollapseAnimations(void *a1, void *a2, void *a3)
{
  id v5;
  id *v6;
  id v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  void *v33;
  void *v34;
  BOOL v35;
  id v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t j;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  _BOOL4 v61;
  double v62;
  double v63;
  CGFloat v64;
  double v65;
  double v66;
  double v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  double MaxX;
  double MinX;
  double MaxY;
  double v75;
  double MinY;
  void *v77;
  void *v78;
  void *v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t k;
  void *v108;
  void *v109;
  void *v110;
  BOOL v111;
  id v112;
  uint64_t v113;
  double v114;
  double v115;
  uint64_t v116;
  uint64_t m;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  CGFloat v139;
  double v140;
  double v141;
  double v142;
  CGFloat v143;
  CGFloat v144;
  CGFloat v145;
  CGFloat v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  void *v152;
  void *v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  id v173;
  id *v174;
  id *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t n;
  void *v179;
  id v180;
  id v181;
  id *v182;
  id *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t ii;
  void *v187;
  id v188;
  void *v189;
  void *v190;
  uint64_t v191;
  void *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  double v197;
  uint64_t v198;
  uint64_t v199;
  id *v200;
  id *v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  id v206;
  void *v207;
  void *v208;
  id v209;
  void *v210;
  void *v211;
  id v212;
  void *v213;
  void *v214;
  id v215;
  id v216;
  id obj;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  id *v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  double v225;
  uint64_t v226;
  double v227;
  double v228;
  double v229;
  double v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  id v236;
  void *v237;
  id v238;
  id v239;
  id v240;
  uint64_t v241;
  id v242;
  double v243;
  id v244;
  double v245;
  double v246;
  _QWORD v247[4];
  id v248;
  uint64_t *v249;
  double v250;
  uint64_t v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  _QWORD v261[19];
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  double *v275;
  uint64_t v276;
  void *v277;
  __int128 v278;
  _QWORD v279[19];
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  _BYTE v292[128];
  _BYTE v293[128];
  _BYTE v294[128];
  _BYTE v295[128];
  _BYTE v296[128];
  _BYTE v297[128];
  _BYTE v298[128];
  _BYTE v299[128];
  uint64_t v300;
  CGRect v301;
  CGRect v302;
  CGRect v303;
  CGRect v304;
  CGRect v305;

  v300 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v237 = v5;
  v221 = v6;
  if (v5)
  {
    if (v6)
      goto LABEL_3;
LABEL_213:
    v209 = v7;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v210 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
    v211 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v210, "handleFailureInFunction:file:lineNumber:description:", v211, CFSTR("UICollectionViewExpandCollapseAnimationGeneration.m"), 15, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("context != nil"));

    v6 = v221;
    v7 = v209;
    if (v209)
      goto LABEL_4;
    goto LABEL_214;
  }
  v206 = v7;
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v207, "handleFailureInFunction:file:lineNumber:description:", v208, CFSTR("UICollectionViewExpandCollapseAnimationGeneration.m"), 14, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("collectionView != nil"));

  v6 = v221;
  v7 = v206;
  if (!v221)
    goto LABEL_213;
LABEL_3:
  if (v7)
    goto LABEL_4;
LABEL_214:
  v212 = v7;
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
  v214 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v213, "handleFailureInFunction:file:lineNumber:description:", v214, CFSTR("UICollectionViewExpandCollapseAnimationGeneration.m"), 16, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("expandCollapseAnimationContext != nil"));

  v6 = v221;
  v7 = v212;
LABEL_4:
  v8 = v6 == 0;
  v234 = v7;
  objc_msgSend(v7, "indexPathsForExpandedParentItems");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v237, "_indexPathsAfterShadowUpdatesForIndexPaths:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = v10;
  objc_msgSend(v234, "indexPathsForCollapsedParentItems");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v237, "_indexPathsAfterShadowUpdatesForIndexPaths:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v216 = v13;
  if (v8)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v14 = v221[6];
    v15 = v221[7];
  }
  v244 = v15;
  objc_msgSend(v237, "_visibleBounds");
  v222 = v17;
  v223 = v16;
  v224 = v19;
  v225 = v18;
  v288 = 0u;
  v289 = 0u;
  v290 = 0u;
  v291 = 0u;
  obj = v11;
  v232 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v288, v299, 16);
  if (v232)
  {
    v226 = *(_QWORD *)v289;
    v228 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v230 = *MEMORY[0x1E0C9D538];
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v289 != v226)
        {
          v21 = v20;
          objc_enumerationMutation(obj);
          v20 = v21;
        }
        v235 = v20;
        v238 = *(id *)(*((_QWORD *)&v288 + 1) + 8 * v20);
        objc_msgSend(v237, "_indexPathBeforeShadowUpdatesForIndexPath:");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v234, "indexPathsForChildItemsInExpandingParent:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v237, "_indexPathsAfterShadowUpdatesForIndexPaths:", v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        v240 = v24;
        objc_msgSend(v237, "cellForItemAtIndexPath:", v238);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "_layoutAttributes");
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        if (v26)
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v240, "count"));
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v286 = 0u;
          v287 = 0u;
          v284 = 0u;
          v285 = 0u;
          v28 = v240;
          v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v284, v298, 16);
          if (v29)
          {
            v30 = *(_QWORD *)v285;
            do
            {
              for (i = 0; i != v29; ++i)
              {
                if (*(_QWORD *)v285 != v30)
                  objc_enumerationMutation(v28);
                v32 = *(void **)(*((_QWORD *)&v284 + 1) + 8 * i);
                +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v32);
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v14, "objectForKeyedSubscript:", v33);
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                v35 = v34 == 0;

                if (!v35)
                  objc_msgSend(v27, "addObject:", v32);

              }
              v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v284, v298, 16);
            }
            while (v29);
          }

          v36 = v27;
          v282 = 0u;
          v283 = 0u;
          v280 = 0u;
          v281 = 0u;
          v242 = v36;
          v37 = objc_msgSend(v242, "countByEnumeratingWithState:objects:count:", &v280, v297, 16);
          v39 = v228;
          v38 = v230;
          v245 = v228;
          v40 = v230;
          if (v37)
          {
            v41 = *(_QWORD *)v281;
            v39 = v228;
            v38 = v230;
            v245 = v228;
            v40 = v230;
            do
            {
              for (j = 0; j != v37; ++j)
              {
                if (*(_QWORD *)v281 != v41)
                  objc_enumerationMutation(v242);
                v43 = *(void **)(*((_QWORD *)&v280 + 1) + 8 * j);
                +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v43);
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v14, "objectForKey:", v44);
                v45 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v45, "view");
                v46 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v46, "_layoutAttributes");
                v47 = (void *)objc_claimAutoreleasedReturnValue();

                if (!v47)
                {
                  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                  v77 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
                  v78 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v77, "handleFailureInFunction:file:lineNumber:description:", v78, CFSTR("UICollectionViewExpandCollapseAnimationGeneration.m"), 67, CFSTR("Unable to get initial attributes for expanding item at index path %@"), v43);

                }
                objc_msgSend(v14, "objectForKey:", v44);
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v48, "finalLayoutAttributes");
                v49 = (void *)objc_claimAutoreleasedReturnValue();

                if (!v49)
                {
                  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                  v218 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
                  v79 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v218, "handleFailureInFunction:file:lineNumber:description:", v79, CFSTR("UICollectionViewExpandCollapseAnimationGeneration.m"), 70, CFSTR("Unable to get final attributes for expanding item at index path %@"), v43);

                }
                objc_msgSend(v47, "center");
                v51 = v50;
                objc_msgSend(v26, "center");
                v53 = v52;
                objc_msgSend(v47, "center");
                v55 = v54;
                objc_msgSend(v26, "center");
                v56 = v51 - v53;
                v58 = v55 - v57;
                if (v38 >= v51 - v53)
                  v59 = v38;
                else
                  v59 = v51 - v53;
                if (v38 >= v51 - v53)
                  v60 = v51 - v53;
                else
                  v60 = v38;
                v61 = v56 >= 0.0;
                if (v56 < 0.0)
                  v38 = v60;
                else
                  v38 = v59;
                if (v39 >= v58)
                  v62 = v39;
                else
                  v62 = v58;
                if (v39 >= v58)
                  v63 = v58;
                else
                  v63 = v39;
                if (v58 < 0.0)
                  v39 = v63;
                else
                  v39 = v62;
                objc_msgSend(v49, "frame");
                v68 = v64;
                v69 = v65;
                v70 = v66;
                v71 = v67;
                if (v61)
                {
                  MaxX = CGRectGetMaxX(*(CGRect *)&v64);
                  if (MaxX >= v40)
                    v40 = MaxX;
                }
                else
                {
                  MinX = CGRectGetMinX(*(CGRect *)&v64);
                  if (MinX < v40)
                    v40 = MinX;
                }
                if (v58 < 0.0)
                {
                  v302.origin.x = v68;
                  v302.origin.y = v69;
                  v302.size.width = v70;
                  v302.size.height = v71;
                  MinY = CGRectGetMinY(v302);
                  v75 = v245;
                  if (MinY < v245)
                    v75 = MinY;
                }
                else
                {
                  v301.origin.x = v68;
                  v301.origin.y = v69;
                  v301.size.width = v70;
                  v301.size.height = v71;
                  MaxY = CGRectGetMaxY(v301);
                  v75 = v245;
                  if (MaxY >= v245)
                    v75 = MaxY;
                }
                v245 = v75;

              }
              v37 = objc_msgSend(v242, "countByEnumeratingWithState:objects:count:", &v280, v297, 16);
            }
            while (v37);
          }

          objc_msgSend(v26, "frame");
          v84 = v83;
          v85 = v80;
          v86 = v81;
          v87 = v82;
          v88 = -v39;
          if (v39 >= 0.0)
            v88 = v39;
          if (v88 <= 0.0)
          {
            if (v38 < 0.0)
            {
              v93 = v84;
              v94 = CGRectGetMinX(*(CGRect *)(&v80 - 1));
              if (v40 - v94 >= 0.0)
                v86 = v40 - v94;
              else
                v86 = -(v40 - v94);
              v84 = v94 - v86;
              v92 = 0.0;
              v91 = v87;
              v90 = v85;
              goto LABEL_85;
            }
            v96 = v84;
            v84 = CGRectGetMaxX(*(CGRect *)(&v80 - 1));
            if (v40 - v84 >= 0.0)
              v86 = v40 - v84;
            else
              v86 = -(v40 - v84);
            v92 = 0.0;
            v91 = v87;
          }
          else
          {
            if (v39 < 0.0)
            {
              v89 = v84;
              v90 = CGRectGetMinY(*(CGRect *)(&v80 - 1));
              if (v245 - v90 >= 0.0)
                v87 = v245 - v90;
              else
                v87 = -(v245 - v90);
              v85 = v90 - v87;
              v91 = 0.0;
              v92 = v86;
LABEL_84:
              v94 = v84;
LABEL_85:
              v279[0] = MEMORY[0x1E0C809B0];
              v279[1] = 3221225472;
              v279[2] = ___UICollectionViewSetupExpandCollapseAnimations_block_invoke;
              v279[3] = &unk_1E16DFDA8;
              v279[4] = v238;
              v279[5] = v223;
              v279[6] = v222;
              *(double *)&v279[7] = v225;
              *(double *)&v279[8] = v224;
              *(double *)&v279[9] = v38;
              *(double *)&v279[10] = v39;
              *(double *)&v279[11] = v94;
              *(double *)&v279[12] = v90;
              *(double *)&v279[13] = v92;
              *(double *)&v279[14] = v91;
              *(double *)&v279[15] = v84;
              *(double *)&v279[16] = v85;
              *(double *)&v279[17] = v86;
              *(double *)&v279[18] = v87;
              objc_msgSend(v14, "enumerateKeysAndObjectsUsingBlock:", v279);

              goto LABEL_86;
            }
            v95 = v84;
            v85 = CGRectGetMaxY(*(CGRect *)(&v80 - 1));
            if (v245 - v85 >= 0.0)
              v87 = v245 - v85;
            else
              v87 = -(v245 - v85);
            v91 = 0.0;
            v92 = v86;
          }
          v90 = v85;
          goto LABEL_84;
        }
LABEL_86:

        v20 = v235 + 1;
      }
      while (v235 + 1 != v232);
      v232 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v288, v299, 16);
    }
    while (v232);
  }

  v274 = 0;
  v275 = (double *)&v274;
  v276 = 0x3010000000;
  v277 = &unk_18685B0AF;
  v278 = xmmword_1866792D0;
  v270 = 0u;
  v271 = 0u;
  v272 = 0u;
  v273 = 0u;
  v215 = v216;
  v220 = objc_msgSend(v215, "countByEnumeratingWithState:objects:count:", &v270, v296, 16);
  if (v220)
  {
    v219 = *(_QWORD *)v271;
    v227 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v229 = *MEMORY[0x1E0C9D538];
    do
    {
      v233 = 0;
      do
      {
        if (*(_QWORD *)v271 != v219)
          objc_enumerationMutation(v215);
        v97 = *(void **)(*((_QWORD *)&v270 + 1) + 8 * v233);
        v241 = objc_msgSend(v97, "section");
        v231 = v97;
        objc_msgSend(v237, "_indexPathBeforeShadowUpdatesForIndexPath:", v97);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v234, "indexPathsForChildItemsInCollapsingParent:", v98);
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v237, "_indexPathsAfterShadowUpdatesForIndexPaths:", v99);
        v100 = (void *)objc_claimAutoreleasedReturnValue();

        v236 = v100;
        objc_msgSend(v237, "cellForItemAtIndexPath:", v231);
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "_layoutAttributes");
        v102 = (void *)objc_claimAutoreleasedReturnValue();

        if (v102)
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v236, "count"));
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          v268 = 0u;
          v269 = 0u;
          v266 = 0u;
          v267 = 0u;
          v104 = v236;
          v105 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v266, v295, 16);
          if (v105)
          {
            v106 = *(_QWORD *)v267;
            do
            {
              for (k = 0; k != v105; ++k)
              {
                if (*(_QWORD *)v267 != v106)
                  objc_enumerationMutation(v104);
                v108 = *(void **)(*((_QWORD *)&v266 + 1) + 8 * k);
                +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v108);
                v109 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v244, "objectForKeyedSubscript:", v109);
                v110 = (void *)objc_claimAutoreleasedReturnValue();
                v111 = v110 == 0;

                if (!v111)
                  objc_msgSend(v103, "addObject:", v108);

              }
              v105 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v266, v295, 16);
            }
            while (v105);
          }

          v112 = v103;
          v264 = 0u;
          v265 = 0u;
          v262 = 0u;
          v263 = 0u;
          v239 = v112;
          v113 = objc_msgSend(v239, "countByEnumeratingWithState:objects:count:", &v262, v294, 16);
          v114 = v227;
          v243 = v229;
          v115 = v227;
          v246 = v229;
          if (v113)
          {
            v116 = *(_QWORD *)v263;
            v114 = v227;
            v243 = v229;
            v115 = v227;
            v246 = v229;
            do
            {
              for (m = 0; m != v113; ++m)
              {
                if (*(_QWORD *)v263 != v116)
                  objc_enumerationMutation(v239);
                v118 = *(void **)(*((_QWORD *)&v262 + 1) + 8 * m);
                +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v118);
                v119 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v244, "objectForKeyedSubscript:", v119);
                v120 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v120, "view");
                v121 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v121, "_layoutAttributes");
                v122 = (void *)objc_claimAutoreleasedReturnValue();

                if (!v122)
                {
                  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                  v152 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
                  v153 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v152, "handleFailureInFunction:file:lineNumber:description:", v153, CFSTR("UICollectionViewExpandCollapseAnimationGeneration.m"), 186, CFSTR("Could not find layout attributes for collapsing item at index path %@"), v118);

                }
                objc_msgSend(v122, "center");
                v124 = v123;
                objc_msgSend(v102, "center");
                v126 = v125;
                objc_msgSend(v122, "center");
                v128 = v127;
                objc_msgSend(v102, "center");
                v129 = v114;
                v130 = v124 - v126;
                v131 = v115;
                v133 = v128 - v132;
                v134 = v246;
                if (v246 >= v124 - v126)
                  v135 = v246;
                else
                  v135 = v124 - v126;
                if (v246 >= v124 - v126)
                  v134 = v124 - v126;
                if (v130 < 0.0)
                  v135 = v134;
                v246 = v135;
                if (v131 >= v133)
                  v136 = v131;
                else
                  v136 = v133;
                if (v131 >= v133)
                  v137 = v133;
                else
                  v137 = v131;
                if (v133 < 0.0)
                  v138 = v137;
                else
                  v138 = v136;
                objc_msgSend(v122, "frame");
                v143 = v139;
                v144 = v140;
                v145 = v141;
                v146 = v142;
                if (v130 < 0.0)
                {
                  v149 = CGRectGetMinX(*(CGRect *)&v139);
                  v148 = v243;
                  if (v149 < v243)
                    v148 = v149;
                }
                else
                {
                  v147 = CGRectGetMaxX(*(CGRect *)&v139);
                  v148 = v243;
                  if (v147 >= v243)
                    v148 = v147;
                }
                v243 = v148;
                if (v133 < 0.0)
                {
                  v304.origin.x = v143;
                  v304.origin.y = v144;
                  v304.size.width = v145;
                  v304.size.height = v146;
                  v151 = CGRectGetMinY(v304);
                  v115 = v138;
                  if (v151 >= v129)
                    v114 = v129;
                  else
                    v114 = v151;
                }
                else
                {
                  v303.origin.x = v143;
                  v303.origin.y = v144;
                  v303.size.width = v145;
                  v303.size.height = v146;
                  v150 = CGRectGetMaxY(v303);
                  v115 = v138;
                  if (v150 >= v129)
                    v114 = v150;
                  else
                    v114 = v129;
                }

              }
              v113 = objc_msgSend(v239, "countByEnumeratingWithState:objects:count:", &v262, v294, 16);
            }
            while (v113);
          }

          if (v275[4] == 1.79769313e308 && v275[5] == 1.79769313e308)
          {
            objc_msgSend(v102, "center");
            *((_QWORD *)v275 + 4) = v203;
            objc_msgSend(v102, "center");
            *((_QWORD *)v275 + 5) = v204;
          }
          else
          {
            objc_msgSend(v102, "center");
            if (v154 < v275[4])
              v154 = v275[4];
            v275[4] = v154;
            objc_msgSend(v102, "center");
            v156 = v275[5];
            if (v155 >= v156)
              v156 = v155;
            v275[5] = v156;
          }
          objc_msgSend(v102, "frame");
          v161 = v160;
          v162 = v157;
          v163 = v158;
          v164 = v159;
          v165 = -v115;
          if (v115 >= 0.0)
            v165 = v115;
          if (v165 <= 0.0)
          {
            if (v246 >= 0.0)
            {
              v172 = v161;
              v161 = CGRectGetMaxX(*(CGRect *)(&v157 - 1));
              if (v243 - v161 >= 0.0)
                v163 = v243 - v161;
              else
                v163 = -(v243 - v161);
              v170 = 0.0;
              v168 = v161;
            }
            else
            {
              v169 = v161;
              v168 = CGRectGetMinX(*(CGRect *)(&v157 - 1));
              if (v243 - v168 >= 0.0)
                v163 = v243 - v168;
              else
                v163 = -(v243 - v168);
              v161 = v168 - v163;
              v170 = 0.0;
            }
            v166 = v162;
            v167 = v164;
          }
          else
          {
            if (v115 >= 0.0)
            {
              v171 = v161;
              v162 = CGRectGetMaxY(*(CGRect *)(&v157 - 1));
              if (v114 - v162 >= 0.0)
                v164 = v114 - v162;
              else
                v164 = -(v114 - v162);
              v167 = 0.0;
              v168 = v161;
              v166 = v162;
            }
            else
            {
              objc_msgSend(v102, "frame");
              v166 = CGRectGetMinY(v305);
              if (v114 - v166 >= 0.0)
                v164 = v114 - v166;
              else
                v164 = -(v114 - v166);
              v162 = v166 - v164;
              v167 = 0.0;
              v168 = v161;
            }
            v170 = v163;
          }
          v261[0] = MEMORY[0x1E0C809B0];
          v261[1] = 3221225472;
          v261[2] = ___UICollectionViewSetupExpandCollapseAnimations_block_invoke_3;
          v261[3] = &unk_1E16DFDA8;
          v261[4] = v231;
          v261[5] = v223;
          v261[6] = v222;
          *(double *)&v261[7] = v225;
          *(double *)&v261[8] = v224;
          *(double *)&v261[9] = v161;
          *(double *)&v261[10] = v162;
          *(double *)&v261[11] = v163;
          *(double *)&v261[12] = v164;
          *(double *)&v261[13] = v168;
          *(double *)&v261[14] = v166;
          *(double *)&v261[15] = v170;
          *(double *)&v261[16] = v167;
          *(double *)&v261[17] = v246;
          *(double *)&v261[18] = v115;
          objc_msgSend(v244, "enumerateKeysAndObjectsUsingBlock:", v261);
          v173 = objc_alloc_init(MEMORY[0x1E0C99E20]);
          v259 = 0u;
          v260 = 0u;
          v257 = 0u;
          v258 = 0u;
          v174 = v221;
          if (v221)
            v174 = (id *)v221[9];
          v175 = v174;
          v176 = objc_msgSend(v175, "countByEnumeratingWithState:objects:count:", &v257, v293, 16);
          if (v176)
          {
            v177 = *(_QWORD *)v258;
            do
            {
              for (n = 0; n != v176; ++n)
              {
                if (*(_QWORD *)v258 != v177)
                  objc_enumerationMutation(v175);
                v179 = *(void **)(*((_QWORD *)&v257 + 1) + 8 * n);
                if ((unint64_t)objc_msgSend(v179, "length") >= 2 && objc_msgSend(v179, "section") == v241)
                  objc_msgSend(v173, "addObject:", v179);
              }
              v176 = objc_msgSend(v175, "countByEnumeratingWithState:objects:count:", &v257, v293, 16);
            }
            while (v176);
          }

          v180 = v173;
          v181 = objc_alloc_init(MEMORY[0x1E0C99E20]);
          v255 = 0u;
          v256 = 0u;
          v253 = 0u;
          v254 = 0u;
          v182 = v221;
          if (v221)
            v182 = (id *)v221[10];
          v183 = v182;
          v184 = objc_msgSend(v183, "countByEnumeratingWithState:objects:count:", &v253, v292, 16);
          if (v184)
          {
            v185 = *(_QWORD *)v254;
            do
            {
              for (ii = 0; ii != v184; ++ii)
              {
                if (*(_QWORD *)v254 != v185)
                  objc_enumerationMutation(v183);
                v187 = *(void **)(*((_QWORD *)&v253 + 1) + 8 * ii);
                if ((unint64_t)objc_msgSend(v187, "length") >= 2 && objc_msgSend(v187, "section") == v241)
                  objc_msgSend(v181, "addObject:", v187);
              }
              v184 = objc_msgSend(v183, "countByEnumeratingWithState:objects:count:", &v253, v292, 16);
            }
            while (v184);
          }

          v188 = v181;
          v189 = (void *)objc_msgSend(v188, "mutableCopy");
          objc_msgSend(v189, "minusSet:", v180);
          if (objc_msgSend(v189, "count"))
          {
            objc_msgSend(v237, "collectionViewLayout");
            v190 = (void *)objc_claimAutoreleasedReturnValue();
            v191 = objc_msgSend(v190, "_layoutAxis");
            if ((unint64_t)(v191 - 1) <= 1)
            {
              objc_msgSend(v190, "_orthogonalScrollingSections");
              v192 = (void *)objc_claimAutoreleasedReturnValue();
              v193 = objc_msgSend(v192, "containsIndex:", v241);
              v194 = v191 == 2;
              if (v191 == 1)
                v194 = 2;
              if (v193)
                v195 = v194;
              else
                v195 = v191;

              v196 = _UISizeValueForAxis(v195, v225, v224);
              v197 = _UISetPointValueForAxis(v195, v229, v227, v196);
              v199 = v198;
              v200 = v221;
              if (v221)
                v200 = (id *)v221[8];
              v201 = v200;
              v247[0] = MEMORY[0x1E0C809B0];
              v247[1] = 3221225472;
              v247[2] = ___UICollectionViewSetupExpandCollapseAnimations_block_invoke_5;
              v247[3] = &unk_1E16DFDD0;
              v202 = v189;
              v250 = v197;
              v251 = v199;
              v252 = v195;
              v248 = v202;
              v249 = &v274;
              objc_msgSend(v201, "enumerateKeysAndObjectsUsingBlock:", v247);

            }
          }

        }
        ++v233;
      }
      while (v233 != v220);
      v205 = objc_msgSend(v215, "countByEnumeratingWithState:objects:count:", &v270, v296, 16);
      v220 = v205;
    }
    while (v205);
  }

  _Block_object_dispose(&v274, 8);
}

void sub_1860EFBC8(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Unwind_Resume(a1);
}

void sub_1860F69B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

void _UIBackgroundViewConfigurationApplyProperties(void *a1, uint64_t a2, void *a3)
{
  id *v5;
  const char *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  NSObject *v20;
  unint64_t v21;
  NSObject *v22;
  id v23;
  NSObject *v24;
  NSObject *v25;
  id v26;
  void *v27;
  double v28;
  unint64_t v29;
  NSObject *v30;
  __int128 v31;
  NSObject *v32;
  int v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v7 = a3;
  v8 = *(id *)a2;
  v9 = *(void **)(a2 + 16);
  if (v5)
  {
    objc_setProperty_nonatomic_copy(v5, v6, v9, 56);
    v9 = *(void **)(a2 + 16);
  }
  if (v9)
  {
    if (!*(_BYTE *)(a2 + 32) || v8 == (id)1)
      goto LABEL_12;
  }
  else if (v8 == (id)1)
  {
    if (v5)
      v10 = v5[6];
    else
      v10 = 0;
    v11 = *(_QWORD *)(a2 + 48);
    goto LABEL_14;
  }
  -[_UIBackgroundViewConfiguration _setBackgroundColor:]((uint64_t)v5, *(void **)(a2 + 8));
LABEL_12:
  if (v5)
  {
    v12 = v5[6];
    v10 = v12;
    v11 = *(_QWORD *)(a2 + 48);
    if (v8 == (id)1)
      goto LABEL_14;
    if (v12)
    {
      v15 = v12;
      v16 = v15;
      switch(v11)
      {
        case 3:
          objc_msgSend(v15, "colorWithAlphaComponent:", 0.5);
          v17 = objc_claimAutoreleasedReturnValue();
          goto LABEL_42;
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
          goto LABEL_22;
        case 7:
          objc_msgSend(v15, "colorWithAlphaComponent:", 0.3);
          v17 = objc_claimAutoreleasedReturnValue();
          goto LABEL_42;
        case 8:
          objc_msgSend(v15, "colorWithAlphaComponent:", 0.1);
          v17 = objc_claimAutoreleasedReturnValue();
          goto LABEL_42;
        case 12:
          objc_msgSend(v15, "colorWithAlphaComponent:", 0.8);
          v17 = objc_claimAutoreleasedReturnValue();
LABEL_42:
          v18 = (void *)v17;

          goto LABEL_43;
        default:
          v18 = v15;
          if (!v11)
            goto LABEL_43;
LABEL_22:
          if (os_variant_has_internal_diagnostics())
          {
            __UIFaultDebugAssertLog();
            v25 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
            {
              v33 = 67109120;
              v34 = v11;
              _os_log_fault_impl(&dword_185066000, v25, OS_LOG_TYPE_FAULT, "Found a color transformer identifier (%d) that is unsupported when using backgroundColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance; switch to the UIBackgroundConfiguration API to resolve this.",
                (uint8_t *)&v33,
                8u);
            }

          }
          else
          {
            v19 = qword_1ECD801C8;
            if (!qword_1ECD801C8)
            {
              v19 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v19, (unint64_t *)&qword_1ECD801C8);
            }
            v20 = *(NSObject **)(v19 + 8);
            v18 = v16;
            if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
LABEL_43:
              v23 = objc_retainAutorelease(v18);

              v10 = v23;
              v5[5] = 0;
              goto LABEL_57;
            }
            v33 = 67109120;
            v34 = v11;
            _os_log_impl(&dword_185066000, v20, OS_LOG_TYPE_ERROR, "Found a color transformer identifier (%d) that is unsupported when using backgroundColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance; switch to the UIBackgroundConfiguration API to resolve this.",
              (uint8_t *)&v33,
              8u);
          }
          v18 = v16;
          goto LABEL_43;
      }
    }
LABEL_52:
    if (v11)
    {
      if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
        {
          v33 = 67109120;
          v34 = v11;
          _os_log_fault_impl(&dword_185066000, v32, OS_LOG_TYPE_FAULT, "Found a color transformer identifier (%d) that is unsupported when used without tintColor and without backgroundColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance; switch to the UIBackgroundConfiguration API to resolve this.",
            (uint8_t *)&v33,
            8u);
        }

      }
      else
      {
        v29 = qword_1ECD801D0;
        if (!qword_1ECD801D0)
        {
          v29 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v29, (unint64_t *)&qword_1ECD801D0);
        }
        v30 = *(NSObject **)(v29 + 8);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          v33 = 67109120;
          v34 = v11;
          _os_log_impl(&dword_185066000, v30, OS_LOG_TYPE_ERROR, "Found a color transformer identifier (%d) that is unsupported when used without tintColor and without backgroundColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance; switch to the UIBackgroundConfiguration API to resolve this.",
            (uint8_t *)&v33,
            8u);
        }
      }
    }
    v10 = 0;
    v14 = 0;
    v13 = 1;
    goto LABEL_54;
  }
  v11 = *(_QWORD *)(a2 + 48);
  if (v8 != (id)1)
    goto LABEL_52;
  v10 = 0;
LABEL_14:
  v13 = 0;
  v14 = 3;
  switch(v11)
  {
    case 0:
      goto LABEL_33;
    case 1:
    case 10:
    case 11:
      goto LABEL_28;
    case 2:
      break;
    case 3:
      v13 = 0;
      v14 = 6;
      break;
    case 4:
      v13 = 0;
      v14 = 2;
      break;
    case 5:
      v13 = 0;
      v14 = 4;
      break;
    case 6:
      v13 = 0;
      v14 = 5;
      break;
    case 7:
    case 8:
    case 9:
      v13 = 0;
      v14 = v11;
      break;
    case 12:
      v13 = 0;
      v14 = 10;
      break;
    default:
      if (v11 == 28)
      {
        v13 = 0;
        v14 = 11;
      }
      else
      {
LABEL_28:
        if (os_variant_has_internal_diagnostics())
        {
          __UIFaultDebugAssertLog();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
          {
            v33 = 67109120;
            v34 = v11;
            _os_log_fault_impl(&dword_185066000, v24, OS_LOG_TYPE_FAULT, "Found a color transformer identifier (%d) that is unsupported when using tintColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance;"
              " switch to the UIBackgroundConfiguration API to resolve this.",
              (uint8_t *)&v33,
              8u);
          }

        }
        else
        {
          v21 = _MergedGlobals_1207;
          if (!_MergedGlobals_1207)
          {
            v21 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v21, (unint64_t *)&_MergedGlobals_1207);
          }
          v22 = *(NSObject **)(v21 + 8);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            v33 = 67109120;
            v34 = v11;
            _os_log_impl(&dword_185066000, v22, OS_LOG_TYPE_ERROR, "Found a color transformer identifier (%d) that is unsupported when using tintColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance;"
              " switch to the UIBackgroundConfiguration API to resolve this.",
              (uint8_t *)&v33,
              8u);
          }
        }
LABEL_33:
        v13 = 0;
        v14 = 1;
      }
      break;
  }
LABEL_54:
  if (v5)
  {
    v5[5] = (id)v14;
    if ((v13 & 1) == 0)
    {
      v26 = v5[6];
      v5[6] = 0;

    }
  }
LABEL_57:
  -[_UIBackgroundViewConfiguration _setBackgroundColor:]((uint64_t)v5, v10);
  _UIShadowPropertiesFromShadowType(*(_QWORD *)(a2 + 40), v7);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_setShadowProperties:", v27);

  v28 = *(double *)(a2 + 56);
  if (v28 <= 0.0)
    goto LABEL_69;
  if (!v5)
  {
    if (*(_BYTE *)(a2 + 72))
      goto LABEL_68;
LABEL_67:
    -[UIBackgroundConfiguration _setImage:]((uint64_t)v5, *(void **)(a2 + 80));
    goto LABEL_68;
  }
  *((double *)v5 + 10) = v28;
  v5[11] = *(id *)(a2 + 64);
  if (!*(_BYTE *)(a2 + 72))
    goto LABEL_67;
  v5[8] = (id)1;
LABEL_68:
  objc_msgSend(v5, "_setStrokeLocation:", *(_QWORD *)(a2 + 88));
LABEL_69:
  objc_msgSend(v5, "_setCornerRadius:", *(double *)(a2 + 96));
  if (v5)
  {
    v31 = *(_OWORD *)(a2 + 120);
    *((_OWORD *)v5 + 9) = *(_OWORD *)(a2 + 104);
    *((_OWORD *)v5 + 10) = v31;
  }

  __destructor_8_s8_s16_s24_s80((id *)a2);
}

void sub_1860F6FCC(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_1860F714C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

void sub_1860F72B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

void sub_1860F761C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

void sub_1860F77BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

__CFString *_stringForColorMode(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 0xB)
    return off_1E16DFEA8[a1 - 1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown color mode: %ld"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void setDefaultLockAnimationParameters(void *a1)
{
  id v1;
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  id v7;

  v1 = a1;
  objc_msgSend(v1, "setMass:", 2.0);
  objc_msgSend(v1, "setStiffness:", 300.0);
  objc_msgSend(v1, "setDamping:", 400.0);
  objc_msgSend(v1, "setDuration:", 0.91);
  v2 = objc_alloc(MEMORY[0x1E0CD27D0]);
  LODWORD(v3) = 1046809695;
  LODWORD(v4) = 990250344;
  LODWORD(v5) = 1057860847;
  LODWORD(v6) = 1064564184;
  v7 = (id)objc_msgSend(v2, "initWithControlPoints::::", v3, v4, v5, v6);
  objc_msgSend(v1, "setTimingFunction:", v7);

}

double centerOfRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MinX;
  double v9;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v11.origin.x = a1;
  v11.origin.y = a2;
  v11.size.width = a3;
  v11.size.height = a4;
  v9 = MinX + CGRectGetWidth(v11) * 0.5;
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  CGRectGetMinY(v12);
  v13.origin.x = a1;
  v13.origin.y = a2;
  v13.size.width = a3;
  v13.size.height = a4;
  CGRectGetHeight(v13);
  return v9;
}

void sub_1860FBA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  uint64_t v10;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v10 - 208));
  _Unwind_Resume(a1);
}

void sub_1860FE264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186100888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186104E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_186105198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18610C39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1861113F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL UIPDFQuadrilateralIsNull(double *a1)
{
  double v1;
  double v2;

  v2 = *MEMORY[0x1E0C9D538];
  v1 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  if (*a1 != *MEMORY[0x1E0C9D538] || a1[1] != v1)
    return 0;
  if (a1[2] != v2 || a1[3] != v1)
    return 0;
  if (a1[6] != v2 || a1[7] != v1)
    return 0;
  if (a1[5] == v1)
    return a1[4] == v2;
  return 0;
}

void CPRotationDegreesFromTransform(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  if (v2 != 0.0)
  {
LABEL_11:
    v6 = fabs(v1);
    v7 = fabs(v2);
    if (v6 >= v7)
      v8 = v2;
    else
      v8 = v1;
    if (v6 >= v7)
      v9 = v1;
    else
      v9 = v2;
    atan(v8 / v9);
    return;
  }
  if (v1 <= 0.0 || *a1 * v4 < v2 * v3)
  {
    if (v1 == 0.0)
    {
      if (v3 == 0.0 && v4 == 0.0)
        return;
      v2 = -v3;
      v1 = a1[3];
    }
    goto LABEL_11;
  }
}

double CGPDFPageGetBoxRectWithRotation(CGPDFPage *a1, CGPDFBox a2)
{
  double v3;

  *(_QWORD *)&v3 = (unint64_t)CGPDFPageGetBoxRect(a1, a2);
  CGPDFPageGetRotationAngle(a1);
  return v3;
}

void CPSetCGPathPoints4(CGPath *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  CGPathMoveToPoint(a1, 0, a2, a3);
  CGPathAddLineToPoint(a1, 0, a4, a5);
  CGPathAddLineToPoint(a1, 0, a6, a7);
  CGPathAddLineToPoint(a1, 0, a8, a9);
}

double boundsForRotatedSelection(float64x2_t *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double MidY;
  double result;
  double MidX;
  CGRect v18;

  MidX = CGRectGetMidX(*(CGRect *)&a2);
  v18.origin.x = a2;
  v18.origin.y = a3;
  v18.size.width = a4;
  v18.size.height = a5;
  MidY = CGRectGetMidY(v18);
  __asm { FMOV            V1.2D, #-10.0 }
  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(vaddq_f64(a1[2], vaddq_f64(vmulq_n_f64(*a1, MidX), vmulq_n_f64(a1[1], MidY))), _Q1);
  return result;
}

uint64_t sortByYAscendingThenX(void *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  double MaxY;
  double v17;
  double MinX;
  double v19;
  CGAffineTransform v20;
  CGAffineTransform v21;
  CGAffineTransform v22;
  CGRect v23;
  CGRect v24;

  v3 = (void *)objc_msgSend(a1, "parent");
  v4 = (void *)objc_msgSend(a2, "parent");
  v5 = (void *)objc_msgSend(v3, "selection");
  v6 = (void *)objc_msgSend(v4, "selection");
  v7 = objc_msgSend(v5, "numberOfRectangles");
  v8 = objc_msgSend(v6, "numberOfRectangles");
  result = 0;
  if (v7 && v8)
  {
    memset(&v24, 0, sizeof(v24));
    memset(&v23, 0, sizeof(v23));
    memset(&v22, 0, sizeof(v22));
    memset(&v21, 0, sizeof(v21));
    objc_msgSend(v5, "getBounds:transform:index:", &v24, &v22, 0);
    objc_msgSend(v6, "getBounds:transform:index:", &v23, &v21, 0);
    v20 = v22;
    if (!CGAffineTransformIsIdentity(&v20))
    {
      v20 = v22;
      v24.origin.x = boundsForRotatedSelection((float64x2_t *)&v20, v24.origin.x, v24.origin.y, v24.size.width, v24.size.height);
      v24.origin.y = v10;
      v24.size.width = v11;
      v24.size.height = v12;
    }
    v20 = v21;
    if (!CGAffineTransformIsIdentity(&v20))
    {
      v20 = v21;
      v23.origin.x = boundsForRotatedSelection((float64x2_t *)&v20, v23.origin.x, v23.origin.y, v23.size.width, v23.size.height);
      v23.origin.y = v13;
      v23.size.width = v14;
      v23.size.height = v15;
    }
    MaxY = CGRectGetMaxY(v24);
    v17 = CGRectGetMaxY(v23);
    MinX = CGRectGetMinX(v24);
    v19 = CGRectGetMinX(v23);
    if (MaxY >= v17)
    {
      result = -1;
      if (MaxY <= v17 && MinX >= v19)
        return MinX > v19;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL CPIsRetina(_DWORD *a1)
{
  UIScreen *v2;
  double v3;
  _BOOL8 result;

  v2 = +[UIScreen mainScreen](UIScreen, "mainScreen");
  result = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[UIScreen scale](v2, "scale");
    *(float *)&v3 = v3;
    *a1 = LODWORD(v3);
    if (*(float *)&v3 > 1.0)
      return 1;
  }
  return result;
}

void *makeGrabber(int a1, double a2, double a3, double a4, double a5, float a6)
{
  void *v12;
  double v13;

  v12 = (void *)objc_msgSend(MEMORY[0x1E0CD27A8], "layer");
  objc_msgSend(v12, "setBounds:", a2, a3, a4, a5);
  objc_msgSend(v12, "setContentsGravity:", *MEMORY[0x1E0CD2F78]);
  if (a1)
    objc_msgSend(v12, "setContentsScale:", a6);
  LODWORD(v13) = 0;
  objc_msgSend(v12, "setOpacity:", v13);
  return v12;
}

void CPCGInsetFillEllipseInRect(CGContext *a1, CGColor *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  CGContextSaveGState(a1);
  v16.origin.x = a3;
  v16.origin.y = a4;
  v16.size.width = a5;
  v16.size.height = a6;
  v17 = CGRectInset(v16, 2.0, 2.0);
  x = v17.origin.x;
  y = v17.origin.y;
  width = v17.size.width;
  height = v17.size.height;
  CGContextSetFillColorWithColor(a1, a2);
  v18.origin.x = x;
  v18.origin.y = y;
  v18.size.width = width;
  v18.size.height = height;
  CGContextFillEllipseInRect(a1, v18);
  CGContextRestoreGState(a1);
}

uint64_t renderContentCallback(void *a1)
{
  return objc_msgSend(a1, "isCancelled") ^ 1;
}

CGFloat CGPDFComputeTransform(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  CGFloat MinY;
  CGFloat Width;
  double v22;
  double Height;
  double v24;
  double v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CGFloat v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  CGFloat v39;
  CGFloat v40;
  __int128 v41;
  __int128 v42;
  CGFloat result;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat txa;
  CGFloat tx;
  CGAffineTransform v49;
  CGAffineTransform v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v51.origin.x = a7;
  v51.origin.y = a8;
  v51.size.width = a9;
  v51.size.height = a10;
  txa = CGRectGetMinX(v51);
  v44 = a7;
  v52.origin.x = a7;
  v52.origin.y = a8;
  v52.size.width = a9;
  v52.size.height = a10;
  MinY = CGRectGetMinY(v52);
  CGAffineTransformMakeTranslation((CGAffineTransform *)a1, txa, MinY);
  v53.origin.x = a3;
  v53.origin.y = a4;
  v53.size.width = a5;
  v53.size.height = a6;
  Width = CGRectGetWidth(v53);
  v45 = a4;
  v54.origin.x = a3;
  v54.origin.y = a4;
  v22 = Width;
  v46 = a5;
  tx = a6;
  v54.size.width = a5;
  v54.size.height = a6;
  Height = CGRectGetHeight(v54);
  v24 = 1.0;
  v25 = 1.0;
  if (v22 > 0.0)
  {
    v55.origin.x = v44;
    v55.origin.y = a8;
    v55.size.width = a9;
    v55.size.height = a10;
    v25 = CGRectGetWidth(v55) / v22;
  }
  if (Height > 0.0)
  {
    v56.origin.x = v44;
    v56.origin.y = a8;
    v56.size.width = a9;
    v56.size.height = a10;
    v24 = CGRectGetHeight(v56) / Height;
  }
  v26 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v49.a = *(_OWORD *)a1;
  *(_OWORD *)&v49.c = v26;
  *(_OWORD *)&v49.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v50, &v49, v25, v24);
  v27 = *(_OWORD *)&v50.c;
  *(_OWORD *)a1 = *(_OWORD *)&v50.a;
  *(_OWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
  switch(a2)
  {
    case 270:
      v32 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v32;
      *(_OWORD *)&v49.tx = *(_OWORD *)(a1 + 32);
      CGAffineTransformTranslate(&v50, &v49, v22, 0.0);
      v33 = *(_OWORD *)&v50.c;
      *(_OWORD *)a1 = *(_OWORD *)&v50.a;
      *(_OWORD *)(a1 + 16) = v33;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
      v34 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v34;
      *(_OWORD *)&v49.tx = *(_OWORD *)(a1 + 32);
      v31 = 1.57079633;
      goto LABEL_11;
    case 180:
      v35 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v35;
      *(_OWORD *)&v49.tx = *(_OWORD *)(a1 + 32);
      CGAffineTransformTranslate(&v50, &v49, v22, Height);
      v36 = *(_OWORD *)&v50.c;
      *(_OWORD *)a1 = *(_OWORD *)&v50.a;
      *(_OWORD *)(a1 + 16) = v36;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
      v37 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v37;
      *(_OWORD *)&v49.tx = *(_OWORD *)(a1 + 32);
      v31 = 3.14159265;
      goto LABEL_11;
    case 90:
      v28 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v28;
      *(_OWORD *)&v49.tx = *(_OWORD *)(a1 + 32);
      CGAffineTransformTranslate(&v50, &v49, 0.0, Height);
      v29 = *(_OWORD *)&v50.c;
      *(_OWORD *)a1 = *(_OWORD *)&v50.a;
      *(_OWORD *)(a1 + 16) = v29;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
      v30 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v30;
      *(_OWORD *)&v49.tx = *(_OWORD *)(a1 + 32);
      v31 = -1.57079633;
LABEL_11:
      CGAffineTransformRotate(&v50, &v49, v31);
      v38 = *(_OWORD *)&v50.c;
      *(_OWORD *)a1 = *(_OWORD *)&v50.a;
      *(_OWORD *)(a1 + 16) = v38;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
      break;
  }
  v57.origin.x = a3;
  v57.origin.y = v45;
  v57.size.width = v46;
  v57.size.height = tx;
  v39 = -CGRectGetMinX(v57);
  v58.origin.x = a3;
  v58.origin.y = v45;
  v58.size.width = v46;
  v58.size.height = tx;
  v40 = CGRectGetMinY(v58);
  v41 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v49.a = *(_OWORD *)a1;
  *(_OWORD *)&v49.c = v41;
  *(_OWORD *)&v49.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformTranslate(&v50, &v49, v39, -v40);
  v42 = *(_OWORD *)&v50.c;
  *(_OWORD *)a1 = *(_OWORD *)&v50.a;
  *(_OWORD *)(a1 + 16) = v42;
  result = v50.tx;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
  return result;
}

void sub_18612AA1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t UIActivityIndicatorViewStyleForBackingColor(void *a1)
{
  double v2;
  double v3;
  double v4;

  if (!a1)
    return 2;
  v4 = 0.0;
  v2 = 0.0;
  v3 = 0.0;
  objc_msgSend(a1, "getRed:green:blue:alpha:", &v4, &v3, &v2, 0);
  if (v4 * 0.212599993 + v3 * 0.715200007 + v2 * 0.0722000003 < 0.5)
    return 1;
  else
    return 2;
}

size_t indexOfDictionary(CGPDFDictionary *a1, _QWORD *a2, CGPDFDictionary *a3)
{
  _BOOL4 Array;
  size_t result;
  size_t v7;
  size_t v8;
  char *v9;
  char *__s1;
  CGPDFDictionaryRef dict;
  CGPDFArrayRef value;

  value = 0;
  Array = CGPDFDictionaryGetArray(a1, "Kids", &value);
  result = 0;
  if (Array)
  {
    result = CGPDFArrayGetCount(value);
    if (result)
    {
      v7 = result;
      v8 = 0;
      while (1)
      {
        dict = 0;
        if (!CGPDFArrayGetDictionary(value, v8, &dict))
          return 0;
        if (dict == a3)
          break;
        __s1 = 0;
        if (CGPDFDictionaryGetName(dict, "Type", (const char **)&__s1))
        {
          v9 = __s1;
          if (!strcmp(__s1, "Page"))
          {
            ++*a2;
          }
          else if (!strcmp(v9, "Pages"))
          {
            result = indexOfDictionary(dict, a2, a3);
            if (result)
              return result;
          }
          if (v7 != ++v8)
            continue;
        }
        return 0;
      }
      return *a2 + 1;
    }
  }
  return result;
}

void sub_186130B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCARSessionStatusClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CarKitLibraryCore_frameworkLibrary_0)
    CarKitLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  if (!CarKitLibraryCore_frameworkLibrary_0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CarKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UICarPlaySession.m"), 16, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CARSessionStatus");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCARSessionStatusClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UICarPlaySession.m"), 17, CFSTR("Unable to find class %s"), "CARSessionStatus");

LABEL_8:
    __break(1u);
  }
  getCARSessionStatusClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1861325F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186136750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void _UIDebugShowLayoutItem(void *a1, void *a2)
{
  UIView *v3;
  id v4;
  uint64_t v5;
  UIView *v6;
  void *v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  -[UIView _ui_view](v3, "_ui_view");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v3;
  if ((UIView *)v5 == v3
    || (v7 = (void *)v5,
        objc_getAssociatedObject(v3, &_UIDebugView),
        v6 = (UIView *)objc_claimAutoreleasedReturnValue(),
        v7,
        v6))
  {
    if (v4)
    {
LABEL_4:
      objc_msgSend(v4, "alphaComponent");
      objc_msgSend(v4, "colorWithAlphaComponent:", v8 * 0.25);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIView setBackgroundColor:](v6, "setBackgroundColor:", v9);

      -[UIView _currentScreenScale](v6, "_currentScreenScale");
      v11 = 1.0 / v10;
      -[UIView layer](v6, "layer");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setBorderWidth:", v11);

      v13 = objc_msgSend(objc_retainAutorelease(v4), "CGColor");
      -[UIView layer](v6, "layer");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setBorderColor:", v13);

      goto LABEL_9;
    }
  }
  else
  {
    v6 = objc_alloc_init(UIView);
    -[UIView setTranslatesAutoresizingMaskIntoConstraints:](v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    -[UIView setUserInteractionEnabled:](v6, "setUserInteractionEnabled:", 0);
    objc_setAssociatedObject(v3, &_UIDebugView, v6, 0);
    -[UIView topAnchor](v6, "topAnchor");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView topAnchor](v3, "topAnchor");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "constraintEqualToAnchor:", v28);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v30[0] = v27;
    -[UIView leftAnchor](v6, "leftAnchor");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView leftAnchor](v3, "leftAnchor");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "constraintEqualToAnchor:", v25);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v30[1] = v24;
    -[UIView rightAnchor](v6, "rightAnchor");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView rightAnchor](v3, "rightAnchor");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "constraintEqualToAnchor:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v30[2] = v17;
    -[UIView bottomAnchor](v6, "bottomAnchor");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView bottomAnchor](v3, "bottomAnchor");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "constraintEqualToAnchor:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v30[3] = v20;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 4);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    -[UIView _ui_superview](v3, "_ui_superview");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addSubview:", v6);

    objc_msgSend(MEMORY[0x1E0D156E0], "activateConstraints:", v21);
    if (v4)
      goto LABEL_4;
  }
  if (v6 == v3)
  {
    -[UIView setBackgroundColor:](v3, "setBackgroundColor:", 0);
    -[UIView layer](v3, "layer");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setBorderColor:", 0);

  }
  else
  {
    -[UIView removeFromSuperview](v6, "removeFromSuperview");
    objc_setAssociatedObject(v3, &_UIDebugView, 0, 0);
  }
LABEL_9:

}

BOOL _UIGetSecondarySIMUnderBaseline()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_SecondarySIMUnderBaseline,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_SecondarySIMUnderBaseline))
  {
    v1 = 0;
  }
  else
  {
    do
    {
      v1 = v0 < v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_SecondarySIMUnderBaseline, (uint64_t)CFSTR("SecondarySIMUnderBaseline"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_SecondarySIMUnderBaseline;
    }
    while (v0 != _UIInternalPreference_SecondarySIMUnderBaseline);
  }
  return byte_1EDDA82BC && v1;
}

id UIStatusBarCreateHUDDualSignalView(void *a1, void *a2, double a3, double a4)
{
  id v7;
  id v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGFloat v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *v28;

  v7 = a2;
  v8 = a1;
  objc_msgSend(v8, "size");
  v10 = v9;
  objc_msgSend(v7, "size");
  if (v10 >= v11)
    v11 = v10;
  v12 = v11 * 3.0;
  objc_msgSend(v8, "size");
  v14 = v13;
  objc_msgSend(v7, "size");
  _UIGraphicsBeginImageContextWithOptions(0, 0, v12, (v14 + v15 + 3.0) * 3.0, a4);
  objc_msgSend(v8, "size");
  v17 = (v12 - v16 * 3.0) * 0.5;
  objc_msgSend(v8, "size");
  v19 = v18 * 3.0;
  objc_msgSend(v8, "size");
  objc_msgSend(v8, "drawInRect:blendMode:alpha:", 0, v17, 0.0, v19, v20 * 3.0, a3);
  objc_msgSend(v7, "size");
  v22 = (v12 - v21 * 3.0) * 0.5;
  objc_msgSend(v8, "size");
  v24 = v23;

  objc_msgSend(v7, "size");
  v26 = v25 * 3.0;
  objc_msgSend(v7, "size");
  objc_msgSend(v7, "drawInRect:blendMode:alpha:", 0, v22, (v24 + 3.0) * 3.0, v26, v27 * 3.0, 1.0);

  _UIGraphicsGetImageFromCurrentImageContext(0);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  UIGraphicsEndImageContext();
  return v28;
}

void _UIViewSetAnchorPointToTouchPoint(void *a1, double a2, double a3)
{
  id v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  void *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  void *v50;
  void *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;

  v5 = a1;
  objc_msgSend(v5, "layer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "size");
  v8 = v7;
  v10 = v9;

  if (v8 != 0.0 || v10 != 0.0)
  {
    objc_msgSend(v5, "layer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "convertPoint:fromLayer:", 0, a2, a3);
    v13 = v12;
    v15 = v14;

    v16 = v5;
    objc_msgSend(v16, "bounds");
    v53 = v13 / v8;
    v18 = v13 / v8 * v17;
    objc_msgSend(v16, "bounds");
    v52 = v15 / v10;
    v20 = v15 / v10 * v19;
    objc_msgSend(v16, "bounds");
    v22 = v21;
    objc_msgSend(v16, "layer");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "anchorPoint");
    v25 = v24;
    objc_msgSend(v16, "bounds");
    v27 = v26;
    objc_msgSend(v16, "layer");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "anchorPoint");
    v30 = v29;

    if (v16)
    {
      objc_msgSend(v16, "transform");
      v31 = v66;
      v32 = v68;
      v55 = v67;
      v56 = v69;
      v33 = v70;
      v57 = v71;
    }
    else
    {
      v33 = 0.0;
      v56 = 0.0;
      v57 = 0.0;
      v55 = 0.0;
      v32 = 0.0;
      v31 = 0.0;
    }
    v34 = v22 * v25;
    v35 = v27 * v30;
    v58 = v20;
    v59 = v18;
    v36 = v33 + v20 * v32 + v18 * v31;
    if (v16)
    {
      objc_msgSend(v16, "transform");
      v38 = v61;
      v37 = v60;
      v40 = v63;
      v39 = v62;
      v41 = v64;
      v54 = v65;
    }
    else
    {
      v41 = 0.0;
      v54 = 0.0;
      v40 = 0.0;
      v38 = 0.0;
      v39 = 0.0;
      v37 = 0.0;
    }
    v42 = v41 + v35 * v39 + v34 * v37;
    objc_msgSend(v16, "layer");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "position");
    v45 = v44;
    v47 = v46;

    v48 = v36 + v45 - v42;
    if (fabs(v48) != INFINITY)
    {
      v49 = v57 + v58 * v56 + v59 * v55 + v47 - (v54 + v35 * v40 + v34 * v38);
      if (fabs(v49) != INFINITY && fabs(v53) != INFINITY && fabs(v52) != INFINITY)
      {
        objc_msgSend(v16, "layer");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setPosition:", v48, v49);

        objc_msgSend(v16, "layer");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "setAnchorPoint:", v53, v52);

      }
    }

  }
}

void sub_186149580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18614C994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18614F440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v17 - 88));
  _Unwind_Resume(a1);
}

void sub_186150978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIStatusBarGetVisualProviderSubclassForScreenWithVisualProviderInfo(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  Class Superclass;
  objc_class *v8;
  objc_method *ClassMethod;
  id v10;
  void *v11;

  v5 = a2;
  v6 = a3;
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (Superclass = class_getSuperclass((Class)a1)) != 0
    && (v8 = Superclass,
        ClassMethod = class_getClassMethod((Class)a1, sel_visualProviderSubclassForScreen_visualProviderInfo_),
        ClassMethod == class_getClassMethod(v8, sel_visualProviderSubclassForScreen_visualProviderInfo_)))
  {
    v10 = a1;
  }
  else
  {
    objc_msgSend(a1, "visualProviderSubclassForScreen:visualProviderInfo:", v5, v6);
    v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  v11 = v10;

  return v11;
}

void _UIStatusBarAddDefaultAnimationReposition(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id obj;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  _QWORD v38[4];
  id v39;
  id v40;
  id v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD aBlock[4];
  __int128 v48;
  _QWORD v49[4];
  id v50;
  id v51;
  _QWORD *v52;
  char v53;
  _QWORD v54[4];
  id v55;
  id v56;
  _QWORD *v57;
  _QWORD v58[5];
  id v59;
  uint64_t v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v34 = a2;
  v36 = a3;
  v35 = a4;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "statusBar");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stateForDisplayItemWithIdentifier:", v36);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "potentialPlacementRegionIdentifiers");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  obj = v10;
  v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v61, 16);
  if (v37)
  {
    v11 = MEMORY[0x1E0C809B0];
    v32 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v37; ++i)
      {
        if (*(_QWORD *)v44 != v32)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * i);
        objc_msgSend(v7, "statusBar");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "regions");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "objectForKeyedSubscript:", v13);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        aBlock[0] = v11;
        aBlock[1] = 3221225472;
        aBlock[2] = ___UIStatusBarDefaultRepositionAnimation_block_invoke;
        aBlock[3] = &__block_descriptor_48_e24_v24__0___v___8___v__B_16l;
        v48 = xmmword_186683CB0;
        v17 = v35;
        v18 = v16;
        v19 = _Block_copy(aBlock);
        v20 = v18;
        v21 = v19;
        v22 = v17;
        v58[0] = 0;
        v58[1] = v58;
        v58[2] = 0x3032000000;
        v58[3] = __Block_byref_object_copy__175;
        v58[4] = __Block_byref_object_dispose__175;
        v59 = 0;
        v54[0] = v11;
        v54[1] = 3221225472;
        v54[2] = ___UIStatusBarInternalRepositionAnimation_block_invoke;
        v54[3] = &unk_1E16E0B00;
        v23 = v22;
        v55 = v23;
        v57 = v58;
        v24 = v21;
        v56 = v24;
        +[_UIStatusBarAnimation animationWithBlock:](_UIStatusBarAnimation, "animationWithBlock:", v54);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v49[0] = v11;
        v49[1] = 3221225472;
        v49[2] = ___UIStatusBarInternalRepositionAnimation_block_invoke_5;
        v49[3] = &unk_1E16E0B28;
        v26 = v20;
        v50 = v26;
        v51 = 0;
        v52 = v58;
        v53 = 0;
        objc_msgSend(v25, "setPrepareBlock:", v49);

        _Block_object_dispose(v58, 8);
        objc_msgSend(v25, "setIdentifier:", CFSTR("defaultAnimationReposition"));
        objc_msgSend(v25, "setPriority:", -200);
        objc_msgSend(v7, "statusBar");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v60 = v13;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v60, 1);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "displayItemIdentifiersInRegionsWithIdentifiers:", v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v38[0] = v11;
        v38[1] = 3221225472;
        v38[2] = ___UIStatusBarAddDefaultAnimationReposition_block_invoke;
        v38[3] = &unk_1E16E0AB0;
        v39 = v36;
        v40 = v33;
        v41 = v34;
        v42 = v25;
        v30 = v25;
        objc_msgSend(v29, "enumerateObjectsUsingBlock:", v38);

      }
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v61, 16);
    }
    while (v37);
  }

}

void sub_186152A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  _Block_object_dispose(&a56, 8);
  _Unwind_Resume(a1);
}

id _UIStatusBarDefaultAnimation(void *a1, void *a2, __int128 *a3, double a4, double a5, double a6)
{
  id v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[6];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  double v27;
  _QWORD v28[4];
  __int128 v29;
  __int128 v30;
  _QWORD v31[5];
  id v32;

  v11 = a1;
  v12 = a2;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x3032000000;
  v31[3] = __Block_byref_object_copy__175;
  v31[4] = __Block_byref_object_dispose__175;
  v32 = 0;
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x4010000000;
  v28[3] = &unk_18685B0AF;
  v13 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v29 = *MEMORY[0x1E0C9D648];
  v30 = v13;
  v14 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = ___UIStatusBarDefaultAnimation_block_invoke;
  v21[3] = &unk_1E16E0AD8;
  v21[4] = v31;
  v21[5] = v28;
  v15 = *a3;
  v16 = a3[1];
  v24 = a3[2];
  v23 = v16;
  v22 = v15;
  v25 = a4;
  v26 = a5;
  v27 = a6;
  +[_UIStatusBarAnimation animationWithBlock:](_UIStatusBarAnimation, "animationWithBlock:", v21);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v14;
  v20[1] = 3221225472;
  v20[2] = ___UIStatusBarDefaultAnimation_block_invoke_3;
  v20[3] = &unk_1E16DC538;
  v20[4] = v28;
  objc_msgSend(v17, "setPrepareBlock:", v20);
  v19[0] = v14;
  v19[1] = 3221225472;
  v19[2] = ___UIStatusBarDefaultAnimation_block_invoke_4;
  v19[3] = &unk_1E16DC560;
  v19[4] = v31;
  _UIStatusBarAddDefaultAnimationReposition(v11, v17, v12, v19);
  objc_msgSend(v17, "setDelaysAnimatingItems:", 1);
  objc_msgSend(v17, "setPriority:", -100);
  _Block_object_dispose(v28, 8);
  _Block_object_dispose(v31, 8);

  return v17;
}

void sub_186152CE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id _UIStatusBarDefaultScaleAnimation(void *a1, void *a2, CGFloat a3)
{
  id v5;
  id v6;
  void *v7;
  CGAffineTransform v9;

  v5 = a2;
  v6 = a1;
  CGAffineTransformMakeScale(&v9, a3, a3);
  _UIStatusBarDefaultAnimation(v6, v5, (__int128 *)&v9, 0.15, 0.1, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t stateMachineSpec_block_invoke_5_5(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didTransitionToBeginState");
}

uint64_t stateMachineSpec_block_invoke_6_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didTransitionToCancelState");
}

uint64_t *_UIDragInteractionDriverStateMachineHandleEvent(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  __int128 *i;
  uint64_t v7;
  void *v8;
  void *v9;
  _OWORD v10[8];
  __int128 v11;

  v3 = result;
  *(_QWORD *)&v11 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)result[1];
  if (v4)
  {
    result[1] = (uint64_t)(v4 + 1);
    *v4 = a3;
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    result[1] = (uint64_t)v10;
    result = (uint64_t *)handleEvent(stateMachineSpec_5, *result, a3, a2, result);
    for (i = (__int128 *)v3[1]; v10 != i; i = (__int128 *)v3[1])
    {
      if (i > &v11)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIDragInteractionDriverStateMachineHandleEvent(_UIDragInteractionDriverStateMachine *const _Nonnull, _UIDragInteractionDriver *const __strong _Nonnull, _UIDragLiftEvent)");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("_UIDragInteractionDriverStateMachine.m"), 128, CFSTR("Events queue shouldn't overflow"));

        i = (__int128 *)v3[1];
      }
      v7 = *(_QWORD *)&v10[0];
      v3[1] = (uint64_t)i - 8;
      __memmove_chk();
      result = (uint64_t *)handleEvent(stateMachineSpec_5, *v3, v7, a2, v3);
    }
    v3[1] = 0;
  }
  return result;
}

void _UIIntelligencePrewarmCollection()
{
  uint64_t v0;
  char v1;
  _BOOL4 v2;
  NSObject *v3;
  _QWORD v4[4];
  char v5;
  BOOL v6;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v0 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___UIIntelligencePrewarmCollection_block_invoke;
  v7[3] = &unk_1E16E1170;
  v7[4] = &v16;
  v7[5] = &v12;
  v7[6] = &v8;
  +[UIScreen _enumerateScreensWithBlock:](UIScreen, "_enumerateScreensWithBlock:", v7);
  v1 = *((_BYTE *)v9 + 24);
  if (*((_BYTE *)v17 + 24))
  {
    v2 = *((_BYTE *)v13 + 24) == 0;
    if (*((_BYTE *)v9 + 24))
      goto LABEL_6;
  }
  else
  {
    v2 = 0;
    if (*((_BYTE *)v9 + 24))
    {
LABEL_6:
      dispatch_get_global_queue(25, 0);
      v3 = objc_claimAutoreleasedReturnValue();
      v4[0] = v0;
      v4[1] = 3221225472;
      v4[2] = ___UIIntelligencePrewarmCollection_block_invoke_2;
      v4[3] = &__block_descriptor_34_e5_v8__0l;
      v5 = v1;
      v6 = v2;
      dispatch_async(v3, v4);

      goto LABEL_7;
    }
  }
  if (v2)
    goto LABEL_6;
LABEL_7:
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
}

void sub_18615466C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t _UIIntelligenceSceneShouldBeInactive(void *a1)
{
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;

  objc_msgSend(a1, "_screen");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "_isEmbeddedScreen"))
  {
    objc_msgSend(MEMORY[0x1E0D00F58], "sharedBacklight");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "backlightState");

    if (v3 < 2)
      goto LABEL_7;
  }
  if (objc_msgSend(v1, "_userInterfaceIdiom"))
    goto LABEL_4;
  +[_UICarPlaySession sharedInstance]();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UICarPlaySession carSessionStatus]((uint64_t)v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "currentSession");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
    goto LABEL_4;
  objc_msgSend(v7, "limitUserInterfaces");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  if ((v9 & 1) != 0)
LABEL_7:
    v4 = 1;
  else
LABEL_4:
    v4 = 0;

  return v4;
}

id _UIGetAccessibilityLabelSafe(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v1 = a1;
  objc_msgSend(v1, "accessibilityLabel");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    v5 = objc_msgSend(MEMORY[0x1E0DE7910], "instanceMethodForSelector:", sel_accessibilityAttributedLabel);
    if (v5 != objc_msgSend(v1, "methodForSelector:", sel_accessibilityAttributedLabel))
    {
      objc_msgSend(v1, "accessibilityAttributedLabel");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v6, "string");
          v4 = (void *)objc_claimAutoreleasedReturnValue();

          goto LABEL_11;
        }
      }

    }
    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v2, "string");
      v3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_4;
    }
LABEL_10:
    v4 = 0;
    goto LABEL_11;
  }
  v3 = v2;
LABEL_4:
  v4 = v3;
LABEL_11:

  return v4;
}

id _reorderedPlacementsFromGroupForLegacyLayout(void *a1, char a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;
  char v11;

  v5 = a3;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___reorderedPlacementsFromGroupForLegacyLayout_block_invoke;
  v9[3] = &unk_1E16E1278;
  v10 = v5;
  v11 = a2;
  v6 = v5;
  objc_msgSend(a1, "sortedArrayUsingComparator:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t _UIGetFullWidthBackgroundActivity()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_FullWidthBackgroundActivity,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_FullWidthBackgroundActivity))
  {
    v1 = 1;
  }
  else
  {
    do
    {
      v1 = v0 >= v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_FullWidthBackgroundActivity, (uint64_t)CFSTR("FullWidthBackgroundActivity"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_FullWidthBackgroundActivity;
    }
    while (v0 != _UIInternalPreference_FullWidthBackgroundActivity);
  }
  return byte_1EDDA82CC || v1;
}

void sub_1861596F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186159FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose((const void *)(v55 - 240), 8);
  _Block_object_dispose((const void *)(v55 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t ___reorderedPlacementsFromGroupForLegacyLayout_block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(a2, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v5, "indexOfObject:", v7);

  v9 = *(void **)(a1 + 32);
  objc_msgSend(v6, "identifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend(v9, "indexOfObject:", v10);
  if (v8 == 0x7FFFFFFFFFFFFFFFLL && v11 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  v13 = 1;
  if (*(_BYTE *)(a1 + 40))
    v13 = -1;
  v14 = -1;
  if (*(_BYTE *)(a1 + 40))
    v14 = 1;
  if (v8 < v11)
    return v14;
  else
    return v13;
}

void sub_18615AE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18615C15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18615D728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id *location)
{
  uint64_t v38;

  __destructor_8_s64_s72_s144((id *)&STACK[0x848]);
  __destructor_8_s64_s72_s144((id *)&STACK[0x8E0]);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v38 - 192));
  _Unwind_Resume(a1);
}

id __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, id *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  id result;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = a2[9];
  v7 = *((_OWORD *)a2 + 8);
  v9 = *((_OWORD *)a2 + 5);
  v8 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 96) = v8;
  result = a2[18];
  *(_QWORD *)(a1 + 144) = result;
  return result;
}

void sub_18615DD44(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s64_s72_s144(v1);
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_80n29_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 80, (id *)(a2 + 80));
}

void __destroy_helper_block_e8_80n14_8_s64_s72_s144(uint64_t a1)
{
  __destructor_8_s64_s72_s144((id *)(a1 + 80));
}

void __destructor_8_s64_s72_s144(id *a1)
{

}

id __copy_helper_block_e8_104n29_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 104, (id *)(a2 + 104));
}

void __destroy_helper_block_e8_104n14_8_s64_s72_s144(uint64_t a1)
{
  __destructor_8_s64_s72_s144((id *)(a1 + 104));
}

void sub_18615E54C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  __destructor_8_s64_s72_s144(v2);
  __destructor_8_s64_s72_s144(v1);
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_256n29_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 256, (id *)(a2 + 256));
}

void __destroy_helper_block_e8_256n14_8_s64_s72_s144(uint64_t a1)
{
  __destructor_8_s64_s72_s144((id *)(a1 + 256));
}

id __copy_helper_block_e8_64n29_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 64, (id *)(a2 + 64));
}

void __destroy_helper_block_e8_64n14_8_s64_s72_s144(uint64_t a1)
{
  __destructor_8_s64_s72_s144((id *)(a1 + 64));
}

id __copy_helper_block_e8_152n29_8_8_t0w64_s64_s72_t80w64_s144304n29_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, uint64_t a2)
{
  __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 152, (id *)(a2 + 152));
  return __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 304, (id *)(a2 + 304));
}

void __destroy_helper_block_e8_152n14_8_s64_s72_s144304n14_8_s64_s72_s144(uint64_t a1)
{
  id *v1;

  v1 = (id *)(a1 + 152);
  __destructor_8_s64_s72_s144((id *)(a1 + 304));
  __destructor_8_s64_s72_s144(v1);
}

void sub_18615ED8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18615F4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,id location)
{
  id *v63;

  objc_destroyWeak(v63);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIPhysicalButtonAllBKSHIDEventDeferringEnvironments()
{
  if (qword_1ECD80358 != -1)
    dispatch_once(&qword_1ECD80358, &__block_literal_global_333);
  return (id)qword_1ECD80350;
}

void *_UIPhysicalButtonsForBKSHIDEventDeferringEnvironment(void *a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  int v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0D00CA8], "ui_cameraCaptureButtonEnvironment");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = a1;
  v4 = v2;
  v5 = v4;
  if (v4 == v3)
  {

  }
  else
  {
    if (!v3 || !v4)
    {

LABEL_9:
      v7 = (void *)MEMORY[0x1E0C9AA60];
      goto LABEL_10;
    }
    v6 = objc_msgSend(v3, "isEqual:", v4);

    if (!v6)
      goto LABEL_9;
  }
  v7 = &unk_1E1A94A90;
LABEL_10:

  return v7;
}

id _UIPhysicalButtonInteractionArbiterTargetWindowForButton(void *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(a1, "_configurationForButton:");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(a2, "objectForKey:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_window");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_186166220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1861663B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_186167590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

void sub_18616900C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18616C7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18616CF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_18616D27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18616DA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a50, 8);
  _Unwind_Resume(a1);
}

void sub_18616F160(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18616F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186175464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  char a72;

  _Block_object_dispose(&a66, 8);
  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x218], 8);
  _Unwind_Resume(a1);
}

void sub_186176348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void stateMachineDebugger_block_invoke(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  void *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  const __CFString *v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  const __CFString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v9 = stateMachineDebugger_block_invoke___s_category;
  if (!stateMachineDebugger_block_invoke___s_category)
  {
    v9 = __UILogCategoryGetNode("OOPRename", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v9, (unint64_t *)&stateMachineDebugger_block_invoke___s_category);
  }
  if ((*(_BYTE *)v9 & 1) != 0)
  {
    v10 = *(id *)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(*a2, "sessionIdentifier");
      v11 = objc_claimAutoreleasedReturnValue();
      if ((unint64_t)(a3 - 1) > 7)
        v12 = CFSTR("unknown");
      else
        v12 = off_1E16E20E0[a3 - 1];
      if (a5 > 7)
        v13 = CFSTR("unknown");
      else
        v13 = off_1E16E2120[a5];
      if ((unint64_t)(a4 - 1) > 7)
        v14 = CFSTR("unknown");
      else
        v14 = off_1E16E20E0[a4 - 1];
      v16 = 138413058;
      v17 = v11;
      v18 = 2112;
      v19 = v12;
      v20 = 2112;
      v21 = v13;
      v22 = 2112;
      v23 = v14;
      v15 = (void *)v11;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "[%@] Transitioning state: %@ -(%@)-> %@", (uint8_t *)&v16, 0x2Au);

    }
  }
}

void stateMachineDebugger_block_invoke_2(uint64_t a1, id *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  const __CFString *v16;
  __int16 v17;
  const __CFString *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = stateMachineDebugger_block_invoke_2___s_category;
  if (!stateMachineDebugger_block_invoke_2___s_category)
  {
    v7 = __UILogCategoryGetNode("OOPRename", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v7, (unint64_t *)&stateMachineDebugger_block_invoke_2___s_category);
  }
  if ((*(_BYTE *)v7 & 1) != 0)
  {
    v8 = *(id *)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(*a2, "sessionIdentifier");
      v9 = objc_claimAutoreleasedReturnValue();
      if ((unint64_t)(a3 - 1) > 7)
        v10 = CFSTR("unknown");
      else
        v10 = off_1E16E20E0[a3 - 1];
      if (a4 > 7)
        v11 = CFSTR("unknown");
      else
        v11 = off_1E16E2120[a4];
      v13 = 138412802;
      v14 = v9;
      v15 = 2112;
      v16 = v10;
      v17 = 2112;
      v18 = v11;
      v12 = (void *)v9;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "[%@] Failed to transition from state %@ with event %@.", (uint8_t *)&v13, 0x20u);

    }
  }
}

void sessionDidStartInRenamerHandler_block_invoke_3(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a2 + 8);
  v3 = *(id *)a2;
  v4 = v2;
  if (objc_msgSend(v3, "_isServerSide"))
    objc_msgSend(v3, "_server_sessionDidStartInRenamer:", v4);
  else
    objc_msgSend(v3, "_client_sessionDidStartInRenamer:", v4);

}

void sessionDidEndHandler_block_invoke_4(uint64_t a1, id *a2)
{
  id v2;

  v2 = *a2;
  if (objc_msgSend(v2, "_isServerSide"))
    objc_msgSend(v2, "_server_sessionDidEnd");
  else
    objc_msgSend(v2, "_client_sessionDidEnd");

}

void willBeginRenamingHandler_block_invoke_5(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(id *)(a2 + 16);
  v7 = v3;
  if ((objc_msgSend(v7, "_isServerSide") & 1) != 0)
    objc_msgSend(v7, "_server_willBeginRenamingWithText:selectedRange:", v5, v4);
  else
    objc_msgSend(v7, "_client_willBeginRenamingWithText:selectedRange:", v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v4;

}

uint64_t shouldEndEditingHandler_block_invoke_6(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  id v5;
  int v6;
  int v7;
  uint64_t v8;

  v3 = *(void **)a2;
  v4 = *(id *)(a2 + 16);
  v5 = v3;
  if (objc_msgSend(v5, "_isServerSide"))
    v6 = objc_msgSend(v5, "_server_textFieldShouldEndEditingWithText:", v4);
  else
    v6 = objc_msgSend(v5, "_client_textFieldShouldEndEditingWithText:", v4);
  v7 = v6;

  *(_BYTE *)(a2 + 33) = v7;
  if (v7)
    v8 = 5;
  else
    v8 = 3;

  return v8;
}

void didEndEditingHandler_block_invoke_7(uint64_t a1, void **a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a2;
  v3 = a2[2];
  v4 = v2;
  if (objc_msgSend(v4, "_isServerSide"))
    objc_msgSend(v4, "_server_textFieldDidEndEditingWithText:", v3);
  else
    objc_msgSend(v4, "_client_textFieldDidEndEditingWithText:", v3);

}

void cancellationHandler_block_invoke_8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;
  id v5;

  v2 = *(unsigned __int8 *)(a2 + 32);
  v5 = *(id *)a2;
  v3 = objc_msgSend(v5, "_isServerSide");
  v4 = v2 != 0;
  if (v3)
    objc_msgSend(v5, "_server_cancelSessionAndNotify:", v4);
  else
    objc_msgSend(v5, "_client_cancelSessionAndNotify:", v4);

}

void fileRenameDidFailHandler_block_invoke_9(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;

  v6 = *(id *)a2;
  v3 = *(void **)(a2 + 40);
  v4 = *(id *)(a2 + 16);
  v5 = v3;
  if (objc_msgSend(v6, "_isServerSide"))
    objc_msgSend(v6, "_server_fileRenameDidFail:proposedName:", v5, v4);
  else
    objc_msgSend(v6, "_client_fileRenameDidFail:proposedName:", v5, v4);

}

void fileRenameDidEndHandler_block_invoke_10(uint64_t a1, void **a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a2;
  v3 = a2[6];
  v4 = v2;
  if (objc_msgSend(v4, "_isServerSide"))
    objc_msgSend(v4, "_server_fileRenameDidEnd:", v3);
  else
    objc_msgSend(v4, "_client_fileRenameDidEnd:", v3);

}

uint64_t fileRenameDynamicTransition_block_invoke_11(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (_UIApplicationProcessIsOverlayUI())
  {
    if (a3 == 6)
      return 6;
  }
  else if (a3 == 2)
  {
    return 6;
  }
  return 0;
}

id getFPSandboxingURLWrapperClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)_MergedGlobals_8_0;
  v7 = _MergedGlobals_8_0;
  if (!_MergedGlobals_8_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getFPSandboxingURLWrapperClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getFPSandboxingURLWrapperClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186177204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18617761C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_186177790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_18617790C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1861779D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_186177A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_186177B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_186177CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_186177D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_186178234(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_186178780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_186178958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186178B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  uint64_t v17;

  _Block_object_dispose((const void *)(v17 - 80), 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getFPSandboxingURLWrapperClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD78898)
    qword_1ECD78898 = _sl_dlopen();
  if (!qword_1ECD78898)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *FileProviderLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UINavigationBarTitleRenamerRemoteSession.m"), 47, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("FPSandboxingURLWrapper");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFPSandboxingURLWrapperClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UINavigationBarTitleRenamerRemoteSession.m"), 48, CFSTR("Unable to find class %s"), "FPSandboxingURLWrapper");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_8_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getDOCFileRenamingSupportClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD788A8)
    qword_1ECD788A8 = _sl_dlopen();
  if (!qword_1ECD788A8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *DocumentManagerLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UINavigationBarTitleRenamerRemoteSession.m"), 43, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("DOCFileRenamingSupport");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getDOCFileRenamingSupportClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UINavigationBarTitleRenamerRemoteSession.m"), 44, CFSTR("Unable to find class %s"), "DOCFileRenamingSupport");

LABEL_8:
    __break(1u);
  }
  qword_1ECD788A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getDOCRenameSupportClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD788B8)
    qword_1ECD788B8 = _sl_dlopen();
  if (!qword_1ECD788B8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *DocumentManagerCoreLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UINavigationBarTitleRenamerRemoteSession.m"), 40, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("DOCRenameSupport");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getDOCRenameSupportClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UINavigationBarTitleRenamerRemoteSession.m"), 41, CFSTR("Unable to find class %s"), "DOCRenameSupport");

LABEL_8:
    __break(1u);
  }
  qword_1ECD788B0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

__CFString *sensorActivityScreenIdentifier(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;

  v1 = a1;
  v2 = v1;
  if (!v1 || (objc_msgSend(v1, "_isEmbeddedScreen") & 1) != 0 || (objc_msgSend(v2, "_isCarScreen") & 1) != 0)
  {
    v3 = &stru_1E16EDF20;
  }
  else
  {
    objc_msgSend(v2, "_displayID");
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

void sub_186179A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIGetUIStatusBarForcedMode()
{
  int v0;
  uint64_t result;
  int v2;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1)
    return -1;
  v2 = _UIInternalPreference_UIStatusBarForcedMode;
  if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_UIStatusBarForcedMode)
    return -1;
  while (v0 >= v2)
  {
    _UIInternalPreferenceSync(v0, &_UIInternalPreference_UIStatusBarForcedMode, (uint64_t)CFSTR("UIStatusBarForcedMode"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger);
    v2 = _UIInternalPreference_UIStatusBarForcedMode;
    result = -1;
    if (v0 == _UIInternalPreference_UIStatusBarForcedMode)
      return result;
  }
  return qword_1EDDA8310;
}

void sub_18617CB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18617CF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18617EDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  _Block_object_dispose(&a42, 8);
  _Unwind_Resume(a1);
}

void _UITextLayoutDrawRangeInContext(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;

  v5 = a1;
  v6 = a2;
  objc_msgSend(v6, "location");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___UITextLayoutDrawRangeInContext_block_invoke;
  v11[3] = &unk_1E16E2450;
  v12 = v6;
  v13 = v5;
  v14 = a3;
  v8 = v5;
  v10 = v6;
  v9 = (id)objc_msgSend(v8, "enumerateTextLayoutFragmentsFromLocation:options:usingBlock:", v7, 4, v11);

}

void sub_186181B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIStatusBarRunningAnimations()
{
  return (id)_statusBarRunningAnimations;
}

void sub_186183A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a42, 8);
  _Unwind_Resume(a1);
}

void sub_186184A70(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18618597C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

id _UIStatusBarDelayedDataEntryKeys()
{
  return (id)_statusBarDelayedDataEntryKeys;
}

void sub_18618D9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIFocusBehaviorForScene(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    objc_msgSend(a1, "_focusSystemSceneComponent");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "focusSystem");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "behavior");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    +[UITraitCollection _fallbackTraitCollection]();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    _UIFocusBaseBehaviorForTraitCollection(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

id _UIFocusBehaviorForEnvironment(uint64_t a1)
{
  void *v1;
  void *v2;

  if (a1)
  {
    +[UIFocusSystem focusSystemForEnvironment:](UIFocusSystem, "focusSystemForEnvironment:", a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "behavior");
  }
  else
  {
    +[UITraitCollection _fallbackTraitCollection]();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    _UIFocusBaseBehaviorForTraitCollection(v1);
  }
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void _UIFocusBehaviorSetOverrideFocusSystemEnabled(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  objc_msgSend(a2, "_focusSystemSceneComponent");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setOverrideFocusSystemEnabled:withIdentifier:", a1, v5);

}

uint64_t _UIFocusBehaviorGetOverrideFocusSystemEnabled(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "_focusSystemSceneComponent");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isOverrideFocusSystemEnabled");

  return v2;
}

void sub_186191978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186191FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id UIStatusBarLocalizedNotChargingString()
{
  void *v0;
  void *v1;

  _UIKitBundle();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("Not Charging"), CFSTR("Not Charging"), CFSTR("Localizable"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id UIStatusBarLocalizedRecordingStringForAppName(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  _UIKitBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Recording"), CFSTR("Recording"), CFSTR("Localizable"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ (%@)"), v1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _UIStatusBar_Log()
{
  if (qword_1ECD7AF88 != -1)
    dispatch_once(&qword_1ECD7AF88, &__block_literal_global_499);
  return (id)_MergedGlobals_11_11;
}

BOOL _indirectTouchTest_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "type") == 1;
}

void _UIStatusBarDisableAutomaticCenterItemAnimationDetection()
{
  _shouldAutomaticallyDetectCenterItemAnimation = 1;
}

id UIStatusBarCreateHUDBatteryImage(void *a1, void *a2, int a3, int a4, int a5, double a6, double a7)
{
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CGFloat v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _QWORD *ContextStack;
  CGContext *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  id v52;
  _QWORD *v53;
  CGContext *v54;
  double v55;
  double v56;
  const CGPath *v57;
  const CGPath *v58;
  double v59;
  CGFloat v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  CGFloat v74;
  double v75;
  CGFloat v76;
  uint64_t v77;
  CGFloat v79;
  CGFloat v80;
  double v81;
  _QWORD v82[2];
  _QWORD v83[3];
  CGRect v84;
  CGRect v85;
  CGRect v86;

  v83[2] = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v14 = a2;
  +[UIImage kitImageNamed:](UIImage, "kitImageNamed:", CFSTR("Black_BatteryDrainingBG"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIImage kitImageNamed:](UIImage, "kitImageNamed:", CFSTR("Black_BatteryChargingAccessory"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIColor blackColor](UIColor, "blackColor");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v14, "isEqual:", v17);

  if ((v18 & 1) == 0)
  {
    objc_msgSend(v15, "_flatImageWithColor:", v14);
    v19 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v16, "_flatImageWithColor:", v14);
    v20 = objc_claimAutoreleasedReturnValue();

    v16 = (void *)v20;
    v15 = (void *)v19;
  }
  objc_msgSend(v15, "size");
  v22 = 75.0 / v21;
  objc_msgSend(v15, "size");
  v24 = v23;
  v26 = v25;
  if (a3)
  {
    objc_msgSend(v16, "size");
    v24 = v24 + v27 + 3.0;
  }
  v28 = v26 * v22;
  v29 = v22 * v24;
  v81 = v28;
  _UIGraphicsBeginImageContextWithOptions(0, 0, v22 * v24, v28, a7);
  objc_msgSend(v15, "size");
  v31 = v22 * v30;
  objc_msgSend(v15, "size");
  objc_msgSend(v15, "drawInRect:", 0.0, 0.0, v31, v22 * v32);
  if (a3)
  {
    v33 = a7;
    if (a4)
    {
      objc_msgSend(v16, "imageWithHorizontallyFlippedOrientation");
      v34 = objc_claimAutoreleasedReturnValue();

      v16 = (void *)v34;
    }
    objc_msgSend(v15, "size");
    v36 = v35 + 3.0;
    objc_msgSend(v15, "size");
    v38 = v37;
    objc_msgSend(v16, "size");
    v40 = v22 * ((v38 - v39) * 0.5);
    objc_msgSend(v16, "size");
    v42 = v22 * v41;
    objc_msgSend(v16, "size");
    objc_msgSend(v16, "drawInRect:", v22 * v36, v40, v42, v22 * v43);
    a7 = v33;
  }
  ContextStack = GetContextStack(0);
  if (*(int *)ContextStack < 1)
    v45 = 0;
  else
    v45 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  CGContextScaleCTM(v45, v22, v22);
  objc_msgSend(v15, "size");
  v47 = v46;
  v49 = v48;
  if (a7 <= 2.5)
    v50 = 1.0;
  else
    v50 = 1.33333333;
  if (a7 <= 2.5)
    v51 = 4.5;
  else
    v51 = 4.33333333;
  v52 = v13;
  v53 = GetContextStack(0);
  if (*(int *)v53 < 1)
    v54 = 0;
  else
    v54 = (CGContext *)v53[3 * (*(_DWORD *)v53 - 1) + 1];
  CGContextSaveGState(v54);
  objc_msgSend(v52, "setFill");

  v55 = v47 - (v51 + 2.0);
  v56 = v49 + -4.0;
  v84.origin.x = 2.0;
  v84.origin.y = 2.0;
  v84.size.width = v55;
  v84.size.height = v56;
  v57 = CGPathCreateWithRoundedRect(v84, v50, v50, 0);
  if (v57)
  {
    v58 = v57;
    CGContextAddPath(v54, v57);
    CGContextClip(v54);
    CGPathRelease(v58);
  }
  v59 = v55 * a6;
  if (v55 * a6 < 1.0)
    v59 = 1.0;
  UIRoundToScale(v59, a7);
  v85.size.width = v60;
  v85.origin.x = 2.0;
  v85.origin.y = 2.0;
  v85.size.height = v56;
  UIRectFillUsingBlendMode(v85, kCGBlendModeNormal);
  CGContextRestoreGState(v54);
  _UIGraphicsGetImageFromCurrentImageContext(0);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  UIGraphicsEndImageContext();
  if (a4)
  {
    objc_msgSend(v61, "imageWithHorizontallyFlippedOrientation");
    v62 = objc_claimAutoreleasedReturnValue();

    v61 = (void *)v62;
  }
  if (a5)
  {
    v63 = (void *)MEMORY[0x1E0CB37F0];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a6);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "localizedStringFromNumber:numberStyle:", v64, 3);
    v65 = (void *)objc_claimAutoreleasedReturnValue();

    v66 = objc_alloc(MEMORY[0x1E0CB3498]);
    v82[0] = *(_QWORD *)off_1E1678D90;
    objc_msgSend(off_1E167A828, "preferredFontForTextStyle:", CFSTR("UICTFontTextStyleFootnote"));
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    v82[1] = *(_QWORD *)off_1E1678D98;
    v83[0] = v67;
    v83[1] = v14;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v83, v82, 2);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = (void *)objc_msgSend(v66, "initWithString:attributes:", v65, v68);

    objc_msgSend(v69, "boundingRectWithSize:options:context:", 1, 0, 1.79769313e308, 1.79769313e308);
    v71 = v70;
    v73 = v72;
    v74 = fmax(v29, v70);
    v79 = v81 + 8.0 + v72;
    v75 = a7;
    v76 = round((v74 - v29) * 0.5 + 0.0);
    v86.origin.y = 0.0;
    v86.origin.x = v76;
    v86.size.width = v29;
    v86.size.height = v81;
    v80 = CGRectGetMaxY(v86) + 8.0;
    _UIGraphicsBeginImageContextWithOptions(0, 0, v74, v79, v75);
    objc_msgSend(v61, "drawInRect:", v76, 0.0, v29, v81);
    objc_msgSend(v69, "drawWithRect:options:context:", 1, 0, round((v74 - v71) * 0.5 + 0.0), v80, v71, v73);
    _UIGraphicsGetImageFromCurrentImageContext(0);
    v77 = objc_claimAutoreleasedReturnValue();

    UIGraphicsEndImageContext();
    v61 = (void *)v77;
  }

  return v61;
}

id _UIUpdateInputTimingProfilePath(const char *a1)
{
  void *v1;
  char v3[1024];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = (void *)MEMORY[0x1E0CB3940];
  makeProfilePath(a1, v3);
  objc_msgSend(v1, "stringWithCString:encoding:", v3, 4);
  return (id)objc_claimAutoreleasedReturnValue();
}

_UIGestureRecognizerCompositionDriver *_UIGestureRecognizerComposeParallelDrivers(void *a1)
{
  _UIGestureRecognizerCompositionDriver *v2;
  _UIGestureRecognizerCompositionDriver *v3;
  NSArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  objc_super v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = [_UIGestureRecognizerCompositionDriver alloc];
  if (v2)
  {
    if ((unint64_t)objc_msgSend(a1, "count") <= 1)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", sel_initWithDrivers_stateCombiner_, v2, CFSTR("_UIGestureRecognizerDriverComposition.m"), 30, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("drivers.count >= 2"));

    }
    v15.receiver = v2;
    v15.super_class = (Class)_UIGestureRecognizerCompositionDriver;
    v3 = (_UIGestureRecognizerCompositionDriver *)objc_msgSendSuper2(&v15, sel_init);
    v2 = v3;
    if (v3)
    {
      objc_storeStrong((id *)&v3->_drivers, a1);
      v2->_stateCombiner = _combineParallel;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v4 = v2->_drivers;
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v12;
        do
        {
          v8 = 0;
          do
          {
            if (*(_QWORD *)v12 != v7)
              objc_enumerationMutation(v4);
            objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v8++), "setDelegate:", v2);
          }
          while (v6 != v8);
          v6 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
        }
        while (v6);
      }

    }
  }
  return v2;
}

uint64_t _combineParallel(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if (result != a2 && result != 3)
  {
    v2 = 2;
    v4 = result == 1 || a2 == 1;
    if (a2 == 2)
      v4 = 2;
    if (result != 2)
      v2 = v4;
    if (a2 == 3)
      return 3;
    else
      return v2;
  }
  return result;
}

id _cachePath()
{
  if (qword_1ECD80420 != -1)
    dispatch_once(&qword_1ECD80420, &__block_literal_global_501);
  return (id)qword_1ECD80418;
}

void ___cachePath_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  _cacheBasePath();
  v3 = (id)objc_claimAutoreleasedReturnValue();
  _cacheVersionPathComponent();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByAppendingPathComponent:", v0);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)qword_1ECD80418;
  qword_1ECD80418 = v1;

}

id _cacheBasePath()
{
  if (qword_1ECD80430 != -1)
    dispatch_once(&qword_1ECD80430, &__block_literal_global_29_5);
  return (id)qword_1ECD80428;
}

id _cacheVersionPathComponent()
{
  if (qword_1ECD80440 != -1)
    dispatch_once(&qword_1ECD80440, &__block_literal_global_37_4);
  return (id)qword_1ECD80438;
}

void ___cacheBasePath_block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[5];

  v4[4] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0CB3940];
  v4[0] = CPSharedResourcesDirectory();
  v4[1] = CFSTR("Library");
  v4[2] = CFSTR("Caches");
  v4[3] = CFSTR("com.apple.UIStatusBar");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 4);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "pathWithComponents:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ECD80428;
  qword_1ECD80428 = v2;

}

void ___cacheVersionPathComponent_block_invoke()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  NSObject *v3;
  uint8_t v4[12];
  int v5;

  v5 = 0;
  v0 = MGCopyAnswerWithError();
  v1 = (void *)qword_1ECD80438;
  qword_1ECD80438 = v0;

  if (!qword_1ECD80438)
  {
    v2 = qword_1ECD80448;
    if (!qword_1ECD80448)
    {
      v2 = __UILogCategoryGetNode("StatusBar", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v2, (unint64_t *)&qword_1ECD80448);
    }
    v3 = *(NSObject **)(v2 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "Could not retrieve build version number.", v4, 2u);
    }
  }
}

void ___cacheVersion_block_invoke()
{
  id v0;

  _cacheVersionPathComponent();
  v0 = (id)objc_claimAutoreleasedReturnValue();
  qword_1ECD80450 = objc_msgSend(v0, "hash");

}

void ___cleanOutOldCacheFilesIfNeeded_block_invoke()
{
  NSObject *v0;

  if (objc_msgSend((id)UIApp, "_isSpringBoard"))
  {
    dispatch_get_global_queue(-32768, 0);
    v0 = objc_claimAutoreleasedReturnValue();
    dispatch_async(v0, &__block_literal_global_42);

  }
}

void ___cleanOutOldCacheFilesIfNeeded_block_invoke_2()
{
  unint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  void *v7;
  int v8;
  int v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  id v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  unint64_t v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  unint64_t v25;
  NSObject *v26;
  NSObject *v27;
  __int128 v28;
  void *v29;
  id v30;
  uint8_t buf[4];
  _BYTE v32[10];
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v0 = qword_1ECD80468;
  if (!qword_1ECD80468)
  {
    v0 = __UILogCategoryGetNode("StatusBar", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v0, (unint64_t *)&qword_1ECD80468);
  }
  if ((*(_BYTE *)v0 & 1) != 0)
  {
    v26 = *(NSObject **)(v0 + 8);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v26, OS_LOG_TYPE_ERROR, "Checking for obsolete status bar cache items to delete.", buf, 2u);
    }
  }
  _cacheBasePath();
  v1 = objc_claimAutoreleasedReturnValue();
  _cacheVersionPathComponent();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = (void *)v1;
  objc_msgSend(v3, "enumeratorAtPath:", v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "nextObject");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v7 = (void *)v5;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)&v6 = 138412290;
    v28 = v6;
    do
    {
      objc_msgSend(v4, "skipDescendants", v28);
      if ((objc_msgSend(v7, "isEqualToString:", v2) & 1) == 0)
      {
        v10 = qword_1ECD80470;
        if (!qword_1ECD80470)
        {
          v10 = __UILogCategoryGetNode("StatusBar", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v10, (unint64_t *)&qword_1ECD80470);
        }
        if ((*(_BYTE *)v10 & 1) != 0)
        {
          v19 = *(NSObject **)(v10 + 8);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v28;
            *(_QWORD *)v32 = v7;
            _os_log_impl(&dword_185066000, v19, OS_LOG_TYPE_ERROR, "Deleting obsolete status bar cache item: %@", buf, 0xCu);
          }
        }
        _cacheBasePath();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "stringByAppendingPathComponent:", v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 0;
        v14 = objc_msgSend(v13, "removeItemAtPath:error:", v12, &v30);
        v15 = v30;

        if (v14)
        {
          ++v8;
        }
        else
        {
          v16 = qword_1ECD80478;
          if (!qword_1ECD80478)
          {
            v16 = __UILogCategoryGetNode("StatusBar", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v16, (unint64_t *)&qword_1ECD80478);
          }
          ++v9;
          v17 = *(NSObject **)(v16 + 8);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)v32 = v12;
            *(_WORD *)&v32[8] = 2112;
            v33 = v15;
            _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, "Could not remove obsolete status bar cache item at “%@”, error: %@", buf, 0x16u);
          }
        }

      }
      objc_msgSend(v4, "nextObject");
      v18 = objc_claimAutoreleasedReturnValue();

      v7 = (void *)v18;
    }
    while (v18);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  if (v8 | v9)
  {
    v20 = qword_1ECD80480;
    if (!qword_1ECD80480)
    {
      v20 = __UILogCategoryGetNode("StatusBar", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v20, (unint64_t *)&qword_1ECD80480);
    }
    if ((*(_BYTE *)v20 & 1) != 0)
    {
      v21 = *(NSObject **)(v20 + 8);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v32 = v8;
        *(_WORD *)&v32[4] = 1024;
        *(_DWORD *)&v32[6] = v9;
        v22 = "Finished deleting obsolete cache items. %d items deleted; %d items could not be deleted.";
        v23 = v21;
        v24 = 14;
LABEL_36:
        _os_log_impl(&dword_185066000, v23, OS_LOG_TYPE_ERROR, v22, buf, v24);
      }
    }
  }
  else
  {
    v25 = qword_1ECD80488;
    if (!qword_1ECD80488)
    {
      v25 = __UILogCategoryGetNode("StatusBar", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v25, (unint64_t *)&qword_1ECD80488);
    }
    if ((*(_BYTE *)v25 & 1) != 0)
    {
      v27 = *(NSObject **)(v25 + 8);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v22 = "Finished deleting obsolete cache items. No obsolete items found.";
        v23 = v27;
        v24 = 2;
        goto LABEL_36;
      }
    }
  }

}

id _UIUserInterfaceStyleArbiterLogger()
{
  if (qword_1ECD80498 != -1)
    dispatch_once(&qword_1ECD80498, &__block_literal_global_502);
  return (id)_MergedGlobals_1224;
}

void sub_1861A2340(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1861A29F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getBMDisplayAppearanceClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  BiomeLibraryLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("BMDisplayAppearance");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD804B8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMDisplayAppearanceClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIUserInterfaceStyleArbiter.m"), 33, CFSTR("Unable to find class %s"), "BMDisplayAppearance");

    __break(1u);
  }
}

void *BiomeLibraryLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!BiomeLibraryLibraryCore_frameworkLibrary)
    BiomeLibraryLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)BiomeLibraryLibraryCore_frameworkLibrary;
  if (!BiomeLibraryLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BiomeLibraryLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIUserInterfaceStyleArbiter.m"), 32, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_1861A35E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _stickersLog()
{
  if (qword_1ECD79F10 != -1)
    dispatch_once(&qword_1ECD79F10, &__block_literal_global_222_1);
  return (id)_MergedGlobals_1_21;
}

id getCKBrowserViewControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD79F18;
  v7 = qword_1ECD79F18;
  if (!qword_1ECD79F18)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCKBrowserViewControllerClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getCKBrowserViewControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1861A3C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861A4F7C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void ___stickersLog_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.UIKit", "Stickers");
  v1 = (void *)_MergedGlobals_1_21;
  _MergedGlobals_1_21 = (uint64_t)v0;

}

Class __getCKBrowserViewControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD79F20)
    qword_1ECD79F20 = _sl_dlopen();
  if (!qword_1ECD79F20)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ChatKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIStickerPickerViewController.m"), 27, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CKBrowserViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCKBrowserViewControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIStickerPickerViewController.m"), 28, CFSTR("Unable to find class %s"), "CKBrowserViewController");

LABEL_8:
    __break(1u);
  }
  qword_1ECD79F18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1861A7658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861A77EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861AA9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL UIStatusBarDateItemCanBeEnabledOnPad(void *a1)
{
  uint64_t v1;
  void *v2;
  _BOOL8 v3;

  v1 = objc_msgSend(a1, "rawData");
  _UIKitUserDefaults();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (objc_msgSend(v2, "BOOLForKey:", CFSTR("StatusBarHidesDate")) & 1) == 0 && *(_BYTE *)(v1 + 1) != 0;

  return v3;
}

BOOL UIStatusBarBluetoothItemCanBeEnabled(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "rawData");
  return *(_BYTE *)(v1 + 16) && *(_BYTE *)(v1 + 15) != 0;
}

uint64_t UIStatusBarDoubleHeightItemCanBeEnabled(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "userInterfaceIdiom") == 1)
  {
    objc_msgSend(v3, "doubleHeightStatus");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "length"))
      v7 = objc_msgSend(v4, "isDoubleHeight");
    else
      v7 = 0;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t UIStatusBarActivityItemCanBeEnabled(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = objc_msgSend(a1, "rawData");
  if (!*(_BYTE *)(v1 + 32))
    return 0;
  if (!*(_BYTE *)(v1 + 2273))
    return 1;
  v2 = v1 + 2273;
  +[UIApplication displayIdentifier](UIApplication, "displayIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v2, 4);
  v5 = v4;
  if (v3)
    v6 = objc_msgSend(v4, "hasPrefix:", v3);
  else
    v6 = 0;

  return v6;
}

uint64_t _UILegibilityStyleFromStatusBarStyle(uint64_t a1)
{
  if (a1 == 3)
    return 2;
  else
    return a1 == 1;
}

uint64_t _UIStatusBarStyleFromLegibilityStyle(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = -1;
  if (a1 == 2)
    return 3;
  else
    return v1;
}

void sub_1861AE558(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  id *v3;

  v3 = v1;
  objc_destroyWeak(v3);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1861B0D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1861B2A14(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

CGFloat _UIAdjustedLocationForScreenTouchLocation(void *a1, CGFloat a2)
{
  id v3;
  void *v4;
  void *v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  void *v15;
  double v16;
  double v17;
  void *v18;
  uint64_t v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v3 = a1;
  objc_msgSend(v3, "windowScene");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "statusBarManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "statusBarFrame");
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;

  if (_UIAppUseModernRotationAndPresentationBehaviors())
  {
LABEL_2:
    v20.origin.x = v7;
    v20.origin.y = v9;
    v20.size.width = v11;
    v20.size.height = v13;
    CGRectGetHeight(v20);
  }
  else
  {
    +[UIScreen mainScreen](UIScreen, "mainScreen");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "bounds");
    v17 = v16;

    objc_msgSend(v3, "windowScene");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "interfaceOrientation");

    switch(v19)
    {
      case 1:
      case 2:
        goto LABEL_2;
      case 3:
        v21.origin.x = v7;
        v21.origin.y = v9;
        v21.size.width = v11;
        v21.size.height = v13;
        a2 = v17 - (CGRectGetWidth(v21) + 1.0);
        break;
      case 4:
        v22.origin.x = v7;
        v22.origin.y = v9;
        v22.size.width = v11;
        v22.size.height = v13;
        a2 = CGRectGetWidth(v22) + 1.0;
        break;
      default:
        break;
    }
  }

  return a2;
}

void sub_1861B513C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1861B8FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1861BCA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

Class __getSTKRemoteStickerEffectEditorViewControllerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD7A778)
    qword_1ECD7A778 = _sl_dlopen();
  result = objc_getClass("STKRemoteStickerEffectEditorViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_3_22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id _UIDictationGlowEffectLog()
{
  if (qword_1ECD80820 != -1)
    dispatch_once(&qword_1ECD80820, &__block_literal_global_508);
  return (id)_MergedGlobals_1227;
}

void sub_1861BE2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861BE618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id _UIFirstPopoverSeguePresentedControllerInUnwindingResponderChain(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = v5;
  v7 = 0;
  v8 = v5;
  if (v5 && v5 != v4)
  {
    v9 = v5;
    while (1)
    {
      objc_msgSend(v9, "_popoverController");
      v10 = objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        v11 = (void *)v10;
        objc_msgSend(v9, "_sourceViewControllerIfPresentedViaPopoverSegue");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12)
          break;
      }
      objc_msgSend(v9, "_nextViewControllerForUnwindSegueSearch");
      v8 = (id)objc_claimAutoreleasedReturnValue();

      v7 = 0;
      if (v8)
      {
        v9 = v8;
        if (v8 != v4)
          continue;
      }
      goto LABEL_10;
    }
    v7 = v9;
    v8 = v7;
  }
LABEL_10:

  return v7;
}

void sub_1861BFFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(&a9);
  _Unwind_Resume(a1);
}

void sub_1861C0334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(&a9);
  _Unwind_Resume(a1);
}

BOOL _canReuseExistingSwipeOccurrenceForSwipeDirection(void *a1, uint64_t a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a1;
  v4 = objc_msgSend(v3, "direction") == (a2 == 2) && (objc_msgSend(v3, "state") & 0xFFFFFFFFFFFFFFFELL) != 4;

  return v4;
}

__CFString *NSStringFromUISwipeState(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E16E32A8[a1];
}

__CFString *NSStringFromUISwipeDirection(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E16E32C0[a1];
}

id NSStringFromUISwipeConfig(_QWORD *a1)
{
  void *v2;
  __CFString *v3;
  void *v4;
  void *v5;

  v2 = (void *)MEMORY[0x1E0CB3940];
  if (*a1 > 2uLL)
    v3 = 0;
  else
    v3 = off_1E16E32C0[*a1];
  NSStringFromBOOL();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("{ %@, destructive: %@, open: %f, confirm: %f}"), v3, v4, a1[2], a1[3]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id NSStringFromUISwipeInfo(_QWORD *a1)
{
  void *v2;
  __CFString *v3;
  void *v4;
  void *v5;

  v2 = (void *)MEMORY[0x1E0CB3940];
  if (*a1 > 2uLL)
    v3 = 0;
  else
    v3 = off_1E16E32C0[*a1];
  NSStringFromBOOL();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("{ %@, animated: %@, x: %f, velocity: %f, stiffness: %f}"), v3, v4, a1[3], a1[4], a1[5]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

double _UIDirectionalMultiplierForSwipeDirection(uint64_t a1)
{
  double result;

  result = 1.0;
  if (a1 == 1)
    return -1.0;
  return result;
}

id _UIEffectiveActivityItemsConfiguration(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v1, "_effectiveActivityItemsConfiguration");
  else
    objc_msgSend(v1, "activityItemsConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

BOOL _UISwipeOccurrenceStateIsEndState(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

BOOL _UISwipeOccurrenceStateDisallowsUserInteraction(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

const __CFString *_NSStringFromSwipeOccurrenceState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR(".closed");
  else
    return off_1E16E3388[a1 - 1];
}

void UIContextualActionAlertForOutdatedCompletionHandlerExecution(void *a1)
{
  id v1;
  unint64_t v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = UIContextualActionAlertForOutdatedCompletionHandlerExecution___s_category;
  if (!UIContextualActionAlertForOutdatedCompletionHandlerExecution___s_category)
  {
    v2 = __UILogCategoryGetNode("UIContextualAction", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&UIContextualActionAlertForOutdatedCompletionHandlerExecution___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = 138412290;
    v5 = v1;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "The completion handler of an outdated contextual action was called after another action was performed. This will be ignored. Set a symbolic breakpoint on UIContextualActionAlertForOutdatedCompletionHandlerExecution to catch this in the debugger.\nOutdated action: %@", (uint8_t *)&v4, 0xCu);
  }

}

void sub_1861C6310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 120), 8);
  _Unwind_Resume(a1);
}

double _UISwipeActionGestureRecognizerEffectiveVelocity(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  void *v5;

  v1 = a1;
  objc_msgSend(v1, "view");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "velocityInView:", v2);
  v4 = v3;

  objc_msgSend(v2, "layer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "flipsHorizontalAxis"))
    v4 = -v4;

  return v4;
}

double _UISwipeActionGestureRecognizerEffectiveTranslation(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  void *v5;

  v1 = a1;
  objc_msgSend(v1, "view");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "translationInView:", v2);
  v4 = v3;

  objc_msgSend(v2, "layer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "flipsHorizontalAxis"))
    v4 = -v4;

  return v4;
}

void sub_1861CE1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861CE4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _isRenderingText(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  _BOOL4 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  CGRect v10;

  v1 = a1;
  objc_msgSend(v1, "currentImage");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(v1, "bounds");
    v3 = objc_msgSend(v1, "_defaultLayoutForHeight:", CGRectGetHeight(v10));
    objc_msgSend(v1, "titleLabel");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v4, "isHidden") & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      objc_msgSend(v1, "titleLabel");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "text");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v8, "length") != 0;

    }
    if (v3)
      v6 = 0;
    else
      v6 = v5;
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

double _UITableViewCellLayoutIntrinsicSizeForCellStackingLabels(void *a1, void *a2, double a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  char v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void *v26;
  double v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _BOOL8 v33;
  void *v34;
  void *v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  CGRect v41;

  v5 = a1;
  v6 = a2;
  objc_msgSend(v6, "_textLabel:", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "font");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "pointSize");
  v10 = v9;

  if (v10 == 0.0)
  {
    objc_msgSend(v5, "defaultTextLabelFontForCell:", v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setFont:", v11);

  }
  objc_msgSend(v6, "frame");
  v13 = v12;
  objc_msgSend(v6, "textLabel");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "numberOfLines");

  if (v7)
    objc_msgSend(v7, "font");
  else
    objc_msgSend(v5, "defaultTextLabelFontForCell:", v6);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "imageView");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "image");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "size");
  v20 = v19;

  if (v20 > 0.0)
    objc_msgSend(v7, "numberOfLines");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v21 = objc_msgSend(v5, "shouldIncreaseMarginForImageViewInCell:", v6);
    v22 = 0.0;
    if ((v21 & 1) == 0)
      objc_msgSend(v5, "requiredIndentationForFirstLineOfCell:rowWidth:forSizing:", v6, 1, a3);
    objc_msgSend(v7, "_setFirstParagraphFirstLineHeadIndent:", v22);
  }
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  objc_msgSend(v5, "getTextLabelRect:detailTextLabelRect:forCell:rowWidth:forSizing:", &v39, &v37, v6, 1, a3);
  v23 = *(double *)&v40;
  v24 = *MEMORY[0x1E0C9D538];
  v25 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  objc_msgSend(v6, "textLabel");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "textRectForBounds:limitedToNumberOfLines:", v15, v24, v25, v23, 1.79769313e308);

  v27 = *(double *)&v38;
  objc_msgSend(v6, "detailTextLabel");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "detailTextLabel");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "textRectForBounds:limitedToNumberOfLines:", objc_msgSend(v29, "numberOfLines"), v24, v25, v27, 1.79769313e308);

  objc_msgSend(v16, "_bodyLeading");
  if (objc_msgSend(v6, "separatorStyle"))
  {
    objc_msgSend(v6, "_separatorFrame");
    CGRectGetHeight(v41);
  }
  if (objc_msgSend(v5, "shouldStackAccessoryViewVerticallyForCell:editing:", v6, objc_msgSend(v6, "isEditing")))
  {
    objc_msgSend(v5, "customAccessoryViewForCell:editing:", v6, objc_msgSend(v6, "isEditing"));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "frame");

  }
  objc_msgSend(v6, "_detailTextLabel:", 0);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "text");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "length") != 0;

  objc_msgSend(v6, "_constants");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "_tableView");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "defaultRowHeightForTableView:cellStyle:hasDetailText:", v35, objc_msgSend(v6, "style"), v33);

  return v13;
}

__CFString *_logResponderChain(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  __CFString *v7;

  v1 = a1;
  if (v1)
  {
    v2 = v1;
    v3 = (void *)objc_opt_new();
    do
    {
      v4 = (objc_class *)objc_opt_class();
      NSStringFromClass(v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v5);

      objc_msgSend(v2, "nextResponder");
      v6 = objc_claimAutoreleasedReturnValue();

      v2 = (void *)v6;
    }
    while (v6);
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(" > "));
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = &stru_1E16EDF20;
  }
  return v7;
}

void sub_1861DC834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s8_s16_s24_s80(&a9);
  _Unwind_Resume(a1);
}

void sub_1861E70C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861E73F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSYDocumentAttributesClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SynapseLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SYDocumentAttributes");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSYDocumentAttributesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSYDocumentAttributesClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_UIReturnToDocumentAction.m"), 25, CFSTR("Unable to find class %s"), "SYDocumentAttributes");

    __break(1u);
  }
}

void SynapseLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!SynapseLibraryCore_frameworkLibrary)
    SynapseLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!SynapseLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SynapseLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("_UIReturnToDocumentAction.m"), 19, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getSYDocumentWorkflowsClientClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SynapseLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SYDocumentWorkflowsClient");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD808B0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSYDocumentWorkflowsClientClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_UIReturnToDocumentAction.m"), 27, CFSTR("Unable to find class %s"), "SYDocumentWorkflowsClient");

    __break(1u);
  }
}

void __getSYReturnToDocumentRequestClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SynapseLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SYReturnToDocumentRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD808B8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSYReturnToDocumentRequestClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_UIReturnToDocumentAction.m"), 28, CFSTR("Unable to find class %s"), "SYReturnToDocumentRequest");

    __break(1u);
  }
}

BOOL UIWebCurrentUserInterfaceIdiomIsSmallScreen()
{
  void *v0;
  uint64_t v1;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  return (v1 & 0xFFFFFFFFFFFFFFFBLL) == 0;
}

void sub_1861E86C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1861EDBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1861EE444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIRecursiveDescription(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x186DC9484]();
  visit(a1, a2, a3, v6, 0);
  objc_autoreleasePoolPop(v7);
  return v6;
}

{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___Z23_UIRecursiveDescriptionP11objc_objectP13objc_selectorU13block_pointerFP8NSStringS0_iPU15__autoreleasingS4_E_block_invoke;
  v4[3] = &__block_descriptor_48_e8__16__0_8l;
  v4[4] = MEMORY[0x1E0DE7D20];
  v4[5] = a2;
  _UIRecursiveDescription(a1, (uint64_t)v4, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void visit(void *a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  appendDescription(a1, a3, a4, (uint64_t)CFSTR("   | "), a5);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v17;
    v14 = a5 + 1;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v17 != v13)
          objc_enumerationMutation(v10);
        visit(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v15++), a2, a3, a4, v14);
      }
      while (v12 != v15);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v12);
  }

}

uint64_t ___Z23_UIRecursiveDescriptionP11objc_objectP13objc_selectorU13block_pointerFP8NSStringS0_iPU15__autoreleasingS4_E_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 32))(a2, *(_QWORD *)(a1 + 40));
}

id _UIAncestralDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  unint64_t v11;
  void *v12;

  v6 = (void *)objc_opt_new();
  v7 = (void *)MEMORY[0x186DC9484]();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
  if (v9)
  {
    v10 = v9;
    do
    {
      objc_msgSend(v8, "insertObject:atIndex:", v10, 0);
      v10 = (id)(*(uint64_t (**)(uint64_t, id))(a2 + 16))(a2, v10);
    }
    while (v10);
  }
  if (objc_msgSend(v8, "count"))
  {
    v11 = 0;
    do
    {
      objc_msgSend(v8, "objectAtIndexedSubscript:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      appendDescription(v12, a3, v6, (uint64_t)CFSTR("    "), v11);

      ++v11;
    }
    while (v11 < objc_msgSend(v8, "count"));
  }

  objc_autoreleasePoolPop(v7);
  return v6;
}

{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___Z23_UIAncestralDescriptionP11objc_objectP13objc_selectorU13block_pointerFP8NSStringS0_iPU15__autoreleasingS4_E_block_invoke;
  v4[3] = &__block_descriptor_48_e8__16__0_8l;
  v4[4] = MEMORY[0x1E0DE7D20];
  v4[5] = a2;
  _UIAncestralDescription(a1, (uint64_t)v4, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void appendDescription(void *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  void *v8;
  id v9;
  unint64_t v10;
  id v11;

  if (a2)
  {
    v11 = 0;
    (*(void (**)(uint64_t, void *, unint64_t, id *))(a2 + 16))(a2, a1, a5, &v11);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v11;
    if (!v8)
      goto LABEL_13;
  }
  else
  {
    objc_msgSend(a1, "description");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 0;
    if (!v8)
      goto LABEL_13;
  }
  if (objc_msgSend(a3, "length"))
    objc_msgSend(a3, "appendString:", CFSTR("\n"));
  if (v9)
  {
    objc_msgSend(a3, "appendString:", v9);
  }
  else if (a5)
  {
    v10 = 1;
    do
    {
      objc_msgSend(a3, "appendString:", a4);
      ++v10;
    }
    while (v10 <= a5);
  }
  objc_msgSend(a3, "appendString:", v8);
LABEL_13:

}

uint64_t ___Z23_UIAncestralDescriptionP11objc_objectP13objc_selectorU13block_pointerFP8NSStringS0_iPU15__autoreleasingS4_E_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 32))(a2, *(_QWORD *)(a1 + 40));
}

uint64_t UIKeyboardIsModularKeyboardPlatformEnabled()
{
  if (qword_1ECD808D8 != -1)
    dispatch_once(&qword_1ECD808D8, &__block_literal_global_521);
  return _MergedGlobals_1234;
}

uint64_t _UITableConstantsUseUIPSidebarMetrics()
{
  if (qword_1ECD808E8 != -1)
    dispatch_once(&qword_1ECD808E8, &__block_literal_global_522);
  return _MergedGlobals_1235;
}

uint64_t _UITableConstantsBackgroundColorTransformerHasMinimalImpact(unint64_t a1)
{
  return (a1 < 0xD) & (0x1081u >> a1);
}

__n128 __move_assignment_8_8_t0w8_s8_s16_s24_t32w41_s80_t88w48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  __n128 result;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;

  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;

  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v9 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;

  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v13 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;

  result = *(__n128 *)(a2 + 88);
  v15 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v15;
  *(__n128 *)(a1 + 88) = result;
  return result;
}

void _UITableConstantsGetBackgroundProperties(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v11;
  id v12;
  id v13;
  _OWORD v14[8];
  uint64_t v15;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_QWORD *)(a6 + 128) = 0;
  if (!a5 || !a4)
  {
    if (a5)
    {
      if (v11)
      {
        objc_msgSend(v11, "defaultSidebarCellBackgroundPropertiesForStyle:state:traitCollection:", a5, v12, v13);
        goto LABEL_11;
      }
    }
    else if (v11)
    {
      objc_msgSend(v11, "defaultCellBackgroundPropertiesForTableViewStyle:state:traitCollection:", 0, v12, v13);
      goto LABEL_11;
    }
LABEL_10:
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    goto LABEL_11;
  }
  if (!v11)
    goto LABEL_10;
  objc_msgSend(v11, "defaultSidebarHeaderBackgroundPropertiesWithState:traitCollection:", v12, v13);
LABEL_11:
  __move_assignment_8_8_t0w8_s8_s16_s24_t32w41_s80_t88w48(a6, (uint64_t)v14);

}

void sub_1861F1C60(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

id _UITableConstantsEffectiveBackgroundFillStyleFromProperties(uint64_t a1)
{
  unint64_t v1;
  BOOL v2;
  uint64_t v3;
  id v5;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = v1 > 0xC;
  v3 = (1 << v1) & 0x1081;
  if (v2 || v3 == 0)
    v5 = 0;
  else
    v5 = *(id *)a1;
  __destructor_8_s8_s16_s24_s80((id *)a1);
  return v5;
}

void sub_1861F1E6C(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_1861F27EC(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(v1);
  _Unwind_Resume(a1);
}

void sub_1861F379C(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_1861F3BB4(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_1861F4428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  __destructor_8_s8_s16_s24_s80(&a9);
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(v9);
  _Unwind_Resume(a1);
}

void _UITableConstantsApplyBoldSidebarStylingToContentProperties(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  NSString *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  objc_msgSend(off_1E167A828, "_preferredFontForTextStyle:weight:", CFSTR("UICTFontTextStyleBody"), *(double *)off_1E167DC68);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  v10 = v4;

  objc_msgSend(a2, "preferredContentSizeCategory");
  v6 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (UIContentSizeCategoryIsAccessibilityCategory(v6))
  {
    if (UIContentSizeCategoryCompareToCategory(v6, CFSTR("UICTContentSizeCategoryAccessibilityXL")) == NSOrderedAscending)
    {
      if (UIContentSizeCategoryCompareToCategory(v6, CFSTR("UICTContentSizeCategoryAccessibilityM")) == NSOrderedAscending)
        v7 = 3;
      else
        v7 = 2;
    }
    else
    {
      v7 = 1;
    }
  }
  else
  {
    v7 = 3;
  }

  +[UIImageSymbolConfiguration configurationWithFont:scale:](UIImageSymbolConfiguration, "configurationWithFont:scale:", v10, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;

}

void sub_1861F4724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

void sub_1861F48A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

CGColor *DKUCGColorCreateConvertedToSRGB(uint64_t a1)
{
  void *v1;
  id v2;
  CGColor *v3;
  double v5;
  double v6;
  double v7;
  double v8[2];

  v8[1] = *(double *)MEMORY[0x1E0C80C00];
  +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "getRed:green:blue:alpha:", &v5, &v6, &v7, v8);

  +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v5, v6, v7, v8[0]);
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v3 = (CGColor *)objc_msgSend(v2, "CGColor");

  CGColorRetain(v3);
  return v3;
}

void DKUColorGetRGBAComponents(CGColor *a1, _OWORD *a2)
{
  CGColor *ConvertedToSRGB;
  CGColorSpace *ColorSpace;
  CGColor *v5;
  const CGFloat *Components;
  __int128 v7;

  if (a1)
  {
    ConvertedToSRGB = a1;
    ColorSpace = CGColorGetColorSpace(a1);
    if (ColorSpace)
    {
      if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelRGB)
      {
        v5 = 0;
      }
      else
      {
        ConvertedToSRGB = DKUCGColorCreateConvertedToSRGB((uint64_t)ConvertedToSRGB);
        v5 = ConvertedToSRGB;
      }
      if (CGColorGetNumberOfComponents(ConvertedToSRGB) == 4)
      {
        Components = CGColorGetComponents(ConvertedToSRGB);
        v7 = *((_OWORD *)Components + 1);
        *a2 = *(_OWORD *)Components;
        a2[1] = v7;
      }
      if (v5)
        CGColorRelease(v5);
    }
  }
}

double DKUCalculateHue(double a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;

  v3 = a3 + -6.0;
  if (a3 < 6.0)
    v3 = a3;
  if (a3 < 0.0)
    v4 = a3 + 6.0;
  else
    v4 = v3;
  if (v4 < 1.0)
  {
    v5 = a2 - a1;
    return v5 * v4 + a1;
  }
  if (v4 >= 3.0)
  {
    if (v4 >= 4.0)
      return a1;
    v5 = a2 - a1;
    v4 = 4.0 - v4;
    return v5 * v4 + a1;
  }
  return a2;
}

void DKUConvertHSLToSRGB(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;

  v4 = *(double *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  if (fabs(v4) >= 0.00999999978)
  {
    v8 = *(double *)a1;
    v9 = v4 + v5 - v4 * v5;
    v10 = v5 * (v4 + 1.0);
    if (v5 <= 0.5)
      v11 = v10;
    else
      v11 = v9;
    v12 = v5 + v5 - v11;
    v13 = v8 * 6.0;
    v5 = DKUCalculateHue(v12, v11, v8 * 6.0 + 2.0);
    v6 = DKUCalculateHue(v12, v11, v13);
    v7 = DKUCalculateHue(v12, v11, v13 + -2.0);
  }
  else
  {
    v6 = *(double *)(a1 + 16);
    v7 = v6;
  }
  v14 = *(_QWORD *)(a1 + 24);
  *(double *)a2 = v5;
  *(double *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v14;
}

uint64_t DKUConvertsRGBToHSL(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;

  v2 = *(double *)result;
  v3 = *(double *)(result + 8);
  v4 = *(double *)(result + 16);
  v5 = fmax(fmax(*(double *)result, v3), v4);
  v6 = fmin(fmin(*(double *)result, v3), v4);
  v7 = v5 - v6;
  v8 = 0.0;
  v9 = 0.0;
  if (vabdd_f64(v5, v6) >= 0.00999999978)
  {
    if (v5 == v2)
    {
      v10 = (v3 - v4) / v7 * 60.0;
      v11 = 360.0;
    }
    else
    {
      if (v5 == v3)
      {
        v10 = (v4 - v2) / v7 * 60.0;
        v12 = 0x405E000000000000;
      }
      else
      {
        v10 = (v2 - v3) / v7 * 60.0;
        v12 = 0x406E000000000000;
      }
      v11 = *(double *)&v12;
    }
    v9 = v10 + v11;
  }
  v13 = v5 + v6;
  v14 = v13 * 0.5;
  if (v7 != 0.0)
  {
    if (v14 <= 0.5)
      v8 = v7 / v13;
    else
      v8 = v7 / (2.0 - v13);
  }
  v15 = v9 + -360.0;
  if (v9 < 360.0)
    v15 = v9;
  v16 = *(_QWORD *)(result + 24);
  *(double *)a2 = v15 / 360.0;
  *(double *)(a2 + 8) = v8;
  *(double *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v16;
  return result;
}

id _UITextFormattingViewControllerFormattingStyleClasses()
{
  if (qword_1ECD80938 != -1)
    dispatch_once(&qword_1ECD80938, &__block_literal_global_523);
  return (id)_MergedGlobals_1237;
}

void sub_1861F5E28(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id KeyboardUIServiceLog()
{
  if (qword_1ECD80948 != -1)
    dispatch_once(&qword_1ECD80948, &__block_literal_global_524);
  return (id)_MergedGlobals_1238;
}

uint64_t TableShouldUseExtraPaddingForCells(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  uint64_t v12;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  objc_msgSend(a1, "_scrollView");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_screen");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
    goto LABEL_5;
  objc_msgSend(v2, "bounds");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  objc_msgSend(v1, "frame");
  if (CGRectGetHeight(v14) < 916.0)
    goto LABEL_5;
  v15.origin.x = v5;
  v15.origin.y = v7;
  v15.size.width = v9;
  v15.size.height = v11;
  if (CGRectGetWidth(v15) >= 1366.0
    || (v16.origin.x = v5, v16.origin.y = v7, v16.size.width = v9, v16.size.height = v11, CGRectGetHeight(v16) >= 1366.0))
  {
    v12 = 1;
  }
  else
  {
LABEL_5:
    v12 = 0;
  }

  return v12;
}

void sub_1861F791C(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_1861F8664(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(v1);
  _Unwind_Resume(a1);
}

void sub_1861FA634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1861FB45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861FBB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861FBD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIScrollViewVFDTableLookup(unsigned int a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t *a5, float a6)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  float v15;

  if (a1 >= 2)
  {
    v6 = a2 + 16 * (a1 - 2) + 16;
    v7 = a1 - 1;
    v8 = a2;
    while (1)
    {
      v9 = *(_DWORD *)(v8 + 16);
      v8 += 16;
      if (v9 >= a3)
        break;
      a2 = v8;
      if (!--v7)
      {
        a2 = v6;
        break;
      }
    }
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 4);
  if (v11 >= 2)
  {
    v12 = v10 + 16 * (v11 - 2) + 16;
    v13 = v11 - 1;
    v14 = *(_QWORD *)(a2 + 8);
    while (1)
    {
      v15 = *(float *)(v14 + 16);
      v14 += 16;
      if (v15 >= a6)
        break;
      v10 = v14;
      if (!--v13)
      {
        v10 = v12;
        break;
      }
    }
  }
  *a4 = a2;
  *a5 = v10;
  return v10 + 4;
}

_QWORD *_UIScrollViewVFDTableFromString(_QWORD *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  _DWORD *v4;
  id v5;
  unsigned int v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t j;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  void *v26;
  void *v27;
  float *v28;
  void *v29;
  float v30;
  void *v31;
  float v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v48;
  void *v49;
  _QWORD *v50;
  id v51;
  _DWORD *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  unsigned int v60;
  id obj;
  void *v62;
  void *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  _BYTE v74[128];
  uint64_t v75;

  v1 = a1;
  v75 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (objc_msgSend(a1, "length"))
    {
      objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR(":"));
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("@"));
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR(","));
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("/"));
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = v1;
      objc_msgSend(v1, "componentsSeparatedByCharactersInSet:", v2);
      v3 = (void *)objc_claimAutoreleasedReturnValue();

      if (!objc_msgSend(v3, "count"))
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "handleFailureInFunction:file:lineNumber:description:", v49, CFSTR("_UIScrollViewVFD.m"), 181, CFSTR("Expecting at least 1 element in lines array, string=\"%@\""), v50);

      }
      v4 = malloc_type_malloc(16 * objc_msgSend(v3, "count"), 0x10200405730B0C9uLL);
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v5 = v3;
      v56 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v69, v74, 16);
      if (v56)
      {
        v6 = 0;
        v55 = *(_QWORD *)v70;
        v51 = v5;
        v52 = v4;
        do
        {
          for (i = 0; i != v56; ++i)
          {
            if (*(_QWORD *)v70 != v55)
              objc_enumerationMutation(v5);
            v8 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * i);
            objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "stringByTrimmingCharactersInSet:", v9);
            v10 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v10, "length"))
            {
              objc_msgSend(v10, "componentsSeparatedByCharactersInSet:", v54);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v11, "count") != 2)
              {
                objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)");
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v40, "handleFailureInFunction:file:lineNumber:description:", v41, CFSTR("_UIScrollViewVFD.m"), 190, CFSTR("Expecting 2 elements in parts array, line=\"%@\""), v10);

              }
              v58 = v10;
              v59 = i;
              objc_msgSend(v11, "objectAtIndexedSubscript:", 0);
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              v4[4 * v6] = objc_msgSend(v12, "integerValue");

              objc_msgSend(v11, "objectAtIndexedSubscript:", 1);
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "componentsSeparatedByCharactersInSet:", v53);
              v14 = (void *)objc_claimAutoreleasedReturnValue();

              if (!objc_msgSend(v14, "count"))
              {
                objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                v42 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)");
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v11, "objectAtIndexedSubscript:", 1);
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v42, "handleFailureInFunction:file:lineNumber:description:", v43, CFSTR("_UIScrollViewVFD.m"), 193, CFSTR("Expecting at least 1 element in items array, part=\"%@\""), v44);

              }
              v57 = v11;
              v60 = v6;
              v15 = (char *)&v4[4 * v6];
              *((_DWORD *)v15 + 1) = objc_msgSend(v14, "count");
              *((_QWORD *)v15 + 1) = malloc_type_malloc(16 * objc_msgSend(v14, "count"), 0x1000040451B5BE8uLL);
              v16 = v15 + 8;
              v65 = 0u;
              v66 = 0u;
              v67 = 0u;
              v68 = 0u;
              obj = v14;
              v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v73, 16);
              if (v17)
              {
                v18 = v17;
                v19 = 0;
                v64 = *(_QWORD *)v66;
                do
                {
                  for (j = 0; j != v18; ++j)
                  {
                    if (*(_QWORD *)v66 != v64)
                      objc_enumerationMutation(obj);
                    v21 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * j);
                    objc_msgSend(v21, "componentsSeparatedByCharactersInSet:", v63);
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    if (objc_msgSend(v22, "count") != 2)
                    {
                      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                      v35 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)");
                      v36 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:description:", v36, CFSTR("_UIScrollViewVFD.m"), 199, CFSTR("Expecting 2 elements in item parts array, item=\"%@\""), v21);

                    }
                    objc_msgSend(v22, "objectAtIndexedSubscript:", 0);
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v23, "floatValue");
                    v24 = (v19 + j);
                    *(_DWORD *)(*v16 + 16 * v24) = v25;

                    objc_msgSend(v22, "objectAtIndexedSubscript:", 1);
                    v26 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v26, "componentsSeparatedByCharactersInSet:", v62);
                    v27 = (void *)objc_claimAutoreleasedReturnValue();

                    if (objc_msgSend(v27, "count") != 3)
                    {
                      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                      v37 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)");
                      v38 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v22, "objectAtIndexedSubscript:", 1);
                      v39 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v37, "handleFailureInFunction:file:lineNumber:description:", v38, CFSTR("_UIScrollViewVFD.m"), 202, CFSTR("Expecting 3 elements in rates array, part=\"%@\""), v39);

                    }
                    v28 = (float *)(*v16 + 16 * v24);
                    objc_msgSend(v27, "objectAtIndexedSubscript:", 0);
                    v29 = (void *)objc_claimAutoreleasedReturnValue();
                    v30 = (float)objc_msgSend(v29, "integerValue");
                    objc_msgSend(v27, "objectAtIndexedSubscript:", 2);
                    v31 = (void *)objc_claimAutoreleasedReturnValue();
                    v32 = (float)objc_msgSend(v31, "integerValue");
                    objc_msgSend(v27, "objectAtIndexedSubscript:", 1);
                    v33 = (void *)objc_claimAutoreleasedReturnValue();
                    v34 = objc_msgSend(v33, "integerValue");
                    v28[1] = v30;
                    v28[2] = v32;
                    v28[3] = (float)v34;

                  }
                  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v73, 16);
                  v19 += j;
                }
                while (v18);
              }

              v6 = v60 + 1;
              v5 = v51;
              v4 = v52;
              v10 = v58;
              i = v59;
            }

          }
          v56 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v69, v74, 16);
        }
        while (v56);

        if (v6)
          goto LABEL_34;
      }
      else
      {

      }
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "handleFailureInFunction:file:lineNumber:description:", v46, CFSTR("_UIScrollViewVFD.m"), 208, CFSTR("Expecting at least 1 row, string=\"%@\""), v50);

      v6 = 0;
LABEL_34:
      v1 = malloc_type_malloc(0x10uLL, 0x1020040D5A9D86FuLL);
      *(_DWORD *)v1 = v6;
      v1[1] = malloc_type_realloc(v4, 16 * v6, 0x10200405730B0C9uLL);

      return v1;
    }
    return 0;
  }
  return v1;
}

uint64_t _UIHomeAffordanceSingleTapGatingEnabled()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
    return _UIDeviceSupportsGlobalEdgeSwipeTouches();
  return result;
}

__CFString *_UIEventDeferringEnvironmentsContainerSetDescription(void *a1)
{
  uint64_t v2;
  __CFString *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  uint64_t v16;
  id obj;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1, "count");
  v3 = CFSTR("(empty)");
  if (a1)
  {
    v4 = v2;
    if (v2)
    {
      v5 = (void *)objc_opt_new();
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      obj = a1;
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v6)
      {
        v7 = v6;
        v8 = 0;
        v9 = *(_QWORD *)v19;
        do
        {
          v10 = 0;
          v16 = v8;
          v11 = 1 - v4 + v8;
          do
          {
            if (*(_QWORD *)v19 != v9)
              objc_enumerationMutation(obj);
            objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v10), "description");
            v12 = objc_claimAutoreleasedReturnValue();
            v13 = (void *)v12;
            if (v11 + v10)
              v14 = CFSTR(", ");
            else
              v14 = &stru_1E16EDF20;
            objc_msgSend(v5, "appendFormat:", CFSTR("%@%@"), v12, v14);

            ++v10;
          }
          while (v7 != v10);
          v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
          v8 = v16 + v10;
        }
        while (v7);
      }

      v3 = (__CFString *)objc_msgSend(v5, "copy");
    }
  }
  return v3;
}

uint64_t shouldAllowDrop(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "_activeSourceDragSession");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(v4, "localDragSession");
    v6 = objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(v4, "localDragSession");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5 == v7)
        v6 = objc_msgSend(v3, "_shouldAllowInternalDrop");
      else
        v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

void sub_186205B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186206390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *_UITableViewStringFromDropIntent(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unknown Drop Intent");
  else
    return off_1E16E3AF0[a1];
}

void sub_18620B2C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

id realCellForRowAtIndexPath(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v3 = a1;
  v4 = a2;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__188;
  v17 = __Block_byref_object_dispose__188;
  v18 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __realCellForRowAtIndexPath_block_invoke;
  v9[3] = &unk_1E16B9698;
  v12 = &v13;
  v5 = v3;
  v10 = v5;
  v6 = v4;
  v11 = v6;
  objc_msgSend(v5, "_performUsingPresentationValues:", v9);
  v7 = (id)v14[5];

  _Block_object_dispose(&v13, 8);
  return v7;
}

void sub_18620D784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18620DB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __realCellForRowAtIndexPath_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "cellForRowAtIndexPath:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id _UICalendarFontWithWeight(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  objc_msgSend(off_1E167A830, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", a1, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (a4 > 0.0)
  {
    v18 = *(_QWORD *)off_1E167DC10;
    v16 = *(_QWORD *)off_1E167DC80;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v9;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "fontDescriptorByAddingAttributes:", v11);
    v12 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v12;
  }
  if (v7 && (objc_msgSend(v7, "isEqual:", *(_QWORD *)off_1E167DBF8) & 1) == 0)
  {
    objc_msgSend(v8, "fontDescriptorWithDesign:", v7);
    v13 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v13;
  }
  objc_msgSend(off_1E167A828, "fontWithDescriptor:size:", v8, 0.0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_18620F02C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

double _UIAXAdjustContentOffsetForDifferentialScrollingIfNecessary(void *a1, void *a2, double a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  double v11;

  v7 = a1;
  v8 = a2;
  objc_msgSend(v8, "item");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  _UIFocusBehaviorForEnvironment((uint64_t)v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v10, "shouldCallAccessibilityOverrides") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v7, "_ax_adjustedContentOffsetForDifferentialScrollingToShowFocusItemWithInfo:proposedContentOffset:", v8, a3, a4);
    a3 = v11;
  }

  return a3;
}

uint64_t localizedObjectSort(void *a1, void *a2, _QWORD *a3)
{
  uint64_t v6;
  void (*v7)(void *, uint64_t);
  void (*v8)(void *, uint64_t);
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  BOOL v15;
  uint64_t v16;

  v6 = a3[1];
  v7 = (void (*)(void *, uint64_t))objc_msgSend(a1, "methodForSelector:", v6);
  v8 = (void (*)(void *, uint64_t))objc_msgSend(a2, "methodForSelector:", v6);
  v9 = (void *)*a3;
  v7(a1, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "transformedCollationStringForString:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)*a3;
  v8(a2, v6);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "transformedCollationStringForString:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
    v15 = v14 == 0;
  else
    v15 = 1;
  if (v15)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("A nil string was passed for sorting."));
  v16 = objc_msgSend(v11, "compare:options:range:locale:", v14, 64, 0, objc_msgSend(v11, "length"), *(_QWORD *)(*a3 + 8));

  return v16;
}

_UIDisplayInfoProvider *_UIDisplayInfoNullProvider()
{
  return objc_alloc_init(_UIDisplayInfoProvider);
}

double _UITableViewDefaultSectionCornerRadiusForTraitCollection(void *a1)
{
  objc_msgSend(a1, "userInterfaceIdiom");
  return 10.0;
}

void sub_186212910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void UITableViewAlertForLayoutOutsideViewHierarchy(void *a1)
{
  id v1;
  id v2;
  _QWORD block[4];
  id v4;

  v2 = a1;
  if (((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UITableViewEnableAlertForLayoutOutsideViewHierarchy, (uint64_t)CFSTR("UITableViewEnableAlertForLayoutOutsideViewHierarchy"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) != 0|| byte_1ECD768EC)&& dyld_program_sdk_at_least()&& (objc_msgSend((id)objc_opt_class(), "_isInternalTableView") & 1) == 0)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __UITableViewAlertForLayoutOutsideViewHierarchy_block_invoke;
    block[3] = &unk_1E16B1B28;
    v1 = v2;
    v4 = v1;
    if (UITableViewAlertForLayoutOutsideViewHierarchy_once != -1)
    {
      dispatch_once(&UITableViewAlertForLayoutOutsideViewHierarchy_once, block);
      v1 = v4;
    }

  }
}

void _tagObjectForSelector(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v3 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___tagObjectForSelector_block_invoke;
  v5[3] = &unk_1E16B1888;
  v6 = v3;
  v7 = a2;
  v4 = v3;
  +[UIView _performForcedAppearanceModifications:](UIView, "_performForcedAppearanceModifications:", v5);

}

void _tagObjectForBackgroundColorIfNecessary(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  char v4;
  id v5;

  v5 = a1;
  objc_msgSend(v5, "backgroundColor");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    objc_msgSend(v5, "_constants");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "defaultBackgroundColorForTableViewStyle:", objc_msgSend(v5, "style"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v1, "isEqual:", v3);

    if ((v4 & 1) == 0)
      _tagObjectForSelector(v5, (uint64_t)sel_setBackgroundColor_);
  }

}

void UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate(void *a1)
{
  id v1;
  unint64_t v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      v5 = 138412290;
      v6 = v1;
      _os_log_fault_impl(&dword_185066000, v4, OS_LOG_TYPE_FAULT, "Attempted to call -cellForRowAtIndexPath: on the table view while it was in the process of updating its visible cells, which is not allowed. Make a symbolic breakpoint at UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate to catch this in the debugger and see what caused this to occur. Perhaps you are trying to ask the table view for a cell from inside a table view callback about a specific row? Table view: %@", (uint8_t *)&v5, 0xCu);
    }

  }
  else
  {
    v2 = UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate___s_category;
    if (!UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate___s_category)
    {
      v2 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v2, (unint64_t *)&UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate___s_category);
    }
    v3 = *(NSObject **)(v2 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v1;
      _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "Attempted to call -cellForRowAtIndexPath: on the table view while it was in the process of updating its visible cells, which is not allowed. Make a symbolic breakpoint at UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate to catch this in the debugger and see what caused this to occur. Perhaps you are trying to ask the table view for a cell from inside a table view callback about a specific row? Table view: %@", (uint8_t *)&v5, 0xCu);
    }
  }

}

void UITableViewAlertForVisibleCellsAccessDuringUpdate(void *a1)
{
  id v1;
  unint64_t v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      v5 = 138412290;
      v6 = v1;
      _os_log_fault_impl(&dword_185066000, v4, OS_LOG_TYPE_FAULT, "Attempted to access the table view's visibleCells while they were in the process of being updated, which is not allowed. Make a symbolic breakpoint at UITableViewAlertForVisibleCellsAccessDuringUpdate to catch this in the debugger and see what caused this to occur. Perhaps you are trying to ask the table view for the visible cells from inside a table view callback about a specific row? Table view: %@", (uint8_t *)&v5, 0xCu);
    }

  }
  else
  {
    v2 = UITableViewAlertForVisibleCellsAccessDuringUpdate___s_category;
    if (!UITableViewAlertForVisibleCellsAccessDuringUpdate___s_category)
    {
      v2 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v2, (unint64_t *)&UITableViewAlertForVisibleCellsAccessDuringUpdate___s_category);
    }
    v3 = *(NSObject **)(v2 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v1;
      _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "Attempted to access the table view's visibleCells while they were in the process of being updated, which is not allowed. Make a symbolic breakpoint at UITableViewAlertForVisibleCellsAccessDuringUpdate to catch this in the debugger and see what caused this to occur. Perhaps you are trying to ask the table view for the visible cells from inside a table view callback about a specific row? Table view: %@", (uint8_t *)&v5, 0xCu);
    }
  }

}

id _focusedCellForSelectionInteraction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  int v7;
  id v8;
  void *v9;

  v1 = a1;
  objc_msgSend(v1, "_focusSystem");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "focusedItem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (_IsKindOfUIView((uint64_t)v3))
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  if (v5
    && (objc_msgSend(v1, "_visibleCellsUsingPresentationValues:", 1),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v6, "containsObject:", v5),
        v6,
        v7))
  {
    v8 = v5;
    v9 = v3;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t _UITableViewHeadersFootersUseModernConfiguration()
{
  return (byte_1EDDA8334 != 0) & ~_UIInternalPreferenceUsesDefault(&_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration, (uint64_t)CFSTR("TableViewHeadersFootersUseModernConfiguration"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
}

void *___tagObjectForSelector_block_invoke(uint64_t a1)
{
  return _UIAppearanceTagObjectForSelector(*(void **)(a1 + 32), *(const char **)(a1 + 40), 0);
}

void sub_186235260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186236500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186236758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id supplementalItemQueue()
{
  if (qword_1ECD81990 != -1)
    dispatch_once(&qword_1ECD81990, &__block_literal_global_535);
  return (id)_MergedGlobals_1245;
}

void __supplementalItemQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.UIKit.supplementalItemQueue", v2);
  v1 = (void *)_MergedGlobals_1245;
  _MergedGlobals_1245 = (uint64_t)v0;

}

id supplementalItemMap()
{
  if (qword_1ECD819A0 != -1)
    dispatch_once(&qword_1ECD819A0, &__block_literal_global_3_18);
  return (id)qword_1ECD81998;
}

void __supplementalItemMap_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3748], "strongToWeakObjectsMapTable");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECD81998;
  qword_1ECD81998 = v0;

}

id supplementalItem(uint64_t a1)
{
  NSObject *v2;
  id v3;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v8[6];
  uint8_t buf[8];
  uint8_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  if (!a1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v7, OS_LOG_TYPE_FAULT, "Invalid supplemental item identifier", buf, 2u);
      }

    }
    else
    {
      v5 = supplementalItem___s_category;
      if (!supplementalItem___s_category)
      {
        v5 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v5, (unint64_t *)&supplementalItem___s_category);
      }
      v6 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "Invalid supplemental item identifier", buf, 2u);
      }
    }
  }
  *(_QWORD *)buf = 0;
  v10 = buf;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__191;
  v13 = __Block_byref_object_dispose__191;
  v14 = 0;
  supplementalItemQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __supplementalItem_block_invoke;
  v8[3] = &unk_1E16BF7E8;
  v8[4] = buf;
  v8[5] = a1;
  dispatch_sync(v2, v8);

  v3 = *((id *)v10 + 5);
  _Block_object_dispose(buf, 8);

  return v3;
}

void __supplementalItem_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  supplementalItemMap();
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", v2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

id _UIMenuLeafPresentationSourceItemFromSender(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  if (v1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v1, "_preferredPresentationSourceItem");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      _UIMenuLeafAPISenderFromSender(v1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      _UIPopoverPresentationControllerSourceItemUpCast(v3);
      v2 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id _UIMenuLeafAPISenderFromSender(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  if (v1 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "_preferredSender");
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = v1;
  }
  v3 = v2;

  return v3;
}

void _UIMenuStateObserverableLeafAddObserver(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "_getStateObservers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3868], "weakObjectsPointerArray");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_setStateObservers:", v5);
  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    while (2)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        if (*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10) == v4)
        {

          goto LABEL_13;
        }
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v8)
        continue;
      break;
    }
  }

  objc_msgSend(v6, "addPointer:", v4, (_QWORD)v11);
LABEL_13:

}

void _UIMenuStateObserverableLeafRemoveObserver(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v7 = a1;
  v3 = a2;
  objc_msgSend(v7, "_getStateObservers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4 && objc_msgSend(v4, "count"))
  {
    v6 = 0;
    while ((id)objc_msgSend(v5, "pointerAtIndex:", v6) != v3)
    {
      if (++v6 >= (unint64_t)objc_msgSend(v5, "count"))
        goto LABEL_10;
    }
    if (v6 != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(v5, "removePointerAtIndex:", v6);
      if (!objc_msgSend(v5, "count"))
        objc_msgSend(v7, "_setStateObservers:", 0);
    }
  }
LABEL_10:

}

void _UIMenuStateObserverableLeafWillPerformAction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "_getStateObservers");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v9;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v7++), "_elementWillPerformAction:", v1);
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v5);
    }
  }

}

void sub_186241600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getFontPickerClientFontContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)_MergedGlobals_1246;
  v7 = _MergedGlobals_1246;
  if (!_MergedGlobals_1246)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getFontPickerClientFontContextClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getFontPickerClientFontContextClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862416B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFontPickerClientFontContextClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD819B0)
    qword_1ECD819B0 = _sl_dlopen();
  if (!qword_1ECD819B0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *FontServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIFontPickerFontInfo.m"), 33, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("FontPickerClientFontContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFontPickerClientFontContextClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIFontPickerFontInfo.m"), 34, CFSTR("Unable to find class %s"), "FontPickerClientFontContext");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1246 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1862431FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

CGFloat _UITableRowHeightForExtraSeparators(void *a1, void *a2, CGFloat Height)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  void *v10;
  double v11;
  CGRect v13;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (Height <= 2.0)
  {
    v8 = (uint64_t)-[UITableViewRowData numberOfRows]((uint64_t)v6);
    if (v8 >= 1)
    {
      v13.origin.x = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](v7, v8 - 1, 1);
      Height = CGRectGetHeight(v13);
    }
    if (Height <= 2.0)
    {
      objc_msgSend(v5, "rowHeight");
      Height = v9;
      if (v9 <= 2.0)
      {
        objc_msgSend(v5, "_constants");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "defaultRowHeightForTableView:", v5);
        Height = v11;

      }
    }
  }

  return Height;
}

void _UITableInsertSubviewInContainerAboveAllCells(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a1;
  v3 = a2;
  objc_msgSend(v8, "subviews");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "indexOfObjectWithOptions:passingTest:", 2, &__block_literal_global_537);

  if (v5 == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(v8, "insertSubview:atIndex:", v3, 0);
  }
  else
  {
    objc_msgSend(v8, "subviews");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectAtIndexedSubscript:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "insertSubview:above:", v3, v7);

  }
}

id _UITableAnimateSwipeDeletion(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  UISwipeActionDeleteScanlineView *v45;
  UISwipeActionDeleteScanlineView *v46;
  double v47;
  BOOL v48;
  double v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  UISwipeActionDeleteScanlineView *v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double Width;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  CGFloat v70;
  double v71;
  double v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  UISwipeActionDeleteScanlineView *v79;
  UISwipeActionDeleteScanlineView *v80;
  id v81;
  void *v82;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  double v88;
  void *v89;
  id v90;
  id v91;
  id v92;
  double v93;
  double v94;
  void *v95;
  double v96;
  _QWORD v97[4];
  UISwipeActionDeleteScanlineView *v98;
  id v99;
  _QWORD v100[4];
  UISwipeActionDeleteScanlineView *v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  _QWORD v107[4];
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  double v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  _QWORD v121[4];
  id v122;
  id v123;
  double v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  _QWORD aBlock[4];
  id v133;
  UISwipeActionDeleteScanlineView *v134;
  id v135;
  id v136;
  _QWORD *v137;
  _QWORD v138[5];
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;

  v15 = a1;
  v91 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v87 = a8;
  v89 = v15;
  objc_msgSend(v15, "_scrollView");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "superview");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "frame");
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  objc_msgSend(v16, "superview");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "convertRect:fromView:", v31, v24, v26, v28, v30);
  v93 = v32;
  v34 = v33;
  v36 = v35;
  v38 = v37;

  objc_msgSend(v18, "offset");
  v40 = v39;
  +[UISwipeActionDeleteScanlineView lineHeight](UISwipeActionDeleteScanlineView, "lineHeight");
  v42 = v41;
  objc_msgSend(v16, "separatorInset");
  v44 = v43;
  v88 = v42;
  v45 = [UISwipeActionDeleteScanlineView alloc];
  v46 = -[UISwipeActionDeleteScanlineView initWithFrame:](v45, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
  v86 = v19;
  -[UISwipeActionDeleteScanlineView setDeleteLineColor:](v46, "setDeleteLineColor:", v19);
  -[UIView setAlpha:](v46, "setAlpha:", 0.0);
  -[UIView setFrame:](v46, "setFrame:", v44, v34 - v42, v36, v38 - v42);
  v85 = v22;
  _UITableInsertSubviewInContainerAboveAllCells(v22, v46);
  objc_msgSend(v21, "setUserInteractionEnabled:", 0);
  objc_msgSend(v16, "setAutoresizesSubviews:", 0);
  objc_msgSend(v16, "_setSkipsLayout:", 1);
  objc_msgSend(v16, "_setDeleteAnimationInProgress:", 1);
  objc_msgSend(v18, "velocity");
  if (v47 < 0.0)
    v47 = -v47;
  v48 = v47 <= 0.00000011920929;
  v49 = 0.08;
  if (!v48)
    v49 = 0.0;
  v96 = v49;
  v95 = v18;
  +[_UISwipeAnimationFactory animatorForTentativeWithOccurrence:](_UISwipeAnimationFactory, "animatorForTentativeWithOccurrence:", v18);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UISwipeAnimationFactory animatorForCollapse](_UISwipeAnimationFactory, "animatorForCollapse");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UISwipeAnimationFactory animatorForScanlineCollapse](_UISwipeAnimationFactory, "animatorForScanlineCollapse");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v138[0] = 0;
  v138[1] = v138;
  v138[2] = 0x2020000000;
  v138[3] = 2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___UITableAnimateSwipeDeletion_block_invoke;
  aBlock[3] = &unk_1E16E4390;
  v137 = v138;
  v53 = v16;
  v133 = v53;
  v54 = v46;
  v134 = v54;
  v55 = v21;
  v135 = v55;
  v56 = v20;
  v136 = v56;
  v57 = _Block_copy(aBlock);
  objc_msgSend(v50, "addCompletion:", v57);
  objc_msgSend(v51, "addCompletion:", v57);
  objc_msgSend(v17, "frame");
  v59 = v58;
  v61 = v60;
  v62 = v93 - v40;
  v139.origin.x = v62;
  v139.origin.y = v34;
  v139.size.width = v36;
  v139.size.height = v38;
  Width = CGRectGetWidth(v139);
  v84 = v56;
  v94 = v62;
  if (objc_msgSend(v18, "direction"))
  {
    v140.origin.x = v62;
    v140.origin.y = v34;
    v140.size.width = v36;
    v140.size.height = v38;
    v64 = CGRectGetWidth(v140);
    v65 = v36;
    v66 = v34;
    v67 = v59;
    v68 = 0.0;
  }
  else
  {
    v141.origin.x = v62;
    v141.origin.y = v34;
    v141.size.width = v36;
    v141.size.height = v38;
    v69 = CGRectGetWidth(v141);
    v142.origin.x = v62;
    v142.origin.y = v34;
    v142.size.width = v36;
    v142.size.height = v38;
    v70 = CGRectGetWidth(v142);
    v71 = v62;
    v65 = v36;
    v66 = v34;
    v67 = v59;
    v68 = v69 * -0.5;
    v64 = v71 - v70;
  }
  v72 = Width * 1.5;
  v73 = MEMORY[0x1E0C809B0];
  v121[0] = MEMORY[0x1E0C809B0];
  v121[1] = 3221225472;
  v121[2] = ___UITableAnimateSwipeDeletion_block_invoke_2;
  v121[3] = &unk_1E16B7030;
  v74 = v17;
  v122 = v74;
  v124 = v68;
  v125 = v67;
  v126 = v72;
  v127 = v61;
  v75 = v53;
  v123 = v75;
  v128 = v64;
  v129 = v66;
  v130 = v65;
  v131 = v38;
  objc_msgSend(v50, "addAnimations:", v121);
  v107[0] = v73;
  v107[1] = 3221225472;
  v107[2] = ___UITableAnimateSwipeDeletion_block_invoke_3;
  v107[3] = &unk_1E16DAA48;
  v90 = v89;
  v108 = v90;
  v92 = v91;
  v109 = v92;
  v76 = v55;
  v110 = v76;
  v77 = v74;
  v111 = v77;
  v113 = v68;
  v114 = v67;
  v115 = v72;
  v116 = 0;
  v78 = v75;
  v112 = v78;
  v117 = v64;
  v118 = v66;
  v119 = v65;
  v120 = 0;
  objc_msgSend(v51, "addAnimations:", v107);
  v100[0] = v73;
  v100[1] = 3221225472;
  v100[2] = ___UITableAnimateSwipeDeletion_block_invoke_4;
  v100[3] = &unk_1E16E0798;
  v79 = v54;
  v101 = v79;
  v102 = v94;
  v103 = v66;
  v104 = v65;
  v105 = v38;
  v106 = v88;
  objc_msgSend(v52, "addAnimations:", v100);
  v97[0] = v73;
  v97[1] = 3221225472;
  v97[2] = ___UITableAnimateSwipeDeletion_block_invoke_5;
  v97[3] = &unk_1E16C2BB8;
  v80 = v79;
  v98 = v80;
  v81 = v87;
  v99 = v81;
  objc_msgSend(v52, "addCompletion:", v97);
  objc_msgSend(v50, "startAnimationAfterDelay:", v96);
  objc_msgSend(v51, "startAnimationAfterDelay:", v96);
  objc_msgSend(v52, "startAnimationAfterDelay:", v96);
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", v50, v51, v52, 0);
  v82 = (void *)objc_claimAutoreleasedReturnValue();

  _Block_object_dispose(v138, 8);
  return v82;
}

void sub_186243C6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_18624AC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *_getCHUDSymbol(char *__symbol)
{
  void *result;
  char *v3;
  char *v4;

  result = (void *)_getCHUDSymbol_CHUDHandle;
  if (_getCHUDSymbol_CHUDHandle
    || (result = dlopen("/Developer/Library/PrivateFrameworks/CHUD.framework/CHUD", 1),
        (_getCHUDSymbol_CHUDHandle = (uint64_t)result) != 0)
    || (v3 = dlerror(),
        NSLog(CFSTR("Couldn't load CHUD framework: %s"), v3),
        (result = (void *)_getCHUDSymbol_CHUDHandle) != 0))
  {
    result = dlsym(result, __symbol);
    if (!result)
    {
      v4 = dlerror();
      NSLog(CFSTR("Couldn't load CHUD symbol (%s): %s"), __symbol, v4);
      return 0;
    }
  }
  return result;
}

void sub_18624D784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18624ED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a56, 8);
  _Block_object_dispose((const void *)(v56 - 232), 8);
  _Block_object_dispose((const void *)(v56 - 200), 8);
  _Block_object_dispose((const void *)(v56 - 168), 8);
  _Block_object_dispose((const void *)(v56 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18624F284(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_18624F5D8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18624F770(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18624FDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const __CFString *_UISceneStringFromActivationBias(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("***undefined***");
  else
    return off_1E16E48B0[a1];
}

id _UISceneErrorWithCode(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  if (a1 == 100)
  {
    _UILocalizedString(CFSTR("UIWindowScene.invalidGeometryPreferencesRequest"), (uint64_t)CFSTR("Error for invalid UIWindowSceneGeometryPreferences object"), CFSTR("Invalid UIWindowSceneGeometryPreferences object. Make sure you are using the correct subclass for your target system."));
    v3 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (a1)
    {
      v4 = 0;
LABEL_11:
      v5 = 0;
      goto LABEL_12;
    }
    if ((_UISystemShellAllowsSceneRequests() & 1) != 0)
      v2 = CFSTR("The application does not support multiple scenes.");
    else
      v2 = CFSTR("The current device does not support multiple scenes.");
    _UINSLocalizedStringWithDefaultValue(v2, v2);
    v3 = objc_claimAutoreleasedReturnValue();
  }
  v4 = (void *)v3;
  if (!v3)
    goto LABEL_11;
  v8 = *MEMORY[0x1E0CB2D50];
  v9[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_12:
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("UISceneErrorDomain"), a1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id _UISceneErrorWithCodeAndDescription(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v8 = *MEMORY[0x1E0CB2D50];
    v9[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("UISceneErrorDomain"), a1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id _UISceneErrorForActivationRequestOfInvalidRole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  void *v9;

  _UILocalizedFormat(CFSTR("UISceneSessionActivation.InvalidRole"), (uint64_t)CFSTR("An error message for developers that is produced when they try to activate a scene session using an invalid role."), CFSTR("Scene session activation failed because the requested role \"%@\" is not supported."), a4, a5, a6, a7, a8, a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  _UISceneErrorWithCodeAndDescription(1, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

uint64_t _UIContentSizeCategoryFromString(void *a1)
{
  char v2;

  v2 = 0;
  return _UIContentSizeCategoryFromStringInternal(a1, &v2);
}

NSString *_UIContentSizeCategoryMax(void *a1, void *a2)
{
  NSString *v3;
  NSString *v4;
  NSString *v5;
  NSString *v6;

  v3 = a2;
  v4 = a1;
  if (UIContentSizeCategoryCompareToCategory(v4, v3) == NSOrderedAscending)
    v5 = v3;
  else
    v5 = v4;
  v6 = v5;

  return v6;
}

NSString *_UIContentSizeCategoryClamp(void *a1, void *a2, void *a3)
{
  NSString *v5;
  NSString *v6;
  NSString *v7;
  NSComparisonResult v8;
  NSString *v9;
  NSString *v10;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
  {
    v8 = UIContentSizeCategoryCompareToCategory(v6, v5);
    v9 = v6;
    if (v8 == NSOrderedAscending)
    {
      if (UIContentSizeCategoryCompareToCategory(v5, v7) == NSOrderedAscending)
        v9 = v5;
      else
        v9 = v7;
    }
    v10 = v9;
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

BOOL _UIContentSizeCategoryGreaterThanOrEqualTo(NSString *a1, NSString *a2)
{
  return UIContentSizeCategoryCompareToCategory(a1, a2) != NSOrderedAscending;
}

uint64_t _UISSlotContentSizeCategoryFromContentSizeCategory(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  NSObject *v5;
  unint64_t v6;
  NSObject *v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(&unk_1E1A9B540, "objectForKeyedSubscript:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (os_variant_has_internal_diagnostics())
  {
    if (v2)
      goto LABEL_3;
    __UIFaultDebugAssertLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      v8 = 138412290;
      v9 = v1;
      _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpected content size category for slot: %@", (uint8_t *)&v8, 0xCu);
    }

LABEL_13:
    v3 = 2;
    goto LABEL_4;
  }
  if (!v2)
  {
    v6 = _UISSlotContentSizeCategoryFromContentSizeCategory___s_category;
    if (!_UISSlotContentSizeCategoryFromContentSizeCategory___s_category)
    {
      v6 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&_UISSlotContentSizeCategoryFromContentSizeCategory___s_category);
    }
    v7 = *(NSObject **)(v6 + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = 138412290;
      v9 = v1;
      _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "Unexpected content size category for slot: %@", (uint8_t *)&v8, 0xCu);
    }
    goto LABEL_13;
  }
LABEL_3:
  v3 = objc_msgSend(v2, "integerValue");
LABEL_4:

  return v3;
}

void sub_1862512EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186251F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186253730(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__264(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__265(uint64_t a1)
{

}

void _preferredContentSizeChangedCallback(uint64_t a1, uint64_t a2)
{
  void (**v2)(_QWORD);
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___preferredContentSizeChangedCallback_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  aBlock[4] = a2;
  v2 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (pthread_main_np() == 1)
    v2[2](v2);
  else
    dispatch_async(MEMORY[0x1E0C80D38], v2);

}

uint64_t ___preferredContentSizeChangedCallback_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "checkForChanges");
}

double _labelFrame(void *a1, uint64_t a2, double a3, double a4, double a5, CGFloat a6, double a7)
{
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double MidY;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGRect v25;

  v10 = a1;
  v11 = *(double *)a2;
  v12 = *(double *)(a2 + 8);
  objc_msgSend(v10, "setTextAlignment:", *(_QWORD *)(a2 + 16));
  objc_msgSend(v10, "textRectForBounds:limitedToNumberOfLines:", 1, v11, 0.0, v12, a6);
  v14 = v13;
  v16 = v15;
  v25.origin.y = 0.0;
  v25.origin.x = v11;
  v25.size.width = v12;
  v25.size.height = a6;
  MidY = CGRectGetMidY(v25);
  objc_msgSend(v10, "font");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "capHeight");
  v20 = v19;

  if (*(_QWORD *)(a2 + 16) == 1)
  {
    UIRoundToScale(v11 + (v12 - v14) * 0.5, 1.0);
    v11 = v21;
  }
  objc_msgSend(v10, "_baselineOffsetFromBottom");
  v23 = UIRectIntegralWithScale(v11, MidY + v20 * 0.5 + v22 - v16, v14, v16, a7);

  return v23;
}

void sub_186258DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186259950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186259E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186261044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18626272C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _CentroidOfTouchesInView(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t i;
  double *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = *MEMORY[0x1E0CD2538];
  v6 = *(double *)(MEMORY[0x1E0CD2538] + 8);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v7 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v24 != v10)
          objc_enumerationMutation(v3);
        v12 = *(double **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v4, "_window");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = -[UITouch _locationInWindow:](v12, v13);
        v16 = v15;
        objc_msgSend(v4, "_window");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "convertPoint:fromView:", v17, v14, v16);
        v19 = v18;
        v21 = v20;

        v5 = v5 + v19;
        v6 = v6 + v21;
      }
      v9 += v8;
      v8 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v8);
    v5 = v5 / (double)v9;
  }

  return v5;
}

void sub_1862671DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UISheetPresentationControllerFindViewControllerOfClass(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = v3;
  }
  else
  {
    if ((unint64_t)objc_msgSend(v3, "childViewControllersCount") <= 1)
    {
      objc_msgSend(v3, "_existingView");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "subviews");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "count");

      if (v7 <= 1)
      {
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        objc_msgSend(v3, "childViewControllers", 0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v16;
          while (2)
          {
            v12 = 0;
            do
            {
              if (*(_QWORD *)v16 != v11)
                objc_enumerationMutation(v8);
              _UISheetPresentationControllerFindViewControllerOfClass(*(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v12), a2);
              v13 = objc_claimAutoreleasedReturnValue();
              if (v13)
              {
                v4 = (id)v13;

                goto LABEL_15;
              }
              ++v12;
            }
            while (v10 != v12);
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
            if (v10)
              continue;
            break;
          }
        }

      }
    }
    v4 = 0;
  }
LABEL_15:

  return v4;
}

id _UISheetDetentInternalBlockForType(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id result;
  _QWORD aBlock[7];

  switch(a1)
  {
    case 1:
      v4 = &__block_literal_global_12_8;
      goto LABEL_3;
    case 2:
      result = &__block_literal_global_13_8;
      break;
    case 3:
      result = &__block_literal_global_15_4;
      break;
    case 4:
      aBlock[5] = v2;
      aBlock[6] = v3;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___UISheetDetentInternalBlockForType_block_invoke;
      aBlock[3] = &__block_descriptor_40_e65_d16__0____UISheetPresentationControllerDetentResolutionContext__8l;
      *(double *)&aBlock[4] = a2;
      v4 = _Block_copy(aBlock);
LABEL_3:
      result = v4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_186278CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  uint64_t v22;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t _canTransitionBetweenEffects(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "compatibleDescriptors");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "containsObject:", objc_opt_class()))
  {
    objc_msgSend(v4, "compatibleDescriptors");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "containsObject:", objc_opt_class())
      && objc_msgSend(v3, "canTransitionInPlaceToEffectWithDescriptor:", v4))
    {
      v7 = objc_msgSend(v4, "canTransitionInPlaceToEffectWithDescriptor:", v3);
    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_186279440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18627A2B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18627C140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 192), 8);
  _Block_object_dispose((const void *)(v21 - 160), 8);
  _Block_object_dispose((const void *)(v21 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18627D0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18627D6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18627DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIContextMenuActionsViewWidth(void *a1, int a2, int a3, int a4, uint64_t a5)
{
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  const char *v24;
  int IsAccessibilityContentSizeCategory;
  double Width;
  double v27;
  double v28;
  void *v29;
  uint64_t v30;
  void *v31;
  double v32;
  double v33;
  CGRect v35;
  CGRect v36;

  v9 = a1;
  _UIContextMenuGetPlatformMetrics(a5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "defaultMenuWidth");
  v12 = v11;
  v13 = 0.0;
  v14 = 0.0;
  if (objc_msgSend(v10, "leadingIndentationContributesToWidth") && a2)
  {
    _UIContextMenuGetPlatformMetrics(a5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "leadingIndentationWidth");
    v14 = v16;

  }
  v17 = v12 + v14;
  if (a3)
  {
    _UIContextMenuGetPlatformMetrics(a5);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "menuGutterWidth");
    v13 = v19;

  }
  v20 = v17 + v13;
  if (a4)
  {
    objc_msgSend(v10, "largePaletteWidthExtension");
    v20 = v20 + v21;
  }
  if (v9)
  {
    objc_msgSend(v9, "traitCollection");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "preferredContentSizeCategory");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    IsAccessibilityContentSizeCategory = _UIContentSizeCategoryIsAccessibilityContentSizeCategory(v23, v24);

    if (IsAccessibilityContentSizeCategory)
    {
      objc_msgSend(v9, "bounds");
      Width = CGRectGetWidth(v35);
      v27 = _UIContextMenuDefaultContentSpacing(v9);
      v28 = Width - (v27 + v27);
      objc_msgSend(v9, "traitCollection");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v29, "userInterfaceIdiom");

      if (v30)
      {
        v20 = 343.0;
      }
      else
      {
        objc_msgSend(v9, "_screen");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "_referenceBounds");
        v32 = CGRectGetWidth(v36);
        v33 = _UIContextMenuDefaultContentSpacing(v9);
        v20 = v32 - (v33 + v33);

      }
      if (v28 < v20)
        v20 = v28;
    }
  }

  return v20;
}

void sub_18628020C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_186280334(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_186280430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1862804EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_18628057C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186281634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose((const void *)(v44 - 216), 8);
  _Block_object_dispose((const void *)(v44 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_186281AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIContextMenuGetFromPreview(void *a1, _QWORD *a2, double *a3, _OWORD *a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v9 = a5;
  v10 = a1;
  objc_msgSend(v10, "size");
  *a2 = 0;
  a2[1] = 0;
  a2[2] = v11;
  a2[3] = v12;
  objc_msgSend(v10, "target");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "center");
  v15 = v14;
  v17 = v16;
  objc_msgSend(v10, "target");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "container");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = _UIContextMenuConvertPointBetweenViews(v19, v9, v15, v17);
  v22 = v21;

  *a3 = v20;
  *((_QWORD *)a3 + 1) = v22;
  a3[2] = 0.0;
  objc_msgSend(v10, "target");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    objc_msgSend(v23, "transform");
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
  }
  *a4 = v24;
  a4[1] = v25;
  a4[2] = v26;

}

void sub_1862859E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_186286270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_UIPortalView *_UIDocumentUnavailablePortalViewForAnimationInfo(void *a1)
{
  _UIPortalView *v2;
  _UIPortalView *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;

  v2 = [_UIPortalView alloc];
  objc_msgSend(a1, "sourceFrame");
  v3 = -[_UIPortalView initWithFrame:](v2, "initWithFrame:");
  v4 = objc_msgSend(a1, "sourceContextId");
  -[_UIPortalView portalLayer](v3, "portalLayer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setSourceContextId:", v4);

  v6 = objc_msgSend(a1, "sourceLayerRenderId");
  -[_UIPortalView portalLayer](v3, "portalLayer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setSourceLayerRenderId:", v6);

  -[_UIPortalView portalLayer](v3, "portalLayer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setHidesSourceLayer:", 1);

  -[_UIPortalView setName:](v3, "setName:", CFSTR("Document"));
  -[_UIPortalView setAllowsBackdropGroups:](v3, "setAllowsBackdropGroups:", 1);
  -[_UIPortalView setAllowsHitTesting:](v3, "setAllowsHitTesting:", 1);
  -[_UIPortalView setForwardsClientHitTestingToSourceView:](v3, "setForwardsClientHitTestingToSourceView:", 1);
  objc_msgSend(a1, "sourcePath");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v7) = objc_msgSend(v9, "_isRoundedRect");

  if ((_DWORD)v7)
  {
    objc_msgSend(a1, "sourcePath");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_cornerRadius");
    v12 = v11;
    -[UIView layer](v3, "layer");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setCornerRadius:", v12);

    objc_msgSend(a1, "sourcePath");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "_hasContinuousCorners");
    v16 = (uint64_t *)MEMORY[0x1E0CD2A68];
    if (!v15)
      v16 = (uint64_t *)MEMORY[0x1E0CD2A60];
    v17 = *v16;
    -[UIView layer](v3, "layer");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setCornerCurve:", v17);

    objc_msgSend(a1, "sourcePath");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "_cornerMask");
    -[UIView layer](v3, "layer");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setMaskedCorners:", v20);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CD2840], "layer");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "sourcePath");
    v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v19, "setPath:", objc_msgSend(v22, "CGPath"));

    -[UIView layer](v3, "layer");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setMask:", v19);
  }

  return v3;
}

id _UIDocumentUnavailableBrowserViewController(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  char isKindOfClass;
  void *v7;
  id v8;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1)
    v2 = *(void **)(a1 + 48);
  else
    v2 = 0;
  v3 = v2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2050000000;
  v4 = (void *)_MergedGlobals_73;
  v14 = _MergedGlobals_73;
  if (!_MergedGlobals_73)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __getUIDocumentBrowserViewControllerClass_block_invoke_1;
    v10[3] = &unk_1E16B14C0;
    v10[4] = &v11;
    __getUIDocumentBrowserViewControllerClass_block_invoke_1((uint64_t)v10);
    v4 = (void *)v12[3];
  }
  v5 = objc_retainAutorelease(v4);
  _Block_object_dispose(&v11, 8);
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    if (a1)
      v7 = *(void **)(a1 + 48);
    else
      v7 = 0;
    v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

void sub_186286D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id ___uip_documentBrowser_sendAnalyticsEvent_block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = CFSTR("eventType");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

Class __getUIDocumentBrowserViewControllerClass_block_invoke_1(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD794F0)
    qword_1ECD794F0 = _sl_dlopen();
  if (!qword_1ECD794F0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *DocumentManagerLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIDocumentLaunchViewController.m"), 36, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("UIDocumentBrowserViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getUIDocumentBrowserViewControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIDocumentLaunchViewController.m"), 38, CFSTR("Unable to find class %s"), "UIDocumentBrowserViewController");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_186288DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getRVItemClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD81B98)
    qword_1ECD81B98 = _sl_dlopen();
  if (!qword_1ECD81B98)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *RevealCoreLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIRevealInteraction.m"), 41, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("RVItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getRVItemClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIRevealInteraction.m"), 42, CFSTR("Unable to find class %s"), "RVItem");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1256 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id createRVItem(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  v6 = v5;
  if (a2 == 0x7FFFFFFFFFFFFFFFLL || a2 + a3 > (unint64_t)objc_msgSend(v5, "length"))
    v7 = 0;
  else
    v7 = (void *)objc_msgSend(objc_alloc((Class)getRVItemClass()), "initWithText:selectedRange:", v6, a2, a3);

  return v7;
}

void sub_186289D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18628A780(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id getRVItemClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7ABF0;
  v7 = qword_1ECD7ABF0;
  if (!qword_1ECD7ABF0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getRVItemClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getRVItemClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18628AC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getDDRevealBridgeClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  DataDetectorsUILibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("DDRevealBridge");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    _MergedGlobals_5_14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getDDRevealBridgeClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UITextContextMenuInteraction.m"), 54, CFSTR("Unable to find class %s"), "DDRevealBridge");

    __break(1u);
  }
}

void *DataDetectorsUILibrary_0()
{
  void *v0;
  void *v2;
  void *v3;

  if (!DataDetectorsUILibraryCore_frameworkLibrary_0)
    DataDetectorsUILibraryCore_frameworkLibrary_0 = _sl_dlopen();
  v0 = (void *)DataDetectorsUILibraryCore_frameworkLibrary_0;
  if (!DataDetectorsUILibraryCore_frameworkLibrary_0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *DataDetectorsUILibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UITextContextMenuInteraction.m"), 52, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

Class __getBETextDocumentRequestClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7ABE8)
    qword_1ECD7ABE8 = _sl_dlopen();
  if (!qword_1ECD7ABE8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BrowserEngineKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UITextContextMenuInteraction.m"), 43, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("BETextDocumentRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBETextDocumentRequestClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UITextContextMenuInteraction.m"), 44, CFSTR("Unable to find class %s"), "BETextDocumentRequest");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7ABE0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getRVItemClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7ABF8)
    qword_1ECD7ABF8 = _sl_dlopen();
  if (!qword_1ECD7ABF8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *RevealCoreLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UITextContextMenuInteraction.m"), 58, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("RVItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getRVItemClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UITextContextMenuInteraction.m"), 59, CFSTR("Unable to find class %s"), "RVItem");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7ABF0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18628E69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void *__getPKScribbleInteractionInViewSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1ECD81BB8)
    qword_1ECD81BB8 = _sl_dlopen();
  v2 = (void *)qword_1ECD81BB8;
  if (!qword_1ECD81BB8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PencilKitLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UITextInteraction.m"), 63, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "PKScribbleInteractionInView");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  off_1ECD81BB0 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

id getDDContextMenuConfigurationClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)_MergedGlobals_11_12;
  v7 = _MergedGlobals_11_12;
  if (!_MergedGlobals_11_12)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getDDContextMenuConfigurationClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getDDContextMenuConfigurationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186290874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getDDContextMenuConfigurationClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7AFB8)
    qword_1ECD7AFB8 = _sl_dlopen();
  if (!qword_1ECD7AFB8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *DataDetectorsUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UITextLinkInteraction.m"), 38, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("DDContextMenuConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getDDContextMenuConfigurationClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UITextLinkInteraction.m"), 39, CFSTR("Unable to find class %s"), "DDContextMenuConfiguration");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_11_12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

double _UIGetTextRefinement_AllowableMovement()
{
  int v0;
  double result;
  int v2;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  result = 8.0;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    v2 = _UIInternalPreference_TextRefinement_AllowableMovement;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_TextRefinement_AllowableMovement)
    {
      while (v0 >= v2)
      {
        _UIInternalPreferenceSync(v0, &_UIInternalPreference_TextRefinement_AllowableMovement, (uint64_t)CFSTR("TextRefinement_AllowableMovement"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
        v2 = _UIInternalPreference_TextRefinement_AllowableMovement;
        if (v0 == _UIInternalPreference_TextRefinement_AllowableMovement)
          return 8.0;
      }
      return *(double *)&qword_1ECD75E88;
    }
  }
  return result;
}

void sub_186298118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18629BE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_18629C178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL UIAssistantBarStyleIsCompact(uint64_t a1)
{
  return (unint64_t)(a1 - 2) < 3;
}

id _getResponderForEditing()
{
  void *v0;
  void *v1;
  void *v2;

  +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "delegateAsResponder");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_responderForEditing");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _getStylingDictionaryForResponder(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "selectedTextRange");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "start");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      objc_msgSend(v1, "textStylingAtPosition:inDirection:", v3, objc_msgSend(v1, "selectionAffinity"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4 = (void *)MEMORY[0x1E0C9AA70];
    }

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA70];
  }

  return v4;
}

id getPKTextInputInteractionClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7C6B0;
  v7 = qword_1ECD7C6B0;
  if (!qword_1ECD7C6B0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getPKTextInputInteractionClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getPKTextInputInteractionClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862A51D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id TIGetTypoTrackerButtonValue_0()
{
  void *v0;
  void *v1;

  if (TIGetTypoTrackerButtonValue_onceToken_0 != -1)
    dispatch_once(&TIGetTypoTrackerButtonValue_onceToken_0, &__block_literal_global_398_1);
  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForPreferenceKey:", CFSTR("TypoTrackerButton"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t _areBarButtonGroupsBasicallyEqualToSystemDefaults(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v19;
  void *v20;

  v3 = a1;
  v4 = a2;
  if (v3 == v4)
    goto LABEL_12;
  v5 = objc_msgSend(v3, "count");
  if (v5 != objc_msgSend(v4, "count"))
  {
    v17 = 0;
    goto LABEL_15;
  }
  if (!objc_msgSend(v3, "count"))
  {
LABEL_12:
    v17 = 1;
  }
  else
  {
    v6 = 0;
    v19 = v4;
    while (1)
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", v6, v19);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "objectAtIndexedSubscript:", v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v7;
      objc_msgSend(v7, "barButtonItems");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "barButtonItems");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v9, "count");
      if (v11 != objc_msgSend(v10, "count"))
        break;
      if (objc_msgSend(v9, "count"))
      {
        v12 = 0;
        do
        {
          objc_msgSend(v9, "objectAtIndexedSubscript:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "objectAtIndexedSubscript:", v12);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v13, "action");
          v16 = objc_msgSend(v14, "action");

          if (v15 != v16)
            goto LABEL_14;
        }
        while (++v12 < (unint64_t)objc_msgSend(v9, "count"));
      }

      ++v6;
      v17 = 1;
      v4 = v19;
      if (v6 >= objc_msgSend(v3, "count"))
        goto LABEL_15;
    }
LABEL_14:

    v17 = 0;
    v4 = v19;
  }
LABEL_15:

  return v17;
}

Class __getPKTextInputInteractionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7C6B8)
    qword_1ECD7C6B8 = _sl_dlopen();
  if (!qword_1ECD7C6B8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PencilKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIAssistantBarButtonItemProvider.m"), 62, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("PKTextInputInteraction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPKTextInputInteractionClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIAssistantBarButtonItemProvider.m"), 63, CFSTR("Unable to find class %s"), "PKTextInputInteraction");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7C6B0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

_UIEventComponentPhaseValue *_eventComponentPhaseForValue(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  _UIEventComponentPhaseValue *v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a2, "allKeysForObject:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    v7 = -[_UIEventComponentPhaseValue initWithValue:underlyingValue:]([_UIEventComponentPhaseValue alloc], "initWithValue:underlyingValue:", a1, objc_msgSend(v6, "integerValue"));
  else
    v7 = 0;

  return v7;
}

_UIEventComponentPhaseValue *_eventComponentPhaseForUnderlyingValue(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _UIEventComponentPhaseValue *v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a2, "objectForKeyedSubscript:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    v6 = objc_msgSend(v5, "integerValue");
  else
    v6 = 5;
  v7 = -[_UIEventComponentPhaseValue initWithValue:underlyingValue:]([_UIEventComponentPhaseValue alloc], "initWithValue:underlyingValue:", v6, a1);

  return v7;
}

void sub_1862AD7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPKTextInputInteractionClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7B2F0)
    qword_1ECD7B2F0 = _sl_dlopen();
  if (!qword_1ECD7B2F0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PencilKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIEditingOverlayViewController.m"), 32, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("PKTextInputInteraction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPKTextInputInteractionClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIEditingOverlayViewController.m"), 33, CFSTR("Unable to find class %s"), "PKTextInputInteraction");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_7_11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

double pixelAlignedRectForRect(void *a1)
{
  id v1;
  double v2;
  double v3;

  v1 = a1;
  UIRoundToViewScale(v1);
  v3 = v2;
  UIRoundToViewScale(v1);
  UIRoundToViewScale(v1);
  UIRoundToViewScale(v1);

  return v3;
}

void sub_1862B1E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1862B97D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TISmartSelectionOptionFromUISmartSelectionOption(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 > 31)
  {
    if (a1 == 511)
      v1 = 511;
    else
      v1 = 0;
    if (a1 == 256)
      v1 = 256;
    if (a1 == 128)
      v1 = 128;
    if (a1 == 64)
      v2 = 64;
    else
      v2 = 0;
    if (a1 == 32)
      v2 = 32;
    if (a1 <= 127)
      return v2;
  }
  else
  {
    v1 = 0;
    switch(a1)
    {
      case 1:
      case 2:
      case 4:
      case 8:
        v1 = a1;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return v1;
      default:
        if (a1 == 16)
          v1 = 16;
        else
          v1 = 0;
        break;
    }
  }
  return v1;
}

uint64_t TISmartSelectionOptionsFromUISmartSelectionOptions(unint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = 0;
  v3 = 0;
  do
    v3 |= TISmartSelectionOptionFromUISmartSelectionOption((1 << v2++) & a1);
  while (v2 != 64);
  return v3;
}

void sub_1862C4864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t gestureTypeForGestureRecognizer(void *a1, char a2)
{
  uint64_t v5;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if ((unint64_t)objc_msgSend(a1, "numberOfTouchesRequired") <= 1)
    {
      if ((unint64_t)objc_msgSend(a1, "numberOfTapsRequired") <= 1)
        return 1;
      else
        return 3;
    }
    else
    {
      return 10;
    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = objc_msgSend(a1, "tapCount");
      if (v5 == 3)
      {
        return 9;
      }
      else if (v5 == 2 || v5 == 1 && (a2 & 1) == 0)
      {
        return 8;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        return 2;
      else
        return 0;
    }
  }
}

double _UIGetTextRefinement_NearCaretDistance()
{
  int v0;
  double result;
  int v2;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1)
    return 40.0;
  v2 = _UIInternalPreference_TextRefinement_NearCaretDistance;
  if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_TextRefinement_NearCaretDistance)
    return 40.0;
  while (v0 >= v2)
  {
    _UIInternalPreferenceSync(v0, &_UIInternalPreference_TextRefinement_NearCaretDistance, (uint64_t)CFSTR("TextRefinement_NearCaretDistance"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
    v2 = _UIInternalPreference_TextRefinement_NearCaretDistance;
    result = 40.0;
    if (v0 == _UIInternalPreference_TextRefinement_NearCaretDistance)
      return result;
  }
  return *(double *)&qword_1EDDA7DC0;
}

uint64_t _isContentBackSwipeEnabled()
{
  if (qword_1ECD7A0B8 != -1)
    dispatch_once(&qword_1ECD7A0B8, &__block_literal_global_561);
  return _MergedGlobals_25_0;
}

BOOL _UITraitTokenSetIsNULL(uint64_t a1)
{
  int8x16_t v2;

  if (*(_QWORD *)a1)
    return 0;
  v2 = vorrq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 24));
  return vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) == 0;
}

id _UITraitTokenSetRetain(id *a1)
{
  id result;

  result = *a1;
  if (result)
    return result;
  return result;
}

void _UITraitTokenSetRelease(void **a1)
{
  void *v1;

  v1 = *a1;
  if (v1)

}

int8x16_t *_UITraitTokenSetCount(uint64_t a1)
{
  if (*(_QWORD *)a1)
    return -[_UIFastIndexSet count](*(int8x16_t **)a1);
  else
    return (int8x16_t *)vaddvq_s64((int64x2_t)vpadalq_u32(vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(a1 + 8))))), vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(a1 + 24))))));
}

void _UITraitTokenSetInsert(uint64_t *a1, unint64_t a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  void (*v28)(uint64_t, unint64_t, __n128);
  void *v29;
  uint64_t *v30;
  char v31;

  v4 = *a1;
  if (v4)
  {
    -[_UIMutableFastIndexSet addIndex:](v4, a2, a3);
  }
  else if (a2 < 0x100)
  {
    v13 = a2 >> 6;
    v14 = 255;
    if (a2 + 1 < 0xFF)
      v14 = a2 + 1;
    if (v13 <= v14 >> 6)
    {
      v15 = (v14 >> 6) - v13 + 1;
      v16 = &a1[v13 + 1];
      v17 = v13 << 6;
      v18 = (v13 << 6) + 64;
      v19 = v18 + a2;
      v20 = -64 * v13;
      do
      {
        v21 = a2 - v17;
        if (a2 >= v17)
          v22 = v17;
        else
          v22 = a2;
        if (a2 < v17)
          v21 = 0;
        v23 = v19 - v22;
        if (v18 >= a2 + 1)
          v24 = a2 + 1;
        else
          v24 = v18;
        v25 = 0xFFFFFFFFFFFFFFFFLL >> (v23 - v24) << v21;
        if (v21 >= v24 + v20)
          v26 = 0;
        else
          v26 = v25;
        *v16++ |= v26;
        v19 += 64;
        v17 += 64;
        v18 += 64;
        v20 -= 64;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    *a1 = (uint64_t)-[_UIFastIndexSet initWithIndex:]((unsigned int *)[_UIMutableFastIndexSet alloc], a2);
    v27[0] = MEMORY[0x1E0C809B0];
    v28 = ___UITraitTokenSetInsert_block_invoke;
    v29 = &__block_descriptor_40_e12_v24__0Q8_B16l;
    v27[1] = 3221225472;
    v30 = a1;
    v31 = 0;
    while (2)
    {
      LOBYTE(v7) = 0;
      v8 = a1[v6 + 1];
      do
      {
        if (((-1 << v7) & v8) == 0)
          break;
        v9 = __clz(__rbit64((-1 << v7) & v8));
        v10 = (-1 << v9) & ~v8;
        v7 = __clz(__rbit64(v10));
        v11 = v7 - v9;
        if (v7 != v9)
        {
          v12 = v5 + v9;
          do
          {
            ((void (*)(_QWORD *, uint64_t, char *))v28)(v27, v12, &v31);
            if (v31)
              return;
            ++v12;
          }
          while (--v11);
        }
      }
      while (v10);
      ++v6;
      v5 += 64;
      if (v6 != 4)
        continue;
      break;
    }
  }
}

void _UITraitTokenSetRemove(uint16x8_t **a1, unint64_t a2, int8x16_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if (*a1)
  {
    -[_UIMutableFastIndexSet removeIndex:](*a1, a2, a3);
  }
  else if (a2 <= 0xFF)
  {
    v3 = a2 >> 6;
    v4 = 255;
    if (a2 + 1 < 0xFF)
      v4 = a2 + 1;
    if (v3 <= v4 >> 6)
    {
      v5 = (v4 >> 6) - v3 + 1;
      v6 = &a1[v3 + 1];
      v7 = v3 << 6;
      v8 = (v3 << 6) + 64;
      v9 = v8 + a2;
      v10 = -64 * v3;
      do
      {
        v11 = a2 - v7;
        if (a2 >= v7)
          v12 = v7;
        else
          v12 = a2;
        if (a2 < v7)
          v11 = 0;
        v13 = v9 - v12;
        if (v8 >= a2 + 1)
          v14 = a2 + 1;
        else
          v14 = v8;
        v15 = 0xFFFFFFFFFFFFFFFFLL >> (v13 - v14) << v11;
        if (v11 < v14 + v10)
          v16 = ~v15;
        else
          v16 = -1;
        *v6++ &= v16;
        v9 += 64;
        v7 += 64;
        v8 += 64;
        v10 -= 64;
        --v5;
      }
      while (v5);
    }
  }
}

unint64_t _UITraitTokenSetContains(uint16x8_t **a1, unint64_t a2)
{
  if (*a1)
    return -[_UIFastIndexSet containsIndex:](*a1, a2);
  if (a2 <= 0xFF)
    return ((unint64_t)a1[(a2 >> 6) + 1] >> a2) & 1;
  return 0;
}

void _UITraitTokenSetEnumerate(uint64_t *a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;

  v4 = *a1;
  if (v4)
  {
    -[_UIFastIndexSet enumerateIndexesUsingBlock:](v4, a2);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v13 = a1 + 1;
    v14 = 0;
    while (2)
    {
      LOBYTE(v7) = 0;
      v8 = v13[v6];
      do
      {
        if (((-1 << v7) & v8) == 0)
          break;
        v9 = __clz(__rbit64((-1 << v7) & v8));
        v10 = (-1 << v9) & ~v8;
        v7 = __clz(__rbit64(v10));
        v11 = v7 - v9;
        if (v7 != v9)
        {
          v12 = v5 + v9;
          do
          {
            ((void (**)(_QWORD, uint64_t, char *))a2)[2](a2, v12, &v14);
            if (v14)
              return;
            ++v12;
          }
          while (--v11);
        }
      }
      while (v10);
      ++v6;
      v5 += 64;
      if (v6 != 4)
        continue;
      break;
    }
  }
}

uint64_t _UITraitTokenSetIntersectsSet(uint64_t a1, uint64_t a2)
{
  int8x16_t *v4;
  int8x16_t *v5;
  int8x16_t *v6;
  void (*v7)(_QWORD, _QWORD, _QWORD);
  uint64_t *v8;
  _BOOL8 v9;
  void (*v11[6])(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v4 = _UITraitTokenSetCount(a1);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = _UITraitTokenSetCount(a2);
  if (!v6)
    return 0;
  if (a2 == a1)
    return 1;
  if (v5 >= v6)
    v7 = (void (*)(_QWORD, _QWORD, _QWORD))a1;
  else
    v7 = (void (*)(_QWORD, _QWORD, _QWORD))a2;
  if (v5 >= v6)
    v8 = (uint64_t *)a2;
  else
    v8 = (uint64_t *)a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v11[0] = (void (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v11[1] = (void (*)(_QWORD, _QWORD, _QWORD))3221225472;
  v11[2] = (void (*)(_QWORD, _QWORD, _QWORD))___UITraitTokenSetIntersectsSet_block_invoke;
  v11[3] = (void (*)(_QWORD, _QWORD, _QWORD))&unk_1E16BF5E8;
  v11[4] = (void (*)(_QWORD, _QWORD, _QWORD))&v12;
  v11[5] = v7;
  _UITraitTokenSetEnumerate(v8, v11);
  v9 = *((_BYTE *)v13 + 24) != 0;
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_1862CFE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UITraitTokenSetIsSubsetOfSet(uint64_t *a1, uint64_t *a2)
{
  int8x16_t *v4;
  _BOOL8 v5;
  void (*v7[6])(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  if (a2 == a1)
    return 1;
  v4 = _UITraitTokenSetCount((uint64_t)a1);
  if (!v4)
    return 1;
  if (v4 > _UITraitTokenSetCount((uint64_t)a2))
    return 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 1;
  v7[0] = (void (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v7[1] = (void (*)(_QWORD, _QWORD, _QWORD))3221225472;
  v7[2] = (void (*)(_QWORD, _QWORD, _QWORD))___UITraitTokenSetIsSubsetOfSet_block_invoke;
  v7[3] = (void (*)(_QWORD, _QWORD, _QWORD))&unk_1E16BF5E8;
  v7[4] = (void (*)(_QWORD, _QWORD, _QWORD))&v8;
  v7[5] = (void (*)(_QWORD, _QWORD, _QWORD))a2;
  _UITraitTokenSetEnumerate(a1, v7);
  v5 = *((_BYTE *)v9 + 24) != 0;
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1862CFFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UITraitTokenSetIsEqualToSet(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v7;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)a2;
  if (v4)
  {
    if (v5)
    {
      if (v4 != (void *)v5)
        return objc_msgSend(v4, "isEqual:");
      v7 = 1;
      return v7 & 1;
    }
  }
  else if (!v5)
  {
    v7 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 24), *(int64x2_t *)(a2 + 24)))))) ^ 1;
    return v7 & 1;
  }
  if (_UITraitTokenSetIsSubsetOfSet((uint64_t *)a1, (uint64_t *)a2))
    return _UITraitTokenSetIsSubsetOfSet((uint64_t *)a2, (uint64_t *)a1);
  v7 = 0;
  return v7 & 1;
}

uint64_t _UITraitTokenSetHash(uint64_t a1)
{
  if (*(_QWORD *)a1)
    return objc_msgSend(*(id *)a1, "hash");
  else
    return vaddvq_s64((int64x2_t)vpadalq_u32(vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(a1 + 8))))), vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(a1 + 24))))));
}

__n128 _UITraitTokenSetCopy(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = objc_msgSend(*(id *)a1, "mutableCopy");
  result = *(__n128 *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void _UICollectionViewListHeaderFooterCommonInit(void *a1)
{
  id *v1;

  v1 = a1;
  objc_msgSend(v1, "_updateConstants");
  objc_msgSend(v1, "setEdgesPreservingSuperviewLayoutMargins:", 10);
  objc_msgSend(v1, "setEdgesInsettingLayoutMarginsFromSafeArea:", objc_msgSend(v1, "edgesInsettingLayoutMarginsFromSafeArea") & 0xA);
  objc_msgSend(v1[67], "setEdgesPreservingSuperviewLayoutMargins:", 15);
  *((_WORD *)v1 + 250) |= 8u;
  *((_WORD *)v1 + 250) |= 0x80u;
  *((_WORD *)v1 + 250) |= 0x100u;

}

void sub_1862D6878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UITextFieldCanvasViewCommonInit(void *a1)
{
  void *v1;
  id v2;

  v2 = a1;
  objc_msgSend(v2, "setTilingEnabled:", 0);
  objc_msgSend(v2, "setUserInteractionEnabled:", 0);
  +[UIColor clearColor](UIColor, "clearColor");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setBackgroundColor:", v1);

  objc_msgSend(v2, "setContentMode:", 3);
  objc_msgSend(v2, "setOpaque:", 0);

}

id _UITextAttributesAtIndexWithDirection(void *a1, unint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  v6 = v5;
  if (a3 == 1)
  {
    if (!objc_msgSend(v5, "length"))
    {
LABEL_10:
      v7 = 0;
      goto LABEL_11;
    }
    if (a2)
      --a2;
    else
      a2 = 0;
  }
  else if (a3 || objc_msgSend(v5, "length") <= a2)
  {
    goto LABEL_10;
  }
  objc_msgSend(v6, "attributesAtIndex:effectiveRange:", a2, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:

  return v7;
}

void sub_1862DCF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  objc_sync_exit(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1862DD218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862DE310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1862DF560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1862DF654(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1862DF894(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1862DFA3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double _UIHIDPathSynchronizationFilterConfigurationDefault()
{
  double v0;

  if (_UIInternalPreferenceUsesDefault_1((int *)&_MergedGlobals_919, (uint64_t)CFSTR("HIDPathSynchronizationMinTimeScale")))v0 = 1.02;
  else
    v0 = *(double *)&qword_1ECD76940;
  _UIInternalPreferenceUsesDefault_1((int *)algn_1ECD76948, (uint64_t)CFSTR("HIDPathSynchronizationMaxTimeScale"));
  _UIInternalPreferenceUsesDefault_1((int *)algn_1ECD76958, (uint64_t)CFSTR("HIDPathSynchronizationPeakThreshold"));
  return v0;
}

void sub_1862E1780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getUIDocumentBrowserViewControllerClass_block_invoke_2(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD81C30)
    qword_1ECD81C30 = _sl_dlopen();
  if (!qword_1ECD81C30)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *DocumentManagerLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIDocumentViewControllerLaunchOptions.m"), 30, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("UIDocumentBrowserViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getUIDocumentBrowserViewControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIDocumentViewControllerLaunchOptions.m"), 32, CFSTR("Unable to find class %s"), "UIDocumentBrowserViewController");

LABEL_8:
    __break(1u);
  }
  qword_1ECD81C28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1862E8018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1862E8168(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1862EA9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _GetTextFieldClearButton(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  +[UITraitCollection _currentTraitCollectionWithUnmarkedFallback]();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _GetTextFieldClearButtonWithCustomColorContrastSettings(a1, a2, 0, 0, v4, 1, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void _recursivelyLayoutUIButtons(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  objc_msgSend(a1, "subviews", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v8;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * v5);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend(v6, "setNeedsLayout");
        else
          _recursivelyLayoutUIButtons(v6);
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v3);
  }

}

id getUndoActionNameTyping()
{
  if (qword_1ECD81C40 != -1)
    dispatch_once(&qword_1ECD81C40, &__block_literal_global_572);
  return (id)_MergedGlobals_1263;
}

void __getUndoActionNameTyping_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  _UIKitBundle();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Typing"), CFSTR("Typing"), CFSTR("Localizable"));
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_MergedGlobals_1263;
  _MergedGlobals_1263 = v0;

}

void sub_1862FB028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1862FB530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862FDBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862FDF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862FE73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1862FF368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1863000BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_186300258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863003E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186301ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_186302B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186302F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_186303924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_186303B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_186304524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863051E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863058C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_186307570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_186307E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186307FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186308214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t UITextGranularityFromNSTextSelectionGranularity(unint64_t a1)
{
  if (a1 > 4)
    return -1;
  else
    return qword_1866849B0[a1];
}

uint64_t UITextGranularityToNSTextSelectionGranularity(unint64_t a1)
{
  if (a1 > 5)
    return -1;
  else
    return qword_1866849D8[a1];
}

uint64_t UITextDirectionToNSTextSelectionAffinity(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 3)
    return -1;
  else
    return qword_186684A08[a1 - 2];
}

BOOL UITextStorageDirectionToNSTextSelectionAffinity(uint64_t a1)
{
  return a1 == 0;
}

BOOL UITextStorageDirectionFromNSTextSelectionAffinity(uint64_t a1)
{
  return a1 == 0;
}

const __CFString *UITextStorageDirectionToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("?");
  if (a1 == 1)
    v1 = CFSTR("backward");
  if (a1)
    return v1;
  else
    return CFSTR("forward");
}

id _UISceneOpenURLContextsFromActionsSessionAndTransitionContext(void *a1, void *a2, void *a3, void **a4)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void (*v11)(id, void **);
  void *v12;
  UIOpenURLContext *v13;
  id v14;
  id v15;
  uint64_t *v16;
  id v17;
  void (**v18)(_QWORD);
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  id v30;
  UIOpenURLContext *v31;
  void *v32;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  _BYTE v55[128];
  _BYTE aBlock[24];
  void *v57;
  uint64_t *v58;
  id v59;
  id v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v39 = a1;
  v36 = a2;
  v38 = a3;
  *a4 = (id)objc_opt_new();
  v6 = v38;
  if (objc_msgSend(v38, "isUISubclass"))
  {
    objc_msgSend(v38, "payload");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v38;
  }
  else
  {
    v40 = 0;
  }
  objc_msgSend(v6, "originatingProcess");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[UISceneOpenURLOptions _optionsFromPayload:sourceProcessHandle:](UISceneOpenURLOptions, "_optionsFromPayload:sourceProcessHandle:", v40, v7);
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v39, "objectsPassingTest:", &__block_literal_global_574);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v37, "count"))
  {
    objc_msgSend(v40, "objectForKey:", *MEMORY[0x1E0CA57E0]);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    if (v42)
    {
      if (objc_msgSend(v41, "openInPlace"))
      {
        v8 = v42;
        v9 = v41;
        v10 = v8;
        v50 = 0;
        v51 = 0;
        v52 = &v51;
        v53 = 0x2020000000;
        v11 = (void (*)(id, void **))off_1ECD81C98;
        v54 = off_1ECD81C98;
        if (!off_1ECD81C98)
        {
          *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
          *(_QWORD *)&aBlock[8] = 3221225472;
          *(_QWORD *)&aBlock[16] = __getFPCreateDocumentURLFromBookmarkableStringSymbolLoc_block_invoke;
          v57 = &unk_1E16B14C0;
          v58 = &v51;
          __getFPCreateDocumentURLFromBookmarkableStringSymbolLoc_block_invoke(aBlock);
          v11 = (void (*)(id, void **))v52[3];
        }
        _Block_object_dispose(&v51, 8);
        if (!v11)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFURLRef _FPCreateDocumentURLFromBookmarkableString(CFStringRef, CFErrorRef *)");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "handleFailureInFunction:file:lineNumber:description:", v35, CFSTR("_UISceneOpenURLBSActionsHandler.m"), 33, CFSTR("%s"), dlerror());

          __break(1u);
        }
        v11(v10, &v50);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (v12)
        {

          v13 = -[UIOpenURLContext initWithURL:options:]([UIOpenURLContext alloc], "initWithURL:options:", v12, v9);
        }
        else
        {
          v21 = v50;
          v22 = _MergedGlobals_1265;
          if (!_MergedGlobals_1265)
          {
            v22 = __UILogCategoryGetNode("Application", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v22, (unint64_t *)&_MergedGlobals_1265);
          }
          v23 = *(NSObject **)(v22 + 8);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)aBlock = 138412546;
            *(_QWORD *)&aBlock[4] = v10;
            *(_WORD *)&aBlock[12] = 2112;
            *(_QWORD *)&aBlock[14] = v21;
            _os_log_impl(&dword_185066000, v23, OS_LOG_TYPE_ERROR, "Error resolving bookmark; bookmark: %@; error: %@",
              aBlock,
              0x16u);
          }

          v13 = 0;
        }

        if (v13)
        {
          v49 = 0;
          __119___UISceneCloudKitShareMetadataBSActionHandler__launchOptionsFromActions_forFBSScene_uiSceneSession_transitionContext___block_invoke(&v49, (uint64_t)v13);
          v20 = v49;
        }
        else
        {
          v20 = 0;
        }

        goto LABEL_27;
      }
      v15 = v42;
      v16 = (uint64_t *)v36;
      v17 = v41;
      *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
      *(_QWORD *)&aBlock[8] = 3221225472;
      *(_QWORD *)&aBlock[16] = ___UISceneScheduleNonOpenInPlaceURLResolution_block_invoke;
      v57 = &unk_1E16B47A8;
      v58 = v16;
      v59 = v15;
      v60 = v17;
      v18 = (void (**)(_QWORD))_Block_copy(aBlock);
      objc_msgSend(v16, "scene");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (v19)
        v18[2](v18);
      else
        dispatch_async(MEMORY[0x1E0C80D38], v18);

    }
    v20 = 0;
LABEL_27:
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v24 = v39;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
    if (!v25)
      goto LABEL_46;
    v26 = *(_QWORD *)v46;
    while (1)
    {
      for (i = 0; i != v25; ++i)
      {
        if (*(_QWORD *)v46 != v26)
          objc_enumerationMutation(v24);
        v28 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
        if (objc_msgSend(v28, "UIActionType") == 1)
        {
          objc_msgSend(v28, "url");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend((id)UIApp, "_shouldHandleTestURL:", v29) & 1) == 0
            && (objc_msgSend(v29, "isInternalUIKitURL") & 1) == 0)
          {
            __119___UISceneCloudKitShareMetadataBSActionHandler__launchOptionsFromActions_forFBSScene_uiSceneSession_transitionContext___block_invoke(a4, (uint64_t)v28);
            if (v42)
            {
              if ((unint64_t)objc_msgSend(*a4, "count") >= 2)
              {
                objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                v30 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSSet<UIOpenURLContext *> *_UISceneOpenURLContextsFromActionsSessionAndTransitionContext(NSSet<BSAction *> *__strong, UISceneSession *__strong, FBSSceneTransitionContext *__strong, NSMutableSet<BSAction *> *__autoreleasing *)");
                v31 = (UIOpenURLContext *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v30, "handleFailureInFunction:file:lineNumber:description:", v31, CFSTR("_UISceneOpenURLBSActionsHandler.m"), 197, CFSTR("bookmarkString = %@; handledActions = %@"),
                  v42,
                  *a4);
                goto LABEL_42;
              }
            }
            else
            {
              if ((objc_opt_respondsToSelector() & 1) == 0
                || (objc_msgSend(v28, "localOpenURLOptions"), (v30 = (id)objc_claimAutoreleasedReturnValue()) == 0))
              {
                v30 = v41;
              }
              v31 = -[UIOpenURLContext initWithURL:options:]([UIOpenURLContext alloc], "initWithURL:options:", v29, v30);
              v44 = v20;
              __119___UISceneCloudKitShareMetadataBSActionHandler__launchOptionsFromActions_forFBSScene_uiSceneSession_transitionContext___block_invoke(&v44, (uint64_t)v31);
              v32 = v44;

              v20 = v32;
LABEL_42:

            }
          }

          continue;
        }
      }
      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
      if (!v25)
      {
LABEL_46:

        v14 = v20;
        goto LABEL_47;
      }
    }
  }
  v14 = 0;
LABEL_47:

  return v14;
}

void sub_18630D4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void _UISceneSendOpenURLActionCallbackForScene(void *a1, void *a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  id v9;

  v9 = a1;
  v3 = a2;
  objc_msgSend(v3, "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  objc_msgSend(v3, "delegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if ((v5 & 1) != 0)
  {
    objc_msgSend(v6, "scene:openURLContexts:", v3, v9);
LABEL_5:

    goto LABEL_6;
  }
  v8 = objc_opt_respondsToSelector();

  if ((v8 & 1) != 0)
  {
    objc_msgSend(v3, "delegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_canvas:openURLContexts:", v3, v9);
    goto LABEL_5;
  }
LABEL_6:

}

void sub_18630D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void *__getFPCreateDocumentURLFromBookmarkableStringSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1ECD81CA0)
    qword_1ECD81CA0 = _sl_dlopen();
  v2 = (void *)qword_1ECD81CA0;
  if (!qword_1ECD81CA0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *FileProviderLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("_UISceneOpenURLBSActionsHandler.m"), 32, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "FPCreateDocumentURLFromBookmarkableString");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  off_1ECD81C98 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void __addChildFocusGroupsRecursively(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v4, "addObject:", v3);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  objc_msgSend(v3, "childGroups", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        __addChildFocusGroupsRecursively(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v9++), v4);
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

}

uint64_t selectorDescription_0(const char *a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sel_getName(a1));
}

void _UIWindowSceneActivationPrepareConfiguration(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void (**v12)(_QWORD);
  void *v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  void *v18;
  UITargetedPreview *v19;
  void *v20;
  void *v21;
  UIWindowSceneActivationRequestOptions *v22;
  UIWindowSceneActivationRequestOptions *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;

  v36 = a1;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  objc_msgSend(v36, "_sceneActivator");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10 && !v13)
    objc_msgSend(v36, "_setSceneActivator:", v10);
  objc_msgSend(v36, "_sceneActivator");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v14, "conformsToProtocol:", &unk_1EDF67558) & 1) == 0)
  {

    goto LABEL_8;
  }
  objc_msgSend(v36, "_sceneActivator");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_opt_respondsToSelector();

  v17 = v36;
  if ((v16 & 1) != 0)
  {
    objc_msgSend(v10, "_prepareSceneActivationConfiguration:", v36);
LABEL_8:
    v17 = v36;
  }
  objc_msgSend(v17, "preview");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9 && !v18)
  {
    v19 = -[UITargetedPreview initWithView:]([UITargetedPreview alloc], "initWithView:", v9);
    objc_msgSend(v36, "setPreview:", v19);

  }
  objc_msgSend(v36, "options");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v20;
  if (v20)
    v22 = v20;
  else
    v22 = objc_alloc_init(UIWindowSceneActivationRequestOptions);
  v23 = v22;

  -[UIWindowSceneActivationRequestOptions placement](v23, "placement");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v24)
  {
    if (v12)
    {
      v12[2](v12);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v25 = 0;
    }
    if (_UIWindowSceneActivationRequestOptionsHaveModifiedStyleOrSize(v23))
    {
      v26 = _UIWindowScenePresentationStyleFromPlacement(v25);
      _UIWindowScenePlacementForStyleAndSizeCategory(-[UIWindowSceneActivationRequestOptions preferredPresentationStyle](v23, "preferredPresentationStyle"), -[UIWindowSceneActivationRequestOptions _preferredSizeCategory](v23, "_preferredSizeCategory"), v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIWindowSceneActivationRequestOptions setPlacement:](v23, "setPlacement:", v27);

    }
    -[UIWindowSceneActivationRequestOptions placement](v23, "placement");
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v28)
      -[UIWindowSceneActivationRequestOptions setPlacement:](v23, "setPlacement:", v25);

  }
  -[UISceneActivationRequestOptions requestingScene](v23, "requestingScene");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  v30 = v36;
  if (!v29)
  {
    if (v11)
    {
      -[UISceneActivationRequestOptions setRequestingScene:](v23, "setRequestingScene:", v11);
    }
    else
    {
      objc_msgSend(v36, "preview");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "target");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "container");
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      if (v33)
      {
        objc_msgSend(v33, "_window");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "windowScene");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        -[UISceneActivationRequestOptions setRequestingScene:](v23, "setRequestingScene:", v35);

      }
    }
    v30 = v36;
  }
  objc_msgSend(v30, "setOptions:", v23);

}

uint64_t _UIWindowSceneActivationIsAnimatable(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  char v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  char v15;

  v1 = a1;
  objc_msgSend(v1, "_sceneActivator");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)v2;
  v4 = (void *)UIApp;
  if (v2)
    v4 = (void *)v2;
  v5 = v4;

  if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EDF67558))
  {
    objc_msgSend(v1, "options");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "requestingScene");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v7, "_transitionCoordinator");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "allowedAsMorphTransitionSource");

      v10 = v9 ^ 1;
    }
    else
    {
      v10 = 1;
    }

    objc_msgSend(v1, "preview");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = objc_msgSend(v6, "_effectivelyWantsProminence");
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v14 = objc_msgSend(v5, "_canAnimateSceneActivationWithConfiguration:", v1);
    else
      v14 = 1;
    if (v12)
      v15 = v10;
    else
      v15 = 1;
    if ((v15 & 1) != 0)
      v11 = 0;
    else
      v11 = v13 & v14;

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void _UIWindowSceneActivateConfiguration(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  objc_msgSend(v7, "_sceneActivator");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v8;
  v10 = (void *)UIApp;
  if (v8)
    v10 = (void *)v8;
  v11 = v10;

  objc_msgSend(v11, "_requestSceneActivationWithConfiguration:animated:sender:errorHandler:", v7, _UIWindowSceneActivationIsAnimatable(v7), v6, v5);
}

uint64_t _UITextViewAllowSelectionContainerInTextLayoutCanvas()
{
  if ((_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_TextViewAllowSelectionContainerInTextLayoutCanvas, (uint64_t)CFSTR("TextViewAllowSelectionContainerInTextLayoutCanvas")) & 1) != 0|| byte_1ECD769AC)
  {
    return dyld_program_sdk_at_least();
  }
  else
  {
    return 0;
  }
}

void _UITextViewEnablingCompatibilityMode(void *a1, int a2)
{
  id v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  unint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (a2)
  {
    v4 = qword_1ECD79380;
    if (!qword_1ECD79380)
    {
      v4 = __UILogCategoryGetNode("Text", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v4, (unint64_t *)&qword_1ECD79380);
    }
    v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v8 = 134349314;
      v9 = v3;
      v10 = 2082;
      v11 = "void _UITextViewEnablingCompatibilityMode(UITextView *__strong, BOOL)";
      v6 = "UITextView %{public}p is switching to TextKit 1 compatibility mode because its layoutManager was accessed. Br"
           "eak on %{public}s to debug.";
LABEL_10:
      _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    v7 = qword_1ECD79388;
    if (!qword_1ECD79388)
    {
      v7 = __UILogCategoryGetNode("Text", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&qword_1ECD79388);
    }
    v5 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v8 = 134349314;
      v9 = v3;
      v10 = 2082;
      v11 = "void _UITextViewEnablingCompatibilityMode(UITextView *__strong, BOOL)";
      v6 = "UITextView %{public}p is switching to TextKit 1 compatibility mode because its textStorage contains attribute"
           "s which are not compatible with TextKit 2. Break on %{public}s to debug.";
      goto LABEL_10;
    }
  }

}

void sub_186312290(void *a1)
{
  uint64_t v1;

  objc_begin_catch(a1);
  *(_QWORD *)(*(_QWORD *)(v1 + 32) + 2152) &= ~0x1000uLL;
  objc_exception_rethrow();
}

void sub_1863122C0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_186313C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_186314CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_DWORD *_UIEmitSignpostEvent(_DWORD *result)
{
  if (*result)
    return (_DWORD *)kdebug_trace();
  return result;
}

void sub_186316C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_186317794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18631B77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18631C0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18631CB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18631F3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18631FA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_18631FEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_186320AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___customTextViewSubclassRequiresTextKit1_block_invoke_2()
{
  uint64_t v0;
  void *v1;
  void *v2;

  _UIMainBundleIdentifier();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECD793B0;
  qword_1ECD793B0 = v0;

  objc_msgSend((id)qword_1ECD793A0, "objectForKeyedSubscript:", qword_1ECD793B0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _MergedGlobals_63 = v2 != 0;

}

void ___customTextViewSubclassUsesIllegalDoubleInit_block_invoke()
{
  uint64_t v0;
  void *v1;
  void *v2;
  NSString *v3;

  _UIMainBundleIdentifier();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECD793C0;
  qword_1ECD793C0 = v0;

  objc_msgSend(&unk_1E1A9B590, "objectForKeyedSubscript:", qword_1ECD793C0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  byte_1ECD79379 = v2 != 0;

  if (byte_1ECD79379)
  {
    objc_msgSend(&unk_1E1A9B590, "objectForKeyedSubscript:", qword_1ECD793C0);
    v3 = (NSString *)objc_claimAutoreleasedReturnValue();
    qword_1ECD793C8 = (uint64_t)NSClassFromString(v3);

  }
}

void ___downgradeToTextKit1IfNecessary_block_invoke()
{
  void *v0;

  v0 = (void *)qword_1ECD793D8;
  qword_1ECD793D8 = (uint64_t)&unk_1E1A9B5B8;

}

void ___downgradeToTextKit1IfNecessary_block_invoke_2()
{
  uint64_t v0;
  void *v1;
  void *v2;

  _UIMainBundleIdentifier();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECD793E8;
  qword_1ECD793E8 = v0;

  objc_msgSend((id)qword_1ECD793D8, "objectForKeyedSubscript:", qword_1ECD793E8);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  byte_1ECD7937A = v2 != 0;

}

uint64_t ___downgradeToTextKit1IfNecessary_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t result;

  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

void sub_1863237A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *_UIFontDescriptorDescriptionForSymbolicTraits(unsigned int a1)
{
  void *v2;
  void *v3;
  __CFString *v4;

  v2 = (void *)objc_opt_new();
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "appendString:", CFSTR("UIFontDescriptorTraitItalic "));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorTraitBold "));
  if ((a1 & 0x20) == 0)
  {
LABEL_4:
    if ((a1 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorTraitExpanded "));
  if ((a1 & 0x40) == 0)
  {
LABEL_5:
    if ((a1 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorTraitCondensed "));
  if ((a1 & 0x400) == 0)
  {
LABEL_6:
    if ((a1 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorTraitMonoSpace "));
  if ((a1 & 0x800) == 0)
  {
LABEL_7:
    if ((a1 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorTraitVertical "));
  if ((a1 & 0x1000) == 0)
  {
LABEL_8:
    if ((a1 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorTraitUIOptimized "));
  if ((a1 & 0x8000) == 0)
  {
LABEL_9:
    if ((a1 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorTraitTightLeading "));
  if ((a1 & 0x10000) == 0)
  {
LABEL_10:
    if ((a1 & 0x10000000) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorTraitLooseLeading "));
  if ((a1 & 0x10000000) == 0)
  {
LABEL_11:
    if ((a1 & 0x20000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_40:
  objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorClassOldStyleSerifs "));
  if ((a1 & 0x20000000) != 0)
LABEL_12:
    objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorClassTransitionalSerifs "));
LABEL_13:
  if ((a1 & 0x30000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorClassModernSerifs "));
  if ((a1 & 0x40000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorClassClarendonSerifs "));
  if ((a1 & 0x50000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorClassSlabSerifs "));
  if ((a1 & 0x70000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorClassFreeformSerifs "));
  if ((a1 & 0x80000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorClassSansSerif "));
  if ((a1 & 0x90000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorClassOrnamentals "));
  if ((a1 & 0xA0000000) != 0)
    objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorClassScripts "));
  if (a1 >> 30)
    objc_msgSend(v3, "appendString:", CFSTR("UIFontDescriptorClassSymbolic "));
  if (objc_msgSend(v3, "length"))
  {
    objc_msgSend(v3, "substringToIndex:", objc_msgSend(v3, "length") - 1);
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = CFSTR("(none)");
  }

  return v4;
}

id _UIUpdateInputAggregateCacheDebugDescription(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;

  if (a2)
  {
    v3 = a2;
    v4 = (void *)MEMORY[0x1E0CB3940];
    v5 = a1[8];
    v6 = (void *)MEMORY[0x1E0CB3940];
  }
  else
  {
    v7 = mach_absolute_time();
    v6 = (void *)MEMORY[0x1E0CB3940];
    v5 = a1[8];
    if (v7)
      v3 = v7;
    else
      v3 = mach_absolute_time();
    v4 = (void *)MEMORY[0x1E0CB3940];
  }
  _UIUpdateInputExtentDebugDescription(a1, v3);
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v9 = objc_msgSend(v8, "UTF8String");
  _UIUpdateInputExtentDebugDescription(a1 + 4, v3);
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend(v4, "stringWithFormat:", CFSTR("Input Aggregate, extents:\n - complete: %s\n\n - lowLatency: %s"), v9, objc_msgSend(v10, "UTF8String"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = objc_retainAutorelease(v11);
  objc_msgSend(v6, "stringWithFormat:", CFSTR("Input Aggregate Cache, alignment=%u (valid=%u), %s"), v5, (_DWORD)v5 != 2, objc_msgSend(v12, "UTF8String"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void sub_18632514C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863255C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *CoreAnalyticsLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreAnalyticsLibraryCore_frameworkLibrary)
    CoreAnalyticsLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)CoreAnalyticsLibraryCore_frameworkLibrary;
  if (!CoreAnalyticsLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreAnalyticsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("_UIGestureStudyInteraction.m"), 21, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id _UIStickerUtilLog()
{
  if (qword_1ECD81CD8 != -1)
    dispatch_once(&qword_1ECD81CD8, &__block_literal_global_579);
  return (id)_MergedGlobals_1267;
}

CGImageRef _UIStickerCreateImageFromData(const __CFData *a1)
{
  CGImageSource *v1;
  CGImageRef ImageAtIndex;

  v1 = CGImageSourceCreateWithData(a1, 0);
  CGImageSourceGetCount(v1);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v1, 0, 0);
  CFRelease(v1);
  return ImageAtIndex;
}

CGImageRef _UIStickerCreateResizedImage(CGImage *a1, size_t a2, size_t a3)
{
  return _UIStickerCreateFramedSizedSticker(a1, a2, a3, a2, a3);
}

CGImageRef _UIStickerCreateFramedSizedSticker(CGImage *a1, size_t a2, size_t a3, unint64_t a4, unint64_t a5)
{
  size_t AlignedBytesPerRow;
  CGColorSpace *DeviceRGB;
  CGContext *v12;
  CGImageRef Image;
  CGRect v15;

  AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v12 = CGBitmapContextCreate(0, a2, a3, 8uLL, AlignedBytesPerRow, DeviceRGB, 0x2002u);
  CGColorSpaceRelease(DeviceRGB);
  CGContextSetInterpolationQuality(v12, kCGInterpolationHigh);
  v15.origin.x = (double)(unint64_t)((double)(a2 - a4) * 0.5);
  v15.origin.y = (double)(unint64_t)((double)(a3 - a5) * 0.5);
  v15.size.width = (double)a4;
  v15.size.height = (double)a5;
  CGContextDrawImage(v12, v15, a1);
  Image = CGBitmapContextCreateImage(v12);
  CGContextRelease(v12);
  return Image;
}

CGImageRef _UIStickerCreateSquareSticker(CGImage *a1, size_t a2)
{
  size_t Width;
  size_t Height;
  unint64_t v6;
  double v7;

  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  if (Width <= Height)
    v6 = Height;
  else
    v6 = Width;
  v7 = 1.0;
  if (v6 >= a2 && v6 != 0)
    v7 = (double)a2 / (double)v6;
  return _UIStickerCreateFramedSizedSticker(a1, a2, a2, (unint64_t)(v7 * (double)Width), (unint64_t)(v7 * (double)Height));
}

double _UIStickerImageScaleForMaxLength(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  double result;

  if (a1 <= a2)
    v3 = a2;
  else
    v3 = a1;
  result = 1.0;
  if (v3 >= a3 && v3 != 0)
    return (double)a3 / (double)v3;
  return result;
}

id _UIStickerCreateDownsampledHEICS(void *a1)
{
  id v1;
  int Container;
  void *v3;
  id v4;
  void *v5;
  NSObject *v6;
  const void *v8;
  void *v9;
  void *Value;
  id v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef arg;
  CFTypeRef v15[2];
  CFTypeRef v16;
  CFTypeRef v17[2];
  _BYTE buf[18];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  arg = 0;
  v1 = a1;
  *(_QWORD *)buf = 0;
  Container = CMPhotoDecompressionSessionCreate();
  if (Container
    || (CFAutorelease(*(CFTypeRef *)buf), v17[0] = 0, (Container = CMPhotoDecompressionSessionCreateContainer()) != 0)
    || (CFAutorelease(v17[0]), (Container = CMPhotoDecompressionContainerCreateSequenceContainer()) != 0))
  {

LABEL_5:
    v3 = 0;
    goto LABEL_6;
  }
  CFAutorelease(arg);

  v12 = 0;
  v13 = 0;
  v15[0] = 0;
  Container = CMPhotoCompressionSessionCreate();
  if (Container)
    goto LABEL_5;
  CFAutorelease(v15[0]);
  v8 = (const void *)*MEMORY[0x1E0D09308];
  v17[0] = *(CFTypeRef *)MEMORY[0x1E0D09318];
  v17[1] = v8;
  *(_QWORD *)buf = &unk_1E1A9A920;
  *(_QWORD *)&buf[8] = &unk_1E1A9A938;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, v17, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  Container = CMPhotoCompressionSessionOpenEmptyContainer();
  if (Container
    || (Container = CMPhotoCompressionSessionStartImageSequence()) != 0
    || (Container = CMPhotoDecompressionContainerGetImageCount()) != 0
    || (v16 = 0, (Container = CMPhotoDecompressionContainerCreateDictionaryDescription()) != 0))
  {

    goto LABEL_5;
  }
  CFAutorelease(v16);
  Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v16, (const void *)*MEMORY[0x1E0D09518]);

  v11 = Value;
  if (CMPhotoCompressionSessionEndImageSequence()
    || (v15[0] = 0, CMPhotoCompressionSessionCloseContainerAndCopyBacking()))
  {
    v3 = 0;
  }
  else
  {
    v3 = (id)v15[0];
  }

  Container = 0;
LABEL_6:

  v4 = v3;
  v5 = v4;
  if (Container || !v4)
  {
    _UIStickerUtilLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "NSData * _Nullable _UIStickerCreateDownsampledHEICS(NSData *__strong _Nonnull, size_t)";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = Container;
      _os_log_error_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "%s could not resize animated sticker: %d", buf, 0x12u);
    }

  }
  return v5;
}

void sub_186328804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

CGImageRef _UIStickerCreateDownsampledImage(CGImage *a1, unint64_t a2)
{
  size_t Width;
  size_t Height;
  unint64_t v6;
  double v7;

  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  if (Width <= Height)
    v6 = Height;
  else
    v6 = Width;
  v7 = 1.0;
  if (v6 >= a2 && v6 != 0)
    v7 = (double)a2 / (double)v6;
  return _UIStickerCreateFramedSizedSticker(a1, (unint64_t)(v7 * (double)Width), (unint64_t)(v7 * (double)Height), (unint64_t)(v7 * (double)Width), (unint64_t)(v7 * (double)Height));
}

__CFData *_UIStickerDataFromImage(CGImage *a1, void *a2)
{
  return _UIStickerDataFromImageWithMetadata(a1, a2, 0);
}

__CFData *_UIStickerDataFromImageWithMetadata(CGImage *a1, void *a2, void *a3)
{
  objc_class *v5;
  id v6;
  __CFString *v7;
  __CFData *v8;
  CGImageDestination *v9;
  const __CFDictionary *v10;

  v5 = (objc_class *)MEMORY[0x1E0C99DF0];
  v6 = a3;
  v7 = a2;
  v8 = (__CFData *)objc_alloc_init(v5);
  v9 = CGImageDestinationCreateWithData(v8, v7, 1uLL, 0);

  objc_msgSend(getSTKEmojiMetadataHelperClass(), "metadataDictionaryFromData:", v6);
  v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  CGImageDestinationAddImage(v9, a1, v10);
  CGImageDestinationFinalize(v9);
  CFRelease(v9);

  return v8;
}

id getSTKEmojiMetadataHelperClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD81CF0;
  v7 = qword_1ECD81CF0;
  if (!qword_1ECD81CF0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSTKEmojiMetadataHelperClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSTKEmojiMetadataHelperClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1863289F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIStickerItemProviderWithMetadata(void *a1, void *a2, void *a3, int a4, void *a5, double a6)
{
  id v10;
  id v11;
  int v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t i;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  id v26;
  void *v27;
  char v28;
  void *v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  uint64_t v37;
  CGImage *ImageFromData;
  CGImage *v39;
  CGImage *SquareSticker;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  UIImage *v56;
  UIImage *v57;
  id v59;
  size_t v60;
  id v61;
  id v63;
  unsigned __int8 v64;
  id v65;
  void *v66;
  void *v67;
  char v68;
  _QWORD v69[5];
  _QWORD v70[4];
  id v71;
  _QWORD v72[4];
  UIImage *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v11 = a2;
  v65 = a3;
  v61 = a5;
  v12 = objc_msgSend(v10, "hasPrefix:", CFSTR("sticker:///emoji"));
  v13 = objc_msgSend(v10, "hasPrefix:", CFSTR("sticker:///memoji"));
  v63 = objc_alloc_init(MEMORY[0x1E0CB36C8]);
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v14 = v11;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v74, v78, 16);
  if (v15)
  {
    v16 = v15;
    v59 = v10;
    v68 = 0;
    v64 = v12 | v13;
    v17 = *(_QWORD *)v75;
    v67 = (void *)*MEMORY[0x1E0CEC580];
    v66 = (void *)*MEMORY[0x1E0CEC508];
    v18 = 160.0;
    if (v12)
      v18 = 96.0;
    v19 = v18 * a6;
    if (v19 < 300.0)
      v19 = 300.0;
    v60 = (unint64_t)v19;
    while (1)
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v75 != v17)
          objc_enumerationMutation(v14);
        v21 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * i);
        objc_msgSend(v21, "role");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v22, "isEqualToString:", CFSTR("com.apple.stickers.role.keyboard"));

        if ((v23 & 1) == 0)
        {
          objc_msgSend(v21, "role");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v24, "containsString:", CFSTR("com.apple.stickers.role.stillVariant_"));

          if ((v25 & 1) == 0)
          {
            v26 = v14;
            objc_msgSend(v21, "type");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = objc_msgSend(v27, "isEqualToString:", CFSTR("com.apple.sticker"));

            v68 |= v28;
            objc_msgSend(v21, "type");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v67, "identifier");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = objc_msgSend(v29, "isEqualToString:", v30);

            objc_msgSend(v21, "type");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v66, "identifier");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = objc_msgSend(v32, "isEqualToString:", v33);

            objc_msgSend(v21, "role");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v35, "isEqualToString:", CFSTR("com.apple.stickers.role.still")) & 1) != 0)
            {

LABEL_15:
              objc_msgSend(v21, "data");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              if (v65)
              {
                objc_msgSend(v65, "data");
                v37 = objc_claimAutoreleasedReturnValue();

                v36 = (void *)v37;
              }
              if ((v34 | v31) == 1)
              {
                ImageFromData = _UIStickerCreateImageFromData((const __CFData *)v36);
                if (ImageFromData)
                {
                  v39 = ImageFromData;
                  if (a4)
                  {
                    SquareSticker = _UIStickerCreateSquareSticker(ImageFromData, v60);
                    objc_msgSend(v21, "type");
                    v41 = (void *)objc_claimAutoreleasedReturnValue();
                    _UIStickerDataFromImageWithMetadata(SquareSticker, v41, v61);
                    v42 = objc_claimAutoreleasedReturnValue();

                    CGImageRelease(SquareSticker);
                    v36 = (void *)v42;
                  }
                  else
                  {
                    objc_msgSend(v21, "type");
                    v54 = (void *)objc_claimAutoreleasedReturnValue();
                    _UIStickerDataFromImageWithMetadata(v39, v54, v61);
                    v55 = objc_claimAutoreleasedReturnValue();

                    v36 = (void *)v55;
                  }
                  CGImageRelease(v39);
                  v56 = -[UIImage initWithData:scale:]([UIImage alloc], "initWithData:scale:", v36, a6);
                  objc_msgSend(v63, "registerObject:visibility:", v56, 3);
                  v72[0] = MEMORY[0x1E0C809B0];
                  v72[1] = 3221225472;
                  v72[2] = ___UIStickerItemProviderWithMetadata_block_invoke;
                  v72[3] = &unk_1E16B5178;
                  v73 = v56;
                  v57 = v56;
                  objc_msgSend(v63, "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:", CFSTR("com.apple.png-sticker"), 0, v72);

                }
              }

              v14 = v26;
              continue;
            }

            if ((v64 & v31 & 1) != 0)
              goto LABEL_15;
            objc_msgSend(v21, "role");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v43, "isEqualToString:", CFSTR("com.apple.stickers.role.animated")) & 1) == 0)
            {

              v14 = v26;
LABEL_29:
              objc_msgSend(v21, "type");
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              v69[0] = MEMORY[0x1E0C809B0];
              v69[1] = 3221225472;
              v69[2] = ___UIStickerItemProviderWithMetadata_block_invoke_3;
              v69[3] = &unk_1E16B5178;
              v69[4] = v21;
              objc_msgSend(v63, "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:", v53, 0, v69);

              continue;
            }
            objc_msgSend(v21, "type");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            v45 = objc_msgSend(v44, "isEqualToString:", CFSTR("public.heics"));

            v14 = v26;
            if (!v45)
              goto LABEL_29;
            objc_msgSend(v21, "data");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = v46;
            if (a4)
            {
              _UIStickerCreateDownsampledHEICS(v46);
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              v49 = v48;
              if (v48)
              {
                v50 = v48;

                v47 = v50;
              }

            }
            objc_msgSend(v21, "type");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            v70[0] = MEMORY[0x1E0C809B0];
            v70[1] = 3221225472;
            v70[2] = ___UIStickerItemProviderWithMetadata_block_invoke_2;
            v70[3] = &unk_1E16B5178;
            v71 = v47;
            v52 = v47;
            objc_msgSend(v63, "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:", v51, 0, v70);

          }
        }
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v74, v78, 16);
      if (!v16)
      {

        v10 = v59;
        if ((v68 & 1) != 0)
          goto LABEL_39;
        goto LABEL_38;
      }
    }
  }

LABEL_38:
  objc_msgSend(v63, "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:", CFSTR("com.apple.sticker"), 0, &__block_literal_global_24_7);
LABEL_39:

  return v63;
}

id _UIStickerCreateEmojiTextAttachmentFromSticker(void *a1)
{
  id v1;
  void *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  const __CFData *v8;
  CGImage *ImageFromData;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t i;
  CGImage *SquareSticker;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  __CFString *v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  unsigned __int8 v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id obj;
  id v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint8_t v61[4];
  const char *v62;
  __int16 v63;
  void *v64;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  void *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  getSTKEmojiMetadataHelperClass();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v52 = 0;
    objc_msgSend(v1, "stk_asEmojiTextAttachmentWithError:", &v52);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v52;
    if (v3)
    {
      _UIStickerUtilLog();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v1, "identifier");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "localizedDescription");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136315650;
        v66 = "NSEmojiImageTextAttachment * _Nullable _UIStickerCreateEmojiTextAttachmentFromSticker(_UISticker *__strong _Nonnull)";
        v67 = 2114;
        v68 = v45;
        v69 = 2114;
        v70 = v46;
        _os_log_error_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "[%s] Representations could not be loaded as emoji text attachments directly from sticker %{public}@. %{public}@", buf, 0x20u);

      }
    }

    if (v2)
      goto LABEL_42;
  }
  else
  {
    _UIStickerUtilLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v1, "identifier");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315394;
      v66 = "NSEmojiImageTextAttachment * _Nullable _UIStickerCreateEmojiTextAttachmentFromSticker(_UISticker *__strong _Nonnull)";
      v67 = 2114;
      v68 = v44;
      _os_log_error_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "[%s] Could not find method to load representations as emoji text attachments directly from sticker %{public}@", buf, 0x16u);

    }
  }
  v48 = v1;
  v6 = v1;
  objc_msgSend(v6, "bakedInRep");
  v7 = objc_claimAutoreleasedReturnValue();
  v50 = v6;
  if (v7)
  {
LABEL_12:
    -[NSObject data](v7, "data", v48);
    v8 = (const __CFData *)objc_claimAutoreleasedReturnValue();
    ImageFromData = _UIStickerCreateImageFromData(v8);

    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(&unk_1E1A95030, "count"));
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v11 = objc_msgSend(&unk_1E1A95030, "countByEnumeratingWithState:objects:count:", &v53, v61, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v54;
      v14 = *MEMORY[0x1E0C9D820];
      v15 = *(double *)(MEMORY[0x1E0C9D820] + 8);
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v54 != v13)
            objc_enumerationMutation(&unk_1E1A95030);
          SquareSticker = _UIStickerCreateSquareSticker(ImageFromData, objc_msgSend(*(id *)(*((_QWORD *)&v53 + 1) + 8 * i), "unsignedIntValue"));
          v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA80E8]), "initWithImage:alignmentInset:", SquareSticker, v14, v15);
          CGImageRelease(SquareSticker);
          objc_msgSend(v10, "addObject:", v18);

        }
        v12 = objc_msgSend(&unk_1E1A95030, "countByEnumeratingWithState:objects:count:", &v53, v61, 16);
      }
      while (v12);
    }
    CGImageRelease(ImageFromData);
    v19 = v50;
    objc_msgSend(v50, "name");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20)
    {
      objc_msgSend(v50, "name");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v21, "length"))
      {
        objc_msgSend(v50, "name");
        v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v22 = CFSTR("missing description");
      }

    }
    else
    {
      v22 = CFSTR("missing description");
    }
    v1 = v49;

    v38 = objc_alloc(MEMORY[0x1E0CA80E0]);
    objc_msgSend(v50, "identifier");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = (void *)objc_msgSend(v38, "initWithContentIdentifier:shortDescription:strikeImages:", v39, v22, v10);

    v41 = objc_alloc((Class)&off_1EE070640);
    objc_msgSend(v40, "imageData");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = (void *)objc_msgSend(v41, "initWithData:", v42);

  }
  else
  {
    objc_msgSend(v6, "externalURI");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "hasPrefix:", CFSTR("sticker:///emoji"));

    objc_msgSend(v6, "externalURI");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "hasPrefix:", CFSTR("sticker:///memoji"));

    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    objc_msgSend(v6, "representations");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, buf, 16);
    if (v27)
    {
      v28 = v27;
      v29 = v24 | v26;
      v30 = *(_QWORD *)v58;
      v31 = (void *)*MEMORY[0x1E0CEC580];
LABEL_24:
      v32 = 0;
      while (1)
      {
        if (*(_QWORD *)v58 != v30)
          objc_enumerationMutation(obj);
        v33 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v32);
        objc_msgSend(v33, "type", v48);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "identifier");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v34, "isEqualToString:", v35);

        objc_msgSend(v33, "role");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v37, "isEqualToString:", CFSTR("com.apple.stickers.role.still")) & 1) != 0)
          break;

        if ((v29 & v36 & 1) != 0)
          goto LABEL_37;
        if (v28 == ++v32)
        {
          v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, buf, 16);
          if (v28)
            goto LABEL_24;
          goto LABEL_31;
        }
      }

LABEL_37:
      v7 = v33;

      v19 = v50;
      if (v7)
        goto LABEL_12;
    }
    else
    {
LABEL_31:

      v19 = v50;
    }
    _UIStickerUtilLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v19, "identifier");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v61 = 136315394;
      v62 = "NSEmojiImageTextAttachment *_UIStickerGenerateEmojiTextAttachmentRepsNonEmojiSticker(_UISticker *__strong)";
      v63 = 2114;
      v64 = v47;
      _os_log_error_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "[%s] Could not find still representation in sticker collection for sticker %{public}@", v61, 0x16u);

    }
    v2 = 0;
    v1 = v48;
  }

LABEL_42:
  return v2;
}

id _UIStickerCreateAdaptiveImageGlyphFromSticker(void *a1)
{
  void *v1;
  void *v2;

  _UIStickerCreateEmojiTextAttachmentFromSticker(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "adaptiveImageGlyph");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _UIStickerCreateTextInputPayloadFromSticker(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v21[3];
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(v1, "representations");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "count");

    if (v4)
    {
      v5 = (void *)MEMORY[0x1E0C99E08];
      v21[0] = CFSTR("identifier");
      objc_msgSend(v1, "identifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v22[0] = v6;
      v21[1] = CFSTR("representations");
      objc_msgSend(v1, "representations");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v22[1] = v7;
      v21[2] = CFSTR("attributionInfo");
      objc_msgSend(v1, "attributionInfo");
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v8;
      v10 = MEMORY[0x1E0C9AA70];
      if (v8)
        v10 = v8;
      v22[2] = v10;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 3);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "dictionaryWithDictionary:", v11);
      v2 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v1, "bakedInRep");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CFSTR("bakedInRep"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v1, "effectType"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, CFSTR("effectType"));

      objc_msgSend(v1, "name");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, CFSTR("name"));

      objc_msgSend(v1, "externalURI");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, CFSTR("externalURI"));

      objc_msgSend(v1, "searchText");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, CFSTR("searchText"));

      objc_msgSend(v1, "accessibilityName");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v17, CFSTR("accessibilityName"));

      objc_msgSend(v1, "accessibilityLabel");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v18, CFSTR("accessibilityLabel"));

      objc_msgSend(v1, "metadata");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v19, CFSTR("metadata"));

    }
    else
    {
      v2 = 0;
    }
  }

  return v2;
}

id _UIStickerCreateStickerFromTextInputPayload(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v1 = a1;
  v2 = (void *)objc_opt_new();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("identifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setIdentifier:", v3);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("representations"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setRepresentations:", v4);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("bakedInRep"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setBakedInRep:", v5);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("attributionInfo"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAttributionInfo:", v6);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("effectType"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!v7)
    v7 = &unk_1E1A9A998;
  objc_msgSend(v2, "setEffectType:", objc_msgSend(v7, "integerValue"));

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("name"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setName:", v9);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("externalURI"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setExternalURI:", v10);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("searchText"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setSearchText:", v11);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("accessibilityName"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAccessibilityName:", v12);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("accessibilityLabel"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAccessibilityLabel:", v13);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("metadata"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "setMetadata:", v14);
  return v2;
}

void *__getCMTimeMakeFromDictionarySymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1ECD81CE8)
    qword_1ECD81CE8 = _sl_dlopen();
  v2 = (void *)qword_1ECD81CE8;
  if (!qword_1ECD81CE8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreMediaLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("_UIStickerUtil.m"), 31, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "CMTimeMakeFromDictionary");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  off_1ECD81CE0 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

Class __getSTKEmojiMetadataHelperClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD81CF8)
    qword_1ECD81CF8 = _sl_dlopen();
  if (!qword_1ECD81CF8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *StickerKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIStickerUtil.m"), 34, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("STKEmojiMetadataHelper");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSTKEmojiMetadataHelperClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIStickerUtil.m"), 35, CFSTR("Unable to find class %s"), "STKEmojiMetadataHelper");

LABEL_8:
    __break(1u);
  }
  qword_1ECD81CF0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18632AB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _detailByApplyingSmartQuotes(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CFSTR("NSGrammarCorrections"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v6, "count"))
      {
        v7 = 0;
        v8 = 0;
        do
        {
          objc_msgSend(v6, "objectAtIndex:", v8);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v9, "rangeOfString:", CFSTR("'"));
            if (v10)
            {
              _stringByApplyingSmartQuotes(v9, v3);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v6, "replaceObjectAtIndex:withObject:", v8, v11);

              v7 = 1;
            }
          }

          ++v8;
        }
        while (v8 < objc_msgSend(v6, "count"));
        if ((v7 & 1) != 0)
          objc_msgSend(v4, "setObject:forKey:", v6, CFSTR("NSGrammarCorrections"));
      }

    }
  }

  return v4;
}

id _stringByApplyingSmartQuotes(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a1;
  v4 = v3;
  if (a2)
  {
    objc_msgSend(a2, "smartPunctuationedStringForString:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v4 = v3;
    if (v5)
    {
      v4 = v5;

    }
  }

  return v4;
}

id _resultByApplyingSmartQuotesToResult(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "resultType");
  objc_msgSend(v3, "replacementString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v5 == 512 && v6)
  {
    objc_msgSend(v6, "rangeOfString:", CFSTR("'"));
    if (v8)
    {
      v9 = objc_alloc(MEMORY[0x1E0CB3548]);
      v10 = objc_msgSend(v3, "range");
      v12 = v11;
      _stringByApplyingSmartQuotes(v7, v4);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v9, "initWithRange:replacementString:", v10, v12, v13);

      v3 = (id)v14;
    }
  }
  else if (v5 == 4)
  {
    objc_msgSend(v3, "grammarDetails");
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v15 = (id)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
    if (v39)
    {
      v36 = v7;
      v37 = v4;
      v16 = *(_QWORD *)v45;
      v38 = v15;
      v35 = *(_QWORD *)v45;
      do
      {
        for (i = 0; i != v39; ++i)
        {
          if (*(_QWORD *)v45 != v16)
            objc_enumerationMutation(v15);
          v18 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v18, "objectForKey:", CFSTR("NSGrammarCorrections"));
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            if (v19)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v42 = 0u;
                v43 = 0u;
                v40 = 0u;
                v41 = 0u;
                v20 = v19;
                v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
                if (v21)
                {
                  v22 = v21;
                  v23 = *(_QWORD *)v41;
                  while (2)
                  {
                    for (j = 0; j != v22; ++j)
                    {
                      if (*(_QWORD *)v41 != v23)
                        objc_enumerationMutation(v20);
                      v25 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * j);
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                      {
                        objc_msgSend(v25, "rangeOfString:", CFSTR("'"));
                        if (v26)
                        {

                          v27 = objc_alloc(MEMORY[0x1E0CB3668]);
                          v28 = objc_msgSend(v3, "range");
                          v30 = v29;
                          objc_msgSend(v3, "grammarDetails");
                          v31 = (void *)objc_claimAutoreleasedReturnValue();
                          v4 = v37;
                          _detailsByApplyingSmartQuotes((uint64_t)v31, v37);
                          v32 = (void *)objc_claimAutoreleasedReturnValue();
                          v33 = objc_msgSend(v27, "initWithRange:details:", v28, v30, v32);

                          v3 = (id)v33;
                          goto LABEL_29;
                        }
                      }
                    }
                    v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
                    if (v22)
                      continue;
                    break;
                  }
                }

                v15 = v38;
                v16 = v35;
              }
            }

          }
        }
        v39 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
      }
      while (v39);

      v4 = v37;
LABEL_29:
      v7 = v36;
    }
    else
    {

    }
  }

  return v3;
}

void sub_18632F2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

id alternativesMatchingLanguage(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v6 = v3;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v18;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(v6);
        v11 = *(id *)(*((_QWORD *)&v17 + 1) + 8 * v10);
        v12 = v4;
        v13 = objc_msgSend(v12, "length", (_QWORD)v17);
        if (!v4 || !v11 || (v14 = v13, !objc_msgSend(v11, "hasPrefix:", v12)))
        {

          goto LABEL_16;
        }
        if (objc_msgSend(v11, "length") <= v14)
        {

LABEL_15:
          objc_msgSend(v5, "addObject:", v11);
          goto LABEL_16;
        }
        v15 = objc_msgSend(v11, "characterAtIndex:", v14);

        if (v15 == 95 || v15 == 45)
          goto LABEL_15;
LABEL_16:
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v8);
  }

  return v5;
}

char *strHashNoCase(char *result)
{
  const char *v1;
  char *v2;
  size_t v3;
  const __CFString *v4;
  __CFString *MutableCopy;
  CFHashCode v6;

  if (result)
  {
    v1 = result;
    v2 = strchr(result, 10);
    if (v2)
      v3 = v2 - v1;
    else
      v3 = strlen(v1);
    v4 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)v1, v3, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    MutableCopy = CFStringCreateMutableCopy(0, 0, v4);
    CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
    CFStringFold(MutableCopy, 1uLL, 0);
    v6 = CFHash(MutableCopy);
    CFRelease(MutableCopy);
    CFRelease(v4);
    return (char *)v6;
  }
  return result;
}

BOOL strIsEqualNoCase(char *__s, char *a2)
{
  _BOOL8 v3;
  char *v5;
  char *v6;
  char *v7;
  size_t v8;
  size_t v9;
  const __CFAllocator *v10;
  const __CFString *v11;
  const __CFString *v12;

  if (!((unint64_t)__s | (unint64_t)a2))
    return 1;
  v3 = 0;
  if (__s && a2)
  {
    v5 = strchr(__s, 10);
    v6 = strchr(a2, 10);
    v7 = v6;
    if (v5)
    {
      v8 = v5 - __s;
      if (v6)
      {
LABEL_6:
        v9 = v7 - a2;
LABEL_10:
        v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
        v11 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)__s, v8, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
        v12 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)a2, v9, 0x8000100u, 0, v10);
        v3 = CFStringCompare(v11, v12, 0x11uLL) == kCFCompareEqualTo;
        CFRelease(v11);
        CFRelease(v12);
        return v3;
      }
    }
    else
    {
      v8 = strlen(__s);
      if (v7)
        goto LABEL_6;
    }
    v9 = strlen(a2);
    goto LABEL_10;
  }
  return v3;
}

void ReallyFree(int a1, void *a2)
{
  free(a2);
}

void sub_18632FC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void appendWordToDictionary(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a1;
  v3 = a2;
  v4 = v3;
  if (!v3 || objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0CB2B58]))
  {
    connectionToRemoteDataServer();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "remoteObjectProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "appendWordToTextCheckerLocalDictionary:", v7);
  }

}

void sub_186330830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void setCachedExemptionForString(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a1;
  v3 = (id)qword_1ECD7B330;
  objc_sync_enter(v3);
  v4 = (void *)qword_1ECD7B330;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v5, v6);

  objc_sync_exit(v3);
}

void sub_1863308E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _detailsByApplyingSmartQuotes(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count"))
  {
    v5 = 0;
    do
    {
      objc_msgSend(v4, "objectAtIndex:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        _detailByApplyingSmartQuotes((uint64_t)v6, v3);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "replaceObjectAtIndex:withObject:", v5, v7);

      }
      ++v5;
    }
    while (v5 < objc_msgSend(v4, "count"));
  }

  return v4;
}

Class __getTCPostEditorClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7B3A0)
    qword_1ECD7B3A0 = _sl_dlopen();
  if (!qword_1ECD7B3A0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TextComposerLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UITextChecker.m"), 65, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("TCPostEditor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTCPostEditorClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UITextChecker.m"), 67, CFSTR("Unable to find class %s"), "TCPostEditor");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7B398 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id connectionToRemoteDataServer()
{
  id v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  id v8;

  if (qword_1ECD7B3D8 != -1)
    dispatch_once(&qword_1ECD7B3D8, &__block_literal_global_446);
  v3 = 0;
  v4 = &v3;
  v5 = 0x3032000000;
  v6 = __Block_byref_object_copy__212;
  v7 = __Block_byref_object_dispose__212;
  v8 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __connectionToRemoteDataServer_block_invoke_2;
  block[3] = &unk_1E16B14C0;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1ECD7B3D0, block);
  v0 = (id)v4[5];
  _Block_object_dispose(&v3, 8);

  return v0;
}

intptr_t __dataWithContentsOfUserDictionary_block_invoke(uint64_t a1, uint64_t a2)
{
  NSLog(CFSTR("%s requested data from com.apple.TextInput.rdt but received %@"), "dataWithContentsOfUserDictionary_block_invoke", a2);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __dataWithContentsOfUserDictionary_block_invoke_2(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void __connectionToRemoteDataServer_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.UITextChecker.xpc", 0);
  v1 = (void *)qword_1ECD7B3D0;
  qword_1ECD7B3D0 = (uint64_t)v0;

}

void __connectionToRemoteDataServer_block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v2 = (void *)qword_1ECD7B3E0;
  if (!qword_1ECD7B3E0)
  {
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.TextInput.rdt"), 4096);
    v4 = (void *)qword_1ECD7B3E0;
    qword_1ECD7B3E0 = v3;

    objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE0CF0C8);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)qword_1ECD7B3E0, "setRemoteObjectInterface:", v5);

    objc_msgSend((id)qword_1ECD7B3E0, "_setQueue:", qword_1ECD7B3D0);
    objc_msgSend((id)qword_1ECD7B3E0, "resume");
    v10 = 0;
    v11 = &v10;
    v12 = 0x3032000000;
    v13 = __Block_byref_object_copy__212;
    v14 = __Block_byref_object_dispose__212;
    v15 = 0;
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __connectionToRemoteDataServer_block_invoke_3;
    v9[3] = &unk_1E16E7510;
    v9[4] = &v10;
    objc_msgSend(v6, "addObserverForName:object:queue:usingBlock:", CFSTR("UIApplicationSuspendedNotification"), UIApp, 0, v9);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v11[5];
    v11[5] = v7;

    _Block_object_dispose(&v10, 8);
    v2 = (void *)qword_1ECD7B3E0;
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v2);
}

void __connectionToRemoteDataServer_block_invoke_3(uint64_t a1)
{
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObserver:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

  dispatch_async((dispatch_queue_t)qword_1ECD7B3D0, &__block_literal_global_502);
}

void __connectionToRemoteDataServer_block_invoke_4()
{
  void *v0;

  objc_msgSend((id)qword_1ECD7B3E0, "invalidate");
  v0 = (void *)qword_1ECD7B3E0;
  qword_1ECD7B3E0 = 0;

}

intptr_t __stringIsExemptFromChecker_block_invoke(uint64_t a1, uint64_t a2)
{
  NSLog(CFSTR("UITextChecker sent string:isExemptFromTextCheckerWithCompletionHandler: to com.apple.TextInput.rdt but received error %@"), a2);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t __stringIsExemptFromChecker_block_invoke_2(uint64_t a1, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

const __CFString *UITextAlignmentGetStylePropertyString(unint64_t a1)
{
  if (a1 > 3)
    return &stru_1E16EDF20;
  else
    return off_1E16E76F0[a1];
}

uint64_t _UICorrespondingUserInterfaceStyleForKeyboardAppearanceOfView(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "keyboardAppearance");
  switch(v2)
  {
    case 1:
      v3 = 2;
      break;
    case 2:
      v3 = 1;
      break;
    case 9:
      v3 = 1000;
      break;
    default:
      objc_msgSend(v1, "traitCollection");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v4, "userInterfaceStyle");

      break;
  }

  return v3;
}

void sub_186337280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186337420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186337924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIMachTimerKill(unsigned int *a1)
{
  __CFRunLoopSource *v2;
  __CFMachPort *v3;
  uint64_t result;

  v2 = (__CFRunLoopSource *)*((_QWORD *)a1 + 2);
  if (v2)
  {
    CFRunLoopSourceInvalidate(v2);
    CFRelease(*((CFTypeRef *)a1 + 2));
  }
  v3 = (__CFMachPort *)*((_QWORD *)a1 + 1);
  if (v3)
  {
    CFMachPortInvalidate(v3);
    CFRelease(*((CFTypeRef *)a1 + 1));
  }
  result = *a1;
  if ((_DWORD)result)
  {
    mk_timer_cancel();
    return mk_timer_destroy();
  }
  return result;
}

id getLTUITranslationViewControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getLTUITranslationViewControllerClass_softClass;
  v7 = getLTUITranslationViewControllerClass_softClass;
  if (!getLTUITranslationViewControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getLTUITranslationViewControllerClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getLTUITranslationViewControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1863391CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186339EE4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 224));
  _Unwind_Resume(a1);
}

void __getLTUITranslationViewControllerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  TranslationUIServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("LTUITranslationViewController");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getLTUITranslationViewControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLTUITranslationViewControllerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UITextServiceSession.m"), 55, CFSTR("Unable to find class %s"), "LTUITranslationViewController");

    __break(1u);
  }
}

void TranslationUIServicesLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!TranslationUIServicesLibraryCore_frameworkLibrary)
    TranslationUIServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!TranslationUIServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TranslationUIServicesLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UITextServiceSession.m"), 54, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getLTUISourceMetaClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  TranslationUIServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("LTUISourceMeta");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD81D18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLTUISourceMetaClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UITextServiceSession.m"), 56, CFSTR("Unable to find class %s"), "LTUISourceMeta");

    __break(1u);
  }
}

id UIOLog()
{
  if (UIOLog_onceToken != -1)
    dispatch_once(&UIOLog_onceToken, &__block_literal_global_582);
  return (id)UIOLog_log;
}

void UIResetDateFormats()
{
  if (__LocaleDateFormats)
  {
    CFRelease((CFTypeRef)__LocaleDateFormats);
    __LocaleDateFormats = 0;
  }
  if (todayFormatter)
  {
    CFRelease((CFTypeRef)todayFormatter);
    todayFormatter = 0;
  }
  if (relativeFormatter)
  {
    CFRelease((CFTypeRef)relativeFormatter);
    relativeFormatter = 0;
  }
  if (dayFormatter)
  {
    CFRelease((CFTypeRef)dayFormatter);
    dayFormatter = 0;
  }
  if (longFormatter)
  {
    CFRelease((CFTypeRef)longFormatter);
    longFormatter = 0;
  }
}

CFStringRef UIFormatDateWithLongFormat(const __CFDate *a1, const __CFString *a2)
{
  CFTimeZoneRef v4;
  const __CFTimeZone *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  double AbsoluteTime;
  double v9;
  double v10;
  const __CFLocale *v11;
  unsigned int v12;
  const __CFString *StringWithDate;
  const __CFString *v14;
  CFMutableStringRef MutableCopy;
  __CFString *v16;
  __CFDateFormatter *v17;
  const __CFLocale *v19;
  CFDateFormatterRef v20;
  const __CFLocale *v21;
  __CFDateFormatter *v22;
  const __CFLocale *v23;
  const __CFLocale *v24;
  __CFDateFormatter *v25;
  CFGregorianDate v26;
  CFGregorianDate v27;

  v4 = CFTimeZoneCopySystem();
  if (!v4)
    return 0;
  v5 = v4;
  Current = CFAbsoluteTimeGetCurrent();
  v7 = *(_OWORD *)&CFAbsoluteTimeGetGregorianDate(Current, v5);
  *(_QWORD *)&v26.year = v7 & 0xFFFFFFFFFFFFLL;
  v26.second = 0.0;
  AbsoluteTime = CFGregorianDateGetAbsoluteTime(v26, v5);
  *(_QWORD *)&v27.year = (v7 + 0x10000000000) & 0xFF0000000000 | v7 & 0xFFFFFFFFFFLL;
  v27.second = 0.0;
  v9 = CFGregorianDateGetAbsoluteTime(v27, v5);
  CFRelease(v5);
  v10 = MEMORY[0x186DC5AC4](a1);
  if (v10 >= v9)
    goto LABEL_13;
  if (AbsoluteTime - v10 >= 0.0)
  {
    if (AbsoluteTime - v10 <= 86400.0)
    {
      v17 = (__CFDateFormatter *)relativeFormatter;
      if (!relativeFormatter)
      {
        v21 = CFLocaleCopyCurrent();
        v22 = CFDateFormatterCreate(0, v21, kCFDateFormatterShortStyle, kCFDateFormatterNoStyle);
        relativeFormatter = (uint64_t)v22;
        if (v21)
        {
          CFRelease(v21);
          v22 = (__CFDateFormatter *)relativeFormatter;
        }
        if (!v22)
          return 0;
        CFDateFormatterSetProperty(v22, (CFStringRef)*MEMORY[0x1E0C9AEE0], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
        v17 = (__CFDateFormatter *)relativeFormatter;
      }
      return CFDateFormatterCreateStringWithDate(0, v17, a1);
    }
    if (v9 - v10 <= 604800.0)
    {
      v17 = (__CFDateFormatter *)dayFormatter;
      if (!dayFormatter)
      {
        v24 = CFLocaleCopyCurrent();
        v25 = CFDateFormatterCreate(0, v24, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
        dayFormatter = (uint64_t)v25;
        if (v24)
        {
          CFRelease(v24);
          v25 = (__CFDateFormatter *)dayFormatter;
        }
        if (!v25)
          return 0;
        CFDateFormatterSetFormat(v25, CFSTR("cccc"));
        v17 = (__CFDateFormatter *)dayFormatter;
      }
      return CFDateFormatterCreateStringWithDate(0, v17, a1);
    }
LABEL_13:
    v17 = (__CFDateFormatter *)longFormatter;
    if (!longFormatter)
    {
      v19 = CFLocaleCopyCurrent();
      v20 = CFDateFormatterCreate(0, v19, (CFDateFormatterStyle)(2 * (a2 == 0)), kCFDateFormatterNoStyle);
      longFormatter = (uint64_t)v20;
      if (v19)
      {
        CFRelease(v19);
        v17 = (__CFDateFormatter *)longFormatter;
        if (!longFormatter)
          return 0;
      }
      else
      {
        v17 = v20;
        if (!v20)
          return 0;
      }
      if (a2)
      {
        CFDateFormatterSetFormat(v17, a2);
        v17 = (__CFDateFormatter *)longFormatter;
      }
    }
    return CFDateFormatterCreateStringWithDate(0, v17, a1);
  }
  v11 = CFLocaleCopyCurrent();
  v12 = _UITimeFormatIs24HourMode();
  if (todayFormatter && v12 != __use24HourFormat)
    __use24HourFormat = v12;
  StringWithDate = CFDateFormatterCreateStringWithDate(0, (CFDateFormatterRef)todayFormatter, a1);
  if (StringWithDate)
  {
    v14 = StringWithDate;
    MutableCopy = CFStringCreateMutableCopy(0, 20, StringWithDate);
    if (MutableCopy)
    {
      v16 = MutableCopy;
      CFRelease(v14);
      CFStringLowercase(v16, v11);
      if (v11)
        CFRelease(v11);
      return v16;
    }
    if (v11)
      CFRelease(v11);
    v23 = (const __CFLocale *)v14;
    goto LABEL_36;
  }
  if (v11)
  {
    v23 = v11;
LABEL_36:
    CFRelease(v23);
  }
  return 0;
}

const __CFString *_UITimeFormatIs24HourMode()
{
  __CFDateFormatter *v0;
  const __CFLocale *v1;
  const __CFString *result;
  const __CFString *v3;

  _RegisterForLocaleChangeNotificationIfNecessary();
  v0 = (__CFDateFormatter *)todayFormatter;
  if (!todayFormatter)
  {
    v1 = CFLocaleCopyCurrent();
    todayFormatter = (uint64_t)CFDateFormatterCreate(0, v1, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
    CFRelease(v1);
    v0 = (__CFDateFormatter *)todayFormatter;
  }
  result = CFDateFormatterGetFormat(v0);
  if (result)
  {
    v3 = result;
    if (CFStringFind(result, CFSTR("H"), 0).location == -1)
      return (const __CFString *)(CFStringFind(v3, CFSTR("k"), 0).location != -1);
    else
      return (const __CFString *)1;
  }
  return result;
}

const void *UIDateFormatStringForFormatTypeForLocale(const __CFLocale *a1, void *key)
{
  const __CFDictionary *v4;
  CFStringRef *v5;
  CFStringRef VersionString;
  const __CFString *v7;
  CFPropertyListRef v8;
  CFPropertyListRef v9;
  const __CFDictionary *v10;
  unint64_t v11;
  __CFDateFormatter *v12;
  CFTypeRef v13;
  int v14;
  CFStringRef Format;
  __CFDateFormatter *v16;
  CFStringRef v17;
  const __CFString *v18;
  CFArrayRef v19;
  const __CFArray *v20;
  CFIndex Count;
  CFIndex v22;
  CFIndex i;
  __CFDictionary *v24;
  const void *v25;
  const void *ValueAtIndex;
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  CFStringRef Copy;
  const __CFString *v33;
  const void *Value;
  CFStringRef v35;
  const __CFString *v36;
  CFStringRef v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  CFStringRef *v42;
  const void *v43;
  const __CFDictionary *v44;
  const __CFDictionary *v45;
  const __CFString *v46;
  const __CFString *v47;
  CFIndex v48;
  __CFString *v49;
  const __CFString *v50;
  const __CFString *v51;
  CFIndex v52;
  __CFString *v53;
  CFStringRef v54;
  CFStringRef v55;
  const __CFString *v56;
  CFPropertyListRef v57;
  const void *v58;
  CFPropertyListRef v59;
  const void *v60;
  __CFDictionary *v61;
  const void *v62;
  void *v64;
  CFTypeRef v65;
  CFTypeRef v66;
  _QWORD *v67;
  CFTypeRef v68;
  void *v69;
  const __CFString *v70;
  void *values[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  const __CFString *v78;
  uint64_t v79;
  CFRange v80;
  CFRange v81;
  CFRange v82;
  CFRange v83;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFDictionary *)__LocaleDateFormats;
  if (!__LocaleDateFormats)
  {
    _RegisterForLocaleChangeNotificationIfNecessary();
    __LocaleDateFormats = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithContentsOfFile:", objc_msgSend((id)CPSharedResourcesDirectory(), "stringByAppendingPathComponent:", CFSTR("Library/Caches/DateFormats.plist")));
    v5 = (CFStringRef *)MEMORY[0x1E0C9B228];
    if (!__LocaleDateFormats)
      goto LABEL_15;
    VersionString = _CreateVersionString();
    v7 = *v5;
    v8 = CFPreferencesCopyAppValue(CFSTR("AppleICUForce12HourTime"), *v5);
    v9 = CFPreferencesCopyAppValue(CFSTR("AppleICUForce24HourTime"), v7);
    v10 = (const __CFDictionary *)__LocaleDateFormats;
    v11 = MEMORY[0x186DC5BB4](a1);
    if (!_CachedValueIsEqualToExpectedValue(v10, CFSTR("Locale"), v11)
      || !_CachedValueIsEqualToExpectedValue((const __CFDictionary *)__LocaleDateFormats, CFSTR("Version"), (unint64_t)VersionString)|| !_CachedValueIsEqualToExpectedValue((const __CFDictionary *)__LocaleDateFormats, CFSTR("AppleICUForce12HourTime"), (unint64_t)v8)|| !_CachedValueIsEqualToExpectedValue((const __CFDictionary *)__LocaleDateFormats, CFSTR("AppleICUForce24HourTime"), (unint64_t)v9))
    {
      CFRelease((CFTypeRef)__LocaleDateFormats);
      __LocaleDateFormats = 0;
    }
    if (VersionString)
      CFRelease(VersionString);
    if (v8)
      CFRelease(v8);
    if (v9)
      CFRelease(v9);
    v4 = (const __CFDictionary *)__LocaleDateFormats;
    if (!__LocaleDateFormats)
    {
LABEL_15:
      v75 = xmmword_1E16E7A90;
      v76 = *(_OWORD *)&off_1E16E7AA0;
      v77 = xmmword_1E16E7AB0;
      v78 = CFSTR("y");
      *(_OWORD *)values = xmmword_1E16E7A50;
      v72 = *(_OWORD *)&off_1E16E7A60;
      v73 = xmmword_1E16E7A70;
      v74 = *(_OWORD *)&off_1E16E7A80;
      __LocaleDateFormats = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v12 = CFDateFormatterCreate(0, a1, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
      v13 = CFDateFormatterCopyProperty(v12, (CFDateFormatterKey)*MEMORY[0x1E0C9AEC8]);
      v69 = key;
      if (v13 || (v13 = CFDateFormatterCopyProperty(v12, (CFDateFormatterKey)*MEMORY[0x1E0C9AF10])) != 0)
      {
        CFRelease(v13);
        v14 = 0;
      }
      else
      {
        v14 = 1;
      }
      Format = CFDateFormatterGetFormat(v12);
      v70 = (const __CFString *)CFRetain(Format);
      CFRelease(v12);
      v16 = CFDateFormatterCreate(0, a1, kCFDateFormatterMediumStyle, kCFDateFormatterNoStyle);
      v17 = CFDateFormatterGetFormat(v16);
      v18 = (const __CFString *)CFRetain(v17);
      CFRelease(v16);
      v19 = CFArrayCreate(0, (const void **)values, 15, MEMORY[0x1E0C9B378]);
      v20 = (const __CFArray *)MEMORY[0x186DC5A70](0, v19, 0, a1);
      CFRelease(v19);
      Count = CFArrayGetCount(v20);
      if (Count >= 1)
      {
        v22 = Count;
        for (i = 0; i != v22; ++i)
        {
          v24 = (__CFDictionary *)__LocaleDateFormats;
          v25 = *(&off_1E16E79D8 + i);
          ValueAtIndex = CFArrayGetValueAtIndex(v20, i);
          CFDictionarySetValue(v24, v25, ValueAtIndex);
        }
      }
      CFRelease(v20);
      Length = CFStringGetLength(v18);
      MutableCopy = CFStringCreateMutableCopy(0, Length, v18);
      v80.location = 0;
      v80.length = Length;
      v29 = CFStringFindAndReplace(MutableCopy, CFSTR(","), CFSTR(" "), v80, 0);
      v81.location = 0;
      v81.length = Length;
      v30 = CFStringFindAndReplace(MutableCopy, CFSTR("/"), CFSTR(" "), v81, 0) + v29;
      v82.location = 0;
      v82.length = Length;
      v31 = CFStringFindAndReplace(MutableCopy, CFSTR("-"), CFSTR(" "), v82, 0);
      v83.location = 0;
      v83.length = Length;
      if (v30 + v31 + CFStringFindAndReplace(MutableCopy, CFSTR("  "), CFSTR(" "), v83, 0) < 1)
      {
        CFRetain(v18);
        Copy = v18;
      }
      else
      {
        Copy = CFStringCreateCopy(0, MutableCopy);
      }
      CFRelease(MutableCopy);
      CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("UIAbbreviatedDateFormatWithoutCommas"), Copy);
      CFRelease(Copy);
      key = v69;
      v33 = v70;
      if (v14)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("UINoAMPMTimeFormat"), v70);
        Value = CFDictionaryGetValue((CFDictionaryRef)__LocaleDateFormats, CFSTR("UIMinutelessTimeFormat"));
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("UIHourFormat"), Value);
      }
      else
      {
        v35 = _StripAMPMAndCopy(v70);
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("UINoAMPMTimeFormat"), v35);
        CFRelease(v35);
        v36 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)__LocaleDateFormats, CFSTR("UIMinutelessTimeFormat"));
        v37 = _StripAMPMAndCopy(v36);
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("UIHourFormat"), v37);
        CFRelease(v37);
      }
      CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("UINotesFormatWithYear"), v18);
      v38 = MEMORY[0x186DC5BB4](a1);
      v39 = _UIKitBundle();
      v40 = (void *)objc_msgSend(v39, "pathForResource:ofType:inDirectory:", v38, CFSTR("plist"), CFSTR("DateFormats"));
      if (!v40)
      {
        v64 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 4);
        objc_msgSend(v64, "setObject:forKey:", CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]), *MEMORY[0x1E0C997E8]);
        v65 = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
        if (v65)
          objc_msgSend(v64, "setObject:forKey:", v65, *MEMORY[0x1E0C99820]);
        v66 = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
        v67 = (_QWORD *)MEMORY[0x1E0C997B0];
        if (v66)
          objc_msgSend(v64, "setObject:forKey:", v66, *MEMORY[0x1E0C997B0]);
        v68 = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B050]);
        if (v68)
          objc_msgSend(v64, "setObject:forKey:", v68, CFSTR("calendar"));
        v40 = (void *)objc_msgSend(v39, "pathForResource:ofType:inDirectory:", objc_msgSend(MEMORY[0x1E0C99DC8], "localeIdentifierFromComponents:", v64, v69), CFSTR("plist"), CFSTR("DateFormats"));
        if (v66 && !v40)
        {
          objc_msgSend(v64, "removeObjectForKey:", *v67);
          v40 = (void *)objc_msgSend(v39, "pathForResource:ofType:inDirectory:", objc_msgSend(MEMORY[0x1E0C99DC8], "localeIdentifierFromComponents:", v64), CFSTR("plist"), CFSTR("DateFormats"));
        }
        if (v68)
        {
          v33 = v70;
          if (!v40)
          {
            objc_msgSend(v64, "removeObjectForKey:", CFSTR("calendar"));
            if (v66)
              objc_msgSend(v64, "setObject:forKey:", v66, *v67);
            v40 = (void *)objc_msgSend(v39, "pathForResource:ofType:inDirectory:", objc_msgSend(MEMORY[0x1E0C99DC8], "localeIdentifierFromComponents:", v64), CFSTR("plist"), CFSTR("DateFormats"));
            if (v66 && !v40)
            {
              objc_msgSend(v64, "removeObjectForKey:", *v67);
              v40 = (void *)objc_msgSend(v39, "pathForResource:ofType:inDirectory:", objc_msgSend(MEMORY[0x1E0C99DC8], "localeIdentifierFromComponents:", v64), CFSTR("plist"), CFSTR("DateFormats"));
            }
          }
        }
        else
        {
          v33 = v70;
        }
      }
      v41 = v40;
      v42 = (CFStringRef *)MEMORY[0x1E0C9B228];
      if (v41)
      {
        v43 = v41;
        v44 = (const __CFDictionary *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithContentsOfFile:", v41);
        if (v44)
        {
          v45 = v44;
          CFDictionaryApplyFunction(v44, (CFDictionaryApplierFunction)_AddOverrideToFormatsDictionary, (void *)__LocaleDateFormats);
          CFRelease(v45);
        }
        CFRelease(v43);
      }
      v46 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)__LocaleDateFormats, CFSTR("UIAbbreviatedMonthDayFormat"));
      if (v46)
      {
        v47 = v46;
        v48 = CFStringGetLength(v46);
        v49 = CFStringCreateMutableCopy(0, v48, v47);
        CFStringAppend(v49, CFSTR("   "));
        CFStringAppend(v49, v33);
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("UINotesDisplayFormat"), v49);
        CFRelease(v49);
      }
      v50 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)__LocaleDateFormats, CFSTR("UINotesFormatWithYear"));
      if (v50)
      {
        v51 = v50;
        v52 = CFStringGetLength(v50);
        v53 = CFStringCreateMutableCopy(0, v52, v51);
        CFStringAppend(v53, CFSTR("   "));
        CFStringAppend(v53, v33);
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("UINotesDisplayFormatWithYear"), v53);
        CFRelease(v53);
      }
      CFRelease(v18);
      CFRelease(v33);
      v54 = _CreateVersionString();
      if (v54)
      {
        v55 = v54;
        v56 = *v42;
        v57 = CFPreferencesCopyAppValue(CFSTR("AppleICUForce24HourTime"), *v42);
        if (v57)
        {
          v58 = v57;
          CFDictionaryAddValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("AppleICUForce24HourTime"), v57);
          CFRelease(v58);
        }
        v59 = CFPreferencesCopyAppValue(CFSTR("AppleICUForce12HourTime"), v56);
        if (v59)
        {
          v60 = v59;
          CFDictionaryAddValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("AppleICUForce12HourTime"), v59);
          CFRelease(v60);
        }
        v61 = (__CFDictionary *)__LocaleDateFormats;
        v62 = (const void *)MEMORY[0x186DC5BB4](a1);
        CFDictionaryAddValue(v61, CFSTR("Locale"), v62);
        CFDictionaryAddValue((CFMutableDictionaryRef)__LocaleDateFormats, CFSTR("Version"), v55);
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", __LocaleDateFormats, 200, 0, 0), "writeToFile:options:error:", objc_msgSend((id)CPSharedResourcesDirectory(), "stringByAppendingPathComponent:", CFSTR("Library/Caches/DateFormats.plist")), 1, 0);
        CFRelease(v55);
      }
      v4 = (const __CFDictionary *)__LocaleDateFormats;
    }
  }
  return CFDictionaryGetValue(v4, key);
}

void _RegisterForLocaleChangeNotificationIfNecessary()
{
  __CFNotificationCenter *LocalCenter;

  if ((_RegisterForLocaleChangeNotificationIfNecessary___registeredForLocaleWillChange & 1) == 0)
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)_LocaleWillChangeCallback, CFSTR("kCFLocaleCurrentLocaleDidChangeNotification-2"), 0, CFNotificationSuspensionBehaviorDrop);
    _RegisterForLocaleChangeNotificationIfNecessary___registeredForLocaleWillChange = 1;
  }
}

CFStringRef _CreateVersionString()
{
  uint8_t versionArray[4];
  char versionString[20];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)versionArray = 0;
  ulocdata_getCLDRVersion();
  u_versionToString(versionArray, versionString);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d-%s"), 6, versionString);
}

BOOL _CachedValueIsEqualToExpectedValue(const __CFDictionary *a1, const void *a2, unint64_t a3)
{
  const void *Value;
  unint64_t v5;

  Value = CFDictionaryGetValue(a1, a2);
  v5 = (unint64_t)Value;
  return a3 && Value && CFEqual(Value, (CFTypeRef)a3) || (a3 | v5) == 0;
}

CFStringRef _StripAMPMAndCopy(CFStringRef theString)
{
  CFStringRef Copy;
  CFMutableStringRef MutableCopy;
  CFIndex v3;
  CFIndex v4;
  CFRange v6;
  CFRange v7;
  CFRange v8;

  Copy = theString;
  MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
  v6.length = CFStringGetLength(MutableCopy);
  v6.location = 0;
  v3 = CFStringFindAndReplace(MutableCopy, CFSTR("a "), &stru_1E16EDF20, v6, 0);
  v7.length = CFStringGetLength(MutableCopy);
  v7.location = 0;
  v4 = CFStringFindAndReplace(MutableCopy, CFSTR(" a"), &stru_1E16EDF20, v7, 0) + v3;
  v8.length = CFStringGetLength(MutableCopy);
  v8.location = 0;
  if (v4 + CFStringFindAndReplace(MutableCopy, CFSTR("a"), &stru_1E16EDF20, v8, 0) < 1)
    CFRetain(Copy);
  else
    Copy = CFStringCreateCopy(0, MutableCopy);
  CFRelease(MutableCopy);
  return Copy;
}

void _AddOverrideToFormatsDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

const void *UIDateFormatStringForFormatType(void *a1)
{
  const __CFLocale *v2;
  const void *v3;

  v2 = CFLocaleCopyCurrent();
  v3 = UIDateFormatStringForFormatTypeForLocale(v2, a1);
  CFRelease(v2);
  return v3;
}

void sub_186341BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class __getLNUserActivityHelperClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD81D28)
    qword_1ECD81D28 = _sl_dlopen();
  if (!qword_1ECD81D28)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AppIntentsLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIActivityContinuationManager.m"), 34, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("LNUserActivityHelper");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLNUserActivityHelperClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIActivityContinuationManager.m"), 35, CFSTR("Unable to find class %s"), "LNUserActivityHelper");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1269 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1863448AC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void ___isDraggingSystemConnection_block_invoke()
{
  id v0;

  if (objc_msgSend((id)UIApp, "isFrontBoard"))
  {
    _MergedGlobals_1270 = 1;
  }
  else
  {
    v0 = (id)objc_msgSend((id)_UIDraggingSystemConnectionEntitlement, "copy");
    _MergedGlobals_1270 = UISelfTaskHasEntitlement(v0);

  }
}

id UIDebuggingViewControllerAtTopLevel(void *a1, objc_class *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a1;
  +[UIDebuggingInformationOverlay overlay](UIDebuggingInformationOverlay, "overlay");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "rootTableViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "topLevelViewControllerForName:", v3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v6 = objc_alloc_init(a2);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v5, "addTopLevelViewController:forName:", v6, v3);
      objc_msgSend(v6, "setTitle:", v3);
    }
    else
    {

      v6 = 0;
    }
  }

  return v6;
}

BOOL _UIGetDebuggingOverlayEnabled()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_DebuggingOverlayEnabled,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_DebuggingOverlayEnabled))
  {
    v1 = 0;
  }
  else
  {
    do
    {
      v1 = v0 < v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_DebuggingOverlayEnabled, (uint64_t)CFSTR("DebuggingOverlayEnabled"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_DebuggingOverlayEnabled;
    }
    while (v0 != _UIInternalPreference_DebuggingOverlayEnabled);
  }
  return byte_1ECD769B4 && v1;
}

void registerTouchObserver(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  +[UIDebuggingInformationOverlay overlay](UIDebuggingInformationOverlay, "overlay");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "touchObservers");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v1);

}

void sub_186349350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_18634BAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18634BCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _shortCandidateDescr(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = (void *)MEMORY[0x1E0CB37E8];
  v3 = a1;
  objc_msgSend(v3, "candidate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "numberWithUnsignedInteger:", objc_msgSend(v4, "length"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v3, "input");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "numberWithUnsignedInteger:", objc_msgSend(v7, "length"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringWithFormat:", CFSTR("Predicted %@ characters based on %@ characters"), v5, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id _shortCompletionDescr(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "completion");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _shortCandidateDescr(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

BOOL _outputIsSimpleDeletion(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  _BOOL8 v5;

  v1 = a1;
  objc_msgSend(v1, "insertionText");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "length");

  v5 = !v3
    && !objc_msgSend(v1, "forwardDeletionCount")
    && (objc_msgSend(v1, "acceptedCandidate"), v4 = (void *)objc_claimAutoreleasedReturnValue(), v4, !v4)
    && objc_msgSend(v1, "deletionCount") != 0;

  return v5;
}

void sub_186352824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18635653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_186356A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _UIPFloat(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  float v17;
  double v18;

  v9 = a1;
  +[_UIPrototypingSettingsManager sharedManager](_UIPrototypingSettingsManager, "sharedManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "settingOfType:withName:", 1, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setMinimumValue:", v12);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setMaximumValue:", v13);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setDefaultValue:", v14);

  v15 = -a5;
  if (a5 >= 0.0)
    v15 = a5;
  objc_msgSend(v11, "setStepSize:", v15);
  objc_msgSend(v11, "currentValue");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "floatValue");
  v18 = v17;

  return v18;
}

uint64_t _UIPBool(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = a1;
  +[_UIPrototypingSettingsManager sharedManager](_UIPrototypingSettingsManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "settingOfType:withName:", 2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setDefaultValue:", v6);

  objc_msgSend(v5, "currentValue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "BOOLValue");

  return v8;
}

uint64_t _UIPInt(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v9 = a1;
  +[_UIPrototypingSettingsManager sharedManager](_UIPrototypingSettingsManager, "sharedManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "settingOfType:withName:", 0, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setMinimumValue:", v12);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setMaximumValue:", v13);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setDefaultValue:", v14);

  objc_msgSend(v11, "setStepSize:", (double)a5);
  objc_msgSend(v11, "currentValue");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "integerValue");

  return v16;
}

void sub_186362740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18636748C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_186367710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186367A80(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1863696EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18636BC6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

id _UICatalystFaultLog()
{
  if (qword_1ECD81DA8 != -1)
    dispatch_once(&qword_1ECD81DA8, &__block_literal_global_591);
  return (id)_MergedGlobals_1275;
}

void __UILogSyncCategories()
{
  uint64_t i;
  uint64_t v1;
  int v2;
  void *v3;

  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_1276);
  for (i = qword_1ECD81DB8; i; i = *(_QWORD *)(i + 32))
  {
    v1 = *(_QWORD *)i;
    v2 = *(_DWORD *)(i + 8);
    objc_msgSend(*(id *)(i + 16), "objectForKey:", *(_QWORD *)(i + 24));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    __updateCategoryFlagValueLocked(v1, v2, v3);

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_1276);
}

NSObject *__UILogRegulatoryLog(_BYTE *__s2)
{
  NSObject *v2;

  if (qword_1ECD81DC8 != -1)
    dispatch_once(&qword_1ECD81DC8, &__block_literal_global_592);
  if (!qword_1ECD81DC0)
    return 0;
  v2 = *(NSObject **)(__UILogCategoryGetNode(__s2, qword_1ECD81DC0, (uint64_t (*)(_BYTE *))__UILogRegulatoryCategoryNewNode)- 8);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    return 0;
  return v2;
}

char *__UILogRegulatoryCategoryNewNode(const char *a1)
{
  unint64_t v2;
  char *v4;
  char *v5;

  v2 = (g_UILogCategoriesAllocator_1 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v2 < g_UILogCategoriesAllocator_1 || v2 > 0x26E0)
  {
    v4 = (char *)malloc_type_malloc(0x2800uLL, 0x67DDC7D9uLL);
    v2 = 0;
    qword_1ECD81DD0 = (uint64_t)v4;
  }
  else
  {
    v4 = (char *)qword_1ECD81DD0;
  }
  g_UILogCategoriesAllocator_1 = v2 + 288;
  v5 = &v4[v2];
  *((_QWORD *)v5 + 1) = os_log_create("com.apple.greentea", a1);
  *((_DWORD *)v5 + 1) = 0;
  *v5 = 0;
  return v5 + 16;
}

uint64_t _UIApplicationHasAppLinkEntitlements()
{
  if (qword_1ECD81DE8 != -1)
    dispatch_once(&qword_1ECD81DE8, &__block_literal_global_593);
  return _MergedGlobals_1277;
}

id _UIAppLinkForURL(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  NSObject *v4;
  id v5;
  _QWORD v7[4];
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__219;
  v14 = __Block_byref_object_dispose__219;
  v15 = 0;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0CA5838];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___UIAppLinkForURL_block_invoke;
  v7[3] = &unk_1E16E7FB0;
  v9 = &v10;
  v4 = v2;
  v8 = v4;
  objc_msgSend(v3, "getAppLinkWithURL:completionHandler:", v1, v7);
  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  v5 = (id)v11[5];

  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_18636D59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double *currentUpdateInfo()
{
  double *v0;

  if (off_1ECD75C00 && *((_DWORD *)off_1ECD75C00 + 160) == 1)
    v0 = -[UIUpdateInfo initWithUpdateParameters:]([UIUpdateInfo alloc], (uint64_t)off_1ECD75C00 + 648);
  else
    v0 = 0;
  return v0;
}

double _UIClassicControllerScaleFactorForZoomedIn(double a1, double a2)
{
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  CGRect v15;
  CGRect v16;

  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_unjailedReferenceBounds");
  v6 = v5;
  v8 = v7;

  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6 / a1 <= v8 / a2)
    v11 = v6 / a1;
  else
    v11 = v8 / a2;
  _UIAdditionalScaleFactorForClassicPresentationWithHomeAffordance(v9);
  v13 = v11 * v12;

  v15.origin.y = v8 + -72.0;
  v16.size.width = a1 * v13;
  v16.size.height = a2 * v13;
  v16.origin.y = round(v8 * 0.5 - a2 * v13 * 0.5);
  v16.origin.x = round(v6 * 0.5 - a1 * v13 * 0.5);
  v15.size.width = 72.0;
  v15.origin.x = 0.0;
  v15.size.height = 72.0;
  if (CGRectIntersectsRect(v15, v16))
  {
    if ((v6 + -144.0) / a1 <= (v8 + -144.0) / a2)
      return (v6 + -144.0) / a1;
    else
      return (v8 + -144.0) / a2;
  }
  return v13;
}

double _UIClassicControllerStatusBarInsetsForPadOnRoundedPad(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v3 = a1;
  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "userInterfaceIdiom");

  if ((v5 & 0xFFFFFFFFFFFFFFFBLL) == 1
    && !UIApplicationSceneClassicModeExpectsRoundedCorners(a2)
    && UIApplicationSceneClassicModeRepresentsPad(a2))
  {
    objc_msgSend(v3, "_displayCornerRadius");
    v6 = 0.0;
    if (v7 > 0.0)
    {
      +[UIStatusBar _roundedPadEdgeInsets](UIStatusBar, "_roundedPadEdgeInsets");
      +[UIStatusBar _regularPadEdgeInsets](UIStatusBar, "_regularPadEdgeInsets");
      +[UIStatusBar _regularPadBaselineOffset](UIStatusBar, "_regularPadBaselineOffset");
      v9 = v8;
      +[UIStatusBar _roundedPadBaselineOffset](UIStatusBar, "_roundedPadBaselineOffset");
      v6 = v9 - v10;
    }
  }
  else
  {
    v6 = 0.0;
  }

  return v6;
}

id UIArrayByKeepingObjectsInSet(void *a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v3 = a1;
  v16 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a1, "count"))
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a2, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v3);
          v9 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (objc_msgSend(a2, "containsObject:", v9))
            objc_msgSend(v4, "addObject:", v9);
        }
        v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }
    return v4;
  }
  return v3;
}

void sub_18636EE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___configureDefaultStatisticHandling_block_invoke_17(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___configureDefaultStatisticHandling_block_invoke_2_19(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id _buttonTapStatisticWithSuffix_UIButton()
{
  return +[_UIStatistics controlTapCountWithCategory:suffix:](_UIStatistics, "controlTapCountWithCategory:suffix:", CFSTR("button"), CFSTR("UIButton"));
}

id _buttonTapStatisticWithSuffix_SubclassName()
{
  objc_class *v0;
  void *v1;
  void *v2;

  v0 = (objc_class *)objc_opt_class();
  NSStringFromClass(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UIStatistics controlTapCountWithCategory:suffix:](_UIStatistics, "controlTapCountWithCategory:suffix:", CFSTR("button"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _controlTapStatisticWithSuffix_SubclassName()
{
  objc_class *v0;
  void *v1;
  void *v2;

  v0 = (objc_class *)objc_opt_class();
  NSStringFromClass(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UIStatistics controlTapCountWithCategory:suffix:](_UIStatistics, "controlTapCountWithCategory:suffix:", CFSTR("control"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _controlValueChangeStatisticWithSuffix_SubclassName()
{
  objc_class *v0;
  void *v1;
  void *v2;

  v0 = (objc_class *)objc_opt_class();
  NSStringFromClass(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UIStatistics controlValueChangeEmittedCountWithCategory:suffix:](_UIStatistics, "controlValueChangeEmittedCountWithCategory:suffix:", CFSTR("control"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _sliderInteractionDurationStatisticWithSuffix_SubclassName()
{
  objc_class *v0;
  void *v1;
  void *v2;

  v0 = (objc_class *)objc_opt_class();
  NSStringFromClass(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UIStatistics controlInteractionDurationDistributionWithCategory:suffix:](_UIStatistics, "controlInteractionDurationDistributionWithCategory:suffix:", CFSTR("slider"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void _UIFocusSystemAssertIfNotSafari()
{
  void *v0;
  id v1;

  if (qword_1ECD81E08 != -1)
    dispatch_once(&qword_1ECD81E08, &__block_literal_global_594);
  if (!_MergedGlobals_1279)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v1 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIFocusSystemAssertIfNotSafari(void)");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("UIFocusSystem_SafariOnly.m"), 30, CFSTR("You are calling out to a method prefixed with '_safari_' but it looks like you are not Safari. I mean... what did you expect to happen?"));

  }
}

void UIKVCAccessProhibited(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((dyld_program_sdk_at_least() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Access to %@'s %@ ivar is prohibited. This is an application bug"), a2, a1);
  }
  else if (os_variant_has_internal_diagnostics())
  {
    if (qword_1ECD81E20 != -1)
      dispatch_once(&qword_1ECD81E20, &__block_literal_global_595);
    v6 = qword_1ECD81E18;
    if (os_log_type_enabled((os_log_t)qword_1ECD81E18, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412546;
      v8 = a2;
      v9 = 2112;
      v10 = a1;
      _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Access to %@'s %@ ivar is prohibited. This is an application bug and will become a hard crash in a future release", buf, 0x16u);
    }
  }
  else
  {
    v4 = _MergedGlobals_1280;
    if (!_MergedGlobals_1280)
    {
      v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v4, (unint64_t *)&_MergedGlobals_1280);
    }
    v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v8 = a2;
      v9 = 2112;
      v10 = a1;
      _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "Access to %@'s %@ ivar is prohibited. This is an application bug and will become a hard crash in a future release", buf, 0x16u);
    }
  }
}

uint64_t __UIFaultDebugAssertLog()
{
  if (qword_1ECD81E20 != -1)
    dispatch_once(&qword_1ECD81E20, &__block_literal_global_595);
  return qword_1ECD81E18;
}

const __CFString *_UIDebugFocusRelationshipBetween(uint64_t a1, uint64_t a2)
{
  return _UIDebugRelationshipBetween(a1, a2, (uint64_t (*)(uint64_t))RELATIONSHIP_FOCUS);
}

const __CFString *_UIDebugRelationshipBetween(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  void *v8;
  BOOL v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  objc_class *v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  objc_class *v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  const __CFString *v27;
  void *v28;
  objc_class *v29;
  const __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t j;
  uint64_t v35;
  const __CFString *v36;
  void *v37;
  objc_class *v38;
  const __CFString *v39;
  id obj;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = CFSTR("One of the objects is nil.");
  if (!a1)
    return v3;
  v4 = a2;
  if (!a2)
    return v3;
  v5 = a1;
  if (a1 == a2)
    return CFSTR("Both specified objects are the same");
  v7 = (void *)objc_opt_new();
  v8 = (void *)objc_opt_new();
  v42 = (void *)objc_opt_new();
  v9 = 1;
  v10 = 1;
  v3 = CFSTR("No relationship found between the objects.");
  while (!v10)
  {
    v5 = 0;
    if (v9)
      goto LABEL_10;
LABEL_8:
    v4 = 0;
LABEL_12:
    v10 = v5 != 0;
    v9 = v4 != 0;
    if (!(v5 | v4))
      return v3;
  }
  objc_msgSend(v8, "addObject:", v5);
  if (objc_msgSend(v7, "containsObject:", v5))
  {
    v42 = (void *)objc_msgSend(v42, "subarrayWithRange:", 0, objc_msgSend(v42, "indexOfObject:", v5) + 1);
    goto LABEL_17;
  }
  objc_msgSend(v7, "addObject:", v5);
  v5 = a3(v5);
  if (!v9)
    goto LABEL_8;
LABEL_10:
  objc_msgSend(v42, "addObject:", v4);
  if (!objc_msgSend(v7, "containsObject:", v4))
  {
    objc_msgSend(v7, "addObject:", v4);
    v4 = a3(v4);
    goto LABEL_12;
  }
  v8 = (void *)objc_msgSend(v8, "subarrayWithRange:", 0, objc_msgSend(v8, "indexOfObject:", v4) + 1);
LABEL_17:
  v11 = (void *)MEMORY[0x1E0CB37A0];
  v12 = objc_msgSend(v8, "firstObject");
  if (v12)
  {
    v13 = v12;
    v14 = (void *)MEMORY[0x1E0CB3940];
    v15 = (objc_class *)objc_opt_class();
    v16 = (const __CFString *)objc_msgSend(v14, "stringWithFormat:", CFSTR("<%@: %p>"), NSStringFromClass(v15), v13);
  }
  else
  {
    v16 = CFSTR("(nil)");
  }
  v17 = objc_msgSend(v42, "firstObject");
  if (v17)
  {
    v18 = v17;
    v19 = (void *)MEMORY[0x1E0CB3940];
    v20 = (objc_class *)objc_opt_class();
    v21 = (const __CFString *)objc_msgSend(v19, "stringWithFormat:", CFSTR("<%@: %p>"), NSStringFromClass(v20), v18);
  }
  else
  {
    v21 = CFSTR("(nil)");
  }
  v3 = (__CFString *)objc_msgSend(v11, "stringWithFormat:", CFSTR("To get from %@ to %@"), v16, v21);
  if ((unint64_t)objc_msgSend(v8, "count") >= 2)
  {
    -[__CFString appendString:](v3, "appendString:", CFSTR(" follow the parent hierarchy up\n"));
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v22 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v48;
      do
      {
        for (i = 0; i != v23; ++i)
        {
          if (*(_QWORD *)v48 != v24)
            objc_enumerationMutation(v8);
          v26 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * i);
          if (v26 == objc_msgSend(v8, "firstObject"))
            v27 = CFSTR("from ");
          else
            v27 = CFSTR("  -> ");
          if (v26)
          {
            v28 = (void *)MEMORY[0x1E0CB3940];
            v29 = (objc_class *)objc_opt_class();
            v30 = (const __CFString *)objc_msgSend(v28, "stringWithFormat:", CFSTR("<%@: %p>"), NSStringFromClass(v29), v26);
          }
          else
          {
            v30 = CFSTR("(nil)");
          }
          -[__CFString appendFormat:](v3, "appendFormat:", CFSTR("%@%@\n"), v27, v30);
        }
        v23 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
      }
      while (v23);
    }
  }
  if ((unint64_t)objc_msgSend(v8, "count") >= 2 && (unint64_t)objc_msgSend(v42, "count") >= 2)
    -[__CFString appendString:](v3, "appendString:", CFSTR("and then"));
  if ((unint64_t)objc_msgSend(v42, "count") >= 2)
  {
    -[__CFString appendString:](v3, "appendString:", CFSTR(" follow the child hierarchy down\n"));
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    obj = (id)objc_msgSend(v42, "reverseObjectEnumerator");
    v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)v44;
      do
      {
        for (j = 0; j != v32; ++j)
        {
          if (*(_QWORD *)v44 != v33)
            objc_enumerationMutation(obj);
          v35 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * j);
          if (v35 == objc_msgSend(v42, "lastObject"))
            v36 = CFSTR("from ");
          else
            v36 = CFSTR("  -> ");
          if (v35)
          {
            v37 = (void *)MEMORY[0x1E0CB3940];
            v38 = (objc_class *)objc_opt_class();
            v39 = (const __CFString *)objc_msgSend(v37, "stringWithFormat:", CFSTR("<%@: %p>"), NSStringFromClass(v38), v35);
          }
          else
          {
            v39 = CFSTR("(nil)");
          }
          -[__CFString appendFormat:](v3, "appendFormat:", CFSTR("%@%@\n"), v36, v39);
        }
        v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
      }
      while (v32);
    }
  }
  return v3;
}

uint64_t RELATIONSHIP_FOCUS(void *a1)
{
  if (objc_msgSend(a1, "conformsToProtocol:", &unk_1EDDD4840))
    return objc_msgSend(a1, "parentFocusEnvironment");
  else
    return 0;
}

const __CFString *_UIDebugViewAndViewControllerRelationshipBetween(uint64_t a1, uint64_t a2)
{
  return _UIDebugRelationshipBetween(a1, a2, (uint64_t (*)(uint64_t))RELATIONSHIP_VIEW_AND_VIEWCONTROLLER);
}

id RELATIONSHIP_VIEW_AND_VIEWCONTROLLER(void *a1)
{
  id result;

  if (_IsKindOfUIView((uint64_t)a1))
  {
    result = +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", a1);
    if (!result)
      return (id)objc_msgSend(a1, "superview");
  }
  else if (objc_msgSend(a1, "__isKindOfUIViewController"))
  {
    result = (id)objc_msgSend(a1, "parentViewController");
    if (!result)
      return (id)objc_msgSend(a1, "presentingViewController");
  }
  else
  {
    return 0;
  }
  return result;
}

const __CFString *_UIDebugObjectTypeDescription(const char *a1)
{
  unsigned int v2;
  const __CFString *result;
  __CFString *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  id v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  const __CFString *v17;
  uint64_t v18;

  if (!strcmp(a1, "@"))
    return CFSTR("id");
  if (!strcmp(a1, "v"))
    return CFSTR("void");
  if (!strcmp(a1, "^v"))
    return CFSTR("void*");
  if (!strcmp(a1, ":"))
    return CFSTR("SEL");
  if (!strcmp(a1, "B"))
    return CFSTR("BOOL");
  if (!strcmp(a1, "c"))
    return CFSTR("char");
  if (!strcmp(a1, "i"))
    return CFSTR("int");
  if (!strcmp(a1, "s"))
    return CFSTR("short");
  if (!strcmp(a1, "q"))
    return CFSTR("long");
  if (!strcmp(a1, "C"))
    return CFSTR("unsigned char");
  if (!strcmp(a1, "I"))
    return CFSTR("unsigned int");
  if (!strcmp(a1, "S"))
    return CFSTR("unsigned short");
  if (!strcmp(a1, "Q"))
    return CFSTR("unsigned long");
  if (!strcmp(a1, "f"))
    return CFSTR("float");
  if (!strcmp(a1, "d"))
    return CFSTR("double");
  if (!strcmp(a1, "*"))
    return CFSTR("char*");
  if (!strcmp(a1, "#"))
    return CFSTR("Class");
  if (!strcmp(a1, "@?"))
    return CFSTR("^block");
  v2 = *(unsigned __int8 *)a1;
  if (v2 <= 0x5A)
  {
    if (v2 != 40)
    {
      if (v2 == 64 && strlen(a1) >= 4)
        return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@*"), (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", a1 + 2, strlen(a1) - 3, 1), v18);
      goto LABEL_59;
    }
    goto LABEL_46;
  }
  if (v2 != 91)
  {
    if (v2 == 94)
    {
      if (strlen(a1) > 1)
        return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@*"), _UIDebugObjectTypeDescription(a1 + 1), v18);
      goto LABEL_59;
    }
    if (v2 != 123)
      goto LABEL_59;
LABEL_46:
    if (strlen(a1) >= 4)
    {
      v4 = (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", a1 + 1, strlen(a1) - 2, 1);
      v5 = (void *)-[__CFString componentsSeparatedByString:](v4, "componentsSeparatedByString:", CFSTR("="));
      v6 = objc_msgSend(v5, "count");
      result = v4;
      if (v6 >= 2)
      {
        v7 = objc_msgSend(v5, "objectAtIndex:", 0);
        if (*a1 == 123)
          v8 = CFSTR("struct");
        else
          v8 = CFSTR("union");
        return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v8, v7);
      }
      return result;
    }
LABEL_59:
    if (strlen(a1) >= 2)
    {
      if (*(unsigned __int8 *)a1 <= 0x6Du)
      {
        switch(*a1)
        {
          case 'N':
            v17 = CFSTR("inout");
            return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v17, _UIDebugObjectTypeDescription(a1 + 1));
          case 'O':
            v17 = CFSTR("bycopy");
            return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v17, _UIDebugObjectTypeDescription(a1 + 1));
          case 'R':
            v17 = CFSTR("byref");
            return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v17, _UIDebugObjectTypeDescription(a1 + 1));
          case 'V':
            v17 = CFSTR("oneway");
            return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v17, _UIDebugObjectTypeDescription(a1 + 1));
          default:
            return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), a1, v18);
        }
      }
      switch(v2)
      {
        case 'r':
          v17 = CFSTR("const");
          return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v17, _UIDebugObjectTypeDescription(a1 + 1));
        case 'o':
          v17 = CFSTR("out");
          return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v17, _UIDebugObjectTypeDescription(a1 + 1));
        case 'n':
          v17 = CFSTR("in");
          return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v17, _UIDebugObjectTypeDescription(a1 + 1));
      }
    }
    return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), a1, v18);
  }
  v9 = strlen(a1);
  if (v9 < 4)
    goto LABEL_59;
  v10 = 1;
  v11 = (char *)malloc_type_calloc(1uLL, v9 + 1, 0x882DBFAFuLL);
  do
    v12 = a1[v10++] - 48;
  while (v12 < 0xA);
  v13 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", a1 + 1, v10 - 2, 1);
  v14 = strlen(a1);
  v15 = strncpy(v11, &a1[v10 - 1], v14 - v10);
  v16 = _UIDebugObjectTypeDescription(v15);
  free(v11);
  return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@[%@]"), v16, v13);
}

__CFString *_UIDebugIvarValue(__CFString *a1, char *__s, int a3)
{
  size_t v6;
  const char *v7;
  char *v8;
  char v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  void *v14;
  const __CFString *v15;
  double v16;
  __CFString *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  const __CFString *v22;
  void *v23;
  const __CFString *v24;
  uint64_t v25;
  const __CFString *v26;
  void *isa;
  const __CFString *v29;
  uint64_t v30;
  const __CFString *v31;
  NSRange v32;
  NSPoint v33;
  NSSize v34;
  NSRect v35;
  UIEdgeInsets v36;

  v6 = strlen(__s);
  v7 = (const char *)malloc_type_calloc(v6 + 1, 1uLL, 0xA9C2E514uLL);
  v8 = (char *)v7;
  v9 = 0;
  v10 = __s;
  v11 = (char *)v7;
  while (1)
  {
    v12 = *v10;
    if (v12 == 34)
    {
      v9 ^= 1u;
      goto LABEL_8;
    }
    if (!*v10)
      break;
    if ((v9 & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      v9 = 0;
      *v11++ = v12;
    }
LABEL_8:
    ++v10;
  }
  v13 = *__s;
  if (v13 != 64)
  {
    if (!strcmp(v7, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", a1, __s), "CGRectValue");
      v17 = (__CFString *)NSStringFromRect(v35);
      goto LABEL_48;
    }
    if (!strcmp(v8, "{CGPoint=dd}"))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", a1, __s), "CGPointValue");
      v17 = (__CFString *)NSStringFromPoint(v33);
      goto LABEL_48;
    }
    if (!strcmp(v8, "{CGSize=dd}"))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", a1, __s), "CGSizeValue");
      v17 = (__CFString *)NSStringFromSize(v34);
      goto LABEL_48;
    }
    if (!strcmp(v8, "{_NSRange=QQ}"))
    {
      v32.location = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", a1, __s), "rangeValue");
      v17 = (__CFString *)NSStringFromRange(v32);
      goto LABEL_48;
    }
    if (!strcmp(v8, "{UIEdgeInsets=dddd}"))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", a1, __s), "UIEdgeInsetsValue");
      v17 = (__CFString *)NSStringFromUIEdgeInsets(v36);
      goto LABEL_48;
    }
    if (!strcmp(v8, "^v"))
    {
      v14 = (void *)MEMORY[0x1E0CB3940];
      isa = a1->isa;
LABEL_12:
      v15 = CFSTR("%p");
LABEL_47:
      v17 = (__CFString *)objc_msgSend(v14, "stringWithFormat:", v15, isa, v29, v30, v31);
      goto LABEL_48;
    }
    if (v13 > 80)
    {
      switch(v13)
      {
        case '^':
          v14 = (void *)MEMORY[0x1E0CB3940];
          if (a3)
            goto LABEL_11;
          v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%p -> %p"), a1, a1->isa, v30, v31);
          goto LABEL_48;
        case '_':
        case 'a':
        case 'e':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
          goto LABEL_74;
        case 'b':
          a1 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%i (?)"), (uint64_t)a1->isa & ~(-1 << atoi(__s + 1)));
          if (!a1)
            goto LABEL_74;
          goto LABEL_49;
        case 'c':
          v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithChar:", SLOBYTE(a1->isa));
          goto LABEL_48;
        case 'd':
          v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&a1->isa);
          goto LABEL_48;
        case 'f':
          LODWORD(v16) = a1->isa;
          v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v16);
          goto LABEL_48;
        case 'i':
          v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", LODWORD(a1->isa));
          goto LABEL_48;
        case 'l':
          v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a1->isa);
          goto LABEL_48;
        case 'q':
          v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a1->isa);
          goto LABEL_48;
        default:
          if (v13 == 81)
          {
            v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a1->isa);
            goto LABEL_48;
          }
          if (v13 != 123)
            goto LABEL_74;
          break;
      }
      goto LABEL_64;
    }
    if (v13 > 65)
    {
      switch(v13)
      {
        case 'B':
          if (LOBYTE(a1->isa))
            a1 = CFSTR("YES");
          else
            a1 = CFSTR("NO");
          goto LABEL_49;
        case 'I':
          v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", LODWORD(a1->isa));
          goto LABEL_48;
        case 'L':
          v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a1->isa);
          goto LABEL_48;
      }
    }
    else
    {
      switch(v13)
      {
        case '#':
          if (!a3)
            goto LABEL_49;
          goto LABEL_67;
        case '(':
LABEL_64:
          if ((a3 & 1) == 0)
          {
            v17 = (__CFString *)_UIKitStructDescription(a1, __s);
            goto LABEL_48;
          }
          a1 = CFSTR("unknown");
          goto LABEL_49;
        case ':':
          if (!a3)
          {
            v17 = (__CFString *)NSStringFromSelector((SEL)a1->isa);
            goto LABEL_48;
          }
LABEL_67:
          v14 = (void *)MEMORY[0x1E0CB3940];
LABEL_11:
          isa = a1;
          goto LABEL_12;
      }
    }
LABEL_74:
    v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Value not representable, %s"), v8, v29, v30, v31);
    goto LABEL_48;
  }
  a1 = (__CFString *)a1->isa;
  v14 = (void *)MEMORY[0x1E0CB3940];
  if (a3)
    goto LABEL_11;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("@\"%@\""), a1, v29, v30, v31);
    goto LABEL_48;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("@%@"), a1, v29, v30, v31);
      goto LABEL_48;
    }
    if (a1)
    {
      v17 = (__CFString *)((uint64_t (*)(__CFString *, char *))objc_msgSend(MEMORY[0x1E0DE7910], "instanceMethodForSelector:", sel_description))(a1, sel_description);
      goto LABEL_48;
    }
    a1 = CFSTR("nil");
    goto LABEL_49;
  }
  v18 = (id)MEMORY[0x186DC87E8](a1);
  v19 = (id)_CFURLPromiseCopyPhysicalURL();
  v20 = (id)MEMORY[0x186DC87E8]();
  if (v19)
  {
    v21 = v20;
    if ((objc_msgSend(v19, "isEqual:", a1) & 1) == 0)
    {
      v23 = (void *)MEMORY[0x1E0CB3940];
      if (v18)
        v24 = CFSTR("s");
      else
        v24 = CFSTR("n");
      v25 = objc_msgSend(v19, "lastPathComponent");
      if (v21)
        v26 = CFSTR("s");
      else
        v26 = CFSTR("n");
      v30 = v25;
      v31 = v26;
      isa = a1;
      v29 = v24;
      v15 = CFSTR("%@, %@ -> %@, %@");
      v14 = v23;
      goto LABEL_47;
    }
  }
  v22 = CFSTR("s");
  if (!v18)
    v22 = CFSTR("n");
  v17 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@, %@"), a1, v22, v30, v31);
LABEL_48:
  a1 = v17;
LABEL_49:
  free(v8);
  return a1;
}

void *_UIKitStructDescription(_DWORD *a1, char *__s1)
{
  char *v4;
  int v5;
  const __CFString *v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  BOOL v23;
  uint64_t v24;
  NSUInteger v25;
  const __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  NSUInteger v29;
  uint64_t v30;
  const __CFString *v31;
  char *v33;
  NSUInteger alignp;
  NSUInteger sizep;

  v4 = strdup(__s1);
  v5 = *__s1;
  v6 = CFSTR("{");
  if (v5 == 40)
    v6 = CFSTR("(values are interpreted) (");
  v33 = v4;
  v7 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("%@\n"), v6);
  v4[strlen(v4) - 1] = 0;
  do
    v8 = *v4++;
  while (v8 != 61);
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v9 = 0;
  do
  {
    while (1)
    {
      v10 = (uint64_t)(*v4 == 34 ? v4 + 1 : v4);
      v11 = v10 + 3;
      v12 = (char *)v10;
      do
      {
        v13 = (char *)v11;
        v14 = *v12++;
        ++v11;
      }
      while (v14 != 34);
      v15 = 0;
      *(v12 - 1) = 0;
      v16 = v12;
      do
      {
        v4 = v13;
        v17 = *v16;
        if (v17 == 40 || v17 == 123 || v17 == 91)
          ++v15;
        if (v17 == 41 || v17 == 125 || v17 == 93)
          --v15;
        ++v16;
        v13 = v4 + 1;
      }
      while (v15 > 0);
      while (*(v4 - 1))
      {
        if (*(v4 - 1) == 34)
        {
          *(v4 - 1) = 0;
          goto LABEL_27;
        }
        ++v4;
      }
      v4 = 0;
LABEL_27:
      if (*v12 != 98)
        break;
      v18 = atoi(v12 + 1);
      v19 = v18;
      if ((unint64_t)(v9 + v18) <= 0x20)
      {
        v20 = 0;
      }
      else
      {
        v9 = 0;
        v20 = 4 * (v5 != 40);
      }
      a1 = (_DWORD *)((char *)a1 + v20);
      v21 = (*a1 >> v9) & ~(-1 << v18);
      if (v18 == 1)
      {
        v23 = (_DWORD)v21 == 0;
        v22 = CFSTR("YES");
        if (v23)
          v22 = CFSTR("NO");
        objc_msgSend(v7, "appendFormat:", CFSTR("\t\t%s (%s): %@\n"), v10, v12, v22);
      }
      else
      {
        objc_msgSend(v7, "appendFormat:", CFSTR("\t\t%s (%s): %u\n"), v10, v12, v21);
      }
      v30 = v19;
      if (v5 == 40)
        v30 = 0;
      v9 += v30;
      if (!v4)
        goto LABEL_49;
    }
    alignp = 0;
    sizep = 0;
    NSGetSizeAndAlignment(v12, &sizep, &alignp);
    if (v9)
      v23 = v5 == 40;
    else
      v23 = 1;
    v24 = !v23;
    v25 = alignp;
    v26 = _UIDebugObjectTypeDescription(v12);
    v27 = (uint64_t)&a1[v24 - 1] + v25 + 3;
    v28 = v27 & -(uint64_t)v25;
    objc_msgSend(v7, "appendFormat:", CFSTR("\t\t%s (%@): %@\n"), v10, v26, _UIDebugIvarValue(v27 & -(int)v25, v12));
    v9 = 0;
    v29 = sizep;
    if (v5 == 40)
      v29 = 0;
    a1 = (_DWORD *)(v28 + v29);
  }
  while (v4);
LABEL_49:
  v31 = CFSTR("}");
  if (v5 == 40)
    v31 = CFSTR(")");
  objc_msgSend(v7, "appendFormat:", CFSTR("\t%@"), v31);
  free(v33);
  return v7;
}

void sub_186371940(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x186371914);
  }
  free(a12);
  objc_exception_rethrow();
}

void sub_186371980(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void *_UIKitPropertyDescription(objc_property *a1)
{
  void *v2;
  void *v3;
  objc_property_attribute_t *v4;
  unint64_t v5;
  const char **p_value;
  const char *v7;
  const char *v8;
  void *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  objc_property_attribute_t *v15;
  objc_property *property;
  uint64_t v17;
  const __CFString *v18;
  unsigned int outCount;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("@property "));
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  outCount = 0;
  v4 = property_copyAttributeList(a1, &outCount);
  v15 = v4;
  property = a1;
  if (outCount)
  {
    v5 = 0;
    v17 = 0;
    v18 = 0;
    v14 = 0;
    p_value = &v4->value;
    while (1)
    {
      v8 = *(p_value - 1);
      v7 = *p_value;
      if (!strcmp(v8, "R"))
      {
        v9 = v3;
        v10 = CFSTR("readonly");
      }
      else if (!strcmp(v8, "C"))
      {
        v9 = v3;
        v10 = CFSTR("copy");
      }
      else if (!strcmp(v8, "&"))
      {
        v9 = v3;
        v10 = CFSTR("retain");
      }
      else if (!strcmp(v8, "N"))
      {
        v9 = v3;
        v10 = CFSTR("nonatomic");
      }
      else
      {
        if (!strcmp(v8, "G"))
        {
          v11 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("getter=%s"), v7);
LABEL_20:
          v10 = (const __CFString *)v11;
          v9 = v3;
          goto LABEL_21;
        }
        if (!strcmp(v8, "S"))
        {
          v11 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("setter=%s"), v7);
          goto LABEL_20;
        }
        if (!strcmp(v8, "D"))
        {
          v14 = 1;
          goto LABEL_22;
        }
        if (strcmp(v8, "W"))
        {
          if (!strcmp(v8, "T"))
          {
            v18 = _UIDebugObjectTypeDescription(v7);
          }
          else if (!strcmp(v8, "V"))
          {
            v17 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
          }
          goto LABEL_22;
        }
        v9 = v3;
        v10 = CFSTR("weak");
      }
LABEL_21:
      objc_msgSend(v9, "addObject:", v10);
LABEL_22:
      ++v5;
      p_value += 2;
      if (v5 >= outCount)
        goto LABEL_28;
    }
  }
  v14 = 0;
  v17 = 0;
  v18 = 0;
LABEL_28:
  free(v15);
  if (objc_msgSend(v3, "count"))
    objc_msgSend(v2, "appendFormat:", CFSTR("(%@) "), objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", ")));
  objc_msgSend(v2, "appendFormat:", CFSTR("%@ %s;"), v18, property_getName(property));
  if (v17)
  {
    objc_msgSend(v2, "appendFormat:", CFSTR("  (@synthesize %s = %@;)"), property_getName(property), v17);
  }
  else if ((v14 & 1) != 0)
  {
    objc_msgSend(v2, "appendFormat:", CFSTR("  (@dynamic %s;)"), property_getName(property), v13);
  }
  return v2;
}

void *_UIKitMethodDescription(objc_method *a1, int a2)
{
  const __CFString *v3;
  void *v4;
  char *v5;
  const char *Name;
  NSArray *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  char *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[7];
  _QWORD v21[3];
  char v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a2)
    v3 = CFSTR("-");
  else
    v3 = CFSTR("+");
  v4 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", v3);
  v5 = method_copyReturnType(a1);
  objc_msgSend(v4, "appendFormat:", CFSTR(" (%@)"), _UIDebugObjectTypeDescription(v5));
  free(v5);
  Name = method_getName(a1);
  v7 = -[NSString componentsSeparatedByString:](NSStringFromSelector(Name), "componentsSeparatedByString:", CFSTR(":"));
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  v22 = 0;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___UIKitMethodComponents_block_invoke;
  v20[3] = &unk_1E16E8070;
  v20[5] = CFSTR(":");
  v20[6] = v21;
  v20[4] = v8;
  -[NSArray enumerateObjectsUsingBlock:](v7, "enumerateObjectsUsingBlock:", v20);
  _Block_object_dispose(v21, 8);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v23, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v17;
    v11 = 2;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v4, "appendFormat:", CFSTR(" %@"), v13);
        if (objc_msgSend(v13, "hasSuffix:", CFSTR(":")))
        {
          v14 = method_copyArgumentType(a1, (int)v11 + (int)i);
          objc_msgSend(v4, "appendFormat:", CFSTR("(%@)arg%ld"), _UIDebugObjectTypeDescription(v14), v11 + i - 1);
          free(v14);
        }
      }
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v23, 16);
      v11 += i;
    }
    while (v9);
  }
  objc_msgSend(v4, "appendFormat:", CFSTR("; (%p)"), method_getImplementation(a1));
  return v4;
}

void sub_186372470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void _UIViewRecursivelyRemoveDebugColorBoundsViews(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  objc_msgSend(a1, "subviews", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v8;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v1);
        v6 = *(_QWORD **)(*((_QWORD *)&v7 + 1) + 8 * v5);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v6, "removeFromSuperview");
        }
        else
        {
          _UIViewRecursivelyRemoveDebugColorBoundsViews(v6);
          v6[14] &= ~0x8000000000000uLL;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v3);
  }

}

void _UIViewRecursivelySetNeedsLayout(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "setNeedsLayout");
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  objc_msgSend(v1, "subviews", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        _UIViewRecursivelySetNeedsLayout(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_186374D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  id v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;

  if (a2 == 1)
  {
    v9 = objc_begin_catch(exception_object);
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      {
        LODWORD(a9) = 138412290;
        *(_QWORD *)((char *)&a9 + 4) = v9;
        _os_log_fault_impl(&dword_185066000, v12, OS_LOG_TYPE_FAULT, "Exception: %@", (uint8_t *)&a9, 0xCu);
      }

    }
    else
    {
      v10 = appendKey____s_category;
      if (!appendKey____s_category)
      {
        v10 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v10, (unint64_t *)&appendKey____s_category);
      }
      v11 = *(NSObject **)(v10 + 8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 138412290;
        *(_QWORD *)((char *)&a9 + 4) = v9;
        _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "Exception: %@", (uint8_t *)&a9, 0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x186374D04);
  }
  _Unwind_Resume(exception_object);
}

void sub_186374F6C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  id v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;

  if (a2 == 1)
  {
    v17 = objc_begin_catch(a1);
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_fault_impl(&dword_185066000, v20, OS_LOG_TYPE_FAULT, "Exception: %@", (uint8_t *)&buf, 0xCu);
      }

    }
    else
    {
      v18 = appendKeys____s_category;
      if (!appendKeys____s_category)
      {
        v18 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v18, (unint64_t *)&appendKeys____s_category);
      }
      v19 = *(NSObject **)(v18 + 8);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_185066000, v19, OS_LOG_TYPE_ERROR, "Exception: %@", (uint8_t *)&buf, 0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x186374F30);
  }
  _Unwind_Resume(a1);
}

void sub_186376898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t UIAuditTokenTaskHasEntitlement(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t HasEntitlement;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __UIAuditTokenTaskHasEntitlement_block_invoke;
  v7[3] = &unk_1E16E81A8;
  v8 = v3;
  v9 = a1;
  v4 = v3;
  HasEntitlement = _UITaskHasEntitlement((uint64_t)v4, (uint64_t)v7);

  return HasEntitlement;
}

id UIMediaFilesDirectory()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)UIMediaFilesDirectory___mediaFilesDirectory;
  if (!UIMediaFilesDirectory___mediaFilesDirectory)
  {
    objc_msgSend((id)CPSharedResourcesDirectory(), "stringByAppendingPathComponent:", CFSTR("Media"));
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)UIMediaFilesDirectory___mediaFilesDirectory;
    UIMediaFilesDirectory___mediaFilesDirectory = v1;

    v0 = (void *)UIMediaFilesDirectory___mediaFilesDirectory;
  }
  return v0;
}

id _UITemporaryFileURL(void *a1, void *a2)
{
  id v3;
  objc_class *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  void *v14;
  char v16[1025];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (objc_class *)MEMORY[0x1E0CB37A0];
  v5 = a1;
  v6 = (void *)objc_msgSend([v4 alloc], "initWithFormat:", CFSTR(".%@.XXXXXX"), v5);

  NSTemporaryDirectory();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringByAppendingPathComponent:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_retainAutorelease(v8);
  objc_msgSend(v9, "fileSystemRepresentation");
  __strlcpy_chk();
  if (mktemp(v16))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v10, "mutableCopy");

    if (v3)
    {
      objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithIdentifier:", v3);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "preferredFilenameExtension");
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v13 = 0;
    }
    if (!-[__CFString length](v13, "length"))
    {

      v13 = CFSTR("tmp");
    }
    objc_msgSend(v11, "appendFormat:", CFSTR(".%@"), v13);
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

id _UITemporaryFolderURL(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  char v7[1025];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".%@.XXXXXX"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  NSTemporaryDirectory();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingPathComponent:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "getFileSystemRepresentation:maxLength:", v7, 1024);
  if (mkdtemp(v7))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v4, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id _UITemporaryFileWithUniqueName(void *a1, void *a2, int *a3)
{
  id v5;
  id v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  int v13;
  int v14;
  void *v15;
  int *v16;
  char *v17;
  char v19[1025];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithIdentifier:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "preferredFilenameExtension");
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR(".%@.XXXXXX"), v5);
  if (!-[__CFString length](v8, "length"))
  {

    v8 = CFSTR("tmp");
  }
  objc_msgSend(v9, "appendFormat:", CFSTR(".%@"), v8);
  NSTemporaryDirectory();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringByAppendingPathComponent:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = objc_retainAutorelease(v11);
  objc_msgSend(v12, "fileSystemRepresentation");
  __strlcpy_chk();
  v13 = mkstemps(v19, -[__CFString length](v8, "length") + 1);
  if (v13 == -1)
  {
    v16 = __error();
    v17 = strerror(*v16);
    NSLog(CFSTR("Could not create temporary file. Error: %s"), v17);
    v15 = 0;
  }
  else
  {
    v14 = v13;
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v19, 0, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (a3)
      *a3 = v14;
    else
      close(v14);
  }

  return v15;
}

uint64_t _UICloneFile(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  void *v6;
  id v7;
  uint64_t v8;

  v3 = a2;
  objc_msgSend(a1, "path");
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v5 = (const char *)objc_msgSend(v4, "fileSystemRepresentation");
  objc_msgSend(v3, "path");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_retainAutorelease(v6);
  v8 = copyfile(v5, (const char *)objc_msgSend(v7, "fileSystemRepresentation"), 0, 0x10C800Fu);

  return v8;
}

id _UIFirstTypeIdentifierEligibleForMassStorage(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (qword_1ECD81E48 != -1)
    dispatch_once(&qword_1ECD81E48, &__block_literal_global_599);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v2 = v1;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v25;
    v6 = 0x1E0CEC000uLL;
    v7 = (id *)&unk_1ECD81000;
    v19 = *(_QWORD *)v25;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v25 != v5)
          objc_enumerationMutation(v2);
        v9 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v8);
        objc_msgSend(*(id *)(v6 + 1016), "_typeWithIdentifier:allowUndeclared:", v9, 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v11 = v7;
        v12 = v7[456];
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v21;
          while (2)
          {
            for (i = 0; i != v14; ++i)
            {
              if (*(_QWORD *)v21 != v15)
                objc_enumerationMutation(v12);
              if ((objc_msgSend(v10, "conformsToType:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i)) & 1) != 0)
              {
                v17 = v9;

                goto LABEL_21;
              }
            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
            if (v14)
              continue;
            break;
          }
        }

        ++v8;
        v6 = 0x1E0CEC000;
        v5 = v19;
        v7 = v11;
      }
      while (v8 != v4);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      v17 = 0;
    }
    while (v4);
  }
  else
  {
    v17 = 0;
  }
LABEL_21:

  return v17;
}

void notificationHandler()
{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  id v4;

  if (_UIInternalPreferencesRevisionVar <= 2147483645)
    _UIInternalPreferencesRevisionVar += 2;
  _UIKitUserDefaults();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dictionaryRepresentation");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_revisionDefaults;
  _revisionDefaults = v0;

  if (&_UIInternalPreferencesListener___COUNTER__ != &__PhotoLibraryFrameworkHandle)
  {
    v2 = &_UIInternalPreferencesListener___COUNTER__;
    do
    {
      v3 = *v2++;
      (*(void (**)(void))(v3 + 16))();
    }
    while (v2 != &__PhotoLibraryFrameworkHandle);
  }

}

uint64_t _UIInternalPreferenceUpdateBool(uint64_t a1, void *a2)
{
  *(_BYTE *)(a1 + 4) = objc_msgSend(a2, "BOOLValue");
  return 1;
}

uint64_t _UIInternalPreferenceUpdateInteger(uint64_t a1, void *a2)
{
  *(_QWORD *)(a1 + 8) = objc_msgSend(a2, "integerValue");
  return 1;
}

uint64_t _UIInternalPreferenceUpdateDouble(uint64_t a1, void *a2)
{
  uint64_t v3;

  objc_msgSend(a2, "doubleValue");
  *(_QWORD *)(a1 + 8) = v3;
  return 1;
}

uint64_t _UIInternalPreferenceUpdateId(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 8), a2);
  return 1;
}

void _UIInternalPreferenceSync(int a1, _DWORD *a2, uint64_t a3, uint64_t (*a4)(_DWORD *))
{
  void *v7;
  int v8;
  void *v9;

  objc_msgSend((id)_revisionDefaults, "objectForKey:");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v9 = v7;
    v8 = a4(a2);
    v7 = v9;
    a1 += v8;
  }
  *a2 = a1;

}

uint64_t _UIOneOfTypesConformsToAcceptableTypes(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v27;
    v20 = *(_QWORD *)v27;
    v21 = v4;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v27 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(MEMORY[0x1E0CEC3F8], "_typeWithIdentifier:allowUndeclared:", *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i), 1, v20);
        v10 = objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)v10;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v12 = v4;
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
          if (v13)
          {
            v14 = v13;
            v15 = *(_QWORD *)v23;
            while (2)
            {
              for (j = 0; j != v14; ++j)
              {
                if (*(_QWORD *)v23 != v15)
                  objc_enumerationMutation(v12);
                objc_msgSend(MEMORY[0x1E0CEC3F8], "_typeWithIdentifier:allowUndeclared:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * j), 1);
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                if (v17 && (objc_msgSend(v11, "conformsToType:", v17) & 1) != 0)
                {

                  v18 = 1;
                  v4 = v21;
                  goto LABEL_22;
                }

              }
              v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
              if (v14)
                continue;
              break;
            }
          }

          v8 = v20;
          v4 = v21;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      v18 = 0;
    }
    while (v7);
  }
  else
  {
    v18 = 0;
  }
LABEL_22:

  return v18;
}

uint64_t getWKInterfaceDeviceClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__221;
  v7 = __Block_byref_object_dispose__221;
  v0 = qword_1ECD81EF0;
  v8 = qword_1ECD81EF0;
  if (!qword_1ECD81EF0)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getWKInterfaceDeviceClass_block_invoke;
    v2[3] = &unk_1E16B14C0;
    v2[4] = &v3;
    __getWKInterfaceDeviceClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_186379110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863793E4(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(&_MergedGlobals_1284);
  objc_exception_rethrow();
}

void sub_1863793FC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

Class __getWKInterfaceDeviceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;

  if (!qword_1ECD81EF8)
    qword_1ECD81EF8 = _sl_dlopen();
  if (!qword_1ECD81EF8)
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *WatchKitLibrary(void)"), CFSTR("_UIAssetManager.m"), 57, CFSTR("%s"), 0);
    goto LABEL_8;
  }
  result = objc_getClass("WKInterfaceDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getWKInterfaceDeviceClass(void)_block_invoke"), CFSTR("_UIAssetManager.m"), 58, CFSTR("Unable to find class %s"), "WKInterfaceDevice");
LABEL_8:
    __break(1u);
  }
  qword_1ECD81EF0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void ____preferredIdiomSubtypeForIdiom_block_invoke()
{
  unint64_t v0;
  void *v1;
  const void *v2;
  void *v3;
  unint64_t v4;
  NSObject *v5;
  uint8_t v6[16];

  v0 = -[UIScreen _artworkSubtype](+[UIScreen mainScreen](UIScreen, "mainScreen"), "_artworkSubtype");
  if (v0)
  {
    qword_1ECD81F08 = v0;
    return;
  }
  v1 = (void *)MGCopyAnswer();
  v2 = v1;
  if (v1)
  {
    v3 = (void *)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("ArtworkDeviceSubType"));
    if (v3)
    {
      qword_1ECD81F08 = objc_msgSend(v3, "integerValue");
LABEL_11:
      CFRelease(v2);
      return;
    }
  }
  v4 = qword_1ECD81F10;
  if (!qword_1ECD81F10)
  {
    v4 = __UILogCategoryGetNode("Assets", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v4, (unint64_t *)&qword_1ECD81F10);
  }
  v5 = *(NSObject **)(v4 + 8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Could not determine device type", v6, 2u);
  }
  qword_1ECD81F08 = 320;
  if (v2)
    goto LABEL_11;
}

id _UIAutologgingVoidBlock(void *a1, void *a2)
{
  id v3;
  id v4;
  _UIAutologgingDeallocSentinel *v5;
  id v6;
  _UIAutologgingDeallocSentinel *v7;
  void *v8;
  _QWORD v10[4];
  _UIAutologgingDeallocSentinel *v11;
  id v12;

  v3 = a2;
  v4 = a1;
  v5 = objc_alloc_init(_UIAutologgingDeallocSentinel);
  -[_UIAutologgingDeallocSentinel setMessage:](v5, "setMessage:", v4);

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___UIAutologgingVoidBlock_block_invoke;
  v10[3] = &unk_1E16B1D18;
  v11 = v5;
  v12 = v3;
  v6 = v3;
  v7 = v5;
  v8 = (void *)objc_msgSend(v10, "copy");

  return v8;
}

id _UIAutologgingBackgroundFetchBlock(void *a1, void *a2)
{
  id v3;
  id v4;
  _UIAutologgingDeallocSentinel *v5;
  id v6;
  _UIAutologgingDeallocSentinel *v7;
  void *v8;
  _QWORD v10[4];
  _UIAutologgingDeallocSentinel *v11;
  id v12;

  v3 = a2;
  v4 = a1;
  v5 = objc_alloc_init(_UIAutologgingDeallocSentinel);
  -[_UIAutologgingDeallocSentinel setMessage:](v5, "setMessage:", v4);

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___UIAutologgingBackgroundFetchBlock_block_invoke;
  v10[3] = &unk_1E16DAF18;
  v11 = v5;
  v12 = v3;
  v6 = v3;
  v7 = v5;
  v8 = (void *)objc_msgSend(v10, "copy");

  return v8;
}

id _UIBundleIDFromAuditToken()
{
  void *v0;

  if (CPCopyBundleIdentifierAndTeamFromAuditToken())
    v0 = 0;
  else
    v0 = (void *)CPCopyBundleIdentifierFromAuditToken();
  if (!v0)
    NSLog(CFSTR("Cannot get bundle ID from audit token."));
  return v0;
}

id _UIPrivateMainBundleIdentifier()
{
  void *v0;

  if (qword_1ECD81F30 != -1)
    dispatch_once(&qword_1ECD81F30, &__block_literal_global_7_13);
  if (_MergedGlobals_1285)
  {
    _UIMainBundleIdentifier();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

uint64_t _UIIsPrivateMainBundle()
{
  if (qword_1ECD81F30 != -1)
    dispatch_once(&qword_1ECD81F30, &__block_literal_global_7_13);
  return _MergedGlobals_1285;
}

uint64_t _UIIsOpenInRestrictionInEffect()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isOpenInRestrictionInEffect");

  return v1;
}

uint64_t _UIShouldEnforceOpenInRulesInAccountBasedApp()
{
  if (qword_1ECD81F50 != -1)
    dispatch_once(&qword_1ECD81F50, &__block_literal_global_604);
  if (_MergedGlobals_1287)
    return _UIIsOpenInRestrictionInEffect();
  else
    return 0;
}

uint64_t _UIDropAllowedBetweenApps(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *v12;
  const char *v13;
  unint64_t v14;
  int v16;
  id v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = 1;
  if (v5 && v6)
  {
    objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v9, "isOpenInRestrictionInEffect"))
      goto LABEL_23;
    if (!a1)
      goto LABEL_23;
    if (a1 == 3)
      goto LABEL_23;
    v10 = objc_msgSend(v9, "dragDropTargetManagementStateForBundleID:", v7);
    if ((unint64_t)(v10 - 4) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_23;
    if (a1 == 1)
    {
      if (v10 != 1 || (objc_msgSend(v9, "mayOpenFromUnmanagedToManaged") & 1) != 0)
        goto LABEL_23;
      v11 = qword_1ECD81F68;
      if (!qword_1ECD81F68)
      {
        v11 = __UILogCategoryGetNode("Dragging", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v11, (unint64_t *)&qword_1ECD81F68);
      }
      v12 = *(NSObject **)(v11 + 8);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
LABEL_22:
        v8 = 0;
LABEL_23:

        goto LABEL_24;
      }
      v16 = 138543618;
      v17 = v5;
      v18 = 2114;
      v19 = v7;
      v13 = "Disallowing drag of unmanaged data from app %{public}@ to managed app %{public}@";
    }
    else
    {
      if (a1 != 2 || v10 || (objc_msgSend(v9, "mayOpenFromManagedToUnmanaged") & 1) != 0)
        goto LABEL_23;
      v14 = qword_1ECD81F70;
      if (!qword_1ECD81F70)
      {
        v14 = __UILogCategoryGetNode("Dragging", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v14, (unint64_t *)&qword_1ECD81F70);
      }
      v12 = *(NSObject **)(v14 + 8);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      v16 = 138543618;
      v17 = v5;
      v18 = 2114;
      v19 = v7;
      v13 = "Disallowing drag of managed data from app %{public}@ to unmanaged app %{public}@";
    }
    _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v16, 0x16u);
    goto LABEL_22;
  }
LABEL_24:

  return v8;
}

uint64_t _UIDropAllowedWithinAccountBasedApp(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v11;
  __int16 v12;
  __int16 v13;

  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isOpenInRestrictionInEffect"))
  {
    if (a1 == 2)
    {
      if (a2 == 1 && (objc_msgSend(v4, "mayOpenFromManagedToUnmanaged") & 1) == 0)
      {
        v11 = qword_1ECD81F80;
        if (!qword_1ECD81F80)
        {
          v11 = __UILogCategoryGetNode("Dragging", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v11, (unint64_t *)&qword_1ECD81F80);
        }
        v6 = *(NSObject **)(v11 + 8);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          goto LABEL_19;
        v12 = 0;
        v7 = "Disallowing drag of managed data to unmanaged account.";
        v8 = (uint8_t *)&v12;
        goto LABEL_18;
      }
    }
    else if (a1 == 1 && a2 == 2 && (objc_msgSend(v4, "mayOpenFromUnmanagedToManaged") & 1) == 0)
    {
      v5 = qword_1ECD81F78;
      if (!qword_1ECD81F78)
      {
        v5 = __UILogCategoryGetNode("Dragging", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v5, (unint64_t *)&qword_1ECD81F78);
      }
      v6 = *(NSObject **)(v5 + 8);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      v13 = 0;
      v7 = "Disallowing drag of unmanaged data to managed account.";
      v8 = (uint8_t *)&v13;
LABEL_18:
      _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
LABEL_19:
      v9 = 0;
      goto LABEL_13;
    }
  }
  v9 = 1;
LABEL_13:

  return v9;
}

uint64_t _UIEffectiveSourceDataOwnerForReportedDataOwner(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;

  v3 = a2;
  if ((_UIBundleIDIsAccountBased(v3) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isAppManaged:", v3);

    if (v5)
      a1 = 2;
    else
      a1 = 1;
  }

  return a1;
}

const __CFString *_UIDataOwnerDescription(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unknown");
  else
    return off_1E16E8408[a1];
}

void ___shouldValidateAccountBasedDelegates_block_invoke()
{
  void *v0;
  void *v1;
  const __CFString *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  _UIKitUserDefaults();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = CFSTR("shouldValidateAccountBasedDelegates");
  v3[0] = &unk_1E1A9A9F8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, &v2, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "registerDefaults:", v1);

}

id _UIStepperDividerKey(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v3, "{?=QQ}");
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_186380414(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_186380598(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_186380744(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1863808C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_186380948(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id NSStringFromPopoverArrowDirection(uint64_t a1)
{
  void *v2;
  void *v3;
  const __CFString *v4;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 30);
  v3 = v2;
  if (a1 == 15)
  {
    v4 = CFSTR("Any");
    goto LABEL_5;
  }
  if (a1)
  {
    if ((a1 & 2) != 0)
    {
      objc_msgSend(v2, "appendString:", CFSTR("Below "));
      if ((a1 & 1) == 0)
      {
LABEL_8:
        if ((a1 & 4) == 0)
          goto LABEL_9;
        goto LABEL_15;
      }
    }
    else if ((a1 & 1) == 0)
    {
      goto LABEL_8;
    }
    objc_msgSend(v3, "appendString:", CFSTR("Above "));
    if ((a1 & 4) == 0)
    {
LABEL_9:
      if ((a1 & 8) == 0)
      {
LABEL_11:
        objc_msgSend(v3, "deleteCharactersInRange:", objc_msgSend(v3, "length") - 1, 1);
        return v3;
      }
LABEL_10:
      objc_msgSend(v3, "appendString:", CFSTR("Right "));
      goto LABEL_11;
    }
LABEL_15:
    objc_msgSend(v3, "appendString:", CFSTR("Left "));
    if ((a1 & 8) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v4 = CFSTR("Unknown");
LABEL_5:
  objc_msgSend(v2, "appendString:", v4);
  return v3;
}

const __CFString *_UITextInputActionsSourceString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB)
    return CFSTR("Unspecified");
  else
    return off_1E16E8468[a1 - 1];
}

const __CFString *_UITextInputActionsTypeString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xF)
    return CFSTR("Unspecified");
  else
    return off_1E16E84C8[a1 - 1];
}

uint64_t _UITextInputActionsSessionActionsEnumValueFromSourceAndType(unint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = _UITextInputActionsSessionActionsEnumValueFromSource(a1);
  if (result == 1)
  {
    switch(a1)
    {
      case 0xCuLL:
        if (a2 != 15)
          return 0;
        break;
      case 4uLL:
        if (a2 <= 14)
        {
          if (a2 == 1)
            return 6;
          if (a2 == 2)
            return 7;
          return 0;
        }
        if (a2 != 15)
        {
          if (a2 == 16)
            return 11;
          return 0;
        }
        break;
      case 3uLL:
        if (a2 == 15)
          return 10;
        else
          return 5;
      default:
        return 0;
    }
    return 10;
  }
  return result;
}

uint64_t _UITextInputActionsSessionActionsEnumValueFromSource(unint64_t a1)
{
  if (a1 > 0xC)
    return 0;
  else
    return qword_186684C70[a1];
}

const __CFString *_UITextInputActionsSessionActionsStringFromEnumValue(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 9)
    return &stru_1E16EDF20;
  else
    return off_1E16E8548[a1 - 2];
}

__CFString *_UITextInputActionsValidateLanguage(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  __CFString *v6;
  id v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  void *v12;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "length"))
  {
    if (qword_1ECD81FD8 != -1)
      dispatch_once(&qword_1ECD81FD8, &__block_literal_global_93_4);
    objc_msgSend((id)qword_1ECD81FD0, "objectForKey:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v3, "isEqual:", v4);

      if ((v5 & 1) == 0)
      {
        v6 = v3;
LABEL_23:

        goto LABEL_24;
      }
    }
    else
    {
      v7 = v2;
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("emoji"), CFSTR("dictation"), 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 0;
      if ((objc_msgSend(v8, "containsObject:", v7) & 1) == 0)
      {
        if (objc_msgSend(v7, "length") == 2
          || objc_msgSend(v7, "length") == 3
          || objc_msgSend(v7, "length") == 7
          || objc_msgSend(v7, "length") == 8)
        {
          if (qword_1ECD81FC8 != -1)
            dispatch_once(&qword_1ECD81FC8, &__block_literal_global_606);
          if (objc_msgSend((id)_MergedGlobals_1289, "numberOfMatchesInString:options:range:", v7, 0, 0, objc_msgSend(v7, "length")) == 1)v9 = 0;
          else
            v9 = CFSTR("L");
        }
        else
        {
          v9 = CFSTR("L");
        }
      }

      v10 = v9;
      v11 = (void *)qword_1ECD81FD0;
      if (v10)
      {
        v6 = v10;
        objc_msgSend((id)qword_1ECD81FD0, "setObject:forKey:", v10, v7);
        goto LABEL_23;
      }
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setObject:forKey:", v12, v7);

    }
    v6 = 0;
    goto LABEL_23;
  }
  v6 = 0;
LABEL_24:

  return v6;
}

__CFString *_UITextInputActionsValidateRegion(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  __CFString *v6;
  id v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  void *v11;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "length"))
  {
    if (qword_1ECD81FF8 != -1)
      dispatch_once(&qword_1ECD81FF8, &__block_literal_global_99_0);
    objc_msgSend((id)qword_1ECD81FF0, "objectForKey:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v3, "isEqual:", v4);

      if ((v5 & 1) == 0)
      {
        v6 = v3;
LABEL_20:

        goto LABEL_21;
      }
    }
    else
    {
      v7 = v2;
      if ((unint64_t)objc_msgSend(v7, "length") >= 2)
      {
        v8 = CFSTR("R");
        if ((unint64_t)objc_msgSend(v7, "length") <= 4)
        {
          if (qword_1ECD81FE8 != -1)
            dispatch_once(&qword_1ECD81FE8, &__block_literal_global_96_1);
          if (objc_msgSend((id)qword_1ECD81FE0, "numberOfMatchesInString:options:range:", v7, 0, 0, objc_msgSend(v7, "length")) == 1)v8 = 0;
        }
      }
      else
      {
        v8 = CFSTR("R");
      }

      v9 = v8;
      v10 = (void *)qword_1ECD81FF0;
      if (v9)
      {
        v6 = v9;
        objc_msgSend((id)qword_1ECD81FF0, "setObject:forKey:", v9, v7);
        goto LABEL_20;
      }
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setObject:forKey:", v11, v7);

    }
    v6 = 0;
    goto LABEL_20;
  }
  v6 = 0;
LABEL_21:

  return v6;
}

uint64_t _UITextInputActionsNSIntegerToLog10Integer(uint64_t a1)
{
  if (a1 < -9999)
    return 0;
  if (a1 < -999)
    return 1;
  if (a1 < -99)
    return 2;
  if (a1 < -9)
    return 3;
  if (a1 < 0)
    return 4;
  if (!a1)
    return 5;
  if ((unint64_t)a1 < 0xA)
    return 6;
  if ((unint64_t)a1 < 0x64)
    return 7;
  if ((unint64_t)a1 < 0x3E8)
    return 8;
  if ((unint64_t)a1 >> 4 < 0x271)
    return 9;
  return 10;
}

void sub_186383058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _ArchivePath(void *a1)
{
  id v1;
  void *v2;
  char v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  if (qword_1ECD82008 != -1)
    dispatch_once(&qword_1ECD82008, &__block_literal_global_607);
  objc_msgSend(v1, "pathExtension");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("plist"));

  if ((v3 & 1) == 0)
  {
    objc_msgSend(v1, "stringByAppendingPathExtension:", CFSTR("plist"));
    v4 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v4;
  }
  objc_msgSend((id)_MergedGlobals_1290, "stringByAppendingPathComponent:", v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _NumberForKey(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(a1, "objectForKey:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void _UIDragStatisticLogItemsInDragByType(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a1;
  v4 = a2;
  dispatch_get_global_queue(17, 0);
  v5 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___UIDragStatisticLogItemsInDragByType_block_invoke;
  v8[3] = &unk_1E16B1B50;
  v9 = v3;
  v10 = v4;
  v6 = v4;
  v7 = v3;
  dispatch_async(v5, v8);

}

void _UIDragStatisticsLogTextDelegateItems(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a1;
  v4 = a2;
  dispatch_get_global_queue(17, 0);
  v5 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___UIDragStatisticsLogTextDelegateItems_block_invoke;
  v8[3] = &unk_1E16B1B50;
  v9 = v3;
  v10 = v4;
  v6 = v4;
  v7 = v3;
  dispatch_async(v5, v8);

}

void _UIPowerLogPeekBegan()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v4[3];
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  +[_UIStatistics previewInteractionPeekForce](_UIStatistics, "previewInteractionPeekForce");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "recordDistributionValue:", _currentMaxRawForce());

  v4[0] = CFSTR("Process-ID");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", getpid());
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v1;
  v5[1] = &unk_1E1A9AA10;
  v4[1] = CFSTR("Status");
  v4[2] = CFSTR("Timestamp");
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[2] = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  PLLogRegisteredEvent();
}

double _currentMaxRawForce()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t i;
  double v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v0 = (void *)UIApp;
  objc_msgSend((id)UIApp, "keyWindow");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (id)objc_msgSend(v0, "_touchesEventForWindow:", v1);

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(v2, "allTouches", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    v7 = 0.0;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "_pressure");
        if (v7 < v9)
          v7 = v9;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }
  else
  {
    v7 = 0.0;
  }

  return v7;
}

void _UIPowerLogPeekEnded()
{
  void *v0;
  void *v1;
  void *v2;
  _QWORD v3[3];
  _QWORD v4[4];

  v4[3] = *MEMORY[0x1E0C80C00];
  v3[0] = CFSTR("Process-ID");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", getpid());
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = v0;
  v4[1] = &unk_1E1A9AA28;
  v3[1] = CFSTR("Status");
  v3[2] = CFSTR("Timestamp");
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[2] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  PLLogRegisteredEvent();
}

void _UIPowerLogPopOccured()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  +[_UIStatistics previewInteractionPopForce](_UIStatistics, "previewInteractionPopForce");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "recordDistributionValue:", _currentMaxRawForce());

  v4[0] = CFSTR("Process-ID");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", getpid());
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[1] = CFSTR("Timestamp");
  v5[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[1] = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  PLLogRegisteredEvent();
}

void sub_186386E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<ui_size_cache_value>>(unint64_t a1)
{
  if (a1 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(120 * a1);
}

void _UIGetHSBValuesForColor(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;
  id v8;

  v7 = a1;
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  v8 = objc_retainAutorelease(v7);
  if (CGColorGetNumberOfComponents((CGColorRef)objc_msgSend(v8, "CGColor")) == 2)
    objc_msgSend(v8, "getWhite:alpha:", a4, 0);
  else
    objc_msgSend(v8, "getHue:saturation:brightness:alpha:", a2, a3, a4, 0);

}

id _UIVisualEffectSubviewFilterIdentityValueForKeypath(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend(a2, "componentsSeparatedByString:", CFSTR("."));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count") == 3)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v6 = v3;
    v7 = (void *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v17;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v10, "filterName", (_QWORD)v16);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "isEqualToString:", v5);

          if (v12)
          {
            objc_msgSend(v10, "identityValues");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "objectAtIndexedSubscript:", 2);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "objectForKeyedSubscript:", v14);
            v7 = (void *)objc_claimAutoreleasedReturnValue();

            goto LABEL_13;
          }
        }
        v7 = (void *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_13:

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t _UIVisualEffectSubviewShouldAnimateKey(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t ShouldAnimateKeyInternal;

  v3 = a2;
  objc_msgSend(a1, "viewEffects");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  ShouldAnimateKeyInternal = _UIVisualEffectSubviewShouldAnimateKeyInternal(v4, v3);

  return ShouldAnimateKeyInternal;
}

BOOL _UIVisualEffectSubviewAddInternalOverrides(objc_class *a1)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char types[8];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIVisualEffectSubviewAddInternalOverrides(__unsafe_unretained Class _Nonnull)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromClass(a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIVisualEffectSubview.m"), 325, CFSTR("Class %@ does not subclass UIView"), v5);

  }
  if ((-[objc_class conformsToProtocol:](a1, "conformsToProtocol:", &unk_1EDE4BB08) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIVisualEffectSubviewAddInternalOverrides(__unsafe_unretained Class _Nonnull)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromClass(a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("_UIVisualEffectSubview.m"), 326, CFSTR("Class %@ does not conform to protocol _UIVisualEffectViewParticipating"), v8);

  }
  strcpy(types, "@@:@@B");
  return class_addMethod(a1, sel__initialValueForLayer_keyPath_usePresentationValue_, (IMP)_UIVisualEffectSubviewInitialValueForLayer, types);
}

id _UIVisualEffectSubviewInitialValueForLayer(void *a1, const char *a2, uint64_t a3, void *a4, uint64_t a5)
{
  objc_super *v9;
  id v10;
  void *v11;
  void *v12;

  v9 = a1;
  v10 = a4;
  objc_msgSendSuper(v9, a2, a3, v10, a5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    if (objc_msgSend(v10, "hasPrefix:", CFSTR("filters.")))
    {
      -[objc_super filters](v9, "filters");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      _UIVisualEffectSubviewFilterIdentityValueForKeypath(v12, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v11 = 0;
    }
  }

  return v11;
}

void sub_18638A4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFStringRef formatAbsoluteTime(CFAbsoluteTime a1)
{
  if (qword_1ECD82100 != -1)
    dispatch_once(&qword_1ECD82100, &__block_literal_global_609);
  return (id)CFDateFormatterCreateStringWithAbsoluteTime((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDateFormatterRef)qword_1ECD820F8, a1);
}

void sub_18638AE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getGEOAlmanacClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD820F0)
    qword_1ECD820F0 = _sl_dlopen();
  if (!qword_1ECD820F0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *GeoServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UISunScheduleController.m"), 38, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("GEOAlmanac");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getGEOAlmanacClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UISunScheduleController.m"), 39, CFSTR("Unable to find class %s"), "GEOAlmanac");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1292 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

CFDateFormatterRef __formatAbsoluteTime_block_invoke()
{
  CFDateFormatterRef result;

  result = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0xFF3uLL);
  qword_1ECD820F8 = (uint64_t)result;
  return result;
}

uint64_t _adjustOptions(char *__src, uint64_t a2)
{
  char __dst[8];

  if ((qword_1ECD82170 | a2) == qword_1ECD82170)
    return 0;
  qword_1ECD82170 |= a2;
  strncpy(__dst, __src, 8uLL);
  _tracepointArg4((uint64_t)&qword_1ECD82130);
  kdebug_trace();
  if (!(_BYTE)word_1ECD82168)
    return 0;
  work_interval_instance_set_complexity();
  return 1;
}

uint64_t _waitCommitEnd()
{
  uint64_t result;
  _QWORD v1[5];

  if (!byte_1ECD8213C)
  {
    v1[0] = MEMORY[0x1E0C809B0];
    v1[1] = 3221225472;
    v1[2] = ___waitCommitEnd_block_invoke;
    v1[3] = &__block_descriptor_40_e5_v8__0l;
    v1[4] = &qword_1ECD82130;
    result = objc_msgSend(MEMORY[0x1E0CD28B0], "addCommitHandler:forPhase:", v1, 2);
    byte_1ECD8213C = 1;
  }
  return result;
}

double _UIQOSMaxFrameDurationSeconds()
{
  if (qword_1ECD82128 != -1)
    dispatch_once(&qword_1ECD82128, &__block_literal_global_5_13);
  return _UIMediaTimeForMachTime(qword_1ECD82140);
}

id _UIQOSDescription()
{
  void *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v15[5];

  _MergedGlobals_1293 = 0;
  if (qword_1ECD82128 != -1)
    dispatch_once(&qword_1ECD82128, &__block_literal_global_5_13);
  v0 = (void *)MEMORY[0x1E0CB3940];
  v1 = _MergedGlobals_1293;
  if (!_MergedGlobals_1293)
  {
    v1 = mach_absolute_time();
    _MergedGlobals_1293 = v1;
  }
  v2 = _UIMediaTimeForMachTime(v1);
  v3 = _UIMediaTimeForMachTime(qword_1ECD82148);
  v4 = _UIMediaTimeForMachTime(qword_1ECD82150);
  v5 = (void *)MEMORY[0x1E0CB3940];
  v6 = (void *)qword_1ECD82130;
  v7 = dword_1ECD82138;
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___managedCommitsDescription_block_invoke;
  v15[3] = &unk_1E16B5BD8;
  v15[4] = v8;
  objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v15);
  v9 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(v8, "componentsJoinedByString:", CFSTR("; "));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringWithFormat:", CFSTR("{%@}"), v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "stringWithFormat:", CFSTR("processing=%u, managedCommits=%@, waitingCommitEnd=%u, now=%.06f, begin=%+.06f, deadline=%+.06f, length=%.06f, intervalActive=%u, intervalOptions=0x%llx, intervalRelevant=%u"), v7, v11, byte_1ECD8213C, *(_QWORD *)&v2, v3 - v2, v4 - v2, v4 - v3, word_1ECD82168, qword_1ECD82170, HIBYTE(word_1ECD82168));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v0, "stringWithFormat:", CFSTR("%@, maxCommitDuration=%.06f, processingToken=%llu, transactionCurrentState=%u"), v12, _UIMediaTimeForMachTime(qword_1ECD82140), qword_1ECD82110, objc_msgSend(MEMORY[0x1E0CD28B0], "currentState"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void ___waitCommitEnd_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  _MergedGlobals_1293 = 0;
  *(_BYTE *)(v1 + 12) = 0;
  if (!*(_DWORD *)(v1 + 8) || !CFDictionaryGetCount(*(CFDictionaryRef *)v1))
    _endInterval(v1);
}

void ___managedCommitsDescription_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  objc_class *Class;
  void *v10;
  id v11;

  v5 = a2;
  objc_msgSend(a3, "allObjects");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "componentsJoinedByString:", CFSTR(", "));
  v11 = (id)objc_claimAutoreleasedReturnValue();

  v7 = *(void **)(a1 + 32);
  v8 = (void *)MEMORY[0x1E0CB3940];
  Class = object_getClass(v5);
  objc_msgSend(v8, "stringWithFormat:", CFSTR("%s@%p: %@"), class_getName(Class), v5, v11);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "addObject:", v10);
}

void sub_18638C7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void _UIViewServiceInterfaceLogAssertionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = _UIViewServiceInterfaceLogAssertionInfo___s_category;
  if (!_UIViewServiceInterfaceLogAssertionInfo___s_category)
  {
    v6 = __UILogCategoryGetNode("ViewServiceAssertion", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v6, (unint64_t *)&_UIViewServiceInterfaceLogAssertionInfo___s_category);
  }
  v7 = *(NSObject **)(v6 + 8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412802;
    v9 = a1;
    v10 = 2112;
    v11 = a2;
    v12 = 2048;
    v13 = a3;
    _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_DEFAULT, "%@: identifier: %@; assertion: %p", (uint8_t *)&v8, 0x20u);
  }
}

uint64_t _UIViewServiceMachServiceName(uint64_t a1)
{
  void *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (void *)objc_msgSend(CFSTR("com.apple.uikit.viewservice."), "stringByAppendingString:", a1);
  v2 = objc_msgSend(v1, "length");
  if (v2 >= 0x3F)
    v3 = 63;
  else
    v3 = v2;
  return objc_msgSend(v1, "substringToIndex:", v3);
}

void sub_18638D780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18638E56C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_1863907E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_186390D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186392978(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 168));
  _Block_object_dispose((const void *)(v2 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_186393138(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1863933B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186393794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_186393AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_186393CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _obscuredTraitCollectionFromTraitCollection(void *a1)
{
  id v1;
  void *v2;
  char v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  id v20;

  v1 = a1;
  if (!_UIDeviceNativeUserInterfaceIdiom())
  {
    if ((os_variant_has_internal_diagnostics() & 1) != 0)
    {
      if (!dyld_program_sdk_at_least())
        goto LABEL_25;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0D01800], "sharedInstance");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v2, "isCarrierInstall") & 1) != 0)
      {
        v3 = dyld_program_sdk_at_least();

        if ((v3 & 1) == 0)
          goto LABEL_25;
      }
      else
      {

      }
    }
  }
  if (!objc_msgSend(v1, "userInterfaceIdiom"))
  {
    objc_msgSend(v1, "displayCornerRadius");
    if (fabs(v4 + -39.0) >= 0.1)
    {
      objc_msgSend(v1, "displayCornerRadius");
      if (fabs(v5 + -33.3333) >= 0.1)
      {
        objc_msgSend(v1, "displayCornerRadius");
        if (fabs(v6 + -35.3333) >= 0.1)
        {
          objc_msgSend(v1, "displayCornerRadius");
          if (fabs(v7 + -41.5) >= 0.1)
          {
            objc_msgSend(v1, "displayCornerRadius");
            if (fabs(v8 + -37.5) >= 0.1)
            {
              objc_msgSend(v1, "displayCornerRadius");
              if (fabs(v9 + -44.0) >= 0.1)
              {
                objc_msgSend(v1, "displayCornerRadius");
                if (fabs(v10 + -37.3333) >= 0.1)
                {
                  objc_msgSend(v1, "displayCornerRadius");
                  if (fabs(v11 + -47.3333) >= 0.1)
                  {
                    objc_msgSend(v1, "displayCornerRadius");
                    if (fabs(v12 + -38.6667) >= 0.1)
                    {
                      objc_msgSend(v1, "displayCornerRadius");
                      if (fabs(v13 + -53.3333) >= 0.1)
                      {
                        objc_msgSend(v1, "displayCornerRadius");
                        if (fabs(v14 + -46.6667) >= 0.1)
                        {
                          objc_msgSend(v1, "displayCornerRadius");
                          if (fabs(v15 + -55.0) >= 0.1)
                          {
                            objc_msgSend(v1, "displayCornerRadius");
                            if (fabs(v16 + -44.6667) >= 0.1)
                            {
                              objc_msgSend(v1, "displayCornerRadius");
                              if (fabs(v17 + -48.0) >= 0.1)
                              {
                                objc_msgSend(v1, "displayCornerRadius");
                                if (fabs(v18) >= 0.1)
                                {
                                  objc_msgSend(v1, "_traitCollectionByReplacingCGFloatValue:forTraitToken:", 0x1E1A99648, 39.0);
                                  v19 = objc_claimAutoreleasedReturnValue();

                                  v1 = (id)v19;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_25:
  v20 = v1;

  return v20;
}

void sub_1863945A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186394F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_186395F10(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

id _UIRemoteViewControllerHalfDisconnectionInvocationForProxy(void *a1)
{
  id v1;
  id v2;
  void *v3;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___UIRemoteViewControllerHalfDisconnectionInvocationForProxy_block_invoke;
  v5[3] = &unk_1E16C1710;
  v6 = v1;
  v2 = v1;
  +[_UIAsyncInvocation invocationWithBlock:](_UIAsyncInvocation, "invocationWithBlock:", v5);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_18639B684(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

uint64_t _isPerformingSystemSnapshot(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  objc_msgSend(a1, "viewIfLoaded");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "windowScene");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_isPerformingSystemSnapshot");

  return v4;
}

uint64_t _shouldDeferSendingTraitCollectionChangeToService(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char v4;
  uint64_t v5;

  v1 = a1;
  objc_msgSend(v1, "_existingView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_isHostedInAnotherProcess");

  if ((v4 & 1) != 0 || !objc_msgSend(v1, "_isUpdatingSize"))
  {
    v5 = 0;
  }
  else if (_isPerformingSystemSnapshot(v1))
  {
    v5 = objc_msgSend(v1, "_isUpdatingSizeInHost");
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

void sub_1863A0D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863A10D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863A1414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863A2DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAPExtensionClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAPExtensionClass_softClass;
  v7 = getAPExtensionClass_softClass;
  if (!getAPExtensionClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAPExtensionClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getAPExtensionClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1863A2E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A32AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A38F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  uint64_t v14;

  _Block_object_dispose((const void *)(v14 - 80), 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863A461C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __getAPExtensionClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AppProtectionLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("APExtension");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAPExtensionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAPExtensionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIRemoteViewController.m"), 176, CFSTR("Unable to find class %s"), "APExtension");

    __break(1u);
  }
}

void AppProtectionLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!AppProtectionLibraryCore_frameworkLibrary)
    AppProtectionLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!AppProtectionLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AppProtectionLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIRemoteViewController.m"), 175, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getAPExtensionSubjectMonitorRegistryClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AppProtectionLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("APExtensionSubjectMonitorRegistry");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD78AD8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAPExtensionSubjectMonitorRegistryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIRemoteViewController.m"), 178, CFSTR("Unable to find class %s"), "APExtensionSubjectMonitorRegistry");

    __break(1u);
  }
}

Class __getAPBaseExtensionShieldViewClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD78AE8)
    qword_1ECD78AE8 = _sl_dlopen();
  if (!qword_1ECD78AE8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AppProtectionUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIRemoteViewController.m"), 180, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("APBaseExtensionShieldView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAPBaseExtensionShieldViewClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIRemoteViewController.m"), 181, CFSTR("Unable to find class %s"), "APBaseExtensionShieldView");

LABEL_8:
    __break(1u);
  }
  qword_1ECD78AE0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAPGuardClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AppProtectionLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("APGuard");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD78AF0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAPGuardClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIRemoteViewController.m"), 177, CFSTR("Unable to find class %s"), "APGuard");

    __break(1u);
  }
}

uint64_t _UIVisibilityEnvironmentForRootWindow(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UIRootWindow:%p"), a1);
}

id _UIVisibilityEnvironmentForSceneIdentityToken(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "stringRepresentation");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _UISVisibilityEnvironmentForSceneIdentityTokenString();
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1863A609C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863A7310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A7640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __userNotificationCallback_0(__CFUserNotification *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;

  objc_msgSend((id)_MergedGlobals_1_25, "objectForKey:", a1);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  CFUserNotificationGetResponseDictionary(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", *MEMORY[0x1E0C9B880]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v15, "alertViewStyle");
  if ((unint64_t)(v6 - 1) < 2)
  {
    objc_msgSend(v15, "textFieldAtIndex:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setText:", v5);
LABEL_6:

    goto LABEL_7;
  }
  if (v6)
  {
    if (v6 != 3)
LABEL_16:
      abort();
    objc_msgSend(v15, "textFieldAtIndex:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndex:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setText:", v8);

    objc_msgSend(v15, "textFieldAtIndex:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndex:", 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setText:", v10);

    goto LABEL_6;
  }
LABEL_7:
  v11 = 0;
  v12 = v15;
  switch(a2)
  {
    case 0:
      v13 = objc_msgSend(v15, "numberOfButtons");
      if (!v13)
        goto LABEL_15;
      v11 = v13 - 1;
      v12 = v15;
LABEL_11:
      objc_msgSend(v12, "delegate");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v14, "alertView:clickedButtonAtIndex:", v15, v11);
      objc_msgSend(v15, "dismissWithClickedButtonIndex:animated:", v11, 0);

LABEL_15:
      return;
    case 1:
      goto LABEL_11;
    case 2:
      v11 = 1;
      goto LABEL_11;
    case 3:
      objc_msgSend(v15, "cancelAlertView");
      goto LABEL_15;
    default:
      goto LABEL_16;
  }
}

BOOL isAlertViewDelegateMethod(SEL aSel)
{
  uint64_t v2;

  v2 = 1;
  if (!(unint64_t)protocol_getMethodDescription((Protocol *)&unk_1EDF00B98, aSel, 0, 1).name)
    return (unint64_t)protocol_getMethodDescription((Protocol *)&unk_1EDF00B98, aSel, 1, 1).name != 0;
  return v2;
}

void sub_1863ABAB8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1863ABF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863AE29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void beginInheritingCoreMediaApplicationState(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v2 = (void *)MEMORY[0x186DC9484]();
  objc_msgSend(getAVSystemControllerClass(), "sharedAVSystemController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", (int)a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  getAVSystemController_PIDToInheritApplicationStateFrom();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  v6 = objc_msgSend(v3, "setAttribute:forKey:error:", v4, v5, &v12);
  v7 = v12;

  if ((v6 & 1) == 0)
    NSLog(CFSTR("Failed to inherit CoreMedia permissions from %d: %@"), a1, v7);
  if ((_UIApplicationIsExtension() & 1) == 0)
  {
    if (qword_1ECD7A080 != -1)
      dispatch_once(&qword_1ECD7A080, &__block_literal_global_961_0);
    objc_msgSend((id)qword_1ECD7A078, "lock");
    if (!qword_1ECD7A070)
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3828], "mainQueue");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addObserverForName:object:queue:usingBlock:", CFSTR("UIApplicationWillEnterForegroundNotification"), 0, v9, &__block_literal_global_965_0);
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = (void *)qword_1ECD7A070;
      qword_1ECD7A070 = v10;

    }
    objc_msgSend((id)qword_1ECD7A078, "unlock");
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1863B2278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void stopStealingStatusBar(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "windowScene");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        v6 = 138412290;
        v7 = v1;
        _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Attempting to end update of view service orientation for hosted window not in window scene: %@", (uint8_t *)&v6, 0xCu);
      }

    }
    else
    {
      v3 = stopStealingStatusBar___s_category;
      if (!stopStealingStatusBar___s_category)
      {
        v3 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v3, (unint64_t *)&stopStealingStatusBar___s_category);
      }
      v4 = *(NSObject **)(v3 + 8);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v6 = 138412290;
        v7 = v1;
        _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "Attempting to end update of view service orientation for hosted window not in window scene: %@", (uint8_t *)&v6, 0xCu);
      }
    }
  }

}

id _supportedInterfaceOrientationsForMask(uint64_t a1)
{
  void *v2;
  id v3;
  void (**v4)(void *, uint64_t);
  id v5;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___supportedInterfaceOrientationsForMask_block_invoke;
  v7[3] = &unk_1E16E9200;
  v9 = a1;
  v3 = v2;
  v8 = v3;
  v4 = (void (**)(void *, uint64_t))_Block_copy(v7);
  v4[2](v4, 1);
  v4[2](v4, 2);
  v4[2](v4, 4);
  v4[2](v4, 3);
  v5 = v3;

  return v5;
}

void sub_1863B3624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _unobscuredTraitCollectionFromTraitCollection(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;

  v1 = a1;
  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_displayCornerRadius");
  v4 = v3;

  objc_msgSend(v1, "displayCornerRadius");
  if (vabdd_f64(v5, v4) >= 0.1)
  {
    objc_msgSend(v1, "_traitCollectionByReplacingCGFloatValue:forTraitToken:", 0x1E1A99648, v4);
    v6 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v6;
  }
  return v1;
}

void sub_1863B3D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863B3F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863B47AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863B5408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void stealStatusBar(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  char v11;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  int v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  objc_msgSend(v8, "windowScene");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
    v11 = a4;
  else
    v11 = 0;
  if ((v11 & 1) == 0 && a4)
  {
    if (!os_variant_has_internal_diagnostics())
    {
      v12 = qword_1ECD7A088;
      if (!qword_1ECD7A088)
      {
        v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v12, (unint64_t *)&qword_1ECD7A088);
      }
      v13 = *(NSObject **)(v12 + 8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v26 = 138412290;
        v27 = v8;
        v14 = "Attempting to update view service orientation for hosted window not in window scene: %@";
        v15 = v13;
        v16 = 12;
LABEL_19:
        _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v26, v16);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
    __UIFaultDebugAssertLog();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      v26 = 138412290;
      v27 = v8;
      v23 = "Attempting to update view service orientation for hosted window not in window scene: %@";
      v24 = v22;
      v25 = 12;
LABEL_30:
      _os_log_fault_impl(&dword_185066000, v24, OS_LOG_TYPE_FAULT, v23, (uint8_t *)&v26, v25);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  if (a1)
  {
    if (v9)
    {
      v17 = objc_msgSend(v9, "interfaceOrientation");
      v18 = v10;
    }
    else
    {
      v17 = objc_msgSend((id)UIApp, "statusBarOrientation");
      objc_msgSend((id)UIApp, "_findUISceneForLegacyInterfaceOrientation");
      v18 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21 = v18;
    if (v17 != a1)
    {
      +[UIKeyboardSceneDelegate setInterfaceOrientation:](UIKeyboardSceneDelegate, "setInterfaceOrientation:", a1);
      objc_msgSend((id)UIApp, "setStatusBarOrientation:fromOrientation:windowScene:animationParameters:updateBlock:", a1, objc_msgSend(v10, "interfaceOrientation"), v21, 0, 0);
    }

    goto LABEL_24;
  }
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v26) = 0;
      v23 = "Attempting to update view service orientation with an unknown interface orientation";
      v24 = v22;
      v25 = 2;
      goto LABEL_30;
    }
LABEL_28:

    goto LABEL_24;
  }
  v19 = qword_1ECD7A090;
  if (!qword_1ECD7A090)
  {
    v19 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v19, (unint64_t *)&qword_1ECD7A090);
  }
  v20 = *(NSObject **)(v19 + 8);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v26) = 0;
    v14 = "Attempting to update view service orientation with an unknown interface orientation";
    v15 = v20;
    v16 = 2;
    goto LABEL_19;
  }
LABEL_24:

}

void sub_1863B7978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

id getAVSystemControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVSystemControllerClass_softClass;
  v7 = getAVSystemControllerClass_softClass;
  if (!getAVSystemControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAVSystemControllerClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getAVSystemControllerClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1863BD6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVSystemController_PIDToInheritApplicationStateFrom()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getAVSystemController_PIDToInheritApplicationStateFromSymbolLoc_ptr;
  v8 = getAVSystemController_PIDToInheritApplicationStateFromSymbolLoc_ptr;
  if (!getAVSystemController_PIDToInheritApplicationStateFromSymbolLoc_ptr)
  {
    v1 = MediaExperienceLibrary_0();
    v0 = (id *)dlsym(v1, "AVSystemController_PIDToInheritApplicationStateFrom");
    v6[3] = (uint64_t)v0;
    getAVSystemController_PIDToInheritApplicationStateFromSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getAVSystemController_PIDToInheritApplicationStateFrom(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIViewServiceViewControllerOperator.m"), 324, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1863BD7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __beginInheritingCoreMediaApplicationState_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3740]);
  v1 = (void *)qword_1ECD7A078;
  qword_1ECD7A078 = (uint64_t)v0;

}

uint64_t __beginInheritingCoreMediaApplicationState_block_invoke_2()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(getAVSystemControllerClass(), "sharedAVSystemController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  getAVSystemController_PIDToInheritApplicationStateFrom();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setAttribute:forKey:error:", 0, v1, 0);

  objc_msgSend((id)qword_1ECD7A078, "lock");
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObserver:", qword_1ECD7A070);

  v3 = (void *)qword_1ECD7A070;
  qword_1ECD7A070 = 0;

  return objc_msgSend((id)qword_1ECD7A078, "unlock");
}

void __getAVSystemControllerClass_block_invoke_0(uint64_t a1)
{
  void *v2;
  void *v3;

  MediaExperienceLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVSystemController");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVSystemControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVSystemControllerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIViewServiceViewControllerOperator.m"), 323, CFSTR("Unable to find class %s"), "AVSystemController");

    __break(1u);
  }
}

void *MediaExperienceLibrary_0()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MediaExperienceLibraryCore_frameworkLibrary_0)
    MediaExperienceLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  v0 = (void *)MediaExperienceLibraryCore_frameworkLibrary_0;
  if (!MediaExperienceLibraryCore_frameworkLibrary_0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MediaExperienceLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIViewServiceViewControllerOperator.m"), 322, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void ___supportedInterfaceOrientationsForMask_block_invoke(uint64_t a1, unint64_t a2)
{
  void *v2;
  id v3;

  if (a2 > 4 || (*(_QWORD *)(a1 + 40) & qword_186684E78[a2]) != 0)
  {
    v2 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v3);

  }
}

void sub_1863BEE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863BF030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSTUIStatusBarCellularSignalViewClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD821D0)
    qword_1ECD821D0 = _sl_dlopen();
  if (!qword_1ECD821D0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SystemStatusUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UICellularSignalView.m"), 12, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("STUIStatusBarCellularSignalView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSTUIStatusBarCellularSignalViewClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UICellularSignalView.m"), 14, CFSTR("Unable to find class %s"), "STUIStatusBarCellularSignalView");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1297 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id _UIHostedWindowModifiedHostTraitCollection(uint64_t a1, uint64_t a2)
{
  return +[_UISceneHostingTraitCollectionPropagationClientComponent modifiedTraitCollectionForHostTraitCollection:](_UISceneHostingTraitCollectionPropagationClientComponent, "modifiedTraitCollectionForHostTraitCollection:", a2);
}

uint64_t _UITabIsRepresentedInListItems(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t IsRepresentedInListItems;
  _QWORD v9[4];
  id v10;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___UITabIsRepresentedInListItems_block_invoke;
    v9[3] = &unk_1E16B6F40;
    v5 = v3;
    v10 = v5;
    if (objc_msgSend(v4, "indexOfObjectPassingTest:", v9) == 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(v5, "_parentGroup");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      IsRepresentedInListItems = _UITabIsRepresentedInListItems(v6, v4);

    }
    else
    {
      IsRepresentedInListItems = 1;
    }

  }
  else
  {
    IsRepresentedInListItems = 0;
  }

  return IsRepresentedInListItems;
}

BOOL _UITabIsAncestorOfTabsInListItems(void *a1, void *a2)
{
  id v3;
  id v4;
  _BOOL8 v5;
  _QWORD v7[4];
  id v8;

  v3 = a1;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___UITabIsAncestorOfTabsInListItems_block_invoke;
  v7[3] = &unk_1E16B6F40;
  v8 = v3;
  v4 = v3;
  v5 = objc_msgSend(a2, "indexOfObjectPassingTest:", v7) != 0x7FFFFFFFFFFFFFFFLL;

  return v5;
}

id _UIProtocolConformingToProtocols(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  id v4;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v1 = a1;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__226;
  v13 = __Block_byref_object_dispose__226;
  v14 = 0;
  if (qword_1ECD82208 != -1)
    dispatch_once(&qword_1ECD82208, &__block_literal_global_619);
  v2 = _MergedGlobals_1299;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___UIProtocolConformingToProtocols_block_invoke;
  v6[3] = &unk_1E16BC3A0;
  v7 = v1;
  v8 = &v9;
  v3 = v1;
  dispatch_sync(v2, v6);
  v4 = (id)v10[5];

  _Block_object_dispose(&v9, 8);
  return v4;
}

id UIViewServiceCurrentAppearanceSerializedRepresentations(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  +[_UIAppearance _recordersExcludingSource:withWindow:](_UIAppearance, "_recordersExcludingSource:withWindow:", a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v8), "_serializedRepresentation", (_QWORD)v11);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObject:", v9);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  return v3;
}

void UIViewServiceProcessAppearanceUpdate(void *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(id, void *, uint64_t);
  void *v7;
  char v8;
  void *v9;
  id v10;

  v10 = a1;
  v5 = a2;
  v6 = a3;
  +[_UIAppearance _currentAppearanceSource](_UIAppearance, "_currentAppearanceSource");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v10, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    UIViewServiceCurrentAppearanceSerializedRepresentations((uint64_t)v10, (uint64_t)v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v6[2](v6, v9, __UIViewServiceAppearanceOriginalSource);

  }
}

void UIViewServiceUpdateAppearanceWithSerializedRepresentations(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _UIAppearanceRecorder *v15;
  _UIAppearanceRecorder *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if ((objc_msgSend(v7, "isEqual:", v6) & 1) == 0)
  {
    if (v6)
      v8 = v6;
    else
      v8 = v7;
    objc_storeStrong((id *)&__UIViewServiceAppearanceOriginalSource, v8);
    +[_UIAppearance _removeInvocationsForSource:](_UIAppearance, "_removeInvocationsForSource:", v7);
    +[_UIAppearance _setCurrentAppearanceSource:](_UIAppearance, "_setCurrentAppearanceSource:", v7);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v19;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v19 != v12)
            objc_enumerationMutation(v9);
          v14 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v13);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v15 = [_UIAppearanceRecorder alloc];
            v16 = -[_UIAppearanceRecorder initWithSerializedRepresentation:](v15, "initWithSerializedRepresentation:", v14, (_QWORD)v18);
            -[_UIAppearanceRecorder _applyCustomizations](v16, "_applyCustomizations");

          }
          ++v13;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v11);
    }

    +[_UIAppearance _setCurrentAppearanceSource:](_UIAppearance, "_setCurrentAppearanceSource:", 0);
    v17 = (void *)__UIViewServiceAppearanceOriginalSource;
    __UIViewServiceAppearanceOriginalSource = 0;

  }
}

void sub_1863C6764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  uint64_t v20;

  _Block_object_dispose((const void *)(v20 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1863C71C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863C7D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getLPLinkViewClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getLPLinkViewClass_softClass;
  v7 = getLPLinkViewClass_softClass;
  if (!getLPLinkViewClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getLPLinkViewClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getLPLinkViewClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1863C7E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863C8E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getLPMetadataProviderClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  LinkPresentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("LPMetadataProvider");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getLPMetadataProviderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLPMetadataProviderClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDocumentProperties.m"), 32, CFSTR("Unable to find class %s"), "LPMetadataProvider");

    __break(1u);
  }
}

void LinkPresentationLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!LinkPresentationLibraryCore_frameworkLibrary)
    LinkPresentationLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!LinkPresentationLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *LinkPresentationLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIDocumentProperties.m"), 31, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getLPLinkMetadataClass_block_invoke_0(uint64_t a1)
{
  void *v2;
  void *v3;

  LinkPresentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("LPLinkMetadata");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getLPLinkMetadataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLPLinkMetadataClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDocumentProperties.m"), 33, CFSTR("Unable to find class %s"), "LPLinkMetadata");

    __break(1u);
  }
}

void __getLPLinkViewClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  LinkPresentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("LPLinkView");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getLPLinkViewClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLPLinkViewClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDocumentProperties.m"), 34, CFSTR("Unable to find class %s"), "LPLinkView");

    __break(1u);
  }
}

void __getLPLinkRendererSizeClassParametersClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  LinkPresentationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("LPLinkRendererSizeClassParameters");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getLPLinkRendererSizeClassParametersClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLPLinkRendererSizeClassParametersClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDocumentProperties.m"), 36, CFSTR("Unable to find class %s"), "LPLinkRendererSizeClassParameters");

    __break(1u);
  }
}

void sub_1863CC3E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1863CD260(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1863CEF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

void sub_1863D09AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t B519BehaviorEnabled()
{
  _BOOL8 v0;
  void *v1;

  if (!_os_feature_enabled_impl())
    return 0;
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_B519_SimulateRemoteConnected, (uint64_t)CFSTR("B519_SimulateRemoteConnected"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EDDA83AC)
  {
    return 1;
  }
  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v0 = objc_msgSend(v1, "_remoteTouchSurfaceType") == 2;

  return v0;
}

void sub_1863D552C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863D6A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863D9994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1863D9C08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CGRect rect, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t recta, uint64_t rect_8, CGFloat rect_16, CGFloat rect_24)
{
  uint64_t v14;
  void *v15;
  unint64_t v16;
  CGFloat v17;
  CGFloat v18;
  void *v19;
  uint64_t v20;
  CGRect v22;
  CGRect v23;

  v22.origin.x = rect_16;
  v22.origin.y = v17;
  v22.size.width = v18;
  v22.size.height = rect_24;
  objc_msgSend(MEMORY[0x1E0D156B0], "constraintWithItem:attribute:relatedBy:constant:", v14, 34, 0, CGRectGetMidX(v22));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "addObject:", v19);
  v23.origin.x = rect_16;
  v23.origin.y = v17;
  v23.size.width = v18;
  v23.size.height = rect_24;
  objc_msgSend(MEMORY[0x1E0D156B0], "constraintWithItem:attribute:relatedBy:constant:", v14, 7, 0, CGRectGetWidth(v23));
  v20 = objc_claimAutoreleasedReturnValue();

  return ((uint64_t (*)(uint64_t))((char *)sub_1863DA39C + 4 * word_18668512E[(v16 >> 3) & 7]))(objc_msgSend(v15, "addObject:", v20));
}

id sub_1863DA39C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t rect, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  CGFloat v38;
  CGFloat v39;
  void *v40;
  void *v41;
  CGFloat v43;
  CGFloat v44;
  CGRect v45;
  CGRect v46;

  v45.origin.x = v43;
  v45.origin.y = v38;
  v45.size.width = v39;
  v45.size.height = v44;
  objc_msgSend(MEMORY[0x1E0D156B0], "constraintWithItem:attribute:relatedBy:constant:", v34, 35, 0, CGRectGetMidY(v45));
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v36, "addObject:", v40);
  v46.origin.x = v43;
  v46.origin.y = v38;
  v46.size.width = v39;
  v46.size.height = v44;
  objc_msgSend(MEMORY[0x1E0D156B0], "constraintWithItem:attribute:relatedBy:constant:", v34, 8, 0, CGRectGetHeight(v46));
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v36, "addObject:", v41);
  return v36;
}

uint64_t _UILayoutEngineSolutionIsInRationalEdgesConsultingDelegate(void *a1)
{
  if ((dyld_program_sdk_at_least() & 1) != 0)
    return 1;
  if (a1)
    return objc_msgSend(a1, "_forceLayoutEngineSolutionInRationalEdges");
  return 0;
}

uint64_t _UIAutoresizingMaskConstraintsUseImplementationFromFoundation()
{
  return dyld_program_sdk_at_least();
}

uint64_t _UILayoutAttributeHasImplicitBoundsOriginConstraint(unsigned int a1)
{
  return (a1 < 0xB) & (0x67Eu >> a1);
}

uint64_t _UIViewEnumerateLayoutConstraintsAndAdjustForSelectedLayoutVariables(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[7];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___UIViewEnumerateLayoutConstraintsAndAdjustForSelectedLayoutVariables_block_invoke;
  v4[3] = &unk_1E16E9900;
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  return objc_msgSend(a1, "_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:", v4);
}

uint64_t _UIEngineHostingViewsShouldGuardWantsAutolayoutFlagPropagation()
{
  if (qword_1ECD791C8 != -1)
    dispatch_once(&qword_1ECD791C8, &__block_literal_global_736);
  return byte_1ECD790BA;
}

uint64_t _UILayoutAnchorsDeferTrippingWantsAutolayoutFlagUntilUsed()
{
  if (qword_1ECD791D0 != -1)
    dispatch_once(&qword_1ECD791D0, &__block_literal_global_739);
  return byte_1ECD790BB;
}

uint64_t _tagLayoutItem(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = (void *)objc_msgSend(a1, "_referenceView");
  v5 = v4;
  if ((a2 - 11) <= 1)
  {
    v6 = (void *)objc_msgSend(v4, "_viewForLoweringBaselineLayoutAttribute:", a2);
    if (v6 != v5)
      return objc_msgSend(v6, "_setWantsAutolayout");
  }
  v7 = objc_msgSend(a1, "_referenceView");
  if (!a1 || (void *)v7 == a1 || objc_msgSend(a1, "nsli_superitem") != v7)
  {
    v6 = v5;
    return objc_msgSend(v6, "_setWantsAutolayout");
  }
  return objc_msgSend(v5, "_setSubviewWantsAutolayoutTripWantsAutolayout:", 1);
}

uint64_t _UIViewSortedConstraintsForDebugging(void *a1)
{
  return objc_msgSend((id)objc_msgSend(a1, "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_314_1), "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_315_0);
}

uint64_t _UILayoutConstraintsShouldUseDawnStrategyForPerSizeClassSupport()
{
  return dyld_program_sdk_at_least();
}

BOOL _UISubclassOverridesSelector(objc_class *a1, objc_class *a2, SEL name)
{
  IMP MethodImplementation;
  IMP v6;
  BOOL v7;

  MethodImplementation = class_getMethodImplementation(a1, name);
  v6 = class_getMethodImplementation(a2, name);
  if (MethodImplementation)
    v7 = v6 == 0;
  else
    v7 = 1;
  return !v7 && MethodImplementation != v6;
}

uint64_t _UIViewRecursivelyRemoveDebugAlignmentViews(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v1 = (void *)objc_msgSend(a1, "_allSubviews", 0);
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v8;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v1);
        v6 = *(_QWORD **)(*((_QWORD *)&v7 + 1) + 8 * v5);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v6, "removeFromSuperview");
        }
        else
        {
          _UIViewRecursivelyRemoveDebugAlignmentViews(v6);
          v6[14] &= ~0x10000000000000uLL;
        }
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t _debuggableDescriptionForConstraints(void *a1)
{
  return _debuggableDescriptionForConstraintsWithHeader(a1, 0);
}

uint64_t _debuggableDescriptionForConstraintsWithHeader(void *a1, uint64_t a2)
{
  const __CFString *v3;
  void *v4;
  void *v5;

  if (a2)
    v3 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@\n"), a2);
  else
    v3 = &stru_1E16EDF20;
  v4 = (void *)objc_msgSend(a1, "valueForKey:", CFSTR("_debuggableEquationLegendDescription"));
  v5 = (void *)objc_msgSend(a1, "valueForKey:", CFSTR("_debuggableEquationDescriptionWithoutLegend"));
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\n%@legends\n%@%@\n\nconstraints\n%@%@\n\n"), v3, CFSTR("-------------------------------\n"), objc_msgSend(v4, "componentsJoinedByString:", CFSTR("\n")), CFSTR("-------------------------------\n"), objc_msgSend(v5, "componentsJoinedByString:", CFSTR(",\n")));
}

uint64_t _layoutVariablesWithAmbiguousValueForLayoutItem(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(a1, "nsli_layoutEngine");
  v9[0] = objc_msgSend(a1, "nsli_minXVariable");
  v9[1] = objc_msgSend(a1, "nsli_minYVariable");
  v9[2] = objc_msgSend(a1, "nsli_boundsWidthVariable");
  v3 = objc_msgSend(a1, "nsli_boundsHeightVariable");
  v4 = 0;
  v5 = 0;
  v9[3] = v3;
  do
  {
    v6 = v9[v4];
    if (objc_msgSend(v2, "valueOfVariableIsAmbiguous:", v6))
      v8[v5++] = v6;
    ++v4;
  }
  while (v4 != 4);
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, v5);
}

id _UIViewPotentiallyDisrubtibleConstraintsForView(void *a1, void *a2, void *a3)
{
  void *v6;
  void *i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  void *v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(a1, "_layoutEngine");
  if (!v6 || (void *)objc_msgSend(v6, "delegate") == a1)
    goto LABEL_44;
  for (i = 0; a2; a2 = (void *)objc_msgSend(a2, "superview"))
  {
    if (!a3 || (objc_msgSend(a3, "isDescendantOfView:", a2) & 1) == 0)
    {
      v8 = (void *)objc_msgSend(a2, "_constraintsExceptingSubviewAutoresizingConstraints");
      v9 = objc_msgSend(v8, "count");
      if (v9)
      {
        v10 = v9 - 1;
        do
        {
          v11 = (void *)objc_msgSend(v8, "objectAtIndex:", v10);
          if ((NSLayoutConstraintIsPotentiallyDanglyInContainer() & 1) != 0
            || a2 == (void *)objc_msgSend(v11, "container")
            && (!v11
              ? (v12 = 0, v13 = 0)
              : (v12 = (void *)objc_msgSend((id)objc_msgSend(v11, "firstItem"), "_referenceView"),
                 v13 = (void *)objc_msgSend((id)objc_msgSend(v11, "secondItem"), "_referenceView")),
                (objc_msgSend(v12, "isDescendantOfView:", a1) & 1) != 0
             || objc_msgSend(v13, "isDescendantOfView:", a1)))
          {
            if (!i)
              i = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            objc_msgSend(i, "addObject:", v11);
          }
          --v10;
        }
        while (v10 != -1);
      }
    }
  }
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v14 = objc_msgSend(i, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
  if (v14)
  {
    v16 = v14;
    v17 = 0;
    v18 = *(_QWORD *)v31;
    *(_QWORD *)&v15 = 138412290;
    v29 = v15;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v31 != v18)
          objc_enumerationMutation(i);
        v20 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v19);
        if (!v17)
          v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 0, 0, 0);
        v21 = objc_msgSend(v20, "container", v29);
        if (v21)
        {
          v22 = v21;
          v23 = (void *)objc_msgSend(v17, "objectForKey:", v21);
          if (!v23)
          {
            v23 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            objc_msgSend(v17, "setObject:forKey:", v23, v22);
          }
          objc_msgSend(v23, "addObject:", v20);
        }
        else if (os_variant_has_internal_diagnostics())
        {
          v26 = __UIFaultDebugAssertLog();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = v29;
            v35 = v20;
            _os_log_fault_impl(&dword_185066000, v26, OS_LOG_TYPE_FAULT, "UIKit Debug Assert: We should have a non-nil container for this constraint that we're trying to protect: %@", buf, 0xCu);
          }
        }
        else
        {
          v24 = _UIViewPotentiallyDisrubtibleConstraintsForView___s_category;
          if (!_UIViewPotentiallyDisrubtibleConstraintsForView___s_category)
          {
            v24 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v24, (unint64_t *)&_UIViewPotentiallyDisrubtibleConstraintsForView___s_category);
          }
          v25 = *(NSObject **)(v24 + 8);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v29;
            v35 = v20;
            _os_log_impl(&dword_185066000, v25, OS_LOG_TYPE_ERROR, "UIKit Debug Assert: We should have a non-nil container for this constraint that we're trying to protect: %@", buf, 0xCu);
          }
        }
        ++v19;
      }
      while (v16 != v19);
      v27 = objc_msgSend(i, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
      v16 = v27;
    }
    while (v27);
  }
  else
  {
LABEL_44:
    v17 = 0;
  }
  return v17;
}

uint64_t _UIViewReactivatePotentiallyDisruptedConstraintsForView(void *a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (void *)objc_msgSend(a1, "keyEnumerator", 0);
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6), "addConstraints:", objc_msgSend(a1, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6)));
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

double _UIViewDefaultNeighborSpacing()
{
  return 8.0;
}

uint64_t _valueForPrefOrPassLinkCheck(uint64_t a1, int a2)
{
  void *v4;

  v4 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", a1);
  if (v4)
    return objc_msgSend(v4, "BOOLValue");
  v4 = (void *)objc_msgSend(_UIKitPreferencesOnce(), "objectForKey:", a1);
  if (v4)
    return objc_msgSend(v4, "BOOLValue");
  else
    return dyld_program_sdk_at_least() & a2;
}

void NSLayoutConstraintFailedToFindDefaultResolvedValueForSymbolicConstant(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = NSLayoutConstraintFailedToFindDefaultResolvedValueForSymbolicConstant___s_category;
  if (!NSLayoutConstraintFailedToFindDefaultResolvedValueForSymbolicConstant___s_category)
  {
    v3 = __UILogCategoryGetNode("LayoutConstraints", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v3, (unint64_t *)&NSLayoutConstraintFailedToFindDefaultResolvedValueForSymbolicConstant___s_category);
  }
  v4 = *(NSObject **)(v3 + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = a2;
    _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "Could not resolve symbolic constant for constraint, because: %@\nUse a symbolic breakpoint at NSLayoutConstraintFailedToFindDefaultResolvedValueForSymbolicConstant to debug.", (uint8_t *)&v5, 0xCu);
  }
}

double _UIViewATVButtonVertPaddingForBaselineSpacing(int a1, int a2)
{
  double result;

  result = 72.0;
  if (((a2 - 5) | (a1 - 5)) >= 2)
    return 24.0;
  return result;
}

uint64_t ___workaroundUpdateShouldTagLayoutItemsIfNecessary_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(_UIMainBundleIdentifier(), "isEqualToString:", CFSTR("com.apple.CarPlayApp"));
  byte_1ECD790BD = result;
  return result;
}

void sub_1863E629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863E8F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863EA81C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 112));
  objc_destroyWeak((id *)(v5 - 104));
  _Unwind_Resume(a1);
}

void sub_1863EADD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

UIResponseFactorViewSpringAnimationBehavior *UIViewSpringAnimationBehaviorDescribingWithResponseFactor(void *a1, double a2)
{
  id v3;
  void *v4;
  UIResponseFactorViewSpringAnimationBehavior *v5;
  UIResponseFactorViewSpringAnimationBehavior *v6;

  v3 = a1;
  v4 = v3;
  if (a2 == 1.0)
    v5 = (UIResponseFactorViewSpringAnimationBehavior *)v3;
  else
    v5 = -[UIResponseFactorViewSpringAnimationBehavior initWithWrapedBehavior:responseFactor:]([UIResponseFactorViewSpringAnimationBehavior alloc], "initWithWrapedBehavior:responseFactor:", v3, a2);
  v6 = v5;

  return v6;
}

void sub_1863EC764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIContentViewShouldUseAccessibilityTextWrappingLayout(void *a1, void *a2, float64x2_t *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  BOOL v14;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  double v26;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v6 && (objc_msgSend(v6, "isHidden") & 1) == 0)
  {
    objc_msgSend(v7, "_currentImage");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v9)
    {
      v8 = 0;
LABEL_32:

      goto LABEL_33;
    }
    v10 = objc_msgSend(v5, "_effectiveTextAlignment");
    objc_msgSend(v7, "traitCollection");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "layoutDirection");

    v14 = v12 == 1 && v10 == 2;
    v16 = v12 == 1 || v10 != 0;
    v17 = !v14 && v16;
    v18 = v10 != 4 && v17;
    v8 = 0;
    if (!objc_msgSend(v5, "_hasNonEmptyPlainTextOnly") || v18)
      goto LABEL_32;
    objc_msgSend(v5, "font");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "lineHeight");
    v21 = v20;
    objc_msgSend(v19, "leading");
    v26 = v21 + v22;
    objc_msgSend(v9, "size");
    if (v23 > v26)
    {
      if (!a3)
      {
        v8 = 0;
        goto LABEL_31;
      }
      *(_QWORD *)&v24.f64[0] = vdupq_lane_s64(0x7FEFFFFFFFFFFFFFLL, 0).u64[0];
      v24.f64[1] = v26;
      *(int8x16_t *)a3 = vbslq_s8((int8x16_t)vcgtzq_f64(*a3), vbslq_s8((int8x16_t)vcgtq_f64(*a3, v24), (int8x16_t)v24, *(int8x16_t *)a3), (int8x16_t)v24);
    }
    v8 = 1;
LABEL_31:

    goto LABEL_32;
  }
  v8 = 0;
LABEL_33:

  return v8;
}

double _UIContentViewRectForVerticalCenteringWithFirstLineOfLabel(void *a1)
{
  id v1;
  void *v2;
  CGRect v4;

  v1 = a1;
  objc_msgSend(v1, "frame");
  CGRectGetMinY(v4);
  objc_msgSend(v1, "_capOffsetFromBoundsTop");
  objc_msgSend(v1, "font");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "capHeight");
  return 0.0;
}

__CFString *_UIContentViewStringForAxis(uint64_t a1)
{
  char v1;
  __CFString *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    if (a1 == 3)
    {
      v2 = CFSTR("Both");
    }
    else
    {
      v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v4 = v3;
      if ((v1 & 1) != 0)
        objc_msgSend(v3, "addObject:", CFSTR("Horizontal"));
      if ((v1 & 2) != 0)
        objc_msgSend(v4, "addObject:", CFSTR("Vertical"));
      v5 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "stringWithFormat:", CFSTR("[%@]"), v6);
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v2 = CFSTR("Neither");
  }
  return v2;
}

void sub_1863ECED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1863F1150(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void setObjectForKeys(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v11);
        v13 = _Block_copy(v6);
        objc_msgSend(v5, "setObject:forKey:", v13, v12);

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }

}

void sub_1863F341C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSTKCategoryViewControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD79FA0)
    qword_1ECD79FA0 = _sl_dlopen();
  if (!qword_1ECD79FA0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *StickerKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIRemoteCategoryKeyView.m"), 12, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("STKCategoryViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSTKCategoryViewControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIRemoteCategoryKeyView.m"), 13, CFSTR("Unable to find class %s"), "STKCategoryViewController");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1_26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id _UIAnimationLog()
{
  if (qword_1ECD82468 != -1)
    dispatch_once(&qword_1ECD82468, &__block_literal_global_644);
  return (id)qword_1ECD82460;
}

void UIViewInProcessAnimationManagerSetFixedPriority()
{
  _opaque_pthread_t *v0;
  int v1;
  int v2;
  NSObject *v3;
  mach_port_t v4;
  int v5;
  int v6;
  NSObject *v7;
  void *v8;
  void *v9;
  integer_t policy_info;
  sched_param v11;
  int v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v0 = pthread_self();
  v12 = 0;
  v11 = 0;
  pthread_getschedparam(v0, &v12, &v11);
  v11.sched_priority = 53;
  v1 = pthread_setschedparam(v0, v12, &v11);
  if (v1)
  {
    v2 = v1;
    _UIAnimationLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(MEMORY[0x1E0CB3978], "currentThread");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315906;
      v14 = "UIViewInProcessAnimationManagerSetFixedPriority";
      v15 = 1024;
      v16 = v2;
      v17 = 1024;
      v18 = 53;
      v19 = 2114;
      v20 = v9;
      _os_log_error_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "%s Error %d setting priority %d for thread: %{public}@", buf, 0x22u);

    }
  }
  policy_info = 0;
  v4 = pthread_mach_thread_np(v0);
  thread_policy_set(v4, 1u, &policy_info, 1u);
  v5 = proc_setthread_cpupercent();
  if (v5)
  {
    v6 = v5;
    _UIAnimationLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "UIViewInProcessAnimationManagerSetFixedPriority";
      v15 = 1024;
      v16 = v6;
      _os_log_error_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "%s Error %d setting thread CPU percent", buf, 0x12u);
    }

  }
}

void sub_1863F6770(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t ___isKeySupported_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v1 = (void *)_MergedGlobals_11_16;
  _MergedGlobals_11_16 = (uint64_t)v0;

  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("position"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("bounds"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("transform"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("sublayerTransform"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("instanceTransform"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("filters.gaussianBlur.inputRadius"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("filters.colorSaturate.inputAmount"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("filters.colorBrightness.inputAmount"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("filters.luminanceMap.inputAmount"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("filters.colorMatrix.inputColorMatrix"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("filters.luminanceCurveMap.inputAmount"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("filters.variableBlur.inputRadius"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("filters.opacityPair.inputAmount"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("meshTransform"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("opacity"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("scale"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("shadowOpacity"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("shadowOffset"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("shadowRadius"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("cornerRadius"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("cornerRadii"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("borderWidth"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("borderOffset"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("borderColor"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("backgroundColor"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("contentsCenter"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("contentsRect"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("anchorPoint"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("zPosition"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("zoom"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("position.x"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("position.y"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("colors"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("separatedOptions.tintAmount"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("separatedOptions.clippingExtents.outsetMinX"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("separatedOptions.clippingExtents.outsetMaxX"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("separatedOptions.clippingExtents.outsetMinY"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("separatedOptions.clippingExtents.outsetMaxY"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("separatedOptions.clippingExtents.outsetMinZ"));
  objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("separatedOptions.clippingExtents.outsetMaxZ"));
  return objc_msgSend((id)_MergedGlobals_11_16, "addObject:", CFSTR("separatedOptions.pointsPerMeter"));
}

uint64_t ___clampedValueForKey_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)qword_1ECD7B038;
  qword_1ECD7B038 = (uint64_t)v0;

  objc_msgSend((id)qword_1ECD7B038, "setObject:forKey:", &__block_literal_global_165_2, CFSTR("filters.gaussianBlur.inputRadius"));
  return objc_msgSend((id)qword_1ECD7B038, "setObject:forKey:", &__block_literal_global_166_1, CFSTR("filters.colorSaturate.inputAmount"));
}

uint64_t ___clampedValueForKey_block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  double v3;

  v2 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "doubleValue");
  if (v3 < 1.0)
    v3 = 1.0;
  return objc_msgSend(v2, "numberWithDouble:", v3);
}

id _UILabelReverseNaturalAlignment(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v1 = a1;
  v2 = *(_QWORD *)off_1E1678F98;
  objc_msgSend(v1, "objectForKeyedSubscript:", *(_QWORD *)off_1E1678F98);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_ui_resolvedTextAlignment");
  if ((v4 | 2) == 2)
  {
    v5 = v4;
    v6 = (void *)objc_msgSend(v3, "mutableCopy");
    v7 = v6;
    if (v5)
    {
      if (v5 != 2)
      {
LABEL_7:
        objc_msgSend(v1, "setObject:forKeyedSubscript:", v7, v2);

        goto LABEL_8;
      }
      v8 = 0;
    }
    else
    {
      v8 = 2;
    }
    objc_msgSend(v6, "setAlignment:", v8);
    goto LABEL_7;
  }
LABEL_8:

  return v1;
}

uint64_t _UIKitDrawsDebugTextGlyphPathBoundsClipping()
{
  if (qword_1ECD792E0 != -1)
    dispatch_once(&qword_1ECD792E0, &__block_literal_global_143_1);
  return _MergedGlobals_56;
}

void _UIMorphLayerPaths(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  CGPath *Mutable;
  CGAffineTransform v28;
  CGAffineTransform v29;
  CGAffineTransform m;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "frame");
  v6 = v5;
  objc_msgSend(v4, "frame");
  v8 = v6 / v7;
  objc_msgSend(v3, "frame");
  v10 = v9;
  objc_msgSend(v4, "frame");
  v12 = v10 / v11;
  v13 = v8 + -1.0;
  if (v8 + -1.0 < 0.0)
    v13 = -(v8 + -1.0);
  v14 = v12 + -1.0;
  if (v12 + -1.0 < 0.0)
    v14 = -v14;
  if (v13 >= v14)
    v15 = v10 / v11;
  else
    v15 = v8;
  objc_msgSend(v4, "frame");
  v17 = v16;
  objc_msgSend(v4, "anchorPoint");
  v19 = v17 * v18;
  objc_msgSend(v3, "frame");
  v21 = v20;
  objc_msgSend(v3, "anchorPoint");
  v23 = v22;

  v24 = v19 - v21 * v23 / v15;
  if (v24 >= 0.0)
    v25 = v19 - v21 * v23 / v15;
  else
    v25 = -v24;
  v26 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&m.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&m.c = v26;
  *(_OWORD *)&m.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  *(_OWORD *)&v29.a = *(_OWORD *)&m.a;
  *(_OWORD *)&v29.c = v26;
  *(_OWORD *)&v29.tx = *(_OWORD *)&m.tx;
  CGAffineTransformScale(&m, &v29, v15, v15);
  v28 = m;
  CGAffineTransformTranslate(&v29, &v28, 0.0, v25);
  m = v29;
  Mutable = CGPathCreateMutable();
  CGPathAddPath(Mutable, &m, (CGPathRef)objc_msgSend(v4, "path"));
  objc_msgSend(v4, "setPath:", Mutable);

  CFRelease(Mutable);
}

void sub_1863FE530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v6 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _UILabelVisualStyleAttributedStringContainsForegroundColorAttribute(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v1 = a1;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v2 = objc_msgSend(v1, "length");
  v3 = *(_QWORD *)off_1E1678D98;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___UILabelVisualStyleAttributedStringContainsForegroundColorAttribute_block_invoke;
  v6[3] = &unk_1E16B6338;
  v6[4] = &v7;
  objc_msgSend(v1, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, v2, 0x100000, v6);
  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_186400828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186401EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTUIEmojiSearchTextFieldClass_block_invoke_1(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD79FC0)
    qword_1ECD79FC0 = _sl_dlopen();
  if (!qword_1ECD79FC0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TextInputUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIEmojiAndStickerCollectionViewController.m"), 31, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("TUIEmojiSearchTextField");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIEmojiSearchTextFieldClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIEmojiAndStickerCollectionViewController.m"), 32, CFSTR("Unable to find class %s"), "TUIEmojiSearchTextField");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1_28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18640386C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 + 208), 8);
  _Unwind_Resume(a1);
}

void sub_186405AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  id *v30;

  objc_destroyWeak(v30);
  objc_destroyWeak(location);
  objc_destroyWeak(&a30);
  _Unwind_Resume(a1);
}

void sub_186405D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186406324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18640B240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18640BE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18640C600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18640D370(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_18640E6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _ViewHasDescendant(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3 == v4)
  {
    v6 = 1;
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    objc_msgSend(v3, "subviews", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v11;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v5);
          if ((_ViewHasDescendant(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i), v4) & 1) != 0)
          {
            v6 = 1;
            goto LABEL_12;
          }
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  return v6;
}

void sub_18641797C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18641D22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_18641DBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18641E7D0(_Unwind_Exception *a1)
{
  _UIQOSProcessingEnd();
  _Unwind_Resume(a1);
}

void __SpringBoardBlankedScreen()
{
  int v0;
  BOOL v1;
  void *v2;
  uint64_t state64;

  v0 = __SpringBoardBlankedScreen_notifyToken;
  if (!__SpringBoardBlankedScreen_notifyToken)
  {
    notify_register_check("com.apple.springboard.hasBlankedScreen", &__SpringBoardBlankedScreen_notifyToken);
    v0 = __SpringBoardBlankedScreen_notifyToken;
  }
  state64 = 0;
  if (notify_get_state(v0, &state64))
    v1 = 0;
  else
    v1 = state64 == 1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "postNotificationName:object:", CFSTR("_UIScrollViewSpringBoardBlankedScreenNotification"), 0);

  }
}

void sub_18641FFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_BYTE *_UIScrollViewRubberBandOffsetWithoutDecorationForOffset(_BYTE *result, double a2, double a3, double a4, double a5)
{
  if (a4 >= a3)
    a3 = a4;
  if (fabs(a5) >= 2.22044605e-16)
  {
    if (a3 < a2)
    {
      if (!result)
        return result;
LABEL_9:
      *result = 1;
      return result;
    }
    if (a2 < a4 && result)
      goto LABEL_9;
  }
  return result;
}

void AdjustShadowWithOffset(void *a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8)
{
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;

  v15 = a1;
  v16 = 0.0;
  v21 = v15;
  if (a3)
  {
    objc_msgSend(v15, "frame", 0.0);
    if (a2 == 8 || a2 == 2)
    {
      v18 = a5;
      v20 = a7;
    }
    if (a2 == 1 || a2 == 4)
    {
      v17 = a4;
      v19 = a6;
    }
    if ((a2 & 2) != 0)
      v17 = a4;
    if ((a2 & 8) != 0)
      v17 = a6 + a4 - v19;
    if ((a2 & 1) != 0)
      v18 = a5;
    if ((a2 & 4) != 0)
      v18 = a5 + a7 - v20 + a8;
    objc_msgSend(v21, "setFrame:", v17, v18);
    v15 = v21;
    v16 = 1.0;
  }
  objc_msgSend(v15, "setAlpha:", v16);

}

uint64_t _edgeForScrollAccessoryEdge(uint64_t a1, int a2)
{
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  result = 1;
  switch(a1)
  {
    case 0:
      v5 = a2 == 0;
      v6 = 2;
      v7 = 8;
      goto LABEL_5;
    case 1:
      v5 = a2 == 0;
      v6 = 8;
      v7 = 2;
LABEL_5:
      if (v5)
        result = v6;
      else
        result = v7;
      break;
    case 2:
      return result;
    case 3:
      result = 2;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 8;
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIRectEdge _edgeForScrollAccessoryEdge(UIScrollAccessoryEdge, BOOL)");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("UIScrollView.m"), 14796, CFSTR("Invalid UIScrollAccessoryEdge value (%ld)"), a1);

      result = 0;
      break;
  }
  return result;
}

void sub_186428C70(_Unwind_Exception *a1)
{
  _UIQOSProcessingEnd();
  _Unwind_Resume(a1);
}

void sub_1864292CC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose((const void *)(v2 - 256), 8);
  _Block_object_dispose((const void *)(v2 - 208), 8);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_186429D1C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  _Block_object_dispose((const void *)(v2 - 240), 8);
  _Block_object_dispose((const void *)(v2 - 192), 8);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_18642A344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ____deviceHasHighFrequencyDigitizer_block_invoke_0()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  _MergedGlobals_1324 = result;
  return result;
}

Class __getRPTScrollViewTestParametersClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD82510)
    qword_1ECD82510 = _sl_dlopen();
  result = objc_getClass("RPTScrollViewTestParameters");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD82508 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getRPTTestRunnerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD82510)
    qword_1ECD82510 = _sl_dlopen();
  result = objc_getClass("RPTTestRunner");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD82518 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

unint64_t _UIApplicationPackedDeploymentVersionFromString(void *a1)
{
  void *v1;
  unint64_t v2;
  void *v3;
  int v4;
  unsigned __int8 v5;
  void *v6;
  void *v7;

  if (a1)
  {
    objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("."));
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "count");
    if (v2)
    {
      objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "integerValue");

      if (v2 == 1)
      {
        v5 = 0;
LABEL_9:
        LOBYTE(v2) = 0;
        goto LABEL_10;
      }
      objc_msgSend(v1, "objectAtIndexedSubscript:", 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v6, "integerValue");

      if (v2 < 3)
        goto LABEL_9;
      objc_msgSend(v1, "objectAtIndexedSubscript:", 2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v2) = objc_msgSend(v7, "integerValue");

    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
LABEL_10:

    return v2 | ((unint64_t)v5 << 8) | (v4 << 16);
  }
  v5 = 0;
  LOBYTE(v2) = 0;
  v4 = 0;
  return v2 | ((unint64_t)v5 << 8) | (v4 << 16);
}

uint64_t _UIApplicationPackedMinimumDeploymentVersion()
{
  if (qword_1ECD82528 != -1)
    dispatch_once(&qword_1ECD82528, &__block_literal_global_657);
  return _MergedGlobals_1325;
}

uint64_t __UIApplicationLinkedOnOrAfter()
{
  return dyld_program_sdk_at_least();
}

void _catesCalculateCachedProperties(void *a1)
{
  float64_t v1;
  float64x2_t v2;
  double v3;
  double *v4;
  double v5;
  float64x2_t v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  double v15;
  char *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;

  v16 = a1;
  objc_msgSend(v16, "initialContentOffset");
  v2.f64[1] = v1;
  *((float64x2_t *)v16 + 10) = vabdq_f64(v2, *(float64x2_t *)(v16 + 184));
  v2.f64[0] = sqrt(*((double *)v16 + 20) * *((double *)v16 + 20) + *((double *)v16 + 21) * *((double *)v16 + 21));
  *((_QWORD *)v16 + 22) = *(_QWORD *)&v2.f64[0];
  v3 = pow(v2.f64[0] / *((double *)v16 + 31), 0.25);
  v4 = (double *)v16;
  *((double *)v16 + 19) = v3;
  v5 = *((double *)v16 + 25);
  if (v5 >= 0.0)
  {
    v6 = vminnmq_f64(*((float64x2_t *)v16 + 14), (float64x2_t)vdupq_n_s64(0x40D3880000000000uLL));
    v7 = (float64x2_t)vdupq_n_s64(0xC0D3880000000000);
    v9 = vnegq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v6), (int8x16_t)v7, (int8x16_t)v6));
    v19 = v9;
    v20 = *((float64x2_t *)v16 + 13);
    v8 = 0.0;
    v9.f64[0] = 1.5;
    __asm { FMOV            V1.2D, #0.5 }
    v17 = _Q1;
    v18 = (float64x2_t)vdupq_n_s64(0x3FD3D70A3D70A3D7uLL);
    v15 = 1.5;
    do
    {
      v9.f64[0] = v9.f64[0] * 0.5 + v8;
      v21 = v9;
      *(int32x2_t *)&v9.f64[0] = vmovn_s64(vcgtq_f64(v17, vabsq_f64(vmulq_n_f64(vaddq_f64(v20, vmulq_f64(vmulq_n_f64(v19, v9.f64[0]), v18)), exp(v9.f64[0] * -20.0 / 1.6)))));
      v9.f64[1] = v21.f64[1];
      if ((LOBYTE(v9.f64[0]) & BYTE4(v9.f64[0]) & 1) != 0)
        v15 = v21.f64[0];
      else
        v8 = v21.f64[0];
      v9.f64[0] = v15 - v8;
    }
    while (v15 - v8 > 0.01);
    v3 = v5 + v8;
    v4 = (double *)v16;
  }
  v4[18] = v3;

}

double _NSStretchOfClipBoundsForDocumentFrame(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, double a9, double a10)
{
  double v21;
  double v23;
  double height;
  CGFloat width;
  CGFloat v26;
  CGFloat v27;
  double v28;
  double v29;
  CGFloat v30;
  double v31;
  double MaxX;
  double v33;
  double v34;
  CGFloat r1;
  CGFloat MinY;
  CGFloat y;
  CGFloat v39;
  double v40;
  double v41;
  CGFloat rect2a;
  double rect2;
  CGFloat x;
  CGFloat MinX;
  CGFloat v46;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;

  if (a7 <= a3 + 0.0001)
    a5 = a9;
  if (a7 <= a3 + 0.0001)
    v21 = a3;
  else
    v21 = a7;
  if (a8 <= a4 + 0.0001)
    a6 = a10;
  if (a8 <= a4 + 0.0001)
    v23 = a4;
  else
    v23 = a8;
  v76.origin.x = a5;
  v76.origin.y = a6;
  v76.size.width = v21;
  v76.size.height = v23;
  v49 = CGRectIntersection(*(CGRect *)&a1, v76);
  height = v49.size.height;
  x = v49.origin.x;
  y = v49.origin.y;
  width = v49.size.width;
  v41 = a6;
  v40 = a5;
  if (CGRectIsNull(v49))
  {
    v50.origin.x = a1;
    v50.origin.y = a2;
    v50.size.width = a3;
    v50.size.height = a4;
    MinX = CGRectGetMinX(v50);
    v51.origin.x = a5;
    v51.origin.y = a6;
    v51.size.width = v21;
    v51.size.height = v23;
    rect2a = CGRectGetMinY(v51);
    v52.origin.x = a1;
    v52.origin.y = a2;
    v52.size.width = a3;
    v52.size.height = a4;
    v26 = CGRectGetWidth(v52);
    v53.origin.x = a5;
    v53.origin.y = a6;
    v53.size.width = v21;
    v53.size.height = v23;
    v54.size.height = CGRectGetHeight(v53);
    v54.origin.y = rect2a;
    v54.origin.x = MinX;
    v54.size.width = v26;
    v77.origin.x = a5;
    v77.origin.y = a6;
    v77.size.width = v21;
    v77.size.height = v23;
    v55 = CGRectIntersection(v54, v77);
    rect2 = v55.size.width;
    v46 = v55.origin.x;
    v55.origin.x = a5;
    v55.origin.y = a6;
    v55.size.width = v21;
    v55.size.height = v23;
    v39 = CGRectGetMinX(v55);
    v56.origin.x = a1;
    v56.origin.y = a2;
    v56.size.width = a3;
    v56.size.height = a4;
    MinY = CGRectGetMinY(v56);
    v57.origin.x = a5;
    v57.origin.y = a6;
    v57.size.width = v21;
    v57.size.height = v23;
    r1 = CGRectGetWidth(v57);
    v58.origin.x = a1;
    v58.origin.y = a2;
    v58.size.width = a3;
    v58.size.height = a4;
    v59.size.height = CGRectGetHeight(v58);
    v59.origin.y = MinY;
    v59.origin.x = v39;
    v59.size.width = r1;
    v78.origin.x = a5;
    v27 = v46;
    v78.origin.y = a6;
    v78.size.width = v21;
    v78.size.height = v23;
    v60 = CGRectIntersection(v59, v78);
    v28 = v60.origin.y;
    height = v60.size.height;
  }
  else
  {
    v27 = x;
    rect2 = width;
    v28 = y;
  }
  v61.origin.x = a1;
  v61.origin.y = a2;
  v61.size.width = a3;
  v61.size.height = a4;
  v79.origin.x = v27;
  v79.origin.y = v28;
  v79.size.width = rect2;
  v79.size.height = height;
  if (CGRectEqualToRect(v61, v79))
    return *MEMORY[0x1E0C9D820];
  v30 = a3;
  v62.origin.x = v27;
  v62.origin.y = v28;
  v62.size.width = rect2;
  v62.size.height = height;
  if (CGRectGetWidth(v62) == 0.0)
    v27 = v40;
  else
    v21 = rect2;
  v63.origin.x = a1;
  v63.origin.y = a2;
  v63.size.width = a3;
  v63.size.height = a4;
  v31 = CGRectGetMinX(v63);
  v64.origin.x = v27;
  v64.origin.y = v28;
  v64.size.width = v21;
  v64.size.height = height;
  if (v31 >= CGRectGetMinX(v64))
  {
    v67.origin.x = a1;
    v67.origin.y = a2;
    v67.size.width = v30;
    v67.size.height = a4;
    MaxX = CGRectGetMaxX(v67);
    v68.origin.x = v27;
    v68.origin.y = v28;
    v68.size.width = v21;
    v68.size.height = height;
    v33 = CGRectGetMaxX(v68);
  }
  else
  {
    v65.origin.x = a1;
    v65.origin.y = a2;
    v65.size.width = v30;
    v65.size.height = a4;
    MaxX = CGRectGetMinX(v65);
    v66.origin.x = v27;
    v66.origin.y = v28;
    v66.size.width = v21;
    v66.size.height = height;
    v33 = CGRectGetMinX(v66);
  }
  v29 = MaxX - v33;
  v69.origin.x = v27;
  v69.origin.y = v28;
  v69.size.width = v21;
  v69.size.height = height;
  if (CGRectGetHeight(v69) == 0.0)
  {
    height = v23;
    v28 = v41;
  }
  v70.origin.x = a1;
  v70.origin.y = a2;
  v70.size.width = v30;
  v70.size.height = a4;
  v34 = CGRectGetMinY(v70);
  v71.origin.x = v27;
  v71.origin.y = v28;
  v71.size.width = v21;
  v71.size.height = height;
  if (v34 >= CGRectGetMinY(v71))
  {
    v74.origin.x = v27;
    v74.origin.y = v28;
    v74.size.width = v21;
    v74.size.height = height;
    CGRectGetMaxY(v74);
    v75.origin.y = a2;
    v75.origin.x = a1;
    v75.size.width = v30;
    v75.size.height = a4;
    CGRectGetMaxY(v75);
  }
  else
  {
    v72.origin.x = v27;
    v72.origin.y = v28;
    v72.size.width = v21;
    v72.size.height = height;
    CGRectGetMinY(v72);
    v73.origin.y = a2;
    v73.origin.x = a1;
    v73.size.width = v30;
    v73.size.height = a4;
    CGRectGetMinY(v73);
  }
  return v29;
}

id _UIMenuForUIMenuControllerMenuItems()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  +[UIMenuController sharedMenuController](UIMenuController, "sharedMenuController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "menuItems");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v1, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v1, "count"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
          objc_msgSend(v8, "title", (_QWORD)v13);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          +[UICommand commandWithTitle:image:action:propertyList:](UICommand, "commandWithTitle:image:action:propertyList:", v9, 0, objc_msgSend(v8, "action"), 0);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v8, "dontDismiss"))
            objc_msgSend(v10, "setAttributes:", objc_msgSend(v10, "attributes") | 8);
          objc_msgSend(v2, "addObject:", v10);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v5);
    }

    +[UIMenu menuWithTitle:image:identifier:options:children:](UIMenu, "menuWithTitle:image:identifier:options:children:", &stru_1E16EDF20, 0, 0, 1, v2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_18642DE58(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

BOOL isDeferredElementVisibleInMenu(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _BOOL8 v6;
  _QWORD v8[4];
  id v9;

  v3 = a1;
  objc_msgSend(a2, "children");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __isDeferredElementVisibleInMenu_block_invoke;
  v8[3] = &unk_1E16DEB18;
  v9 = v3;
  v5 = v3;
  v6 = objc_msgSend(v4, "indexOfObjectPassingTest:", v8) != 0x7FFFFFFFFFFFFFFFLL;

  return v6;
}

id _menuElementsPreparedForDisplay(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  id obj;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v34 = a2;
  v43 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v37 = (id)objc_claimAutoreleasedReturnValue();
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  obj = v6;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    v11 = *(_QWORD *)v39;
    v35 = *(_QWORD *)v39;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v39 != v11)
          objc_enumerationMutation(obj);
        v13 = *(id *)(*((_QWORD *)&v38 + 1) + 8 * v12);
        v14 = v13;
        if ((objc_msgSend(v7, "supportsCustomViewMenuElements") & 1) == 0)
        {
          objc_opt_class();
          v14 = v13;
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v14 = v13;
            if ((objc_msgSend(v13, "_forceCustomViewSupport") & 1) == 0)
            {
              v14 = v13;
              objc_msgSend(v14, "menuElementRepresentation");
              v15 = (void *)objc_claimAutoreleasedReturnValue();

              if (!v15)
                goto LABEL_24;
              objc_msgSend(v14, "menuElementRepresentation");
              v16 = objc_claimAutoreleasedReturnValue();

              v14 = (id)v16;
            }
          }
        }
        objc_msgSend(v7, "preparer", v34);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "_willBePreparedForInitialDisplay:", v17);

        if (objc_msgSend(v14, "_isLoadingPlaceholder"))
        {
          v14 = v14;
          objc_msgSend(v7, "deferredElementDelegate");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "setDelegate:", v18);

          objc_msgSend(v14, "_fulfillIfNecessary");
          if (objc_msgSend(v14, "fulfilled")
            && (objc_msgSend(v14, "fulfilledElements"),
                v19 = (void *)objc_claimAutoreleasedReturnValue(),
                v19,
                v19))
          {
            objc_msgSend(v14, "fulfilledElements");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            +[UIMenu menuWithChildren:](UIMenu, "menuWithChildren:", v20);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            +[_UIActionBridge validatedCommandMenuForMenu:context:](_UIActionBridge, "validatedCommandMenuForMenu:context:", v21, v7);
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            v23 = objc_msgSend(v22, "_resolvedElementSize");
            objc_msgSend(v22, "children");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            _menuElementsPreparedForDisplay(v24, v23, v7, a4);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "addObjectsFromArray:", v25);

            v11 = v35;
          }
          else
          {
            objc_msgSend(v37, "addObject:", v14);
            *(_BYTE *)(a4 + 3) = 1;
          }
LABEL_24:

          goto LABEL_25;
        }
        if (objc_msgSend(v14, "_isInlineGroup"))
        {
          v14 = v14;
          v26 = v7;
          v27 = v26;
          if (objc_msgSend(v26, "tracksSelection"))
          {
            v27 = v26;
            if ((objc_msgSend(v14, "options") & 0x80) != 0)
            {
              v27 = (void *)objc_msgSend(v26, "copy");

              objc_msgSend(v27, "setTracksSelection:", 0);
            }
          }

          objc_msgSend(v14, "_resolveElementSizeWithContext:", v27);
          v28 = objc_msgSend(v14, "_resolvedElementSize");
          if ((objc_msgSend(v14, "options") & 0x80) != 0 && v28 == 2)
            *(_BYTE *)(a4 + 4) = 1;
          objc_msgSend(v14, "children");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          _menuElementsPreparedForDisplay(v29, v28, v27, a4);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "menuByReplacingChildren:", v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v37, "addObject:", v31);
          v10 = 0;
          v11 = v35;
        }
        else
        {
          objc_msgSend(v37, "addObject:", v14);
          if (a4)
          {
            if (objc_msgSend(v14, "_isLeaf"))
            {
              v14 = v14;
              if ((objc_msgSend(v14, "attributes") & 4) != 0)
                goto LABEL_24;
              *(_BYTE *)(a4 + 3) = 1;
              if (objc_msgSend(v7, "shouldTrackSelectionForVisibleIndex:elementSize:", v10, v34))
                *(_BYTE *)(a4 + 1) |= objc_msgSend(v14, "state") != 0;

            }
            else
            {
              *(_WORD *)(a4 + 2) = 257;
            }
            ++v10;
          }
        }
LABEL_25:

        ++v12;
      }
      while (v9 != v12);
      v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
      v9 = v32;
    }
    while (v32);
  }

  return v37;
}

uint64_t __isDeferredElementVisibleInMenu_block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;

  v6 = a2;
  if ((objc_msgSend(v6, "isEqual:", *(_QWORD *)(a1 + 32)) & 1) != 0
    || objc_msgSend(v6, "_isInlineGroup")
    && isDeferredElementVisibleInMenu(*(_QWORD *)(a1 + 32), v6))
  {
    v7 = 1;
    *a4 = 1;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t stateMachineSpec_block_invoke_5_6(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  objc_msgSend(v2, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "clickDriver:didPerformEvent:", v2, 2);

  LODWORD(v3) = objc_msgSend(v2, "allowsRepeatedClicks");
  if ((_DWORD)v3)
    return 2;
  else
    return 1;
}

void sub_18643531C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186436980(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_186437B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186438000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186438308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_18643A3A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id decodeQueue()
{
  if (qword_1ECD79CA8 != -1)
    dispatch_once(&qword_1ECD79CA8, &__block_literal_global_626);
  return (id)qword_1ECD79CA0;
}

void __loaderKickoffQueue_block_invoke()
{
  dispatch_workloop_t v0;
  void *v1;

  v0 = dispatch_workloop_create("UIImageView loading");
  v1 = (void *)qword_1ECD79C90;
  qword_1ECD79C90 = (uint64_t)v0;

}

void __decodeQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("UIImageView decode queue", 0);
  v1 = (void *)qword_1ECD79CA0;
  qword_1ECD79CA0 = (uint64_t)v0;

}

void _UIPopoverBackgroundViewThrowForSelector(const char *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v1 = (void *)MEMORY[0x1E0C99DA0];
  v2 = *MEMORY[0x1E0C99768];
  v3 = (void *)MEMORY[0x1E0CB3940];
  NSStringFromSelector(a1);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("-[UIPopoverBackgroundView %@] must be implemented by subclassers."), v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "raise:format:", v2, CFSTR("%@"), v4);

}

void sub_18643CA64(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_18643CE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_softClass;
  v7 = getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_softClass;
  if (!getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18643CEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUUIDClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSISchemaUUIDClass_softClass_0;
  v7 = getSISchemaUUIDClass_softClass_0;
  if (!getSISchemaUUIDClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUUIDClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSISchemaUUIDClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18643CF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18643D134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationDiscoveryToolTipDisplayContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                                                                 + 8)
                                                                                     + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationTipController.m"), 32, CFSTR("Unable to find class %s"), "SISchemaUEIDictationDiscoveryToolTipDisplayContext");

    __break(1u);
  }
}

void SiriInstrumentationLibrary_0()
{
  void *v0;
  void *v1;
  void *v2;

  if (!SiriInstrumentationLibraryCore_frameworkLibrary_0)
    SiriInstrumentationLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  if (!SiriInstrumentationLibraryCore_frameworkLibrary_0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SiriInstrumentationLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIDictationTipController.m"), 30, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getSISchemaUUIDClass_block_invoke_0(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUUID");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUUIDClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUUIDClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationTipController.m"), 31, CFSTR("Unable to find class %s"), "SISchemaUUID");

    __break(1u);
  }
}

void __getSISchemaUEIDictationDiscoveryToolTipDismissedClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationDiscoveryToolTipDismissed");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationDiscoveryToolTipDismissedClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                                + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationDiscoveryToolTipDismissedClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationTipController.m"), 34, CFSTR("Unable to find class %s"), "SISchemaUEIDictationDiscoveryToolTipDismissed");

    __break(1u);
  }
}

void __getSISchemaUEIDictationDiscoveryToolTipShownClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SiriInstrumentationLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationDiscoveryToolTipShown");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationDiscoveryToolTipShownClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                            + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSISchemaUEIDictationDiscoveryToolTipShownClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationTipController.m"), 33, CFSTR("Unable to find class %s"), "SISchemaUEIDictationDiscoveryToolTipShown");

    __break(1u);
  }
}

double __UIViewReadableWidthForBodyFont()
{
  return __UIViewReadableWidthForFont(0);
}

void UIViewReportBrokenSuperviewChain(void *a1, void *a2, int a3)
{
  _QWORD *v5;
  id v6;
  _BOOL4 v7;
  int has_internal_diagnostics;
  unint64_t v9;
  NSObject *v10;
  const char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  const char *v16;
  int v17;
  _QWORD *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if ((_MergedGlobals_330 & 1) != 0)
    goto LABEL_28;
  _MergedGlobals_330 = 1;
  if (!v5)
  {
    v7 = 0;
    if (!a3)
      goto LABEL_13;
LABEL_6:
    if (!dyld_program_sdk_at_least())
      goto LABEL_13;
    has_internal_diagnostics = os_variant_has_internal_diagnostics();
    if (v7)
    {
      if (!has_internal_diagnostics)
      {
        v9 = qword_1EDDCA628;
        if (!qword_1EDDCA628)
        {
          v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v9, (unint64_t *)&qword_1EDDCA628);
        }
        v10 = *(NSObject **)(v9 + 8);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          goto LABEL_12;
        goto LABEL_28;
      }
      __UIFaultDebugAssertLog();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      {
        v17 = 138412546;
        v18 = v5;
        v19 = 2112;
        v20 = v6;
        v16 = "View doesn't recognize its superview as a UIView. This can happen through use of CALayer API on the view l"
              "ayers instead of UIView API on the views. \n"
              "\tview: %@\n"
              "\tsuperview: %@\n"
              "Break on UIViewReportBrokenSuperviewChain to debug.";
LABEL_34:
        _os_log_fault_impl(&dword_185066000, v15, OS_LOG_TYPE_FAULT, v16, (uint8_t *)&v17, 0x16u);
      }
    }
    else
    {
      if (!has_internal_diagnostics)
      {
        v14 = qword_1EDDCA630;
        if (!qword_1EDDCA630)
        {
          v14 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v14, (unint64_t *)&qword_1EDDCA630);
        }
        v10 = *(NSObject **)(v14 + 8);
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
LABEL_26:
        v17 = 138412546;
        v18 = v5;
        v19 = 2112;
        v20 = v6;
        v11 = "view.superview is nil during traversal after it has appeared in superview's subviews. \n"
              "\tview: %@\n"
              "\texpected superview: %@\n"
              "Break on UIViewReportBrokenSuperviewChain to debug.";
        goto LABEL_27;
      }
      __UIFaultDebugAssertLog();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      {
        v17 = 138412546;
        v18 = v5;
        v19 = 2112;
        v20 = v6;
        v16 = "view.superview is nil during traversal after it has appeared in superview's subviews. \n"
              "\tview: %@\n"
              "\texpected superview: %@\n"
              "Break on UIViewReportBrokenSuperviewChain to debug.";
        goto LABEL_34;
      }
    }

    goto LABEL_28;
  }
  v7 = (v5[13] & 0x8000000) == 0;
  if (a3)
    goto LABEL_6;
LABEL_13:
  if (!v7)
  {
    v13 = qword_1EDDCA640;
    if (!qword_1EDDCA640)
    {
      v13 = __UILogCategoryGetNode("View", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v13, (unint64_t *)&qword_1EDDCA640);
    }
    v10 = *(NSObject **)(v13 + 8);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    goto LABEL_26;
  }
  v12 = qword_1EDDCA638;
  if (!qword_1EDDCA638)
  {
    v12 = __UILogCategoryGetNode("View", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v12, (unint64_t *)&qword_1EDDCA638);
  }
  v10 = *(NSObject **)(v12 + 8);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
LABEL_12:
    v17 = 138412546;
    v18 = v5;
    v19 = 2112;
    v20 = v6;
    v11 = "View doesn't recognize its superview as a UIView. This can happen through use of CALayer API on the view layer"
          "s instead of UIView API on the views. \n"
          "\tview: %@\n"
          "\tsuperview: %@\n"
          "Break on UIViewReportBrokenSuperviewChain to debug.";
LABEL_27:
    _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v17, 0x16u);
  }
LABEL_28:

}

BOOL _UIViewIsFullyTransparentGivenAlpha(double a1)
{
  return a1 < 0.01;
}

double _UIGetDefaultSpringParameters(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  double result;

  _UILoadDefaultSpringParameters();
  if (a1)
  {
    result = *(double *)&_UIViewDefaultSpringMass;
    *a1 = _UIViewDefaultSpringMass;
  }
  if (a2)
  {
    result = *(double *)&_UIViewDefaultSpringStiffness;
    *a2 = _UIViewDefaultSpringStiffness;
  }
  if (a3)
  {
    result = *(double *)&_UIViewDefaultSpringDamping;
    *a3 = _UIViewDefaultSpringDamping;
  }
  if (a4)
  {
    result = *(double *)&_UIViewDefaultSpringDuration;
    *a4 = _UIViewDefaultSpringDuration;
  }
  return result;
}

void _UISetDefaultSpringParameters(double a1, double a2, double a3, double a4)
{
  _UIViewDefaultSpringIgnoreUserDefaults = 1;
  _UIViewDefaultSpringMass = *(_QWORD *)&a1;
  _UIViewDefaultSpringStiffness = *(_QWORD *)&a2;
  _UIViewDefaultSpringDamping = *(_QWORD *)&a3;
  _UIViewDefaultSpringDuration = *(_QWORD *)&a4;
}

void _UISaveDefaultSpringParameters()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  _UIKitUserDefaults();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = CFSTR("mass");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&_UIViewDefaultSpringMass);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = v1;
  v6[1] = CFSTR("stiffness");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&_UIViewDefaultSpringStiffness);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v2;
  v6[2] = CFSTR("damping");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&_UIViewDefaultSpringDamping);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[2] = v3;
  v6[3] = CFSTR("duration");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&_UIViewDefaultSpringDuration);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[3] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setValue:forKey:", v5, CFSTR("DefaultSpringParameters"));

}

double *_UIViewCurlUpTransitionToTime(double *result, double a2, double a3)
{
  double v3;
  double v4;
  float v5;
  float v6;

  v3 = a2 * 0.174;
  v4 = a2 * 0.174 + a3 * 0.985 + 200.0;
  v5 = (a2 * 0.174 + *result * 0.985 + 200.0) / v4;
  v6 = fminf(fmaxf(v5, 0.65), 0.9);
  if (v6 != v5)
    *result = (v4 * v6 + -200.0 - v3) / 0.985;
  return result;
}

void sub_186441338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _layerAndPropertyForTrackedAnimation(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  id v10;
  id v11;

  v5 = a1;
  objc_getAssociatedObject(v5, &unk_1EDDCA604);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_getAssociatedObject(v5, &unk_1EDDCA603);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (a3)
    v8 = v7 == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (!v8)
  {
    v10 = objc_retainAutorelease(v7);
LABEL_11:
    *a3 = v10;
    goto LABEL_12;
  }
  if (a3)
  {
    v10 = 0;
    goto LABEL_11;
  }
LABEL_12:
  if (a2 && v6)
  {
    v11 = objc_retainAutorelease(v6);
    v9 = 1;
LABEL_17:
    *a2 = v11;
    goto LABEL_18;
  }
  if (a2)
  {
    v11 = 0;
    goto LABEL_17;
  }
LABEL_18:

  return v9;
}

double _calculatedSystemSpacing(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "_autolayoutSpacingAtEdge:forAttribute:nextToNeighbor:edge:attribute:multiplier:", 5, 12, v4, 6, 11, 1.0);
  v6 = v5;
  objc_msgSend(v4, "_internalLastBaselineOffsetFromBottom");
  v8 = v7;

  objc_msgSend(v3, "_internalFirstBaselineOffsetFromTop");
  v10 = v9;

  return v6 - (v8 + v10);
}

id UIViewMissingInitialTraitCollection(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  unint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint8_t buf[4];
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  _UIIsPrivateMainBundle();
  if (dyld_program_sdk_at_least())
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UITraitCollection *UIViewMissingInitialTraitCollection(UIView *__strong)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject handleFailureInFunction:file:lineNumber:description:](v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIView.m"), 6762, CFSTR("UIView is missing its initial trait collection populated during initialization. This is a serious bug, likely caused by accessing properties or methods on the view before calling a UIView initializer. View: %@"), v1);

LABEL_3:
    goto LABEL_9;
  }
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      v10 = v1;
      _os_log_fault_impl(&dword_185066000, v2, OS_LOG_TYPE_FAULT, "UIView is missing its initial trait collection populated during initialization. This is a serious bug, likely caused by accessing properties or methods on the view before calling a UIView initializer. View: %@ Set a symbolic breakpoint on UIViewMissingInitialTraitCollection and check the backtrace to see what's causing this. This will become an assert in a future version.", buf, 0xCu);
    }
    goto LABEL_3;
  }
  v4 = UIViewMissingInitialTraitCollection___s_category;
  if (!UIViewMissingInitialTraitCollection___s_category)
  {
    v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v4, (unint64_t *)&UIViewMissingInitialTraitCollection___s_category);
  }
  v5 = *(NSObject **)(v4 + 8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v10 = v1;
    _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "UIView is missing its initial trait collection populated during initialization. This is a serious bug, likely caused by accessing properties or methods on the view before calling a UIView initializer. View: %@ Set a symbolic breakpoint on UIViewMissingInitialTraitCollection and check the backtrace to see what's causing this. This will become an assert in a future version.", buf, 0xCu);
  }
LABEL_9:
  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "traitCollection");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void UIViewReturningStaleTraitCollection(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  NSObject *v11;
  uint8_t buf[4];
  id v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  +[UITraitCollection _descriptionForChangeFromTraitCollection:toTraitCollection:](UITraitCollection, "_descriptionForChangeFromTraitCollection:toTraitCollection:", a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = &stru_1E16EDF20;
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_LogStaleViewTraitCollectionBacktrace, (uint64_t)CFSTR("LogStaleViewTraitCollectionBacktrace"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EDDA848C)
  {
    v8 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringWithFormat:", CFSTR(" Backtrace: \n%@"), v9);
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  v10 = UIViewReturningStaleTraitCollection___s_category;
  if (!UIViewReturningStaleTraitCollection___s_category)
  {
    v10 = __UILogCategoryGetNode("StaleTraitCollection", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v10, (unint64_t *)&UIViewReturningStaleTraitCollection___s_category);
  }
  v11 = *(NSObject **)(v10 + 8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412802;
    v13 = v5;
    v14 = 2112;
    v15 = v6;
    v16 = 2112;
    v17 = v7;
    _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "Returning stale traitCollection for view: %@ \nPending trait updates: %@%@", buf, 0x20u);
  }

}

uint64_t _UIViewShouldReturnSubviewsInFocusItemsInRect()
{
  if ((_UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_ViewReturnsSubviewsInFocusItemsInRect, (uint64_t)CFSTR("ViewReturnsSubviewsInFocusItemsInRect"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger) & 1) != 0|| !qword_1EDDA84A0)
  {
    return dyld_program_sdk_at_least();
  }
  else
  {
    return qword_1EDDA84A0 >= 0;
  }
}

uint64_t _UIViewIsTransparentFocusItem(void *a1)
{
  id v1;
  double v2;
  void *v3;
  void *v4;
  double v5;
  _BOOL4 v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v1 = a1;
  if ((objc_msgSend(v1, "isHidden") & 1) != 0 || (objc_msgSend(v1, "alpha"), v2 < 0.01))
  {
    v7 = 1;
  }
  else
  {
    objc_msgSend(v1, "backgroundColor");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_msgSend(v1, "backgroundColor");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "alphaComponent");
      v6 = fabs(v5) < 2.22044605e-16;

    }
    else
    {
      v6 = 1;
    }

    objc_msgSend(v1, "layer");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "contents");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
      v7 = 0;
    else
      v7 = v6;
  }

  return v7;
}

id _UIViewTextRedactedIfNecessaryForDescription(void *a1)
{
  id v1;
  BOOL v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v1 = a1;
  v2 = +[UIView _shouldRedactTextInDescription](UIView, "_shouldRedactTextInDescription");
  v3 = objc_msgSend(v1, "length");
  if (v2)
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    if (v3 < 3)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("'%@'"), v1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v1;
    }
    else
    {
      v5 = objc_msgSend(v1, "rangeOfComposedCharacterSequenceAtIndex:", 0);
      objc_msgSend(v1, "substringWithRange:", v5, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v1, "rangeOfComposedCharacterSequenceAtIndex:", objc_msgSend(v1, "length") - 1);
      objc_msgSend(v1, "substringWithRange:", v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "stringWithFormat:", CFSTR("'%@...%@' (length = %ld)"), v7, v10, objc_msgSend(v1, "length"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v12 = v1;
    if (v3 >= 0x1A)
    {
      v13 = objc_msgSend(v1, "rangeOfComposedCharacterSequencesForRange:", 0, 25);
      objc_msgSend(v1, "substringWithRange:", v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringByAppendingString:", CFSTR("..."));
      v12 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v16 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v12, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR(" "));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "stringWithFormat:", CFSTR("'%@'"), v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v11;
}

uint64_t UIViewIgnoresTouchEvents(void *a1)
{
  id v1;
  int v2;
  char v3;
  uint64_t v4;

  v1 = a1;
  v2 = _UIViewAnimationDelegateAllowsUserInteraction(v1);
  v3 = _UIViewEatsTouchesAndAnimationDelegateAllowsInteraction(v1, v2);
  v4 = _UIViewIgnoresTouchEvents(v1, v3);

  return v4;
}

void sub_186449F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *_traitCollectionIfValid(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    while ((objc_msgSend(v3, "_cachedTraitCollectionIsValid") & 1) == 0 && !v3[12])
    {
      v3 = (id)objc_msgSend(v3, "superview");
      if (!v3)
        goto LABEL_9;
    }
    objc_msgSend(v2, "traitCollection");
    v3 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }
LABEL_9:

  return v3;
}

void sub_18644A3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18644A73C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __UIVIEW_IS_EXECUTING_ALONGSIDE_ANIMATION_BLOCK__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_18644CE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _enumerateViewForest(void *a1, uint64_t a2, _BYTE *a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5 && objc_msgSend(v5, "count"))
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
LABEL_5:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v11);
        (*(void (**)(uint64_t, void *, _BYTE *))(a2 + 16))(a2, v12, a3);
        if (*a3)
          break;
        objc_msgSend(v12, "subviews", (_QWORD)v14);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        _enumerateViewForest(v13, a2, a3);

        if (v9 == ++v11)
        {
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
          if (v9)
            goto LABEL_5;
          break;
        }
      }
    }

  }
}

void sub_18644E540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void RecursivelyNameLayerTree(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  objc_class *v4;
  id v5;
  void *v6;
  void *v7;
  objc_class *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "valueForKey:", CFSTR("name"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v2)
  {
    objc_msgSend(v1, "delegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (objc_class *)objc_opt_class();
    if (v3)
      v5 = v3;
    else
      v5 = v1;
    NSStringFromClass(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = (void *)MEMORY[0x1E0CB3940];
      v8 = (objc_class *)objc_opt_class();
      NSStringFromClass(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "stringWithFormat:", CFSTR("%@(%@)"), v9, v6);
      v10 = objc_claimAutoreleasedReturnValue();

      v5 = v1;
      v6 = (void *)v10;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ (%p)"), v6, v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setValue:forKey:", v11, CFSTR("name"));

  }
  objc_msgSend(v1, "valueForKey:", CFSTR("UICALayerRenderID"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", CALayerGetRenderId());
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setValue:forKey:", v13, CFSTR("UICALayerRenderID"));

  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(v1, "sublayers");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v20 != v17)
          objc_enumerationMutation(v14);
        RecursivelyNameLayerTree(*(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i));
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v16);
  }

}

void sub_186450974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIClippingFaultLog()
{
  if (qword_1EDDCA810 != -1)
    dispatch_once(&qword_1EDDCA810, &__block_literal_global_2851);
  return (id)qword_1EDDCA808;
}

__CFString *_UIViewContentModeToString(unint64_t a1)
{
  if (a1 < 0xD)
    return off_1E16EC0B0[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(Unknown UIViewContentMode: %ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void ___shouldEnableUIKitParallaxEffects_block_invoke()
{
  void *v0;
  void *v1;
  char v2;
  id v3;

  _UIKitPreferencesOnce();
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("UIEnableParallaxEffects"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;
  byte_1EDDCA612 = v2;

}

void sub_186453328(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1864534EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186453644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186453778(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t _submitAppForegroundStatus()
{
  uint64_t result;

  result = _shouldGatherAnalytics();
  if ((_DWORD)result)
    return AnalyticsSendEventLazy();
  return result;
}

void ___timebaseInfo_block_invoke()
{
  kern_return_t v0;
  kern_return_t v1;
  NSObject *v2;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = mach_timebase_info((mach_timebase_info_t)&dword_1ECD825B8);
  if (v0)
  {
    v1 = v0;
    _uiMultitouchAnalyticsLog();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3[0] = 67109120;
      v3[1] = v1;
      _os_log_error_impl(&dword_185066000, v2, OS_LOG_TYPE_ERROR, "Analytics: Unable to get mach timebase info. Error: %d", (uint8_t *)v3, 8u);
    }

  }
}

id _windowToTouchesMap()
{
  if (qword_1ECD825D8[0] != -1)
    dispatch_once(qword_1ECD825D8, &__block_literal_global_34_5);
  return (id)qword_1ECD825D0;
}

void ___windowToTouchesMap_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECD825D0;
  qword_1ECD825D0 = v0;

}

uint64_t ___beginAppForegroundAnalyticsTimer_block_invoke()
{
  return _submitAppForegroundStatus();
}

id ___submitAppForegroundStatus_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  double v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v10;
  _QWORD v11[2];
  uint8_t buf[4];
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
  {
    if (qword_1ECD825C0 != -1)
      dispatch_once(&qword_1ECD825C0, &__block_literal_global_31_5);
    v1 = mach_absolute_time();
    LODWORD(v2) = dword_1ECD825B8;
    LODWORD(v3) = unk_1ECD825BC;
    v4 = (double)(v1 - qword_1ECD82598) * (double)v2 / (double)v3 / 1000000000.0;
    _uiMultitouchAnalyticsLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v13 = v4;
      _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_INFO, "Analytics: Reporting foreground time: %.3f sec", buf, 0xCu);
    }

    _UIMainBundleIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4, CFSTR("bundleID"), CFSTR("appForegroundActiveDuration"), v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[1] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    qword_1ECD82598 = v1;
  }
  else
  {
    v8 = (void *)MEMORY[0x1E0C9AA70];
  }
  return v8;
}

uint64_t _UIDatePickerNumberOfDaysBetweenDates(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v5 = a3;
  v6 = a1;
  objc_msgSend(v6, "components:fromDate:", 30, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "components:fromDate:", 30, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "setHour:", 12);
  objc_msgSend(v8, "setHour:", 12);
  objc_msgSend(v6, "dateFromComponents:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dateFromComponents:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "components:fromDate:toDate:options:", 16, v9, v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = objc_msgSend(v11, "day");
  return v12;
}

id _daysAssignedToMonth(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_opt_new();
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = v3;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v15;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v6);
        v11 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v10), "copyWithAssignedMonth:", v4, (_QWORD)v14);
        objc_msgSend(v5, "addObject:", v11);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v8);
  }

  v12 = (void *)objc_msgSend(v5, "copy");
  return v12;
}

id _joinedArrayFromArrays(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  int v10;
  uint64_t *v11;
  void *v12;
  uint64_t *v14;

  v9 = (void *)objc_opt_new();
  v14 = &a9;
  v10 = 3;
  do
  {
    v11 = v14++;
    objc_msgSend(v9, "addObjectsFromArray:", *v11);
    --v10;
  }
  while (v10);
  v12 = (void *)objc_msgSend(v9, "copy");

  return v12;
}

void ___animationForValueAndKeyPath_block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = _UIInternalPreference_UIViewDebugSignposts_block_invoke___s_category_15;
  if (!_UIInternalPreference_UIViewDebugSignposts_block_invoke___s_category_15)
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIInternalPreference_UIViewDebugSignposts_block_invoke___s_category_15);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "Animating the frame via absolute animations is not supported. Animation key path '%@' value '%@'", (uint8_t *)&v6, 0x16u);
  }
}

void ___animationForValueAndKeyPath_block_invoke_27(double *a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  CGFloat v5;
  CGFloat v6;
  NSObject *v7;
  void *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;
  uint64_t v13;
  CGSize v14;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = _UIInternalPreference_UIViewDebugSignposts_block_invoke_2___s_category_2[0];
  if (!_UIInternalPreference_UIViewDebugSignposts_block_invoke_2___s_category_2[0])
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, _UIInternalPreference_UIViewDebugSignposts_block_invoke_2___s_category_2);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *((_QWORD *)a1 + 4);
    v5 = a1[7];
    v6 = a1[8];
    v7 = v3;
    v14.width = v5;
    v14.height = v6;
    NSStringFromCGSize(v14);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138412546;
    v10 = v4;
    v11 = 2112;
    v12 = v8;
    _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "The size component of frame is not animatable. The change in size will be ignored. Animation key path '%@' delta size '%@'", (uint8_t *)&v9, 0x16u);

  }
}

uint64_t _UIViewLayerGetNearestAncestorView(void *a1)
{
  void *v1;
  uint64_t result;

  v1 = a1;
  for (result = objc_msgSend(a1, "unsafeUnretainedDelegate");
        v1 && !result;
        result = objc_msgSend(v1, "unsafeUnretainedDelegate"))
  {
    v1 = (void *)objc_msgSend(v1, "superlayer");
  }
  return result;
}

uint64_t _IsKindOfUIView(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*MethodImplementation)(uint64_t, char *);

  if (a1)
  {
    v1 = a1;
    MethodImplementation = (uint64_t (*)(uint64_t, char *))object_getMethodImplementation();
    if (MethodImplementation != (uint64_t (*)(uint64_t, char *))MEMORY[0x1E0DE79B8])
      return MethodImplementation(v1, sel___isKindOfUIView);
    objc_opt_class();
    LOBYTE(a1) = objc_opt_isKindOfClass();
  }
  return a1 & 1;
}

id getEMFStringUtilitiesClass_1()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEMFStringUtilitiesClass_softClass_1;
  v7 = getEMFStringUtilitiesClass_softClass_1;
  if (!getEMFStringUtilitiesClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getEMFStringUtilitiesClass_block_invoke_1;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getEMFStringUtilitiesClass_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18645698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFSkinToneSpecifierTypeFitzpatrickSilhouette_0()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr_0;
  v8 = getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr_0;
  if (!getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr_0)
  {
    v1 = EmojiFoundationLibrary_5();
    v0 = (id *)dlsym(v1, "EMFSkinToneSpecifierTypeFitzpatrickSilhouette");
    v6[3] = (uint64_t)v0;
    getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr_0 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getEMFSkinToneSpecifierTypeFitzpatrickSilhouette(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardEmojiFamilyConfigurationView.m"), 23, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_186456F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186457280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186457514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186457914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864584E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEMFStringUtilitiesClass_block_invoke_1(uint64_t a1)
{
  void *v2;
  void *v3;

  EmojiFoundationLibrary_5();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EMFStringUtilities");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEMFStringUtilitiesClass_softClass_1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getEMFStringUtilitiesClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardEmojiFamilyConfigurationView.m"), 22, CFSTR("Unable to find class %s"), "EMFStringUtilities");

    __break(1u);
  }
}

void *EmojiFoundationLibrary_5()
{
  void *v0;
  void *v2;
  void *v3;

  if (!EmojiFoundationLibraryCore_frameworkLibrary_5)
    EmojiFoundationLibraryCore_frameworkLibrary_5 = _sl_dlopen();
  v0 = (void *)EmojiFoundationLibraryCore_frameworkLibrary_5;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *EmojiFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIKeyboardEmojiFamilyConfigurationView.m"), 21, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __setCustomizationDataForIdentifier(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a1;
  objc_msgSend(CFSTR("com.apple.UIKit.UINavigationBarCustomizations."), "stringByAppendingString:", a2);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v3, v5);

}

void sub_18645BB0C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id _CreateViewForLayer(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  objc_class *v6;
  objc_class *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v5);
  v6 = (objc_class *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
    v7 = (objc_class *)objc_opt_class();

  v8 = (void *)objc_msgSend([v7 alloc], "_initWithLayer:", v3);
  objc_msgSend(v3, "sublayers");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "copy");

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v11 = v10;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v19 != v14)
          objc_enumerationMutation(v11);
        _CreateViewForLayer(*(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * i), v4);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addSubview:", v16, (_QWORD)v18);

      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v13);
  }

  return v8;
}

uint64_t _UIInterfaceOrientationFromCATransform3D(_OWORD *a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CATransform3D v23;
  CATransform3D a;

  if (_MergedGlobals_1334 != -1)
    dispatch_once(&_MergedGlobals_1334, &__block_literal_global_671);
  v2 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v2;
  v3 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v3;
  v4 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v4;
  v5 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v5;
  if (!MEMORY[0x186DC5824](&a))
    return 0;
  v6 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v6;
  v7 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v7;
  v8 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v8;
  v9 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v9;
  v23 = *(CATransform3D *)byte_1ECD826D8;
  if (CATransform3DEqualToTransform(&a, &v23))
    return 1;
  v11 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v11;
  v12 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v12;
  v13 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v13;
  v14 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v14;
  v23 = *(CATransform3D *)byte_1ECD827D8;
  if (CATransform3DEqualToTransform(&a, &v23))
    return 4;
  v15 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v15;
  v16 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v16;
  v17 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v17;
  v18 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v18;
  v23 = *(CATransform3D *)byte_1ECD82858;
  if (CATransform3DEqualToTransform(&a, &v23))
    return 3;
  v19 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v19;
  v20 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v20;
  v21 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v21;
  v22 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v22;
  v23 = *(CATransform3D *)byte_1ECD82758;
  if (CATransform3DEqualToTransform(&a, &v23))
    return 2;
  else
    return 0;
}

void sub_186466478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _targetFrameForTargetedPreviewInContainerView(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v3 = a1;
  v4 = a2;
  if (!v3)
    goto LABEL_6;
  objc_msgSend(v3, "target");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "container");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!v6 || !v7)
  {

LABEL_6:
    v23 = *MEMORY[0x1E0C9D628];
    goto LABEL_7;
  }
  objc_msgSend(v6, "frame");
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  objc_msgSend(v5, "center");
  v18 = v17;
  v20 = v19;
  objc_msgSend(v8, "_currentScreenScale");
  UIRectCenteredAboutPointScale(v10, v12, v14, v16, v18, v20, v21);
  objc_msgSend(v8, "convertRect:toCoordinateSpace:", v4);
  v23 = v22;

LABEL_7:
  return v23;
}

void sub_1864688F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864698AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void _setCornerCurveOnLayer(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = (_QWORD *)MEMORY[0x1E0CD2A68];
    if (!(_DWORD)a1)
      v3 = (_QWORD *)MEMORY[0x1E0CD2A60];
    objc_msgSend(v4, "setCornerCurve:", *v3);
  }
  else
  {
    objc_msgSend(v4, "setContinuousCorners:", a1);
  }

}

void sub_186472C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

CGImage *CachedShadowContents(uint64_t a1, double a2, double a3, double a4, double a5)
{
  size_t v5;
  void *v11;
  uint64_t v12;
  CGImage *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  CGColor *v19;
  id v20;
  CGColor *v21;
  uint64_t AlignedBytesPerRow;
  size_t v23;
  CGColorSpace *DeviceRGB;
  CGContext *v25;
  double v26;
  double v27;
  id v28;
  CGImageRef Image;
  CGAffineTransform v31;
  CGSize v32;
  CGRect v33;
  CGRect v34;

  if (qword_1ECD7B820 != -1)
    dispatch_once(&qword_1ECD7B820, &__block_literal_global_467_0);
  +[_UIStackedImageShadowImageKey keyWithShadowRadius:cornerRadius:isContinuousCorner:white:alpha:](_UIStackedImageShadowImageKey, "keyWithShadowRadius:cornerRadius:isContinuousCorner:white:alpha:", a1, a2, a3, a4, a5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1ECD7B828, "objectForKey:", v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (CGImage *)v12;
  if (a2 != 0.0 && !v12)
  {
    v14 = a2 + a2;
    v15 = 1.0;
    if ((_DWORD)a1)
      objc_msgSend(MEMORY[0x1E0CD27A8], "cornerCurveExpansionFactor:", *MEMORY[0x1E0CD2A68], 1.0);
    v16 = v14 + v15 * a3 + v14 + v15 * a3;
    v17 = v14 + v14 + v16;
    +[UIColor blackColor](UIColor, "blackColor");
    v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v19 = (CGColor *)objc_msgSend(v18, "CGColor");

    +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", a4, a5);
    v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v21 = (CGColor *)objc_msgSend(v20, "CGColor");

    LODWORD(v5) = vcvtpd_s64_f64(v17);
    AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
    if ((int)v5 < 1)
    {
      v25 = 0;
    }
    else
    {
      v23 = AlignedBytesPerRow;
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      v25 = CGBitmapContextCreate(0, v5, v5, 8uLL, v23, DeviceRGB, 0x2002u);
      CGColorSpaceRelease(DeviceRGB);
      if (v25)
      {
        v33.origin.x = 0.0;
        v33.origin.y = 0.0;
        v33.size.width = (double)(int)v5;
        v33.size.height = (double)(int)v5;
        CGContextClearRect(v25, v33);
        CGContextTranslateCTM(v25, 0.0, (double)(int)v5);
        CGContextScaleCTM(v25, 1.0, -1.0);
        CGContextGetCTM(&v31, v25);
        CGContextSetBaseCTM();
      }
    }
    v32.width = 0.0;
    v32.height = v14 + v16;
    CGContextSetShadowWithColor(v25, v32, v14, v21);
    CGContextSetFillColorWithColor(v25, v19);
    if (a3 <= 0.0)
    {
      v34.origin.x = (v17 - v16) * 0.5;
      v34.origin.y = -v16;
      v34.size.width = v16;
      v34.size.height = v16;
      CGContextFillRect(v25, v34);
    }
    else
    {
      v26 = (v17 - v16) * 0.5;
      v27 = -v16;
      if ((a1 & 1) != 0)
        +[UIBezierPath _continuousRoundedRectBezierPath:withRoundedCorners:cornerRadius:segments:](UIBezierPath, "_continuousRoundedRectBezierPath:withRoundedCorners:cornerRadius:segments:", -1, 16, v26, v27, v16, v16, a3, a3);
      else
        +[UIBezierPath bezierPathWithRoundedRect:cornerRadius:](UIBezierPath, "bezierPathWithRoundedRect:cornerRadius:", v26, v27, v16, v16, a3);
      v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      CGContextAddPath(v25, (CGPathRef)objc_msgSend(v28, "CGPath"));
      CGContextFillPath(v25);

    }
    Image = CGBitmapContextCreateImage(v25);
    CGContextRelease(v25);
    if (Image)
    {
      v13 = Image;
      objc_msgSend((id)qword_1ECD7B828, "setObject:forKey:", v13, v11);
      CGImageRelease(v13);
    }
    else
    {
      v13 = 0;
    }
  }

  return v13;
}

void __placeholderBackgroundColor_block_invoke()
{
  id v0;

  +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.7, 1.0);
  v0 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  qword_1ECD7B810 = (uint64_t)CGColorRetain((CGColorRef)objc_msgSend(v0, "CGColor"));

}

__CFString *_UIImageSymbolConfigurationTextualSummary(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  __CFString *v3;
  void *v4;
  double v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  double v11;
  void *v12;
  double v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  __CFString *v20;
  unint64_t v21;
  const __CFString *v22;
  const __CFString *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v40;

  v1 = a1;
  v2 = v1;
  if (!v1 || (objc_msgSend(v1, "_isUnspecified") & 1) != 0)
  {
    v3 = CFSTR("Unspecified");
    goto LABEL_41;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2[10])
  {
    objc_msgSend(v2, "customFontPointSizeMultiplier");
    if (fabs(v5 + -1.0) <= 2.22044605e-16)
    {
      objc_msgSend(v2, "textStyle");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      _NSStringFromUIFontTextStyle(v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v8);
    }
    else
    {
      v6 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v2, "textStyle");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      _NSStringFromUIFontTextStyle(v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "customFontPointSizeMultiplier");
      objc_msgSend(v6, "stringWithFormat:", CFSTR("%@ (%gx)"), v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v10);

    }
    objc_msgSend(v2, "pointSizeForScalingWithTextStyle");
    if (v11 > 0.0)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("scaled from %gpt"), *(_QWORD *)&v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v12);

    }
  }
  if ((v2[5] & 1) != 0)
  {
    objc_msgSend(v2, "customFontPointSizeMultiplier");
    v14 = (void *)MEMORY[0x1E0CB3940];
    if (fabs(v13 + -1.0) <= 2.22044605e-16)
    {
      v17 = 0;
      if ((v2[5] & 1) != 0)
        v17 = v2[4];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%gpt"), v17, v40);
    }
    else
    {
      v15 = 0;
      if ((v2[5] & 1) != 0)
        v15 = v2[4];
      objc_msgSend(v2, "customFontPointSizeMultiplier");
      objc_msgSend(v14, "stringWithFormat:", CFSTR("%gpt (%gx)"), v15, v16);
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v18);

  }
  if (v2[9])
  {
    v19 = objc_msgSend(v2, "weight");
    if (v19 > 9)
      v20 = 0;
    else
      v20 = off_1E16EC6A8[v19];
    objc_msgSend(v4, "addObject:", v20);
  }
  if (objc_msgSend(v2, "_hasSpecifiedScale"))
  {
    v21 = objc_msgSend(v2, "scale") + 1;
    if (v21 > 4)
      v22 = CFSTR("Unknown");
    else
      v22 = off_1E16EC6F8[v21];
    objc_msgSend(v4, "addObject:", v22);
  }
  if ((objc_msgSend(v2, "_prefersMulticolor") & 1) != 0)
  {
    v23 = CFSTR("Prefers Multicolor");
LABEL_33:
    objc_msgSend(v4, "addObject:", v23);
    goto LABEL_34;
  }
  if (objc_msgSend(v2, "_prefersMonochrome"))
  {
    v23 = CFSTR("Prefers Monochrome");
    goto LABEL_33;
  }
LABEL_34:
  if (v2[6])
  {
    v24 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v2, "_namedColorStyles");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "allKeys");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "componentsJoinedByString:", CFSTR(","));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "stringWithFormat:", CFSTR("Named Color Styles: %@"), v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v28);

  }
  if (objc_msgSend(v2, "_hasSpecifiedHierarchicalColors"))
  {
    v29 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v2, "_colors");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "valueForKeyPath:", CFSTR("systemColorName"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "componentsJoinedByString:", CFSTR(","));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "stringWithFormat:", CFSTR("Hierarchical Color: %@"), v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v33);

  }
  if (objc_msgSend(v2, "_hasSpecifiedPaletteColors"))
  {
    v34 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v2, "_colors");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "valueForKeyPath:", CFSTR("systemColorName"));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "componentsJoinedByString:", CFSTR(","));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "stringWithFormat:", CFSTR("Palette Colors: %@"), v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v38);

  }
  objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();

LABEL_41:
  return v3;
}

__CFString *_NSStringFromUIFontTextStyle(void *a1)
{
  id v1;
  __CFString *v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleTitle0")) & 1) != 0)
  {
    v2 = CFSTR("Large Title");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleTitle1")) & 1) != 0)
  {
    v2 = CFSTR("Title 1");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleTitle2")) & 1) != 0)
  {
    v2 = CFSTR("Title 2");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleTitle3")) & 1) != 0)
  {
    v2 = CFSTR("Title 3");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleHeadline")) & 1) != 0)
  {
    v2 = CFSTR("Headline");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleSubhead")) & 1) != 0)
  {
    v2 = CFSTR("Subheadline");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleBody")) & 1) != 0)
  {
    v2 = CFSTR("Body");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleCallout")) & 1) != 0)
  {
    v2 = CFSTR("Callout");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleFootnote")) & 1) != 0)
  {
    v2 = CFSTR("Footnote");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleCaption1")) & 1) != 0)
  {
    v2 = CFSTR("Caption 1");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UICTFontTextStyleCaption2")) & 1) != 0)
  {
    v2 = CFSTR("Caption 2");
  }
  else
  {
    v2 = (__CFString *)v1;
  }

  return v2;
}

id _UIPopoverPresentationControllerSourceItemUpCast(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

id _UIPopoverPresentationControllerSourceItemNearestViewController(void *a1)
{
  void *v1;
  void *v2;

  _UIPopoverPresentationControllerSourceItemUpCast(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_nearestViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _UIPopoverPresentationControllerSourceItemObscuredSource(void *a1)
{
  void *v1;
  void *v2;

  _UIPopoverPresentationControllerSourceItemUpCast(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    +[_UIObscuredPopoverPresentationControllerSourceItem obscuredSourceItemForItem:](_UIObscuredPopoverPresentationControllerSourceItem, "obscuredSourceItemForItem:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id _UIViewLFLDDescriptionForArray(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(CFSTR("(\n"), "mutableCopy");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7), "_lfld_description");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "appendFormat:", CFSTR("\t%@\n"), v8);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  objc_msgSend(v2, "appendString:", CFSTR(")"));
  return v2;
}

void sub_18647E748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getWTWritingToolsViewControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)_MergedGlobals_1336;
  v7 = _MergedGlobals_1336;
  if (!_MergedGlobals_1336)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getWTWritingToolsViewControllerClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getWTWritingToolsViewControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186481808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getWTWritingToolsViewControllerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECD828F0)
    qword_1ECD828F0 = _sl_dlopen();
  result = objc_getClass("WTWritingToolsViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_1336 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

double quadBoundingBox(double *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = a1[4];
  v4 = a1[6];
  if (v3 >= v4)
    v5 = a1[6];
  else
    v5 = a1[4];
  v1 = *a1;
  v2 = a1[2];
  if (v1 >= v2)
    v6 = a1[2];
  else
    v6 = *a1;
  if (v6 >= v5)
    return v5;
  else
    return v6;
}

void updateSubviewsOfScrollContentViews(void *a1, void *a2, id a3, void *a4)
{
  void *v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
    goto LABEL_8;
  v8 = (void *)objc_msgSend(a1, "delegate");
  if (!v8)
  {
LABEL_9:
    v9 = 1;
    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  if ((objc_msgSend(a4, "containsObject:", v8) & 1) != 0)
    return;
  objc_msgSend(a3, "addObject:", v8);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      return;
  }
  a3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v9 = 0;
  a2 = v8;
LABEL_10:
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v10 = (void *)objc_msgSend(a1, "sublayers", 0);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v10);
        updateSubviewsOfScrollContentViews(*(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v14++), a2, a3, a4);
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v12);
  }
  if ((v9 & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v8, "_setCachedSubviews:", a3);

  }
}

uint64_t UIStatusBarStyleFromUIWebClipStatusBarStyle()
{
  return 0;
}

uint64_t UIWebClipStatusBarStyleForMetaTagContent(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("black")))
  {
    if (objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("black-translucent")))
    {
      if (objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("hidden")))
      {
        if (objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("light-content")))
        {
          if (objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("dark-content")))
            v2 = 0;
          else
            v2 = 5;
        }
        else
        {
          v2 = 4;
        }
      }
      else
      {
        v2 = 3;
      }
    }
    else
    {
      v2 = 2;
    }
  }
  else
  {
    v2 = 1;
  }

  return v2;
}

void sub_18648BF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18648D140(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

id getIXApplicationIdentityClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getIXApplicationIdentityClass_softClass;
  v7 = getIXApplicationIdentityClass_softClass;
  if (!getIXApplicationIdentityClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getIXApplicationIdentityClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getIXApplicationIdentityClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18648D20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getIXAppInstallCoordinatorClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getIXAppInstallCoordinatorClass_softClass;
  v7 = getIXAppInstallCoordinatorClass_softClass;
  if (!getIXAppInstallCoordinatorClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getIXAppInstallCoordinatorClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getIXAppInstallCoordinatorClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18648D2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getIXPromisedInMemoryDataClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getIXPromisedInMemoryDataClass_softClass;
  v7 = getIXPromisedInMemoryDataClass_softClass;
  if (!getIXPromisedInMemoryDataClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getIXPromisedInMemoryDataClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getIXPromisedInMemoryDataClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18648D37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getIXPromisedOutOfBandTransferClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getIXPromisedOutOfBandTransferClass_softClass;
  v7 = getIXPromisedOutOfBandTransferClass_softClass;
  if (!getIXPromisedOutOfBandTransferClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getIXPromisedOutOfBandTransferClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getIXPromisedOutOfBandTransferClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18648D434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18648DA24(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18648DBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18648F204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id baseURLForWebDocumentView(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(a1, "webView");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "mainFrame");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dataSource");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "response");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "URL");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    objc_msgSend(v3, "request");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "URL");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

Class __getAPActivationPayloadClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD82910)
    qword_1ECD82910 = _sl_dlopen();
  if (!qword_1ECD82910)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AppClipLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIWebClip.m"), 55, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("APActivationPayload");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAPActivationPayloadClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIWebClip.m"), 56, CFSTR("Unable to find class %s"), "APActivationPayload");

LABEL_8:
    __break(1u);
  }
  qword_1ECD82908 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __getIXApplicationIdentityClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  InstallCoordinationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("IXApplicationIdentity");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getIXApplicationIdentityClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIXApplicationIdentityClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebClip.m"), 72, CFSTR("Unable to find class %s"), "IXApplicationIdentity");

    __break(1u);
  }
}

void InstallCoordinationLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!InstallCoordinationLibraryCore_frameworkLibrary)
    InstallCoordinationLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!InstallCoordinationLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *InstallCoordinationLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIWebClip.m"), 70, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getIXAppInstallCoordinatorClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  InstallCoordinationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("IXAppInstallCoordinator");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getIXAppInstallCoordinatorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIXAppInstallCoordinatorClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebClip.m"), 71, CFSTR("Unable to find class %s"), "IXAppInstallCoordinator");

    __break(1u);
  }
}

void __getIXRestoringDemotedAppInstallCoordinatorClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  InstallCoordinationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("IXRestoringDemotedAppInstallCoordinator");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD82918 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIXRestoringDemotedAppInstallCoordinatorClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebClip.m"), 79, CFSTR("Unable to find class %s"), "IXRestoringDemotedAppInstallCoordinator");

    __break(1u);
  }
}

void __getIXPlaceholderClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  InstallCoordinationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("IXPlaceholder");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD82920 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIXPlaceholderClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebClip.m"), 74, CFSTR("Unable to find class %s"), "IXPlaceholder");

    __break(1u);
  }
}

void __getIXPlaceholderAttributesClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  InstallCoordinationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("IXPlaceholderAttributes");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD82928 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIXPlaceholderAttributesClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebClip.m"), 75, CFSTR("Unable to find class %s"), "IXPlaceholderAttributes");

    __break(1u);
  }
}

void __getIXPromisedInMemoryDictionaryClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  InstallCoordinationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("IXPromisedInMemoryDictionary");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD82930 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIXPromisedInMemoryDictionaryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebClip.m"), 77, CFSTR("Unable to find class %s"), "IXPromisedInMemoryDictionary");

    __break(1u);
  }
}

void __getIXPromisedInMemoryDataClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  InstallCoordinationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("IXPromisedInMemoryData");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getIXPromisedInMemoryDataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIXPromisedInMemoryDataClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebClip.m"), 76, CFSTR("Unable to find class %s"), "IXPromisedInMemoryData");

    __break(1u);
  }
}

void __getIXPromisedOutOfBandTransferClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  InstallCoordinationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("IXPromisedOutOfBandTransfer");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getIXPromisedOutOfBandTransferClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIXPromisedOutOfBandTransferClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebClip.m"), 78, CFSTR("Unable to find class %s"), "IXPromisedOutOfBandTransfer");

    __break(1u);
  }
}

Class __getSFWebAppDataControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD82940)
    qword_1ECD82940 = _sl_dlopen();
  if (!qword_1ECD82940)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SafariServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIWebClip.m"), 64, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("SFWebAppDataController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSFWebAppDataControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIWebClip.m"), 65, CFSTR("Unable to find class %s"), "SFWebAppDataController");

LABEL_8:
    __break(1u);
  }
  qword_1ECD82938 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __getIXUninstallOptionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  InstallCoordinationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("IXUninstallOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getIXUninstallOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIXUninstallOptionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebClip.m"), 80, CFSTR("Unable to find class %s"), "IXUninstallOptions");

    __break(1u);
  }
}

void sub_186492C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *a14, id *a15, id *a16, id *a17, id *a18, id *location, id *a20)
{
  id *v20;
  id *v21;
  uint64_t v22;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak(location);
  objc_destroyWeak(a17);
  objc_destroyWeak(a18);
  objc_destroyWeak(a20);
  objc_destroyWeak((id *)(v22 - 128));
  _Unwind_Resume(a1);
}

void sub_18649307C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186493264(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186495D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864963D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186496944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18649725C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_18649B328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DynamicCastUIScrollView(uint64_t a1)
{
  if (!DynamicCastUIScrollView_cls)
    DynamicCastUIScrollView_cls = objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return a1;
  else
    return 0;
}

Class __getPKScribbleInteractionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;

  if (!qword_1ECD7A0F0)
    qword_1ECD7A0F0 = _sl_dlopen();
  if (!qword_1ECD7A0F0)
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PencilKitLibrary(void)"), CFSTR("UIWebDocumentView.m"), 107, CFSTR("%s"), 0);
    goto LABEL_8;
  }
  result = objc_getClass("PKScribbleInteraction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPKScribbleInteractionClass(void)_block_invoke"), CFSTR("UIWebDocumentView.m"), 108, CFSTR("Unable to find class %s"), "PKScribbleInteraction");
LABEL_8:
    __break(1u);
  }
  qword_1ECD7A0E8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __richTextTypeIdentifiers_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99D20]);
  v1 = objc_msgSend((id)*MEMORY[0x1E0CEC5C8], "identifier");
  result = objc_msgSend(v0, "initWithObjects:", CFSTR("Apple Web Archive pasteboard type"), v1, objc_msgSend((id)*MEMORY[0x1E0CEC518], "identifier"), 0);
  qword_1ECD7A0F8 = result;
  return result;
}

void sub_1864AE928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getSSReadingListClass_0()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__243;
  v7 = __Block_byref_object_dispose__243;
  v0 = _MergedGlobals_1338;
  v8 = _MergedGlobals_1338;
  if (!_MergedGlobals_1338)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSSReadingListClass_block_invoke_0;
    v2[3] = &unk_1E16B14C0;
    v2[4] = &v3;
    __getSSReadingListClass_block_invoke_0((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1864AE9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *extractItemProvidersFromDropSession(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = (void *)objc_msgSend(a1, "items", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7), "itemProvider");
        if (v8)
          objc_msgSend(v2, "addObject:", v8);
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }
  return v2;
}

Class __getSSReadingListClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;

  if (!qword_1ECD82960)
    qword_1ECD82960 = _sl_dlopen();
  if (!qword_1ECD82960)
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SafariServicesLibrary(void)"), CFSTR("UIWebDocumentViewInteraction.m"), 130, CFSTR("%s"), 0);
    goto LABEL_8;
  }
  result = objc_getClass("SSReadingList");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSSReadingListClass(void)_block_invoke"), CFSTR("UIWebDocumentViewInteraction.m"), 131, CFSTR("Unable to find class %s"), "SSReadingList");
LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1338 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void *TCCLibrary_0()
{
  void *v0;
  void *v2;

  if (!TCCLibraryCore_frameworkLibrary_0)
    TCCLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  v0 = (void *)TCCLibraryCore_frameworkLibrary_0;
  if (!TCCLibraryCore_frameworkLibrary_0)
  {
    v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TCCLibrary(void)"), CFSTR("UIWebDocumentViewInteraction.m"), 124, CFSTR("%s"), 0);
    __break(1u);
    free(v2);
  }
  return v0;
}

BOOL _UICollectionViewLayoutSelectionGroupingIsMultiItemGroup(unint64_t a1)
{
  return a1 > 1;
}

void ____whiteListedClassesForDelayedCompetingGestureRecognizers_block_invoke()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v0 = (void *)MEMORY[0x1E0C99E60];
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  objc_msgSend(v0, "setWithObjects:", v1, v2, v3, v4, v5, v6, objc_opt_class(), 0);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)qword_1ECD7B058;
  qword_1ECD7B058 = v7;

}

void AddShadowPathToView(void *a1)
{
  CGMutablePathRef Mutable;
  CGPath *v3;
  void *v4;
  double v5;
  CGRect v6;

  Mutable = CGPathCreateMutable();
  if (Mutable)
  {
    v3 = Mutable;
    objc_msgSend(a1, "bounds");
    CGPathAddRect(v3, 0, v6);
    objc_msgSend((id)objc_msgSend(a1, "layer"), "setShadowPath:", v3);
    objc_msgSend((id)objc_msgSend(a1, "layer"), "setShadowOffset:", 0.0, 3.0);
    v4 = (void *)objc_msgSend(a1, "layer");
    LODWORD(v5) = 1058642330;
    objc_msgSend(v4, "setShadowOpacity:", v5);
    CGPathRelease(v3);
  }
}

uint64_t findPreviousPageIndexGivenYOffset(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  int PreviousPageIndexGivenYOffset;

  v8 = a3 - a2;
  v9 = a2 + ((unint64_t)(a3 - a2) >> 1);
  objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", v9), "floatValue");
  if (v10 >= a4)
  {
    if (v8 >= 2 && (PreviousPageIndexGivenYOffset = findPreviousPageIndexGivenYOffset(a1, a2, v9 - 1, a4)) != 0)
      return PreviousPageIndexGivenYOffset;
    else
      return 0;
  }
  else if (v9 != a3)
  {
    v11 = findPreviousPageIndexGivenYOffset(a1, v9 + 1, a3, a4);
    if (v11)
      return v11;
  }
  return v9;
}

uint64_t findNextPageIndexGivenYOffset(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v8;
  uint64_t v9;
  float v10;
  int NextPageIndexGivenYOffset;

  v8 = a3 - a2;
  v9 = a2 + ((unint64_t)(a3 - a2) >> 1);
  objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", v9), "floatValue");
  if (v10 <= a4)
  {
    if (v9 == a3)
      return 0;
    NextPageIndexGivenYOffset = findNextPageIndexGivenYOffset(a1, v9 + 1, a3, a4);
    if (!NextPageIndexGivenYOffset)
      return 0;
    return NextPageIndexGivenYOffset;
  }
  if (v8 >= 2)
  {
    NextPageIndexGivenYOffset = findNextPageIndexGivenYOffset(a1, a2, v9 - 1, a4);
    if (NextPageIndexGivenYOffset)
      return NextPageIndexGivenYOffset;
  }
  return v9;
}

CGPDFDocument *CGPDFDocumentCopy(uint64_t a1, void *a2)
{
  CGDataProvider *DataProvider;
  CGPDFDocument *v4;
  uint64_t v5;
  const char *v6;

  DataProvider = (CGDataProvider *)CGPDFDocumentGetDataProvider();
  if (!DataProvider)
    return 0;
  v4 = CGPDFDocumentCreateWithProvider(DataProvider);
  if (!CGPDFDocumentIsUnlocked(v4))
  {
    v5 = objc_msgSend(a2, "UTF8String");
    if (v5)
      v6 = (const char *)v5;
    else
      v6 = "";
    CGPDFDocumentUnlockWithPassword(v4, v6);
  }
  return v4;
}

void sub_1864B7FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864B81E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSSReadingListClass_block_invoke_1(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;

  if (!qword_1ECD79BB0)
    qword_1ECD79BB0 = _sl_dlopen();
  if (!qword_1ECD79BB0)
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SafariServicesLibrary(void)"), CFSTR("UIWebPDFView.m"), 64, CFSTR("%s"), 0);
    goto LABEL_8;
  }
  result = objc_getClass("SSReadingList");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSSReadingListClass(void)_block_invoke"), CFSTR("UIWebPDFView.m"), 65, CFSTR("Unable to find class %s"), "SSReadingList");
LABEL_8:
    __break(1u);
  }
  _MergedGlobals_13_7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_1864BC638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864BC780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864BC920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPAudioVideoRoutingPopoverControllerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MediaPlayerLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MPAudioVideoRoutingPopoverController");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMPAudioVideoRoutingPopoverControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getMPAudioVideoRoutingPopoverControllerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebPlaybackTargetPicker.m"), 46, CFSTR("Unable to find class %s"), "MPAudioVideoRoutingPopoverController");

    __break(1u);
  }
}

void MediaPlayerLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!MediaPlayerLibraryCore_frameworkLibrary)
    MediaPlayerLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!MediaPlayerLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MediaPlayerLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIWebPlaybackTargetPicker.m"), 44, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getMPAVRoutingSheetClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MediaPlayerLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MPAVRoutingSheet");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMPAVRoutingSheetClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getMPAVRoutingSheetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebPlaybackTargetPicker.m"), 48, CFSTR("Unable to find class %s"), "MPAVRoutingSheet");

    __break(1u);
  }
}

void __getMPAVRoutingControllerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MediaPlayerLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MPAVRoutingController");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMPAVRoutingControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getMPAVRoutingControllerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWebPlaybackTargetPicker.m"), 45, CFSTR("Unable to find class %s"), "MPAVRoutingController");

    __break(1u);
  }
}

void sub_1864BDEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864BE4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864BE714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864BEE0C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1864BEED4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1864C0F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864C0FF0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1864C179C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1864C3BF4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1864C4488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MainRunLoopDidDraw(__CFRunLoopObserver *a1, uint64_t a2, void *a3)
{
  __CFRunLoop *Main;
  id v6;

  Main = CFRunLoopGetMain();
  CFRunLoopRemoveObserver(Main, a1, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  v6 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  objc_msgSend(a3, "webPlugInDidDraw");
  return objc_msgSend(v6, "drain");
}

uint64_t _UIWebDoubleTapAtLocation(void *a1, double a2, double a3)
{
  uint64_t result;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double x;
  double y;
  double width;
  double height;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  BOOL v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  CGRect v85;

  result = objc_msgSend(a1, "enclosingScrollView");
  if (!result)
    return result;
  v7 = (void *)result;
  v8 = (void *)objc_msgSend(a1, "contentView");
  objc_msgSend(a1, "currentDocumentScale");
  v10 = v9;
  objc_msgSend(a1, "rectOfInterestForPoint:", a2, a3);
  x = v85.origin.x;
  y = v85.origin.y;
  width = v85.size.width;
  height = v85.size.height;
  if (CGRectIsEmpty(v85))
    goto LABEL_3;
  doubleTapScaleForSize(1, a1);
  v16 = v15;
  if (objc_msgSend(a1, "considerHeightForDoubleTap"))
    doubleTapScaleForSize(0, a1);
  else
    v17 = 1.79769313e308;
  if (v16 >= v17)
    v16 = v17;
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (result = objc_msgSend(a1, "shouldSelectionAssistantReceiveDoubleTapAtPoint:forScale:", a2, a3, v16),
        (result & 1) == 0))
  {
    if (v16 == 0.0)
    {
      objc_msgSend(v7, "bounds");
      v19 = v18;
      v21 = v20;
      objc_msgSend(v7, "contentSize");
      v83 = v22;
      v79 = v23;
      objc_msgSend(v7, "contentOffset");
      v77 = v24;
      v81 = v25;
      v73 = a3;
      v74 = a2;
      objc_msgSend(v7, "convertPoint:fromView:", v8, a2, a3);
      v27 = v26;
      v29 = v28;
      objc_msgSend(v7, "convertRect:fromView:", v8, x, y, width, height);
      v34 = v32;
      v35 = v33;
      v36 = v32 > v19;
      if (v32 > v19)
        v32 = 0.0;
      v37 = v19 - v32;
      if (v36)
        v30 = v27;
      v38 = v30 - v37 * 0.5;
      if (v33 <= v21)
        v39 = v33;
      else
        v39 = 0.0;
      v72 = v21;
      v40 = v21 - v39;
      if (v33 > v21)
        v31 = v29;
      v41 = v31 - v40 * 0.5;
      objc_msgSend((id)objc_msgSend(v8, "_scroller", *(_QWORD *)&v27), "bounds");
      v44 = v83 - v43;
      if (v38 < v83 - v43)
        v44 = v38;
      v45 = v79 - v42;
      if (v41 < v79 - v42)
        v45 = v41;
      if (v44 < 0.0)
        v44 = 0.0;
      if (v45 < 0.0)
        v45 = 0.0;
      v46 = round(v44);
      v47 = round(v45);
      v48 = v81;
      if (v77 == v46 && v81 == v47)
      {
        v51 = v19;
        if (v34 <= v19)
          v63 = v46;
        else
          v63 = v71 - v19 * 0.5;
        if (v35 > v72)
          v47 = v29 - v72 * 0.5;
        objc_msgSend((id)objc_msgSend(v8, "_scroller"), "bounds");
        v48 = v83 - v65;
        if (v63 < v83 - v65)
          v48 = v63;
        v66 = v79 - v64;
        if (v47 < v79 - v64)
          v66 = v47;
        if (v48 < 0.0)
          v48 = 0.0;
        if (v66 < 0.0)
          v66 = 0.0;
        v50 = round(v48);
        v47 = round(v66);
        v52 = v83;
      }
      else
      {
        v50 = v46;
        v51 = v19;
        v52 = v83;
      }
      objc_msgSend(v7, "contentInset", v48);
      a3 = v73;
      a2 = v74;
      if (v68 + v52 + v67 <= v51)
      {
        v69 = vabdd_f64(v81, v47);
        v70 = 60.0;
      }
      else if (UIWebCurrentUserInterfaceIdiomIsSmallScreen())
      {
        if (objc_msgSend(v7, "window")
          && (unint64_t)(objc_msgSend((id)UIApp, "_sceneInterfaceOrientationFromWindow:", objc_msgSend(v7, "window"))- 1) > 1)
        {
          v69 = sqrt((v50 - v77) * (v50 - v77) + (v47 - v81) * (v47 - v81));
        }
        else
        {
          v69 = vabdd_f64(v81, v47);
        }
        v70 = 90.0;
      }
      else
      {
        v69 = sqrt((v50 - v77) * (v50 - v77) + (v47 - v81) * (v47 - v81));
        v70 = 150.0;
      }
      if (v69 >= v70 && objc_msgSend(v7, "isScrollEnabled"))
        return objc_msgSend(v7, "setContentOffset:animated:", 1, v50, v47);
    }
    else if (v16 != v10)
    {
      objc_msgSend(v7, "bounds");
      v82 = v54;
      v84 = v53;
      objc_msgSend(v7, "minimumZoomScale");
      v80 = v55;
      objc_msgSend(v7, "maximumZoomScale");
      v78 = v56;
      objc_msgSend(v7, "convertRect:fromView:", v8, x, y, width, height);
      v75 = v58;
      v76 = v57;
      if (objc_msgSend(v7, "isZoomEnabled"))
      {
        v59 = v16 / v10;
        if (v80 > v16 / v10)
          v59 = v80;
        if (v59 >= v78)
          v60 = v78;
        else
          v60 = v59;
        v61 = y + height * 0.5;
        if (v75 * v60 > v82)
          v61 = a3;
        if (v76 * v60 <= v84)
          v62 = x + width * 0.5;
        else
          v62 = a2;
        return (uint64_t)zoomToCenterWithScale(a1, v62, v61, v60);
      }
    }
LABEL_3:
    result = zoomToMinimumScaleCenteringOnLocation(a1, a2, a3);
    if ((result & 1) == 0)
    {
      result = objc_opt_respondsToSelector();
      if ((result & 1) != 0)
        return objc_msgSend(a1, "shouldSelectionAssistantReceiveDoubleTapAtPoint:forScale:", a2, a3, 1.0);
    }
  }
  return result;
}

uint64_t doubleTapScaleForSize(uint64_t a1, void *a2)
{
  uint64_t result;
  double v4;
  double v5;
  double v6;
  double v7;

  result = objc_msgSend(a2, "enclosingScrollView");
  if (result)
  {
    objc_msgSend(a2, "visibleContentRect");
    v5 = v4;
    v7 = v6;
    objc_msgSend(a2, "zoomedDocumentScale");
    return objc_msgSend(a2, "doubleTapScalesForSize:", v5, v7);
  }
  return result;
}

void *zoomToCenterWithScale(void *a1, double a2, double a3, double a4)
{
  void *result;
  void *v9;
  float v10;
  double v11;

  result = (void *)objc_msgSend(a1, "enclosingScrollView");
  if (result)
  {
    v9 = result;
    result = (void *)objc_msgSend(result, "isZoomEnabled");
    if ((_DWORD)result)
    {
      objc_msgSend(v9, "_zoomAnimationDurationForScale:", a4);
      v11 = v10;
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(a1, "willZoomToLocation:atScale:forDuration:", a2, a3, a4, v11);
      return (void *)objc_msgSend(v9, "_zoomToCenter:scale:duration:", a2, a3, a4, v11);
    }
  }
  return result;
}

uint64_t zoomToMinimumScaleCenteringOnLocation(void *a1, double a2, double a3)
{
  uint64_t result;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  result = objc_msgSend(a1, "enclosingScrollView");
  if (result)
  {
    v7 = (void *)result;
    result = objc_msgSend((id)result, "isZoomEnabled");
    if ((_DWORD)result)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(a1, "willZoomToMinimumScale");
      objc_msgSend(a1, "currentDocumentScale");
      v9 = v8;
      objc_msgSend(v7, "bounds");
      objc_msgSend(a1, "minimumScaleForSize:", v10, v11);
      if (v9 == v12)
      {
        return 0;
      }
      else
      {
        v13 = v12 / v9;
        objc_msgSend(v7, "minimumZoomScale");
        v15 = v14;
        objc_msgSend(v7, "maximumZoomScale");
        if (v15 <= v13)
          v17 = v13;
        else
          v17 = v15;
        if (v17 >= v16)
          v18 = v16;
        else
          v18 = v17;
        zoomToCenterWithScale(a1, a2, a3, v18);
        return 1;
      }
    }
  }
  return result;
}

uint64_t _UIWebSingleTapZoomAtLocationPreClick(void *a1, double a2, double a3)
{
  uint64_t result;
  void *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;

  result = objc_msgSend(a1, "enclosingScrollView");
  if (result)
  {
    v7 = (void *)result;
    v8 = objc_msgSend(a1, "contentView");
    objc_msgSend(a1, "currentDocumentScale");
    v10 = v9;
    objc_msgSend(a1, "rectOfInterestForPoint:", a2, a3);
    v15 = v14;
    result = 0;
    if (v12 < 100.0)
    {
      v16 = v12;
      if (v12 > 0.0)
      {
        v17 = v13;
        if (v13 > 0.0 && v13 < 50.0)
        {
          v18 = v11;
          doubleTapScaleForSize(1, a1);
          v20 = v19;
          if (objc_msgSend(a1, "considerHeightForDoubleTap"))
            doubleTapScaleForSize(0, a1);
          else
            v21 = 1.79769313e308;
          if (v20 >= v21)
            v20 = v21;
          if ((objc_opt_respondsToSelector() & 1) != 0
            && (objc_msgSend(a1, "shouldSelectionAssistantReceiveDoubleTapAtPoint:forScale:", a2, a3, v20) & 1) != 0)
          {
            return 0;
          }
          else
          {
            result = 0;
            if (v20 != 0.0 && v20 - v10 > 0.05)
            {
              objc_msgSend(v7, "bounds", v20 - v10);
              v36 = v23;
              v37 = v22;
              objc_msgSend(v7, "minimumZoomScale");
              v35 = v24;
              objc_msgSend(v7, "maximumZoomScale");
              v34 = v25;
              objc_msgSend(v7, "convertRect:fromView:", v8, v15, v18, v16, v17);
              v32 = v27;
              v33 = v26;
              result = objc_msgSend(v7, "isZoomEnabled");
              if ((_DWORD)result)
              {
                v28 = v20 / v10;
                if (v35 > v20 / v10)
                  v28 = v35;
                if (v28 >= v34)
                  v29 = v34;
                else
                  v29 = v28;
                v30 = v18 + v17 * 0.5;
                if (v32 * v29 > v36)
                  v30 = a3;
                if (v33 * v29 <= v37)
                  v31 = v15 + v16 * 0.5;
                else
                  v31 = a2;
                zoomToCenterWithScale(a1, v31, v30, v29);
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _UIWebSingleTapZoomAtLocationPostClick(void *a1, double a2, double a3)
{
  uint64_t result;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double x;
  double y;
  double width;
  double height;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  CGRect v78;

  result = objc_msgSend(a1, "enclosingScrollView");
  if (!result)
    return result;
  v7 = (void *)result;
  v8 = (void *)objc_msgSend(a1, "contentView");
  objc_msgSend(a1, "currentDocumentScale");
  v10 = v9;
  objc_msgSend(a1, "rectOfInterestForPoint:", a2, a3);
  x = v78.origin.x;
  y = v78.origin.y;
  width = v78.size.width;
  height = v78.size.height;
  if (CGRectIsEmpty(v78))
    goto LABEL_3;
  doubleTapScaleForSize(1, a1);
  v16 = v15;
  if (objc_msgSend(a1, "considerHeightForDoubleTap"))
    doubleTapScaleForSize(0, a1);
  else
    v17 = 1.79769313e308;
  if (v16 >= v17)
    v16 = v17;
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (result = objc_msgSend(a1, "shouldSelectionAssistantReceiveDoubleTapAtPoint:forScale:", a2, a3, v16),
        (result & 1) == 0))
  {
    if (v16 == 0.0)
    {
      if (!UIWebCurrentUserInterfaceIdiomIsSmallScreen())
      {
        objc_msgSend(v7, "bounds");
        v19 = v18;
        v21 = v20;
        objc_msgSend(v7, "contentSize");
        v72 = v22;
        v74 = v23;
        objc_msgSend(v7, "contentOffset");
        v76 = v24;
        v70 = v25;
        objc_msgSend(v7, "convertPoint:fromView:", v8, a2, a3);
        v66 = v26;
        v68 = v27;
        objc_msgSend(v7, "convertRect:fromView:", v8, x, y, width, height);
        v32 = v30;
        v33 = v31;
        v34 = v30 > v19;
        if (v30 > v19)
          v30 = 0.0;
        v35 = v19 - v30;
        if (v34)
          v28 = v66;
        v36 = v28 - v35 * 0.5;
        if (v31 <= v21)
          v37 = v31;
        else
          v37 = 0.0;
        v38 = v21 - v37;
        if (v31 > v21)
          v29 = v68;
        v39 = v29 - v38 * 0.5;
        objc_msgSend((id)objc_msgSend(v8, "_scroller", *(_QWORD *)&v19), "bounds");
        v42 = v72 - v41;
        if (v36 < v72 - v41)
          v42 = v36;
        v43 = v74 - v40;
        if (v39 < v74 - v40)
          v43 = v39;
        if (v42 < 0.0)
          v42 = 0.0;
        if (v43 < 0.0)
          v43 = 0.0;
        v44 = round(v42);
        v45 = v76;
        v46 = round(v43);
        v47 = v70;
        if (v76 == v44 && v70 == v46)
        {
          if (v32 <= v65)
            v49 = v44;
          else
            v49 = v66 - v65 * 0.5;
          if (v33 <= v21)
            v50 = v46;
          else
            v50 = v68 - v21 * 0.5;
          objc_msgSend((id)objc_msgSend(v8, "_scroller"), "bounds");
          v53 = v72 - v52;
          if (v49 < v72 - v52)
            v53 = v49;
          v54 = v74 - v51;
          if (v50 < v74 - v51)
            v54 = v50;
          if (v53 < 0.0)
            v53 = 0.0;
          if (v54 < 0.0)
            v54 = 0.0;
          v44 = round(v53);
          v45 = v76;
          v46 = round(v54);
          v47 = v70;
        }
        if (sqrt((v44 - v45) * (v44 - v45) + (v46 - v47) * (v46 - v47)) >= 300.0
          && objc_msgSend(v7, "isScrollEnabled"))
        {
          return objc_msgSend(v7, "setContentOffset:animated:", 1, v44, v46);
        }
      }
    }
    else if (vabdd_f64(v16, v10) > 0.1)
    {
      objc_msgSend(v7, "bounds");
      v75 = v56;
      v77 = v55;
      objc_msgSend(v7, "minimumZoomScale");
      v73 = v57;
      objc_msgSend(v7, "maximumZoomScale");
      v71 = v58;
      objc_msgSend(v7, "convertRect:fromView:", v8, x, y, width, height);
      v67 = v60;
      v69 = v59;
      if (objc_msgSend(v7, "isZoomEnabled"))
      {
        v61 = v16 / v10;
        if (v73 > v16 / v10)
          v61 = v73;
        if (v61 >= v71)
          v62 = v71;
        else
          v62 = v61;
        v63 = y + height * 0.5;
        if (v67 * v62 > v75)
          v63 = a3;
        if (v69 * v62 <= v77)
          v64 = x + width * 0.5;
        else
          v64 = a2;
        return (uint64_t)zoomToCenterWithScale(a1, v64, v63, v62);
      }
    }
LABEL_3:
    result = zoomToMinimumScaleCenteringOnLocation(a1, a2, a3);
    if ((result & 1) == 0)
    {
      result = objc_opt_respondsToSelector();
      if ((result & 1) != 0)
        return objc_msgSend(a1, "shouldSelectionAssistantReceiveDoubleTapAtPoint:forScale:", a2, a3, 1.0);
    }
  }
  return result;
}

double _UIWebRotateToFrame(void *a1, double a2, double a3, double a4, double a5)
{
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  CGFloat x;
  double y;
  double width;
  double height;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  void *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  _BOOL4 IsEmpty;
  double v77;
  double v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  CGFloat v82;
  double MidY;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;

  v10 = (void *)objc_msgSend(a1, "enclosingScrollView");
  if (!v10)
    return *MEMORY[0x1E0C9D648];
  v11 = v10;
  v110 = a3;
  v111 = a2;
  objc_msgSend(v10, "bounds");
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  objc_msgSend(a1, "zoomedDocumentScale");
  v21 = v20;
  objc_msgSend(a1, "minimumScaleForSize:", v17, v19);
  v23 = v22;
  v113 = a5;
  objc_msgSend(a1, "scalesForContainerSize:", a4, a5);
  v26 = v25;
  v112 = v23;
  if (v21 >= v23)
    v27 = v21;
  else
    v27 = v23;
  v117 = v27;
  v108 = v26;
  v109 = v24;
  objc_msgSend(a1, "updateBoundariesOfScrollView:withScales:", v11, v26);
  v106 = v17;
  v107 = v19;
  objc_msgSend((id)objc_msgSend(a1, "contentView"), "convertRect:fromView:", v11, v13, v15, v17, v19);
  v29 = v28;
  v116 = v30;
  v32 = v31;
  v119 = v33;
  objc_msgSend(a1, "rectOfInterestForRotation");
  v34 = a4;
  x = v121.origin.x;
  y = v121.origin.y;
  width = v121.size.width;
  height = v121.size.height;
  if (CGRectIsEmpty(v121))
  {
    v105 = v21;
    v39 = v34 / (v32 / v21);
    objc_msgSend(v11, "contentOffset");
    v41 = v40;
    objc_msgSend(a1, "minimumVerticalContentOffset");
    v42 = v34;
    if (v41 <= v43)
    {
      v45 = 1;
    }
    else
    {
      objc_msgSend(v11, "contentSize");
      if (v41 == v44 - v107)
        v45 = 2;
      else
        v45 = 0;
    }
    v114 = v29;
    v115 = v32;
    height = v119;
    y = v116;
    v48 = v109;
    v49 = v110;
    v47 = v105;
  }
  else
  {
    v114 = x;
    v115 = width;
    v39 = v34 / (width / v21) + v34 / (width / v21) * -0.05;
    v42 = v34;
    v47 = v21;
    v45 = 0;
    if (objc_msgSend(a1, "considerHeightOfRectOfInterestForRotation"))
    {
      if (v39 >= v113 / (height / v21) + v113 / (height / v21) * -0.05)
        v39 = v113 / (height / v21) + v113 / (height / v21) * -0.05;
    }
    else
    {
      height = v119;
      y = v116;
    }
    v48 = v109;
    v49 = v110;
  }
  v50 = v108;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(a1, "scaleForProposedNewScale:andOldScale:", v39, v117);
    v39 = v51;
  }
  if (v39 >= v48)
    v52 = v48;
  else
    v52 = v39;
  if (v52 >= v108)
    v53 = v52;
  else
    v53 = v108;
  objc_msgSend(v11, "setFrame:", v111, v49, v42, v113);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(a1, "contentSizeForScrollView:", v11);
    objc_msgSend(v11, "setContentSize:");
  }
  v54 = v42;
  if (v47 == v112 || (v50 = v53, v53 != v117))
    objc_msgSend(v11, "setZoomScale:", v50 / v117);
  v46 = v114;
  v122.origin.x = v114;
  v122.origin.y = y;
  v122.size.width = v115;
  v122.size.height = height;
  if (!CGRectIsEmpty(v122))
  {
    v55 = objc_msgSend(a1, "contentView");
    v56 = (void *)objc_msgSend(a1, "enclosingScrollView");
    objc_msgSend(v56, "bounds");
    v58 = v57;
    v118 = v59;
    v120 = height;
    objc_msgSend(v56, "convertRect:fromView:", v55, v114, y, v115, height);
    v62 = v61;
    v65 = v64 + (v58 - v63) * -0.5;
    if (v54 == v106 && v113 == v107)
    {
      v66 = v60;
      v67 = *MEMORY[0x1E0C9D628];
      v68 = *(double *)(MEMORY[0x1E0C9D628] + 8);
      v69 = *(double *)(MEMORY[0x1E0C9D628] + 16);
      v70 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    }
    else
    {
      v66 = v60;
      objc_msgSend(a1, "activeRectForRectOfInterest:", v114, y, v115, v120);
      v67 = v71;
      v68 = v72;
      v69 = v73;
      v70 = v74;
    }
    v75 = round(v65);
    v123.origin.x = v67;
    v123.origin.y = v68;
    v123.size.width = v69;
    v123.size.height = v70;
    IsEmpty = CGRectIsEmpty(v123);
    if (IsEmpty)
    {
      v77 = v118;
      v78 = round(v66 + (v118 - v62) * -0.5);
    }
    else
    {
      objc_msgSend(v56, "convertRect:fromView:", v55, v67, v68, v69, v70);
      v79 = v124.origin.x;
      v80 = v124.origin.y;
      v81 = v124.size.width;
      v82 = v124.size.height;
      MidY = CGRectGetMidY(v124);
      objc_msgSend(a1, "heightToKeepVisible");
      v85 = round(MidY + v84 * -0.5);
      v125.origin.x = v79;
      v125.origin.y = v80;
      v125.size.width = v81;
      v125.size.height = v82;
      v86 = CGRectGetMinX(v125) + -20.0;
      if (v75 >= v86)
        v75 = v86;
      v126.origin.x = v79;
      v126.origin.y = v80;
      v126.size.width = v81;
      v126.size.height = v82;
      v87 = CGRectGetMinY(v126) + -20.0;
      if (v85 >= v87)
        v85 = v87;
      v127.origin.x = v79;
      v127.origin.y = v80;
      v127.size.width = v81;
      v127.size.height = v82;
      v88 = CGRectGetMaxX(v127) + 20.0 - v58;
      if (v75 < v88)
        v75 = v88;
      v128.origin.x = v79;
      v128.origin.y = v80;
      v128.size.width = v81;
      v128.size.height = v82;
      v77 = v118;
      v89 = CGRectGetMaxY(v128) + 20.0 - v118;
      if (v85 >= v89)
        v78 = v85;
      else
        v78 = v89;
    }
    v46 = v114;
    objc_msgSend(v56, "contentSize");
    v91 = v90;
    v93 = v92;
    objc_msgSend(v56, "contentInset");
    v98 = v91 + v96 + v97 - v58;
    if (v75 < v98)
      v98 = v75;
    v99 = v93 + v94 + v95 - v77;
    if (v78 < v99)
      v99 = v78;
    if (v98 < 0.0)
      v98 = 0.0;
    if (v99 < 0.0)
      v99 = 0.0;
    v100 = round(v98);
    v101 = round(v99);
    if (IsEmpty)
    {
      if (v45 == 2)
      {
        objc_msgSend(v56, "contentSize", v99, v101);
        v101 = v103 - v77;
      }
      else if (v45 == 1)
      {
        objc_msgSend(a1, "minimumVerticalContentOffset", v99, v101);
        v101 = v102;
      }
    }
    objc_msgSend(v56, "setContentOffset:", v100, v101);
  }
  return v46;
}

BOOL isDeferredElementVisibleInMenu_0(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _BOOL8 v6;
  _QWORD v8[4];
  id v9;

  v3 = a1;
  objc_msgSend(a2, "children");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __isDeferredElementVisibleInMenu_block_invoke_0;
  v8[3] = &unk_1E16DEB18;
  v9 = v3;
  v5 = v3;
  v6 = objc_msgSend(v4, "indexOfObjectPassingTest:", v8) != 0x7FFFFFFFFFFFFFFFLL;

  return v6;
}

void sub_1864CAD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864CB540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864CC004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864CD33C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

uint64_t __isDeferredElementVisibleInMenu_block_invoke_0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;

  v6 = a2;
  if ((objc_msgSend(v6, "isEqual:", *(_QWORD *)(a1 + 32)) & 1) != 0
    || objc_msgSend(v6, "_isInlineGroup")
    && isDeferredElementVisibleInMenu_0(*(_QWORD *)(a1 + 32), v6))
  {
    v7 = 1;
    *a4 = 1;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void *TelephonyUtilitiesLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary_0)
    TelephonyUtilitiesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  v0 = (void *)TelephonyUtilitiesLibraryCore_frameworkLibrary_0;
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary_0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TelephonyUtilitiesLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIWebURLAction.m"), 37, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_1864D21E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864D6F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id javaScriptDialogTitle(void *a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "dataSource"), "request"), "URL");
  if (objc_msgSend(v1, "isFileURL"))
  {
    v2 = (void *)objc_msgSend(v1, "path");
    v3 = (id)objc_msgSend(v2, "lastPathComponent");
    if (!objc_msgSend(v3, "length"))
      return v2;
  }
  else
  {
    v3 = (id)objc_msgSend((id)objc_msgSend(v1, "scheme"), "mutableCopy");
    objc_msgSend(v3, "appendFormat:", CFSTR("://%@"), objc_msgSend(v1, "host"));
  }
  return v3;
}

void sub_1864D7238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1864D74D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1864D9E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a36);
  _Unwind_Resume(a1);
}

void sub_1864D9F7C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t clearGeolocationCache(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "clearCache");
}

void sub_1864DC520(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t getToken(void *a1, void *a2)
{
  unsigned int v5;
  uint64_t v6;

  if (objc_msgSend(a2, "isFileURL"))
    return objc_msgSend(a2, "path");
  v5 = objc_msgSend(a1, "port");
  if (v5)
    return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@://%@:%d"), objc_msgSend(a1, "protocol"), objc_msgSend((id)objc_msgSend(a1, "host"), "_web_decodeHostName"), v5);
  else
    return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@://%@"), objc_msgSend(a1, "protocol"), objc_msgSend((id)objc_msgSend(a1, "host"), "_web_decodeHostName"), v6);
}

void sub_1864E1588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864E1844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Block_object_dispose(&a25, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864E1D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864E2A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864E342C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864E3708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864E37A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864E382C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getCKAllowedSharingOptionsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCKAllowedSharingOptionsClass_softClass;
  v7 = getCKAllowedSharingOptionsClass_softClass;
  if (!getCKAllowedSharingOptionsClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCKAllowedSharingOptionsClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getCKAllowedSharingOptionsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1864E3928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864E3EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864E4038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864E40F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864E41A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getCKPreSharingContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCKPreSharingContextClass_softClass;
  v7 = getCKPreSharingContextClass_softClass;
  if (!getCKPreSharingContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCKPreSharingContextClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getCKPreSharingContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1864E4928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864E4BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCKSystemSharingUIObserverClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  CloudKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CKSystemSharingUIObserver");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCKSystemSharingUIObserverClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCKSystemSharingUIObserverClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UICloudSharingController.m"), 65, CFSTR("Unable to find class %s"), "CKSystemSharingUIObserver");

    __break(1u);
  }
}

void *CloudKitLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CloudKitLibraryCore_frameworkLibrary)
    CloudKitLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)CloudKitLibraryCore_frameworkLibrary;
  if (!CloudKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CloudKitLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UICloudSharingController.m"), 60, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getLPLinkMetadataClass_block_invoke_1(uint64_t a1)
{
  void *v2;
  void *v3;

  LinkPresentationLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("LPLinkMetadata");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD7B460 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLPLinkMetadataClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UICloudSharingController.m"), 70, CFSTR("Unable to find class %s"), "LPLinkMetadata");

    __break(1u);
  }
}

void LinkPresentationLibrary_0()
{
  void *v0;
  void *v1;
  void *v2;

  if (!LinkPresentationLibraryCore_frameworkLibrary_0)
    LinkPresentationLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  if (!LinkPresentationLibraryCore_frameworkLibrary_0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *LinkPresentationLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UICloudSharingController.m"), 69, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getLPImagePropertiesClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  LinkPresentationLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("LPImageProperties");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD7B468 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLPImagePropertiesClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UICloudSharingController.m"), 72, CFSTR("Unable to find class %s"), "LPImageProperties");

    __break(1u);
  }
}

void __getLPImageClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  LinkPresentationLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("LPImage");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECD7B470 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLPImageClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UICloudSharingController.m"), 71, CFSTR("Unable to find class %s"), "LPImage");

    __break(1u);
  }
}

void __getCKModifyRecordsOperationClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  CloudKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CKModifyRecordsOperation");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCKModifyRecordsOperationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCKModifyRecordsOperationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UICloudSharingController.m"), 62, CFSTR("Unable to find class %s"), "CKModifyRecordsOperation");

    __break(1u);
  }
}

void __getCKAllowedSharingOptionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  CloudKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CKAllowedSharingOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCKAllowedSharingOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCKAllowedSharingOptionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UICloudSharingController.m"), 61, CFSTR("Unable to find class %s"), "CKAllowedSharingOptions");

    __break(1u);
  }
}

void __getCKPreSharingContextClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  CloudKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CKPreSharingContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCKPreSharingContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCKPreSharingContextClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UICloudSharingController.m"), 63, CFSTR("Unable to find class %s"), "CKPreSharingContext");

    __break(1u);
  }
}

