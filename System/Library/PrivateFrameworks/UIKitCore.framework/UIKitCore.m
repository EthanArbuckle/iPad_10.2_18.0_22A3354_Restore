id getAFAnalyticsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAFAnalyticsClass_softClass;
  v7 = getAFAnalyticsClass_softClass;
  if (!getAFAnalyticsClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAFAnalyticsClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getAFAnalyticsClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18506A850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAFDictationConnectionClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAFDictationConnectionClass_softClass;
  v7 = getAFDictationConnectionClass_softClass;
  if (!getAFDictationConnectionClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAFDictationConnectionClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getAFDictationConnectionClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18506A908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAFPreferencesClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAFPreferencesClass_softClass;
  v7 = getAFPreferencesClass_softClass;
  if (!getAFPreferencesClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAFPreferencesClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getAFPreferencesClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18506A9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAFPreferencesClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAFPreferencesClass_softClass_0;
  v7 = getAFPreferencesClass_softClass_0;
  if (!getAFPreferencesClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAFPreferencesClass_block_invoke_1;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getAFPreferencesClass_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18506AA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSBSApplicationShortcutServiceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSBSApplicationShortcutServiceClass_softClass;
  v7 = getSBSApplicationShortcutServiceClass_softClass;
  if (!getSBSApplicationShortcutServiceClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSBSApplicationShortcutServiceClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getSBSApplicationShortcutServiceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18506AB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTUIKeyboardLayoutFactoryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7EB00;
  v7 = qword_1ECD7EB00;
  if (!qword_1ECD7EB00)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getTUIKeyboardLayoutFactoryClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getTUIKeyboardLayoutFactoryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18506ABE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTUIKeyboardLayoutFactoryClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD7EB68;
  v7 = qword_1ECD7EB68;
  if (!qword_1ECD7EB68)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getTUIKeyboardLayoutFactoryClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getTUIKeyboardLayoutFactoryClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18506ACA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t UIEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 == v4)
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    if (v3 && v4)
      v6 = objc_msgSend(v3, "isEqual:", v4);
  }

  return v6;
}

uint64_t UIEqual_0(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (v3 == v4)
  {
    v5 = 1;
  }
  else if (v3)
  {
    v5 = objc_msgSend(v3, "isEqual:", v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

float UIAnimationDragCoefficient()
{
  int v0;
  float v1;
  float v2;
  int v3;
  float v4;
  float v5;
  void *v6;
  int v7;

  v0 = _UIInternalPreferenceUsesDefault(&dword_1ECD76810, (uint64_t)CFSTR("UIAnimationDragCoefficient"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  v1 = *(double *)&qword_1ECD76818;
  if (v0)
    v1 = 1.0;
  if (v1 <= 0.0)
    v2 = 1.0;
  else
    v2 = v1;
  v3 = _UIInternalPreferenceUsesDefault((int *)&unk_1ECD76820, (uint64_t)CFSTR("UIAnimationShiftKeySlowAnimationDragCoefficient"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  v4 = *(double *)&qword_1ECD76828;
  if (v3)
    v4 = 1.0;
  if (v4 <= 0.0)
    v5 = 1.0;
  else
    v5 = v4;
  if (v5 != 1.0)
  {
    objc_msgSend((id)UIApp, "_event");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "_modifierFlags");

    if ((*(_QWORD *)&v7 & 0x20000) != 0)
      return v5;
  }
  return v2;
}

void sub_18506C8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18506C9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t ___clampedValueForKey_block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  double v3;

  v2 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "doubleValue");
  if (v3 < 0.0)
    v3 = 0.0;
  return objc_msgSend(v2, "numberWithDouble:", v3);
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

void __Block_byref_object_dispose__29(uint64_t a1)
{

}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void __Block_byref_object_dispose__31(uint64_t a1)
{

}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

void __Block_byref_object_dispose__34(uint64_t a1)
{

}

void __Block_byref_object_dispose__35(uint64_t a1)
{

}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

void __Block_byref_object_dispose__37(uint64_t a1)
{

}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

void __Block_byref_object_dispose__39(uint64_t a1)
{

}

void __Block_byref_object_dispose__40(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__41(uint64_t a1)
{

}

void __Block_byref_object_dispose__42(uint64_t a1)
{

}

void __Block_byref_object_dispose__43(uint64_t a1)
{

}

void __Block_byref_object_dispose__44(uint64_t a1)
{

}

void __Block_byref_object_dispose__45(uint64_t a1)
{

}

void __Block_byref_object_dispose__46(uint64_t a1)
{

}

void __Block_byref_object_dispose__47(uint64_t a1)
{

}

void __Block_byref_object_dispose__48(uint64_t a1)
{

}

void __Block_byref_object_dispose__49(uint64_t a1)
{

}

void __Block_byref_object_dispose__50(uint64_t a1)
{

}

void __Block_byref_object_dispose__51(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__52(uint64_t a1)
{

}

void __Block_byref_object_dispose__53(uint64_t a1)
{

}

void __Block_byref_object_dispose__54(uint64_t a1)
{

}

void __Block_byref_object_dispose__55(uint64_t a1)
{

}

void __Block_byref_object_dispose__56(uint64_t a1)
{

}

void __Block_byref_object_dispose__57(uint64_t a1)
{

}

void __Block_byref_object_dispose__58(uint64_t a1)
{

}

void __Block_byref_object_dispose__59(uint64_t a1)
{

}

void __Block_byref_object_dispose__60(uint64_t a1)
{

}

void __Block_byref_object_dispose__61(uint64_t a1)
{

}

void __Block_byref_object_dispose__62(uint64_t a1)
{

}

void __Block_byref_object_dispose__63(uint64_t a1)
{

}

void __Block_byref_object_dispose__64(uint64_t a1)
{

}

void __Block_byref_object_dispose__65(uint64_t a1)
{

}

void __Block_byref_object_dispose__66(uint64_t a1)
{

}

void __Block_byref_object_dispose__67(uint64_t a1)
{

}

void __Block_byref_object_dispose__68(uint64_t a1)
{

}

void __Block_byref_object_dispose__69(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__70(uint64_t a1)
{

}

void __Block_byref_object_dispose__71(uint64_t a1)
{

}

void __Block_byref_object_dispose__72(uint64_t a1)
{

}

void __Block_byref_object_dispose__73(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void __Block_byref_object_dispose__74(uint64_t a1)
{

}

void __Block_byref_object_dispose__75(uint64_t a1)
{

}

void __Block_byref_object_dispose__76(uint64_t a1)
{

}

void __Block_byref_object_dispose__77(uint64_t a1)
{

}

void __Block_byref_object_dispose__78(uint64_t a1)
{

}

void __Block_byref_object_dispose__79(uint64_t a1)
{

}

void __Block_byref_object_dispose__80(uint64_t a1)
{

}

void __Block_byref_object_dispose__81(uint64_t a1)
{

}

void __Block_byref_object_dispose__82(uint64_t a1)
{

}

void __Block_byref_object_dispose__83(uint64_t a1)
{

}

void __Block_byref_object_dispose__84(uint64_t a1)
{

}

void __Block_byref_object_dispose__85(uint64_t a1)
{

}

void __Block_byref_object_dispose__86(uint64_t a1)
{

}

void __Block_byref_object_dispose__87(uint64_t a1)
{

}

void __Block_byref_object_dispose__88(uint64_t a1)
{

}

void __Block_byref_object_dispose__89(uint64_t a1)
{

}

void __Block_byref_object_dispose__90(uint64_t a1)
{

}

void __Block_byref_object_dispose__91(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__92(uint64_t a1)
{

}

void __Block_byref_object_dispose__93(uint64_t a1)
{

}

void __Block_byref_object_dispose__94(uint64_t a1)
{

}

void __Block_byref_object_dispose__95(uint64_t a1)
{

}

void __Block_byref_object_dispose__96(uint64_t a1)
{

}

void __Block_byref_object_dispose__97(uint64_t a1)
{

}

void __Block_byref_object_dispose__98(uint64_t a1)
{

}

void __Block_byref_object_dispose__99(uint64_t a1)
{

}

void __Block_byref_object_dispose__100(uint64_t a1)
{

}

void __Block_byref_object_dispose__101(uint64_t a1)
{

}

void __Block_byref_object_dispose__102(uint64_t a1)
{

}

void __Block_byref_object_dispose__103(uint64_t a1)
{

}

void __Block_byref_object_dispose__104(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__105(uint64_t a1)
{

}

void __Block_byref_object_dispose__106(uint64_t a1)
{

}

void __Block_byref_object_dispose__107(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__108(uint64_t a1)
{

}

void __Block_byref_object_dispose__109(uint64_t a1)
{

}

void __Block_byref_object_dispose__110(uint64_t a1)
{

}

void __Block_byref_object_dispose__111(uint64_t a1)
{

}

void __Block_byref_object_dispose__112(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__113(uint64_t a1)
{

}

void __Block_byref_object_dispose__114(uint64_t a1)
{

}

void __Block_byref_object_dispose__115(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__116(uint64_t a1)
{

}

void __Block_byref_object_dispose__117(uint64_t a1)
{

}

void __Block_byref_object_dispose__118(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__119(uint64_t a1)
{

}

void __Block_byref_object_dispose__120(uint64_t a1)
{

}

void __Block_byref_object_dispose__121(uint64_t a1)
{

}

void __Block_byref_object_dispose__122(uint64_t a1)
{

}

void __Block_byref_object_dispose__123(uint64_t a1)
{

}

void __Block_byref_object_dispose__124(uint64_t a1)
{

}

void __Block_byref_object_dispose__125(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__126(uint64_t a1)
{

}

void __Block_byref_object_dispose__127(uint64_t a1)
{

}

void __Block_byref_object_dispose__128(uint64_t a1)
{

}

void __Block_byref_object_dispose__129(uint64_t a1)
{

}

void __Block_byref_object_dispose__130(uint64_t a1)
{

}

void __Block_byref_object_dispose__131(uint64_t a1)
{

}

void __Block_byref_object_dispose__132(uint64_t a1)
{

}

void __Block_byref_object_dispose__133(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void __Block_byref_object_dispose__134(uint64_t a1)
{

}

void __Block_byref_object_dispose__135(uint64_t a1)
{

}

void __Block_byref_object_dispose__136(uint64_t a1)
{

}

void __Block_byref_object_dispose__137(uint64_t a1)
{

}

void __Block_byref_object_dispose__138(uint64_t a1)
{

}

void __Block_byref_object_dispose__139(uint64_t a1)
{

}

void __Block_byref_object_dispose__140(uint64_t a1)
{

}

void __Block_byref_object_dispose__141(uint64_t a1)
{

}

void __Block_byref_object_dispose__142(uint64_t a1)
{

}

void __Block_byref_object_dispose__143(uint64_t a1)
{

}

void __Block_byref_object_dispose__144(uint64_t a1)
{

}

void __Block_byref_object_dispose__145(uint64_t a1)
{

}

void __Block_byref_object_dispose__146(uint64_t a1)
{

}

void __Block_byref_object_dispose__147(uint64_t a1)
{

}

void __Block_byref_object_dispose__148(uint64_t a1)
{

}

void __Block_byref_object_dispose__149(uint64_t a1)
{

}

void __Block_byref_object_dispose__150(uint64_t a1)
{

}

void __Block_byref_object_dispose__151(uint64_t a1)
{

}

void __Block_byref_object_dispose__152(uint64_t a1)
{

}

void __Block_byref_object_dispose__153(uint64_t a1)
{

}

void __Block_byref_object_dispose__154(uint64_t a1)
{

}

void __Block_byref_object_dispose__155(uint64_t a1)
{

}

void __Block_byref_object_dispose__156(uint64_t a1)
{

}

void __Block_byref_object_dispose__157(uint64_t a1)
{

}

void __Block_byref_object_dispose__158(uint64_t a1)
{

}

void __Block_byref_object_dispose__159(uint64_t a1)
{

}

void __Block_byref_object_dispose__160(uint64_t a1)
{

}

void __Block_byref_object_dispose__161(uint64_t a1)
{

}

void __Block_byref_object_dispose__162(uint64_t a1)
{

}

void __Block_byref_object_dispose__163(uint64_t a1)
{

}

void __Block_byref_object_dispose__164(uint64_t a1)
{

}

void __Block_byref_object_dispose__165(uint64_t a1)
{

}

void __Block_byref_object_dispose__166(uint64_t a1)
{

}

void __Block_byref_object_dispose__167(uint64_t a1)
{

}

void __Block_byref_object_dispose__168(uint64_t a1)
{

}

void __Block_byref_object_dispose__169(uint64_t a1)
{

}

void __Block_byref_object_dispose__170(uint64_t a1)
{

}

void __Block_byref_object_dispose__171(uint64_t a1)
{

}

void __Block_byref_object_dispose__172(uint64_t a1)
{

}

void __Block_byref_object_dispose__173(uint64_t a1)
{

}

void __Block_byref_object_dispose__174(uint64_t a1)
{

}

void __Block_byref_object_dispose__175(uint64_t a1)
{

}

void __Block_byref_object_dispose__176(uint64_t a1)
{

}

void __Block_byref_object_dispose__177(uint64_t a1)
{

}

void __Block_byref_object_dispose__178(uint64_t a1)
{

}

void __Block_byref_object_dispose__179(uint64_t a1)
{

}

void __Block_byref_object_dispose__180(uint64_t a1)
{

}

void __Block_byref_object_dispose__181(uint64_t a1)
{

}

void __Block_byref_object_dispose__182(uint64_t a1)
{

}

void __Block_byref_object_dispose__183(uint64_t a1)
{

}

void __Block_byref_object_dispose__184(uint64_t a1)
{

}

void __Block_byref_object_dispose__185(uint64_t a1)
{

}

void __Block_byref_object_dispose__186(uint64_t a1)
{

}

void __Block_byref_object_dispose__187(uint64_t a1)
{

}

void __Block_byref_object_dispose__188(uint64_t a1)
{

}

void __Block_byref_object_dispose__189(uint64_t a1)
{

}

void __Block_byref_object_dispose__190(uint64_t a1)
{

}

void __Block_byref_object_dispose__191(uint64_t a1)
{

}

void __Block_byref_object_dispose__192(uint64_t a1)
{

}

void __Block_byref_object_dispose__193(uint64_t a1)
{

}

void __Block_byref_object_dispose__194(uint64_t a1)
{

}

void __Block_byref_object_dispose__195(uint64_t a1)
{

}

void __Block_byref_object_dispose__196(uint64_t a1)
{

}

void __Block_byref_object_dispose__197(uint64_t a1)
{

}

void __Block_byref_object_dispose__198(uint64_t a1)
{

}

void __Block_byref_object_dispose__199(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__200(uint64_t a1)
{

}

void __Block_byref_object_dispose__201(uint64_t a1)
{

}

void __Block_byref_object_dispose__202(uint64_t a1)
{

}

void __Block_byref_object_dispose__203(uint64_t a1)
{

}

void __Block_byref_object_dispose__204(uint64_t a1)
{

}

void __Block_byref_object_dispose__205(uint64_t a1)
{

}

void __Block_byref_object_dispose__206(uint64_t a1)
{

}

void __Block_byref_object_dispose__207(uint64_t a1)
{

}

void __Block_byref_object_dispose__208(uint64_t a1)
{

}

void __Block_byref_object_dispose__209(uint64_t a1)
{

}

void __Block_byref_object_dispose__210(uint64_t a1)
{

}

void __Block_byref_object_dispose__211(uint64_t a1)
{

}

void __Block_byref_object_dispose__212(uint64_t a1)
{

}

void __Block_byref_object_dispose__213(uint64_t a1)
{

}

void __Block_byref_object_dispose__214(uint64_t a1)
{

}

void __Block_byref_object_dispose__215(uint64_t a1)
{

}

void __Block_byref_object_dispose__216(uint64_t a1)
{

}

void __Block_byref_object_dispose__217(uint64_t a1)
{

}

void __Block_byref_object_dispose__218(uint64_t a1)
{

}

void __Block_byref_object_dispose__219(uint64_t a1)
{

}

void __Block_byref_object_dispose__220(uint64_t a1)
{

}

void __Block_byref_object_dispose__221(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__222(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__223(uint64_t a1)
{

}

void __Block_byref_object_dispose__224(uint64_t a1)
{

}

void __Block_byref_object_dispose__225(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__226(uint64_t a1)
{

}

void __Block_byref_object_dispose__227(uint64_t a1)
{

}

void __Block_byref_object_dispose__228(uint64_t a1)
{

}

void __Block_byref_object_dispose__229(uint64_t a1)
{

}

void __Block_byref_object_dispose__230(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__231(uint64_t a1)
{

}

void __Block_byref_object_dispose__232(uint64_t a1)
{

}

void __Block_byref_object_dispose__233(uint64_t a1)
{

}

void __Block_byref_object_dispose__234(uint64_t a1)
{

}

void __Block_byref_object_dispose__235(uint64_t a1)
{

}

void __Block_byref_object_dispose__236(uint64_t a1)
{

}

void __Block_byref_object_dispose__237(uint64_t a1)
{

}

void __Block_byref_object_dispose__238(uint64_t a1)
{

}

void __Block_byref_object_dispose__239(uint64_t a1)
{

}

void __Block_byref_object_dispose__240(uint64_t a1)
{

}

void __Block_byref_object_dispose__241(uint64_t a1)
{

}

void __Block_byref_object_dispose__242(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__243(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__244(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__245(uint64_t a1)
{

}

void __Block_byref_object_dispose__246(uint64_t a1)
{

}

void __Block_byref_object_dispose__247(uint64_t a1)
{

}

uint64_t sub_18506FC0C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

void _UIGestureRecognizerUpdateObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _UIGestureEnvironmentUpdate(a3);
}

uint64_t IndexPath.section.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = v0;
  v2 = sub_186506C4C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = sub_186506C34();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v6 >= 1)
    return sub_186506C58();
  __break(1u);
  return result;
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__52(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__55(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__56(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__57(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__59(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__61(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void *__Block_byref_object_copy__62(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__63(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__64(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__65(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__66(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__67(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__68(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__69(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__70(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__71(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__72(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__73(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

uint64_t __Block_byref_object_copy__74(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__75(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__76(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__77(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__79(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__81(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__82(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__83(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__84(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__85(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__86(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__87(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__89(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__90(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__91(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__92(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__93(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__94(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__95(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__96(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__97(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__98(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__99(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__100(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__101(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__102(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__103(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__104(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__105(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__106(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__107(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__108(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__109(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__110(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__111(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__112(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__113(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__114(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__115(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__116(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__117(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__118(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__119(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__120(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__121(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__122(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__123(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__124(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__125(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__126(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__127(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__128(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__129(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__130(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__131(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__132(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__133(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

uint64_t __Block_byref_object_copy__134(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__135(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__136(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__137(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__138(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__139(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__140(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__141(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__142(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__143(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__144(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__145(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__146(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__147(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__148(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__149(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__150(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__151(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__152(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__153(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__154(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__155(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__156(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__157(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__158(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__159(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__160(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__161(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__162(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__163(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__164(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__165(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__166(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__167(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__168(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void *__Block_byref_object_copy__169(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__170(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__171(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__172(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__173(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__174(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__175(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__176(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__177(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__178(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__179(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__180(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__181(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__182(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__183(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__184(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__185(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__186(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__187(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__188(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__189(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__190(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__191(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__192(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__193(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__194(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__195(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__196(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__197(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__198(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__199(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__200(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__201(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__202(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__203(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__204(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__205(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__206(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__207(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__208(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__209(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__210(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__211(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__212(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__213(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__214(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__215(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__216(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__217(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__218(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__219(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__220(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__221(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__222(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__223(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__224(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__225(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__226(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__227(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__228(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__229(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__230(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__231(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__232(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__233(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__234(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__235(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__236(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__237(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__238(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__239(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void *__Block_byref_object_copy__240(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void *__Block_byref_object_copy__241(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_copy__242(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__243(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__244(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__245(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__246(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__247(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t UICellConfigurationState.subscript.setter(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BYTE v6[40];

  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 1;
  sub_185070E64(a1, (uint64_t)v6);
  sub_185070EAC((uint64_t)v6, a2);
  return sub_185070E24(a1);
}

uint64_t sub_185070DBC(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BYTE v6[40];

  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 1;
  sub_185070E64(a1, (uint64_t)v6);
  sub_185070EAC((uint64_t)v6, a2);
  return sub_185070E24(a1);
}

uint64_t sub_185070E24(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD816C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_185070E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD816C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_185070EAC(uint64_t a1, void *a2)
{
  uint64_t *v2;
  __int128 v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_OWORD *)(a1 + 16);
    v8[0] = *(_OWORD *)a1;
    v8[1] = v4;
    v9 = *(_QWORD *)(a1 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *v2;
    *v2 = 0x8000000000000000;
    sub_1850F6A10((uint64_t)v8, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v7;

    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_18519F088(a1, &qword_1EDD816C0);
    sub_1856BEC74((uint64_t)a2, (uint64_t)v8);

    return sub_18519F088((uint64_t)v8, &qword_1EDD816C0);
  }
}

uint64_t IndexPath.item.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = v0;
  v2 = sub_186506C4C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = sub_186506C34();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v6 < 1)
  {
    __break(1u);
  }
  else if (sub_186506C34() < 2)
  {
    return sub_1865067FC();
  }
  else
  {
    return sub_186506C58();
  }
  return result;
}

uint64_t ContainerDepthBreakabilityScoringFunction(void *a1)
{
  void *v1;
  uint64_t i;

  v1 = (void *)objc_msgSend(a1, "container");
  for (i = 0; v1; v1 = (void *)objc_msgSend(v1, "superview"))
    ++i;
  return i;
}

double UISizeRoundToScale(double a1, double a2, double a3)
{
  double v5;
  BOOL v6;
  double v7;
  double v8;
  double v9;

  v5 = a3;
  if (a3 == 0.0)
  {
    if (AdjustToScale_onceToken_0 != -1)
      dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
    v5 = *(double *)&AdjustToScale___s_0;
  }
  v6 = v5 == 1.0;
  v7 = round(a1 * v5) / v5;
  v8 = round(a1);
  if (v6)
    v9 = v8;
  else
    v9 = v7;
  if (a3 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  return v9;
}

uint64_t _UIViewEnumerateViewsForWhichConstraintIsVulnerableToScrollViewBoundsOrigin(void *a1, int a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t result;
  void *v13;
  BOOL v14;
  void *i;
  void *v16;

  result = objc_msgSend(a4, "_uili_isFocusGuide");
  if ((_DWORD)result)
    v13 = a4;
  else
    v13 = a3;
  if (v13)
    v14 = v13 == a1;
  else
    v14 = 1;
  if (!v14 && ((a2 - 1) < 6 || (a2 - 9) <= 1))
  {
    if (objc_msgSend(a1, "_isFloatingLayoutItem")
      && objc_msgSend(a3, "_supportsContentDimensionVariables")
      && (void *)objc_msgSend(a1, "superview") == a4)
    {
      return (*(uint64_t (**)(uint64_t, void *))(a6 + 16))(a6, a3);
    }
    result = objc_msgSend(a3, "_supportsContentDimensionVariables");
    if (a3 == a4 || !(_DWORD)result || (result = objc_msgSend(a3, "_contentLayoutGuideIfExists"), (void *)result == a4))
    {
      if (a1 != a5)
      {
        for (i = a1; ; i = v16)
        {
          result = objc_msgSend(i, "superview");
          if (!result)
            break;
          v16 = (void *)result;
          if ((void *)result == a5)
            break;
          if (objc_msgSend((id)result, "_supportsContentDimensionVariables"))
            (*(void (**)(uint64_t, void *))(a6 + 16))(a6, v16);
        }
      }
    }
    else
    {
      result = objc_msgSend(a3, "isDescendantOfView:", a1);
      if ((result & 1) == 0)
        return (*(uint64_t (**)(uint64_t, void *))(a6 + 16))(a6, a3);
    }
  }
  return result;
}

void sub_185073CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  _UIEmitSignpostEvent(&a31);
  _Unwind_Resume(a1);
}

double _UIScopedSignpostIntervalInit(uint64_t a1, int a2, uint64_t a3)
{
  double result;
  __int128 v5;
  _OWORD v6[5];

  if (a2)
  {
    memset(v6, 0, sizeof(v6));
    (*(void (**)(_OWORD *__return_ptr, uint64_t))(a3 + 16))(v6, a3);
    if (LODWORD(v6[0]))
      kdebug_trace();
    result = *((double *)&v6[2] + 1);
    v5 = *(_OWORD *)((char *)&v6[3] + 8);
    *(_OWORD *)a1 = *(_OWORD *)((char *)&v6[2] + 8);
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)&v6[4] + 1);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void _UIOldConstraintsSupportUpdateDependentViewsForConstraint(void *a1, char a2)
{
  id v3;
  id v4;
  void (**v5)(void *, void *);
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void *);
  void *v13;
  id v14;
  char v15;

  v3 = a1;
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = ___UIOldConstraintsSupportUpdateDependentViewsForConstraint_block_invoke;
    v13 = &unk_1E16DFC90;
    v15 = a2;
    v4 = v3;
    v14 = v4;
    v5 = (void (**)(void *, void *))_Block_copy(&v10);
    objc_msgSend(v4, "firstItem", v10, v11, v12, v13);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "firstAttribute") == 11 || objc_msgSend(v4, "firstAttribute") == 12)
    {
      objc_msgSend(v6, "viewForBaselineLayout");
      v7 = objc_claimAutoreleasedReturnValue();

      v6 = (void *)v7;
    }
    v5[2](v5, v6);
    objc_msgSend(v4, "secondItem");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v4, "secondAttribute") == 11 || objc_msgSend(v4, "secondAttribute") == 12)
    {
      objc_msgSend(v8, "viewForBaselineLayout");
      v9 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v9;
    }
    v5[2](v5, v8);

  }
}

id _UILayoutItemCreateAndObserveVariableWithValueRestriction(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;

  v5 = (void *)MEMORY[0x1E0D156D8];
  v6 = a1;
  objc_msgSend(v5, "variableWithDelegate:valueRestriction:shouldBeMinimized:", v6, a2, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  _UILayoutItemSetUpVariableObservation(v6, v7, a3);

  return v7;
}

void _UILayoutItemSetUpVariableObservation(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id from;
  id location;

  v5 = a1;
  v6 = a2;
  if (v6 && objc_msgSend(v5, "_uili_requiresObservationForVariable:", v6))
  {
    objc_msgSend(v5, "_uili_observableLayoutEngineForBaseFrameVariables:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (_UIViewAutoLayoutShouldAbandonKVO2())
    {
      objc_msgSend(v7, "startObservingChangesForVariable:", v6);
    }
    else if (v7)
    {
      objc_initWeak(&location, v5);
      objc_initWeak(&from, v7);
      objc_msgSend(v7, "observableForVariable:", v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___UILayoutItemSetUpVariableObservation_block_invoke;
      v11[3] = &unk_1E16EB2A0;
      objc_copyWeak(&v13, &location);
      v9 = v6;
      v12 = v9;
      objc_copyWeak(&v14, &from);
      objc_msgSend(v8, "addObserverBlock:", v11);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v5, "_uili_stashLayoutVariableObservation:forVariable:", v10, v9);
      objc_destroyWeak(&v14);

      objc_destroyWeak(&v13);
      objc_destroyWeak(&from);
      objc_destroyWeak(&location);
    }

  }
}

void sub_185074D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  id *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

uint64_t _UIViewAutoLayoutShouldAbandonKVO2()
{
  if (qword_1ECD790C0 != -1)
    dispatch_once(&qword_1ECD790C0, &__block_literal_global_629);
  return _MergedGlobals_64;
}

_BYTE *_UICreateTraitCollectionChangeDescription@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  id v9;
  __int128 v10;
  char v11;
  _BYTE *TraitCollectionTSD;
  char v13;
  BOOL v14;
  char v15;
  char v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *result;
  __int16 v25;
  _OWORD v26[3];

  v4 = (void *)a1;
  memset(v26, 0, 40);
  if (a1 && a2)
  {
    -[UITraitCollection _createTraitTokenSetForChangesFromTraitCollection:]((uint64_t)a2, a1, (uint64_t)v26);
    goto LABEL_9;
  }
  if (!a1)
  {
    if (!a2)
      goto LABEL_9;
    a1 = (uint64_t)a2;
  }
  v6 = -[UITraitCollection _specifiedTraitTokens](a1);
  v7 = *(_QWORD *)(v6 + 32);
  v8 = *(_OWORD *)(v6 + 16);
  v26[0] = *(_OWORD *)v6;
  v26[1] = v8;
  *(_QWORD *)&v26[2] = v7;
  if (*(_QWORD *)&v26[0])
    v9 = *(id *)&v26[0];
LABEL_9:
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = a2;
  v10 = v26[1];
  *(_OWORD *)(a3 + 16) = v26[0];
  *(_OWORD *)(a3 + 32) = v10;
  *(_QWORD *)(a3 + 48) = *(_QWORD *)&v26[2];
  *(_QWORD *)(a3 + 56) = 0;
  if (v4 == a2)
  {
    v11 = 1;
  }
  else
  {
    if (*(_QWORD *)&v26[0])
    {
      if (-[_UIFastIndexSet count](*(int8x16_t **)&v26[0]))
      {
LABEL_12:
        v11 = 0;
        goto LABEL_16;
      }
    }
    else if (vaddvq_s64((int64x2_t)vpadalq_u32(vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)((char *)v26 + 8))))), vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)((char *)&v26[1] + 8)))))))
    {
      goto LABEL_12;
    }
    v11 = objc_msgSend(v4, "isEqual:", a2, *(_QWORD *)&v26[0]);
  }
LABEL_16:
  *(_BYTE *)(a3 + 56) = v11;
  TraitCollectionTSD = GetTraitCollectionTSD();
  v13 = TraitCollectionTSD[9];
  TraitCollectionTSD[9] = 1;
  if (v4)
    v14 = 1;
  else
    v14 = a2 == 0;
  v15 = v14;
  v16 = dyld_program_sdk_at_least();
  if ((v15 & 1) != 0 || (v16 & 1) != 0)
  {
    if ((v15 & 1) == 0)
    {
      result = GetTraitCollectionTSD();
      result[9] = v13;
      v21 = 1;
      goto LABEL_30;
    }
    v17 = v4;
  }
  else
  {
    v17 = (void *)+[UITraitCollection _defaultTraitCollection]();
    v4 = v17;
  }
  objc_msgSend(v17, "displayScale", *(_QWORD *)&v26[0]);
  v19 = v18;
  objc_msgSend(a2, "displayScale");
  v21 = v19 != v20;
  v22 = objc_msgSend(v4, "displayGamut");
  v23 = objc_msgSend(a2, "displayGamut");
  result = GetTraitCollectionTSD();
  result[9] = v13;
  if (v22 != v23)
  {
LABEL_30:
    v25 = 256;
    goto LABEL_31;
  }
  v25 = 0;
LABEL_31:
  *(_WORD *)(a3 + 57) = v25 | v21;
  return result;
}

void sub_185076C28(_Unwind_Exception *a1)
{
  _UIEmitSignpostEvent(&STACK[0x640]);
  _Unwind_Resume(a1);
}

void *GetTraitCollectionTSD()
{
  void *v0;

  if (qword_1ECD7E7A8 != -1)
    dispatch_once(&qword_1ECD7E7A8, &__block_literal_global_655);
  v0 = pthread_getspecific(qword_1ECD7E7A0);
  if (!v0)
  {
    v0 = malloc_type_calloc(0x170uLL, 1uLL, 0xE74C6F93uLL);
    pthread_setspecific(qword_1ECD7E7A0, v0);
  }
  return v0;
}

uint64_t _UIInternalPreferenceUsesDefault(int *a1, uint64_t a2, uint64_t (*a3)(_DWORD *))
{
  uint64_t result;
  int v7;
  int v8;
  _BOOL8 v9;
  int v10;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  if (_UIInternalPreferencesRevisionVar < 1)
    return 1;
  v7 = *a1;
  if (_UIInternalPreferencesRevisionVar == *a1)
    return 1;
  v10 = _UIInternalPreferencesRevisionVar;
  v8 = _UIInternalPreferencesRevisionVar;
  while (1)
  {
    v9 = v10 >= v7;
    if (v10 < v7)
      break;
    _UIInternalPreferenceSync(v8, a1, a2, a3);
    v7 = *a1;
    result = v9;
    if (v8 == *a1)
      return result;
  }
  return 0;
}

uint64_t _UIInternalPreferenceUsesDefault_0(int *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  _BOOL8 v7;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v4 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1)
    return 1;
  v6 = *a1;
  if (_UIInternalPreferencesRevisionVar == *a1)
    return 1;
  while (1)
  {
    v7 = v4 >= v6;
    if (v4 < v6)
      break;
    _UIInternalPreferenceSync(v4, a1, a2, (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    v6 = *a1;
    result = v7;
    if (v4 == *a1)
      return result;
  }
  return 0;
}

uint64_t _UIInternalPreferenceUsesDefault_1(int *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  _BOOL8 v7;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v4 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1)
    return 1;
  v6 = *a1;
  if (_UIInternalPreferencesRevisionVar == *a1)
    return 1;
  while (1)
  {
    v7 = v4 >= v6;
    if (v4 < v6)
      break;
    _UIInternalPreferenceSync(v4, a1, a2, (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
    v6 = *a1;
    result = v7;
    if (v4 == *a1)
      return result;
  }
  return 0;
}

uint64_t _UIInternalPreferenceUsesDefault_2(int *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  _BOOL8 v7;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v4 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1)
    return 1;
  v6 = *a1;
  if (_UIInternalPreferencesRevisionVar == *a1)
    return 1;
  while (1)
  {
    v7 = v4 >= v6;
    if (v4 < v6)
      break;
    _UIInternalPreferenceSync(v4, a1, a2, (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger);
    v6 = *a1;
    result = v7;
    if (v4 == *a1)
      return result;
  }
  return 0;
}

uint64_t _UIRestorePreviousFallbackEnvironment(void *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = pthread_main_np();
  if ((_DWORD)result == 1)
  {
    qword_1ECD7E860 = (uint64_t)a1;
  }
  else
  {
    result = os_variant_has_internal_diagnostics();
    if ((_DWORD)result)
    {
      v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unsupported usage of UIKit off the main queue! (Attempted to restore previous fallback environment: %@%@)"), a1, _additionalDebuggingDescriptionForFallbackEnvironment(a1));
      v4 = qword_1ECD7E868;
      if (!qword_1ECD7E868)
      {
        v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v4, (unint64_t *)&qword_1ECD7E868);
      }
      v5 = *(NSObject **)(v4 + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218242;
        v8 = 4226526466;
        v9 = 2114;
        v10 = v3;
        _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "Exception Code %llx - %{public}@", buf, 0x16u);
      }
      v6 = getpid();
      return __UISimulateCrash_0(v6, 4226526466, v3);
    }
  }
  return result;
}

uint64_t _UISetCurrentFallbackEnvironment(void *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (pthread_main_np() == 1)
  {
    result = qword_1ECD7E860;
    qword_1ECD7E860 = (uint64_t)a1;
  }
  else
  {
    if (os_variant_has_internal_diagnostics())
    {
      v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unsupported usage of UIKit off the main queue! (Attempted to set current fallback environment: %@%@)"), a1, _additionalDebuggingDescriptionForFallbackEnvironment(a1));
      v4 = qword_1ECD7E858;
      if (!qword_1ECD7E858)
      {
        v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v4, (unint64_t *)&qword_1ECD7E858);
      }
      v5 = *(NSObject **)(v4 + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218242;
        v8 = 4226526465;
        v9 = 2114;
        v10 = v3;
        _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "Exception Code %llx - %{public}@", buf, 0x16u);
      }
      v6 = getpid();
      __UISimulateCrash_0(v6, 4226526465, v3);
    }
    return 0;
  }
  return result;
}

double _UIViewGetDefaultLayoutMargins()
{
  if (_UIViewGetDefaultLayoutMargins_onceToken != -1)
    dispatch_once(&_UIViewGetDefaultLayoutMargins_onceToken, &__block_literal_global_3346);
  return *(double *)&_MergedGlobals_329;
}

uint64_t _UIViewShowAlignmentRects()
{
  if (qword_1ECD79120 != -1)
    dispatch_once(&qword_1ECD79120, &__block_literal_global_56_4);
  return byte_1ECD790B6;
}

double _UIEdgeInsetsPropagatedToChildRectOnEdgesAndIncludingOutset(char a1, int a2, double a3, double a4, double a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14)
{
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  double v29;
  double MinY;
  double v31;
  double v32;
  double MinX;
  double MaxY;
  double MaxX;
  double v37;
  double v38;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v27 = a12;
  v26 = a13;
  v28 = a11;
  v29 = 0.0;
  if ((a1 & 1) != 0)
  {
    v40.origin.x = a11;
    v37 = a3;
    v40.origin.y = a12;
    v40.size.width = a13;
    v40.size.height = a14;
    MinY = CGRectGetMinY(v40);
    v41.origin.x = a7;
    v41.origin.y = a8;
    v41.size.width = a9;
    v41.size.height = a10;
    v31 = MinY - CGRectGetMinY(v41);
    v26 = a13;
    v27 = a12;
    v28 = a11;
    v32 = fmax(v31, 0.0);
    if (!a2)
      v31 = v32;
    v29 = fmax(v37 - v31, 0.0);
  }
  v38 = v29;
  if ((a1 & 2) != 0)
  {
    v42.origin.x = v28;
    v42.origin.y = v27;
    v42.size.width = v26;
    v42.size.height = a14;
    MinX = CGRectGetMinX(v42);
    v43.origin.x = a7;
    v43.origin.y = a8;
    v43.size.width = a9;
    v43.size.height = a10;
    fmax(MinX - CGRectGetMinX(v43), 0.0);
  }
  if ((a1 & 4) != 0)
  {
    v44.origin.x = a7;
    v44.origin.y = a8;
    v44.size.width = a9;
    v44.size.height = a10;
    MaxY = CGRectGetMaxY(v44);
    v45.origin.x = v28;
    v45.origin.y = v27;
    v45.size.width = v26;
    v45.size.height = a14;
    fmax(MaxY - CGRectGetMaxY(v45), 0.0);
  }
  if ((a1 & 8) != 0)
  {
    v46.origin.x = a7;
    v46.origin.y = a8;
    v46.size.width = a9;
    v46.size.height = a10;
    MaxX = CGRectGetMaxX(v46);
    v47.origin.x = v28;
    v47.origin.y = v27;
    v47.size.width = v26;
    v47.size.height = a14;
    fmax(MaxX - CGRectGetMaxX(v47), 0.0);
  }
  return v38;
}

double _UIEdgeInsetsPropagatedToChildRectOnEdges(char a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13)
{
  return _UIEdgeInsetsPropagatedToChildRectOnEdgesAndIncludingOutset(a1, 0, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

double _UIViewAdjustedLayoutMarginsForLayoutMargins(uint64_t a1, void *a2, char a3, double a4, double a5, double a6, double a7)
{
  double v14;
  double v15;
  double v16;
  double v17;
  id *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  __int128 v43;
  char v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  CGFloat v69;
  double v70;
  CGFloat v71;
  void *v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  CGFloat v80;
  double v81;
  double v82;
  double v83;
  CGFloat v84;
  void *v85;
  int v86;
  double v87;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  CGRect v101;

  v14 = _UIViewResolvedMargins((id *)a1, a4, a5, a6, a7);
  v95 = v15;
  v97 = v14;
  v99 = v16;
  v93 = v17;
  if ((*(_BYTE *)(a1 + 128) & 0x10) != 0)
  {
    objc_msgSend(a2, "superview");
    v19 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    -[UIView __viewDelegate]((id *)a2);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20)
      v21 = a2;
    else
      v21 = v19;
    v18 = v21;

  }
  else
  {
    v18 = a2;
    v19 = v18;
  }
  objc_msgSend((id)a1, "_safeAreaInsetsInSuperview:", v18);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  if (objc_msgSend((id)a1, "layoutMarginsFollowReadableWidth"))
  {
    _UIViewHorizontalLayoutMarginsAdjustedForReadableWidth((void *)a1, a3, v23, v25, v27, v29, a4, a5, a6, a7);
    v32 = a3 & 5;
    v33 = v97;
    v34 = v99;
    v35 = v23;
  }
  else
  {
    v30 = v95;
    v33 = v97;
    v34 = v99;
    v31 = v93;
    v35 = v23;
    v32 = a3;
  }
  v36 = UIEdgeInsetsAdd(v32, v33, v30, v34, v31, v35);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  if (v19)
  {
    *((_QWORD *)&v43 + 1) = *(unsigned int *)(a1 + 120);
    *(_QWORD *)&v43 = *(_QWORD *)(a1 + 112);
    v44 = (v43 >> 53) & 0xF;
    if (v44)
    {
      objc_msgSend(v19, "layoutMargins");
      v46 = v45;
      v48 = v47;
      v50 = v49;
      v52 = v51;
      v53 = objc_msgSend(v19, "_edgesPropagatingSafeAreaInsetsToSubviews");
      v98 = v38;
      v100 = v36;
      if (v53 != 15)
      {
        -[UIView __viewDelegate](v18);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = v54;
        if (v54 && (v19[14] & 0x4000000000000000) == 0)
          objc_msgSend(v54, "_updateContentOverlayInsetsFromParentIfNecessary");
        objc_msgSend(v19, "superview");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "_rawLayoutMargins");
        v46 = _UIViewAdjustedLayoutMarginsForLayoutMargins(v19, v56, objc_msgSend(v19, "edgesInsettingLayoutMarginsFromSafeArea") & v53, v57, v58, v59, v60);
        v48 = v61;
        v50 = v62;
        v52 = v63;

      }
      objc_msgSend(v19, "bounds");
      v65 = v64;
      v67 = v66;
      v94 = v48;
      v96 = v46;
      v91 = v52;
      v92 = v50;
      v89 = v42;
      v90 = v40;
      v69 = v68;
      v71 = v70;
      if ((~*(_QWORD *)(a1 + 104) & 0x420000000000000) == 0)
      {
        objc_msgSend((id)a1, "_layoutEngine");
        v72 = (void *)objc_claimAutoreleasedReturnValue();

        if (v72)
        {
          objc_msgSend(v19, "_nsis_bounds");
          v71 = v73;
          v69 = v74;
        }
      }
      if ((v53 & 2) != 0)
        v75 = v65;
      else
        v75 = 0.0;
      if ((v53 & 1) != 0)
        v76 = v67;
      else
        v76 = 0.0;
      objc_msgSend((id)a1, "frame");
      v78 = v77;
      v80 = v79;
      v82 = v81;
      v84 = v83;
      objc_msgSend(v19, "layer");
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      v86 = objc_msgSend(v85, "flipsHorizontalAxis");

      if (v86)
      {
        objc_msgSend(v19, "bounds");
        v78 = CGRectGetMaxX(v101) - v82 - v78;
      }
      v87 = _UIEdgeInsetsPropagatedToChildRectOnEdges(v44, v96, v94, v92, v91, v75, v76, v71, v69, v78, v80, v82, v84);
      v36 = UIEdgeInsetsMax(v44, v100, v98, v90, v89, v87);
    }
  }

  return v36;
}

double _UIViewResolvedMargins(id *a1, double a2, double a3, double a4, double a5)
{
  void *v10;
  int v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  double v19;

  -[UIView __viewDelegate](a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "viewRespectsSystemMinimumLayoutMargins");
  objc_msgSend(v10, "_minimumLayoutMarginsForView");
  v19 = v12;
  objc_msgSend(a1, "_concreteDefaultLayoutMargins");
  v14 = v13;
  if (a2 == -1.79769313e308)
  {
    v15 = 0;
  }
  else
  {
    v15 = dyld_program_sdk_at_least() ^ 1;
    v14 = a2;
  }
  if (a3 != -1.79769313e308)
    dyld_program_sdk_at_least();
  if (a4 != -1.79769313e308)
    dyld_program_sdk_at_least();
  if (a5 != -1.79769313e308)
    dyld_program_sdk_at_least();
  v16 = fmax(v14, v19);
  if (v11 ^ 1 | v15)
    v17 = v14;
  else
    v17 = v16;

  return v17;
}

double UIEdgeInsetsAdd(char a1, double a2, double a3, double a4, double a5, double a6)
{
  if ((a1 & 1) == 0)
    a6 = -0.0;
  return a2 + a6;
}

uint64_t _UIViewShouldProcessTraitChangeDuringLayout(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;

  if ((a1[14] & 0x800000000000) == 0)
    return 0;
  if (qword_1EDDCA898 != -1)
    dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
  if (byte_1EDDCA61D)
  {
    objc_msgSend(a1, "_window");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
      return 0;
  }
  else
  {
    if (!(a2 | a3))
    {
      v8 = (id)objc_msgSend(a1, "window");
      if (!v8)
        return 0;
      v9 = v8;
      if (!dyld_program_sdk_at_least()
        || (objc_msgSend(a1, "superview"),
            v10 = (void *)objc_claimAutoreleasedReturnValue(),
            v10,
            v10 != v9))
      {
        if ((objc_msgSend(v9, "_shouldForceTraitPropagationThroughHierarchy") & 1) == 0
          && (a1[14] & 0x1000000000000) == 0)
        {
          return 0;
        }
      }
    }
    objc_msgSend(a1, "window");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {

    }
    else if ((dyld_program_sdk_at_least() & 1) != 0)
    {
      return 0;
    }
  }
  return 1;
}

void sub_18507BE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _s10Foundation9IndexPathV5UIKitE4item7sectionACSi_SitcfC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A50);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_186669900;
  *(_QWORD *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 40) = a1;
  JUMPOUT(0x186DC3C64);
}

ValueMetadata *type metadata accessor for UICollectionLayoutListConfiguration.Appearance()
{
  return &type metadata for UICollectionLayoutListConfiguration.Appearance;
}

double UIRectGetCenter(double a1, double a2, double a3)
{
  return a1 + a3 * 0.5;
}

void _UIViewVisitorEntertainAscendingTrackingVisitors(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t i;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (_MergedGlobals_15_6)
  {
    v8 = objc_msgSend((id)_MergedGlobals_15_6, "count");
    if (a1)
    {
      if (v8)
      {
        v9 = objc_msgSend((id)_MergedGlobals_15_6, "count");
        MEMORY[0x1E0C80A78](v9);
        v13 = (char *)&v24 - v12;
        if (v11 <= 0x1FFFFFFFFFFFFFFELL)
          v14 = (char *)&v24 - v12;
        else
          v14 = 0;
        if (v11 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000042)
          v14 = (char *)malloc_type_malloc(8 * v10, 0x777B0C52uLL);
        if (v14)
        {
          v25 = v13;
          v26 = &v24;
          if (objc_msgSend((id)_MergedGlobals_15_6, "count"))
          {
            v15 = 0;
            v16 = 0;
            do
            {
              v17 = (void *)objc_msgSend((id)_MergedGlobals_15_6, "objectAtIndexedSubscript:", v16);
              if ((objc_msgSend(v17, "_currentlyVisitingHierarchy") & 1) == 0
                && objc_msgSend(v17, "_prepareToVisitView:changedSubview:previousWindow:previousSuperview:", a1, a2, a3, a4))
              {
                *(_QWORD *)&v14[8 * v15] = v17;
                objc_msgSend(v17, "set_currentlyVisitingHierarchy:", 1);
                ++v15;
              }
              ++v16;
              v18 = objc_msgSend((id)_MergedGlobals_15_6, "count");
            }
            while (v16 < v18);
            if (v15)
            {
              *(_QWORD *)&v14[8 * v15] = 0;
              MEMORY[0x1E0C80A78](v18);
              v21 = (char *)&v24 - v20;
              if (v19 <= 0x1FFFFFFFFFFFFFFELL)
                v22 = (char *)&v24 - v20;
              else
                v22 = 0;
              if (v19 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000042)
                v22 = (char *)malloc_type_malloc(8 * v15, 0x33DE3AEDuLL);
              memcpy(v22, v14, 8 * v15);
              _UIViewVisitorEntertainAscendingVisitors((uint64_t)v14, v15, a1);
              for (i = 0; i != v15; ++i)
                objc_msgSend(*(id *)&v22[8 * i], "set_currentlyVisitingHierarchy:", 0);
              if (v22 != v21)
                free(v22);
            }
          }
          if (v14 != v25)
            free(v14);
        }
        else
        {
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("failed to alloc memory for array"), 0), "raise");
        }
      }
    }
  }
}

void _UIViewVisitorEntertainDescendingTrackingVisitors(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t i;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD7C6C8)
  {
    v8 = objc_msgSend((id)qword_1ECD7C6C8, "count");
    if (a1)
    {
      if (v8)
      {
        v9 = objc_msgSend((id)qword_1ECD7C6C8, "count");
        MEMORY[0x1E0C80A78](v9);
        v13 = (char *)&v24 - v12;
        if (v11 <= 0x1FFFFFFFFFFFFFFELL)
          v14 = (char *)&v24 - v12;
        else
          v14 = 0;
        if (v11 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000042)
          v14 = (char *)malloc_type_malloc(8 * v10, 0xFAF0F4E9uLL);
        if (v14)
        {
          v25 = v13;
          v26 = &v24;
          if (objc_msgSend((id)qword_1ECD7C6C8, "count"))
          {
            v15 = 0;
            v16 = 0;
            do
            {
              v17 = (void *)objc_msgSend((id)qword_1ECD7C6C8, "objectAtIndexedSubscript:", v16);
              if ((objc_msgSend(v17, "_currentlyVisitingHierarchy") & 1) == 0
                && objc_msgSend(v17, "_prepareToVisitView:changedSubview:previousWindow:previousSuperview:", a1, a2, a3, a4))
              {
                *(_QWORD *)&v14[8 * v15] = v17;
                objc_msgSend(v17, "set_currentlyVisitingHierarchy:", 1);
                ++v15;
              }
              ++v16;
              v18 = objc_msgSend((id)qword_1ECD7C6C8, "count");
            }
            while (v16 < v18);
            if (v15)
            {
              *(_QWORD *)&v14[8 * v15] = 0;
              MEMORY[0x1E0C80A78](v18);
              v21 = (char *)&v24 - v20;
              if (v19 <= 0x1FFFFFFFFFFFFFFELL)
                v22 = (char *)&v24 - v20;
              else
                v22 = 0;
              if (v19 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000042)
                v22 = (char *)malloc_type_malloc(8 * v15, 0xD118AAA3uLL);
              memcpy(v22, v14, 8 * v15);
              _UIViewVisitorRecursivelyEntertainDescendingVisitors((void **)v14, v15, a1, 0);
              for (i = 0; i != v15; ++i)
                objc_msgSend(*(id *)&v22[8 * i], "set_currentlyVisitingHierarchy:", 0);
              if (v22 != v21)
                free(v22);
            }
          }
          if (v14 != v25)
            free(v14);
        }
        else
        {
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("failed to alloc memory for array"), 0), "raise");
        }
      }
    }
  }
}

void _UIViewVisitorRecursivelyEntertainDescendingVisitors(void **a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v20 - v10;
  if (v9 <= 0x1FFFFFFFFFFFFFFELL)
    v12 = (char *)&v20 - v10;
  else
    v12 = 0;
  if (v9 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000042)
    v12 = (char *)malloc_type_malloc(8 * v8, 0xE1464841uLL);
  v13 = _UIViewVisitorEntertainVisitors(a1, (uint64_t)v12, (uint64_t)a3, a4);
  if (v13)
  {
    v14 = v13;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    v20 = 0u;
    v15 = (void *)objc_msgSend(a3, "subviews", 0);
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v21 != v18)
            objc_enumerationMutation(v15);
          _UIViewVisitorRecursivelyEntertainDescendingVisitors(v12, v14, *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i), 0);
        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v17);
    }
  }
  if (objc_msgSend(a3, "_maskView"))
    _UIViewVisitorRecursivelyEntertainDescendingVisitors(a1, a2, objc_msgSend(a3, "_maskView"), 1);
  if (v12 != v11)
    free(v12);
}

uint64_t _UIViewVisitorEntertainVisitors(void **a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v8;
  void **v9;
  void *v10;
  int v11;
  void *v12;

  v5 = *a1;
  if (!*a1)
  {
    v8 = 0;
    if (!a2)
      return v8;
    goto LABEL_10;
  }
  v8 = 0;
  v9 = a1 + 1;
  do
  {
    if (!a4 || objc_msgSend(v5, "visitMaskViews"))
    {
      v10 = (void *)MEMORY[0x186DC9484]();
      v11 = objc_msgSend(v5, "_visitView:", a3);
      objc_autoreleasePoolPop(v10);
      if (a2 && v11)
        *(_QWORD *)(a2 + 8 * v8++) = v5;
    }
    v12 = *v9++;
    v5 = v12;
  }
  while (v12);
  if (a2)
LABEL_10:
    *(_QWORD *)(a2 + 8 * v8) = 0;
  return v8;
}

void _makeSubTreePerformSelector(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  void *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v10 = objc_msgSend(a1, "viewTraversalMark");
  v11 = (id)objc_msgSend(a1, "_maskView");
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, "setViewTraversalMark:", v10);
    if (dyld_program_sdk_at_least())
      objc_msgSend(v12, a2, a3, a4);
    else
      objc_msgSend(v12, sel_performSelector_withObject_withObject_, a2, a3, a4);
    _makeSubTreePerformSelector(v12, a2, a3, a4, a5);
    objc_msgSend(v12, "setViewTraversalMark:", 0);
  }
  -[UIView _backing_sublayers]((uint64_t)a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  v24 = a5;
  if ((_DWORD)a5)
  {
    v15 = (id)objc_msgSend(v13, "copy");

    v23 = v15;
    v14 = v15;
  }
  else
  {
    v23 = 0;
  }
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v16 = v14;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v26 != v19)
          objc_enumerationMutation(v16);
        v21 = (id)objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * i), "unsafeUnretainedDelegate", v23);
        v22 = v21;
        if (v21 && !_IsKindOfUIView((uint64_t)v21))
          v22 = 0;
        objc_msgSend(v22, "setViewTraversalMark:", v10);
        if (!dyld_program_sdk_at_least())
        {
          objc_msgSend(v22, sel_performSelector_withObject_withObject_, a2, a3, a4);
          if (!v22)
            goto LABEL_22;
LABEL_21:
          _makeSubTreePerformSelector(v22, a2, a3, a4, v24);
          goto LABEL_22;
        }
        objc_msgSend(v22, a2, a3, a4);
        if (v22)
          goto LABEL_21;
LABEL_22:
        objc_msgSend(v22, "setViewTraversalMark:", 0);
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v18);
  }

}

void _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(_QWORD *a1, void *a2)
{
  unsigned int (**v3)(id, _QWORD *);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1 && objc_msgSend(a1, "_countOfMotionEffectsInSubtree") && ((a1[14] & 0x100000000) == 0 || v3[2](v3, a1)))
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    objc_msgSend(a1, "subviews", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v4);
          _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8++), v3);
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v6);
    }

    _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(objc_msgSend(a1, "_maskView"), v3);
  }

}

uint64_t _UIViewNotifiesFocusEngineForAlphaAndHiddenChanges()
{
  if ((_UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_ViewNotifiesFocusEngineForAlphaAndHiddenChanges, (uint64_t)CFSTR("ViewNotifiesFocusEngineForAlphaAndHiddenChanges"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger) & 1) != 0|| !qword_1ECD76AB8)
  {
    return dyld_program_sdk_at_least();
  }
  else
  {
    return qword_1ECD76AB8 >= 0;
  }
}

void sub_18507F9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185080100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

id _UIViewGetInteractionTintColor(void *a1)
{
  _QWORD *v1;
  void *v2;

  v1 = a1;
  if (!objc_msgSend(v1, "_overrideTintColorAutomaticallyOverridesTintColor")
    || (objc_msgSend(v1, "_overrideTintColor"), (v2 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    _UIViewGetInteractionTintColorBypassingOverride(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

id _UIViewGetInteractionTintColorBypassingOverride(_QWORD *a1)
{
  if ((a1[13] & 0x100) == 0)
    return 0;
  objc_getAssociatedObject(a1, &_UIViewInteractionTintColorKey);
  return (id)objc_claimAutoreleasedReturnValue();
}

id CLIENT_LAYER(uint64_t a1)
{
  return *(id *)(a1 + 168);
}

uint64_t _UIViewRemoveConstraintsMadeDanglyByChangingSuperview(uint64_t result, void *a2, void *a3)
{
  void *v5;
  double v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  void *v33;
  NSObject *v34;
  unint64_t v35;
  NSObject *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[16];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v5 = (void *)result;
    if (os_variant_has_internal_diagnostics())
    {
      if (a2 == a3)
      {
        v34 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_185066000, v34, OS_LOG_TYPE_FAULT, "If we're changing superview, the old and new superview should not be the same", buf, 2u);
        }
      }
    }
    else if (a2 == a3)
    {
      v35 = _UIViewRemoveConstraintsMadeDanglyByChangingSuperview___s_category;
      if (!_UIViewRemoveConstraintsMadeDanglyByChangingSuperview___s_category)
      {
        v35 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v35, (unint64_t *)&_UIViewRemoveConstraintsMadeDanglyByChangingSuperview___s_category);
      }
      v36 = *(NSObject **)(v35 + 8);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_185066000, v36, OS_LOG_TYPE_ERROR, "If we're changing superview, the old and new superview should not be the same", buf, 2u);
      }
    }
    result = objc_msgSend(v5, "_wantsAutolayout");
    if ((_DWORD)result)
    {
      if (a3 && (dyld_program_sdk_at_least() & 1) == 0)
      {
        v7 = a2;
        do
        {
          v8 = (void *)objc_msgSend((id)objc_msgSend(v7, "_layoutEngine"), "delegate");
          if ((dyld_program_sdk_at_least() & 1) == 0
            && (!v8 || (objc_msgSend(v8, "_forceLayoutEngineSolutionInRationalEdges") & 1) == 0)
            && objc_msgSend(a3, "isDescendantOfView:", v7))
          {
            v9 = objc_msgSend(v7, "_layoutEngine");
            if (v7 == a3)
              break;
            v10 = v9;
            v11 = objc_msgSend(v7, "_window");
            if (v11)
            {
              v12 = v11;
              if (v11 == objc_msgSend(a3, "_window"))
              {
                objc_msgSend(v7, "convertPoint:toView:", v12, 0.0, 0.0);
                v14 = v13;
                v16 = v15;
                objc_msgSend(v7, "convertPoint:toView:", v12, 1.0, 0.0);
                v18 = v17;
                v20 = v19 - v14;
                objc_msgSend(a3, "convertPoint:toView:", v12, 0.0, 0.0);
                v22 = v21;
                v24 = v23;
                objc_msgSend(a3, "convertPoint:toView:", v12, 1.0, 0.0);
                if (v20 == v26 - v22)
                {
                  v6 = v18 - v16;
                  if (v18 - v16 == v25 - v24)
                    break;
                }
              }
            }
            v27 = (void *)objc_msgSend(v7, "_constraintsExceptingSubviewAutoresizingConstraints");
            v37 = 0u;
            v38 = 0u;
            v39 = 0u;
            v40 = 0u;
            v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
            if (v28)
            {
              v29 = v28;
              v30 = *(_QWORD *)v38;
              do
              {
                for (i = 0; i != v29; ++i)
                {
                  if (*(_QWORD *)v38 != v30)
                    objc_enumerationMutation(v27);
                  v32 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
                  if (NSLayoutConstraintIsDanglyInContainer())
                  {
                    objc_msgSend(v32, "_removeFromEngine:", v10);
                    objc_msgSend(v32, "_addToEngine:", v10);
                  }
                }
                v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
              }
              while (v29);
            }
          }
          v7 = (void *)objc_msgSend(v7, "superview");
        }
        while (v7);
      }
      objc_msgSend(a2, "_snipDangliesWithForce:repairIfPossibleForViewThatMoved:newSuperview:oldSuperview:", 1, v5, a3, a2, v6);
      result = objc_msgSend(a2, "superview");
      if (result)
      {
        v33 = (void *)result;
        do
        {
          objc_msgSend(v33, "_snipDangliesWithForce:repairIfPossibleForViewThatMoved:newSuperview:oldSuperview:", 0, v5, a3, a2);
          result = objc_msgSend(v33, "superview");
          v33 = (void *)result;
        }
        while (result);
      }
    }
  }
  return result;
}

void sub_185080F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_185081A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t existingAppearancesNodesInNodeForClassAndSuperclasses(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  uint64_t v12;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3052000000;
  v10 = __Block_byref_object_copy__104;
  v11 = __Block_byref_object_dispose__104;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __existingAppearancesNodesInNodeForClassAndSuperclasses_block_invoke;
  v6[3] = &unk_1E16C9990;
  v6[4] = a1;
  v6[5] = &v7;
  __existingAppearancesNodesInNodeForClassAndSuperclasses_block_invoke((uint64_t)v6, a2);
  v3 = objc_msgSend(a2, "_guideClass");
  if (v3 != objc_msgSend(a2, "_customizableViewClass"))
    __existingAppearancesNodesInNodeForClassAndSuperclasses_block_invoke((uint64_t)v6, +[_UIAppearanceCustomizableClassInfo _customizableClassInfoForViewClass:withGuideClass:](_UIAppearanceCustomizableClassInfo, "_customizableClassInfoForViewClass:withGuideClass:", objc_msgSend(a2, "_customizableViewClass"), 0));
  v4 = v8[5];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_18508235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t existingAppearancesNodeInNodeForClass(void *a1, void *a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;

  v2 = a2;
  v4 = objc_msgSend(a1, "objectForKey:", a2);
  if (v4)
    goto LABEL_6;
  v5 = objc_msgSend(v2, "_guideClass");
  if (v5 == objc_msgSend(v2, "_customizableViewClass"))
  {
    v4 = 0;
    goto LABEL_6;
  }
  v6 = +[_UIAppearanceCustomizableClassInfo _customizableClassInfoForViewClass:withGuideClass:](_UIAppearanceCustomizableClassInfo, "_customizableClassInfoForViewClass:withGuideClass:", objc_msgSend(v2, "_customizableViewClass"), 0);
  v7 = a1;
  while (1)
  {
    v4 = objc_msgSend(v7, "objectForKey:", v6);
LABEL_6:
    v8 = objc_msgSend(v2, "_superClassInfo");
    if (v4)
      break;
    v2 = (void *)v8;
    if (!v8)
      break;
    v7 = a1;
    v6 = v2;
  }
  return v4;
}

uint64_t __existingAppearancesNodesInNodeForClassAndSuperclasses_block_invoke(uint64_t result, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = objc_msgSend(*(id *)(v3 + 32), "objectForKey:", v2);
      if (v4)
      {
        v5 = v4;
        v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 40);
        if (!v6)
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 40) = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 40);
        }
        objc_msgSend(v6, "insertObject:atIndex:", v5, 0);
      }
      result = objc_msgSend(v2, "_superClassInfo");
      v2 = (void *)result;
    }
    while (result);
  }
  return result;
}

void _UIGetTraitMetadata(CFNumberRef number@<X1>, unint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void *v6;
  unint64_t valuePtr;

  valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberNSIntegerType, &valuePtr))
  {
    v6 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSUInteger _getTraitTokenValue(_UITraitToken)"), CFSTR("UITrait_NonARC.m"), 95, CFSTR("Invalid trait token: %@"), number);
  }
  _UIGetTraitMetadataWithTraitTokenValueAcquireLock(a2, valuePtr, 1, a3);
}

void ___colorAppearanceTraitChanged_block_invoke(uint64_t a1)
{
  void (*v1[4])(_QWORD, _QWORD, _QWORD);
  __int128 v2;
  uint64_t v3;

  v1[0] = (void (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v1[1] = (void (*)(_QWORD, _QWORD, _QWORD))3221225472;
  v1[2] = (void (*)(_QWORD, _QWORD, _QWORD))___colorAppearanceTraitChanged_block_invoke_2;
  v1[3] = (void (*)(_QWORD, _QWORD, _QWORD))&unk_1E16CC7A8;
  v2 = *(_OWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  _UITraitTokenSetEnumerate(_allTraitTokensAffectingColorAppearance, v1);
}

void _UIGetTraitMetadataLocked(CFNumberRef number@<X1>, unint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void *v6;
  unint64_t valuePtr;

  valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberNSIntegerType, &valuePtr))
  {
    v6 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSUInteger _getTraitTokenValue(_UITraitToken)"), CFSTR("UITrait_NonARC.m"), 95, CFSTR("Invalid trait token: %@"), number);
  }
  _UIGetTraitMetadataWithTraitTokenValueAcquireLock(a2, valuePtr, 0, a3);
}

void _UIGetTraitMetadataWithTraitTokenValueAcquireLock(unint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char *v7;
  __int128 v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  __CFString *v17;
  void *v18;
  void *v19;

  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  if (a2 <= 0x1A)
  {
    v7 = (char *)&_UIBuiltInTraitMetadata + 56 * a2;
    v8 = *((_OWORD *)v7 + 1);
    *(_OWORD *)a4 = *(_OWORD *)v7;
    *(_OWORD *)(a4 + 16) = v8;
    *(_OWORD *)(a4 + 32) = *((_OWORD *)v7 + 2);
    *(_QWORD *)(a4 + 48) = *((_QWORD *)v7 + 6);
    goto LABEL_10;
  }
  if (a3)
    os_unfair_lock_lock((os_unfair_lock_t)&_UITraitLock);
  v10 = a2 - 27;
  v11 = _MergedGlobals_1186;
  if (_MergedGlobals_1186 > (unint64_t)qword_1ECD7F7C0)
  {
    v18 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UITraitMetadata _UIGetTraitMetadataWithTraitTokenValueAcquireLock(const _UITraitDataType, const NSUInteger, const BOOL)"), CFSTR("UITrait_NonARC.m"), 115, CFSTR("UIKit internal inconsistency: more dynamic traits than metadata"));
  }
  if (v10 < v11)
  {
    v12 = qword_1ECD7F7A8 + 56 * v10;
    v13 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v12;
    *(_OWORD *)(a4 + 16) = v13;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v12 + 32);
    *(_QWORD *)(a4 + 48) = *(_QWORD *)(v12 + 48);
    if (!a3)
      goto LABEL_10;
    goto LABEL_9;
  }
  v19 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UITraitMetadata _UIGetTraitMetadataWithTraitTokenValueAcquireLock(const _UITraitDataType, const NSUInteger, const BOOL)"), CFSTR("UITrait_NonARC.m"), 119, CFSTR("Invalid trait token value: %lu"), a2);
  if (a3)
LABEL_9:
    os_unfair_lock_unlock((os_unfair_lock_t)&_UITraitLock);
LABEL_10:
  if (a1)
  {
    v14 = *(_QWORD *)(a4 + 8);
    if (v14 != a1)
    {
      v15 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v16 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UITraitMetadata _UIGetTraitMetadataWithTraitTokenValueAcquireLock(const _UITraitDataType, const NSUInteger, const BOOL)");
      v17 = _UITraitDataTypeToString(v14);
      objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("UITrait_NonARC.m"), 124, CFSTR("Data type (%@) for trait with name '%@' does not match expected data type (%@)"), v17, *(_QWORD *)(a4 + 16), _UITraitDataTypeToString(a1));
    }
  }
}

const __CFString *_NSStringFromUIContentSizeCategory(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;

  v1 = a1 - 1;
  result = CFSTR("UICTContentSizeCategoryXS");
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("UICTContentSizeCategoryS");
      break;
    case 2:
      result = CFSTR("UICTContentSizeCategoryM");
      break;
    case 3:
      result = CFSTR("UICTContentSizeCategoryL");
      break;
    case 4:
      result = CFSTR("UICTContentSizeCategoryXL");
      break;
    case 5:
      result = CFSTR("UICTContentSizeCategoryXXL");
      break;
    case 6:
      result = CFSTR("UICTContentSizeCategoryXXXL");
      break;
    default:
      switch((unint64_t)CFSTR("UICTContentSizeCategoryXS"))
      {
        case 0x10000uLL:
          result = CFSTR("UICTContentSizeCategoryAccessibilityM");
          break;
        case 0x10001uLL:
          result = CFSTR("UICTContentSizeCategoryAccessibilityL");
          break;
        case 0x10002uLL:
          result = CFSTR("UICTContentSizeCategoryAccessibilityXL");
          break;
        case 0x10003uLL:
          result = CFSTR("UICTContentSizeCategoryAccessibilityXXL");
          break;
        case 0x10004uLL:
          result = CFSTR("UICTContentSizeCategoryAccessibilityXXXL");
          break;
        default:
          result = CFSTR("_UICTContentSizeCategoryUnspecified");
          break;
      }
      break;
  }
  return result;
}

uint64_t HasAttributeDifferenceDefaults(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;

  v5 = a3;
  v6 = a1;
  objc_msgSend(a2, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = v7;
  v10 = v8;
  v11 = v10;
  if (v9 == v10)
  {
    v12 = 0;
  }
  else
  {
    v12 = 1;
    if (v9 && v10)
      v12 = objc_msgSend(v9, "isEqual:", v10) ^ 1;
  }

  return v12;
}

uint64_t applyInvocationsToTarget(void *a1, id object)
{
  id AssociatedObject;
  uint64_t result;
  uint64_t v5;
  void *v6;
  const char *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  id obj;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  AssociatedObject = objc_getAssociatedObject(object, &_UIAppearanceCustomizedSelectorsAssociationKey);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  obj = a1;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
  v23 = result;
  if (result)
  {
    v22 = *(_QWORD *)v26;
    v18 = *MEMORY[0x1E0C99778];
    v20 = AssociatedObject;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v26 != v22)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v5);
        if (!AssociatedObject)
          goto LABEL_11;
        v7 = (const char *)objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v5), "selector");
        v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v9 = objc_msgSend((id)objc_msgSend(v6, "methodSignature"), "numberOfArguments");
        if (v9 >= 4)
        {
          v10 = v9;
          for (i = 3; i != v10; ++i)
          {
            *(_QWORD *)&v29 = 0;
            objc_msgSend(v6, "getArgument:atIndex:", &v29, i);
            objc_msgSend(v8, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", (_QWORD)v29));
          }
        }
        if ((objc_msgSend(AssociatedObject, "containsObject:", TagForSelectorWithAxes(v7, v8)) & 1) == 0)
        {
LABEL_11:
          v12 = (void *)objc_msgSend(v6, "methodSignature");
          v13 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", v12);
          v24 = objc_msgSend(v6, "selector");
          objc_msgSend(v13, "setSelector:");
          v14 = objc_msgSend(v12, "numberOfArguments");
          if (v14 >= 3)
          {
            v15 = v14;
            v16 = 2;
            while (1)
            {
              v17 = (const char *)objc_msgSend(v12, "getArgumentTypeAtIndex:", v16);
              if (!strcmp(v17, "@"))
                goto LABEL_30;
              if (!strcmp(v17, "{CGPoint=dd}") || !strcmp(v17, "{CGSize=dd}") || !strcmp(v17, "{UIOffset=dd}"))
                break;
              if (!strcmp(v17, "{CGRect={CGPoint=dd}{CGSize=dd}}") || !strcmp(v17, "{UIEdgeInsets=dddd}"))
              {
                v29 = 0u;
                v30 = 0u;
                goto LABEL_31;
              }
              if (!strcmp(v17, "d"))
                goto LABEL_30;
              if (!strcmp(v17, "f"))
              {
LABEL_35:
                LODWORD(v29) = 0;
                goto LABEL_31;
              }
              if (!strcmp(v17, "Q") || !strcmp(v17, "q"))
                goto LABEL_30;
              if (!strcmp(v17, "I") || !strcmp(v17, "i"))
                goto LABEL_35;
              if (!strcmp(v17, "B") || !strcmp(v17, "c"))
              {
                LOBYTE(v29) = 0;
                goto LABEL_31;
              }
              if (!strcmp(v17, "#"))
                goto LABEL_30;
              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v18, CFSTR("*** Illegal property type, %s in invocation selector, %@"), v17, NSStringFromSelector((SEL)objc_msgSend(v6, "selector")));
LABEL_32:
              if (v15 == ++v16)
                goto LABEL_37;
            }
            *((_QWORD *)&v29 + 1) = 0;
LABEL_30:
            *(_QWORD *)&v29 = 0;
LABEL_31:
            objc_msgSend(v6, "getArgument:atIndex:", &v29, v16);
            objc_msgSend(v13, "setArgument:atIndex:", &v29, v16);
            goto LABEL_32;
          }
LABEL_37:
          *(_QWORD *)&v29 = MEMORY[0x1E0C809B0];
          *((_QWORD *)&v29 + 1) = 3221225472;
          *(_QWORD *)&v30 = __workaround10030904InvokeWithTarget_block_invoke;
          *((_QWORD *)&v30 + 1) = &unk_1E16C99B8;
          v32 = v13;
          v33 = v24;
          v31 = object;
          +[UIView _performSystemAppearanceModifications:](UIView, "_performSystemAppearanceModifications:", &v29);
          AssociatedObject = v20;
        }
        ++v5;
      }
      while (v5 != v23);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
      v23 = result;
    }
    while (result);
  }
  return result;
}

uint64_t _UIAppearanceContainerForUserInterfaceIdiom()
{
  return objc_opt_class();
}

uint64_t __trackRunLoopTimes(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 == 32)
  {
    if ((byte_1EDDC8024 & 1) == 0)
    {
      result = HTSuspendHangTracing();
      byte_1EDDC8024 = 1;
    }
  }
  else if (byte_1EDDC8024)
  {
    result = HTResumeHangTracing();
    byte_1EDDC8024 = 0;
  }
  else
  {
    return HTUpdateHangTracing();
  }
  return result;
}

void runloopObserverCallback(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*a3 == 1)
  {
    *a3 = 2;
    signalChanges((uint64_t)a3, 1);
  }
}

void destroy for UICellConfigurationState(id *a1)
{

  swift_bridgeObjectRelease();
}

uint64_t sub_185085084()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for UICellConfigurationState()
{
  return &type metadata for UICellConfigurationState;
}

uint64_t ____windowsWithContexts_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_hasContext");
}

void UICellConfigurationState.subscript.getter(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  id v7;

  v4 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = a1;
    v5 = sub_1850F6BB4(v7);
    if ((v6 & 1) != 0)
    {
      sub_1850F28CC(*(_QWORD *)(v4 + 56) + 40 * v5, a2);
    }
    else
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }

  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

uint64_t dispatch thunk of UIConfigurationState.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

BOOL UIAccessibilityIsBoldTextEnabled(void)
{
  return _AXSEnhanceTextLegibilityEnabled() != 0;
}

ValueMetadata *type metadata accessor for UIListContentConfiguration()
{
  return &type metadata for UIListContentConfiguration;
}

uint64_t sub_1850851BC()
{
  uint64_t v0;

  sub_1865074F8();
  sub_1865080EC();
  sub_186507540();
  v0 = sub_186508134();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t dispatch thunk of UIConfigurationState.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t runloopCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 24))(a4, *(_QWORD *)(a4 + 32));
}

void runloopTimerCallback(uint64_t a1, uint64_t a2)
{
  signalChanges(a2, 1);
}

uint64_t sub_185085308(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1865074E0();
  *a2 = 0;
  return result;
}

BOOL UIContentSizeCategory.isAccessibilityCategory.getter(NSString *a1)
{
  return UIContentSizeCategoryIsAccessibilityCategory(a1);
}

uint64_t sub_185085844(uint64_t a1, uint64_t a2)
{
  return sub_18506FC0C(a1, a2, &qword_1ECD75400, &qword_1ECD753F0);
}

uint64_t sub_185085864(uint64_t a1, uint64_t a2)
{
  return sub_18506FC0C(a1, a2, &qword_1ECD753D0, &qword_1ECD753C0);
}

uint64_t sub_1850858E0(uint64_t a1, uint64_t a2)
{
  return sub_18506FC0C(a1, a2, &qword_1ECD74B28, &qword_1ECD74B10);
}

id __UISceneEffectiveSettings(uint64_t a1)
{
  id WeakRetained;
  id result;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 176));

  if (WeakRetained)
  {
    __UISceneEffectiveSettings(WeakRetained);
    return (id)objc_msgSend((id)a1, "_fixupInheritedSettings:", (id)objc_claimAutoreleasedReturnValue());
  }
  else
  {
    result = *(id *)(a1 + 160);
    if (!result)
    {
      result = (id)objc_msgSend(*(id *)(a1 + 64), "settings");
      if (!result)
      {
        objc_msgSend((id)a1, "_synthesizedSettings");
        return (id)objc_claimAutoreleasedReturnValue();
      }
    }
  }
  return result;
}

uint64_t _UISceneLifecycleStateIsSEO(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1;
  v2 = objc_msgSend(v1, "deactivationReasons");
  if (!objc_msgSend(v1, "isForeground"))
    goto LABEL_6;
  if ((v2 & 0xFFFFFFFFFFFFFEFFLL) == 0)
  {
    if ((*(_BYTE *)(UIApp + 185) & 0x80) == 0)
    {
      v3 = objc_msgSend(v1, "underLock");
      goto LABEL_7;
    }
LABEL_6:
    v3 = 0;
    goto LABEL_7;
  }
  v3 = 1;
LABEL_7:

  return v3;
}

uint64_t _UIUseMiniHeightInLandscape(unsigned int a1)
{
  void *v2;
  uint64_t v3;
  void *v5;
  double v6;
  double v7;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  if ((v3 & 0xFFFFFFFFFFFFFFFBLL) == 1)
    return 0;
  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_referenceBounds");
  v7 = v6;

  if (v7 < 414.0)
    return a1;
  else
    return 0;
}

void sub_185086838(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_185086958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _UINavigationItemUseInlineSearchLayoutForTraits(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _BOOL8 v7;
  void *v8;
  _BOOL4 v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    if (_UIBarsUseDesktopNavigationBar(v4))
      goto LABEL_3;
LABEL_6:
    v7 = 0;
    goto LABEL_7;
  }
  +[UITraitCollection _fallbackTraitCollection]();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = _UIBarsUseDesktopNavigationBar(v8);

  if (!v9)
    goto LABEL_6;
LABEL_3:
  v6 = objc_msgSend(v3, "preferredSearchBarPlacement");
  if ((v6 & 0xFFFFFFFFFFFFFFFDLL) == 1)
  {
    v7 = 1;
  }
  else
  {
    v7 = 0;
    if (v5 && !v6)
      v7 = objc_msgSend(v5, "horizontalSizeClass") == 2;
  }
LABEL_7:

  return v7;
}

BOOL _UIBarsUseDesktopNavigationBar(void *a1)
{
  unint64_t v1;
  _BOOL8 result;

  v1 = objc_msgSend(a1, "userInterfaceIdiom");
  result = 0;
  if (v1 <= 6 && ((1 << v1) & 0x63) != 0)
  {
    if (qword_1ECD7A8C0 != -1)
      dispatch_once(&qword_1ECD7A8C0, &__block_literal_global_75_0);
    return byte_1ECD7A893 != 0;
  }
  return result;
}

void sub_185087260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIImageDecorateFallbackImage(void *a1)
{
  double v1;
  double v2;
  CGFloat v3;
  double v4;
  CGFloat v5;
  double v6;
  double v7;
  double v8;
  _QWORD *ContextStack;
  CGContext *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  CGRect v18;

  v17 = a1;
  if (_UIGetUIKitDecorateFallbackImagesFromScale() != 0.0)
  {
    objc_msgSend(v17, "scale");
    if (v1 != _UIGetUIKitDecorateFallbackImagesFromScale())
    {
      objc_msgSend(v17, "size");
      v3 = v2;
      v5 = v4;
      objc_msgSend(v17, "scale");
      _UIGraphicsBeginImageContextWithOptions(0, 0, v3, v5, v6);
      v7 = *MEMORY[0x1E0C9D538];
      v8 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      ContextStack = GetContextStack(0);
      if (*(int *)ContextStack < 1)
        v10 = 0;
      else
        v10 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
      +[UIColor redColor](UIColor, "redColor");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "colorWithAlphaComponent:", 0.55);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v17, "drawInRect:", v7, v8, v3, v5);
      CGContextBeginTransparencyLayer(v10, 0);
      objc_msgSend(v12, "set");
      v18.origin.x = v7;
      v18.origin.y = v8;
      v18.size.width = v3;
      v18.size.height = v5;
      UIRectFillUsingBlendMode(v18, kCGBlendModeColor);
      CGContextEndTransparencyLayer(v10);
      _UIGraphicsGetImageFromCurrentImageContext(0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      UIGraphicsEndImageContext();
      objc_msgSend(v17, "content");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_retainAutorelease(v13);
      objc_msgSend(v14, "contentWithCGImage:", objc_msgSend(v15, "CGImage"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "_swizzleContent:", v16);

    }
  }

}

double _UIGetUIKitDecorateFallbackImagesFromScale()
{
  int v0;
  double result;
  int v2;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  result = 0.0;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    v2 = _UIInternalPreference_UIKitDecorateFallbackImagesFromScale;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_UIKitDecorateFallbackImagesFromScale)
    {
      while (v0 >= v2)
      {
        _UIInternalPreferenceSync(v0, &_UIInternalPreference_UIKitDecorateFallbackImagesFromScale, (uint64_t)CFSTR("UIKitDecorateFallbackImagesFromScale"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
        v2 = _UIInternalPreference_UIKitDecorateFallbackImagesFromScale;
        if (v0 == _UIInternalPreference_UIKitDecorateFallbackImagesFromScale)
          return 0.0;
      }
      return *(double *)&qword_1ECD76C30;
    }
  }
  return result;
}

double _UICurrentImageTraitCollectionDisplayScale()
{
  void *v0;
  double v1;
  double v2;

  +[UITraitCollection _currentTraitCollectionWithUnmarkedFallback]();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "displayScale");
  v2 = v1;

  return v2;
}

void sub_185087708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _UIAppUseModernRotationAndPresentationBehaviors()
{
  return +[UIWindow _transformLayerRotationsAreEnabled](UIWindow, "_transformLayerRotationsAreEnabled");
}

uint64_t __preferredIdiomSubtypeForIdiom(uint64_t a1)
{
  uint64_t result;
  double v3;
  double v4;
  double Height;
  double v6;
  CGRect v7;
  CGRect v8;
  CGRect v9;

  result = 0;
  switch(a1)
  {
    case 0:
      -[UIScreen _referenceBounds](+[UIScreen mainScreen](UIScreen, "mainScreen"), "_referenceBounds");
      Height = CGRectGetHeight(v8);
      if (Height <= 667.0)
      {
        if (Height <= 568.0)
        {
          if (Height <= 480.0)
            result = 0;
          else
            result = 568;
        }
        else
        {
          result = 569;
        }
      }
      else
      {
        result = 570;
      }
      break;
    case 1:
      -[UIScreen _pointsPerInch](+[UIScreen mainScreen](UIScreen, "mainScreen"), "_pointsPerInch");
      if (v6 == 163.0)
        result = 163;
      else
        result = 0;
      break;
    case 2:
    case 8:
      -[UIScreen _referenceBounds](+[UIScreen mainScreen](UIScreen, "mainScreen"), "_referenceBounds");
      v3 = CGRectGetHeight(v7);
      -[UIScreen scale](+[UIScreen mainScreen](UIScreen, "mainScreen"), "scale");
      if (v3 * v4 >= 1080.0)
        result = 0;
      else
        result = 720;
      break;
    case 4:
      if (+[UIDevice _isWatchCompanion](UIDevice, "_isWatchCompanion"))
      {
        objc_msgSend((id)objc_msgSend((id)getWKInterfaceDeviceClass(), "currentDevice"), "screenBounds");
        if (CGRectGetHeight(v9) <= 170.0)
          result = 320;
        else
          result = 384;
      }
      else
      {
        if (qword_1ECD81F00 != -1)
          dispatch_once(&qword_1ECD81F00, &__block_literal_global_218_3);
        result = qword_1ECD81F08;
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_185088A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185088BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185088CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_185089370(uint64_t a1, uint64_t a2)
{
  return sub_18506FC0C(a1, a2, &qword_1ECD75430, &qword_1ECD75420);
}

uint64_t sub_185089390(uint64_t a1, uint64_t a2)
{
  return sub_18506FC0C(a1, a2, &qword_1ECD753E8, &qword_1ECD753D8);
}

uint64_t sub_1850893B0(uint64_t a1, uint64_t a2)
{
  return sub_18506FC0C(a1, a2, &qword_1ECD74B60, &qword_1ECD74B50);
}

uint64_t sub_1850893D0(uint64_t a1, uint64_t a2)
{
  return sub_18506FC0C(a1, a2, &qword_1ECD753A0, &qword_1ECD75388);
}

uint64_t sub_1850893F0(uint64_t a1, uint64_t a2)
{
  return sub_18506FC0C(a1, a2, &qword_1ECD74B48, &qword_1ECD74B30);
}

uint64_t sub_185089410(uint64_t a1, uint64_t a2)
{
  return sub_18506FC0C(a1, a2, &qword_1ECD75380, &qword_1ECD75370);
}

uint64_t sub_185089464(uint64_t a1, uint64_t a2)
{
  return sub_18506FC0C(a1, a2, &qword_1ECD753B8, &qword_1ECD753A8);
}

void UIViewCommonInitWithFrame(void *a1, double a2, double a3, double a4, double a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v24;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  NSObject *v31;
  NSObject *v32;
  objc_class *v33;
  void *v34;
  int v35;
  void *v36;
  id v37;
  void *v38;
  char isKindOfClass;
  uint64_t v40;
  char v41;
  id v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  id v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (!qword_1EDDCA770)
  {
    qword_1EDDCA770 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel_drawRect_);
    qword_1EDDCA778 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel_intrinsicContentSize);
    qword_1EDDCA780 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel__intrinsicSizeWithinSize_);
    qword_1EDDCA848 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel__didScroll);
    qword_1EDDCA850 = +[UIResponder instanceMethodForSelector:](UIResponder, "instanceMethodForSelector:", sel_touchesBegan_withEvent_);
    qword_1EDDCA858 = +[UIResponder instanceMethodForSelector:](UIResponder, "instanceMethodForSelector:", sel_touchesMoved_withEvent_);
    qword_1EDDCA860 = +[UIResponder instanceMethodForSelector:](UIResponder, "instanceMethodForSelector:", sel_touchesEnded_withEvent_);
    qword_1EDDCA868 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel__shouldDelayTouchForSystemGestures_);
    qword_1EDDCA788 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel_viewForBaselineLayout);
    qword_1EDDCA870 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel_traitCollectionDidChange_);
    qword_1EDDCA878 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel__traitCollectionForChildEnvironment_);
    qword_1EDDCA880 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel__baselineOffsetsAtSize_);
    qword_1EDDCA7A8 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel_layoutSubviews);
    qword_1EDDCA790 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel_focusItemsInRect_);
  }
  v10 = *((_QWORD *)v9 + 21);
  objc_msgSend((id)objc_opt_class(), "_registerClassForIdiomInitializationIfNeccessary");
  *((double *)v9 + 40) = _UIViewGetDefaultLayoutMargins();
  *((_QWORD *)v9 + 41) = v11;
  *((_QWORD *)v9 + 42) = v12;
  *((_QWORD *)v9 + 43) = v13;
  v14 = *((_OWORD *)v9 + 21);
  *((_OWORD *)v9 + 22) = *((_OWORD *)v9 + 20);
  *((_OWORD *)v9 + 23) = v14;
  v15 = dyld_program_sdk_at_least();
  v16 = 0x1E00000000000000;
  if (!v15)
    v16 = 0;
  *((_QWORD *)v9 + 14) = *((_QWORD *)v9 + 14) & 0xE1FFFFFFFFFFFFFFLL | v16;
  if (dyld_program_sdk_at_least())
  {
    +[UITraitCollection _fallbackTraitCollection]();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_populateInitialTraitCollection:", v17);

  }
  *((_QWORD *)v9 + 13) |= 0x600000000uLL;
  v18 = objc_msgSend(v9, "_subclassImplementsDrawRect");
  v19 = 4;
  if (!v18)
    v19 = 0;
  *((_QWORD *)v9 + 13) = *((_QWORD *)v9 + 13) & 0xFFFFFFFFFFFFFFFBLL | v19;
  v20 = objc_msgSend(v9, "methodForSelector:", sel_intrinsicContentSize);
  v21 = 32;
  if (!v20 || v20 == qword_1EDDCA778)
  {
    v22 = objc_msgSend(v9, "methodForSelector:", sel__intrinsicSizeWithinSize_);
    if (v22 == qword_1EDDCA780 || v22 == 0)
      v21 = 0;
    else
      v21 = 32;
  }
  *((_QWORD *)v9 + 13) = *((_QWORD *)v9 + 13) & 0xFFFFFFFFFFFFFFDFLL | v21;
  v24 = objc_msgSend(v9, "methodForSelector:", sel_viewForBaselineLayout);
  if (v24 == qword_1EDDCA788 || v24 == 0)
    v26 = 0;
  else
    v26 = 2048;
  *((_DWORD *)v9 + 30) = *((_DWORD *)v9 + 30) & 0xFFFFF7FF | v26;
  v27 = objc_msgSend(v9, "methodForSelector:", sel_focusItemsInRect_);
  if (v27)
    v28 = v27 == qword_1EDDCA790;
  else
    v28 = 1;
  v29 = 0x800000000;
  if (v28)
    v29 = 0;
  *(_QWORD *)(v9 + 124) = *(_QWORD *)(v9 + 124) & 0xFFFFFFF7FFFFFFFFLL | v29;
  if (!v28 && (objc_msgSend((id)objc_opt_class(), "_supportsInvalidatingFocusCache") & 1) == 0)
  {
    v30 = qword_1EDDCA888;
    if (!qword_1EDDCA888)
    {
      v30 = __UILogCategoryGetNode("UIFocus", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v30, (unint64_t *)&qword_1EDDCA888);
    }
    v31 = *(NSObject **)(v30 + 8);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = v31;
      v33 = (objc_class *)objc_opt_class();
      NSStringFromClass(v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = 138412290;
      v62 = v34;
      _os_log_impl(&dword_185066000, v32, OS_LOG_TYPE_ERROR, "%@ implements focusItemsInRect: - caching for linear focus movement is limited as long as this view is on screen.", (uint8_t *)&v61, 0xCu);

    }
  }
  if (objc_msgSend((id)objc_opt_class(), "_wantsDeepColorByDefault"))
    v35 = 0x20000000;
  else
    v35 = 0;
  *((_DWORD *)v9 + 30) = *((_DWORD *)v9 + 30) & 0xDFFFFFFF | v35;
  v36 = (void *)*((_QWORD *)v9 + 21);
  if (v36)
  {
    v37 = v36;
  }
  else
  {
    objc_msgSend((id)objc_opt_class(), "layerClass");
    v37 = objc_alloc_init((Class)(id)objc_claimAutoreleasedReturnValue());
  }
  v38 = v37;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v40 = 0x4000000000;
  if ((isKindOfClass & 1) == 0)
    v40 = 0;
  *((_QWORD *)v9 + 13) = *((_QWORD *)v9 + 13) & 0xFFFFFFBFFFFFFFFFLL | v40;
  v41 = objc_msgSend(MEMORY[0x1E0CD28B0], "disableActions");
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  if ((v41 & 1) == 0)
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 0);
  _UIViewSetLayer((uint64_t)v9, v38);
  -[UIView _updateAutogeneratedNameForLayerIfNeeded]((uint64_t)v9);
  if (!v36)
  {
    objc_msgSend(*((id *)v9 + 21), "setBounds:", 0.0, 0.0, a4, a5);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v42 = *((id *)v9 + 21);
      objc_msgSend(v42, "setOpaque:", objc_msgSend(v9, "isOpaque"));

    }
    objc_msgSend(v9, "setContentScaleFactor:", 0.0);
    objc_msgSend(v9, "_setNeedsContentsFormatUpdate");
  }

  v43 = objc_msgSend(v9, "methodForSelector:", sel__didScroll);
  v44 = v43 == qword_1EDDCA848 || v43 == 0;
  v45 = 8;
  if (v44)
    v45 = 0;
  *((_QWORD *)v9 + 13) = *((_QWORD *)v9 + 13) & 0xFFFFFFFFFFFFFFF7 | v45;
  v46 = objc_msgSend(v9, "methodForSelector:", sel_touchesBegan_withEvent_);
  if (v46 == qword_1EDDCA850
    && (v47 = objc_msgSend(v9, "methodForSelector:", sel_touchesMoved_withEvent_), v47 == qword_1EDDCA858))
  {
    v60 = objc_msgSend(v9, "methodForSelector:", sel_touchesEnded_withEvent_);
    v48 = 16 * (v60 != qword_1EDDCA860);
  }
  else
  {
    v48 = 16;
  }
  *((_QWORD *)v9 + 13) = *((_QWORD *)v9 + 13) & 0xFFFFFFFFFFFFFFEFLL | v48;
  v49 = objc_msgSend(v9, "methodForSelector:", sel__shouldDelayTouchForSystemGestures_);
  *((_QWORD *)v9 + 14) = *((_QWORD *)v9 + 14) & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)(v49 != qword_1EDDCA868) << 31);
  v50 = *((id *)v9 + 21);
  v51 = objc_msgSend(v50, "needsDisplayOnBoundsChange");
  v52 = 0x2000000000;
  if (!v51)
    v52 = 0;
  *((_QWORD *)v9 + 13) = *((_QWORD *)v9 + 13) & 0xFFFFFFDFFFFFFFFFLL | v52;

  v53 = objc_msgSend(v9, "methodForSelector:", sel__traitCollectionForChildEnvironment_);
  *((_QWORD *)v9 + 14) = *((_QWORD *)v9 + 14) & 0xFFFDFFFFFFFFFFFFLL | ((unint64_t)(v53 != qword_1EDDCA878) << 49);
  v54 = objc_msgSend(v9, "methodForSelector:", sel__baselineOffsetsAtSize_);
  v55 = *((_DWORD *)v9 + 30);
  v56 = *((_QWORD *)v9 + 13);
  v57 = *((_QWORD *)v9 + 14) & 0xFFFBFFFFFFFFFFFFLL | ((unint64_t)(v54 != qword_1EDDCA880) << 50);
  *((_QWORD *)v9 + 14) = v57;
  if (!v10)
  {
    *((_QWORD *)v9 + 13) = v56;
    *((_QWORD *)v9 + 14) = v57 | 0x2000000000000000;
    *((_DWORD *)v9 + 30) = v55 | 0x200;
    objc_msgSend(v9, "setFrame:", a2, a3, a4, a5);
    v58 = *((_QWORD *)v9 + 14) & 0xDFFFFFFFFFFFFFFFLL;
    *((_DWORD *)v9 + 30) &= ~0x200u;
    *((_QWORD *)v9 + 14) = v58;
    if ((dyld_program_sdk_at_least() & 1) == 0)
      *((_DWORD *)v9 + 30) &= ~0x80u;
  }
  v59 = objc_msgSend(v9, "methodForSelector:", sel_layoutSubviews);
  *(_QWORD *)(v9 + 124) = *(_QWORD *)(v9 + 124) & 0xFFFFFFFFBFFFFFFFLL | ((unint64_t)(v59 == qword_1EDDCA7A8) << 30);
  if (dyld_program_sdk_at_least()
    && objc_msgSend((id)objc_opt_class(), "requiresConstraintBasedLayout"))
  {
    *((_QWORD *)v9 + 13) |= 0x400000000000000uLL;
  }
  if (qword_1EDDCA890 != -1)
    dispatch_once(&qword_1EDDCA890, &__block_literal_global_3345);
  *(_QWORD *)(v9 + 124) &= 0xFFFFFFFFFFFE3FFFLL;
  *((_DWORD *)v9 + 30) = *((_DWORD *)v9 + 30) & 0xFFF7FFFF | ((+[UIView userInterfaceLayoutDirectionForSemanticContentAttribute:](UIView, "userInterfaceLayoutDirectionForSemanticContentAttribute:", 0) == UIUserInterfaceLayoutDirectionRightToLeft) << 19);
  *(_QWORD *)(v9 + 124) |= 0x2000000000uLL;

}

uint64_t _UIGetCurrentFallbackTraitCollection()
{
  UIScreen *v0;
  int v1;
  uint64_t v2;
  char v3;
  double v4;
  void *v6;
  void *v7;
  unint64_t v8;
  NSObject *v9;
  int v10;
  void *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (pthread_main_np() != 1)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UITraitCollection * _Nonnull _UIGetCurrentFallbackTraitCollection(void)"), CFSTR("_UIFallbackEnvironment_NonARC.m"), 103, CFSTR("The current fallback environment can only be used from the main thread."));
  }
  if (!dyld_program_sdk_at_least())
    goto LABEL_11;
  v0 = (UIScreen *)qword_1ECD7E860;
  if (qword_1ECD7E860)
    goto LABEL_12;
  if (!dyld_program_sdk_at_least())
    goto LABEL_11;
  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v1 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    v10 = _UIInternalPreference_UseMostActiveWindowSceneAsBaseFallbackEnvironment;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_UseMostActiveWindowSceneAsBaseFallbackEnvironment)
    {
      while (v1 >= v10)
      {
        _UIInternalPreferenceSync(v1, &_UIInternalPreference_UseMostActiveWindowSceneAsBaseFallbackEnvironment, (uint64_t)CFSTR("UseMostActiveWindowSceneAsBaseFallbackEnvironment"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
        v10 = _UIInternalPreference_UseMostActiveWindowSceneAsBaseFallbackEnvironment;
        if (v1 == _UIInternalPreference_UseMostActiveWindowSceneAsBaseFallbackEnvironment)
          goto LABEL_9;
      }
      if (!byte_1ECD7661C)
        goto LABEL_11;
    }
  }
LABEL_9:
  v0 = (UIScreen *)__cachedMostActiveWindowScene;
  if (!__cachedMostActiveWindowScene)
  {
    v0 = +[_UISceneLifecycleMultiplexer mostActiveSceneWithTest:](_UISceneLifecycleMultiplexer, "mostActiveSceneWithTest:", &__block_literal_global_293);
    __cachedMostActiveWindowScene = (uint64_t)v0;
    if (!v0)
LABEL_11:
      v0 = +[UIScreen mainScreen](UIScreen, "mainScreen");
  }
LABEL_12:
  v2 = -[UIScreen _fallbackTraitCollection](v0, "_fallbackTraitCollection");
  if (!dyld_program_sdk_at_least())
    return v2;
  if (!v2)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UITraitCollection * _Nonnull _UIGetCurrentFallbackTraitCollection(void)"), CFSTR("_UIFallbackEnvironment_NonARC.m"), 109, CFSTR("%@ returned nil from -traitCollection, which is not allowed."), _UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection(v0));
    if ((dyld_program_sdk_at_least() & 1) != 0)
    {
LABEL_28:
      v11 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UITraitCollection * _Nonnull _UIGetCurrentFallbackTraitCollection(void)"), CFSTR("_UIFallbackEnvironment_NonARC.m"), 117, CFSTR("A trait environment returned a trait collection with unspecified values for traits that are not allowed to be unspecified. This is a serious application bug and will cause undefined behavior. This issue may be caused by your class overriding the traitCollection property getter, which is not supported. Make sure to use the appropriate API if you are trying to override traits. Trait Environment: %@; Trait Collection: %@"),
        _UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection(v0),
        v2);
      return v2;
    }
LABEL_20:
    v8 = _MergedGlobals_1097;
    if (!_MergedGlobals_1097)
    {
      v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v8, (unint64_t *)&_MergedGlobals_1097);
    }
    v9 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v13 = _UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection(v0);
      v14 = 2112;
      v15 = v2;
      _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "A trait environment returned a trait collection with unspecified values for traits that are not allowed to be unspecified. This is a serious application bug and will cause undefined behavior. This issue may be caused by your class overriding the traitCollection property getter, which is not supported. Make sure to use the appropriate API if you are trying to override traits. Trait Environment: %@; Trait Collection: %@",
        buf,
        0x16u);
    }
    return v2;
  }
  v3 = dyld_program_sdk_at_least();
  v4 = *(double *)(v2 + 16);
  if ((v3 & 1) == 0)
  {
    if (v4 > 0.0)
      return v2;
    goto LABEL_20;
  }
  if (v4 <= 0.0)
    goto LABEL_28;
  return v2;
}

void _UIViewSetLayer(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  id *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;

  if (a1)
  {
    v4 = *(id *)(a1 + 168);
    if (v4)
    {
      objc_msgSend(*(id *)(a1 + 168), "setUnsafeUnretainedDelegate:", 0);
      if ((dyld_program_sdk_at_least() & 1) == 0)
        objc_msgSend(v4, "setDelegate:", 0);
      v5 = -[UIView _backing_outermostLayer]((_QWORD *)a1);
      if (v4 != v5)
      {
        v6 = v5;
        objc_msgSend(v5, "setUnsafeUnretainedDelegate:", 0);
        if ((dyld_program_sdk_at_least() & 1) == 0)
          objc_msgSend(v6, "setDelegate:", 0);
      }
      objc_setAssociatedObject(v4, &unk_1EDDCA61C, 0, (void *)1);
    }
    *(_QWORD *)(a1 + 168) = a2;
    if (a2)
    {
      objc_msgSend(a2, "superlayer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = (id *)(a1 + 64);
      if (v7)
      {
        v9 = *v8;
        *v8 = 0;

        v10 = a2;
        v11 = (void *)a1;
      }
      else
      {
        objc_storeStrong(v8, a2);
        v10 = a2;
        v11 = 0;
      }
      objc_setAssociatedObject(v10, &unk_1EDDCA61C, v11, (void *)1);
      objc_msgSend(a2, "setUnsafeUnretainedDelegate:", a1);
      if ((dyld_program_sdk_at_least() & 1) == 0)
        objc_msgSend(a2, "setDelegate:", a1);
    }
    else
    {
      v12 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;

      -[UIBackgroundConfiguration _setCustomView:](*(_QWORD *)(a1 + 176), 0);
    }
  }
}

void *UIAccessibilityUpdateInvertColorsFilters(void *a1, int a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;

  v6 = _AXSInvertColorsEnabled();
  if (a3 == 1 && !v6)
    return 0;
  v7 = 0x7FFFFFFFFFFFFFFFLL;
  if (a1 && !a3)
  {
    do
    {
      v8 = (void *)objc_msgSend(a1, "filters");
      v9 = objc_msgSend(v8, "indexOfObjectPassingTest:", &__block_literal_global_399);
      v7 = v9;
      if (v8)
        v10 = v9 == 0x7FFFFFFFFFFFFFFFLL;
      else
        v10 = 1;
      if (v10)
        v11 = a2 ^ 1;
      else
        v11 = 1;
      if (v11 == 1)
        break;
      a1 = (void *)objc_msgSend(a1, "superlayer");
    }
    while (a1);
  }
  if (a3)
  {
    if (a3 != 1)
      return 0;
    v12 = objc_msgSend((id)objc_msgSend(a1, "filters"), "indexOfObjectPassingTest:", &__block_literal_global_399);
    if (objc_msgSend(a1, "filters"))
    {
      if (v12 != 0x7FFFFFFFFFFFFFFFLL)
        return 0;
    }
    if (objc_msgSend(a1, "filters"))
      v16 = (id)objc_msgSend((id)objc_msgSend(a1, "filters"), "mutableCopy");
    else
      v16 = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v15 = v16;
    v17 = (void *)objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", *MEMORY[0x1E0CD2BE0]);
    objc_msgSend(v17, "setName:", CFSTR("InvertColorsDoubleInvert"));
    objc_msgSend(v17, "setAccessibility:", 1);
    objc_msgSend(v15, "addObject:", v17);
LABEL_26:
    objc_msgSend(a1, "setFilters:", v15);
    return a1;
  }
  v14 = objc_msgSend(a1, "filters");
  result = 0;
  if (v14 && v7 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v15 = (id)objc_msgSend((id)objc_msgSend(a1, "filters"), "mutableCopy");
    objc_msgSend(v15, "removeObjectAtIndex:", v7);
    goto LABEL_26;
  }
  return result;
}

void _UIViewInvalidateTraitCollectionAndSchedulePropagation(uint64_t a1, uint64_t a2)
{
  id *v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v3 = (id *)a1;
  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 112) | 0x800000000000;
  *(_DWORD *)(a1 + 120) &= ~0x80u;
  *(_QWORD *)(a1 + 112) = v4;
  if (qword_1EDDCA898 != -1)
    dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
  if (!byte_1EDDCA61D)
  {
    v7 = (unint64_t)v3[12];
    objc_msgSend(v3, "_presentationControllerToNotifyOnLayoutSubviews");
    v8 = objc_claimAutoreleasedReturnValue();
    if (v7 | v8
      || (v9 = (id)objc_msgSend(v3, "window")) != 0
      && ((v10 = v9, dyld_program_sdk_at_least())
       && (objc_msgSend(v3, "superview"),
           v11 = (void *)objc_claimAutoreleasedReturnValue(),
           v11,
           v11 == v10)
       || (objc_msgSend(v10, "_shouldForceTraitPropagationThroughHierarchy") & 1) != 0
       || ((unint64_t)v3[14] & 0x1000000000000) != 0))
    {

    }
    else if ((dyld_program_sdk_at_least() & 1) != 0)
    {
LABEL_24:
      -[UIView _invalidateAppearanceIfNeeded](v3);
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      objc_msgSend(v3, "_allSubviews", 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v18;
        do
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v18 != v15)
              objc_enumerationMutation(v12);
            _UIViewInvalidateTraitCollectionAndSchedulePropagation(*(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i), a2);
          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        }
        while (v14);
      }

      return;
    }
    if (!*((_WORD *)v3 + 110) || (dyld_program_sdk_at_least() & 1) == 0)
      objc_msgSend(v3, "setNeedsLayout");
    goto LABEL_24;
  }
  if ((_DWORD)a2)
  {
    v5 = (id)objc_msgSend(v3, "_window");
    if (v5)
    {
      v6 = v5;
      while (1)
      {
        v3[14] = (id)((unint64_t)v3[14] | 0x800000000000);
        if ((objc_msgSend(v3[21], "needsLayout") & 1) != 0 || ((unint64_t)v3[14] & 0x30000) != 0)
          break;
        if (*((_WORD *)v3 + 110))
        {
          -[UIView _updateTraitsIfNeededWithBehavior:]((uint64_t)v3, 0);
          return;
        }
        v3 = (id *)(id)objc_msgSend(v3, "superview");
        if (!v3)
        {
          objc_msgSend(v6, "setNeedsLayout");
          return;
        }
      }
    }
  }
}

uint64_t _UIConstraintBasedLayoutEngageNonLazily()
{
  if (qword_1ECD790E0 != -1)
    dispatch_once(&qword_1ECD790E0, &__block_literal_global_44_1);
  return byte_1ECD790B2;
}

BOOL _UIBarStyleWithTintColorIsTranslucentOnScreen(unint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  _BOOL8 v6;
  uint64_t v7;

  v5 = a3;
  if (objc_msgSend(v5, "_userInterfaceIdiom") == 3)
    goto LABEL_2;
  if (v5)
  {
    v7 = objc_msgSend(v5, "_userInterfaceIdiom");
    if (a1 > 2 || v7 == 3)
      goto LABEL_8;
LABEL_2:
    v6 = 1;
    goto LABEL_11;
  }
  if (a1 < 3)
    goto LABEL_2;
LABEL_8:
  if (a2)
    v6 = 0;
  else
    v6 = (a1 & 0xFFFFFFFFFFFFFFFELL) == 2;
LABEL_11:

  return v6;
}

void sub_18508CAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18508CBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIScreenForcedMainScreenScale(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  BOOL v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD block[5];
  _QWORD *vars0;

  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_scale");
  v4 = v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___UIScreenForcedMainScreenScale_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  *(double *)&block[4] = v4;
  if (qword_1ECD799A0 != -1)
    dispatch_once(&qword_1ECD799A0, block);
  if (*(double *)&qword_1ECD799B8 <= 0.0)
    return v4;
  if (a1 == 2)
  {
    v5 = (_QWORD *)*vars0;
LABEL_8:
    v6 = v5[1];
    v7 = dyld_image_path_containing_address();
    v8 = (const char *)v7;
    if (v6)
      v9 = v7 == qword_1ECD799A8;
    else
      v9 = 0;
    if (v9 || !v7)
      return *(double *)&qword_1ECD799B8;
    goto LABEL_16;
  }
  if (a1 == 1)
  {
    v5 = vars0;
    goto LABEL_8;
  }
  v10 = dyld_image_path_containing_address();
  if (!a1)
    return *(double *)&qword_1ECD799B8;
  v8 = (const char *)v10;
  if (!v10)
    return *(double *)&qword_1ECD799B8;
LABEL_16:
  if (qword_1ECD799B0)
  {
    if (strncmp("/usr/lib/", v8, 9uLL))
    {
      if (strncmp("/System/Library/", v8, 0x10uLL))
      {
        objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v8, 0, 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "URLByResolvingSymlinksInPath");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "absoluteString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        LODWORD(v11) = objc_msgSend(v13, "hasPrefix:", qword_1ECD799B0);
        if ((_DWORD)v11)
          return *(double *)&qword_1ECD799B8;
      }
    }
  }
  return v4;
}

void _UIDataSourceGenerateUpdateMaps(unsigned int *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v7;
  _UIMutableFastIndexSet *v8;
  const void *v9;
  const void *v10;
  unint64_t v11;
  uint64_t (**v12)(void *, _QWORD);
  unsigned int (**v13)(void *, _QWORD);
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __n128 v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  unsigned int v28;
  unint64_t v29;
  __n128 v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  _DWORD *MapWithCapacity;
  uint16x8_t *v42;
  uint64_t i;
  uint64_t v44;
  _DWORD *v45;
  uint64_t j;
  uint64_t v47;
  uint64_t v48;
  _UIMutableFastIndexSet *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  void (**v60)(id, _QWORD, unint64_t);
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __n128 v70;
  uint64_t v71;
  void *v72;
  void *v73;
  __n128 v74;
  uint64_t v75;
  id v76;
  unint64_t v77;
  uint64_t (**v78)(void *, _QWORD);
  unsigned int (**v79)(void *, _QWORD);
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  __n128 v93;
  __n128 v94;
  uint64_t v95;
  void *v96;
  __CFString *v97;
  void *v98;
  void *v99;
  id v100;
  unint64_t v101;
  unint64_t v102;
  __n128 v103;
  __n128 v104;
  uint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  int v143;
  int v144;
  void *v145;
  void *v146;
  int v147;
  int v148;
  uint64_t v149;
  void *v150;
  void *v151;
  uint64_t v152;
  void *v153;
  id v154;
  void (**v155)(void *, const __CFString *, _QWORD *);
  unint64_t v156;
  void *v157;
  void *v158;
  id v159;
  float *v160;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  uint64_t v172;
  uint64_t v173;
  id v174;
  void *v175;
  void *__b;
  uint16x8_t *v177;
  _UIMutableFastIndexSet *v178;
  uint64_t v179;
  id v180;
  unsigned int (**v181)(void *, _QWORD);
  uint64_t v182;
  unint64_t v184;
  uint64_t (**v185)(void *, _QWORD);
  void *v186;
  uint64_t (**v187)(void *, _QWORD);
  void *v188;
  uint16x8_t *v189;
  uint64_t (**v193)(void *, _QWORD);
  void *v194;
  _UIMutableFastIndexSet *v195;
  _UIMutableFastIndexSet *v196;
  uint64_t v197;
  _UIMutableFastIndexSet *v198;
  uint64_t v199;
  void *v201;
  uint64_t v202;
  void *v203;
  void *v204;
  void *v205;
  int v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  _QWORD v212[3];
  uint64_t v213;
  void *v214;
  void *v215;
  __int128 v216;
  __int128 v217;
  _QWORD v218[3];
  _QWORD v219[3];
  __int128 aBlock;
  __int128 v221;
  id v222;
  float32x2x2_t v223;

  v7 = a6;
  if (!a4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIDataSourceUpdateMaps _UIDataSourceGenerateUpdateMaps(const _UIDataSourceModel, const _UIDataSourceModel, const NSUInteger, const __strong _UIDataSourceUpdateProvider _Nonnull, const _UIDataSourceUpdateProcessingCallbacks, NSString * _Nullable __autoreleasing * _Nullable)");
    v163 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v162, "handleFailureInFunction:file:lineNumber:description:", v163, CFSTR("_UIDataSourceBatchUpdateMap.m"), 584, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("updateProvider != NULL"));

    v7 = a6;
  }
  v195 = objc_alloc_init(_UIMutableFastIndexSet);
  v170 = v7;
  v8 = objc_alloc_init(_UIMutableFastIndexSet);
  v9 = (const void *)*((_QWORD *)a1 + 1);
  v213 = *(_QWORD *)a1;
  v214 = _Block_copy(v9);
  v215 = _Block_copy(*((const void **)a1 + 2));
  v11 = *(_QWORD *)a2;
  v10 = (const void *)*((_QWORD *)a2 + 1);
  v212[0] = *(_QWORD *)a2;
  v12 = (uint64_t (**)(void *, _QWORD))_Block_copy(v10);
  v212[1] = v12;
  v13 = (unsigned int (**)(void *, _QWORD))_Block_copy(*((const void **)a2 + 2));
  v212[2] = v13;
  v201 = v215;
  v203 = v214;
  if (!a4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v164 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _computeGlobalIndexesOfItemUpdates(const _UIDataSourceModel, const _UIDataSourceModel, const NSUInteger, const __strong _UIDataSourceUpdateProvider, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, NSString *__autoreleasing *)");
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v164, "handleFailureInFunction:file:lineNumber:description:", v165, CFSTR("_UIDataSourceBatchUpdateMap.m"), 106, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("updateProvider != NULL"));

  }
  if (v195)
  {
    if (v8)
      goto LABEL_7;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _computeGlobalIndexesOfItemUpdates(const _UIDataSourceModel, const _UIDataSourceModel, const NSUInteger, const __strong _UIDataSourceUpdateProvider, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, NSString *__autoreleasing *)");
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v166, "handleFailureInFunction:file:lineNumber:description:", v167, CFSTR("_UIDataSourceBatchUpdateMap.m"), 107, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("deleteItemUpdatesIncludingMoves != nil"));

    if (v8)
      goto LABEL_7;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _computeGlobalIndexesOfItemUpdates(const _UIDataSourceModel, const _UIDataSourceModel, const NSUInteger, const __strong _UIDataSourceUpdateProvider, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, NSString *__autoreleasing *)");
  v169 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v168, "handleFailureInFunction:file:lineNumber:description:", v169, CFSTR("_UIDataSourceBatchUpdateMap.m"), 108, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("insertItemUpdatesIncludingMoves != nil"));

LABEL_7:
  v189 = (uint16x8_t *)v8;
  if (a3)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      aBlock = 0u;
      v221 = 0u;
      (*(void (**)(__int128 *__return_ptr))(a4 + 16))(&aBlock);
      if (!BYTE8(v221))
        break;
LABEL_25:
      if (a3 == ++v15)
        goto LABEL_43;
    }
    v216 = 0uLL;
    *(_QWORD *)&v217 = 0;
    if ((_QWORD)aBlock == 2)
    {
      v16 = v212;
    }
    else
    {
      if ((aBlock & 0xFFFFFFFFFFFFFFFDLL) != 1)
        goto LABEL_24;
      v16 = &v213;
    }
    __copy_assignment_8_8_t0w8_sb8_sb16(&v216, (uint64_t)v16);
    v17 = DWORD2(aBlock);
    v18 = v216;
    if (DWORD2(aBlock) >= v216)
    {
      if (v14)
        goto LABEL_24;
      v31 = (void *)MEMORY[0x1E0CB3940];
      _UIDataSourceUpdateActionDescription(aBlock);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item at index path (%lu - %lu), but there are only %lu sections."), v32, v17, HIDWORD(aBlock), v18);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v19 = (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)&v216 + 1) + 16))(*((_QWORD *)&v216 + 1), DWORD2(aBlock));
      v21 = HIDWORD(aBlock);
      v22 = (HIDWORD(aBlock) + v19);
      v23 = DWORD1(v216);
      if (v22 >= DWORD1(v216))
      {
        v197 = v217;
        if (v21 < (*(unsigned int (**)(_QWORD, uint64_t))(v217 + 16))(v217, v17))
        {
          if (!v14)
          {
            v34 = (void *)MEMORY[0x1E0CB3940];
            _UIDataSourceUpdateActionDescription(aBlock);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item at index path (%lu - %lu) (global item index %lu), but there are only %lu total items."), v35, v17, HIDWORD(aBlock), v22, v23);
            v14 = (id)objc_claimAutoreleasedReturnValue();

          }
          goto LABEL_24;
        }
        if (v14)
          goto LABEL_24;
        v36 = (void *)MEMORY[0x1E0CB3940];
        _UIDataSourceUpdateActionDescription(aBlock);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item at index path (%lu - %lu), but there are only %lu items in the section."), v32, v17, HIDWORD(aBlock), (*(unsigned int (**)(uint64_t, uint64_t))(v197 + 16))(v197, v17));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v24 = (uint64_t)v195;
        if ((_QWORD)aBlock == 1)
        {
LABEL_20:
          -[_UIMutableFastIndexSet addIndex:](v24, v22, v20);
          goto LABEL_24;
        }
        if ((_QWORD)aBlock != 3)
        {
          if ((_QWORD)aBlock == 2)
          {
            v24 = (uint64_t)v189;
            goto LABEL_20;
          }
LABEL_24:

          goto LABEL_25;
        }
        v25 = v221;
        if (v221 >= v11)
        {
          if (!v14)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item to destination index path (%lu - %lu), but there are only %lu sections."), CFSTR("move"), v221, DWORD1(v221), v11);
            v14 = (id)objc_claimAutoreleasedReturnValue();
          }
          goto LABEL_24;
        }
        v26 = v12[2](v12, v221);
        v28 = DWORD1(v221);
        v29 = (DWORD1(v221) + v26);
        if (v29 < HIDWORD(v11))
        {
          -[_UIMutableFastIndexSet addIndex:]((uint64_t)v195, v22, v27);
          -[_UIMutableFastIndexSet addIndex:]((uint64_t)v189, v29, v30);
          goto LABEL_24;
        }
        if (v28 >= v13[2](v13, v25))
        {
          if (v14)
            goto LABEL_24;
          v38 = (void *)MEMORY[0x1E0CB3940];
          _UIDataSourceUpdateActionDescription(aBlock);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item to destination index path (%lu - %lu), but there are only %lu items in the section."), v32, v25, DWORD1(v221), v13[2](v13, v25));
          v33 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          if (v14)
            goto LABEL_24;
          v37 = (void *)MEMORY[0x1E0CB3940];
          _UIDataSourceUpdateActionDescription(aBlock);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item to destination index path (%lu - %lu) (global item index %lu), but there are only %lu total items."), v32, v25, DWORD1(v221), v29, HIDWORD(v11));
          v33 = (void *)objc_claimAutoreleasedReturnValue();
        }
      }
    }
    v14 = v33;

    goto LABEL_24;
  }
  v14 = 0;
LABEL_43:

  v39 = v14;
  v40 = *a1;
  MapWithCapacity = _allocateMapWithCapacity(*a1);
  v42 = v189;
  if ((_DWORD)v40)
  {
    for (i = 0; i != v40; ++i)
      MapWithCapacity[i] = i;
  }
  v173 = (uint64_t)MapWithCapacity;
  v44 = a1[1];
  v45 = _allocateMapWithCapacity(a1[1]);
  if ((_DWORD)v44)
  {
    for (j = 0; j != v44; ++j)
      v45[j] = j;
  }
  v172 = (uint64_t)v45;
  v47 = *a1;
  __b = _allocateMapWithCapacity(*a1);
  if ((_DWORD)v47)
    memset(__b, 255, 4 * v47);
  v48 = a1[1];
  v186 = _allocateMapWithCapacity(a1[1]);
  if ((_DWORD)v48)
    memset(v186, 255, 4 * v48);
  v178 = objc_alloc_init(_UIMutableFastIndexSet);
  v49 = objc_alloc_init(_UIMutableFastIndexSet);
  v198 = objc_alloc_init(_UIMutableFastIndexSet);
  v196 = objc_alloc_init(_UIMutableFastIndexSet);
  v177 = (uint16x8_t *)v49;
  if (a3)
  {
    v50 = 0;
    while (1)
    {
      aBlock = 0u;
      v221 = 0u;
      (*(void (**)(__int128 *__return_ptr))(a4 + 16))(&aBlock);
      v216 = 0uLL;
      *(_QWORD *)&v217 = 0;
      v51 = (uint64_t)a2;
      if ((_QWORD)aBlock == 2)
        break;
      v51 = (uint64_t)a1;
      if ((aBlock & 0xFFFFFFFFFFFFFFFDLL) == 1)
        break;
      v72 = 0;
      v73 = 0;
LABEL_166:

      if (++v50 == a3)
        goto LABEL_182;
    }
    v199 = v50;
    __copy_assignment_8_8_t0w8_sb8_sb16(&v216, v51);
    if (BYTE8(v221))
    {
      v53 = *a1;
      v54 = *a2;
      v55 = aBlock;
      v56 = DWORD2(aBlock);
      v57 = v221;
      if (!__b)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processSectionUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIMapIndex, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v106, "handleFailureInFunction:file:lineNumber:description:", v107, CFSTR("_UIDataSourceBatchUpdateMap.m"), 223, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("sectionMoveSourceToDestMap != NULL"));

      }
      if (!v178)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processSectionUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIMapIndex, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v108, "handleFailureInFunction:file:lineNumber:description:", v109, CFSTR("_UIDataSourceBatchUpdateMap.m"), 224, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("deletedSectionsIncludingMoves != nil"));

      }
      if (!v177)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processSectionUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIMapIndex, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v110, "handleFailureInFunction:file:lineNumber:description:", v111, CFSTR("_UIDataSourceBatchUpdateMap.m"), 225, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("insertedSectionsIncludingMoves != nil"));

      }
      if (!a5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processSectionUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIMapIndex, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "handleFailureInFunction:file:lineNumber:description:", v113, CFSTR("_UIDataSourceBatchUpdateMap.m"), 226, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("callbacksPtr != NULL"));

      }
      if (v55 == 2)
        v58 = v54;
      else
        v58 = v53;
      if (v56 >= v58)
      {
        v59 = v39;
        if (!v39)
        {
          v114 = (void *)MEMORY[0x1E0CB3940];
          _UIDataSourceUpdateActionDescription(v55);
          v115 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v114, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ section %lu, but there are only %lu sections."), v115, v56, v58);
          v59 = (id)objc_claimAutoreleasedReturnValue();

        }
      }
      else if (v55 == 3)
      {
        if (v57 >= v54)
        {
          v59 = v39;
          if (!v39)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ to destination section %lu, but there are only %lu sections."), CFSTR("move"), v57, v54);
            v59 = (id)objc_claimAutoreleasedReturnValue();
          }
        }
        else
        {
          -[_UIMutableFastIndexSet addIndex:]((uint64_t)v178, v56, v52);
          -[_UIMutableFastIndexSet addIndex:]((uint64_t)v177, v57, v74);
          *((_DWORD *)__b + v56) = v57;
          v75 = *(_QWORD *)(a5 + 16);
          v59 = v39;
          if (v75)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(v75 + 16))(v75, v199, v56, v57);
            v59 = v39;
          }
        }
      }
      else
      {
        if (v55 == 2)
        {
          -[_UIMutableFastIndexSet addIndex:]((uint64_t)v177, v56, v52);
          v60 = *(void (***)(id, _QWORD, unint64_t))(a5 + 8);
        }
        else
        {
          v59 = v39;
          if (v55 != 1)
            goto LABEL_96;
          -[_UIMutableFastIndexSet addIndex:]((uint64_t)v178, v56, v52);
          v60 = *(void (***)(id, _QWORD, unint64_t))a5;
        }
        v59 = v39;
        if (v60)
        {
          v60[2](v60, v199, v56);
          v59 = v39;
        }
      }
LABEL_96:
      v76 = v59;

      v77 = v216;
      v187 = (uint64_t (**)(void *, _QWORD))_Block_copy(*((const void **)&v216 + 1));
      v78 = (uint64_t (**)(void *, _QWORD))_Block_copy((const void *)v217);
      v184 = *(_QWORD *)a2;
      v185 = v78;
      v193 = (uint64_t (**)(void *, _QWORD))_Block_copy(*((const void **)a2 + 1));
      v79 = (unsigned int (**)(void *, _QWORD))_Block_copy(*((const void **)a2 + 2));
      v80 = aBlock;
      v81 = DWORD2(aBlock);
      v181 = v79;
      v182 = v221;
      v50 = v199;
      if (!v186)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v116 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processItemsInSectionUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIDataSourceModel, const _UIDataSourceModel, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, _UIFastIndexSet *const __strong, _UIFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v116, "handleFailureInFunction:file:lineNumber:description:", v117, CFSTR("_UIDataSourceBatchUpdateMap.m"), 287, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("itemMoveSourceToDestMap != NULL"));

      }
      if (!v198)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processItemsInSectionUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIDataSourceModel, const _UIDataSourceModel, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, _UIFastIndexSet *const __strong, _UIFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
        v119 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v118, "handleFailureInFunction:file:lineNumber:description:", v119, CFSTR("_UIDataSourceBatchUpdateMap.m"), 288, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("deletedItemsIncludingMoves != nil"));

      }
      if (!v196)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processItemsInSectionUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIDataSourceModel, const _UIDataSourceModel, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, _UIFastIndexSet *const __strong, _UIFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
        v121 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v120, "handleFailureInFunction:file:lineNumber:description:", v121, CFSTR("_UIDataSourceBatchUpdateMap.m"), 289, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("insertedItemsIncludingMoves != nil"));

      }
      if (v195)
      {
        if (v42)
        {
LABEL_104:
          if (!a5)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v126 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processItemsInSectionUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIDataSourceModel, const _UIDataSourceModel, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, _UIFastIndexSet *const __strong, _UIFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
            v127 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v126, "handleFailureInFunction:file:lineNumber:description:", v127, CFSTR("_UIDataSourceBatchUpdateMap.m"), 292, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("callbacksPtr != NULL"));

          }
          if (v81 < v77)
          {
            v82 = v185[2](v185, v81);
            v180 = v76;
            v206 = v187[2](v187, v81);
            v84 = v182;
            if (v82)
            {
              v85 = 0;
              v86 = 0;
              v87 = 0;
              v174 = v180;
              v202 = v82;
              v204 = (void *)HIDWORD(v77);
              while (1)
              {
                v88 = (v206 + v85);
                if (v88 >= v204)
                {
                  if (!v174)
                  {
                    v96 = (void *)MEMORY[0x1E0CB3940];
                    _UIDataSourceUpdateActionDescription(v80);
                    v97 = (__CFString *)objc_claimAutoreleasedReturnValue();
                    _UIDataSourceUpdateActionDescription(v80);
                    v98 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v96, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item at index path (%lu - %lu) (global item index %lu) as part of an update to %@ section %lu, but there are only %lu total items."), v97, v81, v85, v88, v98, v81, v204);
                    v174 = (id)objc_claimAutoreleasedReturnValue();

LABEL_130:
                  }
                }
                else
                {
                  switch(v80)
                  {
                    case 3:
                      if (!-[_UIFastIndexSet containsIndex:]((uint16x8_t *)v195, (v206 + v85)))
                      {
                        if (v84 >= v184)
                        {
                          if (v174)
                            break;
                          v97 = CFSTR("move");
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item to destination section %lu as part of a section %@ update, but there are only %lu sections."), CFSTR("move"), v84, CFSTR("move"), v184);
                          v174 = (id)objc_claimAutoreleasedReturnValue();
                        }
                        else
                        {
                          v90 = v193[2](v193, v84);
                          v179 = (v86 - v87 + v85);
                          v91 = (v90 + v179);
                          v92 = v91;
                          if (-[_UIFastIndexSet containsIndex:](v189, v91))
                          {
                            do
                              v91 = (++v86 + v90 + v85 - v87);
                            while ((-[_UIFastIndexSet containsIndex:](v189, v91) & 1) != 0);
                            v92 = (v90 + v85 - v87 + v86);
                            v84 = v182;
                          }
                          if (v92 < HIDWORD(v184))
                          {
                            -[_UIMutableFastIndexSet addIndex:]((uint64_t)v198, v88, v93);
                            -[_UIMutableFastIndexSet addIndex:]((uint64_t)v196, v91, v94);
                            *((_DWORD *)v186 + v88) = v92;
                            v95 = *(_QWORD *)(a5 + 40);
                            if (v95)
                              (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(v95 + 16))(v95, v199, v88, v92);
                            break;
                          }
                          if (v179 >= v181[2](v181, v84))
                          {
                            if (v174)
                              break;
                            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item to destination index path (%lu - %lu) as part of a section %@ update, but there are only %lu items in the section."), CFSTR("move"), v84, v179, CFSTR("move"), v181[2](v181, v84));
                            v99 = (void *)objc_claimAutoreleasedReturnValue();
                          }
                          else
                          {
                            if (v174)
                              break;
                            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item to destination index path (%lu - %lu) (global item index %lu) as part of a section %@ update, but there are only %lu total items."), CFSTR("move"), v84, v179, v91, CFSTR("move"), HIDWORD(v184));
                            v99 = (void *)objc_claimAutoreleasedReturnValue();
                          }
                          v174 = v99;
                          v97 = CFSTR("move");
                        }

                        goto LABEL_130;
                      }
                      ++v87;
                      break;
                    case 2:
                      -[_UIMutableFastIndexSet addIndex:]((uint64_t)v196, (v206 + v85), v83);
                      v89 = *(_QWORD *)(a5 + 32);
                      if (v89)
                        goto LABEL_116;
                      break;
                    case 1:
                      -[_UIMutableFastIndexSet addIndex:]((uint64_t)v198, (v206 + v85), v83);
                      v89 = *(_QWORD *)(a5 + 24);
                      if (!v89)
                        break;
LABEL_116:
                      (*(void (**)(uint64_t, uint64_t, unint64_t))(v89 + 16))(v89, v199, v88);
                      break;
                    default:
                      break;
                  }
                }
                if (++v85 == v202)
                {
                  v42 = v189;
                  v100 = v174;
                  v50 = v199;
                  v76 = v180;
                  goto LABEL_165;
                }
              }
            }
            v76 = v180;
            goto LABEL_141;
          }
          if (v76)
          {
LABEL_141:
            v100 = v76;
LABEL_165:

            v39 = v100;
            v73 = (void *)*((_QWORD *)&v216 + 1);
            v72 = (void *)v217;
            goto LABEL_166;
          }
          v128 = (void *)MEMORY[0x1E0CB3940];
          _UIDataSourceUpdateActionDescription(v80);
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v128, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ section %lu, but there are only %lu sections."), v129, v81, v77);
          v130 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_157:
          v100 = v130;

          v76 = 0;
          goto LABEL_165;
        }
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processItemsInSectionUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIDataSourceModel, const _UIDataSourceModel, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, _UIFastIndexSet *const __strong, _UIFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v122, "handleFailureInFunction:file:lineNumber:description:", v123, CFSTR("_UIDataSourceBatchUpdateMap.m"), 290, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("deleteItemUpdatesIncludingMoves != nil"));

        if (v42)
          goto LABEL_104;
      }
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processItemsInSectionUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIDataSourceModel, const _UIDataSourceModel, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, _UIFastIndexSet *const __strong, _UIFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
      v125 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v124, "handleFailureInFunction:file:lineNumber:description:", v125, CFSTR("_UIDataSourceBatchUpdateMap.m"), 291, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("insertItemUpdatesIncludingMoves != nil"));

      goto LABEL_104;
    }
    v61 = v216;
    v187 = (uint64_t (**)(void *, _QWORD))_Block_copy(*((const void **)&v216 + 1));
    v185 = (uint64_t (**)(void *, _QWORD))_Block_copy((const void *)v217);
    v62 = *(_QWORD *)a2;
    v193 = (uint64_t (**)(void *, _QWORD))_Block_copy(*((const void **)a2 + 1));
    v181 = (unsigned int (**)(void *, _QWORD))_Block_copy(*((const void **)a2 + 2));
    v63 = aBlock;
    v64 = DWORD2(aBlock);
    v65 = HIDWORD(aBlock);
    v66 = v221;
    v67 = DWORD1(v221);
    if (!v186)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v207 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processItemUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIDataSourceModel, const _UIDataSourceModel, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v207, "handleFailureInFunction:file:lineNumber:description:", v131, CFSTR("_UIDataSourceBatchUpdateMap.m"), 389, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("itemMoveSourceToDestMap != NULL"));

    }
    if (!v198)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v208 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processItemUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIDataSourceModel, const _UIDataSourceModel, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v208, "handleFailureInFunction:file:lineNumber:description:", v132, CFSTR("_UIDataSourceBatchUpdateMap.m"), 390, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("deletedItemsIncludingMoves != nil"));

    }
    if (!v196)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v209 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processItemUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIDataSourceModel, const _UIDataSourceModel, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
      v133 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v209, "handleFailureInFunction:file:lineNumber:description:", v133, CFSTR("_UIDataSourceBatchUpdateMap.m"), 391, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("insertedItemsIncludingMoves != nil"));

    }
    if (!a5)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v210 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processItemUpdate(const NSUInteger, const _UIDataSourceUpdate, const _UIMapIndex, const _UIDataSourceModel, const _UIDataSourceModel, _UIMapIndex *, _UIMutableFastIndexSet *const __strong, _UIMutableFastIndexSet *const __strong, const _UIDataSourceUpdateProcessingCallbacks *, NSString *__autoreleasing *)");
      v134 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v210, "handleFailureInFunction:file:lineNumber:description:", v134, CFSTR("_UIDataSourceBatchUpdateMap.m"), 392, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("callbacksPtr != NULL"));

    }
    if (v64 < v61)
    {
      v68 = HIDWORD(v61);
      v69 = v187[2](v187, v64) + v65;
      if (v69 < v68)
      {
        if (v63 != 3)
        {
          if (v63 == 2)
          {
            -[_UIMutableFastIndexSet addIndex:]((uint64_t)v196, v69, v70);
            v71 = *(_QWORD *)(a5 + 32);
            if (!v71)
            {
LABEL_144:
              v100 = v39;
              v76 = v39;
LABEL_164:
              v50 = v199;
              goto LABEL_165;
            }
LABEL_143:
            (*(void (**)(uint64_t, uint64_t, unint64_t))(v71 + 16))(v71, v199, v69);
            goto LABEL_144;
          }
          if (v63 == 1)
          {
            -[_UIMutableFastIndexSet addIndex:]((uint64_t)v198, v69, v70);
            v71 = *(_QWORD *)(a5 + 24);
            if (!v71)
              goto LABEL_144;
            goto LABEL_143;
          }
          goto LABEL_162;
        }
        v100 = v39;
        if (v66 >= v62)
        {
          if (v39)
            goto LABEL_163;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item to destination index path (%lu - %lu), but there are only %lu sections."), CFSTR("move"), v66, v67, v62);
          v100 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v101 = HIDWORD(v62);
          v102 = v193[2](v193, v66) + v67;
          if (v102 < v101)
          {
            -[_UIMutableFastIndexSet addIndex:]((uint64_t)v198, v69, v103);
            -[_UIMutableFastIndexSet addIndex:]((uint64_t)v196, v102, v104);
            *((_DWORD *)v186 + v69) = v102;
            v105 = *(_QWORD *)(a5 + 40);
            if (v105)
              (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(v105 + 16))(v105, v199, v69, v102);
            goto LABEL_163;
          }
          if (v67 >= v181[2](v181, v66))
          {
            if (v39)
              goto LABEL_163;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item to destination index path (%lu - %lu), but there are only %lu items in the section."), CFSTR("move"), v66, v67, v181[2](v181, v66));
            v136 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            if (v39)
              goto LABEL_163;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item to destination index path (%lu - %lu) (global item index %lu), but there are only %lu total items."), CFSTR("move"), v66, v67, v102, v101);
            v136 = (void *)objc_claimAutoreleasedReturnValue();
          }
          v100 = v136;

        }
LABEL_178:
        v76 = 0;
        goto LABEL_164;
      }
      if (v65 >= v185[2](v185, v64))
      {
        if (v39)
        {
LABEL_162:
          v100 = v39;
LABEL_163:
          v76 = v100;
          goto LABEL_164;
        }
        v140 = (void *)MEMORY[0x1E0CB3940];
        _UIDataSourceUpdateActionDescription(v63);
        v138 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v140, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item at index path (%lu - %lu), but there are only %lu items in the section."), v138, v64, v65, v185[2](v185, v64));
        v139 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (v39)
        {
LABEL_160:
          v76 = v39;
          v100 = v39;
          goto LABEL_164;
        }
        v137 = (void *)MEMORY[0x1E0CB3940];
        _UIDataSourceUpdateActionDescription(v63);
        v138 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v137, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item at index path (%lu - %lu) (global item index %lu), but there are only %lu total items."), v138, v64, v65, v69, v68);
        v139 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v100 = v139;

      goto LABEL_178;
    }
    if (!v39)
    {
      v135 = (void *)MEMORY[0x1E0CB3940];
      _UIDataSourceUpdateActionDescription(v63);
      v50 = v199;
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v135, "stringWithFormat:", CFSTR("Invalid batch updates detected: attempt to %@ item at index path (%lu - %lu), but there are only %lu sections."), v129, v64, v65, v61);
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_157;
    }
    goto LABEL_160;
  }
LABEL_182:
  v141 = _allocateMapWithCapacity(*a2);
  v142 = _allocateMapWithCapacity(a2[1]);
  v143 = v39 != 0;
  if (-[_UIFastIndexSet count]((int8x16_t *)v178))
    _processDeletedIndexes(*a1, (uint16x8_t *)v178, v173);
  if (-[_UIFastIndexSet count]((int8x16_t *)v177))
  {
    v144 = _processInsertedIndexes(*a1, *a2, v177, (uint64_t)__b, v173, (uint64_t)v141);
    if (v39)
      v143 = 1;
    else
      v143 = v144;
  }
  if (-[_UIFastIndexSet count]((int8x16_t *)v198))
    _processDeletedIndexes(a1[1], (uint16x8_t *)v198, v172);
  if (-[_UIFastIndexSet count]((int8x16_t *)v196))
  {
    v145 = v186;
    v143 |= _processInsertedIndexes(a1[1], a2[1], (uint16x8_t *)v196, (uint64_t)v186, v172, (uint64_t)v142);
    v146 = __b;
    if (!__b)
      goto LABEL_193;
    goto LABEL_192;
  }
  v146 = __b;
  v145 = v186;
  if (__b)
LABEL_192:
    free(v146);
LABEL_193:
  if (v145)
    free(v145);
  v147 = _populateNewIndexMap(*a1, *a2, v173, v141);
  v148 = v143 | v147 | _populateNewIndexMap(a1[1], a2[1], v172, v142);
  if (v148 == 1)
  {
    if (!v39)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid batch updates detected: the number of sections and/or items returned by the data source before and after performing the batch updates are inconsistent with the updates."));
      v39 = (id)objc_claimAutoreleasedReturnValue();
    }
    v149 = *(_QWORD *)a1;
    v150 = _Block_copy(*((const void **)a1 + 1));
    v151 = _Block_copy(*((const void **)a1 + 2));
    v152 = *(_QWORD *)a2;
    v205 = _Block_copy(*((const void **)a2 + 1));
    v211 = _Block_copy(*((const void **)a2 + 2));
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    v188 = v142;
    v194 = v141;
    v175 = v39;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 3221225472;
    *(_QWORD *)&v221 = ___UIDataSourceBatchUpdateDescription_block_invoke;
    *((_QWORD *)&v221 + 1) = &unk_1E16CB188;
    v154 = v153;
    v222 = v154;
    v155 = (void (**)(void *, const __CFString *, _QWORD *))_Block_copy(&aBlock);
    v219[0] = v149;
    v219[1] = _Block_copy(v150);
    v219[2] = _Block_copy(v151);
    v155[2](v155, CFSTR("before"), v219);
    v218[0] = v152;
    v218[1] = _Block_copy(v205);
    v218[2] = _Block_copy(v211);
    v155[2](v155, CFSTR("after"), v218);
    objc_msgSend(v154, "appendString:", CFSTR("Updates = [\n"));
    if (a3)
    {
      v156 = 0;
      do
      {
        v216 = 0u;
        v217 = 0u;
        (*(void (**)(__int128 *__return_ptr))(a4 + 16))(&v216);
        if ((_QWORD)v216)
        {
          if (BYTE8(v217))
          {
            _UIDataSourceUpdateActionDescription(v216);
            v157 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v157, "capitalizedString");
            v158 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v154, "appendFormat:", CFSTR("\t%@ section %lu"), v158, DWORD2(v216));
          }
          else
          {
            _UIDataSourceUpdateActionDescription(v216);
            v157 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v157, "capitalizedString");
            v158 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v154, "appendFormat:", CFSTR("\t%@ item (%lu - %lu)"), v158, DWORD2(v216), HIDWORD(v216));
          }

          if ((_QWORD)v216 == 3)
          {
            if (BYTE8(v217))
              objc_msgSend(v154, "appendFormat:", CFSTR(" to %lu"), v217);
            else
              objc_msgSend(v154, "appendFormat:", CFSTR(" to (%lu - %lu)"), v217, DWORD1(v217));
          }
          if (v156 < a3 - 1)
            objc_msgSend(v154, "appendString:", CFSTR(",\n"));
        }
        ++v156;
      }
      while (a3 != v156);
    }
    objc_msgSend(v154, "appendString:", CFSTR("\n]"));
    v159 = v154;

    objc_msgSend(v39, "stringByAppendingFormat:", CFSTR("\n%@"), v159);
    v142 = v188;
    v42 = v189;
    v141 = v194;
    v39 = (id)objc_claimAutoreleasedReturnValue();

  }
  if (v170)
    *v170 = objc_retainAutorelease(v39);
  v223.val[0] = *(float32x2_t *)a1;
  v223.val[1] = *(float32x2_t *)a2;
  v160 = (float *)a7;
  vst2_f32(v160, v223);
  v160 += 4;
  *(_QWORD *)v160 = v173;
  *(_QWORD *)(a7 + 24) = v141;
  *(_QWORD *)(a7 + 32) = v172;
  *(_QWORD *)(a7 + 40) = v142;
  *(_BYTE *)(a7 + 48) = v148;

  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40((id *)a5);
}

void sub_185090E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id *a47)
{

  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(a47);
  __destructor_8_sb8_sb16(a40);
  __destructor_8_sb8_sb16(a33);
  _Unwind_Resume(a1);
}

void __copy_assignment_8_8_t0w8_sb8_sb16(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *a1 = *(_QWORD *)a2;
  v4 = _Block_copy(*(const void **)(a2 + 8));
  v5 = (void *)a1[1];
  a1[1] = v4;

  v6 = _Block_copy(*(const void **)(a2 + 16));
  v7 = (void *)a1[2];
  a1[2] = v6;

}

void _UIDataSourceUpdateFromCollectionViewUpdateItem(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (!a1)
  {
    LODWORD(v8) = 0;
    *(_QWORD *)a2 = 2;
    *(_DWORD *)(a2 + 8) = 0;
    v5 = 0x7FFFFFFFFFFFFFFFLL;
    v6 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_16;
  }
  v4 = a1[10];
  if (v4)
  {
    if (v4 != 1)
    {
      if (v4 == 3)
      {
        v6 = a1[3];
        v5 = a1[4];
        goto LABEL_10;
      }
      v4 = 0;
    }
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
    v4 = 2;
  }
  v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_10:
  *(_QWORD *)a2 = v4;
  v7 = a1[5];
  if (v7 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (!HIDWORD(v7))
      goto LABEL_13;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v7);

  }
  LODWORD(v7) = -1;
LABEL_13:
  *(_DWORD *)(a2 + 8) = v7;
  v8 = a1[6];
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_14:
    LODWORD(v8) = -1;
    goto LABEL_16;
  }
  if (HIDWORD(v8))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v8);

    goto LABEL_14;
  }
LABEL_16:
  *(_DWORD *)(a2 + 12) = v8;
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_17:
    LODWORD(v6) = -1;
    goto LABEL_19;
  }
  if (HIDWORD(v6))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v6);

    goto LABEL_17;
  }
LABEL_19:
  *(_DWORD *)(a2 + 16) = v6;
  if (v5 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_20:
    LODWORD(v5) = -1;
    goto LABEL_22;
  }
  if (HIDWORD(v5))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v5);

    goto LABEL_20;
  }
LABEL_22:
  *(_DWORD *)(a2 + 20) = v5;
  if (a1)
    v9 = a1[6] == 0x7FFFFFFFFFFFFFFFLL;
  else
    v9 = 0;
  *(_BYTE *)(a2 + 24) = v9;
}

void sub_185091460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *_allocateMapWithCapacity(unsigned int a1)
{
  void *v2;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = malloc_type_malloc(4 * a1, 0xB5E5AF82uLL);
  if (!v2)
  {
    v4 = a1;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex *_allocateMapWithCapacity(const _UIMapIndex)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("_UIDataSourceBatchUpdateMap.m"), 189, CFSTR("Failed to allocate index map with capacity: %lu"), v4);

  }
  return v2;
}

void _UIExclusionMatrixPerformExclusion(void *a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t i;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  unint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t log;
  NSObject *loga;
  os_log_t logb;
  int v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void **v60;
  void **p_p;
  void *__p;
  char *v63;
  char *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint8_t buf[4];
  id v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v58 = a1;
  v1 = objc_msgSend(v58, "count");
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v2 = (v1 * v1);
  if ((_DWORD)v1 * (_DWORD)v1)
  {
    v3 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v67, ((v2 - 1) >> 6) + 1);
    v4 = v3;
    v66 = (v1 * v1);
    v67 = v5;
    v65 = v3;
    if (v2 >= 0x41)
      v6 = (v2 - 1) >> 6;
    else
      v6 = 0;
    v3[v6] = 0;
    v7 = v2 >> 6;
    if (v2 >= 0x40)
      bzero(v3, 8 * v7);
    if ((((_BYTE)v1 * (_BYTE)v1) & 0x3F) != 0)
      v4[v7] &= ~(0xFFFFFFFFFFFFFFFFLL >> -((v1 * v1) & 0x3F));
  }
  v8 = (int)v1;
  __p = 0;
  v63 = 0;
  v64 = 0;
  v52 = v1 << 32;
  if (v1 << 32)
  {
    if (v1 << 32 < 0)
      abort();
    v9 = (char *)operator new((4 * v1) & 0x3FFFFFFFFLL);
    v10 = &v9[4 * (int)v1];
    __p = v9;
    v64 = v10;
    bzero(v9, (4 * v1) & 0x3FFFFFFFFLL);
    v11 = 0;
    v63 = v10;
    if ((unint64_t)(int)v1 <= 1)
      v12 = 1;
    else
      v12 = (int)v1;
    v59 = (int)v1;
    v60 = &v65;
    p_p = &__p;
    log = -1;
    do
    {
      objc_msgSend(v58, "objectAtIndexedSubscript:", v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = objc_msgSend(v13, "_canExcludeOtherExcludables");

      if ((v56 & 1) == 0)
        *((_DWORD *)__p + (int)v11) = -1;
      v14 = 0;
      v15 = 0;
      do
      {
        objc_msgSend(v58, "objectAtIndexedSubscript:", v11);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "objectAtIndexedSubscript:", v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v16, "_isExcludedByExcludable:", v17);

        if (v18)
        {
          *(_QWORD *)((char *)v65
                    + (((unint64_t)((int)v11 * (uint64_t)(int)v8 + (v14 >> 32)) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v11 * v8 + BYTE4(v14));
          if (v56)
            ++*((_DWORD *)__p + (int)v11);
        }
        ++v15;
        v14 += 0x100000000;
      }
      while (v12 != v15);
      v19 = log;
      if (!*((_DWORD *)__p + (int)v11))
        v19 = v11;
      log = v19;
      ++v11;
    }
    while (v11 != v12);
  }
  else
  {
    v59 = (int)v1;
    v60 = &v65;
    p_p = &__p;
    log = -1;
  }
  v20 = (_BYTE *)_MergedGlobals_1076;
  v21 = v52;
  v22 = log;
  if (!_MergedGlobals_1076)
  {
    v20 = (_BYTE *)(__UILogCategoryGetNode("GestureExclusion", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v20, (unint64_t *)&_MergedGlobals_1076);
  }
  if ((*v20 & 1) != 0)
    _UIExclusionMatrixLog((uint64_t)&v59, v58);
  v23 = (char *)__p;
  if ((log & 0x8000000000000000) == 0)
  {
    if (v8 <= 1)
      v24 = 1;
    else
      v24 = v8;
    v25 = log;
    do
    {
      if (!*(_DWORD *)&v23[4 * (int)v22])
      {
        if (v21)
        {
          for (i = 0; i != v24; ++i)
          {
            if (((*(_QWORD *)((char *)v65
                             + (((unint64_t)((int)v22 + (int)i * (uint64_t)(int)v8) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v22 + i * v8)) & 1) != 0)
            {
              objc_msgSend(v58, "objectAtIndexedSubscript:", i);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "_exclude");
              v28 = qword_1ECD7E0D0;
              if (!qword_1ECD7E0D0)
              {
                v28 = __UILogCategoryGetNode("GestureExclusion", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                atomic_store(v28, (unint64_t *)&qword_1ECD7E0D0);
              }
              if ((*(_BYTE *)v28 & 1) != 0)
              {
                loga = *(id *)(v28 + 8);
                if (os_log_type_enabled(loga, OS_LOG_TYPE_ERROR))
                {
                  objc_msgSend(v27, "_excludableDescription");
                  v50 = (id)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v58, "objectAtIndexedSubscript:", v22);
                  v48 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v48, "_excludableDescription");
                  v34 = objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138412546;
                  v69 = v50;
                  v70 = 2112;
                  v35 = (void *)v34;
                  v71 = v34;
                  _os_log_impl(&dword_185066000, loga, OS_LOG_TYPE_ERROR, "%@: is excluded by %@", buf, 0x16u);

                }
              }
              v29 = 0;
              v30 = (char *)v65;
              v31 = __p;
              v32 = v24;
              do
              {
                v33 = (int)i + SHIDWORD(v29) * (uint64_t)(int)v8;
                if (((*(_QWORD *)&v30[(v33 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v33) & 1) != 0)
                  --v31[v29 >> 32];
                v29 += 0x100000000;
                --v32;
              }
              while (v32);
              v31[(int)i] = -1;

            }
          }
        }
        v23 = (char *)__p;
        *((_DWORD *)__p + (int)v22) = -1;
        v25 = v22;
        v21 = v52;
      }
      v22 = (v22 + 1) % v8;
    }
    while (v22 != v25);
    v23 = (char *)__p;
  }
  v36 = v21 - 0x100000000;
  if (v21 - 0x100000000 >= (uint64_t)0xFFFFFFFF00000001)
  {
    v37 = v36 >> 32;
    v38 = (v36 >> 32) + 1;
    v39 = (v36 & 0xFFFFFFFF00000000) - 0x100000000;
    do
    {
      logb = (os_log_t)(v37 - 1);
      v57 = v37;
      if (v37 >= 1 && *(int *)&v23[4 * (int)v37] >= 1)
      {
        v40 = (int)v37;
        v41 = v39;
        v42 = v38;
        do
        {
          if (((*(_QWORD *)((char *)v65
                           + (((unint64_t)(v40 + SHIDWORD(v41) * (uint64_t)(int)v8) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v40 + BYTE4(v41) * v8)) & 1) != 0)
          {
            objc_msgSend(v58, "objectAtIndexedSubscript:", v42 - 2);
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "_exclude");

            v44 = qword_1ECD7E0D8;
            if (!qword_1ECD7E0D8)
            {
              v44 = __UILogCategoryGetNode("GestureExclusion", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v44, (unint64_t *)&qword_1ECD7E0D8);
            }
            if ((*(_BYTE *)v44 & 1) != 0)
            {
              v51 = *(id *)(v44 + 8);
              if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
              {
                objc_msgSend(v58, "objectAtIndexedSubscript:", v42 - 2);
                v47 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v47, "_excludableDescription");
                v49 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v58, "objectAtIndexedSubscript:", v57);
                v45 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v45, "_excludableDescription");
                v46 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412546;
                v69 = v49;
                v70 = 2112;
                v71 = (uint64_t)v46;
                _os_log_impl(&dword_185066000, v51, OS_LOG_TYPE_ERROR, "%@: is excluded by %@", buf, 0x16u);

              }
            }
            v23 = (char *)__p;
            *((_DWORD *)__p + (v41 >> 32)) = -1;
          }
          --v42;
          v41 -= 0x100000000;
        }
        while (v42 > 1);
      }
      --v38;
      v39 -= 0x100000000;
      v37 = (uint64_t)logb;
    }
    while (v57 > 0);
  }
  if (v23)
  {
    v63 = v23;
    operator delete(v23);
  }
  if (v65)
    operator delete(v65);

}

void sub_185091BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;

  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);

  _Unwind_Resume(a1);
}

uint64_t AXInvertFilterSearch_block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(a2, "name"), "isEqualToString:", CFSTR("InvertColorsDoubleInvert"));
  if ((_DWORD)result)
    *a4 = 1;
  return result;
}

uint64_t _populateNewIndexMap(int a1, unsigned int a2, uint64_t a3, void *__b)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (a3)
  {
    if (__b)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _populateNewIndexMap(const _UIMapIndex, const _UIMapIndex, _UIMapIndex *, _UIMapIndex *)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("_UIDataSourceBatchUpdateMap.m"), 553, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("oldIndexMap != NULL"));

    if (__b)
    {
LABEL_3:
      if (!a2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _populateNewIndexMap(const _UIMapIndex, const _UIMapIndex, _UIMapIndex *, _UIMapIndex *)");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("_UIDataSourceBatchUpdateMap.m"), 554, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("newIndexMap != NULL"));

  if (a2)
LABEL_4:
    memset(__b, 255, 4 * a2);
LABEL_5:
  if (a1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *(unsigned int *)(a3 + 4 * v8);
      if ((_DWORD)v10 != -1)
      {
        if (v10 >= a2)
          v9 = 1;
        else
          *((_DWORD *)__b + v10) = v8;
      }
      ++v8;
    }
    while (a1 != v8);
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

void __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(id *a1)
{

}

void _UIDataSourceUpdateFromUpdateItem(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 16) & 2) == 0)
    {
      v4 = 0;
      v5 = *(unsigned int *)(a1 + 20);
      switch((_DWORD)v5)
      {
        case 0:
          v5 = 2;
          goto LABEL_8;
        case 1:
LABEL_8:
          v6 = *(void **)(a1 + 24);
          goto LABEL_9;
        case 3:
          v4 = 1;
          v5 = 3;
          goto LABEL_8;
      }
    }
    v4 = 0;
    v5 = 0;
    goto LABEL_8;
  }
  v4 = 0;
  v6 = 0;
  v5 = 2;
LABEL_9:
  v21 = v6;
  v7 = objc_msgSend(v21, "section");
  v8 = objc_msgSend(v21, "item");
  v9 = 0x7FFFFFFFFFFFFFFFLL;
  v10 = 0x7FFFFFFFFFFFFFFFLL;
  if (v4)
  {
    -[UIRowMoveUpdateItem newIndexPath]((id *)a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v11, "section");
    v10 = objc_msgSend(v11, "item");

  }
  *(_QWORD *)a2 = v5;
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_12;
  if (HIDWORD(v7))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v7);

LABEL_12:
    LODWORD(v7) = -1;
  }
  *(_DWORD *)(a2 + 8) = v7;
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_15:
    LODWORD(v8) = -1;
    goto LABEL_17;
  }
  if (HIDWORD(v8))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v8);

    goto LABEL_15;
  }
LABEL_17:
  *(_DWORD *)(a2 + 12) = v8;
  if (v9 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_18:
    LODWORD(v9) = -1;
    goto LABEL_20;
  }
  if (HIDWORD(v9))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v9);

    goto LABEL_18;
  }
LABEL_20:
  *(_DWORD *)(a2 + 16) = v9;
  if (v10 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_21:
    LODWORD(v10) = -1;
    goto LABEL_23;
  }
  if (HIDWORD(v10))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v10);

    goto LABEL_21;
  }
LABEL_23:
  *(_DWORD *)(a2 + 20) = v10;
  if (a1)
    v12 = *(_BYTE *)(a1 + 16) & 1;
  else
    v12 = 0;
  *(_BYTE *)(a2 + 24) = v12;

}

void _processDeletedIndexes(int a1, uint16x8_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (a2)
  {
    if (a3)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processDeletedIndexes(const _UIMapIndex, _UIFastIndexSet *const __strong, _UIMapIndex *)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("_UIDataSourceBatchUpdateMap.m"), 463, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("deletedIndexesIncludingMoves != nil"));

    if (a3)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _processDeletedIndexes(const _UIMapIndex, _UIFastIndexSet *const __strong, _UIMapIndex *)");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("_UIDataSourceBatchUpdateMap.m"), 464, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("oldIndexMap != NULL"));

LABEL_3:
  v6 = -[_UIFastIndexSet firstIndex]((uint64_t)a2);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_4;
  v8 = v6;
  if (HIDWORD(v6))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v8);

LABEL_4:
    v7 = 0xFFFFFFFFLL;
    if (!a1)
      return;
    goto LABEL_8;
  }
  v7 = v6;
  if (a1)
  {
LABEL_8:
    v9 = 0;
    v10 = 0;
    do
    {
      if (v9 == v7)
      {
        *(_DWORD *)(a3 + 4 * v9) = -1;
        ++v10;
        if (!a2)
        {
          LODWORD(v12) = 0;
LABEL_15:
          v7 = v12;
          goto LABEL_16;
        }
        v11 = -[_UIFastIndexSet indexGreaterThanOrEqualToIndex:](a2, v9 + 1);
        if (v11 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v12 = v11;
          if (!HIDWORD(v11))
            goto LABEL_15;
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v12);

        }
        v7 = 0xFFFFFFFFLL;
      }
      else
      {
        *(_DWORD *)(a3 + 4 * v9) -= v10;
      }
LABEL_16:
      ++v9;
    }
    while (a1 != v9);
  }
}

id _viewControllerForObservableScrollViewForViewController(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  objc_msgSend(v1, "navigationItem");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_searchControllerIfAllowed");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_currentActiveChildViewController");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  if (v4)
    v6 = (void *)v4;
  else
    v6 = v1;
  v7 = v6;

  return v7;
}

id _insetCoordinatableContentScrollViewForEdgePotentiallyIgnoringSearch(void *a1, void *a2, uint64_t a3, char a4)
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;

  v7 = a2;
  if ((objc_msgSend(a1, "_isNestedNavigationController") & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v7, "topViewController");
      v9 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = v7;
    }
    v10 = v9;
    if ((a4 & 1) == 0)
    {
      _viewControllerForObservableScrollViewForViewController(v9);
      v11 = objc_claimAutoreleasedReturnValue();

      v10 = (void *)v11;
    }
    objc_msgSend(v10, "_contentOrObservableScrollViewForEdge:", a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

uint64_t _UIBarsApplyChromelessEverywhere()
{
  if (qword_1ECD7A8B8 != -1)
    dispatch_once(&qword_1ECD7A8B8, &__block_literal_global_72_0);
  return byte_1ECD7A892;
}

void sub_185097B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL UIButtonTypeIsModernCircleButton(uint64_t a1)
{
  return (unint64_t)(a1 - 118) < 6 || (unint64_t)(a1 - 2) < 4;
}

uint64_t _tagForView(void *a1)
{
  _BYTE *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1 && (v1[124] & 8) != 0)
  {
    objc_getAssociatedObject(v1, &_UIViewTagAssocObjectKey);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v4, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

_WORD *_getCustomAttributes(_WORD *a1)
{
  if (a1)
  {
    if ((a1[144] & 0x1000) == 0)
      return 0;
    objc_getAssociatedObject(a1, &_UICollectionViewLayoutCustomAttributesKey);
    a1 = (_WORD *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

void __setCollectedViewPresentationProperties(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = (void *)MEMORY[0x1E0CB3978];
  v2 = a1;
  objc_msgSend(v1, "currentThread");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "threadDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v2, CFSTR("com.apple.UIKit.collectedViewPresentationProperties"));

}

uint64_t __UIVIEWANIMATABLEPROPERTYTRANSFORMER_IS_EXECUTING_CALLBACK__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

double UIEdgeInsetsSubtract(char a1, double a2, double a3, double a4, double a5, double a6)
{
  if ((a1 & 1) == 0)
    a6 = 0.0;
  return a2 - a6;
}

id _UITableConstantsForTraitCollection(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  __objc2_class *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v1 = a1;
  v2 = objc_msgSend(v1, "userInterfaceIdiom");
  if (v2 == -1)
  {
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v3, "userInterfaceIdiom");

  }
  switch(v2)
  {
    case 0:
      v4 = UITableConstants_Phone;
      goto LABEL_10;
    case 1:
    case 5:
      v4 = UITableConstants_Pad;
      goto LABEL_10;
    case 2:
    case 8:
      v4 = UITableConstants_TV;
      goto LABEL_10;
    case 3:
      v4 = UITableConstants_CarPlay;
      goto LABEL_10;
    case 4:
      v4 = UITableConstants_Watch;
LABEL_10:
      -[__objc2_class sharedConstants](v4, "sharedConstants");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id<UITableConstants> _UITableConstantsForTraitCollection(UITraitCollection *__strong)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("UITableConstants.m"), 70, CFSTR("UIUserInterfaceIdiom (%ld) is not supported by _UITableConstants"), v2);

      v7 = 0;
      break;
  }
  if (v1)
  {
    _UIRecordTraitUsage((unint64_t)v1, 0x13uLL);
    if (v1[16] == 2)
    {
      objc_msgSend(v7, "sidebarVariant");
      v8 = objc_claimAutoreleasedReturnValue();

      v7 = (void *)v8;
    }
  }
  objc_msgSend(v7, "variantForActive:", objc_msgSend(v1, "activeAppearance") != 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

BOOL UIContentSizeCategoryIsAccessibilityCategory(UIContentSizeCategory category)
{
  return -[NSString hasPrefix:](category, "hasPrefix:", CFSTR("UICTContentSizeCategoryAccessibility"));
}

void sub_18509D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UICurrentImageTraitCollection()
{
  char *v0;
  void *v1;

  +[UITraitCollection _currentTraitCollectionWithUnmarkedFallback]();
  v0 = (char *)objc_claimAutoreleasedReturnValue();
  -[UITraitCollection _traitCollectionRelevantForImageConfiguration](v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

BOOL _colorAppearanceTraitChanged(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _BYTE *TraitCollectionTSD;
  char v6;
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  if (!(a1 | a2))
    return 0;
  v2 = 1;
  if (a1 && a2)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x2020000000;
    v12 = 0;
    TraitCollectionTSD = GetTraitCollectionTSD();
    v6 = TraitCollectionTSD[9];
    TraitCollectionTSD[9] = 1;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___colorAppearanceTraitChanged_block_invoke;
    v8[3] = &unk_1E16CC3B0;
    v8[4] = a1;
    v8[5] = a2;
    v8[6] = &v9;
    _UIPerformWithTraitLock((uint64_t)v8);
    *((_BYTE *)GetTraitCollectionTSD() + 9) = v6;
    v2 = *((_BYTE *)v10 + 24) != 0;
    _Block_object_dispose(&v9, 8);
  }
  return v2;
}

void sub_18509DA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18509DD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void _UIPerformWithTraitLock(uint64_t a1)
{
  void *v2;

  if (!a1)
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIPerformWithTraitLock(void (^ _Nonnull)(void))"), CFSTR("UITrait_NonARC.m"), 51, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("block != NULL"));
  }
  os_unfair_lock_lock((os_unfair_lock_t)&_UITraitLock);
  (*(void (**)(uint64_t))(a1 + 16))(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&_UITraitLock);
}

uint64_t _UITableViewCellUsesLayoutMarginBasedContentPadding()
{
  if (qword_1ECD7A418 != -1)
    dispatch_once(&qword_1ECD7A418, &__block_literal_global_515);
  return _MergedGlobals_49_1;
}

uint64_t getEnumTagSinglePayload for HoverStyleDriverCoordinator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for UICellAccessory()
{
  return &type metadata for UICellAccessory;
}

void UIViewDidSetNeedsDisplay(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = a1;
  objc_opt_self();
  if (byte_1EDDCA60C == 1
    && +[UIView _isInAnimationBlockWithAnimationsEnabled](UIView, "_isInAnimationBlockWithAnimationsEnabled"))
  {
    if (qword_1EDDCA678)
    {
      objc_msgSend((id)qword_1EDDCA678, "addObject:", v3);
    }
    else
    {
      v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithObjects:", v3, 0);
      v2 = (void *)qword_1EDDCA678;
      qword_1EDDCA678 = v1;

    }
  }

}

void sub_1850A25B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GetShadowAttributeDifferenceDefaults(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  void *v8;
  double v9;
  double v10;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  BOOL v18;
  uint64_t v19;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  v3 = *(_QWORD *)off_1E1679048;
  v4 = a2;
  objc_msgSend(a1, "objectForKeyedSubscript:", v3);
  v5 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", v3);
  v6 = objc_claimAutoreleasedReturnValue();

  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5 | v6)
    {
      if (v5)
        v8 = (void *)v5;
      else
        v8 = (void *)v6;
      objc_msgSend(v8, "shadowOffset");
      if (v10 == *(double *)(MEMORY[0x1E0C9D820] + 8) && v9 == *MEMORY[0x1E0C9D820])
        v12 = 393216;
      else
        v12 = 409600;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    objc_msgSend((id)v5, "shadowColor");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v6, "shadowColor");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v13;
    v16 = v14;
    v17 = v16;
    if (v15 == v16)
    {
      v19 = 0;
    }
    else
    {
      if (v15)
        v18 = v16 == 0;
      else
        v18 = 1;
      if (v18)
      {
        v19 = 393216;
      }
      else if (objc_msgSend(v15, "isEqual:", v16))
      {
        v19 = 0;
      }
      else
      {
        v19 = 393216;
      }
    }

    objc_msgSend((id)v5, "shadowOffset");
    v22 = v21;
    v24 = v23;
    objc_msgSend((id)v6, "shadowOffset");
    if (v24 == v26 && v22 == v25)
      v12 = v19;
    else
      v12 = v19 | 0x44000;
  }

  return v12;
}

uint64_t GetAttributeDifference(uint64_t (*a1)(uint64_t, id, id), uint64_t (*a2)(id, id), void *a3, void *a4)
{
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;

  v7 = *(_QWORD *)off_1E1678D98;
  v8 = a4;
  v9 = a3;
  LODWORD(v7) = a1(v7, v9, v8);
  if (a1(*(_QWORD *)off_1E1678C50, v9, v8) | v7)
    v10 = 0x20000;
  else
    v10 = 0;
  if (a1(*(_QWORD *)off_1E1678F98, v9, v8))
    v10 |= 0xC000uLL;
  v11 = v10 | a2(v9, v8);
  v12 = a1(*(_QWORD *)off_1E1678D90, v9, v8);
  v13 = a1(*MEMORY[0x1E0CA8248], v9, v8);
  v14 = a1(*MEMORY[0x1E0CA8358], v9, v8);

  if (v14 | v13 | v12)
    v15 = v11 | 0x14000;
  else
    v15 = v11;
  if (v15)
    return v15 | 0x400;
  else
    return 0;
}

uint64_t HasAttributeDifferenceString(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  id v13;
  id v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_msgSend(v6, "length");
  v9 = 0;
  while (1)
  {
    v21 = 0;
    v22 = 0;
    objc_msgSend(v6, "attribute:atIndex:longestEffectiveRange:inRange:", v5, v9, &v21, 0, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 0;
    v20 = 0;
    objc_msgSend(v7, "attribute:atIndex:longestEffectiveRange:inRange:", v5, v9, &v19, 0, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21 != v19 || v22 != v20)
      break;
    v13 = v10;
    v14 = v11;
    v15 = v14;
    if (v13 == v14)
    {

    }
    else
    {
      if (!v13 || !v14)
      {

        break;
      }
      v16 = objc_msgSend(v13, "isEqual:", v14);

      if ((v16 & 1) == 0)
        break;
    }
    v9 = v22 + v21;

    if (v9 >= v8)
    {
      v17 = 0;
      goto LABEL_17;
    }
  }

  v17 = 1;
LABEL_17:

  return v17;
}

uint64_t GetShadowAttributeDifferenceString(void *a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  void *v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  int v29;
  unint64_t v30;
  uint64_t v32;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "length");
  v6 = 0;
  v7 = 0;
  v8 = *MEMORY[0x1E0C9D820];
  v9 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v10 = *(_QWORD *)off_1E1679048;
  v11 = v9;
  v12 = *MEMORY[0x1E0C9D820];
  v34 = v4;
  do
  {
    v37 = 0;
    v38 = 0;
    objc_msgSend(v3, "attribute:atIndex:longestEffectiveRange:inRange:", v10, v7, &v37, 0, v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (unint64_t)v13;
    if (v13)
    {
      objc_msgSend(v13, "shadowOffset");
      if (v15 < 0.0)
        v15 = -v15;
      if (v12 < v15)
        v12 = v15;
      v17 = -v16;
      if (v16 >= 0.0)
        v17 = v16;
      if (v11 < v17)
        v11 = v17;
    }
    v35 = 0;
    v36 = 0;
    objc_msgSend(v4, "attribute:atIndex:longestEffectiveRange:inRange:", v10, v7, &v35, v37, v38);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (unint64_t)v18;
    if (!v18)
      goto LABEL_44;
    objc_msgSend(v18, "shadowOffset");
    if (v20 < 0.0)
      v20 = -v20;
    if (v8 < v20)
      v8 = v20;
    v22 = -v21;
    if (v21 >= 0.0)
      v22 = v21;
    if (v9 < v22)
      v9 = v22;
    if (v14)
    {
      v23 = v3;
      objc_msgSend((id)v14, "shadowColor");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v19, "shadowColor");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = v24;
      v27 = v25;
      v28 = v27;
      if (v26 == v27)
      {
        v29 = 1;
      }
      else
      {
        v29 = 0;
        if (v26 && v27)
          v29 = objc_msgSend(v26, "isEqual:", v27);
      }

      if (!v29)
        v6 |= 0x60000uLL;
      v3 = v23;
      v4 = v34;
    }
    else
    {
LABEL_44:
      if (v14 | v19)
        v6 |= 0x60000uLL;
    }
    v30 = v38;
    if (v38 >= v36)
      v30 = v36;
    v7 += v30;

  }
  while (v7 < v5);
  if (v11 == v9 && v12 == v8)
    v32 = v6;
  else
    v32 = v6 | 0x44000;

  return v32;
}

uint64_t _UIViewControllersInheritTraitsFromViewHierarchy()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
  {
    LODWORD(result) = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_ViewControllersInheritTraitsFromViewHierarchy, (uint64_t)CFSTR("ViewControllersInheritTraitsFromViewHierarchy"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    if (byte_1ECD760CC)
      return 1;
    else
      return result;
  }
  return result;
}

void sub_1850A5ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id _UITraitCollectionReplacingStyleForBackgroundColorIfNeccessary(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "accessibilityContrast") != 1)
    goto LABEL_7;
  objc_opt_self();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "valueForNSIntegerTrait:", v5) != 1
    || (objc_msgSend(v4, "_systemColorName"), (v6 = objc_claimAutoreleasedReturnValue()) == 0))
  {

    goto LABEL_7;
  }
  v7 = (void *)v6;
  objc_msgSend(&unk_1E1A9B248, "objectForKey:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
LABEL_7:
    v9 = v3;
    goto LABEL_8;
  }
  objc_msgSend(v3, "_traitCollectionByReplacingNSIntegerValue:forTraitToken:", 1, 0x1E1A994B0);
  v9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_8:
  v10 = v9;

  return v10;
}

unint64_t _UIThemeKeyValueFromTraitCollection(_QWORD *a1)
{
  uint64_t *TraitCollectionTSD;
  void *v3;
  const __CFNumber *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v16 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSUInteger _UIThemeKeyValueFromTraitCollection(UITraitCollection *)"), CFSTR("UITraitCollection_NonARC.m"), 3406, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("traitCollection != nil"));
  }
  v17[0] = xmmword_1866794A0;
  v17[1] = xmmword_18666BCF0;
  v18 = 10;
  if (_UITraitUsageTrackingEnabled())
  {
    TraitCollectionTSD = (uint64_t *)GetTraitCollectionTSD();
    if (!*((_BYTE *)TraitCollectionTSD + 9))
    {
      v9 = TraitCollectionTSD;
      if (TraitCollectionTSD[18] && _UIInlinePointerSetContainsElement(TraitCollectionTSD + 2, (unint64_t)a1))
      {
        v11 = 0;
        v12 = v9 + 19;
        do
        {
          _UITraitTokenSetInsert(v12, *(_QWORD *)((char *)v17 + v11), v10);
          v11 += 8;
        }
        while (v11 != 40);
      }
      else if (v9[40] && _UIInlinePointerSetContainsElement(v9 + 24, (unint64_t)a1))
      {
        v14 = 0;
        v15 = v9 + 41;
        do
        {
          _UITraitTokenSetInsert(v15, *(_QWORD *)((char *)v17 + v14), v13);
          v14 += 8;
        }
        while (v14 != 40);
      }
    }
  }
  v3 = (void *)objc_opt_self();
  os_unfair_lock_lock((os_unfair_lock_t)&_UITraitLock);
  v4 = _UITraitTokenForTraitLocked(3, v3);
  os_unfair_lock_unlock((os_unfair_lock_t)&_UITraitLock);
  v5 = objc_msgSend(a1, "_valueForNSIntegerTraitToken:", v4);
  v6 = a1[10];
  if (v6 == 2)
    v7 = (unint64_t)(a1[20] == 1) << 8;
  else
    v7 = 0;
  if (v6 == 1000)
    v6 = 2;
  if (v6 != 2)
    v7 = 0;
  return (4 * a1[1] + 4) & 0x3C | ((unint64_t)(v5 == 1) << 9) | ((unint64_t)(a1[19] == 1) << 6) | v6 & 3 | ((unint64_t)(a1[3] == 1) << 7) | v7;
}

const __CFNumber *_UITraitTokenForTraitLocked(uint64_t a1, void *a2)
{
  const __CFNumber *v4;
  const __CFNumber *v5;
  objc_class *v6;
  NSString *v7;
  const __CFNumber *v8;
  NSString *v9;
  char *v10;
  objc_class *v11;
  objc_class *Class;
  NSString *v13;
  char *v14;
  objc_class *v15;
  char *v16;
  objc_class *v17;
  objc_class *v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  uint64_t v22;
  char v23;
  objc_class *v24;
  NSString *v25;
  objc_class *v26;
  uint64_t v27;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v4 = (const __CFNumber *)objc_msgSend((id)qword_1ECD7F7B0, "objectForKey:", a2);
  v5 = v4;
  if (!a1 || v4)
  {
    if (!a1 || !v4)
    {
      v8 = v4;
      if (!a1)
      {
        v8 = v4;
        if (!v4)
        {
          if (sel_name && (Class = object_getClass(a2), class_respondsToSelector(Class, sel_name)))
            v13 = (NSString *)objc_msgSend(a2, "name");
          else
            v13 = NSStringFromClass((Class)a2);
          v25 = v13;
          if (sel_identifier && (v26 = object_getClass(a2), class_respondsToSelector(v26, sel_identifier)))
            v27 = objc_msgSend(a2, "identifier");
          else
            v27 = 0;
          v30 = 0uLL;
          *(_QWORD *)&v31 = v25;
          *((_QWORD *)&v31 + 1) = v27;
          v33 = 0;
          v32 = 0uLL;
          v8 = _UIDefineNewTraitLocked((uint64_t)&v30);
          goto LABEL_52;
        }
      }
      goto LABEL_44;
    }
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    _UIGetTraitMetadataLocked(v4, 0, (uint64_t)&v30);
    if (*((_QWORD *)&v30 + 1))
      return v5;
  }
  if (sel_name && (v6 = object_getClass(a2), class_respondsToSelector(v6, sel_name)))
    v7 = (NSString *)objc_msgSend(a2, "name");
  else
    v7 = NSStringFromClass((Class)a2);
  v9 = v7;
  v10 = sel_identifier;
  if (sel_identifier)
  {
    v11 = object_getClass(a2);
    if (class_respondsToSelector(v11, sel_identifier))
      v10 = (char *)objc_msgSend(a2, "identifier");
    else
      v10 = 0;
  }
  v14 = sel_affectsColorAppearance;
  if (sel_affectsColorAppearance)
  {
    v15 = object_getClass(a2);
    if (class_respondsToSelector(v15, sel_affectsColorAppearance))
      LOBYTE(v14) = objc_msgSend(a2, "affectsColorAppearance");
    else
      LOBYTE(v14) = 0;
  }
  v16 = sel__isPrivate;
  if (sel__isPrivate)
  {
    v17 = object_getClass(a2);
    if (class_respondsToSelector(v17, sel__isPrivate))
      LOBYTE(v16) = objc_msgSend(a2, "_isPrivate");
    else
      LOBYTE(v16) = 0;
  }
  if (!sel_defaultValue || (v18 = object_getClass(a2), !class_respondsToSelector(v18, sel_defaultValue)))
  {
    v29 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v29, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSNumber * _Nonnull _UITraitTokenForTraitLocked(const _UITraitDataType, const UITrait _Nonnull)"), CFSTR("UITrait_NonARC.m"), 296, CFSTR("Trait class '%@' does not implement the required defaultValue class property"), v9);
  }
  switch(a1)
  {
    case 1:
      v19 = objc_msgSend(a2, "defaultValue");
      v20 = v19 == 0;
      goto LABEL_35;
    case 2:
      objc_msgSend(a2, "defaultValue");
      v20 = *(double *)&v22 == 1.79769313e308;
      v19 = v22;
      goto LABEL_35;
    case 3:
      v19 = objc_msgSend(a2, "defaultValue");
      v20 = v19 == 0x7FFFFFFFFFFFFFFFLL;
LABEL_35:
      v23 = v20;
      goto LABEL_40;
    case 4:
      v19 = objc_msgSend(a2, "defaultValue");
      goto LABEL_39;
    default:
      v21 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSNumber * _Nonnull _UITraitTokenForTraitLocked(const _UITraitDataType, const UITrait _Nonnull)"), CFSTR("UITrait_NonARC.m"), 317, CFSTR("Unknown data type for trait: %@"), v9);
      v19 = 0;
LABEL_39:
      v23 = 0;
LABEL_40:
      if (sel_defaultValueRepresentsUnspecified)
      {
        v24 = object_getClass(a2);
        if (class_respondsToSelector(v24, sel_defaultValueRepresentsUnspecified))
          v23 = objc_msgSend(a2, "defaultValueRepresentsUnspecified");
      }
      *(_QWORD *)&v30 = v5;
      *((_QWORD *)&v30 + 1) = a1;
      *(_QWORD *)&v31 = v9;
      *((_QWORD *)&v31 + 1) = v10;
      *(_QWORD *)&v32 = 0;
      *((_QWORD *)&v32 + 1) = v19;
      LOBYTE(v33) = v23;
      BYTE1(v33) = (_BYTE)v14;
      BYTE2(v33) = (_BYTE)v16;
      *(_DWORD *)((char *)&v33 + 3) = 0;
      HIBYTE(v33) = 0;
      v8 = _UIDefineNewTraitLocked((uint64_t)&v30);
      break;
  }
LABEL_44:
  if (!v5)
  {
LABEL_52:
    objc_msgSend((id)qword_1ECD7F7B0, "setObject:forKey:", v8, a2);
    objc_msgSend((id)qword_1ECD7F7B8, "setObject:forKey:", a2, v8);
  }
  return v8;
}

void _UIViewSetBackgroundColorSystemColorName(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  id object;

  object = a1;
  v3 = a2;
  v4 = object;
  v6 = *((_QWORD *)object + 13);
  v7 = *((_DWORD *)object + 30);
  if (v3)
  {
    v8 = 128;
LABEL_5:
    v5 = *((_QWORD *)object + 14);
    *((_QWORD *)object + 13) = v8 | v6 & 0xFFFFFFFFFFFFFF7FLL;
    *((_QWORD *)object + 14) = v5;
    *((_DWORD *)object + 30) = v7;
    objc_setAssociatedObject(v4, &unk_1EDDCA621, v3, (void *)1);
    goto LABEL_6;
  }
  if ((v6 & 0x80) != 0)
  {
    v8 = 0;
    v4 = object;
    goto LABEL_5;
  }
LABEL_6:

}

uint64_t _UIViewDirtiesDelegateContentInsetsForGeometryChange()
{
  if (qword_1EDDCA718 != -1)
    dispatch_once(&qword_1EDDCA718, &__block_literal_global_981_0);
  return byte_1EDDCA614;
}

BOOL _transformIsSupportedForSimpleContainment(double *a1)
{
  double v1;
  double v2;
  double v3;
  BOOL v5;
  double v7;
  BOOL v8;
  double v9;
  double v11;

  v1 = a1[1];
  v2 = a1[2];
  v3 = fabs(*a1);
  v5 = v1 == *(double *)(MEMORY[0x1E0C9BAA8] + 8)
    && v2 == *(double *)(MEMORY[0x1E0C9BAA8] + 16)
    && v3 == *MEMORY[0x1E0C9BAA8];
  if (v5 && fabs(a1[3]) == *(double *)(MEMORY[0x1E0C9BAA8] + 24))
    return 1;
  v7 = fabs(v1);
  if (v3 < 0.00000011920929)
  {
    v8 = fabs(a1[3]) < 0.00000011920929 && v7 + -1.0 < 0.00000011920929;
    v9 = fabs(v2) + -1.0;
    if (v8 && v9 < 0.00000011920929)
      return 1;
  }
  if (v7 < 0.00000011920929)
  {
    v11 = fabs(v2);
    if (v3 + -1.0 < 0.00000011920929 && v11 < 0.00000011920929)
      return fabs(a1[3]) + -1.0 < 0.00000011920929;
  }
  return 0;
}

uint64_t _UILightWeightMaterialsEnabled(uint64_t a1)
{
  int *v1;
  const __CFString *v2;
  uint64_t result;

  if (a1 != 6)
    return 0;
  if (_UIIsPrivateMainBundle())
  {
    v1 = (int *)&unk_1EDDA84C0;
    v2 = CFSTR("LightweightMaterialBackgroundsInternallyEnabled");
  }
  else
  {
    v1 = (int *)&_MergedGlobals_328;
    v2 = CFSTR("LightweightMaterialBackgroundsExternallyEnabled");
  }
  LODWORD(result) = _UIInternalPreferenceUsesDefault(v1, (uint64_t)v2, (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  if (*((_BYTE *)v1 + 4))
    return 1;
  else
    return result;
}

uint64_t _UIResponderCrossSceneResponderChainEnabled()
{
  if (qword_1ECD7F8B0 != -1)
    dispatch_once(&qword_1ECD7F8B0, &__block_literal_global_942_0);
  return byte_1ECD7F859;
}

uint64_t _UIViewIgnoresTouchEvents(void *a1, char a2)
{
  id v3;
  uint64_t v4;
  double v5;

  v3 = a1;
  if (objc_msgSend(v3, "isUserInteractionEnabled"))
  {
    v4 = objc_msgSend(v3, "isHidden");
    if ((v4 & 1) == 0 && (a2 & 1) == 0)
    {
      objc_msgSend(v3, "alpha");
      v4 = v5 < 0.01;
    }
  }
  else
  {
    v4 = 1;
  }

  return v4;
}

uint64_t _isHeightOfTopViewsCoordinatedToMatchViewControllerOffsets(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t isHeightOfTopViewsCoordinatedToMatchContentScrollViewOffsets;

  v3 = a1;
  _insetCoordinatableContentScrollViewForEdgePotentiallyIgnoringSearch(v3, a2, 1, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isHeightOfTopViewsCoordinatedToMatchContentScrollViewOffsets = _isHeightOfTopViewsCoordinatedToMatchContentScrollViewOffsets(v3, v4);

  return isHeightOfTopViewsCoordinatedToMatchContentScrollViewOffsets;
}

uint64_t _isHeightOfTopViewsCoordinatedToMatchContentScrollViewOffsets(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  char v7;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "_isNestedNavigationController") & 1) == 0)
  {
    objc_msgSend(v3, "navigationBar");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if ((dyld_program_sdk_at_least() & 1) != 0)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {

        goto LABEL_10;
      }
      v7 = objc_msgSend(v6, "_hasLegacyProvider");

      if ((v7 & 1) == 0)
      {
LABEL_10:
        if ((objc_msgSend(v6, "_hasVariableHeight") & 1) != 0)
          v5 = 1;
        else
          v5 = objc_msgSend(v3, "_canHostRefreshControlOwnedByScrollView:", v4);
        goto LABEL_13;
      }
    }
    else
    {

    }
    v5 = 0;
LABEL_13:

    goto LABEL_14;
  }
  v5 = 0;
LABEL_14:

  return v5;
}

BOOL _isNestedNavigationControllerFullyInstalledIntoContainingNavigationController(void *a1)
{
  id v1;
  id v2;
  _BOOL8 v3;

  v1 = a1;
  if (objc_msgSend(v1, "_isNestedNavigationController"))
  {
    objc_msgSend(v1, "_outermostNavigationController");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    v3 = v2 != v1;

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void _UIViewTopDownSubtreeTraversal(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(id, _QWORD *, char *);
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void (**v28)(id, _QWORD *, __int16 *, char *);
  void *v29;
  void *v30;
  void *v31;
  __int16 v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v28 = a2;
  v5 = a3;
  if (!a1)
    goto LABEL_44;
  v29 = (void *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
  v6 = (void *)objc_msgSend(&unk_1E1A95330, "mutableCopy");
  v30 = (void *)objc_msgSend(&unk_1E1A95348, "mutableCopy");
  v33[0] = a1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v8 = 0;
  while (1)
  {
    objc_msgSend(v6, "lastObject");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "unsignedIntegerValue");

    objc_msgSend(v30, "lastObject");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "unsignedIntegerValue");

    objc_msgSend(v31, "objectAtIndexedSubscript:", v10);
    v13 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v8 >= 1)
    {
      if ((v13[13] & 0x8000000) == 0)
      {
        UIViewReportBrokenSuperviewChain(v13, v7, 1);
        v14[13] |= 0x8000000uLL;
      }
      objc_msgSend(v14, "superview");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v15)
        UIViewReportBrokenSuperviewChain(v14, v7, 0);
    }
    v32 = 0;
    v28[2](v28, v14, &v32, (char *)&v32 + 1);
    if (HIBYTE(v32))
      break;
    if ((_BYTE)v32)
    {
      v16 = 0;
    }
    else
    {
      objc_msgSend(v14, "_allSubviews");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (objc_msgSend(v16, "count"))
    {
      v17 = v16;

      objc_msgSend(v29, "addObject:", v14);
      v7 = (id)objc_msgSend(v29, "lastObject");
      v18 = v8 + 1;
      objc_msgSend(v6, "addObject:", &unk_1E1A9AF38);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v17, "count"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "addObject:", v19);

      v31 = v17;
LABEL_14:
      v20 = v14;
      goto LABEL_15;
    }
    v21 = v10 + 1;
    if (v10 + 1 >= v12)
    {
      if (v8 < 1)
      {
        v18 = v8;
        v20 = v14;
      }
      else
      {
        v18 = v8;
        v20 = v14;
        while (v21 == v12)
        {
          if (v5)
          {
            v5[2](v5, v14, (char *)&v32 + 1);
            if (HIBYTE(v32))
            {
              v20 = v14;
              goto LABEL_41;
            }
          }
          v20 = v7;

          objc_msgSend(v29, "removeLastObject");
          v7 = (id)objc_msgSend(v29, "lastObject");
          objc_msgSend(v6, "removeLastObject");
          objc_msgSend(v30, "removeLastObject");
          objc_msgSend(v6, "lastObject");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "unsignedIntegerValue");

          objc_msgSend(v30, "lastObject");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v25, "unsignedIntegerValue");

          v21 = v24 + 1;
          if (v21 < v12)
          {
            objc_msgSend(v6, "removeLastObject");
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v21);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "addObject:", v26);

            objc_msgSend(v7, "_allSubviews");
            v27 = objc_claimAutoreleasedReturnValue();

            v31 = (void *)v27;
          }
          if (v5)
          {
            if ((unint64_t)v8 >= 2)
            {
              v5[2](v5, v20, (char *)&v32 + 1);
              if (HIBYTE(v32))
                goto LABEL_41;
            }
          }
          v18 = v8 - 1;
          if ((unint64_t)v8 < 2)
            break;
          v14 = v20;
          --v8;
        }
      }
      if (v5 && !v18)
        v5[2](v5, v20, (char *)&v32 + 1);
      if (HIBYTE(v32))
      {
LABEL_41:

        v14 = v20;
        break;
      }
    }
    else
    {
      objc_msgSend(v6, "removeLastObject");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v10 + 1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObject:", v22);

      if (!v5)
      {
        v18 = v8;
        goto LABEL_14;
      }
      v5[2](v5, v14, (char *)&v32 + 1);
      v20 = v14;
      v18 = v8;
      if (HIBYTE(v32))
        goto LABEL_41;
    }
LABEL_15:

    v8 = v18;
    if (!v18)
      goto LABEL_43;
  }

LABEL_43:
LABEL_44:

}

id _UIEventEnvironmentEventOfTypeForEventRoutingUIScene(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a3
    && (!objc_msgSend(a3, "_hasInvalidated")
     || objc_msgSend(a3, "_hasInvalidated")
     && (objc_msgSend(*(id *)(a1 + 136), "containsObject:", a3) & 1) == 0))
  {
    objc_msgSend(*(id *)(a1 + 128), "objectForKey:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      v7 = (void *)objc_opt_new();
      objc_msgSend(*(id *)(a1 + 128), "setObject:forKey:", v7, a3);
    }
    v8 = 0;
    switch(a2)
    {
      case 0:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 0);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([UITouchesEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 0;
          goto LABEL_31;
        }
        break;
      case 3:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 3);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([UIPressesEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 3;
          goto LABEL_31;
        }
        break;
      case 4:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 4);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([UIPhysicalKeyboardEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 4;
          goto LABEL_31;
        }
        break;
      case 5:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 5);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([UIMoveEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 5;
          goto LABEL_31;
        }
        break;
      case 7:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 7);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([UIWheelEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 7;
          goto LABEL_31;
        }
        break;
      case 8:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 8);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([_UIGameControllerEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 8;
          goto LABEL_31;
        }
        break;
      case 10:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 10);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([UIScrollEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 10;
          goto LABEL_31;
        }
        break;
      case 11:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 11);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([UIHoverEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 11;
          goto LABEL_31;
        }
        break;
      case 13:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 13);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([_UIPencilEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 13;
          goto LABEL_31;
        }
        break;
      case 14:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 14);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([UITransformEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 14;
          goto LABEL_31;
        }
        break;
      case 16:
        -[_UISceneEventRegistry eventForType:]((uint64_t)v7, 16);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = -[UIEvent _initWithEnvironment:]([_UIDynamicButtonEvent alloc], "_initWithEnvironment:", a1);
          v9 = (uint64_t)v7;
          v10 = (uint64_t)v8;
          v11 = 16;
LABEL_31:
          -[_UISceneEventRegistry setEvent:forType:](v9, v10, v11);
        }
        break;
      default:
        break;
    }
    v6 = v8;

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void _UISharedImageDealloc(void *a1)
{
  void *v1;
  void *v2;
  id key;

  key = a1;
  if (objc_msgSend(key, "_isNamed"))
  {
    objc_msgSend(key, "_primitiveImageAsset");
    v1 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v1)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&__tableLock);
      if (__imageTable)
      {
        v2 = (id)CFDictionaryGetValue((CFDictionaryRef)__imageTable, key);
        if (v2)
        {
          CFDictionaryRemoveValue((CFMutableDictionaryRef)__nameTable, v2);
          CFDictionaryRemoveValue((CFMutableDictionaryRef)__imageTable, key);
        }
      }
      else
      {
        v2 = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&__tableLock);

    }
  }

}

void sub_1850ADBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1850AE534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIBarsUseNewPadHeights()
{
  void *v0;
  uint64_t v1;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1 == 1)
    return dyld_program_sdk_at_least();
  else
    return 0;
}

id _UIMainBundleIdentifier()
{
  if (qword_1ECD81F20 != -1)
    dispatch_once(&qword_1ECD81F20, &__block_literal_global_602);
  return (id)qword_1ECD81F28;
}

uint64_t _UIApplicationIsKeyboardExtension()
{
  if (qword_1EDDC8110 != -1)
    dispatch_once(&qword_1EDDC8110, &__block_literal_global_919_0);
  return byte_1EDDC8000;
}

uint64_t _UIApplicationIsApplicationWidgetExtension()
{
  if (qword_1EDDC80F8 != -1)
    dispatch_once(&qword_1EDDC80F8, &__block_literal_global_915);
  return byte_1EDDC7FFD;
}

uint64_t _UIApplicationIsWidgetServer()
{
  if (qword_1EDDC8108 != -1)
    dispatch_once(&qword_1EDDC8108, &__block_literal_global_918);
  return byte_1EDDC7FFF;
}

uint64_t _UIApplicationIsUniversalControl()
{
  if (qword_1EDDC8128 != -1)
    dispatch_once(&qword_1EDDC8128, &__block_literal_global_924);
  return byte_1EDDC8003;
}

id _UIKitBundle()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)_UIKitBundle_kitBundle;
  if (!_UIKitBundle_kitBundle)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)_UIKitBundle_kitBundle;
    _UIKitBundle_kitBundle = v1;

    v0 = (void *)_UIKitBundle_kitBundle;
  }
  return v0;
}

id __UIStatusBarManagerForWindow(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(a1, "windowScene");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "statusBarManager");
    v3 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if ((_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_RaiseWithNilSceneForStatusBar, (uint64_t)CFSTR("RaiseWithNilSceneForStatusBar")) & 1) == 0&& byte_1ECD75ECC)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Asking for the status bar manager without a window scene or window."));
    }
    _UIStatusBarManagerForNoWindow();
    v3 = objc_claimAutoreleasedReturnValue();
  }
  v4 = (void *)v3;

  return v4;
}

void _UIViewNotifyPhysicalButtonArbiterOfEffectiveVisibilityChangeIfNeeded(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;

  if (a1[10])
  {
    if (qword_1EDDCA8B8 != -1)
      dispatch_once(&qword_1EDDCA8B8, &__block_literal_global_3390);
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(a1, "_window");
      v4 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "_eventRoutingScene");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "_existingPhysicalButtonInteractionArbiter");
      v3 = (void *)objc_claimAutoreleasedReturnValue();

      if (v3)
        -[_UIPhysicalButtonInteractionArbiter _setNeedsResolutionOfPhysicalButtonConfigurationsInWindow:forReason:]((uint64_t)v3, v4, 2uLL);

    }
  }
}

id _UIFocusEnvironmentContainingView(void *a1)
{
  id v1;
  id v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v1 = a1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = __Block_byref_object_copy__82;
  v9 = __Block_byref_object_dispose__82;
  v10 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___UIFocusEnvironmentContainingView_block_invoke;
  v4[3] = &unk_1E16C6008;
  v4[4] = &v5;
  _UIFocusEnvironmentEnumerateAncestorEnvironments(v1, v4);
  v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1850AF6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIFocusEnvironmentEnumerateAncestorEnvironments(void *a1, void *a2)
{
  id v3;
  id v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  unsigned int v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  char v13;

  v3 = a1;
  v4 = a2;
  v5 = (void (**)(_QWORD, _QWORD, _QWORD))v4;
  if (v3 && v4)
  {
    v13 = 0;
    v6 = objc_msgSend(v3, sel_allowsWeakReference);
    v7 = v6 ? v3 : 0;
    v8 = v7;
    if (v6)
    {
      v9 = v3;
      while (1)
      {
        ((void (**)(_QWORD, void *, char *))v5)[2](v5, v9, &v13);
        _UIFocusEnvironmentParentEnvironment(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, sel_allowsWeakReference);

        if (!v11)
          break;
        _UIFocusEnvironmentParentEnvironment(v9);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12)
        {
          v9 = v12;
          if (!v13)
            continue;
        }
        goto LABEL_13;
      }
      v12 = v9;
LABEL_13:

    }
  }

}

id _UIFocusEnvironmentParentEnvironment(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  id v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "parentFocusEnvironment");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    _UIHostedFocusSystemsForHostEnvironment(v2);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = (id)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
          if (objc_msgSend(v9, "containsChildOfHostEnvironment:", v1, (_QWORD)v12))
          {
            v10 = v9;

            v3 = v10;
            goto LABEL_12;
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  return v3;
}

id _UIHostedFocusSystemsForHostEnvironment(void *a1)
{
  id v1;
  void *v2;
  void *v4;
  void *v5;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSHashTable<_UIHostedFocusSystem *> * _Nullable _UIHostedFocusSystemsForHostEnvironment(__strong id<UIFocusEnvironment> _Nonnull)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIHostedFocusSystem.m"), 45, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("hostEnvironment"));

  }
  objc_msgSend((id)_MergedGlobals_1_9, "objectForKey:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t ___getCurrentFallbackEnvironment_block_invoke(uint64_t a1, void *a2)
{
  __CFString *v2;
  char isKindOfClass;

  v2 = (__CFString *)objc_msgSend((id)objc_msgSend(a2, "session"), "role");
  if (v2 == CFSTR("UIWindowSceneSessionRoleExternalDisplayNonInteractive")
    || v2
    && CFSTR("UIWindowSceneSessionRoleExternalDisplayNonInteractive")
    && (-[__CFString isEqual:](v2, "isEqual:") & 1) != 0)
  {
    isKindOfClass = 0;
  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }
  return isKindOfClass & 1;
}

double _UIAccessibilityContentSizeCategorySizeForImage(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  int v10;
  void *v11;
  double v12;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_msgSend(v3, "size");
    v6 = v5;
    if (objc_msgSend(v4, "adjustsImageSizeForAccessibilityContentSizeCategory")
      && (objc_msgSend(v3, "_isSymbolImage") & 1) == 0)
    {
      objc_msgSend(v4, "_scaleFactorForImage");
      v8 = v7;
      if (v7 != 1.0)
      {
        objc_msgSend(v3, "content");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "canScaleImageToTargetResolution");

        if (v10)
        {
          objc_msgSend(v3, "content");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "size");
          v6 = v12;

        }
      }
      v6 = v8 * v6;
    }
  }
  else
  {
    v6 = *MEMORY[0x1E0C9D820];
  }

  return v6;
}

void sub_1850B31B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44,id a45)
{
  _Block_object_dispose(&a38, 8);

  _Unwind_Resume(a1);
}

void UIRoundToScale(double a1, double a2)
{
  if (a2 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
}

double LayerContentModeTransform@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>, double result@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  uint64_t v8;
  __int128 v9;
  double v10;

  v8 = MEMORY[0x1E0C9BAA8];
  v9 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a2 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a2 + 16) = v9;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v8 + 32);
  switch(a1)
  {
    case 0uLL:
      *(double *)(a2 + 32) = result;
      *(double *)(a2 + 40) = a4;
      if (a5 != a7)
      {
        result = a5 / a7;
        *(double *)a2 = a5 / a7;
      }
      if (a6 != a8)
      {
        result = a6 / a8;
        *(double *)(a2 + 24) = a6 / a8;
      }
      return result;
    case 1uLL:
      v10 = a5 / a7;
      if (a5 / a7 >= a6 / a8)
        v10 = a6 / a8;
      goto LABEL_23;
    case 2uLL:
      v10 = a5 / a7;
      if (a5 / a7 < a6 / a8)
        v10 = a6 / a8;
LABEL_23:
      *(double *)a2 = v10;
      *(double *)(a2 + 24) = v10;
      *(double *)(a2 + 32) = result + (a5 - a7 * v10) * 0.5;
      result = a4 + (a6 - a8 * v10) * 0.5;
      *(double *)(a2 + 40) = result;
      goto LABEL_5;
    case 4uLL:
    case 5uLL:
    case 6uLL:
      result = result + a5 * 0.5 - a7 * 0.5;
      goto LABEL_4;
    case 7uLL:
    case 9uLL:
    case 0xBuLL:
      goto LABEL_4;
    case 8uLL:
    case 0xAuLL:
    case 0xCuLL:
      result = result + a5 - a7;
LABEL_4:
      *(double *)(a2 + 32) = result;
LABEL_5:
      if (a1 > 0xC)
        return result;
      if (((1 << a1) & 0x190) != 0)
      {
        result = a4 + a6 * 0.5 - a8 * 0.5;
LABEL_11:
        *(double *)(a2 + 40) = result;
        return result;
      }
      if (((1 << a1) & 0x620) == 0)
      {
        if (((1 << a1) & 0x1840) == 0)
          return result;
        result = a4 + a6 - a8;
        goto LABEL_11;
      }
      *(double *)(a2 + 40) = a4;
      return result;
    default:
      return result;
  }
}

void __copy_assignment_8_8_s0_s8_t16w8(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)a1, *(id *)a2);
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
}

uint64_t getEnumTagSinglePayload for HoverStyleHost(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

void sub_1850B792C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _UIEmitSignpostEvent((int *)va);
  _Unwind_Resume(a1);
}

void UIRectCenteredAboutPointScale(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (a7 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  if (a7 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
}

uint64_t getEnumTagSinglePayload for UICellAccessory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for UIBackgroundConfiguration()
{
  return &type metadata for UIBackgroundConfiguration;
}

uint64_t _UIWindowSceneCompatibleIsHidden(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;

  v1 = a1;
  objc_msgSend(v1, "layer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isHidden");

  v4 = v3;
  if (dyld_program_sdk_at_least())
  {
    v4 = objc_msgSend(v1, "isHidden");
    if ((_DWORD)v3 != (_DWORD)v4)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _UIWindowSceneCompatibleIsHidden(UIWindow *__strong)");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("UIWindowScene.m"), 2781, CFSTR("Error in UIKit client: window visibility must match its layer visibility!"));

    }
  }

  return v4;
}

double _UIPresentationControllerBaseContentInsetsForControllersAndViewInWindow(void *a1, void *a2, void *a3, void *a4, _QWORD *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  objc_msgSend((id)objc_opt_class(), "_statusBarOverlapAndMarginInfoForView:inWindow:", v13, v14);
  v18 = v17;
  if (a5)
    *a5 = v15;
  if (a6)
    *a6 = v16;
  if (objc_msgSend(v12, "_providesCustomBasePresentationInsets"))
  {
    objc_msgSend(v12, "_customBasePresentationInsetsForView:", v13);
    v20 = v19;
  }
  else
  {
    objc_msgSend(v12, "_viewSafeAreaInsetsFromScene");
    v20 = fmax(v18, v21);
  }

  return v20;
}

uint64_t _UIViewControllerModernContentOverlayInsetsPropagation()
{
  if (qword_1EDDB0F90 != -1)
    dispatch_once(&qword_1EDDB0F90, &__block_literal_global_144);
  return byte_1EDDB0F74;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.snapshot()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

void sub_1850BCE88()
{
  sub_1852AD2A0(qword_1EDD8B090);
}

void sub_1850BDB78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1850BE578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIBuiltinTraitStorageEnumeratePairWithBlock(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  __CFString **v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1, a2, CFSTR("_UITraitNameUserInterfaceIdiom"), -1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, double))(a6 + 16))(a6, a1 + 8, a2 + 8, CFSTR("_UITraitNameDisplayScale"), 0.0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 16, a2 + 16, CFSTR("_UITraitNameDisplayGamut"), -1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a4 + 16))(a4, a1 + 56, a2 + 56, CFSTR("_UITraitNameHorizontalSizeClass"), 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a4 + 16))(a4, a1 + 64, a2 + 64, CFSTR("_UITraitNameVerticalSizeClass"), 0);
  if (a3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 24, a2 + 24, CFSTR("_UITraitNameTouchLevel"), -1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a5 + 16))(a5, a1 + 32, a2 + 32, CFSTR("_UITraitNameInteractionModel"), 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a5 + 16))(a5, a1 + 40, a2 + 40, CFSTR("_UITraitNamePrimaryInteractionModel"), 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a4 + 16))(a4, a1 + 48, a2 + 48, CFSTR("_UITraitNameArtworkSubtype"), 0);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a4 + 16))(a4, a1 + 72, a2 + 72, CFSTR("_UITraitNameUserInterfaceStyle"), 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 80, a2 + 80, CFSTR("_UITraitNameUserInterfaceLayoutDirection"), -1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a4 + 16))(a4, a1 + 88, a2 + 88, CFSTR("_UITraitNameForceTouchCapability"), 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a4 + 16))(a4, a1 + 96, a2 + 96, CFSTR("_UITraitNamePreferredContentSizeCategory"), 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 208, a2 + 208, CFSTR("_UITraitNameToolbarItemPresentationSize"), -1);
  if (a3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, double))(a6 + 16))(a6, a1 + 104, a2 + 104, CFSTR("_UITraitNameDisplayCornerRadius"), -1.0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 112, a2 + 112, CFSTR("_UITraitNameLegibilityWeight"), -1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a4 + 16))(a4, a1 + 120, a2 + 120, CFSTR("_UITraitNameSemanticContext"), 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a4 + 16))(a4, a1 + 128, a2 + 128, CFSTR("_UITraitNamePresentationSemanticContext"), 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 136, a2 + 136, CFSTR("_UITraitNameSplitViewControllerContext"), -1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 144, a2 + 144, CFSTR("_UITraitNameAccessibilityContrast"), -1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 152, a2 + 152, CFSTR("_UITraitNameUserInterfaceLevel"), -1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 160, a2 + 160, CFSTR("_UITraitNameVibrancy"), -1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD))(a4 + 16))(a4, a1 + 168, a2 + 168, CFSTR("_UITraitNameUserInterfaceRenderingMode"), 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 176, a2 + 176, CFSTR("_UITraitNameActiveAppearance"), -1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 184, a2 + 184, CFSTR("_UITraitNameFocusSystemState"), -1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 192, a2 + 192, CFSTR("_UITraitNameSelectionIsKey"), -1);
    v12 = a1 + 200;
    v13 = a2 + 200;
    v14 = _UITraitNameBacklightLuminance;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(a4 + 16))(a4, a1 + 144, a2 + 144, CFSTR("_UITraitNameAccessibilityContrast"), -1);
    v12 = a1 + 152;
    v13 = a2 + 152;
    v14 = _UITraitNameUserInterfaceLevel;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __CFString *, uint64_t))(a4 + 16))(a4, v12, v13, *v14, -1);
}

uint64_t _UIDescriptionForTraitName(void *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "rangeOfString:options:", CFSTR("_UITraitName"), 8);
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
    return (uint64_t)a1;
  else
    return objc_msgSend(a1, "substringFromIndex:", v2 + v3);
}

const __CFString *_UIBuiltinTraitStorageDescriptionForIntegerTraitName(unint64_t a1, void *a2)
{
  int v4;
  unint64_t v5;
  BOOL v6;
  __CFString **v8;
  __CFString **v9;
  __CFString *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameUserInterfaceIdiom"));
  v5 = a1 + 1;
  if (v4)
    v6 = v5 >= 0xC;
  else
    v6 = 1;
  if (!v6)
  {
    v9 = off_1E16DBED0;
    return v9[v5];
  }
  if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameUserInterfaceStyle")))
    return _NSStringFromUIUserInterfaceStyle(a1);
  if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameUserInterfaceLayoutDirection")))
  {
    v5 = a1 + 1;
    if (a1 + 1 < 3)
    {
      v9 = off_1E16DBF30;
      return v9[v5];
    }
  }
  if (((objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameHorizontalSizeClass")) & 1) != 0
     || objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameVerticalSizeClass")))
    && a1 < 3)
  {
    v8 = off_1E16DBF48;
    return v8[a1];
  }
  if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameForceTouchCapability")) && a1 < 3)
  {
    v8 = off_1E16DBF60;
    return v8[a1];
  }
  if (!objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNamePreferredContentSizeCategory")))
  {
    if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameDisplayGamut")))
    {
      v5 = a1 + 1;
      if (a1 + 1 < 3)
      {
        v9 = off_1E16DBF78;
        return v9[v5];
      }
    }
    if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameLegibilityWeight")))
    {
      v5 = a1 + 1;
      if (a1 + 1 < 3)
      {
        v9 = off_1E16DBF90;
        return v9[v5];
      }
    }
    if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameAccessibilityContrast")))
    {
      v5 = a1 + 1;
      if (a1 + 1 < 3)
      {
        v9 = off_1E16DBFA8;
        return v9[v5];
      }
    }
    if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameUserInterfaceLevel")))
    {
      v5 = a1 + 1;
      if (a1 + 1 < 3)
      {
        v9 = off_1E16DBFC0;
        return v9[v5];
      }
    }
    if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameVibrancy")))
    {
      v5 = a1 + 1;
      if (a1 + 1 < 4)
      {
        v9 = off_1E16DBFD8;
        return v9[v5];
      }
    }
    if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameUserInterfaceRenderingMode")) && a1 < 3)
    {
      v8 = off_1E16DBFF8;
    }
    else if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameSemanticContext")) && a1 < 3)
    {
      v8 = off_1E16DC010;
    }
    else
    {
      if (!objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNamePresentationSemanticContext"))
        || a1 >= 4)
      {
        if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameSplitViewControllerContext"))
          && (v5 = a1 + 1, a1 + 1 < 5))
        {
          v9 = off_1E16DC048;
        }
        else if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameActiveAppearance"))
               && (v5 = a1 + 1, a1 + 1 < 3))
        {
          v9 = off_1E16DC070;
        }
        else
        {
          if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameFocusSystemState")))
          {
            switch(a1)
            {
              case 0xFFFFFFFFFFFFFFFFLL:
                return CFSTR("Unspecified");
              case 2uLL:
                return CFSTR("Enabled");
              case 1uLL:
                return CFSTR("Disabled");
            }
          }
          if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameSelectionIsKey"))
            && (v5 = a1 + 1, a1 + 1 < 3))
          {
            v9 = off_1E16DC088;
          }
          else if (objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameBacklightLuminance"))
                 && (v5 = a1 + 1, a1 + 1 < 4))
          {
            v9 = off_1E16DC0A0;
          }
          else
          {
            if (!objc_msgSend(a2, "isEqualToString:", CFSTR("_UITraitNameToolbarItemPresentationSize")))
              return 0;
            v5 = a1 + 1;
            if (a1 + 1 >= 5)
              return 0;
            v9 = off_1E16DC0C0;
          }
        }
        return v9[v5];
      }
      v8 = off_1E16DC028;
    }
    return v8[a1];
  }
  v10 = (__CFString *)_NSStringFromUIContentSizeCategory(a1);
  v11 = -[__CFString rangeOfString:options:](v10, "rangeOfString:options:", CFSTR("UICTContentSizeCategory"), 8);
  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v11 = -[__CFString rangeOfString:options:](v10, "rangeOfString:options:", CFSTR("_UICTContentSizeCategory"), 8);
    if (v11 == 0x7FFFFFFFFFFFFFFFLL)
      return v10;
  }
  return (const __CFString *)-[__CFString substringFromIndex:](v10, "substringFromIndex:", v11 + v12);
}

const __CFString *_NSStringFromUIUserInterfaceStyle(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unspecified");
  if (a1 == 2)
    v1 = CFSTR("Dark");
  if (a1 == 1)
    return CFSTR("Light");
  else
    return v1;
}

void __swiftcall UICellConfigurationState._bridgeToObjectiveC()(UICellConfigurationState *__return_ptr retstr)
{
  sub_1850F22DC();
}

uint64_t NSDiffableDataSourceSnapshot.sectionIdentifiers.getter(uint64_t a1)
{
  return sub_1852C5478(a1, (SEL *)&selRef_sectionIdentifiers);
}

void sub_1850BF798(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1850BFD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 176), 8);
  _Block_object_dispose((const void *)(v37 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1850C52CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::__unordered_map_hasher<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>>>::find<long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1850C61F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 160);
  if (v3)
  {
    *(_QWORD *)(v1 - 152) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1850C63E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1850C650C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1850C673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::~shared_ptr[abi:nn180100](v9 - 72);

  std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 _UIRTreeContainerNode<_UICollectionViewRTreeElement>::addChild(_OWORD *a1, uint64_t a2, uint64_t *a3, int64x2_t **a4, __n128 a5, __n128 a6)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float64x2_t v15;
  int64x2_t v16;
  float64x2_t v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __n128 *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  __n128 result;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  __n128 *v82;
  __n128 *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  float64x2_t *v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  int64x2_t v106;
  uint64_t v107;
  double v108;
  double v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  int64x2_t v115;
  unint64_t v116;
  float64x2_t v117;
  uint64_t *v118;
  double v119;
  float64x2_t *v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  int64x2_t v124;
  unint64_t v125;
  double v126;
  double v127;
  float64x2_t v128;
  float64x2_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t i;
  float64x2_t *v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  int64x2_t v138;
  uint64_t *v139;
  unint64_t v140;
  double v141;
  uint64_t *j;
  uint64_t v143;
  float64x2_t *v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  int64x2_t v148;
  unint64_t v149;
  double v150;
  double v151;
  float64x2_t v152;
  float64x2_t v153;
  uint64_t v154;
  uint64_t v155;
  float64x2_t *v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  int64x2_t v160;
  unint64_t v161;
  double v162;
  double v163;
  float64x2_t v164;
  float64x2_t v165;
  uint64_t *v166;
  float64x2_t *v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  int64x2_t v172;
  unint64_t v173;
  double v174;
  double v175;
  float64x2_t v176;
  uint64_t v177;
  float64x2_t *v178;
  float64x2_t v179;
  float64x2_t v180;
  int64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  float64x2_t *v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  int64x2_t v191;
  unint64_t v192;
  double v193;
  double v194;
  float64x2_t v195;
  float64x2_t *v196;
  float64x2_t v197;
  float64x2_t v198;
  int64x2_t v199;
  float64x2_t v200;
  unint64_t v201;
  float64x2_t v202;
  double v203;
  double v204;
  float64x2_t *v205;
  float64x2_t v206;
  float64x2_t v207;
  int64x2_t v208;
  float64x2_t v209;
  double v210;
  uint64_t *v211;
  float64x2_t v212;
  uint64_t v213;
  uint64_t v214;
  float64x2_t *v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  int64x2_t v219;
  unint64_t v220;
  double v221;
  double v222;
  float64x2_t v223;
  float64x2_t *v224;
  float64x2_t v225;
  float64x2_t v226;
  int64x2_t v227;
  float64x2_t v228;
  unint64_t *v229;
  double v230;
  double v231;
  double v232;
  unint64_t v233;
  float64x2_t *v234;
  float64x2_t v235;
  float64x2_t v236;
  int64x2_t v237;
  float64x2_t v238;
  float64x2_t *v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  int64x2_t v244;
  unint64_t v245;
  double v246;
  unint64_t v247;
  double v248;
  double v249;
  float64x2_t v250;
  float64x2_t *v251;
  float64x2_t v252;
  float64x2_t v253;
  int64x2_t v254;
  float64x2_t v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  double v259;
  double v260;
  float64x2_t v261;
  float64x2_t *v262;
  float64x2_t v263;
  float64x2_t v264;
  int64x2_t v265;
  float64x2_t v266;
  __n128 *v267;
  unint64_t v268;
  __n128 *v269;
  __n128 *v270;
  __n128 v271;
  __n128 v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  float64x2_t v288;
  int64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  std::__shared_weak_count *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  float64x2_t *v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  int64x2_t v305;
  unint64_t v306;
  double v307;
  double v308;
  float64x2_t v309;
  float64x2_t *v310;
  float64x2_t v311;
  float64x2_t v312;
  int64x2_t v313;
  float64x2_t v314;
  uint64_t *v315;
  uint64_t *v316;
  uint64_t v317;
  float64x2_t v318;
  float64x2_t *v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  int64x2_t v323;
  unint64_t v324;
  double v325;
  double v326;
  float64x2_t v327;
  float64x2_t *v328;
  float64x2_t v329;
  float64x2_t v330;
  int64x2_t v331;
  float64x2_t v332;
  uint64_t v333;
  unint64_t *v334;
  uint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int64x2_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t *v350;
  char *v351;
  char *v352;
  unint64_t v353;
  uint64_t v354;
  _OWORD *v355;
  __int128 v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  __int128 v361;
  char *v362;
  char *v363;
  __int128 v364;
  __int128 v365;
  char *v366;
  int64_t v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  unint64_t v375;
  unint64_t v376;
  char *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int64x2_t v389;
  uint64_t v390;
  uint64_t v391;
  int64x2_t *v392;
  char *v393;
  char *v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  BOOL v398;
  unint64_t v399;
  unint64_t v400;
  BOOL v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  void *v406;
  __n128 *v407;
  int64x2_t *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  __n128 *v414;
  __n128 v415;
  __n128 v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  unint64_t v421;
  unint64_t v422;
  char *v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int64x2_t v434;
  uint64_t v435;
  std::__shared_weak_count *v436;
  std::__shared_weak_count *v437;
  uint64_t v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  uint64_t v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  uint64_t *v463;
  _OWORD *v464;
  int64x2_t **v465;
  float64x2_t v467;
  int64x2_t *v469;
  std::__shared_weak_count *v470;
  __int128 v471;
  int64x2_t *v472;
  std::__shared_weak_count *v473;
  uint64_t v474;
  __int128 v475;
  __int128 v476;
  float64x2_t v477[2];
  int64x2_t *v478;
  std::__shared_weak_count *v479;
  __int128 v480;
  uint64_t v481;
  std::__shared_weak_count *v482;
  __int128 v483;
  __int128 v484;
  _QWORD v485[2];
  int64x2_t v486;
  unint64_t v487;
  __int128 v488;
  __n128 *v489;
  _BYTE v490[32];
  unint64_t *v491;

  v10 = *(uint64_t **)(a2 + 40);
  v11 = *(uint64_t **)(a2 + 48);
  if (v11 != v10)
  {
LABEL_4:
    v12 = ((char *)v11 - (char *)v10) >> 4;
    if (v12)
    {
      if (v12 == 1)
      {
        v13 = *v10;
        goto LABEL_15;
      }
      if (v10 != v11)
      {
        v13 = 0;
        v467 = vaddq_f64((float64x2_t)a5, (float64x2_t)a6);
        v14 = 1.79769313e308;
        do
        {
          _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v490, *v10);
          v15 = vaddq_f64(*(float64x2_t *)v490, *(float64x2_t *)&v490[16]);
          v16 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v15, v467), (int8x16_t)vcgeq_f64((float64x2_t)a5, *(float64x2_t *)v490));
          if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v16, 1), (int8x16_t)v16).u64[0] & 0x8000000000000000) != 0)
          {
            v18 = 0.0;
          }
          else
          {
            v17 = vsubq_f64(vmaxnmq_f64(v15, v467), vminnmq_f64(*(float64x2_t *)v490, (float64x2_t)a5));
            v18 = vmulq_laneq_f64(v17, v17, 1).f64[0]
                / vmuld_lane_f64(*(double *)&v490[16], *(float64x2_t *)&v490[16], 1);
          }
          if (v18 < v14)
          {
            v13 = *v10;
            v14 = v18;
            if (fabs(v18) < 2.22044605e-16)
              break;
          }
          v10 += 2;
        }
        while (v10 != v11);
LABEL_15:
        if (v13)
        {
          v19 = *a3;
          v20 = *(_OWORD *)(a3 + 1);
          v21 = *(_OWORD *)(a3 + 3);
          a3[3] = 0;
          a3[4] = 0;
          v475 = v20;
          v476 = v21;
          v22 = (std::__shared_weak_count *)a4[1];
          v472 = *a4;
          v473 = v22;
          v474 = v19;
          if (v22)
          {
            p_shared_owners = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(p_shared_owners);
            while (__stxr(v24 + 1, p_shared_owners));
          }
          _UIRTreeContainerNode<_UICollectionViewRTreeElement>::addChild(v490, v13, &v474, &v472, a5, a6);
          std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::operator=[abi:nn180100]((uint64_t)a4, (__int128 *)v490);
          v25 = *(std::__shared_weak_count **)&v490[8];
          if (*(_QWORD *)&v490[8])
          {
            v26 = (unint64_t *)(*(_QWORD *)&v490[8] + 8);
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v28 = v473;
          if (v473)
          {
            v29 = (unint64_t *)&v473->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }

          goto LABEL_65;
        }
      }
    }
    v486 = 0uLL;
    v487 = 0;
    v31 = (__n128 *)operator new(0x20uLL);
    *v31 = a5;
    v31[1] = a6;
    *((_QWORD *)&v488 + 1) = v31 + 2;
    v489 = v31 + 2;
    *(_QWORD *)&v488 = v31;
    v491 = &v487;
    v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UICollectionViewRTreeElement>>(1uLL);
    *(_QWORD *)v490 = v32;
    *(_QWORD *)&v490[8] = v32;
    *(_QWORD *)&v490[24] = &v32[40 * v33];
    *(_QWORD *)v32 = *a3;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)(a3 + 1);
    v34 = a3[3];
    a3[3] = 0;
    *((_QWORD *)v32 + 3) = v34;
    v35 = a3[4];
    a3[4] = 0;
    *((_QWORD *)v32 + 4) = v35;
    v36 = v32 + 40;
    *(_QWORD *)&v490[16] = v32 + 40;
    v37 = v486.i64[1];
    v38 = v486.i64[0];
    v39 = *(_QWORD *)&v490[8];
    if (v486.i64[1] == v486.i64[0])
    {
      v43 = vdupq_n_s64(v486.u64[1]);
    }
    else
    {
      do
      {
        v40 = *(_QWORD *)(v37 - 40);
        v37 -= 40;
        *(_QWORD *)(v39 - 40) = v40;
        v39 -= 40;
        *(_OWORD *)(v39 + 8) = *(_OWORD *)(v37 + 8);
        v41 = *(_QWORD *)(v37 + 24);
        *(_QWORD *)(v37 + 24) = 0;
        *(_QWORD *)(v39 + 24) = v41;
        v42 = *(_QWORD *)(v37 + 32);
        *(_QWORD *)(v37 + 32) = 0;
        *(_QWORD *)(v39 + 32) = v42;
      }
      while (v37 != v38);
      v43 = v486;
      v36 = *(char **)&v490[16];
    }
    v486.i64[0] = v39;
    v486.i64[1] = (uint64_t)v36;
    *(int64x2_t *)&v490[8] = v43;
    v44 = v487;
    v487 = *(_QWORD *)&v490[24];
    *(_QWORD *)&v490[24] = v44;
    *(_QWORD *)v490 = v43.i64[0];
    std::__split_buffer<_UICollectionViewRTreeElement>::~__split_buffer((uint64_t)v490);
    v46 = *(_QWORD *)(a2 + 8);
    v45 = *(std::__shared_weak_count **)(a2 + 16);
    v486.i64[1] = (uint64_t)v36;
    *(_QWORD *)&v484 = v46;
    if (v45)
    {
      v47 = std::__shared_weak_count::lock(v45);
      *((_QWORD *)&v484 + 1) = v47;
      if (v47)
      {
        v48 = v47;
        _ZNSt3__115allocate_sharedB8nn180100I21_UIRTreeContainerNodeI29_UICollectionViewRTreeElementENS_9allocatorIS3_EEJNS_10shared_ptrIS3_EENS_6vectorIS2_NS4_IS2_EEEENS8_IDv4_dNS4_ISB_EEEEEvEENS6_IT_EERKT0_DpOT1_((uint64_t *)v490, v46, v47, (__int128 *)v486.i8, &v488);
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        v471 = *(_OWORD *)v490;
        *(_OWORD *)v490 = 0uLL;
        v51 = (std::__shared_weak_count *)a4[1];
        v469 = *a4;
        v470 = v51;
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        _UIRTreeContainerNode<_UICollectionViewRTreeElement>::addContainer(&v484, a2, (uint64_t *)&v471, &v469);
        std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::operator=[abi:nn180100]((uint64_t)a4, &v484);
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v484 + 1);
        if (*((_QWORD *)&v484 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v484 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = v470;
        if (v470)
        {
          v58 = (unint64_t *)&v470->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v471 + 1);
        if (*((_QWORD *)&v471 + 1))
        {
          v61 = (unint64_t *)(*((_QWORD *)&v471 + 1) + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = *(std::__shared_weak_count **)&v490[8];
        if (*(_QWORD *)&v490[8])
        {
          v64 = (unint64_t *)(*(_QWORD *)&v490[8] + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        *(_QWORD *)v490 = &v486;
        std::vector<_UICollectionViewRTreeElement>::__destroy_vector::operator()[abi:nn180100]((void ***)v490);
        v66 = (void *)v488;
        if ((_QWORD)v488)
          goto LABEL_64;
        goto LABEL_65;
      }
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_380:
    abort();
  }
  if (_UIRTreeContainerNode<unsigned long>::isRoot(a2))
  {
    v10 = *(uint64_t **)(a2 + 40);
    v11 = *(uint64_t **)(a2 + 48);
    goto LABEL_4;
  }
  if (!_UIRTreeContainerNode<_UICollectionViewRTreeElement>::isFull((_QWORD *)a2))
  {
    v82 = *(__n128 **)(a2 + 96);
    v81 = *(_QWORD *)(a2 + 104);
    if ((unint64_t)v82 >= v81)
    {
      v84 = *(_QWORD *)(a2 + 88);
      v85 = ((uint64_t)v82 - v84) >> 5;
      v86 = v85 + 1;
      if ((unint64_t)(v85 + 1) >> 59)
        goto LABEL_380;
      v87 = v81 - v84;
      if (v87 >> 4 > v86)
        v86 = v87 >> 4;
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFE0)
        v88 = 0x7FFFFFFFFFFFFFFLL;
      else
        v88 = v86;
      if (v88)
        v88 = (unint64_t)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv4_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v88);
      else
        v89 = 0;
      v267 = (__n128 *)(v88 + 32 * v85);
      v268 = v88 + 32 * v89;
      *v267 = a5;
      v267[1] = a6;
      v83 = v267 + 2;
      v270 = *(__n128 **)(a2 + 88);
      v269 = *(__n128 **)(a2 + 96);
      if (v269 != v270)
      {
        do
        {
          v271 = v269[-2];
          v272 = v269[-1];
          v269 -= 2;
          v267[-2] = v271;
          v267[-1] = v272;
          v267 -= 2;
        }
        while (v269 != v270);
        v269 = *(__n128 **)(a2 + 88);
      }
      *(_QWORD *)(a2 + 88) = v267;
      *(_QWORD *)(a2 + 96) = v83;
      *(_QWORD *)(a2 + 104) = v268;
      if (v269)
        operator delete(v269);
    }
    else
    {
      *v82 = a5;
      v82[1] = a6;
      v83 = v82 + 2;
    }
    v273 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 96) = v83;
    v274 = *(_QWORD *)(a2 + 72);
    if (v274 >= v273)
    {
      v278 = *(_QWORD *)(a2 + 64);
      v279 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v274 - v278) >> 3);
      v280 = v279 + 1;
      if (v279 + 1 > 0x666666666666666)
        goto LABEL_380;
      v281 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v273 - v278) >> 3);
      if (2 * v281 > v280)
        v280 = 2 * v281;
      if (v281 >= 0x333333333333333)
        v282 = 0x666666666666666;
      else
        v282 = v280;
      v491 = (unint64_t *)(a2 + 80);
      v283 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UICollectionViewRTreeElement>>(v282);
      v284 = &v283[40 * v279];
      *(_QWORD *)v490 = v283;
      *(_QWORD *)&v490[8] = v284;
      *(_QWORD *)&v490[24] = &v283[40 * v285];
      *(_QWORD *)v284 = *a3;
      *(_OWORD *)(v284 + 8) = *(_OWORD *)(a3 + 1);
      v286 = a3[3];
      a3[3] = 0;
      *((_QWORD *)v284 + 3) = v286;
      v287 = a3[4];
      a3[4] = 0;
      *((_QWORD *)v284 + 4) = v287;
      *(_QWORD *)&v490[16] = v284 + 40;
      std::vector<_UICollectionViewRTreeElement>::__swap_out_circular_buffer((uint64_t *)(a2 + 64), v490);
      v277 = *(_QWORD *)(a2 + 72);
      std::__split_buffer<_UICollectionViewRTreeElement>::~__split_buffer((uint64_t)v490);
    }
    else
    {
      *(_QWORD *)v274 = *a3;
      *(_OWORD *)(v274 + 8) = *(_OWORD *)(a3 + 1);
      v275 = a3[3];
      a3[3] = 0;
      *(_QWORD *)(v274 + 24) = v275;
      v276 = a3[4];
      a3[4] = 0;
      *(_QWORD *)(v274 + 32) = v276;
      v277 = v274 + 40;
    }
    *(_QWORD *)(a2 + 72) = v277;
    _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v477, a2);
    v288 = vaddq_f64((float64x2_t)a5, (float64x2_t)a6);
    v289 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(vaddq_f64(v477[0], v477[1]), v288), (int8x16_t)vcgeq_f64((float64x2_t)a5, v477[0]));
    if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v289, 1), (int8x16_t)v289).u64[0] & 0x8000000000000000) == 0)
    {
      v290 = *(float64x2_t *)(a2 + 112);
      v291 = vaddq_f64(v290, *(float64x2_t *)(a2 + 128));
      v292 = vminnmq_f64(v290, (float64x2_t)a5);
      *(float64x2_t *)(a2 + 112) = v292;
      *(float64x2_t *)(a2 + 128) = vsubq_f64(vmaxnmq_f64(v291, v288), v292);
      *(_OWORD *)v490 = 0uLL;
      v293 = *(std::__shared_weak_count **)(a2 + 32);
      if (v293)
      {
        v293 = std::__shared_weak_count::lock(v293);
        v294 = v293;
        *(_QWORD *)&v490[8] = v293;
        if (v293)
        {
          v293 = *(std::__shared_weak_count **)(a2 + 24);
          *(_QWORD *)v490 = v293;
        }
      }
      else
      {
        v294 = 0;
      }
      _UIRTreeContainerNode<_UICollectionViewRTreeElement>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)v293);
      if (v294)
      {
        v295 = (unint64_t *)&v294->__shared_owners_;
        do
          v296 = __ldaxr(v295);
        while (__stlxr(v296 - 1, v295));
        if (!v296)
        {
          ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
          std::__shared_weak_count::__release_weak(v294);
        }
      }
    }
    goto LABEL_65;
  }
  *(__n128 *)v490 = a5;
  *(__n128 *)&v490[16] = a6;
  v68 = *(_QWORD *)(a2 + 64);
  v69 = *(_QWORD *)(a2 + 72);
  v489 = 0;
  v488 = 0uLL;
  v71 = v69 - v68;
  v70 = v71 == 0;
  v72 = v71 >> 3;
  v73 = 0xCCCCCCCCCCCCCCCDLL * v72;
  if (v70)
  {
    v76 = 0;
    v90 = 0;
    v75 = 0;
    v77 = v73 >> 1;
    v78 = (unint64_t *)(8 * (v73 >> 1));
  }
  else
  {
    std::vector<unsigned long>::__vallocate[abi:nn180100](&v488, 0xCCCCCCCCCCCCCCCDLL * v72);
    v74 = *((_QWORD *)&v488 + 1);
    bzero(*((void **)&v488 + 1), 8 * v73);
    v75 = (unint64_t *)(v74 + 8 * v73);
    *((_QWORD *)&v488 + 1) = v75;
    v76 = (unint64_t *)v488;
    v77 = v73 >> 1;
    v78 = (unint64_t *)(v488 + 8 * (v73 >> 1));
    if ((unint64_t *)v488 == v75)
    {
      v76 = v75;
    }
    else
    {
      v79 = 0;
      v80 = (unint64_t *)v488;
      do
        *v80++ = v79++;
      while (v80 != v75);
    }
    v90 = v75;
  }
  v464 = a1;
  v465 = a4;
  v463 = a3;
  if (v73 >= 2)
  {
    v91 = v90;
    v92 = v78;
    if (v78 != v90 && v78 != v75)
    {
      v93 = (uint64_t *)v76;
      v94 = (uint64_t *)v90;
      do
      {
        v95 = v94 - v93;
        if (v95 < 2)
          break;
        if (v95 == 3)
        {
          _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN21_UIRTreeContainerNodeImE46reversedIndexesOfChildrenWithClosestAffinityToEDv4_dEUlmmE_NS_11__wrap_iterIPmEEEEjT1_SA_SA_T0_(v93, v93 + 1, v94 - 1, (float64x2_t *)v490, *(_QWORD *)(a2 + 88));
          v78 = v92;
          break;
        }
        if (v95 == 2)
        {
          v297 = *(v94 - 1);
          v298 = *v93;
          v299 = *(_QWORD *)(a2 + 88);
          v300 = (float64x2_t *)(v299 + 32 * v297);
          v302 = *v300;
          v301 = v300[1];
          v303 = vaddq_f64(*v300, v301);
          v304 = vaddq_f64(*(float64x2_t *)v490, *(float64x2_t *)&v490[16]);
          v305 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v303, v304), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v300));
          v306 = vandq_s8((int8x16_t)vdupq_laneq_s64(v305, 1), (int8x16_t)v305).u64[0];
          v307 = 0.0;
          v308 = 0.0;
          if ((v306 & 0x8000000000000000) == 0)
          {
            v309 = vsubq_f64(vmaxnmq_f64(v303, v304), vminnmq_f64(v302, *(float64x2_t *)v490));
            v308 = vmulq_laneq_f64(v309, v309, 1).f64[0] / vmuld_lane_f64(v301.f64[0], v301, 1);
          }
          v310 = (float64x2_t *)(v299 + 32 * v298);
          v311 = v310[1];
          v312 = vaddq_f64(*v310, v311);
          v313 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v312, v304), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v310));
          if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v313, 1), (int8x16_t)v313).u64[0] & 0x8000000000000000) == 0)
          {
            v314 = vsubq_f64(vmaxnmq_f64(v312, v304), vminnmq_f64(*v310, *(float64x2_t *)v490));
            v307 = vmulq_laneq_f64(v314, v314, 1).f64[0] / vmuld_lane_f64(v311.f64[0], v311, 1);
          }
          if (v308 > v307)
          {
            *v93 = v297;
            *(v94 - 1) = v298;
          }
          break;
        }
        if ((char *)v94 - (char *)v93 <= 63)
        {
          for (; v93 != v94 - 1; ++v93)
          {
            v315 = v94;
            if (v93 != v94)
            {
              v316 = v93 + 1;
              v315 = v93;
              if (v93 + 1 != v94)
              {
                v317 = *(_QWORD *)(a2 + 88);
                v318 = vaddq_f64(*(float64x2_t *)v490, *(float64x2_t *)&v490[16]);
                v315 = v93;
                do
                {
                  v319 = (float64x2_t *)(v317 + 32 * *v316);
                  v321 = *v319;
                  v320 = v319[1];
                  v322 = vaddq_f64(*v319, v320);
                  v323 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v322, v318), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v319));
                  v324 = vandq_s8((int8x16_t)vdupq_laneq_s64(v323, 1), (int8x16_t)v323).u64[0];
                  v325 = 0.0;
                  v326 = 0.0;
                  if ((v324 & 0x8000000000000000) == 0)
                  {
                    v327 = vsubq_f64(vmaxnmq_f64(v322, v318), vminnmq_f64(v321, *(float64x2_t *)v490));
                    v326 = vmulq_laneq_f64(v327, v327, 1).f64[0] / vmuld_lane_f64(v320.f64[0], v320, 1);
                  }
                  v328 = (float64x2_t *)(v317 + 32 * *v315);
                  v329 = v328[1];
                  v330 = vaddq_f64(*v328, v329);
                  v331 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v330, v318), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v328));
                  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v331, 1), (int8x16_t)v331).u64[0] & 0x8000000000000000) == 0)
                  {
                    v332 = vsubq_f64(vmaxnmq_f64(v330, v318), vminnmq_f64(*v328, *(float64x2_t *)v490));
                    v325 = vmulq_laneq_f64(v332, v332, 1).f64[0] / vmuld_lane_f64(v329.f64[0], v329, 1);
                  }
                  if (v326 > v325)
                    v315 = v316;
                  ++v316;
                }
                while (v316 != v94);
              }
            }
            if (v93 != v315)
            {
              v333 = *v93;
              *v93 = *v315;
              *v315 = v333;
            }
          }
          break;
        }
        v96 = &v93[v95 >> 1];
        v97 = (unint64_t *)(v94 - 1);
        v98 = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN21_UIRTreeContainerNodeImE46reversedIndexesOfChildrenWithClosestAffinityToEDv4_dEUlmmE_NS_11__wrap_iterIPmEEEEjT1_SA_SA_T0_(v93, v96, v94 - 1, (float64x2_t *)v490, *(_QWORD *)(a2 + 88));
        v99 = *v93;
        v100 = *(_QWORD *)(a2 + 88);
        v101 = (float64x2_t *)(v100 + 32 * *v93);
        v103 = *v101;
        v102 = v101[1];
        v104 = vaddq_f64(*v101, v102);
        v105 = vaddq_f64(*(float64x2_t *)v490, *(float64x2_t *)&v490[16]);
        v106 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v104, v105), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v101));
        v107 = vandq_s8((int8x16_t)vdupq_laneq_s64(v106, 1), (int8x16_t)v106).u64[0];
        v108 = 0.0;
        v109 = 0.0;
        if ((v107 & 0x8000000000000000) == 0)
        {
          v110 = vsubq_f64(vmaxnmq_f64(v104, v105), vminnmq_f64(v103, *(float64x2_t *)v490));
          v109 = vmulq_laneq_f64(v110, v110, 1).f64[0] / vmuld_lane_f64(v102.f64[0], v102, 1);
        }
        v111 = (float64x2_t *)(v100 + 32 * *v96);
        v112 = *v111;
        v113 = v111[1];
        v114 = vaddq_f64(*v111, v113);
        v115 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v114, v105), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v111));
        v116 = vandq_s8((int8x16_t)vdupq_laneq_s64(v115, 1), (int8x16_t)v115).u64[0];
        if ((v116 & 0x8000000000000000) == 0)
        {
          v117 = vsubq_f64(vmaxnmq_f64(v114, v105), vminnmq_f64(v112, *(float64x2_t *)v490));
          v108 = vmulq_laneq_f64(v117, v117, 1).f64[0] / vmuld_lane_f64(v113.f64[0], v113, 1);
        }
        v78 = v92;
        if (v109 <= v108)
        {
          v119 = vmuld_lane_f64(v113.f64[0], v113, 1);
          v118 = v94 - 1;
          while (--v118 != v93)
          {
            v120 = (float64x2_t *)(v100 + 32 * *v118);
            v122 = *v120;
            v121 = v120[1];
            v123 = vaddq_f64(*v120, v121);
            v124 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v123, v105), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v120));
            v125 = vandq_s8((int8x16_t)vdupq_laneq_s64(v124, 1), (int8x16_t)v124).u64[0];
            v126 = 0.0;
            v127 = 0.0;
            if ((v125 & 0x8000000000000000) == 0)
            {
              v128 = vsubq_f64(vmaxnmq_f64(v123, v105), vminnmq_f64(v122, *(float64x2_t *)v490));
              v127 = vmulq_laneq_f64(v128, v128, 1).f64[0] / vmuld_lane_f64(v121.f64[0], v121, 1);
            }
            if ((v116 & 0x8000000000000000) == 0)
            {
              v129 = vsubq_f64(vmaxnmq_f64(v114, v105), vminnmq_f64(v112, *(float64x2_t *)v490));
              v126 = vmulq_laneq_f64(v129, v129, 1).f64[0] / v119;
            }
            if (v127 > v126)
            {
              *v93 = *v118;
              *v118 = v99;
              ++v98;
              goto LABEL_107;
            }
          }
          v201 = *v97;
          v202 = vsubq_f64(vmaxnmq_f64(v104, v105), vminnmq_f64(v103, *(float64x2_t *)v490));
          v203 = vmulq_laneq_f64(v202, v202, 1).f64[0];
          v204 = v203 / vmuld_lane_f64(v102.f64[0], v102, 1);
          if (v107 < 0)
            v204 = 0.0;
          v205 = (float64x2_t *)(v100 + 32 * v201);
          v206 = v205[1];
          v207 = vaddq_f64(*v205, v206);
          v208 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v207, v105), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v205));
          if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v208, 1), (int8x16_t)v208).u64[0] & 0x8000000000000000) != 0)
          {
            v210 = 0.0;
          }
          else
          {
            v209 = vsubq_f64(vmaxnmq_f64(v207, v105), vminnmq_f64(*v205, *(float64x2_t *)v490));
            v210 = vmulq_laneq_f64(v209, v209, 1).f64[0] / vmuld_lane_f64(v206.f64[0], v206, 1);
          }
          v229 = (unint64_t *)(v93 + 1);
          if (v204 <= v210)
          {
            if (v229 == v97)
              break;
            v230 = vmuld_lane_f64(v102.f64[0], v102, 1);
            while (1)
            {
              v231 = 0.0;
              v232 = 0.0;
              if ((v107 & 0x8000000000000000) == 0)
                v232 = v203 / v230;
              v233 = *v229;
              v234 = (float64x2_t *)(v100 + 32 * *v229);
              v235 = v234[1];
              v236 = vaddq_f64(*v234, v235);
              v237 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v236, v105), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v234));
              if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v237, 1), (int8x16_t)v237).u64[0] & 0x8000000000000000) == 0)
              {
                v238 = vsubq_f64(vmaxnmq_f64(v236, v105), vminnmq_f64(*v234, *(float64x2_t *)v490));
                v231 = vmulq_laneq_f64(v238, v238, 1).f64[0] / vmuld_lane_f64(v235.f64[0], v235, 1);
              }
              if (v232 > v231)
                break;
              if (++v229 == v97)
                goto LABEL_237;
            }
            *v229++ = v201;
            *v97 = v233;
          }
          if (v229 == v97)
            break;
          while (1)
          {
            v239 = (float64x2_t *)(v100 + 32 * *v93);
            v240 = *v239;
            v241 = v239[1];
            v242 = vaddq_f64(*v239, v241);
            v243 = vaddq_f64(*(float64x2_t *)v490, *(float64x2_t *)&v490[16]);
            v244 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v242, v243), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v239));
            v245 = vandq_s8((int8x16_t)vdupq_laneq_s64(v244, 1), (int8x16_t)v244).u64[0];
            v246 = vmuld_lane_f64(v241.f64[0], v241, 1);
            do
            {
              v247 = *v229;
              v248 = 0.0;
              v249 = 0.0;
              if ((v245 & 0x8000000000000000) == 0)
              {
                v250 = vsubq_f64(vmaxnmq_f64(v242, v243), vminnmq_f64(v240, *(float64x2_t *)v490));
                v249 = vmulq_laneq_f64(v250, v250, 1).f64[0] / v246;
              }
              v251 = (float64x2_t *)(v100 + 32 * v247);
              v252 = v251[1];
              v253 = vaddq_f64(*v251, v252);
              v254 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v253, v243), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v251));
              if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v254, 1), (int8x16_t)v254).u64[0] & 0x8000000000000000) == 0)
              {
                v255 = vsubq_f64(vmaxnmq_f64(v253, v243), vminnmq_f64(*v251, *(float64x2_t *)v490));
                v248 = vmulq_laneq_f64(v255, v255, 1).f64[0] / vmuld_lane_f64(v252.f64[0], v252, 1);
              }
              ++v229;
            }
            while (v249 <= v248);
            v256 = v229 - 1;
            do
            {
              v258 = *--v97;
              v257 = v258;
              v259 = 0.0;
              v260 = 0.0;
              if ((v245 & 0x8000000000000000) == 0)
              {
                v261 = vsubq_f64(vmaxnmq_f64(v242, v243), vminnmq_f64(v240, *(float64x2_t *)v490));
                v260 = vmulq_laneq_f64(v261, v261, 1).f64[0] / v246;
              }
              v262 = (float64x2_t *)(v100 + 32 * v257);
              v263 = v262[1];
              v264 = vaddq_f64(*v262, v263);
              v265 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v264, v243), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v262));
              if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v265, 1), (int8x16_t)v265).u64[0] & 0x8000000000000000) == 0)
              {
                v266 = vsubq_f64(vmaxnmq_f64(v264, v243), vminnmq_f64(*v262, *(float64x2_t *)v490));
                v259 = vmulq_laneq_f64(v266, v266, 1).f64[0] / vmuld_lane_f64(v263.f64[0], v263, 1);
              }
            }
            while (v260 > v259);
            if (v256 >= v97)
              break;
            *v256 = v257;
            *v97 = v247;
          }
          v93 = (uint64_t *)(v229 - 1);
          if (v256 > v92)
            break;
        }
        else
        {
          v118 = v94 - 1;
LABEL_107:
          v130 = v93 + 1;
          if (v93 + 1 >= v118)
          {
            v139 = v93 + 1;
            i = 1;
          }
          else
          {
            v131 = v93 + 1;
            for (i = 1; ; ++i)
            {
              v133 = (float64x2_t *)(v100 + 32 * *v96);
              v134 = vaddq_f64(*(float64x2_t *)v490, *(float64x2_t *)&v490[16]);
              v135 = *v133;
              v136 = v133[1];
              v137 = vaddq_f64(*v133, v136);
              v138 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v137, v134), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v133));
              v139 = v131;
              v140 = vandq_s8((int8x16_t)vdupq_laneq_s64(v138, 1), (int8x16_t)v138).u64[0];
              v141 = vmuld_lane_f64(v136.f64[0], v136, 1);
              v131 = &v130[i];
              for (j = &v93[i]; ; ++j)
              {
                v143 = *j;
                v144 = (float64x2_t *)(v100 + 32 * *j);
                v146 = *v144;
                v145 = v144[1];
                v147 = vaddq_f64(*v144, v145);
                v148 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v147, v134), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v144));
                v149 = vandq_s8((int8x16_t)vdupq_laneq_s64(v148, 1), (int8x16_t)v148).u64[0];
                v150 = 0.0;
                v151 = 0.0;
                if ((v149 & 0x8000000000000000) == 0)
                {
                  v152 = vsubq_f64(vmaxnmq_f64(v147, v134), vminnmq_f64(v146, *(float64x2_t *)v490));
                  v151 = vmulq_laneq_f64(v152, v152, 1).f64[0] / vmuld_lane_f64(v145.f64[0], v145, 1);
                }
                if ((v140 & 0x8000000000000000) == 0)
                {
                  v153 = vsubq_f64(vmaxnmq_f64(v137, v134), vminnmq_f64(v135, *(float64x2_t *)v490));
                  v150 = vmulq_laneq_f64(v153, v153, 1).f64[0] / v141;
                }
                if (v151 <= v150)
                  break;
                v139 = &v93[++i];
                ++v131;
              }
              do
              {
                v155 = *--v118;
                v154 = v155;
                v156 = (float64x2_t *)(v100 + 32 * v155);
                v158 = *v156;
                v157 = v156[1];
                v159 = vaddq_f64(*v156, v157);
                v160 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v159, v134), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v156));
                v161 = vandq_s8((int8x16_t)vdupq_laneq_s64(v160, 1), (int8x16_t)v160).u64[0];
                v162 = 0.0;
                v163 = 0.0;
                if ((v161 & 0x8000000000000000) == 0)
                {
                  v164 = vsubq_f64(vmaxnmq_f64(v159, v134), vminnmq_f64(v158, *(float64x2_t *)v490));
                  v163 = vmulq_laneq_f64(v164, v164, 1).f64[0] / vmuld_lane_f64(v157.f64[0], v157, 1);
                }
                if ((v140 & 0x8000000000000000) == 0)
                {
                  v165 = vsubq_f64(vmaxnmq_f64(v137, v134), vminnmq_f64(v135, *(float64x2_t *)v490));
                  v162 = vmulq_laneq_f64(v165, v165, 1).f64[0] / v141;
                }
              }
              while (v163 <= v162);
              if (j >= v118)
                break;
              *j = v154;
              *v118 = v143;
              ++v98;
              if (j == v96)
                v96 = v118;
            }
          }
          v166 = &v93[i];
          if (v166 != v96)
          {
            v167 = (float64x2_t *)(v100 + 32 * *v96);
            v169 = *v167;
            v168 = v167[1];
            v170 = vaddq_f64(*v167, v168);
            v171 = vaddq_f64(*(float64x2_t *)v490, *(float64x2_t *)&v490[16]);
            v172 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v170, v171), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v167));
            v173 = vandq_s8((int8x16_t)vdupq_laneq_s64(v172, 1), (int8x16_t)v172).u64[0];
            v174 = 0.0;
            v175 = 0.0;
            if ((v173 & 0x8000000000000000) == 0)
            {
              v176 = vsubq_f64(vmaxnmq_f64(v170, v171), vminnmq_f64(v169, *(float64x2_t *)v490));
              v175 = vmulq_laneq_f64(v176, v176, 1).f64[0] / vmuld_lane_f64(v168.f64[0], v168, 1);
            }
            v177 = *v166;
            v178 = (float64x2_t *)(v100 + 32 * *v166);
            v179 = v178[1];
            v180 = vaddq_f64(*v178, v179);
            v181 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v180, v171), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v178));
            if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v181, 1), (int8x16_t)v181).u64[0] & 0x8000000000000000) == 0)
            {
              v182 = vsubq_f64(vmaxnmq_f64(v180, v171), vminnmq_f64(*v178, *(float64x2_t *)v490));
              v174 = vmulq_laneq_f64(v182, v182, 1).f64[0] / vmuld_lane_f64(v179.f64[0], v179, 1);
            }
            if (v175 > v174)
            {
              *v166 = *v96;
              *v96 = v177;
              ++v98;
            }
          }
          if (v166 == (uint64_t *)v92)
            break;
          if (!v98)
          {
            if (v166 <= (uint64_t *)v92)
            {
              v211 = v139 + 1;
              if (v139 + 1 == v94)
                break;
              v212 = vaddq_f64(*(float64x2_t *)v490, *(float64x2_t *)&v490[16]);
              v213 = *v139;
              while (1)
              {
                v214 = *v211;
                v215 = (float64x2_t *)(v100 + 32 * *v211);
                v217 = *v215;
                v216 = v215[1];
                v218 = vaddq_f64(*v215, v216);
                v219 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v218, v212), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v215));
                v220 = vandq_s8((int8x16_t)vdupq_laneq_s64(v219, 1), (int8x16_t)v219).u64[0];
                v221 = 0.0;
                v222 = 0.0;
                if ((v220 & 0x8000000000000000) == 0)
                {
                  v223 = vsubq_f64(vmaxnmq_f64(v218, v212), vminnmq_f64(v217, *(float64x2_t *)v490));
                  v222 = vmulq_laneq_f64(v223, v223, 1).f64[0] / vmuld_lane_f64(v216.f64[0], v216, 1);
                }
                v224 = (float64x2_t *)(v100 + 32 * v213);
                v225 = v224[1];
                v226 = vaddq_f64(*v224, v225);
                v227 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v226, v212), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v224));
                if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v227, 1), (int8x16_t)v227).u64[0] & 0x8000000000000000) == 0)
                {
                  v228 = vsubq_f64(vmaxnmq_f64(v226, v212), vminnmq_f64(*v224, *(float64x2_t *)v490));
                  v221 = vmulq_laneq_f64(v228, v228, 1).f64[0] / vmuld_lane_f64(v225.f64[0], v225, 1);
                }
                if (v222 > v221)
                  break;
                ++v211;
                v213 = v214;
                if (v211 == v94)
                  goto LABEL_237;
              }
            }
            else
            {
              if (i == 1)
                break;
              v183 = vaddq_f64(*(float64x2_t *)v490, *(float64x2_t *)&v490[16]);
              v184 = *v93;
              v185 = 8 * i - 8;
              while (1)
              {
                v186 = *v130;
                v187 = (float64x2_t *)(v100 + 32 * *v130);
                v189 = *v187;
                v188 = v187[1];
                v190 = vaddq_f64(*v187, v188);
                v191 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v190, v183), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v187));
                v192 = vandq_s8((int8x16_t)vdupq_laneq_s64(v191, 1), (int8x16_t)v191).u64[0];
                v193 = 0.0;
                v194 = 0.0;
                if ((v192 & 0x8000000000000000) == 0)
                {
                  v195 = vsubq_f64(vmaxnmq_f64(v190, v183), vminnmq_f64(v189, *(float64x2_t *)v490));
                  v194 = vmulq_laneq_f64(v195, v195, 1).f64[0] / vmuld_lane_f64(v188.f64[0], v188, 1);
                }
                v196 = (float64x2_t *)(v100 + 32 * v184);
                v197 = v196[1];
                v198 = vaddq_f64(*v196, v197);
                v199 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v198, v183), (int8x16_t)vcgeq_f64(*(float64x2_t *)v490, *v196));
                if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v199, 1), (int8x16_t)v199).u64[0] & 0x8000000000000000) == 0)
                {
                  v200 = vsubq_f64(vmaxnmq_f64(v198, v183), vminnmq_f64(*v196, *(float64x2_t *)v490));
                  v193 = vmulq_laneq_f64(v200, v200, 1).f64[0] / vmuld_lane_f64(v197.f64[0], v197, 1);
                }
                if (v194 > v193)
                  break;
                ++v130;
                v184 = v186;
                v185 -= 8;
                if (!v185)
                  goto LABEL_237;
              }
            }
          }
          if (v166 <= (uint64_t *)v92)
            v93 = v166 + 1;
          else
            v94 = v139;
        }
      }
      while (v94 != (uint64_t *)v92);
    }
LABEL_237:
    std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(v76, v78, 126 - 2 * __clz(v77), 1);
    v334 = v92;
    v76 = (unint64_t *)v488;
    if (v92 == v75)
    {
      v75 = (unint64_t *)*((_QWORD *)&v488 + 1);
    }
    else
    {
      v335 = *((_QWORD *)&v488 + 1) - (_QWORD)v91;
      if (*((unint64_t **)&v488 + 1) != v91)
      {
        memmove(v92, v91, *((_QWORD *)&v488 + 1) - (_QWORD)v91);
        v334 = v92;
        v76 = (unint64_t *)v488;
      }
      v75 = (unint64_t *)((char *)v334 + v335);
      *((_QWORD *)&v488 + 1) = (char *)v334 + v335;
    }
  }
  v336 = v75 - v76 + 1;
  v486 = 0uLL;
  v487 = 0;
  v484 = 0uLL;
  v485[0] = 0;
  _ZNSt3__16vectorIDv4_dNS_9allocatorIS1_EEE7reserveEm((void **)&v486, v336);
  if (v336)
  {
    if (v336 > 0x666666666666666)
      goto LABEL_379;
    v491 = v485;
    v337 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UICollectionViewRTreeElement>>(v336);
    v338 = &v337[*((_QWORD *)&v484 + 1)];
    *(_QWORD *)v490 = v337;
    *(_QWORD *)&v490[8] = &v337[*((_QWORD *)&v484 + 1)];
    v340 = &v337[40 * v339];
    *(_QWORD *)&v490[16] = &v337[*((_QWORD *)&v484 + 1)];
    *(_QWORD *)&v490[24] = v340;
    v341 = *((_QWORD *)&v484 + 1);
    v342 = v484;
    if (*((_QWORD *)&v484 + 1) == (_QWORD)v484)
    {
      v347 = vdupq_n_s64(*((unint64_t *)&v484 + 1));
      v343 = &v337[*((_QWORD *)&v484 + 1)];
    }
    else
    {
      v343 = &v337[*((_QWORD *)&v484 + 1)];
      do
      {
        v344 = *(_QWORD *)(v341 - 40);
        v341 -= 40;
        *((_QWORD *)v343 - 5) = v344;
        v343 -= 40;
        *(_OWORD *)(v343 + 8) = *(_OWORD *)(v341 + 8);
        v345 = *(_QWORD *)(v341 + 24);
        *(_QWORD *)(v341 + 24) = 0;
        *((_QWORD *)v343 + 3) = v345;
        v346 = *(_QWORD *)(v341 + 32);
        *(_QWORD *)(v341 + 32) = 0;
        *((_QWORD *)v343 + 4) = v346;
      }
      while (v341 != v342);
      v347 = (int64x2_t)v484;
      v340 = *(char **)&v490[24];
      v338 = *(char **)&v490[16];
    }
    *(_QWORD *)&v484 = v343;
    *((_QWORD *)&v484 + 1) = v338;
    *(int64x2_t *)&v490[8] = v347;
    v348 = v485[0];
    v485[0] = v340;
    *(_QWORD *)&v490[24] = v348;
    *(_QWORD *)v490 = v347.i64[0];
    std::__split_buffer<_UICollectionViewRTreeElement>::~__split_buffer((uint64_t)v490);
  }
  v350 = (uint64_t *)*((_QWORD *)&v488 + 1);
  v349 = (uint64_t *)v488;
  v351 = (char *)v486.i64[0];
  if ((_QWORD)v488 == *((_QWORD *)&v488 + 1))
  {
    v352 = (char *)v486.i64[1];
  }
  else
  {
    v352 = (char *)v486.i64[1];
    v353 = v487;
    do
    {
      v354 = *v349;
      v355 = (_OWORD *)(*(_QWORD *)(a2 + 88) + 32 * *v349);
      if ((unint64_t)v352 >= v353)
      {
        v357 = (v352 - v351) >> 5;
        v358 = v357 + 1;
        if ((unint64_t)(v357 + 1) >> 59)
        {
          v487 = v353;
          v486.i64[0] = (uint64_t)v351;
          abort();
        }
        if ((uint64_t)(v353 - (_QWORD)v351) >> 4 > v358)
          v358 = (uint64_t)(v353 - (_QWORD)v351) >> 4;
        if (v353 - (unint64_t)v351 >= 0x7FFFFFFFFFFFFFE0)
          v359 = 0x7FFFFFFFFFFFFFFLL;
        else
          v359 = v358;
        if (v359)
          v359 = (unint64_t)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv4_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v359);
        else
          v360 = 0;
        v361 = v355[1];
        v362 = (char *)(v359 + 32 * v357);
        *(_OWORD *)v362 = *v355;
        *((_OWORD *)v362 + 1) = v361;
        v363 = v362;
        while (v352 != v351)
        {
          v364 = *((_OWORD *)v352 - 2);
          v365 = *((_OWORD *)v352 - 1);
          v352 -= 32;
          *((_OWORD *)v363 - 2) = v364;
          *((_OWORD *)v363 - 1) = v365;
          v363 -= 32;
        }
        v353 = v359 + 32 * v360;
        v352 = v362 + 32;
        if (v351)
          operator delete(v351);
        v351 = v363;
      }
      else
      {
        v356 = v355[1];
        *(_OWORD *)v352 = *v355;
        *((_OWORD *)v352 + 1) = v356;
        v352 += 32;
      }
      v366 = *(char **)(a2 + 96);
      v367 = v366 - (char *)(v355 + 2);
      if (v366 != (char *)(v355 + 2))
        memmove(v355, v355 + 2, v366 - (char *)(v355 + 2));
      *(_QWORD *)(a2 + 96) = (char *)v355 + v367;
      v368 = *(_QWORD *)(a2 + 64);
      v369 = (_QWORD *)(v368 + 40 * v354);
      v370 = *((_QWORD *)&v484 + 1);
      if (*((_QWORD *)&v484 + 1) >= v485[0])
      {
        v375 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v484 + 1) - v484) >> 3) + 1;
        if (v375 > 0x666666666666666)
        {
          v487 = v353;
          v486.i64[0] = (uint64_t)v351;
          abort();
        }
        if (0x999999999999999ALL * ((uint64_t)(v485[0] - v484) >> 3) > v375)
          v375 = 0x999999999999999ALL * ((uint64_t)(v485[0] - v484) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v485[0] - v484) >> 3) >= 0x333333333333333)
          v376 = 0x666666666666666;
        else
          v376 = v375;
        v491 = v485;
        v377 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UICollectionViewRTreeElement>>(v376);
        v378 = &v377[8 * ((uint64_t)(*((_QWORD *)&v484 + 1) - v484) >> 3)];
        *(_QWORD *)v490 = v377;
        *(_QWORD *)&v490[8] = v378;
        *(_QWORD *)&v490[24] = &v377[40 * v379];
        *(_QWORD *)v378 = *v369;
        v380 = v368 + 40 * v354;
        *(_OWORD *)(v378 + 8) = *(_OWORD *)(v380 + 8);
        v381 = *(_QWORD *)(v380 + 24);
        *(_QWORD *)(v380 + 24) = 0;
        *((_QWORD *)v378 + 3) = v381;
        v382 = *(_QWORD *)(v380 + 32);
        *(_QWORD *)(v380 + 32) = 0;
        *((_QWORD *)v378 + 4) = v382;
        v374 = v378 + 40;
        *(_QWORD *)&v490[16] = v378 + 40;
        v383 = *((_QWORD *)&v484 + 1);
        v384 = v484;
        v385 = *(_QWORD *)&v490[8];
        if (*((_QWORD *)&v484 + 1) == (_QWORD)v484)
        {
          v389 = vdupq_n_s64(*((unint64_t *)&v484 + 1));
        }
        else
        {
          do
          {
            v386 = *(_QWORD *)(v383 - 40);
            v383 -= 40;
            *(_QWORD *)(v385 - 40) = v386;
            v385 -= 40;
            *(_OWORD *)(v385 + 8) = *(_OWORD *)(v383 + 8);
            v387 = *(_QWORD *)(v383 + 24);
            *(_QWORD *)(v383 + 24) = 0;
            *(_QWORD *)(v385 + 24) = v387;
            v388 = *(_QWORD *)(v383 + 32);
            *(_QWORD *)(v383 + 32) = 0;
            *(_QWORD *)(v385 + 32) = v388;
          }
          while (v383 != v384);
          v389 = (int64x2_t)v484;
          v374 = *(char **)&v490[16];
        }
        *(_QWORD *)&v484 = v385;
        *((_QWORD *)&v484 + 1) = v374;
        *(int64x2_t *)&v490[8] = v389;
        v390 = v485[0];
        v485[0] = *(_QWORD *)&v490[24];
        *(_QWORD *)&v490[24] = v390;
        *(_QWORD *)v490 = v389.i64[0];
        std::__split_buffer<_UICollectionViewRTreeElement>::~__split_buffer((uint64_t)v490);
      }
      else
      {
        **((_QWORD **)&v484 + 1) = *v369;
        v371 = v368 + 40 * v354;
        *(_OWORD *)(v370 + 8) = *(_OWORD *)(v371 + 8);
        v372 = *(_QWORD *)(v371 + 24);
        *(_QWORD *)(v371 + 24) = 0;
        *(_QWORD *)(v370 + 24) = v372;
        v373 = *(_QWORD *)(v371 + 32);
        *(_QWORD *)(v371 + 32) = 0;
        *(_QWORD *)(v370 + 32) = v373;
        v374 = (char *)(v370 + 40);
      }
      *((_QWORD *)&v484 + 1) = v374;
      v391 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,_UICollectionViewRTreeElement *,_UICollectionViewRTreeElement *,_UICollectionViewRTreeElement *,0>((uint64_t)(v369 + 5), *(_QWORD *)(a2 + 72), (uint64_t)v369);
      std::vector<_UICollectionViewRTreeElement>::__base_destruct_at_end[abi:nn180100](a2 + 64, v391);
      ++v349;
    }
    while (v349 != v350);
    v486.i64[1] = (uint64_t)v352;
    v487 = v353;
    v486.i64[0] = (uint64_t)v351;
  }
  v392 = (int64x2_t *)a2;
  if (v351 != v352)
  {
    v393 = v352 - 32;
    if (v352 - 32 > v351)
    {
      v394 = v351 + 32;
      do
      {
        v395 = *((_OWORD *)v394 - 2);
        v396 = *((_OWORD *)v394 - 1);
        v397 = *((_OWORD *)v393 + 1);
        *((_OWORD *)v394 - 2) = *(_OWORD *)v393;
        *((_OWORD *)v394 - 1) = v397;
        *(_OWORD *)v393 = v395;
        *((_OWORD *)v393 + 1) = v396;
        v393 -= 32;
        v398 = v394 >= v393;
        v394 += 32;
      }
      while (!v398);
    }
  }
  v399 = v484;
  v400 = *((_QWORD *)&v484 + 1) - 40;
  v401 = (_QWORD)v484 != *((_QWORD *)&v484 + 1) && v400 > (unint64_t)v484;
  a1 = v464;
  if (v401)
  {
    do
    {
      v402 = *(_QWORD *)v399;
      *(_OWORD *)v490 = *(_OWORD *)(v399 + 8);
      v403 = *(_QWORD *)(v399 + 24);
      v404 = *(_QWORD *)(v399 + 32);
      *(_QWORD *)(v399 + 24) = 0;
      *(_QWORD *)(v399 + 32) = 0;
      _UICollectionViewRTreeElement::operator=(v399, v400);
      *(_QWORD *)v400 = v402;
      *(_QWORD *)(v400 + 8) = *(_QWORD *)v490;
      *(_BYTE *)(v400 + 16) = v490[8];
      v405 = *(void **)(v400 + 24);
      *(_QWORD *)(v400 + 24) = v403;

      v406 = *(void **)(v400 + 32);
      *(_QWORD *)(v400 + 32) = v404;

      v399 += 40;
      v400 -= 40;
    }
    while (v399 < v400);
  }
  if ((unint64_t)v352 >= v487)
  {
    v409 = (v352 - v351) >> 5;
    v410 = v409 + 1;
    a4 = v465;
    if ((unint64_t)(v409 + 1) >> 59)
      goto LABEL_379;
    v408 = v392;
    v411 = v487 - (_QWORD)v351;
    if ((uint64_t)(v487 - (_QWORD)v351) >> 4 > v410)
      v410 = v411 >> 4;
    if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFE0)
      v412 = 0x7FFFFFFFFFFFFFFLL;
    else
      v412 = v410;
    if (v412)
      v412 = (unint64_t)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv4_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v412);
    else
      v413 = 0;
    v414 = (__n128 *)(v412 + 32 * v409);
    *v414 = a5;
    v414[1] = a6;
    v407 = v414 + 2;
    while (v352 != v351)
    {
      v415 = *((__n128 *)v352 - 2);
      v416 = *((__n128 *)v352 - 1);
      v352 -= 32;
      v414[-2] = v415;
      v414[-1] = v416;
      v414 -= 2;
    }
    v486.i64[0] = (uint64_t)v414;
    v486.i64[1] = (uint64_t)v407;
    v487 = v412 + 32 * v413;
    if (v351)
      operator delete(v351);
  }
  else
  {
    *(__n128 *)v352 = a5;
    *((__n128 *)v352 + 1) = a6;
    v407 = (__n128 *)(v352 + 32);
    a4 = v465;
    v408 = v392;
  }
  v486.i64[1] = (uint64_t)v407;
  v417 = *((_QWORD *)&v484 + 1);
  if (*((_QWORD *)&v484 + 1) < v485[0])
  {
    **((_QWORD **)&v484 + 1) = *v463;
    *(_OWORD *)(v417 + 8) = *(_OWORD *)(v463 + 1);
    v418 = v463[3];
    v463[3] = 0;
    *(_QWORD *)(v417 + 24) = v418;
    v419 = v463[4];
    v463[4] = 0;
    *(_QWORD *)(v417 + 32) = v419;
    v420 = (char *)(v417 + 40);
    goto LABEL_327;
  }
  v421 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v484 + 1) - v484) >> 3) + 1;
  if (v421 > 0x666666666666666)
LABEL_379:
    abort();
  if (0x999999999999999ALL * ((uint64_t)(v485[0] - v484) >> 3) > v421)
    v421 = 0x999999999999999ALL * ((uint64_t)(v485[0] - v484) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v485[0] - v484) >> 3) >= 0x333333333333333)
    v422 = 0x666666666666666;
  else
    v422 = v421;
  v491 = v485;
  v423 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UICollectionViewRTreeElement>>(v422);
  v424 = &v423[8 * ((uint64_t)(*((_QWORD *)&v484 + 1) - v484) >> 3)];
  *(_QWORD *)v490 = v423;
  *(_QWORD *)&v490[8] = v424;
  *(_QWORD *)&v490[24] = &v423[40 * v425];
  *(_QWORD *)v424 = *v463;
  *(_OWORD *)(v424 + 8) = *(_OWORD *)(v463 + 1);
  v426 = v463[3];
  v463[3] = 0;
  *((_QWORD *)v424 + 3) = v426;
  v427 = v463[4];
  v463[4] = 0;
  *((_QWORD *)v424 + 4) = v427;
  v420 = v424 + 40;
  *(_QWORD *)&v490[16] = v424 + 40;
  v428 = *((_QWORD *)&v484 + 1);
  v429 = v484;
  v430 = *(_QWORD *)&v490[8];
  if (*((_QWORD *)&v484 + 1) == (_QWORD)v484)
  {
    v434 = vdupq_n_s64(*((unint64_t *)&v484 + 1));
  }
  else
  {
    do
    {
      v431 = *(_QWORD *)(v428 - 40);
      v428 -= 40;
      *(_QWORD *)(v430 - 40) = v431;
      v430 -= 40;
      *(_OWORD *)(v430 + 8) = *(_OWORD *)(v428 + 8);
      v432 = *(_QWORD *)(v428 + 24);
      *(_QWORD *)(v428 + 24) = 0;
      *(_QWORD *)(v430 + 24) = v432;
      v433 = *(_QWORD *)(v428 + 32);
      *(_QWORD *)(v428 + 32) = 0;
      *(_QWORD *)(v430 + 32) = v433;
    }
    while (v428 != v429);
    v434 = (int64x2_t)v484;
    v420 = *(char **)&v490[16];
  }
  *(_QWORD *)&v484 = v430;
  *((_QWORD *)&v484 + 1) = v420;
  *(int64x2_t *)&v490[8] = v434;
  v435 = v485[0];
  v485[0] = *(_QWORD *)&v490[24];
  *(_QWORD *)&v490[24] = v435;
  *(_QWORD *)v490 = v434.i64[0];
  std::__split_buffer<_UICollectionViewRTreeElement>::~__split_buffer((uint64_t)v490);
LABEL_327:
  *((_QWORD *)&v484 + 1) = v420;
  v483 = 0uLL;
  v436 = (std::__shared_weak_count *)v408[2].i64[0];
  if (!v436)
  {
    v437 = 0;
    goto LABEL_331;
  }
  v437 = std::__shared_weak_count::lock(v436);
  *((_QWORD *)&v483 + 1) = v437;
  if (!v437)
  {
LABEL_331:
    v438 = 0;
    goto LABEL_332;
  }
  v438 = v408[1].i64[1];
  *(_QWORD *)&v483 = v438;
LABEL_332:
  _ZNSt3__115allocate_sharedB8nn180100I21_UIRTreeContainerNodeI29_UICollectionViewRTreeElementENS_9allocatorIS3_EEJNS_10shared_ptrIS3_EENS_6vectorIS2_NS4_IS2_EEEENS8_IDv4_dNS4_ISB_EEEEEvEENS6_IT_EERKT0_DpOT1_((uint64_t *)v490, v438, v437, &v484, (__int128 *)v486.i8);
  if (v437)
  {
    v439 = (unint64_t *)&v437->__shared_owners_;
    do
      v440 = __ldaxr(v439);
    while (__stlxr(v440 - 1, v439));
    if (!v440)
    {
      ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
      std::__shared_weak_count::__release_weak(v437);
    }
  }
  v481 = 0;
  v482 = 0;
  v441 = (std::__shared_weak_count *)v408[2].i64[0];
  if (v441 && (v482 = std::__shared_weak_count::lock(v441)) != 0)
  {
    v442 = v408[1].i64[1];
    v481 = v442;
  }
  else
  {
    v442 = 0;
  }
  v480 = *(_OWORD *)v490;
  if (*(_QWORD *)&v490[8])
  {
    v443 = (unint64_t *)(*(_QWORD *)&v490[8] + 8);
    do
      v444 = __ldxr(v443);
    while (__stxr(v444 + 1, v443));
  }
  v445 = (std::__shared_weak_count *)a4[1];
  v478 = *a4;
  v479 = v445;
  if (v445)
  {
    v446 = (unint64_t *)&v445->__shared_owners_;
    do
      v447 = __ldxr(v446);
    while (__stxr(v447 + 1, v446));
  }
  _UIRTreeContainerNode<_UICollectionViewRTreeElement>::addContainer(&v483, v442, (uint64_t *)&v480, &v478);
  std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::operator=[abi:nn180100]((uint64_t)a4, &v483);
  v448 = (std::__shared_weak_count *)*((_QWORD *)&v483 + 1);
  if (*((_QWORD *)&v483 + 1))
  {
    v449 = (unint64_t *)(*((_QWORD *)&v483 + 1) + 8);
    do
      v450 = __ldaxr(v449);
    while (__stlxr(v450 - 1, v449));
    if (!v450)
    {
      ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
      std::__shared_weak_count::__release_weak(v448);
    }
  }
  v451 = v479;
  if (v479)
  {
    v452 = (unint64_t *)&v479->__shared_owners_;
    do
      v453 = __ldaxr(v452);
    while (__stlxr(v453 - 1, v452));
    if (!v453)
    {
      ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
      std::__shared_weak_count::__release_weak(v451);
    }
  }
  v454 = (std::__shared_weak_count *)*((_QWORD *)&v480 + 1);
  if (*((_QWORD *)&v480 + 1))
  {
    v455 = (unint64_t *)(*((_QWORD *)&v480 + 1) + 8);
    do
      v456 = __ldaxr(v455);
    while (__stlxr(v456 - 1, v455));
    if (!v456)
    {
      ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
      std::__shared_weak_count::__release_weak(v454);
    }
  }
  v457 = v482;
  if (v482)
  {
    v458 = (unint64_t *)&v482->__shared_owners_;
    do
      v459 = __ldaxr(v458);
    while (__stlxr(v459 - 1, v458));
    if (!v459)
    {
      ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
      std::__shared_weak_count::__release_weak(v457);
    }
  }
  _UIRTreeContainerNode<_UICollectionViewRTreeElement>::invalidateBoundingFrameAndNotifyParents(v408);
  v460 = *(std::__shared_weak_count **)&v490[8];
  if (*(_QWORD *)&v490[8])
  {
    v461 = (unint64_t *)(*(_QWORD *)&v490[8] + 8);
    do
      v462 = __ldaxr(v461);
    while (__stlxr(v462 - 1, v461));
    if (!v462)
    {
      ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
      std::__shared_weak_count::__release_weak(v460);
    }
  }
  *(_QWORD *)v490 = &v484;
  std::vector<_UICollectionViewRTreeElement>::__destroy_vector::operator()[abi:nn180100]((void ***)v490);
  if (v486.i64[0])
    operator delete((void *)v486.i64[0]);
  v66 = (void *)v488;
  if ((_QWORD)v488)
  {
    *((_QWORD *)&v488 + 1) = v488;
LABEL_64:
    operator delete(v66);
  }
LABEL_65:
  result = *(__n128 *)a4;
  *a1 = *(_OWORD *)a4;
  *a4 = 0;
  a4[1] = 0;
  return result;
}

void sub_1850C8268(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::~shared_ptr[abi:nn180100](v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t _UIRTreeContainerNode<unsigned long>::boundingFrame(uint64_t result, uint64_t a2)
{
  _OWORD *v2;
  float64x2_t v3;
  float64x2_t v4;
  int64x2_t v5;
  float64x2_t *v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16[2];

  v2 = (_OWORD *)result;
  v3 = *(float64x2_t *)(a2 + 112);
  v4 = *(float64x2_t *)(a2 + 128);
  v5 = (int64x2_t)vornq_s8(vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f64(v3), (int8x16_t)vcgezq_f64(v3))), vorrq_s8((int8x16_t)vcltzq_f64(v4), (int8x16_t)vcgezq_f64(v4)));
  if ((vorrq_s8((int8x16_t)v5, (int8x16_t)vdupq_laneq_s64(v5, 1)).u64[0] & 0x8000000000000000) != 0)
  {
    v7 = *(float64x2_t **)(a2 + 88);
    v3 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v4 = 0uLL;
    while (v7 != *(float64x2_t **)(a2 + 96))
    {
      v9 = *v7;
      v8 = v7[1];
      v7 += 2;
      v10 = vaddq_f64(v3, v4);
      v3 = vminnmq_f64(v3, v9);
      v4 = vsubq_f64(vmaxnmq_f64(v10, vaddq_f64(v9, v8)), v3);
    }
    v11 = *(uint64_t **)(a2 + 40);
    v12 = *(uint64_t **)(a2 + 48);
    while (v11 != v12)
    {
      v14 = v4;
      v15 = v3;
      v13 = *v11;
      v11 += 2;
      result = _UIRTreeContainerNode<unsigned long>::boundingFrame(v16, v13);
      v3 = vminnmq_f64(v15, v16[0]);
      v4 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v15, v14), vaddq_f64(v16[0], v16[1])), v3);
    }
    *(float64x2_t *)(a2 + 112) = v3;
    *(float64x2_t *)(a2 + 128) = v4;
  }
  *v2 = v3;
  v2[1] = v4;
  return result;
}

uint64_t _UIRTreeContainerNode<unsigned long>::isRoot(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _BOOL8 v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    return 1;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 24) == 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

BOOL _UIRTreeContainerNode<_UICollectionViewRTreeElement>::isFull(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;

  v2 = a1[5];
  v1 = a1[6];
  if (v1 == v2)
  {
    if (!_UIRTreeContainerNode<unsigned long>::isRoot((uint64_t)a1))
    {
      v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[9] - a1[8]) >> 3);
      return v4 > 0xFF;
    }
    v2 = a1[5];
    v1 = a1[6];
  }
  v4 = (v1 - v2) >> 4;
  return v4 > 0xFF;
}

void sub_1850C8950(_Unwind_Exception *a1)
{
  id *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _UIRTreeContainerNode<_UICollectionViewRTreeElement>::invalidateBoundingFrameAndNotifyParents(int64x2_t *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  a1[8].i64[0] = 0;
  a1[8].i64[1] = 0;
  a1[7] = vdupq_n_s64(0x7FF8000000000000uLL);
  v2 = (std::__shared_weak_count *)a1[2].i64[0];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v5 = v3;
      v6 = a1[1].i64[1];
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v9 = (std::__shared_weak_count *)a1[2].i64[0];
      if (v9)
      {
        v9 = std::__shared_weak_count::lock(v9);
        v10 = v9;
        if (v9)
          v9 = (std::__shared_weak_count *)a1[1].i64[1];
      }
      else
      {
        v10 = 0;
      }
      _UIRTreeContainerNode<_UICollectionViewRTreeElement>::invalidateBoundingFrameAndNotifyParents(v9, v4);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
}

void sub_1850C8A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1850C8B2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _UICollectionViewRTreeElement::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;

  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v8 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;

  return a1;
}

uint64_t std::__shared_ptr_emplace<_UIRTreeContainerNode<_UICollectionViewRTreeElement>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__split_buffer<_UICollectionViewRTreeElement>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::vector<_UICollectionViewRTreeElement>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 40);
    v2 -= 40;
    *(_QWORD *)(v4 - 40) = v5;
    v4 -= 40;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v4 + 24) = v6;
    v7 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v4 + 32) = v7;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__shared_ptr_emplace<_UIRTreeContainerNode<unsigned long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

void _UIRTreeContainerNode<_UICollectionViewRTreeElement>::addContainer(_OWORD *a1, uint64_t a2, uint64_t *a3, int64x2_t **a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  char *v48;
  __int128 v49;
  int64x2_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  int64x2_t *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  __int128 v92;
  int64x2_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  _OWORD *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  char *v111;
  __int128 v112;
  int64x2_t v113;
  uint64_t v114;
  int64x2_t *v115;
  unint64_t *v116;
  uint64_t v117;
  int64x2_t *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  void *v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136[2];
  float64x2_t v137[2];
  _OWORD v138[2];
  __int128 v139;
  int64x2_t *v140;
  std::__shared_weak_count *v141;
  int64x2_t v142;
  _QWORD v143[3];
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  void ***v147;
  int64x2_t *v148;
  int64x2_t v149;
  uint64_t v150;
  _QWORD *v151;

  if (!*a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "shared_ptr<_UIRTreeContainerNode<T>> _UIRTreeContainerNode<_UICollectionViewRTreeElement>::addContainer(shared_ptr<_UIRTreeContainerNode<T>>, shared_ptr<_UIRTreeContainerNode<T>>) [T = _UICollectionViewRTreeElement]");
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v132, "handleFailureInFunction:file:lineNumber:description:", v133, CFSTR("_UIRTree.mm"), 382, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("container"));

  }
  if (_UIRTreeContainerNode<_UICollectionViewRTreeElement>::isFull((_QWORD *)a2))
  {
    v8 = *(std::__shared_weak_count **)(a2 + 32);
    if (v8)
    {
      v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)(a2 + 24);
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (v13)
        {
          if (v11)
            goto LABEL_10;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v10);
          if (v11)
          {
LABEL_10:
            v142 = 0uLL;
            v14 = *(std::__shared_weak_count **)(a2 + 32);
            if (v14)
            {
              v142.i64[1] = (uint64_t)std::__shared_weak_count::lock(v14);
              if (v142.i64[1])
                v142.i64[0] = *(_QWORD *)(a2 + 24);
            }
            v66 = (std::__shared_weak_count *)a3[1];
            v145 = *a3;
            v146 = v66;
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
            }
            v69 = (std::__shared_weak_count *)a4[1];
            v143[2] = *a4;
            v144 = v69;
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
            }
            _UIRTreeContainerNode<_UICollectionViewRTreeElement>::addContainer(&v148);
            std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::operator=[abi:nn180100]((uint64_t)a4, (__int128 *)&v148);
            v72 = (std::__shared_weak_count *)v149.i64[0];
            if (v149.i64[0])
            {
              v73 = (unint64_t *)(v149.i64[0] + 8);
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            if (v144)
            {
              v75 = &v144->__shared_owners_;
              do
                v76 = __ldaxr((unint64_t *)v75);
              while (__stlxr(v76 - 1, (unint64_t *)v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
            if (v146)
            {
              v77 = &v146->__shared_owners_;
              do
                v78 = __ldaxr((unint64_t *)v77);
              while (__stlxr(v78 - 1, (unint64_t *)v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                std::__shared_weak_count::__release_weak(v146);
              }
            }
            if (!v142.i64[1])
              goto LABEL_135;
            v79 = (unint64_t *)(v142.i64[1] + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (v80)
              goto LABEL_135;
            (*(void (**)(uint64_t))(*(_QWORD *)v142.i64[1] + 16))(v142.i64[1]);
            v81 = (std::__shared_weak_count *)v142.i64[1];
LABEL_142:
            std::__shared_weak_count::__release_weak(v81);
LABEL_135:
            *a1 = *(_OWORD *)a4;
            *a4 = 0;
            a4[1] = 0;
            return;
          }
        }
      }
    }
    v142 = 0uLL;
    v143[0] = 0;
    v83 = *(int64x2_t **)(a2 + 8);
    v82 = *(std::__shared_weak_count **)(a2 + 16);
    v140 = v83;
    if (v82)
    {
      v84 = std::__shared_weak_count::lock(v82);
      v141 = v84;
      if (v84)
      {
        v85 = v84;
        v151 = v143;
        v86 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(1uLL);
        v88 = v86;
        *v86 = v83;
        v86[1] = v85;
        v89 = (_QWORD *)v142.i64[1];
        v90 = (_QWORD *)v142.i64[0];
        if (v142.i64[1] == v142.i64[0])
        {
          v93 = vdupq_n_s64(v142.u64[1]);
          v91 = v86;
        }
        else
        {
          v91 = v86;
          do
          {
            v92 = *((_OWORD *)v89 - 1);
            v89 -= 2;
            *((_OWORD *)v91 - 1) = v92;
            v91 -= 2;
            *v89 = 0;
            v89[1] = 0;
          }
          while (v89 != v90);
          v93 = v142;
        }
        v94 = v86 + 2;
        v142.i64[0] = (uint64_t)v91;
        v149 = v93;
        v95 = v143[0];
        v143[0] = &v86[2 * v87];
        v150 = v95;
        v148 = (int64x2_t *)v93.i64[0];
        std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)&v148);
        v142.i64[1] = (uint64_t)(v88 + 2);
        if ((unint64_t)v94 >= v143[0])
        {
          v100 = ((uint64_t)v94 - v142.i64[0]) >> 4;
          if ((unint64_t)(v100 + 1) >> 60)
            abort();
          v101 = (v143[0] - v142.i64[0]) >> 3;
          if (v101 <= v100 + 1)
            v101 = v100 + 1;
          if (v143[0] - v142.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
            v102 = 0xFFFFFFFFFFFFFFFLL;
          else
            v102 = v101;
          v151 = v143;
          v103 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(v102);
          v105 = &v103[16 * v100];
          v106 = *(_OWORD *)a3;
          *(_OWORD *)v105 = *(_OWORD *)a3;
          if (*((_QWORD *)&v106 + 1))
          {
            v107 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
            do
              v108 = __ldxr(v107);
            while (__stxr(v108 + 1, v107));
          }
          v109 = (_QWORD *)v142.i64[1];
          v110 = (_QWORD *)v142.i64[0];
          if (v142.i64[1] == v142.i64[0])
          {
            v113 = vdupq_n_s64(v142.u64[1]);
            v111 = &v103[16 * v100];
          }
          else
          {
            v111 = &v103[16 * v100];
            do
            {
              v112 = *((_OWORD *)v109 - 1);
              v109 -= 2;
              *((_OWORD *)v111 - 1) = v112;
              v111 -= 16;
              *v109 = 0;
              v109[1] = 0;
            }
            while (v109 != v110);
            v113 = v142;
          }
          v99 = v105 + 16;
          v142.i64[0] = (uint64_t)v111;
          v142.i64[1] = (uint64_t)(v105 + 16);
          v149 = v113;
          v114 = v143[0];
          v143[0] = &v103[16 * v104];
          v150 = v114;
          v148 = (int64x2_t *)v113.i64[0];
          std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)&v148);
        }
        else
        {
          v88[2] = *a3;
          v96 = a3[1];
          v88[3] = v96;
          if (v96)
          {
            v97 = (unint64_t *)(v96 + 8);
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }
          v99 = v88 + 4;
        }
        v115 = (int64x2_t *)operator new(0xB0uLL);
        v115->i64[1] = 0;
        v116 = &v115->u64[1];
        v115[1].i64[0] = 0;
        v117 = v143[0];
        v115[4].i64[1] = v142.i64[0];
        v115->i64[0] = (uint64_t)&off_1E168B638;
        v115[2].i64[0] = (uint64_t)&off_1E168B5F8;
        v118 = v115 + 2;
        v143[0] = 0;
        v142 = 0uLL;
        v115[2].i64[1] = 0;
        v115[3].i64[1] = 0;
        v115[4].i64[0] = 0;
        v115[3].i64[0] = 0;
        v115[5].i64[0] = (uint64_t)v99;
        v115[5].i64[1] = v117;
        v149 = 0uLL;
        v148 = 0;
        v115[6] = 0u;
        v115[8] = 0u;
        v115[7] = 0u;
        _UIRTreeContainerNode<_UICollectionViewRTreeElement>::commonInit(v115 + 2);
        v147 = (void ***)&v148;
        std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v147);
        v140 = v115 + 2;
        v141 = (std::__shared_weak_count *)v115;
        std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::__enable_weak_this[abi:nn180100]<_UIRTreeContainerNode<unsigned long>,_UIRTreeContainerNode<unsigned long>,void>((uint64_t)&v140, &v115[2].i64[1], (uint64_t)v115[2].i64);
        v119 = (unint64_t *)&v115[1];
        do
          v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
        do
          v121 = __ldxr(v119);
        while (__stxr(v121 + 1, v119));
        v122 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)(a2 + 24) = v118;
        *(_QWORD *)(a2 + 32) = v115;
        if (v122)
          std::__shared_weak_count::__release_weak(v122);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v115);
        do
          v123 = __ldxr(v116);
        while (__stxr(v123 + 1, v116));
        v124 = (std::__shared_weak_count *)a4[1];
        *a4 = v118;
        a4[1] = v115;
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        _UIRTreeContainerNode<_UICollectionViewRTreeElement>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)a2);
        v127 = v141;
        if (v141)
        {
          v128 = (unint64_t *)&v141->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        v148 = &v142;
        std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v148);
        goto LABEL_135;
      }
    }
  }
  else
  {
    v16 = *a3;
    v15 = a3[1];
    *(_QWORD *)&v139 = *a3;
    *((_QWORD *)&v139 + 1) = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
    {
      v20 = *(_QWORD *)(a2 + 8);
      v21 = std::__shared_weak_count::lock(v19);
      if (v21)
      {
        v22 = v21;
        p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
        do
          v24 = __ldxr(p_shared_weak_owners);
        while (__stxr(v24 + 1, p_shared_weak_owners));
        do
          v25 = __ldxr(p_shared_weak_owners);
        while (__stxr(v25 + 1, p_shared_weak_owners));
        v26 = *(std::__shared_weak_count **)(v16 + 32);
        *(_QWORD *)(v16 + 24) = v20;
        *(_QWORD *)(v16 + 32) = v22;
        if (v26)
          std::__shared_weak_count::__release_weak(v26);
        std::__shared_weak_count::__release_weak(v22);
        v27 = (unint64_t *)&v22->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v29 = *(_QWORD *)(a2 + 56);
        v30 = *(_QWORD **)(a2 + 48);
        if ((unint64_t)v30 >= v29)
        {
          v35 = *(_QWORD *)(a2 + 40);
          v36 = ((uint64_t)v30 - v35) >> 4;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60)
            abort();
          v38 = v29 - v35;
          if (v38 >> 3 > v37)
            v37 = v38 >> 3;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
            v39 = 0xFFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          v151 = (_QWORD *)(a2 + 56);
          v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(v39);
          v42 = &v40[16 * v36];
          v43 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          *(_OWORD *)v42 = v139;
          v31 = v43;
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v47 = *(_QWORD **)(a2 + 40);
          v46 = *(_QWORD **)(a2 + 48);
          if (v46 == v47)
          {
            v50 = vdupq_n_s64((unint64_t)v46);
            v48 = v42;
          }
          else
          {
            v48 = v42;
            do
            {
              v49 = *((_OWORD *)v46 - 1);
              v46 -= 2;
              *((_OWORD *)v48 - 1) = v49;
              v48 -= 16;
              *v46 = 0;
              v46[1] = 0;
            }
            while (v46 != v47);
            v50 = *(int64x2_t *)(a2 + 40);
          }
          v34 = v42 + 16;
          *(_QWORD *)(a2 + 40) = v48;
          *(_QWORD *)(a2 + 48) = v42 + 16;
          v149 = v50;
          v51 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a2 + 56) = &v40[16 * v41];
          v150 = v51;
          v148 = (int64x2_t *)v50.i64[0];
          std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)&v148);
        }
        else
        {
          *v30 = v139;
          v31 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v30[1] = *((_QWORD *)&v139 + 1);
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          v34 = v30 + 2;
        }
        *(_QWORD *)(a2 + 48) = v34;
        if (v31)
        {
          v52 = (unint64_t *)&v31->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v138, a2);
        v134 = (float64x2_t)v138[0];
        v135 = (float64x2_t)v138[1];
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v137, *a3);
        v54 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(vaddq_f64(v134, v135), vaddq_f64(v137[0], v137[1])), (int8x16_t)vcgeq_f64(v137[0], v134));
        if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v54, 1), (int8x16_t)v54).u64[0] & 0x8000000000000000) != 0)
          goto LABEL_135;
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v136, *a3);
        v55 = *(float64x2_t *)(a2 + 112);
        v56 = vminnmq_f64(v55, v136[0]);
        v57 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v55, *(float64x2_t *)(a2 + 128)), vaddq_f64(v136[0], v136[1])), v56);
        *(float64x2_t *)(a2 + 112) = v56;
        *(float64x2_t *)(a2 + 128) = v57;
        v58 = *(std::__shared_weak_count **)(a2 + 32);
        if (!v58)
          goto LABEL_135;
        v59 = std::__shared_weak_count::lock(v58);
        if (!v59)
          goto LABEL_135;
        v60 = v59;
        v61 = *(_QWORD *)(a2 + 24);
        v62 = (unint64_t *)&v59->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v60);
        }
        if (!v61)
          goto LABEL_135;
        v148 = 0;
        v149.i64[0] = 0;
        v64 = *(std::__shared_weak_count **)(a2 + 32);
        if (v64)
        {
          v64 = std::__shared_weak_count::lock(v64);
          v65 = v64;
          v149.i64[0] = (uint64_t)v64;
          if (v64)
          {
            v64 = *(std::__shared_weak_count **)(a2 + 24);
            v148 = (int64x2_t *)v64;
          }
        }
        else
        {
          v65 = 0;
        }
        _UIRTreeContainerNode<_UICollectionViewRTreeElement>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)v64);
        if (!v65)
          goto LABEL_135;
        v130 = (unint64_t *)&v65->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (v131)
          goto LABEL_135;
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        v81 = v65;
        goto LABEL_142;
      }
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
  __break(1u);
}

void sub_1850C988C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::~shared_ptr[abi:nn180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<_UIOrderedRangeIndexerImpl>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__16vectorIDv4_dNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      abort();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv4_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFE0];
    v7 = &v4[32 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_OWORD *)v8 - 2);
        v12 = *((_OWORD *)v8 - 1);
        v8 -= 32;
        *((_OWORD *)v10 - 2) = v11;
        *((_OWORD *)v10 - 1) = v12;
        v10 -= 32;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void sub_1850CAF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _getNSValueBytes(void *a1, void *a2, size_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  NSObject *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSUInteger sizep;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  sizep = 0;
  NSGetSizeAndAlignment((const char *)objc_msgSend(v7, "objCType"), &sizep, 0);
  v8 = dyld_program_sdk_at_least();
  if ((v8 & 1) != 0)
    goto LABEL_14;
  if (sizep > a3)
  {
    MEMORY[0x1E0C80A78](v8);
    v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    objc_msgSend(v7, "getValue:", v10);
    memcpy(a2, v10, a3);
    v11 = qword_1ECD7E228;
    if (!qword_1ECD7E228)
    {
      v11 = __UILogCategoryGetNode("UIKit", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v11, (unint64_t *)&qword_1ECD7E228);
    }
    v12 = *(NSObject **)(v11 + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v20 = a4;
      v21 = 2112;
      v22 = (uint64_t)v7;
      _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "Getting %s from NSValue containing %@ is deprecated. In future versions this will throw an exception.", buf, 0x16u);
    }
    goto LABEL_15;
  }
  if (sizep >= a3)
  {
LABEL_14:
    objc_msgSend(v7, "getValue:size:", a2, a3);
    goto LABEL_15;
  }
  v13 = qword_1ECD7E230;
  if (!qword_1ECD7E230)
  {
    v13 = __UILogCategoryGetNode("UIKit", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v13, (unint64_t *)&qword_1ECD7E230);
  }
  v14 = *(NSObject **)(v13 + 8);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v15 = v14;
    v16 = objc_msgSend(v7, "objCType");
    *(_DWORD *)buf = 136315650;
    v20 = a4;
    v21 = 2080;
    v22 = v16;
    v23 = 2112;
    v24 = v7;
    _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_ERROR, "Attempt to obtain %s from NSValue containing %s: %@. In future versions this will throw an exception. Returning empty values.", buf, 0x20u);

  }
  bzero(a2, a3);
LABEL_15:

}

uint64_t _CASupportsAnimationForKey(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = qword_1EDDCA6C8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1EDDCA6C8, &__block_literal_global_831_0);
  v3 = objc_msgSend((id)qword_1EDDCA6C0, "containsObject:", v2);

  return v3;
}

void _addContinuousCornerToPath(CGPath *a1, uint64_t a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9)
{
  char v10;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  __double2 v48;
  double v49;
  double v50;
  CGPath *v51;
  CGAffineTransform *p_m;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGPath *v57;
  CGAffineTransform *v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  CGPath *v63;
  CGAffineTransform *v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  CGFloat v83;
  CGFloat v84;
  double v85;
  double v86;
  double endAngle;
  double endAnglea;
  CGAffineTransform m;

  v10 = a3;
  if (a8 >= a9)
    v14 = a9;
  else
    v14 = a8;
  v15 = 0.980263;
  if (a5)
  {
    v15 = 1.0;
    v16 = v14;
  }
  else
  {
    v16 = v14 * 0.95;
  }
  endAngle = v15;
  v17 = 0.0;
  if ((unint64_t)(a2 - 1) <= 3)
    v17 = dbl_18667D170[a2 - 1];
  v18 = v16 * (1.0 - v15);
  if (a3 == 2)
  {
    v19 = -v18;
    v85 = v17;
    v86 = 70.0;
    v20 = *MEMORY[0x1E0C9D538];
  }
  else if (a3 == 1)
  {
    v85 = v17 + 20.0;
    v20 = -v18;
    v86 = 70.0;
    v19 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  }
  else if (a3)
  {
    v85 = v17 + 20.0;
    v86 = 50.0;
    v19 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v20 = *MEMORY[0x1E0C9D538];
    v16 = v16 / 1.528665;
  }
  else
  {
    v19 = -v18;
    v85 = v17;
    v86 = 90.0;
    v20 = -v18;
  }
  v21 = _interiorPointForCorner(a2, v20, v19, *MEMORY[0x1E0C9D538]);
  v83 = v22;
  v84 = v21;
  v23 = v16 * 0.33 * 0.666666667;
  v24 = v23 * 1.05304313 + (v16 / 1.05304313 + v23 * 0.33 / 1.05304313) * 0.67;
  v25 = v23 * 1.05304313 + v24;
  v26 = v23 * 1.05304313 + v23 * 1.05304313 + v25;
  v81 = _interiorPointForCorner(a2, v25, 0.0, a6);
  v82 = v27;
  v79 = _interiorPointForCorner(a2, v24, 0.0, a6);
  v80 = v28;
  v77 = _interiorPointForCorner(a2, 0.0, v24, a6);
  v78 = v29;
  v75 = _interiorPointForCorner(a2, 0.0, v25, a6);
  v76 = v30;
  v31 = _interiorPointForCorner(a2, 0.0, v26, a6);
  v73 = v32;
  v74 = v31;
  v33 = _interiorPointForCorner(a2, v26, 0.0, a6);
  v71 = v34;
  v72 = v33;
  v35 = _interiorPointForCorner(a2, v16, v16, a6);
  v37 = v36;
  v38 = _interiorPointForCorner(a2, v14, 0.0, a6);
  v40 = v39;
  v41 = _interiorPointForCorner(a2, 0.0, v14, a6);
  v43 = v42;
  memset(&m, 0, sizeof(m));
  CGAffineTransformMakeTranslation(&m, v84, v83);
  v44 = endAngle * v16;
  if (a4)
    v45 = v86;
  else
    v45 = 0.0;
  v46 = (v85 + v45) * 0.0174532925;
  if (a4)
    v47 = 0.0;
  else
    v47 = v86;
  endAnglea = (v85 + v47) * 0.0174532925;
  v48 = __sincos_stret(v46);
  v49 = v44 * v48.__cosval + v35;
  v50 = v44 * v48.__sinval + v37;
  if (a4)
  {
    if ((v10 & 1) != 0)
    {
      p_m = &m;
      v51 = a1;
      v53 = v75;
      v54 = v76;
      v55 = v77;
      v56 = v78;
    }
    else
    {
      v51 = a1;
      p_m = 0;
      v53 = v41;
      v54 = v43;
      v55 = v41;
      v56 = v43;
      v49 = v41;
      v50 = v43;
    }
    CGPathAddCurveToPoint(v51, p_m, v53, v54, v55, v56, v49, v50);
    CGPathAddArc(a1, &m, v35, v37, v44, v46, endAnglea, 1);
    if ((v10 & 2) != 0)
    {
      v64 = &m;
      v63 = a1;
      v65 = v79;
      v66 = v80;
      v67 = v81;
      v68 = v82;
      v70 = v71;
      v69 = v72;
    }
    else
    {
      v63 = a1;
      v64 = 0;
      v65 = v38;
      v66 = v40;
      v67 = v38;
      v68 = v40;
      v69 = v38;
      v70 = v40;
    }
  }
  else
  {
    if ((v10 & 1) != 0)
    {
      v58 = &m;
      v57 = a1;
      v59 = v81;
      v60 = v82;
      v61 = v79;
      v62 = v80;
    }
    else
    {
      v57 = a1;
      v58 = 0;
      v59 = v38;
      v60 = v40;
      v61 = v38;
      v62 = v40;
      v49 = v38;
      v50 = v40;
    }
    CGPathAddCurveToPoint(v57, v58, v59, v60, v61, v62, v49, v50);
    CGPathAddArc(a1, &m, v35, v37, v44, v46, endAnglea, 0);
    if ((v10 & 2) != 0)
    {
      v64 = &m;
      v63 = a1;
      v65 = v77;
      v66 = v78;
      v67 = v75;
      v68 = v76;
      v70 = v73;
      v69 = v74;
    }
    else
    {
      v63 = a1;
      v64 = 0;
      v65 = v41;
      v66 = v43;
      v67 = v41;
      v68 = v43;
      v69 = v41;
      v70 = v43;
    }
  }
  CGPathAddCurveToPoint(v63, v64, v65, v66, v67, v68, v69, v70);
}

double _interiorPointForCorner(uint64_t a1, double result, double a3, double a4)
{
  double v4;

  switch(a1)
  {
    case 1:
      v4 = a3 + a4;
      goto LABEL_6;
    case 2:
      result = a4 - result;
      break;
    case 4:
      result = result + a4;
      break;
    case 8:
      v4 = a4 - a3;
LABEL_6:
      result = v4;
      break;
    default:
      return result;
  }
  return result;
}

void UIBezierPathCommonInit(void *a1, const void *a2)
{
  _QWORD *v3;

  v3 = a1;
  v3[1] = CFRetain(a2);
  v3[6] = 0x3FE3333333333333;
  *((_OWORD *)v3 + 2) = xmmword_18667D130;

}

id _UIGetAnimationCurveSpline(unint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v6;
  void *v8;
  _QWORD *v9;

  v6 = 0;
  if (a1 != 7 && a1 > 5)
    a1 = 0;
  switch(a1)
  {
    case 0uLL:
      v8 = (void *)MEMORY[0x1E0CD27D0];
      v9 = (_QWORD *)MEMORY[0x1E0CD3048];
      goto LABEL_13;
    case 1uLL:
      v8 = (void *)MEMORY[0x1E0CD27D0];
      v9 = (_QWORD *)MEMORY[0x1E0CD3040];
      goto LABEL_13;
    case 2uLL:
    case 7uLL:
      v8 = (void *)MEMORY[0x1E0CD27D0];
      v9 = (_QWORD *)MEMORY[0x1E0CD3050];
      goto LABEL_13;
    case 3uLL:
      v8 = (void *)MEMORY[0x1E0CD27D0];
      v9 = (_QWORD *)MEMORY[0x1E0CD3058];
      goto LABEL_13;
    case 4uLL:
      LODWORD(a2) = 1059648963;
      LODWORD(a4) = 1051260355;
      LODWORD(a3) = 0;
      LODWORD(a5) = 1.0;
      objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithControlPoints::::", a2, a3, a4, a5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      return v6;
    case 5uLL:
      v8 = (void *)MEMORY[0x1E0CD27D0];
      v9 = (_QWORD *)MEMORY[0x1E0CD3038];
LABEL_13:
      objc_msgSend(v8, "functionWithName:", *v9);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      return v6;
  }
  return v6;
}

double _largeTitleRestingHeight()
{
  if (qword_1ECD78888 != -1)
    dispatch_once(&qword_1ECD78888, &__block_literal_global_63);
  return *(double *)&_MergedGlobals_8;
}

id _UINavigationBarLargeTitleViewLabelForMeasuring(void *a1, int a2, void *a3)
{
  void *v3;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;

  v3 = (void *)_UINavigationBarLargeTitleViewLabelForMeasuring_label;
  if (!_UINavigationBarLargeTitleViewLabelForMeasuring_label)
  {
    v6 = a1;
    v7 = (void *)_UISetCurrentFallbackEnvironment(a3);
    _UINavigationBarLargeTitleViewNewLabel();
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)_UINavigationBarLargeTitleViewLabelForMeasuring_label;
    _UINavigationBarLargeTitleViewLabelForMeasuring_label = v8;

    _UIRestorePreviousFallbackEnvironment(v7);
    v10 = objc_alloc(MEMORY[0x1E0CB3498]);
    _UINSLocalizedStringWithDefaultValue(CFSTR("Back"), CFSTR("Back"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v10, "initWithString:attributes:", v11, v6);

    objc_msgSend((id)_UINavigationBarLargeTitleViewLabelForMeasuring_label, "setAttributedText:", v12);
    -[UILabel _setSupportMultiLineShrinkToFit:](_UINavigationBarLargeTitleViewLabelForMeasuring_label, a2);
    v3 = (void *)_UINavigationBarLargeTitleViewLabelForMeasuring_label;
  }
  return v3;
}

void destroy for UICellAccessory(id *a1)
{
  if ((unint64_t)*a1 >= 0xA)

}

void sub_1850CFFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIBarAppearanceStorageKeyForBarPositionAndMetrics(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2 + 1000 * a1);
}

double _UIViewReadableWidthForView(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect v18;

  v1 = a1;
  v2 = _UIViewHorizontalReadableContentInsetsForView(v1);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  objc_msgSend(v1, "bounds");
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;

  v18.origin.x = v4 + v10;
  v18.origin.y = v2 + v12;
  v18.size.width = v14 - (v4 + v8);
  v18.size.height = v16 - (v2 + v6);
  return fmax(CGRectGetWidth(v18), 0.0);
}

double _UIViewHorizontalReadableContentInsetsForView(void *a1)
{
  unsigned int *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  __int128 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v1 = a1;
  objc_msgSend(v1, "safeAreaInsets");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  *((_QWORD *)&v10 + 1) = v1[30];
  *(_QWORD *)&v10 = *((_QWORD *)v1 + 14);
  objc_msgSend(v1, "_rawLayoutMargins");
  v15 = _UIViewHorizontalLayoutMarginsAdjustedForReadableWidth(v1, (v10 >> 57) & 0xF, v3, v5, v7, v9, v11, v12, v13, v14);

  return v15;
}

double _UIViewHorizontalLayoutMarginsAdjustedForReadableWidth(void *a1, char a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  id *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v34;
  CGRect v35;

  v19 = a1;
  v34 = _UIViewResolvedMargins(v19, a7, a8, a9, a10);
  v20 = UIEdgeInsetsMax(a2 & 0xA, 0.0, 0.0, 0.0, 0.0, a3);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  if (_UIViewSafeAreaWidthExceedsReadableWidth(v19, a3, a4, a5, a6))
  {
    objc_msgSend(v19, "bounds");
    CGRectGetWidth(v35);
    __UIViewReadableWidthForFont(0);
    UIFloorToViewScale(v19);
    v27 = UIEdgeInsetsMax(10, v20, v22, v24, v26, 0.0);
    v31 = UIEdgeInsetsMax(10, v27, v28, v29, v30, v34);
  }
  else
  {
    v31 = UIEdgeInsetsAdd(10, v20, v22, v24, v26, v34);
  }
  v32 = v31;

  return v32;
}

double UIEdgeInsetsMax(char a1, double result, double a3, double a4, double a5, double a6)
{
  double v6;

  v6 = fmax(result, a6);
  if ((a1 & 1) != 0)
    return v6;
  return result;
}

BOOL _UIViewSafeAreaWidthExceedsReadableWidth(void *a1, double a2, double a3, double a4, double a5)
{
  double v7;
  double v8;
  int v9;
  double v10;
  CGRect v12;

  objc_msgSend(a1, "bounds");
  v7 = fmax(CGRectGetWidth(v12) - (a3 + a5), 0.0);
  v8 = __UIViewReadableWidthForFont(0);
  v9 = _UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_ReadableWidthMinimumInsetThreshold, (uint64_t)CFSTR("ReadableWidthMinimumInsetThreshold"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  v10 = *(double *)&qword_1ECD76AC8;
  if (v9)
    v10 = 88.0;
  return v7 - v8 > v10;
}

double __UIViewReadableWidthForFont(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;

  v1 = a1;
  objc_msgSend(off_1E167A828, "layoutMetrics");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "readableWidthForFont:", v1);
  v4 = v3;

  return ceil(v4 * 0.125) * 8.0;
}

BOOL UIAccessibilityIsReduceMotionEnabled(void)
{
  return _AXSReduceMotionEnabled() != 0;
}

id sub_1850D26C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(char *, id);
  id v10;
  void *v11;
  uint64_t v13;

  v5 = sub_186506C4C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(uint64_t (**)(char *, id))(a1 + 32);
  sub_186506C28();
  swift_retain();
  v10 = a3;
  v11 = (void *)v9(v8, v10);

  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

id sub_1850D2794(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1850D279C(a1, a2, *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v2 + 16));
}

id sub_1850D279C(uint64_t a1, void *a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *))
{
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD82C78);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  v10 = v6;
  v7 = a2;
  a3(&v11, a1, &v10);
  swift_release();
  v8 = *(id *)(v11 + 16);
  swift_release();
  return v8;
}

id UIView.registerForTraitChanges<A>(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1852497EC(a1, a2, a3, a4, (uint64_t)&unk_1E16A1FC8, (uint64_t)sub_185174D68, (uint64_t)&block_descriptor_29);
}

uint64_t TaggingAppearanceIntegerSetterIMP(void *a1, const char *a2, uint64_t a3)
{
  IMP v6;
  id AssociatedObject;

  _UIAppearanceTagObjectForSelector(a1, a2, 0);
  PushNextClassForSettingIMP(a1, a2);
  v6 = CurrentOrginalSettingIMP(a1, a2);
  ((void (*)(void *, const char *, uint64_t))v6)(a1, a2, a3);
  AssociatedObject = objc_getAssociatedObject(a1, &unk_1ECD7E182);
  return objc_msgSend((id)objc_msgSend(AssociatedObject, "objectForKey:", NSStringFromSelector(a2)), "removeLastObject");
}

uint64_t TaggingAppearanceObjectSetterIMP(void *a1, const char *a2, uint64_t a3)
{
  IMP v6;
  id AssociatedObject;

  _UIAppearanceTagObjectForSelector(a1, a2, 0);
  PushNextClassForSettingIMP(a1, a2);
  v6 = CurrentOrginalSettingIMP(a1, a2);
  ((void (*)(void *, const char *, uint64_t))v6)(a1, a2, a3);
  AssociatedObject = objc_getAssociatedObject(a1, &unk_1ECD7E182);
  return objc_msgSend((id)objc_msgSend(AssociatedObject, "objectForKey:", NSStringFromSelector(a2)), "removeLastObject");
}

uint64_t PushNextClassForSettingIMP(void *a1, SEL aSelector)
{
  NSString *v4;
  id AssociatedObject;
  id v6;
  objc_class *v7;
  objc_class *v8;
  uint64_t Superclass;
  objc_class *v10;
  NSString *v11;
  const char *v12;
  objc_class *v13;
  objc_class *v14;
  unint64_t v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  uint8_t buf[4];
  NSString *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = NSStringFromSelector(aSelector);
  if (pthread_main_np() != 1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      v19 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412546;
        v21 = v4;
        v22 = 2112;
        v23 = a1;
        _os_log_fault_impl(&dword_185066000, v19, OS_LOG_TYPE_FAULT, "Unsupported use of UIKit view-customization API off the main thread. -%@ sent to %@", buf, 0x16u);
      }
    }
    else
    {
      v16 = qword_1ECD7E1B8;
      if (!qword_1ECD7E1B8)
      {
        v16 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v16, (unint64_t *)&qword_1ECD7E1B8);
      }
      v17 = *(NSObject **)(v16 + 8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v21 = v4;
        v22 = 2112;
        v23 = a1;
        _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, "Unsupported use of UIKit view-customization API off the main thread. -%@ sent to %@", buf, 0x16u);
      }
    }
  }
  AssociatedObject = objc_getAssociatedObject(a1, &unk_1ECD7E182);
  if (!AssociatedObject)
  {
    AssociatedObject = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_setAssociatedObject(a1, &unk_1ECD7E182, AssociatedObject, (void *)1);

  }
  v6 = (id)objc_msgSend(AssociatedObject, "objectForKey:", v4);
  if (!v6)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(AssociatedObject, "setObject:forKey:", v6, v4);

  }
  v7 = (objc_class *)objc_msgSend(v6, "lastObject");
  v8 = v7;
  if (v7)
    Superclass = (uint64_t)class_getSuperclass(v7);
  else
    Superclass = objc_opt_class();
  v10 = (objc_class *)Superclass;
  v11 = NSStringFromSelector(aSelector);
  v12 = UIAppearancePrefixedSelectorForSelectorString(v11);
  v13 = _classWithImplementationOfSelector(v10, v12, 0);
  if (v13)
    v14 = v13;
  else
    v14 = v8;
  if (!v14)
  {
    v18 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void PushNextClassForSettingIMP(id, SEL)"), CFSTR("UIAppearance.m"), 760, CFSTR("Have you sent -%@ to %@ off the main thread? To verify, look for a complaint in the logs: \"Unsupported use of UIKit…\", and fix the problem if you find it. If your use is main-thread only please file a radar on UIKit, and attach this log. exercisedImplementations = %@"), v4, a1, AssociatedObject);
  }
  return objc_msgSend(v6, "addObject:", v14);
}

objc_class *_classWithImplementationOfSelector(Class cls, const char *a2, int a3)
{
  objc_class *Superclass;
  Method *v6;
  Method *v7;
  uint64_t v8;
  unsigned int outCount;

  Superclass = cls;
  if (!cls)
    return Superclass;
  while (a3
       && -[NSString rangeOfString:](NSStringFromClass(Superclass), "rangeOfString:", CFSTR("NSKVONotifying_")) == 0)
  {
LABEL_11:
    Superclass = class_getSuperclass(Superclass);
    if (!Superclass)
      return Superclass;
  }
  outCount = 0;
  v6 = class_copyMethodList(Superclass, &outCount);
  v7 = v6;
  if (!outCount)
  {
    if (v6)
LABEL_10:
      free(v7);
    goto LABEL_11;
  }
  v8 = 0;
  while (method_getName(v7[v8]) != a2)
  {
    if (++v8 >= (unint64_t)outCount)
      goto LABEL_10;
  }
  free(v7);
  return Superclass;
}

IMP CurrentOrginalSettingIMP(void *a1, const char *a2)
{
  id AssociatedObject;
  void *v4;
  objc_class *v5;
  NSString *v6;
  const char *v7;
  void *v9;

  AssociatedObject = objc_getAssociatedObject(a1, &unk_1ECD7E182);
  v4 = (void *)objc_msgSend(AssociatedObject, "objectForKey:", NSStringFromSelector(a2));
  if (!objc_msgSend(v4, "count"))
  {
    v9 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "IMP CurrentOrginalSettingIMP(id, SEL)"), CFSTR("UIAppearance.m"), 773, CFSTR("Exercised class for selector implementation needs to be pushed"));
  }
  v5 = (objc_class *)objc_msgSend(v4, "lastObject");
  v6 = NSStringFromSelector(a2);
  v7 = UIAppearancePrefixedSelectorForSelectorString(v6);
  return class_getMethodImplementation(v5, v7);
}

SEL UIAppearancePrefixedSelectorForSelectorString(void *a1)
{
  void *v1;
  uint64_t v2;

  v1 = a1;
  v2 = (uint64_t)a1;
  if (objc_msgSend(a1, "characterAtIndex:", 0) == 95)
    v2 = objc_msgSend(v1, "substringFromIndex:", 1);
  if (objc_msgSend(v1, "rangeOfString:", CFSTR("_UIAppearance_")))
    v1 = (void *)objc_msgSend(CFSTR("_UIAppearance_"), "stringByAppendingString:", v2);
  return NSSelectorFromString((NSString *)v1);
}

void *_UIAppearanceTagObjectForSelector(void *result, const char *a2, void *a3)
{
  void *v5;
  id AssociatedObject;

  if ((__isObjectTaggingEnabled & 1) == 0)
  {
    v5 = result;
    AssociatedObject = objc_getAssociatedObject(result, &_UIAppearanceCustomizedSelectorsAssociationKey);
    if (!AssociatedObject)
    {
      AssociatedObject = objc_alloc_init(MEMORY[0x1E0C99E20]);
      objc_setAssociatedObject(v5, &_UIAppearanceCustomizedSelectorsAssociationKey, AssociatedObject, (void *)1);

    }
    return (void *)objc_msgSend(AssociatedObject, "addObject:", TagForSelectorWithAxes(a2, a3));
  }
  return result;
}

NSString *TagForSelectorWithAxes(const char *a1, void *a2)
{
  NSString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = NSStringFromSelector(a1);
  if (-[NSString characterAtIndex:](v3, "characterAtIndex:", 0) == 95)
    v3 = -[NSString substringFromIndex:](v3, "substringFromIndex:", 1);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v4 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(a2);
        v3 = -[NSString stringByAppendingFormat:](v3, "stringByAppendingFormat:", CFSTR("%@,"), *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v7++));
      }
      while (v5 != v7);
      v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }
  return v3;
}

void _UIViewSetInteractionTintColor(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  id object;

  object = a1;
  v3 = a2;
  v4 = object;
  v6 = *((_QWORD *)object + 13);
  v7 = *((_DWORD *)object + 30);
  if (v3)
  {
    v8 = 256;
LABEL_5:
    v5 = *((_QWORD *)object + 14);
    *((_QWORD *)object + 13) = v8 | v6 & 0xFFFFFFFFFFFFFEFFLL;
    *((_QWORD *)object + 14) = v5;
    *((_DWORD *)object + 30) = v7;
    objc_setAssociatedObject(v4, &_UIViewInteractionTintColorKey, v3, (void *)1);
    goto LABEL_6;
  }
  if ((v6 & 0x100) != 0)
  {
    v8 = 0;
    v4 = object;
    goto LABEL_5;
  }
LABEL_6:

}

void sub_1850D4158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1850D4A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1850D510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIViewVisitorEntertainAscendingVisitors(uint64_t result, uint64_t a2, void *a3)
{
  void *v3;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = a3;
    v5 = (void **)result;
    while (1)
    {
      MEMORY[0x1E0C80A78](result);
      v9 = (char *)v12 - v8;
      if (v7 <= 0x1FFFFFFFFFFFFFFELL)
        v10 = (char *)v12 - v8;
      else
        v10 = 0;
      if (v7 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000042)
        v10 = (char *)malloc_type_malloc(8 * v6, 0x6F7307A5uLL);
      if (!v10)
        break;
      v11 = _UIViewVisitorEntertainVisitors(v5, (uint64_t)v10, (uint64_t)v3, 0);
      if (objc_msgSend(v3, "_maskView"))
        _UIViewVisitorEntertainVisitors(v5, 0, objc_msgSend(v3, "_maskView"), 1);
      if (v11 != a2)
      {
        memcpy(v5, v10, 8 * v11);
        a2 = v11;
      }
      if (v10 != v9)
        free(v10);
      result = objc_msgSend(v3, "superview");
      if (result)
      {
        v3 = (void *)result;
        if (a2)
          continue;
      }
      return result;
    }
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("failed to alloc memory for array"), 0), "raise");
  }
  return result;
}

void sub_1850D6158(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

BOOL static UIContentSizeCategory.< infix(_:_:)(NSString *a1, NSString *a2)
{
  return UIContentSizeCategoryCompareToCategory(a1, a2) == NSOrderedAscending;
}

BOOL static UIContentSizeCategory.>= infix(_:_:)(NSString *a1, NSString *a2)
{
  return UIContentSizeCategoryCompareToCategory(a1, a2) != NSOrderedAscending;
}

BOOL static UIContentSizeCategory.> infix(_:_:)(NSString *a1, NSString *a2)
{
  return UIContentSizeCategoryCompareToCategory(a1, a2) == NSOrderedDescending;
}

BOOL static UIContentSizeCategory.<= infix(_:_:)(NSString *a1, NSString *a2)
{
  return UIContentSizeCategoryCompareToCategory(a1, a2) != NSOrderedDescending;
}

void _UIInitializeBuiltInTraits()
{
  int v0;
  unint64_t v1;
  char *v2;
  __n128 v3;
  __n128 v4;
  void *v5;
  void *v6;

  os_unfair_lock_lock((os_unfair_lock_t)&_UITraitLock);
  _traitTokensByIdentifier = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 27);
  v0 = dyld_program_sdk_at_least();
  v1 = 0;
  v2 = &byte_1E16DB718;
  do
  {
    objc_msgSend((id)_traitTokensByIdentifier, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v1), *((_QWORD *)v2 - 3));
    if (v0 && (*v2 & 8) != 0)
    {
      _UITraitTokenSetInsert(qword_1ECD7F7D8, v1, v3);
      _UITraitTokenSetInsert(_allTraitTokensAffectingColorAppearance, v1, v4);
    }
    ++v1;
    v2 += 56;
  }
  while (v1 != 27);
  qword_1ECD7F7B0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 258, 0, 27);
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 0, 258, 27);
  qword_1ECD7F7B8 = (uint64_t)v5;
  v6 = (void *)qword_1ECD7F7B0;
  objc_msgSend((id)qword_1ECD7F7B0, "setObject:forKey:", &unk_1E1A99498, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99498);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A994B0, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A994B0);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A994C8, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A994C8);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A994E0, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A994E0);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A994F8, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A994F8);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99510, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99510);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99528, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99528);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99540, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99540);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99558, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99558);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99570, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99570);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99588, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99588);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A995A0, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A995A0);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A995B8, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A995B8);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A995D0, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A995D0);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A995E8, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A995E8);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99600, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99600);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99618, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99618);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99630, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99630);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99648, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99648);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99660, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99660);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99678, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99678);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99690, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99690);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A996A8, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A996A8);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A996C0, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A996C0);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A996D8, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A996D8);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A996F0, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A996F0);
  objc_msgSend(v6, "setObject:forKey:", &unk_1E1A99708, objc_opt_self());
  objc_msgSend(v5, "setObject:forKey:", objc_opt_self(), &unk_1E1A99708);
  os_unfair_lock_unlock((os_unfair_lock_t)&_UITraitLock);
}

void sub_1850D7AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 160), 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

NSComparisonResult UIContentSizeCategoryCompareToCategory(UIContentSizeCategory lhs, UIContentSizeCategory rhs)
{
  NSString *v3;
  NSString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSComparisonResult v8;
  void *v10;
  void *v11;
  __int16 v12;

  v3 = lhs;
  v4 = rhs;
  v12 = 0;
  v5 = _UIContentSizeCategoryFromStringInternal(v3, (_BYTE *)&v12 + 1);
  v6 = _UIContentSizeCategoryFromStringInternal(v4, &v12);
  if (HIBYTE(v12) | v12)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult UIContentSizeCategoryCompareToCategory(__strong UIContentSizeCategory _Nonnull, __strong UIContentSizeCategory _Nonnull)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("UIContentSizeCategory.m"), 194, CFSTR("UIContentSizeCategoryCompareToCategory cannot be used to order arbitrary strings, only UIContentSizeCategory objects (comparing %@ to %@)."), v3, v4);

  }
  if (v5 >= v6)
    v7 = 0;
  else
    v7 = -1;
  if (v5 > v6)
    v8 = NSOrderedDescending;
  else
    v8 = v7;

  return v8;
}

uint64_t _UIContentSizeCategoryFromStringInternal(void *a1, _BYTE *a2)
{
  __CFString *v3;
  __CFString *v4;
  uint64_t v5;
  unint64_t v6;

  v3 = a1;
  v4 = v3;
  v5 = 0;
  if (v3 && v3 != CFSTR("_UICTContentSizeCategoryUnspecified"))
  {
    if (v3 == CFSTR("UICTContentSizeCategoryL"))
    {
      v5 = 4;
    }
    else if (v3 == CFSTR("UICTContentSizeCategoryXS"))
    {
      v5 = 1;
    }
    else if (v3 == CFSTR("UICTContentSizeCategoryS"))
    {
      v5 = 2;
    }
    else if (v3 == CFSTR("UICTContentSizeCategoryM"))
    {
      v5 = 3;
    }
    else if (v3 == CFSTR("UICTContentSizeCategoryXL"))
    {
      v5 = 5;
    }
    else if (v3 == CFSTR("UICTContentSizeCategoryXXL"))
    {
      v5 = 6;
    }
    else if (v3 == CFSTR("UICTContentSizeCategoryXXXL"))
    {
      v5 = 7;
    }
    else if (v3 == CFSTR("UICTContentSizeCategoryAccessibilityM"))
    {
      v5 = 0x10000;
    }
    else
    {
      v5 = 65537;
      if (v3 != CFSTR("UICTContentSizeCategoryAccessibilityL"))
      {
        if (v3 == CFSTR("UICTContentSizeCategoryAccessibilityXL"))
        {
          v5 = 65538;
        }
        else if (v3 == CFSTR("UICTContentSizeCategoryAccessibilityXXL"))
        {
          v5 = 65539;
        }
        else if (v3 == CFSTR("UICTContentSizeCategoryAccessibilityXXXL"))
        {
          v5 = 65540;
        }
        else
        {
          if (_MergedGlobals_1250 != -1)
            dispatch_once(&_MergedGlobals_1250, &__block_literal_global_540);
          v6 = objc_msgSend((id)qword_1ECD81A80, "indexOfObject:", v4);
          if (v6 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v5 = 0;
            if (a2)
              *a2 = 1;
          }
          else if (v6 >= 8)
          {
            v5 = v6 + 65528;
          }
          else
          {
            v5 = v6;
          }
        }
      }
    }
  }

  return v5;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

uint64_t block_destroy_helper_35()
{
  return swift_release();
}

uint64_t block_destroy_helper_36()
{
  return swift_release();
}

uint64_t block_destroy_helper_37()
{
  return swift_release();
}

uint64_t block_destroy_helper_38()
{
  return swift_release();
}

uint64_t block_destroy_helper_39()
{
  return swift_release();
}

uint64_t block_destroy_helper_40()
{
  return swift_release();
}

uint64_t block_destroy_helper_41()
{
  return swift_release();
}

uint64_t block_destroy_helper_42()
{
  return swift_release();
}

uint64_t block_destroy_helper_43()
{
  return swift_release();
}

uint64_t block_destroy_helper_44()
{
  return swift_release();
}

uint64_t block_destroy_helper_45()
{
  return swift_release();
}

uint64_t block_destroy_helper_46()
{
  return swift_release();
}

uint64_t block_destroy_helper_47()
{
  return swift_release();
}

uint64_t block_destroy_helper_48()
{
  return swift_release();
}

uint64_t block_destroy_helper_49()
{
  return swift_release();
}

uint64_t block_destroy_helper_50()
{
  return swift_release();
}

uint64_t block_destroy_helper_51()
{
  return swift_release();
}

uint64_t block_destroy_helper_52()
{
  return swift_release();
}

uint64_t block_destroy_helper_53()
{
  return swift_release();
}

uint64_t block_destroy_helper_54()
{
  return swift_release();
}

uint64_t block_destroy_helper_55()
{
  return swift_release();
}

uint64_t block_destroy_helper_56()
{
  return swift_release();
}

uint64_t block_destroy_helper_57()
{
  return swift_release();
}

uint64_t block_destroy_helper_58()
{
  return swift_release();
}

uint64_t block_destroy_helper_59()
{
  return swift_release();
}

uint64_t block_destroy_helper_60()
{
  return swift_release();
}

uint64_t block_destroy_helper_61()
{
  return swift_release();
}

uint64_t block_destroy_helper_62()
{
  return swift_release();
}

uint64_t block_destroy_helper_63()
{
  return swift_release();
}

uint64_t block_destroy_helper_64()
{
  return swift_release();
}

uint64_t block_destroy_helper_65()
{
  return swift_release();
}

uint64_t block_destroy_helper_66()
{
  return swift_release();
}

uint64_t block_destroy_helper_67()
{
  return swift_release();
}

uint64_t block_destroy_helper_68()
{
  return swift_release();
}

uint64_t block_destroy_helper_69()
{
  return swift_release();
}

uint64_t block_destroy_helper_70()
{
  return swift_release();
}

uint64_t block_destroy_helper_71()
{
  return swift_release();
}

uint64_t block_destroy_helper_72()
{
  return swift_release();
}

uint64_t block_destroy_helper_73()
{
  return swift_release();
}

uint64_t block_destroy_helper_74()
{
  return swift_release();
}

uint64_t block_destroy_helper_75()
{
  return swift_release();
}

uint64_t block_destroy_helper_76()
{
  return swift_release();
}

uint64_t block_destroy_helper_77()
{
  return swift_release();
}

uint64_t block_destroy_helper_78()
{
  return swift_release();
}

id UIBackgroundConfiguration.customView.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_customView);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_51(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_52(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_53(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_55(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_56(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_57(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_59(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_61(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_62(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_63(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_65(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_66(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_67(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_69(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_71(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_72(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_73(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_75(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_76(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_77(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t storeEnumTagSinglePayload for HoverStyleHost(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HoverStyleDriverCoordinator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

id NSDiffableDataSourceSnapshot.numberOfSections.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_numberOfSections);
}

uint64_t storeEnumTagSinglePayload for UICellAccessory.LayoutDimension(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

_BYTE *sub_1850DA244(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t IndexPath.row.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = v0;
  v2 = sub_186506C4C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = sub_186506C34();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v6 == 2)
    return sub_186506C58();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for UIListSeparatorConfiguration.Visibility()
{
  return &type metadata for UIListSeparatorConfiguration.Visibility;
}

void sub_1850DA6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIWindowCompareWindowsUsingLevel(void *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;

  v3 = a2;
  objc_msgSend(a1, "level");
  v5 = v4;
  objc_msgSend(v3, "level");
  v7 = v6;

  if (v7 <= v5)
    v8 = 0;
  else
    v8 = -1;
  if (v7 < v5)
    return 1;
  else
    return v8;
}

void sub_1850DA994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1850DAAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double _UITouchConvertLocationInWindowToView(uint64_t a1, void *a2, double a3, double a4)
{
  double v6;
  double v7;
  void *v8;
  void *v9;
  double v10;

  v6 = a3;
  if (a1)
  {
    if (a2)
    {
      objc_msgSend(a2, "convertPoint:fromView:", a1, a3, a4);
      return v7;
    }
  }
  else
  {
    objc_msgSend(a2, "window");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v8, "convertPoint:fromWindow:", 0, v6, a4);
      objc_msgSend(a2, "convertPoint:fromView:", 0);
      v6 = v10;

    }
    else
    {
      return *MEMORY[0x1E0C9D538];
    }
  }
  return v6;
}

void sub_1850DB810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _UITotalEdgeDimensionsForLayoutAxis(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v6;
  void *v7;

  if (a1 == 1)
    return a3 + a5;
  if (a1 == 2)
    return a2 + a4;
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat _UITotalEdgeDimensionsForLayoutAxis(NSDirectionalEdgeInsets, UIAxis)");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("_UICollectionLayoutHelpers.m"), 478, CFSTR("Unknown axis."));

  return 0.0;
}

uint64_t UIViewInProcessAnimationManagerDispatchAsyncOntoMainBeforeTickExit(uint64_t a1)
{
  return +[UIViewInProcessAnimationManager _dispatchAsyncOntoMainBeforeExit:](UIViewInProcessAnimationManager, "_dispatchAsyncOntoMainBeforeExit:", a1);
}

void sub_1850DD9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1850DDFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t UICellConfigurationState.isSelected.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

double sub_1850E0724(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  unsigned __int8 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  char v40;

  sub_1850E0850(*(void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(void **)(a2 + 32));
  sub_1850F2A38(a1, (uint64_t)&v24);
  v4 = v33;
  v5 = v34;
  v6 = v35;
  v7 = v38;
  v8 = v40;
  v9 = 256;
  if (!v26)
    v9 = 0;
  v10 = v9 | v25;
  v11 = 0x10000;
  if (!v27)
    v11 = 0;
  v12 = 0x1000000;
  if (v28)
    v13 = 0x1000000;
  else
    v13 = 0;
  v14 = v10 | v11 | v13;
  v15 = 0x100000000;
  if (v29)
    v16 = 0x100000000;
  else
    v16 = 0;
  v17 = 0x10000000000;
  if (!v30)
    v17 = 0;
  v18 = v16 | v17;
  v19 = 0x1000000000000;
  if (!v31)
    v19 = 0;
  v20 = v14 | v18 | v19;
  v21 = 0x100000000000000;
  if (!v32)
    v21 = 0;
  v22 = v20 | v21;
  if (!v36)
    v12 = 0;
  if (!v37)
    v15 = 0;
  *(_QWORD *)a2 = v24;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a2 + 16) = v4 | (v5 << 8) | (v6 << 16) | v12 | v15;
  *(_QWORD *)(a2 + 24) = v7;
  result = *(double *)&v39;
  *(_OWORD *)(a2 + 32) = v39;
  *(_BYTE *)(a2 + 48) = v8;
  return result;
}

void sub_1850E0850(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a1)
  {

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1850E0990@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (*a3)(char *, uint64_t, uint64_t, _QWORD)@<X4>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, _QWORD);

  v17 = a4;
  v18 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = sub_186507AA4();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - v12;
  sub_186507618();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18(v10, a1, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  sub_186507624();
  v15 = *(_QWORD *)(a2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, a2);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v13, a2);
  __break(1u);
  return result;
}

_DWORD *sub_1850E0B30@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

float sub_1850E0B40@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UICellAccessory.LabelOptions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

id sub_1850E0CB8(uint64_t a1)
{
  return objc_msgSend((id)objc_opt_self(), sel__focusSystemForEnvironment_, a1);
}

id static UIFocusSystem.focusSystem(for:)(uint64_t a1)
{
  swift_getObjectType();
  return sub_1850E0CB8(a1);
}

ValueMetadata *type metadata accessor for UITraitPreferredContentSizeCategory()
{
  return &type metadata for UITraitPreferredContentSizeCategory;
}

ValueMetadata *type metadata accessor for UICellAccessory.DisplayedState()
{
  return &type metadata for UICellAccessory.DisplayedState;
}

uint64_t storeEnumTagSinglePayload for UIContentUnavailableConfigurationState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void _UIGestureEnvironmentUpdate(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  BOOL v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  NSObject *v34;
  NSObject *v35;
  void *v36;
  unint64_t v37;
  NSObject *v38;
  NSObject *v39;
  void *v40;
  NSObject *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id WeakRetained;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t i;
  void *v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t j;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t k;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  id v79;
  uint64_t v80;
  void *m;
  void *v82;
  unint64_t v83;
  NSObject *v84;
  NSObject *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  _BYTE *v89;
  id *v90;
  id *v91;
  NSObject *v92;
  NSObject *v93;
  __int128 v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  NSObject *log;
  NSObject *loga;
  NSObject *logb;
  NSObject *logc;
  id obj;
  id obja;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _QWORD v129[2];
  void (*v130)(uint64_t, void *);
  void *v131;
  uint64_t v132;
  id v133;
  id v134;
  _BYTE v135[128];
  uint8_t v136[128];
  uint8_t v137[4];
  void *v138;
  __int16 v139;
  void *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint8_t buf[32];
  __int128 v146;
  __int128 v147;
  uint8_t v148[128];
  uint8_t v149[4];
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 82))
    goto LABEL_2;
  *(_BYTE *)(a1 + 82) = 1;
  -[UIGestureEnvironment _runPreUpdateActions](a1);
  if (!objc_msgSend(*(id *)(a1 + 16), "count"))
    goto LABEL_84;
  objc_msgSend(*(id *)(a1 + 16), "allObjects");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (_UIApplicationProcessIsCarousel())
  {
    v3 = qword_1ECD78908;
    if (!qword_1ECD78908)
    {
      v3 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v3, (unint64_t *)&qword_1ECD78908);
    }
    if ((*(_BYTE *)v3 & 1) != 0)
    {
      v92 = *(NSObject **)(v3 + 8);
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        v93 = v92;
        *(_DWORD *)v149 = 134217984;
        v150 = objc_msgSend(v2, "count");
        _os_log_impl(&dword_185066000, v93, OS_LOG_TYPE_ERROR, "Querying dynamic failure requirements for dirty gestures: %li", v149, 0xCu);

      }
    }
  }
  v143 = 0u;
  v144 = 0u;
  v141 = 0u;
  v142 = 0u;
  obj = v2;
  v109 = (id)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v141, v149, 16);
  if (v109)
  {
    v107 = *(_QWORD *)v142;
    *(_QWORD *)&v4 = 138412290;
    v94 = v4;
    do
    {
      v111 = 0;
      do
      {
        if (*(_QWORD *)v142 != v107)
          objc_enumerationMutation(obj);
        v5 = *(_QWORD *)(*((_QWORD *)&v141 + 1) + 8 * (_QWORD)v111);
        if (_UIApplicationProcessIsCarousel())
        {
          v6 = qword_1ECD78910;
          if (!qword_1ECD78910)
          {
            v6 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v6, (unint64_t *)&qword_1ECD78910);
          }
          if ((*(_BYTE *)v6 & 1) != 0)
          {
            v38 = *(NSObject **)(v6 + 8);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              v39 = v38;
              objc_msgSend((id)v5, "_briefDescription");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v94;
              *(_QWORD *)&buf[4] = v40;
              _os_log_impl(&dword_185066000, v39, OS_LOG_TYPE_ERROR, "Querying dynamic failure requirements: beginning gestureRecognizerToQuery: %@", buf, 0xCu);

            }
          }
        }
        if (v5)
        {
          v7 = *(_QWORD *)(v5 + 8);
          if ((v7 & 0x10000000) != 0)
          {
            if (_UIApplicationProcessIsCarousel())
            {
              v33 = qword_1ECD78918;
              if (!qword_1ECD78918)
              {
                v33 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                atomic_store(v33, (unint64_t *)&qword_1ECD78918);
              }
              if ((*(_BYTE *)v33 & 1) != 0)
              {
                v34 = *(NSObject **)(v33 + 8);
                if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                {
                  v35 = v34;
                  objc_msgSend((id)v5, "_briefDescription");
                  v36 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = v94;
                  *(_QWORD *)&buf[4] = v36;
                  _os_log_impl(&dword_185066000, v35, OS_LOG_TYPE_ERROR, "Early exit from querying dynamic failure requirements: already queried: gestureRecognizerToQuery: %@", buf, 0xCu);

                }
              }
            }
            goto LABEL_76;
          }
          v8 = *(_BYTE *)(v5 + 16);
          *(_QWORD *)(v5 + 8) = v7 | 0x10000000;
          *(_BYTE *)(v5 + 16) = v8;
        }
        v9 = objc_msgSend((id)v5, "state", v94);
        if (v5)
          v10 = v9 == 5;
        else
          v10 = 1;
        if (!v10 && (*(_QWORD *)(v5 + 8) & 0x3000000) != 0)
        {
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v11 = *(id *)(a1 + 40);
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v125, v148, 16);
          if (!v12)
            goto LABEL_65;
          v13 = *(_QWORD *)v126;
          while (1)
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v126 != v13)
                objc_enumerationMutation(v11);
              v15 = *(void **)(*((_QWORD *)&v125 + 1) + 8 * v14);
              if (_UIApplicationProcessIsCarousel())
              {
                v16 = qword_1ECD78928;
                if (!qword_1ECD78928)
                {
                  v16 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                  atomic_store(v16, (unint64_t *)&qword_1ECD78928);
                }
                if ((*(_BYTE *)v16 & 1) != 0)
                {
                  v24 = *(NSObject **)(v16 + 8);
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                  {
                    log = v24;
                    objc_msgSend(v15, "_briefDescription");
                    v25 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = v94;
                    *(_QWORD *)&buf[4] = v25;
                    _os_log_impl(&dword_185066000, log, OS_LOG_TYPE_ERROR, "Querying dynamic failure requirements: beginning otherGestureRecognizer: %@", buf, 0xCu);

                  }
                }
              }
              if ((void *)v5 == v15
                || (-[UIGestureEnvironment gestureRecognizer:requiresGestureRecognizerToFail:](a1, v5, (uint64_t)v15) & 1) != 0
                || (-[UIGestureEnvironment gestureRecognizer:requiresGestureRecognizerToFail:](a1, (uint64_t)v15, v5) & 1) != 0
                || !objc_msgSend((id)v5, "_affectedByGesture:", v15)
                || (objc_msgSend(v15, "_affectedByGesture:", v5) & 1) == 0)
              {
                if (_UIApplicationProcessIsCarousel())
                {
                  v19 = qword_1ECD78930;
                  if (!qword_1ECD78930)
                  {
                    v19 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                    atomic_store(v19, (unint64_t *)&qword_1ECD78930);
                  }
                  if ((*(_BYTE *)v19 & 1) != 0)
                  {
                    v26 = *(NSObject **)(v19 + 8);
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                    {
                      loga = v26;
                      objc_msgSend((id)v5, "_briefDescription");
                      v98 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v15, "_briefDescription");
                      v27 = objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138412546;
                      *(_QWORD *)&buf[4] = v98;
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v27;
                      v95 = (void *)v27;
                      _os_log_impl(&dword_185066000, loga, OS_LOG_TYPE_ERROR, "Early exit from querying dynamic failure requirements: already requires failure or can't be affected: gestureRecognizerToQuery: %@; otherGestureRecognizer: %@",
                        buf,
                        0x16u);

                    }
                  }
                }
              }
              else
              {
                if (objc_msgSend((id)v5, "_needsDynamicFailureRequirementForGestureRecognizer:", v15))
                {
                  v17 = qword_1ECD78938;
                  if (!qword_1ECD78938)
                  {
                    v17 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                    atomic_store(v17, (unint64_t *)&qword_1ECD78938);
                  }
                  if ((*(_BYTE *)v17 & 1) != 0)
                  {
                    v28 = *(NSObject **)(v17 + 8);
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                    {
                      logb = v28;
                      objc_msgSend((id)v5, "_briefDescription");
                      v99 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v15, "_briefDescription");
                      v29 = objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138412546;
                      *(_QWORD *)&buf[4] = v99;
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v29;
                      v96 = (void *)v29;
                      _os_log_impl(&dword_185066000, logb, OS_LOG_TYPE_ERROR, "Dynamic Failure Requirement: %@ requires %@ to fail", buf, 0x16u);

                    }
                  }
                  v18 = (void *)v5;
                }
                else
                {
                  if (!objc_msgSend((id)v5, "_needsDynamicDependentRequirementForGestureRecognizer:", v15))goto LABEL_48;
                  v20 = qword_1ECD78940;
                  if (!qword_1ECD78940)
                  {
                    v20 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                    atomic_store(v20, (unint64_t *)&qword_1ECD78940);
                  }
                  if ((*(_BYTE *)v20 & 1) != 0)
                  {
                    v30 = *(NSObject **)(v20 + 8);
                    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                    {
                      logc = v30;
                      objc_msgSend(v15, "_briefDescription");
                      v100 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend((id)v5, "_briefDescription");
                      v31 = objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138412546;
                      *(_QWORD *)&buf[4] = v100;
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v31;
                      v97 = (void *)v31;
                      _os_log_impl(&dword_185066000, logc, OS_LOG_TYPE_ERROR, "Dynamic Failure Requirement: %@ requires %@ to fail", buf, 0x16u);

                    }
                  }
                  v18 = v15;
                  v15 = (void *)v5;
                }
                objc_msgSend(*(id *)(a1 + 96), "objectForKey:", v15);
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(*(id *)(a1 + 96), "objectForKey:", v18);
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                v23 = (id)objc_msgSend(*(id *)(a1 + 88), "addUniqueEdgeWithLabel:sourceNode:targetNode:directed:properties:", CFSTR("dynamicFailureRequirement"), v21, v22, 1, 0);

              }
LABEL_48:
              ++v14;
            }
            while (v12 != v14);
            v32 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v125, v148, 16);
            v12 = v32;
            if (!v32)
            {
LABEL_65:

              goto LABEL_76;
            }
          }
        }
        if (_UIApplicationProcessIsCarousel())
        {
          v37 = qword_1ECD78920;
          if (!qword_1ECD78920)
          {
            v37 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v37, (unint64_t *)&qword_1ECD78920);
          }
          if ((*(_BYTE *)v37 & 1) != 0)
          {
            v41 = *(NSObject **)(v37 + 8);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              v42 = v41;
              objc_msgSend((id)v5, "_briefDescription");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              _UIGestureRecognizerStateString(objc_msgSend((id)v5, "state"));
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)&buf[4] = v43;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v44;
              _os_log_impl(&dword_185066000, v42, OS_LOG_TYPE_ERROR, "Early exit from querying dynamic failure requirements: state or subclass requirements: gestureRecognizerToQuery: %@; state: %@",
                buf,
                0x16u);

            }
          }
        }
LABEL_76:
        v111 = (char *)v111 + 1;
      }
      while (v111 != v109);
      v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v141, v149, 16);
      v109 = (id)v45;
    }
    while (v45);
  }

  while (1)
  {
LABEL_84:
    if (objc_msgSend(*(id *)(a1 + 16), "count", v94))
    {
      if (!*(_BYTE *)(a1 + 81))
        goto LABEL_92;
      goto LABEL_88;
    }
    if (!*(_BYTE *)(a1 + 81))
      break;
LABEL_88:
    *(_BYTE *)(a1 + 81) = 0;
    if (objc_msgSend(*(id *)(a1 + 40), "count") >= 2)
    {
      if (*(_BYTE *)(a1 + 80))
      {
        objc_msgSend(*(id *)(a1 + 40), "sortUsingSelector:", sel__depthFirstCompare_);
        *(_BYTE *)(a1 + 80) = 0;
      }
      v46 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:", *(_QWORD *)(a1 + 40));
      _UIExclusionMatrixPerformExclusion(v46);

    }
LABEL_92:
    v47 = (void *)objc_opt_new();
    while (objc_msgSend(*(id *)(a1 + 16), "count"))
    {
      objc_msgSend(*(id *)(a1 + 16), "allObjects");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "sortedArrayUsingSelector:", sel__depthFirstCompare_);
      v49 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(a1 + 16), "removeAllObjects");
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v50 = v49;
      v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v117, v136, 16);
      if (v51)
      {
        v52 = *(_QWORD *)v118;
        do
        {
          v53 = 0;
          do
          {
            if (*(_QWORD *)v118 != v52)
              objc_enumerationMutation(v50);
            v54 = *(_QWORD *)(*((_QWORD *)&v117 + 1) + 8 * v53);
            if (v54)
            {
              WeakRetained = objc_loadWeakRetained((id *)(v54 + 48));

              if (WeakRetained)
                objc_msgSend(v47, "addObject:", v54);
            }
            -[UIGestureEnvironment _clearGestureNeedsUpdate:](a1, v54);
            if (objc_msgSend((id)v54, "state") >= 3)
              -[UIGestureEnvironment _notifyDependentsGestureRecognizerHasCompleted:](a1, (_QWORD *)v54);
            ++v53;
          }
          while (v51 != v53);
          v56 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v117, v136, 16);
          v51 = v56;
        }
        while (v56);
      }

      -[UIGestureEnvironment _queueGestureRecognizersForResetIfFinished:](a1, v50);
    }
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v57 = v47;
    v58 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v113, v135, 16);
    if (v58)
    {
      v59 = *(_QWORD *)v114;
      do
      {
        for (i = 0; i != v58; ++i)
        {
          if (*(_QWORD *)v114 != v59)
            objc_enumerationMutation(v57);
          -[UIGestureRecognizer _updateGestureForActiveEvents](*(void **)(*((_QWORD *)&v113 + 1) + 8 * i));
        }
        v58 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v113, v135, 16);
      }
      while (v58);
    }

  }
  if (objc_msgSend(*(id *)(a1 + 24), "count"))
  {
    objc_msgSend(*(id *)(a1 + 24), "allObjects");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 24), "removeAllObjects");
    v62 = *(id *)(a1 + 88);
    v63 = (void *)objc_opt_new();
    v64 = *(id *)(a1 + 32);
    v129[0] = MEMORY[0x1E0C809B0];
    v129[1] = 3221225472;
    v130 = ___UIGestureEnvironmentUpdateGestureGraph_block_invoke;
    v131 = &unk_1E16C94B8;
    v132 = a1;
    obja = v62;
    v133 = obja;
    v108 = v64;
    v134 = v108;
    v125 = 0u;
    v126 = 0u;
    v127 = 0u;
    v128 = 0u;
    v112 = v61;
    v65 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v125, v148, 16);
    if (v65)
    {
      v66 = *(_QWORD *)v126;
      do
      {
        for (j = 0; j != v65; ++j)
        {
          if (*(_QWORD *)v126 != v66)
            objc_enumerationMutation(v112);
          v68 = *(void **)(*((_QWORD *)&v125 + 1) + 8 * j);
          v141 = 0u;
          v142 = 0u;
          v143 = 0u;
          v144 = 0u;
          v69 = v63;
          v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v141, v149, 16);
          if (v70)
          {
            v71 = *(_QWORD *)v142;
            while (2)
            {
              for (k = 0; k != v70; ++k)
              {
                if (*(_QWORD *)v142 != v71)
                  objc_enumerationMutation(v69);
                if ((objc_msgSend(*(id *)(*((_QWORD *)&v141 + 1) + 8 * k), "containsObject:", v68) & 1) != 0)
                {

                  goto LABEL_133;
                }
              }
              v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v141, v149, 16);
              if (v70)
                continue;
              break;
            }
          }

          _UIGestureEnvironmentSubgraphForGestureRecognizer(a1, v68);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "addObject:", v73);

LABEL_133:
          ;
        }
        v65 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v125, v148, 16);
      }
      while (v65);
    }

    v146 = 0u;
    v147 = 0u;
    memset(buf, 0, sizeof(buf));
    v110 = v63;
    v74 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", buf, v149, 16);
    if (v74)
    {
      v75 = **(_QWORD **)&buf[16];
      do
      {
        v76 = 0;
        do
        {
          if (**(_QWORD **)&buf[16] != v75)
            objc_enumerationMutation(v110);
          v77 = *(void **)(*(_QWORD *)&buf[8] + 8 * v76);
          v121 = 0u;
          v122 = 0u;
          v123 = 0u;
          v124 = 0u;
          v78 = v77;
          v79 = (id)objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v121, &v141, 16);
          if (v79)
          {
            v80 = *(_QWORD *)v122;
            while (2)
            {
              for (m = 0; m != v79; m = (char *)m + 1)
              {
                if (*(_QWORD *)v122 != v80)
                  objc_enumerationMutation(v78);
                v82 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * (_QWORD)m);
                if (-[UIGestureRecognizer _isActive]((uint64_t *)v82))
                {
                  v79 = v82;
                  goto LABEL_150;
                }
              }
              v79 = (id)objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v121, &v141, 16);
              if (v79)
                continue;
              break;
            }

            v130((uint64_t)v129, v78);
            v79 = 0;
          }
          else
          {
LABEL_150:

            v83 = qword_1ECD78948;
            if (!qword_1ECD78948)
            {
              v83 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v83, (unint64_t *)&qword_1ECD78948);
            }
            if ((*(_BYTE *)v83 & 1) != 0)
            {
              v84 = *(NSObject **)(v83 + 8);
              if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
              {
                v85 = v84;
                objc_msgSend(v79, "debugDescription");
                v86 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v78, "valueForKeyPath:", CFSTR("_briefDescription"));
                v87 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v137 = 138412546;
                v138 = v86;
                v139 = 2112;
                v140 = v87;
                _os_log_impl(&dword_185066000, v85, OS_LOG_TYPE_ERROR, "subgraph NOT ready for reset \nblocking gesture: %@\ngraph: %@", v137, 0x16u);

              }
            }
          }

          ++v76;
        }
        while (v76 != v74);
        v88 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", buf, v149, 16);
        v74 = v88;
      }
      while (v88);
    }

  }
  v89 = (_BYTE *)qword_1ECD78900;
  if (!qword_1ECD78900)
  {
    v89 = (_BYTE *)(__UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v89, (unint64_t *)&qword_1ECD78900);
  }
  if ((*v89 & 1) != 0)
    _UIGestureEnvironmentLogSubgraphsBlockedFromResetIfNeeded(a1);
  objc_msgSend((id)UIApp, "_gestureDelayedEventComponentDispatcher");
  v90 = (id *)objc_claimAutoreleasedReturnValue();
  -[UIGestureDelayedEventComponentDispatcher sendDelayedTouches](v90);

  objc_msgSend((id)UIApp, "_gestureDelayedEventComponentDispatcher");
  v91 = (id *)objc_claimAutoreleasedReturnValue();
  -[UIGestureDelayedEventComponentDispatcher sendDelayedPresses](v91);

LABEL_2:
  *(_BYTE *)(a1 + 82) = 0;
}

void sub_1850E20D8(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;

  if (a2)
  {
    objc_begin_catch(exception_object);
    *(_BYTE *)(v2 + 82) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void __UILogGetCategoryCachedImpl(_BYTE *__s2, unint64_t *a2)
{
  if (!*a2)
    atomic_store(__UILogCategoryGetNode(__s2, (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16, a2);
}

uint64_t _UIApplicationProcessIsCarousel()
{
  if (qword_1EDDC8170 != -1)
    dispatch_once(&qword_1EDDC8170, &__block_literal_global_951);
  return byte_1EDDC800C;
}

unint64_t __UILogCategoryGetNode(_BYTE *__s2, uint64_t a2, uint64_t (*a3)(_BYTE *))
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t *v30;
  size_t v31;
  size_t v32;
  char *v33;
  unint64_t v34;
  char *v36;
  unint64_t v37;

  v4 = a2;
  v6 = *__s2;
  if (*__s2)
  {
    v7 = 0;
    v8 = 0;
    LOBYTE(v9) = *__s2;
    do
    {
      v8 = 257 * v8 + (char)v9;
      v9 = __s2[++v7];
    }
    while (v9);
    v10 = 257 * v8;
  }
  else
  {
    LODWORD(v7) = 0;
    v10 = 0;
  }
  v11 = v10 + v7;
  v12 = *(_QWORD *)(a2 + 8 * (v11 & 0x1F));
  if (v12)
  {
    v13 = 0;
    v14 = v11;
    do
    {
      if (*(_DWORD *)v12 == v11)
      {
        if (!memcmp(*(const void **)(v12 + 264), __s2, v7))
          return v12;
        ++v13;
        if (v6)
        {
          v7 = 0;
          LOBYTE(v15) = v6;
          v16 = v13;
          do
          {
            v16 = 257 * v16 + (char)v15;
            v15 = __s2[++v7];
          }
          while (v15);
        }
        else
        {
          LODWORD(v7) = 0;
          v16 = v13;
        }
        v11 = 257 * v16 + v7;
        v14 = v11;
      }
      else
      {
        v14 >>= 5;
      }
      v12 = *(_QWORD *)(v12 + 8 * (v14 & 0x1F) + 8);
    }
    while (v12);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_1276);
  v17 = *__s2;
  if (*__s2)
  {
    v18 = 0;
    v19 = 0;
    LOBYTE(v20) = *__s2;
    do
    {
      v19 = 257 * v19 + (char)v20;
      v20 = __s2[++v18];
    }
    while (v20);
    v21 = 257 * v19;
  }
  else
  {
    v18 = 0;
    v21 = 0;
  }
  v22 = (v21 + v18);
  v23 = v22 | (v18 << 32);
  v24 = v22 & 0x1F;
  v25 = *(_QWORD *)(v4 + 8 * v24);
  if (v25)
  {
    v26 = 0;
    LODWORD(v27) = v22;
    do
    {
      if (*(_DWORD *)v25 == (_DWORD)v27)
      {
        if (!memcmp(*(const void **)(v25 + 264), __s2, v18))
        {
          v30 = (unint64_t *)(v4 + 8 * v24);
          goto LABEL_46;
        }
        ++v26;
        if (v17)
        {
          v18 = 0;
          LOBYTE(v28) = v17;
          v29 = v26;
          do
          {
            v29 = 257 * v29 + (char)v28;
            v28 = __s2[++v18];
          }
          while (v28);
        }
        else
        {
          v18 = 0;
          v29 = v26;
        }
        v27 = (257 * v29 + v18);
        v23 = v27 | (v18 << 32);
        LODWORD(v22) = 257 * v29 + v18;
      }
      else
      {
        LODWORD(v22) = v22 >> 5;
      }
      v4 = v25 + 8;
      v24 = v22 & 0x1F;
      v25 = *(_QWORD *)(v25 + 8 + 8 * v24);
    }
    while (v25);
  }
  v30 = (unint64_t *)(v4 + 8 * v24);
  v31 = strlen(__s2);
  v32 = v31;
  if (v31 < 0x2801)
  {
    v34 = (g_UILogCategoriesAllocator_1 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v34 < g_UILogCategoriesAllocator_1 || v34 > 10240 - v31)
    {
      v36 = (char *)malloc_type_malloc(0x2800uLL, 0x67DDC7D9uLL);
      v34 = 0;
      qword_1ECD81DD0 = (uint64_t)v36;
    }
    else
    {
      v36 = (char *)qword_1ECD81DD0;
    }
    g_UILogCategoriesAllocator_1 = v34 + v32;
    v33 = &v36[v34];
  }
  else
  {
    v33 = (char *)malloc_type_malloc(v31, 0xB2BD9910uLL);
  }
  memcpy(v33, __s2, v32);
  v37 = a3(__s2);
  *(_QWORD *)v37 = v23;
  *(_QWORD *)(v37 + 264) = v33;
  *(_OWORD *)(v37 + 8) = 0u;
  *(_OWORD *)(v37 + 24) = 0u;
  *(_OWORD *)(v37 + 40) = 0u;
  *(_OWORD *)(v37 + 56) = 0u;
  *(_OWORD *)(v37 + 72) = 0u;
  *(_OWORD *)(v37 + 88) = 0u;
  *(_OWORD *)(v37 + 104) = 0u;
  *(_OWORD *)(v37 + 120) = 0u;
  *(_OWORD *)(v37 + 136) = 0u;
  *(_OWORD *)(v37 + 152) = 0u;
  *(_OWORD *)(v37 + 168) = 0u;
  *(_OWORD *)(v37 + 184) = 0u;
  *(_OWORD *)(v37 + 200) = 0u;
  *(_OWORD *)(v37 + 216) = 0u;
  *(_OWORD *)(v37 + 232) = 0u;
  *(_OWORD *)(v37 + 248) = 0u;
  atomic_store(v37, v30);
LABEL_46:
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_1276);
  return *v30;
}

void sub_1850E2E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  id *v10;

  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1850E3BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIGestureEnvironmentLogSubgraphsBlockedFromResetIfNeeded(uint64_t a1)
{
  uint64_t v2;
  double v3;
  int v4;
  double v5;
  void *v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = mach_absolute_time();
  if (_UIInternalPreferenceUsesDefault_1((int *)&_MergedGlobals_911, (uint64_t)CFSTR("LogSubgraphsBlockedFromResetInterval")))v3 = 60.0;
  else
    v3 = *(double *)&qword_1ECD76560;
  if (_UIMediaTimeForMachTime(v2 - *(_QWORD *)(a1 + 56)) > v3)
  {
    *(_QWORD *)(a1 + 56) = mach_absolute_time();
    v4 = _UIInternalPreferenceUsesDefault_1((int *)&unk_1ECD76568, (uint64_t)CFSTR("GestureBlockedFromResetLogTimeout"));
    v5 = *(double *)&qword_1ECD76570;
    if (v4)
      v5 = 5.0;
    if (_UIGestureEnvironmentHasBlockedGestureRecognizerSurpassingTimeout(*(void **)(a1 + 48), v2, v5))
    {
      _UIGestureEnvironmentSubgraphsBlockedFromResetDescription(a1, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = _UIGestureEnvironmentLogSubgraphsBlockedFromResetIfNeeded___s_category;
      if (!_UIGestureEnvironmentLogSubgraphsBlockedFromResetIfNeeded___s_category)
      {
        v7 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v7, (unint64_t *)&_UIGestureEnvironmentLogSubgraphsBlockedFromResetIfNeeded___s_category);
      }
      if ((*(_BYTE *)v7 & 1) != 0)
      {
        v8 = *(NSObject **)(v7 + 8);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v9 = v8;
          objc_msgSend(v6, "description");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = 138412290;
          v12 = v10;
          _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v11, 0xCu);

        }
      }

    }
  }
}

void sub_1850E4D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1850E5C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __UIVIEW_IS_EXECUTING_ANIMATION_COMPLETION_BLOCK__(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

id UIBackgroundConfiguration.cornerRadius.setter(double a1)
{
  return sub_185151FBC((SEL *)&selRef_setCornerRadius_, a1);
}

ValueMetadata *type metadata accessor for UICellAccessory.MultiselectOptions()
{
  return &type metadata for UICellAccessory.MultiselectOptions;
}

BOOL UIAccessibilityIsReduceTransparencyEnabled(void)
{
  return _AXSEnhanceBackgroundContrastEnabled() != 0;
}

uint64_t _UIImageDummyImageContentRendering()
{
  if (qword_1ECD79870 != -1)
    dispatch_once(&qword_1ECD79870, &__block_literal_global_280);
  return _MergedGlobals_67;
}

void sub_1850E9F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1850EA4DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double pretiledSizeForImage(void *a1, double a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v3 = a1;
  objc_msgSend(v3, "size");
  v5 = v4;
  objc_msgSend(v3, "capInsets");
  v7 = v6;
  v9 = v8;

  v10 = a2 - (v7 + v9);
  if (v10 > 64.0)
    v10 = 64.0;
  return v7 + v9 + (v5 - v7 - v9) * floor(v10 / (v5 - v7 - v9));
}

ValueMetadata *type metadata accessor for UICellAccessory.LayoutDimension()
{
  return &type metadata for UICellAccessory.LayoutDimension;
}

void destroy for UICellAccessory.LabelOptions(uint64_t a1)
{

}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t sub_1850ED1F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1852CCBF8(qword_1EDD8B090, a1);
}

uint64_t _s13ConfigurationV9IndicatorOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

void sub_1850ED294(uint64_t a1, char a2)
{
  sub_1852D8418(a1, a2, (SEL *)&selRef__setSwiftBridgingTextProperties_);
}

uint64_t UIListContentConfiguration.textProperties.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_18532ABF0((SEL *)&selRef_textProperties, (unint64_t *)&unk_1EDD82DB8, &qword_1EDD82E70, a1);
}

ValueMetadata *type metadata accessor for UIListSeparatorConfiguration()
{
  return &type metadata for UIListSeparatorConfiguration;
}

void _removeLayoutGuide(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_msgSend(v1, "_setLockedToOwningView:", 0);
  objc_msgSend(v1, "owningView");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeLayoutGuide:", v1);

}

double _UINavigationBarLargeTitleViewCalculateRestingHeight(void *a1, double a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v3 = a1;
  objc_msgSend(v3, "_firstBaselineOffsetFromTop");
  v5 = v4;
  objc_msgSend(v3, "_baselineOffsetFromBottom");
  v7 = v6;

  if (qword_1ECD7CDB8 != -1)
    dispatch_once(&qword_1ECD7CDB8, &__block_literal_global_64);
  v8 = *(double *)&qword_1ECD7CDB0 - v5;
  v9 = 0.0;
  if (*(double *)&qword_1ECD7CDB0 - v5 < 0.0)
    v8 = 0.0;
  if (16.0 - v7 >= 0.0)
    v9 = 16.0 - v7;
  return v9 + v8 + a2;
}

uint64_t _UIViewEnumerateLayoutConstraintsAndAdjustForConstantChangeForSelectedAttributes(void *a1, uint64_t a2)
{
  _QWORD v3[6];
  _QWORD v4[7];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___UIViewEnumerateLayoutConstraintsAndAdjustForConstantChangeForSelectedAttributes_block_invoke;
  v3[3] = &unk_1E16E9928;
  v3[4] = a1;
  v3[5] = a2;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___UIViewEnumerateLayoutConstraintsAndAdjustForSelectedLayoutVariables_block_invoke;
  v4[3] = &unk_1E16E9900;
  v4[4] = a1;
  v4[5] = v3;
  v4[6] = &__block_literal_global_94_2;
  return objc_msgSend(a1, "_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:", v4);
}

uint64_t _UIPresentationControllersInheritTraitsFromViewHierarchy()
{
  uint64_t result;
  int v1;
  _BOOL4 v2;
  int v3;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
  {
    if (_UIInternalPreferencesRevisionOnce != -1)
      dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
    v1 = _UIInternalPreferencesRevisionVar;
    if (_UIInternalPreferencesRevisionVar < 1
      || (v3 = _UIInternalPreference_PresentationControllersInheritTraitsFromViewHierarchy,
          _UIInternalPreferencesRevisionVar == _UIInternalPreference_PresentationControllersInheritTraitsFromViewHierarchy))
    {
      v2 = 1;
    }
    else
    {
      do
      {
        v2 = v1 >= v3;
        if (v1 < v3)
          break;
        _UIInternalPreferenceSync(v1, &_UIInternalPreference_PresentationControllersInheritTraitsFromViewHierarchy, (uint64_t)CFSTR("PresentationControllersInheritTraitsFromViewHierarchy"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
        v3 = _UIInternalPreference_PresentationControllersInheritTraitsFromViewHierarchy;
      }
      while (v1 != _UIInternalPreference_PresentationControllersInheritTraitsFromViewHierarchy);
    }
    return byte_1ECD75F94 || v2;
  }
  return result;
}

void sub_1850EED18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _UIShouldLogTraitCollectionChangeForInstanceAndMethod(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;

  if (qword_1ECD7E7C8 != -1)
    dispatch_once(&qword_1ECD7E7C8, &__block_literal_global_660_0);
  if (qword_1ECD7E7C0 == 2)
    return 1;
  if (qword_1ECD7E7C0 != 1)
    return 0;
  v5 = (void *)objc_opt_class();
  objc_msgSend(a1, "instanceMethodForSelector:", a3);
  v6 = dyld_image_header_containing_address();
  objc_msgSend(v5, "instanceMethodForSelector:", a3);
  return v6 != dyld_image_header_containing_address();
}

void sub_1850EFD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;

  _Unwind_Resume(a1);
}

void sub_1850F09DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _UIShouldLogTraitRegistryChange()
{
  if (qword_1ECD7E7C8 != -1)
    dispatch_once(&qword_1ECD7E7C8, &__block_literal_global_660_0);
  return (unint64_t)(qword_1ECD7E7C0 - 1) < 2;
}

UIColor __swiftcall UIColor.init(_colorLiteralRed:green:blue:alpha:)(Swift::Float _colorLiteralRed, Swift::Float green, Swift::Float blue, Swift::Float alpha)
{
  objc_class *v4;
  NSString *v5;
  NSString *v6;
  UIColor result;

  v4 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithRed_green_blue_alpha_, _colorLiteralRed, green, blue, alpha);
  result._cachedStyleString = v6;
  result._systemColorName = v5;
  result.super.isa = v4;
  return result;
}

uint64_t sub_1850F22DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  int64_t v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  void *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  int64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v1 = *v0;
  v38 = *((unsigned __int8 *)v0 + 8);
  v39 = *((unsigned __int8 *)v0 + 9);
  v40 = *((unsigned __int8 *)v0 + 10);
  v41 = *((unsigned __int8 *)v0 + 11);
  v42 = *((unsigned __int8 *)v0 + 12);
  v2 = *((unsigned __int8 *)v0 + 13);
  v3 = *((unsigned __int8 *)v0 + 14);
  v4 = *((unsigned __int8 *)v0 + 15);
  v5 = *((unsigned __int8 *)v0 + 16);
  v6 = *((unsigned __int8 *)v0 + 17);
  v7 = *((unsigned __int8 *)v0 + 18);
  v8 = *((unsigned __int8 *)v0 + 19);
  v44 = *((unsigned __int8 *)v0 + 20);
  v10 = v0[3];
  v9 = (void *)v0[4];
  if (v9)
  {
    v36 = *v0;
    v37 = *((unsigned __int8 *)v0 + 13);
    v11 = *((unsigned __int8 *)v0 + 14);
    v12 = *((unsigned __int8 *)v0 + 15);
    v13 = *((unsigned __int8 *)v0 + 16);
    v14 = *((unsigned __int8 *)v0 + 17);
    v15 = *((unsigned __int8 *)v0 + 18);
    v16 = *((unsigned __int8 *)v0 + 19);
    v17 = (id)v0[5];
    v18 = *((_BYTE *)v0 + 48);
    v19 = v9;
    v20 = objc_msgSend(v19, sel__mutations);
    if ((v18 & 1) == 0 && v17 == v20)
      return (uint64_t)v19;

    v8 = v16;
    v7 = v15;
    v6 = v14;
    v5 = v13;
    v4 = v12;
    v3 = v11;
    v2 = v37;
    v1 = v36;
  }
  v19 = objc_msgSend(objc_allocWithZone((Class)UICellConfigurationState), sel_initWithTraitCollection_, v1);
  objc_msgSend(v19, sel_setDisabled_, v38);
  objc_msgSend(v19, sel_setHighlighted_, v39);
  objc_msgSend(v19, sel_setSelected_, v40);
  objc_msgSend(v19, sel_setFocused_, v41);
  objc_msgSend(v19, sel_setPinned_, v42);
  objc_msgSend(v19, sel_setEditing_, v2);
  objc_msgSend(v19, sel_setExpanded_, v3);
  objc_msgSend(v19, sel_setSwiped_, v4);
  objc_msgSend(v19, sel_setReordering_, v5);
  objc_msgSend(v19, sel_setCellDragState_, v6);
  objc_msgSend(v19, sel_setCellDropState_, v7);
  objc_msgSend(v19, sel__setUsesAnyPlainListStyle_, v8);
  objc_msgSend(v19, sel__setInMultiSelectGroup_, v44);
  v43 = v10 + 64;
  v21 = 1 << *(_BYTE *)(v10 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & *(_QWORD *)(v10 + 64);
  v45 = (unint64_t)(v21 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v25 = 0;
  if (!v23)
    goto LABEL_12;
LABEL_10:
  v27 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v28 = v27 | (v25 << 6);
  while (2)
  {
    v29 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)&v46 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v28);
    v30 = (void *)v46;
    sub_1850F28CC(v29 + 40 * v28, (uint64_t)&v46 + 8);
    v31 = v30;
    while (1)
    {
      sub_1850F26F8((uint64_t)&v46, (uint64_t)&v49, &qword_1EDD816B8);
      v35 = v49;
      if (!v49)
      {
        swift_release();
        return (uint64_t)v19;
      }
      v46 = v50;
      v47 = v51;
      *(_QWORD *)&v48 = v52;
      v26 = (void *)sub_186507BA0();
      objc_msgSend(v19, sel__setSwiftBridgingCustomState_forKey_, v26, v35);

      result = sub_1850F7064((uint64_t)&v46);
      if (v23)
        goto LABEL_10;
LABEL_12:
      v32 = v25 + 1;
      if (__OFADD__(v25, 1))
      {
        __break(1u);
        goto LABEL_34;
      }
      if (v32 < v45)
      {
        v33 = *(_QWORD *)(v43 + 8 * v32);
        if (v33)
          goto LABEL_15;
        v34 = v25 + 2;
        ++v25;
        if (v32 + 1 < v45)
        {
          v33 = *(_QWORD *)(v43 + 8 * v34);
          if (v33)
            goto LABEL_18;
          v25 = v32 + 1;
          if (v32 + 2 < v45)
          {
            v33 = *(_QWORD *)(v43 + 8 * (v32 + 2));
            if (v33)
            {
              v32 += 2;
              goto LABEL_15;
            }
            v34 = v32 + 3;
            v25 = v32 + 2;
            if (v32 + 3 < v45)
              break;
          }
        }
      }
LABEL_29:
      v23 = 0;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
    }
    v33 = *(_QWORD *)(v43 + 8 * v34);
    if (v33)
    {
LABEL_18:
      v32 = v34;
LABEL_15:
      v23 = (v33 - 1) & v33;
      v28 = __clz(__rbit64(v33)) + (v32 << 6);
      v25 = v32;
      continue;
    }
    break;
  }
  while (1)
  {
    v32 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v32 >= v45)
    {
      v25 = v45 - 1;
      goto LABEL_29;
    }
    v33 = *(_QWORD *)(v43 + 8 * v32);
    ++v34;
    if (v33)
      goto LABEL_15;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1850F26F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t result;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  unsigned __int16 v28;
  char v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  char v33;

  if (a1)
  {
    sub_1850F2A38(a1, (uint64_t)&v18);
    v3 = v19;
    v4 = v20;
    v5 = v21;
    v6 = v22;
    v7 = v23;
    v8 = v24;
    v9 = v25;
    v10 = v26;
    v11 = v27;
    result = v28;
    v13 = v29;
    v14 = v30;
    v15 = v31;
    v16 = v33;
    v17 = v32;
    *(_QWORD *)a2 = v18;
    *(_BYTE *)(a2 + 8) = v3;
    *(_BYTE *)(a2 + 9) = v4;
    *(_BYTE *)(a2 + 10) = v5;
    *(_BYTE *)(a2 + 11) = v6;
    *(_BYTE *)(a2 + 12) = v7;
    *(_BYTE *)(a2 + 13) = v8;
    *(_BYTE *)(a2 + 14) = v9;
    *(_BYTE *)(a2 + 15) = v10;
    *(_BYTE *)(a2 + 16) = v11;
    *(_WORD *)(a2 + 17) = result;
    *(_BYTE *)(a2 + 19) = v13;
    *(_BYTE *)(a2 + 20) = v14;
    *(_QWORD *)(a2 + 24) = v15;
    *(_OWORD *)(a2 + 32) = v17;
    *(_BYTE *)(a2 + 48) = v16;
  }
  else
  {
    sub_186507C30();
    swift_bridgeObjectRelease();
    sub_1851F9080(0, &qword_1EDD82CC8);
    sub_186508260();
    sub_186507564();
    swift_bridgeObjectRelease();
    sub_186507564();
    sub_186507564();
    result = sub_186507E04();
    __break(1u);
  }
  return result;
}

uint64_t sub_1850F28CC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

void sub_1850F2A38(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  id v33;
  char isUniquelyReferenced_nonNull_native;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  id v49;
  id v50;
  unint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  id v60;
  id v61;
  uint64_t v62;
  unsigned __int8 v63;
  char v64;
  char v65;
  id v66;
  unsigned __int8 v67;
  uint64_t v68;
  unsigned __int8 v69;
  int64_t v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  void *v82;
  __int128 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;

  v66 = objc_msgSend(a1, sel_traitCollection);
  v4 = objc_msgSend(a1, sel_isDisabled);
  v94 = v4;
  v5 = objc_msgSend(a1, sel_isHighlighted);
  v93 = v5;
  v6 = objc_msgSend(a1, sel_isSelected);
  v92 = v6;
  v7 = objc_msgSend(a1, sel_isFocused);
  v91 = v7;
  v73 = objc_msgSend(a1, sel_isPinned);
  v90 = v73;
  v72 = objc_msgSend(a1, sel_isEditing);
  v89 = v72;
  v71 = objc_msgSend(a1, sel_isExpanded);
  v88 = v71;
  v69 = objc_msgSend(a1, sel_isSwiped);
  v87 = v69;
  v67 = objc_msgSend(a1, sel_isReordering);
  v86 = v67;
  sub_1850F3528((unint64_t)objc_msgSend(a1, sel_cellDragState), type metadata accessor for __UICellConfigurationDragState, &v82);
  v65 = (char)v82;
  sub_1850F3528((unint64_t)objc_msgSend(a1, sel_cellDropState), type metadata accessor for __UICellConfigurationDropState, &v82);
  v64 = (char)v82;
  v8 = objc_msgSend(a1, sel__usesAnyPlainListStyle);
  v85 = v8;
  v9 = objc_msgSend(a1, sel__inMultiSelectGroup);
  v84 = v9;
  v10 = objc_msgSend(a1, sel__customStatesForSwiftBridging);
  if (!v10)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v63 = v7;
    v59 = v6;
    v58 = v5;
    v57 = v4;
    goto LABEL_49;
  }
  v11 = v10;
  v62 = a2;
  type metadata accessor for UIConfigurationStateCustomKey(0);
  sub_1850F731C();
  v12 = MEMORY[0x1E0DEE9B8];
  v13 = sub_1865073A8();

  v14 = 0;
  v15 = *(_QWORD *)(v13 + 64);
  v68 = v13 + 64;
  v74 = v13;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v70 = (unint64_t)(v16 + 63) >> 6;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v20 = 0uLL;
  v21 = (uint64_t *)&unk_1EDD81F68;
  if ((v17 & v15) == 0)
    goto LABEL_7;
LABEL_5:
  while (2)
  {
    v22 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v23 = v22 | (v14 << 6);
LABEL_6:
    v24 = *(_QWORD *)(v74 + 56);
    *(_QWORD *)&v79 = *(_QWORD *)(*(_QWORD *)(v74 + 48) + 8 * v23);
    v25 = (void *)v79;
    sub_1850F69D4(v24 + 32 * v23, (uint64_t)&v79 + 8);
    v26 = v25;
    while (1)
    {
      sub_1850F26F8((uint64_t)&v79, (uint64_t)&v82, v21);
      v30 = v82;
      if (!v82)
      {
        swift_release();
        v57 = v94;
        v58 = v93;
        v59 = v92;
        v63 = v91;
        v73 = v90;
        v72 = v89;
        v71 = v88;
        v69 = v87;
        v67 = v86;
        v8 = v85;
        v9 = v84;
        a2 = v62;
LABEL_49:
        v60 = a1;
        v61 = objc_msgSend(v60, sel__mutations);

        *(_QWORD *)a2 = v66;
        *(_BYTE *)(a2 + 8) = v57;
        *(_BYTE *)(a2 + 9) = v58;
        *(_BYTE *)(a2 + 10) = v59;
        *(_BYTE *)(a2 + 11) = v63;
        *(_BYTE *)(a2 + 12) = v73;
        *(_BYTE *)(a2 + 13) = v72;
        *(_BYTE *)(a2 + 14) = v71;
        *(_BYTE *)(a2 + 15) = v69;
        *(_BYTE *)(a2 + 16) = v67;
        *(_BYTE *)(a2 + 17) = v65;
        *(_BYTE *)(a2 + 18) = v64;
        *(_BYTE *)(a2 + 19) = v8;
        *(_BYTE *)(a2 + 20) = v9;
        *(_QWORD *)(a2 + 24) = v19;
        *(_QWORD *)(a2 + 32) = a1;
        *(_QWORD *)(a2 + 40) = v61;
        *(_BYTE *)(a2 + 48) = 0;
        return;
      }
      sub_1850F6908(&v83, &v78);
      if (swift_dynamicCast())
        break;
      v81 = 0;
      v79 = 0u;
      v80 = 0u;
      v50 = v30;
      sub_185070E24((uint64_t)&v79);
      swift_bridgeObjectRetain();
      v51 = sub_1850F6BB4(v50);
      v53 = v52;
      swift_bridgeObjectRelease();
      if ((v53 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_185685AEC();

        v54 = v19[7] + 40 * v51;
        v55 = *(_QWORD *)(v54 + 32);
        v56 = *(_OWORD *)(v54 + 16);
        v75 = *(_OWORD *)v54;
        v76 = v56;
        v77 = v55;
        sub_1856823DC(v51, (uint64_t)v19);
        swift_bridgeObjectRelease();
      }
      else
      {
        v77 = 0;
        v75 = 0u;
        v76 = 0u;
      }

      sub_185070E24((uint64_t)&v75);
      v20 = 0uLL;
      if (v18)
        goto LABEL_5;
LABEL_7:
      v27 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_51;
      if (v27 < v70)
      {
        v28 = *(_QWORD *)(v68 + 8 * v27);
        if (v28)
          goto LABEL_10;
        v29 = v14 + 2;
        ++v14;
        if (v27 + 1 < v70)
        {
          v28 = *(_QWORD *)(v68 + 8 * v29);
          if (v28)
            goto LABEL_13;
          v14 = v27 + 1;
          if (v27 + 2 < v70)
          {
            v28 = *(_QWORD *)(v68 + 8 * (v27 + 2));
            if (v28)
            {
              v27 += 2;
              goto LABEL_10;
            }
            v29 = v27 + 3;
            v14 = v27 + 2;
            if (v27 + 3 < v70)
            {
              v28 = *(_QWORD *)(v68 + 8 * v29);
              if (!v28)
              {
                while (1)
                {
                  v27 = v29 + 1;
                  if (__OFADD__(v29, 1))
                    goto LABEL_53;
                  if (v27 >= v70)
                  {
                    v14 = v70 - 1;
                    goto LABEL_24;
                  }
                  v28 = *(_QWORD *)(v68 + 8 * v27);
                  ++v29;
                  if (v28)
                    goto LABEL_10;
                }
              }
LABEL_13:
              v27 = v29;
LABEL_10:
              v18 = (v28 - 1) & v28;
              v23 = __clz(__rbit64(v28)) + (v27 << 6);
              v14 = v27;
              goto LABEL_6;
            }
          }
        }
      }
LABEL_24:
      v18 = 0;
      v81 = 0;
      v79 = v20;
      v80 = v20;
    }
    v31 = v21;
    v32 = v12;
    v75 = v79;
    v76 = v80;
    v77 = v81;
    v33 = v30;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v36 = sub_1850F6BB4(v33);
    v37 = v19[2];
    v38 = (v35 & 1) == 0;
    v39 = v37 + v38;
    if (!__OFADD__(v37, v38))
    {
      v40 = v35;
      if (v19[3] >= v39)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v35 & 1) == 0)
            goto LABEL_31;
        }
        else
        {
          sub_185685AEC();
          if ((v40 & 1) == 0)
            goto LABEL_31;
        }
      }
      else
      {
        sub_1850F6D2C(v39, isUniquelyReferenced_nonNull_native);
        v41 = sub_1850F6BB4(v33);
        if ((v40 & 1) != (v42 & 1))
          goto LABEL_54;
        v36 = v41;
        if ((v40 & 1) == 0)
        {
LABEL_31:
          v19[(v36 >> 6) + 8] |= 1 << v36;
          *(_QWORD *)(v19[6] + 8 * v36) = v33;
          v43 = v19[7] + 40 * v36;
          v44 = v75;
          v45 = v76;
          *(_QWORD *)(v43 + 32) = v77;
          *(_OWORD *)v43 = v44;
          *(_OWORD *)(v43 + 16) = v45;
          v46 = v19[2];
          v47 = __OFADD__(v46, 1);
          v48 = v46 + 1;
          if (v47)
            goto LABEL_52;
          v19[2] = v48;
          v49 = v33;
          goto LABEL_43;
        }
      }
      sub_18564AE50((uint64_t)&v75, v19[7] + 40 * v36);
LABEL_43:

      swift_bridgeObjectRelease();
      v12 = v32;
      v20 = 0uLL;
      v21 = v31;
      if (v18)
        continue;
      goto LABEL_7;
    }
    break;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  sub_186508074();
  __break(1u);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x186DC9F10]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

id UIColorPlaceholder()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)UIColorPlaceholder___placeholder;
  if (!UIColorPlaceholder___placeholder)
  {
    v1 = objc_opt_new();
    v2 = (void *)UIColorPlaceholder___placeholder;
    UIColorPlaceholder___placeholder = v1;

    v0 = (void *)UIColorPlaceholder___placeholder;
  }
  return v0;
}

unint64_t sub_1850F3528@<X0>(unint64_t result@<X0>, void (*a2)(_QWORD)@<X1>, _BYTE *a3@<X8>)
{
  if (result >= 3)
  {
    sub_186507C30();
    sub_186507564();
    a2(0);
    sub_186507D74();
    sub_186507564();
    sub_186507564();
    result = sub_186507E04();
    __break(1u);
  }
  else
  {
    *a3 = result;
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

BOOL _UISizeEqualToSizeWithPrecision(double a1, double a2, double a3, double a4, double a5)
{
  _BOOL4 v10;
  void *v12;
  void *v13;

  if (a5 < 0.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _UISizeEqualToSizeWithPrecision(CGSize, CGSize, CGFloat)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("_UICollectionLayoutHelpers.m"), 229, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("precision >= 0.0"));

  }
  v10 = vabdd_f64(a1, a3) <= a5;
  return vabdd_f64(a2, a4) <= a5 && v10;
}

void sub_1850F6498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *__swift_project_boxed_opaque_existential_0Tm(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

_OWORD *sub_1850F6908(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1850F69D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_1850F6A10(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  id result;
  uint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1850F6BB4(a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
        return (id)sub_18564AE50(a1, v15[7] + 40 * v9);
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_185685AEC();
      goto LABEL_7;
    }
    sub_1850F6D2C(v12, a3 & 1);
    v17 = sub_1850F6BB4(a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = v17;
      v15 = *v4;
      if ((v13 & 1) != 0)
        return (id)sub_18564AE50(a1, v15[7] + 40 * v9);
LABEL_11:
      sub_185784D70(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for UIConfigurationStateCustomKey(0);
  result = (id)sub_186508074();
  __break(1u);
  return result;
}

unint64_t sub_1850F6B28(uint64_t a1)
{
  uint64_t v2;

  sub_1865074F8();
  sub_1865080EC();
  sub_186507540();
  v2 = sub_186508134();
  swift_bridgeObjectRelease();
  return sub_1850F6BB8(a1, v2);
}

unint64_t sub_1850F6BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1865074F8();
    v8 = v7;
    if (v6 == sub_1865074F8() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_186507FCC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1865074F8();
          v15 = v14;
          if (v13 == sub_1865074F8() && v15 == v16)
            break;
          v18 = sub_186507FCC();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1850F6D2C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD81F90);
  v40 = a2;
  v6 = sub_186507E7C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v39 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v18 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v19 = v18 | (v13 << 6);
      }
      else
      {
        v20 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v20 >= v38)
          goto LABEL_34;
        v21 = v39[v20];
        ++v13;
        if (!v21)
        {
          v13 = v20 + 1;
          if (v20 + 1 >= v38)
            goto LABEL_34;
          v21 = v39[v13];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v38)
            {
LABEL_34:
              swift_release();
              v3 = v37;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v39[v22];
            if (!v21)
            {
              while (1)
              {
                v13 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v13 >= v38)
                  goto LABEL_34;
                v21 = v39[v13];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v13 = v22;
          }
        }
LABEL_21:
        v10 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v13 << 6);
      }
      v23 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v24 = *(_QWORD *)(v5 + 56) + 40 * v19;
      if ((v40 & 1) != 0)
      {
        v25 = *(_OWORD *)v24;
        v26 = *(_OWORD *)(v24 + 16);
        v43 = *(_QWORD *)(v24 + 32);
        v41 = v25;
        v42 = v26;
      }
      else
      {
        sub_1850F28CC(v24, (uint64_t)&v41);
        v27 = v23;
      }
      sub_1865074F8();
      sub_1865080EC();
      sub_186507540();
      v28 = sub_186508134();
      result = swift_bridgeObjectRelease();
      v29 = -1 << *(_BYTE *)(v7 + 32);
      v30 = v28 & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v11 + 8 * (v30 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v11 + 8 * v31);
        }
        while (v35 == -1);
        v14 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v23;
      v15 = *(_QWORD *)(v7 + 56) + 40 * v14;
      v16 = v41;
      v17 = v42;
      *(_QWORD *)(v15 + 32) = v43;
      *(_OWORD *)v15 = v16;
      *(_OWORD *)(v15 + 16) = v17;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1850F7064(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void type metadata accessor for UIConfigurationStateCustomKey(uint64_t a1)
{
  sub_185249668(a1, &qword_1EDD81F88);
}

unint64_t sub_1850F731C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDD81F78;
  if (!qword_1EDD81F78)
  {
    type metadata accessor for UIConfigurationStateCustomKey(255);
    result = MEMORY[0x186DC9F28](&unk_186666E74, v1);
    atomic_store(result, (unint64_t *)&qword_1EDD81F78);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t _UIViewEnumerateConstraints(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  _BYTE v33[128];
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  if (objc_msgSend(a1, "_constraintsExceptingSubviewAutoresizingConstraints")
    && (v30 = 0u,
        v31 = 0u,
        v28 = 0u,
        v29 = 0u,
        v4 = (void *)objc_msgSend(a1, "_constraintsExceptingSubviewAutoresizingConstraints"),
        (v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v35, 16)) != 0))
  {
    v6 = v5;
    v7 = *(_QWORD *)v29;
LABEL_4:
    v8 = 0;
    while (1)
    {
      if (*(_QWORD *)v29 != v7)
        objc_enumerationMutation(v4);
      result = (*(uint64_t (**)(uint64_t, _QWORD, char *))(a2 + 16))(a2, *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * v8), &v32);
      if (v32)
        break;
      if (v6 == ++v8)
      {
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v35, 16);
        if (v6)
          goto LABEL_4;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v10 = (void *)objc_msgSend(a1, "_allSubviews");
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v34, 16);
    if (result)
    {
      v11 = result;
      v12 = *(_QWORD *)v25;
      while (2)
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v25 != v12)
            objc_enumerationMutation(v10);
          v14 = *(_QWORD **)(*((_QWORD *)&v24 + 1) + 8 * v13);
          if (-[UIView _usesAutoresizingConstraints]((uint64_t)v14))
          {
            v22 = 0u;
            v23 = 0u;
            v20 = 0u;
            v21 = 0u;
            v15 = (void *)-[UIView _autoresizingConstraints](v14);
            v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v33, 16);
            if (v16)
            {
              v17 = v16;
              v18 = *(_QWORD *)v21;
LABEL_18:
              v19 = 0;
              while (1)
              {
                if (*(_QWORD *)v21 != v18)
                  objc_enumerationMutation(v15);
                result = (*(uint64_t (**)(uint64_t, _QWORD, char *))(a2 + 16))(a2, *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v19), &v32);
                if (v32)
                  return result;
                if (v17 == ++v19)
                {
                  v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v33, 16);
                  if (v17)
                    goto LABEL_18;
                  break;
                }
              }
            }
          }
          ++v13;
        }
        while (v13 != v11);
        result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v34, 16);
        v11 = result;
        if (result)
          continue;
        break;
      }
    }
  }
  return result;
}

BOOL _UILayoutAttributeIsBaselineAttribute(int a1)
{
  return (a1 - 11) < 2;
}

void sub_1850FA8A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1850FBD7C()
{
  return sub_1850F22DC();
}

void _UILANotifyCanvasesOfSizeInvalidationForItemIfNecessary(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "superview");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v1;
  v4 = v2;
  v5 = v4;
  v6 = v3;
  if (v4)
  {
    v6 = v3;
    v7 = v4;
    do
    {
      if (objc_msgSend(v6, "_hostsLayoutEngine") && v7 != v5)
        break;
      objc_msgSend(v6, "superview");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      objc_msgSend(v8, "_mutableLayoutArrangements", 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v16;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v16 != v12)
              objc_enumerationMutation(v9);
            v14 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
            if (objc_msgSend(v14, "_monitorsSystemLayoutFittingSizeForItem:", v6))
              objc_msgSend(v14, "_systemLayoutFittingSizeDidChangeForItem:", v6);
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        }
        while (v11);
      }

      v7 = v8;
      v6 = v7;
    }
    while (v7);

  }
}

uint64_t UIViewInProcessAnimationManagerPreferredFrameRateRangeComponent(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    LODWORD(v4) = 0;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v1);
        v7 = objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "intValue");
        if ((int)v4 <= v7)
          v4 = v7;
        else
          v4 = v4;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t _UIDeviceNativeUserInterfaceIdiomIgnoringClassic()
{
  void *v0;
  int v1;
  int v2;
  void *v3;
  void *v4;

  v0 = (void *)MGCopyAnswer();
  v1 = objc_msgSend(v0, "intValue");
  if (v0)
    CFRelease(v0);
  v2 = v1 - 1;
  if ((v1 - 1) < 7 && ((0x6Fu >> v2) & 1) != 0)
    return qword_18667E018[v2];
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIUserInterfaceIdiom _UIDeviceNativeUserInterfaceIdiomIgnoringClassic(void)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIDevice.m"), 853, CFSTR("Device type is not associated with user interface idiom."));

  return -1;
}

uint64_t UITraitCollection.modifyingTraits(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t result;
  _QWORD v11[6];

  v3 = v2;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_185281894;
  *(_QWORD *)(v7 + 24) = v6;
  v11[4] = sub_185281934;
  v11[5] = v7;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_185281858;
  v11[3] = &block_descriptor_13;
  v8 = _Block_copy(v11);
  swift_retain();
  swift_release();
  v9 = objc_msgSend(v3, sel_traitCollectionByModifyingTraits_, v8);
  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v8 & 1) == 0)
    return (uint64_t)v9;
  __break(1u);
  return result;
}

uint64_t UITraitCollection._modifyingTraits(environmentWrapper:mutations:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t result;
  _QWORD v14[6];

  v4 = v3;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_185281938;
  *(_QWORD *)(v9 + 24) = v8;
  v14[4] = sub_185281934;
  v14[5] = v9;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_185281858;
  v14[3] = &block_descriptor_23;
  v10 = _Block_copy(v14);
  v11 = a1;
  swift_retain();
  swift_release();
  v12 = objc_msgSend(v4, sel_traitCollectionByModifyingTraits_, v10);
  _Block_release(v10);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v10 & 1) == 0)
    return (uint64_t)v12;
  __break(1u);
  return result;
}

uint64_t UIMutableTraits.displayScale.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a2 + 32))(&type metadata for UITraitDisplayScale, &type metadata for UITraitDisplayScale, &protocol witness table for UITraitDisplayScale, a1, a2);
}

ValueMetadata *type metadata accessor for UICellAccessory.DisclosureIndicatorOptions()
{
  return &type metadata for UICellAccessory.DisclosureIndicatorOptions;
}

void UICellAccessory.MultiselectOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  sub_185192034(a1, a2, a3, a4, (uint64_t *)&unk_1EDD81AE0, (id *)&qword_1EDD81AD8, a5);
}

void sub_185100A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double UIRectIntegralWithScale(double a1, double a2, double a3, double a4, double a5)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  if (CGRectIsNull(*(CGRect *)&a1))
    return a1;
  v8 = a5;
  if (a5 == 0.0)
  {
    if (AdjustToScale_onceToken_0 != -1)
      dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
    v8 = *(double *)&AdjustToScale___s_0;
  }
  if (v8 == 1.0)
  {
    v9 = ceil(a1);
    v10 = floor(a1);
    if (v9 - a1 >= 0.0001)
      v7 = v10;
    else
      v7 = v9;
  }
  else
  {
    v11 = ceil(a1 * v8);
    v12 = floor(a1 * v8);
    if (v11 - a1 * v8 < 0.0001)
      v12 = v11;
    v7 = v12 / v8;
  }
  if (a5 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  if (a5 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  if (a5 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  return v7;
}

void sub_185102E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UINonTAMICViewCanHostLayoutEngine()
{
  if ((dyld_program_sdk_at_least() & 1) != 0 || (__forceHostLayoutEngineOnlyTAMIC_YES & 1) != 0)
    return 0;
  else
    return dyld_program_sdk_at_least();
}

uint64_t discardEngineRecursive(void *a1, void *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a1, "_layoutEngine");
  if ((void *)result == a2)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v5 = (void *)objc_msgSend(a1, "_allSubviews", 0);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v11;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v11 != v8)
            objc_enumerationMutation(v5);
          discardEngineRecursive(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v9++), a2);
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v7);
    }
    if ((void *)objc_msgSend(a2, "delegate") == a1)
      objc_msgSend(a2, "setDelegate:", 0);
    objc_msgSend(a1, "_setLayoutEngine:", 0);
    return objc_msgSend(a1, "_clearLayoutVariableObservationsOnlyToSupportTAMICChange:", 0);
  }
  return result;
}

ValueMetadata *type metadata accessor for UITraitLayoutDirection()
{
  return &type metadata for UITraitLayoutDirection;
}

uint64_t static UIView.Invalidating.subscript.setter(char *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  id v21;
  void (*v22)(id *, _QWORD);
  uint64_t v23;
  id v25;
  char *v26;
  uint64_t v27;
  void (*v28)(void);
  id v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  id v37[4];
  id v38;

  v5 = *(_QWORD *)(*a4 + *MEMORY[0x1E0DED210] + 8);
  v33 = *(_QWORD *)(v5 + 24);
  v6 = *(_QWORD *)(v33 - 8);
  v35 = a3;
  v36 = v6;
  MEMORY[0x1E0C80A78](a1);
  v32 = (char *)&v30 - v7;
  v10 = *(_QWORD *)(v8 + v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v30 - v17;
  v37[0] = v19;
  v20 = v19;
  swift_retain();
  swift_getAtKeyPath();

  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, v10);
  v31 = *(void (**)(char *, uint64_t))(v15 + 8);
  v31(v18, v5);
  LOBYTE(v15) = sub_1865074C8();
  v34 = *(void (**)(char *, uint64_t))(v11 + 8);
  v34(v14, v10);
  v38 = v20;
  v21 = v20;
  v22 = (void (*)(id *, _QWORD))swift_modifyAtReferenceWritableKeyPath();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 24))(v23, a1, v10);
  v22(v37, 0);

  if ((v15 & 1) != 0)
  {

    swift_release();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v34)(a1, v10);
  }
  else
  {
    v37[0] = v21;
    v25 = v21;
    swift_retain();
    swift_getAtKeyPath();

    swift_release();
    v26 = v32;
    v27 = v33;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v32, &v18[*(int *)(v5 + 52)], v33);
    v31(v18, v5);
    v28 = *(void (**)(void))(*(_QWORD *)(v5 + 40) + 8);
    v29 = v25;
    v28();
    swift_release();
    swift_release();

    v34(a1, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v26, v27);
  }
}

uint64_t sub_185104760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

id sub_1851047BC(void *a1)
{
  return objc_msgSend(a1, sel_setNeedsDisplay);
}

void _applyTransitionAnimationToView(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (+[UIView _isInAnimationBlock](UIView, "_isInAnimationBlock")
    && !+[UIView _isInRetargetableAnimationBlock](UIView, "_isInRetargetableAnimationBlock"))
  {
    objc_msgSend(v5, "layer");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "animationForKey:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    +[_UIViewKeyValueAnimationFactory animationsTransitioningFromAnimation:toAnimation:onView:](_UIViewKeyValueAnimationFactory, "animationsTransitioningFromAnimation:toAnimation:onView:", v9, v7, v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v18;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v18 != v13)
            objc_enumerationMutation(v10);
          v15 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v14);
          objc_msgSend(v5, "layer");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "addAnimation:forKey:", v15, 0);

          ++v14;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v12);
    }

  }
}

void _UIScrollViewAdjustForOverlayInsetsChangeIfNecessary(void *a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  char *v19;
  char *v20;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char v38;
  double v39;
  double v40;
  double v41;
  int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  NSObject *v56;
  NSObject *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint8_t buf[16];
  uint8_t v69[16];

  v19 = a1;
  v20 = v19;
  if (a8 != a4 || a7 != a3 || a10 != a6 || a9 != a5)
  {
    v24 = objc_msgSend(v19, "_isAutomaticContentOffsetAdjustmentEnabled");
    v65 = a7;
    v25 = a3 - a7;
    v26 = a4 - a8;
    objc_msgSend(v20, "contentInset");
    v28 = v27;
    v59 = v30;
    v60 = v29;
    v58 = v31;
    objc_msgSend(v20, "scrollIndicatorInsets");
    v61 = v33;
    v62 = v32;
    v63 = v35;
    v64 = v34;
    objc_msgSend(v20, "contentOffset");
    v66 = v36;
    v67 = v37;
    if (objc_msgSend(v20, "_shouldContentOffsetMaintainRelativeDistanceFromSafeArea"))
    {
      v38 = objc_msgSend(v20, "_edgesApplyingSafeAreaInsetsToContentInset");
      v39 = 0.0;
      v40 = v25 + 0.0;
      if ((v38 & 1) == 0)
        v40 = 0.0;
      v41 = v67 - v40;
      if ((v38 & 2) != 0)
        v42 = a2;
      else
        v42 = 1;
      if (!v42)
        v39 = v26 + 0.0;
      objc_msgSend(v20, "_applyAutomaticAdjustedContentOffset:", v66 - v39, v41);
    }
    v43 = a5 - a9;
    objc_msgSend(v20, "_setAutomaticContentOffsetAdjustmentEnabled:", 0);
    if (a2)
      objc_msgSend(v20, "setContentInset:", v25 + v28, v26 + v60, v43 + v59, a6 - a10 + v58);
    else
      objc_msgSend(v20, "_updateForChangedScrollRelatedInsets");
    v44 = v65;
    if (v24)
      objc_msgSend(v20, "_setAutomaticContentOffsetAdjustmentEnabled:", 1);
    if (a2)
    {
      v45 = v43 + v61;
      v46 = v66;
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(v20 + 552), *(float64x2_t *)(v20 + 584)), (int32x4_t)vceqq_f64(*(float64x2_t *)(v20 + 568), *(float64x2_t *)(v20 + 600)))), 0xFuLL))) & 1) == 0)
      {
        if (os_variant_has_internal_diagnostics())
        {
          __UIFaultDebugAssertLog();
          v57 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)v69 = 0;
            _os_log_fault_impl(&dword_185066000, v57, OS_LOG_TYPE_FAULT, "UIScrollView legacy code path will unexpectedly clobber _vertical/horizontalScrollIndicatorInsets. This is a UIKit bug.", v69, 2u);
          }

          v44 = v65;
          v46 = v66;
        }
        else
        {
          v55 = _UIScrollViewAdjustForOverlayInsetsChangeIfNecessary___s_category;
          if (!_UIScrollViewAdjustForOverlayInsetsChangeIfNecessary___s_category)
          {
            v55 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v55, (unint64_t *)&_UIScrollViewAdjustForOverlayInsetsChangeIfNecessary___s_category);
          }
          v56 = *(NSObject **)(v55 + 8);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_185066000, v56, OS_LOG_TYPE_ERROR, "UIScrollView legacy code path will unexpectedly clobber _vertical/horizontalScrollIndicatorInsets. This is a UIKit bug.", buf, 2u);
          }
        }
      }
      objc_msgSend(v20, "setScrollIndicatorInsets:", v25 + v62, v64, v45, v63);
    }
    else
    {
      objc_msgSend(v20, "_updateForChangedScrollIndicatorRelatedInsets");
      v46 = v66;
    }
    objc_msgSend(v20, "contentOffset");
    if (v48 == v46 && v47 == v67)
      objc_msgSend(v20, "_adjustContentOffsetIfNecessary");
    objc_msgSend(v20, "_effectiveContentInset");
    v50 = v49;
    v52 = v51;
    objc_msgSend(v20, "contentOffset");
    if (floor(v52 + v54) != floor(a8 + v46) || floor(v50 + v53) != floor(v44 + v67))
      objc_msgSend(v20, "_notifyDidScroll");
  }

}

BOOL _UILAIsAnimatingOnCanvas(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;

  v1 = a1;
  if (+[UIView _isInAnimationBlockWithAnimationsEnabled](UIView, "_isInAnimationBlockWithAnimationsEnabled"))
  {
    objc_msgSend(v1, "_window");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v2 != 0;

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t ___telemetryReportOffsetChange_block_invoke()
{
  return AnalyticsSendEventLazy();
}

uint64_t storeEnumTagSinglePayload for UICellAccessory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void _UISplitViewControllerCheckSupportColumnStyleRaiseIfNot(_QWORD *a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  const __CFString *v6;

  v1 = (void *)a1[121];
  v2 = a1;
  v3 = objc_msgSend(v1, "style");
  v4 = objc_msgSend(v2, "style");

  if (v3)
    v5 = v4 == v3;
  else
    v5 = 1;
  if (v5)
  {
    if (v3)
      return;
    v6 = CFSTR("This API requires initializing the UISplitViewController with -initWithStyle:");
  }
  else
  {
    v6 = CFSTR("Overriding the style property unsupported for a UISplitViewController created with -initWithStyle:");
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], v6);
}

uint64_t __setupCA_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (pthread_main_np() == 1)
  {
    *(_DWORD *)(v1 + 448) = 2;
    _UIUpdateInputSetInputChanged(*(_DWORD **)(v1 + 496), v1 + 448);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __displayLinksWillFire_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v1;
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
  return 0;
}

void _UIQOSProcessingEnd()
{
  _MergedGlobals_1293 = 0;
  if (qword_1ECD82128 != -1)
    dispatch_once(&qword_1ECD82128, &__block_literal_global_5_13);
  if (!--dword_1ECD82138)
  {
    _tracepointArg4((uint64_t)&qword_1ECD82130);
    kdebug_trace();
    if ((_BYTE)word_1ECD82168)
    {
      if ((objc_msgSend(MEMORY[0x1E0CD28B0], "currentState") & 1) != 0)
      {
        HIBYTE(word_1ECD82168) = 1;
        _waitCommitEnd();
      }
      else
      {
        _endInterval(&qword_1ECD82130);
      }
    }
    else
    {
      word_1ECD82168 = 0;
      qword_1ECD82170 = 0;
    }
  }
}

uint64_t (*(*(*(*schedulerStepScheduledMainSection(uint64_t a1))(uint64_t a1, uint64_t *a2))(uint64_t a1))(uint64_t a1))()
{
  char v2;
  double v3;
  uint64_t v4;

  v2 = *(_BYTE *)(a1 + 761);
  if (v2)
    v2 = *(_BYTE *)(a1 + 760) == 0;
  *(_BYTE *)(a1 + 681) = v2;
  v3 = _UIMediaTimeForMachTime(*(_QWORD *)(a1 + 648));
  v4 = mach_absolute_time();
  _UIQOSProcessingBegin("UIUCMain", 0, v4, *(_QWORD *)(a1 + 664));
  kdebug_trace();
  qword_1ECD82BF0 = v4;
  _UIUpdateSequenceRun((uint64_t **)&_UIUpdateMainSequence, a1 + 616, v3);
  kdebug_trace();
  _UIQOSProcessingEnd();
  return schedulerStepScheduledWaitingLowLatencyInputs;
}

uint64_t _UIQOSProcessingBegin(char *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  const char *v11;
  uint64_t v12;
  char *v13;
  char __dst[8];

  v5 = a3;
  _MergedGlobals_1293 = 0;
  if (qword_1ECD82128 == -1)
  {
    if (a3)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&qword_1ECD82128, &__block_literal_global_5_13);
    if (v5)
      goto LABEL_5;
  }
  v5 = _MergedGlobals_1293;
  if (!_MergedGlobals_1293)
  {
    v5 = mach_absolute_time();
    _MergedGlobals_1293 = v5;
  }
LABEL_5:
  if (!a4)
    a4 = qword_1ECD82140 + v5;
  if (qword_1ECD82118 != -1)
    dispatch_once(&qword_1ECD82118, &__block_literal_global_610);
  v8 = qword_1ECD82120 + a4;
  v9 = ++qword_1ECD82110;
  if (!dword_1ECD82138++)
  {
    if (!_MergedGlobals_1293)
      _MergedGlobals_1293 = mach_absolute_time();
    strncpy(__dst, __src, 8uLL);
    _tracepointArg4((uint64_t)&qword_1ECD82130);
    kdebug_trace();
    if (!(_BYTE)word_1ECD82168)
    {
      qword_1ECD82148 = v5;
      qword_1ECD82150 = v8;
      qword_1ECD82170 |= a2;
      if (CFDictionaryGetCount((CFDictionaryRef)qword_1ECD82130))
        _beginInterval();
      return v9;
    }
  }
  if (qword_1ECD82148 > v5)
  {
    v11 = __src;
    v12 = a2;
    qword_1ECD82148 = v5;
    if (qword_1ECD82150 <= v8)
    {
LABEL_19:
      v13 = (char *)v11;
      strncpy(__dst, v11, 8uLL);
      _tracepointArg4((uint64_t)&qword_1ECD82130);
      kdebug_trace();
      a2 = v12;
      __src = v13;
      if ((_BYTE)word_1ECD82168)
      {
        work_interval_instance_set_start();
        work_interval_instance_set_deadline();
        _adjustOptions(v13, a2);
LABEL_22:
        work_interval_instance_update();
        return v9;
      }
      goto LABEL_21;
    }
LABEL_18:
    qword_1ECD82150 = v8;
    goto LABEL_19;
  }
  if (qword_1ECD82150 > v8)
  {
    v11 = __src;
    v12 = a2;
    goto LABEL_18;
  }
LABEL_21:
  if (_adjustOptions(__src, a2))
    goto LABEL_22;
  return v9;
}

unint64_t _tracepointArg4(uint64_t a1)
{
  unint64_t v1;

  v1 = (unsigned __int16)((*(_DWORD *)(a1 + 64) << 8) | *(unsigned __int8 *)(a1 + 56) | (unsigned __int16)(2 * *(unsigned __int8 *)(a1 + 57)) | (4 * *(unsigned __int8 *)(a1 + 12))) | ((unint64_t)*(_DWORD *)(a1 + 8) << 16);
  return v1 | (CFDictionaryGetCount(*(CFDictionaryRef *)a1) << 24);
}

void _UIUpdateSequenceRun(uint64_t **a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v3 = *a1;
  if (*a1)
  {
    do
    {
      v6 = v3[5];
      if (v6)
      {
        *((_DWORD *)v3 + 6) |= 1u;
        (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v6 + 16))(v6, v3[4], a2, a3);
        v7 = *((_DWORD *)v3 + 6);
        *((_DWORD *)v3 + 6) = v7 & 0xFFFFFFFE;
        v8 = (uint64_t *)*v3;
        if ((v7 & 2) != 0)
          _removeItem((_UIUpdateSequenceItemInternal *)v3);
      }
      else
      {
        v8 = (uint64_t *)*v3;
      }
      v3 = v8;
    }
    while (v8);
  }
}

uint64_t __setupUpdateSequence_block_invoke_2(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(MEMORY[0x1E0CD28B0], "currentState"))
  {
    v3 = *(_QWORD *)(a2 + 656);
    if (v3)
      objc_msgSend(MEMORY[0x1E0CD28B0], "setUpdateDeadline:", _UIMediaTimeForMachTime(v3));
    v4 = *(_QWORD *)(a2 + 704);
    if (v4)
      objc_msgSend(MEMORY[0x1E0CD28B0], "setCommitTime:", _UIMediaTimeForMachTime(v4));
    if (*(_BYTE *)(a2 + 761) && !*(_BYTE *)(a2 + 760) && !*(_BYTE *)(a2 + 762))
      objc_msgSend(MEMORY[0x1E0CD28B0], "setLowLatency:", 1);
    _UIQOSMarkIntervalRelevant();
  }
  if ((_QWORD)xmmword_1ECD82BE0)
    objc_msgSend(MEMORY[0x1E0CD28B0], "setFrameInputTime:withToken:", *(unsigned int *)(a2 + 584), _UIMediaTimeForMachTime(xmmword_1ECD82BE0));
  v5 = *((_QWORD *)&xmmword_1ECD82BE0 + 1);
  if (*((_QWORD *)&xmmword_1ECD82BE0 + 1))
  {
    v6 = performCATransactionCommitAction___s_category;
    if (!performCATransactionCommitAction___s_category)
    {
      v6 = __UILogCategoryGetNode("RemoteTimestamp", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&performCATransactionCommitAction___s_category);
      v5 = *((_QWORD *)&xmmword_1ECD82BE0 + 1);
    }
    v7 = *(NSObject **)(v6 + 8);
    if (os_signpost_enabled(v7))
    {
      v9 = 134217984;
      v10 = v5;
      _os_signpost_emit_with_name_impl(&dword_185066000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SetRemoteTimestamp", "remoteTime=%llu", (uint8_t *)&v9, 0xCu);
      v5 = *((_QWORD *)&xmmword_1ECD82BE0 + 1);
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "setRemoteInputMachTime:", v5);
  }
  *(_DWORD *)(a2 + 352) = 0;
  _UIUpdateInputSetInputChanged(*(_DWORD **)(a2 + 400), a2 + 352);
  return _UIApplicationFlushCATransaction(1);
}

uint64_t _UIUpdateInputSetInputChanged(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  int v6;
  int v7;
  char __dst[8];

  if (_UIUpdateCycleDebugTracingCheck)
  {
    v6 = _UIUpdateCycleDebugTracingCheck();
    if (v6)
    {
      v7 = v6;
      strncpy(__dst, *(const char **)(a2 + 88), 8uLL);
      kdebug_trace();
      if (v7 != 1)
        getppid();
    }
  }
  a1[10] = 2;
  result = *(_QWORD *)a1;
  *(_QWORD *)(result + 16) = *(_QWORD *)(*(_QWORD *)a1 + 16) + 1;
  v4 = *(_DWORD *)result | 1;
  if (*(_DWORD *)result != v4)
  {
    *(_DWORD *)result = v4;
    if (!*(_DWORD *)(result + 8))
      return (*(uint64_t (**)(uint64_t, _QWORD))(result + 24))(result, *(_QWORD *)(result + 32));
  }
  return result;
}

void signalChanges(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = v2 | a2 | 1;
  if ((v2 & 1) == 0)
  {
    v3 = *(_QWORD *)(a1 + 8);
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(v3 + 16));
    CFRunLoopWakeUp(*(CFRunLoopRef *)(v3 + 8));
  }
}

void inputGroupSignaledCallback(uint64_t a1, uint64_t a2)
{
  signalChanges(a2, 1);
}

uint64_t (*schedulerStepScheduling(uint64_t a1, unint64_t *a2))()
{
  int v4;
  uint64_t (*result)();
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  NSObject *v47;
  id v48;
  _QWORD *v49;
  int v50;
  const char *v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  NSObject *v60;
  NSObject *v61;
  id v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint8_t buf[4];
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if ((v4 & 4) == 0)
    goto LABEL_2;
  *(_DWORD *)(*(_QWORD *)a1 + 4) = v4 & 0xFFFFFFFB;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v26 = +[UIScene _unsafeScenesIncludingInternal](UIScene, "_unsafeScenesIncludingInternal");
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v68, &v78, 16);
  if (!v27)
  {
    v29 = 0;
    goto LABEL_61;
  }
  v28 = v27;
  v29 = 0;
  v30 = *(_QWORD *)v69;
  v67 = (uint64_t *)(a1 + 544);
  do
  {
    for (i = 0; i != v28; ++i)
    {
      if (*(_QWORD *)v69 != v30)
        objc_enumerationMutation(v26);
      v32 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * i);
      if (objc_msgSend(v32, "_hostsWindows"))
      {
        objc_msgSend(v32, "_visibleWindows");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = objc_msgSend(v33, "count");

        if (v34)
        {
          objc_msgSend(v32, "_effectiveSettings");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v32, "_hasLifecycle") && !objc_msgSend(v35, "isForeground"))
          {
            v36 = v35;
          }
          else
          {
            objc_msgSend(v35, "displayConfiguration");
            v36 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v36)
              continue;
            objc_msgSend(v36, "identity");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = objc_msgSend(v37, "displayID");

            v39 = (_DWORD *)(a1 + 544);
            while (1)
            {
              v39 = *(_DWORD **)v39;
              if (!v39)
                break;
              if (v39[6] == v38)
                goto LABEL_55;
            }
            objc_msgSend(v36, "CADisplay");
            v40 = objc_claimAutoreleasedReturnValue();
            v39 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A00405421CD5EuLL);
            v41 = (void *)*((_QWORD *)v39 + 2);
            *((_QWORD *)v39 + 2) = v40;

            v39[6] = v38;
            v42 = *v67;
            *(_QWORD *)v39 = *v67;
            if (v42)
              *(_QWORD *)(v42 + 8) = v39;
            *v67 = (uint64_t)v39;
            *((_QWORD *)v39 + 1) = v67;
            v29 = 1;
LABEL_55:
            v39[7] = 1;
          }

        }
      }
    }
    v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v68, &v78, 16);
  }
  while (v28);
LABEL_61:

  v43 = *(_DWORD **)(a1 + 544);
  if (v43)
  {
    do
    {
      v44 = *(_QWORD *)v43;
      if (v43[7])
      {
        v43[7] = 0;
      }
      else
      {
        if (v44)
          *(_QWORD *)(v44 + 8) = *((_QWORD *)v43 + 1);
        **((_QWORD **)v43 + 1) = v44;
        v45 = (void *)*((_QWORD *)v43 + 2);
        *((_QWORD *)v43 + 2) = 0;

        free(v43);
        v29 = 1;
      }
      v43 = (_DWORD *)v44;
    }
    while (v44);
  }
  if ((v29 & 1) != 0)
  {
    v46 = qword_1ECD7F480;
    if (!qword_1ECD7F480)
    {
      v46 = __UILogCategoryGetNode("UpdateScheduler", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v46, (unint64_t *)&qword_1ECD7F480);
    }
    v47 = *(id *)(v46 + 8);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      v48 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
      v49 = *(_QWORD **)(a1 + 544);
      if (v49)
      {
        v50 = 0;
        do
        {
          if (v50)
            v51 = ", ";
          else
            v51 = "";
          objc_msgSend(v48, "appendFormat:", CFSTR("%s%@"), v51, v49[2]);
          v49 = (_QWORD *)*v49;
          --v50;
        }
        while (v49);
      }
      *(_DWORD *)buf = 138412290;
      v73 = (uint64_t)v48;
      _os_log_impl(&dword_185066000, v47, OS_LOG_TYPE_DEFAULT, "Target list changed: %@", buf, 0xCu);

    }
LABEL_81:
    v52 = *(_QWORD *)(a1 + 544);
    if (v52 && !*(_QWORD *)v52)
    {
      v53 = *(id *)(v52 + 16);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CD2728], "mainDisplay");
      v53 = (id)objc_claimAutoreleasedReturnValue();
    }
    v54 = v53;
    v55 = *(_QWORD *)(a1 + 552);
    if (v55)
      v56 = *(_DWORD *)(v55 + 24);
    else
      v56 = 0;
    if (v56 != objc_msgSend(v53, "displayId"))
    {
      if (v54)
      {
        +[_UIUpdateTarget targetWithCADisplay:]((uint64_t)_UIUpdateTarget, v54);
        v57 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v57 = 0;
      }
      v58 = *(void **)(a1 + 552);
      *(_QWORD *)(a1 + 552) = v57;

      v59 = qword_1ECD7F488;
      if (!qword_1ECD7F488)
      {
        v59 = __UILogCategoryGetNode("UpdateScheduler", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v59, (unint64_t *)&qword_1ECD7F488);
      }
      v60 = *(NSObject **)(v59 + 8);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        v61 = v60;
        objc_msgSend(v54, "name");
        v62 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v63 = objc_msgSend(v62, "UTF8String");
        objc_msgSend(v54, "deviceName");
        v64 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v65 = objc_msgSend(v64, "UTF8String");
        v66 = objc_msgSend(v54, "displayId");
        *(_DWORD *)buf = 136315650;
        v73 = v63;
        v74 = 2080;
        v75 = v65;
        v76 = 1024;
        v77 = v66;
        _os_log_impl(&dword_185066000, v61, OS_LOG_TYPE_DEFAULT, "Selected display: name=%s (%s), id=%x", buf, 0x1Cu);

      }
    }

  }
  else if (!*(_QWORD *)(a1 + 552))
  {
    goto LABEL_81;
  }
LABEL_2:
  applyRequestRegistryChanges(a1);
  mainGroup &= ~1u;
  result = (uint64_t (*)())_UIUpdateInputScopeAggregate(a1 + 176, *(_DWORD *)(a1 + 684));
  v6 = *(_DWORD *)result;
  if (*(_DWORD *)result == 2)
  {
    v10 = result;
    applyTimingChanges((uint64_t *)a1);
    v11 = mach_absolute_time() + 1000000000000000;
    v12 = *((_QWORD *)v10 + 1);
    if (*(_BYTE *)(a1 + 760))
    {
      v13 = *((_QWORD *)v10 + 3);
      v14 = *(_QWORD *)(a1 + 568);
      if (v13 >= v14)
        v14 = 0;
      v15 = v13 - v14;
      if (v12 >= v15)
        v12 = v15;
    }
    v16 = v12 + 1000000000000000;
    v17 = v12 + 1000000000000000 + *(_QWORD *)(a1 + 560) - *(_QWORD *)(a1 + 712);
    if (v11 >= v17)
    {
      v19 = *(_QWORD *)(a1 + 552);
      if (!v19 || !*(_BYTE *)(v19 + 28))
        -[_UIUpdateTarget start](v19);
      if (*(_QWORD *)(a1 + 592) && v16 <= *(_QWORD *)(a1 + 600) + 1000000000000000 + *(_QWORD *)(a1 + 744))
        v16 = *(_QWORD *)(a1 + 600) + 1000000000000000 + *(_QWORD *)(a1 + 744);
      v20 = *(_QWORD *)(a1 + 576) + v11;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      v68 = 0uLL;
      *(_QWORD *)&v69 = 0;
      frameSourceGetTiming(&v68, a1, v16, v20, &v78);
      v21 = v78;
      if (v11 >= (uint64_t)v78 + 1000000000000000 - *(_QWORD *)(a1 + 712))
      {
        *(_OWORD *)(a1 + 616) = v68;
        *(_QWORD *)(a1 + 632) = v69;
        *(_DWORD *)(a1 + 640) = 1;
        v22 = v79;
        *(_QWORD *)(a1 + 696) = *((_QWORD *)&v80 + 1);
        *(_QWORD *)(a1 + 704) = v22;
        *(_QWORD *)(a1 + 648) = *(_QWORD *)(a1 + 616);
        *(_OWORD *)(a1 + 664) = *(_OWORD *)(a1 + 624);
        *(_QWORD *)(a1 + 656) = v21;
        *(_WORD *)(a1 + 680) = 0;
        *(_QWORD *)(a1 + 688) = *(_QWORD *)(a1 + 592);
        _UIUpdateSetCurrentTiming((unint64_t *)(a1 + 616), 1);
        v23 = *(_QWORD *)(a1 + 664);
        v24 = _UIMediaTimeForMachTime(*(_QWORD *)(a1 + 648));
        *(_DWORD *)(a1 + 584) = objc_msgSend(MEMORY[0x1E0CD28B0], "startFrameWithReason:beginTime:commitDeadline:", 35, v24, _UIMediaTimeForMachTime(v23));
        return (uint64_t (*)())schedulerStepScheduledBegin;
      }
      v18 = v78 - *(_QWORD *)(a1 + 712);
    }
    else
    {
      v18 = v17 - 1000000000000000;
    }
    if (v18 < *a2)
      *a2 = v18;
    goto LABEL_34;
  }
  if (v6 == 1)
  {
    v9 = *(_QWORD *)(a1 + 552);
    if (!v9 || !*(_BYTE *)(v9 + 28))
      -[_UIUpdateTarget start](v9);
    goto LABEL_33;
  }
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 552);
    if (v7 && *(_BYTE *)(v7 + 28))
    {
      v8 = *(_QWORD *)(a1 + 696);
      if (v8)
      {
        if (mach_absolute_time() < v8)
        {
          *a2 = v8;
          goto LABEL_33;
        }
        v7 = *(_QWORD *)(a1 + 552);
      }
      -[_UIUpdateTarget stop](v7);
      *(_DWORD *)(a1 + 640) = 0;
      *(_QWORD *)(a1 + 696) = 0;
    }
LABEL_33:
    v25 = mach_absolute_time();
    v18 = *(_QWORD *)(a1 + 608);
    if (v25 < v18)
LABEL_34:
      _UIUpdateMainStats = v18;
    **(_DWORD **)a1 = 2;
    return schedulerStepIdleWork;
  }
  return result;
}

uint64_t runloopSourceCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*(*v3)(int **, uint64_t *))();
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2 != -1 && v2 <= mach_absolute_time())
    *(_QWORD *)(a1 + 72) = -1;
  v7 = -1;
  v3 = schedulerStepDispatchState;
  do
  {
    result = (uint64_t)v3((int **)a1, (uint64_t *)&v7);
    v3 = (uint64_t (*(*)(int **, uint64_t *))())result;
  }
  while (result);
  v5 = *(_QWORD *)(a1 + 72);
  if (v5 != v7)
  {
    if (v7 == -1)
    {
      if (v5 != -1)
        result = _UIMachTimerCancel((mach_port_t *)(a1 + 32), 1);
    }
    else
    {
      result = mk_timer_arm_leeway();
    }
    *(_QWORD *)(a1 + 72) = v7;
  }
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if ((v6 & 1) != 0)
    *(_DWORD *)(*(_QWORD *)a1 + 4) = v6 & 0xFFFFFFFE;
  return result;
}

uint64_t (*schedulerStepScheduledWaitingMainInputs(uint64_t a1, uint64_t *a2))()
{
  uint64_t (*result)();
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  applyRequestRegistryChanges(a1);
  mainGroup &= ~1u;
  if (*(_DWORD *)(a1 + 764))
  {
    **(_DWORD **)a1 = 3;
    _UIUpdateMainStats = mach_absolute_time();
    return schedulerStepIdleWork;
  }
  else
  {
    v12 = 0;
    v5 = *(_DWORD *)(a1 + 232);
    if (!v5)
      goto LABEL_9;
    v6 = *(_QWORD *)(a1 + 648);
    v7 = *(_DWORD *)(a1 + 684);
    v8 = 8 * (v5 - 1) + 240;
    v9 = 1;
    do
    {
      --v5;
      v9 = _UIUpdateInputSetReadyForModelTimeCombine(*(_QWORD *)(a1 + v8), v6, 0, v7, v9 & 1, &v12);
      v8 -= 8;
    }
    while (v5);
    if ((v9 & 1) != 0 || (v10 = mach_absolute_time(), v11 = v12, v10 >= v12))
    {
LABEL_9:
      v11 = 0;
      result = (uint64_t (*)())schedulerStepScheduledMainSection;
    }
    else
    {
      *a2 = v12;
      **(_DWORD **)a1 = 3;
      result = schedulerStepIdleWork;
    }
    _UIUpdateMainStats = v11;
  }
  return result;
}

uint64_t applyRequestRegistryChanges(uint64_t result)
{
  int v1;
  uint64_t v2;
  int v3;
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v15;
  uint64_t v16;
  _BOOL4 v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  int v26;
  _OWORD v27[2];

  v1 = *(_DWORD *)(*(_QWORD *)result + 4);
  if ((v1 & 2) == 0)
    return result;
  v2 = result;
  *(_DWORD *)(*(_QWORD *)result + 4) = v1 & 0xFFFFFFFD;
  v3 = mainRegistry;
  if ((mainRegistry & 2) != 0)
  {
    mainRegistry &= ~2u;
    *(_DWORD *)(result + 256) = 2 * (dword_1ECD82C74 != 0);
    _UIUpdateInputSetInputChanged(*(_DWORD **)(result + 304), result + 256);
    v3 = mainRegistry;
    if ((mainRegistry & 4) == 0)
    {
LABEL_5:
      if ((v3 & 0x10) == 0)
        goto LABEL_6;
      goto LABEL_33;
    }
  }
  else if ((mainRegistry & 4) == 0)
  {
    goto LABEL_5;
  }
  v3 &= ~4u;
  mainRegistry = v3;
  v17 = dword_1ECD82C78 != 0;
  *(_BYTE *)(v2 + 760) = v17;
  *(_DWORD *)(v2 + 684) = v17;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x80) == 0)
      goto LABEL_7;
LABEL_34:
    v3 &= ~0x80u;
    mainRegistry = v3;
    *(_BYTE *)(v2 + 762) = dword_1ECD82C80 != 0;
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
LABEL_35:
    mainRegistry = v3 & 0xFFFFFFDF;
    if (qword_1ECD82C58)
      v18 = (_DWORD *)qword_1ECD82C58;
    else
      v18 = &unk_1ECD82C60;
    v19 = (unsigned __int16)word_1ECD82C66;
    if (_UIUpdateCycleDebugTracingCheck && _UIUpdateCycleDebugTracingCheck())
    {
      v23 = 0;
      memset(v27, 0, sizeof(v27));
      v24 = emitUpdateReasonsTracepoint_serial++;
      LODWORD(v27[0]) = v24;
      v25 = 1;
      while (1)
      {
        if (v23 >= v19)
          v26 = 0;
        else
          v26 = v18[v23++];
        *((_DWORD *)v27 + v25++) = v26;
        if (v25 == 8)
        {
          kdebug_trace();
          v25 = 1;
          if (v23 >= v19)
            break;
        }
      }
    }
    v20 = *(_QWORD *)(v2 + 552);
    if (v20)
      objc_msgSend(*(id *)(v20 + 16), "setHighFrameRateReasons:count:", v18, v19);
    goto LABEL_8;
  }
LABEL_33:
  v3 &= ~0x10u;
  mainRegistry = v3;
  *(_BYTE *)(v2 + 761) = dword_1ECD82C7C != 0;
  if ((v3 & 0x80) != 0)
    goto LABEL_34;
LABEL_7:
  if ((v3 & 0x20) != 0)
    goto LABEL_35;
LABEL_8:
  result = _UIVariableFrameDurationEnabled();
  if ((_DWORD)result && (mainRegistry & 0x40) != 0)
  {
    mainRegistry &= ~0x40u;
    result = _UIUpdateRequestRegistryArbitratedRateRange((uint64_t)&mainRegistry);
    v7 = *(float *)&v4;
    v8 = *(float *)&v5;
    if (*(float *)&v5 == 0.0)
      v9 = 120.0;
    else
      v9 = *(float *)&v5;
    if (v9 < *(float *)&v6)
      v10 = v9;
    else
      v10 = *(float *)&v6;
    v11 = 60.0;
    if (v9 <= 60.0)
      v11 = v9;
    if (*(float *)&v6 == 0.0)
      v12 = v11;
    else
      v12 = v10;
    v13 = 30.0;
    if (v12 <= 30.0)
      v13 = v12;
    if (v12 < v7 || v7 == 0.0)
      v15 = v13;
    else
      v15 = v7;
    if (v7 <= 0.0)
    {
      v16 = -1;
    }
    else
    {
      result = _UIMachDurationForMediaDuration(1.0 / v7);
      v16 = result;
    }
    if (v8 <= 0.0)
    {
      v21 = 0;
    }
    else
    {
      result = _UIMachDurationForMediaDuration(1.0 / v8);
      v21 = result;
    }
    if (_UIUpdateCycleDebugTracingCheck)
    {
      result = _UIUpdateCycleDebugTracingCheck();
      if ((_DWORD)result)
        result = kdebug_trace();
    }
    v22 = *(_QWORD *)(v2 + 552);
    if (v22)
    {
      *(float *)&v4 = v15;
      *(float *)&v5 = v9;
      *(float *)&v6 = v12;
      result = objc_msgSend(*(id *)(v22 + 16), "setPreferredFrameRateRange:", v4, v5, v6);
    }
    *(_QWORD *)(v2 + 720) = v16;
    *(_QWORD *)(v2 + 728) = v21;
  }
  return result;
}

uint64_t _UIUpdateInputSetReadyForModelTimeCombine(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unint64_t *a6)
{
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  int v22;
  unint64_t v25;
  char __dst[8];

  if (*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 0;
    v10 = *(_DWORD *)(a1 + 68) + 1;
    v11 = malloc_type_realloc(*(void **)(a1 + 48), 16 * v10, 0x2004093837F09uLL);
    v12 = &v11[v10];
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    for (i = *(_QWORD *)(a1 + 72); i; i = *(_QWORD *)(i + 56))
    {
      if (*(_QWORD *)(i + 72))
      {
        *v11++ = i;
        if ((*(_BYTE *)(i + 24) & 1) != 0)
          *v12++ = i;
      }
    }
    *v11 = 0;
    *v12 = 0;
  }
  v14 = *(uint64_t **)(a1 + 48);
  if (v14)
  {
    if (a3)
      v14 = *(uint64_t **)(a1 + 56);
    v15 = *v14;
    if (*v14)
    {
      v16 = v14 + 1;
      do
      {
        v25 = 0;
        v17 = *(_QWORD *)(v15 + 8 * a4 + 32);
        if ((unint64_t)(a2 - v17) <= *(_QWORD *)(v15 + 16))
          v18 = 1;
        else
          v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, unint64_t *))(v15 + 72))(v15, *(_QWORD *)(v15 + 80), a2 - v17, a4, &v25);
        if (_UIUpdateCycleDebugTracingCheck)
        {
          v20 = _UIUpdateCycleDebugTracingCheck();
          if (v20)
          {
            v22 = v20;
            strncpy(__dst, *(const char **)(v15 + 88), 8uLL);
            kdebug_trace();
            if (v22 != 1)
              getppid();
          }
        }
        if ((v18 & 1) == 0 && ((a5 & 1) != 0 || *a6 < v25))
        {
          LOBYTE(a5) = 0;
          *a6 = v25;
        }
        v19 = *v16++;
        v15 = v19;
      }
      while (v19);
    }
    return a5 & 1;
  }
  return a5;
}

uint64_t inputDisplayLinksReadyForModelTimeCallback(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  double v8;
  unint64_t v9;
  uint64_t v10;

  if (objc_msgSend(MEMORY[0x1E0CD2730], "supportsExpectedWakeupBeforeCommitDeadline"))
  {
    objc_msgSend(MEMORY[0x1E0CD2730], "expectedWakeupBeforeCommitDeadline:", _UIMediaTimeForMachTime(a2[83]));
    v9 = _UIMachTimeForMediaTime(v8);
    v10 = a3;
    if (v9)
      v10 = a2[78];
    *a5 = v10;
    if (_UIUpdateCycleDebugTracingCheck && _UIUpdateCycleDebugTracingCheck())
      kdebug_trace();
  }
  else
  {
    *a5 = a2[94] + a3;
  }
  return 0;
}

double _UIMediaTimeForMachTime(unint64_t a1)
{
  if (qword_1ECD7F5A0 != -1)
    dispatch_once(&qword_1ECD7F5A0, &__block_literal_global_23_8);
  return (double)a1 / *(double *)&qword_1ECD7F5A8;
}

unint64_t _UIMachTimeForMediaTime(double a1)
{
  if (qword_1ECD7F5A0 != -1)
    dispatch_once(&qword_1ECD7F5A0, &__block_literal_global_23_8);
  return (unint64_t)(*(double *)&qword_1ECD7F5A8 * a1 + 0.5);
}

uint64_t _UIUpdateHIDDigitizerReadyForModelTime(uint64_t a1, uint64_t a2, unint64_t a3, int a4, unint64_t *a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  int v24;
  double v25;
  const char *v26;
  uint8_t *v27;
  NSObject *v28;
  uint32_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  NSObject *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  NSObject *v46;
  NSObject *v47;
  unint64_t v48;
  _OWORD v49[3];
  _OWORD v50[3];
  _OWORD v51[3];
  uint8_t v52[16];
  __int128 v53;
  __int128 v54;
  uint8_t buf[32];
  _BYTE v56[20];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v7 = *(_QWORD **)(a2 + 104);
  v8 = 10;
  if (!*(_BYTE *)(a2 + 160))
    v8 = 9;
  v9 = v7[v8];
  if (v9)
  {
    if (*(_BYTE *)(v9 + 8))
    {
      v11 = *(_QWORD *)(a2 + 152);
      v12 = v7[7];
      v13 = a3 - (*(_QWORD *)(a2 + 136) + v11);
      if ((v13 & 0x8000000000000000) != 0)
      {
        v14 = -(uint64_t)((*(_QWORD *)(a2 + 136) + v11 - a3) / v12);
      }
      else if (v13 % v12)
      {
        v14 = v13 / v12 + 1;
      }
      else
      {
        v14 = v13 / v12;
      }
      v30 = v7[8];
      v31 = v30 / v12;
      if ((v14 & 0x8000000000000000) != 0)
      {
        v32 = -(uint64_t)(-(uint64_t)v14 / v31);
      }
      else if (v14 % v31)
      {
        v32 = v14 / v31 + 1;
      }
      else
      {
        v32 = v14 / v31;
      }
      v33 = v11 + v32 * v30;
      *a5 = v33 + *(_QWORD *)(a2 + 144);
      if (!_UIUpdateCycleDebugTracingCheck)
        return 0;
      v48 = v33;
      result = _UIUpdateCycleDebugTracingCheck();
      if ((_DWORD)result)
      {
        v34 = mach_absolute_time();
        v35 = qword_1ECD802A0;
        if (!qword_1ECD802A0)
        {
          v35 = __UILogCategoryGetNode("EventBus", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v35, (unint64_t *)&qword_1ECD802A0);
        }
        v36 = *(NSObject **)(v35 + 8);
        result = os_signpost_enabled(v36);
        if ((_DWORD)result)
        {
          *(_OWORD *)v52 = 0u;
          v53 = 0u;
          v54 = 0u;
          v20 = v36;
          v37 = _UIMachTimeDebugDescriptionCopyCStr(a3, v34, (char *)v52, 0x30uLL);
          v38 = *a5;
          memset(v51, 0, sizeof(v51));
          v39 = _UIMachTimeDebugDescriptionCopyCStr(v38, v34, (char *)v51, 0x30uLL);
          v40 = *(_QWORD *)(a2 + 152);
          memset(v50, 0, sizeof(v50));
          v41 = _UIMachTimeDebugDescriptionCopyCStr(v40, v34, (char *)v50, 0x30uLL);
          memset(v49, 0, sizeof(v49));
          v42 = _UIMachTimeDebugDescriptionCopyCStr(v48, v34, (char *)v49, 0x30uLL);
          v43 = _UIMediaDurationForMachDuration(*(_QWORD *)(a2 + 144));
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v37;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v39;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v41;
          *(_WORD *)v56 = 2080;
          *(_QWORD *)&v56[2] = v42;
          *(_WORD *)&v56[10] = 2048;
          *(double *)&v56[12] = v43;
          v26 = "modelTime=%s, readyTime=%s, eventPhaseTime=%s, nextEventTime=%s, deadline=%.06f";
          v27 = buf;
          v28 = v20;
          v29 = 52;
          goto LABEL_34;
        }
      }
    }
    else
    {
      v16 = *(_QWORD *)v9 - *v7;
      if (a4 == 1)
        v16 += v7[5];
      *a5 = v16 + a3;
      if (!_UIUpdateCycleDebugTracingCheck)
        return 0;
      result = _UIUpdateCycleDebugTracingCheck();
      if ((_DWORD)result)
      {
        v17 = mach_absolute_time();
        v18 = qword_1ECD802A8;
        if (!qword_1ECD802A8)
        {
          v18 = __UILogCategoryGetNode("EventBus", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v18, (unint64_t *)&qword_1ECD802A8);
        }
        v19 = *(NSObject **)(v18 + 8);
        result = os_signpost_enabled(v19);
        if ((_DWORD)result)
        {
          memset(buf, 0, sizeof(buf));
          *(_OWORD *)v56 = 0u;
          v20 = v19;
          v21 = _UIMachTimeDebugDescriptionCopyCStr(a3, v17, (char *)buf, 0x30uLL);
          v22 = *a5;
          *(_OWORD *)v52 = 0u;
          v53 = 0u;
          v54 = 0u;
          v23 = _UIMachTimeDebugDescriptionCopyCStr(v22, v17, (char *)v52, 0x30uLL);
          v24 = *(unsigned __int8 *)(a2 + 160);
          v25 = _UIMediaDurationForMachDuration(*(_QWORD *)v9);
          LODWORD(v51[0]) = 136315906;
          *(_QWORD *)((char *)v51 + 4) = v21;
          WORD6(v51[0]) = 2080;
          *(_QWORD *)((char *)v51 + 14) = v23;
          WORD3(v51[1]) = 1024;
          DWORD2(v51[1]) = v24;
          WORD6(v51[1]) = 2048;
          *(double *)((char *)&v51[1] + 14) = v25;
          v26 = "modelTime=%s, ready=0, readyTime=%s, expecting=%u, deadline=%.06f";
          v27 = (uint8_t *)v51;
          v28 = v20;
          v29 = 38;
LABEL_34:
          _os_signpost_emit_with_name_impl(&dword_185066000, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HIDDigitizerInputReady", v26, v27, v29);

          return 0;
        }
      }
    }
  }
  else
  {
    if (_UIUpdateCycleDebugTracingCheck && _UIUpdateCycleDebugTracingCheck())
    {
      v44 = mach_absolute_time();
      v45 = _MergedGlobals_1215;
      if (!_MergedGlobals_1215)
      {
        v45 = __UILogCategoryGetNode("EventBus", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v45, (unint64_t *)&_MergedGlobals_1215);
      }
      v46 = *(NSObject **)(v45 + 8);
      if (os_signpost_enabled(v46))
      {
        memset(buf, 0, sizeof(buf));
        *(_OWORD *)v56 = 0u;
        v47 = v46;
        *(_DWORD *)v52 = 136315138;
        *(_QWORD *)&v52[4] = _UIMachTimeDebugDescriptionCopyCStr(a3, v44, (char *)buf, 0x30uLL);
        _os_signpost_emit_with_name_impl(&dword_185066000, v47, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HIDDigitizerInputReady", "modelTime=%s, ready=1", v52, 0xCu);

      }
    }
    return 1;
  }
  return result;
}

uint64_t (*schedulerStepDispatchState(int **a1, uint64_t *a2))()
{
  int v2;

  *a2 = -1;
  v2 = **a1;
  switch(v2)
  {
    case 4:
      return (uint64_t (*)())schedulerStepScheduledWaitingLowLatencyInputs((uint64_t)a1, a2);
    case 3:
      return schedulerStepScheduledWaitingMainInputs((uint64_t)a1, a2);
    case 2:
      return schedulerStepScheduling((uint64_t)a1, a2);
  }
  return 0;
}

uint64_t schedulerStepIdleWork()
{
  return 0;
}

uint64_t _UIUpdateInputScopeAggregate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int *v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (v4 == *(_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 48) == a2)
      return a1 + 16;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 32) = 0;
  v5 = *(_DWORD *)(a1 + 56);
  if (v5)
  {
    v6 = v5 - 1;
    do
    {
      v7 = v6;
      v8 = *(int **)(a1 + 8 * v6 + 64);
      _UIUpdateInputSetSyncAggregate(v8, a2);
      _UIUpdateInputAggregateCombine((int *)(a1 + 16), (uint64_t)(v8 + 2));
      --v6;
    }
    while (v7);
  }
  return a1 + 16;
}

int *_UIUpdateInputAggregateCombine(int *result, uint64_t a2)
{
  int v2;
  int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;

  if (*(_DWORD *)a2)
  {
    v2 = *result;
    if (*(_DWORD *)a2 == 1)
    {
      if (v2)
        goto LABEL_10;
      v3 = 1;
      goto LABEL_9;
    }
    v4 = *(_QWORD *)(a2 + 8);
    if (v2 != 2)
    {
      *((_QWORD *)result + 1) = v4;
      v3 = 2;
LABEL_9:
      *result = v3;
      goto LABEL_10;
    }
    if (v4 < *((_QWORD *)result + 1))
      *((_QWORD *)result + 1) = v4;
  }
LABEL_10:
  if (!*(_DWORD *)(a2 + 16))
    return result;
  v5 = result[4];
  if (*(_DWORD *)(a2 + 16) == 1)
  {
    if (v5)
      return result;
    v7 = 1;
LABEL_19:
    result[4] = v7;
    return result;
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v5 != 2)
  {
    *((_QWORD *)result + 3) = v6;
    v7 = 2;
    goto LABEL_19;
  }
  if (v6 < *((_QWORD *)result + 3))
    *((_QWORD *)result + 3) = v6;
  return result;
}

int *_UIUpdateInputSetSyncAggregate(int *result, unsigned int a2)
{
  int *v3;
  uint64_t i;

  if (result[10] != a2)
  {
    v3 = result + 2;
    result[10] = a2;
    result[2] = 0;
    result[6] = 0;
    for (i = *((_QWORD *)result + 9); i; i = *(_QWORD *)(i + 56))
      _UIUpdateInputAggregateInput((uint64_t)v3, (int *)i, a2);
    return _UIUpdateInputAggregateComplete(v3);
  }
  return result;
}

uint64_t _UIUpdateInputAggregateInput(uint64_t result, int *a2, unsigned int a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v3 = *a2;
  if (*a2)
  {
    if (v3 == 2)
    {
      v4 = *((_QWORD *)a2 + 1) + *(_QWORD *)&a2[2 * a3 + 8];
      if ((a2[6] & 1) != 0)
        v5 = result + 16;
      else
        v5 = result;
      v6 = *(_DWORD *)(result + 16 * (a2[6] & 1));
      goto LABEL_14;
    }
    if ((a2[6] & 1) != 0)
      v5 = result + 16;
    else
      v5 = result;
    v6 = *(_DWORD *)(result + 16 * (a2[6] & 1));
    if (v3 != 1)
    {
      v4 = 0;
LABEL_14:
      if (v6 == 2)
      {
        if (v4 < *(_QWORD *)(v5 + 8))
          *(_QWORD *)(v5 + 8) = v4;
      }
      else
      {
        *(_QWORD *)(v5 + 8) = v4;
        *(_DWORD *)v5 = 2;
      }
      return result;
    }
    if (!v6)
      *(_DWORD *)(result + 16 * (a2[6] & 1)) = 1;
  }
  return result;
}

int *_UIUpdateInputAggregateComplete(int *result)
{
  int v1;
  unint64_t v2;
  int v3;

  if (result[4])
  {
    v1 = *result;
    if (result[4] == 1)
    {
      if (v1)
        return result;
      v3 = 1;
LABEL_10:
      *result = v3;
      return result;
    }
    v2 = *((_QWORD *)result + 3);
    if (v1 != 2)
    {
      *((_QWORD *)result + 1) = v2;
      v3 = 2;
      goto LABEL_10;
    }
    if (v2 < *((_QWORD *)result + 1))
      *((_QWORD *)result + 1) = v2;
  }
  return result;
}

double frameSourceGetTiming(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v8 = *(_QWORD *)(a2 + 560);
  v9 = *(unsigned __int8 *)(a2 + 761);
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  -[_UIUpdateTarget requestPresentaionForMode:earliestReferenceDeadlineTime:earliestCommitDeadlineTime:](*(_QWORD *)(a2 + 552), v9, a3 - 1000000000000000 + v8, a4 - 1000000000000000, (unint64_t *)&v13);
  v10 = *((_QWORD *)&v13 + 1);
  *a1 = v13 - v8;
  a1[1] = v10;
  a1[2] = *((_QWORD *)&v14 + 1);
  if (_UIUpdateCycleDebugTracingCheck && _UIUpdateCycleDebugTracingCheck())
    kdebug_trace();
  v11 = v14;
  *a5 = v13;
  a5[1] = v11;
  result = *(double *)&v15;
  a5[2] = v15;
  return result;
}

double applyTimingChanges(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double result;

  -[_UIUpdateTarget sync](a1[69]);
  v2 = a1[69];
  if (v2)
    v3 = *(_QWORD *)(v2 + 40);
  else
    v3 = 0;
  if (_UIVariableFrameDurationEnabled() && !word_1ECD82C66)
  {
    v4 = -[_UIUpdateTarget syncedRequestedMaxFrameDuration](a1[69]);
    v5 = a1[90];
    if (v4 < v5)
      v5 = v4;
    if (v5 >= a1[92])
      v5 = a1[92];
    if (v5 > v3)
      v3 = v5;
  }
  a1[70] = v3;
  a1[71] = v3 >> 1;
  if (qword_1ECD7F4A0 != -1)
    dispatch_once(&qword_1ECD7F4A0, &__block_literal_global_29_3);
  a1[72] = qword_1ECD7F498;
  result = (double)v3 * 1.75;
  a1[89] = (unint64_t)result;
  return result;
}

uint64_t _UIVariableFrameDurationEnabled()
{
  if (qword_1ECD7F588 != -1)
    dispatch_once(&qword_1ECD7F588, &__block_literal_global_1_14);
  return byte_1ECD7F571;
}

unint64_t _UIMachDurationForMediaDuration(double a1)
{
  if (qword_1ECD7F5A0 != -1)
    dispatch_once(&qword_1ECD7F5A0, &__block_literal_global_23_8);
  return llround(*(double *)&qword_1ECD7F5A8 * a1);
}

double _UIUpdateSetCurrentTiming(unint64_t *a1, int a2)
{
  int v3;
  char *v4;
  __int128 v5;
  unint64_t v6;
  double result;

  if (!dword_1ECD7F574 || (v3 = dword_1ECD7F578 - 1, a2))
  {
    if (dword_1ECD7F574 <= 3)
      ++dword_1ECD7F574;
    v3 = dword_1ECD7F578 & 3;
    dword_1ECD7F578 = v3 + 1;
  }
  kdebug_trace();
  v4 = &_MergedGlobals_1175[24 * v3];
  v5 = *(_OWORD *)a1;
  *((_QWORD *)v4 + 16) = a1[2];
  *((_OWORD *)v4 + 7) = v5;
  v6 = *a1;
  qword_1ECD7F590 = v6;
  if (qword_1ECD7F5A0 != -1)
    dispatch_once(&qword_1ECD7F5A0, &__block_literal_global_23_8);
  result = (double)v6 / *(double *)&qword_1ECD7F5A8;
  *(double *)&_currentModelMediaTime = result;
  return result;
}

uint64_t (*schedulerStepScheduledDone(uint64_t a1))()
{
  double v3;

  objc_msgSend(MEMORY[0x1E0CD28B0], "finishFrameWithToken:", *(unsigned int *)(a1 + 584));
  if ((uint64_t *)_UIUpdateDoneSequence != &_UIUpdateSequenceDoneItemInternal || _UIUpdateSequenceDoneItemInternal != 0)
  {
    v3 = _UIMediaTimeForMachTime(*(_QWORD *)(a1 + 648));
    if (_UIUpdateCycleDebugTracingCheck && _UIUpdateCycleDebugTracingCheck())
    {
      kdebug_trace();
      _UIUpdateSequenceRun((uint64_t **)&_UIUpdateScheduledSequence, a1 + 616, v3);
      kdebug_trace();
    }
    else
    {
      _UIUpdateSequenceRun((uint64_t **)&_UIUpdateScheduledSequence, a1 + 616, v3);
    }
  }
  *(_DWORD *)(a1 + 584) = 0;
  _UIUpdateCompletionObservationInvokeObservers(mainCompletionObservation);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a1 + 664);
  xmmword_1ECD82BE0 = 0u;
  *(_OWORD *)&qword_1ECD82BF0 = 0u;
  *(_DWORD *)(a1 + 640) = 0;
  ++*(_QWORD *)(a1 + 592);
  return schedulerStepScheduling;
}

uint64_t __setupUpdateSequence_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 448) = 0;
  _UIUpdateInputSetInputChanged(*(_DWORD **)(a2 + 496), a2 + 448);
  return objc_msgSend(MEMORY[0x1E0CD2730], "dispatchDeferredDisplayLinks");
}

void updateCycleEntry(void *a1)
{
  void *v1;
  uint64_t *v2;

  v2 = a1;
  +[_UIEventBus instance]();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIEventBus drainEvents:]((uint64_t)v1, *(_QWORD *)(v2[1] + 16));

  if (objc_msgSend(*(id *)(v2[1] + 16), "count"))
  {
    objc_msgSend(*(id *)(v2[1] + 16), "count");
    kdebug_trace();
    __processEventQueue(v2[1], -1);
    objc_msgSend(*(id *)(v2[1] + 16), "count");
    kdebug_trace();
  }

}

uint64_t _UIUpdateInputGroupBatchChanges(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  int v5;

  v3 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v3 + 1;
  if (!v3)
    *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  v5 = *(_DWORD *)(a1 + 8) - 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (!v5 && (*(_DWORD *)a1 & ~*(_DWORD *)(a1 + 4)) != 0)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 24))(a1, *(_QWORD *)(a1 + 32));
  return result;
}

_QWORD *_UIUpdateCompletionObservationInvokeObservers(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  v1 = (_QWORD *)*result;
  if (*result && v1[3])
  {
    v2 = result;
    *result = result[1];
    result[1] = v1;
    v5 = (uint64_t *)v1[2];
    v3 = (uint64_t **)v5;
    result[2] = &v5;
    if (v3)
    {
      do
      {
        v4 = v3[2];
        v5 = *v3;
        objc_msgSend(v4, "_updateCompleted");

        v3 = (uint64_t **)v5;
      }
      while (v5);
    }
    result = std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::clear(v1);
    v2[2] = 0;
  }
  return result;
}

void sub_18510C03C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t (*(*(*schedulerStepScheduledWaitingLowLatencyInputs(uint64_t a1, uint64_t *a2))(uint64_t a1))(uint64_t a1))()
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v11;

  applyRequestRegistryChanges(a1);
  if (!*(_BYTE *)(a1 + 760))
    return (uint64_t (*(*(*)(uint64_t))(uint64_t))())schedulerStepScheduledDone;
  mainGroup &= ~1u;
  if (!*(_BYTE *)(a1 + 680))
  {
    v4 = *(_QWORD *)(a1 + 568) + *(_QWORD *)(a1 + 616);
    *(_QWORD *)(a1 + 616) = v4;
    *(_QWORD *)(a1 + 648) = v4;
    *(_BYTE *)(a1 + 680) = 1;
    _UIUpdateSetCurrentTiming((unint64_t *)(a1 + 616), 0);
  }
  v11 = 0;
  v5 = *(_DWORD *)(a1 + 232);
  if (!v5)
    return schedulerStepScheduledLowLatencySection;
  v6 = *(_QWORD *)(a1 + 648);
  v7 = *(_DWORD *)(a1 + 684);
  v8 = 8 * (v5 - 1) + 240;
  v9 = 1;
  do
  {
    --v5;
    v9 = _UIUpdateInputSetReadyForModelTimeCombine(*(_QWORD *)(a1 + v8), v6, v7 != 0, 1u, v9 & 1, &v11);
    v8 -= 8;
  }
  while (v5);
  if ((v9 & 1) != 0 || mach_absolute_time() >= v11)
    return schedulerStepScheduledLowLatencySection;
  *a2 = v11;
  **(_DWORD **)a1 = 4;
  return (uint64_t (*(*(*)(uint64_t))(uint64_t))())schedulerStepIdleWork;
}

uint64_t _UIApplicationFlushCATransaction(int a1)
{
  uint64_t result;
  void *v3;
  void *v4;

  if (!UIApp)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIApplicationFlushCATransaction(const BOOL)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIApplication.m"), 3309, CFSTR("Requires UIApplication instance"));

  }
  if (a1)
    objc_msgSend(MEMORY[0x1E0CD28B0], "flushAsRunLoopObserver");
  else
    objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
  result = _cleanUpAfterCAFlushAndRunDeferredBlocks((void *)UIApp, 1);
  if ((_DWORD)result)
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
    return _cleanUpAfterCAFlushAndRunDeferredBlocks((void *)UIApp, 0);
  }
  return result;
}

uint64_t _cleanUpAfterCAFlushAndRunDeferredBlocks(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  void *v6;
  void *v7;

  v3 = a1;
  if (pthread_main_np() != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _cleanUpAfterCAFlushAndRunDeferredBlocks(UIApplication *__strong, BOOL)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("UIApplication.m"), 3244, CFSTR("Call must be made on main thread"));

  }
  __caCommitState = 0;
  +[UIWindow _checkPreCommitHandlersAfterCAFlush]();
  v4 = 0;
  if (a2)
    v4 = _runAfterCACommitDeferredBlocks(v3);
  __UIApplicationLastCAFlushTime = CFAbsoluteTimeGetCurrent();

  return v4;
}

uint64_t _runAfterCACommitDeferredBlocks(void *a1)
{
  id *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_msgSend(v1[12], "count");
  if (v2)
  {
    v3 = (void *)objc_msgSend(v1[12], "copy");
    objc_msgSend(v1[12], "removeAllObjects");
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v4 = v3;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v8++), "run", (_QWORD)v12);
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v6);
    }

  }
  v9 = objc_msgSend((id)qword_1EDDC80C8, "flush", (_QWORD)v12);
  if (v2)
    v10 = 1;
  else
    v10 = v9;

  return v10;
}

void _UIQOSMarkIntervalRelevant()
{
  BOOL v0;

  if (qword_1ECD82128 != -1)
    dispatch_once(&qword_1ECD82128, &__block_literal_global_5_13);
  if (dword_1ECD82138)
    v0 = 0;
  else
    v0 = word_1ECD82168 == 0;
  if (!v0)
    HIBYTE(word_1ECD82168) = 1;
}

uint64_t _UIUpdateRequestRegistryArbitratedRateRange(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;
  unsigned int v12;

  v1 = result;
  v2 = *(_DWORD *)(result + 4);
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)(result + 4) = v2 & 0xFFFFFFFE;
    if ((*(_BYTE *)(result + 32) & 1) != 0)
      result = arbitrateRecordSet(result + 8);
    if ((*(_BYTE *)(v1 + 72) & 1) != 0)
      result = arbitrateRecordSet(v1 + 48);
    v3 = *(float *)(v1 + 36);
    if (v3 <= *(float *)(v1 + 76))
      v3 = *(float *)(v1 + 76);
    v4 = (float)v3;
    v5 = *(float *)(v1 + 44);
    if (v5 <= *(float *)(v1 + 84))
      v5 = *(float *)(v1 + 84);
    v6 = (float)v5;
    v7 = *(float *)(v1 + 40);
    if (v7 - 1 >= *(float *)(v1 + 80) - 1)
      v7 = *(float *)(v1 + 80);
    v8 = (float)v7;
    v9 = v4;
    if (v8 != 0 && v8 < v4)
      v9 = v8;
    v10 = (float)v9;
    v11 = v6;
    if (v8 != 0 && v8 < v6)
      v11 = v8;
    v12 = (float)v11;
    if (v12 < v10 && v12 != 0)
      v12 = v10;
    *(float *)(v1 + 104) = v10;
    *(float *)(v1 + 108) = v8;
    *(float *)(v1 + 112) = (float)v12;
  }
  return result;
}

uint64_t arbitrateRecordSet(uint64_t result)
{
  uint64_t v1;
  int *v2;
  float v3;
  float v4;
  float v5;
  int **v6;
  uint64_t v7;
  int *v8;
  int v9;
  float v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  *(_DWORD *)(result + 24) &= ~1u;
  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = **(int ***)result;
    v3 = (float)v2[1];
    v4 = (float)v2[3];
    v5 = (float)v2[2];
    if (v1 != 1)
    {
      v6 = (int **)(*(_QWORD *)result + 24);
      v7 = 24 * v1 - 24;
      do
      {
        v8 = *v6;
        v6 += 3;
        v9 = v8[3];
        v10 = (float)v8[2];
        v11 = v3;
        v12 = (float)v8[1];
        if (v3 <= v12)
          v11 = v12;
        v3 = (float)v11;
        v13 = v5;
        if (v5 <= v10)
          v13 = v10;
        v5 = (float)v13;
        v14 = v4;
        if (v4 - 1 >= (float)v9 - 1)
          v14 = (float)v9;
        v4 = (float)v14;
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    v3 = 0.0;
    v4 = 0.0;
    v5 = 0.0;
  }
  *(float *)(result + 28) = v3;
  *(float *)(result + 32) = v4;
  *(float *)(result + 36) = v5;
  return result;
}

void sub_18510CFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIMachTimerCancel(mach_port_t *a1, int a2)
{
  uint64_t result;
  mach_port_t v5;
  mach_msg_header_t v6[2];

  result = mk_timer_cancel();
  if (a2)
  {
    v5 = *a1;
    memset(v6, 0, sizeof(v6));
    v6[0].msgh_local_port = v5;
    v6[0].msgh_size = 48;
    return mach_msg(v6, 258, 0, 0x30u, v5, 0, 0);
  }
  return result;
}

void _endInterval(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (!_MergedGlobals_1293)
    _MergedGlobals_1293 = mach_absolute_time();
  _tracepointArg4(a1);
  kdebug_trace();
  if (*(_BYTE *)(a1 + 57))
    work_interval_instance_set_finish();
  else
    work_interval_instance_set_complexity();
  work_interval_instance_finish();
  *(_WORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  v4 = v2 - v3;
  if (v2 > v3)
  {
    v5 = _UIUpdateCycleComputeIdleDeadline(v2, v2 - v3);
    _UIUpdateCycleNotifyIdle(v3, v4, v5);
  }
}

uint64_t _beginInterval()
{
  uint64_t result;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (!qword_1ECD82158)
  {
    if (work_interval_create())
    {
      v1 = *__error();
      v2 = (void *)MEMORY[0x1E0C99DA0];
      v3 = *MEMORY[0x1E0C99768];
      v7 = CFSTR("errno");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v8[0] = v4;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "exceptionWithName:reason:userInfo:", v3, CFSTR("Failed to create work interval"), v5);
      v6 = (id)objc_claimAutoreleasedReturnValue();

      objc_exception_throw(v6);
    }
    qword_1ECD82160 = work_interval_instance_alloc();
  }
  if (!_MergedGlobals_1293)
    _MergedGlobals_1293 = mach_absolute_time();
  _tracepointArg4((uint64_t)&qword_1ECD82130);
  kdebug_trace();
  work_interval_instance_clear();
  work_interval_instance_set_start();
  work_interval_instance_set_deadline();
  work_interval_instance_set_complexity();
  result = work_interval_instance_start();
  LOBYTE(word_1ECD82168) = 1;
  return result;
}

void _UIUpdateCycleNotifyIdle(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  int v11;
  double v12;
  double v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD *v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  _QWORD v21[8];
  __int128 buf;
  void (*v23)(uint64_t);
  void *v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = _UIInternalPreferenceUsesDefault((int *)&unk_1ECD76660, (uint64_t)CFSTR("UpdateCycleIdleSchedulerMode"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger);
  v7 = qword_1ECD76668;
  if (v6)
    v7 = 0;
  if (v7 != -1 && (v7 == 1 || dyld_program_sdk_at_least()) && (_MergedGlobals_13_2 & 1) == 0)
  {
    objc_msgSend((id)qword_1ECD79AE0, "compact");
    if (objc_msgSend((id)qword_1ECD79AE0, "count"))
    {
      v8 = mach_absolute_time();
      if (v8 >= qword_1ECD79AF8)
      {
        v9 = v8 - a1;
        v10 = (double)a2;
        if (_UIInternalPreferenceUsesDefault((int *)&_MergedGlobals_913, (uint64_t)CFSTR("IdleSchedulerMaximumFractionToStart"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble))
        {
          v11 = _UIUpdateCycleEnabled();
          v12 = 0.7;
          if (!v11)
            v12 = 0.5;
        }
        else
        {
          v12 = *(double *)&qword_1ECD76638;
        }
        v13 = v12 * v10;
        if (v9 <= (unint64_t)v13)
        {
          _MergedGlobals_13_2 = 1;
          v16 = MEMORY[0x1E0C809B0];
          v21[0] = MEMORY[0x1E0C809B0];
          v21[1] = 3221225472;
          v21[2] = ___UIUpdateCycleNotifyIdle_block_invoke;
          v21[3] = &__block_descriptor_64_e5_v8__0l;
          v21[4] = a1;
          v21[5] = (unint64_t)v13;
          v21[6] = a2;
          v21[7] = a3;
          v17 = v21;
          v18 = MEMORY[0x1E0C80D38];
          v19 = MEMORY[0x1E0C80D38];
          if (_UIUpdateCycleEnabled())
          {
            dispatch_async(MEMORY[0x1E0C80D38], v17);
          }
          else
          {
            *(_QWORD *)&buf = v16;
            *((_QWORD *)&buf + 1) = 3221225472;
            v23 = ___UIUpdateCycleExecuteAsyncAfterCommit_block_invoke;
            v24 = &unk_1E16B1D18;
            v20 = v18;
            v25 = v18;
            v26 = v17;
            dispatch_async(v18, &buf);

          }
        }
        else
        {
          v14 = qword_1ECD79B08;
          if (!qword_1ECD79B08)
          {
            v14 = __UILogCategoryGetNode("UpdateCycleIdleScheduler", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v14, (unint64_t *)&qword_1ECD79B08);
          }
          v15 = *(NSObject **)(v14 + 8);
          if (os_signpost_enabled(v15))
          {
            LODWORD(buf) = 134217984;
            *(double *)((char *)&buf + 4) = (double)v9 / v10;
            _os_signpost_emit_with_name_impl(&dword_185066000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SkipNotify", "Before scheduling, elapsed=%.2f", (uint8_t *)&buf, 0xCu);
          }
        }
      }
    }
  }
}

unint64_t _UIUpdateCycleComputeIdleDeadline(unint64_t a1, unint64_t a2)
{
  double v2;
  double v3;
  int v4;
  double v5;

  v2 = (double)a1;
  v3 = (double)a2;
  v4 = _UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_IdleSchedulerTargetDeadlineFraction, (uint64_t)CFSTR("IdleSchedulerTargetDeadlineFraction"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  v5 = *(double *)&qword_1ECD76628;
  if (v4)
    v5 = 0.3;
  return (unint64_t)(v5 * v3 + v2);
}

void _removeItem(_UIUpdateSequenceItemInternal *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    *(_QWORD *)(v2 + 8) = *((_QWORD *)a1 + 1);
  **((_QWORD **)a1 + 1) = v2;
  v3 = (void *)*((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;

  free(a1);
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
  _UIGraphicsBeginImageContextWithOptions(opaque, 0, size.width, size.height, scale);
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return (UIImage *)_UIGraphicsGetImageFromCurrentImageContext(0);
}

uint64_t _UIStatusBarStyleFromResolvedStyle(char a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v1 = a1 & 0x3F;
  switch(v1)
  {
    case 1:
      return 1;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIStatusBarStyle _UIStatusBarStyleFromResolvedStyle(_UIStatusBarResolvedStyle)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIStatusBarStyle.m"), 85, CFSTR("_UIStatusBarResolvedStyleInherited cannot be converted to a UIStatusBarStyle"));

      return 0;
    case 2:
      return 3;
    default:
      return 0;
  }
}

id UIListContentConfiguration.directionalLayoutMargins.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_directionalLayoutMargins);
}

id touchesFromDictionaryWithKey(const __CFDictionary *a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  CFDictionaryGetValue(a1, v3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (id)v4;
  if (v3 && !v4)
  {
    v5 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    CFDictionarySetValue(a1, v3, v5);
  }

  return v5;
}

_QWORD *_UIGestureDelayedTouchForUITouch(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = a2;
  v5 = (_QWORD *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v4);
        v8 = *(_QWORD **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v7);
        if (v8)
          v9 = (id)v8[3];
        else
          v9 = 0;
        if (v9 == v3)
        {
          v5 = v8;
          goto LABEL_15;
        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v10 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      v5 = (_QWORD *)v10;
    }
    while (v10);
  }
LABEL_15:

  return v5;
}

uint64_t sub_185111AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_185111B14(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_185111B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[32];

  v11 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1850F69D4(v14, (uint64_t)v17);
  swift_dynamicCast();
  v15 = a4(a1, a2, v13);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, a7);
  return v15;
}

void UIGraphicsPopContext(void)
{
  int *ContextStack;

  ContextStack = (int *)GetContextStack(0);
  PopContextFromStack(ContextStack);
}

void sub_18511300C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _UIEmitSignpostEvent((_DWORD *)(v1 - 144));
  _Unwind_Resume(a1);
}

void PopContextFromStack(int *a1)
{
  int v1;
  CGContext *v3;
  void *v4;

  v1 = *a1 - 1;
  if (*a1 >= 1)
  {
    *a1 = v1;
    v3 = *(CGContext **)&a1[6 * v1 + 2];
    if (v3)
    {
      CGContextRelease(v3);
      v1 = *a1;
    }
    v4 = *(void **)&a1[6 * v1 + 6];
    if (v4)
      free(v4);
  }
}

void UIGraphicsPushContext(CGContextRef context)
{
  int *ContextStack;
  CGContextRef v3;
  int v4;
  int *v5;

  ContextStack = (int *)GetContextStack(1);
  v3 = CGContextRetain(context);
  v4 = *ContextStack;
  v5 = &ContextStack[6 * *ContextStack];
  *((_QWORD *)v5 + 1) = v3;
  v5[4] = 0;
  *((_QWORD *)v5 + 3) = 0;
  *ContextStack = v4 + 1;
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  _QWORD *ContextStack;

  ContextStack = GetContextStack(0);
  if (*(int *)ContextStack < 1)
    return 0;
  else
    return (CGContextRef)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
}

_QWORD *GetContextStack(int a1)
{
  int *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  pthread_once(&GetContextStack___contextThreadKeyOnce, (void (*)(void))CreateContextKey);
  v2 = (int *)pthread_getspecific(__contextThreadKey);
  if (!v2)
  {
    v3 = malloc_type_malloc(0x68uLL, 0xF41D755uLL);
    *v3 = 0x400000000;
    goto LABEL_6;
  }
  v3 = v2;
  if (a1)
  {
    v4 = *v2;
    if ((_DWORD)v4 == v2[1])
    {
      v5 = v4 + 4;
      v2[1] = v5;
      v3 = malloc_type_realloc(v2, 24 * v5 + 8, 0xB9B7A573uLL);
LABEL_6:
      pthread_setspecific(__contextThreadKey, v3);
    }
  }
  return v3;
}

void _UIGraphicsBeginImageContextWithOptions(int a1, int a2, CGFloat a3, CGFloat a4, double a5)
{
  double v6;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int AlignedBytesPerRow;
  CGColorSpace *DeviceRGB;
  CGContext *v16;
  double *v17;
  int *ContextStack;
  CGContextRef v19;
  int v20;
  int *v21;
  void *v22;
  void *v23;
  id v24;
  CGAffineTransform v25;
  CGSize v26;
  CGRect v27;

  v6 = a5;
  if (a5 == 0.0)
    v6 = _UIScreenForcedMainScreenScale(1);
  v10 = vcvtpd_s64_f64(a3 * v6);
  v11 = vcvtpd_s64_f64(a4 * v6);
  if (a1)
    v12 = 8198;
  else
    v12 = 8194;
  if (a2)
    v13 = 7;
  else
    v13 = v12;
  AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
  if ((a2 & 1) != 0)
    DeviceRGB = 0;
  else
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v16 = CGBitmapContextCreate(0, v10, v11, 8uLL, AlignedBytesPerRow, DeviceRGB, v13);
  CGColorSpaceRelease(DeviceRGB);
  if (v16)
  {
    v27.size.width = (double)v10;
    v27.origin.x = 0.0;
    v27.origin.y = 0.0;
    v27.size.height = (double)v11;
    CGContextClearRect(v16, v27);
    CGContextTranslateCTM(v16, 0.0, (double)v11);
    CGContextScaleCTM(v16, v6, -v6);
    CGContextGetCTM(&v25, v16);
    CGContextSetBaseCTM();
    v17 = (double *)malloc_type_malloc(0x10uLL, 0x10000409B4BCFF8uLL);
    *v17 = v6;
    *((_BYTE *)v17 + 8) = a1;
    ContextStack = (int *)GetContextStack(1);
    v19 = CGContextRetain(v16);
    v20 = *ContextStack;
    v21 = &ContextStack[6 * *ContextStack];
    *((_QWORD *)v21 + 1) = v19;
    v21[4] = 1;
    *((_QWORD *)v21 + 3) = v17;
    *ContextStack = v20 + 1;
    CGContextRelease(v16);
  }
  else if (dyld_program_sdk_at_least())
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v24 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIGraphicsBeginImageContextWithOptions(CGSize, BOOL, CGFloat, BOOL)");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v26.width = a3;
    v26.height = a4;
    NSStringFromCGSize(v26);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("UIGraphics.m"), 410, CFSTR("UIGraphicsBeginImageContext() failed to allocate CGBitampContext: size=%@, scale=%f, bitmapInfo=0x%x. Use UIGraphicsImageRenderer to avoid this assert."), v23, *(_QWORD *)&v6, v13);

  }
}

void sub_185114170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UISetColor(CGColor *a1)
{
  _QWORD *ContextStack;
  CGContext *v3;

  ContextStack = GetContextStack(0);
  if (*(int *)ContextStack < 1)
    v3 = 0;
  else
    v3 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  CGContextSetStrokeColorWithColor(v3, a1);
  CGContextSetFillColorWithColor(v3, a1);
}

void UIRectFill(CGRect rect)
{
  UIRectFillUsingOperation(1, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
}

void UIColorBreakForOutOfRangeColorComponents()
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __UIColorBreakForOutOfRangeColorComponents_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "UIColorBreakForOutOfRangeColorComponents";
  if (UIColorBreakForOutOfRangeColorComponents_once != -1)
    dispatch_once(&UIColorBreakForOutOfRangeColorComponents_once, block);
}

UIColor __swiftcall UIListContentConfiguration.TextProperties.resolvedColor()()
{
  uint64_t v0;
  objc_class *v1;
  NSString *v2;
  NSString *v3;
  UIColor result;

  v1 = (objc_class *)objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_resolvedColor);
  result._cachedStyleString = v3;
  result._systemColorName = v2;
  result.super.isa = v1;
  return result;
}

double UIRectRoundToViewScale(void *a1, double a2, double a3, double a4, double a5)
{
  double v9;

  objc_msgSend(a1, "_currentScreenScale");
  return UIRectRoundToScale(a2, a3, a4, a5, v9);
}

double UISizeRoundToViewScale(void *a1, double a2, double a3)
{
  double v5;

  objc_msgSend(a1, "_currentScreenScale");
  return UISizeRoundToScale(a2, a3, v5);
}

double UIPointRoundToScale(double a1, double a2, double a3)
{
  double v5;
  BOOL v6;
  double v7;
  double v8;
  double v9;

  v5 = a3;
  if (a3 == 0.0)
  {
    if (AdjustToScale_onceToken_0 != -1)
      dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
    v5 = *(double *)&AdjustToScale___s_0;
  }
  v6 = v5 == 1.0;
  v7 = round(a1 * v5) / v5;
  v8 = round(a1);
  if (v6)
    v9 = v8;
  else
    v9 = v7;
  if (a3 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  return v9;
}

void UIFloorToViewScale(void *a1)
{
  double v1;

  objc_msgSend(a1, "_currentScreenScale");
  if (v1 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
}

void UICeilToViewScale(void *a1)
{
  double v1;

  objc_msgSend(a1, "_currentScreenScale");
  if (v1 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
}

void UIRoundToViewScale(void *a1)
{
  double v1;

  objc_msgSend(a1, "_currentScreenScale");
  if (v1 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
}

void sub_185117B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _TextFieldScalesClearButton()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
  {
    LODWORD(result) = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_TextFieldScalesClearButton, (uint64_t)CFSTR("TextFieldScalesClearButton"));
    if (byte_1ECD76974)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t UIKeyboardIsRightToLeftInputModeActive()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v0 = (id)UIKeyboardActiveInputModes;
  v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
  if (v1)
  {
    v2 = *(_QWORD *)v6;
    while (2)
    {
      for (i = 0; i != v1; ++i)
      {
        if (*(_QWORD *)v6 != v2)
          objc_enumerationMutation(v0);
        if ((UIKeyboardInputModeIsDefaultRightToLeft(*(void **)(*((_QWORD *)&v5 + 1) + 8 * i)) & 1) != 0)
        {
          v1 = 1;
          goto LABEL_11;
        }
      }
      v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
      if (v1)
        continue;
      break;
    }
  }
LABEL_11:

  return v1;
}

uint64_t UIKeyboardInputModeIsDefaultRightToLeft(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = a1;
  if (v1)
  {
    if (qword_1ECD7EAE0 != -1)
      dispatch_once(&qword_1ECD7EAE0, &__block_literal_global_249_1);
    objc_msgSend((id)qword_1ECD7EAD8, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v2;
    if (v2)
    {
      v4 = objc_msgSend(v2, "BOOLValue");
    }
    else
    {
      TIInputModeGetLanguageWithRegion();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v5;
      if (v5)
      {
        objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
        v4 = uloc_getCharacterOrientation() == 1;
        v7 = (void *)qword_1ECD7EAD8;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setObject:forKey:", v8, v1);

      }
      else
      {
        v4 = 0;
      }

    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_185119A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

ValueMetadata *type metadata accessor for UIButton.Configuration()
{
  return &type metadata for UIButton.Configuration;
}

uint64_t _UIBoundingPathBitmapDataRowHitTest(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  __int128 v18;
  void *v19;
  void *v20;
  void *v21;
  _OWORD v22[3];
  unint64_t v23;

  v3 = *a1;
  if (!*a1)
    return 0;
  result = 0;
  v6 = a1[1];
  if (v6 && (a3 & 0x8000000000000000) == 0 && a3 <= v6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      return 0;
    if (a2 > v3)
      return 0;
    if (a2 >= v3 - 1)
      v7 = v3 - 1;
    else
      v7 = a2;
    if (a3 >= v6 - 1)
      v8 = v6 - 1;
    else
      v8 = a3;
    v9 = a1[2];
    if (v8 >= v9)
    {
      v10 = a1[3];
      if (v8 < v10 + v9)
        return 1;
      v8 -= v10;
    }
    v11 = a1[5];
    if (v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = v11 * v8;
      while (1)
      {
        if (v14 >= a1[4])
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapDataRowHitTestResult _UIBoundingPathBitmapDataRowHitTest(const _UIBoundingPathBitmapData, const _UIIntegralPoint)");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("_UIBoundingPathBitmapData.h"), 244, CFSTR("Bitmap data is invalid: width=%ld; height=%lu; skipRegionY=%lu; skipRegionHeight=%lu; nodeCount=%lu; maximumNodesPerRow=%lu"),
            *a1,
            a1[1],
            a1[2],
            a1[3],
            a1[4],
            a1[5]);

        }
        v15 = *(unsigned __int16 *)(a1[6] + 2 * v14);
        v13 += v15 & 0x7FFF;
        if (v13 > v7)
          return v15 >> 15;
        ++v12;
        ++v14;
        if (v12 >= a1[5])
          goto LABEL_26;
      }
    }
    else
    {
LABEL_26:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIBoundingPathBitmapDataRowHitTestResult _UIBoundingPathBitmapDataRowHitTest(const _UIBoundingPathBitmapData, const _UIIntegralPoint)");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *((_OWORD *)a1 + 1);
      v22[0] = *(_OWORD *)a1;
      v22[1] = v18;
      v22[2] = *((_OWORD *)a1 + 2);
      v23 = a1[6];
      _UIBoundingPathBitmapDataDescription(v22);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("_UIBoundingPathBitmapData.h"), 256, CFSTR("Bitmap is invalid: column %ld is missing for row %ld of bitmap data: %@"), v7, v8, v19);

      return 0;
    }
  }
  return result;
}

unint64_t _UIRectEdgeConvertedFromOrientationToPortrait(unint64_t result, uint64_t a2)
{
  switch(a2)
  {
    case 0:
    case 1:
      return result;
    case 2:
      result = (result >> 2) & 3 | (4 * (result & 3));
      break;
    case 3:
      result = (8 * (result & 1)) | (result >> 1) & 7;
      break;
    case 4:
      result = (result >> 3) & 1 | (2 * (result & 7));
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

double _UITableCellLineHeightCenteredImageInRect(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v11;
  void *v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  double v18;
  double v19;

  v11 = a1;
  _UITableCellFontForImage(v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "size");
  v14 = v13;
  v16 = v15;
  objc_msgSend(v11, "baselineOffsetFromBottom");
  v18 = v17;

  v19 = _UITableCellLineHeightCenteredSizeWithBaselineInRect(v12, v14, v16, v18, a2, a3, a4, a5, a6);
  return v19;
}

id _UITableCellFontForImage(void *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  double v6;

  objc_msgSend(a1, "symbolConfiguration");
  v1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    if (v1[10])
    {
      objc_msgSend(v1, "textStyle");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(off_1E167A828, "preferredFontForTextStyle:", v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v6 = 0.0;
      objc_msgSend(v1, "_deriveGlyphSize:weight:pointSize:", 0, 0, &v6);
      objc_msgSend(off_1E167A828, "systemFontOfSize:", v6);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

double _UITableCellLineHeightCenteredSizeWithBaselineInRect(void *a1, CGFloat a2, CGFloat a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  id v15;
  void *v16;
  double v17;
  id v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double MinX;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  CGFloat MidX;
  CGFloat MidY;
  CGFloat v32;
  CGFloat v33;
  double v34;
  double v35;
  double v36;
  double v38;
  CGAffineTransform v41;
  CGAffineTransform v42;
  CGAffineTransform v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;

  v15 = a1;
  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "scale");
  v38 = v17;

  v18 = v15;
  v19 = v18;
  if (v18)
  {
    objc_msgSend(v18, "lineHeight", *(_QWORD *)&v38);
    v21 = v20;
    objc_msgSend(v19, "ascender");
    v23 = v22 - (a3 - a4);
  }
  else
  {
    v23 = 0.0;
    v21 = a3;
  }

  v44.origin.x = a6;
  v44.origin.y = a7;
  v44.size.width = a8;
  v44.size.height = a9;
  MinX = CGRectGetMinX(v44);
  v45.origin.x = a6;
  v45.origin.y = a7;
  v45.size.width = a8;
  v45.size.height = a9;
  v25 = MinX + (CGRectGetWidth(v45) - a2) * 0.5;
  v46.origin.x = a6;
  v46.origin.y = a7;
  v46.size.width = a8;
  v46.size.height = a9;
  v26 = v23 + CGRectGetMinY(v46);
  v47.origin.x = a6;
  v47.origin.y = a7;
  v47.size.width = a8;
  v47.size.height = a9;
  v27 = v26 + (CGRectGetHeight(v47) - v21) * 0.5;
  if (fabs(a5 + -1.0) >= 2.22044605e-16)
  {
    memset(&v43, 0, sizeof(v43));
    v48.origin.x = a6;
    v48.origin.y = a7;
    v48.size.width = a8;
    v48.size.height = a9;
    MidX = CGRectGetMidX(v48);
    v49.origin.x = a6;
    v49.origin.y = a7;
    v49.size.width = a8;
    v49.size.height = a9;
    MidY = CGRectGetMidY(v49);
    CGAffineTransformMakeTranslation(&v43, MidX, MidY);
    v41 = v43;
    CGAffineTransformScale(&v42, &v41, a5, a5);
    v43 = v42;
    v50.origin.x = a6;
    v50.origin.y = a7;
    v50.size.width = a8;
    v50.size.height = a9;
    v32 = -CGRectGetMidX(v50);
    v51.origin.x = a6;
    v51.origin.y = a7;
    v51.size.width = a8;
    v51.size.height = a9;
    v33 = CGRectGetMidY(v51);
    v41 = v43;
    CGAffineTransformTranslate(&v42, &v41, v32, -v33);
    v43 = v42;
    v52.origin.x = v25;
    v52.origin.y = v27;
    v52.size.width = a2;
    v52.size.height = a3;
    *(CGRect *)(&v29 - 2) = CGRectApplyAffineTransform(v52, &v42);
    v25 = v34;
    v27 = v35;
  }
  else
  {
    v28 = a3;
    v29 = a2;
  }
  v36 = UIRectIntegralWithScale(v25, v27, v29, v28, v38);

  return v36;
}

void sub_185120A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _UIEmitSignpostEvent((int *)va);
  _Unwind_Resume(a1);
}

void sub_18512139C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL _UITableCellShouldCenterImageHorizontallyForTraitCollection(void *a1, void *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a2;
  if (objc_msgSend(a1, "isSymbolImage"))
    v4 = _UITableCellSupportsHorizontalCenteringBehaviorForTraitCollection(v3);
  else
    v4 = 0;

  return v4;
}

uint64_t _UITableViewCellTextLabelUsesLeadingLayoutMargin()
{
  if (qword_1ECD7A420 != -1)
    dispatch_once(&qword_1ECD7A420, &__block_literal_global_4_18);
  return byte_1ECD7A411;
}

id UIBackgroundConfiguration.cornerRadius.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_cornerRadius);
}

uint64_t UICellConfigurationState.isEditing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 13);
}

uint64_t _UIEventFetcherHandleHIDEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return -[UIEventFetcher _receiveHIDEventInternal:](a1, a4);
}

uint64_t getEnumTagSinglePayload for UIContentUnavailableConfigurationState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

BOOL UIRectIsDiscrete(double a1, double a2, double a3, double a4)
{
  _BOOL8 result;
  double v5;

  result = 0;
  if (fabs(a1) != INFINITY)
  {
    v5 = fabs(a3);
    if (fabs(a2) != INFINITY && v5 != INFINITY)
      return fabs(a4) != INFINITY;
  }
  return result;
}

id UIListSeparatorConfiguration.topSeparatorVisibility.setter(unsigned __int8 *a1)
{
  return sub_185163964(a1, (SEL *)&selRef_setTopSeparatorVisibility_);
}

void sub_185126D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185127488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185127800(_Unwind_Exception *exception_object)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_185127820(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1851277B4);
}

void sub_1851285BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185128CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _Unwind_Resume(exception_object);
}

void sub_185128F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18512B024(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

id _UIGraphicsGetImageFromCurrentImageContext(int a1)
{
  CGContext *CurrentContext;
  CGContext *v3;
  size_t Width;
  size_t Height;
  void *v6;
  void *Data;
  const __CFData *v8;
  CGDataProvider *v9;
  size_t BytesPerRow;
  CGImage *Image;
  double *CurrentContextAuxInfo;
  double v13;
  void *v14;

  CurrentContext = (CGContext *)GetCurrentContext(1);
  if (!CurrentContext)
    goto LABEL_7;
  v3 = CurrentContext;
  if (!a1)
  {
    Image = CGBitmapContextCreateImage(CurrentContext);
    if (Image)
      goto LABEL_4;
LABEL_7:
    v14 = 0;
    return v14;
  }
  Width = CGBitmapContextGetWidth(CurrentContext);
  Height = CGBitmapContextGetHeight(v3);
  v6 = (void *)MEMORY[0x1E0C99D50];
  Data = CGBitmapContextGetData(v3);
  objc_msgSend(v6, "dataWithBytes:length:", Data, CGBitmapContextGetBytesPerRow(v3) * Height);
  v8 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  v9 = CGDataProviderCreateWithCFData(v8);
  BytesPerRow = CGBitmapContextGetBytesPerRow(v3);
  Image = CGImageMaskCreate(Width, Height, 8uLL, 8uLL, BytesPerRow, v9, 0, 0);
  CGDataProviderRelease(v9);

  if (!Image)
    goto LABEL_7;
LABEL_4:
  CurrentContextAuxInfo = (double *)GetCurrentContextAuxInfo(1);
  if (CurrentContextAuxInfo)
    v13 = *CurrentContextAuxInfo;
  else
    v13 = 1.0;
  +[UIImage imageWithCGImage:scale:orientation:](UIImage, "imageWithCGImage:scale:orientation:", Image, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  CGImageRelease(Image);
  return v14;
}

void _setContentStretchForImage(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  void *v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  _BOOL4 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  BOOL v43;
  void *v44;
  void *v45;
  void *v46;
  id object;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  object = a1;
  v3 = a2;
  objc_getAssociatedObject(object, &_setContentStretchForImage___contentStretchLastSetByUIImageViewKey);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "CGRectValue");
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;
  }
  else
  {
    v11 = 1.0;
    v7 = 0.0;
    v9 = 0.0;
    v13 = 1.0;
  }
  objc_msgSend(object, "layer");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "contentsCenter");
  v50.origin.x = v15;
  v50.origin.y = v16;
  v50.size.width = v17;
  v50.size.height = v18;
  v48.origin.x = v7;
  v48.origin.y = v9;
  v48.size.width = v11;
  v48.size.height = v13;
  v19 = CGRectEqualToRect(v48, v50);

  if (v19)
  {
    objc_msgSend(v3, "_sizeInPixels");
    v21 = v20;
    v23 = v22;
    if ((objc_msgSend(v3, "_isSubimage") & 1) != 0)
    {
      objc_msgSend(v3, "_contentRectInPixels");
      objc_msgSend(object, "_setContentRectInPixels:forContentSize:");
    }
    objc_msgSend(v3, "_contentStretchInPixels");
    v25 = v24;
    v27 = v26;
    v29 = v28;
    v31 = v30;
    objc_msgSend(object, "bounds");
    objc_msgSend(object, "_setContentStretchInPixels:forContentSize:shouldTile:", objc_msgSend(v3, "_isTiledWhenStretchedToSize:", v32, v33), v25, v27, v29, v31, v21, v23);
    objc_msgSend(object, "layer");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "contentsCenter");
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v42 = v41;

    v51.origin.x = 0.0;
    v51.origin.y = 0.0;
    v51.size.width = 1.0;
    v51.size.height = 1.0;
    v49.origin.x = v36;
    v49.origin.y = v38;
    v49.size.width = v40;
    v49.size.height = v42;
    v43 = CGRectEqualToRect(v49, v51);
    if (v5 || !v43)
    {
      v44 = (void *)MEMORY[0x1E0CB3B18];
      objc_msgSend(object, "layer");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "contentsCenter");
      objc_msgSend(v44, "valueWithCGRect:");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_setAssociatedObject(object, &_setContentStretchForImage___contentStretchLastSetByUIImageViewKey, v46, (void *)1);

    }
  }

}

uint64_t GetCurrentContextAuxInfo(int a1)
{
  _QWORD *ContextStack;
  unsigned int v3;

  ContextStack = GetContextStack(0);
  v3 = *(_DWORD *)ContextStack - 1;
  if (*(int *)ContextStack >= 1 && LODWORD(ContextStack[3 * v3 + 2]) == a1)
    return ContextStack[3 * v3 + 3];
  else
    return 0;
}

void UIGraphicsEndImageContext(void)
{
  int *ContextStack;

  if (GetCurrentContext(1))
  {
    ContextStack = (int *)GetContextStack(0);
    PopContextFromStack(ContextStack);
  }
}

uint64_t GetCurrentContext(int a1)
{
  _QWORD *ContextStack;
  unsigned int v3;

  ContextStack = GetContextStack(0);
  v3 = *(_DWORD *)ContextStack - 1;
  if (*(int *)ContextStack >= 1 && LODWORD(ContextStack[3 * v3 + 2]) == a1)
    return ContextStack[3 * v3 + 1];
  else
    return 0;
}

void _UIButtonCommonInit(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  IMP MethodImplementation;
  IMP v4;
  uint64_t v5;
  BOOL v6;
  objc_class *v8;
  objc_class *v9;
  IMP v10;
  IMP v11;
  void *v14;
  _QWORD *v15;

  v15 = a1;
  v1 = (objc_class *)objc_opt_class();
  v2 = (objc_class *)objc_opt_class();
  MethodImplementation = class_getMethodImplementation(v1, sel_imageRectForContentRect_);
  v4 = class_getMethodImplementation(v2, sel_imageRectForContentRect_);
  v5 = 0x400000000;
  if (MethodImplementation)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (v6 || MethodImplementation == v4)
  {
    v8 = (objc_class *)objc_opt_class();
    v9 = (objc_class *)objc_opt_class();
    v10 = class_getMethodImplementation(v8, sel_titleRectForContentRect_);
    v11 = class_getMethodImplementation(v9, sel_titleRectForContentRect_);
    if (v10 == v11 || v11 == 0 || v10 == 0)
      v5 = 0;
  }
  v15[78] = v15[78] & 0xFFFFFFFBFFFFFFFFLL | v5;
  *(_QWORD *)((char *)v15 + 124) |= 0x40000000uLL;
  v15[78] |= 0x1000000000uLL;
  v14 = (void *)objc_opt_new();
  objc_msgSend(v14, "setDelegate:", v15);
  objc_msgSend(v15, "addInteraction:", v14);
  objc_msgSend(v15, "setSelectionInteraction:", v14);

}

void UIRectFillUsingBlendMode(CGRect rect, CGBlendMode blendMode)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  _QWORD *ContextStack;
  CGContext *v8;
  CGBlendMode v9;
  CGBlendMode v10;
  CGRect v11;
  CGRect v12;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  ContextStack = GetContextStack(0);
  if (*(int *)ContextStack < 1)
    v8 = 0;
  else
    v8 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  v9 = CGContextGetBlendMode();
  if (v9 == blendMode)
  {
    v11.origin.x = x;
    v11.origin.y = y;
    v11.size.width = width;
    v11.size.height = height;
    CGContextFillRect(v8, v11);
  }
  else
  {
    v10 = v9;
    CGContextSetBlendMode(v8, blendMode);
    v12.origin.x = x;
    v12.origin.y = y;
    v12.size.width = width;
    v12.size.height = height;
    CGContextFillRect(v8, v12);
    CGContextSetBlendMode(v8, v10);
  }
}

void _setInteractionView(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v4, "willMoveToView:", v3);
  objc_msgSend(v4, "didMoveToView:", v3);

}

void _UIGestureRecognizerCommonInit(uint64_t a1)
{
  objc_class *v2;
  IMP MethodImplementation;
  objc_class *v4;
  objc_class *v5;
  IMP v6;
  objc_class *v7;
  IMP v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  objc_class *v14;
  IMP v15;
  objc_class *v16;
  objc_class *v17;
  IMP v18;
  objc_class *v19;
  IMP v20;
  char v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  void *v37;
  _QWORD *v38;
  id v39;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFFFFF1FFFFFFFLL | 0xA0000000;
  v2 = (objc_class *)objc_opt_class();
  MethodImplementation = class_getMethodImplementation(v2, sel_shouldRequireFailureOfGestureRecognizer_);
  v4 = (objc_class *)objc_opt_class();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)(MethodImplementation != class_getMethodImplementation(v4, sel_shouldRequireFailureOfGestureRecognizer_)) << 22);
  v5 = (objc_class *)objc_opt_class();
  v6 = class_getMethodImplementation(v5, sel_shouldBeRequiredToFailByGestureRecognizer_);
  v7 = (objc_class *)objc_opt_class();
  v8 = class_getMethodImplementation(v7, sel_shouldBeRequiredToFailByGestureRecognizer_);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = v9 & 0xFFFFFFFFFE7FFFFFLL | ((unint64_t)(v6 != v8) << 23);
  v11 = v9 & 0x400000;
  v12 = v6 == v8 && v11 == 0;
  v13 = 0x1000000;
  if (v12)
    v13 = 0;
  *(_QWORD *)(a1 + 8) = v10 | v13;
  v14 = (objc_class *)objc_opt_class();
  v15 = class_getMethodImplementation(v14, sel_touchesEstimatedPropertiesUpdated_);
  v16 = (objc_class *)objc_opt_class();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)(v15 != class_getMethodImplementation(v16, sel_touchesEstimatedPropertiesUpdated_)) << 26);
  v17 = (objc_class *)objc_opt_class();
  v18 = class_getMethodImplementation(v17, sel__shouldReceiveTouch_forEvent_recognizerView_);
  v19 = (objc_class *)objc_opt_class();
  v20 = class_getMethodImplementation(v19, sel__shouldReceiveTouch_forEvent_recognizerView_);
  v21 = *(_BYTE *)(a1 + 16);
  v22 = 0x810008000000;
  if (v18 == v20)
    v22 = 0x810000000000;
  *(_QWORD *)(a1 + 8) = v22 | *(_QWORD *)(a1 + 8) & 0xFFFF7EFFF7FFFFFFLL;
  *(_BYTE *)(a1 + 16) = v21 | 8;
  *(_QWORD *)(a1 + 80) = -[UIGestureRecognizer _defaultAllowedTouchTypesMask](a1);
  if (objc_msgSend((id)objc_opt_class(), "_supportsDefaultPressTypes"))
    v23 = &unk_1E1A935F0;
  else
    v23 = (void *)MEMORY[0x1E0C9AA60];
  objc_storeStrong((id *)(a1 + 240), v23);
  objc_msgSend((id)a1, "setRequiresExclusiveTouchType:", 1);
  if ((objc_opt_respondsToSelector() & 1) != 0
    && (objc_opt_respondsToSelector() & 1) != 0
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v24 = objc_opt_respondsToSelector();
    v25 = 0x200000000000;
    if ((v24 & 1) == 0)
      v25 = 0;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFDFFFFFFFFFFFLL | v25;
  *(_BYTE *)(a1 + 16) = v26;
  if ((objc_opt_respondsToSelector() & 1) != 0
    && (objc_opt_respondsToSelector() & 1) != 0
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v27 = objc_opt_respondsToSelector();
    v28 = 0x800000000000000;
    if ((v27 & 1) == 0)
      v28 = 0;
  }
  else
  {
    v28 = 0;
  }
  v29 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xF7FFFFFFFFFFFFFFLL | v28;
  *(_BYTE *)(a1 + 16) = v29;
  v30 = objc_opt_respondsToSelector();
  v31 = 0x1000000000000000;
  if ((v30 & 1) == 0)
    v31 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xEFFFFFFFFFFFFFFFLL | v31;
  v32 = objc_opt_respondsToSelector();
  v33 = 0x2000000000000000;
  if ((v32 & 1) == 0)
    v33 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xDFFFFFFFFFFFFFFFLL | v33;
  if ((objc_opt_respondsToSelector() & 1) != 0
    && (objc_opt_respondsToSelector() & 1) != 0
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v34 = objc_opt_respondsToSelector();
    v35 = 0x4000000000000000;
    if ((v34 & 1) == 0)
      v35 = 0;
  }
  else
  {
    v35 = 0;
  }
  v36 = *(_BYTE *)(a1 + 16) & 0xDF;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xBFFFFFFFFFFFFFFFLL | v35;
  *(_BYTE *)(a1 + 16) = v36 | 0x20;
  objc_msgSend((id)a1, "_driver");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37)
  {
    *(_BYTE *)(a1 + 16) |= 0x40u;
    v39 = v37;
    objc_msgSend(v37, "setDelegate:", a1);
    v38 = -[_UIGestureRecognizerDriverContextImpl initWithGestureRecognizer:]([_UIGestureRecognizerDriverContextImpl alloc], a1);
    objc_msgSend(v39, "setContext:", v38);

    v37 = v39;
  }

}

void _UIGestureRecognizerAddTargetToArray(id *a1, id a2, void *a3)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id WeakRetained;
  id *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    v6 = *a1;
    if (!v6)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      objc_storeStrong(a1, v6);
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v16;
      while (2)
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v16 != v10)
            objc_enumerationMutation(v7);
          v12 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v11);
          if (v12)
          {
            if (*(void **)(v12 + 16) == a3)
            {
              WeakRetained = objc_loadWeakRetained((id *)(v12 + 8));

              if (WeakRetained == a2)
              {
                v14 = (id *)v7;
                goto LABEL_17;
              }
            }
          }
          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v9)
          continue;
        break;
      }
    }

    v14 = (id *)objc_alloc_init((Class)objc_opt_self());
    objc_storeWeak(v14 + 1, a2);
    v14[2] = a3;
    objc_msgSend(v7, "addObject:", v14, (_QWORD)v15);
LABEL_17:

  }
}

void __UIViewWasRemovedFromSuperview(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)a2);
  if (a2 && (a1[13] & 0x1000000000) == 0)
  {
    objc_msgSend(a1, "_makeSubtreePerformSelector:withObject:", sel__unsubscribeToScrollNotificationsIfNecessary_, a2);
    objc_msgSend(a1, "_unsubscribeToScrollNotificationsIfNecessary:", a2);
    -[UIView _postMovedFromSuperview:](a1, a2);
    objc_msgSend(a2, "_didRemoveSubview:", a1);
  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "_monitoredView:didMoveFromSuperview:toSuperview:", a1, a2, 0, (_QWORD)v11);
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }

}

void __UIViewWillBeRemovedFromSuperview(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  void *v12;
  id v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  int v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((*(_QWORD *)(a1 + 104) & 0x10000) != 0)
  {
    objc_msgSend((id)a1, "_responderWindow");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "firstResponder");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend((id)a1, "_containsResponder:", v5)
      && objc_msgSend((id)a1, "_canResignIfContainsFirstResponder"))
    {
      if (objc_msgSend(v4, "_isSettingFirstResponder"))
      {
        objc_msgSend((id)a1, "_setFirstResponder:", 0);
      }
      else
      {
        objc_msgSend(v4, "_setIsSettingFirstResponder:", 1);
        objc_msgSend(v5, "resignFirstResponder");
        objc_msgSend(v4, "_setIsSettingFirstResponder:", 0);
        objc_msgSend((id)a1, "nextFirstResponder");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        if (v6 && (objc_msgSend((id)a1, "_containsResponder:", v6) & 1) == 0)
          objc_msgSend(v6, "becomeFirstResponder");

      }
    }

  }
  objc_msgSend((id)a1, "_focusSystem");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "_focusEnvironmentWillDisappear:", a1);
    if ((*(_DWORD *)(a1 + 104) & 0x80000000) != 0)
      objc_msgSend(v8, "_focusEnvironmentWillDisappear:", *(_QWORD *)(a1 + 96));
  }
  v9 = (id)objc_msgSend((id)a1, "superview");
  if (!v9)
  {
    if ((*(_QWORD *)(a1 + 104) & 0x1000000000) != 0)
      goto LABEL_32;
    goto LABEL_22;
  }
  v10 = *(id *)(a1 + 168);
  v11 = objc_retainAutorelease((id)a1);
  v12 = (void *)v11[8];
  v11[8] = v10;
  v13 = v10;

  v14 = (_QWORD *)v11[22];
  if (v14)
    v14 = (_QWORD *)v14[1];
  v15 = v14;
  -[UIBackgroundConfiguration _setCustomView:](v11[22], v15);

  objc_setAssociatedObject(v13, &unk_1EDDCA61C, 0, (void *)1);
  if ((v11[13] & 0x1000000000) == 0)
  {
    objc_msgSend(v9, "_willRemoveSubview:", v11);
    objc_msgSend(v11, "willMoveToSuperview:", 0);
    if ((dyld_program_sdk_at_least() & 1) == 0 && (v11[13] & 0x400000000000000) != 0)
    {
      objc_msgSend(v9, "_constraints_subviewWillChangeSuperview:", v11);
      -[UIView _willRemoveSubviewWantingAutolayout:](v9, v11);
    }
LABEL_22:
    if (qword_1EDDCA8B8 != -1)
      dispatch_once(&qword_1EDDCA8B8, &__block_literal_global_3390);
    v16 = v9;
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(v9, "window");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if (v16)
    {
      objc_msgSend((id)a1, "setViewTraversalMark:", 1);
      objc_msgSend((id)a1, "_willMoveToWindow:", 0);
      objc_msgSend((id)a1, "_makeSubtreePerformSelector:withObject:withObject:copySublayers:", sel__willMoveToWindow_, 0, 0, 1);
      objc_msgSend((id)a1, "setViewTraversalMark:", 0);
    }
    v17 = dyld_program_sdk_at_least();
    if (v9 && v17 && (*(_QWORD *)(a1 + 104) & 0x400000000000000) != 0)
    {
      objc_msgSend(v9, "_constraints_subviewWillChangeSuperview:", a1);
      -[UIView _willRemoveSubviewWantingAutolayout:](v9, (void *)a1);
    }
  }
LABEL_32:
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v18 = a2;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v24 != v21)
          objc_enumerationMutation(v18);
        objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "_monitoredView:willMoveFromSuperview:toSuperview:", a1, v9, 0, (_QWORD)v23);
      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v20);
  }

  -[UIView _removeParentGeometryObservers]((_QWORD *)a1);
  objc_msgSend(v9, "_invalidateSubviewCache");

}

void sub_185131FFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1851321E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_185132358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185135954(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

void sub_185135BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185135CC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18513609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIViewEatsTouchesAndAnimationDelegateAllowsInteraction(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  float v7;

  v3 = a1;
  if (_UIViewIsAnimating(v3) && (objc_msgSend(v3, "isHidden") & 1) == 0)
  {
    objc_msgSend(v3, "layer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "presentationLayer");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "opacity");
    if (v7 >= 0.01)
      v4 = a2 ^ 1u;
    else
      v4 = 0;

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

BOOL _UIViewIsAnimating(void *a1)
{
  void *v1;
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a1, "layer");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "animationKeys");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

uint64_t _UIViewAnimationDelegateAllowsUserInteraction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v1 = a1;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 1;
  objc_msgSend(v1, "layer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "animationKeys");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___UIViewAnimationDelegateAllowsUserInteraction_block_invoke;
  v7[3] = &unk_1E16CB2A0;
  v4 = v1;
  v8 = v4;
  v9 = &v10;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v7);

  v5 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);

  return v5;
}

void sub_185136280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185136428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1851367C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18513741C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void targetListChangeNotificationCallback(uint64_t a1, uint64_t a2)
{
  signalChanges(a2, 4);
}

void sub_185137FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  uint64_t v27;

  _Block_object_dispose((const void *)(v27 - 160), 8);
  _UIEmitSignpostEvent(&a27);
  _Unwind_Resume(a1);
}

ValueMetadata *type metadata accessor for UIListContentConfiguration.TextProperties()
{
  return &type metadata for UIListContentConfiguration.TextProperties;
}

ValueMetadata *type metadata accessor for UIListContentConfiguration.TextProperties.TextTransform()
{
  return &type metadata for UIListContentConfiguration.TextProperties.TextTransform;
}

void destroy for UICellAccessory.DetailOptions(uint64_t a1)
{

}

id UIListContentConfiguration.TextProperties.font.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_font);
}

double UIEdgeInsetsReplace(char a1, double a2, double a3, double a4, double a5, double a6)
{
  double result;

  if ((a1 & 1) != 0)
    return a6;
  return result;
}

void sub_18513B194(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_18513B354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _calculateVisibleIndicators(void *a1, uint64_t a2, double *a3, double *a4, double a5)
{
  id v9;
  void *v10;
  void *v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;

  v9 = a1;
  objc_msgSend(v9, "store");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectAtIndex:", a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = objc_msgSend(v9, "direction");
  objc_msgSend(v9, "_indicatorSizeForObject:", v11);
  v14 = v13;
  v16 = v15;

  if (v12 >= 2)
    v17 = v16;
  else
    v17 = v14;
  v18 = *a4;
  if (a3)
  {
    v19 = fmax(*a3, v17);
    *a3 = v19;
    v18 = v18 - (v19 + a5);
  }
  v20 = v17 + a5;
  v21 = objc_msgSend(v11, "endIndex");
  v22 = objc_msgSend(v11, "startIndex");
  v23 = llround(v18 / v20);
  if (v21 - v22 >= v23)
    v24 = v23;
  else
    v24 = v21 - v22;
  *a4 = *a4 - v20 * (double)v24;

  return v24;
}

id UICellConfigurationState.traitCollection.getter()
{
  id *v0;

  return *v0;
}

double _UIComputedSizeForLabel(void *a1, void *a2, void *a3, unint64_t a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, double a8, double a9)
{
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  id v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  double *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  double v45;
  double v46;
  void *v47;
  double v48;
  void *v49;
  void *v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  void *v62;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  id v69;
  _QWORD *v70;
  BOOL v71;
  void *v72;
  void *v73;

  v16 = a1;
  v17 = a2;
  v18 = a3;
  objc_msgSend(v16, "_stringDrawingContext");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setMaximumNumberOfLines:", a4);
  if (a5)
    objc_msgSend(v19, "setWantsNumberOfLineFragments:", 1);
  objc_msgSend(v19, "setWantsBaselineOffset:", 1);
  if (a8 < 0.0 || a9 < 0.0)
  {
    a8 = *MEMORY[0x1E0C9D820];
    goto LABEL_59;
  }
  if (a8 == 0.0)
    a8 = 3.40282347e38;
  if (a9 == 0.0)
    a9 = 3.40282347e38;
  objc_msgSend(v16, "_content");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    objc_msgSend(v73, "contentWithString:", v17);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }
  if (v18)
  {
    objc_msgSend(v73, "contentWithAttributedString:", v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:
    v21 = v20;
    v71 = (v17 | v18) != 0;
    v22 = *MEMORY[0x1E0C9D538];
    v23 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    -[UILabel _synthesizedAttributedTextForContent:]((uint64_t)v16, v20);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    -[UILabel _scaledMetricsForText:inRect:]((_UILabelLegacyScaledMetrics *)v16, v72, v22, v23, a8, a9);
    v24 = (double *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setCachesLayout:", 0);
    objc_msgSend(v19, "setLayout:", 0);
    if (!v16)
      goto LABEL_17;
    goto LABEL_15;
  }
  v21 = v73;
  v45 = *MEMORY[0x1E0C9D538];
  v46 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  objc_msgSend(v16, "_synthesizedAttributedText");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[UILabel _updateScaledMetricsForRect:]((uint64_t)v16, v45, v46, a8, a9))
    objc_msgSend(v19, "setLayout:", 0);
  v24 = (double *)*((id *)v16 + 77);
  v71 = 0;
  if (!v16)
    goto LABEL_17;
LABEL_15:
  if (v24 && (v16[744] & 4) != 0)
  {
    v27 = v24[8];
    v32 = *((_QWORD *)v24 + 5);
    v29 = *((_QWORD *)v24 + 3);
    v31 = *((_QWORD *)v24 + 7);
    goto LABEL_24;
  }
LABEL_17:
  if (objc_msgSend(v21, "isAttributed"))
  {
    v70 = a6;
    if (v72)
    {
      v25 = -[UILabel _boundingRectWithAttributedString:size:options:context:](v16, v72, objc_msgSend(v16, "_stringDrawingOptions"), v19, a8, 3.40282347e38);
      v27 = v26;
      v68 = objc_msgSend(v19, "numberOfLineFragments", v25);
      objc_msgSend(v19, "baselineOffset");
      v29 = v28;
      objc_msgSend(v19, "firstBaselineOffset");
      v31 = v30;
    }
    else
    {
      v68 = 0;
      v27 = *MEMORY[0x1E0C9D820];
      v31 = 0;
      v29 = 0;
    }
    objc_msgSend(v21, "paragraphStyle");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    if (dyld_program_sdk_at_least())
    {
      v67 = v47;
      objc_msgSend(v47, "firstLineHeadIndent");
      if (v48 <= 0.0)
        goto LABEL_46;
      if (objc_msgSend(v19, "numberOfLineFragments") != 1)
      {
        objc_msgSend(v72, "string");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v66 = v49;
        objc_msgSend(v49, "componentsSeparatedByCharactersInSet:", v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();

        v52 = objc_msgSend(v51, "count");
        v65 = v51;
        if (objc_msgSend(v51, "count"))
        {
          objc_msgSend(v51, "lastObject");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          v53 = objc_msgSend(v64, "length") == 0;

          v52 -= v53;
        }
        v54 = 0x7FFFFFFFLL;
        if (a4)
          v54 = a4;
        v55 = v54 >= v52 ? v52 : v54;
        v56 = objc_msgSend(v19, "numberOfLineFragments");

        v57 = v55 == v56;
        a6 = v70;
        if (!v57)
        {
LABEL_46:
          v44 = v72;
          v47 = v67;
          goto LABEL_47;
        }
      }
      v47 = v67;
      objc_msgSend(v67, "firstLineHeadIndent");
      v59 = v27 + v58;
      if (v59 >= a8)
        v27 = a8;
      else
        v27 = v59;
    }
    v44 = v72;
LABEL_47:

    v32 = v68;
    goto LABEL_48;
  }
  if (objc_msgSend(v21, "isNil"))
  {
    v32 = 0;
    v27 = *MEMORY[0x1E0C9D820];
    v31 = 0;
    v29 = 0;
  }
  else
  {
    objc_msgSend(v21, "string");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = v21;
    v34 = v18;
    v35 = v24;
    v36 = a6;
    v37 = objc_msgSend(v16, "_stringDrawingOptions");
    -[UILabel _synthesizedTextAttributes](v16);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = v37;
    a6 = v36;
    v24 = v35;
    v18 = v34;
    v21 = v69;
    -[UILabel _boundingRectWithString:size:options:attributes:context:](v16, v33, v39, v38, v19, a8, 3.40282347e38);
    v27 = v40;

    v41 = objc_msgSend(v19, "numberOfLineFragments");
    objc_msgSend(v19, "baselineOffset");
    v29 = v42;
    objc_msgSend(v19, "firstBaselineOffset");
    v32 = v41;
    v31 = v43;
  }
LABEL_24:
  v44 = v72;
LABEL_48:
  v60 = v27 - a8;
  if (v27 - a8 < 0.0001)
    a8 = v27;
  if (a5)
    *a5 = v32;
  if (a6)
    *a6 = v29;
  if (a7)
    *a7 = v31;
  if (!v71)
  {
    objc_msgSend(v19, "layout", v60);
    v61 = objc_claimAutoreleasedReturnValue();
    v62 = (void *)*((_QWORD *)v16 + 76);
    *((_QWORD *)v16 + 76) = v61;

  }
LABEL_59:

  return a8;
}

double UIRectRoundToScale(double a1, double a2, double a3, double a4, double a5)
{
  double v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;

  v7 = a5;
  if (a5 == 0.0)
  {
    if (AdjustToScale_onceToken_0 != -1)
      dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
    v7 = *(double *)&AdjustToScale___s_0;
  }
  v8 = v7 == 1.0;
  v9 = round(a1 * v7) / v7;
  v10 = round(a1);
  if (v8)
    v11 = v10;
  else
    v11 = v9;
  if (a5 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  if (a5 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  if (a5 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  return v11;
}

void sub_1851413D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

BOOL _UILabelShouldReverseNaturalAlignment(void *a1, uint64_t a2)
{
  id v3;
  UIUserInterfaceLayoutDirection v4;
  _BOOL8 v5;
  void *v6;

  v3 = a1;
  v4 = +[UIView userInterfaceLayoutDirectionForSemanticContentAttribute:](UIView, "userInterfaceLayoutDirectionForSemanticContentAttribute:", a2);
  if (v4 == objc_msgSend((id)UIApp, "userInterfaceLayoutDirection"))
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v3, "paragraphStyle");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v6, "alignment") == 4;

  }
  return v5;
}

Swift::Void __swiftcall NSDiffableDataSourceSnapshot.appendSections(_:)(Swift::OpaquePointer a1)
{
  sub_1852ACFD4();
}

uint64_t static UIBackgroundConfiguration.listGroupedCell()@<X0>(uint64_t *a1@<X8>)
{
  return sub_18526BD38((SEL *)&selRef_listGroupedCellConfiguration, a1);
}

id UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_185349B04(a1, a2, a3, qword_1EDD82570, (id *)&qword_1EDD82560, a4);
}

id static UICellAccessory.disclosureIndicator(displayed:options:)@<X0>(unsigned __int8 *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_18529D7C4(a1, a2, (Class *)off_1E167A460, 0, a3);
}

uint64_t sub_1851419A8(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

uint64_t UICellConfigurationState.isFocused.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 11);
}

void sub_185144BD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1851459FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _isDraggingEnabledByDefaultInNewCases()
{
  void *v0;
  uint64_t v1;
  uint64_t result;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if ((v1 & 0xFFFFFFFFFFFFFFFBLL) == 1)
    return 1;
  LODWORD(result) = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_DraggingEnabledPhone, (uint64_t)CFSTR("DraggingEnabledPhone"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  if (byte_1ECD7618C)
    return 1;
  else
    return result;
}

void _UIContextMenuRegisterDefaultPlatformMetricsIfNecessary()
{
  if (_UIContextMenuRegisterDefaultPlatformMetricsIfNecessary_onceToken != -1)
    dispatch_once(&_UIContextMenuRegisterDefaultPlatformMetricsIfNecessary_onceToken, &__block_literal_global_697);
}

double _UIClickPresentationAllowableMovementForDriver(void *a1, int a2)
{
  id v3;
  double v4;

  v3 = a1;
  if (a2)
    v4 = 20.0;
  else
    v4 = 10.0;
  if ((objc_opt_respondsToSelector() & 1) != 0 && objc_msgSend(v3, "behavior") == 2)
    v4 = 3.0;

  return v4;
}

id _UIContextMenuGetPlatformMetrics(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)_UIContextMenuGetPlatformMetrics_metricsByIdiom;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    if (!_UIContextMenuGetPlatformMetrics_metricsByIdiom)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = (void *)_UIContextMenuGetPlatformMetrics_metricsByIdiom;
      _UIContextMenuGetPlatformMetrics_metricsByIdiom = v5;

    }
    +[_UIVisualStyleRegistry registryForIdiom:](_UIVisualStyleRegistry, "registryForIdiom:", a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v7, "visualStyleClassForStylableClass:", objc_opt_class());

    if (v4)
    {
      v4 = (void *)objc_opt_new();
      v8 = (void *)_UIContextMenuGetPlatformMetrics_metricsByIdiom;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKey:", v4, v9);

    }
  }
  return v4;
}

double _UIDragInteractionDefaultCompetingLongPressDelay()
{
  int v0;
  double result;

  v0 = _UIInternalPreferenceUsesDefault((int *)&unk_1ECD76108, (uint64_t)CFSTR("DragInteractionDefaultCompetingLongPressDelay"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  result = *(double *)&qword_1ECD76110;
  if (v0)
    return 1.0;
  return result;
}

double _UIDragInteractionDefaultCancellationDelay()
{
  int v0;
  double result;

  v0 = _UIInternalPreferenceUsesDefault((int *)&unk_1ECD760F8, (uint64_t)CFSTR("DragInteractionDefaultCancellationDelay"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  result = *(double *)&qword_1ECD76100;
  if (v0)
    return 3.0;
  return result;
}

double _UIDragInteractionDefaultPointerLiftDelay()
{
  void *v0;
  uint64_t v1;
  int v2;
  double result;
  BOOL v4;
  double v5;
  int v6;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1 == 6)
  {
    v2 = _UIInternalPreferenceUsesDefault((int *)&unk_1ECD76138, (uint64_t)CFSTR("DragInteractionDefaultPointerLiftDelayVisionIdiom"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
    result = *(double *)&qword_1ECD76140;
    v4 = v2 == 0;
    v5 = 0.35;
  }
  else
  {
    v6 = _UIInternalPreferenceUsesDefault((int *)&unk_1ECD76128, (uint64_t)CFSTR("DragInteractionDefaultPointerLiftDelay"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
    result = *(double *)&qword_1ECD76130;
    v4 = v6 == 0;
    v5 = 0.325;
  }
  if (!v4)
    return v5;
  return result;
}

id _UIClickInteractionDefaultDrivers()
{
  _QWORD v1[4];

  v1[3] = *MEMORY[0x1E0C80C00];
  v1[0] = _UIClickInteractionDriverForActivationStyle();
  v1[1] = objc_opt_class();
  v1[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 3);
  return (id)objc_claimAutoreleasedReturnValue();
}

id _UIClickInteractionDriverForActivationStyle()
{
  return (id)objc_opt_class();
}

double _UIDragInteractionDefaultPointerLiftMoveHysteresis()
{
  int v0;
  double result;

  v0 = _UIInternalPreferenceUsesDefault((int *)&unk_1ECD76148, (uint64_t)CFSTR("DragInteractionDefaultPointerLiftMoveHysteresis"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  result = *(double *)&qword_1ECD76150;
  if (v0)
    return 3.0;
  return result;
}

double _UIDragInteractionDefaultLiftMoveHysteresis()
{
  int v0;
  double result;

  v0 = _UIInternalPreferenceUsesDefault((int *)&unk_1ECD76118, (uint64_t)CFSTR("DragInteractionDefaultLiftMoveHysteresis"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  result = *(double *)&qword_1ECD76120;
  if (v0)
    return 10.0;
  return result;
}

double _UIDragInteractionDefaultLiftDelay()
{
  int v0;
  double result;

  v0 = _UIInternalPreferenceUsesDefault((int *)&unk_1ECD760E8, (uint64_t)CFSTR("DragInteractionDefaultLiftDelay"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  result = *(double *)&qword_1ECD760F0;
  if (v0)
    return 0.325;
  return result;
}

uint64_t _UIViewControllerDefaultModalTransitionStyle(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  +[_UIPresentationControllerDefaultVisualStyleProvider sharedInstance](_UIPresentationControllerDefaultVisualStyleProvider, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "defaultConcreteTransitionStyleForViewController:", v1);

  return v3;
}

uint64_t _UIDeviceNativeUserInterfaceIdiom()
{
  if (qword_1ECD7E340 != -1)
    dispatch_once(&qword_1ECD7E340, &__block_literal_global_39_1);
  return qword_1ECD7E338;
}

uint64_t _UISafelyGetOrientationMask(void *a1)
{
  uint64_t (**v1)(void);
  uint64_t v2;

  v1 = a1;
  v2 = v1[2]();

  return v2;
}

void sub_18514C680(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t block, uint64_t a11, void (*a12)(uint64_t a1), void *a13, id a14)
{
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;

  v14 = objc_begin_catch(a1);
  block = MEMORY[0x1E0C809B0];
  a11 = 3221225472;
  a12 = ___UISafelyGetOrientationMask_block_invoke;
  a13 = &unk_1E16B1B28;
  a14 = v14;
  v15 = _UISafelyGetOrientationMask_once;
  v16 = v14;
  v17 = v16;
  if (v15 == -1)
  {
    v18 = v16;
  }
  else
  {
    dispatch_once(&_UISafelyGetOrientationMask_once, &block);
    v18 = a14;
  }

  objc_end_catch();
  -[UIApplication _defaultSupportedInterfaceOrientations](UIApp);
  JUMPOUT(0x18514C660);
}

uint64_t _UIUserInterfaceSizeClassForWidth(double a1)
{
  void *v2;
  uint64_t v3;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = _UIUserInterfaceSizeClassForWidthAndUserInterfaceIdiomWithHomeButton(objc_msgSend(v2, "userInterfaceIdiom"), +[UIDevice _hasHomeButton](UIDevice, "_hasHomeButton"), a1);

  return v3;
}

uint64_t _UIUserInterfaceSizeClassForWidthAndUserInterfaceIdiomWithHomeButton(unint64_t a1, char a2, double a3)
{
  double v6;
  double v7;
  double v8;
  char v9;

  if (a1 > 1)
  {
    if (a1 - 2 > 6)
      return 0;
    else
      return qword_18667DE08[a1 - 2];
  }
  else
  {
    _UIScreenReferenceBoundsSizeForType(0x1BuLL);
    v7 = v6;
    _UIScreenReferenceBoundsSizeForType(3uLL);
    if (a1)
      v9 = 1;
    else
      v9 = a2;
    if (v7 < a3)
      v9 = 1;
    if ((v9 & (v8 < a3)) != 0)
      return 2;
    else
      return 1;
  }
}

id UIBackgroundConfiguration.strokeWidth.setter(double a1)
{
  return sub_185151FBC((SEL *)&selRef_setStrokeWidth_, a1);
}

void UIBackgroundConfiguration.strokeColor.setter(void *a1)
{
  sub_18522E700(a1, (const char **)&selRef_setStrokeColor_);
}

ValueMetadata *type metadata accessor for UICollectionLayoutListConfiguration()
{
  return &type metadata for UICollectionLayoutListConfiguration;
}

id sub_18514E1B8()
{
  id *v0;

  return *v0;
}

uint64_t dispatch thunk of UIConfigurationState.traitCollection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_18514F24C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

double _UIEdgeInsetsPropagatedToChildRectIncludingOutsetOnEdges(char a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13)
{
  return _UIEdgeInsetsPropagatedToChildRectOnEdgesAndIncludingOutset(a1, 1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t _UIPointerLockStateIsAvailableForScene(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "_hostsWindows"))
  {
    v3 = v2;
    objc_msgSend(v3, "_FBSScene");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "session");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "role");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("UIWindowSceneSessionRoleApplication"));

    objc_msgSend(v3, "_screen");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "_userInterfaceIdiom");

    if ((v9 & 0xFFFFFFFFFFFFFFFBLL) == 1)
      v10 = v7;
    else
      v10 = 0;
    if (v4)
      v11 = v10;
    else
      v11 = 0;

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

double UIEdgeInsetsAverage(char a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v15 = a2;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0)
      goto LABEL_3;
LABEL_14:
    v19 = a10;
    if (a10 == 0.0)
    {
      if (AdjustToScale_onceToken_0 != -1)
        dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
      v19 = *(double *)&AdjustToScale___s_0;
    }
    if (v19 == 1.0)
    {
      if ((a1 & 4) != 0)
        goto LABEL_22;
    }
    else if ((a1 & 4) != 0)
    {
      goto LABEL_22;
    }
LABEL_4:
    if ((a1 & 8) == 0)
      return v15;
    goto LABEL_30;
  }
  v16 = a2 + a6;
  v17 = a10;
  if (a10 == 0.0)
  {
    if (AdjustToScale_onceToken_0 != -1)
      dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
    v17 = *(double *)&AdjustToScale___s_0;
  }
  v18 = v16 * 0.5;
  if (v17 == 1.0)
  {
    v15 = round(v18);
    if ((a1 & 2) != 0)
      goto LABEL_14;
  }
  else
  {
    v15 = round(v18 * v17) / v17;
    if ((a1 & 2) != 0)
      goto LABEL_14;
  }
LABEL_3:
  if ((a1 & 4) == 0)
    goto LABEL_4;
LABEL_22:
  v20 = a10;
  if (a10 == 0.0)
  {
    if (AdjustToScale_onceToken_0 != -1)
      dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
    v20 = *(double *)&AdjustToScale___s_0;
  }
  if (v20 == 1.0)
  {
    if ((a1 & 8) == 0)
      return v15;
  }
  else if ((a1 & 8) == 0)
  {
    return v15;
  }
LABEL_30:
  if (a10 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  return v15;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t static _UIKitNumericRawRepresentable.- infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1850E0990(a1, a2, (void (*)(char *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DECC18], a3);
}

uint64_t sub_185151C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_185151CE8()
{
  return sub_186506CC4();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t sub_185151D0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1852C76E8(qword_1EDD8B090, a1);
}

uint64_t UICellConfigurationState.isHighlighted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

void sub_185151FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_185151FBC(SEL *a1, double a2)
{
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_18522E994();
    swift_dynamicCast();
    v7 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A78);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v10;
    swift_release();
    *v2 = v8;
  }
  return objc_msgSend(v7, *a1, a2);
}

void _UIBackgroundConfigurationApplyProperties(void *a1, uint64_t a2, void *a3)
{
  const char *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  double v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  __int128 v16;
  id self;

  self = a1;
  v6 = a3;
  if (self)
    objc_setProperty_nonatomic_copy(self, v5, *(id *)(a2 + 16), 56);
  objc_msgSend(self, "__setVisualEffectGroupName:", *(_QWORD *)(a2 + 24));
  if (!*(_QWORD *)(a2 + 16) || *(_BYTE *)(a2 + 32))
  {
    if (*(_QWORD *)a2 == 1)
    {
      -[UIBackgroundConfiguration _setBackgroundColor:]((uint64_t)self, 0);
    }
    else
    {
      v7 = *(id *)(a2 + 8);
      if (self)
      {
        if (v7)
        {
          v8 = v7;
        }
        else
        {
          +[UIColor clearColor](UIColor, "clearColor");
          v8 = (id)objc_claimAutoreleasedReturnValue();
        }
        v9 = (void *)*((_QWORD *)self + 5);
        *((_QWORD *)self + 5) = v8;

      }
    }
  }
  _UIShadowPropertiesFromShadowType(*(_QWORD *)(a2 + 40), v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "_setShadowProperties:", v10);

  -[UIBackgroundConfiguration _setBackgroundColorTransformerIdentifier:]((uint64_t)self, *(_QWORD *)(a2 + 48));
  v11 = *(double *)(a2 + 56);
  if (v11 > 0.0)
  {
    if (self)
    {
      *((double *)self + 13) = v11;
      *((_QWORD *)self + 14) = *(_QWORD *)(a2 + 64);
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_16:
        -[UIBackgroundConfiguration _setStrokeColor:]((uint64_t)self, 0);
LABEL_22:
        objc_msgSend(self, "_setStrokeLocation:", *(_QWORD *)(a2 + 88));
        goto LABEL_23;
      }
      v12 = *(id *)(a2 + 80);
      v13 = v12;
      if (v12)
      {
        v14 = v12;
      }
      else
      {
        +[UIColor clearColor](UIColor, "clearColor");
        v14 = (id)objc_claimAutoreleasedReturnValue();
      }
      v15 = (void *)*((_QWORD *)self + 11);
      *((_QWORD *)self + 11) = v14;

    }
    else
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_16;
      v13 = *(id *)(a2 + 80);
    }

    goto LABEL_22;
  }
LABEL_23:
  objc_msgSend(self, "_setCornerRadius:", *(double *)(a2 + 96));
  if (self)
  {
    v16 = *(_OWORD *)(a2 + 120);
    *((_OWORD *)self + 11) = *(_OWORD *)(a2 + 104);
    *((_OWORD *)self + 12) = v16;
  }

  __destructor_8_s8_s16_s24_s80((id *)a2);
}

void sub_18515353C(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

uint64_t _UIConfigurationColorTransformerForIdentifier(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 0x1A)
    return 0;
  else
    return (uint64_t)*(&off_1E16C6480 + a1 - 2);
}

uint64_t _UIBarsUseDynamicType()
{
  if (qword_1ECD7A898 != -1)
    dispatch_once(&qword_1ECD7A898, &__block_literal_global_56);
  return _MergedGlobals_5_2;
}

void UILabelCommonInit(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  int v8;
  id v9;
  __CFString *v10;
  void *v11;
  void *v12;
  _QWORD *v13;

  v13 = a1;
  if (!_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_LabelDisableDefaultClipping, (uint64_t)CFSTR("LabelDisableDefaultClipping")))
  {
    if (!byte_1ECD75E7C)
      goto LABEL_6;
    goto LABEL_5;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
LABEL_5:
    objc_msgSend(v13, "setClipsToBounds:", 0);
LABEL_6:
  v1 = v13;
  if (qword_1ECD792E0 != -1)
  {
    dispatch_once(&qword_1ECD792E0, &__block_literal_global_143_1);
    v1 = v13;
  }
  objc_msgSend(v1, "_setDrawsDebugGlyphPathBoundsClipping:", _MergedGlobals_56);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v13[87] = objc_msgSend(v2, "_addObserver:selector:name:object:options:", v13, sel__accessibilityButtonShapesChangedNotification_, CFSTR("UIAccessibilityButtonShapesEnabledStatusDidChangeNotification"), 0, 0);

  objc_msgSend(v13, "_visualStyle");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "actionsForInitializationOfLabel:", v13);

  objc_msgSend(v13, "layer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setContentsMultiplyColor:", 0);
  v5 = (void *)objc_msgSend((id)objc_opt_class(), "layerClass");
  v6 = objc_msgSend(v5, "instancesRespondToSelector:", sel_invalidateContentInsets);
  v7 = 0;
  if (v6)
  {
    v8 = objc_msgSend(v5, "instancesRespondToSelector:", sel__clearContents);
    v7 = 0x10000000;
    if (!v8)
      v7 = 0;
  }
  v13[93] = v13[93] & 0xFFFFFFFFEFFFFFFFLL | v7;
  v13[92] = 0x4044000000000000;
  if (dyld_program_sdk_at_least())
  {
    v9 = objc_alloc_init(MEMORY[0x1E0D1A6E8]);
    objc_msgSend(v13, "traitCollection");
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    -[UITraitCollection _styleEffectAppearanceName](v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setAppearanceName:", v11);

    v12 = (void *)v13[83];
    v13[83] = v9;

  }
}

uint64_t _UIConfigurationIdentifierForColorTransformer(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (v1)
  {
    if (qword_1ECD7D9C0 != -1)
      dispatch_once(&qword_1ECD7D9C0, &__block_literal_global_29_0);
    v2 = NSMapGet((NSMapTable *)_MergedGlobals_1036, v1);
    if (v2)
      v3 = (uint64_t)v2;
    else
      v3 = 1;
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_185156F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s8_s16_s24_s80(&a9);
  _Unwind_Resume(a1);
}

void UIListSeparatorConfiguration.color.setter(void *a1)
{
  sub_185210BF0(a1, (SEL *)&selRef_setColor_);
}

id UIListSeparatorConfiguration.topSeparatorInsets.setter(double a1, double a2, double a3, double a4)
{
  return sub_185163A70((SEL *)&selRef_setTopSeparatorInsets_, a1, a2, a3, a4);
}

void UIListContentConfiguration.text.setter(uint64_t a1, uint64_t a2)
{
  sub_1852D8320(a1, a2, (SEL *)&selRef_setText_);
}

id UIListContentConfiguration.TextProperties.transform.setter(unsigned __int8 *a1)
{
  return sub_1852432B0(a1, (SEL *)&selRef_setTransform_);
}

void UIListContentConfiguration.TextProperties.color.setter(void *a1)
{
  sub_18521B004(a1, (SEL *)&selRef_setColor_);
}

void UIListContentConfiguration.TextProperties.font.setter(void *a1)
{
  sub_18521B004(a1, (SEL *)&selRef_setFont_);
}

uint64_t static UIListContentConfiguration.groupedHeader()@<X0>(uint64_t *a1@<X8>)
{
  return sub_185398CE0((SEL *)&selRef_groupedHeaderConfiguration, a1);
}

uint64_t UICellConfigurationState.isSwiped.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 15);
}

ValueMetadata *type metadata accessor for UITraitOverrides()
{
  return &type metadata for UITraitOverrides;
}

uint64_t sub_1851572B4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ObjCImplWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObjCImplWrapper);
}

void UIBackgroundConfiguration.backgroundColor.setter(void *a1)
{
  sub_18522E700(a1, (const char **)&selRef_setBackgroundColor_);
}

uint64_t _insetsOfTopViewControllerScrollViewAutomaticallyAdjustedForLargeTitleView(void *a1)
{
  id v1;
  void *v2;
  char v3;
  id *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;

  v1 = a1;
  objc_msgSend(v1, "_contentOrObservableScrollViewForEdge:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = objc_msgSend(v1, "edgesForExtendedLayout");
    v4 = v2;
    v5 = v1;
    v6 = v4[12];

    if (v6 == v5)
    {
      v11 = objc_msgSend(v4, "_edgesApplyingSafeAreaInsetsToContentInset") & 1;
    }
    else
    {
      objc_msgSend(v4, "superview");
      v7 = objc_claimAutoreleasedReturnValue();
      if (v7)
      {
        v8 = (void *)v7;
        while (1)
        {
          objc_msgSend(v5, "view");
          v9 = (void *)objc_claimAutoreleasedReturnValue();

          if (v8 == v9)
          {
LABEL_8:
            v11 = 1;
            goto LABEL_13;
          }
          if ((objc_msgSend(v8, "_edgesPropagatingSafeAreaInsetsToSubviews") & 1) == 0)
            break;
          objc_msgSend(v8, "superview");
          v10 = objc_claimAutoreleasedReturnValue();

          v8 = (void *)v10;
          if (!v10)
            goto LABEL_8;
        }
        v11 = 0;
LABEL_13:

      }
      else
      {
        v11 = 1;
      }
    }

    objc_msgSend(v5, "_navigationControllerContentInsetAdjustment");
    if (v16 == 0.0)
      v17 = v11;
    else
      v17 = 1;
    if (v13 != 0.0)
      v17 = 1;
    if (v15 != 0.0)
      v17 = 1;
    if (v14 != 0.0)
      v17 = 1;
    if ((v3 & 1) != 0)
      v12 = v17;
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

uint64_t _UIRectEquivalentToRectWithAccuracy(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v26;
  double v27;
  double v28;
  double v29;
  _BOOL4 v30;

  if (CGRectEqualToRect(*(CGRect *)&a1, *(CGRect *)&a5))
    return 1;
  v26 = a4 - a8;
  if (a4 - a8 < 0.0)
    v26 = -(a4 - a8);
  if (v26 >= a9)
    return 0;
  v27 = a2 - a6;
  if (a2 - a6 < 0.0)
    v27 = -(a2 - a6);
  v28 = a1 - a5;
  if (a1 - a5 < 0.0)
    v28 = -(a1 - a5);
  v29 = a3 - a7;
  if (a3 - a7 < 0.0)
    v29 = -(a3 - a7);
  v30 = v29 < a9;
  if (v28 >= a9)
    v30 = 0;
  return v27 < a9 && v30;
}

uint64_t _UIBarsGetBottomBarBackgroundTransitionProgressForScrollView(void *a1, void *a2, double *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGRect v24;

  v5 = a1;
  v6 = a2;
  if (qword_1ECD7A8B8 != -1)
    dispatch_once(&qword_1ECD7A8B8, &__block_literal_global_72_0);
  if (!byte_1ECD7A892)
    goto LABEL_7;
  objc_msgSend(v6, "superview");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7 || (objc_msgSend(v6, "isHidden") & 1) != 0)
  {

    goto LABEL_7;
  }
  if (v5)
  {
    objc_msgSend(v5, "contentSize");
    v11 = v10;
    v13 = v12;
    v14 = *MEMORY[0x1E0C9D820];
    v15 = *(double *)(MEMORY[0x1E0C9D820] + 8);

    if (v11 == v14 && v13 == v15)
      goto LABEL_7;
    objc_msgSend(v5, "_contentBottomForScrollObservation");
    v18 = v17;
    objc_msgSend(v6, "superview");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "convertPoint:fromView:", v5, 0.0, v18);
    v21 = v20;
    objc_msgSend(v6, "frame");
    v22 = fmax(fmin(v21 - CGRectGetMinY(v24), 4.0), 0.0);

    v23 = v22 * -0.25 + 1.0;
  }
  else
  {

    v23 = 1.0;
  }
  if (objc_msgSend(v5, "_isTransientScrollView") && v23 > 0.0)
  {
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  if (a3)
    *a3 = v23;
  v8 = 1;
LABEL_8:

  return v8;
}

id UIListSeparatorConfiguration.bottomSeparatorVisibility.setter(unsigned __int8 *a1)
{
  return sub_185163964(a1, (SEL *)&selRef_setBottomSeparatorVisibility_);
}

ValueMetadata *type metadata accessor for UIListContentConfiguration.ImageProperties()
{
  return &type metadata for UIListContentConfiguration.ImageProperties;
}

id _pasteboardCacheQueue_pasteboardForName(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  _pasteboardCacheQueue_PasteboardNameToPasteboardMap();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _pasteboardCacheQueue_PasteboardNameToPasteboardMap()
{
  if (qword_1ECD7B258 != -1)
    dispatch_once(&qword_1ECD7B258, &__block_literal_global_295_0);
  return (id)qword_1ECD7B250;
}

void ___existingItemCollectionWithName_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id obj;

  v2 = (void *)a1[4];
  v3 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v3 + 40);
  _pasteboardCacheQueue_existingItemCollectionWithName(v2, &obj);
  v4 = objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v3 + 40), obj);
  v5 = *(_QWORD *)(a1[5] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_18515BC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

id _pasteboardCacheQueue()
{
  if (qword_1ECD7B208 != -1)
    dispatch_once(&qword_1ECD7B208, &__block_literal_global_277_0);
  return (id)qword_1ECD7B200;
}

id _pasteboardCacheQueue_existingItemCollectionWithName(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if ((objc_msgSend((id)UIApp, "_isActivating") & 1) == 0
    && !objc_msgSend((id)UIApp, "_isResigningActive")
    || !objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.UIKit.pboard.general")))
  {
    if (objc_msgSend(v3, "length"))
    {
      v33 = a2;
      v34 = v3;
      _pasteboardCacheQueue_PasteboardNametoItemCollectionMap();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v6 = v5;
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v41;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v41 != v9)
              objc_enumerationMutation(v6);
            v11 = *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * i);
            objc_msgSend(v6, "objectForKeyedSubscript:", v11);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "expirationDate");
            v13 = objc_claimAutoreleasedReturnValue();
            if (v13)
            {
              v14 = (void *)v13;
              objc_msgSend(v12, "expirationDate");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              v16 = objc_msgSend(v15, "compare:", v38);

              if (v16 == -1)
                objc_msgSend(v36, "addObject:", v11);
            }

          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
        }
        while (v8);
      }

      objc_msgSend(v6, "removeObjectsForKeys:", v36);
      _pasteboardCacheQueue_PasteboardNameToPinnedItemCollectionMap();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v18 = v17;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v45;
        do
        {
          for (j = 0; j != v20; ++j)
          {
            if (*(_QWORD *)v45 != v21)
              objc_enumerationMutation(v18);
            v23 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * j);
            objc_msgSend(v18, "objectForKeyedSubscript:", v23);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "expirationDate");
            v25 = objc_claimAutoreleasedReturnValue();
            if (v25)
            {
              v26 = (void *)v25;
              objc_msgSend(v24, "expirationDate");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = objc_msgSend(v27, "compare:", v37);

              if (v28 == -1)
              {
                objc_msgSend(v35, "addObject:", v23);
                _pasteboardCacheQueue_incrementCountOffsetForName(v23);
              }
            }

          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
        }
        while (v20);
      }

      objc_msgSend(v18, "removeObjectsForKeys:", v35);
      v3 = v34;
      _pasteboardCacheQueue_itemCollectionForName(v34);
      v29 = objc_claimAutoreleasedReturnValue();
      if (v29)
      {
        v4 = (void *)v29;
      }
      else
      {
        _serverConnection();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = 0;
        objc_msgSend(v31, "pasteboardWithName:createIfNeeded:authenticationBlock:dataOwnerBlock:error:", v34, 0, &__block_literal_global_297_0, &__block_literal_global_299, &v39);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = v39;

        if (v30 || !v4)
        {
          if (v33 && v30)
          {
            v30 = objc_retainAutorelease(v30);
            *v33 = v30;
          }
          goto LABEL_33;
        }
        _pasteboardCacheQueue_setItemCollectionForName(v34, v4);
      }
      v30 = 0;
    }
    else
    {
      v30 = 0;
      v4 = 0;
    }
LABEL_33:

    goto LABEL_34;
  }
  _getTemporaryLocalGeneralPasteboard(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_34:

  return v4;
}

id _pasteboardCacheQueue_PasteboardNametoItemCollectionMap()
{
  if (qword_1ECD7B1F8 != -1)
    dispatch_once(&qword_1ECD7B1F8, &__block_literal_global_276_0);
  return (id)qword_1ECD7B1F0;
}

id _pasteboardCacheQueue_itemCollectionForName(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  _pasteboardCacheQueue_PasteboardNameToPinnedItemCollectionMap();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = v3;
  }
  else
  {
    _pasteboardCacheQueue_PasteboardNametoItemCollectionMap();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", v1);
    v4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v4;
}

id _pasteboardCacheQueue_PasteboardNameToPinnedItemCollectionMap()
{
  if (qword_1ECD7B238 != -1)
    dispatch_once(&qword_1ECD7B238, &__block_literal_global_293_0);
  return (id)qword_1ECD7B230;
}

id _existingItemCollectionWithName(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  id v4;
  _QWORD block[4];
  id v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD v10[5];
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v1 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__148;
  v16 = __Block_byref_object_dispose__148;
  v17 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x3032000000;
  v10[3] = __Block_byref_object_copy__148;
  v10[4] = __Block_byref_object_dispose__148;
  v11 = 0;
  _pasteboardCacheQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___existingItemCollectionWithName_block_invoke;
  block[3] = &unk_1E16C3488;
  v7 = v1;
  v8 = &v12;
  v9 = v10;
  v3 = v1;
  dispatch_sync(v2, block);

  v4 = (id)v13[5];
  _Block_object_dispose(v10, 8);

  _Block_object_dispose(&v12, 8);
  return v4;
}

uint64_t _UIActivityItemsConfigurationHasItems(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v2 = objc_msgSend(v1, "_hasItemsForActivityItemsConfiguration");
  }
  else
  {
    objc_msgSend(v1, "itemProvidersForActivityItemsConfiguration");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    v2 = objc_msgSend(v3, "count") != 0;
    v1 = v3;
  }

  return v2;
}

void sub_18515D1A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 176));
  _Unwind_Resume(a1);
}

id _serverConnection()
{
  if (qword_1ECD7B218 != -1)
    dispatch_once(&qword_1ECD7B218, &__block_literal_global_279);
  return (id)qword_1ECD7B210;
}

void _pasteboardCacheQueue_setItemCollectionForName(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  v4 = a1;
  _pasteboardCacheQueue_PasteboardNametoItemCollectionMap();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v3, v4);

}

void sub_185160C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1851611E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_18516206C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18516226C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id static UICollectionViewCompositionalLayout.list(using:)(uint64_t a1)
{
  id v1;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_copy);
  sub_186507B1C();
  swift_unknownObjectRelease();
  sub_185167974();
  swift_dynamicCast();
  v1 = objc_msgSend((id)objc_opt_self(), sel_layoutWithListConfiguration_, v3);

  return v1;
}

id NSDiffableDataSourceSnapshot.numberOfItems(inSection:)()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  v2 = objc_msgSend(v1, sel_numberOfItemsInSection_, sub_186507FB4());

  swift_unknownObjectRelease();
  return v2;
}

void (*UIListSeparatorConfiguration.bottomSeparatorInsets.modify(_QWORD *a1))(double **a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_bottomSeparatorInsets);
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  return sub_1851704FC;
}

id sub_185163964(unsigned __int8 *a1, SEL *a2)
{
  uint64_t *v2;
  uint64_t v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v10;

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_185163B74();
    swift_dynamicCast();
    v7 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD82C78);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v10;
    swift_release();
    *v2 = v8;
  }
  return objc_msgSend(v7, *a2, v4);
}

void sub_185163A40(double **a1, uint64_t a2, void (*a3)(double, double, double, double))
{
  double *v3;

  v3 = *a1;
  a3(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v3);
}

id sub_185163A70(SEL *a1, double a2, double a3, double a4, double a5)
{
  uint64_t *v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v16;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v5;
  if (isUniquelyReferenced_nonNull_native)
  {
    v13 = *(void **)(v12 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v12 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_185163B74();
    swift_dynamicCast();
    v13 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD82C78);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v16;
    swift_release();
    *v5 = v14;
  }
  return objc_msgSend(v13, *a1, a2, a3, a4, a5);
}

unint64_t sub_185163B74()
{
  unint64_t result;

  result = qword_1EDD82C88;
  if (!qword_1EDD82C88)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDD82C88);
  }
  return result;
}

id UIListSeparatorConfiguration.bottomSeparatorInsets.setter(double a1, double a2, double a3, double a4)
{
  return sub_185163A70((SEL *)&selRef_setBottomSeparatorInsets_, a1, a2, a3, a4);
}

id static NSCollectionLayoutSection.list(using:layoutEnvironment:)(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v5;

  objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_copy);
  sub_186507B1C();
  swift_unknownObjectRelease();
  sub_185167974();
  swift_dynamicCast();
  v3 = objc_msgSend((id)objc_opt_self(), sel_sectionWithListConfiguration_layoutEnvironment_, v5, a2);

  return v3;
}

_UIOrderedRangeIndexerImpl *_UIOrderedRangeIndexerImpl::binarySearchForLocation@<X0>(_UIOrderedRangeIndexerImpl *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;

  v3 = *((_QWORD *)this + 3);
  v5 = a2 >= v3;
  v4 = a2 - v3;
  v5 = !v5 || v4 >= *((_QWORD *)this + 4);
  if (!v5)
    return _UIOrderedRangeIndexerImpl::binarySearchForLocation(this, a2, 0, ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4) - 1, a3);
  *(_QWORD *)(a3 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)a3 = xmmword_186679030;
  return this;
}

_UIOrderedRangeIndexerImpl *_UIOrderedRangeIndexerImpl::binarySearchForLocation@<X0>(_UIOrderedRangeIndexerImpl *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  *(_OWORD *)a5 = xmmword_186679030;
  *(_QWORD *)(a5 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  if (a3 <= a4)
  {
    while (1)
    {
      v5 = a4 + a3;
      if (a4 + a3 < 0 != __OFADD__(a4, a3))
        ++v5;
      v6 = v5 >> 1;
      v7 = (unint64_t *)(*(_QWORD *)this + 16 * v6);
      v8 = *v7;
      v9 = v7[1];
      if (a2 >= v8 && a2 - v8 < v9)
        break;
      if (a3 == a4)
        return this;
      if (v9 + v8 <= a2)
      {
        a3 = v6 + 1;
        if (v6 >= a4)
          return this;
      }
      else
      {
        a4 = v6 - 1;
        if (a3 >= v6)
          return this;
      }
    }
    *(_QWORD *)a5 = v8;
    *(_QWORD *)(a5 + 8) = v9;
    *(_QWORD *)(a5 + 16) = v6;
  }
  return this;
}

void sub_185166338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185166AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id *_UIAuxillarySolveResult::queryResultForIndexAndOffset(_UIAuxillarySolveResult *this, uint64_t a2, CGPoint a3)
{
  CGRect v6;

  v6 = CGRectOffset(*(CGRect *)this, a3.x, a3.y);
  return -[_UICollectionLayoutFramesQueryResult copyWithFrame:index:](*((id **)this + 5), (void *)(*((_QWORD *)this + 4) + a2), v6.origin.x, v6.origin.y, v6.size.width, v6.size.height);
}

double _UIRegionSolveResult::boundingFrameForIndex(_UIRegionSolveResult *this, unint64_t a2)
{
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  double result;
  void *v11;
  void *v12;
  CGRect v13;
  CGRect v14;

  if (a2 < *(_QWORD *)this || a2 - *(_QWORD *)this >= *((_QWORD *)this + 1))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGRect _UIRegionSolveResult::boundingFrameForIndex(NSInteger) const");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("_UICollectionLayoutSectionListSolver.mm"), 267, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("NSLocationInRange(index, _range)"));

  }
  v5 = *((double *)this + 8);
  v6 = *((double *)this + 9);
  v7 = *((double *)this + 10);
  v8 = *((double *)this + 11);
  v13.origin.x = v5;
  v13.origin.y = v6;
  v13.size.width = v7;
  v13.size.height = v8;
  v9 = *((double *)this + 2) + (CGRectGetHeight(v13) + *((double *)this + 3)) * (double)(uint64_t)(a2 - *(_QWORD *)this);
  v14.origin.x = v5;
  v14.origin.y = v6;
  v14.size.width = v7;
  v14.size.height = v8;
  *(_QWORD *)&result = (unint64_t)CGRectOffset(v14, 0.0, v9);
  return result;
}

void sub_185166C60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18516716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1851674D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t sub_185167974()
{
  unint64_t result;

  result = qword_1ECD74A60;
  if (!qword_1ECD74A60)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ECD74A60);
  }
  return result;
}

uint64_t _UIVisualEffectAssertEffectConstraints(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int isKindOfClass;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)v12;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v1);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if ((v4 & 1) != 0)
            goto LABEL_14;
          v4 = 1;
        }
        else
        {
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & v5 & 1) != 0)
          {
LABEL_14:
            v9 = 0;
            goto LABEL_15;
          }
          v5 |= isKindOfClass;
        }
        ++v7;
      }
      while (v3 != v7);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v3)
        continue;
      break;
    }
  }
  v9 = 1;
LABEL_15:

  return v9;
}

void _UIVisualEffectViewUpgradeLegacyEffect(void *a1, void **a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;

  v16 = a1;
  if (!v16
    || (+[UIVisualEffect emptyEffect](UIVisualEffect, "emptyEffect"),
        v5 = (id)objc_claimAutoreleasedReturnValue(),
        v5,
        v5 == v16))
  {
    v11 = *a2;
    v12 = (void *)MEMORY[0x1E0C9AA60];
    *a2 = (void *)MEMORY[0x1E0C9AA60];

    v8 = *a3;
    *a3 = v12;
  }
  else
  {
    v6 = objc_msgSend(v16, "_expectedUsage");
    v7 = (void *)objc_opt_new();
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = ___UIVisualEffectViewUpgradeLegacyEffect_block_invoke;
    v17[3] = &unk_1E16B5300;
    v18 = v7;
    v8 = v7;
    objc_msgSend(v16, "_enumerateEffects:", v17);
    if (v6 == 2)
    {
      v9 = *a2;
      *a2 = (void *)MEMORY[0x1E0C9AA60];

      v10 = objc_msgSend(v8, "copy");
    }
    else
    {
      v13 = objc_msgSend(v8, "copy");
      v14 = *a2;
      *a2 = (void *)v13;

      v10 = MEMORY[0x1E0C9AA60];
    }
    v15 = *a3;
    *a3 = (id)v10;

  }
}

void _UIVisualEffectSubviewApplyViewEffects(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "applyEffectAsRequested:toView:", a3, v5);
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }

}

id _UIVisualEffectSubviewSetViewEffects(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = (void *)MEMORY[0x1E0C9AA60];
  if (a2)
    v7 = a2;
  else
    v7 = (void *)MEMORY[0x1E0C9AA60];
  v8 = v7;
  v9 = a3;
  v10 = v9;
  if (v9)
    v11 = v9;
  else
    v11 = v6;
  v12 = v11;

  if (objc_msgSend(v8, "isEqualToArray:", v12))
  {
    v13 = v8;
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v14 = v8;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v31 != v17)
            objc_enumerationMutation(v14);
          objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * i), "removeEffectFromView:", v5);
        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      }
      while (v16);
    }

    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v19 = v12;
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v27;
      do
      {
        for (j = 0; j != v21; ++j)
        {
          if (*(_QWORD *)v27 != v22)
            objc_enumerationMutation(v19);
          objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * j), "addEffectToView:", v5, (_QWORD)v26);
        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
      }
      while (v21);
    }

    v13 = (id)objc_msgSend(v19, "copy");
  }
  v24 = v13;

  return v24;
}

id _UIVisualEffectSubviewSetFilters(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;

  v5 = a1;
  v6 = (void *)MEMORY[0x1E0C9AA60];
  if (a2)
    v7 = a2;
  else
    v7 = (void *)MEMORY[0x1E0C9AA60];
  v8 = v7;
  v9 = a3;
  v10 = v9;
  if (v9)
    v11 = v9;
  else
    v11 = v6;
  v12 = v11;

  if (objc_msgSend(v8, "isEqualToArray:", v12))
  {
    v13 = v8;
  }
  else
  {
    _UIVisualEffectSubviewConvertToCAFilterArray(v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "layer");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setFilters:", v14);

    v13 = (id)objc_msgSend(v12, "copy");
  }
  v16 = v13;

  return v16;
}

id _UIVisualEffectSubviewConvertToCAFilterArray(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_msgSend(v1, "count");
  if (v2)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v2);
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = v1;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v8), "filter", (_QWORD)v11);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v9);

          ++v8;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }

  }
  else
  {
    v3 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v3;
}

double UIRectInset(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return a1 + a8;
}

void sub_18516C0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18516C164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id UIKeyboardGetCurrentInputMode()
{
  void *v0;
  void *v1;
  void *v2;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "currentInputMode");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_18516CCF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t UIKeyboardTypeSupportsSmartTyping(unint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = 1;
  if (a1 > 0xD || ((1 << a1) & 0x2645) == 0)
  {
    v3 = a1 - 123;
    if (v3 > 3 || v3 == 2)
      return 0;
  }
  return result;
}

UIColor *_UIGetTextHighlightFillColor()
{
  return +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 1.0, 0.866, 0.0, 1.0);
}

uint64_t UIKeyboardAutocorrectionRequiredForInputMode(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = a1;
  if ((UIKeyboardShowsTransliterationCandidatesForInputMode() & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v3 = (void *)UIKeyboardAutocorrectionRequiredForInputMode___dict;
    if (!UIKeyboardAutocorrectionRequiredForInputMode___dict)
    {
      v4 = objc_alloc(MEMORY[0x1E0C99E08]);
      v5 = objc_msgSend(v4, "initWithObjectsAndKeys:", CFSTR("zh_Hans-Pinyin"), MEMORY[0x1E0C9AAB0], CFSTR("zh_Hant-Pinyin"), MEMORY[0x1E0C9AAB0], CFSTR("zh_Hant-Zhuyin"), MEMORY[0x1E0C9AAB0], CFSTR("ja_JP-Romaji"), MEMORY[0x1E0C9AAB0], CFSTR("ja_JP-Kana"), 0);
      v6 = (void *)UIKeyboardAutocorrectionRequiredForInputMode___dict;
      UIKeyboardAutocorrectionRequiredForInputMode___dict = v5;

      v3 = (void *)UIKeyboardAutocorrectionRequiredForInputMode___dict;
    }
    TIInputModeGetNormalizedIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKey:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
      v2 = objc_msgSend(v8, "BOOLValue");
    else
      v2 = 0;

  }
  return v2;
}

void sub_1851704FC(double **a1, uint64_t a2)
{
  sub_185163A40(a1, a2, (void (*)(double, double, double, double))UIListSeparatorConfiguration.bottomSeparatorInsets.setter);
}

UITouch *__startNewUITouch(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, const __CFDictionary *a8, double a9, const __CFDictionary *a10, uint64_t a11)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  double x;
  double y;
  void *v22;
  double v23;
  double v24;
  double v25;
  void *v26;
  id v27;
  id v28;
  unint64_t v29;
  CGFloat v30;
  double v31;
  double v32;
  CGFloat v33;
  double v34;
  double v35;
  CGFloat v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  CGFloat v42;
  CGFloat v43;
  UITouch *v44;
  uint64_t v45;
  unint64_t pointerSource;
  _BOOL8 v47;
  NSObject *v48;
  NSObject *v49;
  id v50;
  NSObject *v51;
  id v52;
  void *v53;
  objc_class *v54;
  void *v55;
  __CFString *v56;
  NSObject *v57;
  id v58;
  void *v59;
  objc_class *v60;
  void *v61;
  __CFString *v62;
  __CFString *v63;
  __CFString *v64;
  int v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  unint64_t v72;
  _BOOL4 HasExternalTouchInput;
  _BOOL4 v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  id v83;
  uint64_t v85;
  UIWindow *windowServerHitTestWindow;
  UIWindow *v87;
  double v88;
  objc_class *v89;
  const char *Name;
  void *v91;
  _BOOL4 v92;
  float v93;
  CGFloat v94;
  double v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  unint64_t v99;
  NSObject *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  NSObject *v107;
  id v108;
  void *v109;
  objc_class *v110;
  void *v111;
  __CFString *v112;
  id v113;
  void *v114;
  CGFloat v115;
  CGFloat v116;
  double v117;
  CGFloat v118;
  CGFloat v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  __CFString *v129;
  unint64_t v130;
  NSObject *v131;
  id v132;
  void *v133;
  id v134;
  void *v135;
  objc_class *v136;
  void *v137;
  void *v138;
  void *v139;
  double v140;
  double v141;
  CGFloat v142;
  CGFloat v143;
  double v144;
  double v145;
  double maxObservedPressure;
  void *v147;
  void *v148;
  id v149;
  uint64_t v150;
  UITouchData *v151;
  id v152;
  uint64_t v153;
  uint64_t j;
  uint64_t v155;
  double v156;
  BOOL v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  uint64_t v166;
  void *v167;
  double v168;
  CGFloat v169;
  double v170;
  CGFloat v171;
  double v172;
  CGFloat v173;
  double v174;
  CGFloat v175;
  id v176;
  unint64_t v177;
  id v178;
  id v179;
  unint64_t v180;
  id v181;
  id v182;
  unint64_t v183;
  NSObject *v184;
  const char *v185;
  unint64_t v186;
  NSObject *v187;
  uint32_t v188;
  unint64_t v189;
  void *v190;
  BOOL v191;
  unint64_t v192;
  void *v193;
  unint64_t v194;
  UITouch *v195;
  NSObject *v197;
  id v198;
  NSObject *v199;
  id v200;
  void *v201;
  objc_class *v202;
  void *v203;
  __CFString *v204;
  NSObject *v205;
  id v206;
  void *v207;
  objc_class *v208;
  void *v209;
  __CFString *v210;
  NSObject *v211;
  id v212;
  NSObject *v213;
  id v214;
  NSObject *v215;
  int Count;
  NSObject *v217;
  int v218;
  __CFString *v219;
  __CFString *v220;
  int v221;
  NSObject *v222;
  objc_class *v223;
  UITouch *v224;
  double v225;
  int IsKindOfUIView;
  double v228;
  unint64_t v229;
  void *v230;
  void *v231;
  void *v232;
  id v234;
  double v236;
  uint64_t v237;
  _QWORD v239[4];
  id v240;
  id v241;
  CGPoint *v242;
  __int128 *v243;
  _QWORD *v244;
  _QWORD v245[4];
  id v246;
  id v247;
  CGPoint *p_buf;
  __int128 *v249;
  _QWORD *v250;
  _QWORD v251[2];
  BOOL (*v252)(uint64_t, void *);
  void *v253;
  id v254;
  CGFloat v255;
  CGFloat v256;
  CGFloat v257;
  CGFloat v258;
  BOOL v259;
  _QWORD v260[11];
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  CGAffineTransform v265;
  CGPoint v266;
  CGPoint v267;
  CGPoint point;
  double v269;
  CGPoint v270;
  CGPoint v271;
  CGPoint v272;
  double v273;
  CGSize v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  uint8_t v279[4];
  UITouch *v280;
  __int16 v281;
  void *v282;
  __int16 v283;
  id v284;
  id v285;
  _BYTE v286[128];
  CGPoint buf;
  CGPoint v288;
  CGPoint v289;
  double v290;
  uint64_t v291;
  CGPoint v292;
  CGRect v293;
  CGRect v294;

  v291 = *MEMORY[0x1E0C80C00];
  v16 = qword_1ECD7FF90;
  if (!qword_1ECD7FF90)
  {
    v16 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v16, (unint64_t *)&qword_1ECD7FF90);
  }
  if ((*(_BYTE *)v16 & 1) != 0)
  {
    v48 = *(id *)(v16 + 8);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.x) = 134217984;
      *(_QWORD *)((char *)&buf.x + 4) = a7;
      _os_log_impl(&dword_185066000, v48, OS_LOG_TYPE_ERROR, "\t\tCreating new touch instance for path index: %ld", (uint8_t *)&buf, 0xCu);
    }

  }
  v274 = (CGSize)*MEMORY[0x1E0C9D820];
  v273 = 0.0;
  v271 = (CGPoint)0;
  v272 = (CGPoint)0;
  v270 = (CGPoint)0;
  v269 = 0.0;
  v267 = (CGPoint)0;
  point = (CGPoint)0;
  v266 = (CGPoint)0;
  __baseTouchLocationsForChild((uint64_t)&v266, a6, a5, a3, 0, &v274.width, (uint64_t)&v270);
  buf = v270;
  v288 = v271;
  v289 = v272;
  v290 = v273;
  _LogTouchLocationsIfNeeded((uint64_t)"rawChildTouchLocations", &buf.x);
  buf = v266;
  v288 = v267;
  v289 = point;
  v290 = v269;
  _LogTouchLocationsIfNeeded((uint64_t)"childTouchSceneLocations", &buf.x);
  v17 = qword_1ECD7FF98;
  if (!qword_1ECD7FF98)
  {
    v17 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v17, (unint64_t *)&qword_1ECD7FF98);
  }
  if ((*(_BYTE *)v17 & 1) != 0)
  {
    v49 = *(id *)(v17 + 8);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      NSStringFromCGPoint(point);
      v50 = (id)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.x) = 138412290;
      *(_QWORD *)((char *)&buf.x + 4) = v50;
      _os_log_impl(&dword_185066000, v49, OS_LOG_TYPE_ERROR, "\t\tLooking for local hit test window at scene hitTestLocation %@ ", (uint8_t *)&buf, 0xCu);

    }
  }
  v18 = qword_1ECD7FFA0;
  if (!qword_1ECD7FFA0)
  {
    v18 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v18, (unint64_t *)&qword_1ECD7FFA0);
  }
  if ((*(_BYTE *)v18 & 1) != 0)
  {
    v51 = *(id *)(v18 + 8);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v52 = a3;
      if (v52)
      {
        v53 = (void *)MEMORY[0x1E0CB3940];
        v54 = (objc_class *)objc_opt_class();
        NSStringFromClass(v54);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "stringWithFormat:", CFSTR("<%@: %p>"), v55, v52);
        v56 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v56 = CFSTR("(nil)");
      }

      v63 = v56;
      LODWORD(buf.x) = 138412290;
      *(_QWORD *)((char *)&buf.x + 4) = v63;
      _os_log_impl(&dword_185066000, v51, OS_LOG_TYPE_ERROR, "\t\t\tWindow server hit test window: %@", (uint8_t *)&buf, 0xCu);

    }
  }
  v19 = v269;
  x = point.x;
  y = point.y;
  if (_EventWindowExpectsExternalTouchInput(a3) && !IOHIDEventGetIntegerValue())
  {
    v28 = a3;
    goto LABEL_18;
  }
  if (!objc_msgSend(a3, "_usesWindowServerHitTesting"))
    goto LABEL_272;
  -[UIWindow _fbsScene]((id *)a3);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = _UIConvertScenePoint3DToWindow(v22, a3, x, y);
  v25 = v24;

  objc_msgSend(a3, "_hitTest:withEvent:windowServerHitTestWindow:", a4, a3, v23, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v26 || (v27 = a3, v26, !v27))
  {
LABEL_272:
    objc_msgSend(a3, "_overrideTargetWindowForPathIndex:forEvent:windowServerHitTestWindow:", a7, a4, a3);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    if (!v27)
    {
      objc_msgSend(a3, "_targetWindowForPathIndex:atPoint:scenePointZ:forEvent:windowServerHitTestWindow:", a7, a4, a3, x, y, v19);
      v28 = (id)objc_claimAutoreleasedReturnValue();
LABEL_18:
      v27 = v28;
    }
  }
  v29 = qword_1ECD7FFA8;
  if (!qword_1ECD7FFA8)
  {
    v29 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v29, (unint64_t *)&qword_1ECD7FFA8);
  }
  if ((*(_BYTE *)v29 & 1) != 0)
  {
    v57 = *(id *)(v29 + 8);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      v58 = v27;
      if (v58)
      {
        v59 = (void *)MEMORY[0x1E0CB3940];
        v60 = (objc_class *)objc_opt_class();
        NSStringFromClass(v60);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "stringWithFormat:", CFSTR("<%@: %p>"), v61, v58);
        v62 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v62 = CFSTR("(nil)");
      }

      v64 = v62;
      LODWORD(buf.x) = 138412290;
      *(_QWORD *)((char *)&buf.x + 4) = v64;
      _os_log_impl(&dword_185066000, v57, OS_LOG_TYPE_ERROR, "\t\t\tFound local hit test window: %@", (uint8_t *)&buf, 0xCu);

    }
  }
  -[UIWindow _fbsScene]((id *)a3);
  v232 = (void *)objc_claimAutoreleasedReturnValue();
  v236 = _UIConvertScenePoint3DToWindow(v232, v27, v266.x, v266.y);
  v31 = v30;
  v266.x = v236;
  v266.y = v30;
  v32 = _UIConvertScenePoint3DToWindow(v232, v27, v267.x, v267.y);
  v34 = v33;
  v267.x = v32;
  v267.y = v33;
  v35 = _UIConvertScenePoint3DToWindow(v232, v27, x, y);
  v37 = v36;
  point.x = v35;
  point.y = v36;
  if (!_UIApplicationProcessIsSpringBoard() || !objc_msgSend(v27, "_isSystemGestureWindow"))
    goto LABEL_28;
  if (v27)
    objc_msgSend(v27, "_additionalRootLayerAffineTransform");
  else
    memset(&v265, 0, sizeof(v265));
  if (CGAffineTransformIsIdentity(&v265))
  {
LABEL_28:
    objc_msgSend(v27, "_constrainTouchLocationToScene:", v236, v31);
    v236 = v38;
    v31 = v39;
    objc_msgSend(v27, "_constrainTouchLocationToScene:", v32, v34);
    v32 = v40;
    v34 = v41;
    objc_msgSend(v27, "_constrainTouchLocationToScene:", v35, v37);
    v35 = v42;
    v37 = v43;
    v266.x = v236;
    v266.y = v31;
    v267.x = v32;
    v267.y = v34;
    point.x = v42;
    point.y = v43;
  }
  buf = v266;
  v288 = v267;
  v289 = point;
  v290 = v269;
  _LogTouchLocationsIfNeeded((uint64_t)"childTouchWindowLocations", &buf.x);
  if (a1)
  {
    v44 = a1;
  }
  else
  {
    v44 = objc_alloc_init(UITouch);

  }
  BKSHIDEventGetDigitizerAttributes();
  v231 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIEventEnvironment _setCurrentTouch:forWindow:](a11, (uint64_t)v44, a3);
  -[UITouch setTimestamp:](v44, "setTimestamp:", a9);
  objc_msgSend(v231, "initialTouchTimestamp");
  -[UITouch setInitialTouchTimestamp:](v44, "setInitialTouchTimestamp:");
  -[UITouch setPhase:](v44, "setPhase:", 0);
  if (v44)
  {
    *(_WORD *)&v44->_touchFlags &= ~8u;
    -[UITouch setWindow:](v44, "setWindow:", v27);
    v44->_displacement = v274;
  }
  else
  {
    objc_msgSend(0, "setWindow:", v27);
  }
  -[UITouch _setWindowServerHitTestWindow:]((uint64_t)v44, a3);
  v45 = objc_msgSend(a4, "_currentPointerEventSource");
  if (v44)
  {
    v44->_pointerSource = v45;
    if (objc_msgSend(a4, "_containsHIDPointerEvent"))
    {
      pointerSource = v44->_pointerSource;
LABEL_37:
      v47 = pointerSource != 4;
      goto LABEL_60;
    }
  }
  else if ((objc_msgSend(a4, "_containsHIDPointerEvent") & 1) != 0)
  {
    pointerSource = 0;
    goto LABEL_37;
  }
  v47 = 0;
LABEL_60:
  -[UITouch _setIsPointerTouch:](v44, "_setIsPointerTouch:", v47);
  _UITouchSetBasicTouchPropertiesFromEvent(v44, a2, a5, a6);
  if (-[UITouch type](v44, "type") == UITouchTypePencil)
    *(_BYTE *)(a11 + 96) = 1;
  if (v44 && !v44->_type)
  {
    objc_msgSend(v27, "warpPoint:", v236, v31);
    v236 = v66;
    v31 = v67;
    objc_msgSend(v27, "warpPoint:", v32, v34);
    v32 = v68;
    v34 = v69;
    objc_msgSend(v27, "warpPoint:", v35, v37);
    v35 = v70;
    v37 = v71;
    v65 = 1;
  }
  else
  {
    v65 = 0;
  }
  v72 = qword_1ECD7FFB0;
  if (!qword_1ECD7FFB0)
  {
    v72 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v72, (unint64_t *)&qword_1ECD7FFB0);
  }
  if ((*(_BYTE *)v72 & 1) != 0)
  {
    v197 = *(id *)(v72 + 8);
    if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
    {
      v292.x = v35;
      v292.y = v37;
      NSStringFromCGPoint(v292);
      v198 = (id)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.x) = 138412290;
      *(_QWORD *)((char *)&buf.x + 4) = v198;
      _os_log_impl(&dword_185066000, v197, OS_LOG_TYPE_ERROR, "\t\tLooking for responder at %@", (uint8_t *)&buf, 0xCu);

    }
  }
  objc_msgSend(a3, "_focusSystem");
  v230 = (void *)objc_claimAutoreleasedReturnValue();
  HasExternalTouchInput = _UIDeviceHasExternalTouchInput();
  if (v230)
    v74 = HasExternalTouchInput;
  else
    v74 = 0;
  if (v74)
  {
    objc_msgSend(v230, "_focusedView");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "superview");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    if (v77)
    {
      do
      {
        objc_msgSend(v76, "insertObject:atIndex:", v77, 0);
        objc_msgSend(v77, "superview");
        v78 = objc_claimAutoreleasedReturnValue();

        v77 = (void *)v78;
      }
      while (v78);
    }
    v263 = 0u;
    v264 = 0u;
    v261 = 0u;
    v262 = 0u;
    v79 = v76;
    v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v261, v286, 16);
    if (v80)
    {
      v81 = *(_QWORD *)v262;
      while (2)
      {
        for (i = 0; i != v80; ++i)
        {
          if (*(_QWORD *)v262 != v81)
            objc_enumerationMutation(v79);
          if ((UIViewIgnoresTouchEvents(*(void **)(*((_QWORD *)&v261 + 1) + 8 * i)) & 1) != 0)
          {

            v83 = 0;
            goto LABEL_86;
          }
        }
        v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v261, v286, 16);
        if (v80)
          continue;
        break;
      }
    }

    objc_msgSend(v75, "convertPoint:fromView:", v27, v35, v37);
    objc_msgSend(v75, "hitTest:withEvent:", a4);
    v83 = (id)objc_claimAutoreleasedReturnValue();
LABEL_86:

  }
  else
  {
    v83 = 0;
  }
  if (objc_msgSend(a2, "_userInterfaceIdiom") != 3)
    goto LABEL_94;
  if (-[UITouch type](v44, "type") != UITouchTypeIndirect || v230 == 0)
    goto LABEL_94;
  objc_msgSend(v230, "_focusedView");
  v85 = objc_claimAutoreleasedReturnValue();

  v83 = (id)v85;
  if (!v85)
  {
    v83 = a3;
LABEL_94:
    if (!v83)
    {
      if (v44)
        windowServerHitTestWindow = v44->__windowServerHitTestWindow;
      else
        windowServerHitTestWindow = 0;
      v87 = windowServerHitTestWindow;
      -[UITouch majorRadius](v44, "majorRadius");
      v260[0] = MEMORY[0x1E0C809B0];
      v260[1] = 3221225472;
      v260[2] = ____startNewUITouch_block_invoke;
      v260[3] = &__block_descriptor_88_e32__CAPoint3D_ddd_16__0__UIWindow_8l;
      *(double *)&v260[4] = v236;
      *(double *)&v260[5] = v31;
      *(double *)&v260[6] = v32;
      *(double *)&v260[7] = v34;
      *(double *)&v260[8] = v35;
      *(double *)&v260[9] = v37;
      *(double *)&v260[10] = v19;
      _UIHitTestGestureContainer((uint64_t)a4, v27, (uint64_t)v87, 1, (uint64_t)v260, v88);
      v83 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  v234 = v83;
  -[UITouch _setResponder:](v44, "_setResponder:", v83);
  if (objc_msgSend(v27, "_isTextEffectsWindow")
    && (v89 = (objc_class *)objc_opt_class(), Name = class_getName(v89), !strcmp(Name, "UITextRangeView")))
  {
    objc_msgSend(v83, "_eventReceivingWindow");
    v113 = (id)objc_claimAutoreleasedReturnValue();
    v114 = v113;
    if (!v113 || v113 == v27)
    {
      v229 = (unint64_t)v27;
    }
    else
    {
      objc_msgSend(v113, "convertPoint:fromWindow:", v27, v266.x, v266.y);
      v228 = v115;
      v117 = v116;
      v266.x = v116;
      v266.y = v115;
      objc_msgSend(v114, "convertPoint:fromWindow:", v27, v267.x, v267.y);
      v225 = v118;
      v120 = v119;
      v267.x = v119;
      v267.y = v118;
      v229 = v114;

      -[UITouch setWindow:](v44, "setWindow:", v229);
      if (v65)
      {
        v121 = point.x;
        v122 = point.y;
        objc_msgSend((id)v229, "warpPoint:", v117, v228);
        v236 = v123;
        v31 = v124;
        objc_msgSend((id)v229, "warpPoint:", v120, v225);
        v32 = v125;
        v34 = v126;
        objc_msgSend((id)v229, "warpPoint:", v121, v122);
        v35 = v127;
        v37 = v128;
      }
    }

  }
  else
  {
    v229 = (unint64_t)v27;
  }
  IsKindOfUIView = _IsKindOfUIView((uint64_t)v83);
  if (v83 && (v65 & IsKindOfUIView) != 0)
  {
    do
    {
      -[UITouch warpedIntoView]((id *)&v44->super.isa);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      v92 = v91 == 0;

      if (!v92)
        break;
      objc_msgSend(v83, "charge");
      if (fabsf(v93) >= 2.2204e-16)
      {
        v94 = __lockWarpedPointToViewEdge(v83, v266.x, v266.y, v236, v31);
        v96 = v95;
        v97 = __lockWarpedPointToViewEdge(v83, v267.x, v267.y, v32, v34);
        v266.y = v96;
        v267.x = v97;
        v267.y = v98;
        v266.x = v94;
        point.x = v35;
        point.y = v37;
        v269 = 0.0;
        -[UITouch setWarpedIntoView:]((uint64_t)v44, v83);
        v99 = qword_1ECD7FFB8;
        if (!qword_1ECD7FFB8)
        {
          v99 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v99, (unint64_t *)&qword_1ECD7FFB8);
        }
        if ((*(_BYTE *)v99 & 1) != 0)
        {
          v100 = *(id *)(v99 + 8);
          if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.x) = 0;
            _os_log_impl(&dword_185066000, v100, OS_LOG_TYPE_ERROR, "\t\tWarped point hit view with charge", (uint8_t *)&buf, 2u);
          }

        }
      }
      else
      {
        v83 = (id)objc_msgSend(v83, "superview");
      }
    }
    while (v83);
  }
  -[UITouch view](v44, "view");
  v237 = objc_claimAutoreleasedReturnValue();
  v101 = qword_1ECD7FFC0;
  if (!qword_1ECD7FFC0)
  {
    v101 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v101, (unint64_t *)&qword_1ECD7FFC0);
  }
  if ((*(_BYTE *)v101 & 1) != 0)
  {
    v199 = *(id *)(v101 + 8);
    if (os_log_type_enabled(v199, OS_LOG_TYPE_ERROR))
    {
      v200 = a3;
      if (v200)
      {
        v201 = (void *)MEMORY[0x1E0CB3940];
        v202 = (objc_class *)objc_opt_class();
        NSStringFromClass(v202);
        v203 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v201, "stringWithFormat:", CFSTR("<%@: %p>"), v203, v200);
        v204 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v204 = CFSTR("(nil)");
      }

      v219 = v204;
      LODWORD(buf.x) = 138412290;
      *(_QWORD *)((char *)&buf.x + 4) = v219;
      _os_log_impl(&dword_185066000, v199, OS_LOG_TYPE_ERROR, "\t\t\tWindow server hit test window: %@", (uint8_t *)&buf, 0xCu);

    }
  }
  v102 = qword_1ECD7FFC8;
  if (!qword_1ECD7FFC8)
  {
    v102 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v102, (unint64_t *)&qword_1ECD7FFC8);
  }
  if ((*(_BYTE *)v102 & 1) != 0)
  {
    v205 = *(id *)(v102 + 8);
    if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
    {
      v206 = (id)v237;
      if (v206)
      {
        v207 = (void *)MEMORY[0x1E0CB3940];
        v208 = (objc_class *)objc_opt_class();
        NSStringFromClass(v208);
        v209 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v207, "stringWithFormat:", CFSTR("<%@: %p>"), v209, v206);
        v210 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v210 = CFSTR("(nil)");
      }

      v220 = v210;
      LODWORD(buf.x) = 138412290;
      *(_QWORD *)((char *)&buf.x + 4) = v220;
      _os_log_impl(&dword_185066000, v205, OS_LOG_TYPE_ERROR, "\t\t\tFound view: %@", (uint8_t *)&buf, 0xCu);

    }
  }
  v103 = qword_1ECD7FFD0;
  if (!qword_1ECD7FFD0)
  {
    v103 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v103, (unint64_t *)&qword_1ECD7FFD0);
  }
  if ((*(_BYTE *)v103 & 1) != 0)
  {
    v211 = *(id *)(v103 + 8);
    if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
    {
      NSStringFromCGPoint(v266);
      v212 = (id)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.x) = 138412290;
      *(_QWORD *)((char *)&buf.x + 4) = v212;
      _os_log_impl(&dword_185066000, v211, OS_LOG_TYPE_ERROR, "\t\t\tLocation in view: %@", (uint8_t *)&buf, 0xCu);

    }
  }
  v104 = qword_1ECD7FFD8;
  if (!qword_1ECD7FFD8)
  {
    v104 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v104, (unint64_t *)&qword_1ECD7FFD8);
  }
  if ((*(_BYTE *)v104 & 1) != 0)
  {
    v213 = *(id *)(v104 + 8);
    if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
    {
      NSStringFromCGPoint(v267);
      v214 = (id)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.x) = 138412290;
      *(_QWORD *)((char *)&buf.x + 4) = v214;
      _os_log_impl(&dword_185066000, v213, OS_LOG_TYPE_ERROR, "\t\t\tPrecise location in view: %@", (uint8_t *)&buf, 0xCu);

    }
  }
  if (!(v237 | v229)
    && objc_msgSend(a3, "_isSystemGestureWindow")
    && _UIApplicationProcessIsCarousel())
  {
    if (_UIInternalPreferencesRevisionOnce != -1)
      dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
    v105 = _UIInternalPreferencesRevisionVar;
    if (_UIInternalPreferencesRevisionVar < 1)
      goto LABEL_132;
    v221 = _UIInternalPreference_LogForMissingSystemGestureViewInCarousel;
    if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_LogForMissingSystemGestureViewInCarousel)
      goto LABEL_132;
    while (v105 >= v221)
    {
      _UIInternalPreferenceSync(v105, &_UIInternalPreference_LogForMissingSystemGestureViewInCarousel, (uint64_t)CFSTR("LogForMissingSystemGestureViewInCarousel"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v221 = _UIInternalPreference_LogForMissingSystemGestureViewInCarousel;
      if (v105 == _UIInternalPreference_LogForMissingSystemGestureViewInCarousel)
        goto LABEL_132;
    }
    if (byte_1EDDA828C)
    {
LABEL_132:
      v106 = qword_1ECD7FFE0;
      if (!qword_1ECD7FFE0)
      {
        v106 = __UILogCategoryGetNode("EventDispatch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v106, (unint64_t *)&qword_1ECD7FFE0);
      }
      v107 = *(id *)(v106 + 8);
      if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
      {
        v108 = a3;
        if (v108)
        {
          v109 = (void *)MEMORY[0x1E0CB3940];
          v110 = (objc_class *)objc_opt_class();
          NSStringFromClass(v110);
          v111 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v109, "stringWithFormat:", CFSTR("<%@: %p>"), v111, v108);
          v112 = (__CFString *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v112 = CFSTR("(nil)");
        }

        v129 = v112;
        LODWORD(buf.x) = 138412290;
        *(_QWORD *)((char *)&buf.x + 4) = v129;
        _os_log_impl(&dword_185066000, v107, OS_LOG_TYPE_ERROR, "No hit test result for touch in render server hit tested window: %@", (uint8_t *)&buf, 0xCu);

      }
      v130 = qword_1ECD7FFE8;
      if (!qword_1ECD7FFE8)
      {
        v130 = __UILogCategoryGetNode("EventDispatch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v130, (unint64_t *)&qword_1ECD7FFE8);
      }
      v131 = *(id *)(v130 + 8);
      if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(a3, "recursiveDescription");
        v132 = (id)objc_claimAutoreleasedReturnValue();
        LODWORD(buf.x) = 138412290;
        *(_QWORD *)((char *)&buf.x + 4) = v132;
        _os_log_impl(&dword_185066000, v131, OS_LOG_TYPE_ERROR, "Recursive window description: \n%@", (uint8_t *)&buf, 0xCu);

      }
    }
  }
  objc_msgSend(MEMORY[0x1E0DC5C90], "authenticationRecordForTouch:", v44);
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  if (v133)
  {
    -[UITouch _setTouchAuthenticationRecord:](v44, "_setTouchAuthenticationRecord:", v133);
    _UISTouchAuthenticationTelemetryReportRecord();
  }
  if ((objc_msgSend(v231, "options") & 0x100) != 0)
  {
    v134 = objc_alloc_init(MEMORY[0x1E0D00DE8]);
    objc_msgSend(v134, "setTouchIdentifier:", -[UITouch _touchIdentifier](v44, "_touchIdentifier"));
    v135 = (void *)MEMORY[0x1E0CB3940];
    v136 = (objc_class *)objc_opt_class();
    objc_msgSend(v135, "stringWithFormat:", CFSTR("hit: %s %p"), class_getName(v136), v237);
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v134, "setText:", v137);

    objc_msgSend(v134, "setUniqueIdentifier:", CFSTR("hitTest"));
    objc_msgSend(MEMORY[0x1E0D00DF0], "sharedInstance");
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    v285 = v134;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v285, 1);
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v138, "postTouchAnnotations:", v139);

  }
  v140 = v266.x;
  v141 = v266.y;
  if (v44)
  {
    v142 = v267.y;
    v143 = v267.x;
    v44->_previousLocationInWindow.x = v266.x;
    v44->_previousLocationInWindow.y = v141;
    v44->_precisePreviousLocationInWindow.x = v143;
    v44->_precisePreviousLocationInWindow.y = v142;
    v44->_locationInWindow.x = v140;
    v44->_locationInWindow.y = v141;
    v44->_preciseLocationInWindow.x = v143;
    v44->_preciseLocationInWindow.y = v142;
  }
  IOHIDEventGetFloatValue();
  -[UITouch _setRollAngle:resetPrevious:]((uint64_t)v44, 1, v144);
  IOHIDEventGetFloatValue();
  if (v44)
  {
    maxObservedPressure = v44->_maxObservedPressure;
    if (maxObservedPressure < v145)
      maxObservedPressure = v145;
    v44->_previousPressure = v145;
    v44->_pressure = v145;
    v44->_maxObservedPressure = maxObservedPressure;
  }
  -[UITouch _updateWithChildEvent:]((uint64_t)v44);
  -[UITouch window](v44, "window");
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v147, "_touchData");
  v148 = (void *)objc_claimAutoreleasedReturnValue();

  v277 = 0u;
  v278 = 0u;
  v275 = 0u;
  v276 = 0u;
  v149 = v148;
  v150 = objc_msgSend(v149, "countByEnumeratingWithState:objects:count:", &v275, &buf, 16);
  if (!v150)
  {

    v152 = 0;
LABEL_185:
    v151 = objc_alloc_init(UITouchData);
    v151->startTouchDownLocation.x = v140;
    v151->startTouchDownLocation.y = v141;
    v151->lastTouchUpTimestamp = a9;
    v151->touchIsValidTap = 1;
    objc_msgSend(v149, "addObject:", v151);
    goto LABEL_186;
  }
  v151 = 0;
  v152 = 0;
  v153 = *(_QWORD *)v276;
  do
  {
    for (j = 0; j != v150; ++j)
    {
      if (*(_QWORD *)v276 != v153)
        objc_enumerationMutation(v149);
      v155 = *(_QWORD *)(*((_QWORD *)&v275 + 1) + 8 * j);
      v156 = *(double *)(v155 + 32) + 0.35;
      if (v156 + 0.75 >= a9)
      {
        if (!v151)
        {
          v157 = v156 < a9 || *(_BYTE *)(v155 + 48) == 0;
          if (v157 || vabdd_f64(v140, *(double *)(v155 + 8)) >= 45.0 || vabdd_f64(v141, *(double *)(v155 + 16)) >= 45.0)
            v151 = 0;
          else
            v151 = (UITouchData *)(id)v155;
        }
      }
      else
      {
        if (!v152)
          v152 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend(v152, "addObject:", v155);
      }
    }
    v150 = objc_msgSend(v149, "countByEnumeratingWithState:objects:count:", &v275, &buf, 16);
  }
  while (v150);

  if (v152)
    objc_msgSend(v149, "removeObjectsInArray:", v152);
  if (!v151)
    goto LABEL_185;
LABEL_186:
  v151->lastTouch = v44;
  v151->lastTouchDownTimestamp = a9;
  ++v151->lastTapCount;
  if (v44)
    *(_WORD *)&v44->_touchFlags = *(_WORD *)&v44->_touchFlags & 0xFFFD | (2 * v151->touchIsValidTap);
  -[UITouch setTapCount:](v44, "setTapCount:");

  buf.x = 0.0;
  *(_QWORD *)&buf.y = &buf;
  *(_QWORD *)&v288.x = 0x2020000000;
  LOBYTE(v288.y) = 0;
  *(_QWORD *)&v275 = 0;
  *((_QWORD *)&v275 + 1) = &v275;
  *(_QWORD *)&v276 = 0x2020000000;
  BYTE8(v276) = 0;
  objc_msgSend((id)v229, "bounds");
  v159 = v158;
  v161 = v160;
  v163 = v162;
  v165 = v164;
  objc_msgSend((id)v229, "safeAreaInsets");
  v166 = MEMORY[0x1E0C809B0];
  v167 = v234;
  v169 = v159 + v168;
  v171 = v161 + v170;
  v173 = v163 - (v168 + v172);
  v175 = v165 - (v170 + v174);
  v293.origin.x = v159;
  v293.origin.y = v161;
  v293.size.width = v163;
  v293.size.height = v165;
  v294.origin.x = v169;
  v294.origin.y = v171;
  v294.size.width = v173;
  v294.size.height = v175;
  v251[0] = MEMORY[0x1E0C809B0];
  v251[1] = 3221225472;
  v252 = ____startNewUITouch_block_invoke_119;
  v253 = &unk_1E16DF710;
  v259 = !CGRectEqualToRect(v293, v294);
  v176 = (id)v229;
  v254 = v176;
  v255 = v169;
  v256 = v171;
  v257 = v173;
  v258 = v175;
  v177 = qword_1ECD7FFF0;
  if (!qword_1ECD7FFF0)
  {
    v177 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v177, (unint64_t *)&qword_1ECD7FFF0);
  }
  if ((*(_BYTE *)v177 & 1) != 0)
  {
    v215 = *(id *)(v177 + 8);
    if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR))
    {
      Count = CFDictionaryGetCount(a8);
      *(_DWORD *)v279 = 67109120;
      LODWORD(v280) = Count;
      _os_log_impl(&dword_185066000, v215, OS_LOG_TYPE_ERROR, "Current touch count: %d", v279, 8u);
    }

    v167 = v234;
  }
  v245[0] = v166;
  v245[1] = 3221225472;
  v245[2] = ____startNewUITouch_block_invoke_122;
  v245[3] = &unk_1E16DF738;
  v178 = v167;
  v250 = v251;
  v246 = v178;
  p_buf = &buf;
  v179 = v176;
  v247 = v179;
  v249 = &v275;
  -[__CFDictionary enumerateKeysAndObjectsUsingBlock:](a8, "enumerateKeysAndObjectsUsingBlock:", v245);
  v180 = qword_1ECD7FFF8;
  if (!qword_1ECD7FFF8)
  {
    v180 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v180, (unint64_t *)&qword_1ECD7FFF8);
  }
  if ((*(_BYTE *)v180 & 1) != 0)
  {
    v217 = *(id *)(v180 + 8);
    if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR))
    {
      v218 = CFDictionaryGetCount(a10);
      *(_DWORD *)v279 = 67109120;
      LODWORD(v280) = v218;
      _os_log_impl(&dword_185066000, v217, OS_LOG_TYPE_ERROR, "New touch count: %d", v279, 8u);
    }

    v166 = MEMORY[0x1E0C809B0];
  }
  v239[0] = v166;
  v239[1] = 3221225472;
  v239[2] = ____startNewUITouch_block_invoke_125;
  v239[3] = &unk_1E16DF738;
  v181 = v178;
  v244 = v251;
  v240 = v181;
  v242 = &buf;
  v182 = v179;
  v241 = v182;
  v243 = &v275;
  -[__CFDictionary enumerateKeysAndObjectsUsingBlock:](a10, "enumerateKeysAndObjectsUsingBlock:", v239);
  if (*(_BYTE *)(*((_QWORD *)&v275 + 1) + 24))
  {
    if (*(_BYTE *)(*(_QWORD *)&buf.y + 24))
    {
      if (IsKindOfUIView && (objc_msgSend(v181, "isMultipleTouchEnabled") & 1) == 0)
      {
        __setTouchViewNilWithGestureCheck(a4, v44, a8, a10);
        v183 = qword_1ECD80000;
        if (!qword_1ECD80000)
        {
          v183 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v183, (unint64_t *)&qword_1ECD80000);
        }
        if ((*(_BYTE *)v183 & 1) != 0)
        {
          v184 = *(id *)(v183 + 8);
          if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v279 = 134217984;
            v280 = v44;
            v185 = "Touch %p was clicked in a non multi touch enabled view with other touches in the same view...ignoring";
LABEL_222:
            v187 = v184;
            v188 = 12;
            goto LABEL_223;
          }
          goto LABEL_224;
        }
      }
    }
    else
    {
      -[UITouch _setIsFirstTouchForView:](v44, "_setIsFirstTouchForView:", 1);
      if (((unsigned int (*)(_QWORD *, UITouch *))v252)(v251, v44))
      {
        if (IsKindOfUIView && objc_msgSend(v181, "_shouldApplyExclusiveTouch"))
        {
          __setTouchViewNilWithGestureCheck(a4, v44, a8, a10);
          v189 = qword_1ECD80008;
          if (!qword_1ECD80008)
          {
            v189 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v189, (unint64_t *)&qword_1ECD80008);
          }
          if ((*(_BYTE *)v189 & 1) != 0)
          {
            v222 = *(id *)(v189 + 8);
            if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v279 = 134217984;
              v280 = v44;
              _os_log_impl(&dword_185066000, v222, OS_LOG_TYPE_ERROR, "Touch %p was clicked in an exclusive touch view, but we already have another touch for this window", v279, 0xCu);
            }

          }
        }
        objc_msgSend(v182, "_exclusiveTouchView");
        v190 = (void *)objc_claimAutoreleasedReturnValue();
        v191 = v190 == 0;

        if (!v191)
        {
          __setTouchViewNilWithGestureCheck(a4, v44, a8, a10);
          v192 = qword_1ECD80010;
          if (!qword_1ECD80010)
          {
            v192 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v192, (unint64_t *)&qword_1ECD80010);
          }
          if ((*(_BYTE *)v192 & 1) != 0)
          {
            v184 = *(id *)(v192 + 8);
            if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v279 = 134217984;
              v280 = v44;
              v185 = "Touch %p was clicked in a view, but we already have another exclusive touch view for this window";
              goto LABEL_222;
            }
LABEL_224:

          }
        }
      }
    }
  }
  else
  {
    -[UITouch _setIsFirstTouchForView:](v44, "_setIsFirstTouchForView:", 1);
    if (((unsigned int (*)(_QWORD *, UITouch *))v252)(v251, v44))
    {
      if (*(_BYTE *)(*(_QWORD *)&buf.y + 24))
      {
        v186 = qword_1ECD80018;
        if (!qword_1ECD80018)
        {
          v186 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v186, (unint64_t *)&qword_1ECD80018);
        }
        if ((*(_BYTE *)v186 & 1) != 0)
        {
          v184 = *(id *)(v186 + 8);
          if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v279 = 0;
            v185 = "ERROR: We found a touch view the current view without finding a touch for the current window";
            v187 = v184;
            v188 = 2;
LABEL_223:
            _os_log_impl(&dword_185066000, v187, OS_LOG_TYPE_ERROR, v185, v279, v188);
            goto LABEL_224;
          }
          goto LABEL_224;
        }
      }
      else
      {
        -[UITouch _setIsFirstTouchForView:](v44, "_setIsFirstTouchForView:", 1);
        if (IsKindOfUIView && objc_msgSend(v181, "_shouldApplyExclusiveTouch"))
        {
          objc_msgSend(v182, "_setExclusiveTouchView:", v181);
          objc_msgSend(a4, "_exclusiveTouchWindows");
          v193 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v193, "addObject:", v182);

          v194 = qword_1ECD80020;
          if (!qword_1ECD80020)
          {
            v194 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v194, (unint64_t *)&qword_1ECD80020);
          }
          if ((*(_BYTE *)v194 & 1) != 0)
          {
            v184 = *(id *)(v194 + 8);
            if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
            {
              v223 = (objc_class *)objc_opt_class();
              NSStringFromClass(v223);
              v224 = (UITouch *)(id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v279 = 138412802;
              v280 = v224;
              v281 = 2048;
              v282 = a4;
              v283 = 2112;
              v284 = v182;
              _os_log_impl(&dword_185066000, v184, OS_LOG_TYPE_ERROR, "%@<%p> - Added window for exclusive touch  (%@)", v279, 0x20u);

            }
            goto LABEL_224;
          }
        }
      }
    }
  }
  v195 = v44;

  _Block_object_dispose(&v275, 8);
  _Block_object_dispose(&buf, 8);

  return v195;
}

void sub_1851723FC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2B0], 8);
  _Block_object_dispose(&STACK[0x3A0], 8);
  _Unwind_Resume(a1);
}

double _UIConvertScenePoint3DToWindow(void *a1, void *a2, double a3, double a4)
{
  id v7;
  id *v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  void *v37;
  double v38;
  double v39;

  v7 = a1;
  v8 = a2;
  -[UIWindow _fbsScene](v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (v9 != v7)
  {
    if (v7)
    {
      objc_msgSend(v7, "settings");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "frame");
      v12 = v11;
      v14 = v13;
      v16 = v15;
      v18 = v17;
      v19 = objc_msgSend(v10, "interfaceOrientation");
      v20 = v16 - a3;
      v21 = v18 - a4;
      v22 = v16 - a4;
      v23 = v18 - a3;
      if (v19 == 4)
        v24 = a4;
      else
        v24 = a3;
      if (v19 != 4)
        v23 = a4;
      if (v19 == 3)
        v23 = a3;
      else
        v22 = v24;
      if (v19 != 2)
      {
        v20 = v22;
        v21 = v23;
      }
      a3 = v12 + v20;
      a4 = v14 + v21;

    }
    if (v9)
    {
      objc_msgSend(v9, "settings");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "frame");
      v27 = v26;
      v29 = v28;
      v31 = a3 - v30;
      v33 = a4 - v32;
      v34 = objc_msgSend(v25, "interfaceOrientation");
      if (v34 == 4)
        v35 = v29 - v33;
      else
        v35 = v31;
      if (v34 == 4)
        v36 = v31;
      else
        v36 = v33;
      if (v34 == 3)
      {
        v35 = v33;
        v36 = v27 - v31;
      }
      if (v34 == 2)
        a3 = v27 - v31;
      else
        a3 = v35;
      if (v34 == 2)
        a4 = v29 - v33;
      else
        a4 = v36;

    }
  }
  objc_msgSend(v8, "layer");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "convertPoint:fromLayer:", 0, a3, a4);
  v39 = v38;

  return v39;
}

BOOL _UIEventDeferringManagerIsAvailableForScene(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;

  objc_msgSend(a1, "session");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(a1, "session");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "role");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("UIWindowSceneSessionRoleExternalDisplayNonInteractive"));

  }
  else
  {
    v5 = 1;
  }

  if (!a1 || ((objc_msgSend(a1, "_hostsWindows") ^ 1 | v5) & 1) != 0)
    return 0;
  if (_UIEventDeferringManagerIsAvailableForScene_onceToken != -1)
    dispatch_once(&_UIEventDeferringManagerIsAvailableForScene_onceToken, &__block_literal_global_558);
  return _UIEventDeferringManagerIsAvailableForScene_allowForProcess != 0;
}

uint64_t _UISceneSystemShellManagesKeyboardFocusIsPossibleForScene(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  int v8;

  objc_msgSend(a1, "_FBSScene");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(a1, "_FBSScene");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "settings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isUISubclass");

  v6 = objc_msgSend(a1, "_hostsWindows");
  if (a1)
    v7 = v2 == 0;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = v5;
  return v8 & v6;
}

double _UIWindowConvertRectFromOrientationToOrientation(uint64_t a1, uint64_t a2, double result, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[10];

  if (a1 != a2)
  {
    v10[8] = v8;
    v10[9] = v9;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___UIWindowConvertRectFromOrientationToOrientation_block_invoke;
    v10[3] = &__block_descriptor_64_e30__CGPoint_dd_24__0_CGPoint_dd_8l;
    *(double *)&v10[4] = a7;
    *(double *)&v10[5] = a8;
    v10[6] = a1;
    v10[7] = a2;
    return _UIRectTransformByTransformingCorners((uint64_t)v10, result, a4, a5, a6);
  }
  return result;
}

float _chargeForView(void *a1)
{
  _BYTE *v1;
  void *v2;
  float v3;
  void *v4;
  float v5;

  v1 = a1;
  v2 = v1;
  v3 = 0.0;
  if (v1 && (v1[124] & 0x10) != 0)
  {
    objc_getAssociatedObject(v1, &_UIViewChargeAssocObjectKey);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "floatValue");
    v3 = v5;

  }
  return v3;
}

void _UpdateTouchTapCount(_WORD *a1, int a2, double a3, double a4, double a5)
{
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "window");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "_touchData");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v12 = v11;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  v14 = v12;
  if (v13)
  {
    v15 = v13;
    v16 = *(_QWORD *)v20;
LABEL_3:
    v17 = 0;
    while (1)
    {
      if (*(_QWORD *)v20 != v16)
        objc_enumerationMutation(v12);
      v18 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v17);
      if (*(_WORD **)(v18 + 56) == a1)
        break;
      if (v15 == ++v17)
      {
        v15 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
        if (v15)
          goto LABEL_3;
        v14 = v12;
        goto LABEL_22;
      }
    }
    if (*(_BYTE *)(v18 + 48)
      && (*(double *)(v18 + 40) + 0.75 < a3
       || a2 && (vabdd_f64(a4, *(double *)(v18 + 8)) >= 45.0 || vabdd_f64(a5, *(double *)(v18 + 16)) >= 45.0)))
    {
      v14 = (id)v18;
      *(_BYTE *)(v18 + 48) = 0;
      if (a1)
        a1[118] &= ~2u;
    }
    else
    {
      v14 = 0;
    }
    if (objc_msgSend(a1, "phase", (_QWORD)v19) == 3)
    {
      *(double *)(v18 + 32) = a3;
      *(_QWORD *)(v18 + 56) = 0;
    }

    if (v14)
    {
      objc_msgSend(v12, "removeObject:", v14);
      goto LABEL_22;
    }
  }
  else
  {
LABEL_22:

  }
  if (objc_msgSend(a1, "phase", (_QWORD)v19) == 3 && (!a1 || (a1[118] & 2) == 0))
    objc_msgSend(a1, "setTapCount:", 0);

}

double ____startNewUITouch_block_invoke(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

double _yOffsetForBaselinedImageView(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v4, "_firstBaselineOffsetFromTop");
  objc_msgSend(v4, "alignmentRectInsets");

  UIRoundToViewScale(v3);
  v6 = v5;

  return v6;
}

BOOL UIAccessibilityIsInvertColorsEnabled(void)
{
  return _AXSInvertColorsEnabled() != 0;
}

uint64_t sub_185174D08(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, id);
  id v6;

  v5 = *(void (**)(uint64_t, id))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v6 = a3;
  v5(a2, v6);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_185174D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_185174D88(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_185174D88(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;

  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDD82DA8);
  swift_dynamicCast();
  a3(v6, a2);
  return swift_unknownObjectRelease();
}

BOOL sub_185174E04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t static UIListContentConfiguration.prominentInsetGroupedHeader()@<X0>(uint64_t *a1@<X8>)
{
  return sub_185398CE0((SEL *)&selRef_prominentInsetGroupedHeaderConfiguration, a1);
}

double UIRectCenteredAboutPoint(double a1, double a2, double a3, double a4, double a5)
{
  return round(a5 - a3 * 0.5);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void UIButton.Configuration.image.setter(void *a1)
{
  sub_1852563B8(a1, (const char **)&selRef_setImage_);
}

void UIButton.Configuration.baseForegroundColor.setter(void *a1)
{
  sub_1852563B8(a1, (const char **)&selRef_setBaseForegroundColor_);
}

double _UISetPointValueForAxis(uint64_t a1, double a2, double a3, double a4)
{
  void *v5;
  void *v6;

  if (a1 != 2)
  {
    if (a1 == 1)
    {
      return a4;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGPoint _UISetPointValueForAxis(CGPoint, CGFloat, UIAxis)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("_UICollectionLayoutHelpers.m"), 169, CFSTR("Unknown layout axis."));

    }
  }
  return a2;
}

uint64_t _UIRTreeContainerNode<unsigned long>::enumerateElementsIntersecting(_QWORD *a1, float64x2_t *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t result;
  int64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float64x2_t *v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  _OWORD v23[2];
  float64x2_t v24[2];

  v21 = a2[1];
  v22 = *a2;
  result = _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v24, (uint64_t)a1);
  v20 = vaddq_f64(v22, v21);
  v8 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vcgeq_f64(v22, vaddq_f64(v24[0], v24[1])), (int8x16_t)vcgtq_f64(v22, v24[0])), vandq_s8((int8x16_t)vcgtq_f64(v24[0], v22), (int8x16_t)vcgeq_f64(v24[0], v20)));
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0] & 0x8000000000000000) == 0)
  {
    v9 = a1[12] - a1[11];
    if (v9)
    {
      v10 = 0;
      v11 = v9 >> 5;
      if (v11 <= 1)
        v12 = 1;
      else
        v12 = v11;
      while (1)
      {
        v13 = (float64x2_t *)(a1[11] + 32 * v10);
        v14 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vcgeq_f64(v22, vaddq_f64(*v13, v13[1])), (int8x16_t)vcgtq_f64(v22, *v13)), vandq_s8((int8x16_t)vcgtq_f64(*v13, v22), (int8x16_t)vcgeq_f64(*v13, v20)));
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v14, 1), (int8x16_t)v14).u64[0] & 0x8000000000000000) == 0)
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD, _BYTE *))(a4 + 16))(a4, *(_QWORD *)(a1[8] + 8 * v10), a3);
          if (*a3)
            break;
        }
        if (v12 == ++v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v15 = a1[5];
      v16 = a1[6];
      if (v15 != v16)
      {
        v17 = v15 + 16;
        do
        {
          v18 = *(_QWORD *)(v17 - 16);
          v23[0] = v22;
          v23[1] = v21;
          result = _UIRTreeContainerNode<unsigned long>::enumerateElementsIntersecting(v18, v23, a3, a4);
          if (*a3)
            v19 = 1;
          else
            v19 = v17 == v16;
          v17 += 16;
        }
        while (!v19);
      }
    }
  }
  return result;
}

double _UIPointValueForAxis(uint64_t a1, double a2, double a3)
{
  double result;
  void *v4;
  void *v5;

  if (a1 != 1)
  {
    if (a1 == 2)
    {
      return a3;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat _UIPointValueForAxis(CGPoint, UIAxis)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UICollectionLayoutHelpers.m"), 157, CFSTR("Unhandled layout axis."));

      return 0.0;
    }
  }
  return result;
}

void sub_185175D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185176034(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

double _UISizeClampToMinimumSizeForAxis(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v10;
  double v11;
  void *v13;
  void *v14;

  if ((unint64_t)(a1 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGSize _UISizeClampToMinimumSizeForAxis(CGSize, CGSize, UIAxis)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("_UICollectionLayoutHelpers.m"), 418, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("axis == UIAxisVertical || axis == UIAxisHorizontal"));

  }
  v10 = _UISizeValueForAxis(a1, a2, a3);
  v11 = _UISizeValueForAxis(a1, a4, a5);
  if (v10 < v11)
    return _UISetSizeValueForAxis(a1, a2, a3, v11);
  return a2;
}

double _UISizeValueForAxis(uint64_t a1, double a2, double a3)
{
  double result;
  void *v4;
  void *v5;

  if (a1 != 1)
  {
    if (a1 == 2)
    {
      return a3;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat _UISizeValueForAxis(CGSize, UIAxis)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UICollectionLayoutHelpers.m"), 199, CFSTR("Unknown layout axis."));

      return 0.0;
    }
  }
  return result;
}

uint64_t _UIDirectionalEdgeForPreEdgeOnLayoutAxis(uint64_t a1)
{
  void *v3;
  void *v4;

  if ((unint64_t)(a1 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSDirectionalRectEdge _UIDirectionalEdgeForPreEdgeOnLayoutAxis(UIAxis)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UICollectionLayoutHelpers.m"), 1045, CFSTR("Invalid layout axis."));

  }
  if (a1 == 2)
    return 1;
  else
    return 2;
}

uint64_t _UIDirectionalEdgeForPostEdgeOnLayoutAxis(uint64_t a1)
{
  void *v3;
  void *v4;

  if ((unint64_t)(a1 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSDirectionalRectEdge _UIDirectionalEdgeForPostEdgeOnLayoutAxis(UIAxis)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UICollectionLayoutHelpers.m"), 1051, CFSTR("Invalid layout axis."));

  }
  if (a1 == 2)
    return 4;
  else
    return 8;
}

void sub_185178328(_Unwind_Exception *a1)
{
  __destructor_8_s64_s72_s80_s88_s96_s112((id *)&STACK[0x348]);
  _Unwind_Resume(a1);
}

void __destructor_8_s64_s72_s80_s88_s96_s112(id *a1)
{

}

id __copy_constructor_8_8_t0w64_s64_s72_s80_s88_s96_t104w4_s112(uint64_t a1, id *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  id result;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  result = a2[14];
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

NSString *__cdecl NSStringFromDirectionalEdgeInsets(NSDirectionalEdgeInsets insets)
{
  return (NSString *)(id)CFStringCreateWithFormat(0, 0, CFSTR("{%.*g, %.*g, %.*g, %.*g}"), 17, *(_QWORD *)&insets.top, 17, *(_QWORD *)&insets.leading, 17, *(_QWORD *)&insets.bottom, 17, *(_QWORD *)&insets.trailing);
}

id CreateWidthMinimizingConstraint(void *a1)
{
  void *v1;
  double v2;

  objc_msgSend(a1, "constraintEqualToConstant:", 0.0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v2) = 1112014848;
  objc_msgSend(v1, "setPriority:", v2);
  return v1;
}

UILayoutGuide *CreateLayoutGuide(void *a1, void *a2)
{
  id v3;
  id v4;
  UILayoutGuide *v5;

  v3 = a2;
  v4 = a1;
  v5 = objc_alloc_init(UILayoutGuide);
  -[UILayoutGuide setIdentifier:](v5, "setIdentifier:", v4);

  objc_msgSend(v3, "addLayoutGuide:", v5);
  return v5;
}

void sub_18517ABEC(_Unwind_Exception *a1)
{
  _UIEmitSignpostEvent(&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t _layoutSizeInfo(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (void *)MEMORY[0x1E0C99D80];
  v3 = (void *)MEMORY[0x1E0C99D20];
  v4 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGSize:");
  v5 = objc_msgSend(v3, "arrayWithObjects:", v4, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), 0);
  return objc_msgSend(v2, "dictionaryWithObjects:forKeys:", v5, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("layoutSize"), CFSTR("intentionallyCollapsedHeight"), 0));
}

void UICeilToScale(double a1, double a2)
{
  if (a2 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
}

uint64_t dispatch thunk of UIMutableTraits.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 184))();
}

{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

{
  return (*(uint64_t (**)(void))(a6 + 136))();
}

{
  return (*(uint64_t (**)(void))(a6 + 208))();
}

{
  return (*(uint64_t (**)(void))(a6 + 232))();
}

{
  return (*(uint64_t (**)(void))(a6 + 256))();
}

{
  return (*(uint64_t (**)(void))(a6 + 280))();
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.FontAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.FontAttribute;
}

BOOL UIAccessibilityDarkerSystemColorsEnabled(void)
{
  return _AXDarkenSystemColors() != 0;
}

BOOL UIAccessibilityShouldDifferentiateWithoutColor(void)
{
  return _AXSDifferentiateWithoutColorEnabled() != 0;
}

uint64_t static UIBackgroundConfiguration.clear()@<X0>(uint64_t *a1@<X8>)
{
  return sub_18526BD38((SEL *)&selRef_clearConfiguration, a1);
}

uint64_t UICellConfigurationState.isPinned.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 12);
}

BOOL UIAccessibilityIsVoiceOverRunning(void)
{
  return _AXSVoiceOverTouchEnabled() != 0;
}

double UIRectCenteredIntegralRectScale(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v16;
  double v17;
  BOOL v18;
  double v19;
  double v20;
  double v21;

  v16 = a5 + (a7 - a3) * 0.5;
  v17 = a9;
  if (a9 == 0.0)
  {
    if (AdjustToScale_onceToken_0 != -1)
      dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
    v17 = *(double *)&AdjustToScale___s_0;
  }
  v18 = v17 == 1.0;
  v19 = round(v16 * v17) / v17;
  v20 = round(v16);
  if (v18)
    v21 = v20;
  else
    v21 = v19;
  if (a9 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  return v21;
}

uint64_t UIMutableTraits.userInterfaceStyle.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v8;

  v8 = a1;
  v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  v6 = sub_1852478E0((unint64_t *)&unk_1ECD75710, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceStyle, (uint64_t)&unk_186667980);
  return v5(&v8, &type metadata for UITraitUserInterfaceStyle, &type metadata for UITraitUserInterfaceStyle, &protocol witness table for UITraitUserInterfaceStyle, v6, a2, a3);
}

uint64_t sub_18517D3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void))
{
  uint64_t AssociatedTypeWitness;

  a8();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_18517D414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id *v5;
  uint64_t v10;

  swift_getAssociatedTypeWitness();
  sub_186507618();
  objc_msgSend(*v5, sel__setNSIntegerValue_forTraitToken_, v10, sub_185249B74(a3, a4, a5, (uint64_t)&unk_1E16A24B0, (uint64_t (*)(uint64_t))sub_18559C4C4));
  return swift_unknownObjectRelease();
}

uint64_t sub_18517D4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_18517D3B4(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))sub_18517D414);
}

double _UIBackgroundExtensionForBar(void *a1)
{
  id v1;
  CGFloat MaxY;
  double v3;
  CGRect v5;

  v1 = a1;
  objc_msgSend(v1, "frame");
  MaxY = CGRectGetMaxY(v5);
  v3 = _UIBackgroundExtensionForBarWithMaxY(v1, MaxY);

  return v3;
}

double _UIBackgroundExtensionForBarWithMaxY(void *a1, CGFloat a2)
{
  id v3;
  double v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char isKindOfClass;
  double v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  BOOL IsIdentity;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  void *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  void *v49;
  double v50;
  double v51;
  BOOL v52;
  double v53;
  void *v54;
  CGFloat v55;
  CGAffineTransform v57;
  CGRect v58;

  v3 = a1;
  v4 = 0.0;
  if (!dyld_program_sdk_at_least())
    goto LABEL_38;
  objc_msgSend(v3, "_screen");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    +[UIScreen mainScreen](UIScreen, "mainScreen");
    v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  v8 = v7;

  v9 = 0.0;
  if (objc_msgSend(v8, "_isEmbeddedScreen")
    && UIApplicationSceneClassicModeWantsSafeAreaInsets(+[UIApplication _classicMode](UIApplication, "_classicMode")))
  {
    objc_msgSend(v8, "_displayInfoProvider");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "safeAreaInsetsPortrait");
    v4 = v11;
  }
  else
  {
    v10 = 0;
  }
  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "userInterfaceIdiom");

  if ((v13 & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    objc_msgSend(v3, "delegate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {

    }
    else
    {
      objc_msgSend(v3, "delegate");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0)
        goto LABEL_14;
    }
    objc_msgSend(v10, "homeAffordanceOverlayAllowance");
    v9 = v17 - v4;
  }
LABEL_14:
  objc_msgSend(v3, "window");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v18, "_isHostedInAnotherProcess") & 1) != 0)
  {

LABEL_16:
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v3, "_externalViewForSafeAreaInsets");
    else
      objc_msgSend(v3, "superview");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "safeAreaInsets", *(_OWORD *)&v57.a, *(_OWORD *)&v57.c, *(_OWORD *)&v57.tx);
    v26 = v25;
    goto LABEL_30;
  }
  if (dyld_program_sdk_at_least())
  {
    v19 = v3;
    if (qword_1ECD7A8C8 != -1)
      dispatch_once(&qword_1ECD7A8C8, &__block_literal_global_163);
    objc_msgSend(v19, "window");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "_rootPresentationController");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "presentedView");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = v22;
    if (v22)
      objc_msgSend(v22, "transform");
    else
      memset(&v57, 0, sizeof(v57));
    IsIdentity = CGAffineTransformIsIdentity(&v57);

    v28 = byte_1ECD7A894;
    if (!v28 || !IsIdentity)
      goto LABEL_16;
  }
  else
  {

  }
  objc_msgSend(v3, "superview", *(_OWORD *)&v57.a, *(_OWORD *)&v57.c, *(_OWORD *)&v57.tx);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "superview");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "superview");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "frame");
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  objc_msgSend(v3, "window");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "convertRect:toView:", v40, v33, v35, v37, v39);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v48 = v47;

  objc_msgSend(v3, "window");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "window");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "_safeAreaInsetsForFrame:inSuperview:", v49, v42, v44, v46, v48);
  v26 = v50;

LABEL_30:
  v51 = v9 + v26;
  v52 = v9 + v26 < 0.0;
  v4 = 0.0;
  if (v52)
    v53 = 0.0;
  else
    v53 = v51;
  if (objc_msgSend(v3, "barPosition") == 4
    || objc_msgSend(v3, "barPosition") == 1
    && (objc_msgSend(v3, "superview"),
        v54 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v54, "bounds"),
        v55 = CGRectGetMaxY(v58) - v53,
        v54,
        v55 <= a2))
  {
    v4 = v53;
  }

LABEL_38:
  return v4;
}

void sub_18518033C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIStatusBarGetVisualProviderClassForScreen(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  int v6;
  id v7;
  void *v8;
  void *v9;
  Class v10;
  objc_class *Superclass;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  CGFloat Width;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  NSObject *v26;
  id v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 buf;
  id (*v34)(uint64_t, void *, uint64_t, BOOL *);
  void *v35;
  id v36;
  id v37;
  uint64_t *v38;
  _QWORD v39[2];
  CGRect v40;

  v39[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "_isEmbeddedScreen");
  v6 = v5;
  if (v5)
  {
    v7 = (id)_MergedGlobals_1216;
    if (_MergedGlobals_1216)
      goto LABEL_19;
  }
  if (!v5)
  {
LABEL_11:
    v12 = v3;
    v13 = v4;
    v29 = 0;
    v30 = &v29;
    v31 = 0x2050000000;
    v32 = 0;
    v39[0] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v39, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v34 = ___UIStatusBarGetNativeVisualProviderClassForScreenWithVisualProviderInfo_block_invoke;
    v35 = &unk_1E16E0A88;
    v38 = &v29;
    v15 = v12;
    v36 = v15;
    v16 = v13;
    v37 = v16;
    objc_msgSend(v14, "enumerateObjectsUsingBlock:", &buf);
    v17 = (id)v30[3];

    _Block_object_dispose(&v29, 8);
    v7 = v17;
    if (!v7)
    {
      objc_msgSend(v15, "_unjailedReferenceBounds");
      Width = CGRectGetWidth(v40);
      objc_msgSend(v15, "_nativeScale");
      v20 = v19;
      objc_msgSend(v15, "traitCollection");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "userInterfaceIdiom");

      objc_msgSend(v15, "_displayCornerRadius");
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("No status bar visual provider for screen %@ (width: %.2f, scale: %.2f, idiom: %ld, cornerRadius: %.2f). Please see rdar://45025538."), v15, *(_QWORD *)&Width, v20, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = qword_1ECD802D8;
      if (!qword_1ECD802D8)
      {
        v25 = __UILogCategoryGetNode("StatusBar", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v25, (unint64_t *)&qword_1ECD802D8);
      }
      v26 = *(NSObject **)(v25 + 8);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_log_impl(&dword_185066000, v26, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
      }
      v7 = (id)objc_opt_class();

    }
    if (!v6)
      goto LABEL_19;
LABEL_18:
    _MergedGlobals_1216 = (uint64_t)v7;
    goto LABEL_19;
  }
  _UIKitUserDefaults();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", CFSTR("UIStatusBarVisualProviderClassName"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    || (v10 = NSClassFromString((NSString *)v9)) == 0)
  {
LABEL_10:

    goto LABEL_11;
  }
  v7 = v10;
  Superclass = v10;
  while (!class_conformsToProtocol(Superclass, (Protocol *)&unk_1EDFE3100))
  {
    Superclass = class_getSuperclass(Superclass);
    if (!Superclass)
      goto LABEL_10;
  }
  NSLog(CFSTR("WARNING: Using overridden status bar visual provider class: %@"), v7);

  if (v6)
    goto LABEL_18;
LABEL_19:
  v27 = v7;

  return v27;
}

void sub_1851807E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double UIEdgeInsetsFromApplicationSupportDisplayEdgeInsetsWrapper(void *a1)
{
  id v1;
  double v2;
  double v3;

  if (!a1)
    return 0.0;
  v1 = a1;
  objc_msgSend(v1, "topInset");
  v3 = v2;
  objc_msgSend(v1, "leftInset");
  objc_msgSend(v1, "bottomInset");
  objc_msgSend(v1, "rightInset");

  return v3;
}

BOOL UIApplicationSceneClassicModeWantsSafeAreaInsets(uint64_t a1)
{
  return ((unint64_t)(a1 + 1) > 0xB || ((1 << (a1 + 1)) & 0xF3D) == 0) && a1 != 100;
}

uint64_t __UITraitEnvironmentLayoutDirectionFromCUILayoutDirection(uint64_t a1)
{
  NSObject *v3;
  unint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1 == 5)
      return 0;
    if (a1 == 4)
      return 1;
    if (os_variant_has_internal_diagnostics())
    {
      v3 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        v6 = 134217984;
        v7 = a1;
        _os_log_fault_impl(&dword_185066000, v3, OS_LOG_TYPE_FAULT, "Got an unexpected layout direction from CoreUI: %lu", (uint8_t *)&v6, 0xCu);
      }
    }
    else
    {
      v4 = __UITraitEnvironmentLayoutDirectionFromCUILayoutDirection___s_category;
      if (!__UITraitEnvironmentLayoutDirectionFromCUILayoutDirection___s_category)
      {
        v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v4, (unint64_t *)&__UITraitEnvironmentLayoutDirectionFromCUILayoutDirection___s_category);
      }
      v5 = *(NSObject **)(v4 + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = 134217984;
        v7 = a1;
        _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "Got an unexpected layout direction from CoreUI: %lu", (uint8_t *)&v6, 0xCu);
      }
    }
  }
  return -1;
}

uint64_t UINavigationItem.renameDelegate.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel__dci_renameHandler);
  if (!v1)
    return 0;
  v2 = v1;
  _s35_UINavigationItemSwiftRenameHandlerCMa();
  v3 = swift_dynamicCastClass();
  if (!v3)
  {

    return 0;
  }
  v4 = MEMORY[0x186DCA138](v3 + OBJC_IVAR____TtCE5UIKitCSo16UINavigationItem35_UINavigationItemSwiftRenameHandler_delegate);

  return v4;
}

uint64_t _UIBarsDesktopNavigationBarEnabled()
{
  if (qword_1ECD7A8C0 != -1)
    dispatch_once(&qword_1ECD7A8C0, &__block_literal_global_75_0);
  return byte_1ECD7A893;
}

id _UINavigationBarCastToAugmentedTitleView(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if (objc_msgSend(v1, "conformsToProtocol:", &unk_1EDE60060))
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

BOOL _UINavigationBarHasExcessiveLineHeightCharactersInTitle(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    +[UILabel _tooBigChars]();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v1, "rangeOfCharacterFromSet:", v2) != 0x7FFFFFFFFFFFFFFFLL;

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_18518421C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _ListCellCreateSeparatorLayoutGuideLeadingConstraint(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  double v9;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
  {
    if (v6)
      goto LABEL_3;
LABEL_6:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSLayoutConstraint * _Nonnull _ListCellCreateSeparatorLayoutGuideLeadingConstraint(NSLayoutAnchor * _Nonnull __strong, NSLayoutAnchor * _Nonnull __strong, NSString * _Nonnull __strong)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("UICollectionViewListCell.m"), 2200, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("toAnchor != nil"));

    if (v7)
      goto LABEL_4;
LABEL_7:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSLayoutConstraint * _Nonnull _ListCellCreateSeparatorLayoutGuideLeadingConstraint(NSLayoutAnchor * _Nonnull __strong, NSLayoutAnchor * _Nonnull __strong, NSString * _Nonnull __strong)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("UICollectionViewListCell.m"), 2201, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("identifier != nil"));

    goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSLayoutConstraint * _Nonnull _ListCellCreateSeparatorLayoutGuideLeadingConstraint(NSLayoutAnchor * _Nonnull __strong, NSLayoutAnchor * _Nonnull __strong, NSString * _Nonnull __strong)");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("UICollectionViewListCell.m"), 2199, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("fromAnchor != nil"));

  if (!v6)
    goto LABEL_6;
LABEL_3:
  if (!v7)
    goto LABEL_7;
LABEL_4:
  objc_msgSend(v5, "constraintEqualToAnchor:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setShouldBeArchived:", 1);
  LODWORD(v9) = 1132068864;
  objc_msgSend(v8, "setPriority:", v9);
  objc_msgSend(v8, "setIdentifier:", v7);

  return v8;
}

uint64_t _UIStatusBarHostedInSpringBoard()
{
  return 1;
}

void sub_18518CB0C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18518D478(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[6];

  v8 = (void *)sub_185714A5C();
  v9 = v8;
  if (a1)
  {
    v13[4] = a1;
    v13[5] = a2;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 1107296256;
    v13[2] = sub_185713614;
    v13[3] = a3;
    v10 = _Block_copy(v13);
    v11 = v9;
    sub_18518D708(a1);
    swift_release();
  }
  else
  {
    v12 = v8;
    v10 = 0;
  }
  objc_msgSend(v9, *a4, v10);
  sub_18518D718(a1);
  _Block_release(v10);

}

id UICollectionLayoutListConfiguration.itemSeparatorHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD aBlock[6];
  void *v15;

  if (a1)
  {
    sub_18518D708(a1);
    v5 = (void *)sub_185714A5C();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    aBlock[4] = sub_1850D2794;
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1850D26C8;
    aBlock[3] = &block_descriptor_55;
    v7 = _Block_copy(aBlock);
    sub_18518D708(a1);
    v8 = v5;
    swift_release();
    objc_msgSend(v8, sel_setItemSeparatorHandler_, v7);
    sub_18518D718(a1);
    _Block_release(v7);

    return (id)sub_18518D718(a1);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v2;
    if (isUniquelyReferenced_nonNull_native)
    {
      v12 = *(void **)(v11 + 16);
    }
    else
    {
      objc_msgSend(*(id *)(v11 + 16), sel_copy);
      sub_186507B1C();
      swift_unknownObjectRelease();
      sub_185167974();
      swift_dynamicCast();
      v12 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A58);
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = v15;
      swift_release();
      *v2 = v13;
    }
    return objc_msgSend(v12, sel_setItemSeparatorHandler_, 0);
  }
}

uint64_t sub_18518D708(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_18518D718(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

void sub_18518D964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _assistedButtonForView(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

uint64_t _shouldAssistantDescendent(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2;
  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    v5 = v3;
    if (WeakRetained == v5)
    {
      v6 = 1;
    }
    else
    {
      while (1)
      {
        v6 = objc_msgSend(v5, "_allowAssistanceInSubtree");
        if (!(_DWORD)v6)
          break;
        objc_msgSend(v5, "superview");
        v7 = objc_claimAutoreleasedReturnValue();

        v5 = (id)v7;
        if ((id)v7 == WeakRetained)
        {
          v5 = WeakRetained;
          break;
        }
      }
    }

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t sub_18518DD48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, _QWORD *)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  _QWORD v17[4];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a8, a1);
  v17[0] = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  v15 = a7(0, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a8 + *(int *)(v15 + 52), a2, a4);
}

void type metadata accessor for UIView.Invalidating()
{
  JUMPOUT(0x186DC9E8CLL);
}

ValueMetadata *type metadata accessor for UICellAccessory.ReorderOptions()
{
  return &type metadata for UICellAccessory.ReorderOptions;
}

ValueMetadata *type metadata accessor for UICellAccessory.DeleteOptions()
{
  return &type metadata for UICellAccessory.DeleteOptions;
}

uint64_t _UIOrderedLayoutArrangementShouldUseImprovedMultilineTextDisambiguation()
{
  return dyld_program_sdk_at_least();
}

void sub_185190534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t extractContentSizeConstraints(uint64_t result, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  void *v8;

  v7 = result;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a2)
  {
    result = objc_msgSend(a2, "count");
    if (result)
    {
      if (result == 2)
      {
        if (a3)
        {
          result = objc_msgSend(a2, "objectAtIndex:", 0);
          *a3 = result;
        }
        if (a4)
        {
          result = objc_msgSend(a2, "objectAtIndex:", 1);
          *a4 = result;
        }
      }
      else if (result == 1)
      {
        v8 = (void *)objc_msgSend(a2, "objectAtIndex:", 0);
        result = objc_msgSend(v8, "firstAttribute");
        if (result == 8)
        {
          if (a4)
            *a4 = (uint64_t)v8;
        }
        else if (result == 7)
        {
          if (a3)
            *a3 = (uint64_t)v8;
        }
        else
        {
          return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Unexpected content size constraint %@ on view %@"), v8, v7);
        }
      }
      else
      {
        return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Unexpected content size constraints %@ on view %@"), a2, v7);
      }
    }
  }
  return result;
}

void UIButton.Configuration.preferredSymbolConfigurationForImage.setter(void *a1)
{
  sub_1852563B8(a1, (const char **)&selRef_setPreferredSymbolConfigurationForImage_);
}

__n128 UIIntegralTransform@<Q0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  __n128 result;

  v2 = vrndaq_f64(a1[1]);
  *a1 = vrndaq_f64(*a1);
  a1[1] = v2;
  v3 = a1[1];
  a1[2] = vrndaq_f64(a1[2]);
  *(float64x2_t *)a2 = *a1;
  *(float64x2_t *)(a2 + 16) = v3;
  result = (__n128)a1[2];
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void sub_185192034(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, id a4@<X3>, uint64_t *a5@<X4>, id *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  char v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  double v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;

  v12 = *(_QWORD *)a2;
  v13 = *(_BYTE *)(a2 + 8);
  v14 = *(_BYTE *)(a2 + 9);
  if (a1 == 2)
  {
    if (*a5 != -1)
      swift_once();
    v15 = objc_msgSend(*a6, sel_isHidden);
    if ((v14 & 1) == 0)
    {
LABEL_5:
      v16 = v13 & 1;
      if (!a3)
        goto LABEL_18;
LABEL_15:
      v18 = a3;
      if (a4)
      {
        v18 = a3;
        goto LABEL_25;
      }
      goto LABEL_22;
    }
  }
  else
  {
    v15 = a1 & 1;
    if ((*(_BYTE *)(a2 + 9) & 1) == 0)
      goto LABEL_5;
  }
  if (*a5 != -1)
    swift_once();
  objc_msgSend(*a6, sel_reservedLayoutWidth);
  if (v17 != 0.0)
  {
    v12 = *(_QWORD *)&v17;
    if (v17 == -1.79769313e308)
    {
      v16 = 1;
      v12 = 1;
      if (!a3)
        goto LABEL_18;
    }
    else
    {
      v16 = 0;
      if (!a3)
        goto LABEL_18;
    }
    goto LABEL_15;
  }
  v16 = 1;
  v12 = 0;
  if (a3)
    goto LABEL_15;
LABEL_18:
  if (*a5 != -1)
    swift_once();
  v19 = objc_msgSend(*a6, sel_tintColor);
  v18 = v19;
  if (!a4)
  {
    v20 = v19;
LABEL_22:
    v21 = *a5;
    v22 = a3;
    if (v21 != -1)
      swift_once();
    v23 = *a6;
    a4 = objc_msgSend(v23, sel_backgroundColor);

  }
LABEL_25:
  *(_BYTE *)a7 = v15;
  *(_QWORD *)(a7 + 8) = v12;
  *(_BYTE *)(a7 + 16) = v16;
  *(_QWORD *)(a7 + 24) = v18;
  *(_QWORD *)(a7 + 32) = a4;
}

void sub_185192570(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14, CGFloat a15, CGFloat a16, CGFloat a17, CGFloat a18)
{
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  if (dyld_program_sdk_at_least())
  {
    v18.origin.x = a15;
    v18.origin.y = a16;
    v18.size.width = a17;
    v18.size.height = a18;
    CGRectGetMaxY(v18);
    v19.origin.x = a11;
    v19.origin.y = a12;
    v19.size.width = a13;
    v19.size.height = a14;
    CGRectGetMaxY(v19);
  }
  else
  {
    v20.origin.x = a11;
    v20.origin.y = a12;
    v20.size.width = a13;
    v20.size.height = a14;
    CGRectGetMidY(v20);
    v21.origin.x = a15;
    v21.origin.y = a16;
    v21.size.width = a17;
    v21.size.height = a18;
    CGRectGetMaxY(v21);
    v22.origin.x = a15;
    v22.origin.y = a16;
    v22.size.width = a17;
    v22.size.height = a18;
    CGRectGetMinY(v22);
  }
  JUMPOUT(0x185192504);
}

void sub_1851927C4(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14, CGFloat a15, CGFloat a16, CGFloat a17, CGFloat a18)
{
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  if (dyld_program_sdk_at_least())
  {
    v18.origin.x = a15;
    v18.origin.y = a16;
    v18.size.width = a17;
    v18.size.height = a18;
    CGRectGetMaxX(v18);
    v19.origin.x = a11;
    v19.origin.y = a12;
    v19.size.width = a13;
    v19.size.height = a14;
    CGRectGetMaxX(v19);
  }
  else
  {
    v20.origin.x = a11;
    v20.origin.y = a12;
    v20.size.width = a13;
    v20.size.height = a14;
    CGRectGetMidX(v20);
    v21.origin.x = a15;
    v21.origin.y = a16;
    v21.size.width = a17;
    v21.size.height = a18;
    CGRectGetMaxX(v21);
    v22.origin.x = a15;
    v22.origin.y = a16;
    v22.size.width = a17;
    v22.size.height = a18;
    CGRectGetMinX(v22);
  }
  JUMPOUT(0x185192758);
}

uint64_t _UIApplicationEndBackgroundTask(const void *a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  _BOOL8 v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD v16[4];
  id v17;
  id v18;
  _BYTE *v19;
  const void *v20;
  _BYTE buf[24];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECD7DEC0;
  if (!qword_1ECD7DEC0)
  {
    v2 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&qword_1ECD7DEC0);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_DEFAULT, "Ending background task with UIBackgroundTaskIdentifier: %lu", buf, 0xCu);
  }
  if (!a1)
    return 1;
  os_unfair_lock_lock(&stru_1ECD7DE4C);
  NSMapGet((NSMapTable *)qword_1ECD7DE98, a1);
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = qword_1ECD7DED0;
    if (!qword_1ECD7DED0)
    {
      v5 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v5, (unint64_t *)&qword_1ECD7DED0);
    }
    v6 = *(NSObject **)(v5 + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = v6;
      objc_msgSend((id)v4, "description");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = _Block_copy(*(const void **)(v4 + 16));
      *(_DWORD *)buf = 134218499;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2113;
      *(_QWORD *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2112;
      v22 = v9;
      _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_DEFAULT, "Ending task with identifier %lu and description: %{private}@, _expireHandler: %@", buf, 0x20u);

    }
    v10 = *(id *)(v4 + 24);
    objc_msgSend((id)v4, "invalidate");
    NSMapRemove((NSMapTable *)qword_1ECD7DE98, *(const void **)(v4 + 8));
    if (!objc_msgSend((id)qword_1ECD7DE98, "count"))
      _fireBackgroundTaskCountReachedZeroHandlers_Locked();
  }
  else
  {
    v12 = qword_1ECD7DEC8;
    if (!qword_1ECD7DEC8)
    {
      v12 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v12, (unint64_t *)&qword_1ECD7DEC8);
    }
    v13 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_DEFAULT, "Failed to fetch background task with identifier: %lu", buf, 0xCu);
    }
    UIApplicationEndBackgroundTaskError((uint64_t)a1);
    v10 = 0;
  }
  os_unfair_lock_unlock(&stru_1ECD7DE4C);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v11 = 1;
  LOBYTE(v22) = 1;
  if (v10)
  {
    +[_UIBackgroundTaskInfo backgroundTaskAssertionQueue](_UIBackgroundTaskInfo, "backgroundTaskAssertionQueue");
    v14 = objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = ___UIApplicationEndBackgroundTask_block_invoke;
    v16[3] = &unk_1E16C8D30;
    v17 = v10;
    v20 = a1;
    v18 = (id)v4;
    v19 = buf;
    dispatch_sync(v14, v16);

    v11 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
  }
  _Block_object_dispose(buf, 8);

  return v11;
}

void sub_185192FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void **_doAddBackgroundTask(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  const void **v10;
  _UIBackgroundTaskInfo *v11;
  __int128 v12;
  NSMapTable *v13;
  void *v14;
  const void *v15;
  unint64_t v16;
  NSObject *v17;
  NSUInteger (__cdecl *v18)(NSMapTable *, const void *);
  unint64_t v19;
  NSObject *v20;
  NSUInteger (__cdecl *v21)(NSMapTable *, const void *);
  NSObject *v22;
  void *v23;
  const void **v24;
  _QWORD v26[4];
  const void **v27;
  NSMapTableValueCallBacks valueCallBacks;
  _QWORD block[4];
  id v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  NSMapTableKeyCallBacks keyCallBacks;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (a3)
    entr_act_modify();
  v32 = 0;
  v33 = &v32;
  v34 = 0x3032000000;
  v35 = __Block_byref_object_copy__98;
  v36 = __Block_byref_object_dispose__98;
  v37 = 0;
  +[_UIBackgroundTaskInfo backgroundTaskAssertionQueue](_UIBackgroundTaskInfo, "backgroundTaskAssertionQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___doAddBackgroundTask_block_invoke;
  block[3] = &unk_1E16BACE0;
  v31 = &v32;
  v9 = v5;
  v30 = v9;
  dispatch_sync(v7, block);

  if (v33[5] || (dyld_program_sdk_at_least() & 1) == 0)
  {
    v11 = [_UIBackgroundTaskInfo alloc];
    v10 = -[_UIBackgroundTaskInfo initWithProcessAssertion:taskName:expirationHandler:](v11, "initWithProcessAssertion:taskName:expirationHandler:", v33[5], v9, v6);
    os_unfair_lock_lock(&stru_1ECD7DE4C);
    if (!qword_1ECD7DE98)
    {
      v12 = *(_OWORD *)(MEMORY[0x1E0CB2C38] + 16);
      *(_OWORD *)&keyCallBacks.hash = *MEMORY[0x1E0CB2C38];
      *(_OWORD *)&keyCallBacks.retain = v12;
      *(_OWORD *)&keyCallBacks.describe = *(_OWORD *)(MEMORY[0x1E0CB2C38] + 32);
      valueCallBacks = *(NSMapTableValueCallBacks *)*(_QWORD *)&MEMORY[0x1E0CB2FB8];
      v13 = NSCreateMapTable(&keyCallBacks, &valueCallBacks, 0);
      v14 = (void *)qword_1ECD7DE98;
      qword_1ECD7DE98 = (uint64_t)v13;

    }
    do
    {
      v15 = (const void *)_nextTaskId;
      v10[1] = (const void *)_nextTaskId;
      _nextTaskId = (uint64_t)v15 + 1;
      if (v15 == (const void *)-1)
        _nextTaskId = 1;
    }
    while (NSMapGet((NSMapTable *)qword_1ECD7DE98, v15));
    NSMapInsert((NSMapTable *)qword_1ECD7DE98, v10[1], v10);
    if (!qword_1ECD7DF10)
      _backgroundTaskExpirationWarningTimerSchedule_Locked(35);
    os_unfair_lock_unlock(&stru_1ECD7DE4C);
    v16 = qword_1ECD7DF58;
    if (!qword_1ECD7DF58)
    {
      v16 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v16, (unint64_t *)&qword_1ECD7DF58);
    }
    v17 = *(id *)(v16 + 8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v10, "description");
      v18 = (NSUInteger (__cdecl *)(NSMapTable *, const void *))objc_claimAutoreleasedReturnValue();
      LODWORD(keyCallBacks.hash) = 138477827;
      *(NSUInteger (__cdecl **)(NSMapTable *, const void *))((char *)&keyCallBacks.hash + 4) = v18;
      _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_DEFAULT, "Created background task %{private}@.", (uint8_t *)&keyCallBacks, 0xCu);

    }
    if ((dyld_program_sdk_at_least() & 1) == 0 && !v33[5])
    {
      v19 = qword_1ECD7DF60;
      if (!qword_1ECD7DF60)
      {
        v19 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v19, (unint64_t *)&qword_1ECD7DF60);
      }
      v20 = *(NSObject **)(v19 + 8);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v21 = (NSUInteger (__cdecl *)(NSMapTable *, const void *))v10[1];
        LODWORD(keyCallBacks.hash) = 134217984;
        *(NSUInteger (__cdecl **)(NSMapTable *, const void *))((char *)&keyCallBacks.hash + 4) = v21;
        _os_log_impl(&dword_185066000, v20, OS_LOG_TYPE_DEFAULT, "Enqueing error for background assertion aquire failure: task ID = %lu", (uint8_t *)&keyCallBacks, 0xCu);
      }
      dispatch_get_global_queue(9, 0);
      v22 = objc_claimAutoreleasedReturnValue();
      v26[0] = v8;
      v26[1] = 3221225472;
      v26[2] = ___doAddBackgroundTask_block_invoke_92;
      v26[3] = &unk_1E16B1B28;
      v10 = v10;
      v27 = v10;
      dispatch_async(v22, v26);

    }
  }
  else
  {
    v10 = 0;
  }
  v23 = v30;
  v24 = v10;

  _Block_object_dispose(&v32, 8);
  return v24;
}

void sub_18519344C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIViewDescriptionAppendFrame(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  objc_msgSend(a1, "frame");
  objc_msgSend(v7, "appendFormat:", CFSTR("frame = (%g %g; %g %g); "), v3, v4, v5, v6);

}

void _UIViewDescriptionAppendBaseClass(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a1;
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_opt_class();
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", v5);
  v6 = objc_claimAutoreleasedReturnValue();
  if ((void *)v6 == v4)
  {
LABEL_5:

  }
  else
  {
    v7 = (void *)v6;
    while (1)
    {
      v8 = objc_opt_class();

      if (v5 == (void *)v8)
        break;
      v5 = (void *)objc_msgSend(v5, "superclass");
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7 == v4)
        goto LABEL_5;
    }
  }
  if ((void *)objc_opt_class() != v5 && (void *)objc_opt_class() != v5)
  {
    NSStringFromClass((Class)v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "appendFormat:", CFSTR("baseClass = %@; "), v9);

  }
}

void _UIViewDescriptionAppendTextIfApplicable(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  v3 = a2;
  if (objc_msgSend(v8, "_shouldAppendTextInViewDescription") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v8, "performSelector:", sel_text);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = v4;
    else
      v5 = 0;
    v6 = v5;

    if (v6)
    {
      _UIViewTextRedactedIfNecessaryForDescription(v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v3, "appendFormat:", CFSTR("text = %@; "), v7);
    }
  }

}

void _UIViewDescriptionAppendTransform(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  CGAffineTransform transform;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CGAffineTransform v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CGAffineTransform v18;

  v3 = a1;
  v4 = a2;
  memset(&v18, 0, sizeof(v18));
  if (v3)
  {
    objc_msgSend(v3, "transform");
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    memset(&v12, 0, sizeof(v12));
    objc_msgSend(v3, "transform3D");
  }
  else
  {
    v16 = 0uLL;
    v17 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    v13 = 0uLL;
    memset(&v12, 0, sizeof(v12));
  }
  transform = v18;
  if (CGAffineTransformIsIdentity(&transform))
  {
    v8 = v14;
    v9 = v15;
    v10 = v16;
    v11 = v17;
    transform = v12;
    v7 = v13;
    if ((MEMORY[0x186DC5824](&transform) & 1) == 0)
      objc_msgSend(v4, "appendFormat:", CFSTR("transform3D = [%g, %g, %g, %g; %g, %g, %g, %g; %g, %g, %g, %g; %g, %g, %g, %g]; "),
        *(_OWORD *)&v12.a,
        *(_OWORD *)&v12.c,
        *(_OWORD *)&v12.tx,
        v13,
        v14,
        v15,
        v16,
        v17);
  }
  else
  {
    transform = v18;
    NSStringFromCGAffineTransform(&transform);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "appendFormat:", CFSTR("transform = %@; "), v5);

  }
}

void *_selectorForColorName(void *a1)
{
  id v1;
  NSMapTable *v2;
  void *v3;

  v1 = a1;
  +[UIColor _systemColorSelectorTable](UIColor, "_systemColorSelectorTable");
  v2 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
  v3 = NSMapGet(v2, v1);

  return v3;
}

id ProductSuffix()
{
  if (qword_1ECD82A98 != -1)
    dispatch_once(&qword_1ECD82A98, &__block_literal_global_53_4);
  return (id)qword_1ECD82A90;
}

void _UIVisualEffectSubviewApplyFilters(void *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id obj;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  objc_msgSend(a1, "layer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        v12 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v11, "filterName");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "stringWithFormat:", CFSTR("filters.%@."), v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v11, "valueAsRequested:", a3);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        _UIVisualEffectSubviewApplyFilterValues(v6, v15, v14);

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v8);
  }

}

void _UIVisualEffectSubviewApplyFilterValues(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v5 = a1;
  v6 = a3;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___UIVisualEffectSubviewApplyFilterValues_block_invoke;
  v9[3] = &unk_1E16B1DF0;
  v10 = v6;
  v11 = v5;
  v7 = v5;
  v8 = v6;
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v9);

}

void _backgroundTaskExpirationWarningTimerSchedule_Locked(uint64_t a1)
{
  const __CFAllocator *v2;
  CFAbsoluteTime Current;
  __CFRunLoop *Main;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  qword_1ECD7DF10 = (uint64_t)CFRunLoopTimerCreate(v2, Current + (double)a1, 0.0, 0, 0, (CFRunLoopTimerCallBack)_backgroundTaskExpirationWarningTimerFired, 0);
  Main = CFRunLoopGetMain();
  CFRunLoopAddTimer(Main, (CFRunLoopTimerRef)qword_1ECD7DF10, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
}

void _fireBackgroundTaskCountReachedZeroHandlers_Locked()
{
  id v0;
  void *v1;
  _QWORD block[4];
  id v3;

  if (qword_1ECD7DF10)
  {
    CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_1ECD7DF10);
    CFRelease((CFTypeRef)qword_1ECD7DF10);
    qword_1ECD7DF10 = 0;
  }
  v0 = (id)qword_1ECD7DEA0;
  v1 = (void *)qword_1ECD7DEA0;
  qword_1ECD7DEA0 = 0;

  if (v0)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___fireBackgroundTaskCountReachedZeroHandlers_Locked_block_invoke;
    block[3] = &unk_1E16B1B28;
    v3 = v0;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
}

void sub_185197BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

double UIPixelBoundaryOffset(int a1, double a2, double a3)
{
  double v4;
  void *v6;
  double v7;
  double v8;
  double v9;

  v4 = a3;
  if (a3 == 0.0)
  {
    +[UIScreen mainScreen](UIScreen, "mainScreen");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "scale");
    v4 = v7;

  }
  v8 = ceil(v4 * a2);
  v9 = floor(v4 * a2);
  if (a1)
    v9 = v8;
  return v9 / v4;
}

void sub_185199404(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18519AD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIRTreeContainerNode<unsigned long>::~_UIRTreeContainerNode(uint64_t a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  void **v7;

  *(_QWORD *)a1 = &off_1E168B618;
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v7 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100](&v7);
  v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.ForegroundColorAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.ForegroundColorAttribute;
}

void sub_18519E7C4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_18519E9C8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18519EAA4 + 4 * byte_1866706D0[v17 - 1]))();
}

ValueMetadata *type metadata accessor for UITraitUserInterfaceStyle()
{
  return &type metadata for UITraitUserInterfaceStyle;
}

uint64_t sub_18519EB9C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD75620);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD75628);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - v7;
  if (qword_1ECD75678 != -1)
    swift_once();
  v9 = __swift_project_value_buffer(v3, (uint64_t)qword_1ECD75660);
  sub_18519F0C4(v9, (uint64_t)v8, (uint64_t *)&unk_1ECD75628);
  sub_18519F0C4((uint64_t)v8, (uint64_t)v6, (uint64_t *)&unk_1ECD75628);
  v10 = sub_186506BF8();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    v12 = (uint64_t *)&unk_1ECD75628;
    v13 = (uint64_t)v6;
  }
  else
  {
    sub_186506BEC();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v10);
    v14 = sub_186506BD4();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v2, 1, v14) != 1)
    {
      sub_186506BC8();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v2, v14);
      goto LABEL_9;
    }
    v12 = &qword_1ECD75620;
    v13 = (uint64_t)v2;
  }
  sub_18519F088(v13, v12);
LABEL_9:
  sub_18519F088((uint64_t)v8, (uint64_t *)&unk_1ECD75628);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _sSo17UITraitCollectionC5UIKitE19typesettingLanguage10Foundation6LocaleV0E0VSgvg_0@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  os_unfair_lock_t *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _BYTE v22[32];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD75340);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ECD759C0 != -1)
    swift_once();
  if (qword_1ECD75A10 != -1)
    swift_once();
  v7 = (os_unfair_lock_t *)off_1ECD75A08;
  os_unfair_lock_lock(*((os_unfair_lock_t *)off_1ECD75A08 + 2));
  v8 = sub_18519F400((uint64_t)&type metadata for UITraitTypesettingLanguage, (uint64_t (*)(uint64_t))sub_185571688);
  os_unfair_lock_unlock(v7[2]);
  v9 = objc_msgSend(v2, sel__objectForTraitToken_, v8);
  swift_unknownObjectRelease();
  if (v9)
  {
    sub_186507B1C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v21, 0, 32);
  }
  sub_1850F26F8((uint64_t)v21, (uint64_t)v22, &qword_1ECD75B20);
  sub_18519F0C4((uint64_t)v22, (uint64_t)v21, &qword_1ECD75B20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD75B20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD75348);
  if (swift_dynamicCast())
  {
    v10 = v19;
    v11 = v20;
    if (v20)
    {
      swift_bridgeObjectRetain();
      sub_186506BE0();
      v12 = sub_186506BF8();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 0, 1, v12);
      v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD75628);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 0, 1, v13);
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD75628);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
    }
    sub_18519F3EC(v10, v11);
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD75628);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v6, 1, v15) != 1)
    {
      sub_18519F088((uint64_t)v22, &qword_1ECD75B20);
      return sub_1850F26F8((uint64_t)v6, a1, (uint64_t *)&unk_1ECD75628);
    }
    sub_18519F088((uint64_t)v6, &qword_1ECD75340);
  }
  if (qword_1ECD75678 != -1)
    swift_once();
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD75628);
  v17 = __swift_project_value_buffer(v16, (uint64_t)qword_1ECD75660);
  sub_18519F0C4(v17, a1, (uint64_t *)&unk_1ECD75628);
  return sub_18519F088((uint64_t)v22, &qword_1ECD75B20);
}

uint64_t sub_18519F088(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_18519F0C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t UIMutableTraits.preferredContentSizeCategory.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 296);
  v5 = sub_1852478E0((unint64_t *)&unk_1ECD75730, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_186667890);
  v4(&v7, &type metadata for UITraitPreferredContentSizeCategory, &type metadata for UITraitPreferredContentSizeCategory, &protocol witness table for UITraitPreferredContentSizeCategory, v5, a1, a2);
  return v7;
}

uint64_t sub_18519F184@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[2];
  _BYTE v26[32];

  v24 = a5;
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_186507AA4();
  v22 = *(_QWORD *)(v10 - 8);
  v23 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v21 - v12;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v21 - v15;
  v17 = objc_msgSend(a1, sel__objectForTraitToken_, sub_185249B74(a2, a3, a4, (uint64_t)&unk_1E16A2528, (uint64_t (*)(uint64_t))sub_18559C50C));
  swift_unknownObjectRelease();
  if (v17)
  {
    sub_186507B1C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v25, 0, sizeof(v25));
  }
  sub_1850F26F8((uint64_t)v25, (uint64_t)v26, &qword_1ECD75B20);
  sub_18519F0C4((uint64_t)v26, (uint64_t)v25, &qword_1ECD75B20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD75B20);
  v18 = swift_dynamicCast();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v18)
  {
    v19(v13, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, AssociatedTypeWitness);
    sub_18524A124((uint64_t)v16, a2, a3, v24);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  }
  else
  {
    v19(v13, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v23);
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  }
  return sub_18519F088((uint64_t)v26, &qword_1ECD75B20);
}

uint64_t sub_18519F3D8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void **v4;

  return sub_18519F184(*v4, a1, a2, a3, a4);
}

uint64_t sub_18519F3EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

id sub_18519F400(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  _QWORD *v4;
  unint64_t v5;
  char v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  char v17;
  void *v19;

  if (qword_1ECD759F0 != -1)
    swift_once();
  swift_beginAccess();
  v4 = off_1ECD759E8;
  if (*((_QWORD *)off_1ECD759E8 + 2) && (v5 = sub_18524A030(a1), (v6 & 1) != 0))
  {
    v7 = *(id *)(v4[7] + 8 * v5);
    swift_endAccess();
    if (a2)
    {
      v8 = (void *)objc_opt_self();
      sub_18518D708((uint64_t)a2);
      swift_unknownObjectRetain();
      if ((objc_msgSend(v8, sel__isPlaceholderTraitToken_, v7) & 1) != 0)
      {
        v9 = swift_unknownObjectRetain();
        v10 = a2(v9);
        sub_18518D718((uint64_t)a2);
        swift_unknownObjectRelease_n();
        return (id)v10;
      }
      else
      {
        sub_18518D718((uint64_t)a2);
      }
    }
    else
    {
      swift_unknownObjectRetain();
    }
  }
  else
  {
    swift_endAccess();
    if (a2)
    {
      swift_retain();
      v7 = (id)a2(0);
      sub_18518D718((uint64_t)a2);
    }
    else
    {
      if (qword_1ECD75698 != -1)
        swift_once();
      v11 = qword_1ECD75650;
      swift_bridgeObjectRetain();
      if (v11 != -1)
        swift_once();
      v12 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      v13 = (void *)sub_1865074D4();
      swift_bridgeObjectRelease();
      v14 = (void *)sub_1865074D4();
      swift_bridgeObjectRelease();
      v7 = objc_msgSend(v12, sel__existingTraitTokenReservingPlaceholderIfNecessaryWithName_identifier_, v13, v14);

    }
    swift_beginAccess();
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = off_1ECD759E8;
    off_1ECD759E8 = (_UNKNOWN *)0x8000000000000000;
    swift_getObjectType();
    sub_18524998C((uint64_t)v7, a1, isUniquelyReferenced_nonNull_native, &v19);
    off_1ECD759E8 = v19;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v16 = qword_1ECD75A00;
    swift_unknownObjectRetain();
    if (v16 != -1)
      swift_once();
    swift_beginAccess();
    swift_unknownObjectRetain();
    v17 = swift_isUniquelyReferenced_nonNull_native();
    v19 = off_1ECD759F8;
    off_1ECD759F8 = (_UNKNOWN *)0x8000000000000000;
    sub_185248DDC((uint64_t)&type metadata for UITraitTypesettingLanguage, (uint64_t)&protocol witness table for UITraitTypesettingLanguage, v7, v17);
    off_1ECD759F8 = v19;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  return v7;
}

void sub_1851A11F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1851A16E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL UISearchBarUsesModernAppearance()
{
  if (qword_1ECD7B488 != -1)
    dispatch_once(&qword_1ECD7B488, &__block_literal_global_68);
  return _MergedGlobals_19_0 && byte_1ECD7B479 == 0;
}

double _UITabBarMetricsForStyleAndScene(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = a2;
  if (a1)
  {
    if (a1 == 2)
    {
      v4 = 20.0;
      dyld_program_sdk_at_least();
    }
    else if (a1 == 1)
    {
      v4 = 30.0;
      if (dyld_program_sdk_at_least())
      {
        objc_msgSend(v3, "traitCollection");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = objc_msgSend(v5, "userInterfaceIdiom");

        objc_msgSend(v3, "screen");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "scale");

        if (v6 == 1)
          v4 = 30.0;
        else
          v4 = 29.0;
      }
      if (dyld_program_sdk_at_least())
      {
        objc_msgSend(v3, "screen");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "scale");

      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UITabBarItemLayoutMetrics _UITabBarMetricsForStyleAndScene(_UITabBarItemTitleStyle, UIWindowScene *__strong _Nonnull)");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("_UITabBarItemData.m"), 801, CFSTR("Unsupported style %li"), a1);

      v4 = 0.0;
    }
  }
  else
  {
    v4 = 45.0;
  }

  return v4;
}

id _UIBadgeGetTabBarVisualStyle(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  if (a1 || !a2)
  {
    if (a1 == 1 && a2)
    {
      v2 = &qword_1ECD79D10;
      v3 = (void *)qword_1ECD79D10;
      if (!qword_1ECD79D10)
        goto LABEL_17;
    }
    else if (a1 == 2 || a1 == 8)
    {
      v2 = &qword_1ECD79CF8;
      v3 = (void *)qword_1ECD79CF8;
      if (!qword_1ECD79CF8)
        goto LABEL_17;
    }
    else if (a1 == 3)
    {
      v2 = &_MergedGlobals_1_1;
      v3 = (void *)_MergedGlobals_1_1;
      if (!_MergedGlobals_1_1)
        goto LABEL_17;
    }
    else
    {
      v2 = &qword_1ECD79D00;
      v3 = (void *)qword_1ECD79D00;
      if (!qword_1ECD79D00)
      {
LABEL_17:
        v4 = objc_opt_new();
        v5 = (void *)*v2;
        *v2 = v4;

        v3 = (void *)*v2;
      }
    }
  }
  else
  {
    v2 = &qword_1ECD79D08;
    v3 = (void *)qword_1ECD79D08;
    if (!qword_1ECD79D08)
      goto LABEL_17;
  }
  return v3;
}

uint64_t dispatch thunk of UIContentView.configuration.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t _UIRTreeContainerNode<_UICollectionViewRTreeElement>::~_UIRTreeContainerNode(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void **v6;

  *(_QWORD *)a1 = &off_1E168B5F8;
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v6 = (void **)(a1 + 64);
  std::vector<_UICollectionViewRTreeElement>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100](&v6);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

id _UITableViewSubviewToMoveForView(void *a1)
{
  id v1;
  id v2;
  id v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (_IsKindOfUITableViewCell(v1))
  {
    v3 = v1;
    objc_msgSend(v3, "_containerView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    v2 = v3;
    if (v4)
    {
      v2 = v4;

    }
  }

  return v2;
}

void sub_1851AA1FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Unwind_Resume(a1);
}

void sub_1851AA5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _IsKindOfUITableViewHeaderFooterView(void *a1)
{
  uint64_t v1;
  id v2;
  char isKindOfClass;

  v1 = qword_1EDDB0A90;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1EDDB0A90, &__block_literal_global_2887);
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_1851AD2C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void _UISceneSettingsDiffActionPerformChangesWithTransitionContextAndCompletion(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = a1;
  objc_msgSend(v7, "animationFence");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIScene _synchronizeDrawingWithFence:](UIScene, "_synchronizeDrawingWithFence:", v8);

  v9 = (void *)MEMORY[0x1E0D016B0];
  objc_msgSend(v7, "animationSettings");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___UISceneSettingsDiffActionPerformChangesWithTransitionContextAndCompletion_block_invoke;
  v12[3] = &unk_1E16B1BA0;
  v13 = v5;
  v11 = v5;
  objc_msgSend(v9, "tryAnimatingWithSettings:actions:completion:", v10, v12, v6);

}

id _UISceneLifecycleSettingsUpdateBlockWithCanvasAndTransitionContext(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (objc_msgSend(v7, "_hasLifecycle"))
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___UISceneLifecycleSettingsUpdateBlockWithCanvasAndTransitionContext_block_invoke;
    v13[3] = &unk_1E16B51E8;
    v14 = v7;
    v15 = v8;
    v16 = v9;
    v17 = v10;
    v11 = _Block_copy(v13);

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_1851AECAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id __windowsWithContexts()
{
  void *v0;
  void *v1;
  void *v2;

  +[UIWindow allWindowsIncludingInternalWindows:onlyVisibleWindows:](UIWindow, "allWindowsIncludingInternalWindows:onlyVisibleWindows:", 1, 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "indexesOfObjectsPassingTest:", &__block_literal_global_1386);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectsAtIndexes:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

BOOL UIInputViewSetAreConstraintsEqualEnough(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = objc_msgSend(a1, "firstItem");
  if (v4 != objc_msgSend(a2, "firstItem"))
    return 0;
  v5 = objc_msgSend(a1, "firstAttribute");
  if (v5 != objc_msgSend(a2, "firstAttribute"))
    return 0;
  v6 = objc_msgSend(a1, "relation");
  if (v6 != objc_msgSend(a2, "relation"))
    return 0;
  v7 = objc_msgSend(a1, "secondItem");
  if (v7 != objc_msgSend(a2, "secondItem"))
    return 0;
  v9 = objc_msgSend(a1, "secondAttribute");
  return v9 == objc_msgSend(a2, "secondAttribute");
}

void sub_1851B22F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1851B2914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UILACleanUpConstraintsMapTable(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    objc_msgSend(v1, "objectEnumerator", 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v8;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v8 != v5)
            objc_enumerationMutation(v2);
          objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "setActive:", 0);
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      }
      while (v4);
    }

    objc_msgSend(v1, "removeAllObjects");
  }

}

void sub_1851B3DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a63, 8);
  _Unwind_Resume(a1);
}

void sub_1851B5DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _viewControllerIfStatusBarPartStyleProviding(void *a1)
{
  id v1;
  char isKindOfClass;
  unsigned __int8 v3;
  void *v4;
  id v5;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }
  if (qword_1EDDB0F98 != -1)
    dispatch_once(&qword_1EDDB0F98, &__block_literal_global_149_0);
  if (byte_1EDDB0F75)
    v3 = objc_opt_respondsToSelector();
  else
    v3 = 0;
  if (((isKindOfClass | v3) & 1) != 0)
    v4 = v1;
  else
    v4 = 0;
  v5 = v4;

  return v5;
}

void sub_1851B7528(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t _resolvePreferredInternalStatusBarStyleFromClientWithTraitEnvironment(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v3 = a2;
  if (a1 != 4)
  {
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(v3, "traitCollection");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "userInterfaceStyle");

      if (!a1 && v5)
      {
        if (v5 == 2)
          v6 = 1;
        else
          v6 = 2;
        objc_msgSend(v3, "traitCollection");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "userInterfaceIdiom");

        if (v8 == 3)
          a1 = v6;
        else
          a1 = v6 << 6;
      }
    }
    else if (!a1)
    {
      objc_msgSend(v3, "traitCollection");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "userInterfaceIdiom");

      if (v10 == 3)
        a1 = 2;
      else
        a1 = 128;
    }
  }

  return a1;
}

BOOL static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t UICollectionLayoutListConfiguration.init(appearance:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t result;

  v3 = objc_msgSend(objc_allocWithZone((Class)UICollectionLayoutListConfiguration), sel_initWithAppearance_, *a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A58);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a2 = result;
  return result;
}

id _UIGestureEnvironmentSubgraphForGestureRecognizer(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_opt_new();
  -[UIGestureEnvironment _nodeForGestureRecognizer:]((id *)a1, (uint64_t)a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = *(void **)(a1 + 88);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = ___UIGestureEnvironmentSubgraphForGestureRecognizer_block_invoke;
    v12[3] = &unk_1E16C9490;
    v13 = v4;
    objc_msgSend(v6, "traverseGraphDepthFirstFromNode:directed:usingBlock:", v5, 0, v12);

  }
  else
  {
    v7 = _UIGestureEnvironmentSubgraphForGestureRecognizer___s_category[0];
    if (!_UIGestureEnvironmentSubgraphForGestureRecognizer___s_category[0])
    {
      v7 = __UILogCategoryGetNode("GestureEnvironment", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, _UIGestureEnvironmentSubgraphForGestureRecognizer___s_category);
    }
    if ((*(_BYTE *)v7 & 1) != 0)
    {
      v9 = *(NSObject **)(v7 + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = v9;
        objc_msgSend(a2, "_briefDescription");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136315394;
        v15 = "NSMutableSet<UIGestureRecognizer *> *_UIGestureEnvironmentSubgraphForGestureRecognizer(UIGestureEnvironmen"
              "t *__unsafe_unretained, UIGestureRecognizer *__unsafe_unretained)";
        v16 = 2112;
        v17 = v11;
        _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "%s - Unable to find Node %@", buf, 0x16u);

      }
    }
  }

  return v4;
}

void sub_1851B9E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

id NormaliseInputView(void *a1, int a2)
{
  id v3;
  char v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1;
  v4 = objc_opt_respondsToSelector();
  v5 = v3;
  v6 = v5;
  v7 = v5;
  if ((v4 & 1) != 0)
  {
    objc_msgSend(v5, "placeheldView");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (a2)
      v10 = 0;
    else
      v10 = v6;
    if (v8)
      v10 = (void *)v8;
    v7 = v10;

  }
  return v7;
}

void sub_1851BB14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id GetInputViewController(uint64_t a1)
{
  void *v1;
  id v2;

  +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

id _UIPeripheralHostLogger()
{
  if (qword_1ECD7F048 != -1)
    dispatch_once(&qword_1ECD7F048, &__block_literal_global_491_0);
  return (id)qword_1ECD7F040;
}

void _UIHyperInteractorDirtyTranslatedUnconstrainedPoint(void *a1)
{
  _DWORD *v1;
  int v2;
  _DWORD *v3;

  v1 = a1;
  if ((v1[42] & 8) != 0)
  {
    v1[42] &= v1[42] & 0x20 ^ 0xFFFFFFF7;
    v3 = v1;
    _UIHyperInteractorDirtyClosestPoint(v1);
    v2 = v3[42];
    if ((v2 & 0x80) != 0)
      v3[42] = v2 & 0xFFFFFF7F;
    _UIHyperInteractorDirtyUnconstrainedVector(v3);
    _UIHyperInteractorDirtyExtentVector(v3);
    v1 = v3;
  }

}

void _UIHyperInteractorDirtyExtentVector(void *a1)
{
  _DWORD *v1;
  int v2;
  int v3;
  _DWORD *v4;
  _DWORD *v5;

  v1 = a1;
  v2 = v1[42];
  if ((v2 & 0x200) != 0)
  {
    v1[42] = v2 & 0xFFFFFDFF;
    v5 = v1;
    _UIHyperInteractorDirtyUnconstrainedExtentVector(v1);
    v1 = v5;
    v3 = v5[42];
    if ((v3 & 0x400) != 0)
    {
      v5[42] = v3 & 0xFFFFFBFF;
      v4 = v5;
      _UIHyperInteractorDirtyUnconstrainedExtentVector(v4);
      _UIHyperInteractorDirtyConstrainedFraction(v4);

      v1 = v5;
    }
  }

}

void _UIHyperInteractorDirtyUnconstrainedExtentVector(void *a1)
{
  _DWORD *v1;
  int v2;
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  _DWORD *v7;

  v1 = a1;
  v2 = v1[42];
  if ((v2 & 0x800) != 0)
  {
    v1[42] = v2 & 0xFFFFF7FF;
    v7 = v1;
    v3 = v1;
    v4 = v7[42];
    if ((v4 & 0x1000) != 0)
    {
      v7[42] = v4 & 0xFFFFEFFF;
      _UIHyperInteractorDirtyConstrainedFraction(v3);
      v5 = v7[42];
      if ((v5 & 0x8000) != 0)
        v7[42] = v5 & 0xFFFF7FFF;
    }

    v1 = v7;
    v6 = v7[42];
    if ((v6 & 0x4000) != 0)
    {
      v7[42] = v6 & 0xFFFFBFFF;
      _UIHyperInteractorDirtyPresentationPoint(v3);
      v1 = v7;
      v6 = v7[42];
    }
    if ((v6 & 0x8000) != 0)
      v1[42] = v6 & 0xFFFF7FFF;
  }

}

void _UIHyperInteractorDirtyClosestPoint(void *a1)
{
  _DWORD *v1;
  int v2;
  _DWORD *v3;

  v1 = a1;
  if ((v1[42] & 0x40) != 0)
  {
    v1[42] &= v1[42] & 0x80 ^ 0xFFFFFFBF;
    v3 = v1;
    _UIHyperInteractorDirtyUnconstrainedVector(v1);
    _UIHyperInteractorDirtyExtentVector(v3);
    v1 = v3;
    v2 = v3[42];
    if ((v2 & 0x4000) != 0)
    {
      v3[42] = v2 & 0xFFFFBFFF;
      _UIHyperInteractorDirtyPresentationPoint(v3);
      v1 = v3;
    }
  }

}

void _UIHyperInteractorDirtyUnconstrainedVector(void *a1)
{
  _DWORD *v1;
  int v2;
  int v3;
  _DWORD *v4;

  v1 = a1;
  v2 = v1[42];
  if ((v2 & 0x100) != 0)
  {
    v1[42] = v2 & 0xFFFFFEFF;
    v4 = v1;
    _UIHyperInteractorDirtyUnconstrainedExtentVector(v1);
    v1 = v4;
    v3 = v4[42];
    if ((v3 & 0x8000) != 0)
      v4[42] = v3 & 0xFFFF7FFF;
  }

}

void _UIHyperInteractorDirtyPresentationPoint(void *a1)
{
  id v1;
  void *v2;
  int v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  v2 = v1;
  v3 = *((_DWORD *)v1 + 42);
  if ((v3 & 0x10000) != 0)
  {
    *((_DWORD *)v1 + 42) = v3 & 0xFFFEFFFF;
    v4 = *((_QWORD *)v1 + 33);
    if (v4)
    {
      v5 = v2;
      (*(void (**)(void))(v4 + 16))();
      v2 = v5;
    }
  }

}

void _UIHyperInteractorDirtyConstrainedFraction(void *a1)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  _DWORD *v4;

  v1 = a1;
  v2 = v1[42];
  if ((v2 & 0x2000) != 0)
  {
    v3 = v2 & 0xFFFFDFFF;
    v1[42] = v2 & 0xFFFFDFFF;
    if ((v2 & 0x4000) != 0)
    {
      v1[42] = v2 & 0xFFFF9FFF;
      v4 = v1;
      _UIHyperInteractorDirtyPresentationPoint(v1);
      v1 = v4;
      v3 = v4[42];
    }
    if ((v3 & 0x8000) != 0)
      v1[42] = v3 & 0xFFFF7FFF;
  }

}

void sub_1851BE484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, id *a12)
{
  id *v12;
  id *v13;
  id *v14;
  id *v15;
  id *v16;
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v12);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(v13);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)(v19 - 112));
  _Unwind_Resume(a1);
}

void sub_1851BE508()
{
  JUMPOUT(0x1851BE4D0);
}

void sub_1851BE510()
{
  JUMPOUT(0x1851BE4D8);
}

void sub_1851BE518()
{
  JUMPOUT(0x1851BE4E0);
}

void sub_1851BE520()
{
  JUMPOUT(0x1851BE4E8);
}

void sub_1851BE528()
{
  JUMPOUT(0x1851BE4F0);
}

void sub_1851BEA08(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

double UIRectCenteredXInRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return round(a5 + (a7 - a3) * 0.5);
}

void sub_1851C6548(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void UICollectionViewListCellCommonInit(void *a1)
{
  id v1;
  id v2;
  _QWORD v3[4];
  id v4;

  v1 = a1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __UICollectionViewListCellCommonInit_block_invoke;
  v3[3] = &unk_1E16B1B28;
  v4 = v1;
  v2 = v1;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v3);

}

uint64_t type metadata accessor for _UICustomContentView()
{
  return objc_opt_self();
}

void sub_1851C7864(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, id);
  id v6;
  id v7;

  v5 = *(void (**)(id, id))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, v6);
  swift_release();

}

ValueMetadata *type metadata accessor for UIShape()
{
  return &type metadata for UIShape;
}

uint64_t getEnumTagSinglePayload for UIControlPointerHoverStyleDriver(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 113))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

id UIListContentConfiguration.imageToTextPadding.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_imageToTextPadding);
}

uint64_t UIListContentConfiguration.imageProperties.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_18532ABF0((SEL *)&selRef_imageProperties, &qword_1EDD82CD8, &qword_1EDD82CD0, a1);
}

BOOL static UIListContentConfiguration.TextProperties.TextAlignment.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t _rotatedEdgesGivenOrientationInDegrees(unint64_t result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (!a2)
      return result;
    if (a2 != 180)
      return (result >> 3) & 1 | (2 * (result & 7));
    return (result >> 2) & 3 | (4 * (result & 3));
  }
  if (a2 == -180)
    return (result >> 2) & 3 | (4 * (result & 3));
  if (a2 == -90)
    return (8 * (result & 1)) | (result >> 1) & 7;
  return (result >> 3) & 1 | (2 * (result & 7));
}

_UISEAnyGestureFeature *___commonInit_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void (**v10)(_QWORD);
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void (**v17)(void *, uint64_t);
  id v18;
  void (**v19)(void);
  id v20;
  void (**v21)(void);
  void *v22;
  void (**v23)(void);
  void (**v24)(void);
  _UISEAllGestureFeature *v25;
  _UISEAnyGestureFeature *v26;
  unsigned int v29;
  void (**v30)(_QWORD);
  void (**v31)(void *, _QWORD);
  void (**v32)(void);
  void (**v33)(void);
  void (**v34)(void);
  void (**v35)(void);
  void (**v36)(void);
  _QWORD v37[4];
  id v38;
  _QWORD v39[4];
  id v40;
  _QWORD v41[5];
  id v42;
  uint64_t *v43;
  _QWORD v44[4];
  id v45;
  void *v46;
  _QWORD v47[4];
  id v48;
  void *v49;
  uint64_t *v50;
  _QWORD v51[5];
  id v52;
  uint64_t *v53;
  _QWORD v54[5];
  id v55;
  uint64_t *v56;
  _QWORD v57[5];
  id v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  void (*v64)(uint64_t);
  id v65;
  _QWORD v66[4];
  id v67;
  _QWORD v68[4];
  id v69;
  void *v70;
  _QWORD v71[4];
  id v72;
  _QWORD aBlock[4];
  id v74;
  void *v75;

  v29 = objc_msgSend(a2, "ignoreHIDEdgeFlags");
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___commonInit_block_invoke_2;
  aBlock[3] = &unk_1E16B2218;
  v5 = v3;
  v74 = v5;
  v75 = a2;
  v31 = (void (**)(void *, _QWORD))_Block_copy(aBlock);
  v71[0] = v4;
  v71[1] = 3221225472;
  v71[2] = ___commonInit_block_invoke_3;
  v71[3] = &unk_1E16B1B28;
  v6 = v5;
  v72 = v6;
  v30 = (void (**)(_QWORD))_Block_copy(v71);
  v68[0] = v4;
  v68[1] = 3221225472;
  v68[2] = ___commonInit_block_invoke_4;
  v68[3] = &unk_1E16B1B50;
  v7 = v6;
  v69 = v7;
  v70 = a2;
  v8 = _Block_copy(v68);
  v66[0] = v4;
  v66[1] = 3221225472;
  v66[2] = ___commonInit_block_invoke_5;
  v66[3] = &unk_1E16B1B28;
  v9 = v7;
  v67 = v9;
  v10 = (void (**)(_QWORD))_Block_copy(v66);
  v60 = 0;
  v61 = &v60;
  v62 = 0x3032000000;
  v63 = __Block_byref_object_copy__101;
  v64 = __Block_byref_object_dispose__101;
  v65 = 0;
  v57[0] = v4;
  v57[1] = 3221225472;
  v57[2] = ___commonInit_block_invoke_130;
  v57[3] = &unk_1E16B9698;
  v59 = &v60;
  v57[4] = a2;
  v11 = v9;
  v58 = v11;
  v36 = (void (**)(void))_Block_copy(v57);
  v54[0] = v4;
  v54[1] = 3221225472;
  v54[2] = ___commonInit_block_invoke_2_132;
  v54[3] = &unk_1E16B9698;
  v56 = &v60;
  v54[4] = a2;
  v12 = v11;
  v55 = v12;
  v32 = (void (**)(void))_Block_copy(v54);
  v51[0] = v4;
  v51[1] = 3221225472;
  v51[2] = ___commonInit_block_invoke_138;
  v51[3] = &unk_1E16B9698;
  v53 = &v60;
  v51[4] = a2;
  v13 = v12;
  v52 = v13;
  v34 = (void (**)(void))_Block_copy(v51);
  v47[0] = v4;
  v47[1] = 3221225472;
  v47[2] = ___commonInit_block_invoke_2_141;
  v47[3] = &unk_1E16BDBB0;
  v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v48 = v14;
  v49 = a2;
  v50 = &v60;
  v35 = (void (**)(void))_Block_copy(v47);
  v44[0] = v4;
  v44[1] = 3221225472;
  v44[2] = ___commonInit_block_invoke_3_143;
  v44[3] = &unk_1E16B1B50;
  v15 = v14;
  v45 = v15;
  v46 = a2;
  v33 = (void (**)(void))_Block_copy(v44);
  v41[0] = v4;
  v41[1] = 3221225472;
  v41[2] = ___commonInit_block_invoke_4_145;
  v41[3] = &unk_1E16C2608;
  v43 = &v60;
  v41[4] = a2;
  v16 = v15;
  v42 = v16;
  v17 = (void (**)(void *, uint64_t))_Block_copy(v41);
  v39[0] = v4;
  v39[1] = 3221225472;
  v39[2] = ___commonInit_block_invoke_5_147;
  v39[3] = &unk_1E16B1B28;
  v18 = v16;
  v40 = v18;
  v19 = (void (**)(void))_Block_copy(v39);
  v37[0] = v4;
  v37[1] = 3221225472;
  v37[2] = ___commonInit_block_invoke_6;
  v37[3] = &unk_1E16B1B28;
  v20 = v18;
  v38 = v20;
  v21 = (void (**)(void))_Block_copy(v37);
  v22 = v8;
  switch(*(_QWORD *)(a1 + 32))
  {
    case 1:
      v31[2](v31, v29);
      if ((v29 & 1) == 0)
        v30[2](v30);
      v10[2](v10);
      v36[2]();
      v35[2]();
      v17[2](v17, 1);
      goto LABEL_15;
    case 2:
      v31[2](v31, v29);
      if ((v29 & 1) == 0)
        v30[2](v30);
      (*((void (**)(void *))v8 + 2))(v8);
      v10[2](v10);
      v36[2]();
      v35[2]();
      v17[2](v17, 1);
      goto LABEL_15;
    case 3:
      v31[2](v31, v29);
      if ((v29 & 1) == 0)
        v30[2](v30);
      (*((void (**)(void *))v8 + 2))(v8);
      v10[2](v10);
      v36[2]();
      v35[2]();
      v17[2](v17, 0);
      goto LABEL_15;
    case 4:
      v31[2](v31, 0);
      v30[2](v30);
      v10[2](v10);
      v36[2]();
      v35[2]();
      v17[2](v17, 0);
      v23 = v21;
      goto LABEL_16;
    case 5:
      v31[2](v31, v29);
      v24 = v36;
      if ((v29 & 1) == 0)
      {
        v30[2](v30);
        v24 = v32;
      }
      v24[2]();
      v33[2]();
LABEL_15:
      v23 = v19;
      if ((v29 & 1) == 0)
LABEL_16:
        v23[2]();
      break;
    case 6:
      v31[2](v31, 1);
      (*((void (**)(void *))v8 + 2))(v8);
      v34[2]();
      v35[2]();
      v17[2](v17, 0);
      break;
    default:
      break;
  }
  v25 = -[_UISEAllGestureFeature initWithSubfeatures:]([_UISEAllGestureFeature alloc], "initWithSubfeatures:", v20);
  objc_msgSend(v13, "addObject:", v25);

  v26 = -[_UISEAnyGestureFeature initWithSubfeatures:]([_UISEAnyGestureFeature alloc], "initWithSubfeatures:", v13);
  objc_setAssociatedObject(v26, &__lastTouchedEdgesProviderKey, (id)v61[5], 0);

  _Block_object_dispose(&v60, 8);
  return v26;
}

void sub_1851C98FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;

  _Block_object_dispose(&a70, 8);
  _Unwind_Resume(a1);
}

void ___commonInit_block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v2;
  _UISEInitialEdgesFailGestureFeature *v3;

  v2 = *(void **)(a1 + 32);
  v3 = -[_UISEInitialEdgesFailGestureFeature initWithSettings:useEdgeRegionSize:]([_UISEInitialEdgesFailGestureFeature alloc], "initWithSettings:useEdgeRegionSize:", *(_QWORD *)(a1 + 40), a2);
  objc_msgSend(v2, "addObject:", v3);

}

uint64_t UIRectEdgeRegionForLocation(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7)
{
  uint64_t v14;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  if (a5 <= CGRectGetMinX(*(CGRect *)&a1) + a7)
  {
    v14 = 2;
  }
  else
  {
    v16.origin.x = a1;
    v16.origin.y = a2;
    v16.size.width = a3;
    v16.size.height = a4;
    if (a5 >= CGRectGetMaxX(v16) - a7)
      v14 = 8;
    else
      v14 = 0;
  }
  v17.origin.x = a1;
  v17.origin.y = a2;
  v17.size.width = a3;
  v17.size.height = a4;
  if (a6 <= CGRectGetMinY(v17) + a7)
    return v14 | 1;
  v18.origin.x = a1;
  v18.origin.y = a2;
  v18.size.width = a3;
  v18.size.height = a4;
  if (a6 >= CGRectGetMaxY(v18) - a7)
    return v14 | 4;
  return v14;
}

double _CentroidOfTouches(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t i;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (!v4)
    goto LABEL_13;
  v5 = v4;
  v6 = 0;
  v7 = *(_QWORD *)v20;
  v8 = 0.0;
  v9 = 0.0;
  do
  {
    for (i = 0; i != v5; ++i)
    {
      if (*(_QWORD *)v20 != v7)
        objc_enumerationMutation(v3);
      v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
      if (!a2 || objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * i), "phase") <= 2)
      {
        objc_msgSend(v11, "window");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "locationInView:", 0);
        objc_msgSend(v12, "_convertPointToSceneReferenceSpace:");
        v14 = v13;
        v16 = v15;

        v8 = v8 + v14;
        v9 = v9 + v16;
        ++v6;
      }
    }
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  }
  while (v5);
  if (v6 >= 1)
    v17 = v8 / (double)v6;
  else
LABEL_13:
    v17 = 0.0;

  return v17;
}

void ___commonInit_block_invoke_3(uint64_t a1)
{
  void *v1;
  _UISEEdgeTypeFailGestureFeature *v2;

  v1 = *(void **)(a1 + 32);
  v2 = objc_alloc_init(_UISEEdgeTypeFailGestureFeature);
  objc_msgSend(v1, "addObject:", v2);

}

void ___commonInit_block_invoke_4(uint64_t a1)
{
  void *v1;
  _UISEIdleTimerFailGestureFeature *v2;

  v1 = *(void **)(a1 + 32);
  v2 = -[_UISEIdleTimerFailGestureFeature initWithSettings:]([_UISEIdleTimerFailGestureFeature alloc], "initWithSettings:", *(_QWORD *)(a1 + 40));
  objc_msgSend(v1, "addObject:", v2);

}

void ___commonInit_block_invoke_5(uint64_t a1)
{
  void *v1;
  _UISETeleportFailGestureFeature *v2;

  v1 = *(void **)(a1 + 32);
  v2 = objc_alloc_init(_UISETeleportFailGestureFeature);
  objc_msgSend(v1, "addObject:", v2);

}

void sub_1851CD4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1851CD680(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id _finalAttributesFromSources(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = objc_msgSend(v8, "count");
  v12 = v11;
  if (v10 || v9 || v11)
  {
    v14 = (void *)objc_msgSend(v7, "mutableCopy");
    v13 = v14;
    if (v12 >= 1)
      objc_msgSend(v14, "addEntriesFromDictionary:", v8);
    if (v9)
    {
      v15 = *(_QWORD *)off_1E1678D98;
      objc_msgSend(v13, "objectForKeyedSubscript:", *(_QWORD *)off_1E1678D98);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v16)
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v9, v15);
    }
    if (v10)
    {
      v17 = *(_QWORD *)off_1E1678D90;
      objc_msgSend(v13, "objectForKeyedSubscript:", *(_QWORD *)off_1E1678D90);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "_fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:", v10);
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = (void *)v19;
      if (v19)
        v21 = (void *)v19;
      else
        v21 = v18;
      objc_msgSend(v13, "setObject:forKeyedSubscript:", v21, v17);

    }
  }
  else
  {
    v13 = v7;
  }

  return v13;
}

void sub_1851CEFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL BarButtonItemResolveSystemBackgroundImage(uint64_t a1, void **a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;

  if (a1 != 24)
  {
    v5 = 0;
    v4 = 0;
    goto LABEL_6;
  }
  +[UIButton _defaultBackgroundImageNameForType:andState:compact:](UIButton, "_defaultBackgroundImageNameForType:andState:compact:", 7, 0, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIButton _defaultBackgroundImageColorForType:andState:](UIButton, "_defaultBackgroundImageColorForType:andState:", 7, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  if (a2)
  {
    _BarButtonCachedSystemImageWithName(0, v4, 0, v5, 0, 0.0, 0.0, 0.0, 0.0);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *a2;
    *a2 = (void *)v6;

    v8 = *a2 != 0;
  }
  else
  {
    v8 = 1;
  }
LABEL_7:

  return v8;
}

BOOL BarButtonItemResolveSystemImage(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  double v7;
  uint64_t v8;
  _BOOL8 v9;
  __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  double v15;
  __CFString *v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  __CFString *v35;

  v6 = 0;
  v7 = 0.0;
  v8 = a1 - 4;
  LODWORD(v9) = 0;
  v10 = CFSTR("UIButtonBarRewind.png");
  v11 = CFSTR("backward.fill");
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0.0;
  switch(v8)
  {
    case 0:
      v16 = CFSTR("UIButtonBarNew.png");
      if ((_DWORD)a3)
        v16 = CFSTR("UIButtonBarNewLandscape.png");
      v10 = v16;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("plus");
      if (a2)
        goto LABEL_68;
      goto LABEL_66;
    case 1:
    case 2:
    case 17:
    case 18:
    case 19:
      goto LABEL_63;
    case 3:
      v17 = CFSTR("UIButtonBarCompose.png");
      if ((_DWORD)a3)
        v17 = CFSTR("UIButtonBarComposeLandscape.png");
      v10 = v17;
      v18 = _UIUseModernBars();
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      if (v18)
        v15 = 4.0;
      else
        v15 = 0.0;
      if (v18)
        v7 = -4.0;
      else
        v7 = 4.0;
      v11 = CFSTR("square.and.pencil");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 4:
      v19 = CFSTR("UIButtonBarReply.png");
      if ((_DWORD)a3)
        v19 = CFSTR("UIButtonBarReplyLandscape.png");
      v10 = v19;
      v6 = 0;
      v13 = 0;
      LODWORD(v9) = 1;
      v15 = 0.0;
      v11 = CFSTR("arrowshape.turn.up.backward");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 5:
      v20 = CFSTR("UIButtonBarAction.png");
      if ((_DWORD)a3)
        v20 = CFSTR("UIButtonBarActionSmall.png");
      v10 = v20;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("square.and.arrow.up");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 6:
      v21 = CFSTR("UIButtonBarOrganize.png");
      if ((_DWORD)a3)
        v21 = CFSTR("UIButtonBarOrganizeLandscape.png");
      v10 = v21;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("folder");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 7:
      v22 = CFSTR("UIButtonBarBookmarks.png");
      if ((_DWORD)a3)
        v22 = CFSTR("UIButtonBarBookmarksLandscape.png");
      v10 = v22;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("book");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 8:
      v23 = CFSTR("UIButtonBarSearch.png");
      if ((_DWORD)a3)
        v23 = CFSTR("UIButtonBarSearchLandscape.png");
      v10 = v23;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("magnifyingglass");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 9:
      v24 = CFSTR("UIButtonBarRefresh.png");
      if ((_DWORD)a3)
        v24 = CFSTR("UIButtonBarRefreshLandscape.png");
      v10 = v24;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("arrow.clockwise");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 10:
      v25 = CFSTR("UIButtonBarStop.png");
      if ((_DWORD)a3)
        v25 = CFSTR("UIButtonBarStopLandscape.png");
      v10 = v25;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("xmark");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 11:
      if (a4 == 5)
      {
        LODWORD(v9) = 0;
        v6 = 0;
        v13 = 0;
        v10 = CFSTR("UIButtonBarUCBCamera");
      }
      else
      {
        v35 = CFSTR("UIButtonBarCamera.png");
        if ((_DWORD)a3)
          v35 = CFSTR("UIButtonBarCameraSmall.png");
        v10 = v35;
        LODWORD(v9) = 0;
        v6 = 0;
        v13 = 0;
        v15 = 0.0;
      }
      v11 = CFSTR("camera");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 12:
      v26 = CFSTR("UIButtonBarTrash.png");
      if ((_DWORD)a3)
        v26 = CFSTR("UIButtonBarTrashLandscape.png");
      v10 = v26;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("trash");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 13:
      v27 = CFSTR("UIButtonBarPlay.png");
      if ((_DWORD)a3)
        v27 = CFSTR("UIButtonBarPlayLandscape.png");
      v10 = v27;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("play.fill");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 14:
      v28 = CFSTR("UIButtonBarPause.png");
      if ((_DWORD)a3)
        v28 = CFSTR("UIButtonBarPauseLandscape.png");
      v10 = v28;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("pause.fill");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 15:
      if (a2)
        goto LABEL_68;
      goto LABEL_66;
    case 16:
      v29 = CFSTR("UIButtonBarFastForward.png");
      if ((_DWORD)a3)
        v29 = CFSTR("UIButtonBarFastForwardLandscape.png");
      v10 = v29;
      LODWORD(v9) = 0;
      v6 = 0;
      v13 = 0;
      v15 = 0.0;
      v11 = CFSTR("forward.fill");
      if (!a2)
        goto LABEL_66;
      goto LABEL_68;
    case 20:
      +[UITraitCollection _fallbackTraitCollection]();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v30, "userInterfaceIdiom");

      +[UIButton _defaultImageNameForType:andState:](UIButton, "_defaultImageNameForType:andState:", 7, 0);
      v12 = objc_claimAutoreleasedReturnValue();
      +[UIButton _defaultSymbolConfigurationForType:andState:compact:idiom:](UIButton, "_defaultSymbolConfigurationForType:andState:compact:idiom:", 7, 0, a3, v31);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIButton _defaultImageColorForType:andState:idiom:](UIButton, "_defaultImageColorForType:andState:idiom:", 7, 0, v31);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_63;
    default:
      v12 = 0;
      v13 = 0;
      v14 = 0;
LABEL_63:
      v9 = 0;
      if (v12)
      {
        v10 = 0;
        v15 = 0.0;
        v6 = v14;
        v11 = (__CFString *)v12;
        if (a2)
        {
LABEL_68:
          _BarButtonCachedSystemImageWithName(v11, v10, v13, v6, v9, 0.0, v15, 0.0, v7);
          v32 = objc_claimAutoreleasedReturnValue();
          v33 = *a2;
          *a2 = (void *)v32;

          v9 = *a2 != 0;
        }
        else
        {
LABEL_66:
          v9 = 1;
        }
        v14 = v6;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }

      return v9;
  }
}

BOOL AutoresizingBreakabilityScoringFunction()
{
  objc_opt_class();
  return (objc_opt_isKindOfClass() & 1) == 0;
}

uint64_t ConstraintTypeBreakabilityScoringFunction(void *a1)
{
  unsigned int v1;

  v1 = objc_msgSend(a1, "_constraintType") + 1;
  if (v1 > 0xF)
    return 8;
  else
    return qword_186685260[v1];
}

uint64_t RelationBreakabilityScoringFunction(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = objc_msgSend(a1, "relation");
  v2 = 1;
  if (v1 != 1)
    v2 = 2;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t MultiplierBreakabilityScoringFunction(void *a1)
{
  double v1;

  objc_msgSend(a1, "multiplier");
  return (uint64_t)v1;
}

uint64_t ConstantBreakabilityScoringFunction(void *a1)
{
  double v1;

  objc_msgSend(a1, "constant");
  return (uint64_t)v1;
}

uint64_t CompareViewHierarchyPosition(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;

  v4 = 1;
  while (a1 != a2)
  {
    v5 = (void *)objc_msgSend(a1, "superview");
    v6 = objc_msgSend(a2, "superview");
    if (!v5)
      return -1;
    v7 = (void *)v6;
    if (!v6)
      return v4;
    v8 = objc_msgSend((id)objc_msgSend(v5, "_allSubviews"), "indexOfObjectIdenticalTo:", a1);
    v9 = objc_msgSend((id)objc_msgSend(v7, "_allSubviews"), "indexOfObjectIdenticalTo:", a2);
    v10 = v8 > v9;
    if (v8 < v9)
      return -1;
    a1 = v5;
    a2 = v7;
    if (v10)
      return v4;
  }
  return 0;
}

void sub_1851D5B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __UISceneEffectiveClientSettings(id *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(a1 + 22);

  if (!WeakRetained)
    return (id)objc_msgSend(a1[8], "clientSettings");
  __UISceneEffectiveClientSettings(WeakRetained);
  return (id)objc_msgSend(a1, "_fixupInheritedClientSettings:", (id)objc_claimAutoreleasedReturnValue());
}

double _UIConvertRectFromOrientationToOrientation(uint64_t a1, uint64_t a2, double result, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[10];

  if (a1 != a2)
  {
    v10[8] = v8;
    v10[9] = v9;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___UIConvertRectFromOrientationToOrientation_block_invoke;
    v10[3] = &__block_descriptor_64_e30__CGPoint_dd_24__0_CGPoint_dd_8l;
    *(double *)&v10[4] = a7;
    *(double *)&v10[5] = a8;
    v10[6] = a1;
    v10[7] = a2;
    return _UIRectTransformByTransformingCorners((uint64_t)v10, result, a4, a5, a6);
  }
  return result;
}

BOOL UIAccessibilityButtonShapesEnabled(void)
{
  return _AXSButtonShapesEnabled() != 0;
}

id UICollectionLayoutListConfiguration.headerMode.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v8;

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    v5 = *(void **)(v4 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v4 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_185167974();
    swift_dynamicCast();
    v5 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A58);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v8;
    swift_release();
    *v1 = v6;
  }
  return objc_msgSend(v5, sel_setHeaderMode_, v2);
}

id _UINavigationTitleAppearanceAddDefaultTitleAttributes(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a1;
  +[_UINavigationBarTitleFontProvider providerForIdiom:](_UINavigationBarTitleFontProvider, "providerForIdiom:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "defaultInlineTitleFont");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  _UINavigationTitleAppearanceCompleteAttributesWithFont(v3, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id _UINavigationTitleAppearanceAddDefaultLargeTitleAttributes(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a1;
  +[_UINavigationBarTitleFontProvider providerForIdiom:](_UINavigationBarTitleFontProvider, "providerForIdiom:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "defaultLargeTitleFont");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  _UINavigationTitleAppearanceCompleteAttributesWithFont(v3, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id _UINavigationTitleAppearanceAttributesWithFont(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v1 = *(_QWORD *)off_1E1678D98;
  v6[0] = *(_QWORD *)off_1E1678D90;
  v6[1] = v1;
  v7[0] = a1;
  v2 = a1;
  +[UIColor labelColor](UIColor, "labelColor");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _UINavigationTitleAppearanceCompleteAttributesWithFont(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = *(_QWORD *)off_1E1678D90;
  objc_msgSend(v3, "objectForKey:", *(_QWORD *)off_1E1678D90);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = *(_QWORD *)off_1E1678D98;
  objc_msgSend(v3, "objectForKey:", *(_QWORD *)off_1E1678D98);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
    v23 = v5;
    v24 = v7;
    v25 = v4;
    v10 = objc_alloc(MEMORY[0x1E0C99E08]);
    v11 = objc_msgSend(v3, "count");
    if (v11 <= 2)
      v12 = 2;
    else
      v12 = v11;
    v20 = (id)objc_msgSend(v10, "initWithCapacity:", v12);
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v13 = v3;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v27 != v16)
            objc_enumerationMutation(v13);
          v18 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
          objc_msgSend(v13, "objectForKeyedSubscript:", v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (v19)
            objc_msgSend(v20, "setObject:forKeyedSubscript:", v19, v18);

        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      }
      while (v15);
    }

    v4 = v25;
    if (v6)
    {
      if (v8)
        goto LABEL_23;
    }
    else
    {
      objc_msgSend(v20, "setObject:forKeyedSubscript:", v25, v23);
      if (v8)
        goto LABEL_23;
    }
    +[UIColor labelColor](UIColor, "labelColor");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v21, v24);

    goto LABEL_23;
  }
  v20 = v3;
LABEL_23:

  return v20;
}

void sub_1851DAAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

void sub_1851DABB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

void sub_1851DB0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

uint64_t _UITableUsesTintColorAsBackgroundColor(void *a1, void *a2, int a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _OWORD v13[8];
  uint64_t v14;
  _OWORD v15[3];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v7 = a1;
  v8 = a2;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  memset(v15, 0, sizeof(v15));
  _UITableConstantsForTraitCollection(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (a4 && a3)
  {
    if (v9)
    {
      objc_msgSend(v9, "defaultSidebarHeaderBackgroundPropertiesWithState:traitCollection:", v7, v8);
      goto LABEL_11;
    }
  }
  else if (a4)
  {
    if (v9)
    {
      objc_msgSend(v9, "defaultSidebarCellBackgroundPropertiesForStyle:state:traitCollection:", a4, v7, v8);
      goto LABEL_11;
    }
  }
  else if (v9)
  {
    objc_msgSend(v9, "defaultCellBackgroundPropertiesForTableViewStyle:state:traitCollection:", 0, v7, v8);
    goto LABEL_11;
  }
  v14 = 0;
  memset(v13, 0, sizeof(v13));
LABEL_11:
  __move_assignment_8_8_t0w8_s8_s16_s24_t32w41_s80_t88w48((uint64_t)v15, (uint64_t)v13);
  if (*(_QWORD *)&v15[0] == 1)
  {
    if ((unint64_t)v16 <= 0xC)
      v11 = (0x1081u >> v16) & 1;
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }

  __destructor_8_s8_s16_s24_s80((id *)v15);
  return v11;
}

void sub_1851DB228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

double _UICellContentViewDefaultDirectionalLayoutMargins(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  double v17;
  double v18;

  v9 = a1;
  v10 = objc_msgSend(a2, "layoutDirection");
  objc_msgSend(v9, "defaultCellContentLeadingPaddingForSidebar:", a4);
  v12 = v11;
  objc_msgSend(v9, "defaultCellContentTrailingPadding");
  if (v10 == 1)
    v14 = v13;
  else
    v14 = v12;
  if (v10 != 1)
    v12 = v13;
  +[UITraitCollection traitCollectionWithPreferredContentSizeCategory:](UITraitCollection, "traitCollectionWithPreferredContentSizeCategory:", CFSTR("UICTContentSizeCategoryL"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(off_1E167A828, "preferredFontForTextStyle:compatibleWithTraitCollection:", CFSTR("UICTFontTextStyleBody"), v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "defaultCellLayoutMarginsForTableStyle:cellStyle:textLabelFont:rawLayoutMargins:", a5, a3, v16, 8.0, v14, 8.0, v12);
  v18 = v17;

  return v18;
}

CGAffineTransform *_UIScaleTransformForAspectFitOfSizeInTargetSize@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  return _UIScaleTransformForAspectFitOrFillOfSizeInTargetSize((CGAffineTransform *)1, a1, a2, a3, a4, a5);
}

id _UIStatusBarManagerForNoWindow()
{
  unsigned int v0;
  double v1;
  void *v2;
  int v5;
  void *v6;
  void *v7;
  unint64_t v8;
  NSObject *v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v13;
  NSObject *v14;
  uint8_t v15[16];
  uint8_t v16[16];
  uint8_t buf[16];
  uint8_t v18[16];

  v0 = (byte_1ECD75ED4 != 0) & ~_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_SoftAssertWithNilSceneForStatusBar, (uint64_t)CFSTR("SoftAssertWithNilSceneForStatusBar"));
  v1 = *(double *)&__SplashBoardOverrideStatusBarHeight;
  v2 = (void *)UIApp;
  if (v0 == 1 && *(double *)&__SplashBoardOverrideStatusBarHeight == 1.79769313e308 && UIApp == 0)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v18 = 0;
        _os_log_fault_impl(&dword_185066000, v14, OS_LOG_TYPE_FAULT, "Looking for statusBarManager before the shared application has been created. This is much too early!", v18, 2u);
      }

    }
    else
    {
      v10 = _MergedGlobals_981;
      if (!_MergedGlobals_981)
      {
        v10 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v10, (unint64_t *)&_MergedGlobals_981);
      }
      v11 = *(NSObject **)(v10 + 8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "Looking for statusBarManager before the shared application has been created. This is much too early!", buf, 2u);
      }
    }
    v2 = (void *)UIApp;
    if (UIApp)
      goto LABEL_9;
LABEL_25:
    v7 = 0;
    return v7;
  }
  if (!UIApp)
    goto LABEL_25;
LABEL_9:
  v5 = objc_msgSend(v2, "_appAdoptsUISceneLifecycle", v1);
  if ((v0 & v5) == 1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v16 = 0;
        _os_log_fault_impl(&dword_185066000, v13, OS_LOG_TYPE_FAULT, "Unsupported code path for UIScene-based application.", v16, 2u);
      }

    }
    else
    {
      v8 = qword_1ECD7CF08;
      if (!qword_1ECD7CF08)
      {
        v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v8, (unint64_t *)&qword_1ECD7CF08);
      }
      v9 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "Unsupported code path for UIScene-based application.", v15, 2u);
      }
    }
  }
  if (v5)
    objc_msgSend((id)UIApp, "_findUISceneForLegacyInterfaceOrientation");
  else
    objc_msgSend((id)UIApp, "_defaultUIWindowHostingUISceneOrMainScreenPlaceholderIfExists");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "_statusBarManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1851DD844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

id _UIApplicationMainSceneForDisplayIdentity(void *a1)
{
  id v1;
  void *v2;
  char v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[4];
  id v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v1 = a1;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__161;
  v21 = __Block_byref_object_dispose__161;
  v22 = 0;
  if (!objc_msgSend((id)qword_1EDDC8098, "count"))
    goto LABEL_6;
  +[UIScreen _screenWithFBSDisplayIdentity:](UIScreen, "_screenWithFBSDisplayIdentity:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "_isMainScreen");

  v4 = v3 ^ 1;
  if (!v1)
    v4 = 0;
  if ((v4 & 1) != 0)
  {
LABEL_6:
    v7 = 0;
  }
  else
  {
    +[_UIApplicationConfigurationLoader sharedLoader](_UIApplicationConfigurationLoader, "sharedLoader");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "applicationInitializationContext");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "defaultSceneToken");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v8 = (void *)qword_1EDDC8098;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___UIApplicationMainSceneForDisplayIdentity_block_invoke;
  v13[3] = &unk_1E16DD570;
  v9 = v1;
  v14 = v9;
  v10 = v7;
  v15 = v10;
  v16 = &v17;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", v13);
  v11 = (id)v18[5];

  _Block_object_dispose(&v17, 8);
  return v11;
}

void sub_1851DE470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1851DE598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIScreenAllScreens()
{
  _QWORD *v0;
  id v1;
  _QWORD v3[2];
  void (*v4)(uint64_t);
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = __Block_byref_object_copy__114;
  v11 = __Block_byref_object_dispose__114;
  v12 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v4 = ___UIScreenAllScreens_block_invoke;
  v5 = &unk_1E16B14C0;
  v6 = &v7;
  v0 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)&__UIScreenMutableScreensArrayAccessLock);
  v4((uint64_t)v0);

  os_unfair_lock_unlock((os_unfair_lock_t)&__UIScreenMutableScreensArrayAccessLock);
  v1 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  return v1;
}

void sub_1851DEE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1851DF0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

double _UIWindowConvertRectFromSceneReferenceSpaceToSceneSpace(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  _QWORD v15[7];

  if (+[UIWindow _transformLayerRotationsAreEnabled](UIWindow, "_transformLayerRotationsAreEnabled"))
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = ___UIWindowConvertRectFromSceneReferenceSpaceToSceneSpace_block_invoke;
    v15[3] = &__block_descriptor_56_e30__CGPoint_dd_24__0_CGPoint_dd_8l;
    *(double *)&v15[4] = a6;
    *(double *)&v15[5] = a7;
    v15[6] = a1;
    return _UIRectTransformByTransformingCorners((uint64_t)v15, a2, a3, a4, a5);
  }
  return a2;
}

double _UIRectTransformByTransformingCorners(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v10[9];

  v6 = 0;
  v10[8] = *(double *)MEMORY[0x1E0C80C00];
  v10[0] = a2;
  v10[1] = a3;
  v10[2] = a2;
  v10[3] = a3 + a5;
  v10[4] = a2 + a4;
  v10[5] = a3 + a5;
  v10[6] = a2 + a4;
  v10[7] = a3;
  do
  {
    v7 = &v10[v6];
    *v7 = (*(double (**)(uint64_t, double, double))(a1 + 16))(a1, v10[v6], v10[v6 + 1]);
    *((_QWORD *)v7 + 1) = v8;
    v6 += 2;
  }
  while (v6 != 8);
  return UIRectMakeWithPoints(v10);
}

double UIRectMakeWithPoints(double *a1)
{
  double v1;
  double v2;

  if (a1[4] >= a1[6])
    v1 = a1[6];
  else
    v1 = a1[4];
  if (*a1 >= a1[2])
    v2 = a1[2];
  else
    v2 = *a1;
  if (v2 >= v1)
    return v1;
  else
    return v2;
}

uint64_t _UISceneLifecycleStateIsEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v9;

  v3 = a1;
  v4 = a2;
  if ((v3 == 0) != (v4 != 0)
    && (v5 = objc_msgSend(v3, "deactivationReasons"), v5 == objc_msgSend(v4, "deactivationReasons"))
    && (v6 = objc_msgSend(v3, "isForeground"), v6 == objc_msgSend(v4, "isForeground")))
  {
    v9 = objc_msgSend(v3, "underLock");
    v7 = v9 ^ objc_msgSend(v4, "underLock") ^ 1;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

double _UIWindowConvertPointFromOrientationToOrientation(uint64_t a1, uint64_t a2, double result, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  if (a1 != a2)
  {
    v6 = a5 - result;
    v7 = a6 - a4;
    v8 = a5 - a4;
    if (a1 == 4)
      v9 = a4;
    else
      v9 = result;
    if (a1 == 4)
      a4 = a6 - result;
    if (a1 != 3)
    {
      v8 = v9;
      result = a4;
    }
    if (a1 == 2)
      v10 = v6;
    else
      v10 = v8;
    if (a1 == 2)
      v11 = v7;
    else
      v11 = result;
    switch(a2)
    {
      case 2:
        return a5 - v10;
      case 3:
        return v11;
      case 4:
        return a6 - v11;
      default:
        return v10;
    }
  }
  return result;
}

uint64_t _UIViewSetLayerNameDescriptionEnabled()
{
  return (byte_1ECD76AD4 != 0) & ~_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewSetLayerNameDescription, (uint64_t)CFSTR("UIViewSetLayerNameDescription"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
}

void sub_1851E23F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1851E2828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

UILabel *_UINavigationBarLargeTitleViewNewLabel()
{
  UILabel *v0;

  v0 = objc_alloc_init(UILabel);
  -[UILabel setAdjustsFontForContentSizeCategory:](v0, "setAdjustsFontForContentSizeCategory:", _UIBarsUseDynamicType());
  -[UILabel setAllowsDefaultTighteningForTruncation:](v0, "setAllowsDefaultTighteningForTruncation:", 1);
  return v0;
}

double _minimumBackButtonWidth(id *a1)
{
  double result;
  void *v2;
  uint64_t v3;

  if (a1[73])
  {
    objc_msgSend(a1[73], "minimumBackButtonWidth");
  }
  else
  {
    objc_msgSend(a1, "traitCollection");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "userInterfaceIdiom");

    result = 44.0;
    if (v3 == 5)
      return 34.0;
  }
  return result;
}

uint64_t _UINavigationControllerUseAugmentedPopGesture()
{
  if (_UINavigationControllerUseAugmentedPopGesture_onceToken != -1)
    dispatch_once(&_UINavigationControllerUseAugmentedPopGesture_onceToken, &__block_literal_global_131);
  return __UINavigationControllerUseAugmentedPopGesture;
}

void sub_1851E4F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t UIContentUnavailableView.configuration.setter(uint64_t a1)
{
  void *v1;
  uint64_t v4;
  _BYTE v5[40];

  sub_1851E75D8(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A28);
  if ((swift_dynamicCast() & 1) != 0)
  {
    objc_msgSend(v1, sel_setConfiguration_, *(_QWORD *)(v4 + 16));
    swift_release();
  }
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

uint64_t sub_1851E5310(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  void *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27[15];
  uint64_t v28[5];
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned __int8 v38;

  v2 = v1;
  sub_185223778(a1, (uint64_t)v28);
  v3 = *(unsigned __int8 *)(v1 + 128);
  v38 = *(_BYTE *)(v1 + 128);
  v4 = (void *)MEMORY[0x186DCA138](&v37);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, sel_setPointerInteractionEnabled_, v3);

  }
  sub_1851E75D8(v1, (uint64_t)v27);
  __swift_assign_boxed_opaque_existential_1(v28, v27);
  v6 = (void *)MEMORY[0x186DCA138](&v37);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, sel_setPointerInteractionEnabled_, v38);

  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v27);
  v8 = *(void **)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v11 = *(_QWORD *)(v1 + 64);
  v12 = *(_QWORD *)(v1 + 72);
  v13 = *(_QWORD *)(v1 + 80);
  v14 = *(_QWORD *)(v1 + 88);
  v25 = v30;
  v26 = v29;
  v23 = v32;
  v24 = v31;
  v21 = v34;
  v22 = v33;
  v20 = v35;
  v15 = *(_BYTE *)(v1 + 96);
  v16 = v36;
  sub_1852287BC(*(id *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), *(_BYTE *)(v2 + 96));
  sub_185223490(v26, v25, v24, v23, v22, v21, v20, v16);
  v29 = v8;
  v30 = v9;
  v31 = v10;
  v32 = v11;
  v33 = v12;
  v34 = v13;
  v35 = v14;
  v36 = v15;
  v17 = (void *)MEMORY[0x186DCA138](&v37);
  v18 = objc_msgSend(v17, sel_pointerInteraction);

  objc_msgSend(v18, sel_invalidate);
  sub_18519F0C4(v2 + 104, (uint64_t)v27, &qword_1EDD81A30);
  sub_1852234A4((uint64_t)v27);
  sub_185223778((uint64_t)v28, (uint64_t)v27);
  sub_1851E564C((uint64_t)v27);
  return sub_1851E6A78((uint64_t)v28);
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t sub_1851E564C(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _UNKNOWN **v7;

  sub_18519F0C4(a1, (uint64_t)&v3, &qword_1EDD816C8);
  if (v4)
  {
    *((_QWORD *)&v6 + 1) = &type metadata for UIControlPointerHoverStyleDriver;
    v7 = &off_1E1686718;
    *(_QWORD *)&v5 = swift_allocObject();
    sub_1851E5700(&v3, v5 + 16);
  }
  else
  {
    sub_18519F088((uint64_t)&v3, &qword_1EDD816C8);
    v5 = 0u;
    v6 = 0u;
    v7 = 0;
  }
  sub_1851E5768((uint64_t)&v5, (uint64_t)&type metadata for UIControlPointerHoverStyleDriver);
  return sub_18519F088(a1, &qword_1EDD816C8);
}

uint64_t sub_1851E5700(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *a1;
  v5 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = *(__int128 *)((char *)a1 + 40);
  v7 = *(__int128 *)((char *)a1 + 56);
  v8 = *(__int128 *)((char *)a1 + 72);
  *(_OWORD *)(a2 + 81) = *(__int128 *)((char *)a1 + 81);
  *(_OWORD *)(a2 + 72) = v8;
  *(_OWORD *)(a2 + 56) = v7;
  *(_OWORD *)(a2 + 40) = v6;
  swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(a2 + 112) = *((_BYTE *)a1 + 112);
  return a2;
}

uint64_t sub_1851E5768(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14[2];
  uint64_t v15;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1851E59E0((__int128 *)a1, (uint64_t)v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    sub_1851E5880(v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_18519F088(a1, &qword_1EDD85670);
    v7 = sub_1851E599C(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_1856856C8();
        v11 = v13;
      }
      sub_1851E59E0((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      sub_185682044(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return sub_18519F088((uint64_t)v14, &qword_1EDD85670);
  }
}

uint64_t sub_1851E5880(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1851E599C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7] + 40 * v10;
        __swift_destroy_boxed_opaque_existential_0Tm(v17);
        return sub_1851E59E0(a1, v17);
      }
      return sub_1851E59D4(v10, a2, (uint64_t)a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1856856C8();
      goto LABEL_7;
    }
    sub_1851E59F8(v13, a3 & 1);
    v19 = sub_1851E599C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1851E59D4(v10, a2, (uint64_t)a1, v16);
    }
  }
  result = sub_186508074();
  __break(1u);
  return result;
}

unint64_t sub_1851E599C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1865080E0();
  return sub_18524A088(a1, v2);
}

uint64_t sub_1851E59D4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_185784CA4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1851E59E0);
}

uint64_t sub_1851E59E0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1851E59F8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD816D0);
  result = sub_186507E7C();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) != 0)
              {
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 >= 64)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
      if ((a2 & 1) != 0)
        sub_1851E59E0(v21, (uint64_t)v31);
      else
        sub_1851E75D8((uint64_t)v21, (uint64_t)v31);
      result = sub_1865080E0();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      result = sub_1851E59E0(v31, *(_QWORD *)(v7 + 56) + 40 * v14);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

void UIView.hoverStyle.setter(char *a1)
{
  void *v1;
  void *v2;
  char *v4;
  uint64_t ObjectType;
  char *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  char *v41;
  id v42[3];
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[7];
  char v46;
  id v47;
  char v48;
  _BYTE v49[16];
  _BYTE v50[24];

  v2 = v1;
  v4 = (char *)-[UIView _hoverStyleStorage](v2);
  if (!v4)
  {
    if (!a1)
      return;
    v7 = a1;
    objc_msgSend(v7, sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    type metadata accessor for UIHoverStyle();
    if ((swift_dynamicCast() & 1) != 0)
    {
      -[UIView _setHoverStyleStorage:](v2, v42[0]);
      swift_unknownObjectWeakInit();
      v11 = swift_unknownObjectWeakAssign();
      sub_1850F26F8(v11, (uint64_t)&v47, (uint64_t *)&unk_1EDD81AC0);
      v48 = 0;
      v12 = (char *)v42[0] + OBJC_IVAR___UIHoverStyle_host;
      swift_beginAccess();
      sub_18519F0C4((uint64_t)v12, (uint64_t)v50, &qword_1EDD81A30);
      swift_beginAccess();
      sub_1851E6940((uint64_t)&v47, (uint64_t)v12);
      swift_endAccess();
      sub_1852235D8((uint64_t)v50);
      sub_18519F088((uint64_t)&v47, &qword_1EDD81A30);
      sub_18519F088((uint64_t)v50, &qword_1EDD81A30);

    }
    goto LABEL_10;
  }
  v41 = v4;
  if (a1)
  {
    if (v4 == a1)
    {

      return;
    }
    ObjectType = swift_getObjectType();
    if (ObjectType == swift_getObjectType())
    {
      v14 = *(void **)&a1[OBJC_IVAR___UIHoverStyle__shape];
      v15 = *(_QWORD *)&a1[OBJC_IVAR___UIHoverStyle__shape + 8];
      v16 = *(_QWORD *)&a1[OBJC_IVAR___UIHoverStyle__shape + 16];
      v17 = *(_QWORD *)&a1[OBJC_IVAR___UIHoverStyle__shape + 24];
      v18 = *(_QWORD *)&a1[OBJC_IVAR___UIHoverStyle__shape + 32];
      v19 = *(_QWORD *)&a1[OBJC_IVAR___UIHoverStyle__shape + 40];
      v20 = *(_QWORD *)&a1[OBJC_IVAR___UIHoverStyle__shape + 48];
      v21 = &v41[OBJC_IVAR___UIHoverStyle__shape];
      v39 = *(void **)&v41[OBJC_IVAR___UIHoverStyle__shape];
      v38 = *(_QWORD *)&v41[OBJC_IVAR___UIHoverStyle__shape + 8];
      v37 = *(_QWORD *)&v41[OBJC_IVAR___UIHoverStyle__shape + 16];
      v36 = *(_QWORD *)&v41[OBJC_IVAR___UIHoverStyle__shape + 24];
      v35 = *(_QWORD *)&v41[OBJC_IVAR___UIHoverStyle__shape + 32];
      v34 = *(_QWORD *)&v41[OBJC_IVAR___UIHoverStyle__shape + 40];
      v33 = *(_QWORD *)&v41[OBJC_IVAR___UIHoverStyle__shape + 48];
      v22 = a1[OBJC_IVAR___UIHoverStyle__shape + 56];
      v23 = v41[OBJC_IVAR___UIHoverStyle__shape + 56];
      *(_QWORD *)v21 = v14;
      *((_QWORD *)v21 + 1) = v15;
      *((_QWORD *)v21 + 2) = v16;
      *((_QWORD *)v21 + 3) = v17;
      *((_QWORD *)v21 + 4) = v18;
      *((_QWORD *)v21 + 5) = v19;
      *((_QWORD *)v21 + 6) = v20;
      v21[56] = v22;
      v40 = a1;
      sub_1852287BC(v14, v15, v16, v17, v18, v19, v20, v22);
      sub_1852287BC(v39, v38, v37, v36, v35, v34, v33, v23);
      sub_185223490(v39, v38, v37, v36, v35, v34, v33, v23);
      v45[0] = v39;
      v45[1] = v38;
      v45[2] = v37;
      v45[3] = v36;
      v45[4] = v35;
      v45[5] = v34;
      v45[6] = v33;
      v46 = v23;
      sub_185788ACC((uint64_t)v45);
      sub_185223490(v39, v38, v37, v36, v35, v34, v33, v23);
      v24 = v40;
      v25 = (uint64_t)&v40[OBJC_IVAR___UIHoverStyle__effect];
      swift_beginAccess();
      sub_1851E75D8(v25, (uint64_t)v45);
      sub_1851E75D8((uint64_t)v45, (uint64_t)v42);
      v26 = v43;
      v27 = v44;
      v28 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v42, v43);
      MEMORY[0x1E0C80A78](v28);
      v30 = (char *)&v33 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v31 + 16))(v30);
      sub_18578A6A0((uint64_t)v30, (uint64_t)v41, v26, v27);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v42);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v45);
      v32 = objc_msgSend(v24, sel_isEnabled);
      objc_msgSend(v41, sel_setEnabled_, v32);

      return;
    }
    v47 = 0;
    v48 = -1;
    v6 = &v41[OBJC_IVAR___UIHoverStyle_host];
    swift_beginAccess();
    sub_18519F0C4((uint64_t)v6, (uint64_t)v50, &qword_1EDD81A30);
    swift_beginAccess();
    v7 = a1;
    sub_1851E6940((uint64_t)&v47, (uint64_t)v6);
    swift_endAccess();
    sub_1852235D8((uint64_t)v50);
    sub_18519F088((uint64_t)&v47, &qword_1EDD81A30);
    sub_18519F088((uint64_t)v50, &qword_1EDD81A30);
    objc_msgSend(v7, sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    type metadata accessor for UIHoverStyle();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v8 = v47;
      -[UIView _setHoverStyleStorage:](v2, v47);
      swift_unknownObjectWeakInit();
      v9 = swift_unknownObjectWeakAssign();
      sub_1850F26F8(v9, (uint64_t)v50, (uint64_t *)&unk_1EDD81AC0);
      v50[8] = 0;
      v10 = (uint64_t)v8 + OBJC_IVAR___UIHoverStyle_host;
      swift_beginAccess();
      sub_18519F0C4(v10, (uint64_t)v49, &qword_1EDD81A30);
      swift_beginAccess();
      sub_1851E6940((uint64_t)v50, v10);
      swift_endAccess();
      sub_1852235D8((uint64_t)v49);
      sub_18519F088((uint64_t)v50, &qword_1EDD81A30);
      sub_18519F088((uint64_t)v49, &qword_1EDD81A30);

LABEL_10:
      return;
    }

  }
  else
  {
    v47 = 0;
    v48 = -1;
    v13 = (uint64_t)&v4[OBJC_IVAR___UIHoverStyle_host];
    swift_beginAccess();
    sub_18519F0C4(v13, (uint64_t)v50, &qword_1EDD81A30);
    swift_beginAccess();
    sub_1851E6940((uint64_t)&v47, v13);
    swift_endAccess();
    sub_1852235D8((uint64_t)v50);
    sub_18519F088((uint64_t)&v47, &qword_1EDD81A30);
    sub_18519F088((uint64_t)v50, &qword_1EDD81A30);
    -[UIView _setHoverStyleStorage:](v2, 0);
  }

}

uint64_t sub_1851E6940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD81A30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1851E6A78(uint64_t a1)
{
  destroy for UIControlPointerHoverStyleDriver(a1);
  return a1;
}

uint64_t destroy for UIControlPointerHoverStyleDriver(uint64_t a1)
{
  int v2;

  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255)
    sub_185228168(*(void **)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v2);
  return swift_unknownObjectWeakDestroy();
}

id sub_1851E6B44@<X0>(char **a1@<X8>)
{
  _BYTE *v1;
  _BYTE *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  char *v19;
  id result;
  id v22[7];
  char v23;

  v2 = v1;
  v4 = &v1[OBJC_IVAR___UIHoverStyle__effect];
  swift_beginAccess();
  v5 = v4[3];
  v6 = v4[4];
  v7 = __swift_project_boxed_opaque_existential_0Tm(v4, v5);
  v8 = type metadata accessor for UIHoverStyle();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v22[-1] - v9;
  (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 16))((char *)&v22[-1] - v9, v7, v5);
  v12 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 8];
  v13 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 16];
  v14 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 24];
  v15 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 32];
  v16 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 40];
  v17 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 48];
  v18 = v2[OBJC_IVAR___UIHoverStyle__shape + 56];
  v22[0] = *(id *)&v2[OBJC_IVAR___UIHoverStyle__shape];
  v22[1] = v12;
  v22[2] = v13;
  v22[3] = v14;
  v22[4] = v15;
  v22[5] = v16;
  v22[6] = v17;
  v23 = v18;
  sub_1852287BC(v22[0], (uint64_t)v12, (uint64_t)v13, (uint64_t)v14, (uint64_t)v15, (uint64_t)v16, (uint64_t)v17, v18);
  v19 = UIHoverStyle.init<A>(effect:shape:)((uint64_t)v10, (uint64_t *)v22, v5, v6);
  result = objc_msgSend(v19, sel_setEnabled_, objc_msgSend(v2, sel_isEnabled));
  a1[3] = (char *)v8;
  *a1 = v19;
  return result;
}

unint64_t type metadata accessor for UIHoverStyle()
{
  unint64_t result;

  result = qword_1EDD81FA0;
  if (!qword_1EDD81FA0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDD81FA0);
  }
  return result;
}

void sub_1851E6D78(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a2 + 24) = &type metadata for UIHoverAutomaticEffect;
  *(_QWORD *)(a2 + 32) = &protocol witness table for UIHoverAutomaticEffect;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = -1;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(a2 + 112) = 1;
  v3 = swift_unknownObjectWeakAssign();
  v4 = (void *)MEMORY[0x186DCA138](v3);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, sel_setPointerInteractionEnabled_, *(unsigned __int8 *)(a2 + 112));

    v6 = v5;
  }
  else
  {
    v6 = a1;
  }

}

char *UIHoverStyle.init(shape:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v22;
  ValueMetadata *v23;
  _UNKNOWN **v24;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = *((_BYTE *)a1 + 56);
  v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v23 = &type metadata for UIHoverAutomaticEffect;
  v24 = &protocol witness table for UIHoverAutomaticEffect;
  v10 = (uint64_t)v9 + OBJC_IVAR___UIHoverStyle__effect;
  swift_beginAccess();
  v11 = (char *)v9;
  __swift_destroy_boxed_opaque_existential_0Tm(v10);
  sub_1851E59E0(&v22, v10);
  swift_endAccess();
  v12 = &v11[OBJC_IVAR___UIHoverStyle__shape];
  v13 = *(void **)&v11[OBJC_IVAR___UIHoverStyle__shape];
  v14 = *(_QWORD *)&v11[OBJC_IVAR___UIHoverStyle__shape + 8];
  v15 = *(_QWORD *)&v11[OBJC_IVAR___UIHoverStyle__shape + 16];
  v16 = *(_QWORD *)&v11[OBJC_IVAR___UIHoverStyle__shape + 24];
  v17 = *(_QWORD *)&v11[OBJC_IVAR___UIHoverStyle__shape + 32];
  v18 = *(_QWORD *)&v11[OBJC_IVAR___UIHoverStyle__shape + 40];
  v19 = *(_QWORD *)&v11[OBJC_IVAR___UIHoverStyle__shape + 48];
  *(_QWORD *)v12 = v1;
  *((_QWORD *)v12 + 1) = v2;
  *((_QWORD *)v12 + 2) = v3;
  *((_QWORD *)v12 + 3) = v4;
  *((_QWORD *)v12 + 4) = v5;
  *((_QWORD *)v12 + 5) = v6;
  *((_QWORD *)v12 + 6) = v7;
  v20 = v12[56];
  v12[56] = v8;
  sub_185223490(v13, v14, v15, v16, v17, v18, v19, v20);

  return v11;
}

char *UIHoverStyle.init<A>(effect:shape:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v12 = a2[4];
  v11 = a2[5];
  v27 = a2[6];
  v28 = *((_BYTE *)a2 + 56);
  v13 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v30 = a3;
  v31 = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_0, a1, a3);
  v15 = (uint64_t)v13 + OBJC_IVAR___UIHoverStyle__effect;
  swift_beginAccess();
  v16 = (char *)v13;
  __swift_destroy_boxed_opaque_existential_0Tm(v15);
  sub_1851E59E0(&v29, v15);
  swift_endAccess();
  v17 = &v16[OBJC_IVAR___UIHoverStyle__shape];
  v18 = *(void **)&v16[OBJC_IVAR___UIHoverStyle__shape];
  v19 = *(_QWORD *)&v16[OBJC_IVAR___UIHoverStyle__shape + 8];
  v20 = *(_QWORD *)&v16[OBJC_IVAR___UIHoverStyle__shape + 16];
  v21 = *(_QWORD *)&v16[OBJC_IVAR___UIHoverStyle__shape + 24];
  v22 = *(_QWORD *)&v16[OBJC_IVAR___UIHoverStyle__shape + 32];
  v23 = *(_QWORD *)&v16[OBJC_IVAR___UIHoverStyle__shape + 40];
  v24 = *(_QWORD *)&v16[OBJC_IVAR___UIHoverStyle__shape + 48];
  *(_QWORD *)v17 = v7;
  *((_QWORD *)v17 + 1) = v8;
  *((_QWORD *)v17 + 2) = v9;
  *((_QWORD *)v17 + 3) = v10;
  *((_QWORD *)v17 + 4) = v12;
  *((_QWORD *)v17 + 5) = v11;
  *((_QWORD *)v17 + 6) = v27;
  v25 = v17[56];
  v17[56] = v28;
  sub_185223490(v18, v19, v20, v21, v22, v23, v24, v25);

  return v16;
}

id sub_1851E7054(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = *(id *)(*(_QWORD *)(a1 + 136) + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerInteraction);
  if (result)
    result = objc_msgSend(result, sel_invalidate);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 16))
  {
    v3 = sub_1851E780C(*(_QWORD *)(a1 + 144));
    result = (id)swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 144) = v3;
  }
  return result;
}

double _sSo20UICollectionViewCellC5UIKitE20contentConfigurationAC09UIContentF0_pSgvg_0@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  if (objc_msgSend(v1, sel_contentConfiguration))
  {
    objc_opt_self();
    v3 = swift_dynamicCastObjCClass();
    if (v3)
    {
      v4 = v3;
      *(_QWORD *)(a1 + 24) = &type metadata for UIListContentConfiguration;
      *(_QWORD *)(a1 + 32) = &protocol witness table for UIListContentConfiguration;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD748F0);
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = v4;
      *(_QWORD *)a1 = v5;
      return result;
    }
    type metadata accessor for _UICustomContentConfiguration();
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      sub_1851E75D8(v7 + OBJC_IVAR____TtC5UIKit29_UICustomContentConfiguration_wrappedConfiguration, a1);
      swift_unknownObjectRelease();
      return result;
    }
    swift_unknownObjectRelease();
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1851E72A0()
{
  uint64_t v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_0;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[5];
  uint64_t v13[5];

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5UIKit29_UICustomContentConfiguration_wrappedConfiguration + 24);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5UIKit29_UICustomContentConfiguration_wrappedConfiguration + 32);
  __swift_project_boxed_opaque_existential_0Tm((_QWORD *)(v0 + OBJC_IVAR____TtC5UIKit29_UICustomContentConfiguration_wrappedConfiguration), v2);
  swift_getObjectType();
  sub_1851E76B0(v12);
  v4 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16);
  v13[3] = v2;
  v13[4] = v3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v13);
  v4(v12, v2, v3);
  v6 = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v12);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v12 - v7;
  (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 16))((char *)v12 - v7, boxed_opaque_existential_0, v2);
  sub_1851E7530((uint64_t)v8, ObjectType, v2, v3);
  v10 = swift_dynamicCastClassUnconditional();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v13);
  return v10;
}

uint64_t _sSo20UICollectionViewCellC5UIKitE20contentConfigurationAC09UIContentF0_pSgvs_0(uint64_t a1)
{
  void *v1;
  objc_class *v3;
  char *v4;
  char *v5;
  id v6;
  objc_super v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;

  sub_1851E761C(a1, (uint64_t)v11);
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A28);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend(v1, sel_setContentConfiguration_, *(_QWORD *)(v9 + 16));
      swift_release();
      return sub_1851E7670(a1);
    }
  }
  else
  {
    sub_1851E7670((uint64_t)v11);
  }
  sub_1851E761C(a1, (uint64_t)&v9);
  if (v10)
  {
    sub_1851E59E0(&v9, (uint64_t)v11);
    sub_1851E75D8((uint64_t)v11, (uint64_t)&v9);
    v3 = (objc_class *)type metadata accessor for _UICustomContentConfiguration();
    v4 = (char *)objc_allocWithZone(v3);
    v5 = &v4[OBJC_IVAR____TtC5UIKit29_UICustomContentConfiguration____lazy_storage___wrappedConfigurationIdentifier];
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    sub_1851E75D8((uint64_t)&v9, (uint64_t)&v4[OBJC_IVAR____TtC5UIKit29_UICustomContentConfiguration_wrappedConfiguration]);
    v8.receiver = v4;
    v8.super_class = v3;
    v6 = objc_msgSendSuper2(&v8, sel_init);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v9);
    objc_msgSend(v1, sel_setContentConfiguration_, v6);

    sub_1851E7670(a1);
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v11);
  }
  sub_1851E7670((uint64_t)&v9);
  objc_msgSend(v1, sel_setContentConfiguration_, 0);
  return sub_1851E7670(a1);
}

id sub_1851E7530(uint64_t a1, objc_class *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_0;
  char *v8;
  char *v9;
  id v10;
  objc_super v12;
  uint64_t v13[5];

  v13[3] = a3;
  v13[4] = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_0, a1, a3);
  v8 = (char *)objc_allocWithZone(a2);
  v9 = &v8[OBJC_IVAR____TtC5UIKit29_UICustomContentConfiguration____lazy_storage___wrappedConfigurationIdentifier];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  sub_1851E75D8((uint64_t)v13, (uint64_t)&v8[OBJC_IVAR____TtC5UIKit29_UICustomContentConfiguration_wrappedConfiguration]);
  v12.receiver = v8;
  v12.super_class = a2;
  v10 = objc_msgSendSuper2(&v12, sel_init);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v13);
  return v10;
}

uint64_t sub_1851E75D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1851E761C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1851E7670(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1851E76B0@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  uint64_t result;
  id v4;
  uint64_t v5;

  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    a1[3] = (uint64_t)&type metadata for UICellConfigurationState;
    a1[4] = (uint64_t)&protocol witness table for UICellConfigurationState;
  }
  else
  {
    objc_opt_self();
    if (!swift_dynamicCastObjCClass())
    {
      v4 = objc_msgSend(v1, sel_traitCollection);
      a1[3] = (uint64_t)&type metadata for UICellConfigurationState;
      a1[4] = (uint64_t)&protocol witness table for UICellConfigurationState;
      result = swift_allocObject();
      *a1 = result;
      *(_QWORD *)(result + 16) = v4;
      *(_QWORD *)(result + 24) = 0;
      v5 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(result + 29) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = v5;
      *(_BYTE *)(result + 64) = 1;
      return result;
    }
    a1[3] = (uint64_t)&type metadata for UIViewConfigurationState;
    a1[4] = (uint64_t)&protocol witness table for UIViewConfigurationState;
  }
  *a1 = swift_allocObject();
  swift_unknownObjectRetain();
  return swift_dynamicCast();
}

uint64_t sub_1851E780C(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[40];
  uint64_t v32;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD816D0);
  result = sub_186507E70();
  v3 = (_QWORD *)result;
  v4 = 0;
  v32 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v24 = v6;
  v25 = (unint64_t)(v8 + 63) >> 6;
  v26 = (_QWORD *)result;
  v27 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v12 = v4;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v16 << 6))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v32 + 48) + 8 * i);
    sub_1851E75D8(*(_QWORD *)(v32 + 56) + 40 * i, (uint64_t)v31);
    sub_1851E75D8((uint64_t)v31, (uint64_t)&v28);
    v19 = v29;
    v20 = v30;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v28, v29);
    (*(void (**)(uint64_t, uint64_t))(v20 + 136))(v19, v20);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v31);
    v3 = v26;
    *(_QWORD *)(v27 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v26[6] + 8 * i) = v18;
    result = sub_1851E59E0(&v28, v26[7] + 40 * i);
    v21 = v26[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v26[2] = v23;
    v4 = v12;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v14 >= v25)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v24 + 8 * v14);
    v16 = v4 + 1;
    if (!v15)
    {
      v16 = v4 + 2;
      if (v4 + 2 >= v25)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v24 + 8 * v16);
      if (!v15)
      {
        v16 = v4 + 3;
        if (v4 + 3 >= v25)
          return (uint64_t)v3;
        v15 = *(_QWORD *)(v24 + 8 * v16);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
    v12 = v16;
  }
  v17 = v4 + 4;
  if (v4 + 4 >= v25)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v24 + 8 * v17);
  if (v15)
  {
    v16 = v4 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v25)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v24 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_1851E7A78()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = (void *)MEMORY[0x186DCA138](v0 + 104);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_setPointerInteractionEnabled_, *(unsigned __int8 *)(v0 + 112));

  }
}

uint64_t type metadata accessor for _UICustomContentConfiguration()
{
  return objc_opt_self();
}

uint64_t UIContentView.supports(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DynamicType;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  if (dyld_program_sdk_at_least())
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v15, a2, a3);
    __swift_project_boxed_opaque_existential_0Tm(v15, v16);
    DynamicType = swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
    __swift_project_boxed_opaque_existential_0Tm(a1, a1[3]);
    v7 = DynamicType == swift_getDynamicType();
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v15, a2, a3);
    __swift_project_boxed_opaque_existential_0Tm(v15, v16);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD86960);
    v8 = sub_18650751C();
    v10 = v9;
    __swift_project_boxed_opaque_existential_0Tm(a1, a1[3]);
    v11 = swift_getDynamicType();
    v12 = a1[4];
    v15[0] = v11;
    v15[1] = v12;
    if (v8 == sub_18650751C() && v10 == v13)
    {
      swift_bridgeObjectRelease_n();
      v7 = 1;
    }
    else
    {
      v7 = sub_186507FCC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v7 & 1;
}

id sub_1851E7D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_super v6;

  *(_QWORD *)(v0 + OBJC_IVAR___UIHoverStyle__cachedBridgedEffect) = 0;
  v1 = v0 + OBJC_IVAR___UIHoverStyle__effect;
  *(_QWORD *)(v1 + 24) = &type metadata for UIHoverAutomaticEffect;
  *(_QWORD *)(v1 + 32) = &protocol witness table for UIHoverAutomaticEffect;
  *(_QWORD *)(v0 + OBJC_IVAR___UIHoverStyle__cachedBridgedShape) = 0;
  v2 = v0 + OBJC_IVAR___UIHoverStyle__shape;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 56) = -1;
  *(_BYTE *)(v0 + OBJC_IVAR___UIHoverStyle__isEnabled) = 1;
  v3 = v0 + OBJC_IVAR___UIHoverStyle_host;
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = -1;
  v4 = v0 + OBJC_IVAR___UIHoverStyle_driverCoordinator;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_QWORD *)(v4 + 144) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR___UIHoverStyle_driverCoordinatorAccessLocked) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR___UIHoverStyle_driverCoordinatorQueuedActions) = MEMORY[0x1E0DEE9D8];
  v6.super_class = (Class)UIHoverStyle;
  return objc_msgSendSuper2(&v6, sel_init);
}

void UITableViewHeaderFooterViewCommonInit(void *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  _UITableViewHeaderFooterContentView *v5;
  _UITableViewHeaderFooterContentView *v6;
  _QWORD *v7;

  v7 = a1;
  v3 = objc_msgSend(a2, "copy");
  v4 = (void *)v7[60];
  v7[60] = v3;

  if (dyld_program_sdk_at_least()
    && objc_msgSend(v7, "translatesAutoresizingMaskIntoConstraints"))
  {
    objc_msgSend(v7, "_setHostsLayoutEngine:", 1);
  }
  v7[52] = -1;
  v7[58] = -1;
  v7[59] = 0x7FEFFFFFFFFFFFFFLL;
  v7[65] = 0xBFF0000000000000;
  v7[66] = 0xBFF0000000000000;
  v5 = [_UITableViewHeaderFooterContentView alloc];
  objc_msgSend(v7, "_contentRect");
  v6 = -[_UITableViewHeaderFooterContentView initWithFrame:](v5, "initWithFrame:");
  objc_msgSend(v7, "_setContentView:insertAtBack:", v6, 1);

  objc_msgSend(v7, "_configureDefaultContentViewLayoutMargins");
  if (dyld_program_sdk_at_least())
  {
    objc_msgSend(v7, "setEdgesPreservingSuperviewLayoutMargins:", 10);
    objc_msgSend(v7, "setEdgesInsettingLayoutMarginsFromSafeArea:", objc_msgSend(v7, "edgesInsettingLayoutMarginsFromSafeArea") & 0xA);
  }
  *((_DWORD *)v7 + 144) |= 0x100u;
  *((_DWORD *)v7 + 144) |= 0x4000u;
  *((_DWORD *)v7 + 144) |= 0x10000u;
  *((_DWORD *)v7 + 144) |= 0x20000u;

}

void sub_1851E8D10(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1851E8F0C(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  id v48;
  id v49;
  unint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  void *v70;
  __int128 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;

  v59 = objc_msgSend(a1, sel_traitCollection);
  v4 = objc_msgSend(a1, sel_isDisabled);
  v76 = v4;
  v5 = objc_msgSend(a1, sel_isHighlighted);
  v75 = v5;
  v6 = objc_msgSend(a1, sel_isSelected);
  v74 = v6;
  v7 = objc_msgSend(a1, sel_isFocused);
  v73 = v7;
  v8 = objc_msgSend(a1, sel_isPinned);
  v72 = v8;
  v9 = objc_msgSend(a1, sel__customStatesForSwiftBridging);
  if (!v9)
  {
    v18 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_49;
  }
  v10 = v9;
  v58 = a2;
  type metadata accessor for UIConfigurationStateCustomKey(0);
  sub_1850F731C();
  v11 = MEMORY[0x1E0DEE9B8];
  v12 = sub_1865073A8();

  v13 = 0;
  v14 = *(_QWORD *)(v12 + 64);
  v60 = v12 + 64;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v62 = v12;
  v61 = (unint64_t)(v15 + 63) >> 6;
  v18 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v19 = 0uLL;
  v20 = (uint64_t *)&unk_1EDD81F68;
  if ((v16 & v14) == 0)
    goto LABEL_7;
LABEL_5:
  while (2)
  {
    v21 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v22 = v21 | (v13 << 6);
LABEL_6:
    v23 = *(_QWORD *)(v62 + 56);
    *(_QWORD *)&v67 = *(_QWORD *)(*(_QWORD *)(v62 + 48) + 8 * v22);
    v24 = (void *)v67;
    sub_1850F69D4(v23 + 32 * v22, (uint64_t)&v67 + 8);
    v25 = v24;
    while (1)
    {
      sub_1850F26F8((uint64_t)&v67, (uint64_t)&v70, v20);
      v29 = v70;
      if (!v70)
      {
        swift_release();
        v4 = v76;
        v5 = v75;
        v6 = v74;
        v7 = v73;
        v8 = v72;
        a2 = v58;
LABEL_49:
        v56 = a1;
        v57 = objc_msgSend(v56, sel__mutations);

        *(_QWORD *)a2 = v59;
        *(_BYTE *)(a2 + 8) = v4;
        *(_BYTE *)(a2 + 9) = v5;
        *(_BYTE *)(a2 + 10) = v6;
        *(_BYTE *)(a2 + 11) = v7;
        *(_BYTE *)(a2 + 12) = v8;
        *(_QWORD *)(a2 + 16) = v18;
        *(_QWORD *)(a2 + 24) = a1;
        *(_QWORD *)(a2 + 32) = v57;
        *(_BYTE *)(a2 + 40) = 0;
        return;
      }
      sub_1850F6908(&v71, &v66);
      if (swift_dynamicCast())
        break;
      v69 = 0;
      v67 = 0u;
      v68 = 0u;
      v49 = v29;
      sub_185070E24((uint64_t)&v67);
      swift_bridgeObjectRetain();
      v50 = sub_1850F6BB4(v49);
      v52 = v51;
      swift_bridgeObjectRelease();
      if ((v52 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_185685AEC();

        v53 = v18[7] + 40 * v50;
        v54 = *(_QWORD *)(v53 + 32);
        v55 = *(_OWORD *)(v53 + 16);
        v63 = *(_OWORD *)v53;
        v64 = v55;
        v65 = v54;
        sub_1856823DC(v50, (uint64_t)v18);
        swift_bridgeObjectRelease();
      }
      else
      {
        v65 = 0;
        v63 = 0u;
        v64 = 0u;
      }

      sub_185070E24((uint64_t)&v63);
      v19 = 0uLL;
      if (v17)
        goto LABEL_5;
LABEL_7:
      v26 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_51;
      if (v26 < v61)
      {
        v27 = *(_QWORD *)(v60 + 8 * v26);
        if (v27)
          goto LABEL_10;
        v28 = v13 + 2;
        ++v13;
        if (v26 + 1 < v61)
        {
          v27 = *(_QWORD *)(v60 + 8 * v28);
          if (v27)
            goto LABEL_13;
          v13 = v26 + 1;
          if (v26 + 2 < v61)
          {
            v27 = *(_QWORD *)(v60 + 8 * (v26 + 2));
            if (v27)
            {
              v26 += 2;
              goto LABEL_10;
            }
            v28 = v26 + 3;
            v13 = v26 + 2;
            if (v26 + 3 < v61)
            {
              v27 = *(_QWORD *)(v60 + 8 * v28);
              if (!v27)
              {
                while (1)
                {
                  v26 = v28 + 1;
                  if (__OFADD__(v28, 1))
                    goto LABEL_53;
                  if (v26 >= v61)
                  {
                    v13 = v61 - 1;
                    goto LABEL_24;
                  }
                  v27 = *(_QWORD *)(v60 + 8 * v26);
                  ++v28;
                  if (v27)
                    goto LABEL_10;
                }
              }
LABEL_13:
              v26 = v28;
LABEL_10:
              v17 = (v27 - 1) & v27;
              v22 = __clz(__rbit64(v27)) + (v26 << 6);
              v13 = v26;
              goto LABEL_6;
            }
          }
        }
      }
LABEL_24:
      v17 = 0;
      v69 = 0;
      v67 = v19;
      v68 = v19;
    }
    v30 = v20;
    v31 = v11;
    v63 = v67;
    v64 = v68;
    v65 = v69;
    v32 = v29;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35 = sub_1850F6BB4(v32);
    v36 = v18[2];
    v37 = (v34 & 1) == 0;
    v38 = v36 + v37;
    if (!__OFADD__(v36, v37))
    {
      v39 = v34;
      if (v18[3] >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v34 & 1) == 0)
            goto LABEL_31;
        }
        else
        {
          sub_185685AEC();
          if ((v39 & 1) == 0)
            goto LABEL_31;
        }
      }
      else
      {
        sub_1850F6D2C(v38, isUniquelyReferenced_nonNull_native);
        v40 = sub_1850F6BB4(v32);
        if ((v39 & 1) != (v41 & 1))
          goto LABEL_54;
        v35 = v40;
        if ((v39 & 1) == 0)
        {
LABEL_31:
          v18[(v35 >> 6) + 8] |= 1 << v35;
          *(_QWORD *)(v18[6] + 8 * v35) = v32;
          v42 = v18[7] + 40 * v35;
          v43 = v63;
          v44 = v64;
          *(_QWORD *)(v42 + 32) = v65;
          *(_OWORD *)v42 = v43;
          *(_OWORD *)(v42 + 16) = v44;
          v45 = v18[2];
          v46 = __OFADD__(v45, 1);
          v47 = v45 + 1;
          if (v46)
            goto LABEL_52;
          v18[2] = v47;
          v48 = v32;
          goto LABEL_43;
        }
      }
      sub_18564AE50((uint64_t)&v63, v18[7] + 40 * v35);
LABEL_43:

      swift_bridgeObjectRelease();
      v11 = v31;
      v19 = 0uLL;
      v20 = v30;
      if (v17)
        continue;
      goto LABEL_7;
    }
    break;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  sub_186508074();
  __break(1u);
}

void sub_1851E94B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  char v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 8);
  v3 = *((unsigned __int8 *)v0 + 9);
  v4 = *((unsigned __int8 *)v0 + 10);
  v5 = *((unsigned __int8 *)v0 + 11);
  v6 = *((unsigned __int8 *)v0 + 12);
  v8 = v0[2];
  v7 = (void *)v0[3];
  if (v7)
  {
    v9 = (id)v0[4];
    v10 = *((_BYTE *)v0 + 40);
    v11 = v7;
    v12 = objc_msgSend(v11, sel__mutations);
    if ((v10 & 1) == 0 && v9 == v12)
      return;

  }
  v13 = objc_msgSend(objc_allocWithZone((Class)UIViewConfigurationState), sel_initWithTraitCollection_, v1);
  objc_msgSend(v13, sel_setDisabled_, v2);
  objc_msgSend(v13, sel_setHighlighted_, v3);
  objc_msgSend(v13, sel_setSelected_, v4);
  objc_msgSend(v13, sel_setFocused_, v5);
  objc_msgSend(v13, sel_setPinned_, v6);
  v28 = v8 + 64;
  v14 = 1 << *(_BYTE *)(v8 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v8 + 64);
  v29 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  v17 = 0;
  if (!v16)
    goto LABEL_12;
LABEL_10:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v20 = v19 | (v17 << 6);
  while (2)
  {
    v21 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)&v30 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20);
    v22 = (void *)v30;
    sub_1850F28CC(v21 + 40 * v20, (uint64_t)&v30 + 8);
    v23 = v22;
    while (1)
    {
      sub_1850F26F8((uint64_t)&v30, (uint64_t)&v33, &qword_1EDD816B8);
      v27 = v33;
      if (!v33)
      {
        swift_release();
        return;
      }
      v30 = v34;
      v31 = v35;
      *(_QWORD *)&v32 = v36;
      v18 = (void *)sub_186507BA0();
      sub_1850F7064((uint64_t)&v30);
      objc_msgSend(v13, sel__setSwiftBridgingCustomState_forKey_, v18, v27);

      if (v16)
        goto LABEL_10;
LABEL_12:
      v24 = v17 + 1;
      if (__OFADD__(v17, 1))
      {
        __break(1u);
        goto LABEL_34;
      }
      if (v24 < v29)
      {
        v25 = *(_QWORD *)(v28 + 8 * v24);
        if (v25)
          goto LABEL_15;
        v26 = v17 + 2;
        ++v17;
        if (v24 + 1 < v29)
        {
          v25 = *(_QWORD *)(v28 + 8 * v26);
          if (v25)
            goto LABEL_18;
          v17 = v24 + 1;
          if (v24 + 2 < v29)
          {
            v25 = *(_QWORD *)(v28 + 8 * (v24 + 2));
            if (v25)
            {
              v24 += 2;
              goto LABEL_15;
            }
            v26 = v24 + 3;
            v17 = v24 + 2;
            if (v24 + 3 < v29)
              break;
          }
        }
      }
LABEL_29:
      v16 = 0;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
    }
    v25 = *(_QWORD *)(v28 + 8 * v26);
    if (v25)
    {
LABEL_18:
      v24 = v26;
LABEL_15:
      v16 = (v25 - 1) & v25;
      v20 = __clz(__rbit64(v25)) + (v24 << 6);
      v17 = v24;
      continue;
    }
    break;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v29)
    {
      v17 = v29 - 1;
      goto LABEL_29;
    }
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v26;
    if (v25)
      goto LABEL_15;
  }
LABEL_34:
  __break(1u);
}

id _s5UIKit26UIListContentConfigurationV15ImagePropertiesV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_isEqual_, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

void sub_1851EA95C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void updateBackdropView(void *a1, void *a2)
{
  void *v3;
  double v4;
  id v5;

  v5 = a2;
  objc_msgSend(a1, "backdropLayer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(v3, "setGroupName:", *((_QWORD *)v5 + 3));
    objc_msgSend(v3, "setGroupNamespace:", *((_QWORD *)v5 + 4));
    v4 = *((double *)v5 + 6);
    if (v4 < *((double *)v5 + 5))
      v4 = *((double *)v5 + 5);
  }
  else
  {
    objc_msgSend(v3, "setGroupName:", 0);
    objc_msgSend(v3, "setGroupNamespace:", *MEMORY[0x1E0CD2960]);
    v4 = 1.0;
  }
  objc_msgSend(v3, "setScale:", v4);

}

void sub_1851EDD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIRectFillUsingOperation(int a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  _QWORD *ContextStack;
  CGContext *v11;
  CGRect v12;
  CGRect v13;

  ContextStack = GetContextStack(0);
  if (*(int *)ContextStack < 1)
    v11 = 0;
  else
    v11 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  if (CGContextGetCompositeOperation() == a1)
  {
    v12.origin.x = a2;
    v12.origin.y = a3;
    v12.size.width = a4;
    v12.size.height = a5;
    CGContextFillRect(v11, v12);
  }
  else
  {
    CGContextSetCompositeOperation();
    v13.origin.x = a2;
    v13.origin.y = a3;
    v13.size.width = a4;
    v13.size.height = a5;
    CGContextFillRect(v11, v13);
    CGContextSetCompositeOperation();
  }
}

uint64_t __pretiledImageForImage_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "drawInRect:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), *(double *)(a1 + 40), *(double *)(a1 + 48));
}

uint64_t _UIUpdateRequestRegistryMutableRequestChanged(uint64_t result, _BYTE *a2)
{
  int v2;
  uint64_t (*v3)(uint64_t, _QWORD);

  if ((*a2 & 2) != 0)
  {
    *(_DWORD *)(result + 32) |= 1u;
    v2 = *(_DWORD *)result;
    *(_DWORD *)(result + 4) |= 1u;
    if ((v2 | 0x40) != v2)
    {
      *(_DWORD *)result = v2 | 0x40;
      v3 = *(uint64_t (**)(uint64_t, _QWORD))(result + 136);
      if (v3)
        return v3(result, *(_QWORD *)(result + 144));
    }
  }
  return result;
}

uint64_t UIStatusBarStyleIsDoubleHeight(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  +[UIStatusBar _styleAttributesForStatusBarStyle:](UIStatusBar, "_styleAttributesForStatusBarStyle:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isDoubleHeight");

  return v2;
}

uint64_t static UIButton.Configuration.plain()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1854AF788((SEL *)&selRef_plainButtonConfiguration, a1);
}

id UIButton.Configuration.titleTextAttributesTransformer.setter(uint64_t *a1)
{
  return sub_18521ADD0(a1, (uint64_t)&unk_1E16A3C38, (uint64_t)sub_1853720A8, (uint64_t)&block_descriptor_39, (SEL *)&selRef_setTitleTextAttributesTransformer_);
}

uint64_t UIConfigurationTextAttributesTransformer.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t _s29AnimatablePropertyTransformerC17RunningProgressesV5EntryVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIConfigurationTextAttributesTransformer()
{
  return &type metadata for UIConfigurationTextAttributesTransformer;
}

id UICollectionLayoutListConfiguration.showsSeparators.setter(char a1)
{
  uint64_t *v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    v5 = *(void **)(v4 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v4 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_185167974();
    swift_dynamicCast();
    v5 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A58);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v8;
    swift_release();
    *v1 = v6;
  }
  return objc_msgSend(v5, sel_setShowsSeparators_, a1 & 1);
}

uint64_t static UIBackgroundConfiguration.listPlainCell()@<X0>(uint64_t *a1@<X8>)
{
  return sub_18526BD38((SEL *)&selRef_listPlainCellConfiguration, a1);
}

void UIBackgroundConfiguration.customView.setter(void *a1)
{
  sub_18522E700(a1, (const char **)&selRef_setCustomView_);
}

ValueMetadata *type metadata accessor for UIViewConfigurationState()
{
  return &type metadata for UIViewConfigurationState;
}

void std::__hash_table<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::__unordered_map_hasher<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::__unordered_map_hasher<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_1851F2298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *shared_weak_owners;
  std::__shared_weak_count *v11;
  void *v12;
  va_list va;

  va_start(va, a6);
  v9 = v7[5].__vftable;
  if (v9)
  {
    v7[5].__shared_owners_ = (uint64_t)v9;
    operator delete(v9);
  }
  std::vector<_UICollectionViewRTreeElement>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  shared_weak_owners = (std::__shared_weak_count *)v7[2].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  v11 = (std::__shared_weak_count *)v7[2].__vftable;
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  std::__shared_weak_count::~__shared_weak_count(v7);
  operator delete(v12);

  _Unwind_Resume(a1);
}

void _UIRTreeContainerNode<_UICollectionViewRTreeElement>::commonInit(int64x2_t *a1)
{
  float64x2_t *v2;
  char *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16[2];

  a1[8].i64[0] = 0;
  a1[8].i64[1] = 0;
  a1[7] = vdupq_n_s64(0x7FF8000000000000uLL);
  v2 = (float64x2_t *)a1[5].i64[1];
  v3 = (char *)a1[6].i64[0];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[4].i64[1] - a1[4].i64[0]) >> 3) != (v3 - (char *)v2) >> 5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIRTreeContainerNode<_UICollectionViewRTreeElement>::commonInit() [T = _UICollectionViewRTreeElement]");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("_UIRTree.mm"), 206, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("_childFrames.size() == _childElements.size()"));

    v2 = (float64x2_t *)a1[5].i64[1];
    v3 = (char *)a1[6].i64[0];
  }
  if (v2 == (float64x2_t *)v3)
  {
    v9 = (uint64_t *)a1[2].i64[1];
    v10 = (uint64_t *)a1[3].i64[0];
    if (v9 == v10)
      return;
    v4 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v5 = 0uLL;
    do
    {
      v14 = v5;
      v15 = v4;
      v11 = *v9;
      v9 += 2;
      _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v16, v11);
      v4 = vminnmq_f64(v15, v16[0]);
      v5 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v15, v14), vaddq_f64(v16[0], v16[1])), v4);
    }
    while (v9 != v10);
  }
  else
  {
    v4 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v5 = 0uLL;
    do
    {
      v7 = *v2;
      v6 = v2[1];
      v2 += 2;
      v8 = vaddq_f64(v4, v5);
      v4 = vminnmq_f64(v4, v7);
      v5 = vsubq_f64(vmaxnmq_f64(v8, vaddq_f64(v7, v6)), v4);
    }
    while (v2 != (float64x2_t *)v3);
  }
  a1[7] = (int64x2_t)v4;
  a1[8] = (int64x2_t)v5;
}

void sub_1851F2458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _UICollectionViewCompositionalLayoutShouldDeferResolvesUntilQueried()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
  {
    LODWORD(result) = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_CompositionalLayoutDeferResolveToQueryTime, (uint64_t)CFSTR("CompositionalLayoutDeferResolveToQueryTime"));
    if (byte_1ECD75EDC)
      return 1;
    else
      return result;
  }
  return result;
}

const __CFString *_UICollectionViewLayoutInvalidationContextIntentDescription(unint64_t a1)
{
  if (a1 > 0xF)
    return CFSTR("Unknown");
  else
    return off_1E16BE110[a1];
}

UIColor *ComputeLegibilityColorFromColor(void *a1, double a2)
{
  UIColor *v4;
  double v5;
  uint64_t v7;
  double v8;
  double v9;

  v4 = +[UIColor blackColor](UIColor, "blackColor");
  if ((int)CGColorGetNumberOfComponents((CGColorRef)objc_msgSend(a1, "CGColor")) >= 3)
  {
    v8 = 0.0;
    v9 = 0.0;
    v7 = 0;
    if (objc_msgSend(a1, "getHue:saturation:brightness:alpha:", &v9, &v8, &v7, 0))
    {
      v5 = 0.0;
      if (v9 != 0.0)
        v5 = fmin(fmax(v8, 0.3), 0.5);
      return +[UIColor colorWithHue:saturation:brightness:alpha:](UIColor, "colorWithHue:saturation:brightness:alpha:", v9, v5, a2, 1.0);
    }
  }
  return v4;
}

void _NXRGBToHSB(long double *a1, double *a2, double *a3, double a4, double a5, double a6)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  double v18;

  if (a4 < a5 || a4 < a6)
  {
    if (a5 >= a4)
      v8 = a4;
    else
      v8 = a5;
    if (a4 >= a6)
      v9 = a6;
    else
      v9 = a4;
    v10 = a5 < a4 || a5 < a6;
    if (v10)
      v11 = a6;
    else
      v11 = a5;
    if (v10)
      v9 = v8;
  }
  else
  {
    if (a5 >= a6)
      v9 = a6;
    else
      v9 = a5;
    v11 = a4;
  }
  v12 = 0.0;
  if (v11 <= 0.0)
  {
    v14 = 0.0;
  }
  else
  {
    v13 = v11 - v9;
    v14 = (v11 - v9) / v11;
    if (v14 != 0.0)
    {
      v15 = (v11 - a5) / v13;
      v16 = (v11 - a6) / v13;
      if (v11 == a4)
      {
        if (v9 == a5)
          v12 = v16 + 5.0;
        else
          v12 = 1.0 - v15;
      }
      else
      {
        v17 = v11 == a5;
        v18 = (v11 - a4) / v13;
        if (v17)
        {
          if (v9 == a6)
            v12 = v18 + 1.0;
          else
            v12 = 3.0 - v16;
        }
        else if (v9 == a4)
        {
          v12 = v15 + 3.0;
        }
        else
        {
          v12 = 5.0 - v18;
        }
      }
    }
  }
  *a3 = v11;
  *a1 = fmod(v12 / 6.0, 1.0);
  *a2 = v14;
}

id _UIBarHairlineShadowColorForBarStyle(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 2)
    +[UIColor _systemChromeShadowColor](UIColor, "_systemChromeShadowColor");
  else
    +[UIColor _barStyleBlackHairlineShadowColor](UIColor, "_barStyleBlackHairlineShadowColor");
  return (id)objc_claimAutoreleasedReturnValue();
}

void __swiftcall UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(UIMenu *__return_ptr retstr, Swift::String title, Swift::String_optional subtitle, UIImage_optional *image, UIMenuIdentifier_optional identifier, UIMenuOptions options, UIMenuElementSize preferredElementSize, Swift::OpaquePointer children)
{
  void *object;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;

  object = subtitle.value._object;
  v13 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v14 = (void *)sub_1865074D4();
  swift_bridgeObjectRelease();
  sub_1851F9080(0, (unint64_t *)&qword_1ECD74A70);
  v15 = (void *)sub_18650763C();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v13, sel_initWithTitle_image_imageName_identifier_options_children_, v14, image, 0, identifier.value, options, v15);

  v17 = v16;
  if (object)
  {
    v18 = (void *)sub_1865074D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v16, sel_setSubtitle_, v18);

  objc_msgSend(v16, sel_setPreferredElementSize_, preferredElementSize);
}

uint64_t sub_1851F9080(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

id UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  _QWORD aBlock[6];

  v14 = (void *)sub_1865074D4();
  swift_bridgeObjectRelease();
  if (a9)
  {
    v15 = (void *)sub_1865074D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = 0;
  }
  v16 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  aBlock[4] = a12;
  aBlock[5] = a13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1855B2B2C;
  aBlock[3] = &block_descriptor_76;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v18 = objc_msgSend(v16, sel_initWithTitle_image_identifier_discoverabilityTitle_attributes_state_handler_, v14, a5, a7, v15, a10, a11, v17);
  _Block_release(v17);

  v19 = v18;
  if (a4)
  {
    v20 = (void *)sub_1865074D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
  }
  objc_msgSend(v18, sel_setSubtitle_, v20);

  objc_msgSend(v18, sel_setSelectedImage_, a6);
  swift_release();
  return v18;
}

uint64_t _truncatedDebuggingDescriptionForLayout(void *a1)
{
  unint64_t v2;

  if (UILayoutConstraintDebuggingMaximumLayoutDescriptionLength_onceToken != -1)
    dispatch_once(&UILayoutConstraintDebuggingMaximumLayoutDescriptionLength_onceToken, &__block_literal_global_940_0);
  v2 = UILayoutConstraintDebuggingMaximumLayoutDescriptionLength_maxLength;
  if (objc_msgSend(a1, "length") <= v2)
    return (uint64_t)a1;
  else
    return objc_msgSend((id)objc_msgSend(a1, "substringToIndex:", v2), "stringByAppendingString:", CFSTR("..."));
}

uint64_t _UIRecursivelyAnalyzeMenu(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[5];
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t v32[128];
  uint8_t buf[4];
  id v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = *(void **)(a2 + 8);
  objc_msgSend(v3, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7 = v3;
    v8 = v6;
    v9 = _MergedGlobals_1193;
    if (!_MergedGlobals_1193)
    {
      v9 = __UILogCategoryGetNode("MenuBuilder", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&_MergedGlobals_1193);
    }
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v34 = v7;
      v35 = 2112;
      v36 = v8;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Menu has duplicates --\n%@\n%@\nMake a symbolic breakpoint at _UIMenuBuilderError to catch this in the debugger.", buf, 0x16u);
    }
    v11 = 0;
  }
  else
  {
    v12 = *(void **)(a2 + 8);
    objc_msgSend(v3, "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v3, v13);

    objc_msgSend(v3, "identifier");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    objc_msgSend(v3, "children");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v29;
      v17 = MEMORY[0x1E0C809B0];
LABEL_9:
      v18 = 0;
      while (1)
      {
        if (*(_QWORD *)v29 != v16)
          objc_enumerationMutation(v8);
        v19 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v18);
        if ((objc_msgSend(v19, "_isLoadingPlaceholder") & 1) == 0)
        {
          v25[0] = v17;
          v25[1] = 3221225472;
          v25[2] = ___UIRecursivelyAnalyzeMenu_block_invoke;
          v25[3] = &unk_1E16DEB90;
          v27 = a2;
          v26 = v7;
          v22[0] = v17;
          v22[1] = 3221225472;
          v22[2] = ___UIRecursivelyAnalyzeMenu_block_invoke_2;
          v22[3] = &unk_1E16DEBB8;
          v24 = a2;
          v23 = v26;
          v21[0] = v17;
          v21[1] = 3221225472;
          v21[2] = ___UIRecursivelyAnalyzeMenu_block_invoke_3;
          v21[3] = &__block_descriptor_40_e18_B16__0__UIAction_8l;
          v21[4] = a2;
          v11 = objc_msgSend(v19, "_acceptBoolMenuVisit:commandVisit:actionVisit:", v25, v22, v21);

          if (!(_DWORD)v11)
            break;
        }
        if (v15 == ++v18)
        {
          v15 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
          v11 = 1;
          if (v15)
            goto LABEL_9;
          break;
        }
      }
    }
    else
    {
      v11 = 1;
    }
  }

  return v11;
}

uint64_t _UIHIDUsageFromSpecialKeyInput(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(&unk_1E1A9B4A0, "objectForKeyedSubscript:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "longValue");

  return v2;
}

id _UIKeyCommandGetLocalizedSymbol(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v1 = a1;
  _UIKeyCommandGetLocalizedSymbolDict();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3)
    v3 = v1;
  v5 = v3;

  return v5;
}

id _UIKeyCommandGetLocalizedSymbolDict()
{
  void *v0;
  id v1;
  void *v2;

  v0 = (void *)sLocalizedSymbolsDict;
  if (!sLocalizedSymbolsDict)
  {
    v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v2 = (void *)sLocalizedSymbolsDict;
    sLocalizedSymbolsDict = (uint64_t)v1;

    v0 = (void *)sLocalizedSymbolsDict;
  }
  return v0;
}

void sub_1851FACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UINSLocalizedStringWithDefaultValue(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = a1;
  _UIKitBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", v4, v3, CFSTR("Localizable"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t _UINavigationBarBackButtonShowsContextMenu()
{
  if (qword_1ECD7A8A0 != -1)
    dispatch_once(&qword_1ECD7A8A0, &__block_literal_global_63);
  return byte_1ECD7A891;
}

void __dispatchPreprocessedEventFromEventQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t TimeStamp;
  double v7;
  void *v8;
  int Type;
  unint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  void (**v26)(_QWORD);
  void *v27;
  int v28;
  void *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  const __CFArray *Children;
  const __CFArray *v36;
  void *v37;
  void *v38;
  int v39;
  int v40;
  void *v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  void *v45;
  void *v46;
  int v47;
  unint64_t v48;
  NSObject *v49;
  void *v50;
  int v51;
  const __CFDictionary *v52;
  const __CFDictionary *Mutable;
  uint64_t v54;
  void *v55;
  CFMutableDictionaryRef v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t SenderID;
  unint64_t v63;
  void *v64;
  void *v65;
  BOOL v66;
  void *v67;
  void *v68;
  void *v69;
  unint64_t v70;
  id v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  __int128 v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  NSObject *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t i;
  unint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t Event;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  _BOOL4 v105;
  void *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  double v110;
  _BOOL4 v111;
  double v112;
  double v113;
  double v114;
  void *v115;
  char v116;
  unint64_t v117;
  id v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t j;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  int v128;
  _BOOL8 v129;
  double v130;
  void *v131;
  NSObject *v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  NSObject *v138;
  NSObject *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  NSObject *v143;
  NSObject *v144;
  uint64_t v145;
  NSObject *v146;
  int Count;
  NSObject *v148;
  int v149;
  NSObject *v150;
  int v151;
  NSObject *v152;
  uint64_t v153;
  NSObject *v154;
  int v155;
  NSObject *v156;
  const __CFString *v157;
  NSObject *v158;
  uint64_t v159;
  __int128 v160;
  void *v161;
  id v162;
  id v163;
  BOOL v164;
  void *v165;
  void *v166;
  id v167;
  int v168;
  int v169;
  void *v170;
  int v171;
  int v172;
  char IntegerValue;
  void *v174;
  unsigned int v175;
  void *v176;
  void *v177;
  uint64_t v178;
  _QWORD v179[4];
  id v180;
  _QWORD v181[4];
  id v182;
  id v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  _QWORD v192[4];
  id v193;
  _QWORD *v194;
  _QWORD *v195;
  void *v196;
  id v197;
  const __CFDictionary *v198;
  CFMutableDictionaryRef v199;
  uint64_t v200;
  BOOL v201;
  _QWORD v202[4];
  id v203;
  void *v204;
  char v205;
  _QWORD v206[4];
  id v207;
  double v208;
  void *v209;
  BOOL v210;
  char v211;
  _QWORD aBlock[5];
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t (*v216)(uint64_t, uint64_t);
  void (*v217)(uint64_t);
  id v218;
  _QWORD v219[6];
  BOOL v220;
  _QWORD v221[7];
  uint64_t v222;
  uint64_t v223;
  void *v224;
  void *v225;
  id v226;
  id v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  const __CFDictionary *v231;
  uint64_t v232;
  id v233;
  double v234;
  void *v235;
  CFMutableDictionaryRef v236;
  int v237;
  _QWORD v238[3];
  char v239;
  _QWORD v240[6];
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD v245[3];
  char v246;
  _QWORD v247[5];
  id v248;
  uint8_t v249[4];
  const __CFString *v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint8_t buf[4];
  _BYTE v256[10];
  uint64_t v257;
  __int16 v258;
  uint64_t v259;
  __int16 v260;
  int v261;
  __int16 v262;
  int v263;
  __int16 v264;
  unsigned int v265;
  __int16 v266;
  int v267;
  uint64_t v268;

  v268 = *MEMORY[0x1E0C80C00];
  IOHIDEventGetType();
  IOHIDEventGetTimeStamp();
  kdebug_trace();
  alm_stop_tracking_responsive_launch();
  TimeStamp = IOHIDEventGetTimeStamp();
  v7 = _UIMediaTimeForMachTime(TimeStamp);
  if ((_UIUpdateCycleEnabled() & 1) == 0)
    objc_msgSend(MEMORY[0x1E0CD28B0], "setFrameInputTime:withToken:", a2, v7);
  v8 = *(void **)(a3 + 8);
  Type = IOHIDEventGetType();
  v176 = v8;
  v178 = a1;
  if (!-[UIApplication _internalHandleHIDEventBypassingUIEvent:]((uint64_t)v8, a1))
  {
    -[UIEventEnvironment UIKitEventForHIDEvent:]((id *)a3, a1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v177 = v12;
    if (v12)
    {
      objc_msgSend(v12, "_setHIDEvent:", a1);
      v171 = objc_msgSend(v8, "isIgnoringInteractionEvents");
      _UIEventHIDUIWindowForHIDEvent();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "windowScene");
      v170 = (void *)objc_claimAutoreleasedReturnValue();

      if (v170)
        v14 = objc_msgSend(v170, "_isUserInteractionEnabled") ^ 1;
      else
        v14 = 0;
      objc_msgSend(v8, "systemIsAnimatingApplicationLifecycleEvent");
      BKSHIDEventGetDigitizerAttributes();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "systemGestureStateChange");

      v175 = v171 | v14;
      v20 = v178;
      v168 = v19;
      v169 = _UIEventHIDShouldAllowHoverEventGeneration(v178);
      if (Type == 11 && v19)
      {
        _UIEventHIDUIWindowForHIDEvent();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v21)
        {
          v22 = qword_1ECD800D8;
          if (!qword_1ECD800D8)
          {
            v22 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v22, (unint64_t *)&qword_1ECD800D8);
          }
          v23 = *(NSObject **)(v22 + 8);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v256 = v177;
            _os_log_impl(&dword_185066000, v23, OS_LOG_TYPE_ERROR, "unexpected nil window in __dispatchSystemChangeDigitizerEvent, touchesEvent:%@", buf, 0xCu);
          }
        }
        BKSHIDEventGetDigitizerAttributes();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "systemGesturesPossible");

        IOHIDEventGetType();
        IOHIDEventGetTimeStamp();
        kdebug_trace();
        __sendSystemGestureLatentClientUpdate(v177, v21, v25, 0);

        goto LABEL_25;
      }
      if (Type == 11)
      {
        if ((_UIEventHIDIgnoresDragEvents() & 1) == 0)
        {
          Children = (const __CFArray *)IOHIDEventGetChildren();
          if (Children)
          {
            v36 = Children;
            if (CFArrayGetCount(Children) >= 1)
            {
              CFArrayGetValueAtIndex(v36, 0);
              BKSHIDEventGetDigitizerAttributes();
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              _UIEventHIDPathAttributesForChild(v37);
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              v39 = objc_msgSend(v38, "locus");

              if (v39)
              {
                v183 = 0;
                __dispatchDragEvent(v177, &v183, a3);
                v26 = (void (**)(_QWORD))v183;
LABEL_55:
                v27 = 0;
                v28 = 0;
LABEL_165:
                v172 = 1;
                goto LABEL_27;
              }
            }
          }
        }
        if (v169)
        {
          _UIEventHIDUIWindowForHIDEvent();
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v167 = -[UIEventEnvironment _hoverEventForWindow:]((id)a3, v43);

        }
        else
        {
          v167 = 0;
        }
        _UIEventHIDUIWindowForHIDEvent();
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v51 = objc_msgSend(v50, "_contextId");
        objc_msgSend(v50, "screen");
        v166 = (void *)objc_claimAutoreleasedReturnValue();
        v247[0] = 0;
        v247[1] = v247;
        v247[2] = 0x3032000000;
        v247[3] = __Block_byref_object_copy__169;
        v247[4] = __Block_byref_object_dispose__169;
        v248 = 0;
        v52 = (const __CFDictionary *)-[UIEventEnvironment _touchMapForWindow:](a3, v50);
        Mutable = v52;
        if (v52)
          CFRetain(v52);
        else
          Mutable = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
        v164 = CFDictionaryGetCount(Mutable) != 0;
        v161 = *(void **)(a3 + 8);
        if (objc_msgSend(v161, "_isSpringBoard"))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v161, "_gestureEnvironment");
            v54 = objc_claimAutoreleasedReturnValue();
            v55 = (void *)v54;
            if (v54)
              _UIGestureEnvironmentUpdate(v54);

          }
        }
        objc_msgSend(v177, "_clearTouches");
        v56 = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
        CFAutorelease(v56);
        IntegerValue = IOHIDEventGetIntegerValue();
        v245[0] = 0;
        v245[1] = v245;
        v245[2] = 0x2020000000;
        v246 = 0;
        v241 = 0;
        v242 = &v241;
        v243 = 0x2020000000;
        v244 = 0;
        v57 = MEMORY[0x1E0C809B0];
        v240[0] = MEMORY[0x1E0C809B0];
        v240[1] = 3221225472;
        v240[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke;
        v240[3] = &unk_1E16DF818;
        v240[4] = &v241;
        v240[5] = v245;
        _UIEventHIDEnumerateChildren(v178, 11, v240);
        BKSHIDEventGetDigitizerAttributes();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v59 = objc_msgSend(v58, "systemGesturesPossible");

        v238[0] = 0;
        v238[1] = v238;
        v238[2] = 0x2020000000;
        v239 = 0;
        v60 = _MergedGlobals_1200;
        if (!_MergedGlobals_1200)
        {
          v60 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v60, (unint64_t *)&_MergedGlobals_1200);
        }
        if ((*(_BYTE *)v60 & 1) != 0)
        {
          v144 = *(NSObject **)(v60 + 8);
          if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
          {
            v145 = v242[3];
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v256 = (IntegerValue & 0x80) >> 7;
            *(_WORD *)&v256[4] = 1024;
            *(_DWORD *)&v256[6] = v145;
            _os_log_impl(&dword_185066000, v144, OS_LOG_TYPE_ERROR, "Updating touches: isCancelling: %d; digitizerChildCount: %d",
              buf,
              0xEu);
          }
        }
        if ((IntegerValue & 0x80) == 0 && v242[3])
        {
          v61 = qword_1ECD7FF08;
          if (!qword_1ECD7FF08)
          {
            v61 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v61, (unint64_t *)&qword_1ECD7FF08);
          }
          if ((*(_BYTE *)v61 & 1) != 0)
          {
            v158 = *(NSObject **)(v61 + 8);
            if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
            {
              v159 = v242[3];
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v256 = v159;
              _os_log_impl(&dword_185066000, v158, OS_LOG_TYPE_ERROR, "\tEvent has %d digitizer child events", buf, 8u);
            }
          }
          v222 = v57;
          v223 = 3221225472;
          v224 = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_28;
          v225 = &unk_1E16DF5A0;
          v230 = v178;
          v231 = Mutable;
          v232 = a3;
          v233 = v167;
          v237 = v51;
          v226 = v50;
          v228 = v238;
          v234 = v7;
          v235 = v177;
          v236 = v56;
          v227 = v166;
          v229 = v247;
          _UIEventHIDEnumerateChildren(v178, 11, &v222);

        }
        SenderID = IOHIDEventGetSenderID();
        v63 = qword_1ECD7FF20;
        if (!qword_1ECD7FF20)
        {
          v63 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v63, (unint64_t *)&qword_1ECD7FF20);
        }
        if ((*(_BYTE *)v63 & 1) != 0)
        {
          v146 = *(id *)(v63 + 8);
          if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
          {
            Count = CFDictionaryGetCount(Mutable);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v256 = Count;
            _os_log_impl(&dword_185066000, v146, OS_LOG_TYPE_ERROR, "Previous touch map count prior to senderID migration: %d", buf, 8u);
          }

        }
        -[__CFDictionary objectEnumerator](Mutable, "objectEnumerator");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "allObjects");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v221[0] = v57;
        v221[1] = 3221225472;
        v221[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_35;
        v221[3] = &__block_descriptor_56_e24_v32__0__UITouch_8Q16_B24l;
        v221[4] = SenderID;
        v221[5] = v56;
        v221[6] = Mutable;
        objc_msgSend(v65, "enumerateObjectsUsingBlock:", v221);

        if ((_UIEventHIDShouldIgnoreEventsExpectedToBecomeDragEvent() & 1) == 0)
        {
          v66 = _UIEventHIDExpectedToBecomeDragEvent();
          -[__CFDictionary objectEnumerator](Mutable, "objectEnumerator");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v67, "allObjects");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          v219[0] = v57;
          v219[1] = 3221225472;
          v219[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_2;
          v219[3] = &__block_descriptor_49_e24_v32__0__UITouch_8Q16_B24l;
          v220 = v66;
          v219[4] = v56;
          v219[5] = Mutable;
          objc_msgSend(v68, "enumerateObjectsUsingBlock:", v219);

        }
        v213 = 0;
        v214 = &v213;
        v215 = 0x3032000000;
        v216 = __Block_byref_object_copy__39;
        v217 = __Block_byref_object_dispose__40;
        v218 = 0;
        aBlock[0] = v57;
        aBlock[1] = 3221225472;
        aBlock[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_41;
        aBlock[3] = &unk_1E16DF608;
        aBlock[4] = &v213;
        v69 = _Block_copy(aBlock);
        v70 = qword_1ECD7FF28;
        if (!qword_1ECD7FF28)
        {
          v70 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v70, (unint64_t *)&qword_1ECD7FF28);
        }
        if ((*(_BYTE *)v70 & 1) != 0)
        {
          v148 = *(id *)(v70 + 8);
          if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
          {
            v149 = CFDictionaryGetCount(Mutable);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v256 = v149;
            _os_log_impl(&dword_185066000, v148, OS_LOG_TYPE_ERROR, "Previous touch map count prior to terminal phase evaluation: %d", buf, 8u);
          }

        }
        v206[0] = v57;
        v206[1] = 3221225472;
        v206[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_45;
        v206[3] = &unk_1E16DF630;
        v210 = IntegerValue < 0;
        v208 = v7;
        v211 = v175;
        v209 = v177;
        v71 = v69;
        v207 = v71;
        -[__CFDictionary enumerateKeysAndObjectsUsingBlock:](Mutable, "enumerateKeysAndObjectsUsingBlock:", v206);
        v72 = qword_1ECD7FF40;
        if (!qword_1ECD7FF40)
        {
          v72 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v72, (unint64_t *)&qword_1ECD7FF40);
        }
        if ((*(_BYTE *)v72 & 1) != 0)
        {
          v150 = *(id *)(v72 + 8);
          if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
          {
            v151 = CFDictionaryGetCount(v56);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v256 = v151;
            _os_log_impl(&dword_185066000, v150, OS_LOG_TYPE_ERROR, "New touch map count: %d", buf, 8u);
          }

        }
        v202[0] = v57;
        v202[1] = 3221225472;
        v202[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_50;
        v202[3] = &unk_1E16DF658;
        v205 = v175;
        v204 = v177;
        v163 = v71;
        v203 = v163;
        -[__CFDictionary enumerateKeysAndObjectsUsingBlock:](v56, "enumerateKeysAndObjectsUsingBlock:", v202);
        v73 = qword_1ECD7FF48;
        if (!qword_1ECD7FF48)
        {
          v73 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v73, (unint64_t *)&qword_1ECD7FF48);
        }
        if ((*(_BYTE *)v73 & 1) != 0)
        {
          v152 = *(id *)(v73 + 8);
          if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
          {
            v153 = objc_msgSend((id)v214[5], "count");
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)v256 = v153;
            _os_log_impl(&dword_185066000, v152, OS_LOG_TYPE_ERROR, "Touches to cancel: %lu", buf, 0xCu);
          }

        }
        if (objc_msgSend((id)v214[5], "count"))
        {
          objc_msgSend(v161, "_cancelTouchesOrPresses:withEvent:", v214[5], v177);
          __updateSystemGestureRecognitionIsPossible((void *)v214[5], v50, v59, 1);
        }
        else if (IntegerValue < 0)
        {
          objc_msgSend(v177, "allTouches");
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          __updateSystemGestureRecognitionIsPossible(v74, v50, v59, 1);

        }
        v75 = qword_1ECD7FF50;
        if (!qword_1ECD7FF50)
        {
          v75 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v75, (unint64_t *)&qword_1ECD7FF50);
        }
        if ((*(_BYTE *)v75 & 1) != 0)
        {
          v154 = *(id *)(v75 + 8);
          if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          {
            v155 = CFDictionaryGetCount(v56);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v256 = v155;
            _os_log_impl(&dword_185066000, v154, OS_LOG_TYPE_ERROR, "+++++++++++   Number of touches in new touch map: %d", buf, 8u);
          }

        }
        -[UIEventEnvironment _setTouchMap:forWindow:](a3, v56, v50);
        if (IntegerValue < 0)
        {
          if (!v242[3])
            __sendSystemGestureLatentClientUpdate(v177, v50, v59, 1);
        }
        else
        {
          objc_msgSend(v177, "allTouches");
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          __updateSystemGestureRecognitionIsPossible(v76, v50, v59, 0);

        }
        v192[0] = v57;
        v192[1] = 3221225472;
        v192[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_54;
        v192[3] = &unk_1E16DF680;
        v194 = v247;
        v195 = v238;
        v196 = v177;
        v162 = v50;
        v193 = v162;
        v197 = v167;
        v198 = Mutable;
        v199 = v56;
        v200 = a3;
        v201 = v164;
        v165 = _Block_copy(v192);
        v190 = 0u;
        v191 = 0u;
        v188 = 0u;
        v189 = 0u;
        objc_msgSend(v177, "allTouches");
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        v78 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v188, buf, 16);
        v172 = v78 != 0;
        if (v78)
        {
          v80 = 0;
          v81 = *(_QWORD *)v189;
          *(_QWORD *)&v79 = 138412290;
          v160 = v79;
          do
          {
            v82 = 0;
            do
            {
              if (*(_QWORD *)v189 != v81)
                objc_enumerationMutation(v77);
              v83 = *(void **)(*((_QWORD *)&v188 + 1) + 8 * v82);
              v84 = objc_msgSend(v83, "phase", v160);
              if (v84 != 2)
              {
                if (v84 == 3)
                  -[UITouch _willBeDispatchedAsEnded]((uint64_t)v83);
                v85 = qword_1ECD7FF58;
                if (!qword_1ECD7FF58)
                {
                  v85 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                  atomic_store(v85, (unint64_t *)&qword_1ECD7FF58);
                }
                if ((*(_BYTE *)v85 & 1) != 0)
                {
                  v86 = *(id *)(v85 + 8);
                  if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
                  {
                    objc_msgSend(v83, "_phaseDescription");
                    v87 = (void *)objc_claimAutoreleasedReturnValue();
                    LODWORD(v251) = v160;
                    *(_QWORD *)((char *)&v251 + 4) = v87;
                    _os_log_impl(&dword_185066000, v86, OS_LOG_TYPE_ERROR, "Setting shouldSend to YES for touch phase %@", (uint8_t *)&v251, 0xCu);

                  }
                }
                v80 = 1;
              }
              ++v82;
            }
            while (v78 != v82);
            v88 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v188, buf, 16);
            v78 = v88;
          }
          while (v88);

          if ((v80 & 1) == 0)
          {
            v172 = 0;
            goto LABEL_136;
          }
          +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient](UIKeyboardSceneDelegate, "automaticKeyboardArbiterClient");
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v77, "peekApplicationEvent:", v177);
        }

LABEL_136:
        v187 = 0u;
        v185 = 0u;
        v186 = 0u;
        v184 = 0u;
        objc_msgSend(v177, "allTouches");
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        v90 = objc_msgSend(v89, "countByEnumeratingWithState:objects:count:", &v184, &v251, 16);
        if (v90)
        {
          v91 = *(_QWORD *)v185;
          do
          {
            for (i = 0; i != v90; ++i)
            {
              if (*(_QWORD *)v185 != v91)
                objc_enumerationMutation(v89);
              -[UITouch _updatePredictionsWithEvent:](*(_QWORD **)(*((_QWORD *)&v184 + 1) + 8 * i), v177);
            }
            v90 = objc_msgSend(v89, "countByEnumeratingWithState:objects:count:", &v184, &v251, 16);
          }
          while (v90);
        }

        v93 = qword_1ECD7FF60;
        if (!qword_1ECD7FF60)
        {
          v93 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v93, (unint64_t *)&qword_1ECD7FF60);
        }
        if ((*(_BYTE *)v93 & 1) != 0)
        {
          v156 = *(NSObject **)(v93 + 8);
          if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
          {
            v157 = CFSTR("NO");
            if (v172)
              v157 = CFSTR("YES");
            *(_DWORD *)v249 = 138412290;
            v250 = v157;
            _os_log_impl(&dword_185066000, v156, OS_LOG_TYPE_ERROR, "Returning %@ for shouldSend from update touches", v249, 0xCu);
          }
        }

        _Block_object_dispose(&v213, 8);
        _Block_object_dispose(v238, 8);
        _Block_object_dispose(&v241, 8);
        _Block_object_dispose(v245, 8);
        _Block_object_dispose(v247, 8);

        v26 = v165;
        v27 = v167;
        v28 = v167 != 0;
        if (v167)
          v94 = v172;
        else
          v94 = 1;
        if ((v94 & 1) == 0)
        {
          v28 = objc_msgSend(v167, "hasOutstandingUpdates");
          v172 = 0;
        }
        goto LABEL_27;
      }
      v40 = IOHIDEventGetType();
      switch(v40)
      {
        case 3:
          if (_UIEventHIDPressTypeForKeyboardHIDEvent() != -1)
            goto LABEL_167;
          break;
        case 29:
          v95 = IOHIDEventGetIntegerValue();
          if (v95 && v95 != 3)
          {
LABEL_167:
            v99 = v175;
            if (*(_BYTE *)(a3 + 56))
              v99 = 0;
            v175 = v99;
            v174 = *(void **)(a3 + 8);
            if (IOHIDEventGetType() != 17)
            {
              if (IOHIDEventGetType() == 3)
              {
                v104 = _UIEventHIDPressTypeForKeyboardHIDEvent();
                v105 = IOHIDEventGetIntegerValue() != 0;
              }
              else
              {
                if (IOHIDEventGetType() == 29)
                {
                  IOHIDEventGetFloatValue();
                  v105 = v110 != 0.0;
                  v111 = 1;
                  v104 = 105;
                  goto LABEL_205;
                }
                v105 = 0;
                v104 = -1;
              }
              v111 = 1;
LABEL_205:
              BKSHIDEventGetBaseAttributes();
              v115 = (void *)objc_claimAutoreleasedReturnValue();
              v116 = objc_msgSend(v115, "options");

              if ((v116 & 1) != 0)
              {
                objc_msgSend(v174, "_cancelPressesWithType:forPressesEvent:", v104, v177);
                v111 = 0;
              }
              if (v105)
                v117 = 0;
              else
                v117 = 3;
              if ((IOHIDEventGetPhase() & 4) != 0)
              {
                v118 = v177;
                v251 = 0u;
                v252 = 0u;
                v253 = 0u;
                v254 = 0u;
                objc_msgSend(v118, "_terminalRegistrantsForPressType:", v104);
                v119 = (void *)objc_claimAutoreleasedReturnValue();
                v120 = objc_msgSend(v119, "countByEnumeratingWithState:objects:count:", &v251, buf, 16);
                if (v120)
                {
                  v121 = *(_QWORD *)v252;
                  do
                  {
                    for (j = 0; j != v120; ++j)
                    {
                      if (*(_QWORD *)v252 != v121)
                        objc_enumerationMutation(v119);
                      objc_msgSend(*(id *)(*((_QWORD *)&v251 + 1) + 8 * j), "pressesEventDidReceiveTerminal:", v118);
                    }
                    v120 = objc_msgSend(v119, "countByEnumeratingWithState:objects:count:", &v251, buf, 16);
                  }
                  while (v120);
                }

                v111 = 0;
              }
              if (v175)
              {
                objc_msgSend(v177, "_hidEvent");
                _UIEventHIDUIWindowForHIDEvent();
                v123 = (void *)objc_claimAutoreleasedReturnValue();
                -[UIEventEnvironment _pressForType:window:](a3, v104, v123);
                v124 = (void *)objc_claimAutoreleasedReturnValue();

                if (v105)
                {
                  objc_msgSend(v124, "setPhase:", 4);
                  v117 = 0;
                  v111 = 0;
                }
                else if (v124 && objc_msgSend(v124, "phase") != 4)
                {
                  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v124);
                  v125 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v174, "_cancelTouchesOrPresses:withEvent:", v125, v177);

                  v117 = 4;
                }
                else
                {
                  v117 = 3;
                }

              }
              v222 = MEMORY[0x1E0C809B0];
              v223 = 3221225472;
              v224 = ____dispatchPressesEvent_block_invoke;
              v225 = &unk_1E16DF7D0;
              v227 = v174;
              v226 = v177;
              v126 = _Block_copy(&v222);
              if (!v111)
              {
                v128 = 0;
LABEL_239:
                v172 = v128 & (v175 ^ 1);
                v26 = v126;
                goto LABEL_26;
              }
              if (IOHIDEventGetType() == 29)
              {
                v127 = IOHIDEventGetIntegerValue();
              }
              else
              {
                if (IOHIDEventGetType() == 3)
                {
                  v127 = IOHIDEventGetIntegerValue();
                  v129 = IOHIDEventGetIntegerValue() != 0;
LABEL_235:
                  if (v117 >= 3)
                    v130 = 0.0;
                  else
                    v130 = 1.0;
                  objc_msgSend(v177, "_hidEvent");
                  BKSHIDEventGetBaseAttributes();
                  v131 = (void *)objc_claimAutoreleasedReturnValue();
                  v128 = objc_msgSend(v174, "_prepareButtonEvent:type:phase:timestamp:force:clickCount:longClick:contextID:", v177, v104, v117, v127, v129, objc_msgSend(v131, "contextID"), v7, v130);

                  goto LABEL_239;
                }
                v127 = 0;
              }
              v129 = 0;
              goto LABEL_235;
            }
            Event = IOHIDEventGetEvent();
            v101 = IOHIDEventGetEvent();
            if (Event && IOHIDEventIsRepeat())
            {
              v102 = 0;
              v103 = 0;
              v104 = -1;
LABEL_204:
              v111 = v102 != 0;
              v105 = v103 != 0;
              goto LABEL_205;
            }
            _UIEventHIDUIWindowForHIDEvent();
            v106 = (void *)objc_claimAutoreleasedReturnValue();
            v107 = -[UIEventEnvironment _currentNudgePressTypeForWindow:](a3, v106);
            v108 = v107;
            if (v101)
            {
              v109 = 4;
              if (IOHIDEventGetIntegerValue())
              {
                v104 = 4;
LABEL_180:
                if (v108 != -1)
                  objc_msgSend(v174, "_cancelPressesWithType:forPressesEvent:", v108, v177);
                v103 = 1;
                v109 = v104;
                goto LABEL_202;
              }
              v103 = 0;
              v104 = -1;
            }
            else
            {
              v103 = 0;
              v104 = -1;
              v109 = -1;
              if (Event && v107 != 4)
              {
                IOHIDEventGetFloatValue();
                v113 = v112;
                IOHIDEventGetFloatValue();
                if (v113 == 0.0 && v114 == 0.0)
                {
                  v103 = 0;
                  v102 = 0;
                  v109 = v108;
                  if (v108 >= 4)
                    goto LABEL_203;
                  goto LABEL_202;
                }
                if (v113 > 0.0 && v114 == 0.0)
                {
                  v104 = 3;
                }
                else if (v113 < 0.0 && v114 == 0.0)
                {
                  v104 = 2;
                }
                else if (v113 == 0.0 && v114 > 0.0)
                {
                  v104 = 1;
                }
                else
                {
                  v137 = v114 >= 0.0 || v113 != 0.0;
                  v104 = v137 << 63 >> 63;
                }
                goto LABEL_180;
              }
            }
LABEL_202:
            -[UIEventEnvironment _setCurrentNudgePressType:forWindow:](a3, v104, v106);
            v102 = 1;
            v104 = v109;
LABEL_203:

            goto LABEL_204;
          }
          break;
        case 17:
          _UIEventHIDUIScreenForHIDEvent(v178);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend(v41, "_userInterfaceIdiom");

          v20 = v178;
          if (v42 == 3)
            goto LABEL_167;
          break;
      }
      if (IOHIDEventGetType() == 3
        && ((v96 = IOHIDEventGetIntegerValue(), v96 == 7)
         || v96 == 255
         || v96 == 12 && ((v97 = IOHIDEventGetIntegerValue(), v97 == 184) || v97 == 669 || v97 == 430)))
      {
        objc_msgSend(v176, "handleKeyHIDEvent:", v20);
      }
      else
      {
        if (_UIEventHIDIsDynamicButtonEvent(v20))
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v98 = v175;
          if (*(_BYTE *)(a3 + 56))
            v98 = 0;
          v175 = v98;
          goto LABEL_165;
        }
        if (IOHIDEventGetType() != 30)
        {
          objc_opt_class();
          v29 = v177;
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            -[_UIPencilEvent sendToInteractions]((uint64_t)v177);
          }
          else
          {
            if (objc_msgSend(v177, "type") != 10)
            {
              if (objc_msgSend(v177, "type") != 14)
              {
                v26 = 0;
                v27 = 0;
                v28 = 0;
                v172 = 1;
                goto LABEL_28;
              }
              v179[0] = MEMORY[0x1E0C809B0];
              v179[1] = 3221225472;
              v179[2] = ____dispatchPreprocessedEventFromEventQueue_block_invoke_2;
              v179[3] = &unk_1E16B1B28;
              v180 = v177;
              v26 = (void (**)(_QWORD))_Block_copy(v179);

              goto LABEL_55;
            }
            if (objc_msgSend(v177, "_shouldSendEvent"))
            {
              v181[0] = MEMORY[0x1E0C809B0];
              v181[1] = 3221225472;
              v181[2] = ____dispatchPreprocessedEventFromEventQueue_block_invoke;
              v181[3] = &unk_1E16B1B28;
              v182 = v177;
              v26 = (void (**)(_QWORD))_Block_copy(v181);

              goto LABEL_55;
            }
          }
          v26 = 0;
          v172 = 0;
          v27 = 0;
          v28 = 0;
          goto LABEL_28;
        }
        objc_msgSend(v176, "_handleUnicodeEvent:", v20);
      }
LABEL_25:
      v26 = 0;
      v172 = 0;
LABEL_26:
      v27 = 0;
      v28 = 0;
LABEL_27:
      v29 = v177;
LABEL_28:
      if (v169)
      {
        v30 = qword_1ECD7FF78;
        if (!qword_1ECD7FF78)
        {
          v30 = __UILogCategoryGetNode("EventDispatch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v30, (unint64_t *)&qword_1ECD7FF78);
          v29 = v177;
        }
        if ((*(_BYTE *)v30 & 1) != 0)
        {
          v138 = *(NSObject **)(v30 + 8);
          if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            v139 = v138;
            v140 = objc_msgSend(v27, "type");
            v141 = objc_msgSend(v27, "subtype");
            v142 = IOHIDEventGetType();
            *(_DWORD *)buf = 134219264;
            *(_QWORD *)v256 = v27;
            *(_WORD *)&v256[8] = 2048;
            v257 = v140;
            v258 = 2048;
            v259 = v141;
            v260 = 1024;
            v261 = v142;
            v262 = 1024;
            v263 = v28;
            v264 = 1024;
            v265 = v175;
            _os_log_impl(&dword_185066000, v139, OS_LOG_TYPE_DEFAULT, "Evaluating dispatch of UIEvent: %p; type: %li; subtype: %li; backing type: %i; shouldSend: %d; ignoreInter"
              "actionEvents: %d",
              buf,
              0x32u);

            v29 = v177;
          }
        }
        if (v27)
          v31 = v28;
        else
          v31 = 0;
        if (v31 == 1)
        {
          objc_msgSend(v27, "_setHIDEvent:", v178);
          objc_msgSend(v176, "sendEvent:", v27);
          objc_msgSend(v27, "_resetHasOutstandingUpdateTouches");
          v29 = v177;
        }
      }
      v32 = qword_1ECD7FF80;
      if (!qword_1ECD7FF80)
      {
        v32 = __UILogCategoryGetNode("EventDispatch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v32, (unint64_t *)&qword_1ECD7FF80);
        v29 = v177;
      }
      if ((*(_BYTE *)v32 & 1) != 0)
      {
        v132 = *(NSObject **)(v32 + 8);
        if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
        {
          v133 = v132;
          v134 = objc_msgSend(v29, "type");
          v135 = objc_msgSend(v177, "subtype");
          v136 = IOHIDEventGetType();
          *(_DWORD *)buf = 134219520;
          *(_QWORD *)v256 = v177;
          *(_WORD *)&v256[8] = 2048;
          v257 = v134;
          v258 = 2048;
          v259 = v135;
          v260 = 1024;
          v261 = v136;
          v262 = 1024;
          v263 = v172;
          v264 = 1024;
          v265 = v175;
          v266 = 1024;
          v267 = v168;
          _os_log_impl(&dword_185066000, v133, OS_LOG_TYPE_DEFAULT, "Evaluating dispatch of UIEvent: %p; type: %li; subtype: %li; backing type: %i; shouldSend: %d; ignoreInterac"
            "tionEvents: %d, systemGestureStateChange: %d",
            buf,
            0x38u);

          v29 = v177;
        }
      }
      if (v172)
      {
        v33 = objc_msgSend(v29, "_shouldSkipEventDeliveryWithIgnoreInteractionEvents:", v175);
        v29 = v177;
        if ((v33 & 1) == 0)
        {
          v34 = qword_1ECD7FF88;
          if (!qword_1ECD7FF88)
          {
            v34 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v34, (unint64_t *)&qword_1ECD7FF88);
            v29 = v177;
          }
          if ((*(_BYTE *)v34 & 1) != 0)
          {
            v143 = *(NSObject **)(v34 + 8);
            if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v256 = v29;
              _os_log_impl(&dword_185066000, v143, OS_LOG_TYPE_ERROR, "Delivering event %@", buf, 0xCu);
            }
          }
          objc_msgSend(v176, "sendEvent:", v29);
          objc_msgSend(v177, "_didSendEvent");
          v29 = v177;
        }
      }
      if (v26)
      {
        v26[2](v26);
        v29 = v177;
      }
      objc_msgSend(v29, "_cleanupAfterDispatch");
      IOHIDEventGetType();
      IOHIDEventGetTimeStamp();
      kdebug_trace();

      goto LABEL_70;
    }
    if (Type == 14)
    {
      v44 = ((unint64_t)IOHIDEventGetIntegerValue() >> 6) & 1;
      objc_msgSend(v8, "proximityStateChanged:", v44);
      +[UIDevice currentDevice](UIDevice, "currentDevice");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "_setProximityState:", v44);

      if (!objc_msgSend(v8, "isFrontBoard"))
        goto LABEL_69;
    }
    else if (Type == 29)
    {
      IOHIDEventGetFloatValue();
      v16 = v15;
      if (IOHIDEventGetIntegerValue() == 3)
      {
        +[UIScreen _carScreen](UIScreen, "_carScreen");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "_setCarPlayHumanPresenceInRange:", v16 > 0.0);

LABEL_69:
        IOHIDEventGetType();
        IOHIDEventGetTimeStamp();
        kdebug_trace();
LABEL_70:

        return;
      }
    }
    BKSHIDEventGetBaseAttributes();
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = objc_msgSend(v46, "contextID");

    v48 = qword_1ECD7FF70;
    if (!qword_1ECD7FF70)
    {
      v48 = __UILogCategoryGetNode("EventDispatch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v48, (unint64_t *)&qword_1ECD7FF70);
    }
    v49 = *(NSObject **)(v48 + 8);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v256 = Type;
      *(_WORD *)&v256[4] = 1026;
      *(_DWORD *)&v256[6] = v47;
      _os_log_impl(&dword_185066000, v49, OS_LOG_TYPE_DEFAULT, "Found no UIEvent, so dispatching backing event of type directly to application: %i; contextId: 0x%{public}X",
        buf,
        0xEu);
    }
    objc_msgSend(v8, "_handleHIDEvent:", a1);
    goto LABEL_69;
  }
  v10 = qword_1ECD7FF68;
  if (!qword_1ECD7FF68)
  {
    v10 = __UILogCategoryGetNode("EventDispatch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v10, (unint64_t *)&qword_1ECD7FF68);
  }
  v11 = *(NSObject **)(v10 + 8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v256 = Type;
    _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_DEFAULT, "Backing event handled directly by system shell without UIEvent: %i", buf, 8u);
  }
  IOHIDEventGetType();
  IOHIDEventGetTimeStamp();
  kdebug_trace();
}

void sub_1851FE134(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose(&STACK[0x390], 8);
  _Block_object_dispose(&STACK[0x3E0], 8);
  _Block_object_dispose(&STACK[0x400], 8);
  _Block_object_dispose(&STACK[0x420], 8);
  _Unwind_Resume(a1);
}

void _UIEventHIDEnumerateChildren(uint64_t a1, int a2, void *a3)
{
  void (**v4)(id, const void *, CFIndex, _BYTE *);
  const __CFArray *Children;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const void *ValueAtIndex;
  BOOL v11;
  char v12;

  v4 = a3;
  if (!a2 || IOHIDEventConformsTo())
  {
    Children = (const __CFArray *)IOHIDEventGetChildren();
    if (Children)
    {
      v6 = Children;
      Count = CFArrayGetCount(Children);
      v12 = 0;
      if (Count >= 1)
      {
        v8 = Count;
        v9 = 0;
        do
        {
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
            if (!a2 || IOHIDEventGetType() == a2)
              break;
            if (++v9 >= v8)
              goto LABEL_14;
          }
          v4[2](v4, ValueAtIndex, v9++, &v12);
          if (v12)
            v11 = 0;
          else
            v11 = v9 < v8;
        }
        while (v11);
      }
    }
  }
LABEL_14:

}

uint64_t _UIEventHIDShouldTransformEvent()
{
  void *v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;

  _UIEventHIDUIWindowForHIDEvent();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "screen");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
  {
    v2 = objc_msgSend(v1, "_userInterfaceIdiom");
    if (v2 <= 6)
      v3 = (0x63u >> v2) & 1;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id _UIEventHIDUIScreenForHIDEvent(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    BKSHIDEventGetBaseAttributes();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "contextID");
    if (!(_DWORD)v2
      || (+[UIWindow _windowWithContextId:](UIWindow, "_windowWithContextId:", v2),
          v3 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v3, "screen"),
          v4 = (void *)objc_claimAutoreleasedReturnValue(),
          v3,
          !v4))
    {
      objc_msgSend(v1, "display");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIScreen _screenWithEventDisplay:](UIScreen, "_screenWithEventDisplay:", v5);
      v4 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

_QWORD *_UIEventHIDUIWindowForHIDEvent()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;

  BKSHIDEventGetBaseAttributes();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "contextID");

  if (!(_DWORD)v1)
    goto LABEL_5;
  +[UIWindow _windowWithContextId:](UIWindow, "_windowWithContextId:", v1);
  v2 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  if (v2 && (v2[13] & 0x1000) != 0)
  {

LABEL_5:
    v2 = 0;
  }
  return v2;
}

_QWORD *__windowForView(uint64_t a1)
{
  _QWORD *v1;
  id v2;
  _QWORD *result;
  _QWORD *v4;
  void *v5;

  v1 = *(_QWORD **)(a1 + 168);
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "lock");
    v2 = (id)CALayerGetContext();
    objc_msgSend(MEMORY[0x1E0CD28B0], "unlock");
    result = _UIWindowFromRootLayer((id)objc_msgSend(v2, "layer"));
    if (!result)
    {
      do
      {
        v4 = v1;
        v1 = (_QWORD *)objc_msgSend(v1, "superlayer");
      }
      while (v1);
      return _UIWindowFromRootLayer(v4);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Requesting the window of a view (%@) with a nil layer. This view probably hasn't received initWithFrame: or initWithCoder:."), a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("%@"), v5);

    return 0;
  }
  return result;
}

_QWORD *_UIWindowFromRootLayer(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = result;
    if (!_UIWindowFromRootLayer_windowLayerClass)
      _UIWindowFromRootLayer_windowLayerClass = objc_opt_class();
    if (object_getClass(v1) == (Class)_UIWindowFromRootLayer_windowLayerClass)
    {
      result = (_QWORD *)v1[4];
      if (!result)
        return (id)objc_msgSend(v1, "delegate");
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _UIEventHIDShouldIgnoreEventsExpectedToBecomeDragEvent()
{
  if (qword_1ECD800F0 != -1)
    dispatch_once(&qword_1ECD800F0, &__block_literal_global_6_8);
  return byte_1ECD800E1;
}

uint64_t _UIEventHIDIgnoresDragEvents()
{
  if (qword_1ECD800E8 != -1)
    dispatch_once(&qword_1ECD800E8, &__block_literal_global_465);
  return _MergedGlobals_1201;
}

BOOL _UIEventHIDExpectedToBecomeDragEvent()
{
  const __CFArray *Children;
  const __CFArray *v1;
  unint64_t Count;
  CFIndex v3;
  BOOL v4;

  Children = (const __CFArray *)IOHIDEventGetChildren();
  if (Children && (v1 = Children, (Count = CFArrayGetCount(Children)) != 0))
  {
    v3 = 0;
    v4 = 1;
    do
    {
      CFArrayGetValueAtIndex(v1, v3);
      if (IOHIDEventGetIntegerValue() == 65318 && IOHIDEventGetIntegerValue() == 1)
        break;
      v4 = ++v3 < Count;
    }
    while (Count != v3);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t _UIEventGetHIDModifierFlags(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  v4 = v3;
  if (v3
    || (IOHIDEventGetType(),
        _UIEventHIDGetDescendantPointerEvent(a1),
        BKSHIDEventGetDigitizerAttributes(),
        (v4 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v5 = objc_msgSend(v4, "activeModifiers") & 0x3E0000;

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void __updateSystemGestureRecognitionIsPossible(void *a1, id a2, uint64_t a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v8 = a1;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v19;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v19 != v11)
          objc_enumerationMutation(v8);
        v13 = *(_QWORD **)(*((_QWORD *)&v18 + 1) + 8 * v12);
        if (v13)
          v14 = (void *)v13[45];
        else
          v14 = 0;
        v15 = v14;

        if (v15 == a2)
        {
          objc_msgSend(v13, "window", (_QWORD)v18);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "_setSystemGestureRecognitionIsPossible:andTouchesAreCancelled:", a3, a4);

        }
        ++v12;
      }
      while (v10 != v12);
      v17 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      v10 = v17;
    }
    while (v17);
  }

}

uint64_t ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  if (!a3)
  {
    v3 = result;
    result = IOHIDEventGetIntegerValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 24) = result == 0;
  }
  return result;
}

uint64_t ____applySynthesizedTouchTranslationAndModifyIfNeeded_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = IOHIDEventGetType();
  if ((_DWORD)result == 11)
  {
    v9 = *(_QWORD *)(a1[5] + 8);
    v10 = *(_QWORD *)(v9 + 24);
    v8 = (_QWORD *)(v9 + 24);
    if (!v10)
      goto LABEL_6;
    v11 = *(_QWORD *)(a1[6] + 8);
    v12 = *(_QWORD *)(v11 + 24);
    v8 = (_QWORD *)(v11 + 24);
    if (!v12)
      goto LABEL_6;
  }
  else if ((_DWORD)result == 7)
  {
    v8 = (_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
LABEL_6:
    *v8 = a2;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) && *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
      *a4 = 1;
  }
  return result;
}

void CommonStyleRegistration(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  _QWORD block[4];
  id v7;

  v1 = a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __CommonStyleRegistration_block_invoke;
  block[3] = &unk_1E16B1B28;
  v7 = v1;
  v2 = CommonStyleRegistration_onceToken;
  v3 = v1;
  v5 = v3;
  if (v2 == -1)
  {
    v4 = v3;
  }
  else
  {
    dispatch_once(&CommonStyleRegistration_onceToken, block);
    v4 = v7;
  }

}

BOOL UIAccessibilityIsSwitchControlRunning(void)
{
  return _AXSAssistiveTouchScannerEnabled() != 0;
}

void __eventFetcherSourceCallback(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  _UIApplicationDrainManagedAutoreleasePool();
  if ((_UIUpdateCycleEnabled() & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = (void *)MEMORY[0x186DC9484]();
    -[UIEventFetcher drainEventsIntoEnvironment:](*(_QWORD *)(a1 + 16), (void *)v2);
    objc_autoreleasePoolPop(v3);
    v4 = _UIMachTimeForMediaTime(*(double *)(v2 + 72));
    v5 = _UIMachTimeForMediaTime(*(double *)(v2 + 80));
    _UIQOSProcessingBegin("HIDDrain", 0, v4, v5);
    objc_msgSend(*(id *)(v2 + 16), "count");
    kdebug_trace();
    __processEventQueue(v2, 4);
    objc_msgSend(*(id *)(v2 + 16), "count");
    kdebug_trace();
    _UIQOSProcessingEnd();
  }
  if (_UIUpdateCycleEnabled())
    -[UIEventFetcher drainEvents:](*(_QWORD *)(a1 + 16), &__block_literal_global_167_1);
}

void sub_18520477C(_Unwind_Exception *a1)
{
  _UIQOSProcessingEnd();
  _Unwind_Resume(a1);
}

void _UIApplicationDrainManagedAutoreleasePool()
{
  void *info;
  void *v1;
  void *v2;
  CFRunLoopObserverContext context;

  if (pthread_main_np() != 1)
  {
    v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIApplicationDrainManagedAutoreleasePool(void)"), CFSTR("UIApplication+AutoreleasePool.m"), 170, CFSTR("%s must be called on the main thread"), "void _UIApplicationDrainManagedAutoreleasePool(void)");
  }
  if (__caCommitState)
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIApplicationDrainManagedAutoreleasePool(void)"), CFSTR("UIApplication+AutoreleasePool.m"), 171, CFSTR("unexpected start state"));
  }
  if (_MergedGlobals_1057)
  {
    memset(&context, 0, sizeof(context));
    CFRunLoopObserverGetContext((CFRunLoopObserverRef)_MergedGlobals_1057, &context);
    info = context.info;
    if (context.info)
    {
      _popAutoreleasePool(context.info);
      _pushAutoreleasePool(info);
    }
  }
}

uint64_t __processEventQueue(uint64_t a1, int a2)
{
  double v4;
  double v5;
  void *v6;
  id v7;
  const void *v8;
  int v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int Phase;
  int v20;
  _BOOL4 v21;
  _BOOL4 v22;
  unint64_t TimeStamp;
  uint64_t v24;
  const void *Copy;
  void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  CFTypeRef v30;
  _BOOL4 v31;
  char IntegerValue;
  void *v34;
  char v35;
  _BOOL4 v36;
  char v37;
  void *v39;
  char v40;
  unsigned __int8 v41;
  _BOOL4 v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  CFMutableDictionaryRef Mutable;
  id v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t i;
  const void *v57;
  double v58;
  const void *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  id v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  int v81;
  _BOOL4 v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t j;
  double v88;
  const void *v89;
  uint64_t v90;
  _BOOL4 v91;
  char v92;
  unint64_t v93;
  CFIndex v94;
  CFIndex v95;
  void *v96;
  BOOL v97;
  void *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  double v104;
  double v105;
  uint64_t v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  uint64_t v123;
  double v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t k;
  void *v129;
  int v130;
  unint64_t v131;
  double v132;
  char v133;
  char v134;
  void *v135;
  void *v136;
  uint64_t v137;
  BOOL v138;
  double v139;
  double v140;
  void *v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t m;
  void *v146;
  void *v147;
  void *v148;
  id v149;
  void *v150;
  unint64_t v151;
  char v152;
  int v153;
  BOOL v154;
  char v155;
  uint64_t result;
  uint64_t v157;
  void *v158;
  void *v159;
  double v160;
  void *v161;
  double v162;
  uint64_t Count;
  const __CFArray *theArray;
  double v165;
  double v166;
  CFTypeRef cf;
  id obj;
  id obja;
  uint64_t v170;
  double v171;
  void *v172;
  uint64_t v173;
  double v174;
  int v175;
  int v176;
  _QWORD *v177;
  uint64_t v178;
  unsigned int v179;
  unint64_t key;
  void *keya;
  void *keyb;
  unint64_t v183;
  void *v184;
  const void *ValueAtIndex;
  void *v186;
  id v187;
  void *v188;
  void *context;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  int Type;
  int v194;
  uint64_t v195;
  void *v196;
  id v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  v177 = *(_QWORD **)(a1 + 8);
  v186 = *(void **)(a1 + 16);
  if ((_UIUpdateCycleEnabled() & 1) != 0)
  {
    v179 = 0;
  }
  else
  {
    v4 = *(double *)(a1 + 72);
    if (v4 == 0.0)
      v4 = CACurrentMediaTime();
    v5 = *(double *)(a1 + 80);
    if (v5 == 0.0)
      v5 = v4 + _UIQOSMaxFrameDurationSeconds();
    v179 = objc_msgSend(MEMORY[0x1E0CD28B0], "startFrameWithReason:beginTime:commitDeadline:", 32, v4, v5);
  }
  v194 = a2;
  if (a2 && objc_msgSend(v186, "count"))
  {
    do
    {
      context = (void *)MEMORY[0x186DC9484]();
      v6 = *(void **)(a1 + 16);
      objc_msgSend(v6, "lastObject");
      v196 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v196)
      {
        v10 = 0;
        v8 = 0;
        goto LABEL_243;
      }
      v190 = objc_msgSend(v6, "count");
      Type = IOHIDEventGetType();
      BKSHIDEventGetBaseAttributes();
      v188 = (void *)objc_claimAutoreleasedReturnValue();
      v176 = objc_msgSend(v188, "contextID");
      if (BKSHIDEventContainsUpdates())
      {
        v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend(v7, "addObject:", v196);
        v8 = 0;
        v178 = -1;
        v9 = 255;
      }
      else
      {
        if (Type == 11)
        {
          IOHIDEventGetChildren();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v11, "count"))
          {
            objc_msgSend(v11, "objectAtIndexedSubscript:", 0);

            if (IOHIDEventGetIntegerValue())
            {
              if (objc_msgSend((id)UIApp, "_supportsIndirectInputEvents")
                && (v12 = _UIEventHIDGetDescendantPointerEvent((uint64_t)v196)) != 0)
              {
                v13 = _UIEventHIDGetPointerEventSource(v12);
                v14 = 3;
                if (v13 == 4)
                  v14 = 0;
              }
              else
              {
                v14 = IOHIDEventGetIntegerValue() == 0;
              }
            }
            else
            {
              v14 = 2;
            }
            v178 = v14;
            _UIEventHIDPathAttributesForChild(v188);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v9 = objc_msgSend(v15, "locus");

          }
          else
          {
            v178 = -1;
            v9 = 255;
          }

          v7 = 0;
        }
        else
        {
          v7 = 0;
          v178 = -1;
          v9 = 255;
        }
        v8 = v196;
      }
      v16 = v190 - 2;
      v187 = v7;
      if (v190 >= 2)
      {
        if (Type == 6 || Type == 17)
        {
          v16 = v190 - 2;
          if ((uint64_t)(v190 - 2) >= 0)
            goto LABEL_37;
        }
        else if (Type == 11)
        {
          if (*(uint64_t *)(a1 + 184) > 0 || v16 < 0)
          {
            v191 = 0;
            goto LABEL_229;
          }
LABEL_37:
          v175 = v9;
          v191 = 0;
          v195 = 1;
          while (2)
          {
            v192 = v16;
            v17 = objc_msgSend(v6, "objectAtIndex:");
            if (IOHIDEventGetType() != Type)
              goto LABEL_230;
            if (Type == 6)
            {
              Phase = IOHIDEventGetPhase();
              v20 = IOHIDEventGetPhase();
              v21 = _UIEventHIDGetChildScrollEvent((uint64_t)v8) != 0;
              v22 = _UIEventHIDGetChildScrollEvent(v17) != 0;
              if (Phase != v20 || ((v21 ^ v22) & 1) != 0)
                goto LABEL_230;
              TimeStamp = IOHIDEventGetTimeStamp();
              if (TimeStamp <= IOHIDEventGetTimeStamp())
                v24 = v17;
              else
                v24 = (uint64_t)v8;
              IOHIDEventGetFloatValue();
              IOHIDEventGetFloatValue();
              IOHIDEventGetFloatValue();
              IOHIDEventGetFloatValue();
              IOHIDEventGetFloatValue();
              IOHIDEventGetFloatValue();
              Copy = (const void *)IOHIDEventCreateCopy();
              IOHIDEventSetFloatValue();
              IOHIDEventSetFloatValue();
              IOHIDEventSetFloatValue();
              if (_UIEventHIDGetChildPointerEvent(v24))
              {
                BKSHIDEventGetPointerAttributes();
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                if (v26)
                {
                  _UIEventHIDGetChildPointerEvent((uint64_t)Copy);
                  BKSHIDEventSetAttributes();
                }

              }
              v27 = _UIEventHIDGetChildScrollEvent((uint64_t)Copy);
              v28 = _UIEventHIDGetChildScrollEvent((uint64_t)v8);
              v29 = _UIEventHIDGetChildScrollEvent(v17);
              if (v27 && v28 && v29)
              {
                IOHIDEventGetFloatValue();
                IOHIDEventGetFloatValue();
                IOHIDEventGetFloatValue();
                IOHIDEventGetFloatValue();
                IOHIDEventGetFloatValue();
                IOHIDEventGetFloatValue();
                IOHIDEventSetFloatValue();
                IOHIDEventSetFloatValue();
                IOHIDEventSetFloatValue();
              }
              v30 = CFAutorelease(Copy);
            }
            else
            {
              if (Type != 17)
              {
                if (BKSHIDEventContainsUpdates())
                {
                  if (!v8 || v178 == 2)
                  {
                    v71 = v187;
                    if (!v187)
                      v71 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                    v187 = v71;
                    objc_msgSend(v71, "addObject:", v17);
                  }
                  else
                  {
                    v18 = v191;
                    if (!v191)
                    {
                      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                      v18 = (void *)objc_claimAutoreleasedReturnValue();
                    }
                    v191 = v18;
                    objc_msgSend(v18, "addObject:", v17);
                  }
                  goto LABEL_177;
                }
                if (v8)
                {
                  v31 = (IOHIDEventGetIntegerValue() & 2) == 0;
                  IntegerValue = IOHIDEventGetIntegerValue();
                  if ((IntegerValue & 2) != 0 || !v31)
                    goto LABEL_233;
                  if ((IntegerValue & 1) != 0)
                    goto LABEL_233;
                  if (IntegerValue < 0)
                    goto LABEL_233;
                  if (IOHIDEventGetSenderID() == 0x8000000800A15175)
                    goto LABEL_233;
                  BKSHIDEventGetDigitizerAttributes();
                  v34 = (void *)objc_claimAutoreleasedReturnValue();
                  v35 = objc_msgSend(v34, "systemGestureStateChange");

                  if ((v35 & 1) != 0)
                    goto LABEL_233;
                  v36 = (IOHIDEventGetIntegerValue() & 2) == 0;
                  v37 = IOHIDEventGetIntegerValue();
                  if ((v37 & 2) != 0 || !v36)
                    goto LABEL_233;
                  if ((v37 & 1) != 0)
                    goto LABEL_233;
                  if (v37 < 0)
                    goto LABEL_233;
                  if (IOHIDEventGetSenderID() == 0x8000000800A15175)
                    goto LABEL_233;
                  BKSHIDEventGetDigitizerAttributes();
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  v40 = objc_msgSend(v39, "systemGestureStateChange");

                  if ((v40 & 1) != 0)
                    goto LABEL_233;
                  BKSHIDEventGetDigitizerAttributes();
                  v184 = (void *)objc_claimAutoreleasedReturnValue();
                  BKSHIDEventGetDigitizerAttributes();
                  keya = (void *)objc_claimAutoreleasedReturnValue();
                  v41 = IOHIDEventGetIntegerValue();
                  if (((IOHIDEventGetIntegerValue() ^ v41) & 0x83) != 0
                    || (v42 = IOHIDEventGetIntegerValue() != 0, ((v42 ^ (IOHIDEventGetIntegerValue() != 0)) & 1) != 0)
                    || (v43 = objc_msgSend(v184, "systemGesturesPossible"),
                        v43 != objc_msgSend(keya, "systemGesturesPossible"))
                    || (v44 = objc_msgSend(v184, "contextID"), v44 != objc_msgSend(keya, "contextID")))
                  {

                  }
                  else
                  {
                    IOHIDEventGetChildren();
                    v45 = (void *)objc_claimAutoreleasedReturnValue();
                    IOHIDEventGetChildren();
                    v172 = (void *)objc_claimAutoreleasedReturnValue();
                    v46 = objc_msgSend(v45, "count");
                    if (v46 != objc_msgSend(v172, "count"))
                      goto LABEL_183;
                    if (v46 < 1)
                      goto LABEL_91;
                    objc_msgSend(v45, "objectAtIndexedSubscript:", 0);
                    v47 = (void *)objc_claimAutoreleasedReturnValue();
                    _UIEventHIDPathAttributesForChild(v184);
                    v48 = (void *)objc_claimAutoreleasedReturnValue();

                    objc_msgSend(v172, "objectAtIndexedSubscript:", 0);
                    v49 = (void *)objc_claimAutoreleasedReturnValue();
                    _UIEventHIDPathAttributesForChild(keya);
                    v50 = (void *)objc_claimAutoreleasedReturnValue();

                    LODWORD(v49) = objc_msgSend(v48, "locus");
                    LODWORD(v49) = (_DWORD)v49 == objc_msgSend(v50, "locus");

                    if ((_DWORD)v49)
                    {
LABEL_91:
                      Mutable = (CFMutableDictionaryRef)__areDigitizerEventsCoalescable_children1EventMap;
                      if (!__areDigitizerEventsCoalescable_children1EventMap)
                        Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
                      __areDigitizerEventsCoalescable_children1EventMap = (uint64_t)Mutable;
                      v202 = 0u;
                      v203 = 0u;
                      v204 = 0u;
                      v205 = 0u;
                      v52 = v45;
                      v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v202, &v215, 16);
                      if (v53)
                      {
                        v54 = *(_QWORD *)v203;
                        v55 = 0.0;
                        do
                        {
                          for (i = 0; i != v53; ++i)
                          {
                            if (*(_QWORD *)v203 != v54)
                              objc_enumerationMutation(v52);
                            v57 = *(const void **)(*((_QWORD *)&v202 + 1) + 8 * i);
                            if (IOHIDEventGetType() == 32)
                            {
                              IOHIDEventGetFloatValue();
                              v55 = v58;
                            }
                            else
                            {
                              v59 = (const void *)_UIEventHIDPathIndexForDigitizerEvent();
                              CFDictionaryAddValue((CFMutableDictionaryRef)__areDigitizerEventsCoalescable_children1EventMap, v59, v57);
                            }
                          }
                          v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v202, &v215, 16);
                        }
                        while (v53);
                      }
                      else
                      {
                        v55 = 0.0;
                      }

                      v200 = 0u;
                      v201 = 0u;
                      v198 = 0u;
                      v199 = 0u;
                      obj = v172;
                      v173 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v198, &v211, 16);
                      if (v173)
                      {
                        v170 = *(_QWORD *)v199;
                        while (2)
                        {
                          for (j = 0; j != v173; ++j)
                          {
                            if (*(_QWORD *)v199 != v170)
                              objc_enumerationMutation(obj);
                            if (IOHIDEventGetType() == 32)
                            {
                              IOHIDEventGetFloatValue();
                              if (v55 != v88)
                                goto LABEL_199;
                            }
                            else
                            {
                              v89 = (const void *)_UIEventHIDPathIndexForDigitizerEvent();
                              if (!CFDictionaryGetValue((CFDictionaryRef)__areDigitizerEventsCoalescable_children1EventMap, v89)|| (v90 = _UIEventHIDTouchEdgeTypeForHIDEvent(), v90 != _UIEventHIDTouchEdgeTypeForHIDEvent())|| (v91 = IOHIDEventGetIntegerValue() != 0, ((v91 ^ (IOHIDEventGetIntegerValue() != 0)) & 1) != 0))
                              {
LABEL_199:
                                v92 = 0;
                                goto LABEL_201;
                              }
                            }
                          }
                          v173 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v198, &v211, 16);
                          v92 = 1;
                          if (v173)
                            continue;
                          break;
                        }
                      }
                      else
                      {
                        v92 = 1;
                      }
LABEL_201:

                      CFDictionaryRemoveAllValues((CFMutableDictionaryRef)__areDigitizerEventsCoalescable_children1EventMap);
                      if ((v92 & 1) != 0)
                      {
                        if (!v175)
                        {
                          _UIEventHIDUIWindowForHIDEvent();
                          v158 = (void *)objc_claimAutoreleasedReturnValue();
                          -[UIEventEnvironment _touchesEventForWindow:](a1, v158);
                          obja = (id)objc_claimAutoreleasedReturnValue();
                          v93 = IOHIDEventGetTimeStamp();
                          v160 = _UIMediaTimeForMachTime(v93);
                          _UIEventHIDUIWindowForHIDEvent();
                          v161 = (void *)objc_claimAutoreleasedReturnValue();
                          cf = -[UIEventEnvironment _touchMapForWindow:](a1, v161);
                          if (cf)
                          {
                            CFRetain(cf);
                            CFAutorelease(cf);
                          }
                          objc_msgSend(obja, "_moveCoalescedTouchesFromHidEvent:toHidEvent:", v8, v17, v158);
                          theArray = (const __CFArray *)IOHIDEventGetChildren();
                          if (theArray)
                          {
                            Count = CFArrayGetCount(theArray);
                            if (Count)
                            {
                              v94 = 0;
                              do
                              {
                                v95 = v94;
                                ValueAtIndex = CFArrayGetValueAtIndex(theArray, v94);
                                keyb = (void *)_UIEventHIDPathIndexForDigitizerEvent();
                                objc_msgSend(obja, "_lastPendingCoalescedTouchForIndex:hidEvent:", keyb, v17);
                                v96 = (void *)objc_claimAutoreleasedReturnValue();
                                v97 = cf == 0;
                                if (v96)
                                  v97 = 1;
                                if (!v97)
                                {
                                  CFDictionaryGetValue((CFDictionaryRef)cf, keyb);
                                  v96 = (void *)objc_claimAutoreleasedReturnValue();
                                }
                                if (v96)
                                {
                                  v98 = v96;
                                  objc_msgSend(v96, "_clone");
                                  v99 = objc_claimAutoreleasedReturnValue();
                                  objc_msgSend((id)v99, "_setPreviousTouch:", v98);
                                  objc_msgSend((id)v99, "setTimestamp:", v160);
                                  objc_msgSend((id)v99, "window");
                                  v100 = (void *)objc_claimAutoreleasedReturnValue();
                                  objc_msgSend(v100, "screen");
                                  v101 = (void *)objc_claimAutoreleasedReturnValue();
                                  _UITouchSetBasicTouchPropertiesFromEvent((void *)v99, v101, (uint64_t)v8, (uint64_t)ValueAtIndex);

                                  objc_msgSend(v98, "window");
                                  v102 = (void *)objc_claimAutoreleasedReturnValue();
                                  v211 = *MEMORY[0x1E0C9D820];
                                  v218 = 0;
                                  v216 = 0u;
                                  v217 = 0u;
                                  v215 = 0u;
                                  __baseTouchLocationsForChild((uint64_t)&v215, (uint64_t)ValueAtIndex, (uint64_t)v8, v102, v99, (double *)&v211, 0);
                                  -[UIWindow _fbsScene]((id *)v161);
                                  v103 = (void *)objc_claimAutoreleasedReturnValue();
                                  v104 = _UIConvertScenePoint3DToWindow(v103, v102, *(double *)&v217, *((double *)&v217 + 1));
                                  v171 = v105;
                                  v174 = v104;
                                  *(double *)&v215 = v104;
                                  *((double *)&v215 + 1) = v105;
                                  v218 = v106;
                                  v107 = _UIConvertScenePoint3DToWindow(v103, v102, *(double *)&v216, *((double *)&v216 + 1));
                                  v165 = v108;
                                  v166 = v107;
                                  objc_msgSend(v98, "locationInView:", 0);
                                  v110 = v109;
                                  v112 = v111;
                                  objc_msgSend(v98, "preciseLocationInView:", 0);
                                  v162 = v113;
                                  v115 = v114;
                                  IOHIDEventGetFloatValue();
                                  v117 = v116;
                                  objc_msgSend(v98, "_pressure");
                                  v119 = v118;
                                  IOHIDEventGetFloatValue();
                                  v121 = v120;
                                  objc_msgSend(v98, "_rollAngle");
                                  if (v174 == v110
                                    && v171 == v112
                                    && v166 == v115
                                    && v165 == v162
                                    && v121 == v122
                                    && v117 == v119)
                                  {
                                    v123 = 2;
                                  }
                                  else
                                  {
                                    if (v99)
                                    {
                                      *(_OWORD *)(v99 + 128) = *(_OWORD *)(v99 + 112);
                                      *(_OWORD *)(v99 + 160) = *(_OWORD *)(v99 + 144);
                                      *(double *)(v99 + 112) = v174;
                                      *(double *)(v99 + 120) = v171;
                                      *(double *)(v99 + 144) = v166;
                                      *(double *)(v99 + 152) = v165;
                                      v124 = *(double *)(v99 + 224);
                                      if (v124 < v117)
                                        v124 = v117;
                                      *(_QWORD *)(v99 + 176) = *(_QWORD *)(v99 + 216);
                                      *(double *)(v99 + 216) = v117;
                                      *(double *)(v99 + 224) = v124;
                                    }
                                    -[UITouch _setRollAngle:resetPrevious:](v99, 0, v121);
                                    v123 = 1;
                                  }
                                  objc_msgSend((id)v99, "setPhase:", v123);
                                  -[UITouch _updateWithChildEvent:](v99);
                                  objc_msgSend(obja, "_addCoalescedTouch:forIndex:hidEvent:", v99, keyb, v17);

                                  v96 = v98;
                                }

                                v94 = v95 + 1;
                              }
                              while (Count != v95 + 1);
                            }
                          }

                        }
                        goto LABEL_144;
                      }
                    }
                    else
                    {
LABEL_183:

                    }
                  }
                  BKSHIDEventGetDigitizerAttributes();
                  v72 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v176 == objc_msgSend(v72, "contextID"))
                  {
                    IOHIDEventGetChildren();
                    v73 = (void *)objc_claimAutoreleasedReturnValue();
                    if (!objc_msgSend(v73, "count"))
                    {

LABEL_293:
                      goto LABEL_230;
                    }
                    objc_msgSend(v73, "objectAtIndexedSubscript:", 0);

                    if (IOHIDEventGetIntegerValue())
                    {
                      if (objc_msgSend((id)UIApp, "_supportsIndirectInputEvents")
                        && (v74 = _UIEventHIDGetDescendantPointerEvent(v17)) != 0)
                      {
                        if (_UIEventHIDGetPointerEventSource(v74) == 4)
                          v75 = 0;
                        else
                          v75 = 3;
                      }
                      else
                      {
                        v75 = IOHIDEventGetIntegerValue() == 0;
                      }
                    }
                    else
                    {
                      v75 = 2;
                    }
                    _UIEventHIDPathAttributesForChild(v72);
                    v80 = (void *)objc_claimAutoreleasedReturnValue();
                    v81 = objc_msgSend(v80, "locus");

                    v83 = v75 != v178 || v81 != v175;
                    if (!v83)
                      goto LABEL_293;
                  }
                  v84 = v191;
                  if (!v191)
                  {
                    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                    v84 = (void *)objc_claimAutoreleasedReturnValue();
                  }
                  v191 = v84;
                  objc_msgSend(v84, "addObject:", v17);

LABEL_177:
                  ++v195;
                  v17 = (uint64_t)v8;
                }
                else
                {
                  IOHIDEventGetChildren();
                  v76 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend(v76, "count"))
                  {
                    objc_msgSend(v76, "objectAtIndexedSubscript:", 0);

                    if (IOHIDEventGetIntegerValue())
                    {
                      if (objc_msgSend((id)UIApp, "_supportsIndirectInputEvents")
                        && (v77 = _UIEventHIDGetDescendantPointerEvent(v17)) != 0)
                      {
                        v78 = _UIEventHIDGetPointerEventSource(v77);
                        v79 = 3;
                        if (v78 == 4)
                          v79 = 0;
                      }
                      else
                      {
                        v79 = IOHIDEventGetIntegerValue() == 0;
                      }
                    }
                    else
                    {
                      v79 = 2;
                    }
                    v178 = v79;
                    BKSHIDEventGetDigitizerAttributes();
                    v85 = (void *)objc_claimAutoreleasedReturnValue();
                    _UIEventHIDPathAttributesForChild(v85);
                    v86 = (void *)objc_claimAutoreleasedReturnValue();
                    v175 = objc_msgSend(v86, "locus");

                  }
LABEL_144:
                  ++v195;
                }
                v16 = v192 - 1;
                v8 = (const void *)v17;
                if (v192 <= 0)
                  goto LABEL_231;
                continue;
              }
              *(_QWORD *)&v215 = 0;
              *(_QWORD *)&v211 = 0;
              *(_QWORD *)&v202 = 0;
              _UIEventHIDGetTransformEventComponents((uint64_t)v8, &v215, &v211, &v202);
              if (!(_QWORD)v215 && !(_QWORD)v211 && !(_QWORD)v202)
                goto LABEL_230;
              if ((_QWORD)v215)
              {
                v183 = IOHIDEventGetPhase();
                if ((_QWORD)v211)
                  goto LABEL_66;
LABEL_105:
                key = 0;
              }
              else
              {
                v183 = 0;
                if (!(_QWORD)v211)
                  goto LABEL_105;
LABEL_66:
                key = IOHIDEventGetPhase();
              }
              if ((_QWORD)v202)
                v60 = IOHIDEventGetPhase();
              else
                v60 = 0;
              v61 = _UIEventHIDTransformPhaseForComponentPhases(v183, key, v60);
              *(_QWORD *)&v198 = 0;
              v209 = 0;
              v210 = 0;
              _UIEventHIDGetTransformEventComponents(v17, &v198, &v210, &v209);
              if (!(_QWORD)v198 && !v210 && !v209)
                goto LABEL_230;
              if ((_QWORD)v198)
              {
                v62 = IOHIDEventGetPhase();
                if (v210)
                  goto LABEL_114;
LABEL_116:
                v63 = 0;
              }
              else
              {
                v62 = 0;
                if (!v210)
                  goto LABEL_116;
LABEL_114:
                v63 = IOHIDEventGetPhase();
              }
              if (v209)
              {
                v64 = IOHIDEventGetPhase();
                v65 = v209;
              }
              else
              {
                v65 = 0;
                v64 = 0;
              }
              if (v61 != _UIEventHIDTransformPhaseForComponentPhases(v62, v210, v65)
                || v183 != v62
                || v63 != (_DWORD)key
                || v64 != (_DWORD)v60)
              {
                goto LABEL_230;
              }
              v66 = IOHIDEventGetTimeStamp();
              v67 = IOHIDEventGetTimeStamp();
              *(_QWORD *)&v215 = 0;
              if (v66 <= v67)
                v68 = (uint64_t)v8;
              else
                v68 = v17;
              if (v66 <= v67)
                v69 = v17;
              else
                v69 = (uint64_t)v8;
              *(_QWORD *)&v211 = 0;
              *(_QWORD *)&v202 = 0;
              _UIEventHIDGetTransformEventComponents(v69, &v215, &v211, &v202);
              *(_QWORD *)&v198 = 0;
              v209 = 0;
              v210 = 0;
              _UIEventHIDGetTransformEventComponents(v68, &v198, &v210, &v209);
              v70 = (const void *)IOHIDEventCreateCopy();
              v207 = 0;
              v208 = 0;
              v206 = 0;
              _UIEventHIDGetTransformEventComponents((uint64_t)v70, &v208, &v207, &v206);
              if ((_QWORD)v215 && (_QWORD)v198 && v208)
              {
                IOHIDEventGetDoubleValue();
                IOHIDEventGetDoubleValue();
                IOHIDEventSetDoubleValue();
              }
              if ((_QWORD)v211 && v210 && v207)
              {
                IOHIDEventGetDoubleValue();
                IOHIDEventGetDoubleValue();
                IOHIDEventSetDoubleValue();
              }
              if ((_QWORD)v202 && v209 && v206)
              {
                IOHIDEventGetDoubleValue();
                IOHIDEventGetDoubleValue();
                IOHIDEventGetDoubleValue();
                IOHIDEventGetDoubleValue();
                IOHIDEventSetDoubleValue();
                IOHIDEventSetDoubleValue();
              }
              v30 = CFAutorelease(v70);
            }
            break;
          }
          v17 = (uint64_t)v30;
          goto LABEL_144;
        }
      }
      v191 = 0;
LABEL_229:
      v195 = 1;
LABEL_230:
      v17 = (uint64_t)v8;
LABEL_231:
      if (v17)
      {
        v8 = (const void *)v17;
LABEL_233:
        CFRetain(v8);
      }
      else
      {
        v8 = 0;
      }
      objc_msgSend(v6, "removeObjectsInRange:", v190 - v195);
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      objc_msgSend(v191, "reverseObjectEnumerator");
      v125 = (void *)objc_claimAutoreleasedReturnValue();
      v126 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v211, &v215, 16);
      if (v126)
      {
        v127 = *(_QWORD *)v212;
        do
        {
          for (k = 0; k != v126; ++k)
          {
            if (*(_QWORD *)v212 != v127)
              objc_enumerationMutation(v125);
            objc_msgSend(v6, "addObject:", *(_QWORD *)(*((_QWORD *)&v211 + 1) + 8 * k));
          }
          v126 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v211, &v215, 16);
        }
        while (v126);
      }

      v10 = objc_retainAutorelease(v187);
      __applySynthesizedTouchTranslationAndModifyIfNeeded((uint64_t)v8);

LABEL_243:
      v197 = v10;
      if (!v8)
      {
        v132 = 0.0;
        goto LABEL_269;
      }
      v129 = (void *)MEMORY[0x186DC9484]();
      v130 = IOHIDEventGetType();
      v131 = IOHIDEventGetTimeStamp();
      v132 = _UIMediaTimeForMachTime(v131);
      v133 = _UIUpdateCycleEnabled();
      if (v130 == 11)
        v134 = v133;
      else
        v134 = 1;
      if ((v134 & 1) == 0 && *(double *)(a1 + 64) > 0.0)
      {
        IOHIDEventGetChildren();
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v135, "count"))
          goto LABEL_260;
        objc_msgSend(v135, "objectAtIndexedSubscript:", 0);
        v136 = (void *)objc_claimAutoreleasedReturnValue();
        if (IOHIDEventGetIntegerValue())
        {
          if (!objc_msgSend((id)UIApp, "_supportsIndirectInputEvents")
            || (v137 = _UIEventHIDGetDescendantPointerEvent((uint64_t)v8)) == 0)
          {
            v138 = IOHIDEventGetIntegerValue() == 0;

            if (!v138)
              goto LABEL_258;
            goto LABEL_260;
          }
          if (_UIEventHIDGetPointerEventSource(v137) == 4)
          {

LABEL_258:
            if ((objc_msgSend(MEMORY[0x1E0CD28B0], "lowLatency") & 1) == 0)
              objc_msgSend(MEMORY[0x1E0CD28B0], "setEarliestAutomaticCommitTime:", CACurrentMediaTime() + *(double *)(a1 + 64));
LABEL_260:

            goto LABEL_261;
          }
        }

        goto LABEL_260;
      }
LABEL_261:
      __dispatchPreprocessedEventFromEventQueue((uint64_t)v8, v179, a1);
      if ((_UIUpdateCycleEnabled() & 1) == 0
        && objc_msgSend(MEMORY[0x1E0CD28B0], "currentState")
        && objc_msgSend(MEMORY[0x1E0CD28B0], "lowLatency"))
      {
        objc_msgSend(MEMORY[0x1E0CD28B0], "commitTime");
        if (v139 > 0.0)
          objc_msgSend(MEMORY[0x1E0CD28B0], "setCommitTime:", 0.0);
        objc_msgSend(MEMORY[0x1E0CD28B0], "earliestAutomaticCommitTime");
        if (v140 > 0.0)
          objc_msgSend(MEMORY[0x1E0CD28B0], "setEarliestAutomaticCommitTime:", 0.0);
      }
      CFRelease(v8);
      objc_autoreleasePoolPop(v129);
LABEL_269:
      if (v197)
      {
        v141 = (void *)MEMORY[0x186DC9484]();
        objc_msgSend(v197, "count");
        kdebug_trace();
        *(_QWORD *)&v198 = 0;
        *((_QWORD *)&v198 + 1) = &v198;
        *(_QWORD *)&v199 = 0x3032000000;
        *((_QWORD *)&v199 + 1) = __Block_byref_object_copy__39;
        *(_QWORD *)&v200 = __Block_byref_object_dispose__40;
        *((_QWORD *)&v200 + 1) = 0;
        v211 = 0u;
        v212 = 0u;
        v213 = 0u;
        v214 = 0u;
        v142 = v197;
        v143 = objc_msgSend(v142, "countByEnumeratingWithState:objects:count:", &v211, &v215, 16);
        if (v143)
        {
          v144 = *(_QWORD *)v212;
          do
          {
            for (m = 0; m != v143; ++m)
            {
              if (*(_QWORD *)v212 != v144)
                objc_enumerationMutation(v142);
              v146 = (void *)MEMORY[0x1E0CB37E8];
              BKSHIDEventGetBaseAttributes();
              v147 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v146, "numberWithUnsignedInt:", objc_msgSend(v147, "contextID"));
              v148 = (void *)objc_claimAutoreleasedReturnValue();

              *(_QWORD *)&v202 = MEMORY[0x1E0C809B0];
              *((_QWORD *)&v202 + 1) = 3221225472;
              *(_QWORD *)&v203 = ____dispatchEstimationUpdateEvents_block_invoke;
              *((_QWORD *)&v203 + 1) = &unk_1E16DF6C8;
              *(_QWORD *)&v205 = a1;
              v149 = v148;
              *(_QWORD *)&v204 = v149;
              *((_QWORD *)&v204 + 1) = &v198;
              BKSHIDEventEnumerateUpdatesWithBlock();

            }
            v143 = objc_msgSend(v142, "countByEnumeratingWithState:objects:count:", &v211, &v215, 16);
          }
          while (v143);
        }

        v150 = *(void **)(*((_QWORD *)&v198 + 1) + 40);
        if (v150)
        {
          if (v132 < 0.0)
          {
            v151 = IOHIDEventGetTimeStamp();
            v132 = _UIMediaTimeForMachTime(v151);
            v150 = *(void **)(*((_QWORD *)&v198 + 1) + 40);
          }
          -[UIEventEnvironment _dispatchAndRemoveStaleEstimationUpdateRecordsWithEventTime:upToRecord:](a1, v150, v132);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v198 + 1) + 40), "hasRemainingUpdates") & 1) == 0)
            -[UIEventEnvironment _removeEstimatedTouchRecord:](a1, *(void **)(*((_QWORD *)&v198 + 1) + 40));
        }
        _Block_object_dispose(&v198, 8);

        kdebug_trace();
        objc_autoreleasePoolPop(v141);
      }

      objc_autoreleasePoolPop(context);
      v152 = _UIUpdateCycleEnabled();
      v153 = --v194;
      if ((v152 & 1) != 0)
      {
        if (!v153)
          break;
      }
      else
      {
        v154 = _UIApplicationFlushRunLoopCATransactionIfTooLate(v177);
        if (v194)
          v155 = v154;
        else
          v155 = 1;
        if ((v155 & 1) != 0)
          break;
      }
    }
    while (objc_msgSend(v186, "count"));
  }
  result = _UIUpdateCycleEnabled();
  if ((result & 1) == 0)
  {
    if (objc_msgSend(v186, "count"))
    {
      v157 = v177[20];
      if (v157)
        CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(v157 + 24));
    }
    return objc_msgSend(MEMORY[0x1E0CD28B0], "finishFrameWithToken:", v179);
  }
  return result;
}

void sub_1852061D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void _afterCACommitHandler(uint64_t a1, uint64_t a2, void *a3)
{
  __CFRunLoop *Main;
  id *v5;

  if ((_UIUpdateCycleEnabled() & 1) == 0)
  {
    v5 = a3;
    if (_cleanUpAfterCAFlushAndRunDeferredBlocks(v5, 1))
    {
      _UIApplicationDrainManagedAutoreleasePool();
      objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
      _cleanUpAfterCAFlushAndRunDeferredBlocks(v5, 0);
      if (objc_msgSend(v5[12], "count"))
      {
        Main = CFRunLoopGetMain();
        CFRunLoopWakeUp(Main);
      }
    }

  }
}

uint64_t _UIUpdateCycleEnabled()
{
  if (qword_1ECD7F580 != -1)
    dispatch_once(&qword_1ECD7F580, &__block_literal_global_414);
  return _MergedGlobals_1175[0];
}

void __applySynthesizedTouchTranslationAndModifyIfNeeded(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  CGAffineTransform *v7;
  int v8;
  float64x2_t v9;
  double v10;
  void *v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  char v16;
  float64x2_t v17;
  double v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD v22[4];
  id v23;
  _DWORD *v24;
  float64x2_t v25;
  CGAffineTransform v26;
  CGAffineTransform v27;
  CGAffineTransform v28;
  CGAffineTransform v29;
  CGAffineTransform v30;
  CGAffineTransform v31;
  CGAffineTransform v32;
  CGAffineTransform v33;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[7];
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend((id)UIApp, "_supportsIndirectInputEvents");
  if (a1 && (v2 & 1) == 0 && IOHIDEventGetType() == 11 && _UIEventHIDShouldTransformEvent())
  {
    v48 = 0;
    v49 = &v48;
    v50 = 0x2020000000;
    v51 = 0;
    v44 = 0;
    v45 = &v44;
    v46 = 0x2020000000;
    v47 = 0;
    v40 = 0;
    v41 = &v40;
    v42 = 0x2020000000;
    v43 = 0;
    v3 = MEMORY[0x1E0C809B0];
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3221225472;
    v39[2] = ____applySynthesizedTouchTranslationAndModifyIfNeeded_block_invoke;
    v39[3] = &unk_1E16DF840;
    v39[4] = &v48;
    v39[5] = &v44;
    v39[6] = &v40;
    _UIEventHIDEnumerateChildren(a1, 0, v39);
    if (v49[3] && v45[3] && v41[3])
    {
      v35 = 0;
      v36 = &v35;
      v37 = 0x2020000000;
      v38 = 0;
      v4 = v49[3];
      v34[0] = v3;
      v34[1] = 3221225472;
      v34[2] = ____applySynthesizedTouchTranslationAndModifyIfNeeded_block_invoke_2;
      v34[3] = &unk_1E16B1D90;
      v34[4] = &v35;
      _UIEventHIDEnumerateChildren(v4, 1, v34);
      v5 = (_OWORD *)v36[3];
      if (v5)
      {
        v6 = v5[1];
        *(_OWORD *)&v33.a = *v5;
        *(_OWORD *)&v33.c = v6;
        *(_OWORD *)&v33.tx = v5[2];
        memset(&v32, 0, sizeof(v32));
        _UIEventGetAffineTransformForScaleEvent(v49[3], (uint64_t)&v32);
        memset(&v31, 0, sizeof(v31));
        CGAffineTransformMakeTranslation(&v31, v32.tx, v32.ty);
        memset(&v30, 0, sizeof(v30));
        v28 = v31;
        CGAffineTransformInvert(&v29, &v28);
        v28 = v32;
        CGAffineTransformConcat(&v30, &v28, &v29);
        v27 = v33;
        memset(&v28, 0, sizeof(v28));
        v26 = v31;
        v7 = CGAffineTransformConcat(&v28, &v27, &v26);
        v24 = v22;
        MEMORY[0x1E0C80A78](v7);
        _UIEventHIDUIWindowForHIDEvent();
        v23 = (id)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v23, "_contextId");
        IOHIDEventGetFloatValue();
        v25 = v9;
        IOHIDEventGetFloatValue();
        v25 = vaddq_f64(*(float64x2_t *)&v28.tx, vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v28.a, v25.f64[0]), vmulq_n_f64(*(float64x2_t *)&v28.c, v10)));
        IOHIDEventSetFloatValue();
        IOHIDEventSetFloatValue();
        BKSHIDEventGetDigitizerAttributes();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v22[3] = v8;
        _UIEventHIDPathAttributesForChild(v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = _UIEventHIDPathIndexForDigitizerEvent();
        v14 = objc_msgSend(v12, "touchIdentifier");
        v15 = objc_msgSend(v12, "userIdentifier");
        v16 = objc_msgSend(v12, "locus");
        objc_msgSend(v12, "zGradient");
        v20 = __PAIR64__(v14, v13);
        LODWORD(v21) = v15;
        BYTE4(v21) = v16;
        *(_WORD *)((char *)&v21 + 5) = 0;
        HIBYTE(v21) = 0;
        IOHIDEventGetFloatValue();
        v25 = v17;
        IOHIDEventGetFloatValue();
        v25 = vaddq_f64(*(float64x2_t *)&v28.tx, vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v28.a, v25.f64[0]), vmulq_n_f64(*(float64x2_t *)&v28.c, v18)));
        IOHIDEventSetFloatValue();
        IOHIDEventSetFloatValue();
        _UIEventHIDPathAttributesForChild(v11);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        _UIEventHIDPathIndexForDigitizerEvent();
        objc_msgSend(v19, "touchIdentifier", v20, v21);
        objc_msgSend(v19, "userIdentifier");
        objc_msgSend(v19, "locus");
        objc_msgSend(v19, "zGradient");
        CFAbsoluteTimeGetCurrent();
        BKSHIDEventSetDigitizerInfoWithSubEventInfos();

      }
      _Block_object_dispose(&v35, 8);
    }
    _Block_object_dispose(&v40, 8);
    _Block_object_dispose(&v44, 8);
    _Block_object_dispose(&v48, 8);
  }
}

void sub_185206AA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v1 + 472), 8);
  _Block_object_dispose((const void *)(v2 - 208), 8);
  _Block_object_dispose((const void *)(v2 - 176), 8);
  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

void __baseTouchLocationsForChild(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double *a6, uint64_t a7)
{
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  double v33;
  double v34;
  void *v35;
  void *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  void *v49;
  double (*v50)(double, double);
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  CGFloat v67;
  double v68;
  CGFloat v69;
  double v70;
  CGFloat v71;
  double v72;
  CGFloat v73;
  double v74;
  CGFloat v75;
  double v76;
  CGFloat v77;
  double Width;
  double v79;
  CGFloat v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  CGFloat x;
  CGFloat y;
  CGFloat v89;
  CGFloat v90;
  double v91;
  double v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  double v97;
  double v98;
  CGFloat v99;
  CGFloat v100;
  double v101;
  double Height;
  double v103;
  double v104;
  double v105;
  id v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;

  BKSHIDEventGetDigitizerAttributes();
  v106 = (id)objc_claimAutoreleasedReturnValue();
  IOHIDEventGetFloatValue();
  v14 = v13;
  IOHIDEventGetFloatValue();
  v16 = v15;
  IOHIDEventGetFloatValue();
  _UIEventHIDPathAttributesForChild(v106);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if (v17)
  {
    objc_msgSend(v17, "preciseLocationX");
    v20 = v19;
    objc_msgSend(v18, "preciseLocationY");
  }
  else
  {
    IOHIDEventGetFloatValue();
    v20 = v22;
    IOHIDEventGetFloatValue();
  }
  v23 = v21;

  *(double *)a1 = v14;
  *(double *)(a1 + 8) = v16;
  *(double *)(a1 + 16) = v20;
  *(double *)(a1 + 24) = v23;
  v24 = *MEMORY[0x1E0C9D538];
  *(_OWORD *)(a1 + 32) = *MEMORY[0x1E0C9D538];
  *(_QWORD *)(a1 + 48) = 0;
  if (a7)
  {
    *(double *)a7 = v14;
    *(double *)(a7 + 8) = v16;
    *(double *)(a7 + 16) = v20;
    *(double *)(a7 + 24) = v23;
    *(_OWORD *)(a7 + 32) = v24;
    *(_QWORD *)(a7 + 48) = 0;
  }
  v25 = objc_msgSend(v106, "source");
  if (_EventWindowExpectsExternalTouchInput(a4) && IOHIDEventGetIntegerValue())
  {
    if (objc_msgSend((id)UIApp, "_supportsIndirectInputEvents")
      && (v26 = _UIEventHIDGetDescendantPointerEvent(a3)) != 0)
    {
      _UIEventHIDGetPointerEventSource(v26);
    }
    else if (!IOHIDEventGetIntegerValue())
    {
      goto LABEL_16;
    }
  }
  if (v25 == 12)
  {
LABEL_16:
    objc_msgSend(a4, "screen");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "bounds");
    if (v25 == 12)
    {
      objc_msgSend(v32, "displayConfiguration");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "currentMode");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "nativePixelSize");
      v38 = v37;
      v40 = v39;

      objc_msgSend(v32, "_rotation");
      v42 = v41;
      v43 = objc_msgSend(v32, "_interfaceOrientation");
      v44 = 0.0;
      if (v43 != 1)
      {
        if (objc_msgSend(v32, "_interfaceOrientation", 0.0) == 4)
        {
          v44 = -1.57079633;
        }
        else if (objc_msgSend(v32, "_interfaceOrientation") == 3)
        {
          v44 = 1.57079633;
        }
        else
        {
          v47 = objc_msgSend(v32, "_interfaceOrientation");
          v44 = 3.14159265;
          if (v47 != 2)
            v44 = 0.0;
        }
      }
      v48 = v44 - v42;
      if (fabs(v48 + -1.57079633) >= 2.22044605e-16)
      {
        if (fabs(v48 + -3.14159265) >= 2.22044605e-16 && fabs(v48 + 3.14159265) >= 2.22044605e-16)
        {
          if (fabs(v48 + 1.57079633) >= 2.22044605e-16)
            goto LABEL_35;
          v49 = &__block_literal_global_83_0;
        }
        else
        {
          v49 = &__block_literal_global_82_3;
        }
      }
      else
      {
        v49 = &__block_literal_global_81_4;
      }
      v50 = (double (*)(double, double))*((_QWORD *)v49 + 2);
      v14 = v50(v14, v16);
      v16 = v51;
      *(double *)a1 = v14;
      *(double *)(a1 + 8) = v51;
      v20 = v50(v20, v23);
      v23 = v52;
    }
    else
    {
      v38 = v33;
      v40 = v34;
      if (dyld_program_sdk_at_least())
        v40 = v38;
    }
LABEL_35:
    v53 = v14 * v38;
    v54 = v16 * v40;
    *(double *)a1 = v53;
    *(double *)(a1 + 8) = v16 * v40;
    v55 = v20 * v38;
    v56 = v23 * v40;
    *(double *)(a1 + 16) = v20 * v38;
    *(double *)(a1 + 24) = v56;
    objc_msgSend(a4, "_focusSystem");
    v57 = (void *)objc_claimAutoreleasedReturnValue();

    if (v57 || v25 == 12)
    {
      v58 = a4;
      objc_msgSend(v58, "_focusResponder");
      v59 = (id)objc_claimAutoreleasedReturnValue();
      if (v59)
        goto LABEL_42;
    }
    else
    {
      v58 = 0;
    }
    v60 = v58;
    +[UIWindow _applicationKeyWindow](UIWindow, "_applicationKeyWindow");
    v58 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v58, "firstResponder");
    v61 = objc_claimAutoreleasedReturnValue();
    if (v61)
    {
      v59 = (id)v61;
    }
    else
    {
      v59 = v58;
      v58 = v59;
      if (!v59)
      {
        if (a5)
        {
LABEL_44:
          v86 = *(double *)(a5 + 408);
          v85 = *(double *)(a5 + 416);
          if (a6)
          {
            *a6 = v86;
            a6[1] = v85;
LABEL_52:
            v91 = *a6;
            *(double *)a1 = v53 + *a6;
            *(double *)(a1 + 8) = v54 + v85;
            v92 = v55 + v91;
LABEL_58:
            *(double *)(a1 + 16) = v92;
            *(double *)(a1 + 24) = v56 + v85;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)a1;

            goto LABEL_59;
          }
          goto LABEL_57;
        }
LABEL_48:
        if (a6)
        {
          v85 = a6[1];
          goto LABEL_52;
        }
        v86 = *MEMORY[0x1E0C9D820];
        v85 = *(double *)(MEMORY[0x1E0C9D820] + 8);
LABEL_57:
        *(double *)a1 = v53 + v86;
        *(double *)(a1 + 8) = v54 + v85;
        v92 = v55 + v86;
        goto LABEL_58;
      }
    }
LABEL_42:
    objc_msgSend(v59, "_responderExternalTouchRectForWindow:", v58);
    v63 = v62;
    v104 = v54;
    v65 = v64;
    v67 = v66;
    v95 = v68;
    v96 = v66;
    v69 = v68;
    objc_msgSend(v58, "frame");
    v71 = v70;
    v93 = v72;
    v94 = v70;
    v97 = v55;
    v98 = v56;
    v73 = v72;
    v75 = v74;
    v100 = v74;
    v101 = v53;
    v77 = v76;
    v99 = v76;
    v107.origin.x = v63;
    v107.origin.y = v65;
    v107.size.width = v67;
    v107.size.height = v69;
    Width = CGRectGetWidth(v107);
    v108.origin.x = v71;
    v108.origin.y = v73;
    v108.size.width = v75;
    v108.size.height = v77;
    v79 = v101 * (Width / CGRectGetWidth(v108));
    *(double *)a1 = v79;
    v109.origin.x = v63;
    v109.origin.y = v65;
    v109.size.width = v96;
    v109.size.height = v95;
    Height = CGRectGetHeight(v109);
    v110.origin.x = v94;
    v110.origin.y = v93;
    v110.size.width = v100;
    v110.size.height = v99;
    v80 = CGRectGetHeight(v110);
    v111.origin.y = v65;
    v81 = v65 + v104 * (Height / v80);
    v103 = v63 + v79;
    v105 = v81;
    *(double *)a1 = v63 + v79;
    *(double *)(a1 + 8) = v81;
    v111.origin.x = v63;
    v111.size.width = v96;
    v111.size.height = v95;
    v82 = CGRectGetWidth(v111);
    v112.origin.x = v94;
    v112.origin.y = v93;
    v112.size.width = v100;
    v112.size.height = v99;
    v83 = v97 * (v82 / CGRectGetWidth(v112));
    *(double *)(a1 + 16) = v83;
    v113.origin.x = v63;
    v113.origin.y = v65;
    v113.size.width = v96;
    v113.size.height = v95;
    v84 = CGRectGetHeight(v113);
    v114.origin.x = v94;
    v114.origin.y = v93;
    v114.size.height = v99;
    v114.size.width = v100;
    v55 = v63 + v83;
    v56 = v65 + v98 * (v84 / CGRectGetHeight(v114));
    *(double *)(a1 + 16) = v63 + v83;
    *(double *)(a1 + 24) = v56;
    if (a5)
    {
      v53 = v103;
      v54 = v105;
      goto LABEL_44;
    }
    objc_msgSend(v59, "_responderSelectionRectForWindow:", v58);
    x = v115.origin.x;
    y = v115.origin.y;
    v89 = v115.size.width;
    v90 = v115.size.height;
    if (!CGRectIsNull(v115))
    {
      v116.origin.x = x;
      v116.origin.y = y;
      v116.size.width = v89;
      v116.size.height = v90;
      v53 = v103;
      v86 = CGRectGetMidX(v116) - v103;
      if (a6)
      {
        *a6 = v86;
        v117.origin.x = x;
        v117.origin.y = y;
        v117.size.width = v89;
        v117.size.height = v90;
        v54 = v105;
        v85 = CGRectGetMidY(v117) - v105;
        a6[1] = v85;
        goto LABEL_52;
      }
      v118.origin.x = x;
      v118.origin.y = y;
      v118.size.width = v89;
      v118.size.height = v90;
      v54 = v105;
      v85 = CGRectGetMidY(v118) - v105;
      goto LABEL_57;
    }
    v53 = v103;
    v54 = v105;
    goto LABEL_48;
  }
  _UIEventHIDPathAttributesForChild(v106);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v27;
  if (v27)
  {
    objc_msgSend(v27, "hitTestLocationX");
    v30 = v29;
    objc_msgSend(v28, "hitTestLocationY");
  }
  else
  {
    IOHIDEventGetFloatValue();
    v30 = v45;
    IOHIDEventGetFloatValue();
  }
  v46 = v31;

  *(_QWORD *)(a1 + 32) = v30;
  *(_QWORD *)(a1 + 40) = v46;
LABEL_59:

}

id _UIEventHIDPathAttributesForChild(void *a1)
{
  id v1;
  uint64_t IntegerValue;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  id v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  IntegerValue = IOHIDEventGetIntegerValue();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend(v1, "pathAttributes", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v8, "pathIndex") == IntegerValue)
        {
          v9 = v8;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v5)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_11:

  return v9;
}

BOOL _EventWindowExpectsExternalTouchInput(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "traitCollection");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  return (v2 & 0xFFFFFFFFFFFFFFFELL) == 2;
}

void sub_185207704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185209F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18520A250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t _UICollectionViewShouldEnlargeLayoutAttributesQueryForEstimatedSizes()
{
  if (dyld_program_sdk_at_least())
    return (byte_1ECD75F34 != 0) & ~_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_CollectionViewEnlargeLayoutAttributesQueryForEstimatedSizes, (uint64_t)CFSTR("CollectionViewEnlargeLayoutAttributesQueryForEstimatedSizes"));
  else
    return 1;
}

void _quantizePositionsInAnimation(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v5;
  if (_animationIsEligibleForQuantization(v7))
  {
    objc_msgSend(v7, "fromValue");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "toValue");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    _quantizedValueForValueInView(v8, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v8 == v9)
    {
      v12 = v10;
    }
    else
    {
      _quantizedValueForValueInView(v9, v6);
      v12 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21 = v12;
    if (v11 != v8 || (v13 = v7, v12 != v9))
    {
      v13 = v7;
      if (a3)
      {
        v13 = (void *)objc_msgSend(v7, "copy");

      }
      objc_msgSend(v13, "setFromValue:", v11);
      objc_msgSend(v13, "setToValue:", v21);
    }

LABEL_22:
    goto LABEL_23;
  }
  objc_opt_class();
  v13 = v7;
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_24;
  objc_msgSend(v7, "animations");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v13 = v7;
  if (objc_msgSend(v8, "indexOfObjectPassingTest:", &__block_literal_global_394) != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (a3)
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v8, "count"));
      v9 = (id)objc_claimAutoreleasedReturnValue();
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v14 = v8;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v28;
        do
        {
          for (i = 0; i != v16; ++i)
          {
            if (*(_QWORD *)v28 != v17)
              objc_enumerationMutation(v14);
            v19 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
            v26 = 0;
            _quantizePositionsInAnimation(v19, v6, &v26);
            v20 = v26;
            objc_msgSend(v9, "addObject:", v20);

          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
        }
        while (v16);
      }

      v13 = (void *)objc_msgSend(v7, "copy");
      objc_msgSend(v13, "setAnimations:", v9);
    }
    else
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      objc_msgSend(v7, "animations");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
      if (v22)
      {
        v23 = v22;
        v24 = *(_QWORD *)v32;
        do
        {
          for (j = 0; j != v23; ++j)
          {
            if (*(_QWORD *)v32 != v24)
              objc_enumerationMutation(v9);
            _quantizePositionsInAnimation(*(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * j), v6, 0);
          }
          v23 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
        }
        while (v23);
      }
      v13 = v7;
    }
    goto LABEL_22;
  }
LABEL_23:

LABEL_24:
  if (a3)
    *a3 = objc_retainAutorelease(v13);

}

uint64_t _animationIsEligibleForQuantization(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "keyPath");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "hasPrefix:", CFSTR("position"));

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t _fromValuesAreEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;

  v3 = a1;
  v4 = a2;
  v5 = objc_opt_class();
  if (v5 != objc_opt_class())
    goto LABEL_2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "animations");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "animations");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v7, "count");
    if (v9 == objc_msgSend(v8, "count"))
    {
      if (objc_msgSend(v7, "count"))
      {
        v10 = 0;
        do
        {
          objc_msgSend(v7, "objectAtIndexedSubscript:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "objectAtIndexedSubscript:", v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v6 = _fromValuesAreEqual(v11, v12);

          if ((v6 & 1) == 0)
            break;
          ++v10;
        }
        while (objc_msgSend(v7, "count") > v10);
      }
      else
      {
        v6 = 1;
      }
    }
    else
    {
      v6 = 0;
    }
    goto LABEL_14;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "fromValue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "fromValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v7, "isEqual:", v8);
LABEL_14:

    goto LABEL_15;
  }
LABEL_2:
  v6 = 0;
LABEL_15:

  return v6;
}

id _animationForValueAndKeyPath(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  uint64_t v25;
  void *v26;
  _QWORD v28[4];
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  _QWORD block[4];
  id v35;
  id v36;

  v5 = a1;
  v6 = a2;
  if (qword_1ECD82610 != -1)
    dispatch_once(&qword_1ECD82610, &__block_literal_global_31_6);
  objc_msgSend((id)qword_1ECD82608, "valueForKey:", v6);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8 = v5;
  if (!v7 || (a3 & 1) != 0)
  {
    if (v7)
    {
      if (!objc_msgSend(CFSTR("frame"), "isEqualToString:", v6))
      {
        v11 = v8;
        goto LABEL_19;
      }
      objc_msgSend(v8, "CGRectValue");
      v18 = v17;
      v20 = v19;
      v22 = v21;
      v23 = v16;
      if (v21 != 0.0 || v16 != 0.0)
      {
        v28[0] = MEMORY[0x1E0C809B0];
        v28[1] = 3221225472;
        v28[2] = ___animationForValueAndKeyPath_block_invoke_27;
        v28[3] = &unk_1E16B20D8;
        v24 = v6;
        v29 = v24;
        v30 = v18;
        v31 = v20;
        v32 = v22;
        v33 = v23;
        if (qword_1ECD82600 != -1)
        {
          dispatch_once(&qword_1ECD82600, v28);
          v24 = v29;
        }

      }
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", v18, v20);
      v25 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      +[_UIViewCALayerKeyValueMapper CALayerKeyPathForUIViewKeyPath:](_UIViewCALayerKeyValueMapper, "CALayerKeyPathForUIViewKeyPath:", v6);
      v7 = (id)objc_claimAutoreleasedReturnValue();
      +[_UIViewCALayerKeyValueMapper CALayerValueForUIViewValue:forUIViewKey:](_UIViewCALayerKeyValueMapper, "CALayerValueForUIViewValue:forUIViewKey:", v8, v6);
      v25 = objc_claimAutoreleasedReturnValue();
    }
    v11 = (void *)v25;
    v15 = v8;
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___animationForValueAndKeyPath_block_invoke;
    block[3] = &unk_1E16B1B50;
    v9 = v6;
    v35 = v9;
    v10 = v8;
    v11 = v10;
    v36 = v10;
    if (_MergedGlobals_1330 == -1)
    {
      v12 = v9;
      v13 = v10;
    }
    else
    {
      dispatch_once(&_MergedGlobals_1330, block);
      v12 = v35;
      v13 = v36;
    }

    v14 = v9;
    v15 = v7;
    v7 = v14;
  }

LABEL_19:
  objc_msgSend(MEMORY[0x1E0CD2710], "animationWithKeyPath:", v7);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setFromValue:", v11);
  objc_msgSend(v26, "setToValue:", v11);
  objc_msgSend(v26, "setDuration:", 0.0001);
  objc_msgSend(v26, "setFillMode:", *MEMORY[0x1E0CD2B58]);
  objc_msgSend(v26, "setAdditive:", a3);
  objc_msgSend(v26, "setRemovedOnCompletion:", 0);

  return v26;
}

id _normalizedAnimationKey(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = v1;
  if (objc_msgSend(v1, "containsString:", CFSTR("-")))
  {
    objc_msgSend(v1, "substringToIndex:", objc_msgSend(v1, "rangeOfString:", CFSTR("-")));
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

uint64_t _isAdditivelyAnimatableKeyForLayer(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _OWORD v8[8];

  v3 = a1;
  v4 = a2;
  if (qword_1EDDCA830 != -1)
    dispatch_once(&qword_1EDDCA830, &__block_literal_global_3322);
  _normalizedAnimationKey(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend((id)qword_1EDDCA828, "containsObject:", v5) & 1) != 0)
  {
    v6 = 1;
  }
  else if (objc_msgSend(v5, "isEqualToString:", CFSTR("transform")))
  {
    if (v4)
      objc_msgSend(v4, "transform");
    else
      memset(v8, 0, sizeof(v8));
    v6 = MEMORY[0x186DC5824](v8);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id UniqueAnimationKeyForLayer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  __CFString *v7;
  id v8;
  void *v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v6;
  objc_msgSend(v5, "animationForKey:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = v8;
  if (v9)
  {
    if (v7)
      v11 = v7;
    else
      v11 = &stru_1E16EDF20;
    v12 = 2;
    v13 = v8;
    do
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%ld%@"), v8, v12, v11);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      ++v12;
      objc_msgSend(v5, "animationForKey:", v10);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      v13 = v10;
    }
    while (v14);
  }

  return v10;
}

id _quantizedValueForValueInView(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void (**v6)(_QWORD, __n128);
  const char *v7;
  id v8;
  void *v9;
  __n128 v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  _QWORD aBlock[4];
  id v17;

  v3 = a1;
  v4 = a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___quantizedValueForValueInView_block_invoke;
  aBlock[3] = &unk_1E16B4780;
  v5 = v4;
  v17 = v5;
  v6 = (void (**)(_QWORD, __n128))_Block_copy(aBlock);
  v7 = (const char *)objc_msgSend(v3, "objCType");
  if (!strcmp(v7, "d"))
  {
    v9 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v3, "doubleValue");
LABEL_7:
    v6[2](v6, v10);
    objc_msgSend(v9, "numberWithDouble:");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  if (!strcmp(v7, "f"))
  {
    v9 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v3, "floatValue");
    v10.n128_f64[0] = v10.n128_f32[0];
    goto LABEL_7;
  }
  if (!strcmp(v7, "{CGPoint=dd}"))
  {
    objc_msgSend(v3, "CGPointValue");
    v12 = v11;
    v13 = ((double (*)(void (**)(_QWORD, __n128)))v6[2])(v6);
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", v13, ((double (*)(void (**)(_QWORD, __n128), double))v6[2])(v6, v12));
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = v3;
  }
LABEL_9:
  v14 = v8;

  return v14;
}

void ___quantizedValueForValueInView_block_invoke(uint64_t a1)
{
  UIRoundToViewScale(*(void **)(a1 + 32));
}

id _animationForKeyPathsAndValues(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (objc_msgSend(v3, "count"))
  {
    if (objc_msgSend(v3, "count") == 1)
    {
      objc_msgSend(v3, "keyEnumerator");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "nextObject");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v3, "objectForKeyedSubscript:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      _animationForValueAndKeyPath(v6, v5, a2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v9 = v3;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v19;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v19 != v12)
              objc_enumerationMutation(v9);
            v14 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
            objc_msgSend(v9, "objectForKeyedSubscript:", v14, (_QWORD)v18);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            _animationForValueAndKeyPath(v15, v14, a2);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "addObject:", v16);

          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v11);
      }

      objc_msgSend(MEMORY[0x1E0CD2700], "animation");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setAnimations:", v8);
      objc_msgSend(v7, "setFillMode:", *MEMORY[0x1E0CD2B58]);
      objc_msgSend(v7, "setDuration:", 0.0001);
      objc_msgSend(v7, "setRemovedOnCompletion:", 0);

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void _AssertPointComponentsArePositive(double a1, double a2)
{
  void *v2;
  id v3;

  if (a1 < 0.0 || a2 < 0.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _AssertPointComponentsArePositive(CGPoint)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIMotionEffect.m"), 445, CFSTR("point must be non-negative"));

  }
}

void _UIMakeBasicTransformAnimationUnambiguousWithOrientations(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  double v5;
  double v6;

  if (a2 && a3)
  {
    v5 = 0.0;
    v6 = 0.0;
    if (a2 != 1)
    {
      if (a2 == 3)
      {
        v6 = 1.57079633;
      }
      else if (a2 == 4)
      {
        v6 = -1.57079633;
      }
      else
      {
        v6 = 3.14159265;
        if (a2 != 2)
          v6 = 0.0;
      }
    }
    if (a3 != 1)
    {
      if (a3 == 3)
      {
        v5 = 1.57079633;
      }
      else if (a3 == 4)
      {
        v5 = -1.57079633;
      }
      else
      {
        v5 = 3.14159265;
        if (a3 != 2)
          v5 = 0.0;
      }
    }
    _UIMakeBasicTransformAnimationUnambiguousWithAngles(a1, a4, a5, v6, v5);
  }
}

void _UIMakeBasicTransformAnimationUnambiguousWithAngles(void *a1, int a2, int a3, double a4, double a5)
{
  int v8;
  id v9;
  uint64_t v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  int v15;
  double v16;
  void *v17;
  id v18;

  v8 = a2 | a3;
  v9 = a1;
  v10 = _UIInterfaceOrientationRotationDirectionForRotationFromAngleToAngle(v8, a4, a5);
  _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(v10, a4, a5);
  if (a3)
    v12 = -v11;
  else
    v12 = v11;
  objc_msgSend(v9, "setFromValue:", 0);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setByValue:", v13);

  v14 = (void *)MEMORY[0x1E0CB37E8];
  v15 = objc_msgSend(v9, "isAdditive");
  v16 = 0.0;
  if (!v15)
    v16 = a5;
  objc_msgSend(v14, "numberWithDouble:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setToValue:", v17);

  objc_msgSend(MEMORY[0x1E0CD28D8], "functionWithName:", *MEMORY[0x1E0CD31C0]);
  v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setValueFunction:", v18);

}

uint64_t _UIInterfaceOrientationRotationDirectionForRotationFromAngleToAngle(int a1, double a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(1, a2, a3);
  v7 = fabs(v6);
  _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(2, a2, a3);
  v9 = fabs(v8);
  v10 = vabdd_f64(v7, v9);
  if (a1)
    v11 = 2;
  else
    v11 = 1;
  if (v7 < v9)
    v12 = 1;
  else
    v12 = 2;
  if (v10 >= 2.22044605e-16)
    return v12;
  else
    return v11;
}

void _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(uint64_t a1, double a2, double a3)
{
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (fabs(a2) > 6.28318531)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(CGFloat, CGFloat, _UIInterfaceOrientationRotationDirection)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("_UIDirectionalRotationView.m"), 15, CFSTR("fromAngle should be constrained within ±2π"));

  }
  if (fabs(a3) > 6.28318531)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(CGFloat, CGFloat, _UIInterfaceOrientationRotationDirection)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("_UIDirectionalRotationView.m"), 16, CFSTR("toAngle should be constrained within ±2π"));

  }
  v6 = a3 - a2;
  if (a1 == 2)
  {
    for (; v6 > 0.0; v6 = v6 + -6.28318531)
      ;
  }
  else if (a1 == 1)
  {
    while (v6 < 0.0)
      v6 = v6 + 6.28318531;
  }
}

BOOL UIAccessibilityPrefersCrossFadeTransitions(void)
{
  return _AXSReduceMotionReduceSlideTransitionsEnabled() != 0;
}

void sub_185210BF0(void *a1, SEL *a2)
{
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_185163B74();
    swift_dynamicCast();
    v7 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD82C78);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v10;
    swift_release();
    *v2 = v8;
  }
  v9 = v7;
  objc_msgSend(v9, *a2, a1);

}

id UICollectionLayoutListConfiguration.footerMode.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v8;

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    v5 = *(void **)(v4 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v4 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_185167974();
    swift_dynamicCast();
    v5 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A58);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v8;
    swift_release();
    *v1 = v6;
  }
  return objc_msgSend(v5, sel_setFooterMode_, v2);
}

id UIListContentConfiguration.TextProperties.transform.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_transform);
  if ((unint64_t)result >= 4)
  {
    sub_186507C30();
    sub_186507564();
    type metadata accessor for __UIListContentTextTransform(0);
    sub_186507D74();
    sub_186507564();
    sub_186507564();
    result = (id)sub_186507E04();
    __break(1u);
  }
  else
  {
    *a1 = (_BYTE)result;
  }
  return result;
}

uint64_t _UIApplicationIsFirstPartyStickers()
{
  if (qword_1EDDC8130 != -1)
    dispatch_once(&qword_1EDDC8130, &__block_literal_global_927);
  return byte_1EDDC8004;
}

uint64_t _UIApplicationIsEmojiPoster()
{
  if (qword_1EDDC8138 != -1)
    dispatch_once(&qword_1EDDC8138, &__block_literal_global_930);
  return byte_1EDDC8005;
}

uint64_t UIKeyboardComputeKeyboardIdiomFromScreenTraits(void *a1, uint64_t a2, char a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double v30;
  double v31;
  void *v33;
  void *v34;
  char v35;

  v5 = a1;
  v6 = v5;
  if ((a3 & 1) != 0)
  {
    v7 = a2;
  }
  else
  {
    v8 = (char *)&UIKeyboardComputeKeyboardIdiomFromScreenTraits_iPhoneWidthFilterTable;
    if (a2)
      v8 = 0;
    if (a2 == 1)
      v9 = (char *)&UIKeyboardComputeKeyboardIdiomFromScreenTraits_iPadWidthFilterTable;
    else
      v9 = v8;
    if (a2 == 1)
      v10 = 6;
    else
      v10 = 2 * (a2 == 0);
    v7 = a2;
    if (v9)
    {
      objc_msgSend(v5, "screen");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "_referenceBounds");
      v13 = v12;
      v15 = v14;

      objc_msgSend(v6, "screen");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "scale");
      v17 = 1.0;
      if (v18 > 0.0)
      {
        objc_msgSend(v6, "screen");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "scale");
        v17 = v20;

      }
      objc_msgSend(v6, "screen");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "nativeBounds");
      v23 = v22;

      if (v15 * v17 > v23)
      {
        objc_msgSend(v6, "screen");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "nativeBounds");
        v26 = v25;
        v28 = v27;

        v15 = v28 / v17;
        v13 = v26 / v17;
      }
      v7 = a2;
      if (v10)
      {
        v29 = (double *)(v9 + 16);
        v7 = a2;
        do
        {
          v30 = *(v29 - 2);
          v31 = *(v29 - 1);
          if (v15 + v13 >= v30 + v31 && (v15 != v31 || v13 != v30))
            v7 = *(_QWORD *)v29;
          v29 += 3;
          --v10;
        }
        while (v10);
      }
    }
    if (a2 == 1)
    {
      +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "preferencesActions");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend(v34, "enableProKeyboard");

      if ((v35 & 1) != 0)
      {
        v7 = 23;
      }
      else if (v7 == 24)
      {
        if (qword_1ECD7EAE8 != -1)
          dispatch_once(&qword_1ECD7EAE8, &__block_literal_global_295);
        if (_MergedGlobals_1108)
          v7 = 26;
        else
          v7 = 24;
      }
    }
  }

  return v7;
}

void sub_185213C14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1852147FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

UIColor __swiftcall UIBackgroundConfiguration.resolvedBackgroundColor(for:)(UIColor a1)
{
  uint64_t v1;
  objc_class *v2;
  NSString *v3;
  NSString *v4;
  UIColor result;

  v2 = (objc_class *)objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_resolvedBackgroundColorForTintColor_, a1.super.isa);
  result._cachedStyleString = v4;
  result._systemColorName = v3;
  result.super.isa = v2;
  return result;
}

BOOL _tableViewIsAnimatingSwipeToDelete(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  int v11;
  void *v12;
  _BOOL8 v13;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && objc_msgSend(v4, "count") == 1)
  {
    objc_msgSend(v5, "firstObject");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    if (v6)
      v8 = *(void **)(v6 + 24);
    else
      v8 = 0;
    v9 = v8;
    objc_msgSend(v3, "indexPath");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v9, "isEqual:", v10);

    if (v11)
    {
      objc_msgSend(v3, "currentAction");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "style") == 1;

    }
    else
    {
      v13 = 0;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

ValueMetadata *type metadata accessor for UIView.Invalidations.Display()
{
  return &type metadata for UIView.Invalidations.Display;
}

void type metadata accessor for UIUserInterfaceSizeClass(uint64_t a1)
{
  sub_185249668(a1, &qword_1ECD75770);
}

uint64_t sub_185219C3C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1851F9080(255, a2);
    result = MEMORY[0x186DC9F28](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for UITypesettingLanguageAwareLineHeightRatio()
{
  return &type metadata for UITypesettingLanguageAwareLineHeightRatio;
}

id UICollectionLayoutListConfiguration.headerTopPadding.setter(uint64_t a1, char a2)
{
  return sub_1852C864C(a1, a2, (SEL *)&selRef_setHeaderTopPadding_);
}

ValueMetadata *type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode()
{
  return &type metadata for UICollectionLayoutListConfiguration.HeaderMode;
}

void sub_185219CA8()
{
  sub_1853D977C();
}

id sub_185219CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  void *v5;
  _QWORD v7[6];

  if (!a1)
    return objc_msgSend(*(id *)(v2 + qword_1EDD8B090[0]), sel_setSupplementaryViewProvider_, 0);
  v4 = *(void **)(v2 + qword_1EDD8B090[0]);
  v7[4] = a1;
  v7[5] = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_18548C714;
  v7[3] = &block_descriptor_19_1;
  v5 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_setSupplementaryViewProvider_, v5);
  _Block_release(v5);
  return (id)sub_18518D718(a1);
}

uint64_t storeEnumTagSinglePayload for UIListSeparatorConfiguration.Visibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_185219DF8 + 4 * byte_18666D8E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_185219E2C + 4 * byte_18666D8E0[v4]))();
}

uint64_t sub_185219E2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_185219E34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x185219E3CLL);
  return result;
}

uint64_t sub_185219E48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x185219E50);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_185219E54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_185219E5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_185219E68(uint64_t a1, uint64_t a2, SEL *a3, uint64_t *a4, _QWORD *a5)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = objc_msgSend((id)objc_opt_self(), *a3);
  v8 = sub_1865074F8();
  v10 = v9;

  *a4 = v8;
  *a5 = v10;
}

id static UICellAccessory.delete(displayed:options:actionHandler:)@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_18529D358(a1, a2, a3, a4, (Class *)off_1E167A450, (uint64_t)&block_descriptor_3, 3, a5);
}

void UICellAccessory.DeleteOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  sub_185192034(a1, a2, a3, a4, &qword_1EDD82558, (id *)&qword_1EDD825A8, a5);
}

uint64_t _UISystemGestureLocationForTouchInView(void *a1, void *a2, void *a3)
{
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;

  objc_msgSend(a1, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
    v7 = a2;
  else
    v7 = a1;
  objc_msgSend(v7, "locationInView:", v6);
  v9 = v8;
  v11 = v10;

  return _ConvertDeviceReferenceSpacePointToView(a3, v9, v11);
}

void sub_18521A0D8(double **a1)
{
  double *v1;

  v1 = *a1;
  UIButton.Configuration.contentInsets.setter(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

id UIButton.Configuration.contentInsets.setter(double a1, double a2, double a3, double a4)
{
  uint64_t *v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v14;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v4;
  if (isUniquelyReferenced_nonNull_native)
  {
    v11 = *(void **)(v10 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v10 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_1851F9080(0, (unint64_t *)&unk_1EDD827B8);
    swift_dynamicCast();
    v11 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BB8);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v14;
    swift_release();
    *v4 = v12;
  }
  return objc_msgSend(v11, sel_setContentInsets_, a1, a2, a3, a4);
}

void __forwardTouchMethod_block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (objc_msgSend(v3, "_wantsForwardingFromResponder:toNextResponder:withEvent:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)))objc_msgSend(*(id *)(a1 + 56), "addObject:", v3);

}

BOOL _UIResponderForwarderWantsForwardingFromResponder(void *a1, const char *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  _BOOL8 v15;
  void *v16;
  id v17;
  uint64_t v18;
  id WeakRetained;
  BOOL v20;
  unint64_t v21;
  NSObject *v22;
  void *v23;
  void *v24;
  _UIEventComponentForwardingRecipient *v25;
  id v26;
  id v27;
  _UIEventComponentForwardingRecipient *v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  NSObject *IsDeallocating;
  NSObject *v34;
  id v35;
  int v36;
  const char *Name;
  void *v38;
  _QWORD v39[4];
  id v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  id v47;
  int v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  id v53;
  __int16 v54;
  id v55;
  __int16 v56;
  id v57;
  __int16 v58;
  id v59;
  __int16 v60;
  const char *v61;
  objc_super buf[5];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  objc_msgSend(v9, "_eventComponentPhase");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "value");

  if (v14 > 4 || v14 == 2)
  {
    if (!os_variant_has_internal_diagnostics())
    {
      v21 = _UIResponderForwarderWantsForwardingFromResponder___s_category;
      if (!_UIResponderForwarderWantsForwardingFromResponder___s_category)
      {
        v21 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v21, (unint64_t *)&_UIResponderForwarderWantsForwardingFromResponder___s_category);
      }
      v22 = *(NSObject **)(v21 + 8);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].receiver) = 0;
        _os_log_impl(&dword_185066000, v22, OS_LOG_TYPE_ERROR, "Unexpected touch phase during forwarding", (uint8_t *)buf, 2u);
      }
      goto LABEL_14;
    }
    __UIFaultDebugAssertLog();
    IsDeallocating = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(IsDeallocating, OS_LOG_TYPE_FAULT))
    {
LABEL_36:

LABEL_14:
      v15 = 0;
      goto LABEL_33;
    }
LABEL_41:
    LOWORD(buf[0].receiver) = 0;
    _os_log_fault_impl(&dword_185066000, IsDeallocating, OS_LOG_TYPE_FAULT, "Unexpected touch phase during forwarding", (uint8_t *)buf, 2u);
    goto LABEL_36;
  }
  os_variant_has_internal_diagnostics();
  if ((objc_msgSend(v9, "_isAbandoningForwardingRecord") & 1) == 0)
  {
    objc_msgSend(v9, "_mutableForwardingRecord");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = 0;
    v43 = &v42;
    v44 = 0x3032000000;
    v45 = __Block_byref_object_copy__205;
    v46 = __Block_byref_object_dispose__205;
    v47 = 0;
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3221225472;
    v39[2] = ___UIResponderForwarderWantsForwardingFromResponder_block_invoke;
    v39[3] = &unk_1E16C6E88;
    v17 = (id)v11;
    v40 = v17;
    v41 = &v42;
    objc_msgSend(v16, "enumerateObjectsUsingBlock:", v39);
    v18 = v43[5];
    if (v14)
    {
      if (v18)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v18 + 8));
        v20 = WeakRetained == v10;

        if (!v20)
        {
          objc_msgSend(v9, "_abandonForwardingRecord");
          v15 = 1;
LABEL_32:

          _Block_object_dispose(&v42, 8);
          goto LABEL_33;
        }
      }
LABEL_30:
      v30 = v43;
      v31 = v43[5];
      if (v31)
      {
        *(_QWORD *)(v31 + 24) = v14;
        v15 = v30[5] != 0;
      }
      else
      {
        v15 = 0;
      }
      goto LABEL_32;
    }
    if (v18)
      goto LABEL_30;
    if (!objc_msgSend(v9, "_eventComponentType")
      && (objc_opt_respondsToSelector() & 1) != 0
      && objc_msgSend(v17, "_shouldApplyExclusiveTouch"))
    {
      objc_msgSend(v9, "window");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "touchesForWindow:", v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if ((unint64_t)objc_msgSend(v24, "count") >= 2)
      {

        goto LABEL_30;
      }
      if ((objc_opt_respondsToSelector() & 1) != 0 && objc_msgSend(v17, "_isInExclusiveTouchSubviewTree"))
      {
        objc_msgSend(v23, "_setExclusiveTouchView:", v17);
        objc_msgSend(v12, "_exclusiveTouchWindows");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "addObject:", v23);

      }
    }
    if ((_objc_rootIsDeallocating() & 1) == 0 && !_objc_rootIsDeallocating())
    {
      v25 = [_UIEventComponentForwardingRecipient alloc];
      v26 = v17;
      v27 = v10;
      if (v25)
      {
        buf[0].receiver = v25;
        buf[0].super_class = (Class)_UIEventComponentForwardingRecipient;
        v28 = (_UIEventComponentForwardingRecipient *)-[objc_super init](buf, sel_init);
        v25 = v28;
        if (v28)
        {
          objc_storeWeak((id *)&v28->responder, v26);
          objc_storeWeak((id *)&v25->fromResponder, v27);
        }
      }

      v29 = (void *)v43[5];
      v43[5] = (uint64_t)v25;

      objc_msgSend(v16, "addObject:", v43[5]);
      goto LABEL_30;
    }
    memset(buf, 0, sizeof(buf));
    v34 = MEMORY[0x1E0C81028];
    v35 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      v11 = 3;
    else
      v11 = 2;
    IsDeallocating = _objc_rootIsDeallocating();
    v36 = _objc_rootIsDeallocating();
    Name = sel_getName(a2);
    v48 = 67110658;
    v49 = (int)IsDeallocating;
    v50 = 1024;
    v51 = v36;
    v52 = 2112;
    v53 = v10;
    v54 = 2112;
    v55 = v17;
    v56 = 2112;
    v57 = v9;
    v58 = 2112;
    v59 = v12;
    v60 = 2080;
    v61 = Name;
    v10 = (id)MEMORY[0x1E0C81028];
    v9 = (id)_os_log_send_and_compose_impl();

    _os_crash_msg();
    __break(1u);
    goto LABEL_41;
  }
  v15 = 1;
LABEL_33:

  return v15;
}

void sub_18521A910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIButton.Configuration.background.setter(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;

  v1 = *a1;
  v2 = (void *)sub_1855D7CCC();
  v3 = *(void **)(v1 + 16);
  v4 = v2;
  v5 = v3;
  swift_release();
  objc_msgSend(v5, sel_copy);

  sub_186507B1C();
  swift_unknownObjectRelease();
  sub_1851F9080(0, (unint64_t *)&qword_1ECD74850);
  swift_dynamicCast();
  objc_msgSend(v4, sel__setSwiftBridgingBackground_, v6);

}

uint64_t sub_18521AB24(uint64_t a1, SEL *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  _BYTE v19[16];

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDD82838);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_186506910();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11);
  v13 = &v19[-v12];
  sub_18521AFBC(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_18521AF7C((uint64_t)v6);
    objc_msgSend((id)sub_1855D7CCC(), *a2, 0);
    return sub_18521AF7C(a1);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v13, v6, v7);
    v15 = (void *)sub_1855D7CCC();
    sub_1851F9080(0, qword_1EDD826B0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v10, v13, v7);
    v16 = qword_1ECD74848;
    v17 = v15;
    if (v16 != -1)
      swift_once();
    type metadata accessor for AttributeScopes.UIKitAttributes();
    sub_1852478E0((unint64_t *)&unk_1ECD74838, (uint64_t (*)(uint64_t))type metadata accessor for AttributeScopes.UIKitAttributes, (uint64_t)&protocol conformance descriptor for AttributeScopes.UIKitAttributes);
    v18 = (void *)sub_1865079A8();
    objc_msgSend(v17, *a2, v18);

    sub_18521AF7C(a1);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  }
}

void sub_18521AD48(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)sub_1855D7CCC();
  v6 = v5;
  if (a2)
  {
    v7 = (id)sub_1865074D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v5, *a3, v7);

}

id sub_18521ADD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD aBlock[6];
  void *v21;

  v7 = *a1;
  if (*a1)
  {
    v10 = a1[1];
    v11 = (void *)sub_1855D7CCC();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v7;
    *(_QWORD *)(v12 + 24) = v10;
    aBlock[4] = a3;
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_185371FCC;
    aBlock[3] = a4;
    v13 = _Block_copy(aBlock);
    v14 = v11;
    sub_18518D708(v7);
    swift_release();
    objc_msgSend(v14, *a5, v13);
    _Block_release(v13);

    return (id)sub_18518D718(v7);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v5;
    if (isUniquelyReferenced_nonNull_native)
    {
      v18 = *(void **)(v17 + 16);
    }
    else
    {
      objc_msgSend(*(id *)(v17 + 16), sel_copy);
      sub_186507B1C();
      swift_unknownObjectRelease();
      sub_1851F9080(0, (unint64_t *)&unk_1EDD827B8);
      swift_dynamicCast();
      v18 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BB8);
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = v21;
      swift_release();
      *v5 = v19;
    }
    return objc_msgSend(v18, *a5, 0);
  }
}

uint64_t sub_18521AF7C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDD82838);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18521AFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDD82838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_18521B004(void *a1, SEL *a2)
{
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_1851F9080(0, (unint64_t *)&unk_1EDD82DB8);
    swift_dynamicCast();
    v7 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD82E70);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v10;
    swift_release();
    *v2 = v8;
  }
  v9 = v7;
  objc_msgSend(v9, *a2, a1);

}

void sub_18521BE64(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

double _UICollectionLayoutValidatedContentOffsetForProposedContentOffsetForOrthogonalSection(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v15;
  double v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double (*v27)(_QWORD *);
  void *v28;
  void *v29;
  _QWORD *v30;
  double v31;
  double v32;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  _QWORD aBlock[14];

  if (a1)
  {
    v15 = *(_QWORD *)(a1 + 16);
    v16 = _UISizeValueForAxis(v15, *(double *)(a1 + 160), *(double *)(a1 + 168));
    v17 = _UISizeValueForAxis(v15, *(double *)(a1 + 224), *(double *)(a1 + 232));
    v47 = *(double *)(a1 + 72);
  }
  else
  {
    v47 = 0.0;
    v16 = _UISizeValueForAxis(0, 0.0, 0.0);
    v17 = _UISizeValueForAxis(0, 0.0, 0.0);
    v15 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___UICollectionLayoutValidatedContentOffsetForProposedContentOffsetForOrthogonalSection_block_invoke;
  aBlock[3] = &unk_1E16B8CB8;
  *(double *)&aBlock[5] = v16;
  *(double *)&aBlock[6] = v17;
  *(double *)&aBlock[7] = a4;
  *(double *)&aBlock[8] = a5;
  *(double *)&aBlock[9] = a6;
  *(double *)&aBlock[10] = a7;
  aBlock[4] = a1;
  *(double *)&aBlock[11] = a2;
  *(double *)&aBlock[12] = a3;
  aBlock[13] = v15;
  v18 = _Block_copy(aBlock);
  if (a1)
  {
    v19 = *(_QWORD *)(a1 + 24);
    v20 = *MEMORY[0x1E0C9D538];
    v21 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v22 = _UIPointValueForAxis(v15, a2, a3);
    v23 = _UISetPointValueForAxis(v15, v20, v21, v22);
    v25 = v24;
    v26 = a8;
    switch(v19)
    {
      case 0:
        break;
      case 1:
        v27 = (double (*)(_QWORD *))v18[2];
        goto LABEL_8;
      case 2:
      case 4:
        v27 = (double (*)(_QWORD *))v18[2];
LABEL_8:
        v30 = v18;
        goto LABEL_10;
      case 3:
        v27 = (double (*)(_QWORD *))v18[2];
        v30 = v18;
LABEL_10:
        v23 = v27(v30);
        v25 = v31;
        break;
      case 5:
        v34 = *(double *)(a1 + 64);
        UIRoundToScale((v47 + v17 - v34) * 0.5, a8);
        v36 = v35;
        v37 = _UISetPointValueForAxis(v15, v20, v21, v35);
        v39 = ((double (*)(_QWORD *, double, double, double, double))v18[2])(v18, v23 + v37, v25 + v38, v34, v36);
        v41 = v40;
        v23 = v39 + _UISetPointValueForAxis(v15, v20, v21, -v36);
        v25 = v41 + v42;
        break;
      default:
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", *(_QWORD *)&v47);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGPoint _UICollectionLayoutValidatedContentOffsetForProposedContentOffsetForOrthogonalSection(CGPoint, _UICollectionLayoutSectionDescriptor *const __strong, CGRect, CGFloat)");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, CFSTR("_UICollectionLayoutHelpers.m"), 1037, CFSTR("Unknown orthogonal scrolling behavior. Please file a bug on UIKit."));

        break;
    }
  }
  else
  {
    v43 = *MEMORY[0x1E0C9D538];
    v44 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v45 = _UIPointValueForAxis(v15, a2, a3);
    v23 = _UISetPointValueForAxis(v15, v43, v44, v45);
    v25 = v46;
    v26 = a8;
  }
  v32 = UIPointRoundToScale(v23, v25, v26);

  return v32;
}

id _UISearchSuggestionAllSuggestionsFromGroups(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_msgSend(v1, "count");
  v3 = (void *)MEMORY[0x1E0C9AA60];
  if (v2)
  {
    if (v2 == 1)
    {
      objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "suggestionItems");
      v5 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v6 = v1;
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v16;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v16 != v9)
              objc_enumerationMutation(v6);
            objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * i), "suggestionItems", (_QWORD)v15);
            v11 = objc_claimAutoreleasedReturnValue();
            v12 = (void *)v11;
            if (v11)
              v13 = (void *)v11;
            else
              v13 = v3;
            objc_msgSend(v4, "addObjectsFromArray:", v13);

          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        }
        while (v8);
      }

      v5 = objc_msgSend(v4, "copy");
    }
    v3 = (void *)v5;

  }
  return v3;
}

void _UIControlMenuUpdateVisibleMenu(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD *v10;
  _QWORD v11[3];
  char v12;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (objc_msgSend(v5, "_hasVisibleMenu"))
  {
    if (v7)
    {
      v11[0] = 0;
      v11[1] = v11;
      v11[2] = 0x2020000000;
      v12 = 0;
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = ___UIControlMenuUpdateVisibleMenu_block_invoke;
      v8[3] = &unk_1E16C7138;
      v10 = v11;
      v9 = v7;
      objc_msgSend(v5, "updateVisibleMenuWithBlock:", v8);

      _Block_object_dispose(v11, 8);
    }
    else
    {
      objc_msgSend(v5, "dismissMenu");
    }
  }

}

void sub_18521E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18521E650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_18521F83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a71;

  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

uint64_t _UICollectionViewCompositionalLayoutShouldRespectPreferredSizeOnEstimatedAxisOnly()
{
  if (qword_1ECD7CF28 != -1)
    dispatch_once(&qword_1ECD7CF28, &__block_literal_global_469);
  if (_MergedGlobals_983)
    return 0;
  else
    return dyld_program_sdk_at_least();
}

void sub_185221C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIRectSubtractingRectYieldingDirectionalInsets(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinY;
  double v17;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;

  v19.origin.x = a5;
  v19.origin.y = a6;
  v19.size.width = a7;
  v19.size.height = a8;
  MinY = CGRectGetMinY(v19);
  v20.origin.x = a1;
  v20.origin.y = a2;
  v20.size.width = a3;
  v20.size.height = a4;
  v17 = MinY - CGRectGetMinY(v20);
  v21.origin.x = a1;
  v21.origin.y = a2;
  v21.size.width = a3;
  v21.size.height = a4;
  CGRectGetMaxY(v21);
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.width = a7;
  v22.size.height = a8;
  CGRectGetMaxY(v22);
  v23.origin.x = a5;
  v23.origin.y = a6;
  v23.size.width = a7;
  v23.size.height = a8;
  CGRectGetMinX(v23);
  v24.origin.x = a1;
  v24.origin.y = a2;
  v24.size.width = a3;
  v24.size.height = a4;
  CGRectGetMinX(v24);
  v25.origin.x = a1;
  v25.origin.y = a2;
  v25.size.width = a3;
  v25.size.height = a4;
  CGRectGetMaxX(v25);
  v26.origin.x = a5;
  v26.origin.y = a6;
  v26.size.width = a7;
  v26.size.height = a8;
  CGRectGetMaxX(v26);
  return v17;
}

void sub_185221F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _UIRectUnionOnAxis(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double v18;
  double v19;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  if (!CGRectIsNull(*(CGRect *)&a2))
  {
    v21.origin.x = a6;
    v21.origin.y = a7;
    v21.size.width = a8;
    v21.size.height = a9;
    if (CGRectIsNull(v21))
    {
      return a2;
    }
    else
    {
      v22.origin.x = a2;
      v22.origin.y = a3;
      v22.size.width = a4;
      v22.size.height = a5;
      *(_QWORD *)&v18 = (unint64_t)CGRectStandardize(v22);
      v23.origin.x = a6;
      v23.origin.y = a7;
      v23.size.width = a8;
      v23.size.height = a9;
      *(_QWORD *)&v19 = (unint64_t)CGRectStandardize(v23);
      if (a1 == 2)
        return v18;
      else
        return fmin(v18, v19);
    }
  }
  return a6;
}

void sub_18522288C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_185222F18(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  char v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  char v14;
  uint64_t *v15;
  uint64_t *v17;
  _BYTE v18[8];
  _BYTE v19[16];
  _BYTE v20[16];
  uint64_t v21;
  char v22;

  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF30];
  sub_185223148(a1, (uint64_t)v20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF30]);
  sub_185223148(a2, (uint64_t)&v21, v3);
  if ((v20[8] & 1) == 0)
  {
    sub_185223148((uint64_t)v20, (uint64_t)v19, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF30]);
    if ((v22 & 1) != 0)
    {
      v9 = (uint64_t *)&unk_1EDD81AC0;
      goto LABEL_10;
    }
    sub_1850F26F8((uint64_t)&v21, (uint64_t)v18, (uint64_t *)&unk_1EDD81AC0);
    v10 = (void *)MEMORY[0x186DCA138](v19);
    v11 = MEMORY[0x186DCA138](v18);
    v12 = (void *)v11;
    if (v10)
    {
      if (v11)
      {
        sub_185223190();
        v13 = v10;
        v14 = sub_186507A44();

        if ((v14 & 1) == 0)
          goto LABEL_25;
LABEL_18:
        v15 = (uint64_t *)&unk_1EDD81AC0;
        goto LABEL_19;
      }
      v12 = v10;
    }
    else if (!v11)
    {
      goto LABEL_18;
    }

LABEL_25:
    v17 = (uint64_t *)&unk_1EDD81AC0;
    goto LABEL_26;
  }
  sub_185223148((uint64_t)v20, (uint64_t)v19, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF30]);
  if (v22 == 1)
  {
    sub_1850F26F8((uint64_t)&v21, (uint64_t)v18, &qword_1EDD88750);
    v4 = (void *)MEMORY[0x186DCA138](v19);
    v5 = MEMORY[0x186DCA138](v18);
    v6 = (void *)v5;
    if (v4)
    {
      if (v5)
      {
        type metadata accessor for UIHoverEffectLayer(0);
        v7 = v4;
        v8 = sub_186507A44();

        if ((v8 & 1) == 0)
          goto LABEL_22;
        goto LABEL_16;
      }
      v6 = v4;
    }
    else if (!v5)
    {
LABEL_16:
      v15 = &qword_1EDD88750;
LABEL_19:
      sub_18519F088((uint64_t)v18, v15);
      sub_18519F088((uint64_t)v19, v15);
      sub_185227928((uint64_t)v20);
      return 1;
    }

LABEL_22:
    v17 = &qword_1EDD88750;
LABEL_26:
    sub_18519F088((uint64_t)v18, v17);
    sub_18519F088((uint64_t)v19, v17);
    sub_185227928((uint64_t)v20);
    return 0;
  }
  v9 = &qword_1EDD88750;
LABEL_10:
  sub_18519F088((uint64_t)v19, v9);
  sub_18519F088((uint64_t)v20, &qword_1EDD88758);
  return 0;
}

uint64_t sub_185223148(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  unsigned int v4;
  BOOL v5;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  v5 = v4 == 1;
  result = a3(a2, a1);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

unint64_t sub_185223190()
{
  unint64_t result;

  result = qword_1EDD82CE0;
  if (!qword_1EDD82CE0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDD82CE0);
  }
  return result;
}

id sub_1852231CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  _OWORD *v12;
  __int128 v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  objc_class *ObjectType;
  objc_super v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36[2];
  _BYTE v37[48];

  ObjectType = (objc_class *)swift_getObjectType();
  v26 = *(_QWORD *)(a2 + 8);
  v27 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 24);
  v25 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = &v3[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver__shape];
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((_QWORD *)v10 + 6) = 0;
  v10[56] = -1;
  *((_QWORD *)v10 + 8) = 0;
  v11 = *(_BYTE *)(a2 + 56);
  swift_unknownObjectWeakInit();
  v28 = (uint64_t)&v3[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_host];
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = -1;
  v3[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_isEnabled] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerInteraction] = 0;
  sub_1851E75D8(a1, (uint64_t)v37);
  v12 = &v3[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver__effect];
  swift_beginAccess();
  sub_1851E75D8((uint64_t)v37, (uint64_t)v36);
  *((_QWORD *)&v34 + 1) = &type metadata for UIHoverAutomaticEffect;
  *(_QWORD *)&v35 = &protocol witness table for UIHoverAutomaticEffect;
  *((_QWORD *)&v35 + 1) = 0;
  v24 = v3;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v33);
  sub_1851E59E0(v36, (uint64_t)&v33);
  v13 = v34;
  *v12 = v33;
  v12[1] = v13;
  v12[2] = v35;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v37);
  swift_endAccess();
  swift_beginAccess();
  v21 = *((_QWORD *)v10 + 1);
  v22 = *(void **)v10;
  v19 = *((_QWORD *)v10 + 3);
  v20 = *((_QWORD *)v10 + 2);
  v17 = *((_QWORD *)v10 + 5);
  v18 = *((_QWORD *)v10 + 4);
  v16 = *((_QWORD *)v10 + 6);
  v23 = (void *)*((_QWORD *)v10 + 8);
  LOBYTE(a2) = v10[56];
  sub_1852287BC(v27, v26, v25, v6, v7, v8, v9, v11);
  *(_QWORD *)v10 = v27;
  *((_QWORD *)v10 + 1) = v26;
  *((_QWORD *)v10 + 2) = v25;
  *((_QWORD *)v10 + 3) = v6;
  *((_QWORD *)v10 + 4) = v7;
  *((_QWORD *)v10 + 5) = v8;
  *((_QWORD *)v10 + 6) = v9;
  v10[56] = v11;
  *((_QWORD *)v10 + 8) = 0;
  sub_185223490(v22, v21, v20, v19, v18, v17, v16, a2);

  sub_185223490(v27, v26, v25, v6, v7, v8, v9, v11);
  swift_beginAccess();
  sub_1851E6940(a3, v28);
  swift_endAccess();

  v32.receiver = v24;
  v32.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v32, sel_init);
  sub_185228420();

  sub_18519F088(a3, &qword_1EDD81A30);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v14;
}

void sub_185223490(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 != -1)
    sub_185228168(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1852234A4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _BYTE v8[16];
  _BYTE v9[8];
  _BYTE v10[16];

  sub_18519F0C4(a1, (uint64_t)v10, &qword_1EDD81A30);
  if (v10[8] == 255)
  {
    sub_18519F088((uint64_t)v10, &qword_1EDD81A30);
    v4 = (void *)MEMORY[0x186DCA138](v1 + 104);
    if (!v4)
      return sub_18519F088(a1, &qword_1EDD81A30);
LABEL_13:

    v3 = 0;
LABEL_14:
    sub_18569FD28(0);

    return sub_18519F088(a1, &qword_1EDD81A30);
  }
  sub_185223A04((uint64_t)v10, (uint64_t)v8);
  if ((v8[8] & 1) != 0)
  {
    sub_185227928((uint64_t)v8);
    v3 = 0;
  }
  else
  {
    sub_185228378((uint64_t)v8, (uint64_t)v9);
    v3 = (void *)MEMORY[0x186DCA138](v9);
    sub_18519F088((uint64_t)v9, (uint64_t *)&unk_1EDD81AC0);
  }
  sub_185227928((uint64_t)v10);
  v5 = (void *)MEMORY[0x186DCA138](v1 + 104);
  v4 = v5;
  if (!v3)
  {
    if (!v5)
      return sub_18519F088(a1, &qword_1EDD81A30);
    goto LABEL_13;
  }
  if (v5)
  {

    if (v4 == v3)
    {

      return sub_18519F088(a1, &qword_1EDD81A30);
    }
  }
  objc_opt_self();
  v6 = (void *)swift_dynamicCastObjCClass();
  if (!v6)
    goto LABEL_14;
  sub_18569FD28(v6);
  return sub_18519F088(a1, &qword_1EDD81A30);
}

uint64_t sub_1852235D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[16];
  _BYTE v8[16];
  _BYTE v9[16];
  uint64_t v10;
  unsigned __int8 v11;

  v3 = v1 + OBJC_IVAR___UIHoverStyle_host;
  swift_beginAccess();
  sub_18519F0C4(v3, (uint64_t)v9, &qword_1EDD81A30);
  sub_18519F0C4(a1, (uint64_t)&v10, &qword_1EDD81A30);
  if (v9[8] == 255)
  {
    if (v11 == 255)
      return sub_18519F088((uint64_t)v9, &qword_1EDD81A30);
    goto LABEL_8;
  }
  sub_18519F0C4((uint64_t)v9, (uint64_t)v8, &qword_1EDD81A30);
  if (v11 == 255)
  {
    sub_185227928((uint64_t)v8);
LABEL_8:
    sub_18519F088((uint64_t)v9, qword_1EDD81A38);
    goto LABEL_9;
  }
  sub_18578AF48((uint64_t)&v10, (uint64_t)v7);
  v4 = sub_185222F18((uint64_t)v8, (uint64_t)v7);
  sub_185227928((uint64_t)v7);
  sub_185227928((uint64_t)v8);
  result = sub_18519F088((uint64_t)v9, &qword_1EDD81A30);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    sub_18519F0C4(v3, (uint64_t)v9, &qword_1EDD81A30);
    sub_18519F0C4((uint64_t)v9, (uint64_t)v8, &qword_1EDD81A30);
    v6 = swift_allocObject();
    sub_1850F26F8((uint64_t)v8, v6 + 16, &qword_1EDD81A30);
    sub_185227960(1, (uint64_t)sub_1852287F0, v6);
    swift_release();
    return sub_18519F088((uint64_t)v9, &qword_1EDD81A30);
  }
  return result;
}

uint64_t sub_185223778(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UIControlPointerHoverStyleDriver(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for UIControlPointerHoverStyleDriver(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(unsigned __int8 *)(a2 + 96);
  if (v5 == 255)
  {
    v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v13;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  else
  {
    v6 = *(void **)(a2 + 40);
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 72);
    v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 88);
    sub_185228314(v6, v7, v8, v9, v10, v11, v12, *(_BYTE *)(a2 + 96));
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v12;
    *(_BYTE *)(a1 + 96) = v5;
  }
  swift_unknownObjectWeakCopyInit();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t sub_185223894()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;
  void *v5;
  void *v6;
  uint64_t v7;
  char v8;
  _BYTE v9[8];
  _BYTE v10[16];

  v1 = v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_host;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v1 + 8) != 255)
  {
    sub_185223A04(v1, (uint64_t)v10);
    sub_185223A04((uint64_t)v10, (uint64_t)&v7);
    if ((v8 & 1) != 0)
    {
      sub_185227928((uint64_t)&v7);
      sub_185227928((uint64_t)v10);
    }
    else
    {
      sub_185228378((uint64_t)&v7, (uint64_t)v9);
      v2 = (void *)MEMORY[0x186DCA138](v9);
      sub_18519F088((uint64_t)v9, (uint64_t *)&unk_1EDD81AC0);
      sub_185227928((uint64_t)v10);
      if (v2)
      {
        v3 = objc_msgSend(v2, sel__providesCustomPointerInteraction);

        if ((v3 & 1) != 0)
          return 0;
      }
    }
  }
  v5 = (void *)MEMORY[0x186DCA138](v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerStyle);

  if (!v5 && *(unsigned __int8 *)(v1 + 8) != 255)
  {
    sub_185223A04(v1, (uint64_t)v10);
    sub_185223A04((uint64_t)v10, (uint64_t)&v7);
    if ((v8 & 1) != 0)
    {
      sub_185227928((uint64_t)&v7);
      v6 = 0;
    }
    else
    {
      sub_185228378((uint64_t)&v7, (uint64_t)v9);
      v6 = (void *)MEMORY[0x186DCA138](v9);
      sub_18519F088((uint64_t)v9, (uint64_t *)&unk_1EDD81AC0);
    }
    sub_185227928((uint64_t)v10);

  }
  return 1;
}

uint64_t sub_185223A04(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HoverStyleHost(a2, a1, (uint64_t)&type metadata for HoverStyleHost);
  return a2;
}

uint64_t sub_185223A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unsigned int v4;
  BOOL v5;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  v5 = v4 == 1;
  result = a4();
  *(_BYTE *)(result + 8) = v5;
  return result;
}

uint64_t initializeWithCopy for HoverStyleHost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_185223A40(a1, a2, a3, MEMORY[0x1E0DEEF30]);
}

double __UIViewConvertRectInViewToSceneSpace(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;

  v11 = a2;
  objc_msgSend(a1, "layer");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "convertRect:toLayer:", 0, a3, a4, a5, a6);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;

  objc_msgSend(v11, "_sceneReferenceBounds");
  v22 = v21;
  v24 = v23;
  v25 = objc_msgSend(v11, "_sceneOrientation");
  v26 = objc_msgSend(v11, "interfaceOrientation");

  return _UIWindowConvertRectFromOrientationToOrientation(v25, v26, v14, v16, v18, v20, v22, v24);
}

_UIScrollViewScrollIndicator *CreateScrollIndicator(void *a1, unsigned int a2)
{
  id v3;
  _UIScrollViewScrollIndicator *v4;
  _UIScrollViewScrollIndicator *v5;
  _UIScrollViewScrollIndicator *v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  _UIScrollViewScrollIndicator *v13;
  uint64_t v14;

  v3 = a1;
  if ((objc_msgSend(v3, "_usesLowFidelityPanning") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = [_UIScrollViewScrollIndicator alloc];
    v6 = -[_UIScrollViewScrollIndicator initWithFrame:](v5, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    -[_UIScrollViewScrollIndicator setType:](v6, "setType:", a2);
    -[_UIScrollViewScrollIndicator setStyle:](v6, "setStyle:", objc_msgSend(v3, "_effectiveIndicatorStyle"));
    if (dyld_program_sdk_at_least())
    {
      -[UIView layer](v6, "layer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setZPosition:", 1000.0);

    }
    v9 = MEMORY[0x1E0C809B0];
    v10 = 3221225472;
    v11 = __CreateScrollIndicator_block_invoke;
    v12 = &unk_1E16B1888;
    v4 = v6;
    v13 = v4;
    v14 = 0;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", &v9);
    objc_msgSend(v3, "addSubview:", v4, v9, v10, v11, v12);

  }
  return v4;
}

uint64_t assignWithTake for HoverStyleDriverCoordinator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  void *v17;
  void *v18;

  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(unsigned __int8 *)(a1 + 96);
  if (v5 != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 96);
    if (v6 != 255)
    {
      v7 = *(_QWORD *)(a2 + 88);
      v8 = *(void **)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(a1 + 64);
      v12 = *(_QWORD *)(a1 + 72);
      v13 = *(_QWORD *)(a1 + 80);
      v14 = *(_QWORD *)(a1 + 88);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 88) = v7;
      *(_BYTE *)(a1 + 96) = v6;
      sub_185228168(v8, v9, v10, v11, v12, v13, v14, v5);
      goto LABEL_6;
    }
    sub_1855BC640(a1 + 40);
  }
  v15 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
LABEL_6:
  v16 = *(unsigned __int8 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 112) == 255)
  {
    if (v16 == 255)
      goto LABEL_10;
  }
  else
  {
    if (v16 == 255)
    {
      sub_185227928(a1 + 104);
LABEL_10:
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      goto LABEL_16;
    }
    if (a1 == a2)
      goto LABEL_16;
    sub_185227928(a1 + 104);
    LOBYTE(v16) = *(_BYTE *)(a2 + 112);
  }
  swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(a1 + 112) = (v16 & 1) != 0;
LABEL_16:
  v17 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v18 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);

  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_185227928(uint64_t a1)
{
  destroy for HoverStyleHost();
  return a1;
}

uint64_t sub_185227960(char a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  id v20;
  _BYTE *v21;
  id v22;
  void *v23;
  uint64_t KeyPath;
  uint64_t v25;
  void *v26;
  char *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void (*v51)(_QWORD *);
  _BYTE v52[16];
  uint64_t v53;
  _QWORD *v54;
  id v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _BYTE v60[16];
  _BYTE v61[40];
  _BYTE v62[64];
  _BYTE v63[40];
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD v70[12];
  char v71;
  uint64_t v72;
  char v73;
  void *v74;
  char v75;
  _BYTE *v76;
  uint64_t v77;

  v4 = v3;
  v8 = (uint64_t)&v4[OBJC_IVAR___UIHoverStyle_driverCoordinator];
  swift_beginAccess();
  sub_18519F0C4(v8, (uint64_t)v70, &qword_1EDD81F98);
  v9 = v70[3];
  sub_18519F088((uint64_t)v70, &qword_1EDD81F98);
  if (!v9 && (a1 & 1) != 0)
  {
    v57 = a2;
    v58 = a3;
    v10 = (uint64_t)&v4[OBJC_IVAR___UIHoverStyle__effect];
    swift_beginAccess();
    sub_1851E75D8(v10, (uint64_t)v63);
    v11 = &v4[OBJC_IVAR___UIHoverStyle__shape];
    v12 = *(_QWORD *)&v4[OBJC_IVAR___UIHoverStyle__shape + 8];
    v55 = *(id *)&v4[OBJC_IVAR___UIHoverStyle__shape];
    v59 = v4;
    v13 = *(_QWORD *)&v4[OBJC_IVAR___UIHoverStyle__shape + 16];
    v14 = *(_QWORD *)&v4[OBJC_IVAR___UIHoverStyle__shape + 24];
    v16 = *((_QWORD *)v11 + 4);
    v15 = *((_QWORD *)v11 + 5);
    v17 = *((_QWORD *)v11 + 6);
    v18 = &v59[OBJC_IVAR___UIHoverStyle_host];
    v19 = v11[56];
    swift_beginAccess();
    sub_18519F0C4((uint64_t)v18, (uint64_t)v62, &qword_1EDD81A30);
    v56 = &v72;
    v72 = 0;
    v73 = -1;
    v74 = 0;
    v75 = 1;
    v77 = MEMORY[0x1E0DEE9E0];
    sub_1851E75D8((uint64_t)v63, (uint64_t)v70);
    v70[5] = v55;
    v70[6] = v12;
    v70[7] = v13;
    v70[8] = v14;
    v70[9] = v16;
    v70[10] = v15;
    v70[11] = v17;
    v71 = v19;
    sub_1852287BC(v55, v12, v13, v14, v16, v15, v17, v19);
    sub_1852287BC(v55, v12, v13, v14, v16, v15, v17, v19);
    sub_1851E6940((uint64_t)v62, (uint64_t)&v72);
    sub_1851E75D8((uint64_t)v63, (uint64_t)v61);
    v64[0] = v55;
    v64[1] = v12;
    v64[2] = v13;
    v65 = v14;
    v4 = v59;
    v66 = v16;
    v67 = v15;
    v68 = v17;
    v69 = v19;
    sub_18519F0C4((uint64_t)v62, (uint64_t)v60, &qword_1EDD81A30);
    v20 = objc_allocWithZone((Class)type metadata accessor for UIPointerHoverStyleDriver());
    v21 = sub_1852231CC((uint64_t)v61, (uint64_t)v64, (uint64_t)v60);
    sub_18519F088((uint64_t)v62, &qword_1EDD81A30);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v63);
    v76 = v21;
    v22 = objc_msgSend(v59, sel_isEnabled);
    v75 = (char)v22;
    v21[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_isEnabled] = (_BYTE)v22;
    v23 = *(void **)&v21[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerInteraction];
    if (v23)
      objc_msgSend(v23, sel_setEnabled_, v22);
    KeyPath = swift_getKeyPath();
    LOBYTE(v64[0]) = v75;
    v53 = MEMORY[0x1E0C80A78](KeyPath);
    v54 = v64;
    if (*(_QWORD *)(v77 + 16))
    {
      v25 = sub_18578A800(v77, (void (*)(__int128 *))sub_18578AC18, (uint64_t)v52);
      swift_release();
      swift_bridgeObjectRelease();
      v77 = v25;
    }
    else
    {
      swift_release();
    }
    objc_opt_self();
    v26 = (void *)swift_dynamicCastObjCClass();
    if (v26)
      v27 = v4;
    v28 = v74;
    v29 = v26;

    v74 = v26;
    swift_unknownObjectWeakAssign();
    v30 = v29;
    sub_185228420();

    v31 = swift_getKeyPath();
    v64[0] = v74;
    v53 = MEMORY[0x1E0C80A78](v31);
    v54 = v64;
    v32 = v77;
    v33 = *(_QWORD *)(v77 + 16);
    v35 = v34;
    if (v33)
    {
      v36 = sub_18578A800(v32, (void (*)(__int128 *))sub_18578ACBC, (uint64_t)v52);
      swift_release();
      swift_bridgeObjectRelease();
      v77 = v36;
    }
    else
    {
      swift_release();
    }
    a2 = v57;
    a3 = v58;
    v37 = (void *)v64[0];

    sub_185227F94((uint64_t)v70, (uint64_t)v64);
    swift_beginAccess();
    sub_185228084((uint64_t)v64, v8);
    swift_endAccess();
  }
  sub_18519F0C4(v8, (uint64_t)v64, &qword_1EDD81F98);
  if (!v65)
    return sub_18519F088((uint64_t)v64, &qword_1EDD81F98);
  sub_185227F94((uint64_t)v64, (uint64_t)v70);
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = a2;
  *(_QWORD *)(v38 + 24) = a3;
  v39 = &v4[OBJC_IVAR___UIHoverStyle_driverCoordinatorQueuedActions];
  swift_beginAccess();
  v40 = *(_QWORD **)v39;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v39 = v40;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v40 = sub_185647A60(0, v40[2] + 1, 1, v40);
    *(_QWORD *)v39 = v40;
  }
  v43 = v40[2];
  v42 = v40[3];
  if (v43 >= v42 >> 1)
  {
    v40 = sub_185647A60((_QWORD *)(v42 > 1), v43 + 1, 1, v40);
    *(_QWORD *)v39 = v40;
  }
  v40[2] = v43 + 1;
  v44 = &v40[2 * v43];
  v44[4] = sub_185228348;
  v44[5] = v38;
  swift_endAccess();
  v45 = OBJC_IVAR___UIHoverStyle_driverCoordinatorAccessLocked;
  if ((v4[OBJC_IVAR___UIHoverStyle_driverCoordinatorAccessLocked] & 1) != 0)
    return sub_1852280CC((uint64_t)v70);
  v59 = v4;
  v4[OBJC_IVAR___UIHoverStyle_driverCoordinatorAccessLocked] = 1;
  v47 = *(_QWORD **)v39;
  if (*(_QWORD *)(*(_QWORD *)v39 + 16))
  {
    v48 = MEMORY[0x1E0DEE9D8];
    do
    {
      *(_QWORD *)v39 = v48;
      v49 = v47[2];
      if (v49)
      {
        v50 = v47 + 5;
        do
        {
          v51 = (void (*)(_QWORD *))*(v50 - 1);
          swift_retain();
          v51(v70);
          swift_release();
          sub_18522819C((uint64_t)v70, (uint64_t)v64);
          swift_beginAccess();
          sub_185228084((uint64_t)v64, v8);
          swift_endAccess();
          v50 += 2;
          --v49;
        }
        while (v49);
      }
      swift_bridgeObjectRelease();
      v47 = *(_QWORD **)v39;
    }
    while (*(_QWORD *)(*(_QWORD *)v39 + 16));
  }
  result = sub_1852280CC((uint64_t)v70);
  v59[v45] = 0;
  return result;
}

uint64_t sub_185227F94(uint64_t a1, uint64_t a2)
{
  initializeWithTake for HoverStyleDriverCoordinator(a2, a1);
  return a2;
}

uint64_t initializeWithTake for HoverStyleDriverCoordinator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  v5 = a1 + 104;
  v6 = a2 + 104;
  v7 = *(unsigned __int8 *)(a2 + 112);
  if (v7 == 255)
  {
    *(_QWORD *)v5 = *(_QWORD *)v6;
    *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  }
  else
  {
    swift_unknownObjectWeakTakeInit();
    *(_BYTE *)(a1 + 112) = (v7 & 1) != 0;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v8;
  return a1;
}

uint64_t sub_185228084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD81F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1852280CC(uint64_t a1)
{
  destroy for HoverStyleDriverCoordinator(a1);
  return a1;
}

uint64_t destroy for HoverStyleDriverCoordinator(uint64_t a1)
{
  int v2;

  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255)
    sub_185228168(*(void **)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v2);
  if (*(unsigned __int8 *)(a1 + 112) != 255)
    swift_unknownObjectWeakDestroy();

  return swift_bridgeObjectRelease();
}

void sub_185228168(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  switch(a8)
  {
    case 2:

      break;
    case 3:
    case 4:
    case 5:
      swift_release();
      break;
    default:
      return;
  }
}

uint64_t sub_18522819C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HoverStyleDriverCoordinator(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for HoverStyleDriverCoordinator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(unsigned __int8 *)(a2 + 96);
  if (v5 == 255)
  {
    v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v13;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  else
  {
    v6 = *(void **)(a2 + 40);
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 72);
    v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 88);
    sub_185228314(v6, v7, v8, v9, v10, v11, v12, *(_BYTE *)(a2 + 96));
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v12;
    *(_BYTE *)(a1 + 96) = v5;
  }
  v14 = *(unsigned __int8 *)(a2 + 112);
  if (v14 == 255)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  }
  else
  {
    swift_unknownObjectWeakCopyInit();
    *(_BYTE *)(a1 + 112) = (v14 & 1) != 0;
  }
  v15 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v15;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v17 = *(void **)(a2 + 136);
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v17;
  *(_QWORD *)(a1 + 144) = v16;
  v18 = v15;
  v19 = v17;
  swift_bridgeObjectRetain();
  return a1;
}

id sub_185228314(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  switch(a8)
  {
    case 2:
      result = result;
      break;
    case 3:
    case 4:
    case 5:
      result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_185228348()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_185228378(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDD81AC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1852283C4(uint64_t a1)
{
  uint64_t v2;

  sub_185228420();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 16))
  {
    v2 = sub_1851E780C(*(_QWORD *)(a1 + 144));
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 144) = v2;
  }
}

void sub_185228420()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  char v18[8];
  char v19;
  char v20[8];
  _BYTE v21[48];
  _BYTE v22[40];

  v1 = v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver__effect;
  swift_beginAccess();
  sub_185228738(v1, (uint64_t)v21);
  sub_1851E75D8((uint64_t)v21, (uint64_t)v22);
  sub_1852286E0((uint64_t)v21);
  v2 = sub_185223894();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v22);
  v3 = OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerInteraction;
  v4 = *(id *)(v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerInteraction);
  if ((v2 & 1) != 0)
  {
    if (v4)
    {
      v5 = v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_host;
      swift_beginAccess();
      if (*(unsigned __int8 *)(v5 + 8) == 255)
      {
        v12 = v4;
      }
      else
      {
        sub_185223A04(v5, (uint64_t)v22);
        sub_185223A04((uint64_t)v22, (uint64_t)v18);
        if ((v19 & 1) != 0)
        {
          v6 = v4;
          sub_185227928((uint64_t)v18);
          sub_185227928((uint64_t)v22);
        }
        else
        {
          sub_185228378((uint64_t)v18, (uint64_t)v20);
          v13 = (id)MEMORY[0x186DCA138](v20);
          v14 = v4;
          sub_18519F088((uint64_t)v20, (uint64_t *)&unk_1EDD81AC0);
          sub_185227928((uint64_t)v22);
          if (v13)
          {
            v15 = objc_msgSend(v14, sel_view);
            if (!v15 || (v16 = v15, v15, v16 != v13))
            {
              objc_msgSend(v13, sel_addInteraction_, v14);

              return;
            }

          }
        }
      }
      objc_msgSend(v4, sel_invalidate);
    }
    else
    {
      v9 = objc_msgSend(objc_allocWithZone((Class)UIPointerInteraction), sel_initWithDelegate_, v0);
      v10 = *(void **)(v0 + v3);
      *(_QWORD *)(v0 + v3) = v9;
      v4 = v9;

      v11 = v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_host;
      swift_beginAccess();
      if (*(unsigned __int8 *)(v11 + 8) != 255)
      {
        sub_185223A04(v11, (uint64_t)v22);
        sub_185223A04((uint64_t)v22, (uint64_t)v18);
        if ((v19 & 1) != 0)
        {
          sub_185227928((uint64_t)v18);
          sub_185227928((uint64_t)v22);
        }
        else
        {
          sub_185228378((uint64_t)v18, (uint64_t)v20);
          v17 = (void *)MEMORY[0x186DCA138](v20);
          sub_18519F088((uint64_t)v20, (uint64_t *)&unk_1EDD81AC0);
          sub_185227928((uint64_t)v22);
          if (v17)
          {
            objc_msgSend(v17, sel_addInteraction_, v4);

          }
        }
      }
    }
  }
  else
  {
    if (!v4)
      return;
    v4 = v4;
    v7 = objc_msgSend(v4, sel_view);
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v7, sel_removeInteraction_, v4);

      return;
    }
  }

}

uint64_t sub_1852286E0(uint64_t a1)
{
  destroy for CachedHoverEffect(a1);
  return a1;
}

uint64_t destroy for CachedHoverEffect(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return swift_unknownObjectRelease();
}

uint64_t sub_185228738(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CachedHoverEffect(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for CachedHoverEffect(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_unknownObjectRetain();
  return a1;
}

id sub_1852287BC(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 != -1)
    return sub_185228314(result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_1852287F0(uint64_t a1)
{
  uint64_t v1;

  return sub_1852287F8(a1, v1 + 16);
}

uint64_t sub_1852287F8(uint64_t a1, uint64_t a2)
{
  _BYTE v4[16];
  _BYTE v5[16];

  sub_18519F0C4(a2, (uint64_t)v5, &qword_1EDD81A30);
  sub_18519F0C4(a1 + 104, (uint64_t)v4, &qword_1EDD81A30);
  sub_1851E6940((uint64_t)v5, a1 + 104);
  sub_1852288A8((uint64_t)v4);
  sub_18519F088((uint64_t)v5, &qword_1EDD81A30);
  return sub_18519F088((uint64_t)v4, &qword_1EDD81A30);
}

uint64_t sub_185228880()
{
  uint64_t v0;

  return sub_1851E5310(v0 + 16);
}

uint64_t sub_1852288A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t result;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];
  _BYTE v14[24];
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[16];
  uint64_t v18;
  unsigned __int8 v19;

  v2 = v1;
  v4 = v1 + 104;
  sub_185228B10(v1 + 104, (uint64_t)v14);
  sub_185228B10((uint64_t)v14, (uint64_t)v17);
  sub_185228B10(a1, (uint64_t)&v18);
  if (v17[8] == 255)
  {
    sub_18519F088((uint64_t)v14, &qword_1EDD81A30);
    if (v19 == 255)
    {
      v7 = v17;
      return sub_18519F088((uint64_t)v7, &qword_1EDD81A30);
    }
    goto LABEL_8;
  }
  sub_185228B10((uint64_t)v17, (uint64_t)v16);
  if (v19 == 255)
  {
    sub_18519F088((uint64_t)v14, &qword_1EDD81A30);
    sub_185227928((uint64_t)v16);
LABEL_8:
    sub_18519F088((uint64_t)v17, qword_1EDD81A38);
    goto LABEL_9;
  }
  sub_185223148((uint64_t)&v18, (uint64_t)v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF58]);
  v5 = sub_185222F18((uint64_t)v16, (uint64_t)v15);
  sub_185227928((uint64_t)v15);
  sub_18519F088((uint64_t)v14, &qword_1EDD81A30);
  sub_185227928((uint64_t)v16);
  result = sub_18519F088((uint64_t)v17, &qword_1EDD81A30);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    v8 = *(_QWORD *)(v2 + 136);
    sub_185228B10(v4, (uint64_t)v16);
    v9 = v8 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_host;
    swift_beginAccess();
    sub_185228B10(v9, (uint64_t)v15);
    swift_beginAccess();
    sub_1851E6940((uint64_t)v16, v9);
    swift_endAccess();
    sub_18575E4F4((uint64_t)v15);
    sub_18519F088((uint64_t)v16, &qword_1EDD81A30);
    sub_18519F088((uint64_t)v15, &qword_1EDD81A30);
    KeyPath = swift_getKeyPath();
    v11 = sub_185228B10(v4, (uint64_t)v14);
    MEMORY[0x1E0C80A78](v11);
    v13[2] = KeyPath;
    v13[3] = v14;
    if (*(_QWORD *)(*(_QWORD *)(v2 + 144) + 16))
    {
      v12 = sub_18578A800(*(_QWORD *)(v2 + 144), (void (*)(__int128 *))sub_1856DCE50, (uint64_t)v13);
      swift_release();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v2 + 144) = v12;
    }
    else
    {
      swift_release();
    }
    v7 = v14;
    return sub_18519F088((uint64_t)v7, &qword_1EDD81A30);
  }
  return result;
}

uint64_t sub_185228B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD81A30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for UIPointerHoverStyleDriver()
{
  return objc_opt_self();
}

char *sub_185228B78(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_186507EA0();
  __break(1u);
  return result;
}

char *_UIUpdateCurrentTiming()
{
  if (dword_1ECD7F574)
    return &_MergedGlobals_1175[24 * (dword_1ECD7F578 - 1) + 112];
  else
    return 0;
}

id UIButton.Configuration.cornerStyle.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v8;

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    v5 = *(void **)(v4 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v4 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_1851F9080(0, (unint64_t *)&unk_1EDD827B8);
    swift_dynamicCast();
    v5 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BB8);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v8;
    swift_release();
    *v1 = v6;
  }
  return objc_msgSend(v5, sel_setCornerStyle_, v2 - 1);
}

double _BoundingRectForTouches(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t i;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (!v4)
    goto LABEL_12;
  v5 = v4;
  v6 = 0;
  v7 = *(_QWORD *)v21;
  v8 = -INFINITY;
  v9 = INFINITY;
  v10 = INFINITY;
  v11 = -INFINITY;
  do
  {
    for (i = 0; i != v5; ++i)
    {
      if (*(_QWORD *)v21 != v7)
        objc_enumerationMutation(v3);
      v13 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
      if (!a2 || objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * i), "phase") <= 2)
      {
        objc_msgSend(v13, "window");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "locationInView:", 0);
        objc_msgSend(v14, "_convertPointToSceneReferenceSpace:");
        v16 = v15;
        v18 = v17;

        v9 = fmin(v9, v16);
        v10 = fmin(v10, v18);
        v8 = fmax(v8, v16);
        ++v6;
        v11 = fmax(v11, v18);
      }
    }
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  }
  while (v5);
  if (v6 < 1)
LABEL_12:
    v9 = *MEMORY[0x1E0C9D628];

  return v9;
}

id _AccessoryFontForLineHeightAlignment(void *a1, _BYTE *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  char isKindOfClass;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;

  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "_currentImage");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
    v10 = v4;
    _UITableCellFontForImage(v4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    isKindOfClass = 1;
    goto LABEL_12;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "currentBackgroundImage");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = v3;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = ___AccessoryFontForLineHeightAlignment_block_invoke;
    v15[3] = &unk_1E16B1B28;
    v16 = v5;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v15);
    objc_msgSend(v5, "viewForLastBaselineLayout");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
    {
      objc_msgSend(v6, "_currentImage");
      v8 = (id)objc_claimAutoreleasedReturnValue();
      _UITableCellFontForImage(v8);
      v9 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v11 = 0;
        goto LABEL_23;
      }
      v8 = v6;
      objc_msgSend(v8, "text");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "length");

      if (!v14)
      {
        v11 = 0;
        goto LABEL_19;
      }
      objc_msgSend(v8, "font");
      v9 = objc_claimAutoreleasedReturnValue();
    }
    v11 = (void *)v9;
LABEL_19:

LABEL_23:
    goto LABEL_12;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(v3, "_renderedImage");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "font");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    isKindOfClass = 0;
  }
  else
  {
    isKindOfClass = 0;
    v11 = 0;
  }
LABEL_12:
  if (a2)
    *a2 = isKindOfClass & (v11 != 0);

  return v11;
}

uint64_t ShouldSizeLeftOrRightViewToFit(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  if ((dyld_program_sdk_at_least() & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v1, "image");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = objc_msgSend(v3, "isSymbolImage");

    }
    else
    {
      v2 = 0;
    }
  }

  return v2;
}

double _UITableCellLineHeightCenteredViewInRect(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double Height;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGFloat v24;
  CGFloat v25;
  double v26;
  CGRect v28;
  CGRect v29;

  v11 = a1;
  v12 = a2;
  objc_msgSend(v11, "viewForLastBaselineLayout");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "_baselineOffsetFromBottom");
  v15 = v14;
  objc_msgSend(v11, "alignmentRectInsets");
  v17 = v15 + v16;
  if (v13 && v13 != v11)
  {
    objc_msgSend(v13, "bounds");
    Height = CGRectGetHeight(v28);
    objc_msgSend(v13, "_baselineOffsetFromBottom");
    v20 = v19;
    objc_msgSend(v13, "alignmentRectInsets");
    objc_msgSend(v13, "convertPoint:toView:", v11, 0.0, Height - (v20 + v21));
    v23 = v22;
    objc_msgSend(v11, "bounds");
    v17 = CGRectGetHeight(v29) - v23;
  }
  objc_msgSend(v11, "bounds");
  v26 = _UITableCellLineHeightCenteredSizeWithBaselineInRect(v12, v24, v25, v17, 1.0, a3, a4, a5, a6);

  return v26;
}

uint64_t _ConvertDeviceReferenceSpacePointToView(void *a1, double a2, double a3)
{
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;

  objc_msgSend(a1, "_window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "_convertPointFromSceneReferenceSpace:", a2, a3);
  v8 = v7;
  v10 = v9;

  return objc_msgSend(a1, "convertPoint:fromView:", 0, v8, v10);
}

BOOL _UITableCellSupportsHorizontalCenteringBehaviorForTraitCollection(void *a1)
{
  id v1;
  NSString *v2;
  _BOOL8 v3;

  v1 = a1;
  if (dyld_program_sdk_at_least())
  {
    objc_msgSend(v1, "preferredContentSizeCategory");
    v2 = (NSString *)objc_claimAutoreleasedReturnValue();
    v3 = !UIContentSizeCategoryIsAccessibilityCategory(v2);

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

double _ListCellSeparatorLayoutGuideHeightForCell(void *a1)
{
  id v1;
  void *v2;
  NSString *v3;
  BOOL IsAccessibilityCategory;
  double v5;
  double v6;
  void *v8;
  void *v9;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat _ListCellSeparatorLayoutGuideHeightForCell(UICollectionViewListCell * _Nonnull __strong)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("UICollectionViewListCell.m"), 2212, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("cell != nil"));

  }
  objc_msgSend(v1, "traitCollection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "preferredContentSizeCategory");
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  IsAccessibilityCategory = UIContentSizeCategoryIsAccessibilityCategory(v3);

  v5 = 1.0;
  if (!IsAccessibilityCategory)
  {
    objc_msgSend(v1, "_currentScreenScale");
    v5 = 1.0 / v6;
  }

  return v5;
}

void sub_18522DA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s8_s16_s24_s80(&a9);
  _Unwind_Resume(a1);
}

void sub_18522E108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18522E700(void *a1, const char **a2)
{
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  id v10;
  void *v11;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_18522E994();
    swift_dynamicCast();
    v7 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A78);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v11;
    swift_release();
    *v2 = v8;
  }
  v9 = *a2;
  v10 = v7;
  objc_msgSend(v10, v9, a1);

}

unint64_t sub_18522E994()
{
  unint64_t result;

  result = qword_1ECD74850;
  if (!qword_1ECD74850)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ECD74850);
  }
  return result;
}

void sub_18522EFC0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18522F6BC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_18522F904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18522FAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v17 - 120), 8);
  objc_destroyWeak((id *)(v17 - 88));
  _Unwind_Resume(a1);
}

void sub_18522FD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  id *v27;
  id *v28;
  id *v29;
  uint64_t v30;

  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  objc_destroyWeak((id *)(v30 - 104));
  _Unwind_Resume(a1);
}

void sub_18522FDE8()
{
  JUMPOUT(0x18522FDCCLL);
}

void sub_18523032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s8_s16_s24_s80(&a9);
  _Unwind_Resume(a1);
}

void sub_18523090C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

void UICollectionLayoutListConfiguration.backgroundColor.setter(void *a1)
{
  uint64_t *v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    v5 = *(void **)(v4 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v4 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_185167974();
    swift_dynamicCast();
    v5 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A58);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v8;
    swift_release();
    *v1 = v6;
  }
  v7 = v5;
  objc_msgSend(v7, sel_setBackgroundColor_, a1);

}

id _BarButtonCachedSystemImageWithName(void *a1, void *a2, void *a3, void *a4, int a5, double a6, double a7, double a8, double a9)
{
  unint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = a4;
  if (v17 | v18)
  {
    if (qword_1ECD7CE48 != -1)
      dispatch_once(&qword_1ECD7CE48, &__block_literal_global_225_0);
    if (v17)
      v22 = v17;
    else
      v22 = v18;
    objc_msgSend((id)qword_1ECD7CE40, "objectForKey:", v22);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v21)
    {
      +[UIImage _systemImageNamed:fallback:withConfiguration:](UIImage, "_systemImageNamed:fallback:withConfiguration:", v17, v18, v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (v21)
        objc_msgSend((id)qword_1ECD7CE40, "setObject:forKey:", v21, v18);
    }
    if (v20)
    {
      objc_msgSend(v21, "imageWithTintColor:renderingMode:", v20, 1);
      v23 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v23;
    }
    if ((objc_msgSend(v21, "_isSymbolImage") & 1) == 0)
      objc_msgSend(v21, "_setAlignmentRectInsets:", a6, a7, a8, a9);
    if (a5)
    {
      objc_msgSend(v21, "imageFlippedForRightToLeftLayoutDirection");
      v24 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v24;
    }
  }
  else
  {
    v21 = 0;
  }

  return v21;
}

id __UIWindowSceneTraitCollectionWithSceneUISettings(void *a1)
{
  id *v1;
  _BYTE *TraitCollectionTSD;
  char v3;
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  TraitCollectionTSD = GetTraitCollectionTSD();
  v3 = TraitCollectionTSD[9];
  TraitCollectionTSD[9] = 1;
  if (v1)
  {
    v4 = v1[54];
    if (!v4)
    {
      WeakRetained = objc_loadWeakRetained(v1 + 58);
      v6 = WeakRetained;
      if (WeakRetained)
      {
        objc_msgSend(WeakRetained, "traitCollection");
        v4 = (id)objc_claimAutoreleasedReturnValue();
        if (!v4)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", sel__parentTraitCollection, v1, CFSTR("UIWindowScene.m"), 2984, CFSTR("UIKit internal inconsistency: overrideParentTraitEnvironment returned a nil traitCollection: %@"), v6);

          v4 = 0;
        }
      }
      else
      {
        -[UIWindowScene _screenTraitCollectionWithOverridesAppliedFromSceneUISettings](v1);
        v4 = (id)objc_claimAutoreleasedReturnValue();
      }

    }
  }
  else
  {
    v4 = 0;
  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v1[38];
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v19 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i), "_traitOverrides");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (v13)
        {
          -[UITraitCollection _traitCollectionByApplyingOverrides:defaultValueOverrides:](v4, (uint64_t)v13, 0);
          v14 = objc_claimAutoreleasedReturnValue();

          v4 = (id)v14;
        }

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v10);
  }

  v15 = (void **)v1[35];
  if (v15)
  {
    -[_UITraitOverrides _traitCollectionByApplyingOverridesToTraitCollection:](v15, v4);
    v16 = objc_claimAutoreleasedReturnValue();

    v4 = (id)v16;
  }
  *((_BYTE *)GetTraitCollectionTSD() + 9) = v3;

  return v4;
}

void sub_18523460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_UIFocusBehavior_TV *_UIFocusBaseBehaviorForTraitCollection(void *a1)
{
  id v1;
  void *v2;
  int v3;
  _UIFocusBehavior_TV *v4;
  __objc2_class *v5;
  _UIFocusBehavior_TV *v6;
  uint64_t v7;

  v1 = a1;
  if (!v1)
  {
    +[UITraitCollection _fallbackTraitCollection]();
    v1 = (id)objc_claimAutoreleasedReturnValue();
  }
  switch(objc_msgSend(v1, "userInterfaceIdiom"))
  {
    case 0:
      if (_AXSFullKeyboardAccessEnabled())
        goto LABEL_8;
      +[_UIApplicationInfoParser mainBundleInfoParser](_UIApplicationInfoParser, "mainBundleInfoParser");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v2, "requiresGameControllerBasedFocus");

      if (v3)
        goto LABEL_13;
      goto LABEL_6;
    case 1:
      if (_AXSFullKeyboardAccessEnabled())
LABEL_8:
        v5 = _UIFocusBehavior_FKA;
      else
LABEL_13:
        v5 = _UIFocusBehavior_IOS;
      goto LABEL_16;
    case 2:
      v6 = +[_UIFocusBehavior_TV sharedInstance](_UIFocusBehavior_TV, "sharedInstance");
      goto LABEL_17;
    case 3:
      v7 = objc_msgSend(v1, "primaryInteractionModel");
      if (v7 == 8)
      {
        v5 = _UIFocusBehavior_CarPlayTouchpad;
      }
      else if (v7 == 2)
      {
        v5 = _UIFocusBehavior_CarPlayKnob;
      }
      else
      {
        v5 = _UIFocusBehavior_CarPlayTouch;
      }
LABEL_16:
      -[__objc2_class sharedInstance](v5, "sharedInstance");
      v6 = (_UIFocusBehavior_TV *)objc_claimAutoreleasedReturnValue();
LABEL_17:
      v4 = v6;
      break;
    default:
LABEL_6:
      v4 = 0;
      break;
  }

  return v4;
}

double GroupedTableOffsetFromTop(void *a1, void *a2)
{
  id v3;
  uint64_t *v4;
  double v5;
  double v6;
  void *v7;
  char v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  double v13;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "_topPadding");
  v6 = v5;
  if (v5 == -1.0)
  {
    v6 = 0.0;
    if (-[UITableViewRowData heightForTableHeaderView]((uint64_t)v4) <= 0.0
      && (!v4 || v4[8] < 1 || (objc_msgSend(v3, "_shouldHaveHeaderViewForSection:", 0) & 1) == 0))
    {
      objc_msgSend(v3, "_scrollView");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "_shouldAdjustLayoutToCollapseTopSpacing");

      if ((v8 & 1) == 0)
      {
        objc_msgSend(v3, "_scrollView");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "_topLayoutInsetForSidebar");
        v11 = v10;

        if (v11 <= 0.0)
        {
          objc_msgSend(v3, "_constants");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "defaultPaddingAboveFirstSectionWithoutHeaderTableStyle:", objc_msgSend(v3, "_tableStyle"));
          v6 = v13;

        }
      }
    }
  }

  return v6;
}

void sub_185235058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIDirectionalEdgesForContentInsetEnvironment(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  double result;
  void *v12;
  void *v13;

  v7 = a2;
  if ((unint64_t)(a3 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSDirectionalEdgeInsets _UIDirectionalEdgesForContentInsetEnvironment(const __strong id<_UIContentInsetsEnvironment> _Nonnull, UIContentInsetsReference, UIAxis)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("_UICollectionLayoutHelpers.m"), 2406, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("layoutAxis == UIAxisVertical || layoutAxis == UIAxisHorizontal"));

    if (!v7)
    {
LABEL_3:
      v9 = objc_msgSend(a1, "insetReference");
      if (v9 <= 1)
        v7 = 1;
      else
        v7 = v9;
    }
  }
  else if (!a2)
  {
    goto LABEL_3;
  }
  if (a3 == 1)
    v10 = 2;
  else
    v10 = a3 == 2;
  switch(v7)
  {
    case 4:
      objc_msgSend(a1, "readableContentInsets", a4, a5, a6, 0.0);
      if (!v10)
        return 0.0;
      break;
    case 3:
      objc_msgSend(a1, "layoutMarginsInsets", a4, a5, a6, 0.0);
      if (!v10)
        return 0.0;
      break;
    case 2:
      objc_msgSend(a1, "safeAreaInsets", a4, a5, a6, 0.0);
      if (!v10)
        return 0.0;
      break;
    default:
      return 0.0;
  }
  if (v10 == 1)
    return 0.0;
  return result;
}

void sub_185237B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GetImageAtPath(void *a1, int a2, double a3)
{
  CGImageSource *v4;
  CGImageSource *v5;
  UIImage *v6;
  _UIImageCGImageContent *v7;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  v4 = ImageSourceAtPath(a1, a2, (unint64_t)&v10);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = [UIImage alloc];
  v7 = -[_UIImageCGImageContent initWithCGImageSource:scale:]([_UIImageCGImageContent alloc], "initWithCGImageSource:scale:", v5, a3);
  v8 = -[UIImage _initWithContent:orientation:](v6, "_initWithContent:orientation:", v7, v10);

  CFRelease(v5);
  return v8;
}

CGImageSource *_UIImageSourceAtPath(void *a1, int a2, unint64_t a3, double *a4, _QWORD *a5)
{
  id v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  CGImageSource *v14;
  CGImageSource *v15;
  unint64_t v16;
  double v17;
  void *v18;

  v9 = a1;
  if (+[UIDevice _isWatch](UIDevice, "_isWatch"))
  {
    _UIImageCollectImagePathsForPath(v9, 0, 0, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11 = +[UIDevice _isWatchCompanion](UIDevice, "_isWatchCompanion");
    _UIImageCollectImagePathsForPath(v9, 0, 0, v11);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v11 & 1) == 0)
    {
      +[UIScreen _mainScreenThreadSafeTraitCollection](UIScreen, "_mainScreenThreadSafeTraitCollection");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      BestPathForTraits(v10, v13);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_6;
    }
  }
  objc_msgSend(v10, "firstObject");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_6:
  v14 = ImageSourceAtPath(v12, a2, a3);
  v15 = v14;
  if (a4 && v14)
  {
    v16 = +[UIImage _scaleDefinedByPath:](UIImage, "_scaleDefinedByPath:", v12);
    v17 = (double)v16;
    if (v16 == 0x7FFFFFFFFFFFFFFFLL)
      v17 = 1.0;
    *a4 = v17;
  }
  if (a5)
  {
    if (v15)
      v18 = v12;
    else
      v18 = 0;
    *a5 = objc_retainAutorelease(v18);
  }

  return v15;
}

id _UIImageCollectImagePathsForPath(void *a1, void *a2, char a3, char a4)
{
  __CFString *v7;
  id v8;
  void *v9;
  BOOL v10;
  double v11;
  __CFString *v12;
  __CFString *v13;
  id v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  void *v24;
  id v25;
  void (**v26)(void *, id, __CFString *);
  void *v27;
  _QWORD aBlock[4];
  id v30;
  __CFString *v31;
  id v32;
  __CFString *v33;
  char v34;
  BOOL v35;

  v7 = a1;
  v8 = a2;
  if (v7 && -[__CFString length](v7, "length"))
  {
    +[UIScreen mainScreen](UIScreen, "mainScreen");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "scale");
    v10 = 1;
    if (v11 != 1.0 && (a3 & 1) == 0)
      v10 = __preferredDeviceScale == 1;

    -[__CFString pathExtension](v7, "pathExtension");
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      objc_msgSend(v8, "bundlePath");
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = &stru_1E16EDF20;
    }
    -[__CFString lastPathComponent](v7, "lastPathComponent");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v15, "isEqualToString:", CFSTR("/")) & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      ProductSuffix();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v15, "containsString:", v16);

      if (v17)
      {
        ProductSuffix();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "stringByReplacingOccurrencesOfString:withString:", v18, &stru_1E16EDF20);
        v19 = objc_claimAutoreleasedReturnValue();

        -[__CFString stringByDeletingLastPathComponent](v7, "stringByDeletingLastPathComponent");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "stringByAppendingPathComponent:", v19);
        v21 = objc_claimAutoreleasedReturnValue();

        v15 = (void *)v19;
        v7 = (__CFString *)v21;
      }
      if (-[__CFString length](v12, "length"))
      {
        -[__CFString stringByDeletingPathExtension](v7, "stringByDeletingPathExtension");
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = v7;
        v7 = (__CFString *)v22;
      }
      else
      {
        v23 = v12;
        v12 = CFSTR("png");
      }

      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___UIImageCollectImagePathsForPath_block_invoke;
      aBlock[3] = &unk_1E16EDB28;
      v30 = v8;
      v31 = v13;
      v25 = v24;
      v32 = v25;
      v34 = a4;
      v7 = v7;
      v33 = v7;
      v35 = v10;
      v26 = (void (**)(void *, id, __CFString *))_Block_copy(aBlock);
      v26[2](v26, v7, v12);
      if (!objc_msgSend(v25, "count")
        && (-[__CFString isEqualToString:](v12, "isEqualToString:", CFSTR("png")) & 1) == 0)
      {
        -[__CFString stringByAppendingPathExtension:](v7, "stringByAppendingPathExtension:", v12);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v26[2](v26, v27, CFSTR("png"));

      }
      v14 = v25;

    }
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

id _UserInterfaceTraitFromPath(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  int64_t v4;
  _QWORD v6[6];

  v1 = a1;
  v2 = +[UIImage _scaleDefinedByPath:](UIImage, "_scaleDefinedByPath:", v1);
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 1;
  else
    v3 = v2;
  v4 = +[UIImage _idiomDefinedByPath:](UIImage, "_idiomDefinedByPath:", v1);

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___UserInterfaceTraitFromPath_block_invoke;
  v6[3] = &__block_descriptor_48_e27_v16__0___UIMutableTraits__8l;
  v6[4] = v4;
  v6[5] = v3;
  +[UITraitCollection traitCollectionWithTraits:](UITraitCollection, "traitCollectionWithTraits:", v6);
  return (id)objc_claimAutoreleasedReturnValue();
}

CGImageSource *ImageSourceAtPath(void *a1, int a2, unint64_t a3)
{
  __CFString *v5;
  void *v6;
  uint64_t v7;
  char v8;
  char v9;
  CGImageSource *v10;
  const __CFDictionary *v11;
  CFURLRef v12;
  const __CFURL *v13;
  CGImageSource *v14;
  void *values;
  void *v17;
  uint64_t v18;
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1;
  if (v5)
  {
    keys[0] = *(void **)MEMORY[0x1E0CBD240];
    keys[1] = CFSTR("kCGImageSourceSkipCRC");
    keys[2] = CFSTR("kCGImageSourceSkipMetadata");
    values = (void *)*MEMORY[0x1E0C9AE40];
    v17 = values;
    v6 = (void *)*MEMORY[0x1E0C9AE50];
    v18 = *MEMORY[0x1E0C9AE50];
    if (a2)
      values = v6;
    v7 = 0;
    v8 = 1;
    while (1)
    {
      v9 = v8;
      if (CFStringHasPrefix(v5, ImageSourceAtPath_trustedPaths[v7]))
        break;
      v8 = 0;
      v7 = 1;
      if ((v9 & 1) == 0)
        goto LABEL_10;
    }
    v17 = v6;
LABEL_10:
    v11 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = CFURLCreateWithFileSystemPath(0, v5, kCFURLPOSIXPathStyle, 0);
    v13 = (const __CFURL *)CFAutorelease(v12);
    v14 = CGImageSourceCreateWithURL(v13, v11);
    v10 = v14;
    if (v14 && CGImageSourceGetCount(v14))
      _UIImageGetOrientationAndScale(v10, 0, v11, a3, 0);
    if (v11)
      CFRelease(v11);
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

CGImageRef _UIImageRefFromData(void *a1, int a2, unint64_t a3, double *a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  CGImageRef ImageAtIndex;
  const __CFData *v14;
  const __CFDictionary *v15;
  CGImageSource *v16;
  CGImageSource *v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  if (objc_msgSend(v7, "length"))
  {
    if (a2)
    {
      v8 = *MEMORY[0x1E0CBD240];
      v21[0] = *MEMORY[0x1E0CBD288];
      v21[1] = v8;
      v22[0] = MEMORY[0x1E0C9AAB0];
      v22[1] = MEMORY[0x1E0C9AAB0];
      v9 = (void *)MEMORY[0x1E0C99D80];
      v10 = v22;
      v11 = v21;
      v12 = 2;
    }
    else
    {
      v19 = *MEMORY[0x1E0CBD288];
      v20 = MEMORY[0x1E0C9AAB0];
      v9 = (void *)MEMORY[0x1E0C99D80];
      v10 = &v20;
      v11 = &v19;
      v12 = 1;
    }
    v15 = (const __CFDictionary *)objc_msgSend(v9, "dictionaryWithObjects:forKeys:count:", v10, v11, v12);
    v14 = (const __CFData *)objc_msgSend(v7, "copy");

    v16 = CGImageSourceCreateWithData(v14, v15);
    if (v16)
    {
      v17 = v16;
      if (CGImageSourceGetCount(v16))
      {
        ImageAtIndex = CGImageSourceCreateImageAtIndex(v17, 0, v15);
        _UIImageGetOrientationAndScale(v17, 0, v15, a3, a4);
      }
      else
      {
        ImageAtIndex = 0;
      }
      CFRelease(v17);
    }
    else
    {
      ImageAtIndex = 0;
    }
  }
  else
  {
    ImageAtIndex = 0;
    v14 = (const __CFData *)v7;
  }

  return ImageAtIndex;
}

void _UIImageGetOrientationAndScale(CGImageSource *a1, int a2, const __CFDictionary *a3, unint64_t a4, double *a5)
{
  CFDictionaryRef v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  const __CFDictionary *v15;

  if (a4 | (unint64_t)a5)
  {
    v7 = CGImageSourceCopyPropertiesAtIndex(a1, a2, a3);
    if (v7)
    {
      v15 = v7;
      if (a4)
      {
        *(_QWORD *)a4 = 0;
        -[__CFDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCFF0]);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "integerValue");

        v7 = v15;
        if ((unint64_t)(v9 - 1) <= 7)
          *(_QWORD *)a4 = _UIImageGetOrientationAndScale___orientationMapping[v9 - 1];
      }
      if (a5)
      {
        *a5 = 1.0;
        -[__CFDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCA00]);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v10)
        {
          -[__CFDictionary objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCF40]);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCF48]);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

        }
        objc_msgSend(v10, "doubleValue");
        if (v12 >= 7.2 && v12 <= 7200.0)
        {
          v13 = v12 / 72.0;
          v14 = round(v13);
          if (vabdd_f64(v13, v14) < 0.001)
            v13 = v14;
          *a5 = v13;
        }

        v7 = v15;
      }
    }

  }
}

id BestPathForTraits(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, void *, uint64_t, _BYTE *);
  void *v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "count") == 1)
  {
    objc_msgSend(v3, "objectAtIndex:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else if ((unint64_t)objc_msgSend(v3, "count") < 2)
  {
    v5 = 0;
  }
  else
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x2020000000;
    v16 = 0x7FFFFFFFFFFFFFFFLL;
    v7 = MEMORY[0x1E0C809B0];
    v8 = 3221225472;
    v9 = __BestPathForTraits_block_invoke;
    v10 = &unk_1E16EDB50;
    v12 = &v13;
    v11 = v4;
    objc_msgSend(v3, "enumerateObjectsUsingBlock:", &v7);
    if (v14[3] == 0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = 0;
    }
    else
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", v7, v8, v9, v10);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }

    _Block_object_dispose(&v13, 8);
  }

  return v5;
}

void sub_18523A660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_UIAssetManager *_UIKitCoreGlyphsManager()
{
  _UIAssetManager *v0;
  uint64_t v1;

  os_unfair_lock_lock((os_unfair_lock_t)&__UIKitCoreGlyphsManagersLock);
  v0 = (_UIAssetManager *)__UIKitCoreGlyphsManager;
  if (!__UIKitCoreGlyphsManager)
  {
    v1 = objc_msgSend(MEMORY[0x1E0D89780], "public");
    if (v1)
    {
      v0 = -[_UIAssetManager initWithName:inBundle:idiom:]([_UIAssetManager alloc], "initWithName:inBundle:idiom:", CFSTR("CoreGlyphs"), v1, -[UIDevice userInterfaceIdiom](+[UIDevice currentDevice](UIDevice, "currentDevice"), "userInterfaceIdiom"));
      __UIKitCoreGlyphsManager = (uint64_t)v0;
      *(_BYTE *)&v0->_assetManagerFlags |= 8u;
    }
    else
    {
      v0 = (_UIAssetManager *)__UIKitCoreGlyphsManager;
      if (!__UIKitCoreGlyphsManager)
      {
        if (_UIKitCoreGlyphsManager_once != -1)
          dispatch_once(&_UIKitCoreGlyphsManager_once, &__block_literal_global_28_3);
        v0 = (_UIAssetManager *)__UIKitCoreGlyphsManager;
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&__UIKitCoreGlyphsManagersLock);
  return v0;
}

void CommonInit(void *a1)
{
  _QWORD *v1;
  void *v2;
  _UISearchBarTextFieldTokenCounter *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  UITapGestureRecognizer *v9;
  void *v10;
  UIHoverGestureRecognizer *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  objc_class *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v1 = a1;
  v20 = v1;
  if (!v1[144])
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void CommonInit(UISearchTextField *__strong)");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("UISearchTextField.m"), 285, CFSTR("Visual style should not be nil by now."));

    v1 = v20;
  }
  objc_msgSend(v1, "updateForBackdropStyle:", 2005);
  if (UISearchBarUsesModernAppearance())
  {
    objc_msgSend(v20, "layer");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setAllowsGroupOpacity:", 0);

  }
  v3 = [_UISearchBarTextFieldTokenCounter alloc];
  objc_msgSend(v20, "textStorage");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[_UISearchBarTextFieldTokenCounter initWithTextStorage:](v3, "initWithTextStorage:", v4);
  v6 = (void *)*((_QWORD *)v20 + 142);
  *((_QWORD *)v20 + 142) = v5;

  objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)*((_QWORD *)v20 + 141);
  *((_QWORD *)v20 + 141) = v7;

  v9 = -[UITapGestureRecognizer initWithTarget:action:]([UITapGestureRecognizer alloc], "initWithTarget:action:", v20, sel__tokenTapGestureRecognized);
  v10 = (void *)*((_QWORD *)v20 + 143);
  *((_QWORD *)v20 + 143) = v9;

  objc_msgSend(v20, "addGestureRecognizer:", *((_QWORD *)v20 + 143));
  v11 = -[UIHoverGestureRecognizer initWithTarget:action:]([UIHoverGestureRecognizer alloc], "initWithTarget:action:", v20, sel__hoverGestureChanged_);
  v12 = (void *)*((_QWORD *)v20 + 145);
  *((_QWORD *)v20 + 145) = v11;

  objc_msgSend(v20, "addGestureRecognizer:", *((_QWORD *)v20 + 145));
  if (objc_msgSend(v20, "_supportsDynamicType"))
  {
    objc_msgSend(*((id *)v20 + 144), "dynamicSearchFieldFont");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setFont:", v13);

    objc_msgSend(v20, "setAdjustsFontForContentSizeCategory:", 1);
  }
  objc_msgSend(v20, "_setSupportsKeyboardNavigationForSuggestions:", 1);
  objc_msgSend(v20, "traitCollection");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UIVisualStyleRegistry registryForIdiom:](_UIVisualStyleRegistry, "registryForIdiom:", objc_msgSend(v14, "userInterfaceIdiom"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (objc_class *)objc_msgSend(v15, "visualStyleClassForStylableClass:", objc_opt_class());

  v17 = (void *)objc_msgSend([v16 alloc], "initWithSearchTextField:", v20);
  objc_msgSend(v17, "setDelegate:", v20);
  objc_msgSend(v20, "_setSuggestionController:", v17);

}

void CommonInit_0(void *a1)
{
  UILabel *v1;
  void *v2;
  UIImageView *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v15 = a1;
  v1 = objc_alloc_init(UILabel);
  +[UIColor whiteColor](UIColor, "whiteColor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  -[UILabel setTextColor:](v1, "setTextColor:", v2);

  -[UIView setHidden:](v1, "setHidden:", 1);
  -[UILabel setTextAlignment:](v1, "setTextAlignment:", 1);
  v15[52] = v1;
  objc_msgSend(v15, "addSubview:", v1);
  v3 = objc_alloc_init(UIImageView);
  +[UIColor whiteColor](UIColor, "whiteColor");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView setTintColor:](v3, "setTintColor:", v4);

  if (qword_1ECD7A938 != -1)
    dispatch_once(&qword_1ECD7A938, &__block_literal_global_47);
  v5 = (id)qword_1ECD7A930;
  +[UIImageSymbolConfiguration configurationWithFont:](UIImageSymbolConfiguration, "configurationWithFont:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIImageView setPreferredSymbolConfiguration:](v3, "setPreferredSymbolConfiguration:", v6);

  v15[53] = v3;
  objc_msgSend(v15, "addSubview:", v3);
  objc_msgSend(v15, "layer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setCornerRadius:", 12.5);

  v8 = *MEMORY[0x1E0CD2A68];
  objc_msgSend(v15, "layer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setCornerCurve:", v8);

  objc_msgSend(v15, "setNeedsLayout");
  objc_msgSend(v15, "layer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v11) = 0;
  objc_msgSend(v10, "setShadowOpacity:", v11);

  objc_msgSend(v15, "layer");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setShadowRadius:", 2.0);

  objc_msgSend(v15, "layer");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setShadowOffset:", 0.0, 1.0);

  objc_msgSend(v15, "layer");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setShadowPathIsBounds:", 1);

}

void CommonInit_1(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id *v16;

  v16 = a1;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void CommonInit(UIImageAsset *__strong, NSString *__strong, _UIAssetManager *__strong, NSBundle *__strong)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("UIImageAsset.m"), 160, CFSTR("asset must have a name"));

  }
  objc_storeStrong(v16 + 10, a2);
  objc_storeWeak(v16 + 5, v8);
  v10 = v16[2];
  v16[2] = v9;
  v11 = v9;

  if (v8)
    objc_msgSend(v8, "preferredTraitCollection");
  else
    _UICurrentImageTraitCollection();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v16[3];
  v16[3] = (id)v12;

  *((_DWORD *)v16 + 2) = 0;
}

UIColor *_UIColorFromCUINamedColor(void *a1)
{
  UIColor *result;

  if (!objc_msgSend(a1, "substituteWithSystemColor"))
    return +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", objc_msgSend(a1, "cgColor"));
  result = +[UIColor _systemColorWithUnvalidatedName:](UIColor, "_systemColorWithUnvalidatedName:", objc_msgSend(a1, "systemColorName"));
  if (!result)
    return +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", objc_msgSend(a1, "cgColor"));
  return result;
}

id _UIImageWithNameAndTraitCollection(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "length"))
  {
    objc_msgSend(v4, "imageConfiguration");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIImageConfiguration _completeConfiguration:fromConfiguration:]((uint64_t)UIImageConfiguration, v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    os_unfair_lock_lock((os_unfair_lock_t)&__tableLock);
    if (!__liveNamedTable)
    {
      objc_msgSend(MEMORY[0x1E0CB3748], "mapTableWithKeyOptions:valueOptions:", 0, 5);
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = (void *)__liveNamedTable;
      __liveNamedTable = v7;

    }
    __UIKitSharedArtworkManager();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "bundle");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    +[_UIImageCacheKey keyWithName:configuration:bundle:](_UIImageCacheKey, "keyWithName:configuration:bundle:", v3, v6, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)__liveNamedTable, "objectForKey:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    os_unfair_lock_unlock((os_unfair_lock_t)&__tableLock);
    if (!v12)
    {
      __UIKitSharedArtworkManager();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "imageNamed:configuration:", v3, v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      os_unfair_lock_lock((os_unfair_lock_t)&__tableLock);
      objc_msgSend((id)__liveNamedTable, "setObject:forKey:", v12, v11);
      os_unfair_lock_unlock((os_unfair_lock_t)&__tableLock);
    }

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

uint64_t __UIKitSharedArtworkManager()
{
  if (qword_1ECD81EA0 != -1)
    dispatch_once(&qword_1ECD81EA0, &__block_literal_global_33_1);
  return qword_1ECD81E98;
}

id _UIKitGetApplicationAssetManager()
{
  if (qword_1ECD79888 != -1)
    dispatch_once(&qword_1ECD79888, &__block_literal_global_152_0);
  return (id)qword_1ECD79880;
}

_UIAssetManager *_UIKitPrivateCoreGlyphsManager()
{
  _UIAssetManager *v0;
  uint64_t v1;

  os_unfair_lock_lock((os_unfair_lock_t)&__UIKitCoreGlyphsManagersLock);
  v0 = (_UIAssetManager *)__UIKitPrivateCoreGlyphsManager;
  if (!__UIKitPrivateCoreGlyphsManager)
  {
    v1 = objc_msgSend(MEMORY[0x1E0D89780], "private");
    if (v1)
    {
      v0 = -[_UIAssetManager initWithName:inBundle:idiom:]([_UIAssetManager alloc], "initWithName:inBundle:idiom:", CFSTR("CoreGlyphsPrivate"), v1, -[UIDevice userInterfaceIdiom](+[UIDevice currentDevice](UIDevice, "currentDevice"), "userInterfaceIdiom"));
      __UIKitPrivateCoreGlyphsManager = (uint64_t)v0;
      *(_BYTE *)&v0->_assetManagerFlags |= 0x18u;
    }
    else
    {
      v0 = (_UIAssetManager *)__UIKitPrivateCoreGlyphsManager;
      if (!__UIKitPrivateCoreGlyphsManager)
      {
        if (_UIKitPrivateCoreGlyphsManager_once != -1)
          dispatch_once(&_UIKitPrivateCoreGlyphsManager_once, &__block_literal_global_32_0);
        v0 = (_UIAssetManager *)__UIKitPrivateCoreGlyphsManager;
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&__UIKitCoreGlyphsManagersLock);
  return v0;
}

void sub_18523D200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIAncestorViewIsInTransition(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "_isInTransitionBlock") & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    objc_msgSend(v3, "subviews", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v6);
          v11 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (!v4 || (objc_msgSend(v4, "isDescendantOfView:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i)) & 1) != 0)
          {
            v5 = _UIAncestorViewIsInTransition(v11, v4);
            goto LABEL_15;
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        v5 = 0;
        if (v8)
          continue;
        break;
      }
    }
    else
    {
      v5 = 0;
    }
LABEL_15:

  }
  return v5;
}

uint64_t compareConstraintsAlphabetically(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v7;

  if (a1 && a2)
  {
    v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
    return objc_msgSend(v5, "compare:options:", (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, a2), 1);
  }
  else
  {
    if (a2)
      v7 = -1;
    else
      v7 = 0;
    if (a1)
      return 1;
    else
      return v7;
  }
}

_QWORD *_sSo20UICollectionViewCellC5UIKitE23backgroundConfigurationAC012UIBackgroundF0VSgvg_0@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  _QWORD *result;
  _QWORD *v4;

  result = objc_msgSend(v1, sel_backgroundConfiguration);
  if (result)
  {
    v4 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A78);
    result = (_QWORD *)swift_allocObject();
    result[2] = v4;
  }
  *a1 = result;
  return result;
}

void sub_1852408EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 184), 8);
  _Unwind_Resume(a1);
}

id UIButton.Configuration.titlePadding.setter(double a1)
{
  return sub_1852C2E8C((SEL *)&selRef_setTitlePadding_, a1);
}

void static UIView.Invalidating.subscript.getter(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  id v5;
  void (*v6)(_BYTE *, _QWORD);
  _BYTE v7[32];
  id v8;

  v4 = *a2;
  v8 = a1;
  v5 = a1;
  v6 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DED210] + v4 + 8) - 8) + 16))(a3);
  v6(v7, 0);

}

uint64_t UIView.Invalidating.init(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return sub_18518DD48(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for UIView.Invalidating, a7);
}

uint64_t _s5UIKit7UIShapeV7StorageOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

_BYTE *sub_185241414(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for UICollectionLayoutListConfiguration.FooterMode()
{
  return &type metadata for UICollectionLayoutListConfiguration.FooterMode;
}

void UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter(uint64_t a1, uint64_t a2)
{
  sub_18518D478(a1, a2, (uint64_t)&block_descriptor_37_2, (SEL *)&selRef_setTrailingSwipeActionsConfigurationProvider_);
}

void UICollectionLayoutListConfiguration.leadingSwipeActionsConfigurationProvider.setter(uint64_t a1, uint64_t a2)
{
  sub_18518D478(a1, a2, (uint64_t)&block_descriptor_20_4, (SEL *)&selRef_setLeadingSwipeActionsConfigurationProvider_);
}

uint64_t storeEnumTagSinglePayload for UIControlPointerHoverStyleDriver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 113) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t UICellConfigurationState.init(traitCollection:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(a2 + 13) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = v2;
  *(_BYTE *)(a2 + 48) = 1;
  return result;
}

uint64_t initializeWithTake for HoverStyleHost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_185223A40(a1, a2, a3, MEMORY[0x1E0DEEF58]);
}

uint64_t assignWithCopy for HoverStyleHost(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;

  if (a1 != a2)
  {
    swift_unknownObjectWeakDestroy();
    v4 = *(unsigned __int8 *)(a2 + 8);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    v5 = v4 == 1;
    swift_unknownObjectWeakCopyInit();
    *(_BYTE *)(a1 + 8) = v5;
  }
  return a1;
}

void UIButton.Configuration.title.setter(uint64_t a1, uint64_t a2)
{
  sub_18521AD48(a1, a2, (SEL *)&selRef_setTitle_);
}

ValueMetadata *type metadata accessor for UIButton.Configuration.CornerStyle()
{
  return &type metadata for UIButton.Configuration.CornerStyle;
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t sub_185241588()
{
  return swift_initClassMetadata2();
}

void sub_185241EC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_185241F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1852432B0(unsigned __int8 *a1, SEL *a2)
{
  uint64_t *v2;
  uint64_t v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v10;

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_1851F9080(0, (unint64_t *)&unk_1EDD82DB8);
    swift_dynamicCast();
    v7 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD82E70);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v10;
    swift_release();
    *v2 = v8;
  }
  return objc_msgSend(v7, *a2, v4);
}

void sub_185246288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185247020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852470B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_185247884(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1852478E0((unint64_t *)&unk_1EDD82810, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&protocol conformance descriptor for UILayoutPriority);
  result = sub_1852478E0(&qword_1EDD82898, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_186667144);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1852478E0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x186DC9F28](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
  sub_185249668(a1, (unint64_t *)&unk_1EDD82878);
}

id _sSo6UIViewC5UIKitE23registerForTraitChanges_6actionSo25UITraitChangeRegistration_pSayAC0H10Definition_pXpG_10ObjectiveC8SelectorVtF_0(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t *v6;
  void *v7;
  id v8;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_186507CFC();
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      sub_185249BF0(*(v6 - 1), 0, 0, *(v6 - 1), *v6);
      sub_186507CD8();
      sub_186507D08();
      sub_186507D14();
      sub_186507CE4();
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BC0);
  v7 = (void *)sub_18650763C();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v2, sel__registerForTraitTokenChanges_withTarget_action_, v7, v2, a2);

  return v8;
}

BOOL UITraitCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v4 = objc_msgSend(v3, sel__valueForNSIntegerTraitToken_, sub_185247F14(a2, a3, (uint64_t)&unk_1E16A2640, (uint64_t (*)(uint64_t))sub_185573190));
  swift_unknownObjectRelease();
  return v4 != 0;
}

uint64_t UIMutableTraits._typesettingLanguageAwareLineHeightRatio.setter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v5;
  char v6;

  v3 = *((_BYTE *)a1 + 8);
  v5 = *a1;
  v6 = v3;
  return (*(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a3 + 232))(&v5, &type metadata for UITraitTypesettingLanguageAwareLineHeightRatio, &type metadata for UITraitTypesettingLanguageAwareLineHeightRatio, &protocol witness table for UITraitTypesettingLanguageAwareLineHeightRatio, a2, a3);
}

uint64_t sub_185247B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t AssociatedTypeWitness;

  a7();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_185247B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  void *v7;
  double v9;

  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v9, a1, a3, a4);
  v6 = v9;
  v7 = (void *)sub_185247F8C();
  swift_unknownObjectRetain();
  objc_msgSend(v7, sel__setCGFloatValue_forTraitToken_, sub_1852480D0(a3, a4, (uint64_t)&unk_1E16A25C8, (uint64_t (*)(uint64_t))sub_185571908), v6);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t UITraitOverrides.subscript.setter(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;

  v6 = a1 & 1;
  v7 = (void *)sub_185247F8C();
  swift_unknownObjectRetain();
  objc_msgSend(v7, sel__setNSIntegerValue_forTraitToken_, v6, sub_185247F14(a3, a4, (uint64_t)&unk_1E16A2640, (uint64_t (*)(uint64_t))sub_185573190));
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

double sub_185247E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;

  return sub_185247EB0(a1, *v3, a2, a3, (uint64_t)&unk_1E16A2730, (uint64_t (*)(uint64_t))sub_18559C634);
}

double sub_185247EB0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  double v6;
  double v7;

  objc_msgSend(a2, sel__valueForCGFloatTraitToken_, sub_185247F14(a3, a4, a5, a6));
  v7 = v6;
  swift_unknownObjectRelease();
  return v7;
}

uint64_t sub_185247F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v4;
  v9 = sub_185249BF0(v4, a4, (uint64_t)v8, a1, a2);
  swift_release();
  return v9;
}

uint64_t sub_185247F8C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    return *(_QWORD *)(*(_QWORD *)v0 + 16);
  v1 = objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel__swiftImplCopy);
  v2 = swift_dynamicCastObjCProtocolUnconditional();
  swift_getObjectType();
  sub_1851F9080(0, (unint64_t *)&qword_1EDD82C80);
  result = swift_dynamicCastMetatype();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDD829E0);
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)v0 = v4;
    swift_release();
    return *(_QWORD *)(*(_QWORD *)v0 + 16);
  }
  __break(1u);
  return result;
}

uint64_t sub_185248074@<X0>(uint64_t result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)result;
  if (*(_BYTE *)(result + 8) == 1)
  {
    if (v3)
    {
      v4 = 0;
      if (v3 != 1)
        result = CTGetDefaultLanguageAwareLineHeightRatio();
    }
    else
    {
      v4 = 0xBFF0000000000000;
    }
  }
  else
  {
    v4 = *(_QWORD *)result;
  }
  *a2 = v4;
  return result;
}

uint64_t sub_1852480D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v4;
  v9 = sub_185249BF0(v4, a4, (uint64_t)v8, a1, *(_QWORD *)(a2 + 8));
  swift_release();
  return v9;
}

uint64_t sub_185248148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_185247B08(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_185247B68);
}

uint64_t sub_185248154(SEL *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), *a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BC0);
  v2 = sub_186507654();

  if (v2 >> 62)
  {
    sub_1851F9080(0, (unint64_t *)&qword_1ECD75368);
    swift_bridgeObjectRetain();
    v8 = sub_186507E10();
    swift_bridgeObjectRelease_n();
    v2 = v8;
  }
  else
  {
    v3 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    sub_186508020();
    sub_1851F9080(0, (unint64_t *)&qword_1ECD75368);
    if (swift_dynamicCastMetatype() || (v6 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = v3 + 32;
      while (1)
      {
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
          break;
        v7 += 8;
        if (!--v6)
          goto LABEL_3;
      }
      swift_bridgeObjectRelease();
      v2 = v3 | 1;
    }
  }
  v4 = sub_185248420(v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t _sSo6UIViewC5UIKitE14traitOverridesAC07UITraitD0Vvg_0@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t result;

  v3 = objc_msgSend(v1, sel_traitOverrides);
  v4 = objc_msgSend((id)swift_dynamicCastObjCProtocolUnconditional(), sel__swiftImplCopy);
  swift_unknownObjectRelease();
  v5 = swift_dynamicCastObjCProtocolUnconditional();
  swift_getObjectType();
  sub_1851F9080(0, (unint64_t *)&qword_1EDD82C80);
  result = swift_dynamicCastMetatype();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDD829E0);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_185248420(unint64_t a1)
{
  os_unfair_lock_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;

  if (qword_1ECD759C0 != -1)
    swift_once();
  if (qword_1ECD75A10 != -1)
    swift_once();
  v2 = (os_unfair_lock_t *)off_1ECD75A08;
  os_unfair_lock_lock(*((os_unfair_lock_t *)off_1ECD75A08 + 2));
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_186507E58();
    v3 = result;
    if (result)
      goto LABEL_7;
LABEL_27:
    swift_bridgeObjectRelease();
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_28:
    os_unfair_lock_unlock(v2[2]);
    return (uint64_t)v6;
  }
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_27;
LABEL_7:
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x186DC4CB4](v5, a1);
      else
        v7 = *(id *)(a1 + 8 * v5 + 32);
      v8 = qword_1ECD75A00;
      v9 = v7;
      if (v8 != -1)
        swift_once();
      swift_beginAccess();
      v10 = off_1ECD759F8;
      if (*((_QWORD *)off_1ECD759F8 + 2))
      {
        v9 = v9;
        v11 = sub_185248EF8(v9);
        if ((v12 & 1) != 0)
        {
          v15 = *(_OWORD *)(v10[7] + 16 * v11);
          swift_endAccess();

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = sub_185248690(0, v6[2] + 1, 1, v6);
          v14 = v6[2];
          v13 = v6[3];
          if (v14 >= v13 >> 1)
            v6 = sub_185248690((_QWORD *)(v13 > 1), v14 + 1, 1, v6);
          v6[2] = v14 + 1;
          *(_OWORD *)&v6[2 * v14 + 4] = v15;
          goto LABEL_11;
        }
        swift_endAccess();

      }
      else
      {
        swift_endAccess();
      }

LABEL_11:
      if (v3 == ++v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_185248690(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDD82B00);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_185228B78(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_18524879C()
{
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitUserInterfaceIdiom, (uint64_t)&protocol witness table for UITraitUserInterfaceIdiom, &unk_1E1A99498);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitUserInterfaceStyle, (uint64_t)&protocol witness table for UITraitUserInterfaceStyle, &unk_1E1A994B0);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitLayoutDirection, (uint64_t)&protocol witness table for UITraitLayoutDirection, &unk_1E1A994C8);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitDisplayScale, (uint64_t)&protocol witness table for UITraitDisplayScale, &unk_1E1A994E0);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitHorizontalSizeClass, (uint64_t)&protocol witness table for UITraitHorizontalSizeClass, &unk_1E1A994F8);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitVerticalSizeClass, (uint64_t)&protocol witness table for UITraitVerticalSizeClass, &unk_1E1A99510);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitForceTouchCapability, (uint64_t)&protocol witness table for UITraitForceTouchCapability, &unk_1E1A99528);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitPreferredContentSizeCategory, (uint64_t)&protocol witness table for UITraitPreferredContentSizeCategory, &unk_1E1A99540);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitDisplayGamut, (uint64_t)&protocol witness table for UITraitDisplayGamut, &unk_1E1A99558);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitAccessibilityContrast, (uint64_t)&protocol witness table for UITraitAccessibilityContrast, &unk_1E1A99570);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitUserInterfaceLevel, (uint64_t)&protocol witness table for UITraitUserInterfaceLevel, &unk_1E1A99588);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitLegibilityWeight, (uint64_t)&protocol witness table for UITraitLegibilityWeight, &unk_1E1A995A0);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitActiveAppearance, (uint64_t)&protocol witness table for UITraitActiveAppearance, &unk_1E1A995B8);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitToolbarItemPresentationSize, (uint64_t)&protocol witness table for UITraitToolbarItemPresentationSize, &unk_1E1A995D0);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitTouchLevel, (uint64_t)&protocol witness table for UITraitTouchLevel, &unk_1E1A995E8);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitArtworkSubtype, (uint64_t)&protocol witness table for UITraitArtworkSubtype, &unk_1E1A99630);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitDisplayCornerRadius, (uint64_t)&protocol witness table for UITraitDisplayCornerRadius, &unk_1E1A99648);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitSemanticContext, (uint64_t)&off_1EDD7E768, &unk_1E1A99660);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitPresentationSemanticContext, (uint64_t)&protocol witness table for UITraitPresentationSemanticContext, &unk_1E1A99678);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitSplitViewControllerContext, (uint64_t)&protocol witness table for UITraitSplitViewControllerContext, &unk_1E1A99690);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitVibrancy, (uint64_t)&protocol witness table for UITraitVibrancy, &unk_1E1A996A8);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitUserInterfaceRenderingMode, (uint64_t)&protocol witness table for UITraitUserInterfaceRenderingMode, &unk_1E1A996C0);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitFocusSystemState, (uint64_t)&protocol witness table for UITraitFocusSystemState, &unk_1E1A996D8);
  swift_getObjectType();
  sub_185248C6C((uint64_t)&type metadata for UITraitSelectionIsKey, (uint64_t)&off_1EDD7E4F8, &unk_1E1A996F0);
  swift_getObjectType();
  return sub_185248C6C((uint64_t)&type metadata for UITraitBacklightLuminance, (uint64_t)&protocol witness table for UITraitBacklightLuminance, &unk_1E1A99708);
}

uint64_t sub_185248C6C(uint64_t a1, uint64_t a2, void *a3)
{
  char isUniquelyReferenced_nonNull_native;
  char v7;
  void *v9;

  if (qword_1ECD759F0 != -1)
    swift_once();
  swift_beginAccess();
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = off_1ECD759E8;
  off_1ECD759E8 = (_UNKNOWN *)0x8000000000000000;
  sub_18524998C((uint64_t)a3, a1, isUniquelyReferenced_nonNull_native, &v9);
  off_1ECD759E8 = v9;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (qword_1ECD75A00 != -1)
    swift_once();
  swift_beginAccess();
  swift_unknownObjectRetain();
  v7 = swift_isUniquelyReferenced_nonNull_native();
  v9 = off_1ECD759F8;
  off_1ECD759F8 = (_UNKNOWN *)0x8000000000000000;
  sub_185248DDC(a1, a2, a3, v7);
  off_1ECD759F8 = v9;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_185248DDC(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_185248EF8(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)sub_185683AA4();
      goto LABEL_7;
    }
    sub_185248FFC(result, a4 & 1);
    result = sub_185248EF8(a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_185784A18(v12, (uint64_t)a3, a1, a2, v18);
      return swift_unknownObjectRetain();
    }
  }
  result = sub_186508074();
  __break(1u);
  return result;
}

unint64_t sub_185248EF8(void *a1)
{
  uint64_t v2;

  sub_1865080EC();
  objc_msgSend(a1, sel_hash);
  sub_1865080F8();
  v2 = sub_186508134();
  return sub_185248F5C((uint64_t)a1, v2);
}

unint64_t sub_185248F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      if ((objc_msgSend(*(id *)(*(_QWORD *)(v2 + 48) + 8 * v4), sel_isEqual_, a1) & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_185248FFC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD75A30);
  v6 = sub_186507E7C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v31 = v2;
  v32 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v32 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_33;
      v23 = *(_QWORD *)(v32 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v31;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v32 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v23 = *(_QWORD *)(v32 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v14 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    v29 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
    if ((a2 & 1) == 0)
      swift_unknownObjectRetain();
    sub_1865080EC();
    objc_msgSend(v29, sel_hash);
    sub_1865080F8();
    result = sub_186508134();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v17 == v26;
        if (v17 == v26)
          v17 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v29;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v31;
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v22, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t UIMutableTraits.userInterfaceLevel.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  v5 = sub_1852478E0((unint64_t *)&unk_1ECD756A8, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceLevel, (uint64_t)&unk_1866677DC);
  v4(&v7, &type metadata for UITraitUserInterfaceLevel, &type metadata for UITraitUserInterfaceLevel, &protocol witness table for UITraitUserInterfaceLevel, v5, a1, a2);
  return v7;
}

uint64_t UIMutableTraits.displayGamut.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  v5 = sub_1852478E0((unint64_t *)&unk_1ECD756F8, (uint64_t (*)(uint64_t))type metadata accessor for UIDisplayGamut, (uint64_t)&unk_186667854);
  v4(&v7, &type metadata for UITraitDisplayGamut, &type metadata for UITraitDisplayGamut, &protocol witness table for UITraitDisplayGamut, v5, a1, a2);
  return v7;
}

uint64_t UIMutableTraits.layoutDirection.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  v5 = sub_1852478E0((unint64_t *)&unk_1ECD75778, (uint64_t (*)(uint64_t))type metadata accessor for UITraitEnvironmentLayoutDirection, (uint64_t)&unk_186667944);
  v4(&v7, &type metadata for UITraitLayoutDirection, &type metadata for UITraitLayoutDirection, &protocol witness table for UITraitLayoutDirection, v5, a1, a2);
  return v7;
}

uint64_t UIMutableTraits.horizontalSizeClass.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  v5 = sub_1852478E0((unint64_t *)&unk_1ECD75760, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceSizeClass, (uint64_t)&unk_186667908);
  v4(&v7, &type metadata for UITraitHorizontalSizeClass, &type metadata for UITraitHorizontalSizeClass, &protocol witness table for UITraitHorizontalSizeClass, v5, a1, a2);
  return v7;
}

uint64_t UIMutableTraits.verticalSizeClass.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  v5 = sub_1852478E0((unint64_t *)&unk_1ECD75760, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceSizeClass, (uint64_t)&unk_186667908);
  v4(&v7, &type metadata for UITraitVerticalSizeClass, &type metadata for UITraitVerticalSizeClass, &protocol witness table for UITraitVerticalSizeClass, v5, a1, a2);
  return v7;
}

uint64_t UIMutableTraits.userInterfaceStyle.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  v5 = sub_1852478E0((unint64_t *)&unk_1ECD75710, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceStyle, (uint64_t)&unk_186667980);
  v4(&v7, &type metadata for UITraitUserInterfaceStyle, &type metadata for UITraitUserInterfaceStyle, &protocol witness table for UITraitUserInterfaceStyle, v5, a1, a2);
  return v7;
}

uint64_t UIMutableTraits.accessibilityContrast.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  v5 = sub_1852478E0((unint64_t *)&unk_1ECD75740, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityContrast, (uint64_t)&unk_186667818);
  v4(&v7, &type metadata for UITraitAccessibilityContrast, &type metadata for UITraitAccessibilityContrast, &protocol witness table for UITraitAccessibilityContrast, v5, a1, a2);
  return v7;
}

uint64_t sub_185249654@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void **v4;

  return sub_185249AC4(*v4, a1, a2, a3, a4);
}

void sub_185249668(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

id _sSo6UIViewC5UIKitE23registerForTraitChanges_6target6actionSo25UITraitChangeRegistration_pSayAC0I10Definition_pXpG_yp10ObjectiveC8SelectorVtF_0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t *v8;
  void *v9;
  id v10;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_186507CFC();
    v8 = (uint64_t *)(a1 + 40);
    do
    {
      sub_185249BF0(*(v8 - 1), 0, 0, *(v8 - 1), *v8);
      sub_186507CD8();
      sub_186507D08();
      sub_186507D14();
      sub_186507CE4();
      v8 += 2;
      --v6;
    }
    while (v6);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BC0);
  v9 = (void *)sub_18650763C();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_0Tm(a2, a2[3]);
  v10 = objc_msgSend(v3, sel__registerForTraitTokenChanges_withTarget_action_, v9, sub_186507FB4(), a3);

  swift_unknownObjectRelease();
  return v10;
}

id sub_1852497EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v21;
  _QWORD aBlock[6];

  v7 = a7;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    sub_186507CFC();
    v14 = (uint64_t *)(a1 + 40);
    do
    {
      sub_185249BF0(*(v14 - 1), 0, 0, *(v14 - 1), *v14);
      sub_186507CD8();
      sub_186507D08();
      sub_186507D14();
      sub_186507CE4();
      v14 += 2;
      --v12;
    }
    while (v12);
    v7 = a7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BC0);
  v15 = (void *)sub_18650763C();
  swift_bridgeObjectRelease();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a2;
  v16[4] = a3;
  aBlock[4] = a6;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_185174D08;
  aBlock[3] = v7;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v18 = objc_msgSend(v21, sel__registerForTraitTokenChanges_withHandler_, v15, v17);
  _Block_release(v17);

  return v18;
}

uint64_t sub_18524998C(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v8 = (_QWORD *)*a4;
  v10 = sub_18524A030(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_185683C48();
LABEL_7:
    v16 = (_QWORD *)*a4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_unknownObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(_QWORD *)(v16[6] + v19) = a2;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_18524A2F0(result, a3 & 1);
  result = sub_18524A030(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*a4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_186508074();
  __break(1u);
  return result;
}

uint64_t sub_185249AC4@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  id v8;
  id v10;

  v8 = objc_msgSend(a1, sel__valueForNSIntegerTraitToken_, sub_185249B74(a2, a3, a4, (uint64_t)&unk_1E16A24B0, (uint64_t (*)(uint64_t))sub_18559C4C4));
  swift_unknownObjectRelease();
  v10 = v8;
  return sub_18524A124((uint64_t)&v10, a2, a3, a5);
}

uint64_t sub_185249B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = v5;
  v11 = sub_185249BF0(v5, a5, (uint64_t)v10, a1, a2);
  swift_release();
  return v11;
}

uint64_t sub_185249BF0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_unfair_lock_t *v9;
  uint64_t v11;

  if (qword_1ECD759C0 != -1)
    swift_once();
  if (qword_1ECD75A10 != -1)
    swift_once();
  v9 = (os_unfair_lock_t *)off_1ECD75A08;
  os_unfair_lock_lock(*((os_unfair_lock_t *)off_1ECD75A08 + 2));
  sub_185249CC4(a1, a2, a1, a4, a5, &v11);
  os_unfair_lock_unlock(v9[2]);
  return v11;
}

uint64_t sub_185249CC4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v11;
  unint64_t v12;
  char v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  void *v19;
  void *v20;
  void *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  char v24;
  void *v26;

  if (qword_1ECD759F0 != -1)
    swift_once();
  swift_beginAccess();
  v11 = off_1ECD759E8;
  if (*((_QWORD *)off_1ECD759E8 + 2) && (v12 = sub_18524A030(a1), (v13 & 1) != 0))
  {
    v14 = *(id *)(v11[7] + 8 * v12);
    swift_endAccess();
    if (a2)
    {
      v15 = (void *)objc_opt_self();
      swift_unknownObjectRetain();
      sub_18518D708((uint64_t)a2);
      if ((objc_msgSend(v15, sel__isPlaceholderTraitToken_, v14) & 1) != 0)
      {
        v16 = swift_unknownObjectRetain();
        v17 = a2(v16);
        sub_18518D718((uint64_t)a2);
        result = swift_unknownObjectRelease_n();
        v14 = (id)v17;
      }
      else
      {
        result = sub_18518D718((uint64_t)a2);
      }
    }
    else
    {
      result = swift_unknownObjectRetain();
    }
  }
  else
  {
    swift_endAccess();
    if (a2)
    {
      swift_retain();
      v14 = (id)a2(0);
      sub_18518D718((uint64_t)a2);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a4, a5);
      (*(void (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
      v19 = (void *)objc_opt_self();
      v20 = (void *)sub_1865074D4();
      swift_bridgeObjectRelease();
      v21 = (void *)sub_1865074D4();
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v19, sel__existingTraitTokenReservingPlaceholderIfNecessaryWithName_identifier_, v20, v21);

    }
    swift_beginAccess();
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = off_1ECD759E8;
    off_1ECD759E8 = (_UNKNOWN *)0x8000000000000000;
    swift_getObjectType();
    sub_18524998C((uint64_t)v14, a1, isUniquelyReferenced_nonNull_native, &v26);
    off_1ECD759E8 = v26;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v23 = qword_1ECD75A00;
    swift_unknownObjectRetain();
    if (v23 != -1)
      swift_once();
    swift_beginAccess();
    swift_unknownObjectRetain();
    v24 = swift_isUniquelyReferenced_nonNull_native();
    v26 = off_1ECD759F8;
    off_1ECD759F8 = (_UNKNOWN *)0x8000000000000000;
    sub_185248DDC(a3, a5, v14, v24);
    off_1ECD759F8 = v26;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    result = swift_unknownObjectRelease();
  }
  *a6 = v14;
  return result;
}

unint64_t sub_18524A030(uint64_t a1)
{
  uint64_t v2;

  sub_1865080EC();
  sub_1865080F8();
  v2 = sub_186508134();
  return sub_18524A088(a1, v2);
}

unint64_t sub_18524A088(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_18524A124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a4;
  v18 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v17 - v9;
  v11 = sub_186507AA4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  sub_186507624();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v19, v14, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(v18, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_18524A2A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1865074D4();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_18524A2F0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD75A20);
  result = sub_186507E7C();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v32[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v32[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
        swift_unknownObjectRetain();
      sub_1865080EC();
      sub_1865080F8();
      result = sub_186508134();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_185249668(a1, &qword_1ECD75790);
}

id _GetTextFieldClearButtonWithCustomColorContrastSettings(void *a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, char a7)
{
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  __CFString *v19;
  id v20;
  void *v21;
  void *v22;
  double v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  _UITextFieldClearButtonCacheKey *v28;
  void *v29;
  int v30;
  uint64_t v31;
  void *v33;
  void *v34;

  v13 = a3;
  v14 = a4;
  v15 = a5;
  if (!_clearButtonImages)
  {
    v16 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 6);
    v17 = (void *)_clearButtonImages;
    _clearButtonImages = v16;

  }
  v18 = CFSTR("UITextFieldClearButton");
  if ((_DWORD)a2 == 3)
    v18 = CFSTR("UITextFieldClearButtonLarger");
  if ((_DWORD)a2 == 2)
    v19 = CFSTR("UITextFieldStarkClearButton");
  else
    v19 = (__CFString *)v18;
  _UIImageWithName(v19);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v20 = v13;
    goto LABEL_35;
  }
  if ((a7 & 1) != 0
    || dyld_program_sdk_at_least()
    && (_AXDarkenSystemColors() || _AXSEnhanceBackgroundContrastEnabled()))
  {
    if (a6 && _AXDarkenSystemColors())
    {
      +[UIColor systemGrayColor](UIColor, "systemGrayColor");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIColor systemDarkGrayColor](UIColor, "systemDarkGrayColor");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      +[UIColor systemLightGrayColor](UIColor, "systemLightGrayColor");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIColor systemGrayColor](UIColor, "systemGrayColor");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (objc_msgSend(v15, "userInterfaceIdiom") == 5)
  {
    +[UIColor tertiaryLabelColor](UIColor, "tertiaryLabelColor");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (objc_msgSend(v15, "userInterfaceStyle") == 2)
    {
      +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 1.0;
    }
    else
    {
      +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 0.0;
    }
    +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", v23, 0.2);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v24 = v22;
  if (a1 != (void *)1)
  {
    if (a1 == (void *)2)
      v25 = v21;
    else
      v25 = v22;
    v20 = v25;
    goto LABEL_34;
  }
  if (v14)
  {
    +[UIColor systemBlueColor](UIColor, "systemBlueColor");
    a1 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v14, "isEqual:", a1) & 1) == 0)
    {
      v20 = v14;
LABEL_33:

      goto LABEL_34;
    }
  }
  +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.047, 0.455, 0.867, 1.0);
  v20 = (id)objc_claimAutoreleasedReturnValue();
  if (v14)
    goto LABEL_33;
LABEL_34:

LABEL_35:
  +[UITraitCollection _currentTraitCollectionIfExists]();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v15);
  v27 = objc_retainAutorelease(v20);
  v28 = -[_UITextFieldClearButtonCacheKey initWithVariant:color:]([_UITextFieldClearButtonCacheKey alloc], "initWithVariant:color:", a2, objc_msgSend(v27, "CGColor"));
  objc_msgSend((id)_clearButtonImages, "objectForKey:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v29)
  {
    v30 = _TextFieldScalesClearButton();
    if ((_DWORD)a2 == 2 || !v30)
    {
      objc_msgSend(v34, "size");
      +[UIImage _tintedImageForSize:withTint:effectsImage:maskImage:style:](UIImage, "_tintedImageForSize:withTint:effectsImage:maskImage:style:", v27, 0, v34, 0);
      v31 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (objc_msgSend(v15, "userInterfaceIdiom") != 6)
      {
        +[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("xmark.circle.fill"));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "imageWithTintColor:renderingMode:", v27, 1);
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v29)
          goto LABEL_43;
        goto LABEL_42;
      }
      +[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("xmark"));
      v31 = objc_claimAutoreleasedReturnValue();
    }
    v29 = (void *)v31;
    if (v31)
LABEL_42:
      objc_msgSend((id)_clearButtonImages, "setObject:forKey:", v29, v28);
  }
LABEL_43:
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v26);

  return v29;
}

id _UIImageWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    _UIImageWithNameAndTraitCollection(v1, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t _NSStringIsWidthVariant(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  if (_MergedGlobals_1_27 != -1)
    dispatch_once(&_MergedGlobals_1_27, &__block_literal_global_649);
  if (qword_1ECD79FB0)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 0;

  return isKindOfClass & 1;
}

id _sSo20UICollectionViewCellC5UIKitE23backgroundConfigurationAC012UIBackgroundF0VSgvs_0(uint64_t a1)
{
  void *v1;

  if (!*(_QWORD *)a1)
    return objc_msgSend(v1, sel_setBackgroundConfiguration_, 0);
  objc_msgSend(v1, sel_setBackgroundConfiguration_, *(_QWORD *)(*(_QWORD *)a1 + 16));
  return (id)swift_release();
}

void sub_18524F208(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

id _UIInputWindowControllerLogger()
{
  if (qword_1ECD7A278 != -1)
    dispatch_once(&qword_1ECD7A278, &__block_literal_global_993_0);
  return (id)qword_1ECD7A270;
}

id _UIKeyboardSceneDelegateLogger()
{
  if (qword_1ECD7D958 != -1)
    dispatch_once(&qword_1ECD7D958, &__block_literal_global_1045);
  return (id)qword_1ECD7D950;
}

uint64_t _UIKeyboardGetDeviceIdiomFromInputUIScene(uint64_t result)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  if (result == 1)
  {
    if (+[UIKeyboard isInputSystemUI](UIKeyboard, "isInputSystemUI"))
    {
      +[UIKeyboardImpl keyboardScreen](UIKeyboardImpl, "keyboardScreen");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIKeyboard activeKeyboard](UIKeyboard, "activeKeyboard");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", v1, objc_msgSend(v2, "interfaceOrientation"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();

      v4 = objc_msgSend(v3, "idiom");
      return v4;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t UIKeyboardGetSafeDeviceIdiom()
{
  void *v0;
  uint64_t v1;

  if (UIApp)
  {
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    v1 = objc_msgSend(v0, "userInterfaceIdiom");

  }
  else
  {
    v1 = _UIDeviceNativeUserInterfaceIdiomIgnoringClassic();
  }
  return _UIKeyboardGetDeviceIdiomFromInputUIScene(v1);
}

void sub_18525265C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1852563B8(void *a1, const char **a2)
{
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  id v10;
  void *v11;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_1851F9080(0, (unint64_t *)&unk_1EDD827B8);
    swift_dynamicCast();
    v7 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BB8);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v11;
    swift_release();
    *v2 = v8;
  }
  v9 = *a2;
  v10 = v7;
  objc_msgSend(v10, v9, a1);

}

id _interpolateColors(void *a1, void *a2, double a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5 == v6 || a3 <= 0.0)
    goto LABEL_7;
  if (a3 >= 1.0)
  {
    v8 = v6;
    goto LABEL_8;
  }
  if (!v5)
  {
    objc_msgSend(v6, "alphaComponent");
    v12 = v11 * a3;
    v13 = v7;
LABEL_12:
    objc_msgSend(v13, "colorWithAlphaComponent:", v12);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  if (!v6)
  {
    objc_msgSend(v5, "alphaComponent");
    v12 = (1.0 - a3) * v14;
    v13 = v5;
    goto LABEL_12;
  }
  if (objc_msgSend(v5, "isEqual:", v6))
  {
LABEL_7:
    v8 = v5;
    goto LABEL_8;
  }
  v22 = 0.0;
  v23 = 0.0;
  v20 = 0.0;
  v21 = 0.0;
  objc_msgSend(v5, "getRed:green:blue:alpha:", &v23, &v22, &v21, &v20);
  v22 = v20 * v22;
  v23 = v20 * v23;
  v21 = v20 * v21;
  v18 = 0.0;
  v19 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  objc_msgSend(v7, "getRed:green:blue:alpha:", &v19, &v18, &v17, &v16);
  v19 = v16 * v19;
  v21 = v16 * v21;
  v22 = v16 * v22;
  v15 = 0.0001;
  if (v20 + (v16 - v20) * a3 >= 0.0001)
    v15 = v20 + (v16 - v20) * a3;
  +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", (v23 + (v19 - v23) * a3) / v15, (v22 + (v18 - v22) * a3) / v15, (v21 + (v17 - v21) * a3) / v15);
  v8 = (id)objc_claimAutoreleasedReturnValue();
LABEL_8:
  v9 = v8;

  return v9;
}

void _setGestureKeyboardFlag(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a1;
  objc_msgSend(v3, "numberWithInteger:", a2);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(v4, &s_gestureKeyboardKey, v5, (void *)0x301);

}

void sub_185258258(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

uint64_t _commonInit(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  void *v6;
  _UISEGestureFeatureSettings *v7;
  void *v8;
  _UISEGestureFeatureSettings *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  _QWORD aBlock[5];

  if ((a3 & 1) != 0)
  {
    objc_msgSend(a1, "_beginRequiringIgnoresHIDEdgeFlagsForReason:", CFSTR("Initialization Requirement"));
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)a1[61];
    a1[61] = v5;

  }
  v7 = objc_alloc_init(_UISEGestureFeatureSettings);
  v8 = (void *)a1[56];
  a1[56] = v7;
  v9 = v7;

  v10 = (void *)a1[58];
  a1[58] = 0;

  a1[59] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___commonInit_block_invoke;
  aBlock[3] = &__block_descriptor_40_e60____UISEGestureFeature_16__0____UISEGestureFeatureSettings__8l;
  aBlock[4] = a2;
  v11 = _Block_copy(aBlock);
  v12 = (void *)a1[57];
  a1[57] = v11;

  -[_UISEGestureFeatureSettings hysteresis](v9, "hysteresis");
  v14 = v13;

  return objc_msgSend(a1, "_setHysteresis:", v14);
}

void sub_185258F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIPanGestureRecognizerCommonInit(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  *(_QWORD *)(a1 + 320) = 0;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v2;

  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v5 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v4;

  *(_QWORD *)(a1 + 328) = 1;
  *(_QWORD *)(a1 + 336) = 0xFFFFFFFFLL;
  objc_msgSend((id)objc_opt_class(), "_defaultHysteresis");
  *(_QWORD *)(a1 + 344) = v6;
  *(_QWORD *)(a1 + 352) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 384) |= 0x10u;
  *(_BYTE *)(a1 + 384) |= 0x20u;
  *(_BYTE *)(a1 + 384) |= 0x40u;
  *(_BYTE *)(a1 + 384) |= 0x80u;
  *(_BYTE *)(a1 + 385) &= ~1u;
  *(_BYTE *)(a1 + 385) &= ~2u;
  *(_BYTE *)(a1 + 384) |= 4u;
  *(_BYTE *)(a1 + 385) &= ~8u;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 385) &= ~0x10u;
  result = objc_msgSend((id)a1, "_setRequiresSystemGesturesToFail:", 1);
  *(_BYTE *)(a1 + 385) &= ~0x20u;
  *(_BYTE *)(a1 + 385) &= ~0x40u;
  return result;
}

void UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)(void *a1@<X0>, unint64_t *a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  char v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  unsigned __int8 v20;
  char v21;
  double v22;
  id v23;
  id v24;
  id v25;
  id v26;
  unsigned __int8 v27;
  id v28;
  char v30;
  char v31;

  v10 = a3;
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = *(double *)a4;
  v30 = *(_BYTE *)(a4 + 8);
  v15 = *(_BYTE *)(a4 + 9);
  v16 = objc_allocWithZone((Class)UICellAccessoryCustomView);
  v17 = a1;
  sub_18525B5E8();
  v18 = objc_msgSend(v16, sel_initWithCustomView_placement_, v17, v11 >> 63);
  v19 = v18;
  if (v10 == 2)
  {
    v20 = objc_msgSend(v18, sel_isHidden);
    if ((v15 & 1) == 0)
    {
LABEL_3:
      v21 = v30 & 1;
      goto LABEL_11;
    }
  }
  else
  {
    v20 = v10 & 1;
    if ((v15 & 1) == 0)
      goto LABEL_3;
  }
  objc_msgSend(v19, sel_reservedLayoutWidth);
  if (v22 == 0.0)
  {
    v21 = 1;
    v14 = 0.0;
  }
  else
  {
    if (v22 == -1.79769313e308)
      v14 = COERCE_DOUBLE(1);
    else
      v14 = v22;
    v21 = v22 == -1.79769313e308;
  }
LABEL_11:
  v31 = v21;
  if (a5)
  {
    v23 = a5;
    if (a6 != 2)
    {
      v24 = a5;
      v23 = a5;
LABEL_16:

      v27 = a6 & 1;
      goto LABEL_17;
    }
  }
  else
  {
    v23 = objc_msgSend(v19, sel_tintColor);
    v25 = v23;
    if (a6 != 2)
      goto LABEL_16;
  }
  v26 = a5;
  v27 = objc_msgSend(v19, sel_maintainsFixedSize);

LABEL_17:
  v28 = v17;
  sub_18525B5E8();

  sub_18525B5F0();
  sub_18525B5F0();

  *(_QWORD *)a7 = v28;
  *(_QWORD *)(a7 + 8) = v11;
  *(_QWORD *)(a7 + 16) = v12;
  *(_QWORD *)(a7 + 24) = v13;
  *(_BYTE *)(a7 + 32) = v20;
  *(double *)(a7 + 40) = v14;
  *(_BYTE *)(a7 + 48) = v31;
  *(_QWORD *)(a7 + 56) = v23;
  *(_BYTE *)(a7 + 64) = v27;
}

uint64_t sub_18525B5E8()
{
  return swift_retain();
}

uint64_t sub_18525B5F0()
{
  return swift_release();
}

double _UIScreenCornerRadiusForTypeIgnoringZoom(unint64_t a1)
{
  unint64_t v1;

  v1 = a1 - 6;
  if (a1 - 6 < 0x2B && ((0x6B881555555uLL >> v1) & 1) != 0)
    return dbl_18667ECA0[v1];
  else
    return _UIScreenCornerRadiusForType(a1);
}

id _reorderImagesToStartAtIndex(void *a1, uint64_t a2)
{
  id v3;
  void *v7;
  void *v8;
  id v9;

  v3 = a1;
  if ((unint64_t)objc_msgSend(v3, "count") < 2 || a2 == 0x7FFFFFFFFFFFFFFFLL || a2 == 0)
  {
    v9 = v3;
  }
  else
  {
    objc_msgSend(v3, "subarrayWithRange:", a2, objc_msgSend(v3, "count") - a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "subarrayWithRange:", 0, a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "arrayByAddingObjectsFromArray:", v8);
    v9 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v9;
}

void _UIImageViewCommonInit(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  __int16 v7;
  id v8;

  v1 = a1;
  +[_UIImageViewStorage storageForImageView:](_UIImageViewStorage, "storageForImageView:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)v1[52];
  v1[52] = v2;

  +[_UIImageViewSymbolAnimationPresetManager managerForClient:](_UIImageViewSymbolAnimationPresetManager, "managerForClient:", v1);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v1[60];
  v1[60] = v4;

  objc_msgSend(v1, "layer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "allowsEdgeAntialiasing"))
    v7 = 128;
  else
    v7 = 0;
  *((_WORD *)v1 + 244) = v1[61] & 0xFF7F | v7;

  +[_UIHDRUsageCoordinator sharedInstance]();
  v8 = (id)objc_claimAutoreleasedReturnValue();
  -[_UIHDRUsageCoordinator registerForAndApplyHDRAnimationToView:]((uint64_t)v8, v1);

}

void sub_1852605F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIButtonBarButtonFromItem(void *a1)
{
  void *v1;
  id v2;

  objc_msgSend(a1, "view");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_185261E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185261EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185262074(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

double _hitTestInsets(void *a1, void *a2, void *a3, int a4, double a5)
{
  id v9;
  id v10;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MaxX;
  void *v17;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  v9 = a2;
  v10 = a3;
  objc_msgSend(a1, "frame");
  x = v19.origin.x;
  y = v19.origin.y;
  width = v19.size.width;
  height = v19.size.height;
  MinX = CGRectGetMinX(v19);
  v20.origin.x = x;
  v20.origin.y = y;
  v20.size.width = width;
  v20.size.height = height;
  MaxX = CGRectGetMaxX(v20);
  if (a4)
  {
    if (v10)
    {
      objc_msgSend(v10, "frame");
      a5 = floor((MinX + CGRectGetMaxX(v21)) * 0.5);
    }
    v17 = v9;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    objc_msgSend(v17, "frame");
    floor((MaxX + CGRectGetMinX(v23)) * 0.5);
    goto LABEL_10;
  }
  if (v9)
  {
    objc_msgSend(v9, "frame");
    a5 = floor((MinX + CGRectGetMaxX(v22)) * 0.5);
  }
  v17 = v10;
  if (v10)
    goto LABEL_9;
LABEL_10:

  return -fmax(fmin(MinX - a5, 11.0), 0.0);
}

void sub_185263F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18526575C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

void layoutPresentationViews(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  uint64_t v20;
  id v21;

  v21 = a1;
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_msgSend(v21, "bounds");
    objc_msgSend(v6, "setFrame:");
  }
  objc_msgSend(v5, "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "frame");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;

  objc_msgSend(v5, "childModalViewController");
  v16 = objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    v17 = (void *)v16;
    do
    {
      objc_msgSend(v17, "presentationController");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "shouldPresentInFullscreen");

      if (v19)
        break;
      objc_msgSend(v17, "_updateControlledViewsToFrame:", v9, v11, v13, v15);
      objc_msgSend(v17, "presentedViewController");
      v20 = objc_claimAutoreleasedReturnValue();

      v17 = (void *)v20;
    }
    while (v20);

  }
}

void __unspecifiedLayoutSideBySideViews_block_invoke(uint64_t a1, void *a2, void *a3, void *a4, double a5)
{
  id v9;
  id v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  double v19;
  double v20;
  id v21;

  v21 = a2;
  v9 = a3;
  v10 = a4;
  if (v21)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v12 = *(double *)(v11 + 24);
    if (*(_BYTE *)(a1 + 64))
    {
      v13 = *(double *)(a1 + 56);
      *(double *)(v11 + 24) = v12 + a5;
    }
    else
    {
      *(double *)(v11 + 24) = v12 - a5;
      v12 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      v13 = *(double *)(a1 + 56);
    }
    if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v21))
    {
      objc_msgSend(*(id *)(a1 + 40), "_keyboardAdjustment");
      v13 = v13 - v14;
    }
    v15 = v21;
    v16 = v9;
    v17 = v10;
    v18 = v17;
    if (v16)
    {
      v20 = *MEMORY[0x1E0C9D538];
      v19 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      objc_msgSend(v16, "setFrame:", v12, 0.0, a5 + 0.0, v13);
      v12 = v20;
      if (v18)
      {
LABEL_9:
        objc_msgSend(v18, "_updateControlledViewsToFrame:", v12, v19, a5, v13);
LABEL_12:

        goto LABEL_13;
      }
    }
    else
    {
      v19 = 0.0;
      if (v17)
        goto LABEL_9;
    }
    objc_msgSend(v15, "setFrame:", v12, v19, a5, v13);
    goto LABEL_12;
  }
LABEL_13:

}

id filterAndCopyWidths(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v8, "doubleValue", (_QWORD)v15);
        if (v9 >= 0 && ((v9 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFELL)
        {
          objc_msgSend(v2, "addObject:", v8);
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v5);
  }

  if (objc_msgSend(v2, "count"))
  {
    objc_msgSend(v2, "allObjects");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "sortedArrayUsingSelector:", sel_compare_);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v13 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v13;
}

void sub_1852690A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  __destructor_8_s8_s16_s24_s80((id *)va);
  _Unwind_Resume(a1);
}

void sub_185269CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_18526BD38@<X0>(SEL *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t result;

  v3 = objc_msgSend((id)objc_opt_self(), *a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A78);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a2 = result;
  return result;
}

uint64_t _UIViewControllerUseContentScrollViewAPI()
{
  if (qword_1EDDB0F80 != -1)
    dispatch_once(&qword_1EDDB0F80, &__block_literal_global_140);
  return _MergedGlobals_138;
}

void sub_18526D1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UISceneLifecycleCompositeActionMaskHighestLifecycleActionType(int a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___UISceneLifecycleCompositeActionMaskHighestLifecycleActionType_block_invoke;
  v3[3] = &unk_1E16CB1C8;
  v3[4] = &v4;
  _UIScenePerformActionsWithLifecycleActionMask(a1, v3);
  v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18526D2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIScenePerformActionsWithLifecycleActionMask(int a1, void *a2)
{
  uint64_t i;
  int v4;
  void (**v5)(void);

  v5 = a2;
  if (a1 && v5)
  {
    for (i = 0; i != 7; ++i)
    {
      v4 = 1 << _UISceneLifecycleActionPrecidenceArray[i];
      if ((v4 & a1) != 0)
      {
        a1 &= ~v4;
        v5[2]();
        if (!a1)
          break;
      }
    }
  }

}

double _UISheetLayoutInfoUntransformedFrame(int a1, char a2, int a3, int a4, void *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, CGFloat a14, CGFloat a15, CGFloat a16, CGFloat a17, double a18)
{
  id v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  double v31;
  double v32;
  void *v33;
  double v34;
  CGFloat Height;
  double v37;
  double v38;
  double v39;
  double v40;
  double v42;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;

  v25 = a5;
  v26 = v25;
  v27 = a7 + a8;
  v42 = a7 + a8;
  if ((a2 & 1) == 0)
  {
    if (!a3)
    {
      if (a1)
      {
        v29 = fmax(fmin(a7, a9), -INFINITY) + a8;
      }
      else
      {
        objc_msgSend(v25, "firstObject");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "_value");
        v29 = fmax(v34, fmin(a7, a9)) + a8;

      }
      goto LABEL_12;
    }
    if ((a1 & 1) != 0)
    {
      v28 = fmax(a9, fmin(a7, INFINITY)) + a8;
    }
    else
    {
      objc_msgSend(v25, "firstObject");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "_value");
      v28 = fmax(a9, fmin(a7, v31)) + a8;

    }
LABEL_10:
    v45.origin.x = a14;
    v45.origin.y = a15;
    v45.size.width = a16;
    v45.size.height = a17;
    v32 = CGRectGetMaxY(v45) - v28;
    goto LABEL_13;
  }
  v28 = a7 + a8;
  v29 = v27;
  if (a3)
    goto LABEL_10;
LABEL_12:
  v46.origin.x = a14;
  v46.origin.y = a15;
  v46.size.width = a16;
  v46.size.height = a17;
  v32 = v29 - CGRectGetMinY(v46);
LABEL_13:
  if (!a4)
    a18 = 0.0;
  v47.origin.x = a14;
  v47.origin.y = a15;
  v47.size.width = a16;
  v47.size.height = a17;
  Height = CGRectGetHeight(v47);
  UIRoundToScale(Height - v32, a10);
  v38 = v37;
  v48.origin.x = a14;
  v48.origin.y = a15;
  v48.size.width = a16;
  v48.size.height = a17;
  v39 = a6 + CGRectGetMinX(v48);
  v40 = 0.0;
  if (a3)
    v40 = v38;
  UIRoundToScale(v42 - a18 - v40, a10);
  v49.origin.x = a14;
  v49.origin.y = a15;
  v49.size.width = a16;
  v49.size.height = a17;
  CGRectGetWidth(v49);

  return v39;
}

void _UISheetLayoutInfoResolvedDetentValue(double a1, double a2, double a3, double a4, double a5, uint64_t a6, int a7)
{
  double v7;

  v7 = a2;
  if (a7)
    CGRectGetMinY(*(CGRect *)&v7);
  else
    CGRectGetMaxY(*(CGRect *)&v7);
}

double _UISheetDismissOffset(int a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGRect v23;

  v23.origin.x = a6;
  v23.origin.y = a7;
  v23.size.width = a8;
  v23.size.height = a9;
  if (CGRectIsNull(v23))
  {
    v18 = a2;
    v19 = a3;
    v20 = a4;
    v21 = a5;
    if (!a1)
      return CGRectGetMaxY(*(CGRect *)&v18);
  }
  else
  {
    v18 = a6;
    v19 = a7;
    v20 = a8;
    v21 = a9;
    if (a1)
      return CGRectGetMaxY(*(CGRect *)&v18);
  }
  return CGRectGetMinY(*(CGRect *)&v18);
}

uint64_t _UIButtonBarLayoutSpacerTypeForLayouts(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "suppressSpacing") & 1) != 0
    || (objc_msgSend(v4, "suppressSpacing") & 1) != 0
    || (objc_msgSend(v3, "isSpaceLayout") & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v5 = objc_msgSend(v4, "isSpaceLayout") ^ 1;
  }

  return v5;
}

void _UIButtonBarSetOwners(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v9, "_setOwner:", v4);
        objc_msgSend(v9, "representativeItem");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "_setViewOwner:", v4);

        -[UIBarButtonItemGroup _items]((id *)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        _UIButtonBarSetItemOwners(v11, v4);

      }
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

void _UIButtonBarSetItemOwners(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v8++), "_setViewOwner:", v4);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

uint64_t _UIUseModernBars()
{
  uint64_t result;
  void *v1;
  uint64_t v2;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
  {
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "userInterfaceIdiom");

    return v2 != 2 && v2 != 8 && v2 != -1;
  }
  return result;
}

void _UIBarButtonGroupCheckArguments(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int v6;
  int v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  NSObject *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "count");
  if (v4 && v5)
  {
    v6 = dyld_program_sdk_at_least();
    v7 = objc_msgSend(v4, "isSpaceItem");
    if (v6)
    {
      if (v7)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIBarButtonGroupCheckArguments(NSArray<UIBarButtonItem *> *__strong, UIBarButtonItem *__strong)");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("UIBarButtonItemGroup.m"), 42, CFSTR("Assigning a fixed or flexible space item as the representativeItem of a group is unsupported (representativeItem=%@)"), v4);

      }
    }
    else if (v7)
    {
      v16 = _UIBarButtonGroupCheckArguments___s_category;
      if (!_UIBarButtonGroupCheckArguments___s_category)
      {
        v16 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v16, (unint64_t *)&_UIBarButtonGroupCheckArguments___s_category);
      }
      v17 = *(NSObject **)(v16 + 8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v24 = v4;
        _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, "Assigning a fixed or flexible space item as the representativeItem of a group is unsupported (representativeItem=%@)", buf, 0xCu);
      }
    }
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v10 = v3;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v19;
      v14 = *MEMORY[0x1E0C99778];
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v19 != v13)
            objc_enumerationMutation(v10);
          if (*(id *)(*((_QWORD *)&v18 + 1) + 8 * i) == v4)
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v14, CFSTR("You cannot use the same UIBarButtonItem as both the representativeItem and as a member of barButtonItems when creating or modifying a UIBarButtonItemGroup (representativeItem=%@, barButtonItems=%@)"), v4, v10, (_QWORD)v18);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v12);
    }

  }
}

void _UIBarButtonGroupAssignRepresentative(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a1;
  v3 = a2;
  objc_msgSend(v9, "_owningButtonGroup");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = v3;
  if (v4 != v3)
  {
    v6 = v4;
    if (v4)
    {
      objc_msgSend(v4, "_removeRepresentative:", v9);
    }
    else
    {
      objc_msgSend(v9, "buttonGroup");
      v6 = (id)objc_claimAutoreleasedReturnValue();
      if (v6 == v3)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIBarButtonGroupAssignRepresentative(UIBarButtonItem *__strong, UIBarButtonItemGroup *__strong)");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("UIBarButtonItemGroup.m"), 206, CFSTR("Attempt to assign a representative item from the bar button items of the target group (rep=%@, group=%@)"), v9, v3);

      }
      objc_msgSend(v6, "_removeBarButtonItem:", v9);
    }
    objc_msgSend(v9, "_setButtonGroup:isRepresentative:", v3, v3 != 0);
    v5 = v6;
  }

}

void _UIBarButtonGroupAssign(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  id v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v9, "buttonGroup");
        v10 = (id)objc_claimAutoreleasedReturnValue();
        v11 = v10;
        if (v10 != v4)
        {
          objc_msgSend(v10, "_removeBarButtonItem:", v9);
          objc_msgSend(v9, "_setButtonGroup:isRepresentative:", v4, 0);
        }

      }
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

void _UIButtonBarCommonInit(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  _UIButtonBarLayoutMetrics *v20;
  void *v21;
  void *v22;
  id v23;
  id *obj;

  obj = a1;
  v1 = objc_opt_new();
  v2 = (void *)v1;
  if (v1)
    objc_storeWeak((id *)(v1 + 448), obj);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v2, "setLayoutMargins:", 0.0, 8.0, 0.0, 8.0);
  objc_msgSend(v2, "setLayoutMarginsRelativeArrangement:", 1);
  objc_msgSend(v2, "setAlignment:", 3);
  v3 = obj[1];
  obj[1] = v2;
  v4 = v2;

  v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v6 = obj[8];
  obj[8] = v5;

  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v8 = obj[12];
  obj[12] = v7;

  v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v10 = obj[11];
  obj[11] = v9;

  objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = obj[14];
  obj[14] = (id)v11;

  obj[22] = (id)0x412E848000000000;
  obj[18] = (id)0x4020000000000000;
  objc_msgSend(MEMORY[0x1E0D156E8], "anchorNamed:inItem:", CFSTR("UIButtonBar.flexibleSpaceEqualSize"), obj[1]);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = obj[2];
  obj[2] = (id)v13;

  objc_msgSend(MEMORY[0x1E0D156E8], "anchorNamed:inItem:", CFSTR("UIButtonBar.minimumInterItemSpace"), obj[1]);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = obj[3];
  obj[3] = (id)v15;

  objc_msgSend(obj[3], "constraintEqualToConstant:", *((double *)obj + 18));
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = obj[4];
  obj[4] = (id)v17;

  objc_msgSend(obj[4], "setActive:", 1);
  objc_msgSend(obj[2], "constraintGreaterThanOrEqualToAnchor:", obj[3]);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setActive:", 1);

  v20 = objc_alloc_init(_UIButtonBarLayoutMetrics);
  objc_msgSend(v4, "layoutMarginsGuide");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "heightAnchor");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIButtonBarLayoutMetrics setVerticalSizeGuide:](v20, "setVerticalSizeGuide:", v22);

  -[_UIButtonBarLayoutMetrics setMinimumSpaceGuide:](v20, "setMinimumSpaceGuide:", obj[3]);
  -[_UIButtonBarLayoutMetrics setFlexibleSpaceGuide:](v20, "setFlexibleSpaceGuide:", obj[2]);
  -[_UIButtonBarLayoutMetrics setAllowsViewWrappers:](v20, "setAllowsViewWrappers:", 0);
  v23 = obj[7];
  obj[7] = v20;

}

id _UIButtonBarButtonMakerForVisualProvider()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  _QWORD aBlock[4];
  id v6;

  v0 = (void *)objc_opt_new();
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___UIButtonBarButtonMakerForVisualProvider_block_invoke;
  aBlock[3] = &unk_1E16B57A0;
  v6 = v0;
  v1 = v0;
  v2 = _Block_copy(aBlock);
  v3 = _Block_copy(v2);

  return v3;
}

double UIEdgeInsetsMakeWithEdges(char a1, double a2)
{
  if ((a1 & 1) != 0)
    return a2;
  else
    return 0.0;
}

uint64_t __UIKitSharedBoundingPathDataManager()
{
  if (qword_1ECD81EB0 != -1)
    dispatch_once(&qword_1ECD81EB0, &__block_literal_global_38_1);
  return qword_1ECD81EA8;
}

uint64_t _UIUserInterfaceSizeClassForHeight(double a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  double v5;

  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "userInterfaceIdiom");
  if (v3 > 8)
    goto LABEL_8;
  if (((1 << v3) & 0x126) != 0)
  {
    v4 = 2;
    goto LABEL_9;
  }
  if (v3)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  _UIScreenReferenceBoundsSizeForType(1uLL);
  if (v5 > a1)
    v4 = 1;
  else
    v4 = 2;
LABEL_9:

  return v4;
}

uint64_t _UIUserInterfaceSizeClassForHeightAndUserInterfaceIdiom(unint64_t a1, double a2)
{
  double v4;

  if (a1 > 8)
    return 0;
  if (((1 << a1) & 0x126) != 0)
    return 2;
  if (a1)
    return 0;
  _UIScreenReferenceBoundsSizeForType(1uLL);
  if (v4 > a2)
    return 1;
  else
    return 2;
}

uint64_t _UIScreenTypeForScreen(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double x;
  double y;
  double width;
  double height;
  uint64_t v28;
  double v29;
  _BOOL4 IsNull;
  int v32;
  _BOOL4 v33;
  double v34;
  double v35;
  int v36;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  CGAffineTransform v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v1 = a1;
  objc_msgSend(v1, "_nativeDisplayBounds");
  v39 = v3;
  v40 = v2;
  objc_msgSend(v1, "_referenceBounds");
  v43 = v5;
  v44 = v4;
  objc_msgSend(v1, "scale");
  v38 = v6;
  objc_msgSend(v1, "_displayCornerRadius");
  v45 = v7;
  v8 = _UIDeviceNativeUserInterfaceIdiomIgnoringClassic();
  objc_msgSend(v1, "_exclusionArea");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v9, "rect");
    v12 = v11;
    v42 = v13;
    v15 = v14;
  }
  else
  {
    v10 = *MEMORY[0x1E0C9D628];
    v12 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v15 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v42 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  }
  v16 = 0;
  v17 = 0;
  v18 = -1;
  v41 = v10;
  while (1)
  {
    v19 = _UIScreenNativeDisplayBoundsSizeForType(v16);
    v21 = v20;
    v22 = _UIScreenReferenceBoundsSizeForType(v16);
    v47 = v23;
    v48 = v22;
    v46 = _UIScreenScaleForType(v16);
    v49 = _UIScreenCornerRadiusForType(v16);
    v51.origin.x = _UIScreenNativeDisplayExclusionRectForType(v16);
    x = v51.origin.x;
    y = v51.origin.y;
    width = v51.size.width;
    height = v51.size.height;
    if (!CGRectIsNull(v51))
    {
      v28 = _UIScreenNativeDisplayBoundsSizeForType(v16);
      v29 = _UIScreenReferenceBoundsSizeForType(v16);
      CGAffineTransformMakeScale(&v50, v29 / (double)v28, v29 / (double)v28);
      v52.origin.x = x;
      v52.origin.y = y;
      v52.size.width = width;
      v52.size.height = height;
      v53 = CGRectApplyAffineTransform(v52, &v50);
      x = v53.origin.x;
      y = v53.origin.y;
      width = v53.size.width;
      height = v53.size.height;
    }
    if (v8 != _UIUserInterfaceIdiomForType(v16) || vabdd_f64(v44, v48) > 0.1)
      goto LABEL_35;
    if (vabdd_f64(v43, v47) > 0.1 || v45 > 0.0 == v49 <= 0.0)
      goto LABEL_35;
    v54.origin.x = x;
    v54.origin.y = y;
    v54.size.width = width;
    v54.size.height = height;
    IsNull = CGRectIsNull(v54);
    v55.origin.x = v41;
    v55.origin.y = v12;
    v55.size.width = v42;
    v55.size.height = v15;
    if (IsNull != CGRectIsNull(v55))
      goto LABEL_35;
    v56.origin.x = v41;
    v56.origin.y = v12;
    v56.size.width = v42;
    v56.size.height = v15;
    if (!CGRectIsNull(v56))
      goto LABEL_17;
    v57.origin.x = x;
    v57.origin.y = y;
    v57.size.width = width;
    v57.size.height = height;
    if (CGRectIsNull(v57))
    {
      v32 = 1;
    }
    else
    {
LABEL_17:
      v58.origin.x = v41;
      v58.size.width = v42;
      v58.origin.y = v12;
      v58.size.height = v15;
      v33 = CGRectIsNull(v58);
      v59.origin.x = x;
      v59.origin.y = y;
      v59.size.width = width;
      v59.size.height = height;
      v32 = v33 == CGRectIsNull(v59)
          ? _UIRectEquivalentToRectWithAccuracy(v41, v12, v42, v15, x, y, width, height, 0.1)
          : 0;
    }
    v34 = vabdd_f64(v38, v46);
    v35 = vabdd_f64(v45, v49);
    v36 = v32 ^ 1;
    if (vabdd_f64(v40, (double)v19) <= 0.1 && vabdd_f64(v39, (double)v21) <= 0.1 && v34 <= 0.01 && v35 <= 0.01 && !v36)
      break;
    if (!(v17 & 1 | (v34 > 0.01)))
    {
      v17 = 0;
      if (vabdd_f64(v40, v48 * v46) <= 0.1 && vabdd_f64(v39, v47 * v46) <= 0.1)
      {
        if (v35 > 0.01)
          v36 = 1;
        if (v36 == 1)
        {
          v17 = 0;
          if (v18 == -1)
            v18 = v16;
        }
        else
        {
          v17 = 1;
          v18 = v16;
        }
      }
    }
LABEL_35:
    if (++v16 == 49)
      goto LABEL_36;
  }
  v18 = v16;
LABEL_36:

  return v18;
}

double _UIScreenReferenceBoundsSizeForType(unint64_t a1)
{
  char *v2;
  void *v3;
  void *v4;

  if (a1 >= 0x31)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGSize _UIScreenReferenceBoundsSizeForType(_UIScreenType)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIScreenTypes.m"), 457, CFSTR("Unknown or invalid type: %ld"), a1);

    v2 = (char *)MEMORY[0x1E0C9D820];
  }
  else
  {
    v2 = (char *)&unk_18667E680 + 8 * a1;
  }
  return *(double *)v2;
}

uint64_t _UIScreenNativeDisplayBoundsSizeForType(unint64_t a1)
{
  void *v3;
  void *v4;

  if (a1 < 0x31)
    return qword_18667E370[a1];
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIIntegralSize _UIScreenNativeDisplayBoundsSizeForType(_UIScreenType)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIScreenTypes.m"), 367, CFSTR("Unknown or invalid type: %ld"), a1);

  return 0;
}

double _UIScreenCornerRadiusForType(unint64_t a1)
{
  void *v3;
  void *v4;

  if (a1 < 0x31)
    return dbl_18667EB18[a1];
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat _UIScreenCornerRadiusForType(_UIScreenType)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIScreenTypes.m"), 638, CFSTR("Unknown or invalid type: %ld"), a1);

  return 0.0;
}

double _UIScreenScaleForType(unint64_t a1)
{
  void *v3;
  void *v4;

  if (a1 < 0x31)
    return dbl_18667E990[a1];
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat _UIScreenScaleForType(_UIScreenType)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIScreenTypes.m"), 548, CFSTR("Unknown or invalid type: %ld"), a1);

  return 0.0;
}

void sub_18527D6F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18528056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1852815D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getTUISystemInputAssistantViewClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  TextInputUILibrary_1();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TUISystemInputAssistantView");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTUISystemInputAssistantViewClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUISystemInputAssistantViewClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UISystemInputAssistantViewController.m"), 98, CFSTR("Unable to find class %s"), "TUISystemInputAssistantView");

    __break(1u);
  }
}

Class __getTUISystemInputAssistantViewClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7A808)
    qword_1ECD7A808 = _sl_dlopen();
  if (!qword_1ECD7A808)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TextInputUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIHandwritingAssistantView.m"), 23, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("TUISystemInputAssistantView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUISystemInputAssistantViewClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIHandwritingAssistantView.m"), 24, CFSTR("Unable to find class %s"), "TUISystemInputAssistantView");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_3_28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_185281858(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

uint64_t sub_185281894(uint64_t a1)
{
  uint64_t v1;

  return sub_1852818AC(a1, *(void (**)(_QWORD *))(v1 + 16));
}

uint64_t sub_1852818AC(uint64_t a1, void (*a2)(_QWORD *))
{
  _QWORD v4[5];

  v4[3] = &_s13MutableTraitsVN;
  v4[4] = &off_1E1688B38;
  v4[0] = swift_dynamicCastObjCProtocolUnconditional();
  swift_unknownObjectRetain();
  a2(v4);
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v4);
}

uint64_t sub_185281938(uint64_t a1)
{
  uint64_t v1;

  return sub_185281944(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD *))(v1 + 24));
}

uint64_t sub_185281944(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *))
{
  void *v5;
  _QWORD v7[6];

  v7[5] = &unk_1EDF65B88;
  v5 = (void *)swift_dynamicCastObjCProtocolUnconditional();
  swift_unknownObjectRetain();
  objc_msgSend(v5, sel__setEnvironmentWrapper_, a2);
  v7[3] = &_s13MutableTraitsVN;
  v7[4] = &off_1E1688B38;
  v7[0] = v5;
  swift_unknownObjectRetain();
  a3(v7);
  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v7);
}

uint64_t _UISheetPresentationControllerStylesSheetsAsCards(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((dyld_program_sdk_at_least() & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(v1, "_allowsStylingSheetsAsCards");

  return v2;
}

void _UIViewControllerAccumulateSafeAreaInsetsIncludingChildrenIntoParentView(double *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  id v51;
  id v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double MinY;
  double v84;
  double MinX;
  double v86;
  double MaxY;
  double v88;
  void *v89;
  CGFloat v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  double rect;
  double v96;
  double v97;
  double v98;
  double v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  double v103;
  CGFloat v104;
  double MaxX;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _BYTE v123[128];
  uint64_t v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;

  v124 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!v5 || ((*((_DWORD *)v5 + 92) >> 1) & 3u) - 1 > 1 || (objc_msgSend(*((id *)v5 + 4), "isHidden") & 1) != 0)
  {
    v112 = 0.0;
LABEL_5:
    v7 = 0.0;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    goto LABEL_6;
  }
  v112 = 0.0;
  objc_msgSend(*((id *)v5 + 4), "alpha");
  if (v14 < 0.01)
    goto LABEL_5;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  if (objc_msgSend(*((id *)v5 + 4), "isDescendantOfView:", v6))
  {
    v89 = v6;
    objc_msgSend(*((id *)v5 + 4), "safeAreaInsets");
    v16 = fmax(v15, 0.0);
    v18 = fmax(v17, 0.0);
    v20 = fmax(v19, 0.0);
    v22 = fmax(v21, 0.0);
    objc_msgSend(v5, "_overlayInsetsAdjustment");
    v9 = v23;
    v8 = v24;
    v7 = v25;
    v27 = v26;
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    v122 = 0u;
    v28 = *((id *)v5 + 57);
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v119, v123, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v120;
      do
      {
        for (i = 0; i != v30; ++i)
        {
          if (*(_QWORD *)v120 != v31)
            objc_enumerationMutation(v28);
          v33 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * i);
          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          _UIViewControllerAccumulateSafeAreaInsetsIncludingChildrenIntoParentView(&v115, v33, *((_QWORD *)v5 + 4));
          v34 = objc_msgSend(v33, "edgesForExtendedLayout");
          v35 = v34;
          v36 = fmax(v16, *(double *)&v115);
          if ((v34 & 1) != 0)
            v16 = v36;
          v37 = fmax(v18, *((double *)&v115 + 1));
          if ((v34 & 2) != 0)
            v18 = v37;
          v38 = fmax(v22, *((double *)&v116 + 1));
          if ((v34 & 8) != 0)
            v22 = v38;
          if ((v34 & 4) != 0)
          {
            v20 = fmax(v20, *(double *)&v116);
          }
          else if ((objc_msgSend(v5, "_isNavigationController") & 1) != 0
                 || objc_msgSend(v5, "_isTabBarController"))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v103 = v16;
              v106 = v22;
              v109 = v20;
              v113 = v27;
              v114 = 0;
              objc_msgSend(v33, "setEdgesForExtendedLayout:", ~(_BYTE)v35 & 0xF);
              objc_msgSend(v5, "_edgeInsetsForChildViewController:insetsAreAbsolute:", v33, &v114);
              v40 = v39;
              v42 = v41;
              v44 = v43;
              v46 = v45;
              objc_msgSend(v33, "setEdgesForExtendedLayout:", v35);
              v47 = v40 + 0.0;
              if ((v35 & 1) != 0)
                v47 = 0.0;
              v48 = v42 + 0.0;
              if ((~(_BYTE)v35 & 2) == 0)
                v48 = 0.0;
              v49 = v44 + 0.0;
              if ((~(_BYTE)v35 & 4) == 0)
                v49 = 0.0;
              v50 = v46 + 0.0;
              if ((~(_BYTE)v35 & 8) == 0)
                v50 = 0.0;
              if (!v114)
              {
                v47 = v103 + v47;
                v48 = v18 + v48;
                v49 = v109 + v49;
                v50 = v106 + v50;
              }
              v27 = v113;
              v22 = v50;
              v20 = v49;
              v18 = v48;
              v16 = v47;
            }
          }
          v9 = v9 + *(double *)&v117;
          v8 = v8 + *((double *)&v117 + 1);
          v7 = v7 + *(double *)&v118;
          v27 = v27 + *((double *)&v118 + 1);
        }
        v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v119, v123, 16);
      }
      while (v30);
    }
    v107 = v22;
    v110 = v20;
    v112 = v27;

    v51 = *((id *)v5 + 4);
    v6 = v89;
    v52 = v89;
    objc_msgSend(v51, "bounds");
    v54 = v53;
    v56 = v55;
    v58 = v57;
    v98 = v59;
    objc_msgSend(v51, "convertRect:toView:", v52);
    v100 = v60;
    v101 = v61;
    v102 = v63;
    v104 = v62;
    objc_msgSend(v51, "convertRect:toView:", v52, v18 + v54, v16 + v56, v58 - (v107 + v18), v98 - (v110 + v16));
    v91 = v64;
    v92 = v65;
    v93 = v67;
    v94 = v66;

    objc_msgSend(v52, "bounds");
    v69 = v68;
    v96 = v71;
    v97 = v70;
    rect = v72;
    objc_msgSend(v52, "safeAreaInsets");
    v13 = v73;
    v12 = v74;
    v11 = v75;
    v10 = v76;

    v90 = v69;
    v108 = v97 + v13;
    v111 = v69 + v12;
    v125.origin.x = v100;
    v125.size.height = v101;
    v125.size.width = v102;
    v125.origin.y = v104;
    MinY = CGRectGetMinY(v125);
    v126.origin.y = v97 + v13;
    v126.origin.x = v69 + v12;
    v99 = v96 - (v12 + v10);
    v126.size.width = v99;
    v77 = rect - (v13 + v11);
    v126.size.height = v77;
    if (MinY <= CGRectGetMinY(v126))
    {
      v127.origin.x = v91;
      v127.size.height = v92;
      v127.size.width = v93;
      v127.origin.y = v94;
      v84 = CGRectGetMinY(v127);
      v128.origin.x = v90;
      v128.size.width = v96;
      v128.origin.y = v97;
      v128.size.height = rect;
      v78 = v84 - CGRectGetMinY(v128);
      if (v13 < v78)
        v13 = v78;
    }
    v129.origin.x = v100;
    v129.size.height = v101;
    v129.size.width = v102;
    v129.origin.y = v104;
    MinX = CGRectGetMinX(v129);
    v130.origin.y = v108;
    v130.origin.x = v111;
    v130.size.width = v96 - (v12 + v10);
    v130.size.height = v77;
    if (MinX <= CGRectGetMinX(v130))
    {
      v131.origin.x = v91;
      v131.size.height = v92;
      v131.size.width = v93;
      v131.origin.y = v94;
      v86 = CGRectGetMinX(v131);
      v132.origin.x = v90;
      v132.size.width = v96;
      v132.origin.y = v97;
      v132.size.height = rect;
      v79 = v86 - CGRectGetMinX(v132);
      if (v12 < v79)
        v12 = v79;
    }
    v133.origin.x = v100;
    v133.size.height = v101;
    v133.size.width = v102;
    v133.origin.y = v104;
    MaxY = CGRectGetMaxY(v133);
    v134.origin.y = v108;
    v134.origin.x = v111;
    v134.size.width = v99;
    v134.size.height = v77;
    if (MaxY >= CGRectGetMaxY(v134))
    {
      v135.origin.x = v90;
      v135.size.width = v96;
      v135.origin.y = v97;
      v135.size.height = rect;
      v88 = CGRectGetMaxY(v135);
      v136.origin.x = v91;
      v136.size.height = v92;
      v136.size.width = v93;
      v136.origin.y = v94;
      v80 = v88 - CGRectGetMaxY(v136);
      if (v11 < v80)
        v11 = v80;
    }
    v137.origin.x = v100;
    v137.size.height = v101;
    v137.size.width = v102;
    v137.origin.y = v104;
    MaxX = CGRectGetMaxX(v137);
    v138.origin.y = v108;
    v138.origin.x = v111;
    v138.size.width = v99;
    v138.size.height = v77;
    if (MaxX >= CGRectGetMaxX(v138))
    {
      v139.origin.x = v90;
      v139.size.width = v96;
      v139.origin.y = v97;
      v139.size.height = rect;
      v81 = CGRectGetMaxX(v139);
      v140.origin.x = v91;
      v140.size.height = v92;
      v140.size.width = v93;
      v140.origin.y = v94;
      v82 = v81 - CGRectGetMaxX(v140);
      if (v10 < v82)
        v10 = v82;
    }
  }
LABEL_6:
  *a1 = v13;
  a1[1] = v12;
  a1[2] = v11;
  a1[3] = v10;
  a1[4] = v9;
  a1[5] = v8;
  a1[6] = v7;
  a1[7] = v112;

}

void _UISheetLayoutInfoDirtyAnyDescendantTransitioning(_QWORD *a1)
{
  uint64_t v1;
  _DWORD *v2;
  void *v3;
  id v4;

  v1 = a1[1];
  if ((v1 & 2) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFFFDLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyOffsetAdjustment(v2);
    objc_msgSend(v2, "_parentLayoutInfo");
    v4 = (id)objc_claimAutoreleasedReturnValue();

    v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyAnyDescendantTransitioning(v4);
      v3 = v4;
    }

  }
}

void _setFrameIgnoringLayerTransformOnOrAfterYukon(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;

  v9 = a1;
  if (dyld_program_sdk_at_least())
    objc_msgSend(v9, "_setFrameIgnoringLayerTransform:", a2, a3, a4, a5);
  else
    objc_msgSend(v9, "setFrame:", a2, a3, a4, a5);

}

void _UISheetLayoutInfoDirtyAncestorSheetIDs(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  v1 = a1;
  v2 = v1[1];
  if ((v2 & 4) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFFFFBLL;
    v5 = v1;
    objc_msgSend(v1, "_childLayoutInfo");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)v3;
    if (v3)
      _UISheetLayoutInfoDirtyAncestorSheetIDs(v3);
    _UISheetLayoutInfoDirtyHidingUnderneathDescendant(v5);

    v1 = v5;
  }

}

void ____finishDigitizerEventDispatch_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  objc_msgSend(a3, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v9 = v5;
    objc_msgSend(a3, "_responder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {

LABEL_5:
      objc_msgSend(*(id *)(a1 + 32), "removeObject:", v9);
      v5 = v9;
      goto LABEL_6;
    }
    objc_msgSend(a3, "gestureRecognizers");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "count");

    v5 = v9;
    if (v8)
      goto LABEL_5;
  }
LABEL_6:

}

void ____finishDigitizerEventDispatch_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;

  if (a3)
    v5 = *(void **)(a3 + 360);
  else
    v5 = 0;
  v7 = v5;
  objc_msgSend(*(id *)(a1 + 32), "hoverTouchForContextId:pathIndex:", objc_msgSend(v7, "_contextId"), objc_msgSend((id)a3, "_pathIndex"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6 && (objc_msgSend((id)a3, "phase") == 3 || objc_msgSend((id)a3, "phase") == 4))
    objc_msgSend((id)a3, "_clearForReenteringHoverInWindow:", v7);
  if (a3)
    *(_WORD *)(a3 + 236) &= ~0x4000u;
  objc_msgSend(*(id *)(a1 + 40), "_removeTouch:", a3);

}

void _UIPencilEventRequestBarrelFocusIfAbleForWindow(void *a1, int a2)
{
  int v4;
  char v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  id *v11;
  unint64_t v12;
  NSObject *v13;
  void *v14;
  id v15;
  NSObject *v16;
  objc_class *v17;
  void *v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a1, "_contextId");
  v5 = objc_msgSend(a1, "_isSystemGestureWindow");
  objc_msgSend(a1, "_eventRoutingScene");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)UIApp, "_mainEventEnvironment");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (a1
    && v4
    && (v5 & 1) == 0
    && v6
    && v7
    && (!objc_msgSend(v6, "activationState")
     || objc_msgSend(v6, "activationState") == 1
     || objc_msgSend(a1, "_isHostedInAnotherProcess")))
  {
    objc_msgSend(v6, "_screen");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "_isEmbeddedScreen");

    if (v10)
    {
      if (qword_1ECD78160 != -1)
        dispatch_once(&qword_1ECD78160, &__block_literal_global_455);
      if (!_MergedGlobals_30_0)
      {
        v11 = (id *)-[UIEventEnvironment _pencilEventForWindow:](v8, a1);
        if (a2)
        {
          if ((-[_UIPencilEvent windowHasRegisteredInteractionsWantingFocus:]((uint64_t)v11, (uint64_t)a1) & 1) == 0)
            goto LABEL_21;
        }
        else if (!v11 || !objc_msgSend(v11[22], "count"))
        {
          goto LABEL_21;
        }
        BKSHIDServicesClaimGenericGestureFocus();
        v12 = qword_1ECD78168;
        if (!qword_1ECD78168)
        {
          v12 = __UILogCategoryGetNode("PencilInteraction", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v12, (unint64_t *)&qword_1ECD78168);
        }
        if ((*(_BYTE *)v12 & 1) != 0)
        {
          v13 = *(NSObject **)(v12 + 8);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v14 = (void *)MEMORY[0x1E0CB3940];
            v15 = a1;
            v16 = v13;
            v17 = (objc_class *)objc_opt_class();
            NSStringFromClass(v17);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "stringWithFormat:", CFSTR("<%@: %p>"), v18, v15);
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            *(_DWORD *)buf = 138543618;
            v21 = v19;
            v22 = 1026;
            v23 = v4;
            _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "Requested pencil barrel event focus for window: %{public}@; contextId: 0x%{public}X",
              buf,
              0x12u);

          }
        }
      }
    }
  }
LABEL_21:

}

BOOL _AddTouchToEventAndDetermineIfNeedsCancel(int a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BOOL8 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  NSObject *v22;
  const __CFString *v23;
  const __CFString *v24;
  NSObject *v25;
  NSObject *v26;
  const __CFString *v27;
  const __CFString *v28;
  NSObject *v29;
  NSObject *v30;
  const __CFString *v31;
  NSObject *v32;
  NSObject *v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  const __CFString *v37;
  NSObject *v38;
  __CFString *v39;
  NSObject *v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[12];
  __int16 v45;
  const __CFString *v46;
  __int16 v47;
  const __CFString *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v8 = -[UITouch _effectivelyAuthentic](a2);
  v9 = qword_1ECD80088;
  if (!qword_1ECD80088)
  {
    v9 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v9, (unint64_t *)&qword_1ECD80088);
  }
  if ((*(_BYTE *)v9 & 1) != 0)
  {
    v22 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = CFSTR("NO");
      if (a1)
        v24 = CFSTR("YES");
      else
        v24 = CFSTR("NO");
      if (a3)
        v23 = CFSTR("YES");
      *(_DWORD *)v44 = 138412546;
      *(_QWORD *)&v44[4] = v24;
      v45 = 2112;
      v46 = v23;
      _os_log_impl(&dword_185066000, v22, OS_LOG_TYPE_ERROR, "Add touch to event: ignoring interaction: %@; was cancelled: %@",
        v44,
        0x16u);
    }
  }
  v10 = qword_1ECD80090;
  if (!qword_1ECD80090)
  {
    v10 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v10, (unint64_t *)&qword_1ECD80090);
  }
  if ((*(_BYTE *)v10 & 1) != 0)
  {
    v25 = *(NSObject **)(v10 + 8);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = v25;
      v27 = CFSTR("NO");
      if (a2)
      {
        if (*(_BYTE *)(a2 + 264))
          v28 = CFSTR("YES");
        else
          v28 = CFSTR("NO");
      }
      else
      {
        v28 = CFSTR("NO");
      }
      *(_DWORD *)v44 = 134218498;
      if ((_DWORD)v8)
        v27 = CFSTR("YES");
      *(_QWORD *)&v44[4] = a2;
      v45 = 2112;
      v46 = v28;
      v47 = 2112;
      v48 = v27;
      _os_log_impl(&dword_185066000, v26, OS_LOG_TYPE_ERROR, "\tTouch %p is eaten: %@; effectively authentic: %@",
        v44,
        0x20u);

    }
  }
  v11 = qword_1ECD80098;
  if (!qword_1ECD80098)
  {
    v11 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v11, (unint64_t *)&qword_1ECD80098);
  }
  if ((*(_BYTE *)v11 & 1) != 0)
  {
    v29 = *(NSObject **)(v11 + 8);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = v29;
      v31 = CFSTR("NO");
      if (a2 && *(_BYTE *)(a2 + 264))
        v31 = CFSTR("YES");
      *(_DWORD *)v44 = 134218242;
      *(_QWORD *)&v44[4] = a2;
      v45 = 2112;
      v46 = v31;
      _os_log_impl(&dword_185066000, v30, OS_LOG_TYPE_ERROR, "\tTouch %p is eaten: %@", v44, 0x16u);

    }
  }
  v12 = qword_1ECD800A0;
  if (!qword_1ECD800A0)
  {
    v12 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v12, (unint64_t *)&qword_1ECD800A0);
  }
  if ((*(_BYTE *)v12 & 1) != 0)
  {
    v32 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = v32;
      objc_msgSend(a4, "allTouches");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend(v34, "count");
      *(_DWORD *)v44 = 134217984;
      *(_QWORD *)&v44[4] = v35;
      _os_log_impl(&dword_185066000, v33, OS_LOG_TYPE_ERROR, "\tTouches event current touch count %lu", v44, 0xCu);

    }
  }
  if ((a1 & 1) == 0 && (!a2 || !*(_BYTE *)(a2 + 264)) && v8 == 1)
  {
    if ((a3 & 1) == 0)
      objc_msgSend(a4, "_addTouch:forDelayedDelivery:", a2, 0);
    goto LABEL_25;
  }
  if (!objc_msgSend((id)a2, "phase", *(_QWORD *)v44))
  {
    objc_msgSend((id)a2, "setPhase:", 4);
    goto LABEL_25;
  }
  if ((a3 & 1) != 0)
  {
LABEL_25:
    v13 = 0;
    goto LABEL_28;
  }
  v13 = objc_msgSend((id)a2, "phase") == 3 || objc_msgSend((id)a2, "phase") == 4;
  objc_msgSend(a4, "_addTouch:forDelayedDelivery:", a2, 0);
LABEL_28:
  objc_msgSend((id)a2, "window", *(_QWORD *)v44);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "_boundContext");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "_notifyIfChangedFromSecure:", v8);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2)
      v17 = *(void **)(a2 + 360);
    else
      v17 = 0;
    v18 = v17;
    objc_msgSend(v16, "postNotificationName:object:", CFSTR("_UIEventDispatcherDidCancelTouchForInsecureServicePresentation"), v18);

  }
  v19 = qword_1ECD800A8;
  if (!qword_1ECD800A8)
  {
    v19 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v19, (unint64_t *)&qword_1ECD800A8);
  }
  if ((*(_BYTE *)v19 & 1) != 0)
  {
    v36 = *(NSObject **)(v19 + 8);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      if (v13)
        v37 = CFSTR("YES");
      else
        v37 = CFSTR("NO");
      v38 = v36;
      objc_msgSend((id)a2, "_phaseDescription");
      v39 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v44 = 138412546;
      *(_QWORD *)&v44[4] = v37;
      v45 = 2112;
      v46 = v39;
      _os_log_impl(&dword_185066000, v38, OS_LOG_TYPE_ERROR, "\tNeeds cancel: %@; new touch phase: %@", v44, 0x16u);

    }
  }
  v20 = qword_1ECD800B0;
  if (!qword_1ECD800B0)
  {
    v20 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v20, (unint64_t *)&qword_1ECD800B0);
  }
  if ((*(_BYTE *)v20 & 1) != 0)
  {
    v40 = *(NSObject **)(v20 + 8);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = v40;
      objc_msgSend(a4, "allTouches");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v42, "count");
      *(_DWORD *)v44 = 134217984;
      *(_QWORD *)&v44[4] = v43;
      _os_log_impl(&dword_185066000, v41, OS_LOG_TYPE_ERROR, "\tTouches event new touch count %lu", v44, 0xCu);

    }
  }
  return v13;
}

void UITableViewAlertForForcedLayout(void *a1)
{
  id v1;
  id v2;
  _QWORD block[4];
  id v4;

  v2 = a1;
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UITableViewEnableAlertForForcedLayout, (uint64_t)CFSTR("UITableViewEnableAlertForForcedLayout"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1ECD768E4&& dyld_program_sdk_at_least()&& (objc_msgSend((id)objc_opt_class(), "_isInternalTableView") & 1) == 0)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __UITableViewAlertForForcedLayout_block_invoke;
    block[3] = &unk_1E16B1B28;
    v1 = v2;
    v4 = v1;
    if (UITableViewAlertForForcedLayout_once != -1)
    {
      dispatch_once(&UITableViewAlertForForcedLayout_once, block);
      v1 = v4;
    }

  }
}

id _UIKeyboardArbitrationClient_Interface()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EDFB7F98);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _UIKBArbiterSetForPlacements();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v1, sel_queue_keyboardTransition_event_withInfo_onComplete_, 2, 0);

  return v0;
}

id _UIKeyboardArbitration_Interface()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE0CF668);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _UIKBArbiterSetForPlacements();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v1, sel_transition_eventStage_withInfo_, 2, 0);

  return v0;
}

id _UIKBArbiterSetForPlacements()
{
  void *v0;
  void *v1;
  void *v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  +[UIInputViewSetPlacement encodablePlacementsForXPC](UIInputViewSetPlacement, "encodablePlacementsForXPC");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  v4[2] = objc_opt_class();
  v4[3] = objc_opt_class();
  v4[4] = objc_opt_class();
  v4[5] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 6);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setByAddingObjectsFromArray:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_18528DCB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18528F3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185290268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UIScenePresentationLog()
{
  if (UIScenePresentationLog_onceToken != -1)
    dispatch_once(&UIScenePresentationLog_onceToken, &__block_literal_global_232);
  return (id)UIScenePresentationLog___instance;
}

void sub_1852939CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18529427C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185295240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185295318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t UICollectionView.SupplementaryRegistration.init(elementKind:handler:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t ObjCClassFromMetadata;
  void *v10;
  void *v11;
  id v12;
  uint64_t result;
  _QWORD v14[6];

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a1;
  v8[4] = a2;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  swift_retain();
  v10 = (void *)sub_1865074D4();
  swift_bridgeObjectRelease();
  v14[4] = sub_185678B1C;
  v14[5] = v8;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_185678B20;
  v14[3] = &block_descriptor_12_4;
  v11 = _Block_copy(v14);
  v12 = objc_msgSend((id)objc_opt_self(), sel_registrationWithSupplementaryClass_elementKind_configurationHandler_, ObjCClassFromMetadata, v10, v11);

  _Block_release(v11);
  swift_release();
  result = swift_release();
  *a4 = v12;
  return result;
}

id _UICollectionViewRequestingCellOrSupplementaryView()
{
  void *v0;
  id v1;

  _UIGetCurrentFallbackView();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
    goto LABEL_5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_5;
  v1 = v0;
  if ((objc_msgSend(v1, "_isRequestingCellOrSupplementary") & 1) == 0)
  {

LABEL_5:
    v1 = 0;
  }

  return v1;
}

void _UIBarsSetAccessibilityLimits(void *a1)
{
  void *v1;
  char v2;
  void *v3;
  void *v4;
  uint64_t v5;
  const UIContentSizeCategory *v6;
  const __CFString *v7;
  const __CFString *v8;
  id v9;

  v9 = a1;
  objc_msgSend(v9, "traitCollection");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "userInterfaceIdiom") == 4)
  {
    v2 = dyld_program_sdk_at_least();

    v3 = v9;
    if ((v2 & 1) != 0)
      goto LABEL_16;
  }
  else
  {

    v3 = v9;
  }
  objc_msgSend(v3, "_setMinimumContentSizeCategory:", CFSTR("UICTContentSizeCategoryL"));
  objc_msgSend(v9, "traitCollection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "userInterfaceIdiom");

  if (v5 == 6)
  {
    if (qword_1ECD7A898 != -1)
      dispatch_once(&qword_1ECD7A898, &__block_literal_global_56);
    v6 = &UIContentSizeCategoryAccessibilityMedium;
  }
  else
  {
    if (qword_1ECD7A898 != -1)
      dispatch_once(&qword_1ECD7A898, &__block_literal_global_56);
    v6 = &UIContentSizeCategoryExtraExtraLarge;
  }
  v7 = (const __CFString *)*v6;
  if (_MergedGlobals_5_2)
    v8 = v7;
  else
    v8 = CFSTR("UICTContentSizeCategoryL");
  objc_msgSend(v9, "_setMaximumContentSizeCategory:", v8);
  v3 = v9;
LABEL_16:

}

void sub_185296EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1852973AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UITableViewHeaderFooterViewConcreteDefaultLayoutMargins(void *a1, int a2, double a3)
{
  char v3;
  uint64_t v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  uint64_t v21;
  void *v22;
  double v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  double v51;
  CGFloat v53;
  CGFloat v54;
  double v55;
  double MinY;
  double v57;
  CGFloat rect;
  CGFloat v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;

  v3 = a2;
  if (dyld_program_sdk_at_least() == a2)
    goto LABEL_19;
  v6 = objc_msgSend(a1, "tableViewStyle");
  if (v6 < 0)
  {
    objc_msgSend(a1, "_table");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v7, "_tableStyle");

  }
  if (v6 == 16)
    goto LABEL_7;
  if (v6 != 2)
  {
    if (v6 != 1)
      goto LABEL_19;
LABEL_7:
    objc_msgSend(a1, "_table");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_sectionContentInset");
    v10 = v9;
    v12 = v11;

    if (v10 <= 0.0 && v12 <= 0.0)
      goto LABEL_19;
  }
  if ((v3 & 1) != 0)
  {
    objc_msgSend(a1, "contentView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "frame");
    v15 = v14;
    v17 = v16;

  }
  else
  {
    objc_msgSend(a1, "frame");
    v15 = v18;
    v17 = v19;
  }
  objc_msgSend(a1, "traitCollection");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "userInterfaceIdiom");

  objc_msgSend(a1, "_constants");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21 == 6)
  {
    objc_msgSend(v22, "defaultHeaderFooterLayoutMarginsForTableViewStyle:isHeader:isFirstSection:", objc_msgSend(a1, "tableViewStyle"), objc_msgSend(a1, "sectionHeader"), objc_msgSend(a1, "_isTopHeader"));
    a3 = v23;
  }
  else
  {
    objc_msgSend(a1, "window");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "screen");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "defaultTableLayoutMarginsForScreen:size:tableStyle:", v25, 2, v15, v17);
    a3 = v26;

  }
  if ((v3 & 1) == 0)
  {
    v55 = a3;
    objc_msgSend(a1, "_contentRect");
    v28 = v27;
    v30 = v29;
    v32 = v31;
    rect = v31;
    v59 = v33;
    objc_msgSend(a1, "bounds");
    v35 = v34;
    v37 = v36;
    v39 = v38;
    v41 = v40;
    v60.origin.x = v28;
    v53 = v28;
    v54 = v30;
    v60.origin.y = v30;
    v60.size.width = v32;
    v60.size.height = v59;
    MinY = CGRectGetMinY(v60);
    v61.origin.x = v35;
    v61.origin.y = v37;
    v61.size.width = v39;
    v61.size.height = v41;
    v57 = MinY - CGRectGetMinY(v61);
    v62.origin.x = v28;
    v62.origin.y = v30;
    v62.size.width = rect;
    v62.size.height = v59;
    CGRectGetMinX(v62);
    v63.origin.x = v35;
    v63.origin.y = v37;
    v63.size.width = v39;
    v63.size.height = v41;
    CGRectGetMinX(v63);
    v64.origin.x = v35;
    v64.origin.y = v37;
    v64.size.width = v39;
    v64.size.height = v41;
    CGRectGetMaxY(v64);
    v65.origin.x = v28;
    v65.origin.y = v30;
    v65.size.width = rect;
    v65.size.height = v59;
    CGRectGetMaxY(v65);
    v66.origin.x = v35;
    v66.origin.y = v37;
    v66.size.width = v39;
    v66.size.height = v41;
    CGRectGetMaxX(v66);
    v67.origin.x = v28;
    v67.origin.y = v30;
    v67.size.width = rect;
    v67.size.height = v59;
    CGRectGetMaxX(v67);
    objc_msgSend(a1, "edgesInsettingLayoutMarginsFromSafeArea");
    objc_msgSend(a1, "safeAreaInsets");
    objc_msgSend(a1, "superview");
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v42)
    {
      objc_msgSend(a1, "_table");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "_scrollView");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "safeAreaInsets");

    }
    a3 = v55 + v57;
  }
LABEL_19:
  if (_UIShouldApplyVerticalLayoutMarginsToListHeaderFooterViews())
  {
    a3 = 0.0;
    if ((v3 & 1) == 0)
    {
      v45 = objc_msgSend(a1, "tableViewStyle");
      if (v45 < 0)
      {
        objc_msgSend(a1, "_table");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = objc_msgSend(v46, "_tableStyle");

      }
      objc_msgSend(a1, "_constants", *(_QWORD *)&v53, *(_QWORD *)&v54);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = v47;
      if (v47)
      {
        v49 = v47;
      }
      else
      {
        objc_msgSend(a1, "traitCollection");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        _UITableConstantsForTraitCollection(v50);
        v49 = (id)objc_claimAutoreleasedReturnValue();

      }
      objc_msgSend(v49, "defaultHeaderFooterLayoutMarginsForTableViewStyle:isHeader:isFirstSection:", v45, objc_msgSend(a1, "sectionHeader"), objc_msgSend(a1, "_isTopHeader"));
      a3 = v51;

    }
  }
  return a3;
}

uint64_t _UIShouldApplyVerticalLayoutMarginsToListHeaderFooterViews()
{
  uint64_t result;
  int v1;
  _BOOL4 v2;
  int v3;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
  {
    if (_UIInternalPreferencesRevisionOnce != -1)
      dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
    v1 = _UIInternalPreferencesRevisionVar;
    if (_UIInternalPreferencesRevisionVar < 1
      || (v3 = _UIInternalPreference_ApplyVerticalLayoutMarginsToListHeaderFooterViews,
          _UIInternalPreferencesRevisionVar == _UIInternalPreference_ApplyVerticalLayoutMarginsToListHeaderFooterViews))
    {
      v2 = 0;
    }
    else
    {
      do
      {
        v2 = v1 < v3;
        if (v1 < v3)
          break;
        _UIInternalPreferenceSync(v1, &_UIInternalPreference_ApplyVerticalLayoutMarginsToListHeaderFooterViews, (uint64_t)CFSTR("ApplyVerticalLayoutMarginsToListHeaderFooterViews"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
        v3 = _UIInternalPreference_ApplyVerticalLayoutMarginsToListHeaderFooterViews;
      }
      while (v1 != _UIInternalPreference_ApplyVerticalLayoutMarginsToListHeaderFooterViews);
    }
    return byte_1ECD768AC && v2;
  }
  return result;
}

id _UIFallbackViewOfClassForReusableView(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  void *v5;

  v2 = (id)objc_msgSend(a2, "superview");
  if (!v2)
  {
LABEL_5:
    if (pthread_main_np() == 1)
    {
      _UIGetCurrentFallbackView();
      v4 = (id)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        return v4;

    }
    v4 = 0;
    return v4;
  }
  v3 = v2;
  while ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (id)objc_msgSend(v3, "superview");
    if (!v3)
      goto LABEL_5;
  }
  if ((v3[13] & 0x1000) != 0)
    v5 = 0;
  else
    v5 = v3;
  v4 = v5;
  return v4;
}

uint64_t _viewForFallbackEnvironment(void *a1)
{
  uint64_t result;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return (uint64_t)a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(a1, "viewIfLoaded");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  result = objc_msgSend((id)objc_msgSend(a1, "presentedViewController"), "viewIfLoaded");
  if (!result)
  {
    a1 = (void *)objc_msgSend(a1, "presentingViewController");
    return objc_msgSend(a1, "viewIfLoaded");
  }
  return result;
}

uint64_t _UIGetCurrentFallbackView()
{
  UIScreen *v0;
  int v1;
  uint64_t result;
  void *v3;
  int v4;

  if (pthread_main_np() != 1)
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIView * _Nullable _UIGetCurrentFallbackView(void)"), CFSTR("_UIFallbackEnvironment_NonARC.m"), 142, CFSTR("The current fallback environment can only be used from the main thread."));
  }
  if (!dyld_program_sdk_at_least())
    goto LABEL_11;
  v0 = (UIScreen *)qword_1ECD7E860;
  if (qword_1ECD7E860)
    goto LABEL_12;
  if (!dyld_program_sdk_at_least())
    goto LABEL_11;
  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v1 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    v4 = _UIInternalPreference_UseMostActiveWindowSceneAsBaseFallbackEnvironment;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_UseMostActiveWindowSceneAsBaseFallbackEnvironment)
    {
      while (v1 >= v4)
      {
        _UIInternalPreferenceSync(v1, &_UIInternalPreference_UseMostActiveWindowSceneAsBaseFallbackEnvironment, (uint64_t)CFSTR("UseMostActiveWindowSceneAsBaseFallbackEnvironment"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
        v4 = _UIInternalPreference_UseMostActiveWindowSceneAsBaseFallbackEnvironment;
        if (v1 == _UIInternalPreference_UseMostActiveWindowSceneAsBaseFallbackEnvironment)
          goto LABEL_9;
      }
      if (!byte_1ECD7661C)
        goto LABEL_11;
    }
  }
LABEL_9:
  v0 = (UIScreen *)__cachedMostActiveWindowScene;
  if (!__cachedMostActiveWindowScene)
  {
    v0 = +[_UISceneLifecycleMultiplexer mostActiveSceneWithTest:](_UISceneLifecycleMultiplexer, "mostActiveSceneWithTest:", &__block_literal_global_293);
    __cachedMostActiveWindowScene = (uint64_t)v0;
    if (!v0)
LABEL_11:
      v0 = +[UIScreen mainScreen](UIScreen, "mainScreen");
  }
LABEL_12:
  result = _viewForFallbackEnvironment(v0);
  if (result)
  {
    if ((*(_QWORD *)(result + 104) & 0x1000) != 0)
      return 0;
  }
  return result;
}

void ____eventFetcherSourceCallback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3;

  +[_UIEventBus instance]();
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[_UIEventBus addEvents:]((uint64_t)v3, a2);

}

void sub_1852996F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18529AF80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_18529C2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UITextContainerViewResyncNSTextContainer(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v23;
  double v24;
  id v26;
  CGRect v27;
  CGRect v28;

  v26 = a1;
  objc_msgSend(v26, "textContainer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "textContainerInset");
  v23 = v10;
  v24 = v9;
  v12 = v11;
  v14 = v13;
  objc_msgSend(v8, "size");
  v16 = v15;
  v18 = v17;
  v19 = v15;
  if (objc_msgSend(v8, "widthTracksTextView"))
  {
    v27.origin.x = a2;
    v27.origin.y = a3;
    v27.size.width = a4;
    v27.size.height = a5;
    v19 = CGRectGetWidth(v27) - (v12 + v14);
  }
  v20 = objc_msgSend(v8, "heightTracksTextView");
  v21 = v18;
  if (v20)
  {
    v28.origin.x = a2;
    v28.origin.y = a3;
    v28.size.width = a4;
    v28.size.height = a5;
    v21 = CGRectGetHeight(v28) - (v24 + v23);
  }
  if (v16 != v19 || v18 != v21)
  {
    objc_msgSend(v8, "setSize:", v19, v21);
    objc_msgSend(v26, "invalidateTextContainerOrigin");
    objc_msgSend(v26, "setNeedsDisplay");
  }

}

id sub_18529D358@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, Class *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id result;
  unsigned __int8 v20;
  uint64_t aBlock;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;

  v20 = *a1;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 1);
  v14 = a2[16];
  v15 = *((_QWORD *)a2 + 3);
  v16 = *((_QWORD *)a2 + 4);
  v17 = objc_msgSend(objc_allocWithZone(*a5), sel_init);
  if (a3)
  {
    v26 = a3;
    v27 = a4;
    aBlock = MEMORY[0x1E0C809B0];
    v23 = 1107296256;
    v24 = sub_18530A69C;
    v25 = a6;
    v18 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v17, sel_setActionHandler_, v18);
  _Block_release(v18);
  LOBYTE(aBlock) = v12;
  v23 = v13;
  LOBYTE(v24) = v14;
  v25 = v15;
  v26 = v16;
  v28 = v20;
  result = sub_18529D92C((double *)&aBlock, &v28);
  *a8 = a7;
  a8[1] = v17;
  return result;
}

id static UICellAccessory.reorder(displayed:options:)@<X0>(unsigned __int8 *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v4;
  char v5;
  double v6;
  char v7;
  uint64_t v8;
  char v9;
  id v10;
  id result;
  unsigned __int8 v12;
  double v13[2];
  char v14;
  uint64_t v15;
  char v16;

  v4 = *a1;
  v5 = *(_BYTE *)a2;
  v6 = a2[1];
  v7 = *((_BYTE *)a2 + 16);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_BYTE *)a2 + 32);
  v10 = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryReorder), sel_init);
  LOBYTE(v13[0]) = v5;
  v13[1] = v6;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v12 = v4;
  result = sub_18529D590(v13, &v12);
  *a3 = 5;
  a3[1] = v10;
  return result;
}

id sub_18529D590(double *a1, unsigned __int8 *a2)
{
  void *v2;
  uint64_t v3;
  double v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;

  v3 = *(unsigned __int8 *)a1;
  v4 = a1[1];
  v5 = *((unsigned __int8 *)a1 + 16);
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((unsigned __int8 *)a1 + 32);
  objc_msgSend(v2, sel_setDisplayedState_, *a2);
  objc_msgSend(v2, sel_setTintColor_, v6);
  objc_msgSend(v2, sel_setShowsVerticalSeparator_, v7);
  objc_msgSend(v2, sel_setHidden_, v3);
  v8 = v4;
  v9 = -1.79769313e308;
  if (v4 == 0.0)
    v9 = 0.0;
  if (v5)
    v8 = v9;
  return objc_msgSend(v2, sel_setReservedLayoutWidth_, v8);
}

id sub_18529D7C4@<X0>(unsigned __int8 *a1@<X0>, double *a2@<X1>, Class *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  uint64_t v11;
  id v12;
  double v13;
  double v14;
  id result;

  v7 = *a1;
  v8 = *(unsigned __int8 *)a2;
  v9 = a2[1];
  v10 = *((unsigned __int8 *)a2 + 16);
  v11 = *((_QWORD *)a2 + 3);
  v12 = objc_msgSend(objc_allocWithZone(*a3), sel_init);
  objc_msgSend(v12, sel_setDisplayedState_, v7);
  objc_msgSend(v12, sel_setTintColor_, v11);
  objc_msgSend(v12, sel_setHidden_, v8);
  v13 = v9;
  v14 = -1.79769313e308;
  if (v9 == 0.0)
    v14 = 0.0;
  if (v10)
    v13 = v14;
  result = objc_msgSend(v12, sel_setReservedLayoutWidth_, v13);
  *a5 = a4;
  a5[1] = v12;
  return result;
}

id static UICellAccessory.multiselect(displayed:options:)@<X0>(unsigned __int8 *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v4;
  char v5;
  double v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id result;
  unsigned __int8 v12;
  double v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_BYTE *)a2;
  v6 = a2[1];
  v7 = *((_BYTE *)a2 + 16);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_QWORD *)a2 + 4);
  v10 = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryMultiselect), sel_init);
  LOBYTE(v13[0]) = v5;
  v13[1] = v6;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v12 = v4;
  result = sub_18529D92C(v13, &v12);
  *a3 = 6;
  a3[1] = v10;
  return result;
}

id sub_18529D92C(double *a1, unsigned __int8 *a2)
{
  void *v2;
  uint64_t v3;
  double v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;

  v3 = *(unsigned __int8 *)a1;
  v4 = a1[1];
  v5 = *((unsigned __int8 *)a1 + 16);
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((_QWORD *)a1 + 4);
  objc_msgSend(v2, sel_setDisplayedState_, *a2);
  objc_msgSend(v2, sel_setTintColor_, v6);
  objc_msgSend(v2, sel_setBackgroundColor_, v7);
  objc_msgSend(v2, sel_setHidden_, v3);
  v8 = v4;
  v9 = -1.79769313e308;
  if (v4 == 0.0)
    v9 = 0.0;
  if (v5)
    v8 = v9;
  return objc_msgSend(v2, sel_setReservedLayoutWidth_, v8);
}

void sub_18529E3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18529E6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  id *v11;
  id *v12;
  uint64_t v13;

  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak((id *)(v13 - 112));
  _Unwind_Resume(a1);
}

void sub_18529F110(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void _UIColorEncodeComponentForKey(void *a1, uint64_t a2, void *a3, double a4)
{
  id v7;
  float v8;
  double v9;
  id v10;

  v10 = a1;
  v7 = a3;
  v8 = a4;
  *(float *)&v9 = v8;
  objc_msgSend(v10, "encodeFloat:forKey:", a2, v9);
  if (v8 != a4)
    objc_msgSend(v10, "encodeDouble:forKey:", v7, a4);

}

uint64_t _UIApplicationUsesLegacyUI()
{
  return 0;
}

id UIButton.configuration.setter(uint64_t a1)
{
  void *v1;

  if (!*(_QWORD *)a1)
    return objc_msgSend(v1, sel_setConfiguration_, 0);
  objc_msgSend(v1, sel_setConfiguration_, *(_QWORD *)(*(_QWORD *)a1 + 16));
  return (id)swift_release();
}

id _newButton(void *a1)
{
  void *v1;
  double v2;

  objc_msgSend((id)objc_msgSend(a1, "buttonControlClass"), "buttonWithType:", 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "setUserInteractionEnabled:", 0);
  objc_msgSend(v1, "_setImageContentMode:", 1);
  objc_msgSend(v1, "_setDisableAutomaticTitleAnimations:", 1);
  LODWORD(v2) = 1144913920;
  objc_msgSend(v1, "setContentCompressionResistancePriority:forAxis:", 0, v2);
  return v1;
}

void UIRoundToScreenScale(void *a1)
{
  double v1;

  objc_msgSend(a1, "scale");
  if (v1 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
}

uint64_t UIKeyboardCheckSpellingForInputMode(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  v2 = v1;
  if (UIKeyboardAutocorrectSpellingFlag)
  {
    if (objc_msgSend(v1, "isEqualToString:", CFSTR("dictation")))
    {
      +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "inputModeLastUsedPreference");
      v4 = objc_claimAutoreleasedReturnValue();

      v2 = (void *)v4;
    }
    v5 = UIKeyboardCheckSpellingPossibleForInputMode(v2);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t UIKeyboardCheckSpellingPossibleForInputMode(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!UIKeyboardCheckSpellingPossibleForInputMode___supportedLanguages)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v3 = (void *)UIKeyboardCheckSpellingPossibleForInputMode___supportedLanguages;
    UIKeyboardCheckSpellingPossibleForInputMode___supportedLanguages = (uint64_t)v2;

    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    +[UITextChecker availableLanguages](UITextChecker, "availableLanguages", 0, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v15;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v15 != v7)
            objc_enumerationMutation(v4);
          v9 = (void *)UIKeyboardCheckSpellingPossibleForInputMode___supportedLanguages;
          TIInputModeGetLanguage();
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "addObject:", v10);

          ++v8;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v6);
    }

  }
  TIInputModeGetLanguage();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend((id)UIKeyboardCheckSpellingPossibleForInputMode___supportedLanguages, "containsObject:", v11);

  return v12;
}

id sharedInputManagerMux()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getTUIKeyboardInputManagerMuxClass_softClass;
  v7 = getTUIKeyboardInputManagerMuxClass_softClass;
  if (!getTUIKeyboardInputManagerMuxClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getTUIKeyboardInputManagerMuxClass_block_invoke;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getTUIKeyboardInputManagerMuxClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = objc_retainAutorelease(v0);
  _Block_object_dispose(&v4, 8);
  objc_msgSend(v1, "sharedInstance");
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1852A3CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sharedInputManagerMux_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECD79E68;
  v7 = qword_1ECD79E68;
  if (!qword_1ECD79E68)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getTUIKeyboardInputManagerMuxClass_block_invoke_0;
    v3[3] = &unk_1E16B14C0;
    v3[4] = &v4;
    __getTUIKeyboardInputManagerMuxClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = objc_retainAutorelease(v0);
  _Block_object_dispose(&v4, 8);
  objc_msgSend(v1, "sharedInstance");
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1852A3D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;
  void *v9;
  char v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v1 = a1;
  TIInputModeGetComponentsFromIdentifier();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "valueForKey:", CFSTR("hw"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "valueForKey:", CFSTR("sw"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (_os_feature_enabled_impl())
  {
    objc_msgSend(v2, "valueForKey:", CFSTR("ml"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  TIInputModeGetNormalizedIdentifierFromComponents();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    v8 = 0;
    if (!v4)
      goto LABEL_11;
  }
  else
  {
    UIKeyboardGetDefaultHardwareKeyboardForInputMode(v6);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v3 != 0;
    if (!v4)
    {
LABEL_11:
      UIKeyboardGetDefaultSoftwareKeyboardForInputMode(v7);
      v11 = objc_claimAutoreleasedReturnValue();

      if (v11)
        v12 = 1;
      else
        v12 = v8;
      v4 = (void *)v11;
      if ((v12 & 1) != 0)
        goto LABEL_15;
      v4 = 0;
LABEL_31:
      v24 = v1;
      goto LABEL_34;
    }
  }
  UIKeyboardGetSupportedSoftwareKeyboardsForInputMode(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "containsObject:", v4);

  if ((v10 & 1) == 0)
    goto LABEL_11;
  if (!v8)
    goto LABEL_31;
LABEL_15:
  v27 = v3;
  v28 = v1;
  v29 = v5;
  objc_msgSend(v2, "valueForKey:", *MEMORY[0x1E0C997E8]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = *MEMORY[0x1E0C997B0];
  objc_msgSend(v2, "valueForKey:", *MEMORY[0x1E0C997B0]);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = *MEMORY[0x1E0C99820];
  objc_msgSend(v2, "valueForKey:", *MEMORY[0x1E0C99820]);
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = *MEMORY[0x1E0C99848];
  objc_msgSend(v2, "valueForKey:", *MEMORY[0x1E0C99848]);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v19 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v20 = v13;
    v21 = v19;
    v26 = v20;
    objc_msgSend(v19, "setObject:forKey:");
    v22 = (void *)v15;
    if (v15)
      objc_msgSend(v21, "setObject:forKey:", v15, v14);
    v1 = v28;
    v23 = (void *)v17;
    if (v17)
      objc_msgSend(v21, "setObject:forKey:", v17, v16);
    v3 = v27;
    if (v30)
      objc_msgSend(v21, "setObject:forKey:", v30, v18);
    v5 = v29;
    if (v27)
      objc_msgSend(v21, "setObject:forKey:", v27, CFSTR("hw"));
    if (v4)
      objc_msgSend(v21, "setObject:forKey:", v4, CFSTR("sw"));
    if (_os_feature_enabled_impl() && v29)
      objc_msgSend(v21, "setObject:forKey:", v29, CFSTR("ml"));
    UIKeyboardInputModeGetIdentifierFromComponents(v21);
    v24 = (id)objc_claimAutoreleasedReturnValue();

    v13 = v26;
  }
  else
  {
    v24 = v28;
    v5 = v29;
    v22 = (void *)v15;
    v1 = v28;
    v23 = (void *)v17;
    v3 = v27;
  }

LABEL_34:
  return v24;
}

id UIKeyboardGetSupportedSoftwareKeyboardsForInputMode(void *a1)
{
  id v1;
  uint64_t NativeDeviceIdiom;
  void *v3;

  v1 = a1;
  NativeDeviceIdiom = UIKeyboardGetNativeDeviceIdiom();
  UIKeyboardGetSupportedSoftwareKeyboardsForInputModeAndIdiom(v1, NativeDeviceIdiom);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id KBStarLayoutString(void *a1)
{
  id v1;
  uint64_t NativeDeviceIdiom;
  void *v3;

  v1 = a1;
  NativeDeviceIdiom = UIKeyboardGetNativeDeviceIdiom();
  KBStarLayoutStringForIdiom(NativeDeviceIdiom, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t UIKeyboardGetNativeDeviceIdiom()
{
  uint64_t v0;

  if (UIApp)
    v0 = _UIDeviceNativeUserInterfaceIdiom();
  else
    v0 = _UIDeviceNativeUserInterfaceIdiomIgnoringClassic();
  return _UIKeyboardGetDeviceIdiomFromInputUIScene(v0);
}

__CFString *KBStarLayoutStringForIdiom(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  void *v10;

  v3 = a2;
  TIInputModeGetComponentsFromIdentifier();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  TIInputModeGetNormalizedIdentifierFromComponents();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardGetSupportedSoftwareKeyboardsForInputModeAndIdiom(v5, a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(v4, "objectForKey:", CFSTR("sw"));
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      if ((objc_msgSend(v6, "containsObject:", v7) & 1) != 0)
      {
        v8 = v7;
        goto LABEL_19;
      }
      if (objc_msgSend(v6, "count"))
      {
        v7 = v7;
        TIInputModeGetNormalizedIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        TIGetInputModeProperties();
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v10, "objectForKey:", CFSTR("SWLayoutMap"));
        v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          v8 = CFSTR("QWERTY");
          if ((-[__CFString hasPrefix:](v7, "hasPrefix:", CFSTR("QWERTY")) & 1) == 0)
          {
            v8 = CFSTR("AZERTY");
            if ((-[__CFString hasPrefix:](v7, "hasPrefix:", CFSTR("AZERTY")) & 1) == 0)
            {
              v8 = CFSTR("QWERTZ");
              if ((-[__CFString hasPrefix:](v7, "hasPrefix:", CFSTR("QWERTZ")) & 1) == 0)
                v8 = v7;
            }
          }
        }

        if ((objc_msgSend(v6, "containsObject:", v8) & 1) != 0)
        {

          if (v8)
            goto LABEL_19;
          goto LABEL_16;
        }

      }
    }

  }
LABEL_16:
  if (!objc_msgSend(v6, "count")
    || (objc_msgSend(v6, "objectAtIndex:", 0), (v8 = (__CFString *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    v8 = CFSTR("QWERTY");
  }
LABEL_19:

  return v8;
}

id UIKeyboardGetSupportedSoftwareKeyboardsForInputModeAndIdiom(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v3 = a1;
  if (a2 == 6)
  {
    v6 = CFSTR("SWLayouts");
    v8 = CFSTR("-XR");
LABEL_10:
    objc_msgSend(CFSTR("SWLayouts"), "stringByAppendingString:", v8);
    v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_15;
  }
  if (a2 == 4)
  {
    v6 = CFSTR("SWLayouts");
    v8 = CFSTR("-Watch");
    goto LABEL_10;
  }
  if (a2 != 1)
  {
    v6 = CFSTR("SWLayouts");
    v9 = CFSTR("SWLayouts");
    goto LABEL_15;
  }
  if (!UIApp)
  {
    v5 = 0;
LABEL_13:
    v6 = CFSTR("SWLayouts");
    v7 = CFSTR("-iPad");
    goto LABEL_14;
  }
  +[UIKeyboardImpl keyboardScreen](UIKeyboardImpl, "keyboardScreen");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKBScreenTraits traitsForInputModeWithScreen:](UIKBScreenTraits, "traitsForInputModeWithScreen:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5 || UIKeyboardComputeKeyboardIdiomFromScreenTraits(v5, objc_msgSend(v5, "idiom"), 0) != 23)
    goto LABEL_13;
  v6 = CFSTR("SWLayouts-iPad");
  v7 = CFSTR("-iPadExtra");
LABEL_14:
  objc_msgSend(CFSTR("SWLayouts"), "stringByAppendingString:", v7);
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue();

LABEL_15:
  TIGetInputModeProperties();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKey:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    v13 = v11;
  }
  else
  {
    objc_msgSend(v10, "objectForKey:", v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      v16 = v14;
    }
    else
    {
      objc_msgSend(v10, "objectForKey:", CFSTR("SWLayouts"));
      v16 = (id)objc_claimAutoreleasedReturnValue();
    }
    v13 = v16;

  }
  v17 = objc_msgSend(v13, "count");
  if (a2 != 2 || v17)
  {
    if (!objc_msgSend(v13, "count"))
    {
LABEL_30:
      v21 = 0;
      goto LABEL_31;
    }
    if (a2 == 4)
    {
      objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("UIKeyboardSupportsWatch"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v18)
      {

        v13 = 0;
      }
    }
  }
  else
  {

    v13 = &unk_1E1A937E8;
    if (!objc_msgSend(&unk_1E1A937E8, "count"))
      goto LABEL_30;
  }
  objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithBlock:", &__block_literal_global_215_2);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "filteredArrayUsingPredicate:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = v20;
  v21 = v13;
LABEL_31:

  return v21;
}

id UIKeyboardGetDefaultSoftwareKeyboardForInputMode(void *a1)
{
  void *v1;
  void *v2;

  UIKeyboardGetSupportedSoftwareKeyboardsForInputMode(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectAtIndex:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id UIKeyboardGetDefaultHardwareKeyboardForInputMode(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  if ((UIKeyboardInputModeSoftwareOnly(v1) & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    UIKeyboardGetSupportedHardwareKeyboardsForInputMode(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "firstObject");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

uint64_t UIKeyboardInputModeSoftwareOnly(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("emoji")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("dictation")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    TIInputModeGetVariant();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v3, "isEqualToString:", CFSTR("HWR"));

  }
  return v2;
}

uint64_t UIKeyboardGetCurrentIdiom()
{
  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1
    && !+[UIKeyboardImpl isSplit](UIKeyboardImpl, "isSplit"))
  {
    return +[UIKeyboardImpl isFloating](UIKeyboardImpl, "isFloating") ^ 1;
  }
  else
  {
    return 0;
  }
}

id UIKeyboardInputModeGetIdentifierFromComponents(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v1 = a1;
  TIInputModeGetNormalizedIdentifierFromComponents();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", CFSTR("sw"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "length"))
  {
    objc_msgSend(CFSTR("sw="), "stringByAppendingString:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v5);

  }
  objc_msgSend(v1, "objectForKey:", CFSTR("hw"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "length"))
  {
    objc_msgSend(CFSTR("hw="), "stringByAppendingString:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v7);

  }
  if (_os_feature_enabled_impl())
  {
    objc_msgSend(v1, "objectForKey:", CFSTR("ml"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "length"))
    {
      objc_msgSend(CFSTR("ml="), "stringByAppendingString:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v9);

    }
  }
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(";"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringByAppendingFormat:", CFSTR("@%@"), v10);
    v11 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v11;
  }

  return v2;
}

id UIKeyboardGetSupportedHardwareKeyboardsForInputMode(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  TIGetHardwareLayoutsForInputMode();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2 && (UIKeyboardInputModeIsNonLinguistic(v1) & 1) == 0)
  {
    v6[0] = CFSTR("Automatic");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "arrayByAddingObjectsFromArray:", v2);
    v3 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = v2;
  }

  return v3;
}

void __getTUIKeyboardInputManagerMuxClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  TextInputUILibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyboardInputManagerMux");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyboardInputManagerMuxClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIKeyboardInputManagerMuxClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardInputManagerClient.h"), 23, CFSTR("Unable to find class %s"), "TUIKeyboardInputManagerMux");

    __break(1u);
  }
}

Class __getTUIKeyboardInputManagerMuxClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD79E70)
    qword_1ECD79E70 = _sl_dlopen();
  if (!qword_1ECD79E70)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TextInputUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardInputManagerClient.h"), 22, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("TUIKeyboardInputManagerMux");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIKeyboardInputManagerMuxClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKeyboardInputManagerClient.h"), 23, CFSTR("Unable to find class %s"), "TUIKeyboardInputManagerMux");

LABEL_8:
    __break(1u);
  }
  qword_1ECD79E68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getTUIKeyboardLayoutFactoryClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7EB08)
    qword_1ECD7EB08 = _sl_dlopen();
  if (!qword_1ECD7EB08)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TextInputUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardIntl.m"), 77, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("TUIKeyboardLayoutFactory");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIKeyboardLayoutFactoryClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKeyboardIntl.m"), 78, CFSTR("Unable to find class %s"), "TUIKeyboardLayoutFactory");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7EB00 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getTUIKeyboardLayoutFactoryClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7EB70)
    qword_1ECD7EB70 = _sl_dlopen();
  if (!qword_1ECD7EB70)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TextInputUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKeyboardPreferencesController.m"), 34, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("TUIKeyboardLayoutFactory");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIKeyboardLayoutFactoryClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKeyboardPreferencesController.m"), 35, CFSTR("Unable to find class %s"), "TUIKeyboardLayoutFactory");

LABEL_8:
    __break(1u);
  }
  qword_1ECD7EB68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __getTUIKeyboardLayoutFactoryClass_block_invoke_1(uint64_t a1)
{
  void *v2;
  void *v3;

  TextInputUILibrary_3();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyboardLayoutFactory");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyboardLayoutFactoryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTUIKeyboardLayoutFactoryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIKeyboardLayoutStar.m"), 178, CFSTR("Unable to find class %s"), "TUIKeyboardLayoutFactory");

    __break(1u);
  }
}

uint64_t _UIApplicationWantsExtensionBehavior(void *a1)
{
  if (qword_1EDDC80D0 != -1)
    dispatch_once(&qword_1EDDC80D0, &__block_literal_global_902);
  if (byte_1EDDC7FFB)
    return objc_msgSend(a1, "_wantsApplicationBehaviorAsExtension") ^ 1;
  else
    return 0;
}

uint64_t ___quantizePositionsInAnimation_block_invoke(uint64_t a1, void *a2)
{
  return _animationIsEligibleForQuantization(a2);
}

id UIButton.Configuration.titleLineBreakMode.setter(uint64_t a1)
{
  return sub_1852D81B8(a1, (SEL *)&selRef_setTitleLineBreakMode_);
}

void (*UIButton.Configuration.contentInsets.modify(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_contentInsets);
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  return sub_18521A0D8;
}

id UIButton.Configuration.imagePadding.setter(double a1)
{
  return sub_1852C2E8C((SEL *)&selRef_setImagePadding_, a1);
}

uint64_t static UITraitCollection.systemTraitsAffectingColorAppearance.getter()
{
  return sub_185248154((SEL *)&selRef__systemTraitTokensAffectingColorAppearance);
}

void sub_1852A8DEC(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1852A8E04(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16));
}

void sub_1852A8E04(uint64_t a1, void *a2, void (*a3)(uint64_t, _QWORD *))
{
  void *v5;
  void *v6;
  _QWORD v7[6];

  sub_1850F2A38(a2, (uint64_t)v7);
  v5 = (void *)v7[0];
  v6 = (void *)v7[4];
  a3(a1, v7);
  swift_bridgeObjectRelease();

}

void _s5UIKit7UIShapeV7StorageOwxx_0(uint64_t a1)
{
  sub_185228168(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

id UIShape.inset(by:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v11 = *(void **)v5;
  v12 = *(_QWORD *)(v5 + 8);
  v13 = *(_QWORD *)(v5 + 16);
  v14 = *(_QWORD *)(v5 + 24);
  v15 = *(_QWORD *)(v5 + 32);
  v16 = *(_QWORD *)(v5 + 40);
  v17 = *(_QWORD *)(v5 + 48);
  v18 = *(_BYTE *)(v5 + 56);
  v19 = swift_allocObject();
  *(double *)(v19 + 16) = a2;
  *(double *)(v19 + 24) = a3;
  *(double *)(v19 + 32) = a4;
  *(double *)(v19 + 40) = a5;
  *(_QWORD *)(v19 + 48) = v11;
  *(_QWORD *)(v19 + 56) = v12;
  *(_QWORD *)(v19 + 64) = v13;
  *(_QWORD *)(v19 + 72) = v14;
  *(_QWORD *)(v19 + 80) = v15;
  *(_QWORD *)(v19 + 88) = v16;
  *(_QWORD *)(v19 + 96) = v17;
  *(_BYTE *)(v19 + 104) = v18;
  *(_QWORD *)a1 = v19;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 4;
  return sub_185228314(v11, v12, v13, v14, v15, v16, v17, v18);
}

double static UIShape.rect(cornerRadius:cornerCurve:maskedCorners:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double result;

  *(double *)a3 = a4;
  *(_QWORD *)(a3 + 8) = a1;
  *(_QWORD *)(a3 + 16) = a2;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_BYTE *)(a3 + 56) = 0;
  return result;
}

uint64_t _UICoreMaterialStyleNeedsUpdateForEnvironmentChange(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a2;
  v6 = a3;
  if (!_UICoreMaterialStyleIsDynamic(a1))
    goto LABEL_4;
  objc_msgSend(v5, "traitCollection");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "traitCollection");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "userInterfaceStyle");
  if (v9 != objc_msgSend(v8, "userInterfaceStyle"))
  {

    goto LABEL_6;
  }
  v10 = objc_msgSend(v7, "userInterfaceLevel");
  v11 = objc_msgSend(v8, "userInterfaceLevel");

  if (v10 != v11)
  {
LABEL_6:
    v12 = 1;
    goto LABEL_7;
  }
LABEL_4:
  v12 = 0;
LABEL_7:

  return v12;
}

uint64_t _UICoreMaterialStyleIsDynamic(uint64_t a1)
{
  _BOOL4 v1;

  v1 = (unint64_t)(a1 - 1200) < 4 || a1 == 1100;
  return (unint64_t)(a1 - 6) < 5 || v1;
}

void _UIBlurEffectAddBlurFilterEntry(void *a1, void *a2, double a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _UIVisualEffectFilterEntry *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _UIVisualEffectFilterEntry *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  if (objc_msgSend(v8, "allowsBlurring"))
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setObject:forKeyedSubscript:", CFSTR("default"), *MEMORY[0x1E0CD2D88]);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CD2D70]);
    if (objc_msgSend(v8, "allowsDithering"))
      objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CD2D28]);
    objc_msgSend(v8, "traitCollection");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "userInterfaceIdiom");

    if (v11 == 3)
      objc_msgSend(v9, "setObject:forKeyedSubscript:", CFSTR("medium"), *MEMORY[0x1E0CD2D60]);
    v12 = [_UIVisualEffectFilterEntry alloc];
    v13 = *MEMORY[0x1E0CD2C88];
    v21 = *MEMORY[0x1E0CD2D90];
    v14 = v21;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = v15;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, &v21, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v14;
    v20 = &unk_1E1A955B0;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = -[_UIVisualEffectFilterEntry initWithFilterType:configurationValues:requestedValues:identityValues:](v12, "initWithFilterType:configurationValues:requestedValues:identityValues:", v13, v9, v16, v17);

    -[_UIVisualEffectFilterEntry setIdentityScaleHint:](v18, "setIdentityScaleHint:", 1.0);
    -[_UIVisualEffectFilterEntry setUseRelaxedDiffingRule:](v18, "setUseRelaxedDiffingRule:", 1);
    if (a4 <= 0.0)
      a4 = 1.0 / (a3 * 0.1 + 1.0);
    -[_UIVisualEffectFilterEntry setRequestedScaleHint:](v18, "setRequestedScaleHint:", a4);
    objc_msgSend(v7, "addFilterEntry:", v18);

  }
}

void _UICoreMaterialUpdateBlurEffectDescriptorInternal(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  double v22;
  void *v23;
  void *v24;
  void *v25;
  _UIVisualEffectFilterEntry *v26;
  double v27;
  void *v28;
  void *v29;
  _UIVisualEffectFilterEntry *v30;
  uint64_t v31;
  double v32;
  double v33;
  _UIVisualEffectFilterEntry *v34;
  id v35;
  _UIVisualEffectFilterEntry *v36;
  NSObject *v37;
  id v38;
  void *v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _UIVisualEffectFilterEntry *v45;
  uint64_t v46;
  void *v47;
  _UIVisualEffectFilterEntry *v48;
  _UIVisualEffectFilterEntry *v49;
  double v50;
  unint64_t v51;
  NSObject *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  NSObject *v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  id obj;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint8_t buf[24];
  _BYTE v77[128];
  void *v78;
  void *v79;
  _QWORD v80[3];

  v80[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v61 = a2;
  v6 = a3;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("filters"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = v5;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("scale"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "doubleValue");
  v10 = v9;

  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  obj = v7;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v77, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v73;
    v71 = *MEMORY[0x1E0CD2E20];
    v70 = *MEMORY[0x1E0CD2E18];
    v65 = *MEMORY[0x1E0CD2BF0];
    v64 = *MEMORY[0x1E0CD2BB8];
    v63 = *MEMORY[0x1E0CD2C00];
    if (v10 <= 0.0)
      v14 = 0.03125;
    else
      v14 = v10;
    v62 = *MEMORY[0x1E0CD2B88];
    v60 = *MEMORY[0x1E0CD2C88];
    v59 = (void *)*MEMORY[0x1E0CD2D90];
    v15 = (void *)*MEMORY[0x1E0CD2CB8];
    v66 = *(_QWORD *)v73;
    v67 = v6;
    do
    {
      v16 = 0;
      v68 = v12;
      do
      {
        if (*(_QWORD *)v73 != v13)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * v16);
        objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("type"));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v18, "isEqualToString:", v71))
        {
          v19 = v6;
          v20 = v17;
          objc_msgSend(v20, "objectForKeyedSubscript:", v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "doubleValue");
          if (v22 <= 0.0)
            goto LABEL_25;
          _configDictionaryByRemovingKey(v20, v15);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v80[0] = v15;
          *(_QWORD *)buf = v21;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, v80, 1);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v78 = v15;
          v79 = &unk_1E1A95AE0;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v78, 1);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = -[_UIVisualEffectFilterEntry initWithFilterType:configurationValues:requestedValues:identityValues:]([_UIVisualEffectFilterEntry alloc], "initWithFilterType:configurationValues:requestedValues:identityValues:", v71, v23, v24, v25);
          objc_msgSend(v19, "addFilterEntry:", v26);

          v6 = v67;
          v13 = v66;
LABEL_24:

          v12 = v68;
          goto LABEL_25;
        }
        if (objc_msgSend(v18, "isEqualToString:", v70))
        {
          v19 = v6;
          v20 = v17;
          objc_msgSend(v20, "objectForKeyedSubscript:", v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "doubleValue");
          if (v27 > 0.0)
          {
            _configDictionaryByRemovingKey(v20, v15);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v80[0] = v15;
            *(_QWORD *)buf = v21;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, v80, 1);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v78 = v15;
            v79 = &unk_1E1A95AE0;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v78, 1);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = [_UIVisualEffectFilterEntry alloc];
            v31 = v70;
            goto LABEL_23;
          }
          goto LABEL_25;
        }
        if (objc_msgSend(v18, "isEqualToString:", v65))
        {
          _addColorMatrix(v6, v17, 0);
          goto LABEL_26;
        }
        if (objc_msgSend(v18, "isEqualToString:", v64))
        {
          v19 = v6;
          v20 = v17;
          objc_msgSend(v20, "objectForKeyedSubscript:", v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "doubleValue");
          if (v32 != 0.0)
          {
            _configDictionaryByRemovingKey(v20, v15);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v80[0] = v15;
            *(_QWORD *)buf = v21;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, v80, 1);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v78 = v15;
            v79 = &unk_1E1A95AE0;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v78, 1);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = [_UIVisualEffectFilterEntry alloc];
            v31 = v64;
            goto LABEL_23;
          }
LABEL_25:

          goto LABEL_26;
        }
        if (objc_msgSend(v18, "isEqualToString:", v63))
        {
          v19 = v6;
          v20 = v17;
          objc_msgSend(v20, "objectForKeyedSubscript:", v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "doubleValue");
          if (v33 == 1.0)
            goto LABEL_25;
          _configDictionaryByRemovingKey(v20, v15);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v80[0] = v15;
          *(_QWORD *)buf = v21;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, v80, 1);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v78 = v15;
          v79 = &unk_1E1A95AF0;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v78, 1);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = [_UIVisualEffectFilterEntry alloc];
          v31 = v63;
LABEL_23:
          v34 = -[_UIVisualEffectFilterEntry initWithFilterType:configurationValues:requestedValues:identityValues:](v30, "initWithFilterType:configurationValues:requestedValues:identityValues:", v31, v23, v28, v29);
          objc_msgSend(v19, "addFilterEntry:", v34);

          v13 = v66;
          v6 = v67;

          goto LABEL_24;
        }
        if (objc_msgSend(v18, "isEqualToString:", v62))
        {
          if (!objc_msgSend(v61, "allowsBlurring"))
            goto LABEL_26;
          v35 = v6;
          v36 = [_UIVisualEffectFilterEntry alloc];
          v37 = -[_UIVisualEffectFilterEntry initWithFilterType:configurationValues:requestedValues:identityValues:](v36, "initWithFilterType:configurationValues:requestedValues:identityValues:", v62, MEMORY[0x1E0C9AA70], MEMORY[0x1E0C9AA70], MEMORY[0x1E0C9AA70]);
          -[NSObject setRequestedScaleHint:](v37, "setRequestedScaleHint:", v14);
          objc_msgSend(v35, "addFilterEntry:", v37);
          objc_msgSend(v35, "setDisableInPlaceFiltering:", 1);

          goto LABEL_42;
        }
        if (objc_msgSend(v18, "isEqualToString:", v60))
        {
          if (!objc_msgSend(v61, "allowsBlurring"))
            goto LABEL_26;
          v37 = v6;
          v38 = v17;
          objc_msgSend(v38, "objectForKeyedSubscript:", v59);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "doubleValue");
          if (v40 > 0.0)
          {
            v41 = v40;
            v57 = v38;
            v58 = v37;
            _configDictionaryByRemovingKey(v38, v59);
            v42 = objc_claimAutoreleasedReturnValue();
            v80[0] = v59;
            *(_QWORD *)buf = v39;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, v80, 1);
            v43 = objc_claimAutoreleasedReturnValue();
            v78 = v59;
            v79 = &unk_1E1A95AE0;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v78, 1);
            v44 = objc_claimAutoreleasedReturnValue();
            v45 = [_UIVisualEffectFilterEntry alloc];
            v55 = (void *)v44;
            v56 = (void *)v42;
            v46 = v42;
            v47 = (void *)v43;
            v48 = -[_UIVisualEffectFilterEntry initWithFilterType:configurationValues:requestedValues:identityValues:](v45, "initWithFilterType:configurationValues:requestedValues:identityValues:", v60, v46, v43, v44);
            v49 = v48;
            v50 = v10;
            if (v10 <= 0.0)
            {
              v50 = 1.0;
              if (v41 > 4.0)
              {
                v50 = 0.5;
                if (v41 > 16.0)
                {
                  if (v41 <= 32.0)
                    v50 = 0.25;
                  else
                    v50 = 0.125;
                }
              }
            }
            -[_UIVisualEffectFilterEntry setRequestedScaleHint:](v48, "setRequestedScaleHint:", v50);
            -[_UIVisualEffectFilterEntry setIdentityScaleHint:](v49, "setIdentityScaleHint:", 1.0);
            -[_UIVisualEffectFilterEntry setUseRelaxedDiffingRule:](v49, "setUseRelaxedDiffingRule:", 1);
            v37 = v58;
            -[NSObject addFilterEntry:](v58, "addFilterEntry:", v49);
            -[NSObject setDisableInPlaceFiltering:](v58, "setDisableInPlaceFiltering:", 1);

            v12 = v68;
            v38 = v57;
          }

          goto LABEL_42;
        }
        if (os_variant_has_internal_diagnostics())
        {
          __UIFaultDebugAssertLog();
          v37 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v18;
            _os_log_fault_impl(&dword_185066000, v37, OS_LOG_TYPE_FAULT, "CoreMaterial description for blur effect returned unknown filterType %@", buf, 0xCu);
          }
LABEL_42:

          goto LABEL_26;
        }
        v51 = _UICoreMaterialUpdateBlurEffectDescriptorInternal___s_category;
        if (!_UICoreMaterialUpdateBlurEffectDescriptorInternal___s_category)
        {
          v51 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v51, (unint64_t *)&_UICoreMaterialUpdateBlurEffectDescriptorInternal___s_category);
        }
        v52 = *(NSObject **)(v51 + 8);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v18;
          _os_log_impl(&dword_185066000, v52, OS_LOG_TYPE_ERROR, "CoreMaterial description for blur effect returned unknown filterType %@", buf, 0xCu);
        }
LABEL_26:

        ++v16;
      }
      while (v12 != v16);
      v53 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v77, 16);
      v12 = v53;
    }
    while (v53);
  }

}

id _configDictionaryByRemovingKey(void *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = (void *)objc_msgSend(a1, "mutableCopy");
  objc_msgSend(v4, "removeObjectForKey:", CFSTR("type"));
  objc_msgSend(v4, "removeObjectForKey:", v3);

  return v4;
}

void _UICoreMaterialUpdateVibrancyEffectDescriptor(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;

  v7 = a4;
  v8 = a3;
  _convertStyleToRecipe(a1, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v8, "reducedTransperancy");

  _lookupVibrancyEffectDescription(v9, a2, v10);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  _UICoreMaterialUpdateVibrancyEffectDescriptorInternal(v11, v7);
}

void _UICoreMaterialUpdateBlurEffectDescriptor(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend(v6, "reducedTransperancy");
  _convertStyleToRecipe(a1, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "traitCollection");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  _lookupBlurEffectDescription(v8, v7, objc_msgSend(v9, "userInterfaceLevel"));
  v10 = (id)objc_claimAutoreleasedReturnValue();

  _UICoreMaterialUpdateBlurEffectDescriptorInternal(v10, v6, v5);
}

id _convertStyleToRecipe(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id *v5;
  id *v6;
  id v7;
  void *v9;
  void *v10;

  objc_msgSend(a2, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "userInterfaceStyle");

  if (a1 > 1100)
  {
    switch(a1)
    {
      case 1200:
LABEL_4:
        v5 = (id *)MEMORY[0x1E0D16B88];
        v6 = (id *)MEMORY[0x1E0D16B80];
        goto LABEL_22;
      case 1201:
LABEL_8:
        v5 = (id *)MEMORY[0x1E0D16BB8];
        v6 = (id *)MEMORY[0x1E0D16BB0];
        goto LABEL_22;
      case 1202:
LABEL_9:
        v5 = (id *)MEMORY[0x1E0D16BA8];
        v6 = (id *)MEMORY[0x1E0D16BA0];
        goto LABEL_22;
      case 1203:
LABEL_10:
        v5 = (id *)MEMORY[0x1E0D16B98];
        v6 = (id *)MEMORY[0x1E0D16B90];
        goto LABEL_22;
      case 1204:
LABEL_16:
        v5 = (id *)MEMORY[0x1E0D16B88];
        goto LABEL_24;
      case 1205:
LABEL_11:
        v5 = (id *)MEMORY[0x1E0D16BB8];
        goto LABEL_24;
      case 1206:
LABEL_17:
        v5 = (id *)MEMORY[0x1E0D16BA8];
        goto LABEL_24;
      case 1207:
LABEL_18:
        v5 = (id *)MEMORY[0x1E0D16B98];
        goto LABEL_24;
      case 1208:
LABEL_12:
        v5 = (id *)MEMORY[0x1E0D16B80];
        goto LABEL_24;
      case 1209:
LABEL_19:
        v5 = (id *)MEMORY[0x1E0D16BB0];
        goto LABEL_24;
      case 1210:
LABEL_13:
        v5 = (id *)MEMORY[0x1E0D16BA0];
        goto LABEL_24;
      case 1211:
LABEL_14:
        v5 = (id *)MEMORY[0x1E0D16B90];
        goto LABEL_24;
      default:
        if (a1 == 1101)
        {
LABEL_15:
          v5 = (id *)MEMORY[0x1E0D16B78];
          goto LABEL_24;
        }
        if (a1 == 1102)
        {
LABEL_7:
          v5 = (id *)MEMORY[0x1E0D16B70];
          goto LABEL_24;
        }
LABEL_26:
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MTCoreMaterialRecipe _convertStyleToRecipe(UIBlurEffectStyle, _UIVisualEffectEnvironment *__strong)");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("_UICoreMaterialSupport.m"), 172, CFSTR("Invalid style (%li)"), a1);

        v7 = 0;
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 6:
        goto LABEL_8;
      case 7:
        goto LABEL_9;
      case 8:
        goto LABEL_4;
      case 9:
        goto LABEL_10;
      case 10:
        break;
      case 11:
        goto LABEL_11;
      case 12:
        goto LABEL_17;
      case 13:
        goto LABEL_16;
      case 14:
        goto LABEL_18;
      case 15:
        goto LABEL_15;
      case 16:
        goto LABEL_19;
      case 17:
        goto LABEL_13;
      case 18:
        goto LABEL_12;
      case 19:
        goto LABEL_14;
      case 20:
        goto LABEL_7;
      default:
        if (a1 != 1100)
          goto LABEL_26;
        break;
    }
    v5 = (id *)MEMORY[0x1E0D16B78];
    v6 = (id *)MEMORY[0x1E0D16B70];
LABEL_22:
    if (v4 == 2)
      v5 = v6;
LABEL_24:
    v7 = *v5;
  }
  return v7;
}

id _lookupBlurEffectDescription(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[3];
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = v7;
    v9 = v7;
    if (a3)
    {
      objc_msgSend(v7, "stringByAppendingString:", CFSTR("-e"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if ((_DWORD)a2)
    {
      objc_msgSend(v9, "stringByAppendingString:", CFSTR("-rt"));
      v10 = objc_claimAutoreleasedReturnValue();

      v9 = (void *)v10;
    }
    objc_msgSend((id)_lookupBlurEffectDescription_blurDescriptionCache, "objectForKeyedSubscript:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
      goto LABEL_10;
    v12 = *MEMORY[0x1E0D16C18];
    v22[0] = MEMORY[0x1E0C9AAB0];
    v13 = *MEMORY[0x1E0D16C20];
    v21[0] = v12;
    v21[1] = v13;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = (void *)v14;
    v21[2] = CFSTR("MTDictionaryRepresentationOptionsUserInterfaceLevelKey");
    v16 = &unk_1E1A98CB8;
    if (!a3)
      v16 = &unk_1E1A98CA0;
    v22[1] = v14;
    v22[2] = v16;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 3);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    MTMaterialCreateDictionaryRepresentation();
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
LABEL_10:
      if (_lookupBlurEffectDescription_blurDescriptionCache)
      {
        objc_msgSend((id)_lookupBlurEffectDescription_blurDescriptionCache, "setObject:forKeyedSubscript:", v11, v9);
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithObject:forKey:", v11, v9);
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = (void *)_lookupBlurEffectDescription_blurDescriptionCache;
        _lookupBlurEffectDescription_blurDescriptionCache = v18;

      }
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

id _lookupVibrancyEffectDescription(void *a1, unint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _UIVibrancyStyleKey *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = (id)*MEMORY[0x1E0D16BE8];
  if (a2 <= 7)
  {
    v7 = **((id **)&unk_1E16D5AC0 + a2);

    v6 = v7;
  }
  v8 = (id)*MEMORY[0x1E0D16BE0];
  if (a2 <= 7)
  {
    v9 = **((id **)&unk_1E16D5B00 + a2);

    v8 = v9;
  }
  v10 = 0;
  if (v5)
  {
    if (v6 && v8 != 0)
    {
      v12 = -[_UIVibrancyStyleKey initWithRecipe:vibrancyStyle:category:]([_UIVibrancyStyleKey alloc], "initWithRecipe:vibrancyStyle:category:", v5, a2, v8);
      objc_msgSend(0, "objectForKeyedSubscript:", v12);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
        goto LABEL_12;
      v13 = *MEMORY[0x1E0D16C20];
      v18[0] = *MEMORY[0x1E0D16C18];
      v18[1] = v13;
      v19[0] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v19[1] = v14;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      MTVisualStylingCreateDictionaryRepresentation();
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {
LABEL_12:
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithObject:forKey:", v10, v12);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v16 = 0;
      }

    }
  }

  return v10;
}

void _UICoreMaterialUpdateVibrancyEffectDescriptorInternal(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _UITintColorViewEntry *v36;
  void *v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  void *v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v38 = a2;
  v37 = v3;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("filters"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v40;
    v8 = *MEMORY[0x1E0CD2F08];
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v40 != v7)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v9);
        objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("type"));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v11, "isEqualToString:", v8))
        {
          _addColorMatrix(v38, v10, 1);
        }
        else if (os_variant_has_internal_diagnostics())
        {
          __UIFaultDebugAssertLog();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412290;
            v44 = v11;
            _os_log_fault_impl(&dword_185066000, v14, OS_LOG_TYPE_FAULT, "CoreMaterial description for vibrancy effect returned unknown filterType %@", buf, 0xCu);
          }

        }
        else
        {
          v12 = _UICoreMaterialUpdateVibrancyEffectDescriptorInternal___s_category;
          if (!_UICoreMaterialUpdateVibrancyEffectDescriptorInternal___s_category)
          {
            v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v12, (unint64_t *)&_UICoreMaterialUpdateVibrancyEffectDescriptorInternal___s_category);
          }
          v13 = *(NSObject **)(v12 + 8);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v44 = v11;
            _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "CoreMaterial description for vibrancy effect returned unknown filterType %@", buf, 0xCu);
          }
        }

        ++v9;
      }
      while (v6 != v9);
      v15 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
      v6 = v15;
    }
    while (v15);
  }
  objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("tintColor"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (v16)
  {
    v18 = v16;
    objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("alpha"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
    {
      objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("white"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        v21 = v20;
        objc_msgSend(v20, "doubleValue");
        v23 = v22;
        objc_msgSend(v19, "doubleValue");
        +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("red"));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("green"));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("blue"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = v27;
        if (v21 && v26 && v27)
        {
          objc_msgSend(v21, "doubleValue");
          v30 = v29;
          objc_msgSend(v26, "doubleValue");
          v32 = v31;
          objc_msgSend(v28, "doubleValue");
          v34 = v33;
          objc_msgSend(v19, "doubleValue");
          +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v30, v32, v34, v35);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {

          v25 = 0;
        }
      }

    }
    else
    {
      v25 = 0;
    }

    if (v25)
    {
      v36 = objc_alloc_init(_UITintColorViewEntry);
      -[_UITintColorViewEntry setTintColor:](v36, "setTintColor:", v25);
      objc_msgSend(v38, "addViewEffect:", v36);
      objc_msgSend(v38, "setTextShouldRenderWithTintColor:", 1);

    }
  }

}

void _addColorMatrix(void *a1, void *a2, int a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  _UIVisualEffectFilterEntry *v15;
  _QWORD *v16;
  _UIVisualEffectFilterEntry *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = (void *)*MEMORY[0x1E0CD2D20];
  v7 = a2;
  objc_msgSend(v7, "objectForKeyedSubscript:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  _configDictionaryByRemovingKey(v7, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = *(_OWORD *)(MEMORY[0x1E0CD2338] + 48);
  v22 = *(_OWORD *)(MEMORY[0x1E0CD2338] + 32);
  v25 = v22;
  v26 = v21;
  v20 = *(_OWORD *)(MEMORY[0x1E0CD2338] + 64);
  v27 = v20;
  v18 = *MEMORY[0x1E0CD2338];
  v19 = *(_OWORD *)(MEMORY[0x1E0CD2338] + 16);
  v23 = *MEMORY[0x1E0CD2338];
  v24 = v19;
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCAColorMatrix:", &v23);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v8, "isEqualToValue:", v10);

  if ((v11 & 1) == 0)
  {
    v30 = v6;
    v31[0] = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, &v30, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v6;
    v25 = v22;
    v26 = v21;
    v27 = v20;
    v23 = v18;
    v24 = v19;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCAColorMatrix:", &v23);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = v13;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = [_UIVisualEffectFilterEntry alloc];
    v16 = (_QWORD *)MEMORY[0x1E0CD2F08];
    if (!a3)
      v16 = (_QWORD *)MEMORY[0x1E0CD2BF0];
    v17 = -[_UIVisualEffectFilterEntry initWithFilterType:configurationValues:requestedValues:identityValues:](v15, "initWithFilterType:configurationValues:requestedValues:identityValues:", *v16, v9, v12, v14);
    objc_msgSend(v5, "addFilterEntry:", v17);

  }
}

BOOL _UICAColorMatrixIsIdentity(float *a1)
{
  return *a1 == 1.0
      && a1[1] == 0.0
      && a1[2] == 0.0
      && a1[3] == 0.0
      && a1[4] == 0.0
      && a1[5] == 0.0
      && a1[6] == 1.0
      && a1[7] == 0.0
      && a1[8] == 0.0
      && a1[9] == 0.0
      && a1[10] == 0.0
      && a1[11] == 0.0
      && a1[12] == 1.0
      && a1[13] == 0.0
      && a1[14] == 0.0
      && a1[15] == 0.0
      && a1[16] == 0.0
      && a1[17] == 0.0
      && a1[18] == 1.0
      && a1[19] == 0.0;
}

void sub_1852ACFD4()
{
  sub_1852AD1BC();
}

void sub_1852AD000(void *a1)
{
  SEL *v1;
  id v2;
  void *v3;

  v2 = a1;
  sub_186507D68();
  v3 = (void *)sub_18650763C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, *v1, v3);

}

void NSDiffableDataSourceSnapshot.appendItems(_:toSection:)()
{
  uint64_t v0;

  v0 = sub_186507AA4();
  MEMORY[0x1E0C80A78](v0);
  sub_1852AD1BC();
}

uint64_t sub_1852AD0DC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a1;
  sub_186507D68();
  v7 = (void *)sub_18650763C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  v8 = *(_QWORD *)(v1 - 8);
  v9 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v2, 1, v1) != 1)
  {
    v9 = sub_186507FB4();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v1);
  }
  objc_msgSend(v6, sel_appendItemsWithIdentifiers_intoSectionWithIdentifier_, v7, v9);

  return swift_unknownObjectRelease();
}

void sub_1852AD1BC()
{
  type metadata accessor for NSDiffableDataSourceSnapshot.ImplWrapper();
}

uint64_t sub_1852AD1E4()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = sub_186507F90();
  v2 = *v0;
  if ((v1 & 1) != 0)
    return *(_QWORD *)(v2 + 16);
  objc_msgSend(*(id *)(v2 + 16), sel_copy);
  sub_186507B1C();
  swift_unknownObjectRelease();
  sub_1851F9080(0, &qword_1EDD81F58);
  swift_dynamicCast();
  v3 = v6;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v6;
  swift_release();
  *v0 = v4;
  return v3;
}

void sub_1852AD2A0(_QWORD *a1)
{
  uint64_t v1;
  id v2;

  v2 = objc_msgSend(*(id *)(v1 + *a1), sel_snapshot);
  type metadata accessor for NSDiffableDataSourceSnapshot.ImplWrapper();
}

uint64_t sub_1852AD300()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v1;
  *v0 = result;
  return result;
}

void type metadata accessor for NSDiffableDataSourceSnapshot.ImplWrapper()
{
  JUMPOUT(0x186DC9E8CLL);
}

id UIApplicationSceneDeactivationReasonMaskDescriptionComponents(int a1)
{
  void *v2;
  unint64_t i;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 19; ++i)
  {
    if (((1 << i) & a1) != 0)
    {
      UIApplicationSceneDeactivationReasonDescription(i);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (v4)
        objc_msgSend(v2, "addObject:", v4);

    }
  }
  return v2;
}

void sub_1852AEB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _SharedAssertionLogger()
{
  if (qword_1ECD7EA58 != -1)
    dispatch_once(&qword_1ECD7EA58, &__block_literal_global_304);
  return (id)_MergedGlobals_1107;
}

void sub_1852B20E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIScreenHasScreens()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[2];
  void (*v4)(uint64_t);
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v4 = ___UIScreenHasScreens_block_invoke;
  v5 = &unk_1E16B14C0;
  v6 = &v7;
  v0 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)&__UIScreenMutableScreensArrayAccessLock);
  v4((uint64_t)v0);

  os_unfair_lock_unlock((os_unfair_lock_t)&__UIScreenMutableScreensArrayAccessLock);
  v1 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v1;
}

void sub_1852B2398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIContentSizeCategoryPreferenceSafeContentSizeCategory(void *a1)
{
  id v1;
  id v2;
  __objc2_class *v3;
  void *v4;
  __CFString *v5;

  v1 = a1;
  if (!objc_msgSend(v1, "length"))
  {
    v2 = (id)UIApp;
    if (v2)
      v3 = (__objc2_class *)objc_opt_class();
    else
      v3 = UIApplication;
    -[__objc2_class _defaultContentSizeCategory](v3, "_defaultContentSizeCategory");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v4, "length"))
    {
      v5 = CFSTR("UICTContentSizeCategoryL");

      v4 = v5;
    }

    v1 = v4;
  }
  return v1;
}

uint64_t _UIApplicationIsExtension()
{
  if (qword_1EDDC80D0 != -1)
    dispatch_once(&qword_1EDDC80D0, &__block_literal_global_902);
  return byte_1EDDC7FFB;
}

id _UIKBFeedbackLog()
{
  if (qword_1ECD7D5E8 != -1)
    dispatch_once(&qword_1ECD7D5E8, &__block_literal_global_203);
  return (id)qword_1ECD7D5E0;
}

void UpdateSystemSoundActiveStatus()
{
  BOOL v0;
  void *v1;
  _QWORD aBlock[4];
  BOOL v3;

  if (qword_1ECD7E460 != -1)
    dispatch_once(&qword_1ECD7E460, &__block_literal_global_405);
  v0 = IsSystemSoundEnabled()
    && (objc_msgSend((id)UIApp, "isSuspended") & 1) == 0
    && (objc_msgSend((id)UIApp, "isSuspendedEventsOnly") & 1) == 0
    && qword_1ECD7E358
    && CFArrayGetCount((CFArrayRef)qword_1ECD7E358) > 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __UpdateSystemSoundActiveStatus_block_invoke_2;
  aBlock[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = v0;
  v1 = _Block_copy(aBlock);
  if ((objc_msgSend((id)UIApp, "isSuspended") & 1) != 0
    || objc_msgSend((id)UIApp, "isSuspendedEventsOnly"))
  {
    dispatch_sync((dispatch_queue_t)qword_1ECD7E458, v1);
  }
  else
  {
    dispatch_async((dispatch_queue_t)qword_1ECD7E458, v1);
  }

}

BOOL IsSystemSoundEnabled()
{
  int v0;
  uint64_t AppBooleanValue;
  BOOL v2;
  char v3;
  Boolean keyExistsAndHasValidFormat;

  if (IsSystemSoundEnabled_onceToken != -1)
    dispatch_once(&IsSystemSoundEnabled_onceToken, &__block_literal_global_411);
  v0 = __systemSoundEnabled;
  if (__systemSoundEnabled == 255)
  {
    CFPreferencesAppSynchronize(CFSTR("com.apple.preferences.sounds"));
    keyExistsAndHasValidFormat = 0;
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("keyboard-audio"), CFSTR("com.apple.preferences.sounds"), &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
      v2 = (_DWORD)AppBooleanValue == 0;
    else
      v2 = 0;
    v3 = !v2;
    __systemSoundEnabled = v3;
    UpdateSystemSoundActiveStatus(AppBooleanValue);
    v0 = __systemSoundEnabled;
  }
  return v0 != 0;
}

void sub_1852B4140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *UIButton.configuration.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  _QWORD *result;
  _QWORD *v4;

  result = objc_msgSend(v1, sel_configuration);
  if (result)
  {
    v4 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BB8);
    result = (_QWORD *)swift_allocObject();
    result[2] = v4;
  }
  *a1 = result;
  return result;
}

void sub_1852B5824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

BOOL UIDistanceBetweenPointAndRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGPoint v9;
  CGRect v10;

  v10.origin.x = a3;
  v10.origin.y = a4;
  v10.size.width = a5;
  v10.size.height = a6;
  v9.x = a1;
  v9.y = a2;
  return CGRectContainsPoint(v10, v9);
}

void sub_1852B66A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double UIRectCenteredIntegralRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return round(a5 + (a7 - a3) * 0.5);
}

void sub_1852B7FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

uint64_t _UISupportsIntrinsicContentSizeInvalidation()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
  {
    LODWORD(result) = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_EnableCollectionTableIntrinsicContentSizeInvalidation, (uint64_t)CFSTR("EnableCollectionTableIntrinsicContentSizeInvalidation"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    if (byte_1ECD75EFC)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t _UIMaximumIntrinsicContentSizeInvalidationUpdatesPerCommit()
{
  if (_UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_MaximumCollectionTableSelfSizingInvalidationUpdatesPerCommit, (uint64_t)CFSTR("MaximumCollectionTableSelfSizingInvalidationUpdatesPerCommit"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger))return 2;
  else
    return qword_1EDDA7E78;
}

void sub_1852B8F98(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1852BB898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, id *a13, id *a14, id *a15)
{
  id *v15;
  uint64_t v16;

  objc_destroyWeak(v15);
  objc_destroyWeak(location);
  objc_destroyWeak(a13);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak((id *)(v16 - 128));
  _Unwind_Resume(a1);
}

void sub_1852BC5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1852BE5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void UICollectionViewCommonSetup(void *a1)
{
  id *v1;
  _UICollectionViewSelectionController *v2;
  id v3;
  _QWORD *v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  _UIDragSnappingFeedbackGenerator *v16;
  id v17;
  id v18;
  id *v19;
  uint64_t v20;
  int v21;
  id *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  __int16 v28;
  _UICollectionViewDragAndDropController *v29;
  void *v30;
  void *v31;
  void *v32;
  _UICollectionViewSectionFocusGuideController *v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  id v37;
  void *v38;
  _UICollectionViewMultiSelectController *v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  char **v55;
  id v56;
  void *v57;
  void *v58;
  id *v59;
  _QWORD *v60;
  _QWORD v61[2];
  _QWORD v62[2];
  uint64_t v63;
  _QWORD v64[2];

  v64[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1[259], "_setCollectionView:", v1);
  v2 = objc_alloc_init(_UICollectionViewSelectionController);
  v3 = v1[362];
  v1[362] = v2;

  v4 = -[_UICollectionViewSubviewManager initWithCollectionView:]([_UICollectionViewSubviewManager alloc], (uint64_t)v1);
  v5 = v1[363];
  v1[363] = v4;

  v6 = v1[363];
  if (v6)
  {
    v7 = v6[1];
    if (v7)
      *(_BYTE *)(v7 + 32) = 1;
  }
  v8 = objc_opt_new();
  v9 = v1[380];
  v1[380] = (id)v8;

  v10 = -[UICollectionViewData initWithCollectionView:layout:]([UICollectionViewData alloc], v1, v1[259]);
  v11 = v1[274];
  v1[274] = (id)v10;

  v1[331] = (id)((unint64_t)v1[331] | 0x100);
  v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v13 = v1[343];
  v1[343] = v12;

  objc_msgSend(v1, "_updateBackgroundColorIfNeeded");
  objc_msgSend(v1, "_updateContentFocusContainerGuides");
  +[_UIDragSnappingFeedbackGeneratorConfiguration defaultConfiguration](_UIDragSnappingFeedbackGeneratorConfiguration, "defaultConfiguration");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "tweakedConfigurationForClass:usage:", objc_opt_class(), CFSTR("reorder"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = -[UIFeedbackGenerator initWithConfiguration:view:]([_UIDragSnappingFeedbackGenerator alloc], "initWithConfiguration:view:", v15, v1);
  v17 = v1[319];
  v1[319] = v16;

  v18 = v1[259];
  v19 = v1;
  v59 = v19;
  if (v18)
  {
    v20 = objc_msgSend(v19, "effectiveUserInterfaceLayoutDirection");
    if (v20 == objc_msgSend(v18, "developmentLayoutDirection"))
    {
      v21 = objc_msgSend(v59, "_flipsHorizontalAxis");
      v22 = v59;
      if (!v21)
        goto LABEL_10;
      v23 = 0;
    }
    else
    {
      v23 = objc_msgSend(v18, "_wantsRightToLeftHorizontalMirroringIfNeeded");
      v22 = v59;
    }
    objc_msgSend(v22, "_setFlipsHorizontalAxis:", v23, v59);
  }
LABEL_10:

  if ((dyld_program_sdk_at_least() & 1) == 0)
    *((_DWORD *)v59 + 30) &= ~0x80u;
  v24 = objc_msgSend(v59, "_prefetchingEnabledDefault", v59);
  v25 = 0x2000000000000000;
  if (!v24)
    v25 = 0;
  v60[331] = v60[331] & 0xDFFFFFFFFFFFFFFFLL | v25;
  v26 = _UISupportsIntrinsicContentSizeInvalidation();
  v27 = v60[332] & 0xFFF3 | (*((unsigned __int8 *)v60 + 2658) << 16);
  if (v26)
    v28 = 4;
  else
    v28 = 0;
  *((_WORD *)v60 + 1328) = v60[332] & 0xFFF3 | v28;
  *((_BYTE *)v60 + 2658) = BYTE2(v27);
  v29 = -[_UICollectionViewDragAndDropController initWithCollectionView:]([_UICollectionViewDragAndDropController alloc], "initWithCollectionView:", v60);
  v30 = (void *)v60[347];
  v60[347] = v29;

  v60[393] = 0;
  if (dyld_program_sdk_at_least())
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "addObserver:selector:name:object:", v60, sel__purgeReuseQueues, CFSTR("UIApplicationDidReceiveMemoryWarningNotification"), 0);

  }
  if (dyld_program_sdk_at_least())
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "addObserver:selector:name:object:", v60, sel__focusMovementDidFailNotification_, CFSTR("UIFocusMovementDidFailNotification"), 0);

  }
  v33 = -[_UICollectionViewSectionFocusGuideController initWithCollectionView:]([_UICollectionViewSectionFocusGuideController alloc], "initWithCollectionView:", v60);
  v34 = (void *)v60[360];
  v60[360] = v33;

  v35 = -[_UICollectionViewOrthogonalScrollerSectionController initWithCollectionView:]([_UICollectionViewOrthogonalScrollerSectionController alloc], v60);
  v36 = (void *)v60[359];
  v60[359] = v35;

  v37 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v38 = (void *)v60[341];
  v60[341] = v37;

  v39 = -[_UICollectionViewMultiSelectController initWithCollectionView:]([_UICollectionViewMultiSelectController alloc], "initWithCollectionView:", v60);
  v40 = (void *)v60[361];
  v60[361] = v39;

  objc_msgSend(v60, "_updateSelectionIsKey");
  if (dyld_program_sdk_at_least())
  {
    v41 = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_CollectionViewAllowsLayoutDuringUpdatesAndTransitions, (uint64_t)CFSTR("CollectionViewAllowsLayoutDuringUpdatesAndTransitions"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    if (byte_1ECD75F04)
      v42 = 1;
    else
      v42 = v41;
  }
  else
  {
    v42 = 0;
  }
  v60[331] = v60[331] & 0xFCFFFFFFFFFFFFFFLL | ((unint64_t)v42 << 56) | ((unint64_t)v42 << 57);
  v43 = (void *)objc_opt_new();
  objc_msgSend(v43, "setDelegate:", v60);
  objc_msgSend(v43, "setEnabled:", 0);
  objc_msgSend(v43, "setSimulatePressesCallbacksForLegacyBehavior:", 1);
  objc_msgSend(v60, "addInteraction:", v43);
  v44 = (void *)v60[384];
  v60[384] = v43;
  v45 = v43;

  v64[0] = 0x1E1A99660;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v64, 1);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = (id)objc_msgSend(v60, "_registerForTraitTokenChanges:withTarget:action:", v46, v60, sel__semanticContextTraitDidChange);

  _UITableTraitsAffectingSelectionIsKey();
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v48, "count"))
    v49 = (id)objc_msgSend(v60, "_registerForTraitTokenChanges:withTarget:action:", v48, v60, sel__updateSelectionIsKey);
  v63 = 0x1E1A994C8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v63, 1);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = (id)objc_msgSend(v60, "_registerForTraitTokenChanges:withTarget:action:", v50, v60, sel__layoutDirectionTraitDidChange);

  v62[0] = 0x1E1A99690;
  v62[1] = 0x1E1A99498;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v62, 2);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = (id)objc_msgSend(v60, "_registerForTraitTokenChanges:withTarget:action:", v52, v60, sel__updateVerticalScrollIndicatorVisibility);

  if (dyld_program_sdk_at_least())
  {
    v61[0] = 0x1E1A99540;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v61, 1);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = &selRef__invalidateLayoutForPreferredContentSizeCategoryTraitDidChange;
  }
  else
  {
    v61[0] = 0x1E1A994F8;
    v61[1] = 0x1E1A99510;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v61, 2);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = &selRef__resetPrefetchedCachedCells;
  }
  v56 = (id)objc_msgSend(v60, "_registerForTraitTokenChanges:withTarget:action:", v54, v60, *v55);

  objc_msgSend(v60, "_updateVerticalScrollIndicatorVisibility");
  +[_UIHDRUsageCoordinator sharedInstance]();
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIHDRUsageCoordinator applyConstrainedHDROverrideToView:]((uint64_t)v57, v60);

  +[_UIHDRUsageCoordinator sharedInstance]();
  v58 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIHDRUsageCoordinator registerForDefaultDynamicRangeChanges:]((uint64_t)v58, v60);
}

void _UIScrollViewSharedInit(void *a1)
{
  char *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _UIZoomEdgeFeedbackGenerator *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int64x2_t v12;
  int v13;
  _OWORD *v14;
  void *v15;
  _QWORD block[4];
  char *v17;

  v1 = a1;
  objc_msgSend(v1, "_screen");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *((_QWORD *)v1 + 155) = objc_msgSend(v3, "integerValue");

  *(_QWORD *)(v1 + 1780) |= 0x200000000000uLL;
  *((_OWORD *)v1 + 80) = *MEMORY[0x1E0C9D538];
  *((_QWORD *)v1 + 183) = 0x3F50624DD2F1A9FCLL;
  +[_UIEdgeFeedbackGeneratorConfiguration _zoomConfiguration](_UIEdgeFeedbackGeneratorConfiguration, "_zoomConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "tweakedConfigurationForClass:usage:", objc_opt_class(), CFSTR("zoom"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v4) = dyld_program_sdk_at_least();
  v6 = [_UIZoomEdgeFeedbackGenerator alloc];
  if ((_DWORD)v4)
  {
    v7 = -[_UIEdgeFeedbackGenerator initWithConfiguration:view:](v6, "initWithConfiguration:view:", v5, v1);
    v8 = (void *)*((_QWORD *)v1 + 168);
    *((_QWORD *)v1 + 168) = v7;

  }
  else
  {
    v9 = -[UIFeedbackGenerator initWithConfiguration:](v6, "initWithConfiguration:", v5);
    v10 = (void *)*((_QWORD *)v1 + 168);
    *((_QWORD *)v1 + 168) = v9;

    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___UIScrollViewSharedInit_block_invoke;
    block[3] = &unk_1E16B1B28;
    v17 = v1;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
  if (objc_msgSend((id)UIApp, "_supportsIndirectInputEvents"))
    v11 = &unk_1E1A95300;
  else
    v11 = &unk_1E1A952E8;
  objc_storeStrong((id *)v1 + 242, v11);
  *((_DWORD *)v1 + 447) |= 0x78u;
  v12 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v1 + 1976) = v12;
  *(int64x2_t *)(v1 + 1992) = v12;
  *(int64x2_t *)(v1 + 2008) = v12;
  *(int64x2_t *)(v1 + 2024) = v12;
  *(int64x2_t *)(v1 + 552) = v12;
  *(int64x2_t *)(v1 + 568) = v12;
  *(int64x2_t *)(v1 + 584) = v12;
  *(int64x2_t *)(v1 + 600) = v12;
  if (dyld_program_sdk_at_least())
    v13 = 128;
  else
    v13 = 0;
  *((_DWORD *)v1 + 447) = *((_DWORD *)v1 + 447) & 0xFFFFFE7F | v13;
  *((_QWORD *)v1 + 77) = 15;
  *((_DWORD *)v1 + 447) |= 0x400u;
  if (_UIVariableFrameDurationEnabled())
  {
    v14 = -[_UIScrollViewVFD initWithScrollView:]([_UIScrollViewVFD alloc], (uint64_t)v1);
    v15 = (void *)*((_QWORD *)v1 + 215);
    *((_QWORD *)v1 + 215) = v14;

  }
}

void _UITableUpdateSelectionIsKeyTraitOverride(void *a1, int a2, int a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a1;
  objc_msgSend(v14, "traitCollection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)(objc_msgSend(v5, "_focusSystemState") - 1) >= 2)
  {
    v7 = objc_msgSend(v5, "_splitViewControllerContext");
  }
  else
  {
    v6 = _AXSFullKeyboardAccessEnabled();
    v7 = objc_msgSend(v5, "_splitViewControllerContext");
    if (!v6)
    {
      v8 = a2 & a3;
      goto LABEL_7;
    }
  }
  v9 = v7;
  v10 = _UITableConstantsUseUIPSidebarMetrics();
  v8 = (v9 & 0xFFFFFFFFFFFFFFFDLL) == 1;
  if ((v10 & 1) != 0)
    v8 = 1;
LABEL_7:
  v11 = v8;
  -[UIView _internalTraitOverrides](v14);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "_setNSIntegerValue:forTraitToken:", v11, 0x1E1A996F0);

  objc_msgSend(v14, "window");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
    objc_msgSend(v14, "updateTraitsIfNeeded");

}

uint64_t _UITriStateToBool(uint64_t a1, void *a2)
{
  uint64_t (**v3)(_QWORD);
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v8;
  void *v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _UITriStateToBool(_UITriState, BOOL (^__strong)(void))");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("UIInterface_Internal.h"), 94, CFSTR("_UITriStateToBool() has to be called with a defaultValue block."));

  }
  if (a1 == 2)
  {
    v6 = 1;
  }
  else if (a1 == 1)
  {
    v6 = 0;
  }
  else
  {
    if (a1)
    {
      if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        {
          v11 = 134217984;
          v12 = a1;
          _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Found an invalid tri state of %tu. This is an indication of corrupted memory.", (uint8_t *)&v11, 0xCu);
        }

      }
      else
      {
        v4 = _UITriStateToBool___s_category;
        if (!_UITriStateToBool___s_category)
        {
          v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v4, (unint64_t *)&_UITriStateToBool___s_category);
        }
        v5 = *(NSObject **)(v4 + 8);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          v11 = 134217984;
          v12 = a1;
          _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "Found an invalid tri state of %tu. This is an indication of corrupted memory.", (uint8_t *)&v11, 0xCu);
        }
      }
    }
    v6 = v3[2](v3);
  }

  return v6;
}

uint64_t _UITriStateToBool_0(uint64_t a1, void *a2)
{
  uint64_t (**v3)(_QWORD);
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v8;
  void *v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _UITriStateToBool(_UITriState, BOOL (^__strong)(void))");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("UIInterface_Internal.h"), 94, CFSTR("_UITriStateToBool() has to be called with a defaultValue block."));

  }
  if (a1 == 2)
  {
    v6 = 1;
  }
  else if (a1 == 1)
  {
    v6 = 0;
  }
  else
  {
    if (a1)
    {
      if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        {
          v11 = 134217984;
          v12 = a1;
          _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Found an invalid tri state of %tu. This is an indication of corrupted memory.", (uint8_t *)&v11, 0xCu);
        }

      }
      else
      {
        v4 = _UITriStateToBool___s_category_1;
        if (!_UITriStateToBool___s_category_1)
        {
          v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v4, (unint64_t *)&_UITriStateToBool___s_category_1);
        }
        v5 = *(NSObject **)(v4 + 8);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          v11 = 134217984;
          v12 = a1;
          _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "Found an invalid tri state of %tu. This is an indication of corrupted memory.", (uint8_t *)&v11, 0xCu);
        }
      }
    }
    v6 = v3[2](v3);
  }

  return v6;
}

id _UITableTraitsAffectingSelectionIsKey()
{
  _QWORD v1[3];

  v1[2] = *MEMORY[0x1E0C80C00];
  v1[0] = 0x1E1A99690;
  v1[1] = 0x1E1A996D8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 2);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t _UIFeedbackEngineSupportsAll()
{
  if ((_UIInternalPreferenceUsesDefault_0(&_MergedGlobals_906, (uint64_t)CFSTR("EnableFeedbackVisualization")) & 1) != 0
    || !byte_1ECD761B4)
  {
    return (byte_1ECD761BC != 0) & ~_UIInternalPreferenceUsesDefault_0(&dword_1ECD761B8, (uint64_t)CFSTR("EnableStatisticOnAllDevices"));
  }
  else
  {
    return 1;
  }
}

uint64_t _UIUpdateCollectionViewForScrollDirection(uint64_t result, uint64_t a2)
{
  void *v3;
  BOOL v4;
  _BOOL8 v5;
  uint64_t v6;

  if (result)
  {
    v3 = (void *)result;
    result = dyld_program_sdk_at_least();
    if ((_DWORD)result)
    {
      v4 = a2 == 0;
      v5 = a2 == 0;
      v6 = !v4;
      objc_msgSend(v3, "_setDefaultAlwaysBounceVertical:horizontal:", v5, v6);
      objc_msgSend(v3, "_setContentScrollsAlongYAxis:", v5);
      return objc_msgSend(v3, "_setContentScrollsAlongXAxis:", v6);
    }
  }
  return result;
}

void sub_1852C1FF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1852C2E8C(SEL *a1, double a2)
{
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_1851F9080(0, (unint64_t *)&unk_1EDD827B8);
    swift_dynamicCast();
    v7 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BB8);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v10;
    swift_release();
    *v2 = v8;
  }
  return objc_msgSend(v7, *a1, a2);
}

uint64_t sub_1852C5478(uint64_t a1, SEL *a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), *a2);
  sub_186507654();

  v4 = sub_186507D68();
  swift_bridgeObjectRelease();
  return v4;
}

void sub_1852C6DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1852C6EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1852C72C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1852C7484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1852C76E8@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v4 = objc_msgSend(*(id *)(v2 + *a1), sel_indexPathForItemIdentifier_, sub_186507FB4());
  swift_unknownObjectRelease();
  if (v4)
  {
    sub_186506C28();

    v5 = sub_186506C4C();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = sub_186506C4C();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1852C7D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

id NSDiffableDataSourceSnapshot.indexOfSection(_:)()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  v2 = objc_msgSend(v1, sel_indexOfSectionIdentifier_, sub_186507FB4());

  swift_unknownObjectRelease();
  if (v2 == (id)sub_1865067FC())
    return 0;
  else
    return v2;
}

void sub_1852C8260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void std::vector<long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

id sub_1852C844C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a1;
  v8 = sub_1852C857C((uint64_t)v6, a4);

  return v8;
}

id sub_1852C857C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)(v2 + qword_1EDD8B090[0]), sel__numberOfItemsInSection_collectionView_, a2, a1);
}

id sub_1852C859C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;

  v4 = a3;
  v5 = a1;
  v6 = sub_1852C8624((uint64_t)v4);

  return v6;
}

id sub_1852C8624(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + qword_1EDD8B090[0]), sel__numberOfSectionsForCollectionView_, a1);
}

id sub_1852C864C(uint64_t a1, char a2, SEL *a3)
{
  uint64_t *v3;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  double v11;
  void *v13;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *v3;
  if (isUniquelyReferenced_nonNull_native)
  {
    v9 = *(void **)(v8 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v8 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_185167974();
    swift_dynamicCast();
    v9 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A58);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v13;
    swift_release();
    *v3 = v10;
  }
  v11 = 1.79769313e308;
  if ((a2 & 1) == 0)
    v11 = *(double *)&a1;
  return objc_msgSend(v9, *a3, v11);
}

id sub_1852C8994(uint64_t a1, uint64_t a2, _QWORD *a3, SEL *a4)
{
  uint64_t v4;
  void *v7;
  void *v8;
  id v9;

  v7 = *(void **)(v4 + *a3);
  v8 = (void *)sub_186506C1C();
  v9 = objc_msgSend(v7, *a4, v8, a1);

  return v9;
}

void sub_1852CA490(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1852CB278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1852CBDE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

CFIndex _UIQOSExpectComplexCommit(char *__src)
{
  BOOL v2;
  CFIndex result;
  uint64_t v4;
  char __dst[8];

  _MergedGlobals_1293 = 0;
  if (qword_1ECD82128 != -1)
    dispatch_once(&qword_1ECD82128, &__block_literal_global_5_13);
  if (dword_1ECD82138)
    v2 = 0;
  else
    v2 = word_1ECD82168 == 0;
  if (v2)
  {
    result = CFDictionaryGetCount((CFDictionaryRef)qword_1ECD82130);
    if (result)
    {
      v4 = _MergedGlobals_1293;
      if (!_MergedGlobals_1293)
      {
        v4 = mach_absolute_time();
        _MergedGlobals_1293 = v4;
      }
      qword_1ECD82148 = v4;
      qword_1ECD82150 = (unint64_t)((double)(unint64_t)qword_1ECD82140 * 0.5 + (double)v4);
      qword_1ECD82170 |= 1uLL;
      strncpy(__dst, __src, 8uLL);
      _tracepointArg4((uint64_t)&qword_1ECD82130);
      kdebug_trace();
      _beginInterval();
      return _waitCommitEnd();
    }
  }
  else
  {
    result = _adjustOptions(__src, 1);
    if ((_DWORD)result)
      return work_interval_instance_update();
  }
  return result;
}

void sub_1852CC58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void _UICollectionReusableViewCommonInit(void *a1)
{
  id v1;

  v1 = a1;
  if (dyld_program_sdk_at_least())
  {
    objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 1);
    objc_msgSend(v1, "_setHostsLayoutEngine:", 1);
  }

}

uint64_t sub_1852CCBF8@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  int v10;
  __int128 v12;
  _OWORD v13[2];

  v4 = *v2;
  v5 = *MEMORY[0x1E0DEEDD8];
  v6 = *(void **)((char *)v2 + *a1);
  v7 = (void *)sub_186506C1C();
  v8 = objc_msgSend(v6, sel_itemIdentifierForIndexPath_, v7);

  if (v8)
  {
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_1850F6908(&v12, v13);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD75B20);
  v9 = *(_QWORD *)((v5 & v4) + 0x58);
  v10 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, v10 ^ 1u, 1, v9);
}

id sub_1852CD0A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(id, char *, _QWORD *);
  id v12;
  void *v13;
  _QWORD v15[4];

  v7 = sub_186506C4C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(uint64_t (**)(id, char *, _QWORD *))(a1 + 32);
  sub_186506C28();
  v15[3] = swift_getObjectType();
  v15[0] = a4;
  swift_retain();
  v12 = a2;
  swift_unknownObjectRetain();
  v13 = (void *)v11(v12, v10, v15);

  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
  return v13;
}

id sub_1852CD1A0(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(id, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v16;

  v8 = sub_186506C4C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_186506C28();
  v12 = a3;
  v13 = a1;
  v14 = (void *)a5(v12, v11);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v14;
}

id sub_1852CD264(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1852CD1A0(a1, a2, a3, a4, (uint64_t (*)(id, char *))sub_1852CD270);
}

id sub_1852CD270(uint64_t a1, uint64_t a2)
{
  return sub_1852C8994(a1, a2, qword_1EDD8B090, (SEL *)&selRef__cellForItemAtIndexPath_collectionView_);
}

id sub_1852CD288(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v13;

  v5 = sub_186506C4C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1865074F8();
  sub_186506C28();
  v9 = a3;
  v10 = a1;
  v11 = sub_18548BF34((uint64_t)v9);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x186DC9E8C](a1, v6, a5);
}

void sub_1852CE180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852CF098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

double _UISetSizeValueForAxis(uint64_t a1, double a2, double a3, double a4)
{
  void *v5;
  void *v6;

  if (a1 != 2)
  {
    if (a1 == 1)
    {
      return a4;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGSize _UISetSizeValueForAxis(CGSize, CGFloat, UIAxis)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("_UICollectionLayoutHelpers.m"), 211, CFSTR("Unknown layout axis."));

    }
  }
  return a2;
}

double _UILeadingOffsetForInsetsAlongAxis(uint64_t a1, double a2, double a3)
{
  double result;
  void *v4;
  void *v5;

  if (a1 != 2)
  {
    if (a1 == 1)
    {
      return a3;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat _UILeadingOffsetForInsetsAlongAxis(NSDirectionalEdgeInsets, UIAxis)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UICollectionLayoutHelpers.m"), 490, CFSTR("Unknown axis"));

      return 0.0;
    }
  }
  return result;
}

double _UIAddPointValueForAxisFromPoint(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v7;

  v7 = _UIPointValueForAxis(a1, a4, a5);
  return a2 + _UISetPointValueForAxis(a1, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), v7);
}

_QWORD *std::vector<_UIAuxillarySolveResult>::reserve(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  _QWORD *v17;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      abort();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v17 = result + 2;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIAuxillarySolveResult>>(a2);
    v7 = *v2;
    v6 = (unint64_t)v2[1];
    if ((char *)v6 == *v2)
    {
      v12 = vdupq_n_s64(v6);
      v8 = &v4[v3];
    }
    else
    {
      v8 = &v4[v3];
      do
      {
        v9 = *(_OWORD *)(v6 - 48);
        v10 = *(_OWORD *)(v6 - 32);
        *((_QWORD *)v8 - 2) = *(_QWORD *)(v6 - 16);
        *((_OWORD *)v8 - 3) = v9;
        *((_OWORD *)v8 - 2) = v10;
        v11 = *(_QWORD *)(v6 - 8);
        *(_QWORD *)(v6 - 8) = 0;
        *((_QWORD *)v8 - 1) = v11;
        v8 -= 48;
        v6 -= 48;
      }
      while ((char *)v6 != v7);
      v12 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3];
    v15 = v12;
    v13 = v2[2];
    v2[2] = &v4[48 * v5];
    v16 = v13;
    v14 = v12.i64[0];
    return (_QWORD *)std::__split_buffer<_UIAuxillarySolveResult>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

void _UIRegionSolveResult::_UIRegionSolveResult(_UIRegionSolveResult *this, _NSRange a2, double a3, double a4, const _UIItemSolveResult *a5)
{
  NSUInteger length;
  NSUInteger location;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  length = a2.length;
  location = a2.location;
  v11 = *(_OWORD *)a5;
  v12 = *((_OWORD *)a5 + 1);
  v13 = *((_OWORD *)a5 + 3);
  *((_OWORD *)this + 4) = *((_OWORD *)a5 + 2);
  *((_OWORD *)this + 5) = v13;
  *((_OWORD *)this + 2) = v11;
  *((_OWORD *)this + 3) = v12;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<_UIAuxillarySolveResult>::__init_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>((char *)this + 96, *((__int128 **)a5 + 8), *((__int128 **)a5 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a5 + 9) - *((_QWORD *)a5 + 8)) >> 4));
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  std::vector<_UIAuxillarySolveResult>::__init_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>((char *)this + 120, *((__int128 **)a5 + 11), *((__int128 **)a5 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a5 + 12) - *((_QWORD *)a5 + 11)) >> 4));
  *((_QWORD *)this + 18) = *((id *)a5 + 14);
  *(_QWORD *)this = location;
  *((_QWORD *)this + 1) = length;
  *((double *)this + 2) = a3;
  *((double *)this + 3) = a4;
}

void sub_1852CFA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<_UIAuxillarySolveResult>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<_UIAuxillarySolveResult>::__vdeallocate(void **a1)
{
  id *v1;
  id *v3;
  void *v4;
  id *v5;

  v1 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 6;

        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1852D02E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  void *v58;
  void *v59;

  _Unwind_Resume(a1);
}

void sub_1852D09A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<_UIRegionSolveResult>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    std::__destroy_at[abi:nn180100]<_UIRegionSolveResult,0>((void **)(i - 152));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<_UIRegionSolveResult>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  __int128 v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  _QWORD v79[5];

  v5 = *a1;
  v6 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 / 152;
  v9 = *a1 + 152 * (v7 / 152);
  v11 = a1 + 2;
  v10 = a1[2];
  if (v6 >= v10)
  {
    v39 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - v5) >> 3) + 1;
    if (v39 > 0x1AF286BCA1AF286)
      abort();
    v41 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v10 - v5) >> 3);
    if (2 * v41 > v39)
      v39 = 2 * v41;
    if (v41 >= 0xD79435E50D7943)
      v42 = 0x1AF286BCA1AF286;
    else
      v42 = v39;
    v78 = v11;
    if (v42)
    {
      v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIRegionSolveResult>>(v42);
    }
    else
    {
      v44 = 0;
      v43 = 0;
    }
    v45 = (uint64_t)&v44[152 * v8];
    v74 = v44;
    v75 = (char *)v45;
    v76 = v45;
    v77 = &v44[152 * v43];
    if (v8 == v43)
    {
      if (v7 < 1)
      {
        if (v5 == a2)
          v47 = 1;
        else
          v47 = 2 * v8;
        v79[4] = v11;
        v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIRegionSolveResult>>(v47);
        v50 = (uint64_t)v75;
        v51 = v76;
        v52 = (uint64_t)v75;
        v53 = (uint64_t)&v48[152 * (v47 >> 2)];
        if ((char *)v76 != v75)
        {
          v53 = (uint64_t)&v48[152 * (v47 >> 2) + v76 - (_QWORD)v75];
          v54 = &v48[152 * (v47 >> 2)];
          v55 = (uint64_t)v75;
          do
          {
            v56 = *(_OWORD *)(v55 + 16);
            *(_OWORD *)v54 = *(_OWORD *)v55;
            *((_OWORD *)v54 + 1) = v56;
            v57 = *(_OWORD *)(v55 + 32);
            v58 = *(_OWORD *)(v55 + 48);
            v59 = *(_OWORD *)(v55 + 80);
            *((_OWORD *)v54 + 4) = *(_OWORD *)(v55 + 64);
            *((_OWORD *)v54 + 5) = v59;
            *((_OWORD *)v54 + 2) = v57;
            *((_OWORD *)v54 + 3) = v58;
            *((_QWORD *)v54 + 13) = 0;
            *((_QWORD *)v54 + 14) = 0;
            *((_QWORD *)v54 + 12) = 0;
            *((_OWORD *)v54 + 6) = *(_OWORD *)(v55 + 96);
            *((_QWORD *)v54 + 14) = *(_QWORD *)(v55 + 112);
            *(_QWORD *)(v55 + 96) = 0;
            *(_QWORD *)(v55 + 104) = 0;
            *(_QWORD *)(v55 + 112) = 0;
            *((_QWORD *)v54 + 15) = 0;
            *((_QWORD *)v54 + 16) = 0;
            *((_QWORD *)v54 + 17) = 0;
            *(_OWORD *)(v54 + 120) = *(_OWORD *)(v55 + 120);
            *((_QWORD *)v54 + 17) = *(_QWORD *)(v55 + 136);
            *(_QWORD *)(v55 + 120) = 0;
            *(_QWORD *)(v55 + 128) = 0;
            v60 = *(_QWORD *)(v55 + 144);
            *(_QWORD *)(v55 + 136) = 0;
            *(_QWORD *)(v55 + 144) = 0;
            *((_QWORD *)v54 + 18) = v60;
            v54 += 152;
            v55 += 152;
          }
          while (v54 != (char *)v53);
          v52 = v51;
        }
        v61 = v74;
        v62 = v77;
        v74 = v48;
        v75 = &v48[152 * (v47 >> 2)];
        v79[0] = v61;
        v79[1] = v50;
        v76 = v53;
        v77 = &v48[152 * v49];
        v79[2] = v52;
        v79[3] = v62;
        std::__split_buffer<_UIRegionSolveResult>::~__split_buffer((uint64_t)v79);
        v45 = v76;
      }
      else
      {
        v46 = v8 + 2;
        if (v8 >= -1)
          v46 = v8 + 1;
        v45 -= 152 * (v46 >> 1);
        v75 = (char *)v45;
        v76 = v45;
      }
    }
    std::construct_at[abi:nn180100]<_UIRegionSolveResult,_UIRegionSolveResult const&,_UIRegionSolveResult*>(v45, a3);
    v76 += 152;
    v63 = std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<_UIRegionSolveResult>,std::reverse_iterator<_UIRegionSolveResult*>,std::reverse_iterator<_UIRegionSolveResult*>,std::reverse_iterator<_UIRegionSolveResult*>>(v9, v9, *a1, *a1, (uint64_t)v75, (uint64_t)v75);
    v75 = (char *)v63;
    v64 = a1[1];
    v65 = v76;
    if (v64 != v9)
    {
      do
      {
        v66 = *(_OWORD *)(v9 + 16);
        *(_OWORD *)v65 = *(_OWORD *)v9;
        *(_OWORD *)(v65 + 16) = v66;
        v67 = *(_OWORD *)(v9 + 32);
        v68 = *(_OWORD *)(v9 + 48);
        v69 = *(_OWORD *)(v9 + 80);
        *(_OWORD *)(v65 + 64) = *(_OWORD *)(v9 + 64);
        *(_OWORD *)(v65 + 80) = v69;
        *(_OWORD *)(v65 + 32) = v67;
        *(_OWORD *)(v65 + 48) = v68;
        *(_QWORD *)(v65 + 104) = 0;
        *(_QWORD *)(v65 + 112) = 0;
        *(_QWORD *)(v65 + 96) = 0;
        *(_OWORD *)(v65 + 96) = *(_OWORD *)(v9 + 96);
        *(_QWORD *)(v65 + 112) = *(_QWORD *)(v9 + 112);
        *(_QWORD *)(v9 + 96) = 0;
        *(_QWORD *)(v9 + 104) = 0;
        *(_QWORD *)(v9 + 112) = 0;
        *(_QWORD *)(v65 + 120) = 0;
        *(_QWORD *)(v65 + 128) = 0;
        *(_QWORD *)(v65 + 136) = 0;
        *(_OWORD *)(v65 + 120) = *(_OWORD *)(v9 + 120);
        *(_QWORD *)(v65 + 136) = *(_QWORD *)(v9 + 136);
        *(_QWORD *)(v9 + 120) = 0;
        *(_QWORD *)(v9 + 128) = 0;
        v70 = *(_QWORD *)(v9 + 144);
        *(_QWORD *)(v9 + 136) = 0;
        *(_QWORD *)(v9 + 144) = 0;
        *(_QWORD *)(v65 + 144) = v70;
        v65 += 152;
        v9 += 152;
      }
      while (v9 != v64);
      v63 = (uint64_t)v75;
      v9 = a1[1];
    }
    v71 = *a1;
    *a1 = v63;
    a1[1] = v65;
    v72 = a1[2];
    a1[2] = (uint64_t)v77;
    v76 = v9;
    v77 = (char *)v72;
    v74 = (char *)v71;
    v75 = (char *)v71;
    std::__split_buffer<_UIRegionSolveResult>::~__split_buffer((uint64_t)&v74);
  }
  else if (v9 == v6)
  {
    std::construct_at[abi:nn180100]<_UIRegionSolveResult,_UIRegionSolveResult const&,_UIRegionSolveResult*>(*a1 + 152 * (v7 / 152), a3);
    a1[1] = v9 + 152;
  }
  else
  {
    v12 = v9 + 152;
    v13 = v6 - 152;
    v14 = a1[1];
    if (v6 >= 0x98)
    {
      do
      {
        v15 = *(_OWORD *)(v13 + 16);
        *(_OWORD *)v14 = *(_OWORD *)v13;
        *(_OWORD *)(v14 + 16) = v15;
        v16 = *(_OWORD *)(v13 + 32);
        v17 = *(_OWORD *)(v13 + 48);
        v18 = *(_OWORD *)(v13 + 80);
        *(_OWORD *)(v14 + 64) = *(_OWORD *)(v13 + 64);
        *(_OWORD *)(v14 + 80) = v18;
        *(_OWORD *)(v14 + 32) = v16;
        *(_OWORD *)(v14 + 48) = v17;
        *(_QWORD *)(v14 + 104) = 0;
        *(_QWORD *)(v14 + 112) = 0;
        *(_QWORD *)(v14 + 96) = 0;
        *(_OWORD *)(v14 + 96) = *(_OWORD *)(v13 + 96);
        *(_QWORD *)(v14 + 112) = *(_QWORD *)(v13 + 112);
        *(_QWORD *)(v13 + 96) = 0;
        *(_QWORD *)(v13 + 104) = 0;
        *(_QWORD *)(v13 + 112) = 0;
        *(_QWORD *)(v14 + 120) = 0;
        *(_QWORD *)(v14 + 128) = 0;
        *(_QWORD *)(v14 + 136) = 0;
        *(_OWORD *)(v14 + 120) = *(_OWORD *)(v13 + 120);
        *(_QWORD *)(v14 + 136) = *(_QWORD *)(v13 + 136);
        *(_QWORD *)(v13 + 120) = 0;
        *(_QWORD *)(v13 + 128) = 0;
        v19 = *(_QWORD *)(v13 + 144);
        *(_QWORD *)(v13 + 136) = 0;
        *(_QWORD *)(v13 + 144) = 0;
        *(_QWORD *)(v14 + 144) = v19;
        v14 += 152;
        v13 += 152;
      }
      while (v13 < v6);
    }
    a1[1] = v14;
    if (v6 != v12)
    {
      v20 = 0;
      v21 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - v12) >> 3);
      v22 = v5 + 152 * v21 + 152 * v8;
      v23 = -152 * v21;
      do
      {
        v24 = v22 + v20;
        v25 = v6 + v20;
        v26 = *(_OWORD *)(v22 + v20 - 152);
        *(_OWORD *)(v25 - 136) = *(_OWORD *)(v22 + v20 - 136);
        *(_OWORD *)(v25 - 152) = v26;
        v27 = *(_OWORD *)(v22 + v20 - 120);
        v28 = *(_OWORD *)(v22 + v20 - 104);
        v29 = *(_OWORD *)(v22 + v20 - 88);
        *(_OWORD *)(v25 - 72) = *(_OWORD *)(v22 + v20 - 72);
        *(_OWORD *)(v25 - 88) = v29;
        *(_OWORD *)(v25 - 104) = v28;
        *(_OWORD *)(v25 - 120) = v27;
        std::vector<_UIAuxillarySolveResult>::__vdeallocate((void **)(v6 + v20 - 56));
        *(_OWORD *)(v25 - 56) = *(_OWORD *)(v22 + v20 - 56);
        *(_QWORD *)(v25 - 40) = *(_QWORD *)(v22 + v20 - 40);
        *(_QWORD *)(v24 - 56) = 0;
        *(_QWORD *)(v24 - 48) = 0;
        *(_QWORD *)(v24 - 40) = 0;
        std::vector<_UIAuxillarySolveResult>::__vdeallocate((void **)(v6 + v20 - 32));
        *(_OWORD *)(v25 - 32) = *(_OWORD *)(v22 + v20 - 32);
        *(_QWORD *)(v25 - 16) = *(_QWORD *)(v22 + v20 - 16);
        *(_QWORD *)(v24 - 32) = 0;
        *(_QWORD *)(v24 - 24) = 0;
        v30 = *(_QWORD *)(v22 + v20 - 8);
        *(_QWORD *)(v24 - 16) = 0;
        *(_QWORD *)(v24 - 8) = 0;
        v31 = *(void **)(v6 + v20 - 8);
        *(_QWORD *)(v25 - 8) = v30;

        v20 -= 152;
      }
      while (v23 != v20);
    }
    v32 = a3;
    if (v9 <= a3)
      v32 = a3 + 152 * (a1[1] > a3);
    v33 = *(_OWORD *)(v32 + 16);
    *(_OWORD *)v9 = *(_OWORD *)v32;
    *(_OWORD *)(v9 + 16) = v33;
    v34 = (_OWORD *)(v5 + 152 * v8);
    v35 = *(_OWORD *)(v32 + 32);
    v36 = *(_OWORD *)(v32 + 48);
    v37 = *(_OWORD *)(v32 + 80);
    v34[4] = *(_OWORD *)(v32 + 64);
    v34[5] = v37;
    v34[2] = v35;
    v34[3] = v36;
    if (v9 != v32)
    {
      v38 = v5 + 152 * v8;
      std::vector<_UIAuxillarySolveResult>::__assign_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>(v38 + 96, *(__int128 **)(v32 + 96), *(__int128 **)(v32 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v32 + 104) - *(_QWORD *)(v32 + 96)) >> 4));
      std::vector<_UIAuxillarySolveResult>::__assign_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>(v38 + 120, *(__int128 **)(v32 + 120), *(__int128 **)(v32 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v32 + 128) - *(_QWORD *)(v32 + 120)) >> 4));
    }
    objc_storeStrong((id *)(v5 + 152 * v8 + 144), *(id *)(v32 + 144));
  }
}

void sub_1852D1238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v12 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<_UIAuxillarySolveResult>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t NSDiffableDataSourceSnapshot.itemIdentifiers(inSection:)()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  v2 = objc_msgSend(v1, sel_itemIdentifiersInSectionWithIdentifier_, sub_186507FB4());

  swift_unknownObjectRelease();
  sub_186507654();

  v3 = sub_186507D68();
  swift_bridgeObjectRelease();
  return v3;
}

void sub_1852D1F30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852D2334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1852D2460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852D2544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852D2934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1852D2A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1852D2C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1852D2DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852D2EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852D2FA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852D30C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852D39F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852D3D6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1852D3F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void NSDiffableDataSourceSnapshot.init()()
{
  type metadata accessor for NSDiffableDataSourceSnapshot.ImplWrapper();
}

uint64_t sub_1852D41C8()
{
  uint64_t *v0;
  uint64_t result;

  result = sub_1852D41E4();
  *v0 = result;
  return result;
}

uint64_t sub_1852D41E4()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone((Class)off_1E167D310), sel_init);
  return v0;
}

void sub_1852D609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

id _UIPinnedNonOverlappingFramesForContentFrameVisibleFrame(void *a1, char a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  double MinY;
  double v20;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  double v28;
  double v29;
  CGFloat MinX;
  BOOL v32;
  double MaxY;
  double v34;
  double v35;
  double v36;
  CGFloat v37;
  double v38;
  double v39;
  double v40;
  char v41;
  char v42;
  double MaxX;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  char v50;
  id *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  uint64_t v71;
  BOOL v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  char v84;
  id v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  uint64_t v94;
  _QWORD *v95;
  void *v96;
  void *v97;
  void *v98;
  double v99;
  CGFloat v100;
  double v101;
  CGFloat v102;
  double v103;
  CGFloat v104;
  double v105;
  CGFloat v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  void *v112;
  void *v113;
  void *v114;
  id v115;
  void *v116;
  double (**v119)(void *, uint64_t);
  id v120;
  _BYTE v121[32];
  _BYTE v122[32];
  unsigned int (**v123)(void *, uint64_t);
  uint64_t v124;
  double v125;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  void *v130;
  double v131;
  double rect;
  double *recta;
  CGFloat rectb;
  _QWORD v135[6];
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t);
  void (*v140)(uint64_t);
  id v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _QWORD v146[12];
  _QWORD aBlock[4];
  id v148;
  id v149;
  _QWORD v150[5];
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t, uint64_t);
  void (*v155)(uint64_t);
  id v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _BYTE v161[128];
  _BYTE v162[128];
  uint64_t v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;
  CGRect v173;
  CGRect v174;
  CGRect v175;
  CGRect v176;
  CGRect v177;
  CGRect v178;
  CGRect v179;
  CGRect v180;
  CGRect v181;
  CGRect v182;
  CGRect v183;
  CGRect v184;
  CGRect v185;
  CGRect v186;
  CGRect v187;
  CGRect v188;
  CGRect v189;
  CGRect v190;
  CGRect v191;
  CGRect v192;
  CGRect v193;
  CGRect v194;
  CGRect v195;
  CGRect v196;
  CGRect v197;
  CGRect v198;
  CGRect v199;
  CGRect v200;
  CGRect v201;
  CGRect v202;

  *(double *)&v121[16] = a9;
  *(double *)&v121[24] = a10;
  *(double *)v121 = a7;
  *(double *)&v121[8] = a8;
  *(double *)&v122[16] = a5;
  *(double *)&v122[24] = a6;
  *(double *)v122 = a3;
  *(double *)&v122[8] = a4;
  v163 = *MEMORY[0x1E0C80C00];
  v120 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v157 = 0u;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v11 = a1;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v157, v162, 16);
  if (!v12)
    goto LABEL_71;
  v13 = *(_QWORD *)v158;
  do
  {
    v14 = 0;
    do
    {
      if (*(_QWORD *)v158 != v13)
        objc_enumerationMutation(v11);
      v15 = *(_QWORD *)(*((_QWORD *)&v157 + 1) + 8 * v14);
      if (v15)
      {
        if ((*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFFELL) != 2)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSArray<_UICollectionLayoutFramesQueryResult *> * _Nonnull _UIPinnedNonOverlappingFramesForContentFrameVisibleFrame(NSArray<_UICollectionLayoutFramesQueryResult *> *const __strong _Nonnull, CGRect, CGRect, BOOL)");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "handleFailureInFunction:file:lineNumber:description:", v57, CFSTR("_UICollectionLayoutHelpers.m"), 1967, CFSTR("Invalid item: this only works with auxillary items. Please file a bug on UICollectionView."));

        }
        v125 = *(double *)(v15 + 64);
        v127 = *(double *)(v15 + 72);
        v129 = *(double *)(v15 + 88);
        rect = *(double *)(v15 + 80);
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSArray<_UICollectionLayoutFramesQueryResult *> * _Nonnull _UIPinnedNonOverlappingFramesForContentFrameVisibleFrame(NSArray<_UICollectionLayoutFramesQueryResult *> *const __strong _Nonnull, CGRect, CGRect, BOOL)");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "handleFailureInFunction:file:lineNumber:description:", v59, CFSTR("_UICollectionLayoutHelpers.m"), 1967, CFSTR("Invalid item: this only works with auxillary items. Please file a bug on UICollectionView."));

        v127 = 0.0;
        v129 = 0.0;
        rect = 0.0;
        v125 = 0.0;
      }
      if (dyld_program_sdk_at_least())
      {
        -[_UICollectionLayoutFramesQueryResult auxillaryItem]((_QWORD *)v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "boundarySupplementaryItem");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17)
          v18 = objc_msgSend(v17, "alignment");
        else
          v18 = 0;

      }
      else
      {
        v18 = 0;
      }
      if (!CGRectIntersectsRect(*(CGRect *)v121, *(CGRect *)v122))
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGRect _UIPinnedFrameForFrameWithContainerFrameVisibleFrame(CGRect, CGRect, CGRect, NSRectAlignment)");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        NSStringFromCGRect(*(CGRect *)v121);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        NSStringFromCGRect(*(CGRect *)v122);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v52, "handleFailureInFunction:file:lineNumber:description:", v53, CFSTR("_UICollectionLayoutHelpers.m"), 762, CFSTR("Attempted to lay out a pinned supplementary item whose frame %@ does not intersect with the visible bounds %@. Please file a bug against UICollectionView."), v54, v55);

      }
      v201.origin.x = v125;
      v201.origin.y = v127;
      v201.size.height = v129;
      v201.size.width = rect;
      v20 = v125;
      MinY = v127;
      if (CGRectContainsRect(*(CGRect *)v121, v201))
        goto LABEL_61;
      v164 = CGRectIntersection(*(CGRect *)v122, *(CGRect *)v121);
      x = v164.origin.x;
      y = v164.origin.y;
      width = v164.size.width;
      height = v164.size.height;
      v25 = v18 - 2 < 3 || v18 == 0;
      v26 = v18 - 6 < 3 && v18 - 2 > 2;
      v27 = v26 || v18 == 0;
      MinY = CGRectGetMinY(v164);
      v165.origin.x = v125;
      v165.origin.y = v127;
      v165.size.height = v129;
      v165.size.width = rect;
      v28 = CGRectGetMinY(v165);
      v166.origin.x = x;
      v166.origin.y = y;
      v166.size.width = width;
      v166.size.height = height;
      v29 = v28 - CGRectGetMinY(v166);
      if (((v18 == 0) | (v18 < 9) & (0x106u >> v18)) == 1 && v29 < 0.0)
      {
        v167.origin.x = v125;
        v167.origin.y = v127;
        v167.size.height = v129;
        v167.size.width = rect;
        MinX = CGRectGetMinX(v167);
      }
      else
      {
        v32 = ((0x70u >> v18) & 1) != 0 && v18 <= 8 || v18 == 0;
        MinX = v125;
        MinY = v127;
        if (v32)
        {
          MinX = v125;
          MinY = v127;
          if (v29 > 0.0)
          {
            v168.origin.x = v125;
            v168.origin.y = v127;
            v168.size.height = v129;
            v168.size.width = rect;
            MaxY = CGRectGetMaxY(v168);
            v169.origin.x = x;
            v169.origin.y = y;
            v169.size.width = width;
            v169.size.height = height;
            v26 = MaxY <= CGRectGetMaxY(v169);
            MinX = v125;
            MinY = v127;
            if (!v26)
            {
              v170.origin.x = v125;
              v170.origin.y = v127;
              v170.size.height = v129;
              v170.size.width = rect;
              MinX = CGRectGetMinX(v170);
              v171.origin.x = x;
              v171.origin.y = y;
              v171.size.width = width;
              v171.size.height = height;
              v34 = CGRectGetMaxY(v171);
              v172.origin.x = v125;
              v172.origin.y = v127;
              v172.size.height = v129;
              v172.size.width = rect;
              MinY = v34 - CGRectGetHeight(v172);
            }
          }
        }
      }
      v173.origin.x = MinX;
      v173.origin.y = MinY;
      v173.size.height = v129;
      v173.size.width = rect;
      v35 = CGRectGetMinY(v173);
      if (v35 >= CGRectGetMinY(*(CGRect *)v122))
      {
        v175.origin.x = MinX;
        v175.origin.y = MinY;
        v175.size.height = v129;
        v175.size.width = rect;
        v36 = CGRectGetMaxY(v175);
        if (v36 > CGRectGetMaxY(*(CGRect *)v122))
        {
          v176.origin.x = MinX;
          v176.origin.y = MinY;
          v176.size.height = v129;
          v176.size.width = rect;
          v37 = CGRectGetMinX(v176);
          v38 = CGRectGetMaxY(*(CGRect *)v122);
          v177.origin.x = MinX;
          v177.origin.y = MinY;
          v177.size.height = v129;
          v177.size.width = rect;
          MinY = v38 - CGRectGetHeight(v177);
          MinX = v37;
        }
      }
      else
      {
        v174.origin.x = MinX;
        v174.origin.y = MinY;
        v174.size.height = v129;
        v174.size.width = rect;
        MinX = CGRectGetMinX(v174);
        MinY = CGRectGetMinY(*(CGRect *)v122);
      }
      v178.origin.x = x;
      v178.origin.y = y;
      v178.size.width = width;
      v178.size.height = height;
      v20 = CGRectGetMinX(v178);
      v179.origin.x = v125;
      v179.origin.y = v127;
      v179.size.height = v129;
      v179.size.width = rect;
      v39 = CGRectGetMinX(v179);
      v180.origin.x = x;
      v180.origin.y = y;
      v180.size.width = width;
      v180.size.height = height;
      v40 = v39 - CGRectGetMinX(v180);
      v41 = !v25;
      if (v40 >= 0.0)
        v41 = 1;
      if ((v41 & 1) != 0)
      {
        v42 = !v27;
        if (v40 <= 0.0)
          v42 = 1;
        if ((v42 & 1) != 0)
          goto LABEL_55;
        v182.origin.x = MinX;
        v182.origin.y = MinY;
        v182.size.height = v129;
        v182.size.width = rect;
        MaxX = CGRectGetMaxX(v182);
        v183.origin.x = x;
        v183.origin.y = y;
        v183.size.width = width;
        v183.size.height = height;
        if (MaxX <= CGRectGetMaxX(v183))
        {
LABEL_55:
          v20 = MinX;
          goto LABEL_56;
        }
        v184.origin.x = x;
        v184.origin.y = y;
        v184.size.width = width;
        v184.size.height = height;
        v44 = CGRectGetMaxX(v184);
        v185.origin.x = MinX;
        v185.origin.y = MinY;
        v185.size.height = v129;
        v185.size.width = rect;
        v20 = v44 - CGRectGetWidth(v185);
      }
      v181.origin.x = MinX;
      v181.origin.y = MinY;
      v181.size.height = v129;
      v181.size.width = rect;
      MinY = CGRectGetMinY(v181);
LABEL_56:
      v186.origin.x = v20;
      v186.origin.y = MinY;
      v186.size.height = v129;
      v186.size.width = rect;
      v45 = CGRectGetMinX(v186);
      if (v45 >= CGRectGetMinX(*(CGRect *)v122))
      {
        v187.origin.x = v20;
        v187.origin.y = MinY;
        v187.size.height = v129;
        v187.size.width = rect;
        v47 = CGRectGetMaxX(v187);
        if (v47 <= CGRectGetMaxX(*(CGRect *)v122))
          goto LABEL_61;
        v48 = CGRectGetMaxX(*(CGRect *)v122);
        v188.origin.x = v20;
        v188.origin.y = MinY;
        v188.size.height = v129;
        v188.size.width = rect;
        v46 = v48 - CGRectGetWidth(v188);
      }
      else
      {
        v46 = CGRectGetMinX(*(CGRect *)v122);
      }
      v189.origin.x = v20;
      v189.origin.y = MinY;
      v189.size.height = v129;
      v189.size.width = rect;
      MinY = CGRectGetMinY(v189);
      v20 = v46;
LABEL_61:
      if (v15)
      {
        v49 = vabdd_f64(v127, MinY) > 0.001;
        v50 = vabdd_f64(v125, v20) > 0.001 || v49;
        v51 = -[_UICollectionLayoutFramesQueryResult initWithFrame:adjustedForPinning:index:zIndex:resultKind:item:auxillaryKind:supplementaryEnrollmentIdentifier:]((id *)[_UICollectionLayoutFramesQueryResult alloc], v50, *(void **)(v15 + 16), *(void **)(v15 + 24), *(void **)(v15 + 32), *(void **)(v15 + 40), *(void **)(v15 + 56), *(void **)(v15 + 48), v20, MinY, rect, v129);
      }
      else
      {
        v51 = 0;
      }
      objc_msgSend(v120, "addObject:", v51);

      ++v14;
    }
    while (v12 != v14);
    v60 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v157, v162, 16);
    v12 = v60;
  }
  while (v60);
LABEL_71:

  v61 = objc_msgSend(v11, "count");
  if (v61 <= 1)
    goto LABEL_127;
  v62 = dyld_program_sdk_at_least();
  v63 = 0;
  do
  {
    objc_msgSend(v120, "objectAtIndexedSubscript:", v63);
    recta = (double *)objc_claimAutoreleasedReturnValue();
    -[_UICollectionLayoutFramesQueryResult auxillaryItem](recta);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "boundarySupplementaryItem");
    v130 = (void *)objc_claimAutoreleasedReturnValue();

    v65 = objc_msgSend(v130, "alignment");
    v66 = objc_msgSend(v130, "zIndex");
    if (recta)
    {
      v68 = recta[8];
      v67 = recta[9];
      v69 = recta[10];
      v70 = recta[11];
    }
    else
    {
      v67 = 0.0;
      v69 = 0.0;
      v70 = 0.0;
      v68 = 0.0;
    }
    v71 = 0;
    do
    {
      if (v63 == v71)
      {
        v72 = 0;
      }
      else
      {
        objc_msgSend(v120, "objectAtIndexedSubscript:", v71);
        v73 = (_QWORD *)objc_claimAutoreleasedReturnValue();
        -[_UICollectionLayoutFramesQueryResult auxillaryItem](v73);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "boundarySupplementaryItem");
        v75 = (void *)objc_claimAutoreleasedReturnValue();

        v76 = objc_msgSend(v75, "alignment");
        v77 = objc_msgSend(v75, "zIndex");
        if (v73)
        {
          v78 = v73[8];
          v79 = v73[9];
          v80 = v73[10];
          v81 = v73[11];
        }
        else
        {
          v79 = 0;
          v80 = 0;
          v81 = 0;
          v78 = 0;
        }
        v72 = 0;
        if (v66 == v77)
          v82 = 0;
        else
          v82 = v62;
        v83 = a2;
        if (v65 == v76)
          v83 = 0;
        if ((v82 & 1) == 0 && (v83 & 1) == 0)
        {
          v190.origin.x = v68;
          v190.origin.y = v67;
          v190.size.width = v69;
          v190.size.height = v70;
          v72 = CGRectIntersectsRect(v190, *(CGRect *)&v78);
        }

      }
      ++v71;
    }
    while (v71 < v61 && !v72);

    v84 = ++v63 >= v61 || v72;
  }
  while ((v84 & 1) == 0);
  if (!v72)
  {
LABEL_127:
    v116 = v120;
    v115 = v120;
    goto LABEL_128;
  }
  v151 = 0;
  v152 = &v151;
  v153 = 0x3032000000;
  v154 = __Block_byref_object_copy__30;
  v155 = __Block_byref_object_dispose__30;
  v85 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v86 = MEMORY[0x1E0C809B0];
  v156 = v85;
  v150[0] = MEMORY[0x1E0C809B0];
  v150[1] = 3221225472;
  v150[2] = ___UIPinnedNonOverlappingFramesForContentFrameVisibleFrame_block_invoke;
  v150[3] = &unk_1E16B8D30;
  v150[4] = &v151;
  objc_msgSend(v120, "enumerateObjectsUsingBlock:", v150);
  aBlock[0] = v86;
  aBlock[1] = 3221225472;
  aBlock[2] = ___UIPinnedNonOverlappingFramesForContentFrameVisibleFrame_block_invoke_3;
  aBlock[3] = &unk_1E16B8D78;
  v87 = v120;
  v148 = v87;
  v149 = &__block_literal_global_100;
  v119 = (double (**)(void *, uint64_t))_Block_copy(aBlock);
  v146[0] = MEMORY[0x1E0C809B0];
  v146[1] = 3221225472;
  v146[2] = ___UIPinnedNonOverlappingFramesForContentFrameVisibleFrame_block_invoke_4;
  v146[3] = &__block_descriptor_96_e8_B16__0Q8l;
  v146[4] = *(_QWORD *)v121;
  v146[5] = *(_QWORD *)&v121[8];
  v146[6] = *(_QWORD *)&v121[16];
  v146[7] = *(_QWORD *)&v121[24];
  v146[8] = *(_QWORD *)v122;
  v146[9] = *(_QWORD *)&v122[8];
  v146[10] = *(_QWORD *)&v122[16];
  v146[11] = *(_QWORD *)&v122[24];
  v123 = (unsigned int (**)(void *, uint64_t))_Block_copy(v146);
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v88 = objc_msgSend(&unk_1E1A92C18, "countByEnumeratingWithState:objects:count:", &v142, v161, 16);
  if (!v88)
    goto LABEL_126;
  v124 = *(_QWORD *)v143;
  while (2)
  {
    v126 = v88;
    v89 = 0;
    while (2)
    {
      if (*(_QWORD *)v143 != v124)
        objc_enumerationMutation(&unk_1E1A92C18);
      v90 = objc_msgSend(*(id *)(*((_QWORD *)&v142 + 1) + 8 * v89), "integerValue");
      v191.origin.x = v119[2](v119, v90);
      rectb = v191.size.width;
      v91 = v191.origin.x;
      v92 = v191.origin.y;
      v93 = v191.size.height;
      if (!CGRectIsEmpty(v191) && v123[2](v123, v90))
      {
        v94 = 0;
        v128 = v92;
        v131 = v91;
        while (2)
        {
          objc_msgSend(v87, "objectAtIndexedSubscript:", v94);
          v95 = (_QWORD *)objc_claimAutoreleasedReturnValue();
          if (___UIPinnedNonOverlappingFramesForContentFrameVisibleFrame_block_invoke_2((uint64_t)v95, v95, v90))
            goto LABEL_121;
          v96 = (void *)v152[5];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v94);
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v96, "objectForKeyedSubscript:", v97);
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v98, "CGRectValue");
          v100 = v99;
          v102 = v101;
          v104 = v103;
          v106 = v105;

          v192.origin.x = v100;
          v192.origin.y = v102;
          v192.size.width = v104;
          v192.size.height = v106;
          v202.origin.x = v91;
          v202.origin.y = v92;
          v202.size.width = rectb;
          v202.size.height = v93;
          if (!CGRectIntersectsRect(v192, v202))
            goto LABEL_121;
          if ((v90 & 8) != 0)
          {
            v193.origin.x = v91;
            v193.origin.y = v92;
            v193.size.width = rectb;
            v193.size.height = v93;
            v108 = CGRectGetMinX(v193);
            v194.origin.x = v100;
            v194.origin.y = v102;
            v194.size.width = v104;
            v194.size.height = v106;
            v107 = v108 - CGRectGetWidth(v194);
            goto LABEL_116;
          }
          if ((v90 & 1) != 0)
          {
            v195.origin.x = v91;
            v195.origin.y = v92;
            v195.size.width = rectb;
            v195.size.height = v93;
            v109 = CGRectGetMaxY(v195);
          }
          else
          {
            if ((v90 & 4) == 0)
            {
              if ((v90 & 2) != 0)
              {
                v200.origin.x = v91;
                v200.origin.y = v92;
                v200.size.width = rectb;
                v200.size.height = v93;
                v107 = CGRectGetMaxX(v200);
              }
              else
              {
                v107 = v100;
              }
LABEL_116:
              v109 = v102;
LABEL_120:
              v198.origin.x = v100;
              v198.origin.y = v102;
              v198.size.width = v104;
              v198.size.height = v106;
              v111 = CGRectGetWidth(v198);
              v199.origin.x = v100;
              v199.origin.y = v102;
              v199.size.width = v104;
              v199.size.height = v106;
              objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGRect:", v107, v109, v111, CGRectGetHeight(v199));
              v112 = (void *)objc_claimAutoreleasedReturnValue();
              v113 = (void *)v152[5];
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v94);
              v114 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v113, "setObject:forKeyedSubscript:", v112, v114);

              v92 = v128;
              v91 = v131;

LABEL_121:
              if (v61 == ++v94)
                goto LABEL_124;
              continue;
            }
            v196.origin.x = v91;
            v196.origin.y = v92;
            v196.size.width = rectb;
            v196.size.height = v93;
            v110 = CGRectGetMinY(v196);
            v197.origin.x = v100;
            v197.origin.y = v102;
            v197.size.width = v104;
            v197.size.height = v106;
            v109 = v110 - CGRectGetHeight(v197);
          }
          break;
        }
        v107 = v100;
        goto LABEL_120;
      }
LABEL_124:
      if (++v89 != v126)
        continue;
      break;
    }
    v88 = objc_msgSend(&unk_1E1A92C18, "countByEnumeratingWithState:objects:count:", &v142, v161, 16);
    if (v88)
      continue;
    break;
  }
LABEL_126:
  v136 = 0;
  v137 = &v136;
  v138 = 0x3032000000;
  v139 = __Block_byref_object_copy__30;
  v140 = __Block_byref_object_dispose__30;
  v141 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v135[0] = MEMORY[0x1E0C809B0];
  v135[1] = 3221225472;
  v135[2] = ___UIPinnedNonOverlappingFramesForContentFrameVisibleFrame_block_invoke_467;
  v135[3] = &unk_1E16B8DC0;
  v135[4] = &v151;
  v135[5] = &v136;
  objc_msgSend(v87, "enumerateObjectsUsingBlock:", v135);
  v115 = (id)v137[5];
  _Block_object_dispose(&v136, 8);

  _Block_object_dispose(&v151, 8);
  v116 = v120;
LABEL_128:

  return v115;
}

void sub_1852D70BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

uint64_t _processInsertedIndexes(int a1, unsigned int a2, uint16x8_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  int v27;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  if (a3)
  {
    if (a4)
      goto LABEL_3;
LABEL_43:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _processInsertedIndexes(const _UIMapIndex, const _UIMapIndex, _UIFastIndexSet *const __strong, _UIMapIndex *, _UIMapIndex *, _UIMapIndex *)");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("_UIDataSourceBatchUpdateMap.m"), 489, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("moveSourceToDestMap != NULL"));

    if (a5)
      goto LABEL_4;
    goto LABEL_44;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _processInsertedIndexes(const _UIMapIndex, const _UIMapIndex, _UIFastIndexSet *const __strong, _UIMapIndex *, _UIMapIndex *, _UIMapIndex *)");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "handleFailureInFunction:file:lineNumber:description:", v30, CFSTR("_UIDataSourceBatchUpdateMap.m"), 488, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("insertedIndexesIncludingMoves != nil"));

  if (!a4)
    goto LABEL_43;
LABEL_3:
  if (a5)
    goto LABEL_4;
LABEL_44:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _processInsertedIndexes(const _UIMapIndex, const _UIMapIndex, _UIFastIndexSet *const __strong, _UIMapIndex *, _UIMapIndex *, _UIMapIndex *)");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "handleFailureInFunction:file:lineNumber:description:", v34, CFSTR("_UIDataSourceBatchUpdateMap.m"), 490, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("oldIndexMap != NULL"));

LABEL_4:
  v12 = a2;
  if (!a6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _processInsertedIndexes(const _UIMapIndex, const _UIMapIndex, _UIFastIndexSet *const __strong, _UIMapIndex *, _UIMapIndex *, _UIMapIndex *)");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:description:", v36, CFSTR("_UIDataSourceBatchUpdateMap.m"), 491, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("newIndexMap != NULL"));

  }
  v13 = -[_UIFastIndexSet firstIndex]((uint64_t)a3);
  if (v13 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v15 = v13;
    if (!HIDWORD(v13))
    {
      v14 = v13;
      if (!v12)
        goto LABEL_23;
      goto LABEL_11;
    }
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "handleFailureInFunction:file:lineNumber:description:", v38, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v15);

  }
  v14 = 0xFFFFFFFFLL;
  if (v12)
  {
LABEL_11:
    v16 = 0;
    v17 = 0;
    do
    {
      if (v16 == v14)
      {
        *(_DWORD *)(a6 + 4 * v16) = -1;
        ++v17;
        if (!a3)
        {
          LODWORD(v19) = 0;
LABEL_18:
          v14 = v19;
          goto LABEL_19;
        }
        v18 = -[_UIFastIndexSet indexGreaterThanOrEqualToIndex:](a3, v16 + 1);
        if (v18 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v19 = v18;
          if (!HIDWORD(v18))
            goto LABEL_18;
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIMapIndex _UIMapIndexFromNSInteger(const NSInteger)");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "handleFailureInFunction:file:lineNumber:description:", v39, CFSTR("_UIDataSourceBatchUpdateMap.h"), 28, CFSTR("NSInteger index is negative or too large: %ld"), v19);

        }
        v14 = 0xFFFFFFFFLL;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v16) = v17;
      }
LABEL_19:
      ++v16;
    }
    while (v12 != v16);
  }
LABEL_23:
  if (a1)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *(_DWORD *)(a5 + 4 * v20);
      if (v23 != -1)
        break;
      v27 = *(_DWORD *)(a4 + 4 * v20);
      if (v27 != -1)
        goto LABEL_35;
LABEL_36:
      if (++v20 == a1)
        return v22 & 1;
    }
    if (v21 >= v12)
      goto LABEL_39;
    v24 = 0;
    do
      v25 = *(_DWORD *)(a6 + 4 * v21 + 4 * v24++);
    while (v24 + v21 < v12 && v25 == -1);
    LODWORD(v21) = v21 + v24;
    if (v25 == -1)
    {
      v21 = v21;
LABEL_39:
      v22 = 1;
      goto LABEL_36;
    }
    v27 = v25 + v23;
    v21 = v21;
LABEL_35:
    *(_DWORD *)(a5 + 4 * v20) = v27;
    goto LABEL_36;
  }
  v22 = 0;
  return v22 & 1;
}

id sub_1852D81B8(uint64_t a1, SEL *a2)
{
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_1851F9080(0, (unint64_t *)&unk_1EDD827B8);
    swift_dynamicCast();
    v7 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74BB8);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v10;
    swift_release();
    *v2 = v8;
  }
  return objc_msgSend(v7, *a2, a1);
}

void sub_1852D8320(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)sub_185659CA8((unint64_t *)&unk_1EDD82AA8, (uint64_t)off_1E167AF80, (uint64_t *)&unk_1ECD748F0);
  v6 = v5;
  if (a2)
  {
    v7 = (id)sub_1865074D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v5, *a3, v7);

}

void sub_1852D8418(uint64_t a1, char a2, SEL *a3)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    swift_retain();
    v6 = (void *)sub_185659CA8((unint64_t *)&unk_1EDD82AA8, (uint64_t)off_1E167AF80, (uint64_t *)&unk_1ECD748F0);
    v7 = *(void **)(v5 + 16);
    v8 = v6;
    v9 = v7;
    swift_release();
    objc_msgSend(v9, sel_copy);

    sub_186507B1C();
    swift_unknownObjectRelease();
    swift_dynamicCast();
    v10 = (void *)v4[5];
    objc_msgSend(v8, *a3, v10);

    swift_release();
  }
  else
  {
    v11 = (void *)sub_185659CA8((unint64_t *)&unk_1EDD82AA8, (uint64_t)off_1E167AF80, (uint64_t *)&unk_1ECD748F0);
    v12 = *(void **)(v5 + 16);
    v13 = v11;
    v14 = v12;
    swift_release();
    objc_msgSend(v14, sel_copy);

    sub_186507B1C();
    swift_unknownObjectRelease();
    swift_dynamicCast();
    v15 = (void *)v4[5];
    objc_msgSend(v13, *a3, v15);

  }
  free(v4);
}

NSString *__cdecl NSStringFromCGPoint(CGPoint point)
{
  return (NSString *)(id)CFStringCreateWithFormat(0, 0, CFSTR("{%.*g, %.*g}"), 17, *(_QWORD *)&point.x, 17, *(_QWORD *)&point.y);
}

__CFString *_PhaseDescription(uint64_t a1)
{
  if (a1 > 7)
    return CFSTR("Unknown");
  else
    return _PhaseDescription_touchPhases[a1];
}

double _UITouchForceFromTouches(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t i;
  double v8;
  double v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v12;
      v6 = 0.0;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v12 != v5)
            objc_enumerationMutation(v2);
          objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "force", (_QWORD)v11);
          v6 = v6 + v8;
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v4);
    }
    else
    {
      v6 = 0.0;
    }

    v9 = v6 / (double)(unint64_t)objc_msgSend(v2, "count");
  }
  else
  {
    v9 = 0.0;
  }

  return v9;
}

uint64_t _UIVibrancyStyleConvertToPublic(uint64_t a1)
{
  if ((unint64_t)(a1 - 101) > 0x13)
    return 101;
  else
    return qword_186678F20[a1 - 101];
}

void sub_1852DF8B4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1852DFFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1852E0F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __workaround10030904InvokeWithTarget_block_invoke(uint64_t a1)
{
  IMP v2;
  void *v3;
  const char *v4;
  id AssociatedObject;

  PushNextClassForSettingIMP(*(void **)(a1 + 32), *(SEL *)(a1 + 48));
  v2 = CurrentOrginalSettingIMP(*(void **)(a1 + 32), *(const char **)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "setTarget:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "invokeUsingIMP:", v2);
  v3 = *(void **)(a1 + 32);
  v4 = *(const char **)(a1 + 48);
  AssociatedObject = objc_getAssociatedObject(v3, &unk_1ECD7E182);
  return objc_msgSend((id)objc_msgSend(AssociatedObject, "objectForKey:", NSStringFromSelector(v4)), "removeLastObject");
}

void _UICollectionViewCompositionalLayoutCommonInit(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  *(_BYTE *)(a1 + 288) |= 1u;
  *(_BYTE *)(a1 + 305) = 1;
  v7 = objc_msgSend(a2, "copy");
  v8 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v7;

  v9 = objc_msgSend(a3, "copy");
  v10 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v9;

  if (a4)
  {
    v11 = (void *)objc_msgSend(a4, "copy");
  }
  else
  {
    +[UICollectionViewCompositionalLayoutConfiguration defaultConfiguration](UICollectionViewCompositionalLayoutConfiguration, "defaultConfiguration");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v12 = v11;
  objc_storeStrong((id *)(a1 + 272), v11);

}

uint64_t UICollectionViewLayoutCommonInit(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t result;
  char v15;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v2;

  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;

  v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v7 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;

  v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v9 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;

  v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v11 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;

  v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v13 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;

  result = objc_msgSend((id)a1, "flipsHorizontallyInOppositeLayoutDirection");
  if ((_DWORD)result)
    v15 = 8;
  else
    v15 = 0;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a1 + 240) & 0xF7 | v15;
  return result;
}

void UICollectionViewFlowLayoutCommonInit(uint64_t a1)
{
  void *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD v14[3];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 280) = 0x4024000000000000;
  *(_QWORD *)(a1 + 288) = 0x4024000000000000;
  *(int64x2_t *)(a1 + 296) = vdupq_n_s64(0x4049000000000000uLL);
  *(_DWORD *)(a1 + 276) |= 0x200u;
  *(_QWORD *)(a1 + 544) = 0;
  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (id)a1;
  objc_msgSend(v1, "numberWithInt:", 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v3;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v15[1] = v4;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v15[2] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v14[0] = CFSTR("UIFlowLayoutCommonRowHorizontalAlignmentKey");
  v14[1] = CFSTR("UIFlowLayoutLastRowHorizontalAlignmentKey");
  v14[2] = CFSTR("UIFlowLayoutRowVerticalAlignmentKey");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjects:forKeys:", v6, v7);
  v9 = (void *)v2[59];
  v2[59] = v8;

  v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v11 = (void *)v2[64];
  v2[64] = v10;

  v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v13 = (void *)v2[65];
  v2[65] = v12;

}

id _UIContentUnavailableConstantsForTraitCollection(void *a1)
{
  uint64_t v1;
  void *v2;
  __objc2_class *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = objc_msgSend(a1, "userInterfaceIdiom");
  if (v1 == -1)
  {
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v1 = objc_msgSend(v2, "userInterfaceIdiom");

  }
  switch(v1)
  {
    case 0:
      v3 = UIContentUnavailableConstants_Phone;
      goto LABEL_11;
    case 1:
      v3 = UIContentUnavailableConstants_Pad;
      goto LABEL_11;
    case 2:
    case 8:
      v3 = UIContentUnavailableConstants_TV;
      goto LABEL_11;
    case 3:
      v3 = UIContentUnavailableConstants_CarPlay;
      goto LABEL_11;
    case 4:
      v3 = UIContentUnavailableConstants_Watch;
      goto LABEL_11;
    case 5:
      v3 = UIContentUnavailableConstants_Mac;
LABEL_11:
      -[__objc2_class sharedConstants](v3, "sharedConstants");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id<UIContentUnavailableConstants>  _Nonnull _UIContentUnavailableConstantsForTraitCollection(UITraitCollection *__strong _Nonnull)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIContentUnavailableConstants.m"), 38, CFSTR("UIUserInterfaceIdiom (%ld) is not supported by UIContentUnavailableConstants"), v1);

      v6 = 0;
      break;
  }
  return v6;
}

void _UIButtonConfigurationCopy(void *a1, void *a2, int a3, int a4)
{
  id *v7;
  id *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  unsigned int v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  unsigned int v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  id *v45;

  v45 = a1;
  v7 = a2;
  v8 = v7;
  if (a3)
    objc_storeStrong(v45 + 1, v7[1]);
  v9 = (_DWORD)v45[12] & 0xFFFFC7FF | (((*((_DWORD *)v8 + 24) >> 11) & 7) << 11);
  *((_DWORD *)v45 + 24) = v9;
  v10 = v9 & 0xFFFE3FFF | (((*((_DWORD *)v8 + 24) >> 14) & 7) << 14);
  *((_DWORD *)v45 + 24) = v10;
  *((_DWORD *)v45 + 24) = v10 & 0xFFF3FFFF | (((*((_DWORD *)v8 + 24) >> 18) & 3) << 18);
  v11 = objc_msgSend(v8[25], "copy");
  v12 = v45[25];
  v45[25] = (id)v11;

  v45[29] = v8[29];
  v13 = objc_msgSend(v8[13], "copy");
  v14 = v45[13];
  v45[13] = (id)v13;

  v45[14] = v8[14];
  v15 = (_DWORD)v45[12] & 0xFFFFFFCF | (16 * ((*((_DWORD *)v8 + 24) >> 4) & 3));
  *((_DWORD *)v45 + 24) = v15;
  *((_DWORD *)v45 + 24) = v15 & 0xFFFFFFF0 | (_DWORD)v8[12] & 0xF;
  objc_storeStrong(v45 + 16, v8[16]);
  objc_storeStrong(v45 + 15, v8[15]);
  objc_storeStrong(v45 + 17, v8[17]);
  v16 = objc_msgSend(v8[18], "copy");
  v17 = v45[18];
  v45[18] = (id)v16;

  v18 = objc_msgSend(v8[19], "copy");
  v19 = v45[19];
  v45[19] = (id)v18;

  *((_DWORD *)v45 + 24) = (_DWORD)v45[12] & 0xFFFFFFBF | (((*((_DWORD *)v8 + 24) >> 6) & 1) << 6);
  v20 = objc_msgSend(v8[20], "copy");
  v21 = v45[20];
  v45[20] = (id)v20;

  v22 = objc_msgSend(v8[21], "copy");
  v23 = v45[21];
  v45[21] = (id)v22;

  v24 = objc_msgSend(v8[22], "copy");
  v25 = v45[22];
  v45[22] = (id)v24;

  v26 = objc_msgSend(v8[23], "copy");
  v27 = v45[23];
  v45[23] = (id)v26;

  v28 = objc_msgSend(v8[24], "copy");
  v29 = v45[24];
  v45[24] = (id)v28;

  v30 = (_DWORD)v45[12] & 0xFFFFFF7F | (((*((_DWORD *)v8 + 24) >> 7) & 1) << 7);
  *((_DWORD *)v45 + 24) = v30;
  v31 = *((_DWORD *)v8 + 24);
  if ((v31 & 0x80) != 0)
  {
    v32 = *((_OWORD *)v8 + 16);
    *((_OWORD *)v45 + 15) = *((_OWORD *)v8 + 15);
    *((_OWORD *)v45 + 16) = v32;
  }
  else
  {
    v30 = v30 & 0xFFFFF8FF | (((v31 >> 8) & 7) << 8);
    *((_DWORD *)v45 + 24) = v30;
  }
  v45[26] = v8[26];
  v45[27] = v8[27];
  v45[28] = v8[28];
  v33 = v30 & 0xFCFFFFFF | ((HIBYTE(*((_DWORD *)v8 + 24)) & 3) << 24);
  *((_DWORD *)v45 + 24) = v33;
  v34 = v33 & 0xFBFFFFFF | (((*((_DWORD *)v8 + 24) >> 26) & 1) << 26);
  *((_DWORD *)v45 + 24) = v34;
  *((_DWORD *)v45 + 24) = v34 & 0xFFFDFFFF | (((*((_DWORD *)v8 + 24) >> 17) & 1) << 17);
  if (a4)
  {
    v35 = objc_msgSend(v8[2], "copy");
    v36 = v45[2];
    v45[2] = (id)v35;

    *((_DWORD *)v45 + 24) = (_DWORD)v45[12] & 0xFFEFFFFF | (((*((_DWORD *)v8 + 24) >> 20) & 1) << 20);
    v37 = objc_msgSend(v8[3], "copy");
    v38 = v45[3];
    v45[3] = (id)v37;

    *((_DWORD *)v45 + 24) = (_DWORD)v45[12] & 0xFFDFFFFF | (((*((_DWORD *)v8 + 24) >> 21) & 1) << 21);
    v39 = objc_msgSend(v8[4], "copy");
    v40 = v45[4];
    v45[4] = (id)v39;

    objc_storeStrong(v45 + 5, v8[5]);
    v41 = objc_msgSend(v8[6], "copy");
    v42 = v45[6];
    v45[6] = (id)v41;

    objc_storeStrong(v45 + 7, v8[7]);
    v43 = objc_msgSend(v8[8], "copy");
    v44 = v45[8];
    v45[8] = (id)v43;

    v45[10] = v8[10];
    v45[11] = v8[11];
    *((_DWORD *)v45 + 24) = (_DWORD)v45[12] & 0xFF3FFFFF | (((*((_DWORD *)v8 + 24) >> 22) & 3) << 22);
  }

}

uint64_t _UIButtonStatesFromButton(void *a1)
{
  id v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "state");
  v3 = v2 & 1;
  if ((v2 & 2) != 0 || objc_msgSend(v1, "tintAdjustmentMode") == 2)
    v3 |= 2uLL;
  v4 = v3 | v2 & 0xC;
  if (objc_msgSend(v1, "isHeld"))
    v4 |= 0x10uLL;

  return v4;
}

uint64_t _UIButtonCanInferIndicator()
{
  if (qword_1ECD7E148 != -1)
    dispatch_once(&qword_1ECD7E148, &__block_literal_global_268);
  return _MergedGlobals_1080;
}

id fallbackForegroundColorForTraitCollection(void *a1)
{
  if (objc_msgSend(a1, "userInterfaceIdiom") == 6)
    +[UIColor whiteColor](UIColor, "whiteColor");
  else
    +[UIColor tintColor](UIColor, "tintColor");
  return (id)objc_claimAutoreleasedReturnValue();
}

void _getDefaultTitleAndSubtitleFontStylesForButtonSize(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, void *a5)
{
  id v9;
  const UIFontTextStyle *v10;
  const UIFontTextStyle *v11;
  UIFontTextStyle v12;
  __CFString **v13;
  __CFString **v14;
  uint64_t v15;
  NSString *v16;
  __CFString *v17;
  __CFString *v18;
  id v19;

  v9 = a5;
  v19 = v9;
  if ((unint64_t)(a1 - 1) >= 2)
  {
    if (a1)
    {
      v15 = objc_msgSend(v9, "userInterfaceIdiom");
      v11 = (const UIFontTextStyle *)UIFontTextStyleShortBody;
      if (v15 == 6)
        v11 = &UIFontTextStyleTitle3;
    }
    else if (objc_msgSend(v9, "userInterfaceIdiom") == 6)
    {
      v11 = &UIFontTextStyleHeadline;
    }
    else
    {
      v11 = (const UIFontTextStyle *)UIFontTextStyleShortBody;
    }
    v12 = *v11;
    v13 = UIFontTextStyleShortFootnote;
    v14 = UIFontTextStyleShortEmphasizedBody;
  }
  else
  {
    if (objc_msgSend(v9, "userInterfaceIdiom") == 6)
      v10 = &UIFontTextStyleCallout;
    else
      v10 = (const UIFontTextStyle *)UIFontTextStyleShortSubheadline;
    v12 = *v10;
    v13 = UIFontTextStyleShortCaption1;
    v14 = UIFontTextStyleShortEmphasizedSubhead;
  }
  v16 = v12;
  v17 = *v14;
  v18 = *v13;
  if (a2)
    *a2 = objc_retainAutorelease(v16);
  if (a3)
    *a3 = objc_retainAutorelease(v18);
  if (a4)
    *a4 = objc_retainAutorelease(v17);

}

id _UIButtonUpdateStringAttributes(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (objc_msgSend(v7, "length"))
  {
    v11 = (void *)objc_msgSend(v7, "mutableCopy");
    v12 = objc_msgSend(v11, "length");
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = ___UIButtonUpdateStringAttributes_block_invoke;
    v17[3] = &unk_1E16BC9E0;
    v18 = v10;
    v19 = v8;
    v21 = v9;
    v13 = v11;
    v20 = v13;
    objc_msgSend(v13, "enumerateAttributesInRange:options:usingBlock:", 0, v12, 0x100000, v17);
    v14 = v20;
    v15 = v13;

  }
  else
  {
    v15 = v7;
  }

  return v15;
}

id _UIButtonUpdateStringAttributes_0(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)objc_msgSend(a1, "mutableCopy");
  v11 = objc_msgSend(v10, "length");
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = ___UIButtonUpdateStringAttributes_block_invoke_0;
  v19[3] = &unk_1E16DAB20;
  v20 = v7;
  v22 = v8;
  v23 = v9;
  v12 = v10;
  v21 = v12;
  v13 = v9;
  v14 = v8;
  v15 = v7;
  objc_msgSend(v12, "enumerateAttributesInRange:options:usingBlock:", 0, v11, 0x100000, v19);
  v16 = v21;
  v17 = v12;

  return v17;
}

id _UILocalizedString(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;

  v4 = a3;
  v5 = a1;
  _UIKitBundle();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "localizedStringForKey:value:table:", v5, v4, CFSTR("Localizable"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t cornerStyleForDeviceIdiomAndConfigurationKind(uint64_t a1)
{
  _BOOL4 v1;
  void *v2;
  uint64_t v3;

  v1 = a1 != 0;
  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  if (v3 == 6)
    return 4 * v1;
  else
    return 0;
}

id _colorByReducingAlpha(void *a1, uint64_t a2, double a3)
{
  id v4;
  double v5;
  void *v6;

  v4 = (id)objc_msgSend(a1, "resolvedColorWithTraitCollection:", a2);
  objc_msgSend(v4, "alphaComponent");
  objc_msgSend(v4, "colorWithAlphaComponent:", v5 * a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id sub_1852E82F4(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

void _UIDeallocOnMainThread(void *a1)
{
  if (pthread_main_np())
    objc_msgSend(a1, "dealloc");
  else
    dispatch_async_f(MEMORY[0x1E0C80D38], a1, MEMORY[0x1E0DE7980]);
}

void sub_1852EB53C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id keyboardui_system_get_log_STAGING()
{
  if (qword_1ECD7D938 != -1)
    dispatch_once(&qword_1ECD7D938, &__block_literal_global_511);
  return (id)qword_1ECD7D930;
}

uint64_t KBEqualStrings(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 == v4)
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    if (v3 && v4)
      v6 = objc_msgSend(v3, "isEqualToString:", v4);
  }

  return v6;
}

void sub_1852EDAF4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x790], 8);
  _Block_object_dispose(&STACK[0x7B0], 8);
  _Block_object_dispose(&STACK[0x7D0], 8);
  _Block_object_dispose(&STACK[0x7F0], 8);
  _Unwind_Resume(a1);
}

void sub_1852EDF20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 _UIRTreeContainerNode<unsigned long>::addChild(_OWORD *a1, uint64_t a2, uint64_t a3, int64x2_t **a4, float64x2_t a5, float64x2_t a6)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float64x2_t v15;
  int64x2_t v16;
  float64x2_t v17;
  double v18;
  int64x2_t *v19;
  unint64_t *v20;
  unint64_t v21;
  float64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  __n128 *v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  float64_t v58;
  __n128 result;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  uint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  _OWORD *v84;
  uint64_t *v85;
  unint64_t *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  float64x2_t *v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  int64x2_t v95;
  uint64_t v96;
  double v97;
  double v98;
  float64x2_t v99;
  float64x2_t *v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  int64x2_t v104;
  unint64_t v105;
  float64x2_t v106;
  uint64_t *v107;
  double v108;
  float64x2_t *v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  int64x2_t v113;
  unint64_t v114;
  double v115;
  double v116;
  float64x2_t v117;
  float64x2_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t i;
  float64x2_t *v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  int64x2_t v127;
  uint64_t *v128;
  unint64_t v129;
  double v130;
  uint64_t *j;
  uint64_t v132;
  float64x2_t *v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  int64x2_t v137;
  unint64_t v138;
  double v139;
  double v140;
  float64x2_t v141;
  float64x2_t v142;
  uint64_t v143;
  uint64_t v144;
  float64x2_t *v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  int64x2_t v149;
  unint64_t v150;
  double v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  uint64_t *v155;
  float64x2_t *v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  int64x2_t v161;
  unint64_t v162;
  double v163;
  double v164;
  float64x2_t v165;
  uint64_t v166;
  float64x2_t *v167;
  float64x2_t v168;
  float64x2_t v169;
  int64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  float64x2_t *v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  int64x2_t v180;
  unint64_t v181;
  double v182;
  double v183;
  float64x2_t v184;
  float64x2_t *v185;
  float64x2_t v186;
  float64x2_t v187;
  int64x2_t v188;
  float64x2_t v189;
  unint64_t v190;
  float64x2_t v191;
  double v192;
  double v193;
  float64x2_t *v194;
  float64x2_t v195;
  float64x2_t v196;
  int64x2_t v197;
  float64x2_t v198;
  double v199;
  unint64_t *v200;
  float64x2_t v201;
  uint64_t v202;
  unint64_t v203;
  float64x2_t *v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  int64x2_t v208;
  unint64_t v209;
  double v210;
  double v211;
  float64x2_t v212;
  float64x2_t *v213;
  float64x2_t v214;
  float64x2_t v215;
  int64x2_t v216;
  float64x2_t v217;
  unint64_t *v218;
  double v219;
  double v220;
  double v221;
  unint64_t v222;
  float64x2_t *v223;
  float64x2_t v224;
  float64x2_t v225;
  int64x2_t v226;
  float64x2_t v227;
  float64x2_t *v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  int64x2_t v233;
  unint64_t v234;
  double v235;
  unint64_t v236;
  double v237;
  double v238;
  float64x2_t v239;
  float64x2_t *v240;
  float64x2_t v241;
  float64x2_t v242;
  int64x2_t v243;
  float64x2_t v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  double v248;
  double v249;
  float64x2_t v250;
  float64x2_t *v251;
  float64x2_t v252;
  float64x2_t v253;
  int64x2_t v254;
  float64x2_t v255;
  __n128 *v256;
  unint64_t v257;
  __n128 *v258;
  __n128 *v259;
  __n128 v260;
  __n128 v261;
  unint64_t v262;
  char *v263;
  _QWORD *v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  float64x2_t v274;
  int64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  std::__shared_weak_count *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  float64x2_t *v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  int64x2_t v291;
  unint64_t v292;
  double v293;
  double v294;
  float64x2_t v295;
  float64x2_t *v296;
  float64x2_t v297;
  float64x2_t v298;
  int64x2_t v299;
  float64x2_t v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t v303;
  float64x2_t v304;
  float64x2_t *v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  int64x2_t v309;
  unint64_t v310;
  double v311;
  double v312;
  float64x2_t v313;
  float64x2_t *v314;
  float64x2_t v315;
  float64x2_t v316;
  int64x2_t v317;
  float64x2_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  char *v323;
  char *v324;
  uint64_t v325;
  char *v326;
  char *v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t *v332;
  float64_t v333;
  float64_t v334;
  float64_t v335;
  uint64_t v336;
  _OWORD *v337;
  __int128 v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  __int128 v343;
  _OWORD *v344;
  _OWORD *v345;
  __int128 v346;
  __int128 v347;
  char *v348;
  int64_t v349;
  _QWORD *v350;
  char *v351;
  _QWORD *v352;
  char *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  char *v358;
  char *v359;
  uint64_t v360;
  char *v361;
  int64_t v362;
  _OWORD *v363;
  unint64_t v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  BOOL v368;
  _QWORD *v369;
  unint64_t v371;
  uint64_t v372;
  float64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  __n128 *v379;
  __n128 v380;
  __n128 v381;
  char *v382;
  _QWORD *v383;
  char *v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  char *v389;
  char *v390;
  char *v391;
  uint64_t v392;
  std::__shared_weak_count *v393;
  std::__shared_weak_count *v394;
  uint64_t v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  uint64_t v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  unint64_t *v420;
  _OWORD *v421;
  uint64_t v422;
  float64x2_t v424;
  unint64_t v425;
  int64x2_t *v427;
  std::__shared_weak_count *v428;
  __int128 v429;
  int64x2_t *v430;
  std::__shared_weak_count *v431;
  float64x2_t v432[2];
  int64x2_t *v433;
  std::__shared_weak_count *v434;
  __int128 v435;
  uint64_t v436;
  std::__shared_weak_count *v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  char *v441;
  __int128 v442;
  _QWORD *v443;
  float64x2_t v444;
  float64x2_t v445;

  v10 = *(uint64_t **)(a2 + 40);
  v11 = *(uint64_t **)(a2 + 48);
  if (v11 != v10)
  {
LABEL_4:
    v12 = ((char *)v11 - (char *)v10) >> 4;
    if (v12)
    {
      if (v12 == 1)
      {
        v13 = *v10;
        goto LABEL_15;
      }
      if (v10 != v11)
      {
        v13 = 0;
        v424 = vaddq_f64(a5, a6);
        v14 = 1.79769313e308;
        do
        {
          _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)&v444, *v10);
          v15 = vaddq_f64(v444, v445);
          v16 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v15, v424), (int8x16_t)vcgeq_f64(a5, v444));
          if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v16, 1), (int8x16_t)v16).u64[0] & 0x8000000000000000) != 0)
          {
            v18 = 0.0;
          }
          else
          {
            v17 = vsubq_f64(vmaxnmq_f64(v15, v424), vminnmq_f64(v444, a5));
            v18 = vmulq_laneq_f64(v17, v17, 1).f64[0] / vmuld_lane_f64(v445.f64[0], v445, 1);
          }
          if (v18 < v14)
          {
            v13 = *v10;
            v14 = v18;
            if (fabs(v18) < 2.22044605e-16)
              break;
          }
          v10 += 2;
        }
        while (v10 != v11);
LABEL_15:
        if (v13)
        {
          v19 = a4[1];
          v430 = *a4;
          v431 = (std::__shared_weak_count *)v19;
          if (v19)
          {
            v20 = &v19->u64[1];
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          _UIRTreeContainerNode<unsigned long>::addChild(&v444, v13, a3, &v430, (__n128)a5, (__n128)a6);
          std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::operator=[abi:nn180100]((uint64_t)a4, (__int128 *)&v444);
          v22 = v444.f64[1];
          if (*(_QWORD *)&v444.f64[1])
          {
            v23 = (unint64_t *)(*(_QWORD *)&v444.f64[1] + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              (*(void (**)(float64_t))(**(_QWORD **)&v22 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v22));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v22);
            }
          }
          v25 = v431;
          if (v431)
          {
            p_shared_owners = (unint64_t *)&v431->__shared_owners_;
            do
              v27 = __ldaxr(p_shared_owners);
            while (__stlxr(v27 - 1, p_shared_owners));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              v28 = v25;
LABEL_29:
              std::__shared_weak_count::__release_weak(v28);
              goto LABEL_68;
            }
          }
          goto LABEL_68;
        }
      }
    }
    v444 = 0uLL;
    v445.f64[0] = 0.0;
    v442 = 0uLL;
    v443 = 0;
    v29 = (__n128 *)operator new(0x20uLL);
    *v29 = (__n128)a5;
    v29[1] = (__n128)a6;
    *(_QWORD *)&v444.f64[1] = v29[2].n128_f64;
    *(_QWORD *)&v445.f64[0] = v29[2].n128_f64;
    *(_QWORD *)&v444.f64[0] = v29;
    v30 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v443, 1uLL);
    v32 = (char *)*((_QWORD *)&v442 + 1);
    v31 = (char *)v442;
    v34 = &v30[v33];
    *v30 = a3;
    v35 = v30 + 1;
    while (v32 != v31)
    {
      v36 = *((_QWORD *)v32 - 1);
      v32 -= 8;
      *--v30 = v36;
    }
    *(_QWORD *)&v442 = v30;
    *((_QWORD *)&v442 + 1) = v35;
    v443 = v34;
    if (v31)
      operator delete(v31);
    *((_QWORD *)&v442 + 1) = v35;
    v38 = *(_QWORD *)(a2 + 8);
    v37 = *(std::__shared_weak_count **)(a2 + 16);
    *(_QWORD *)&v439 = v38;
    if (v37)
    {
      v39 = std::__shared_weak_count::lock(v37);
      *((_QWORD *)&v439 + 1) = v39;
      if (v39)
      {
        v40 = v39;
        _ZNSt3__115allocate_sharedB8nn180100I21_UIRTreeContainerNodeImENS_9allocatorIS2_EEJNS_10shared_ptrIS2_EENS_6vectorImNS3_ImEEEENS7_IDv4_dNS3_ISA_EEEEEvEENS5_IT_EERKT0_DpOT1_((uint64_t *)&v440, v38, v39, &v442, (__int128 *)&v444);
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
        v429 = v440;
        v440 = 0uLL;
        v43 = (std::__shared_weak_count *)a4[1];
        v427 = *a4;
        v428 = v43;
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        _UIRTreeContainerNode<unsigned long>::addContainer(&v439, a2, (uint64_t *)&v429, &v427);
        std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::operator=[abi:nn180100]((uint64_t)a4, &v439);
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v439 + 1);
        if (*((_QWORD *)&v439 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v439 + 1) + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = v428;
        if (v428)
        {
          v50 = (unint64_t *)&v428->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = (std::__shared_weak_count *)*((_QWORD *)&v429 + 1);
        if (*((_QWORD *)&v429 + 1))
        {
          v53 = (unint64_t *)(*((_QWORD *)&v429 + 1) + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v440 + 1);
        if (*((_QWORD *)&v440 + 1))
        {
          v56 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if ((_QWORD)v442)
        {
          *((_QWORD *)&v442 + 1) = v442;
          operator delete((void *)v442);
        }
        v58 = v444.f64[0];
        if (!*(_QWORD *)&v444.f64[0])
          goto LABEL_68;
        goto LABEL_67;
      }
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_401:
    abort();
  }
  if (_UIRTreeContainerNode<unsigned long>::isRoot(a2))
  {
    v10 = *(uint64_t **)(a2 + 40);
    v11 = *(uint64_t **)(a2 + 48);
    goto LABEL_4;
  }
  if (_UIRTreeContainerNode<unsigned long>::isFull(a2))
  {
    v422 = a3;
    v444 = a5;
    v445 = a6;
    v61 = *(_QWORD *)(a2 + 64);
    v60 = *(_QWORD *)(a2 + 72);
    v443 = 0;
    v442 = 0uLL;
    v62 = v60 - v61;
    v63 = (v60 - v61) >> 3;
    if (v60 == v61)
    {
      v66 = 0;
      v80 = 0;
      v65 = 0;
      v67 = v63 >> 1;
      v68 = (unint64_t *)(8 * (v63 >> 1));
    }
    else
    {
      std::vector<unsigned long>::__vallocate[abi:nn180100](&v442, (v60 - v61) >> 3);
      v64 = *((_QWORD *)&v442 + 1);
      bzero(*((void **)&v442 + 1), v62);
      v65 = (unint64_t *)(v64 + v62);
      *((_QWORD *)&v442 + 1) = v64 + v62;
      v66 = (unint64_t *)v442;
      v67 = v63 >> 1;
      v68 = (unint64_t *)(v442 + 8 * (v63 >> 1));
      if ((_QWORD)v442 == v64 + v62)
      {
        v66 = (unint64_t *)(v64 + v62);
      }
      else
      {
        v69 = 0;
        v70 = (unint64_t *)v442;
        do
          *v70++ = v69++;
        while (v70 != v65);
      }
      v80 = (unint64_t *)(v64 + v62);
    }
    if (v62 >= 0x10)
    {
      v425 = v67;
      if (v68 != v80 && v68 != v65)
      {
        v81 = (uint64_t *)v66;
        v82 = v80;
        v420 = v80;
        do
        {
          v83 = ((char *)v82 - (char *)v81) >> 3;
          if (v83 < 2)
            break;
          if (v83 == 3)
          {
            _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN21_UIRTreeContainerNodeImE46reversedIndexesOfChildrenWithClosestAffinityToEDv4_dEUlmmE_NS_11__wrap_iterIPmEEEEjT1_SA_SA_T0_(v81, v81 + 1, (uint64_t *)v82 - 1, &v444, *(_QWORD *)(a2 + 88));
            break;
          }
          if (v83 == 2)
          {
            v283 = *(v82 - 1);
            v284 = *v81;
            v285 = *(_QWORD *)(a2 + 88);
            v286 = (float64x2_t *)(v285 + 32 * v283);
            v288 = *v286;
            v287 = v286[1];
            v289 = vaddq_f64(*v286, v287);
            v290 = vaddq_f64(v444, v445);
            v291 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v289, v290), (int8x16_t)vcgeq_f64(v444, *v286));
            v292 = vandq_s8((int8x16_t)vdupq_laneq_s64(v291, 1), (int8x16_t)v291).u64[0];
            v293 = 0.0;
            v294 = 0.0;
            if ((v292 & 0x8000000000000000) == 0)
            {
              v295 = vsubq_f64(vmaxnmq_f64(v289, v290), vminnmq_f64(v288, v444));
              v294 = vmulq_laneq_f64(v295, v295, 1).f64[0] / vmuld_lane_f64(v287.f64[0], v287, 1);
            }
            v296 = (float64x2_t *)(v285 + 32 * v284);
            v297 = v296[1];
            v298 = vaddq_f64(*v296, v297);
            v299 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v298, v290), (int8x16_t)vcgeq_f64(v444, *v296));
            if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v299, 1), (int8x16_t)v299).u64[0] & 0x8000000000000000) == 0)
            {
              v300 = vsubq_f64(vmaxnmq_f64(v298, v290), vminnmq_f64(*v296, v444));
              v293 = vmulq_laneq_f64(v300, v300, 1).f64[0] / vmuld_lane_f64(v297.f64[0], v297, 1);
            }
            if (v294 > v293)
            {
              *v81 = v283;
              *(v82 - 1) = v284;
            }
            break;
          }
          if ((char *)v82 - (char *)v81 <= 63)
          {
            for (; v81 != (uint64_t *)(v82 - 1); ++v81)
            {
              v301 = (uint64_t *)v82;
              if (v81 != (uint64_t *)v82)
              {
                v302 = v81 + 1;
                v301 = v81;
                if (v81 + 1 != (uint64_t *)v82)
                {
                  v303 = *(_QWORD *)(a2 + 88);
                  v304 = vaddq_f64(v444, v445);
                  v301 = v81;
                  do
                  {
                    v305 = (float64x2_t *)(v303 + 32 * *v302);
                    v307 = *v305;
                    v306 = v305[1];
                    v308 = vaddq_f64(*v305, v306);
                    v309 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v308, v304), (int8x16_t)vcgeq_f64(v444, *v305));
                    v310 = vandq_s8((int8x16_t)vdupq_laneq_s64(v309, 1), (int8x16_t)v309).u64[0];
                    v311 = 0.0;
                    v312 = 0.0;
                    if ((v310 & 0x8000000000000000) == 0)
                    {
                      v313 = vsubq_f64(vmaxnmq_f64(v308, v304), vminnmq_f64(v307, v444));
                      v312 = vmulq_laneq_f64(v313, v313, 1).f64[0] / vmuld_lane_f64(v306.f64[0], v306, 1);
                    }
                    v314 = (float64x2_t *)(v303 + 32 * *v301);
                    v315 = v314[1];
                    v316 = vaddq_f64(*v314, v315);
                    v317 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v316, v304), (int8x16_t)vcgeq_f64(v444, *v314));
                    if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v317, 1), (int8x16_t)v317).u64[0] & 0x8000000000000000) == 0)
                    {
                      v318 = vsubq_f64(vmaxnmq_f64(v316, v304), vminnmq_f64(*v314, v444));
                      v311 = vmulq_laneq_f64(v318, v318, 1).f64[0] / vmuld_lane_f64(v315.f64[0], v315, 1);
                    }
                    if (v312 > v311)
                      v301 = v302;
                    ++v302;
                  }
                  while (v302 != (uint64_t *)v82);
                }
              }
              if (v81 != v301)
              {
                v319 = *v81;
                *v81 = *v301;
                *v301 = v319;
              }
            }
            break;
          }
          v84 = a1;
          v85 = &v81[v83 >> 1];
          v86 = v82 - 1;
          v87 = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN21_UIRTreeContainerNodeImE46reversedIndexesOfChildrenWithClosestAffinityToEDv4_dEUlmmE_NS_11__wrap_iterIPmEEEEjT1_SA_SA_T0_(v81, v85, (uint64_t *)v82 - 1, &v444, *(_QWORD *)(a2 + 88));
          v88 = *v81;
          v89 = *(_QWORD *)(a2 + 88);
          v90 = (float64x2_t *)(v89 + 32 * *v81);
          v92 = *v90;
          v91 = v90[1];
          v93 = vaddq_f64(*v90, v91);
          v94 = vaddq_f64(v444, v445);
          v95 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v93, v94), (int8x16_t)vcgeq_f64(v444, *v90));
          v96 = vandq_s8((int8x16_t)vdupq_laneq_s64(v95, 1), (int8x16_t)v95).u64[0];
          v97 = 0.0;
          v98 = 0.0;
          if ((v96 & 0x8000000000000000) == 0)
          {
            v99 = vsubq_f64(vmaxnmq_f64(v93, v94), vminnmq_f64(v92, v444));
            v98 = vmulq_laneq_f64(v99, v99, 1).f64[0] / vmuld_lane_f64(v91.f64[0], v91, 1);
          }
          v100 = (float64x2_t *)(v89 + 32 * *v85);
          v101 = *v100;
          v102 = v100[1];
          v103 = vaddq_f64(*v100, v102);
          v104 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v103, v94), (int8x16_t)vcgeq_f64(v444, *v100));
          v105 = vandq_s8((int8x16_t)vdupq_laneq_s64(v104, 1), (int8x16_t)v104).u64[0];
          if ((v105 & 0x8000000000000000) == 0)
          {
            v106 = vsubq_f64(vmaxnmq_f64(v103, v94), vminnmq_f64(v101, v444));
            v97 = vmulq_laneq_f64(v106, v106, 1).f64[0] / vmuld_lane_f64(v102.f64[0], v102, 1);
          }
          if (v98 <= v97)
          {
            v108 = vmuld_lane_f64(v102.f64[0], v102, 1);
            v107 = (uint64_t *)(v82 - 1);
            while (--v107 != v81)
            {
              v109 = (float64x2_t *)(v89 + 32 * *v107);
              v111 = *v109;
              v110 = v109[1];
              v112 = vaddq_f64(*v109, v110);
              v113 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v112, v94), (int8x16_t)vcgeq_f64(v444, *v109));
              v114 = vandq_s8((int8x16_t)vdupq_laneq_s64(v113, 1), (int8x16_t)v113).u64[0];
              v115 = 0.0;
              v116 = 0.0;
              if ((v114 & 0x8000000000000000) == 0)
              {
                v117 = vsubq_f64(vmaxnmq_f64(v112, v94), vminnmq_f64(v111, v444));
                v116 = vmulq_laneq_f64(v117, v117, 1).f64[0] / vmuld_lane_f64(v110.f64[0], v110, 1);
              }
              if ((v105 & 0x8000000000000000) == 0)
              {
                v118 = vsubq_f64(vmaxnmq_f64(v103, v94), vminnmq_f64(v101, v444));
                v115 = vmulq_laneq_f64(v118, v118, 1).f64[0] / v108;
              }
              if (v116 > v115)
              {
                *v81 = *v107;
                *v107 = v88;
                ++v87;
                goto LABEL_110;
              }
            }
            v190 = *v86;
            v191 = vsubq_f64(vmaxnmq_f64(v93, v94), vminnmq_f64(v92, v444));
            v192 = vmulq_laneq_f64(v191, v191, 1).f64[0];
            v193 = v192 / vmuld_lane_f64(v91.f64[0], v91, 1);
            if (v96 < 0)
              v193 = 0.0;
            v194 = (float64x2_t *)(v89 + 32 * v190);
            v195 = v194[1];
            v196 = vaddq_f64(*v194, v195);
            v197 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v196, v94), (int8x16_t)vcgeq_f64(v444, *v194));
            if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v197, 1), (int8x16_t)v197).u64[0] & 0x8000000000000000) != 0)
            {
              v199 = 0.0;
            }
            else
            {
              v198 = vsubq_f64(vmaxnmq_f64(v196, v94), vminnmq_f64(*v194, v444));
              v199 = vmulq_laneq_f64(v198, v198, 1).f64[0] / vmuld_lane_f64(v195.f64[0], v195, 1);
            }
            a1 = v84;
            v218 = (unint64_t *)(v81 + 1);
            v80 = v420;
            if (v193 <= v199)
            {
              if (v218 == v86)
                break;
              v219 = vmuld_lane_f64(v91.f64[0], v91, 1);
              while (1)
              {
                v220 = 0.0;
                v221 = 0.0;
                if ((v96 & 0x8000000000000000) == 0)
                  v221 = v192 / v219;
                v222 = *v218;
                v223 = (float64x2_t *)(v89 + 32 * *v218);
                v224 = v223[1];
                v225 = vaddq_f64(*v223, v224);
                v226 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v225, v94), (int8x16_t)vcgeq_f64(v444, *v223));
                if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v226, 1), (int8x16_t)v226).u64[0] & 0x8000000000000000) == 0)
                {
                  v227 = vsubq_f64(vmaxnmq_f64(v225, v94), vminnmq_f64(*v223, v444));
                  v220 = vmulq_laneq_f64(v227, v227, 1).f64[0] / vmuld_lane_f64(v224.f64[0], v224, 1);
                }
                if (v221 > v220)
                  break;
                if (++v218 == v86)
                  goto LABEL_247;
              }
              *v218++ = v190;
              *v86 = v222;
            }
            if (v218 == v86)
              break;
            while (1)
            {
              v228 = (float64x2_t *)(v89 + 32 * *v81);
              v229 = *v228;
              v230 = v228[1];
              v231 = vaddq_f64(*v228, v230);
              v232 = vaddq_f64(v444, v445);
              v233 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v231, v232), (int8x16_t)vcgeq_f64(v444, *v228));
              v234 = vandq_s8((int8x16_t)vdupq_laneq_s64(v233, 1), (int8x16_t)v233).u64[0];
              v235 = vmuld_lane_f64(v230.f64[0], v230, 1);
              do
              {
                v236 = *v218;
                v237 = 0.0;
                v238 = 0.0;
                if ((v234 & 0x8000000000000000) == 0)
                {
                  v239 = vsubq_f64(vmaxnmq_f64(v231, v232), vminnmq_f64(v229, v444));
                  v238 = vmulq_laneq_f64(v239, v239, 1).f64[0] / v235;
                }
                v240 = (float64x2_t *)(v89 + 32 * v236);
                v241 = v240[1];
                v242 = vaddq_f64(*v240, v241);
                v243 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v242, v232), (int8x16_t)vcgeq_f64(v444, *v240));
                if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v243, 1), (int8x16_t)v243).u64[0] & 0x8000000000000000) == 0)
                {
                  v244 = vsubq_f64(vmaxnmq_f64(v242, v232), vminnmq_f64(*v240, v444));
                  v237 = vmulq_laneq_f64(v244, v244, 1).f64[0] / vmuld_lane_f64(v241.f64[0], v241, 1);
                }
                ++v218;
              }
              while (v238 <= v237);
              v245 = v218 - 1;
              do
              {
                v247 = *--v86;
                v246 = v247;
                v248 = 0.0;
                v249 = 0.0;
                if ((v234 & 0x8000000000000000) == 0)
                {
                  v250 = vsubq_f64(vmaxnmq_f64(v231, v232), vminnmq_f64(v229, v444));
                  v249 = vmulq_laneq_f64(v250, v250, 1).f64[0] / v235;
                }
                v251 = (float64x2_t *)(v89 + 32 * v246);
                v252 = v251[1];
                v253 = vaddq_f64(*v251, v252);
                v254 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v253, v232), (int8x16_t)vcgeq_f64(v444, *v251));
                if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v254, 1), (int8x16_t)v254).u64[0] & 0x8000000000000000) == 0)
                {
                  v255 = vsubq_f64(vmaxnmq_f64(v253, v232), vminnmq_f64(*v251, v444));
                  v248 = vmulq_laneq_f64(v255, v255, 1).f64[0] / vmuld_lane_f64(v252.f64[0], v252, 1);
                }
              }
              while (v249 > v248);
              if (v245 >= v86)
                break;
              *v245 = v246;
              *v86 = v236;
            }
            v81 = (uint64_t *)(v218 - 1);
            if (v245 > v68)
              break;
          }
          else
          {
            v107 = (uint64_t *)(v82 - 1);
LABEL_110:
            v119 = v81 + 1;
            if (v81 + 1 >= v107)
            {
              v128 = v81 + 1;
              i = 1;
            }
            else
            {
              v120 = v81 + 1;
              for (i = 1; ; ++i)
              {
                v122 = (float64x2_t *)(v89 + 32 * *v85);
                v123 = vaddq_f64(v444, v445);
                v124 = *v122;
                v125 = v122[1];
                v126 = vaddq_f64(*v122, v125);
                v127 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v126, v123), (int8x16_t)vcgeq_f64(v444, *v122));
                v128 = v120;
                v129 = vandq_s8((int8x16_t)vdupq_laneq_s64(v127, 1), (int8x16_t)v127).u64[0];
                v130 = vmuld_lane_f64(v125.f64[0], v125, 1);
                v120 = &v119[i];
                for (j = &v81[i]; ; ++j)
                {
                  v132 = *j;
                  v133 = (float64x2_t *)(v89 + 32 * *j);
                  v135 = *v133;
                  v134 = v133[1];
                  v136 = vaddq_f64(*v133, v134);
                  v137 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v136, v123), (int8x16_t)vcgeq_f64(v444, *v133));
                  v138 = vandq_s8((int8x16_t)vdupq_laneq_s64(v137, 1), (int8x16_t)v137).u64[0];
                  v139 = 0.0;
                  v140 = 0.0;
                  if ((v138 & 0x8000000000000000) == 0)
                  {
                    v141 = vsubq_f64(vmaxnmq_f64(v136, v123), vminnmq_f64(v135, v444));
                    v140 = vmulq_laneq_f64(v141, v141, 1).f64[0] / vmuld_lane_f64(v134.f64[0], v134, 1);
                  }
                  if ((v129 & 0x8000000000000000) == 0)
                  {
                    v142 = vsubq_f64(vmaxnmq_f64(v126, v123), vminnmq_f64(v124, v444));
                    v139 = vmulq_laneq_f64(v142, v142, 1).f64[0] / v130;
                  }
                  if (v140 <= v139)
                    break;
                  v128 = &v81[++i];
                  ++v120;
                }
                do
                {
                  v144 = *--v107;
                  v143 = v144;
                  v145 = (float64x2_t *)(v89 + 32 * v144);
                  v147 = *v145;
                  v146 = v145[1];
                  v148 = vaddq_f64(*v145, v146);
                  v149 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v148, v123), (int8x16_t)vcgeq_f64(v444, *v145));
                  v150 = vandq_s8((int8x16_t)vdupq_laneq_s64(v149, 1), (int8x16_t)v149).u64[0];
                  v151 = 0.0;
                  v152 = 0.0;
                  if ((v150 & 0x8000000000000000) == 0)
                  {
                    v153 = vsubq_f64(vmaxnmq_f64(v148, v123), vminnmq_f64(v147, v444));
                    v152 = vmulq_laneq_f64(v153, v153, 1).f64[0] / vmuld_lane_f64(v146.f64[0], v146, 1);
                  }
                  if ((v129 & 0x8000000000000000) == 0)
                  {
                    v154 = vsubq_f64(vmaxnmq_f64(v126, v123), vminnmq_f64(v124, v444));
                    v151 = vmulq_laneq_f64(v154, v154, 1).f64[0] / v130;
                  }
                }
                while (v152 <= v151);
                if (j >= v107)
                  break;
                *j = v143;
                *v107 = v132;
                ++v87;
                if (j == v85)
                  v85 = v107;
              }
            }
            v155 = &v81[i];
            if (v155 != v85)
            {
              v156 = (float64x2_t *)(v89 + 32 * *v85);
              v158 = *v156;
              v157 = v156[1];
              v159 = vaddq_f64(*v156, v157);
              v160 = vaddq_f64(v444, v445);
              v161 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v159, v160), (int8x16_t)vcgeq_f64(v444, *v156));
              v162 = vandq_s8((int8x16_t)vdupq_laneq_s64(v161, 1), (int8x16_t)v161).u64[0];
              v163 = 0.0;
              v164 = 0.0;
              if ((v162 & 0x8000000000000000) == 0)
              {
                v165 = vsubq_f64(vmaxnmq_f64(v159, v160), vminnmq_f64(v158, v444));
                v164 = vmulq_laneq_f64(v165, v165, 1).f64[0] / vmuld_lane_f64(v157.f64[0], v157, 1);
              }
              v166 = *v155;
              v167 = (float64x2_t *)(v89 + 32 * *v155);
              v168 = v167[1];
              v169 = vaddq_f64(*v167, v168);
              v170 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v169, v160), (int8x16_t)vcgeq_f64(v444, *v167));
              if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v170, 1), (int8x16_t)v170).u64[0] & 0x8000000000000000) == 0)
              {
                v171 = vsubq_f64(vmaxnmq_f64(v169, v160), vminnmq_f64(*v167, v444));
                v163 = vmulq_laneq_f64(v171, v171, 1).f64[0] / vmuld_lane_f64(v168.f64[0], v168, 1);
              }
              if (v164 > v163)
              {
                *v155 = *v85;
                *v85 = v166;
                ++v87;
              }
            }
            a1 = v84;
            v80 = v420;
            if (v155 == (uint64_t *)v68)
              break;
            if (!v87)
            {
              if (v155 <= (uint64_t *)v68)
              {
                v200 = (unint64_t *)(v128 + 1);
                if (v128 + 1 == (uint64_t *)v82)
                  break;
                v201 = vaddq_f64(v444, v445);
                v202 = *v128;
                while (1)
                {
                  v203 = *v200;
                  v204 = (float64x2_t *)(v89 + 32 * *v200);
                  v206 = *v204;
                  v205 = v204[1];
                  v207 = vaddq_f64(*v204, v205);
                  v208 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v207, v201), (int8x16_t)vcgeq_f64(v444, *v204));
                  v209 = vandq_s8((int8x16_t)vdupq_laneq_s64(v208, 1), (int8x16_t)v208).u64[0];
                  v210 = 0.0;
                  v211 = 0.0;
                  if ((v209 & 0x8000000000000000) == 0)
                  {
                    v212 = vsubq_f64(vmaxnmq_f64(v207, v201), vminnmq_f64(v206, v444));
                    v211 = vmulq_laneq_f64(v212, v212, 1).f64[0] / vmuld_lane_f64(v205.f64[0], v205, 1);
                  }
                  v213 = (float64x2_t *)(v89 + 32 * v202);
                  v214 = v213[1];
                  v215 = vaddq_f64(*v213, v214);
                  v216 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v215, v201), (int8x16_t)vcgeq_f64(v444, *v213));
                  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v216, 1), (int8x16_t)v216).u64[0] & 0x8000000000000000) == 0)
                  {
                    v217 = vsubq_f64(vmaxnmq_f64(v215, v201), vminnmq_f64(*v213, v444));
                    v210 = vmulq_laneq_f64(v217, v217, 1).f64[0] / vmuld_lane_f64(v214.f64[0], v214, 1);
                  }
                  if (v211 > v210)
                    break;
                  ++v200;
                  v202 = v203;
                  if (v200 == v82)
                    goto LABEL_247;
                }
              }
              else
              {
                if (i == 1)
                  break;
                v172 = vaddq_f64(v444, v445);
                v173 = *v81;
                v174 = 8 * i - 8;
                while (1)
                {
                  v175 = *v119;
                  v176 = (float64x2_t *)(v89 + 32 * *v119);
                  v178 = *v176;
                  v177 = v176[1];
                  v179 = vaddq_f64(*v176, v177);
                  v180 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v179, v172), (int8x16_t)vcgeq_f64(v444, *v176));
                  v181 = vandq_s8((int8x16_t)vdupq_laneq_s64(v180, 1), (int8x16_t)v180).u64[0];
                  v182 = 0.0;
                  v183 = 0.0;
                  if ((v181 & 0x8000000000000000) == 0)
                  {
                    v184 = vsubq_f64(vmaxnmq_f64(v179, v172), vminnmq_f64(v178, v444));
                    v183 = vmulq_laneq_f64(v184, v184, 1).f64[0] / vmuld_lane_f64(v177.f64[0], v177, 1);
                  }
                  v185 = (float64x2_t *)(v89 + 32 * v173);
                  v186 = v185[1];
                  v187 = vaddq_f64(*v185, v186);
                  v188 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v187, v172), (int8x16_t)vcgeq_f64(v444, *v185));
                  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v188, 1), (int8x16_t)v188).u64[0] & 0x8000000000000000) == 0)
                  {
                    v189 = vsubq_f64(vmaxnmq_f64(v187, v172), vminnmq_f64(*v185, v444));
                    v182 = vmulq_laneq_f64(v189, v189, 1).f64[0] / vmuld_lane_f64(v186.f64[0], v186, 1);
                  }
                  if (v183 > v182)
                    break;
                  ++v119;
                  v173 = v175;
                  v174 -= 8;
                  if (!v174)
                    goto LABEL_247;
                }
              }
            }
            if (v155 <= (uint64_t *)v68)
              v81 = v155 + 1;
            else
              v82 = (unint64_t *)v128;
          }
        }
        while (v82 != v68);
      }
LABEL_247:
      std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(v66, v68, 126 - 2 * __clz(v425), 1);
      v66 = (unint64_t *)v442;
      if (v68 == v65)
      {
        v65 = (unint64_t *)*((_QWORD *)&v442 + 1);
      }
      else
      {
        v320 = *((_QWORD *)&v442 + 1) - (_QWORD)v80;
        if (*((unint64_t **)&v442 + 1) != v80)
        {
          memmove(v68, v80, *((_QWORD *)&v442 + 1) - (_QWORD)v80);
          v66 = (unint64_t *)v442;
        }
        v65 = (unint64_t *)((char *)v68 + v320);
        *((_QWORD *)&v442 + 1) = (char *)v68 + v320;
      }
    }
    v321 = v65 - v66 + 1;
    v444 = 0uLL;
    v445.f64[0] = 0.0;
    v440 = 0uLL;
    v441 = 0;
    _ZNSt3__16vectorIDv4_dNS_9allocatorIS1_EEE7reserveEm((void **)&v444, v321);
    v322 = v422;
    if (v65 - v66 != -1)
    {
      if (v321 >> 61)
        goto LABEL_400;
      v323 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v441, v321);
      v324 = &v323[*((_QWORD *)&v440 + 1) & 0xFFFFFFFFFFFFFFF8];
      v326 = &v323[8 * v325];
      v328 = (char *)*((_QWORD *)&v440 + 1);
      v327 = (char *)v440;
      v329 = v324;
      if (*((_QWORD *)&v440 + 1) != (_QWORD)v440)
      {
        v329 = v324;
        do
        {
          v330 = *((_QWORD *)v328 - 1);
          v328 -= 8;
          *((_QWORD *)v329 - 1) = v330;
          v329 -= 8;
        }
        while (v328 != v327);
      }
      *(_QWORD *)&v440 = v329;
      *((_QWORD *)&v440 + 1) = v324;
      v441 = v326;
      if (v327)
        operator delete(v327);
    }
    v331 = (uint64_t *)*((_QWORD *)&v442 + 1);
    v332 = (uint64_t *)v442;
    v333 = v444.f64[0];
    if ((_QWORD)v442 == *((_QWORD *)&v442 + 1))
    {
      v335 = v444.f64[1];
    }
    else
    {
      v421 = a1;
      v335 = v444.f64[1];
      v334 = v445.f64[0];
      do
      {
        v336 = *v332;
        v337 = (_OWORD *)(*(_QWORD *)(a2 + 88) + 32 * *v332);
        if (*(_QWORD *)&v335 >= *(_QWORD *)&v334)
        {
          v339 = (uint64_t)(*(_QWORD *)&v335 - *(_QWORD *)&v333) >> 5;
          v340 = v339 + 1;
          if ((unint64_t)(v339 + 1) >> 59)
          {
            v444.f64[0] = v333;
            abort();
          }
          if ((uint64_t)(*(_QWORD *)&v334 - *(_QWORD *)&v333) >> 4 > v340)
            v340 = (uint64_t)(*(_QWORD *)&v334 - *(_QWORD *)&v333) >> 4;
          if (*(_QWORD *)&v334 - *(_QWORD *)&v333 >= 0x7FFFFFFFFFFFFFE0uLL)
            v341 = 0x7FFFFFFFFFFFFFFLL;
          else
            v341 = v340;
          if (v341)
            v341 = (unint64_t)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv4_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v341);
          else
            v342 = 0;
          v343 = v337[1];
          v344 = (_OWORD *)(v341 + 32 * v339);
          *v344 = *v337;
          v344[1] = v343;
          v345 = v344;
          while (*(_QWORD *)&v335 != *(_QWORD *)&v333)
          {
            v346 = *(_OWORD *)(*(_QWORD *)&v335 - 32);
            v347 = *(_OWORD *)(*(_QWORD *)&v335 - 16);
            *(_QWORD *)&v335 -= 32;
            *(v345 - 2) = v346;
            *(v345 - 1) = v347;
            v345 -= 2;
          }
          *(_QWORD *)&v334 = v341 + 32 * v342;
          *(_QWORD *)&v335 = v344 + 2;
          *(_QWORD *)&v444.f64[1] = v344 + 2;
          if (v333 != 0.0)
            operator delete(*(void **)&v333);
          v333 = *(double *)&v345;
        }
        else
        {
          v338 = v337[1];
          **(_OWORD **)&v335 = *v337;
          *(_OWORD *)(*(_QWORD *)&v335 + 16) = v338;
          *(_QWORD *)&v335 += 32;
        }
        v444.f64[1] = v335;
        v348 = *(char **)(a2 + 96);
        v349 = v348 - (char *)(v337 + 2);
        if (v348 != (char *)(v337 + 2))
          memmove(v337, v337 + 2, v348 - (char *)(v337 + 2));
        *(_QWORD *)(a2 + 96) = (char *)v337 + v349;
        v350 = (_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v336);
        v351 = (char *)*((_QWORD *)&v440 + 1);
        if (*((_QWORD *)&v440 + 1) >= (unint64_t)v441)
        {
          v353 = (char *)v440;
          v354 = (uint64_t)(*((_QWORD *)&v440 + 1) - v440) >> 3;
          v355 = v354 + 1;
          if ((unint64_t)(v354 + 1) >> 61)
          {
            v444.f64[0] = v333;
            abort();
          }
          v356 = (uint64_t)&v441[-v440];
          if ((uint64_t)&v441[-v440] >> 2 > v355)
            v355 = v356 >> 2;
          if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFF8)
            v357 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v357 = v355;
          if (v357)
          {
            v358 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v441, v357);
            v351 = (char *)*((_QWORD *)&v440 + 1);
            v353 = (char *)v440;
          }
          else
          {
            v358 = 0;
          }
          v359 = &v358[8 * v354];
          *(_QWORD *)v359 = *v350;
          v352 = v359 + 8;
          while (v351 != v353)
          {
            v360 = *((_QWORD *)v351 - 1);
            v351 -= 8;
            *((_QWORD *)v359 - 1) = v360;
            v359 -= 8;
          }
          *(_QWORD *)&v440 = v359;
          *((_QWORD *)&v440 + 1) = v352;
          v441 = &v358[8 * v357];
          if (v353)
            operator delete(v353);
        }
        else
        {
          **((_QWORD **)&v440 + 1) = *v350;
          v352 = v351 + 8;
        }
        *((_QWORD *)&v440 + 1) = v352;
        v361 = *(char **)(a2 + 72);
        v362 = v361 - (char *)(v350 + 1);
        if (v361 != (char *)(v350 + 1))
          memmove(v350, v350 + 1, v361 - (char *)(v350 + 1));
        *(_QWORD *)(a2 + 72) = (char *)v350 + v362;
        ++v332;
      }
      while (v332 != v331);
      v445.f64[0] = v334;
      v444.f64[0] = v333;
      a1 = v421;
      v322 = v422;
    }
    if (*(_QWORD *)&v333 != *(_QWORD *)&v335)
    {
      v363 = (_OWORD *)(*(_QWORD *)&v335 - 32);
      if ((unint64_t)(*(_QWORD *)&v335 - 32) > *(_QWORD *)&v333)
      {
        v364 = *(_QWORD *)&v333 + 32;
        do
        {
          v365 = *(_OWORD *)(v364 - 32);
          v366 = *(_OWORD *)(v364 - 16);
          v367 = v363[1];
          *(_OWORD *)(v364 - 32) = *v363;
          *(_OWORD *)(v364 - 16) = v367;
          *v363 = v365;
          v363[1] = v366;
          v363 -= 2;
          v368 = v364 >= (unint64_t)v363;
          v364 += 32;
        }
        while (!v368);
      }
    }
    v369 = (_QWORD *)(*((_QWORD *)&v440 + 1) - 8);
    if ((_QWORD)v440 != *((_QWORD *)&v440 + 1) && (unint64_t)v369 > (unint64_t)v440)
    {
      v371 = v440 + 8;
      do
      {
        v372 = *(_QWORD *)(v371 - 8);
        *(_QWORD *)(v371 - 8) = *v369;
        *v369-- = v372;
        v368 = v371 >= (unint64_t)v369;
        v371 += 8;
      }
      while (!v368);
    }
    if (*(_QWORD *)&v335 >= *(_QWORD *)&v445.f64[0])
    {
      v374 = (uint64_t)(*(_QWORD *)&v335 - *(_QWORD *)&v333) >> 5;
      v375 = v374 + 1;
      if ((unint64_t)(v374 + 1) >> 59)
        goto LABEL_400;
      v376 = *(_QWORD *)&v445.f64[0] - *(_QWORD *)&v333;
      if ((uint64_t)(*(_QWORD *)&v445.f64[0] - *(_QWORD *)&v333) >> 4 > v375)
        v375 = v376 >> 4;
      if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFE0)
        v377 = 0x7FFFFFFFFFFFFFFLL;
      else
        v377 = v375;
      if (v377)
        v377 = (unint64_t)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv4_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v377);
      else
        v378 = 0;
      v379 = (__n128 *)(v377 + 32 * v374);
      *v379 = (__n128)a5;
      v379[1] = (__n128)a6;
      *(_QWORD *)&v373 = v379[2].n128_f64;
      while (*(_QWORD *)&v335 != *(_QWORD *)&v333)
      {
        v380 = *(__n128 *)(*(_QWORD *)&v335 - 32);
        v381 = *(__n128 *)(*(_QWORD *)&v335 - 16);
        *(_QWORD *)&v335 -= 32;
        v379[-2] = v380;
        v379[-1] = v381;
        v379 -= 2;
      }
      *(_QWORD *)&v444.f64[0] = v379;
      v444.f64[1] = v373;
      *(_QWORD *)&v445.f64[0] = v377 + 32 * v378;
      if (v333 != 0.0)
        operator delete(*(void **)&v333);
    }
    else
    {
      **(_OWORD **)&v335 = a5;
      *(float64x2_t *)(*(_QWORD *)&v335 + 16) = a6;
      *(_QWORD *)&v373 = *(_QWORD *)&v335 + 32;
    }
    v444.f64[1] = v373;
    v382 = (char *)*((_QWORD *)&v440 + 1);
    if (*((_QWORD *)&v440 + 1) < (unint64_t)v441)
    {
      **((_QWORD **)&v440 + 1) = v322;
      v383 = v382 + 8;
      goto LABEL_346;
    }
    v384 = (char *)v440;
    v385 = (uint64_t)(*((_QWORD *)&v440 + 1) - v440) >> 3;
    v386 = v385 + 1;
    if (!((unint64_t)(v385 + 1) >> 61))
    {
      v387 = (uint64_t)&v441[-v440];
      if ((uint64_t)&v441[-v440] >> 2 > v386)
        v386 = v387 >> 2;
      if ((unint64_t)v387 >= 0x7FFFFFFFFFFFFFF8)
        v388 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v388 = v386;
      if (v388)
      {
        v389 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v441, v388);
        v382 = (char *)*((_QWORD *)&v440 + 1);
        v384 = (char *)v440;
      }
      else
      {
        v389 = 0;
      }
      v390 = &v389[8 * v385];
      v391 = &v389[8 * v388];
      *(_QWORD *)v390 = v322;
      v383 = v390 + 8;
      while (v382 != v384)
      {
        v392 = *((_QWORD *)v382 - 1);
        v382 -= 8;
        *((_QWORD *)v390 - 1) = v392;
        v390 -= 8;
      }
      *(_QWORD *)&v440 = v390;
      *((_QWORD *)&v440 + 1) = v383;
      v441 = v391;
      if (v384)
        operator delete(v384);
LABEL_346:
      *((_QWORD *)&v440 + 1) = v383;
      v438 = 0uLL;
      v393 = *(std::__shared_weak_count **)(a2 + 32);
      if (v393)
      {
        v394 = std::__shared_weak_count::lock(v393);
        *((_QWORD *)&v438 + 1) = v394;
        if (v394)
        {
          v395 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)&v438 = v395;
          goto LABEL_351;
        }
      }
      else
      {
        v394 = 0;
      }
      v395 = 0;
LABEL_351:
      _ZNSt3__115allocate_sharedB8nn180100I21_UIRTreeContainerNodeImENS_9allocatorIS2_EEJNS_10shared_ptrIS2_EENS_6vectorImNS3_ImEEEENS7_IDv4_dNS3_ISA_EEEEEvEENS5_IT_EERKT0_DpOT1_((uint64_t *)&v439, v395, v394, &v440, (__int128 *)&v444);
      if (v394)
      {
        v396 = (unint64_t *)&v394->__shared_owners_;
        do
          v397 = __ldaxr(v396);
        while (__stlxr(v397 - 1, v396));
        if (!v397)
        {
          ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
          std::__shared_weak_count::__release_weak(v394);
        }
      }
      v436 = 0;
      v437 = 0;
      v398 = *(std::__shared_weak_count **)(a2 + 32);
      if (v398 && (v437 = std::__shared_weak_count::lock(v398)) != 0)
      {
        v399 = *(_QWORD *)(a2 + 24);
        v436 = v399;
      }
      else
      {
        v399 = 0;
      }
      v435 = v439;
      if (*((_QWORD *)&v439 + 1))
      {
        v400 = (unint64_t *)(*((_QWORD *)&v439 + 1) + 8);
        do
          v401 = __ldxr(v400);
        while (__stxr(v401 + 1, v400));
      }
      v402 = (std::__shared_weak_count *)a4[1];
      v433 = *a4;
      v434 = v402;
      if (v402)
      {
        v403 = (unint64_t *)&v402->__shared_owners_;
        do
          v404 = __ldxr(v403);
        while (__stxr(v404 + 1, v403));
      }
      _UIRTreeContainerNode<unsigned long>::addContainer(&v438, v399, (uint64_t *)&v435, &v433);
      std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::operator=[abi:nn180100]((uint64_t)a4, &v438);
      v405 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
      if (*((_QWORD *)&v438 + 1))
      {
        v406 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
        do
          v407 = __ldaxr(v406);
        while (__stlxr(v407 - 1, v406));
        if (!v407)
        {
          ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
          std::__shared_weak_count::__release_weak(v405);
        }
      }
      v408 = v434;
      if (v434)
      {
        v409 = (unint64_t *)&v434->__shared_owners_;
        do
          v410 = __ldaxr(v409);
        while (__stlxr(v410 - 1, v409));
        if (!v410)
        {
          ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
          std::__shared_weak_count::__release_weak(v408);
        }
      }
      v411 = (std::__shared_weak_count *)*((_QWORD *)&v435 + 1);
      if (*((_QWORD *)&v435 + 1))
      {
        v412 = (unint64_t *)(*((_QWORD *)&v435 + 1) + 8);
        do
          v413 = __ldaxr(v412);
        while (__stlxr(v413 - 1, v412));
        if (!v413)
        {
          ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
          std::__shared_weak_count::__release_weak(v411);
        }
      }
      v414 = v437;
      if (v437)
      {
        v415 = (unint64_t *)&v437->__shared_owners_;
        do
          v416 = __ldaxr(v415);
        while (__stlxr(v416 - 1, v415));
        if (!v416)
        {
          ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
          std::__shared_weak_count::__release_weak(v414);
        }
      }
      _UIRTreeContainerNode<unsigned long>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)a2);
      v417 = (std::__shared_weak_count *)*((_QWORD *)&v439 + 1);
      if (*((_QWORD *)&v439 + 1))
      {
        v418 = (unint64_t *)(*((_QWORD *)&v439 + 1) + 8);
        do
          v419 = __ldaxr(v418);
        while (__stlxr(v419 - 1, v418));
        if (!v419)
        {
          ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
          std::__shared_weak_count::__release_weak(v417);
        }
      }
      if ((_QWORD)v440)
      {
        *((_QWORD *)&v440 + 1) = v440;
        operator delete((void *)v440);
      }
      if (*(_QWORD *)&v444.f64[0])
        operator delete(*(void **)&v444.f64[0]);
      v58 = *(double *)&v442;
      if (!(_QWORD)v442)
        goto LABEL_68;
      *((_QWORD *)&v442 + 1) = v442;
LABEL_67:
      operator delete(*(void **)&v58);
      goto LABEL_68;
    }
LABEL_400:
    abort();
  }
  v72 = *(__n128 **)(a2 + 96);
  v71 = *(_QWORD *)(a2 + 104);
  if ((unint64_t)v72 >= v71)
  {
    v74 = *(_QWORD *)(a2 + 88);
    v75 = ((uint64_t)v72 - v74) >> 5;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 59)
      goto LABEL_401;
    v77 = v71 - v74;
    if (v77 >> 4 > v76)
      v76 = v77 >> 4;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFE0)
      v78 = 0x7FFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    if (v78)
      v78 = (unint64_t)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv4_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v78);
    else
      v79 = 0;
    v256 = (__n128 *)(v78 + 32 * v75);
    v257 = v78 + 32 * v79;
    *v256 = (__n128)a5;
    v256[1] = (__n128)a6;
    v73 = v256 + 2;
    v259 = *(__n128 **)(a2 + 88);
    v258 = *(__n128 **)(a2 + 96);
    if (v258 != v259)
    {
      do
      {
        v260 = v258[-2];
        v261 = v258[-1];
        v258 -= 2;
        v256[-2] = v260;
        v256[-1] = v261;
        v256 -= 2;
      }
      while (v258 != v259);
      v258 = *(__n128 **)(a2 + 88);
    }
    *(_QWORD *)(a2 + 88) = v256;
    *(_QWORD *)(a2 + 96) = v73;
    *(_QWORD *)(a2 + 104) = v257;
    if (v258)
      operator delete(v258);
  }
  else
  {
    *v72 = (__n128)a5;
    v72[1] = (__n128)a6;
    v73 = v72 + 2;
  }
  v262 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 96) = v73;
  v263 = *(char **)(a2 + 72);
  if ((unint64_t)v263 >= v262)
  {
    v265 = *(char **)(a2 + 64);
    v266 = (v263 - v265) >> 3;
    v267 = v266 + 1;
    if ((unint64_t)(v266 + 1) >> 61)
      goto LABEL_401;
    v268 = v262 - (_QWORD)v265;
    if (v268 >> 2 > v267)
      v267 = v268 >> 2;
    if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8)
      v269 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v269 = v267;
    if (v269)
    {
      v270 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a2 + 80, v269);
      v265 = *(char **)(a2 + 64);
      v263 = *(char **)(a2 + 72);
    }
    else
    {
      v270 = 0;
    }
    v271 = &v270[8 * v266];
    v272 = &v270[8 * v269];
    *(_QWORD *)v271 = a3;
    v264 = v271 + 8;
    while (v263 != v265)
    {
      v273 = *((_QWORD *)v263 - 1);
      v263 -= 8;
      *((_QWORD *)v271 - 1) = v273;
      v271 -= 8;
    }
    *(_QWORD *)(a2 + 64) = v271;
    *(_QWORD *)(a2 + 72) = v264;
    *(_QWORD *)(a2 + 80) = v272;
    if (v265)
      operator delete(v265);
  }
  else
  {
    *(_QWORD *)v263 = a3;
    v264 = v263 + 8;
  }
  *(_QWORD *)(a2 + 72) = v264;
  _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v432, a2);
  v274 = vaddq_f64(a5, a6);
  v275 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(vaddq_f64(v432[0], v432[1]), v274), (int8x16_t)vcgeq_f64(a5, v432[0]));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v275, 1), (int8x16_t)v275).u64[0] & 0x8000000000000000) == 0)
  {
    v276 = *(float64x2_t *)(a2 + 112);
    v277 = vaddq_f64(v276, *(float64x2_t *)(a2 + 128));
    v278 = vminnmq_f64(v276, a5);
    *(float64x2_t *)(a2 + 112) = v278;
    *(float64x2_t *)(a2 + 128) = vsubq_f64(vmaxnmq_f64(v277, v274), v278);
    v444 = 0uLL;
    v279 = *(std::__shared_weak_count **)(a2 + 32);
    if (v279)
    {
      v279 = std::__shared_weak_count::lock(v279);
      v280 = v279;
      *(_QWORD *)&v444.f64[1] = v279;
      if (v279)
      {
        v279 = *(std::__shared_weak_count **)(a2 + 24);
        *(_QWORD *)&v444.f64[0] = v279;
      }
    }
    else
    {
      v280 = 0;
    }
    _UIRTreeContainerNode<unsigned long>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)v279);
    if (v280)
    {
      v281 = (unint64_t *)&v280->__shared_owners_;
      do
        v282 = __ldaxr(v281);
      while (__stlxr(v282 - 1, v281));
      if (!v282)
      {
        ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
        v28 = v280;
        goto LABEL_29;
      }
    }
  }
LABEL_68:
  result = *(__n128 *)a4;
  *a1 = *(_OWORD *)a4;
  *a4 = 0;
  a4[1] = 0;
  return result;
}

void sub_1852EF6F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::~shared_ptr[abi:nn180100](v1 - 144);
  _Unwind_Resume(a1);
}

BOOL _UIRTreeContainerNode<unsigned long>::isFull(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int isRoot;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 40);
  v1 = *(_QWORD *)(a1 + 48);
  if (v1 == v2)
  {
    isRoot = _UIRTreeContainerNode<unsigned long>::isRoot(a1);
    v6 = 72;
    if (isRoot)
      v6 = 48;
    v7 = 64;
    if (isRoot)
      v7 = 40;
    v3 = 3;
    if (isRoot)
      v3 = 4;
    v1 = *(_QWORD *)(a1 + v6);
    v2 = *(_QWORD *)(a1 + v7);
  }
  else
  {
    v3 = 4;
  }
  return (unint64_t)((v1 - v2) >> v3) > 0xFF;
}

void _UIRTreeContainerNode<unsigned long>::invalidateBoundingFrameAndNotifyParents(int64x2_t *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  a1[8].i64[0] = 0;
  a1[8].i64[1] = 0;
  a1[7] = vdupq_n_s64(0x7FF8000000000000uLL);
  v2 = (std::__shared_weak_count *)a1[2].i64[0];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v5 = v3;
      v6 = a1[1].i64[1];
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v9 = (std::__shared_weak_count *)a1[2].i64[0];
      if (v9)
      {
        v9 = std::__shared_weak_count::lock(v9);
        v10 = v9;
        if (v9)
          v9 = (std::__shared_weak_count *)a1[1].i64[1];
      }
      else
      {
        v10 = 0;
      }
      _UIRTreeContainerNode<unsigned long>::invalidateBoundingFrameAndNotifyParents(v9, v4);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
}

void sub_1852EF9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __destructor_8_sb0_AB8s24n1_S_sb8_sb16_AE(id *a1)
{

}

void sub_1852EFBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *shared_weak_owners;
  std::__shared_weak_count *v12;
  void *v13;
  va_list va;

  va_start(va, a6);
  v9 = v7[5].__vftable;
  if (v9)
  {
    v7[5].__shared_owners_ = (uint64_t)v9;
    operator delete(v9);
  }
  v10 = v7[4].__vftable;
  if (v10)
  {
    v7[4].__shared_owners_ = (uint64_t)v10;
    operator delete(v10);
  }
  std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  shared_weak_owners = (std::__shared_weak_count *)v7[2].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  v12 = (std::__shared_weak_count *)v7[2].__vftable;
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  std::__shared_weak_count::~__shared_weak_count(v7);
  operator delete(v13);

  _Unwind_Resume(a1);
}

void _UIRTreeContainerNode<unsigned long>::commonInit(int64x2_t *a1)
{
  float64x2_t *v2;
  char *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16[2];

  a1[8].i64[0] = 0;
  a1[8].i64[1] = 0;
  a1[7] = vdupq_n_s64(0x7FF8000000000000uLL);
  v2 = (float64x2_t *)a1[5].i64[1];
  v3 = (char *)a1[6].i64[0];
  if ((v3 - (char *)v2) >> 5 != (a1[4].i64[1] - a1[4].i64[0]) >> 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIRTreeContainerNode<>::commonInit() [T = unsigned long]");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("_UIRTree.mm"), 206, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("_childFrames.size() == _childElements.size()"));

    v2 = (float64x2_t *)a1[5].i64[1];
    v3 = (char *)a1[6].i64[0];
  }
  if (v2 == (float64x2_t *)v3)
  {
    v9 = (uint64_t *)a1[2].i64[1];
    v10 = (uint64_t *)a1[3].i64[0];
    if (v9 == v10)
      return;
    v4 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v5 = 0uLL;
    do
    {
      v14 = v5;
      v15 = v4;
      v11 = *v9;
      v9 += 2;
      _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v16, v11);
      v4 = vminnmq_f64(v15, v16[0]);
      v5 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v15, v14), vaddq_f64(v16[0], v16[1])), v4);
    }
    while (v9 != v10);
  }
  else
  {
    v4 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v5 = 0uLL;
    do
    {
      v7 = *v2;
      v6 = v2[1];
      v2 += 2;
      v8 = vaddq_f64(v4, v5);
      v4 = vminnmq_f64(v4, v7);
      v5 = vsubq_f64(vmaxnmq_f64(v8, vaddq_f64(v7, v6)), v4);
    }
    while (v2 != (float64x2_t *)v3);
  }
  a1[7] = (int64x2_t)v4;
  a1[8] = (int64x2_t)v5;
}

void sub_1852EFD60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void _UIOrderedRangeIndexerImpl::appendRange(_UIOrderedRangeIndexerImpl *this, _NSRange a2)
{
  NSUInteger length;
  NSUInteger location;
  NSUInteger *v5;
  NSUInteger *v6;
  NSUInteger v7;
  unint64_t v8;
  _QWORD *v9;
  NSUInteger *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  NSUInteger *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  length = a2.length;
  location = a2.location;
  if (a2.location == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIOrderedRangeIndexerImpl::appendRange(NSRange)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("_UIOrderedRangeIndexer.mm"), 110, CFSTR("Attempted to insert an invalid range (location == NSNotFound)"));

  }
  v5 = *(NSUInteger **)this;
  v6 = (NSUInteger *)*((_QWORD *)this + 1);
  if (*(NSUInteger **)this == v6)
  {
    *((_QWORD *)this + 3) = location;
    v6 = v5;
    v7 = length;
  }
  else
  {
    if (location < *(v6 - 1) + *(v6 - 2))
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIOrderedRangeIndexerImpl::appendRange(NSRange)");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("_UIOrderedRangeIndexer.mm"), 114, CFSTR("Attempted to append a range that does not follow the preceeding range."));

      v6 = (NSUInteger *)*((_QWORD *)this + 1);
    }
    v7 = location + length - *((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v7;
  v8 = *((_QWORD *)this + 2);
  if ((unint64_t)v6 >= v8)
  {
    v10 = *(NSUInteger **)this;
    v11 = ((uint64_t)v6 - *(_QWORD *)this) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = (char *)operator new(16 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (NSUInteger *)&v15[16 * v11];
    *v16 = location;
    v16[1] = length;
    v9 = v16 + 2;
    if (v6 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v6 - 1);
        v16 -= 2;
        v6 -= 2;
      }
      while (v6 != v10);
      v6 = *(NSUInteger **)this;
    }
    *(_QWORD *)this = v16;
    *((_QWORD *)this + 1) = v9;
    *((_QWORD *)this + 2) = &v15[16 * v14];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = location;
    v6[1] = length;
    v9 = v6 + 2;
  }
  *((_QWORD *)this + 1) = v9;
}

void sub_1852F0060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1852F0434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void stateMachineSpec_block_invoke_11(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  _queue_compatibilityRecord(a1[4], a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1852F4808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _queue_compatibilityRecord(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;

  _eventDeferringCompatibilityQueue();
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v4);

  _queue_compatibilityRecordsForDisplay(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "objectForKey:", a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id _queue_compatibilityRecordsForDisplay(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;

  _eventDeferringCompatibilityQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v2);

  _queue_compatibilityRecords();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _eventDeferringCompatibilityQueue()
{
  if (qword_1ECD7CF80 != -1)
    dispatch_once(&qword_1ECD7CF80, &__block_literal_global_103);
  return (id)_MergedGlobals_986;
}

id _queue_compatibilityRecords()
{
  NSObject *v0;
  void *v1;
  uint64_t v2;
  void *v3;

  _eventDeferringCompatibilityQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v0);

  v1 = (void *)_compatibilityDeferringRecords;
  if (!_compatibilityDeferringRecords)
  {
    v2 = objc_opt_new();
    v3 = (void *)_compatibilityDeferringRecords;
    _compatibilityDeferringRecords = v2;

    v1 = (void *)_compatibilityDeferringRecords;
  }
  return v1;
}

double _possibleTopViewsHeightBasedOnContentOffsetForScrollView(void *a1, void *a2)
{
  id v3;
  id v4;
  _BYTE *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = v5;
  if (v5[1260]
    && (objc_msgSend(v5, "_existingView"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v8 = objc_msgSend(v7, "_usesMinimumSafeAreas"),
        v7,
        v8))
  {
    objc_msgSend(v6, "_existingView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_minimumSafeAreaInsets");
    v11 = v10;

  }
  else
  {
    objc_msgSend(v6, "_contentOverlayInsets");
    v11 = v12;
  }

  objc_msgSend(v4, "adjustedContentInset");
  if (v11 >= v13)
    v11 = v13;
  objc_msgSend(v4, "_contentOffsetOrDeferredContentOffset");
  v15 = -v14 - v11;
  objc_msgSend(v6, "_heightRangeOfTopViews");
  if (v15 < v16)
  {
    v17 = v16;
    objc_msgSend(v4, "_allowedNavigationOverlapAmount");
    v19 = v15 + v18;
    if (v15 + v18 >= v17)
      v19 = v17;
    if (v18 > 0.0)
      v15 = v19;
  }

  return v15;
}

void sub_1852F6F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_1852F8B20(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1852F8B34(void *a1)
{
  char v1;

  objc_begin_catch(a1);
  if ((v1 & 1) != 0)
    JUMPOUT(0x1852F8B00);
  JUMPOUT(0x1852F8AF4);
}

void sub_1852F9908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL UICollectionLayoutListConfiguration._sectionHeaderHugsContent.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_contentHuggingElements) == (id)1;
}

void _UILoadDefaultSpringParameters()
{
  void *v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  id v17;

  if (os_variant_has_internal_diagnostics() && (_UIViewDefaultSpringIgnoreUserDefaults & 1) == 0)
  {
    _UIKitUserDefaults();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "objectForKey:", CFSTR("DefaultSpringParameters"));
    v17 = (id)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("mass"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "doubleValue");
      v3 = v2;

      v4 = 3.0;
      if (v3 > 0.0)
        v4 = v3;
      _UIViewDefaultSpringMass = *(_QWORD *)&v4;
      objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("stiffness"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "doubleValue");
      v7 = v6;

      v8 = 1000.0;
      if (v7 > 0.0)
        v8 = v7;
      _UIViewDefaultSpringStiffness = *(_QWORD *)&v8;
      objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("damping"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "doubleValue");
      v11 = v10;

      v12 = 500.0;
      if (v11 > 0.0)
        v12 = v11;
      _UIViewDefaultSpringDamping = *(_QWORD *)&v12;
      objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("duration"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "doubleValue");
      v15 = v14;

      v16 = 0.5;
      if (v15 > 0.0)
        v16 = v15;
      _UIViewDefaultSpringDuration = *(_QWORD *)&v16;
    }

  }
}

void sub_1852FAABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void mapTrackedAnimations(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id obj;
  uint64_t (**v22)(id, void *, void *, void *, void *);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v22 = a2;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  objc_msgSend((id)qword_1EDDCA650, "objectForKeyedSubscript:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v18)
  {
    v4 = *(_QWORD *)v28;
    v20 = v3;
    v17 = *(_QWORD *)v28;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v28 != v4)
          objc_enumerationMutation(v3);
        v19 = v5;
        v6 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v5);
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        objc_msgSend(v6, "_trackedAnimations", v17);
        obj = (id)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)v24;
          while (2)
          {
            for (i = 0; i != v8; ++i)
            {
              if (*(_QWORD *)v24 != v9)
                objc_enumerationMutation(obj);
              v11 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
              objc_getAssociatedObject(v11, &unk_1EDDCA604);
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              objc_getAssociatedObject(v11, &unk_1EDDCA603);
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "animationForKey:", v13);
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              v15 = v14;
              if (!v14
                || (objc_msgSend(v14, "delegate"),
                    v16 = (void *)objc_claimAutoreleasedReturnValue(),
                    v16,
                    v16 == v6))
              {
                if ((v22[2](v22, v6, v11, v12, v13) & 1) != 0)
                {

                  v3 = v20;
                  goto LABEL_20;
                }
              }

            }
            v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
            if (v8)
              continue;
            break;
          }
        }

        v5 = v19 + 1;
        v3 = v20;
        v4 = v17;
      }
      while (v19 + 1 != v18);
      v18 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v18);
  }
LABEL_20:

}

void _durationOfSpringAnimation(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  long double v11;
  double v12;

  v4 = sqrt(a1 * a2);
  v5 = fmax(a3 / (v4 + v4), 0.0);
  if (fmin(v5, 1.0) != 0.0)
  {
    v6 = sqrt(a2 / a1);
    if (v5 >= 1.0)
    {
      v10 = v6 - a4;
      v11 = exp(-v6 / (v6 - a4));
      v12 = -1.0 - log(fabs(v6 * v11 * 0.001 / v10));
      exp(sqrt(v12) * -0.0201);
    }
    else
    {
      v7 = v6 * sqrt(1.0 - v5 * v5);
      v8 = v6 * v5;
      v9 = fabs((v8 - a4) / v7);
      if (v9 >= 0.00000011920929)
        fmax(-log(0.001 / (v9 + 1.0)) / v8, 0.0);
    }
  }
}

uint64_t __modifyTrackedAnimationsWithFactory_block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  objc_msgSend(v11, "animationForKey:", v12);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
    {
      (*(void (**)(uint64_t, id, id, id))(v14 + 16))(v14, v13, v12, v11);
      v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v15 = v13;
    }
    v17 = v15;
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v18 = v17;

    if ((v16 & 1) == 0 && v18 != v13)
    {
      objc_msgSend(v18, "setRemovedOnCompletion:", *(unsigned __int8 *)(a1 + 48));
      objc_msgSend(v9, "_incrementDidEndCount");
      objc_msgSend(v11, "addAnimation:forKey:", v18, v12);
    }

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_1852FDB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _IsKindOfUITableViewCell(void *a1)
{
  uint64_t v1;
  id v2;
  char isKindOfClass;

  v1 = qword_1EDDB0AA0;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1EDDB0AA0, &__block_literal_global_2888);
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void _UITouchSetBasicTouchPropertiesFromEvent(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id *v7;
  id v8;
  void *v9;
  uint64_t IntegerValue;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  id v17;
  int v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  _BOOL8 v49;
  void *v50;
  void *v51;
  int v52;
  int v53;
  int v54;
  int Phase;
  __int16 v56;
  _BOOL4 v57;
  BOOL v58;
  id v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  objc_msgSend(v7, "_setHidEvent:", a4);
  BKSHIDEventGetDigitizerAttributes();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  IntegerValue = IOHIDEventGetIntegerValue();
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  objc_msgSend(v9, "pathAttributes");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v60, v64, 16);
  if (v12)
  {
    v13 = v12;
    v59 = v8;
    v14 = *(_QWORD *)v61;
    while (2)
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v61 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
        if (objc_msgSend(v16, "pathIndex") == IntegerValue)
        {
          v17 = v16;
          goto LABEL_11;
        }
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v60, v64, 16);
      if (v13)
        continue;
      break;
    }
    v17 = 0;
LABEL_11:
    v8 = v59;
  }
  else
  {
    v17 = 0;
  }

  v18 = objc_msgSend(v17, "touchIdentifier");
  if (v7)
  {
    *((_DWORD *)v7 + 14) = v18;
    objc_msgSend(v17, "authenticationMessage");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v7 + 48, v19);
  }
  else
  {
    objc_msgSend(v17, "authenticationMessage");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }

  objc_msgSend(v17, "securityAnalysis");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITouch _setHitTestSecurityAnalysis:]((uint64_t)v7, v20);

  objc_msgSend(v7, "_setPathIndex:", _UIEventHIDPathIndexForDigitizerEvent());
  objc_msgSend(v7, "_setPathIdentity:", IOHIDEventGetIntegerValue());
  objc_msgSend(v8, "_touchRadiusScaleFactor");
  v22 = v21;
  IOHIDEventGetFloatValue();
  v24 = v22 * v23;
  IOHIDEventGetFloatValue();
  v26 = v25;
  if (v24 <= 0.0 && IOHIDEventGetIntegerValue())
  {
    objc_msgSend(v8, "scale");
    v24 = 0.5 / v27;
  }
  if (v7)
  {
    *((double *)v7 + 25) = v24;
    *((double *)v7 + 26) = v22 * v26;
  }
  if (IOHIDEventGetIntegerValue())
  {
    if (objc_msgSend((id)UIApp, "_supportsIndirectInputEvents")
      && (v28 = _UIEventHIDGetDescendantPointerEvent(a3)) != 0)
    {
      if (_UIEventHIDGetPointerEventSource(v28) == 4)
        v29 = 0;
      else
        v29 = 3;
    }
    else
    {
      v29 = IOHIDEventGetIntegerValue() == 0;
    }
  }
  else
  {
    v29 = 2;
  }
  objc_msgSend(v7, "_setType:", v29);
  v30 = IOHIDEventGetIntegerValue();
  v31 = IOHIDEventGetIntegerValue();
  v32 = IOHIDEventGetIntegerValue();
  if (v7)
  {
    v33 = (v31 >> 10) & 1;
    if (!v32)
      LOBYTE(v33) = 0;
    v34 = (v30 >> 10) & 1;
    if (!v32)
      v34 = 0;
    *((_BYTE *)v7 + 265) = v34;
    *((_BYTE *)v7 + 266) = v33;
    v35 = (v30 >> 23) & 1;
    if (!v32)
      v35 = 0;
    v36 = (v31 >> 23) & 1;
    if (!v32)
      LOBYTE(v36) = 0;
    *((_BYTE *)v7 + 268) = v35;
    *((_BYTE *)v7 + 269) = v36;
    if (v34 | v35)
      v37 = v32;
    else
      v37 = 0;
    v7[35] = (id)v37;
  }
  objc_msgSend(v7, "_setSenderID:", IOHIDEventGetSenderID());
  objc_msgSend(v17, "zGradient");
  objc_msgSend(v7, "_setZGradient:");
  v38 = a3;
  if (a4)
  {
    if (IOHIDEventGetIntegerValue() == 11)
      v38 = a4;
    else
      v38 = a3;
  }
  v39 = objc_msgSend(v7, "type");
  if (objc_msgSend(v7, "_isPointerTouch"))
    v40 = 3;
  else
    v40 = v39;
  v41 = _UIEventHIDGetMaxForceForDigitizerEvent(v38, v40);
  if (v7)
    *((double *)v7 + 36) = v41;
  objc_msgSend(v7, "_setEdgeType:", _UIEventHIDTouchEdgeTypeForHIDEvent());
  objc_msgSend(v7, "_setEdgeAim:", ((unint64_t)IOHIDEventGetIntegerValue() >> 24) & 0xF);
  v42 = _UIEventHIDGetDescendantPointerEvent(a3);
  v43 = (unint64_t)_UIEventHIDGetChildStylusEvent(a3);
  if (v7)
  {
    v44 = 1;
    if (v43 | v42)
      v44 = 2;
    v7[6] = (id)v44;
  }
  v45 = _UIEventHIDGetDescendantPointerEvent(a3);
  if (v45)
  {
    v46 = v45;
    objc_msgSend(v7, "_setPointerSenderID:", IOHIDEventGetSenderID());
    if (_UIEventGetForceEvent(v46))
      objc_msgSend(v7, "_setForceStage:", IOHIDEventGetIntegerValue());
    BKSHIDEventGetPointerAttributes();
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = v47;
    v49 = v47
       && objc_msgSend(v47, "source") == 12
       && !objc_msgSend(v48, "fingerDownCount")
       && objc_msgSend(v7, "phase") < 5;
    objc_msgSend(v7, "_setIsTapToClick:", v49);
    objc_msgSend(v48, "hitTestSecurityAnalysis");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    if (v50)
      -[UITouch _setHitTestSecurityAnalysis:]((uint64_t)v7, v50);

  }
  BKSHIDEventGetBaseAttributes();
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = objc_msgSend(v51, "source");

  if (v52 == 12)
    objc_msgSend(v7, "_setIsRestingTouch:", ((unint64_t)IOHIDEventGetIntegerValue() >> 9) & 1);
  v53 = _UIApplicationSupportsGlobalEdgeSwipeTouches();
  if (v7)
  {
    if (v53)
    {
      v54 = _UIApplicationSupportsGlobalEdgeSwipeTouches();
      if (a4)
      {
        if (v54)
        {
          Phase = IOHIDEventGetPhase();
          v56 = *((_WORD *)v7 + 118);
          v57 = (v56 & 0x2000) == 0;
          if (Phase == 128)
            v57 = 1;
          if (!v57)
            v56 |= 0x4000u;
          *((_WORD *)v7 + 118) = v56 & 0xDFFF | ((Phase == 128) << 13);
        }
      }
    }
  }
  v58 = (_UIEventHIDShouldIgnoreEventsExpectedToBecomeDragEvent() & 1) == 0 && _UIEventHIDExpectedToBecomeDragEvent();
  if (v7)
    *((_BYTE *)v7 + 270) = v58;

}

uint64_t _UIEventHIDGetDescendantPointerEvent(uint64_t a1)
{
  uint64_t v1;
  const __CFArray *Children;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  uint64_t v8;

  v1 = a1;
  if (a1 && IOHIDEventGetType() != 17)
  {
    Children = (const __CFArray *)IOHIDEventGetChildren();
    if (Children && (v3 = Children, Count = CFArrayGetCount(Children), Count >= 1))
    {
      v5 = Count;
      v6 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
        v8 = _UIEventHIDGetDescendantPointerEvent(ValueAtIndex);
        if (v8)
          break;
        if (v5 == ++v6)
          return 0;
      }
      return v8;
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void ___hoverEventMemoryFilter_block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v4;
  const __CFArray *Children;
  const __CFArray *v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;

  BKSHIDEventGetDigitizerAttributes();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (IOHIDEventGetType() == 11 && (objc_msgSend(v4, "systemGestureStateChange") & 1) == 0)
  {
    Children = (const __CFArray *)IOHIDEventGetChildren();
    if (!Children)
      goto LABEL_22;
    v6 = Children;
    if (CFArrayGetCount(Children) < 1)
      goto LABEL_22;
    CFArrayGetValueAtIndex(v6, 0);
    BKSHIDEventGetDigitizerAttributes();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    _UIEventHIDPathAttributesForChild(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "locus");

    if (!v9)
    {
LABEL_22:
      if (_UIEventHIDShouldAllowHoverEventGeneration(a2))
      {
        v22 = 0;
        v23 = &v22;
        v24 = 0x2020000000;
        v25 = 0;
        v18 = 0;
        v19 = &v18;
        v20 = 0x2020000000;
        v21 = 1;
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3221225472;
        v17[2] = ___hoverEventMemoryFilter_block_invoke_3;
        v17[3] = &unk_1E16DF818;
        v17[4] = &v22;
        v17[5] = &v18;
        _UIEventHIDEnumerateChildren(a2, 11, v17);
        v10 = objc_msgSend(v4, "contextID");
        if (*((_BYTE *)v23 + 24) || !*((_BYTE *)v19 + 24))
        {
          v11 = *(_QWORD *)(a1 + 32);
          if (!v11)
          {
LABEL_12:
            _Block_object_dispose(&v18, 8);
            _Block_object_dispose(&v22, 8);
            goto LABEL_13;
          }
          v12 = *(void **)(v11 + 240);
        }
        else
        {
          v14 = *(_QWORD *)(a1 + 32);
          if (!v14)
            goto LABEL_12;
          v12 = *(void **)(v14 + 240);
          if (a2)
          {
            if (!v12)
            {
              v15 = objc_alloc_init(MEMORY[0x1E0C99E08]);
              v16 = *(void **)(v14 + 240);
              *(_QWORD *)(v14 + 240) = v15;

              v12 = *(void **)(v14 + 240);
            }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v10);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "setObject:forKey:", a2, v13);
            goto LABEL_11;
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v10);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "removeObjectForKey:", v13);
LABEL_11:

        goto LABEL_12;
      }
    }
  }
LABEL_13:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1853008B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185300CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Block_object_dispose((const void *)(v30 - 120), 8);
  _Unwind_Resume(a1);
}

void ___pencilRangeAndTouchingSeparationFilter_block_invoke_2(uint64_t a1, uint64_t a2)
{
  double v4;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  _UIEventHIDPencilMaximumPositionZForEvent(a2);
  if (v4 > 0.0)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = ___pencilRangeAndTouchingSeparationFilter_block_invoke_3;
    v5[3] = &unk_1E16DFB00;
    v5[4] = &v10;
    v5[5] = &v6;
    v5[6] = a2;
    _UIEventHIDEnumerateChildren(a2, 11, v5);
  }
  if (v11[3] || v7[3])
  {
    IOHIDEventGetIntegerValue();
    IOHIDEventSetIntegerValue();
    if (v11[3])
    {
      ___pencilRangeAndTouchingSeparationFilter_block_invoke_5();
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      CFRelease((CFTypeRef)v11[3]);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    if (v7[3])
    {
      ___pencilRangeAndTouchingSeparationFilter_block_invoke_5();
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      CFRelease((CFTypeRef)v7[3]);
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v10, 8);
}

void sub_185300EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventHIDShouldAllowHoverEventGeneration(uint64_t a1)
{
  double v1;
  uint64_t result;

  _UIEventHIDPencilMaximumPositionZForEvent(a1);
  if (v1 > 0.0)
    return 1;
  if (IOHIDEventGetSenderID() != 0x8000000800A15173)
    return 0;
  result = _UIEventHIDShouldTransformEvent();
  if ((_DWORD)result)
    return IOHIDEventGetIntegerValue() == 0;
  return result;
}

void _UIEventHIDPencilMaximumPositionZForEvent(uint64_t a1)
{
  void *v2;
  void *v3;

  if (_os_feature_enabled_impl()
    && IOHIDEventGetType() == 11
    && _UIEventHIDGetChildStylusEvent(a1)
    && IOHIDEventGetIntegerValue() != 11)
  {
    BKSHIDEventGetDigitizerAttributes();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v2, "maximumPositionZ");

    }
  }
}

const void *_UIEventHIDGetChildStylusEvent(uint64_t a1)
{
  const __CFArray *Children;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const void *ValueAtIndex;

  if (!a1)
    return 0;
  Children = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children)
    return 0;
  v2 = Children;
  Count = CFArrayGetCount(Children);
  if (Count < 1)
    return 0;
  v4 = Count;
  v5 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
    if (IOHIDEventGetType() == 11 && !IOHIDEventGetIntegerValue())
      break;
    if (v4 == ++v5)
      return 0;
  }
  return ValueAtIndex;
}

void ___iosMacEventExtractionFilter_block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "handleHIDEvent:", a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

}

void ___wakeOnTouchSynchronizationFilter_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _UIHIDEventSynchronizer *v11;
  void *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  _QWORD aBlock[4];
  id v22;
  uint8_t buf[16];

  if (IOHIDEventGetType() != 11)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    return;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = (id *)*(id *)(v4 + 248);
    if (v5)
    {
LABEL_10:
      v13 = qword_1ECD7A3D0;
      if (!qword_1ECD7A3D0)
      {
        v13 = __UILogCategoryGetNode("HIDEventSynchronization", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v13, (unint64_t *)&qword_1ECD7A3D0);
      }
      if ((*(_BYTE *)v13 & 1) != 0)
      {
        v14 = *(NSObject **)(v13 + 8);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "[UIEventFetcher] synchronization in progress, routing event via event synchronizer.", buf, 2u);
        }
      }
      if ((-[_UIHIDEventSynchronizer handleDigitizerEvent:]((uint64_t)v5, a2) & 1) != 0)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  if (_getTritiumVendorDefinedEvent(a2))
  {
    v6 = qword_1ECD7A3C8;
    if (!qword_1ECD7A3C8)
    {
      v6 = __UILogCategoryGetNode("HIDEventSynchronization", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&qword_1ECD7A3C8);
    }
    if ((*(_BYTE *)v6 & 1) != 0)
    {
      v15 = *(NSObject **)(v6 + 8);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_ERROR, "[UIEventFetcher] event stream requires synchronization.", buf, 2u);
      }
    }
    v7 = (void *)_UIHIDEventSynchronizationStrategyForEvent(a2);
    v8 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___wakeOnTouchSynchronizationFilter_block_invoke_89;
    aBlock[3] = &unk_1E16DFAD8;
    v22 = *(id *)(a1 + 32);
    v9 = _Block_copy(aBlock);
    v16 = v8;
    v17 = 3221225472;
    v18 = ___wakeOnTouchSynchronizationFilter_block_invoke_2_90;
    v19 = &unk_1E16B1B28;
    v20 = *(id *)(a1 + 32);
    v10 = _Block_copy(&v16);
    v11 = [_UIHIDEventSynchronizer alloc];
    objc_msgSend(MEMORY[0x1E0C99E58], "currentRunLoop", v16, v17, v18, v19);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[_UIHIDEventSynchronizer initWithStrategy:runLoop:outputEventsHandler:completionHandler:](v11, v7, v12, v9, v10);

    if (v5)
    {
      *((_DWORD *)v5 + 28) = 4;
      -[UIEventFetcher setSynchronizer:](*(_QWORD *)(a1 + 32), v5);

      goto LABEL_10;
    }
    -[UIEventFetcher setSynchronizer:](*(_QWORD *)(a1 + 32), 0);

  }
  else
  {
    v5 = 0;
  }
LABEL_17:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_18:

}

void _UIEventProfileCollectionSubmitEvent(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD v5[6];

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v2 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    v3 = _UIInternalPreference_LogNextEventInfoStats;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_LogNextEventInfoStats)
    {
      while (v2 >= v3)
      {
        _UIInternalPreferenceSync(v2, &_UIInternalPreference_LogNextEventInfoStats, (uint64_t)CFSTR("LogNextEventInfoStats"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
        v3 = _UIInternalPreference_LogNextEventInfoStats;
        if (v2 == _UIInternalPreference_LogNextEventInfoStats)
          goto LABEL_4;
      }
      if (byte_1ECD75F64)
      {
        v4 = mach_absolute_time();
        v5[0] = MEMORY[0x1E0C809B0];
        v5[1] = 3221225472;
        v5[2] = __logNextEventInfoStats_block_invoke;
        v5[3] = &__block_descriptor_48_e31_v32__0r____IOHIDEvent__8Q16_B24l;
        v5[4] = a1;
        v5[5] = v4;
        _UIEventHIDEnumerateChildren(a1, 1, v5);
      }
    }
  }
LABEL_4:
  if (_MergedGlobals_994)
    _ETPCollectionSubmitEvent(a1);
}

void ___dragEventExtractionFilter_block_invoke_2(uint64_t a1)
{
  const __CFArray *Children;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  void *v6;
  void *v7;
  CFIndex v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t Copy;
  void *v14;
  const __CFArray *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  int v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  _QWORD *v35;
  __CFRunLoopTimer *v36;
  const __CFAllocator *v37;
  CFRunLoopTimerRef v38;
  uint64_t v39;
  uint64_t v40;
  __CFRunLoop *v41;
  __CFRunLoopTimer *v42;
  uint64_t v43;
  uint64_t v44;
  CFIndex v45;
  void *v46;
  void *v47;
  const __CFArray *v48;
  _QWORD block[4];
  _QWORD *v50;
  _QWORD v51[4];
  id v52;
  id v53;

  if (IOHIDEventGetType() == 11 && (_UIEventHIDIgnoresDragEvents() & 1) == 0)
  {
    Children = (const __CFArray *)IOHIDEventGetChildren();
    v3 = Children;
    if (Children)
      Count = CFArrayGetCount(Children);
    else
      Count = 0;
    BKSHIDEventGetDigitizerAttributes();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    if (Count < 1)
      goto LABEL_42;
    v7 = 0;
    v8 = 0;
    v43 = a1;
    v44 = Count + 1;
    v46 = (void *)v5;
    v48 = v3;
    v45 = Count;
    do
    {
      CFArrayGetValueAtIndex(v3, v8);
      _UIEventHIDPathAttributesForChild(v6);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v9, "locus"))
      {
        v10 = objc_msgSend(v9, "userIdentifier");
        if (!v7)
          v7 = (void *)objc_opt_new();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "objectForKey:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12 || (Copy = IOHIDEventCreateCopy()) == 0)
        {
          v3 = v48;
        }
        else
        {
          v14 = (void *)Copy;
          v47 = v7;
          v15 = (const __CFArray *)IOHIDEventGetChildren();
          BKSHIDEventGetDigitizerAttributes();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = v44;
          do
          {
            CFArrayGetValueAtIndex(v15, v17 - 2);
            _UIEventHIDPathAttributesForChild(v16);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = objc_msgSend(v18, "userIdentifier");

            if (v19 != (_DWORD)v10)
              IOHIDEventRemoveEvent();
            --v17;
          }
          while (v17 > 1);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v10);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v7 = v47;
          objc_msgSend(v47, "setObject:forKey:", v14, v20);

          v6 = v46;
          v3 = v48;
          Count = v45;
        }
      }

      ++v8;
    }
    while (v8 != Count);
    a1 = v43;
    if (v7)
    {
      v21 = v7;
      v22 = 0;
      v23 = Count + 1;
      do
      {
        CFArrayGetValueAtIndex(v3, v23 - 2);
        _UIEventHIDPathAttributesForChild(v6);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "locus");

        if (v25)
        {
          IOHIDEventRemoveEvent();
        }
        else if (IOHIDEventGetType() == 11)
        {
          ++v22;
        }
        --v23;
      }
      while (v23 > 1);
      if (v22 > 0)
        (*(void (**)(void))(*(_QWORD *)(v43 + 40) + 16))();
      v26 = v21;
      if (objc_msgSend(v21, "count"))
      {
        v27 = *(_QWORD **)(v43 + 32);
        if (v27)
          v27 = (_QWORD *)v27[25];
        v28 = v27;
        v29 = MEMORY[0x1E0C809B0];
        v51[0] = MEMORY[0x1E0C809B0];
        v51[1] = 3221225472;
        v51[2] = ___dragEventExtractionFilter_block_invoke_3;
        v51[3] = &unk_1E16DFA38;
        v30 = v28;
        v52 = v30;
        v53 = *(id *)(v43 + 40);
        objc_msgSend(v21, "enumerateKeysAndObjectsUsingBlock:", v51);
        if ((_UIUpdateCycleEnabled() & 1) == 0)
        {
          v31 = CACurrentMediaTime();
          v32 = *(_QWORD *)(v43 + 32);
          if (v32)
            *(double *)(v32 + 208) = v31;
        }
        if (_UIUpdateCycleEnabled())
        {
          v33 = CFAbsoluteTimeGetCurrent() + 0.0333333333;
          v34 = v33 + -0.00416666667;
          v35 = *(_QWORD **)(v43 + 32);
          if (v35 && (v36 = (__CFRunLoopTimer *)v35[28]) != 0)
          {
            CFRunLoopTimerSetNextFireDate(v36, v33 + -0.00416666667);
          }
          else
          {
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            block[0] = v29;
            block[1] = 3221225472;
            block[2] = ___dragEventExtractionFilter_block_invoke_4;
            block[3] = &unk_1E16DFA60;
            v50 = v35;
            v38 = CFRunLoopTimerCreateWithHandler(v37, v34, 315360000.0, 0, 0, block);
            v39 = *(_QWORD *)(v43 + 32);
            if (v39 && (*(_QWORD *)(v39 + 224) = v38, (v40 = *(_QWORD *)(v43 + 32)) != 0))
            {
              v41 = *(__CFRunLoop **)(v40 + 16);
              v42 = *(__CFRunLoopTimer **)(v40 + 224);
            }
            else
            {
              v41 = 0;
              v42 = 0;
            }
            CFRunLoopAddTimer(v41, v42, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);

          }
        }

      }
    }
    else
    {
LABEL_42:
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      v26 = 0;
    }

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void ___grapeFingerOneStrokeMisinterpretationWorkaround_block_invoke_2(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int IntegerValue;
  uint64_t v5;
  const void *Copy;
  const __CFArray *Children;

  if (IOHIDEventGetType() == 11
    && (v2 = (const __CFArray *)IOHIDEventGetChildren()) != 0
    && (v3 = v2, CFArrayGetCount(v2) == 2)
    && (CFArrayGetValueAtIndex(v3, 0), CFArrayGetValueAtIndex(v3, 1), IOHIDEventGetType() == 11)
    && IOHIDEventGetType() == 11
    && (IntegerValue = IOHIDEventGetIntegerValue(), (IntegerValue & IOHIDEventGetIntegerValue() & 2) != 0)
    && (v5 = IOHIDEventGetIntegerValue(), v5 != IOHIDEventGetIntegerValue()))
  {
    Copy = (const void *)IOHIDEventCreateCopy();
    Children = (const __CFArray *)IOHIDEventGetChildren();
    CFArrayGetValueAtIndex(Children, 1);
    IOHIDEventRemoveEvent();
    IOHIDEventRemoveEvent();
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    CFRelease(Copy);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
}

uint64_t _getTritiumVendorDefinedEvent(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___getTritiumVendorDefinedEvent_block_invoke;
  v3[3] = &unk_1E16B1D90;
  v3[4] = &v4;
  _UIEventHIDEnumerateChildren(a1, 1, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1853023C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185302804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void _LogTouchLocationsIfNeeded(uint64_t a1, CGFloat *a2)
{
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  NSObject *v8;
  CGFloat v9;
  CGFloat v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  CGFloat v14;
  CGFloat v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  CGFloat v19;
  CGFloat v20;
  NSObject *v21;
  void *v22;
  int v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  void *v28;
  uint64_t v29;
  CGPoint v30;
  CGPoint v31;
  CGPoint v32;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (_BYTE *)qword_1ECD80028;
  if (!qword_1ECD80028)
  {
    v4 = (_BYTE *)(__UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v4, (unint64_t *)&qword_1ECD80028);
  }
  if ((*v4 & 1) != 0)
  {
    v5 = qword_1ECD80030;
    if (!qword_1ECD80030)
    {
      v5 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v5, (unint64_t *)&qword_1ECD80030);
    }
    if ((*(_BYTE *)v5 & 1) != 0)
    {
      v13 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = *a2;
        v15 = a2[1];
        v16 = v13;
        v31.x = v14;
        v31.y = v15;
        NSStringFromCGPoint(v31);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 136315650;
        v24 = "\t\t\t";
        v25 = 2080;
        v26 = a1;
        v27 = 2112;
        v28 = v17;
        _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "%s%s.location: %@", (uint8_t *)&v23, 0x20u);

      }
    }
    v6 = qword_1ECD80038;
    if (!qword_1ECD80038)
    {
      v6 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&qword_1ECD80038);
    }
    if ((*(_BYTE *)v6 & 1) != 0)
    {
      v18 = *(NSObject **)(v6 + 8);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = a2[2];
        v20 = a2[3];
        v21 = v18;
        v32.x = v19;
        v32.y = v20;
        NSStringFromCGPoint(v32);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 136315650;
        v24 = "\t\t\t";
        v25 = 2080;
        v26 = a1;
        v27 = 2112;
        v28 = v22;
        _os_log_impl(&dword_185066000, v21, OS_LOG_TYPE_ERROR, "%s%s.preciseLocation: %@", (uint8_t *)&v23, 0x20u);

      }
    }
    v7 = qword_1ECD80040;
    if (!qword_1ECD80040)
    {
      v7 = __UILogCategoryGetNode("Touch", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&qword_1ECD80040);
    }
    if ((*(_BYTE *)v7 & 1) != 0)
    {
      v8 = *(NSObject **)(v7 + 8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = a2[4];
        v10 = a2[5];
        v11 = v8;
        v30.x = v9;
        v30.y = v10;
        NSStringFromCGPoint(v30);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 136315650;
        v24 = "\t\t\t";
        v25 = 2080;
        v26 = a1;
        v27 = 2112;
        v28 = v12;
        _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "%s%s.hitTestLocation: %@", (uint8_t *)&v23, 0x20u);

      }
    }
  }
}

uint64_t _UIEventHIDPathIndexForDigitizerEvent()
{
  uint64_t IntegerValue;
  uint64_t v1;

  IntegerValue = IOHIDEventGetIntegerValue();
  if (IOHIDEventGetIntegerValue())
    v1 = IntegerValue;
  else
    v1 = IntegerValue + 128;
  if (IOHIDEventGetIntegerValue())
    return v1;
  else
    return v1 + 256;
}

uint64_t _UIEventHIDTouchEdgeTypeForHIDEvent()
{
  unint64_t IntegerValue;
  uint64_t v1;
  uint64_t v2;

  IntegerValue = IOHIDEventGetIntegerValue();
  v1 = 2;
  v2 = 3;
  if ((IntegerValue & 0x2000) == 0)
    v2 = (IntegerValue >> 16) & 4;
  if ((IntegerValue & 0x1000) == 0)
    v1 = v2;
  if ((IntegerValue & 0x800) != 0)
    return 1;
  else
    return v1;
}

float _UIEventHIDGetMaxForceForDigitizerEvent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  float v6;
  float v7;

  BKSHIDEventGetDigitizerAttributes();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a2 == 3 || !v4)
  {
    if (a2)
    {
      if (a2 == 3)
      {
LABEL_10:
        v7 = 1000.0;
        goto LABEL_11;
      }
      v7 = 0.0;
      if (a2 != 2)
        goto LABEL_11;
    }
    if (a1 && IOHIDEventGetIntegerValue() == 11)
      IOHIDEventGetFloatValue();
    goto LABEL_10;
  }
  objc_msgSend(v4, "maximumForce");
  v7 = v6;
LABEL_11:

  return v7;
}

void _WrapItemsAndAddToArray(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        objc_msgSend(v9, "_stackEntry");
        v10 = (id)objc_claimAutoreleasedReturnValue();
        if (!v10)
          v10 = +[_UINavigationBarItemStackEntry newEntryForItem:](_UINavigationBarItemStackEntry, "newEntryForItem:", v9);
        objc_msgSend(v3, "addObject:", v10);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

}

uint64_t _UINavigationBarShouldCheckLegacyViolation(void *a1)
{
  id v1;
  uint64_t v2;
  int v3;

  v1 = a1;
  if (dyld_program_sdk_at_least()
    && (objc_msgSend((id)objc_opt_class(), "_requiresModernVisualProvider") & 1) == 0)
  {
    v3 = _UIUseModernBars();
    v2 = v3 ^ objc_msgSend((id)objc_opt_class(), "_forceLegacyVisualProvider") ^ 1;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t _UIBarAppearanceAPIVersion()
{
  if (qword_1ECD7A8B0 != -1)
    dispatch_once(&qword_1ECD7A8B0, &__block_literal_global_66_0);
  return qword_1ECD7A8A8;
}

uint64_t _UIStatusBarResolvedStyleFromStyle(uint64_t a1)
{
  if (a1 == 1)
    return 1;
  else
    return 2 * (a1 == 3);
}

uint64_t sub_18530A69C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void forwardTouchMethod(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;

  v17 = a1;
  v9 = a3;
  v10 = a4;
  objc_msgSend((id)UIApp, "_responderBasedEventDeliverer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(v11, "forward:phase:withEvent:fromResponder:", v9, a5, v10, v17);
  }
  else
  {
    objc_msgSend(v17, "nextResponder");
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (v12 && v12 != v17)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = __forwardTouchMethod_block_invoke;
      v18[3] = &unk_1E16DE170;
      v19 = v17;
      v14 = v12;
      v20 = v14;
      v15 = v10;
      v21 = v15;
      v16 = v13;
      v22 = v16;
      objc_msgSend(v9, "enumerateObjectsUsingBlock:", v18);
      if (objc_msgSend(v16, "count"))
        ((void (*)(id, uint64_t, id, id))objc_msgSend(v14, "methodForSelector:", a2))(v14, a2, v16, v15);

    }
  }

}

const __CFString *_UIStringFromWhitePointAdaptivityStyle(uint64_t a1)
{
  const __CFString *result;

  switch(a1)
  {
    case 0:
      result = CFSTR("_UIWhitePointAdaptivityStyleStandard");
      break;
    case 1:
      result = CFSTR("_UIWhitePointAdaptivityStyleReading");
      break;
    case 2:
      result = CFSTR("_UIWhitePointAdaptivityStylePhoto");
      break;
    case 3:
      result = CFSTR("_UIWhitePointAdaptivityStyleVideo");
      break;
    case 4:
      result = CFSTR("_UIWhitePointAdaptivityStyleGame");
      break;
    default:
      if (a1 == 0x7FFFFFFFFFFFFFFFLL)
        result = CFSTR("_UIWhitePointAdaptivityStyleOff");
      else
        result = 0;
      break;
  }
  return result;
}

void sub_18530C8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;

  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose((const void *)(v48 - 232), 8);
  _Block_object_dispose((const void *)(v48 - 184), 8);
  _Block_object_dispose((const void *)(v48 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t _UISplitViewControllerAutoHidesColumns(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if (qword_1ECD7D590 != -1)
    dispatch_once(&qword_1ECD7D590, &__block_literal_global_1230);
  if (byte_1ECD7D4C1)
  {
    v2 = 1;
  }
  else if (_MergedGlobals_1006)
  {
    objc_msgSend(v1, "_existingView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "windowScene");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "_enhancedWindowingEnabled"))
      v2 = _UISplitViewControllerWantsPickerBehaviors(v1) ^ 1;
    else
      v2 = 0;

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_18530FE84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t UIKeyboardInputBaseLanguagesEqual(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = a2;
  TIInputModeGetLanguage();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  TIInputModeGetLanguage();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v3, "length") && objc_msgSend(v4, "length"))
    v5 = objc_msgSend(v3, "isEqualToString:", v4);
  else
    v5 = 0;

  return v5;
}

uint64_t UIKeyboardInputModeIsNonLinguistic(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("emoji")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("dictation")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("autofillsignup"));
  }

  return v2;
}

UIKBDerivedKeyboard *UIKeyboardGetDerivedKeyboardForSpecificOrientation(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  double v9;
  double v10;
  unint64_t v11;
  int v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  BOOL v22;
  char v23;
  _BYTE *v24;
  void *v25;
  void *v26;
  int v27;
  int v28;
  int v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  uint64_t v34;
  double Width;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  _BOOL4 v54;
  double v55;
  double v56;
  BOOL v57;
  double v58;
  double v59;
  BOOL v60;
  double v61;
  double v62;
  BOOL v63;
  double v64;
  double v65;
  BOOL v66;
  BOOL v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  BOOL v76;
  double v77;
  BOOL v78;
  double v79;
  BOOL v80;
  void *v81;
  void *v82;
  double v83;
  double v84;
  void *v85;
  double v86;
  double v87;
  double v88;
  UIKBDerivedKeyboard *v89;
  int v90;
  const __CFString *v91;
  double v92;
  uint64_t v93;
  BOOL v94;
  void *v95;
  double v96;
  double v97;
  double v98;
  double v99;
  UIKBDerivedKeyboard *v100;
  const __CFString *v101;
  double v102;
  void *v103;
  double v104;
  double v105;
  double v106;
  void *v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  _BOOL4 v117;
  uint64_t v118;
  void *v119;
  int v120;
  void *v121;
  void *v122;
  int v123;
  _BOOL4 v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  void *v130;
  double v131;
  double v132;
  double v133;
  char v134;
  int v135;
  int v136;
  int v137;
  BOOL v138;
  double v139;
  double v140;
  void *v141;
  void *v142;
  double v143;
  void *v144;
  void *v145;
  void *v146;
  double v147;
  double v148;
  int v149;
  double v150;
  int v151;
  double v153;
  double v154;
  double v155;
  int v156;
  double v157;
  void *v158;
  void *v159;
  double v160;
  void *v161;
  void *v162;
  _BOOL4 v163;
  const __CFString *v164;
  const __CFString *v165;
  double v166;
  double v167;
  double v168;
  double v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  id v176;
  void *v177;

  v7 = a1;
  v8 = a2;
  if (+[UIKeyboardImpl isFloating](UIKeyboardImpl, "isFloating")
    && +[UIKeyboardImpl floatingIdiom](UIKeyboardImpl, "floatingIdiom") != 1)
  {
    goto LABEL_90;
  }
  objc_msgSend(v8, "bounds");
  v10 = v9;
  objc_msgSend(v8, "bounds");
  v171 = a4;
  v11 = a4 - 3;
  v12 = (unint64_t)(a4 - 3) < 2;
  v13 = (unint64_t)(objc_msgSend(v8, "orientation") - 3) < 2;
  if (v12 != v13)
  {
    objc_msgSend(v8, "bounds");
    v10 = v14;
    objc_msgSend(v8, "bounds");
  }
  v15 = objc_msgSend(v8, "idiom");
  v173 = objc_msgSend(v8, "idiom");
  v175 = objc_msgSend(v8, "idiom");
  v16 = UIKeyboardComputeKeyboardIdiomFromScreenTraits(v8, objc_msgSend(v8, "idiom"), 0);
  v17 = v7;
  v18 = v17;
  v22 = v16 == 1 || (v16 & 0xFFFFFFFFFFFFFFFELL) == 24 || v16 == 26 || v16 == 23;
  v176 = v7;
  v172 = v11;
  if ((unint64_t)(v16 - 23) >= 4 && v16 != 1 && (objc_msgSend(v17, "containsString:", CFSTR("emoji")) & 1) != 0)
    goto LABEL_25;
  v23 = !v22;
  if (v16 == 24)
    v23 = 1;
  if ((v23 & 1) == 0 && (objc_msgSend(v18, "containsString:", CFSTR("HWR")) & 1) != 0)
  {
LABEL_25:
    v24 = v8;
    v170 = 0;
  }
  else
  {
    v24 = v8;
    v170 = 1;
  }

  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "preferencesActions");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v177 = v18;
  v27 = objc_msgSend(v26, "inputModeSupportsCrescendo:", v18);
  if (a3 == 127)
    v28 = 0;
  else
    v28 = v27;

  if (!v15)
  {
    v168 = v10;
    v174 = v28;
    v39 = _UIScreenReferenceBoundsSizeForType(6uLL);
    v41 = v40;
    v42 = _UIScreenReferenceBoundsSizeForType(0xDuLL);
    v44 = v43;
    v45 = _UIScreenReferenceBoundsSizeForType(0xFuLL);
    v47 = v46;
    v48 = _UIScreenReferenceBoundsSizeForType(0x17uLL);
    v50 = v49;
    v166 = _UIScreenReferenceBoundsSizeForType(0x19uLL);
    v167 = v51;
    v8 = v24;
    objc_msgSend(v24, "keyboardScreenReferenceSize");
    v54 = v53 == v41 && v52 == v39;
    objc_msgSend(v24, "keyboardScreenReferenceSize");
    v57 = v56 == v44 && v55 == v42;
    objc_msgSend(v24, "keyboardScreenReferenceSize");
    v60 = v59 == v47 && v58 == v45;
    objc_msgSend(v24, "keyboardScreenReferenceSize");
    v63 = v62 == v50 && v61 == v48;
    objc_msgSend(v24, "keyboardScreenReferenceSize");
    v66 = v65 == v167 && v64 == v166;
    v67 = v57 || v60 || v54 || v63;
    v68 = _UIScreenReferenceBoundsSizeForType(0x1BuLL);
    v70 = v69;
    v71 = _UIScreenReferenceBoundsSizeForType(0x1DuLL);
    v73 = v72;
    objc_msgSend(v24, "keyboardScreenReferenceSize");
    v76 = v75 == v70 && v74 == v68;
    objc_msgSend(v24, "keyboardScreenReferenceSize");
    v78 = v77 == v71;
    if (v79 != v73)
      v78 = 0;
    v80 = v67 || v66 || v76 || v78;
    if (v172 > 1)
    {
      if (!v80)
      {
        v89 = 0;
        v93 = v175;
        v7 = v176;
        goto LABEL_154;
      }
      v94 = v60 || v66 || v78;
      +[UIKeyboardInputMode keyboardInputModeWithIdentifier:](UIKeyboardInputMode, "keyboardInputModeWithIdentifier:", v18);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIKeyboardImpl deviceSpecificPaddingForInterfaceOrientation:inputMode:](UIKeyboardImpl, "deviceSpecificPaddingForInterfaceOrientation:inputMode:", v171, v95);
      v98 = v168 - (v96 + v97);
      objc_msgSend(0, "setKeyboardSizeBasis:", v98, 215.0);
      v99 = -1.0;
      v7 = v176;
      if (v54 && (objc_msgSend(v18, "containsString:", CFSTR("HWR")) & 1) == 0)
      {
        v99 = 200.0;
        objc_msgSend(0, "setKeyboardSizeBasis:", v98, 200.0);
      }
      v100 = objc_alloc_init(UIKBDerivedKeyboard);
      v89 = v100;
      v101 = CFSTR("iPhone-PortraitTruffle");
      if (!v94)
      {
        if (v24)
        {
          if (!v24[35])
            v101 = CFSTR("iPhone-PortraitChoco");
        }
        else
        {
          v101 = CFSTR("iPhone-PortraitChoco");
        }
      }
      -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v100, "setDerivedKBStarPrefixName:", v101);
      -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", v98, v99);

      goto LABEL_75;
    }
    +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v81, "candidateController");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v82, "candidateBarHeightForOrientation:", v171);
    v84 = v83;

    if (v80)
    {
      +[UIKeyboardInputMode keyboardInputModeWithIdentifier:](UIKeyboardInputMode, "keyboardInputModeWithIdentifier:", v18);
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIKeyboardImpl deviceSpecificPaddingForInterfaceOrientation:inputMode:](UIKeyboardImpl, "deviceSpecificPaddingForInterfaceOrientation:inputMode:", v171, v85);
      v88 = v168 - (v86 + v87);
      v89 = objc_alloc_init(UIKBDerivedKeyboard);
      v90 = objc_msgSend(v18, "containsString:", CFSTR("emoji"));
      if (v90)
        v91 = CFSTR("iPhone-LandscapeTruffle");
      else
        v91 = CFSTR("iPhone-Caymen");
      if (v90)
        v92 = 200.0;
      else
        v92 = -1.0;
      -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", v91);
      if (v54)
        v92 = 150.0;
      -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v88, v92);
      -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", v88, v92);

    }
    else
    {
      if (v168 >= 812.0)
      {
        v89 = objc_alloc_init(UIKBDerivedKeyboard);
        v153 = 662.0;
        v154 = 152.0;
        -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", 662.0, 152.0);
        v93 = v175;
        v7 = v176;
        if ((objc_msgSend(v18, "containsString:", CFSTR("emoji")) & 1) != 0)
        {
          v153 = 724.0;
        }
        else if (UIKeyboardShouldMatchHeightWithPredictionViewOnLandscapeLargePhoneKeyboard(v18))
        {
          v154 = v84 + 152.0;
        }
        else
        {
          v154 = 152.0;
        }
        if (v170)
          v155 = v154;
        else
          v155 = -1.0;
        -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", v153, v155);
        if (v170)
          -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", CFSTR("iPhone-Caymen"));
        goto LABEL_127;
      }
      v89 = 0;
    }
    v93 = v175;
    v7 = v176;
LABEL_127:
    if (!v89 && v168 >= 667.0)
    {
      if (UIKeyboardShouldAddMarginOnLandscapeLargePhoneKeyboard(v18))
      {
        v89 = objc_alloc_init(UIKBDerivedKeyboard);
        -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", CFSTR("iPhone-Caymen"));
        -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", v168 + -144.0, -1.0);
        if (UIKeyboardShouldMatchHeightWithPredictionViewOnLandscapeLargePhoneKeyboard(v18))
        {
          -[UIKBDerivedKeyboard keyboardSize](v89, "keyboardSize");
          -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:");
        }
        -[UIKBDerivedKeyboard keyboardSize](v89, "keyboardSize");
        -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:");
      }
      else
      {
        v89 = 0;
      }
    }
    goto LABEL_154;
  }
  if (v173 == 1)
  {
    v174 = v28;
    v29 = v12 ^ v13;
    +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "preferencesActions");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v31, "enableProKeyboard");

    v8 = v24;
    objc_msgSend(v24, "screen");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "_referenceBounds");
    v7 = v176;
    if (v29)
      Width = CGRectGetWidth(*(CGRect *)&v34);
    else
      Width = CGRectGetHeight(*(CGRect *)&v34);
    v102 = Width;

    objc_msgSend(v24, "screen");
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v103, "scale");
    v105 = v104;

    if (v105 == 0.0)
      v106 = 1.0;
    else
      v106 = v105;
    objc_msgSend(v24, "screen");
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "nativeBounds");
    v109 = v108;
    v111 = v110;

    if (v29)
      v112 = v109;
    else
      v112 = v111;
    if (v29)
      v109 = v111;
    v113 = v112 / v106;
    v115 = _UIScreenReferenceBoundsSizeForType(0x21uLL);
    v116 = v114;
    v169 = v109;
    if (v113 >= v102)
      v117 = v113 > v114 && v113 > 1210.0;
    else
      v117 = 1;
    v123 = v113 > 1210.0 && !v117;
    v124 = v102 < v113 && v113 > 1210.0;
    if (v172 >= 2)
      v125 = 323.0;
    else
      v125 = 416.0;
    if (+[UIKeyboardImpl isFloating](UIKeyboardImpl, "isFloating")
      && +[UIKeyboardImpl floatingIdiom](UIKeyboardImpl, "floatingIdiom") == 1)
    {
      v89 = objc_alloc_init(UIKBDerivedKeyboard);
      +[UIKeyboardImpl floatingWidth](UIKeyboardImpl, "floatingWidth");
      v127 = v126;
      +[UIKeyboardImpl floatingHeight](UIKeyboardImpl, "floatingHeight");
      v129 = v128;
      -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v127, v128);
LABEL_106:
      v93 = v175;
      goto LABEL_146;
    }
    if ((v123 & ~+[UIKeyboardImpl overrideNativeScreen](UIKeyboardImpl, "overrideNativeScreen") & 1) == 0
      && ((v32 ^ 1) & 1) == 0)
    {
      v89 = objc_alloc_init(UIKBDerivedKeyboard);
      if (v123)
      {
        objc_msgSend(v24, "screen");
        v130 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v130, "_unjailedReferenceBoundsForInterfaceOrientation:", v171);
        v132 = v131;
        v115 = v133;

      }
      else
      {
        if (v172 >= 2)
          v132 = v115;
        else
          v132 = v116;
        if (v172 >= 2)
          v115 = v116;
      }
      v93 = v175;
      v127 = v10;
      objc_msgSend(getTUIKeyboardLayoutFactoryClass(), "sharedKeyboardFactory");
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v145, "keyboardPrefixForWidth:andEdge:", v172 > 1, v132);
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", v146);

      -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v10, v125);
      objc_msgSend(v24, "bounds");
      v129 = v125 * v147 / v115;
LABEL_145:
      v18 = v177;
LABEL_146:
      if (v89)
      {
        v148 = -1.0;
        if (v129 != -1.0)
        {
          v149 = objc_msgSend(v18, "containsString:", CFSTR("emoji"), -1.0);
          v148 = v129 + 55.0;
          if (!v149)
            v148 = v129;
        }
        if (v170)
          v150 = v148;
        else
          v150 = -1.0;
        -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", v127, v150);
      }
      goto LABEL_154;
    }
    if (v113 <= 1210.0)
      v134 = 1;
    else
      v134 = v32;
    if ((v134 & 1) == 0)
    {
      v129 = *(double *)(MEMORY[0x1E0C9D820] + 8);
      v89 = objc_alloc_init(UIKBDerivedKeyboard);
      objc_msgSend(getTUIKeyboardLayoutFactoryClass(), "sharedKeyboardFactory");
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      v142 = v141;
      v143 = 768.0;
      if (v172 < 2)
        v143 = 1024.0;
      objc_msgSend(v141, "keyboardPrefixForWidth:andEdge:", v172 > 1, v143);
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", v144);

      v127 = v10;
      -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v10, v125);
      if (v16 == 24)
        -[UIKBDerivedKeyboard setAddsSupplementaryControlKeys:](v89, "setAddsSupplementaryControlKeys:", 1);
      v93 = v175;
      goto LABEL_145;
    }
    v135 = v124 & v32;
    if (v16 == 24)
      v136 = 1;
    else
      v136 = v135;
    v127 = v10;
    if (v136 == 1)
    {
      v89 = objc_alloc_init(UIKBDerivedKeyboard);
      -[UIKBDerivedKeyboard setAddsSupplementaryControlKeys:](v89, "setAddsSupplementaryControlKeys:", 1);
      if (v172 > 1)
      {
        v156 = v10 < 834.0 || v117;
        v138 = v156 == 0;
        v139 = 258.0;
        v140 = 255.0;
      }
      else
      {
        v137 = v10 < 1194.0 || v117;
        v138 = v137 == 0;
        v139 = 343.0;
        v140 = 337.0;
      }
      if (v138)
        v129 = v139;
      else
        v129 = v140;
      v93 = v175;
      -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v10, v129);
      if (v117)
      {
        v129 = v102 / v113 * v129;
        if (objc_msgSend(v24, "isKeyboardMinorEdgeWidth"))
          v157 = v169 / v106;
        else
          v157 = v113;
        objc_msgSend(getTUIKeyboardLayoutFactoryClass(), "sharedKeyboardFactory");
        v158 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v158, "keyboardPrefixForWidth:andEdge:", objc_msgSend(v24, "isKeyboardMinorEdgeWidth"), round(v157));
        v159 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", v159);

        v18 = v177;
      }
      if (v135)
      {
        if (objc_msgSend(v24, "isKeyboardMinorEdgeWidth"))
          v160 = v169 / v106;
        else
          v160 = v113;
        objc_msgSend(getTUIKeyboardLayoutFactoryClass(), "sharedKeyboardFactory");
        v161 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v161, "keyboardPrefixForWidth:andEdge:", objc_msgSend(v24, "isKeyboardMinorEdgeWidth"), round(v160));
        v162 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", v162);

        v18 = v177;
      }
      if (objc_msgSend(v18, "containsString:", CFSTR("HWR")))
      {
        v163 = v10 < 1180.0;
        if (v172 >= 2)
          v163 = v10 < 820.0;
        if (!v163)
          v129 = -1.0;
      }
      goto LABEL_146;
    }
    switch(v16)
    {
      case 23:
        if (objc_msgSend(v18, "containsString:", CFSTR("emoji")))
        {
          v89 = objc_alloc_init(UIKBDerivedKeyboard);
          -[UIKBDerivedKeyboard setAddsSupplementaryControlKeys:](v89, "setAddsSupplementaryControlKeys:", 0);
          -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v10, v125);
          if (v172 >= 2)
            v164 = CFSTR("Wildcat-PortraitFudge");
          else
            v164 = CFSTR("Wildcat-LandscapeFudge");
          -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", v164);
          v129 = v125;
          goto LABEL_106;
        }
        break;
      case 26:
        v89 = objc_alloc_init(UIKBDerivedKeyboard);
        -[UIKBDerivedKeyboard setAddsSupplementaryControlKeys:](v89, "setAddsSupplementaryControlKeys:", 0);
        if (v172 >= 2)
          v165 = CFSTR("Wildcat-Portrait");
        else
          v165 = CFSTR("Wildcat-Landscape");
        -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v10, dbl_18667F910[v172 < 2]);
        -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", v165);
        goto LABEL_208;
      case 25:
        v89 = objc_alloc_init(UIKBDerivedKeyboard);
        -[UIKBDerivedKeyboard setAddsSupplementaryControlKeys:](v89, "setAddsSupplementaryControlKeys:", 0);
        v127 = dbl_18667F920[v172 < 2];
        -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v127, dbl_18667F910[v172 < 2]);
LABEL_208:
        v129 = -1.0;
        goto LABEL_106;
    }
    v89 = 0;
LABEL_75:
    v93 = v175;
    goto LABEL_154;
  }
  v93 = v175;
  v7 = v176;
  if (v175 == 3)
  {
    UIKeyboardPhoneLayoutToUseForCarPlayInputMode(v18);
    v118 = objc_claimAutoreleasedReturnValue();
    v8 = v24;
    if (v118)
    {
      v119 = (void *)v118;
      v120 = objc_msgSend(v24, "touchInput");

      if (v120)
      {
        v89 = objc_alloc_init(UIKBDerivedKeyboard);
        objc_msgSend(getTUIKeyboardLayoutFactoryClass(), "sharedKeyboardFactory");
        v121 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v121, "keyboardPrefixForWidth:andEdge:", 0, 640.0);
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", v122);

        -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", fmin(v10 + -44.0, 356.0), 153.5);
        goto LABEL_159;
      }
    }
LABEL_90:
    v89 = 0;
    goto LABEL_159;
  }
  v174 = v28;
  v89 = 0;
  v8 = v24;
LABEL_154:
  if (v93 == 3)
    v151 = 0;
  else
    v151 = v174;
  if (v151 == 1)
    -[UIKBDerivedKeyboard setDerivedKBStarPrefixName:](v89, "setDerivedKBStarPrefixName:", CFSTR("Dynamic"));
LABEL_159:

  return v89;
}

id UIKeyboardGetDerivedKeyboard(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;

  v5 = a2;
  v6 = a1;
  UIKeyboardGetDerivedKeyboardForSpecificOrientation(v6, v5, a3, objc_msgSend(v5, "orientation"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_185313AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1853148D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location)
{
  id *v37;

  objc_destroyWeak(v37);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185315C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  id *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v7);
  _Unwind_Resume(a1);
}

id _UIUpdateCycleDebugOverlaySetup()
{
  return +[_UIUpdateCycleDebugOverlay instance](_UIUpdateCycleDebugOverlay, "instance");
}

void _UITouchesEventCommonInit(void *a1)
{
  _QWORD *v1;
  const CFDictionaryValueCallBacks *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v1 = a1;
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v1[17] = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
  v1[18] = CFDictionaryCreateMutable(0, 0, 0, v2);
  v1[19] = CFDictionaryCreateMutable(0, 0, 0, v2);
  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v1[20];
  v1[20] = v3;

  v1[21] = CFDictionaryCreateMutable(0, 0, 0, v2);
  v1[22] = CFDictionaryCreateMutable(0, 0, 0, v2);
  v1[27] = -1;
  v5 = objc_opt_new();
  v6 = (id)v1[24];
  v1[24] = v5;

}

uint64_t _UIApplicationIsSystemApplication()
{
  if (qword_1EDDC83C8 != -1)
    dispatch_once(&qword_1EDDC83C8, &__block_literal_global_2919);
  return byte_1EDDC8022;
}

uint64_t __setupCA_block_invoke_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v1 + 352) = 2;
  return _UIUpdateInputSetInputChanged(*(_DWORD **)(v1 + 400), v1 + 352);
}

void _UIUpdateCycleUnregisterIdleObserver(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a1;
  if (pthread_main_np() != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIUpdateCycleUnregisterIdleObserver(__strong id<_UIUpdateCycleIdleObserver> _Nonnull)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("_UIUpdateCycleIdleScheduler.m"), 99, CFSTR("Idle observers must be unregistered on the main thread."));

  }
  v1 = _indexOfIdleObserver(v7);
  if (v1 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v2 = v1;
    v3 = (void *)objc_msgSend((id)qword_1ECD79AE0, "copy");
    objc_msgSend(v3, "removePointerAtIndex:", v2);
    v4 = (void *)qword_1ECD79AE0;
    qword_1ECD79AE0 = (uint64_t)v3;

  }
}

void _UIUpdateCycleRegisterIdleObserver(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a1;
  if (pthread_main_np() != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIUpdateCycleRegisterIdleObserver(__strong id<_UIUpdateCycleIdleObserver> _Nonnull)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIUpdateCycleIdleScheduler.m"), 84, CFSTR("Idle observers must be registered on the main thread."));

  }
  v1 = (id)qword_1ECD79AE0;
  if (!v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3868]), "initWithOptions:", 517);
    goto LABEL_7;
  }
  v2 = v1;
  if (_indexOfIdleObserver(v6) == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = objc_msgSend(v2, "copy");

    v2 = (void *)v3;
LABEL_7:
    objc_msgSend(v2, "addPointer:", v6);
    objc_storeStrong((id *)&qword_1ECD79AE0, v2);
  }

}

uint64_t _indexOfIdleObserver(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;

  v1 = a1;
  v2 = (id)qword_1ECD79AE0;
  if (objc_msgSend(v2, "count"))
  {
    v3 = 0;
    while ((id)objc_msgSend(v2, "pointerAtIndex:", v3) != v1)
    {
      if (++v3 >= (unint64_t)objc_msgSend(v2, "count"))
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v3;
}

void InsertWindow(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  GetRotationFollowingWindows();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "compact");
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v13;
    while (2)
    {
      v8 = 0;
      v9 = v5 + v6;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v3);
        v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v8);
        if (v10)
        {
          v11 = objc_msgSend(v10, "priorityLevel", (_QWORD)v12);
          if (v11 < objc_msgSend(v1, "priorityLevel"))
          {
            v9 = v6 + v8;
            goto LABEL_13;
          }
        }
        ++v8;
      }
      while (v5 != v8);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      v6 = v9;
      if (v5)
        continue;
      break;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_13:

  objc_msgSend(v3, "insertPointer:atIndex:", v1, v9);
}

id GetRotationFollowingWindows()
{
  if (qword_1ECD7DFE8 != -1)
    dispatch_once(&qword_1ECD7DFE8, &__block_literal_global_95);
  return (id)_MergedGlobals_1068;
}

void ____registerReusePool_block_invoke(uint64_t a1)
{
  id v2;

  if (qword_1ECD7A688 != -1)
    dispatch_once(&qword_1ECD7A688, &__block_literal_global_33_0);
  v2 = (id)qword_1ECD7A680;
  objc_msgSend(v2, "compact");
  objc_msgSend(v2, "addPointer:", *(_QWORD *)(a1 + 32));

}

uint64_t _UISceneLifecycleStateIsForegroundActive(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "isForeground"))
    v2 = _UISceneLifecycleStateIsSEO(v1) ^ 1;
  else
    v2 = 0;

  return v2;
}

void __UIContextBinderAttachContext(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  char v6;
  void *v7;
  id v8;

  v8 = a1;
  v3 = a2;
  objc_msgSend(v3, "_boundContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
    goto LABEL_8;
  v5 = v3;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {

    goto LABEL_7;
  }
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) == 0)
  {
LABEL_7:
    objc_msgSend(v8, "substrate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "attachContext:", v4);

    goto LABEL_8;
  }
  if (objc_msgSend(v5, "shouldAttachBindable"))
    objc_msgSend(v5, "attachBindable");
LABEL_8:

}

void __UIContextBinderDetachContext(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  char v6;
  void *v7;
  id v8;

  v8 = a1;
  v3 = a2;
  objc_msgSend(v3, "_boundContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
    goto LABEL_8;
  v5 = v3;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {

    goto LABEL_7;
  }
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) == 0)
  {
LABEL_7:
    objc_msgSend(v8, "substrate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "detachContext:", v4);

    goto LABEL_8;
  }
  if (objc_msgSend(v5, "shouldDetachBindable"))
    objc_msgSend(v5, "detachBindable");
LABEL_8:

}

id __UIKIT_IS_REQUESTING_A_CACONTEXT_FROM_COREANIMATION(int a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CD2720], "remoteContextWithOptions:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v4)
      __UIKIT_DID_NOT_RECEIVE_A_REMOTE_CACONTEXT_FROM_COREANIMATION_INDICATING_A_POSSIBLE_BACKBOARDD_CRASH();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CD2720], "localContextWithOptions:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v4)
      __UIKIT_DID_NOT_RECEIVE_A_LOCAL_CACONTEXT_FROM_COREANIMATION();
  }

  return v4;
}

uint64_t _UIContentSizeCategoryIsAccessibilityContentSizeCategory(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("UICTContentSizeCategoryAccessibility"));
}

void sub_18531EE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18531EF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIScreenAddScreen(void *a1, char a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  unint64_t v7;
  NSObject *v8;
  id v9;
  void *v10;
  objc_class *v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  uint64_t v21;
  uint8_t buf[4];
  __CFString *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIScreenAddScreen(UIScreen *__strong, BOOL)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("UIScreen.m"), 448, CFSTR("Adding object %@ to the screens array, which is not a UIScreen!"), v3);

  }
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = ___UIScreenAddScreen_block_invoke;
  v19 = &unk_1E16B1B78;
  LOBYTE(v21) = a2;
  v4 = v3;
  v20 = v4;
  os_unfair_lock_lock((os_unfair_lock_t)&__UIScreenMutableScreensArrayAccessLock);
  ___UIScreenAddScreen_block_invoke((uint64_t)&v16);
  os_unfair_lock_unlock((os_unfair_lock_t)&__UIScreenMutableScreensArrayAccessLock);
  if (qword_1ECD799D0 != -1)
    dispatch_once(&qword_1ECD799D0, &__block_literal_global_821);
  if (byte_1ECD7992A && os_variant_has_internal_diagnostics())
  {
    v7 = qword_1ECD799E0;
    if (!qword_1ECD799E0)
    {
      v7 = __UILogCategoryGetNode("UIWindowSceneTraitCollection", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&qword_1ECD799E0);
    }
    v8 = *(id *)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = v4;
      if (v9)
      {
        v10 = (void *)MEMORY[0x1E0CB3940];
        v11 = (objc_class *)objc_opt_class();
        NSStringFromClass(v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "stringWithFormat:", CFSTR("<%@: %p>"), v12, v9, v16, v17, v18, v19, v20, v21);
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v13 = CFSTR("(nil)");
      }

      v14 = v13;
      +[UIScreen _shortScreensDescription](UIScreen, "_shortScreensDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v23 = v13;
      v24 = 2112;
      v25 = v15;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_DEFAULT, "Adding screen %@, now we have %@", buf, 0x16u);

    }
  }
  if (qword_1ECD79A00 != -1)
    dispatch_once(&qword_1ECD79A00, &__block_literal_global_837_0);

}

void sub_185320238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIScreenWriteDisplayConfiguration(uint64_t a1, void *a2, int a3)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  id v19;
  id location;

  v6 = a2;
  v7 = *(id *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECD79930);
  objc_storeStrong((id *)(a1 + 160), a2);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD79930);
  objc_msgSend(v6, "identity");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a1 + 208) & 0xFFFEFFFF | ((objc_msgSend(v8, "type") == 8) << 16);

  if (qword_1ECD79A20 != -1)
    dispatch_once(&qword_1ECD79A20, &__block_literal_global_860);
  v9 = (id)qword_1ECD79A28;
  v10 = v9;
  if (v9)
  {
    *(_BYTE *)(a1 + 219) = objc_msgSend(v9, "BOOLValue");
  }
  else
  {
    if (a3)
    {
      objc_msgSend(v6, "CADisplay");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isCloned");

      if (v12)
      {
        objc_initWeak(&location, (id)a1);
        v15 = MEMORY[0x1E0C809B0];
        v16 = 3221225472;
        v17 = ___UIScreenWriteDisplayConfiguration_block_invoke;
        v18 = &unk_1E16B3F40;
        objc_copyWeak(&v19, &location);
        BSDispatchMain();
        objc_destroyWeak(&v19);
        objc_destroyWeak(&location);
      }
    }
    objc_msgSend(v7, "CADisplay", v15, v16, v17, v18);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "removeObserver:forKeyPath:context:", a1, CFSTR("cloned"), &__UIScreenCapturedKey);

    objc_msgSend(*(id *)(a1 + 160), "CADisplay");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addObserver:forKeyPath:options:context:", a1, CFSTR("cloned"), 5, &__UIScreenCapturedKey);

  }
}

void sub_185320438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIPencilPreferredActionForKey(void *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  NSObject *v13;
  const __CFString *v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a1, "isEqualToString:", CFSTR("UIPencilPreferredSqueezeAction")))
    v2 = 5;
  else
    v2 = 1;
  _UIKitUserDefaults();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v2 = objc_msgSend(v4, "integerValue");
    v5 = qword_1ECD80150;
    if (!qword_1ECD80150)
    {
      v5 = __UILogCategoryGetNode("PencilPreferences", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v5, (unint64_t *)&qword_1ECD80150);
    }
    if ((*(_BYTE *)v5 & 1) != 0)
    {
      v6 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v16 = 134218242;
        v17 = v2;
        v18 = 2112;
        v19 = a1;
        v7 = "NSUserDefaults returns value: %li; for key: %@; ";
LABEL_30:
        _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v16, 0x16u);
      }
    }
  }
  else
  {
    v8 = qword_1ECD80140;
    if (!qword_1ECD80140)
    {
      v8 = __UILogCategoryGetNode("PencilPreferences", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v8, (unint64_t *)&qword_1ECD80140);
    }
    if ((*(_BYTE *)v8 & 1) != 0)
    {
      v15 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = 138412290;
        v17 = (uint64_t)a1;
        _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_ERROR, "NSUserDefaults nil object for key: %@", (uint8_t *)&v16, 0xCu);
      }
    }
    v9 = qword_1ECD80148;
    if (!qword_1ECD80148)
    {
      v9 = __UILogCategoryGetNode("PencilPreferences", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&qword_1ECD80148);
    }
    if ((*(_BYTE *)v9 & 1) != 0)
    {
      v6 = *(NSObject **)(v9 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v16 = 134218242;
        v17 = v2;
        v18 = 2112;
        v19 = a1;
        v7 = "Returning default value: %li; for key: %@";
        goto LABEL_30;
      }
    }
  }
  v10 = _AXSAllowOpaqueTouchGestures();
  v11 = qword_1ECD80158;
  if (!qword_1ECD80158)
  {
    v11 = __UILogCategoryGetNode("PencilPreferences", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v11, (unint64_t *)&qword_1ECD80158);
  }
  if ((*(_BYTE *)v11 & 1) != 0)
  {
    v13 = *(NSObject **)(v11 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = CFSTR("YES");
      if (!v10)
        v14 = CFSTR("NO");
      v16 = 138412290;
      v17 = (uint64_t)v14;
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "Accessibility returns: %@;", (uint8_t *)&v16, 0xCu);
    }
  }
  if (!v10)
    v2 = 0;

  return v2;
}

uint64_t _UIPencilPrefersPencilOnlyDrawingForKey()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  _UIKitUserDefaults();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("UIPencilOnlyDrawWithPencilKey"));

  v2 = _UIPencilPrefersPencilOnlyDrawingForKey___s_category;
  if (!_UIPencilPrefersPencilOnlyDrawingForKey___s_category)
  {
    v2 = __UILogCategoryGetNode("PencilPreferences", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIPencilPrefersPencilOnlyDrawingForKey___s_category);
  }
  if ((*(_BYTE *)v2 & 1) != 0)
  {
    v4 = *(NSObject **)(v2 + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 134218242;
      v6 = v1;
      v7 = 2112;
      v8 = CFSTR("UIPencilOnlyDrawWithPencilKey");
      _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "NSUserDefaults returns value: %li; for key: %@; ",
        (uint8_t *)&v5,
        0x16u);
    }
  }
  return v1;
}

void sub_185322788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _holdSceneEventResponsesQueue()
{
  if (qword_1ECD79218 != -1)
    dispatch_once(&qword_1ECD79218, &__block_literal_global_630);
  return (id)qword_1ECD79220;
}

uint64_t UIApplicationInitialize()
{
  __CFRunLoop *Main;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  __CFString *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (os_variant_has_internal_content())
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v3 = objc_msgSend(&unk_1E1A94718, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v19 != v5)
            objc_enumerationMutation(&unk_1E1A94718);
          v7 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i));
          v8 = getenv((const char *)objc_msgSend(v7, "UTF8String"));
          if (v8)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v2, "setObject:forKey:", v9, v7);

          }
        }
        v4 = objc_msgSend(&unk_1E1A94718, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v4);
    }
    objc_msgSend(v2, "objectForKey:", CFSTR("__PPT_ForTesting"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
      __IsRunningTests = objc_msgSend(v2, "bs_BOOLForKey:", CFSTR("__PPT_ForTesting"));
    objc_msgSend(v2, "objectForKey:", CFSTR("__PPT_SignpostID"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      objc_msgSend(v2, "bs_safeStringForKey:", CFSTR("__PPT_SignpostID"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      __ActivationSignpostID = objc_msgSend(v12, "longLongValue");

    }
    objc_msgSend(v2, "objectForKey:", CFSTR("__PPT_LaunchTime"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      objc_msgSend(v2, "bs_safeStringForKey:", CFSTR("__PPT_LaunchTime"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "doubleValue");
      __LaunchTime = v15;
      __ExecOrResumeTime = v15;

    }
    objc_msgSend(v2, "objectForKey:", CFSTR("__PPT_BackgroundLaunch"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      if (objc_msgSend(v2, "bs_BOOLForKey:", CFSTR("__PPT_BackgroundLaunch")))
        v17 = CFSTR("launch suspended");
      else
        v17 = CFSTR("launch");
      objc_storeStrong((id *)&qword_1EDDC8030, v17);
    }

  }
  if (!qword_1EDDC8030)
    qword_1EDDC8030 = (uint64_t)CFSTR("launch");
  if (qword_1EDDC84E0 != -1)
    dispatch_once(&qword_1EDDC84E0, &__block_literal_global_3105);
  if (byte_1EDDC8026)
    CTFontSetAltTextStyleSpec();
  Main = CFRunLoopGetMain();
  CFRunLoopAddCommonMode(Main, CFSTR("UITrackingRunLoopMode"));
  GSInitialize();
  _UIKitApplyPlatformVisualStyles();
  return kdebug_trace();
}

uint64_t __UILogCategoryNewNode(const char *a1)
{
  unint64_t v2;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  __CFString **v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  uint64_t v16;

  v2 = (g_UILogCategoriesAllocator_1 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v2 < g_UILogCategoriesAllocator_1 || v2 > 0x26E0)
  {
    v4 = malloc_type_malloc(0x2800uLL, 0x67DDC7D9uLL);
    v2 = 0;
    qword_1ECD81DD0 = (uint64_t)v4;
  }
  else
  {
    v4 = (void *)qword_1ECD81DD0;
  }
  g_UILogCategoriesAllocator_1 = v2 + 288;
  v5 = (uint64_t)v4 + v2;
  *(_BYTE *)v5 = 0;
  *(_DWORD *)(v5 + 4) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  _UIKitUserDefaults();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("Log"), "stringByAppendingString:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 1;
  __associateFlagWithPreferencesKeyLocked(v5, 1, v7, v8);
  v10 = 0;
  while (1)
  {
    v11 = v9;
    if (objc_msgSend(v6, "isEqualToString:", (&g_UILogCategoriesOverrides)[4 * v10]))
      break;
    v9 = 0;
    v10 = 1;
    if ((v11 & 1) == 0)
      goto LABEL_18;
  }
  v12 = &(&g_UILogCategoriesOverrides)[4 * v10];
  v13 = v12[1];
  if (v13)
    __associateFlagWithPreferencesKeyLocked(v5, 2, v7, v13);
  v14 = v12[2];
  if (v14)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    __associateFlagWithPreferencesKeyLocked(v5, 4, v15, v14);

  }
  v16 = (uint64_t)*(&(&g_UILogCategoriesOverrides)[4 * v10] + 3);
  if (v16 && (*(unsigned int (**)(void))(v16 + 16))())
  {
    *(_DWORD *)(v5 + 4) |= 8u;
    *(_BYTE *)v5 = 1;
  }
LABEL_18:
  *(_QWORD *)(v5 + 8) = os_log_create("com.apple.UIKit", a1);

  return v5 + 16;
}

id _UIKitUserDefaults()
{
  if (qword_1ECD81E58 != -1)
    dispatch_once(&qword_1ECD81E58, &__block_literal_global_600);
  return (id)_MergedGlobals_1283;
}

void __associateFlagWithPreferencesKeyLocked(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  _DWORD *v10;

  v7 = a3;
  v8 = a4;
  objc_msgSend(v7, "objectForKey:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  __updateCategoryFlagValueLocked(a1, a2, v9);

  v10 = malloc_type_malloc(0x28uLL, 0x10A0040D8596764uLL);
  *(_QWORD *)v10 = a1;
  v10[2] = a2;
  *((_QWORD *)v10 + 2) = v7;
  *((_QWORD *)v10 + 3) = v8;
  *((_QWORD *)v10 + 4) = qword_1ECD81DB8;
  qword_1ECD81DB8 = (uint64_t)v10;
  if (qword_1ECD81DD8 != -1)
    dispatch_once(&qword_1ECD81DD8, &__block_literal_global_7_12);
}

void __updateCategoryFlagValueLocked(uint64_t a1, int a2, void *a3)
{
  int v5;
  int v6;
  id v7;

  v7 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      goto LABEL_6;
    }
  }
  v5 = objc_msgSend(v7, "BOOLValue");

  if (!v5)
  {
LABEL_6:
    v6 = *(_DWORD *)(a1 + 4) & ~a2;
    goto LABEL_7;
  }
  v6 = *(_DWORD *)(a1 + 4) | a2;
LABEL_7:
  atomic_store((v6 & 0xF) != 0, (unsigned __int8 *)a1);
  *(_DWORD *)(a1 + 4) = v6;

}

void sub_185323DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

uint64_t _UIWindowKeyWindowAPIIsSceneLevel()
{
  if (qword_1EDDC8598 != -1)
    dispatch_once(&qword_1EDDC8598, &__block_literal_global_448);
  return _MergedGlobals_162;
}

const char *_UIKeyWindowUTF8SceneIdentityStringForWindowScene(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  const char *v5;

  objc_msgSend(a1, "_FBSScene");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "identityToken");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringRepresentation");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = objc_msgSend(v3, "UTF8String");
  if (v4)
    v5 = (const char *)v4;
  else
    v5 = "(nil)";

  return v5;
}

uint64_t stateMachineSpec_block_invoke_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  id v6;
  __CFString *v7;
  void *v8;
  int v9;
  unint64_t v10;
  __objc2_class **p_superclass;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  id *v20;
  id *v21;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unint64_t v34;
  id *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id *v49;
  _QWORD *v50;
  id v51;
  _QWORD *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  int v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  _BOOL4 v60;
  NSObject *v61;
  unint64_t v62;
  id v63;
  id v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id *v76;
  void *v77;
  unint64_t v78;
  NSObject *v79;
  id v80;
  id v81;
  uint64_t v82;
  __CFString *v83;
  uint64_t v84;
  id *v85;
  id *v86;
  id *v87;
  id v88;
  void *v89;
  void *v90;
  id v91;
  id *v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  char v100;
  _BYTE *v101;
  unint64_t v103;
  NSObject *v104;
  uint64_t *v105;
  id v106;
  uint64_t v107;
  NSObject *v108;
  _BOOL4 v109;
  _BOOL4 v110;
  void *v111;
  void *v112;
  void *v113;
  NSObject *v114;
  NSObject *v115;
  int v116;
  void *v117;
  NSObject *v118;
  id *v119;
  NSObject *v120;
  id *v121;
  void *v122;
  void *v123;
  NSObject *v124;
  id *v125;
  NSObject *v126;
  uint64_t v127;
  NSObject *v128;
  NSObject *log;
  os_log_t loga;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  uint64_t v138;
  id v139;
  void *v140;
  void *v141;
  __CFString *v142;
  __CFString *v143;
  uint64_t *v144;
  id v145;
  id *v146;
  _QWORD block[4];
  id v148;
  id v149;
  id *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  id v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  id v160;
  _BYTE buf[24];
  void *v162;
  __int128 v163;
  _BYTE v164[10];
  __int16 v165;
  _BOOL4 v166;
  _BYTE v167[128];
  _BYTE v168[128];
  uint64_t v169;

  v5 = (uint64_t *)a2;
  v169 = *MEMORY[0x1E0C80C00];
  v6 = *(id *)(a2 + 16);
  v138 = a4;
  v7 = _NSStringFromUIDeferringAction[a4];
  -[_UIEventDeferringManager internalBehavior]((id *)*v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "wantsLocalIdealRules");

  v10 = 0x1E0D00000uLL;
  p_superclass = &OBJC_METACLASS____UIBacklightEnvironment.superclass;
  if (v9)
  {
    -[_UIEventDeferringManager _descriptorForCompatibility:environment:deferringToken:]((id)*v5, 0, v6, v5[1]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIEventDeferringManager _predicateForDescriptor:](*v5, (uint64_t)v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIEventDeferringManager _targetForDescriptor:](*v5, (uint64_t)v12);
    v14 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D00CC8], "sharedInstance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (_QWORD *)v5[1];
    if (v16)
      v16 = (_QWORD *)v16[9];
    v17 = v16;
    v140 = (void *)v14;
    objc_msgSend(v15, "deferEventsMatchingPredicate:toTarget:withReason:", v13, v14, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = v18;
    v20 = (id *)-[_UIEventDeferringRecord _initWithDescriptor:invalidationToken:deferringToken:recordingManagerPointer:recreationReasons:]([_UIEventDeferringRecord alloc], v12, v18, (void *)v5[1], *v5, 0);
    v21 = (id *)*v5;
    v160 = 0;
    v22 = -[_UIEventDeferringManager _shouldDisableNewRecord:outRecreationReasons:]((uint64_t)v21, v20, &v160);
    v145 = v160;
    if (v22)
    {
      v23 = qword_1ECD7D028;
      if (!qword_1ECD7D028)
      {
        v23 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v23, (unint64_t *)&qword_1ECD7D028);
      }
      if ((*(_BYTE *)v23 & 1) != 0)
      {
        v124 = *(NSObject **)(v23 + 8);
        if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
        {
          v125 = (id *)*v5;
          *(_DWORD *)buf = 134349826;
          *(_QWORD *)&buf[4] = v125;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v6;
          *(_WORD *)&buf[22] = 2114;
          v162 = v7;
          LOWORD(v163) = 2114;
          *(_QWORD *)((char *)&v163 + 2) = v20;
          _os_log_impl(&dword_185066000, v124, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Disabling new local record: %{public}@", buf, 0x2Au);
        }
      }
      v135 = v12;
      v142 = v7;
      v132 = v19;
      if (v20)
      {
        v24 = (uint64_t)v20;
        v25 = v20[3];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      v26 = v25;
      objc_msgSend(v26, "invalidate");

      v158 = 0u;
      v159 = 0u;
      v156 = 0u;
      v157 = 0u;
      v27 = v145;
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v156, v168, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v157;
        do
        {
          v31 = 0;
          do
          {
            if (*(_QWORD *)v157 != v30)
              objc_enumerationMutation(v27);
            v32 = *(void **)(*((_QWORD *)&v156 + 1) + 8 * v31);
            _UIEventDeferringShorterRecreationReasonStringForReason(v32);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = qword_1ECD7D030;
            if (!qword_1ECD7D030)
            {
              v34 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v34, (unint64_t *)&qword_1ECD7D030);
            }
            if ((*(_BYTE *)v34 & 1) != 0)
            {
              log = *(NSObject **)(v34 + 8);
              if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
              {
                v35 = (id *)*v5;
                *(_DWORD *)buf = 134349826;
                *(_QWORD *)&buf[4] = v35;
                *(_WORD *)&buf[12] = 2114;
                *(_QWORD *)&buf[14] = v6;
                *(_WORD *)&buf[22] = 2114;
                v162 = v142;
                LOWORD(v163) = 2114;
                *(_QWORD *)((char *)&v163 + 2) = v33;
                _os_log_impl(&dword_185066000, log, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Adding recreation reason: %{public}@", buf, 0x2Au);
              }
            }
            -[_UIEventDeferringRecord addRecreationReason:](v24, (uint64_t)v32);

            ++v31;
          }
          while (v29 != v31);
          v36 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v156, v168, 16);
          v29 = v36;
        }
        while (v36);
      }

      v20 = (id *)v24;
      v7 = v142;
      p_superclass = (__objc2_class **)(&OBJC_METACLASS____UIBacklightEnvironment + 8);
      v10 = 0x1E0D00000;
      v12 = v135;
      v19 = v132;
    }
    v37 = qword_1ECD7D038;
    if (!qword_1ECD7D038)
    {
      v37 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v37, (unint64_t *)&qword_1ECD7D038);
    }
    if ((*(_BYTE *)v37 & 1) != 0)
    {
      v118 = *(NSObject **)(v37 + 8);
      if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
      {
        v119 = (id *)*v5;
        *(_DWORD *)buf = 134349826;
        *(_QWORD *)&buf[4] = v119;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v6;
        *(_WORD *)&buf[22] = 2114;
        v162 = v7;
        LOWORD(v163) = 2114;
        *(_QWORD *)((char *)&v163 + 2) = v20;
        _os_log_impl(&dword_185066000, v118, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: New local record: %{public}@", buf, 0x2Au);
      }
    }
    -[_UIEventDeferringManager _setLocalRecord:forEnvironment:](*v5, (uint64_t)v20, (uint64_t)v6);

  }
  else
  {
    v20 = 0;
  }
  -[_UIEventDeferringManager internalBehavior]((id *)*v5);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = objc_msgSend(v38, "wantsLocalCompatibilityRules");

  v146 = v20;
  if (!v39)
  {
    v76 = 0;
    goto LABEL_72;
  }
  v143 = v7;
  v40 = v10;
  -[_UIEventDeferringManager _descriptorForCompatibility:environment:deferringToken:]((id)*v5, 1, v6, v5[1]);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIEventDeferringManager _predicateForDescriptor:](*v5, (uint64_t)v41);
  v42 = objc_claimAutoreleasedReturnValue();
  -[_UIEventDeferringManager _targetForDescriptor:](*v5, (uint64_t)v41);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = (void *)MEMORY[0x1E0CB3940];
  v44 = (_QWORD *)v5[1];
  if (v44)
    v44 = (_QWORD *)v44[9];
  v45 = v44;
  objc_msgSend(v43, "stringWithFormat:", CFSTR("Compatibility: %@"), v45);
  v46 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(v40 + 3272), "sharedInstance");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v133 = (void *)v46;
  v134 = (void *)v42;
  objc_msgSend(v47, "deferEventsMatchingPredicate:toTarget:withReason:", v42, v141, v46);
  v48 = (void *)objc_claimAutoreleasedReturnValue();

  v144 = v5;
  v136 = v41;
  v131 = v48;
  v49 = (id *)-[_UIEventDeferringRecord _initWithDescriptor:invalidationToken:deferringToken:recordingManagerPointer:recreationReasons:](objc_alloc((Class)(p_superclass + 499)), v41, v48, (void *)v5[1], *v5, 0);
  v7 = v143;
  if (v20)
  {
    v50 = v20[2];
    if (v49)
      v51 = v49[2];
    else
      v51 = 0;
    v52 = v51;
    if (v50)
      v53 = v50[9];
    else
      v53 = 0;
    v54 = v6;
    if (v52)
    {
      v55 = v52[9];
      if (v50)
        goto LABEL_39;
    }
    else
    {
      v55 = 0;
      if (v50)
      {
LABEL_39:
        v56 = *((_DWORD *)v50 + 5);
        if (v52)
        {
LABEL_40:
          v57 = *((_DWORD *)v52 + 5);
LABEL_41:

          v58 = v53 == v55;
          v6 = v54;
          if (!v58 || v56 != v57)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "stateMachineSpec_block_invoke_17");
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v122, "handleFailureInFunction:file:lineNumber:description:", v123, CFSTR("_UIEventDeferringManager.m"), 1213, CFSTR("[%p] [%@] %@: Invalid state. Local record target windows do not match"), *v144, v54, v143);

          }
          goto LABEL_44;
        }
LABEL_116:
        v57 = 0;
        goto LABEL_41;
      }
    }
    v56 = 0;
    if (v52)
      goto LABEL_40;
    goto LABEL_116;
  }
LABEL_44:
  v5 = v144;
  v59 = *v144;
  v155 = 0;
  v60 = -[_UIEventDeferringManager _shouldDisableNewRecord:outRecreationReasons:](v59, v49, &v155);
  v61 = v155;
  if (v60)
  {
    v62 = qword_1ECD7D040;
    if (!qword_1ECD7D040)
    {
      v62 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v62, (unint64_t *)&qword_1ECD7D040);
    }
    if ((*(_BYTE *)v62 & 1) != 0)
    {
      v126 = *(NSObject **)(v62 + 8);
      if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
      {
        v127 = *v144;
        *(_DWORD *)buf = 134349826;
        *(_QWORD *)&buf[4] = v127;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v6;
        *(_WORD *)&buf[22] = 2114;
        v162 = v143;
        LOWORD(v163) = 2114;
        *(_QWORD *)((char *)&v163 + 2) = v49;
        _os_log_impl(&dword_185066000, v126, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Disabling new local compatibility record: %{public}@", buf, 0x2Au);
      }
    }
    v139 = v6;
    if (v49)
      v63 = v49[3];
    else
      v63 = 0;
    v64 = v63;
    objc_msgSend(v64, "invalidate");

    v153 = 0u;
    v154 = 0u;
    v151 = 0u;
    v152 = 0u;
    loga = v61;
    v65 = v61;
    v66 = -[NSObject countByEnumeratingWithState:objects:count:](v65, "countByEnumeratingWithState:objects:count:", &v151, v167, 16);
    if (v66)
    {
      v67 = v66;
      v68 = *(_QWORD *)v152;
      do
      {
        v69 = 0;
        do
        {
          if (*(_QWORD *)v152 != v68)
            objc_enumerationMutation(v65);
          v70 = *(void **)(*((_QWORD *)&v151 + 1) + 8 * v69);
          _UIEventDeferringShorterRecreationReasonStringForReason(v70);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = qword_1ECD7D048;
          if (!qword_1ECD7D048)
          {
            v72 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v72, (unint64_t *)&qword_1ECD7D048);
          }
          if ((*(_BYTE *)v72 & 1) != 0)
          {
            v128 = *(NSObject **)(v72 + 8);
            if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
            {
              v73 = *v144;
              *(_DWORD *)buf = 134349826;
              *(_QWORD *)&buf[4] = v73;
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v139;
              *(_WORD *)&buf[22] = 2114;
              v162 = v143;
              LOWORD(v163) = 2114;
              *(_QWORD *)((char *)&v163 + 2) = v71;
              _os_log_impl(&dword_185066000, v128, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Adding recreation reason: %{public}@", buf, 0x2Au);
            }
          }
          -[_UIEventDeferringRecord addRecreationReason:]((uint64_t)v49, (uint64_t)v70);

          ++v69;
        }
        while (v67 != v69);
        v74 = -[NSObject countByEnumeratingWithState:objects:count:](v65, "countByEnumeratingWithState:objects:count:", &v151, v167, 16);
        v67 = v74;
      }
      while (v74);
    }

    v6 = v139;
    v5 = v144;
    v20 = v146;
    v7 = v143;
    v61 = loga;
  }
  -[_UIEventDeferringManager _displayHardwareIndentifierAccountingForNotFinalizedChange:]((unsigned __int8 *)*v5, 1);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  if (v75)
    objc_msgSend(MEMORY[0x1E0D00CF8], "displayWithHardwareIdentifier:", v75);
  else
    objc_msgSend(MEMORY[0x1E0D00CF8], "builtinDisplay");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = qword_1ECD7D050;
  if (!qword_1ECD7D050)
  {
    v78 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v78, (unint64_t *)&qword_1ECD7D050);
  }
  if ((*(_BYTE *)v78 & 1) != 0)
  {
    v120 = *(NSObject **)(v78 + 8);
    if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
    {
      v121 = (id *)*v5;
      *(_DWORD *)buf = 134349826;
      *(_QWORD *)&buf[4] = v121;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2114;
      v162 = v7;
      LOWORD(v163) = 2114;
      *(_QWORD *)((char *)&v163 + 2) = v49;
      _os_log_impl(&dword_185066000, v120, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: New local compatibility record: %{public}@", buf, 0x2Au);
    }
  }
  _eventDeferringCompatibilityQueue();
  v79 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = stateMachineSpec_block_invoke_18;
  block[3] = &unk_1E16B47A8;
  v148 = v77;
  v149 = v6;
  v76 = v49;
  v150 = v76;
  v80 = v77;
  dispatch_sync(v79, block);

LABEL_72:
  objc_msgSend(v6, "description");
  v81 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v82 = objc_msgSend(v81, "UTF8String");

  v83 = objc_retainAutorelease(v7);
  v84 = -[__CFString UTF8String](v83, "UTF8String");
  if (os_variant_has_internal_diagnostics())
  {
    v103 = qword_1ECD7D058;
    if (!qword_1ECD7D058)
    {
      v103 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v103, (unint64_t *)&qword_1ECD7D058);
    }
    v104 = *(NSObject **)(v103 + 8);
    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
    {
      v105 = v5;
      v106 = v6;
      v107 = *v105;
      v108 = v104;
      v109 = -[_UIEventDeferringRecord needsRecreation](v146);
      v110 = -[_UIEventDeferringRecord needsRecreation](v76);
      *(_DWORD *)buf = 134350594;
      *(_QWORD *)&buf[4] = v107;
      v6 = v106;
      v5 = v105;
      v20 = v146;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v82;
      *(_WORD *)&buf[22] = 2082;
      v162 = (void *)v84;
      LOWORD(v163) = 2050;
      *(_QWORD *)((char *)&v163 + 2) = v146;
      WORD5(v163) = 1026;
      HIDWORD(v163) = v109;
      *(_WORD *)v164 = 2050;
      *(_QWORD *)&v164[2] = v76;
      v165 = 1026;
      v166 = v110;
      _os_log_impl(&dword_185066000, v108, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}s] %{public}s: Wrote local ideal record: %{public}p; ideal disabled: %{public}d; wrote co"
        "mpatibility record: %{public}p; compatibility disabled: %{public}d",
        buf,
        0x40u);

    }
  }
  if (v20)
    v85 = v20;
  else
    v85 = v76;
  v86 = v85;
  v87 = v86;
  if (v86)
  {
    v88 = v86[2];
    v89 = v88;
    if (v88)
    {
      v90 = (void *)*((_QWORD *)v88 + 9);
      goto LABEL_79;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "stateMachineSpec_block_invoke_17");
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v111, "handleFailureInFunction:file:lineNumber:description:", v112, CFSTR("_UIEventDeferringManager.m"), 1243, CFSTR("[%p] [%@] %@: Invalid state. No local records were written."), *v5, v6, v83);

    v89 = 0;
  }
  v90 = 0;
LABEL_79:
  v91 = v90;

  v92 = (id *)*v5;
  if (*v5)
  {
    objc_msgSend(v6, "description");
    v93 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v94 = objc_msgSend(v93, "UTF8String");

    if (!v91)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v113, "handleFailureInMethod:object:file:lineNumber:description:", sel__startObservingContextForLocalTargetWindow_inEnvironment_, v92, CFSTR("_UIEventDeferringManager.m"), 2601, CFSTR("[%p] [%s] %s: Window is required to start observing context changes"), v92, v94, "-[_UIEventDeferringManager _startObservingContextForLocalTargetWindow:inEnvironment:]");

    }
    v95 = qword_1ECD7D108;
    if (!qword_1ECD7D108)
    {
      v95 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v95, (unint64_t *)&qword_1ECD7D108);
    }
    if ((*(_BYTE *)v95 & 1) != 0)
    {
      v114 = *(NSObject **)(v95 + 8);
      if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
      {
        v115 = v114;
        v116 = objc_msgSend(v91, "_contextId");
        *(_DWORD *)buf = 134349826;
        *(_QWORD *)&buf[4] = v92;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v94;
        *(_WORD *)&buf[22] = 2050;
        v162 = v91;
        LOWORD(v163) = 1026;
        *(_DWORD *)((char *)&v163 + 2) = v116;
        _os_log_impl(&dword_185066000, v115, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}s] Start observing context for local target window: %{public}p; contextId: 0x%{public}X",
          buf,
          0x26u);

      }
    }
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", v91);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __85___UIEventDeferringManager__startObservingContextForLocalTargetWindow_inEnvironment___block_invoke;
    v162 = &unk_1E16B1C28;
    *((_QWORD *)&v163 + 1) = v91;
    *(_QWORD *)v164 = v94;
    *(_QWORD *)&v163 = v92;
    -[_UIEventDeferringManager _trackedLocalTargetWindowPointerForEnvironment:]((uint64_t)v92, (uint64_t)v6);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    if (v97)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v117 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v117, "handleFailureInMethod:object:file:lineNumber:description:", sel__trackLocalTargetWindowPointer_forEnvironment_beginObservingBlock_, v92, CFSTR("_UIEventDeferringManager.m"), 2577, CFSTR("[%p] [%@] %s: Invalid state. Attempting to set target window when one already exists: existing: %p; new: %p;"),
        v92,
        v6,
        "-[_UIEventDeferringManager _trackLocalTargetWindowPointer:forEnvironment:beginObservingBlock:]",
        objc_msgSend(v97, "pointerValue"),
        objc_msgSend(v96, "pointerValue"));

    }
    -[_UIEventDeferringManager _trackedLocalTargetWindowPointers]((uint64_t)v92);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "setObject:forKey:", v96, v6);

    -[_UIEventDeferringManager _localTargetWindowPointersUnderObservation]((uint64_t)v92);
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    v100 = objc_msgSend(v99, "containsObject:", v96);
    objc_msgSend(v99, "addObject:", v96);
    if ((v100 & 1) == 0)
      __85___UIEventDeferringManager__startObservingContextForLocalTargetWindow_inEnvironment___block_invoke(buf);

  }
  v101 = (_BYTE *)qword_1ECD7D060;
  if (!qword_1ECD7D060)
  {
    v101 = (_BYTE *)(__UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v101, (unint64_t *)&qword_1ECD7D060);
  }
  if ((*v101 & 1) != 0)
    _emitDebugLogForTransition(a3, v138, &stru_1E16EDF20, (uint64_t)v5);

  return 6;
}

uint64_t _UIEventDeferringSystemShellBehaviorIsAllowedForProcess()
{
  if ((_UIApplicationProcessIsSpringBoard() & 1) != 0
    || (_UIEventDeferringProcessIsCarPlayApp() & 1) != 0
    || (_UIEventDeferringProcessIsPineBoard() & 1) != 0)
  {
    return 1;
  }
  else
  {
    return _UIEventDeferringProcessIsCarousel();
  }
}

uint64_t _UIApplicationProcessIsSpringBoard()
{
  if (qword_1EDDC8150 != -1)
    dispatch_once(&qword_1EDDC8150, &__block_literal_global_939_0);
  return byte_1EDDC8008;
}

void _UIKitApplyPlatformVisualStyles()
{
  if (_UIKitApplyPlatformVisualStyles_onceToken != -1)
    dispatch_once(&_UIKitApplyPlatformVisualStyles_onceToken, &__block_literal_global_549);
}

CFIndex _UIScrollViewNotifyForScrollView()
{
  CFIndex result;

  result = objc_msgSend((id)UIApp, "isFrontBoard");
  if ((_DWORD)result)
    return _UIQOSExpectComplexCommit("FrontBoard");
  return result;
}

void sub_18532791C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185327AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v18 - 112), 8);

  _Unwind_Resume(a1);
}

uint64_t _UIRTreeContainerNode<_UICollectionViewRTreeElement>::enumerateElementsIntersectingWithConstRef(_QWORD *a1, float64x2_t *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t result;
  int64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  _OWORD v24[2];
  float64x2_t v25[2];

  v22 = a2[1];
  v23 = *a2;
  result = _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v25, (uint64_t)a1);
  v21 = vaddq_f64(v23, v22);
  v8 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vcgeq_f64(v23, vaddq_f64(v25[0], v25[1])), (int8x16_t)vcgtq_f64(v23, v25[0])), vandq_s8((int8x16_t)vcgtq_f64(v25[0], v23), (int8x16_t)vcgeq_f64(v25[0], v21)));
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0] & 0x8000000000000000) == 0)
  {
    v9 = a1[12] - a1[11];
    if (v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = v9 >> 5;
      if (v12 <= 1)
        v13 = 1;
      else
        v13 = v12;
      while (1)
      {
        v14 = (float64x2_t *)(a1[11] + 32 * v11);
        v15 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vcgeq_f64(v23, vaddq_f64(*v14, v14[1])), (int8x16_t)vcgtq_f64(v23, *v14)), vandq_s8((int8x16_t)vcgtq_f64(*v14, v23), (int8x16_t)vcgeq_f64(*v14, v21)));
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v15, 1), (int8x16_t)v15).u64[0] & 0x8000000000000000) == 0)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(a4 + 16))(a4, a1[8] + v10, a3);
          if (*a3)
            break;
        }
        ++v11;
        v10 += 40;
        if (v13 == v11)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v16 = a1[5];
      v17 = a1[6];
      if (v16 != v17)
      {
        v18 = v16 + 16;
        do
        {
          v19 = *(_QWORD *)(v18 - 16);
          v24[0] = v23;
          v24[1] = v22;
          result = _UIRTreeContainerNode<_UICollectionViewRTreeElement>::enumerateElementsIntersectingWithConstRef(v19, v24, a3, a4);
          if (*a3)
            v20 = 1;
          else
            v20 = v18 == v17;
          v18 += 16;
        }
        while (!v20);
      }
    }
  }
  return result;
}

void sub_1853287F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_185329574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_185329EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s24_sb32_sb40(&a9);
  _Unwind_Resume(a1);
}

void sub_185329FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s24_sb32_sb40(&a9);
  _Unwind_Resume(a1);
}

id UIListContentConfiguration.directionalLayoutMargins.setter(double a1, double a2, double a3, double a4)
{
  uint64_t *v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v14;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v4;
  if (isUniquelyReferenced_nonNull_native)
  {
    v11 = *(void **)(v10 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v10 + 16), sel_copy);
    sub_186507B1C();
    swift_unknownObjectRelease();
    sub_1851F9080(0, (unint64_t *)&unk_1EDD82AA8);
    swift_dynamicCast();
    v11 = v14;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD748F0);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v14;
    swift_release();
    *v4 = v12;
  }
  return objc_msgSend(v11, sel_setDirectionalLayoutMargins_, a1, a2, a3, a4);
}

uint64_t UIListContentConfiguration.updated(for:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t result;

  v4 = *(void **)(*(_QWORD *)v2 + 16);
  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  v7 = v4;
  v8 = objc_msgSend(v7, sel_updatedConfigurationForState_, sub_18532E660(v5, v6));

  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD748F0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v8;
  *a2 = result;
  return result;
}

uint64_t _UIUpdateButtonUsingButtonConfiguration(void *a1, id *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v11;
  void *v12;

  v5 = a1;
  v6 = a3;
  if (!a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _UIUpdateButtonUsingButtonConfiguration(UIView * _Nonnull __strong, UIButton * _Nullable __strong * _Nonnull, UIContentUnavailableButtonProperties * _Nonnull __strong)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("UIContentUnavailableButtonProperties_Internal.h"), 66, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("buttonPtr != NULL"));

  }
  v7 = *a2;
  if (-[UIContentUnavailableButtonProperties _hasButton]((uint64_t)v6))
  {
    if (v7)
    {
      if (objc_msgSend(v7, "isHidden"))
      {
        objc_msgSend(v7, "setHidden:", 0);
        v8 = 1;
      }
      else
      {
        v8 = 0;
      }
    }
    else
    {
      v8 = 1;
      +[UIButton buttonWithType:](UIButton, "buttonWithType:", 1);
      v7 = (id)objc_claimAutoreleasedReturnValue();
      objc_storeStrong(a2, v7);
    }
    objc_msgSend(v7, "superview");
    v9 = (id)objc_claimAutoreleasedReturnValue();

    if (v9 != v5)
      objc_msgSend(v5, "addSubview:", v7);
    -[UIContentUnavailableButtonProperties _applyToButton:]((uint64_t)v6, v7);
  }
  else if (v7 && (objc_msgSend(v7, "isHidden") & 1) == 0)
  {
    v8 = 1;
    objc_msgSend(v7, "setHidden:", 1);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t _UIContentUnavailableUpdateLabelUsingTextConfiguration(void *a1, id *a2, void *a3)
{
  id v5;
  _QWORD *v6;
  UILabel *v7;
  UILabel *v8;
  uint64_t v9;
  id v10;
  void *v12;
  void *v13;

  v5 = a1;
  v6 = a3;
  if (!a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _UIContentUnavailableUpdateLabelUsingTextConfiguration(UIView * _Nonnull __strong, UILabel * _Nullable __strong * _Nonnull, UIContentUnavailableTextProperties * _Nonnull __strong)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("UIContentUnavailableTextProperties_Internal.h"), 71, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("labelPtr != NULL"));

  }
  v7 = (UILabel *)*a2;
  v8 = v7;
  if (!v6 || !v6[2] && !v6[6])
  {
    if (v7 && !-[UIView isHidden](v7, "isHidden"))
    {
      v9 = 1;
      -[UIView setHidden:](v8, "setHidden:", 1);
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_15;
  }
  if (v7)
  {
    if (!-[UIView isHidden](v7, "isHidden"))
    {
      v9 = 0;
      goto LABEL_12;
    }
    -[UIView setHidden:](v8, "setHidden:", 0);
  }
  else
  {
    v8 = objc_alloc_init(UILabel);
    objc_storeStrong(a2, v8);
  }
  v9 = 1;
LABEL_12:
  -[UIView superview](v8, "superview");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  if (v10 != v5)
    objc_msgSend(v5, "addSubview:", v8);
  -[UIContentUnavailableTextProperties _applyToLabel:]((uint64_t)v6, v8);
LABEL_15:

  return v9;
}

void (*UIListContentConfiguration.textProperties.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_textProperties);
  objc_msgSend(v4, sel_copy);

  sub_186507B1C();
  swift_unknownObjectRelease();
  v3[7] = sub_1851F9080(0, (unint64_t *)&unk_1EDD82DB8);
  swift_dynamicCast();
  v5 = v3[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD82E70);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  v3[4] = v6;
  return sub_1850ED294;
}

uint64_t sub_18532ABF0@<X0>(SEL *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  id v8;
  uint64_t result;
  uint64_t v10;

  v8 = objc_msgSend(*(id *)(*(_QWORD *)v4 + 16), *a1);
  objc_msgSend(v8, sel_copy);

  sub_186507B1C();
  swift_unknownObjectRelease();
  sub_1851F9080(0, a2);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v10;
  *a4 = result;
  return result;
}

NSString *_UIContentSizeCategoryMin(void *a1, void *a2)
{
  NSString *v3;
  NSString *v4;
  NSString *v5;
  NSString *v6;

  v3 = a2;
  v4 = a1;
  if (UIContentSizeCategoryCompareToCategory(v4, v3) == NSOrderedDescending)
    v5 = v3;
  else
    v5 = v4;
  v6 = v5;

  return v6;
}

double UIRectCenteredYInRectScale(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (a9 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
  return a1;
}

void _UIContentViewUpdateLabelAttributesForAccessibilityLayout(void *a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  float v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  id v36;
  double v37;
  void *v38;
  double v39;
  float v40;
  uint64_t v41;
  double v42;
  float v43;
  uint64_t v44;
  double v45;
  unint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;

  v55 = a1;
  v7 = a2;
  if (v55 && (objc_msgSend(v55, "isHidden") & 1) == 0 && objc_msgSend(v7, "_hasNonEmptyPlainTextOnly"))
  {
    v8 = 0.0;
    if ((unint64_t)(a3 - 1) <= 1)
    {
      if (objc_msgSend(v55, "numberOfLines") == 1)
        v8 = 0.0;
      else
        v8 = 1.0;
    }
    if (a4 > 0.0 || v8 > 0.0)
    {
      objc_msgSend(v55, "_setOverallWritingDirectionFollowsLayoutDirection:", 1);
      objc_msgSend(v55, "attributedText");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (void *)objc_msgSend(v23, "mutableCopy");

      if (!objc_msgSend(v9, "length"))
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIContentViewUpdateLabelAttributesForAccessibilityLayout(UILabel *__strong _Nonnull, __strong id<_UIListContentTextPropertiesInternal> _Nonnull, _UIContentViewLayoutMode, CGFloat)");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "handleFailureInFunction:file:lineNumber:description:", v51, CFSTR("_UIContentViewShared.m"), 88, CFSTR("Can't set attributes on a zero length string!"));

      }
      objc_msgSend(v9, "string");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "paragraphRangeForRange:", 0, 0);
      v27 = v26;

      v28 = *(_QWORD *)off_1E1678F98;
      objc_msgSend(v9, "attribute:atIndex:effectiveRange:", *(_QWORD *)off_1E1678F98, v25, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v29;
      if (v29)
        v30 = (id)objc_msgSend(v29, "mutableCopy");
      else
        v30 = objc_alloc_init((Class)off_1E1679BC0);
      v22 = v30;
      objc_msgSend(v30, "setFirstLineHeadIndent:", a4);
      *(float *)&v31 = v8;
      objc_msgSend(v22, "setHyphenationFactor:", v31);
      objc_msgSend(v9, "addAttribute:value:range:", v28, v22, v25, v27);
      v32 = v25 + v27;
      if (objc_msgSend(v9, "length") > v32)
      {
        v33 = objc_msgSend(v9, "length") - v32;
        objc_msgSend(v9, "attribute:atIndex:effectiveRange:", v28, v32, 0);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = v34;
        if (v34)
          v36 = (id)objc_msgSend(v34, "mutableCopy");
        else
          v36 = objc_alloc_init((Class)off_1E1679BC0);
        v49 = v36;
        *(float *)&v37 = v8;
        objc_msgSend(v36, "setHyphenationFactor:", v37);
        objc_msgSend(v9, "addAttribute:value:range:", v28, v49, v32, v33);

      }
      objc_msgSend(v55, "setAttributedText:", v9);
      goto LABEL_50;
    }
    objc_msgSend(v55, "_setOverallWritingDirectionFollowsLayoutDirection:", 0);
    objc_msgSend(v55, "_content");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "length");
    if (v10 < 1)
    {
LABEL_51:

      goto LABEL_52;
    }
    v11 = v10;
    objc_msgSend(v9, "string");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "paragraphRangeForRange:", 0, 0);
    v15 = v14;

    if (v11 <= v13 + v15)
      v16 = 0;
    else
      v16 = v11 - (v13 + v15);
    if (v11 <= v13 + v15)
      v17 = 0;
    else
      v17 = v13 + v15;
    if (objc_msgSend(v9, "isAttributed"))
    {
      objc_msgSend(v9, "attributedString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = *(_QWORD *)off_1E1678F98;
      objc_msgSend(v18, "attribute:atIndex:effectiveRange:", *(_QWORD *)off_1E1678F98, v13, 0);
      v20 = (id)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        objc_msgSend(v9, "attributedString");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "attribute:atIndex:effectiveRange:", v19, v17, 0);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_31;
      }
    }
    else
    {
      objc_msgSend(v9, "defaultAttributes");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = *(_QWORD *)off_1E1678F98;
      objc_msgSend(v38, "objectForKey:", *(_QWORD *)off_1E1678F98);
      v20 = (id)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        v20 = v20;
        v22 = v20;
        goto LABEL_31;
      }
    }
    v22 = 0;
LABEL_31:
    v54 = v19;
    if (!v20
      || (objc_msgSend(v20, "firstLineHeadIndent"), v39 == 0.0) && (objc_msgSend(v20, "hyphenationFactor"), v40 == 0.0))
    {
      v41 = 0;
    }
    else
    {
      v41 = objc_msgSend(v20, "mutableCopy");
      objc_msgSend((id)v41, "setFirstLineHeadIndent:", 0.0);
      LODWORD(v42) = 0;
      objc_msgSend((id)v41, "setHyphenationFactor:", v42);
    }
    v53 = v15;
    if (!v22 || (objc_msgSend(v22, "hyphenationFactor"), v43 == 0.0))
    {
      v44 = 0;
    }
    else
    {
      v44 = objc_msgSend(v22, "mutableCopy");
      LODWORD(v45) = 0;
      objc_msgSend((id)v44, "setHyphenationFactor:", v45);
    }
    if (v41 | v44)
    {
      v52 = v17;
      v46 = v16;
      objc_msgSend(v9, "attributedString");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = (void *)objc_msgSend(v47, "mutableCopy");

      if (v41)
        objc_msgSend(v48, "addAttribute:value:range:", v54, v41, v13, v53);
      if (v44)
        objc_msgSend(v48, "addAttribute:value:range:", v54, v44, v52, v46);
      objc_msgSend(v55, "setAttributedText:", v48);

    }
LABEL_50:

    goto LABEL_51;
  }
LABEL_52:

}

BOOL _UIContentViewShouldUseAccessibilityLargeTextLayout(void *a1)
{
  id v1;
  NSString *v2;
  _BOOL8 v3;

  v1 = a1;
  objc_msgSend(v1, "preferredContentSizeCategory");
  v2 = (NSString *)objc_claimAutoreleasedReturnValue();
  v3 = UIContentSizeCategoryIsAccessibilityCategory(v2) && objc_msgSend(v1, "userInterfaceIdiom") != 3;

  return v3;
}

uint64_t _UIUpdateLabelUsingTextConfiguration(void *a1, id *a2, void *a3)
{
  id v5;
  _QWORD *v6;
  UILabel *v7;
  UILabel *v8;
  uint64_t v9;
  void *v11;
  void *v12;

  v5 = a1;
  v6 = a3;
  if (!a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIListTextPropertiesUpdateResult _UIUpdateLabelUsingTextConfiguration(UIView * _Nonnull __strong, UILabel * _Nullable __strong * _Nonnull, UIListContentTextProperties * _Nonnull __strong)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("UIListContentTextProperties_Internal.h"), 90, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("labelPtr != NULL"));

  }
  v7 = (UILabel *)*a2;
  v8 = v7;
  if (v6 && (v6[3] || v6[9]))
  {
    if (v7)
    {
      if (-[UIView isHidden](v7, "isHidden"))
      {
        -[UIView setHidden:](v8, "setHidden:", 0);
        v9 = 2;
      }
      else
      {
        v9 = 0;
      }
    }
    else
    {
      v8 = objc_alloc_init(UILabel);
      objc_storeStrong(a2, v8);
      objc_msgSend(v5, "addSubview:", v8);
      v9 = 1;
    }
    -[UIListContentTextProperties _applyToLabel:]((uint64_t)v6, v8);
  }
  else if (v7 && !-[UIView isHidden](v7, "isHidden"))
  {
    -[UIView setHidden:](v8, "setHidden:", 1);
    v9 = 2;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

double _UIContentViewImageViewLayoutHeight(void *a1, void *a2, double a3, double a4, double a5)
{
  id v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;

  v9 = a1;
  v10 = a2;
  if (a4 == -1.79769313e308 || v9 && a4 == 0.0 && objc_msgSend(v9, "isSymbolImage"))
  {
    _UITableConstantsForTraitCollection(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "defaultImageViewSymbolImageLayoutHeightForTraitCollection:", v10);
    a4 = v12;

  }
  if (a3 >= a5)
    v13 = a5;
  else
    v13 = a3;
  if (a5 <= 0.0)
    v13 = a3;
  if (a4 == 0.0)
    v14 = v13;
  else
    v14 = a4;

  return v14;
}

double _UIContentViewImageViewHorizontalCenteringOffset(void *a1, void *a2, uint64_t a3, double a4, double a5)
{
  id v9;
  id v10;
  void *v11;
  double v12;
  double v13;

  v9 = a1;
  v10 = a2;
  if (a5 == -1.79769313e308 || a5 == 0.0 && _UITableCellShouldCenterImageHorizontallyForTraitCollection(v9, v10))
  {
    _UITableConstantsForTraitCollection(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "defaultImageViewSymbolImageAndAccessoryLayoutWidthForSidebar:traitCollection:", a3, v10);
    a5 = v12;

  }
  if (a5 <= 0.0)
    v13 = 0.0;
  else
    v13 = (a5 - a4) * 0.5;

  return v13;
}

uint64_t UIBackgroundConfiguration.updated(for:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t result;

  v4 = *(void **)(*(_QWORD *)v2 + 16);
  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  v7 = v4;
  v8 = objc_msgSend(v7, sel_updatedConfigurationForState_, sub_18532E660(v5, v6));

  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD74A78);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v8;
  *a2 = result;
  return result;
}

id sub_18532E660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;

  v3 = v2;
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v23 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v13((char *)&v23 - v14, v3, a1);
  if (swift_dynamicCast())
  {
    v15 = v24;
    v16 = v26;
    swift_bridgeObjectRelease();

    v13(v11, v3, a1);
    v17 = &qword_1EDD82CC8;
  }
  else
  {
    v13(v8, v3, a1);
    if (!swift_dynamicCast())
    {
      v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
      v20 = objc_msgSend(objc_allocWithZone((Class)UICellConfigurationState), sel_initWithTraitCollection_, v21);

      return v20;
    }
    v18 = v24;
    v19 = v25;
    swift_bridgeObjectRelease();

    v13(v11, v3, a1);
    v17 = (unint64_t *)&unk_1EDD8B318;
  }
  sub_1851F9080(0, v17);
  swift_dynamicCast();
  return v24;
}

uint64_t initializeWithCopy for UICellConfigurationState(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = v3;
  swift_bridgeObjectRetain();
  v6 = v4;
  return a1;
}

void sub_18532F348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFIndex _UIQOSExcludeCommitFromGlitchTrackingIfUnmanaged()
{
  CFIndex result;

  if (qword_1ECD82128 != -1)
    dispatch_once(&qword_1ECD82128, &__block_literal_global_5_13);
  result = CFDictionaryGetCount((CFDictionaryRef)qword_1ECD82130);
  if (!result)
    return objc_msgSend(MEMORY[0x1E0CD28B0], "setFrameStallSkipRequest:", 1);
  return result;
}

void sub_185331884(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x310], 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

id __scrollViewAncestorOfView(id a1, char a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    while (!objc_msgSend(v3, "__isKindOfUIScrollView")
         || (a2 & 1) == 0 && (objc_msgSend(v3, "_forwardsToParentScroller") & 1) != 0)
    {
      a1 = (id)objc_msgSend(v3, "superview");
      v3 = a1;
      if (!a1)
        return a1;
    }
    a1 = v3;
  }
  return a1;
}

uint64_t ___processHasBackgroundFeedbackEntitlement_block_invoke()
{
  uint64_t result;

  result = UISelfTaskHasEntitlement(CFSTR("com.apple.private.allow-background-haptics"));
  byte_1ECD7B841 = result;
  return result;
}

uint64_t ___3rdParty_batteryInformationChanged_block_invoke()
{
  uint64_t result;

  result = UISelfTaskHasEntitlement(CFSTR("com.apple.private.iokit.batterydataprecise"));
  byte_1ECD7E311 = result;
  return result;
}

void ___filesProtectedWhileLocked_block_invoke()
{
  char v0;
  void *v1;

  _UICopyValueForEntitlementUsingTaskCreationBlock(CFSTR("com.apple.developer.default-data-protection"), (uint64_t)&__block_literal_global_598);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Checking if files are protected while locked, entitlement value is %@"), "BOOL _filesProtectedWhileLocked(void)_block_invoke", v1);
  if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0CB2AB0]) & 1) != 0)
    v0 = 1;
  else
    v0 = objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0CB2AB8]);
  byte_1ECD7F324 = v0;

}

uint64_t UISelfTaskHasEntitlement(void *a1)
{
  id v1;
  id v2;
  uint64_t HasEntitlement;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __UISelfTaskHasEntitlement_block_invoke;
  v5[3] = &unk_1E16B4878;
  v6 = v1;
  v2 = v1;
  HasEntitlement = _UITaskHasEntitlement((uint64_t)v2, (uint64_t)v5);

  return HasEntitlement;
}

uint64_t _UITaskHasEntitlement(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  CFTypeID v4;
  uint64_t v5;

  (*(void (**)(uint64_t))(a2 + 16))(a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2 && (v4 = CFGetTypeID(v2), v4 == CFBooleanGetTypeID()))
    v5 = objc_msgSend(v3, "BOOLValue");
  else
    v5 = 0;

  return v5;
}

id _UICopyValueForEntitlementUsingTaskCreationBlock(void *a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);
  __CFString *v4;
  __SecTask *v5;
  __SecTask *v6;
  void *v7;
  CFErrorRef error;

  v3 = *(uint64_t (**)(uint64_t))(a2 + 16);
  v4 = a1;
  v5 = (__SecTask *)v3(a2);
  if (v5)
  {
    v6 = v5;
    error = 0;
    v7 = (void *)SecTaskCopyValueForEntitlement(v5, v4, &error);

    if (error)
    {
      NSLog(CFSTR("Unable to get entitlements for client task. Error: %@"), error);
      CFRelease(error);
    }
    CFRelease(v6);
  }
  else
  {
    NSLog(CFSTR("Unable to create security task for checking entitlement %@"), v4);

    v7 = 0;
  }
  return v7;
}

void sub_185335DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAFAnalyticsTurnBasedInstrumentationContextClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!qword_1ECD7F0C0)
    qword_1ECD7F0C0 = _sl_dlopen();
  if (!qword_1ECD7F0C0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AssistantServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("UIKBRTIPartner.m"), 123, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("AFAnalyticsTurnBasedInstrumentationContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAFAnalyticsTurnBasedInstrumentationContextClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIKBRTIPartner.m"), 124, CFSTR("Unable to find class %s"), "AFAnalyticsTurnBasedInstrumentationContext");

LABEL_8:
    __break(1u);
  }
  _MergedGlobals_1143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

double MillimeterSizeToPointSize()
{
  void *v0;
  double v1;
  double v2;

  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_nativePointsPerMillimeter");
  v2 = v1;

  return v2 * 4.96247727;
}

double _UIKBGetDockItemTouchPaddingForCurrentDevice()
{
  void *v0;
  unint64_t v1;
  void *v2;
  double v3;
  double v4;

  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "_screenType");

  if (v1 != -1 && _UIScreenIsPhyiscallyLargePhone(v1))
    _UIScreenScaleForType(v1);
  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_nativePointsPerMillimeter");
  v4 = v3;

  return v4 * -2.162;
}

void sub_185338E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAFDictationConnectionClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AssistantServicesLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AFDictationConnection");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAFDictationConnectionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAFDictationConnectionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIDictationConnection.m"), 55, CFSTR("Unable to find class %s"), "AFDictationConnection");

    __break(1u);
  }
}

void _addInteractiveLayouts(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v15;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v10);
        if (objc_msgSend(v11, "isGroupLayout"))
        {
          objc_msgSend(v11, "subLayouts");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          _addInteractiveLayouts(v12, v6, a3);
LABEL_8:

          goto LABEL_10;
        }
        if ((objc_msgSend(v11, "isSpaceLayout") & 1) == 0)
        {
          objc_msgSend(v11, "barButtonItem");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if ((_DWORD)a3)
            objc_msgSend(v6, "insertObject:atIndex:", v12, 0);
          else
            objc_msgSend(v6, "addObject:", v12);
          goto LABEL_8;
        }
LABEL_10:
        ++v10;
      }
      while (v8 != v10);
      v13 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v8 = v13;
    }
    while (v13);
  }

}

id _viewRepresentingItem(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  int v6;
  id v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v4, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "isCustomViewItem");

  if (v6)
  {
    objc_msgSend(v5, "superview");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7 != v3)
    {
      v9 = v7;

      v5 = v9;
    }

  }
  return v5;
}

void _configureInsets(void *a1, double a2, double a3)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v9;
  id v10;
  CGRect v11;
  CGRect v12;

  v10 = a1;
  objc_msgSend(v10, "frame");
  x = v11.origin.x;
  y = v11.origin.y;
  width = v11.size.width;
  height = v11.size.height;
  v9 = -fmax(fmin(CGRectGetMinX(v11) - a2, 22.0), 0.0);
  v12.origin.x = x;
  v12.origin.y = y;
  v12.size.width = width;
  v12.size.height = height;
  objc_msgSend(v10, "setHitTestInsets:", 0.0, v9, 0.0, -fmax(fmin(a3 - CGRectGetMaxX(v12), 22.0), 0.0));

}

void _UIGrabberCommonInit(_BYTE *a1)
{
  _QWORD *v1;
  _UILumaTrackingBackdropView *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  void *v8;
  UIVisualEffectView *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  a1[465] = 1;
  v1 = a1;
  v2 = [_UILumaTrackingBackdropView alloc];
  objc_msgSend(v1, "bounds");
  v7 = -[_UILumaTrackingBackdropView initWithTransitionBoundaries:delegate:frame:](v2, "initWithTransitionBoundaries:delegate:frame:", v1, 0.45, 0.55, v3, v4, v5, v6);
  v8 = (void *)v1[60];
  v1[60] = v7;

  objc_msgSend(v1, "addSubview:", v1[60]);
  v9 = objc_alloc_init(UIVisualEffectView);
  v10 = (void *)v1[59];
  v1[59] = v9;

  objc_msgSend(v1, "addSubview:", v1[59]);
  v11 = *MEMORY[0x1E0CD2A68];
  objc_msgSend(v1, "layer");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setCornerCurve:", v11);

  objc_msgSend(v1, "setClipsToBounds:", 1);
  v16[0] = 0x1E1A994B0;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v16, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (id)objc_msgSend(v1, "_registerForTraitTokenChanges:withTarget:action:", v13, v1, sel_setNeedsLayout);

  objc_msgSend(v1, "pointerInteraction");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "setEnabled:", 1);
}

void _unregisterAccessibilityNotifications(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)(a1 + 240))
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "_removeObserver:", *(_QWORD *)(a1 + 240));

    *(_QWORD *)(a1 + 240) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::__unordered_map_hasher<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_1853413F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id location)
{
  id *v41;
  id *v42;
  uint64_t v43;

  objc_destroyWeak(v42);
  objc_destroyWeak(v41);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v43 - 176), 8);
  _Unwind_Resume(a1);
}

id KeyboardArbiterClientLog()
{
  if (qword_1ECD7CE58 != -1)
    dispatch_once(&qword_1ECD7CE58, &__block_literal_global_24);
  return (id)_MergedGlobals_973;
}

id KeyboardArbiterClientLog_0()
{
  if (qword_1ECD7D780 != -1)
    dispatch_once(&qword_1ECD7D780, &__block_literal_global_504);
  return (id)qword_1ECD7D778;
}

id KeyboardArbiterClientLog_1()
{
  if (qword_1ECD7A380 != -1)
    dispatch_once(&qword_1ECD7A380, &__block_literal_global_955);
  return (id)qword_1ECD7A378;
}

id KeyboardArbiterClientLog_2()
{
  if (qword_1ECD7F1A8 != -1)
    dispatch_once(&qword_1ECD7F1A8, &__block_literal_global_187_0);
  return (id)_MergedGlobals_1152;
}

id KeyboardArbiterClientLog_3()
{
  if (qword_1ECD7AE40 != -1)
    dispatch_once(&qword_1ECD7AE40, &__block_literal_global_368_0);
  return (id)qword_1ECD7AE38;
}

uint64_t static UIButton.Configuration.gray()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1854AF788((SEL *)&selRef_grayButtonConfiguration, a1);
}

void UIButton.Configuration.baseBackgroundColor.setter(void *a1)
{
  sub_1852563B8(a1, (const char **)&selRef_setBaseBackgroundColor_);
}

uint64_t UIButton.Configuration.attributedTitle.setter(uint64_t a1)
{
  return sub_18521AB24(a1, (SEL *)&selRef_setAttributedTitle_);
}

id UIButton.Configuration.imagePlacement.setter(uint64_t a1)
{
  return sub_1852D81B8(a1, (SEL *)&selRef_setImagePlacement_);
}

id UIButton.Configuration.contentInsets.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_contentInsets);
}

uint64_t sub_1853440F4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_185344184()
{
  return swift_allocateGenericValueMetadata();
}

id UIViewController.registerForTraitChanges<A>(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1852497EC(a1, a2, a3, a4, (uint64_t)&unk_1E16A1FF0, (uint64_t)sub_185174D68, (uint64_t)&block_descriptor_35);
}

id UINavigationItem.renameDelegate.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *ObjCClassFromMetadata;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;

  if (!a1)
    return objc_msgSend(v2, sel__dci_setRenameHandler_, 0);
  _s35_UINavigationItemSwiftRenameHandlerCMa();
  v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 24) = a2;
  swift_unknownObjectWeakInit();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v5;
  v37 = sub_185645A7C;
  v38 = v6;
  v7 = MEMORY[0x1E0C809B0];
  v33 = MEMORY[0x1E0C809B0];
  v34 = 1107296256;
  v35 = sub_185644F5C;
  v36 = &block_descriptor_18;
  v8 = _Block_copy(&v33);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  v10 = objc_msgSend(ObjCClassFromMetadata, sel_handlerWithDidEndRenamingHandler_, v8);
  _Block_release(v8);
  swift_release();
  swift_release();
  swift_release();
  v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 24) = a2;
  swift_unknownObjectWeakInit();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v12;
  v37 = sub_185645A88;
  v38 = v13;
  v33 = v7;
  v34 = 1107296256;
  v35 = sub_1856450EC;
  v36 = &block_descriptor_14;
  v14 = _Block_copy(&v33);
  v15 = v10;
  swift_release();
  objc_msgSend(v15, sel_setShouldBeginRenamingHandler_, v14);
  _Block_release(v14);

  v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 24) = a2;
  swift_unknownObjectWeakInit();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v17;
  v37 = sub_185645A94;
  v38 = v18;
  v33 = v7;
  v34 = 1107296256;
  v35 = sub_185645308;
  v36 = &block_descriptor_22_1;
  v19 = _Block_copy(&v33);
  v20 = v15;
  swift_release();
  objc_msgSend(v20, sel_setWillBeginRenamingWithRangeHandler_, v19);
  _Block_release(v19);

  v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 24) = a2;
  swift_unknownObjectWeakInit();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v21;
  *(_QWORD *)(v23 + 24) = v22;
  v37 = sub_185645AA0;
  v38 = v23;
  v33 = v7;
  v34 = 1107296256;
  v35 = sub_1856454C8;
  v36 = &block_descriptor_30_1;
  v24 = _Block_copy(&v33);
  v25 = v20;
  swift_release();
  objc_msgSend(v25, sel_setShouldEndRenamingHandler_, v24);
  _Block_release(v24);

  v26 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 24) = a2;
  swift_unknownObjectWeakInit();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v26;
  *(_QWORD *)(v28 + 24) = v27;
  v37 = sub_185645AAC;
  v38 = v28;
  v33 = v7;
  v34 = 1107296256;
  v35 = sub_185645704;
  v36 = &block_descriptor_38_0;
  v29 = _Block_copy(&v33);
  v30 = (char *)v25;
  swift_release();
  objc_msgSend(v30, sel_setFileURLForRenaming_, v29);
  _Block_release(v29);

  *(_QWORD *)&v30[OBJC_IVAR____TtCE5UIKitCSo16UINavigationItem35_UINavigationItemSwiftRenameHandler_delegate + 8] = a2;
  swift_unknownObjectWeakAssign();
  v31 = v30;
  objc_msgSend(v2, sel__dci_setRenameHandler_, v31);

  return (id)swift_unknownObjectRelease_n();
}

void type metadata accessor for NSUnderlineStyle(uint64_t a1)
{
  sub_185249668(a1, qword_1EDD82F08);
}

double static UIShape.capsule.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 6;
  return result;
}

void sub_1853446E0(uint64_t a1, SEL *a2, uint64_t *a3, _QWORD *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = objc_msgSend((id)objc_opt_self(), *a2);
  v7 = sub_1865074F8();
  v9 = v8;

  *a3 = v7;
  *a4 = v9;
}

id sub_18534474C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  double v13;
  char v14;
  char v15;
  id v16;
  uint64_t v18;
  id v19;
  uint64_t v20;
  double v21;

  v4 = a4;
  v20 = a1;
  v6 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v18 - v9;
  v19 = (id)objc_opt_self();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a3, v6);
  v11 = (void *)sub_1865074D4();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(a3, v6);
  v12 = (void *)sub_1865074D4();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a3, v6);
  (*(void (**)(double *__return_ptr, char *, uint64_t, uint64_t))(v4 + 24))(&v21, v10, a3, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  v13 = v21;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(a3, v6);
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(a3, v6);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(a3, v6);
  v16 = objc_msgSend(v19, sel__defineCGFloatTraitWithName_identifier_defaultValue_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v11, v12, v14 & 1, v4 & 1, v15 & 1, v20, v13);

  return v16;
}

uint64_t method lookup function for UICollectionViewDiffableDataSource()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for UIContentUnavailableConfiguration()
{
  return &type metadata for UIContentUnavailableConfiguration;
}

uint64_t static UIContentUnavailableConfiguration.loading()@<X0>(uint64_t *a1@<X8>)
{
  return sub_18547DB90((SEL *)&selRef_loadingConfiguration, a1);
}

void UIContentUnavailableConfiguration.text.setter(uint64_t a1, uint64_t a2)
{
  sub_1854AB6C8(a1, a2, (SEL *)&selRef_setText_);
}

void UIContentUnavailableConfiguration.background.setter(uint64_t *a1)
{
  sub_1854AB7BC(a1, (unint64_t *)&qword_1ECD74850, (uint64_t)off_1E167A390, (SEL *)&selRef_setBackground_);
}

ValueMetadata *type metadata accessor for HoverStyleDriverCoordinator()
{
  return &type metadata for HoverStyleDriverCoordinator;
}

ValueMetadata *type metadata accessor for UITraitLegibilityWeight()
{
  return &type metadata for UITraitLegibilityWeight;
}

id sub_185344974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  uint64_t v15;

  v7 = (void *)objc_opt_self();
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  v8 = (void *)sub_1865074D4();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  v9 = (void *)sub_1865074D4();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v15, a3, a4);
  v10 = v15;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  v13 = objc_msgSend(v7, sel__defineNSIntegerTraitWithName_identifier_defaultValue_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v8, v9, v10, v11 & 1, v12 & 1, (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) & 1, a1);

  return v13;
}

uint64_t static UITraitDefinition._isPrivate.getter()
{
  return 0;
}

ValueMetadata *type metadata accessor for UIHoverLiftEffect()
{
  return &type metadata for UIHoverLiftEffect;
}

ValueMetadata *type metadata accessor for HoverStyleHost()
{
  return &type metadata for HoverStyleHost;
}

void static UIHoverEffect<>.lift.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.TrackingAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.TrackingAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.StrikethroughColorAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.StrikethroughColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.BackgroundColorAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.BackgroundColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.UnderlineStyleAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.UnderlineStyleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.UnderlineColorAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.UnderlineColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.ParagraphStyleAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.ParagraphStyleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.BaselineOffsetAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.BaselineOffsetAttribute;
}

BOOL UIAccessibilityIsGrayscaleEnabled(void)
{
  return _AXSGrayscaleEnabled() != 0;
}

void UIViewControllerAlertForAppearanceCallbackMisuse(void *a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  NSObject *v6;
  int v7;
  id v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = UIViewControllerAlertForAppearanceCallbackMisuse___s_category[0];
  if (!UIViewControllerAlertForAppearanceCallbackMisuse___s_category[0])
  {
    v5 = __UILogCategoryGetNode("ViewController", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v5, UIViewControllerAlertForAppearanceCallbackMisuse___s_category);
  }
  v6 = *(NSObject **)(v5 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = 138412546;
    v8 = v3;
    v9 = 2112;
    v10 = v4;
    _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "Calling %@ directly on a view controller is not supported, and may result in out-of-order callbacks and other inconsistent behavior. Use the -beginAppearanceTransition:animated: and -endAppearanceTransition APIs on UIViewController to manually drive appearance callbacks instead. Make a symbolic breakpoint at UIViewControllerAlertForAppearanceCallbackMisuse to catch this in the debugger. View controller: %@", (uint8_t *)&v7, 0x16u);
  }

}

uint64_t _UIAncestorViewControllerIsInAnimatedTransition(void *a1)
{
  uint64_t result;
  void *v2;
  void *v3;
  uint64_t v4;

  result = (uint64_t)(id)objc_msgSend(a1, "_viewControllerForAncestor");
  if (result)
  {
    v2 = (void *)result;
    if (objc_msgSend((id)result, "isInAnimatedVCTransition"))
    {
      return 1;
    }
    else
    {
      objc_msgSend(v2, "_existingView");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = _UIAncestorViewControllerIsInAnimatedTransition(objc_msgSend(v3, "superview"));

      return v4;
    }
  }
  return result;
}

void sub_185348DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_185349034(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185349418(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_185349634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1853496F0(_Unwind_Exception *exception_object)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_185349710(void *a1)
{
  uint64_t v1;

  objc_begin_catch(a1);
  if (!v1)
    JUMPOUT(0x1853496D4);
  JUMPOUT(0x1853496C8);
}

void UICellAccessory.ReorderOptions.init(isHidden:reservedLayoutWidth:tintColor:showsVerticalSeparator:)(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char v9;
  char v10;
  unsigned __int8 v11;
  char v12;
  int v13;
  double v14;
  void *v15;
  unsigned __int8 v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;

  v8 = *(_QWORD *)a2;
  v9 = *(_BYTE *)(a2 + 8);
  v10 = *(_BYTE *)(a2 + 9);
  if (a1 == 2)
  {
    if (qword_1EDD82968 != -1)
      swift_once();
    v11 = objc_msgSend((id)qword_1EDD82960, sel_isHidden);
    if ((v10 & 1) == 0)
    {
LABEL_5:
      v12 = v9 & 1;
      v13 = a4;
      if (!a3)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    v11 = a1 & 1;
    if ((*(_BYTE *)(a2 + 9) & 1) == 0)
      goto LABEL_5;
  }
  if (qword_1EDD82968 != -1)
    swift_once();
  objc_msgSend((id)qword_1EDD82960, sel_reservedLayoutWidth);
  if (v14 != 0.0)
  {
    v8 = *(_QWORD *)&v14;
    if (v14 == -1.79769313e308)
    {
      v12 = 1;
      v8 = 1;
      v13 = a4;
      if (a3)
        goto LABEL_15;
    }
    else
    {
      v12 = 0;
      v13 = a4;
      if (a3)
        goto LABEL_15;
    }
LABEL_18:
    if (qword_1EDD82968 != -1)
      swift_once();
    v17 = objc_msgSend((id)qword_1EDD82960, sel_tintColor);
    v15 = v17;
    if (v13 != 2)
    {
      v16 = v13 & 1;
      goto LABEL_26;
    }
    v18 = v17;
    goto LABEL_22;
  }
  v12 = 1;
  v8 = 0;
  v13 = a4;
  if (!a3)
    goto LABEL_18;
LABEL_15:
  v15 = a3;
  if (v13 != 2)
  {
    v16 = v13 & 1;
    v15 = a3;
    goto LABEL_26;
  }
LABEL_22:
  v19 = qword_1EDD82968;
  v20 = a3;
  if (v19 != -1)
    swift_once();
  v21 = (id)qword_1EDD82960;
  v16 = objc_msgSend(v21, sel_showsVerticalSeparator);

LABEL_26:
  *(_BYTE *)a5 = v11;
  *(_QWORD *)(a5 + 8) = v8;
  *(_BYTE *)(a5 + 16) = v12;
  *(_QWORD *)(a5 + 24) = v15;
  *(_BYTE *)(a5 + 32) = v16;
}

id sub_185349B04@<X0>(id result@<X0>, uint64_t a2@<X1>, id a3@<X2>, _QWORD *a4@<X3>, id *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  double v15;

  v10 = *(_QWORD *)a2;
  v11 = *(_BYTE *)(a2 + 8);
  v12 = *(_BYTE *)(a2 + 9);
  if (result == 2)
  {
    if (*a4 != -1)
      swift_once();
    result = objc_msgSend(*a5, sel_isHidden);
    v13 = (char)result;
    if ((v12 & 1) == 0)
    {
LABEL_5:
      v14 = v11 & 1;
      if (a3)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  else
  {
    v13 = result & 1;
    if ((*(_BYTE *)(a2 + 9) & 1) == 0)
      goto LABEL_5;
  }
  if (*a4 != -1)
    swift_once();
  result = objc_msgSend(*a5, sel_reservedLayoutWidth);
  if (v15 == 0.0)
  {
    v14 = 1;
    v10 = 0;
    if (a3)
      goto LABEL_20;
  }
  else
  {
    v10 = *(_QWORD *)&v15;
    if (v15 == -1.79769313e308)
    {
      v14 = 1;
      v10 = 1;
      if (a3)
        goto LABEL_20;
    }
    else
    {
      v14 = 0;
      if (a3)
        goto LABEL_20;
    }
  }
LABEL_17:
  if (*a4 != -1)
    swift_once();
  result = objc_msgSend(*a5, sel_tintColor);
  a3 = result;
LABEL_20:
  *(_BYTE *)a6 = v13;
  *(_QWORD *)(a6 + 8) = v10;
  *(_BYTE *)(a6 + 16) = v14;
  *(_QWORD *)(a6 + 24) = a3;
  return result;
}

void sub_185349FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _accessoryViewAsClass(void *a1, objc_class *a2)
{
  id v3;
  void *v5;
  void *v6;
  void *v7;

  v3 = a1;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "__kindof UIView * _Nonnull _accessoryViewAsClass(UIView * _Nonnull __strong, Class  _Nonnull __unsafe_unretained)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromClass(a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("UICollectionViewListCell.m"), 1437, CFSTR("Accessory view is not of expected class (%@): %@"), v7, v3);

  }
  return v3;
}

id _accessoryAsClass(void *a1, objc_class *a2)
{
  id v3;
  void *v5;
  void *v6;
  void *v7;

  v3 = a1;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "__kindof UICellAccessory * _Nonnull _accessoryAsClass(UICellAccessory * _Nonnull __strong, Class  _Nonnull __unsafe_unretained)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromClass(a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("UICollectionViewListCell.m"), 1312, CFSTR("Accessory is not of expected class (%@): %@"), v7, v3);

  }
  return v3;
}

id _UITraitsForTraitTokens(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a1, "count"));
  os_unfair_lock_lock((os_unfair_lock_t)&_UITraitLock);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(a1);
        v7 = objc_msgSend((id)qword_1ECD7F7B8, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v6));
        if (v7)
          objc_msgSend(v2, "addObject:", v7);
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_UITraitLock);
  return v2;
}

uint64_t sub_18534D62C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  sub_1851F9080(0, qword_1ECD74918);
  v2 = sub_186507654();
  swift_retain();
  v3 = v1(v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

void UICollectionViewListCell.accessories.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_186507CFC();
    v4 = 40;
    do
    {
      v5 = *(id *)(a1 + v4);
      sub_186507CD8();
      sub_186507D08();
      sub_186507D14();
      sub_186507CE4();
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  sub_1851F9080(0, qword_1ECD74918);
  v6 = (id)sub_18650763C();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setAccessories_, v6);

}

uint64_t sub_18534D7BC(unint64_t a1)
{
  uint64_t v1;

  return sub_18534D7C4(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_18534D7C4(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;

  if (a1 >> 62)
    goto LABEL_38;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    if (!v4)
    {
LABEL_36:
      v14 = a2(v5);
      swift_bridgeObjectRelease();
      return v14;
    }
    v17 = MEMORY[0x1E0DEE9D8];
    sub_1855B37A0(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v16 = a2;
    v6 = 0;
    a2 = (uint64_t (*)(uint64_t))(a1 & 0xC000000000000001);
    v5 = v17;
    while (v4 != v6)
    {
      if (a2)
        v7 = (id)MEMORY[0x186DC4CB4](v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        v9 = 0;
      }
      else
      {
        objc_opt_self();
        if (swift_dynamicCastObjCClass())
        {
          v9 = 8;
        }
        else
        {
          objc_opt_self();
          if (swift_dynamicCastObjCClass())
          {
            v9 = 2;
          }
          else
          {
            objc_opt_self();
            if (swift_dynamicCastObjCClass())
            {
              v9 = 3;
            }
            else
            {
              objc_opt_self();
              if (swift_dynamicCastObjCClass())
              {
                v9 = 4;
              }
              else
              {
                objc_opt_self();
                if (swift_dynamicCastObjCClass())
                {
                  v9 = 5;
                }
                else
                {
                  objc_opt_self();
                  if (swift_dynamicCastObjCClass())
                  {
                    v9 = 6;
                  }
                  else
                  {
                    objc_opt_self();
                    if (swift_dynamicCastObjCClass())
                    {
                      v9 = 7;
                    }
                    else
                    {
                      objc_opt_self();
                      v10 = (void *)swift_dynamicCastObjCClass();
                      if (v10)
                      {
                        v9 = (uint64_t)objc_msgSend(v10, sel_customView);
                      }
                      else
                      {
                        objc_opt_self();
                        if (swift_dynamicCastObjCClass())
                        {
                          v9 = 1;
                        }
                        else
                        {
                          objc_opt_self();
                          if (!swift_dynamicCastObjCClass())
                            goto LABEL_40;
                          v9 = 9;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v12 = *(_QWORD *)(v17 + 16);
      v11 = *(_QWORD *)(v17 + 24);
      if (v12 >= v11 >> 1)
        sub_1855B37A0(v11 > 1, v12 + 1, 1);
      ++v6;
      *(_QWORD *)(v17 + 16) = v12 + 1;
      v13 = v17 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v9;
      *(_QWORD *)(v13 + 40) = v8;
      if (v4 == v6)
      {
        a2 = v16;
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    v4 = sub_186507E58();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_40:
  result = sub_186507E04();
  __break(1u);
  return result;
}

void sub_18534DEEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18534ED90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1853509A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_185350F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185351CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_185351F04(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1853520EC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_185352490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185352A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

__n128 std::deque<_UIVelocityIntegratorDataSample>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  __n128 result;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t i;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 51 * v6 - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x33)
    {
      v23 = (char *)a1[3];
      v24 = (char *)*a1;
      v25 = (uint64_t)&v23[-*a1];
      if (v6 >= v25 >> 3)
      {
        v28 = v25 >> 2;
        if (v23 == v24)
          v29 = 1;
        else
          v29 = v28;
        v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v29);
        v32 = v31;
        v33 = operator new(0xFF0uLL);
        v34 = &v30[8 * v6];
        v35 = &v30[8 * v32];
        if (v6 == v32)
        {
          v36 = 8 * v6;
          if (v5 - v4 < 1)
          {
            v75 = v33;
            v76 = v36 >> 2;
            if (v5 == v4)
              v77 = 1;
            else
              v77 = v76;
            v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v77);
            v34 = &v78[8 * (v77 >> 2)];
            v35 = &v78[8 * v79];
            if (v30)
              operator delete(v30);
            v30 = v78;
            v33 = v75;
          }
          else
          {
            v37 = v36 >> 3;
            if (v37 >= -1)
              v38 = v37 + 1;
            else
              v38 = v37 + 2;
            v34 -= 8 * (v38 >> 1);
          }
        }
        *(_QWORD *)v34 = v33;
        v80 = v34 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v34 == v30)
          {
            if (v80 >= v35)
            {
              if (v35 == v30)
                v86 = 1;
              else
                v86 = (v35 - v30) >> 2;
              v87 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v86);
              v89 = v87;
              v34 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
              v91 = v80 - v30;
              v90 = v80 == v30;
              v80 = v34;
              if (!v90)
              {
                v80 = &v34[v91 & 0xFFFFFFFFFFFFFFF8];
                v92 = 8 * (v91 >> 3);
                v93 = v34;
                v94 = (uint64_t *)v30;
                do
                {
                  v95 = *v94++;
                  *(_QWORD *)v93 = v95;
                  v93 += 8;
                  v92 -= 8;
                }
                while (v92);
              }
              v35 = &v87[8 * v88];
              if (v30)
                operator delete(v30);
              v30 = v89;
            }
            else
            {
              v82 = (v35 - v80) >> 3;
              if (v82 >= -1)
                v83 = v82 + 1;
              else
                v83 = v82 + 2;
              v84 = v83 >> 1;
              v34 = &v30[8 * (v83 >> 1)];
              v85 = v30;
              if (v80 != v30)
              {
                memmove(v34, v30, v80 - v30);
                v85 = v80;
              }
              v80 = &v85[8 * v84];
            }
          }
          v96 = *(_QWORD *)(i - 8);
          *((_QWORD *)v34 - 1) = v96;
          v34 -= 8;
        }
        v97 = (char *)*a1;
        *a1 = v30;
        a1[1] = v34;
        a1[2] = v80;
        a1[3] = v35;
        if (v97)
          operator delete(v97);
        goto LABEL_36;
      }
      v26 = operator new(0xFF0uLL);
      v27 = v26;
      if (v23 == v5)
      {
        if (v4 == v24)
        {
          if (v5 == v4)
            v53 = 1;
          else
            v53 = (v23 - v4) >> 2;
          v54 = 2 * v53;
          v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v53);
          v4 = &v55[(v54 + 6) & 0xFFFFFFFFFFFFFFF8];
          v57 = (uint64_t *)a1[1];
          v58 = v4;
          v59 = a1[2] - (_QWORD)v57;
          if (v59)
          {
            v58 = &v4[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = 8 * (v59 >> 3);
            v61 = &v55[(v54 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v62 = *v57++;
              *(_QWORD *)v61 = v62;
              v61 += 8;
              v60 -= 8;
            }
            while (v60);
          }
          v63 = (char *)*a1;
          *a1 = v55;
          a1[1] = v4;
          a1[2] = v58;
          a1[3] = &v55[8 * v56];
          if (v63)
          {
            operator delete(v63);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v27;
        v64 = (char *)a1[1];
        v65 = (char *)a1[2];
        a1[1] = v64 - 8;
        v66 = *((_QWORD *)v64 - 1);
        a1[1] = v64;
        if (v65 == (char *)a1[3])
        {
          v67 = (uint64_t)&v64[-*a1];
          if ((unint64_t)v64 <= *a1)
          {
            if (v65 == (char *)*a1)
              v98 = 1;
            else
              v98 = (uint64_t)&v65[-*a1] >> 2;
            v99 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v98);
            v101 = &v99[8 * (v98 >> 2)];
            v102 = (uint64_t *)a1[1];
            v65 = v101;
            v103 = a1[2] - (_QWORD)v102;
            if (v103)
            {
              v65 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                v106 = *v102++;
                *(_QWORD *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v65;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              v65 = (char *)a1[2];
            }
          }
          else
          {
            v68 = v67 >> 3;
            v15 = v67 >> 3 < -1;
            v69 = (v67 >> 3) + 2;
            if (v15)
              v70 = v69;
            else
              v70 = v68 + 1;
            v71 = -(v70 >> 1);
            v72 = v70 >> 1;
            v73 = &v64[-8 * v72];
            v74 = v65 - v64;
            if (v65 != v64)
            {
              memmove(&v64[-8 * v72], v64, v65 - v64);
              v64 = (char *)a1[1];
            }
            v65 = &v73[v74];
            a1[1] = &v64[8 * v71];
            a1[2] = &v73[v74];
          }
        }
        *(_QWORD *)v65 = v66;
      }
      else
      {
        *(_QWORD *)v5 = v26;
      }
    }
    else
    {
      a1[4] = v8 - 51;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v5 == (char *)*a1)
            v39 = 1;
          else
            v39 = (uint64_t)&v5[-*a1] >> 2;
          v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v39);
          v42 = &v40[8 * (v39 >> 2)];
          v43 = (uint64_t *)a1[1];
          v5 = v42;
          v44 = a1[2] - (_QWORD)v43;
          if (v44)
          {
            v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
            v45 = 8 * (v44 >> 3);
            v46 = &v40[8 * (v39 >> 2)];
            do
            {
              v47 = *v43++;
              *(_QWORD *)v46 = v47;
              v46 += 8;
              v45 -= 8;
            }
            while (v45);
          }
          v48 = (char *)*a1;
          *a1 = v40;
          a1[1] = v42;
          a1[2] = v5;
          a1[3] = &v40[8 * v41];
          if (v48)
          {
            operator delete(v48);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            v5 = (char *)a1[1];
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
          a1[1] = v22;
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v5 = v11;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v9 = a1[5] + a1[4];
  }
  v49 = *(_QWORD *)&v4[8 * (v9 / 0x33)] + 80 * (v9 % 0x33);
  *(_OWORD *)v49 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v51 = *(_OWORD *)(a2 + 32);
  v52 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v49 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v49 + 64) = v52;
  *(__n128 *)(v49 + 16) = result;
  *(_OWORD *)(v49 + 32) = v51;
  ++a1[5];
  return result;
}

void sub_185353054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _UIViewTouchShouldBegin(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;

  if (!a3 || a3 == a4)
    return 1;
  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = a4;
  v9 = a3;
  v10 = a2;
  objc_msgSend(v7, "setWithObject:", a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v8, "touchesShouldBegin:withEvent:inContentView:", v11, v10, v9);

  return v12;
}

void _ClearReferencesToView(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  objc_msgSend(v4, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6 == v7)
  {
    objc_msgSend(v4, "gestureRecognizers");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_clearGestureRecognizers");
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v9 = v8;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v23 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
          objc_msgSend(v14, "view", (_QWORD)v22);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "view");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v15 != v16)
            -[UITouch _addGestureRecognizer:]((uint64_t)v4, v14);
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      }
      while (v11);
    }

    objc_msgSend(v4, "gestureRecognizers");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "count");

    if (v18)
    {
      objc_msgSend(v4, "setView:", 0);
    }
    else
    {
      objc_msgSend(v4, "view");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "_window");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v20;
      if (!v20)
      {
        objc_msgSend(v5, "window");
        v21 = (void *)objc_claimAutoreleasedReturnValue();

      }
      objc_msgSend((id)objc_msgSend((id)UIApp, "_touchesEventForWindow:", v21), "_removeTouch:", v4);
    }

  }
}

void sub_18535708C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185357830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185357C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIValidateAccountBasedDelegateRespondsToSelector(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  int v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    if (qword_1ECD81F88 != -1)
      dispatch_once(&qword_1ECD81F88, &__block_literal_global_19_6);
    _UIKitUserDefaults();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "BOOLForKey:", CFSTR("shouldValidateAccountBasedDelegates"));

    if (v3 && v5 && (objc_opt_respondsToSelector() & 1) == 0)
    {
      if (qword_1ECD81F58 != -1)
        dispatch_once(&qword_1ECD81F58, &__block_literal_global_1_19);
      v6 = qword_1ECD81F60;
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = ___UIValidateAccountBasedDelegateRespondsToSelector_block_invoke_2;
      v7[3] = &unk_1E16B1888;
      v8 = v3;
      v9 = a2;
      dispatch_async(v6, v7);

    }
  }

}

uint64_t sub_18535A0AC(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = a1;
  LOBYTE(a3) = sub_18535A184(a3);

  return a3 & 1;
}

BOOL sub_18535A0E4(uint64_t a1, void (*a2)(_QWORD, _OWORD *))
{
  _QWORD *v2;
  __int128 v4;
  id v5;
  id v6;
  BOOL v7;
  _OWORD v10[2];

  v4 = *(_OWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x60);
  v10[0] = *(_OWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x50);
  v10[1] = v4;
  a2(0, v10);
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_instanceMethodForSelector_, a1);
  v6 = objc_msgSend(v2, sel_methodForSelector_, a1);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  return !v7 && v5 != v6;
}

void type metadata accessor for UICollectionViewDiffableDataSource()
{
  JUMPOUT(0x186DC9E8CLL);
}

BOOL sub_18535A184(uint64_t a1)
{
  return sub_18535A0E4(a1, (void (*)(_QWORD, _OWORD *))type metadata accessor for UICollectionViewDiffableDataSource);
}

id _UIColorEffectUpgradeCurve(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  void *v22;
  void *v23;
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_msgSend(v1, "count");
  if (v2 >= 5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSArray<NSNumber *> *_UIColorEffectUpgradeCurve(NSArray<NSNumber *> *__strong)");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, CFSTR("UIColorEffect.m"), 466, CFSTR("Too many values specified for a cubic bezier curve (no more than 4, got %li"), v2);

  }
  switch(v2)
  {
    case 0:
      v3 = &unk_1E1A92B40;
      break;
    case 1:
      objc_msgSend(v1, "firstObject");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v26[0] = v4;
      v26[1] = v4;
      v26[2] = v4;
      v26[3] = v4;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 4);
      v3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    case 2:
      objc_msgSend(v1, "firstObject");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "lastObject");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "doubleValue");
      v7 = v6;
      objc_msgSend(v5, "doubleValue");
      v9 = v8;
      v25[0] = v4;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (v7 + v7 + v8) / 3.0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v25[1] = v10;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (v9 + v7 + v9) / 3.0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25[2] = v11;
      v25[3] = v5;
      v12 = (void *)MEMORY[0x1E0C99D20];
      v13 = v25;
      goto LABEL_9;
    case 3:
      objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "objectAtIndexedSubscript:", 2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "doubleValue");
      v15 = v14;
      objc_msgSend(v5, "doubleValue");
      v17 = v16;
      objc_msgSend(v1, "objectAtIndexedSubscript:", 1);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "doubleValue");
      v20 = v19;

      v24[0] = v4;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (v20 + v15 + v20) / 3.0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v24[1] = v10;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (v17 + v17 + v20) / 3.0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v24[2] = v11;
      v24[3] = v5;
      v12 = (void *)MEMORY[0x1E0C99D20];
      v13 = v24;
LABEL_9:
      objc_msgSend(v12, "arrayWithObjects:count:", v13, 4);
      v3 = (id)objc_claimAutoreleasedReturnValue();

LABEL_10:
      break;
    case 4:
      v3 = v1;
      break;
    default:
      v3 = 0;
      break;
  }

  return v3;
}

id _UIKBEffectsForStyle(uint64_t a1, char a2)
{
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void **v14;
  void *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int64x2_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[3];
  void *v35;
  _QWORD v36[3];
  _QWORD v37[2];
  void *v38;
  _QWORD v39[2];
  void *v40;
  _QWORD v41[2];
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  v4 = 1;
  if (!_AXSEnhanceBackgroundContrastEnabled() && (a2 & 1) == 0)
  {
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "takingSnapshot");

  }
  v6 = 2039;
  if (((a1 == 2030) & v4) == 0)
    v6 = a1;
  v7 = (void *)MEMORY[0x1E0C9AA60];
  switch(v6)
  {
    case 3900:
      +[UIBlurEffect effectWithBlurRadius:](UIBlurEffect, "effectWithBlurRadius:", 20.0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v34[0] = v8;
      +[UIColorEffect colorEffectSaturate:](UIColorEffect, "colorEffectSaturate:", 2.0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v34[1] = v9;
      v22 = 0uLL;
      v28 = 0;
      v29 = 0;
      v21 = 0x3FEAE147AE147AE1uLL;
      *(_QWORD *)&v23 = 0;
      *((_QWORD *)&v23 + 1) = 0x3FEAE147AE147AE1;
      v24 = 0u;
      v25 = 0u;
      v27 = 0;
      v26 = 0x3FEAE147AE147AE1uLL;
      v30 = xmmword_186681020;
      v31 = vdupq_n_s64(0x3FC47AE147AE147BuLL);
      v32 = 0x3FC47AE147AE147BLL;
      +[UIColorEffect colorEffectMatrix:](UIColorEffect, "colorEffectMatrix:", &v21);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v34[2] = v10;
      v11 = (void *)MEMORY[0x1E0C99D20];
      v12 = v34;
      goto LABEL_19;
    case 3901:
      if (v4)
      {
        +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.8184, 0.8359, 0.8603, 1.0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        +[UIVisualEffect effectCompositingColor:](UIVisualEffect, "effectCompositingColor:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = v9;
        v13 = (void *)MEMORY[0x1E0C99D20];
        v14 = &v40;
        goto LABEL_16;
      }
      +[UIBlurEffect effectWithBlurRadius:](UIBlurEffect, "effectWithBlurRadius:", 30.0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v39[0] = v8;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v21 = xmmword_1866810C0;
      v22 = xmmword_1866810D0;
      v23 = xmmword_1866810E0;
      v24 = xmmword_1866810F0;
      v25 = xmmword_186681100;
      v26 = xmmword_186681110;
      v30 = xmmword_186681120;
      v31 = (int64x2_t)xmmword_186681130;
      v32 = 0;
      +[UIColorEffect colorEffectMatrix:](UIColorEffect, "colorEffectMatrix:", &v21);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v39[1] = v9;
      v13 = (void *)MEMORY[0x1E0C99D20];
      v14 = (void **)v39;
      goto LABEL_25;
    case 3902:
      if (v4)
      {
        +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.9324, 0.9414, 0.964, 1.0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        +[UIVisualEffect effectCompositingColor:](UIVisualEffect, "effectCompositingColor:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = v9;
        v13 = (void *)MEMORY[0x1E0C99D20];
        v14 = &v38;
        goto LABEL_16;
      }
      +[UIBlurEffect effectWithBlurRadius:](UIBlurEffect, "effectWithBlurRadius:", 20.0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v37[0] = v8;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v21 = xmmword_186681040;
      v22 = xmmword_186681050;
      v23 = xmmword_186681060;
      v24 = xmmword_186681070;
      v25 = xmmword_186681080;
      v26 = xmmword_186681090;
      v30 = xmmword_1866810A0;
      v31 = (int64x2_t)xmmword_1866810B0;
      v32 = 0;
      +[UIColorEffect colorEffectMatrix:](UIColorEffect, "colorEffectMatrix:", &v21);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v37[1] = v9;
      v13 = (void *)MEMORY[0x1E0C99D20];
      v14 = (void **)v37;
LABEL_25:
      v18 = 2;
      goto LABEL_26;
    case 3903:
      return v7;
    case 3904:
      +[UIImage kitImageNamed:](UIImage, "kitImageNamed:", CFSTR("systemVariableBlurMask.png"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIScreen mainScreen](UIScreen, "mainScreen");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "scale");
      v17 = v16;

      +[UIBlurEffect _effectWithVariableBlurRadius:imageMask:scale:](UIBlurEffect, "_effectWithVariableBlurRadius:imageMask:scale:", v8, 40.0 / v17, 1.0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v42[0] = v9;
      v13 = (void *)MEMORY[0x1E0C99D20];
      v14 = (void **)v42;
      goto LABEL_16;
    case 3905:
      +[UIBlurEffect effectWithBlurRadius:](UIBlurEffect, "effectWithBlurRadius:", 45.0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v41[0] = v8;
      +[UIColorEffect colorEffectSaturate:](UIColorEffect, "colorEffectSaturate:", 1.4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v41[1] = v9;
      v13 = (void *)MEMORY[0x1E0C99D20];
      v14 = (void **)v41;
      goto LABEL_25;
    default:
      if (v6 == 2030)
      {
        +[UIBlurEffect effectWithBlurRadius:](UIBlurEffect, "effectWithBlurRadius:", 20.0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v36[0] = v8;
        +[UIColorEffect colorEffectSaturate:](UIColorEffect, "colorEffectSaturate:", 1.8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v36[1] = v9;
        v22 = 0uLL;
        v28 = 0;
        v29 = 0;
        v21 = 0x3FD147AE147AE148uLL;
        *(_QWORD *)&v23 = 0;
        *((_QWORD *)&v23 + 1) = 0x3FD147AE147AE148;
        v24 = 0u;
        v25 = 0u;
        v27 = 0;
        v26 = 0x3FD147AE147AE148uLL;
        v30 = xmmword_186681030;
        v31 = vdupq_n_s64(0x3FC57DBF487FCB92uLL);
        v32 = 0x3FE75C28F5C28F5CLL;
        +[UIColorEffect colorEffectMatrix:](UIColorEffect, "colorEffectMatrix:", &v21);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v36[2] = v10;
        v11 = (void *)MEMORY[0x1E0C99D20];
        v12 = v36;
LABEL_19:
        v19 = 3;
LABEL_20:
        objc_msgSend(v11, "arrayWithObjects:count:", v12, v19);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_27;
      }
      if (v6 != 2039)
      {
        if (!os_variant_has_internal_diagnostics())
        {
          v7 = (void *)MEMORY[0x1E0C9AA60];
          return v7;
        }
        +[UIBlurEffect effectWithBlurRadius:](UIBlurEffect, "effectWithBlurRadius:", 20.0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v33[0] = v8;
        +[UIColor redColor](UIColor, "redColor");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        +[UIColorEffect colorEffectMultiply:](UIColorEffect, "colorEffectMultiply:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v33[1] = v10;
        v11 = (void *)MEMORY[0x1E0C99D20];
        v12 = v33;
        v19 = 2;
        goto LABEL_20;
      }
      +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.04, 0.988);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIVisualEffect effectCompositingColor:](UIVisualEffect, "effectCompositingColor:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = v9;
      v13 = (void *)MEMORY[0x1E0C99D20];
      v14 = &v35;
LABEL_16:
      v18 = 1;
LABEL_26:
      objc_msgSend(v13, "arrayWithObjects:count:", v14, v18);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_27:

      return v7;
  }
}

void sub_18535E1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18535E5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Method _requestHardwareEventsIfNeeded()
{
  objc_class *v0;
  Method result;
  objc_method *v2;
  objc_class *v3;

  v0 = (objc_class *)objc_opt_class();
  result = class_getInstanceMethod(v0, sel_proximityStateChanged_);
  if (result)
  {
    v2 = result;
    v3 = (objc_class *)objc_opt_class();
    result = class_getInstanceMethod(v3, sel_proximityStateChanged_);
    if (v2 != result)
      return (Method)objc_msgSend((id)UIApp, "setProximityEventsEnabled:", 1);
  }
  return result;
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return (NSString *)(id)CFStringCreateWithFormat(0, 0, CFSTR("{%.*g, %.*g}"), 17, *(_QWORD *)&size.width, 17, *(_QWORD *)&size.height);
}

uint64_t _UIIsSystemSymbolImage(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v1 = a1;
  objc_msgSend(v1, "_primitiveImageAsset");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&__UIKitCoreGlyphsManagersLock);
    v3 = (void *)__UIKitCoreGlyphsManager;
    os_unfair_lock_unlock((os_unfair_lock_t)&__UIKitCoreGlyphsManagersLock);
    v4 = v3;
    if ((objc_msgSend(v4, "_imageBelongsToCoreGlyphs:", v1) & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)&__UIKitCoreGlyphsManagersLock);
      v6 = (void *)__UIKitPrivateCoreGlyphsManager;
      os_unfair_lock_unlock((os_unfair_lock_t)&__UIKitCoreGlyphsManagersLock);
      v7 = v6;
      v5 = objc_msgSend(v7, "_imageBelongsToCoreGlyphs:", v1);

    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t _UIIsKitImage(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  objc_msgSend(v1, "_primitiveImageAsset");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    __UIKitSharedArtworkManager();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "_imageBelongsToUIKit:", v1);

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void *_UIImageIsFromMainBundle(void *result)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  if (result)
  {
    objc_msgSend(result, "_primitiveImageAsset");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_assetManager");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bundle");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v3, "isEqual:", v4);

    return (void *)v5;
  }
  return result;
}

NSString *__cdecl NSStringFromUIEdgeInsets(UIEdgeInsets insets)
{
  return (NSString *)(id)CFStringCreateWithFormat(0, 0, CFSTR("{%.*g, %.*g, %.*g, %.*g}"), 17, *(_QWORD *)&insets.top, 17, *(_QWORD *)&insets.left, 17, *(_QWORD *)&insets.bottom, 17, *(_QWORD *)&insets.right);
}

id _UIImageName(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (objc_msgSend(v1, "_isNamed"))
  {
    objc_msgSend(v1, "_primitiveImageAsset");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    if (v2)
    {
      objc_msgSend(v1, "imageAsset");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "assetName");
      v4 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)&__tableLock);
      if (__imageTable)
      {
        CFDictionaryGetValue((CFDictionaryRef)__imageTable, v1);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v4 = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&__tableLock);
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void _UISwitchCommonInit(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  _QWORD *v14;

  v14 = a1;
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "addObserver:selector:name:object:", v14, sel__showingOnOffLabelChanged, CFSTR("UIAccessibilityOnOffSwitchLabelsDidChangeNotification"), 0);

  objc_msgSend(v14, "traitCollection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "userInterfaceIdiom") == -1)
  {
    +[UIScreen mainScreen](UIScreen, "mainScreen");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "traitCollection");
    v4 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v4;
  }
  objc_msgSend(v14, "preferredStyle");
  objc_msgSend(v2, "userInterfaceIdiom");
  v14[64] = 2;
  objc_msgSend(v14, "_refreshVisualElementForTraitCollection:populatingAPIProperties:", v2, 0);
  objc_msgSend(v14, "visualElement");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_class();

  if (objc_msgSend(v6, "isFixedSize"))
  {
    objc_msgSend(v14, "frame");
    v8 = v7;
    v10 = v9;
    objc_msgSend(v6, "preferredContentSize");
    objc_msgSend(v14, "setFrame:", v8, v10, v11, v12);
  }
  else
  {
    objc_msgSend(v14, "sizeToFit");
  }
  objc_msgSend(v14, "visualElement");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setEnabled:", 1);

}

void sub_185365420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UITextLayoutSizeWillShrink(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  double (*v10)(double, double);
  _QWORD *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _BOOL4 v22;
  _BOOL4 v23;

  v10 = (double (*)(double, double))a1[2];
  v11 = a1;
  v12 = v10(a2, a3);
  v14 = v13;
  v15 = ((double (*)(id, double, double))a1[2])(v11, a4, a5);
  v17 = v16;

  v18 = fmin(v12, a2);
  v19 = fmin(v14, a3);
  v20 = fmin(v15, a4);
  v21 = fmin(v17, a5);
  v22 = v20 < v18;
  v23 = v20 <= v18;
  if (v21 > v19)
    v22 = 0;
  if (v21 >= v19)
    v23 = 0;
  return v22 | v23;
}

void _UIDataSourceDestroyUpdateMaps(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIDataSourceDestroyUpdateMaps(_UIDataSourceUpdateMaps * _Nonnull)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("_UIDataSourceBatchUpdateMap.m"), 689, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("updateMaps != NULL"));

  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_BYTE *)(a1 + 48) = 0;
}

void sub_185368B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_18536A0B8()
{
  return (id)sub_18536A0E0();
}

uint64_t sub_18536A0E0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_1EDD8B090);
}

void sub_18536BBEC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void _UIBackdropViewComputeLegibleColorWithColorSettings(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;

  v1 = a1;
  objc_msgSend(v1, "averageBrightness");
  v3 = v2;
  objc_msgSend(v1, "contrast");
  v5 = v4;

  _UI2DInterpolation((uint64_t)&unk_186678BE0, 16, v3, v5);
}

double _UI2DInterpolation(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (a2)
  {
    v4 = (double *)(a1 + 16);
    v5 = 0.0;
    v6 = 1.79769313e308;
    v7 = 1.79769313e308;
    v8 = 0.0;
    do
    {
      v9 = sqrt((a3 - *(v4 - 2)) * (a3 - *(v4 - 2)) + (a4 - *(v4 - 1)) * (a4 - *(v4 - 1)));
      if (v9 >= v7)
      {
        v10 = v8;
        if (v9 >= v6)
        {
          v8 = v5;
          v11 = v7;
          v7 = v6;
        }
        else
        {
          v8 = *v4;
          v11 = v7;
          v7 = v9;
        }
      }
      else
      {
        v10 = *v4;
        v11 = v9;
      }
      v4 += 3;
      v12 = v8;
      v13 = v7;
      v6 = v7;
      v7 = v11;
      v5 = v8;
      v8 = v10;
      --a2;
    }
    while (a2);
  }
  else
  {
    v10 = 0.0;
    v11 = 1.79769313e308;
    v12 = 0.0;
    v13 = 1.79769313e308;
  }
  v14 = v13 / (v11 + v13);
  if (v11 + v13 <= 0.0)
    v14 = 1.0;
  return v10 * v14 + v12 * (1.0 - v14);
}

uint64_t _UIStyledEffectConvertAutomaticStyle(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 <= 4999)
  {
    v6 = 1;
    if (a2 == 2)
    {
      v6 = 2;
      v7 = 1;
    }
    else
    {
      v7 = 0;
    }
    v8 = 2 * v7;
    v9 = 2 * (a2 == 2);
    if (a1 != 1000)
      v9 = 0;
    if (a1 != 5)
      v8 = v9;
    if (a1 == 4)
      return v6;
    else
      return v8;
  }
  else
  {
    switch(a1)
    {
      case 5000:
        v3 = a3 == 0;
        v4 = 4007;
        v5 = 4002;
        goto LABEL_18;
      case 5001:
        v3 = a3 == 0;
        v4 = 4005;
        v5 = 4000;
        goto LABEL_18;
      case 5002:
        v3 = a3 == 0;
        v4 = 4006;
        v5 = 4001;
        goto LABEL_18;
      case 5003:
        v3 = a3 == 0;
        v4 = 4008;
        v5 = 4003;
        goto LABEL_18;
      case 5004:
        v3 = a3 == 0;
        v4 = 4009;
        v5 = 4004;
LABEL_18:
        if (v3)
          v11 = v4;
        else
          v11 = v5;
        if (v3)
          v4 = v5;
        if (a2 == 2)
          return v11;
        else
          return v4;
      case 5005:
        v12 = a3 == 0;
        v13 = 4014;
        goto LABEL_30;
      case 5006:
        v12 = a3 == 0;
        v13 = 4012;
        goto LABEL_30;
      case 5007:
        v12 = a3 == 0;
        v13 = 4017;
LABEL_30:
        if (v12)
          v14 = v13 + 1;
        else
          v14 = v13;
        if (!v12)
          ++v13;
        if (a2 == 2)
          result = v14;
        else
          result = v13;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

void sub_18536E720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __UIImageCacheKeyWithSentinel(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  id v10;
  void *v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  const __CFString *v15;
  id *v16;
  __CFString *v17;
  void *v18;
  id *v20;

  v10 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v10)
    objc_msgSend(v11, "addObject:", v10);
  v20 = (id *)&a10;
  v13 = a9;
  if (v13 != CFSTR("__UIImageCacheKeySentinel"))
  {
    v14 = v13;
    do
    {
      if (v14)
        v15 = v14;
      else
        v15 = CFSTR("__NilKey");
      objc_msgSend(v12, "addObject:", v15);
      v16 = v20++;
      v17 = (__CFString *)*v16;

      v14 = v17;
    }
    while (v17 != CFSTR("__UIImageCacheKeySentinel"));
  }
  v18 = (void *)objc_msgSend(v12, "copy");

  return v18;
}

id UISegmentedControlStyleProviderForIdiom(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v9;
  unint64_t v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t buf[16];

  if (os_variant_has_internal_diagnostics())
  {
    if (!a1)
    {
      __UIFaultDebugAssertLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v9, OS_LOG_TYPE_FAULT, "No segmented control class provided for visual style provider lookup.", buf, 2u);
      }

    }
  }
  else if (!a1)
  {
    v10 = qword_1ECD7A1B8;
    if (!qword_1ECD7A1B8)
    {
      v10 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v10, (unint64_t *)&qword_1ECD7A1B8);
    }
    v11 = *(NSObject **)(v10 + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "No segmented control class provided for visual style provider lookup.", v12, 2u);
    }
  }
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend(a1, "__styleProviderForIdiom:", a2), (v4 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    v5 = (void *)_MergedGlobals_57_0;
    if (!_MergedGlobals_57_0
      || (objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v5, "objectForKeyedSubscript:", v6),
          v4 = (void *)objc_claimAutoreleasedReturnValue(),
          v6,
          !v4))
    {
      if (qword_1ECD7A1C0 != -1)
        dispatch_once(&qword_1ECD7A1C0, &__block_literal_global_1096);
      if (a2 == 3)
        v7 = (id)objc_opt_new();
      else
        v7 = (id)qword_1ECD7A1B0;
      v4 = v7;
    }
  }
  return v4;
}

id _UIButtonCombineDictionaries(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a1;
  v4 = a2;
  if (!objc_msgSend(v3, "count"))
  {
    v7 = v4;
LABEL_6:
    v6 = v7;
    goto LABEL_7;
  }
  if (!objc_msgSend(v4, "count"))
  {
    v7 = v3;
    goto LABEL_6;
  }
  v5 = (void *)objc_msgSend(v3, "mutableCopy");
  objc_msgSend(v5, "addEntriesFromDictionary:", v4);
  v6 = (void *)objc_msgSend(v5, "copy");

LABEL_7:
  return v6;
}

id sub_185371FCC(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  void *v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for Key(0);
  sub_1852478E0((unint64_t *)&qword_1EDD82C50, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_186667474);
  v2 = sub_1865073A8();
  swift_retain();
  v1(v2);
  swift_release();
  swift_bridgeObjectRelease();
  v3 = (void *)sub_18650739C();
  swift_bridgeObjectRelease();
  return v3;
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_185249668(a1, &qword_1EDD82C40);
}

uint64_t sub_1853720A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1853720B0(a1, *(void (**)(_BYTE *))(v1 + 16));
}

uint64_t sub_1853720B0(uint64_t a1, void (*a2)(_BYTE *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t);
  _BYTE v17[16];

  v3 = sub_1865069AC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v9 = &v17[-v8];
  MEMORY[0x1E0C80A78](v10);
  v12 = &v17[-v11];
  v13 = qword_1ECD74848;
  swift_bridgeObjectRetain();
  if (v13 != -1)
    swift_once();
  type metadata accessor for AttributeScopes.UIKitAttributes();
  sub_1852478E0((unint64_t *)&unk_1ECD74838, (uint64_t (*)(uint64_t))type metadata accessor for AttributeScopes.UIKitAttributes, (uint64_t)&protocol conformance descriptor for AttributeScopes.UIKitAttributes);
  sub_1865069C4();
  a2(v12);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v6, v9, v3);
  v14 = sub_1865073B4();
  v15 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v15(v9, v3);
  v15(v12, v3);
  return v14;
}

uint64_t type metadata accessor for AttributeScopes.UIKitAttributes()
{
  uint64_t result;

  result = qword_1ECD75358;
  if (!qword_1ECD75358)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t _UIEventDeferringInterfaceCategoryForOwningElement()
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 3;
  else
    return 0;
}

uint64_t stateMachineSpec_block_invoke_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  __CFString *v9;
  id *v10;
  id *v11;
  id *v12;
  void *v13;
  char v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id WeakRetained;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v28;
  uint64_t v29;
  NSObject *log;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  id *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = *(id *)(a2 + 16);
  v8 = *(id *)(a2 + 24);
  v9 = _NSStringFromUIDeferringAction[a4];
  -[_UIEventDeferringManager _currentLocalOrCompatibilityRecordForEnvironment:forcePreviousHardwareIdentifier:](*(_QWORD *)a2, (uint64_t)v7, 0);
  v10 = (id *)objc_claimAutoreleasedReturnValue();
  -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](*(_QWORD *)a2, (uint64_t)v7);
  v11 = (id *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    -[_UIEventDeferringRecord recreationReasons](v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "containsObject:", v8);

    if (v10)
    {
      if ((v14 & 1) == 0)
      {
        v32 = a3;
        v15 = v10[2];
        v16 = v15;
        if (v15)
          v17 = (void *)*((_QWORD *)v15 + 9);
        else
          v17 = 0;
        v18 = v17;

        WeakRetained = objc_loadWeakRetained(v12 + 4);
        v20 = WeakRetained;
        if (WeakRetained)
          v21 = (void *)*((_QWORD *)WeakRetained + 5);
        else
          v21 = 0;
        v22 = v21;

        if ((-[_UIEventDeferringManager _isRemoteRuleOwningElement:visibleForLocalTargetWindow:](*(_QWORD *)a2, v22, v18) & 1) == 0)
        {
          v23 = v12[3];
          objc_msgSend(v23, "invalidate");

          -[_UIEventDeferringRecord addRecreationReason:]((uint64_t)v12, (uint64_t)v8);
          objc_msgSend(v7, "description");
          v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v31 = objc_msgSend(v24, "UTF8String");

          v25 = -[__CFString UTF8String](objc_retainAutorelease(v9), "UTF8String");
          if (os_variant_has_internal_diagnostics())
          {
            v28 = qword_1ECD7D068;
            if (!qword_1ECD7D068)
            {
              v28 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v28, (unint64_t *)&qword_1ECD7D068);
            }
            log = *(NSObject **)(v28 + 8);
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
            {
              v29 = *(_QWORD *)a2;
              *(_DWORD *)buf = 134349826;
              v34 = v29;
              v35 = 2082;
              v36 = v31;
              v37 = 2082;
              v38 = v25;
              v39 = 2050;
              v40 = v12;
              _os_log_impl(&dword_185066000, log, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}s] %{public}s: Disabling top remote record for window level mismatch: %{public}p", buf, 0x2Au);
            }
          }
        }

        a3 = v32;
      }
    }
  }
  v26 = (_BYTE *)qword_1ECD7D070;
  if (!qword_1ECD7D070)
  {
    v26 = (_BYTE *)(__UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v26, (unint64_t *)&qword_1ECD7D070);
  }
  if ((*v26 & 1) != 0)
    _emitDebugLogForTransition(a3, a4, &stru_1E16EDF20, a2);

  return 9;
}

void sub_185373AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  __destructor_8_s8_s16_s24_s32_s40_s56((id *)(v1 - 176));
  _Unwind_Resume(a1);
}

uint64_t handleEvent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;

  v28 = a1 + 4;
  v9 = a1 + 5;
  v10 = a2;
  do
  {
    v11 = v10;
    v12 = (char *)v9 + *a1 * v10;
    v13 = &v12[24 * a3];
    v16 = *((_DWORD *)v13 + 4);
    v15 = v13 + 16;
    v14 = v16;
    v17 = (unsigned __int16)v16;
    if ((_WORD)v16)
    {
LABEL_12:
      v23 = &v12[24 * a3];
      *a5 = v17;
      v24 = (_QWORD *)a1[3];
      if (v24 && *v24)
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*v24 + 16))(*v24, a4, a2, v17, a3);
      v25 = *(_QWORD *)v23;
      if (*(_QWORD *)v23)
      {
        if (v15[3] == 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v25, a2, a4);
        }
        else if (!v15[3])
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 16))(v25, a4, a2, v17);
        }
      }
      v26 = *(_QWORD *)((char *)v28 + *a1 * v17);
      if (v26)
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 16))(v26, a4, a2, v17);
      return 1;
    }
    v18 = *(_QWORD *)&v12[24 * a3 + 8];
    if (v18)
    {
      v19 = v14 << 8 >> 24;
      if (v19 == 1)
      {
        v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v18, a4);
      }
      else
      {
        if (v19)
          goto LABEL_9;
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 16))(v18, a4, a2, a3);
      }
      v17 = v20;
      if (v20)
        goto LABEL_12;
    }
LABEL_9:
    v10 = 0;
  }
  while (v11);
  v21 = a1[3];
  if (!v21)
    return 0;
  result = *(_QWORD *)(v21 + 8);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 16))(result, a4, a2, a3);
    return 0;
  }
  return result;
}

void stateMachineSpec_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  __CFString *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  __CFString *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3 != a4)
  {
    v8 = stateMachineSpec_block_invoke_2___s_category;
    if (!stateMachineSpec_block_invoke_2___s_category)
    {
      v8 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v8, (unint64_t *)&stateMachineSpec_block_invoke_2___s_category);
    }
    if ((*(_BYTE *)v8 & 1) != 0)
    {
      v9 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = _NSStringFromUIDeferringState[a3];
        v11 = _NSStringFromUIDeferringAction[a5];
        v12 = _NSStringFromUIDeferringState[a4];
        v13 = 138543874;
        v14 = v10;
        v15 = 2114;
        v16 = v11;
        v17 = 2114;
        v18 = v12;
        _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "State Transition: %{public}@ --%{public}@--> %{public}@", (uint8_t *)&v13, 0x20u);
      }
    }
  }
}

uint64_t stateMachineSpec_block_invoke_2_0(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  objc_msgSend(v2, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "clickDriver:didPerformEvent:", v2, 0);

  return 2;
}

uint64_t stateMachineSpec_block_invoke_2_1(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_handleBeginEvent");
}

uint64_t stateMachineSpec_block_invoke_2_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_didTransitionToPresented");
}

uint64_t stateMachineSpec_block_invoke_2_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didTransitionToDeferred");
}

uint64_t stateMachineSpec_block_invoke_2_4(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  objc_msgSend(v2, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "clickDriver:didPerformEvent:", v2, 0);

  return 2;
}

uint64_t stateMachineSpec_block_invoke_2_5(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  objc_msgSend(v2, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "clickDriver:didPerformEvent:", v2, 0);

  return 2;
}

uint64_t stateMachineSpec_block_invoke_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _BOOL4 v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  int v29;
  id WeakRetained;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  int v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  int v42;
  _BOOL4 v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  void *v47;
  _BOOL4 v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  _UIEventDeferringRecord *v61;
  id v62;
  id v63;
  unint64_t v64;
  id v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  unint64_t v73;
  NSObject *v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  NSObject *v78;
  NSObject *v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  id *location;
  int v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  _BOOL4 v96;
  id v97;
  id v98;
  __CFString *v99;
  void *v100;
  id v101;
  uint8_t buf[4];
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  _BYTE v109[10];
  _BYTE v110[6];
  int v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v7 = *(id *)(a2 + 16);
  v8 = _NSStringFromUIDeferringAction[a4];
  -[_UIEventDeferringManager _currentLocalOrCompatibilityRecordForEnvironment:forcePreviousHardwareIdentifier:](*(_QWORD *)a2, (uint64_t)v7, 0);
  v9 = objc_claimAutoreleasedReturnValue();
  -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](*(_QWORD *)a2, (uint64_t)v7);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (v12)
    goto LABEL_62;
  v13 = *(id *)(v9 + 16);
  v14 = *(id *)(v11 + 16);
  if (v13)
  {
    v15 = v13[9];
    if (v14)
      goto LABEL_7;
LABEL_82:
    v16 = 0;
    if (v13)
      goto LABEL_8;
    goto LABEL_83;
  }
  v15 = 0;
  if (!v14)
    goto LABEL_82;
LABEL_7:
  v16 = v14[7];
  if (v13)
  {
LABEL_8:
    v17 = *((_DWORD *)v13 + 5);
    goto LABEL_9;
  }
LABEL_83:
  v17 = 0;
LABEL_9:
  v94 = a3;
  if (v14)
    v18 = *((_DWORD *)v14 + 3);
  else
    v18 = 0;
  v20 = v15 != v16 || v17 != v18;
  v96 = v20;

  v21 = *(id *)(v9 + 16);
  v22 = v21;
  if (v21)
    v23 = (void *)*((_QWORD *)v21 + 5);
  else
    v23 = 0;
  v24 = v23;

  v25 = *(id *)(v11 + 16);
  v26 = v25;
  if (v25)
    v27 = (void *)*((_QWORD *)v25 + 5);
  else
    v27 = 0;
  v28 = v27;

  v93 = v24;
  if (v24 == v28)
    v29 = 0;
  else
    v29 = objc_msgSend(v24, "isEqualToString:", v28) ^ 1;
  -[_UIEventDeferringManager internalBehavior](*(id **)a2);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)(v11 + 32));
  v31 = WeakRetained;
  if (WeakRetained)
    v32 = (void *)*((_QWORD *)WeakRetained + 5);
  else
    v32 = 0;
  v101 = v32;

  v33 = *(id *)(v11 + 16);
  v34 = v33;
  v99 = v8;
  v92 = v28;
  if (v33)
    v35 = (void *)*((_QWORD *)v33 + 4);
  else
    v35 = 0;
  v90 = v96 | v29;
  v36 = v35;
  v37 = objc_msgSend(v100, "shouldSuppressRemoteRuleForOwningElement:inEnvironment:", v101, v36);

  v38 = *(id *)(v9 + 16);
  v39 = v38;
  location = (id *)(v11 + 32);
  if (v38)
    v40 = (void *)*((_QWORD *)v38 + 9);
  else
    v40 = 0;
  v8 = v99;
  v41 = v40;

  v91 = v41;
  v95 = a4;
  if (((v37 | -[_UIEventDeferringManager _isRemoteRuleOwningElement:visibleForLocalTargetWindow:](*(_QWORD *)a2, v101, v41) ^ 1) & 1) != 0)goto LABEL_31;
  v43 = -[_UIEventDeferringRecord needsRecreation]((_QWORD *)v9);
  if (((v43 | v90) & 1) != 0)
  {
    if (!v43)
      goto LABEL_36;
  }
  else if (-[_UIEventDeferringRecord needsRecreation]((_QWORD *)v11))
  {
LABEL_36:
    v44 = qword_1ECD7D0B0;
    if (!qword_1ECD7D0B0)
    {
      v44 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v44, (unint64_t *)&qword_1ECD7D0B0);
    }
    if ((*(_BYTE *)v44 & 1) != 0)
    {
      v76 = *(NSObject **)(v44 + 8);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        v77 = *(_QWORD *)a2;
        v78 = v76;
        *(_DWORD *)buf = 134350338;
        v103 = v77;
        v104 = 2114;
        v105 = (uint64_t)v7;
        v106 = 2114;
        v107 = (uint64_t)v99;
        v108 = 1026;
        *(_DWORD *)v109 = v96;
        *(_WORD *)&v109[4] = 1026;
        *(_DWORD *)&v109[6] = v29;
        *(_WORD *)v110 = 1026;
        *(_DWORD *)&v110[2] = -[_UIEventDeferringRecord needsRecreation]((_QWORD *)v11);
        _os_log_impl(&dword_185066000, v78, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Top remote record needs recreation: windowMismatch: %{public}d; hardware"
          "IdMismatch: %{public}d; needsRecreation: %{public}d",
          buf,
          0x32u);

      }
    }
    v45 = qword_1ECD7D0B8;
    if (!qword_1ECD7D0B8)
    {
      v45 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v45, (unint64_t *)&qword_1ECD7D0B8);
    }
    if ((*(_BYTE *)v45 & 1) != 0)
    {
      v79 = *(NSObject **)(v45 + 8);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        v80 = *(_QWORD *)a2;
        *(_DWORD *)buf = 134349826;
        v103 = v80;
        v104 = 2114;
        v105 = (uint64_t)v7;
        v106 = 2114;
        v107 = (uint64_t)v99;
        v108 = 2114;
        *(_QWORD *)v109 = v11;
        _os_log_impl(&dword_185066000, v79, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Recreating top remote record: %{public}@", buf, 0x2Au);
      }
    }
    v97 = *(id *)a2;
    v46 = *(id *)(v11 + 16);
    v47 = v46;
    if (v46)
      v48 = *((_BYTE *)v46 + 8) != 0;
    else
      v48 = 0;
    v49 = *(id *)(v11 + 16);
    v50 = v49;
    if (v49)
      v51 = (void *)*((_QWORD *)v49 + 4);
    else
      v51 = 0;
    v52 = v51;
    v53 = objc_loadWeakRetained(location);
    -[_UIEventDeferringManager _descriptorForCompatibility:environment:deferringToken:](v97, v48, v52, (uint64_t)v53);
    v54 = objc_claimAutoreleasedReturnValue();

    -[_UIEventDeferringManager _predicateForDescriptor:](*(_QWORD *)a2, v54);
    v98 = (id)objc_claimAutoreleasedReturnValue();
    v87 = (void *)v54;
    -[_UIEventDeferringManager _targetForDescriptor:](*(_QWORD *)a2, v54);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D00CC8], "sharedInstance");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = objc_loadWeakRetained(location);
    v57 = v56;
    if (v56)
      v58 = (void *)*((_QWORD *)v56 + 9);
    else
      v58 = 0;
    v8 = v99;
    v59 = v58;
    objc_msgSend(v55, "deferEventsMatchingPredicate:toTarget:withReason:", v98, v88, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();

    v61 = [_UIEventDeferringRecord alloc];
    v62 = objc_loadWeakRetained(location);
    v63 = -[_UIEventDeferringRecord _initWithDescriptor:invalidationToken:deferringToken:recordingManagerPointer:recreationReasons:](v61, v87, v60, v62, *(_QWORD *)a2, 0);

    if (v90)
    {
      v64 = qword_1ECD7D0C0;
      if (!qword_1ECD7D0C0)
      {
        v64 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v64, (unint64_t *)&qword_1ECD7D0C0);
      }
      if ((*(_BYTE *)v64 & 1) != 0)
      {
        v85 = *(NSObject **)(v64 + 8);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          v86 = *(_QWORD *)a2;
          *(_DWORD *)buf = 134349826;
          v103 = v86;
          v104 = 2114;
          v105 = (uint64_t)v7;
          v106 = 2114;
          v107 = (uint64_t)v99;
          v108 = 2114;
          *(_QWORD *)v109 = v11;
          _os_log_impl(&dword_185066000, v85, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Invalidating remote record: %{public}@", buf, 0x2Au);
        }
      }
      v65 = *(id *)(v11 + 24);
      objc_msgSend(v65, "invalidate");

    }
    v66 = qword_1ECD7D0C8;
    if (!qword_1ECD7D0C8)
    {
      v66 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v66, (unint64_t *)&qword_1ECD7D0C8);
    }
    if ((*(_BYTE *)v66 & 1) != 0)
    {
      v81 = *(NSObject **)(v66 + 8);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        v82 = *(_QWORD *)a2;
        *(_DWORD *)buf = 134349826;
        v103 = v82;
        v104 = 2114;
        v105 = (uint64_t)v7;
        v106 = 2114;
        v107 = (uint64_t)v99;
        v108 = 2114;
        *(_QWORD *)v109 = v11;
        _os_log_impl(&dword_185066000, v81, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Removing remote record: %{public}@", buf, 0x2Au);
      }
    }
    -[_UIEventDeferringManager _removeRemoteRecord:forEnvironment:](*(_QWORD *)a2, v11, (uint64_t)v7);
    v67 = qword_1ECD7D0D0;
    if (!qword_1ECD7D0D0)
    {
      v67 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v67, (unint64_t *)&qword_1ECD7D0D0);
    }
    if ((*(_BYTE *)v67 & 1) != 0)
    {
      v83 = *(NSObject **)(v67 + 8);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
      {
        v84 = *(_QWORD *)a2;
        *(_DWORD *)buf = 134349826;
        v103 = v84;
        v104 = 2114;
        v105 = (uint64_t)v7;
        v106 = 2114;
        v107 = (uint64_t)v99;
        v108 = 2114;
        *(_QWORD *)v109 = v63;
        _os_log_impl(&dword_185066000, v83, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Pushing recreated remote record onto stack: %{public}@", buf, 0x2Au);
      }
    }
    -[_UIEventDeferringManager _pushRemoteRecordOnStack:forEnvironment:](*(_QWORD *)a2, (uint64_t)v63, (uint64_t)v7);

    v42 = 1;
    goto LABEL_60;
  }
LABEL_31:
  v42 = 0;
LABEL_60:
  objc_msgSend(v7, "description");
  v68 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v69 = objc_msgSend(v68, "UTF8String");

  v70 = -[__CFString UTF8String](objc_retainAutorelease(v8), "UTF8String");
  a3 = v94;
  if (os_variant_has_internal_diagnostics())
  {
    v73 = qword_1ECD7D0D8;
    if (!qword_1ECD7D0D8)
    {
      v73 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v73, (unint64_t *)&qword_1ECD7D0D8);
    }
    v74 = *(NSObject **)(v73 + 8);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      v75 = *(_QWORD *)a2;
      *(_DWORD *)buf = 134350338;
      v103 = v75;
      v104 = 2082;
      v105 = v69;
      v106 = 2082;
      v107 = v70;
      v108 = 2050;
      *(_QWORD *)v109 = v11;
      *(_WORD *)&v109[8] = 1026;
      *(_DWORD *)v110 = v90;
      *(_WORD *)&v110[4] = 1026;
      v111 = v42;
      _os_log_impl(&dword_185066000, v74, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}s] %{public}s: Top remote record: %{public}p; needed invalidation: %{public}d; needed rec"
        "reation: %{public}d;",
        buf,
        0x36u);
    }
  }

  a4 = v95;
LABEL_62:
  v71 = (_BYTE *)qword_1ECD7D0E0;
  if (!qword_1ECD7D0E0)
  {
    v71 = (_BYTE *)(__UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v71, (unint64_t *)&qword_1ECD7D0E0);
  }
  if ((*v71 & 1) != 0)
    _emitDebugLogForTransition(a3, a4, &stru_1E16EDF20, a2);

  return 10;
}

uint64_t stateMachineSpec_block_invoke_3(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  _BYTE *v9;

  objc_msgSend(MEMORY[0x1E0D00CC8], "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "transactionAssertionWithReason:", a2[5]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIEventDeferringManager _setTransactionAssertion:](*a2, v8);

  v9 = (_BYTE *)stateMachineSpec_block_invoke_3___s_category;
  if (!stateMachineSpec_block_invoke_3___s_category)
  {
    v9 = (_BYTE *)(__UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v9, (unint64_t *)&stateMachineSpec_block_invoke_3___s_category);
  }
  if ((*v9 & 1) != 0)
    _emitDebugLogForTransition(a3, a4, &stru_1E16EDF20, (uint64_t)a2);
  return 2;
}

uint64_t stateMachineSpec_block_invoke_3_0(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = a2;
  if (objc_msgSend(v2, "cancelsTouchesInView"))
  {
    objc_msgSend(v2, "gestureRecognizer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setCancelsTouchesInView:", 1);

  }
  objc_msgSend(v2, "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "clickDriver:didPerformEvent:", v2, 1);

  return 3;
}

uint64_t stateMachineSpec_block_invoke_3_1(uint64_t a1, uint64_t *a2)
{
  return -[_UIPreviewInteractionClickImpl _handleTransitionToPossibleByEndingWithContext:](*a2, (uint64_t)a2);
}

uint64_t stateMachineSpec_block_invoke_3_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_handleDidBegin");
}

uint64_t stateMachineSpec_block_invoke_3_3(uint64_t a1, id *a2)
{
  return objc_msgSend(*a2, "_transitionedFromState:toState:");
}

uint64_t stateMachineSpec_block_invoke_3_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_didTransitionToDismissingFromState:");
}

uint64_t stateMachineSpec_block_invoke_3_5(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didTransitionToPreparing");
}

uint64_t stateMachineSpec_block_invoke_3_6(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = a2;
  if (objc_msgSend(v2, "cancelsTouchesInView"))
  {
    objc_msgSend(v2, "gestureRecognizer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setCancelsTouchesInView:", 1);

  }
  objc_msgSend(v2, "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "clickDriver:didPerformEvent:", v2, 1);

  return 3;
}

uint64_t stateMachineSpec_block_invoke_3_7(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = a2;
  if (objc_msgSend(v2, "cancelsTouchesInView"))
  {
    objc_msgSend(v2, "gestureRecognizer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setCancelsTouchesInView:", 1);

  }
  objc_msgSend(v2, "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "clickDriver:didPerformEvent:", v2, 1);

  return 3;
}

uint64_t stateMachineSpec_block_invoke_24(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  __CFString *v8;
  void *v9;
  void *v10;
  _BYTE *v11;
  void *v13;
  void *v14;

  v7 = (id)a2[2];
  v8 = _NSStringFromUIDeferringAction[a4];
  -[_UIEventDeferringManager _transactionAssertion]((id *)*a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "stateMachineSpec_block_invoke_24");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("_UIEventDeferringManager.m"), 1842, CFSTR("[%p] [%@] %@: Invalid to commit without a transaction"), *a2, v7, v8);

  }
  -[_UIEventDeferringManager _transactionAssertion]((id *)*a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "invalidate");

  v11 = (_BYTE *)stateMachineSpec_block_invoke_24___s_category;
  if (!stateMachineSpec_block_invoke_24___s_category)
  {
    v11 = (_BYTE *)(__UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v11, (unint64_t *)&stateMachineSpec_block_invoke_24___s_category);
  }
  if ((*v11 & 1) != 0)
    _emitDebugLogForTransition(a3, a4, &stru_1E16EDF20, (uint64_t)a2);
  -[_UIEventDeferringManager _setTransactionAssertion:](*a2, 0);

  return 1;
}

void __destructor_8_s8_s16_s24_s32_s40_s56(id *a1)
{

}

uint64_t stateMachineSpec_block_invoke_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  __CFString *v7;
  unint64_t v8;
  id v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  BOOL v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  __CFString *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  NSObject *v27;
  _QWORD *v28;
  _QWORD *v29;
  id *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  id v41;
  uint64_t v42;
  __CFString *v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  id *v51;
  unint64_t v52;
  NSObject *v53;
  id *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  objc_class *v58;
  void *v59;
  __CFString *v60;
  NSObject *v61;
  __CFString *v62;
  __CFString *v63;
  __CFString *v64;
  __CFString *v65;
  __CFString *v66;
  NSObject *v67;
  NSObject *v68;
  id *v69;
  __CFString *v70;
  NSObject *v71;
  __CFString *v72;
  id *v73;
  __CFString *v74;
  id *v75;
  __CFString *v76;
  NSObject *v77;
  id *v78;
  uint64_t v80;
  unsigned int v81;
  __CFString *v82;
  __CFString *v83;
  id v84;
  void *v85;
  id *v86;
  _QWORD v87[4];
  id v88;
  id v89;
  _QWORD block[4];
  id v91;
  id v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t);
  void (*v98)(uint64_t);
  id v99;
  uint8_t buf[4];
  id *v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  __CFString *v107;
  __int16 v108;
  __CFString *v109;
  __int16 v110;
  _BYTE v111[10];
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  int v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v6 = *(id *)(a2 + 16);
  v80 = a4;
  v7 = _NSStringFromUIDeferringAction[a4];
  -[_UIEventDeferringManager _localRecordForEnvironment:](*(id **)a2, (uint64_t)v6);
  v86 = (id *)objc_claimAutoreleasedReturnValue();
  if (v86)
  {
    v8 = qword_1ECD7CFD0;
    if (!qword_1ECD7CFD0)
    {
      v8 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v8, (unint64_t *)&qword_1ECD7CFD0);
    }
    if ((*(_BYTE *)v8 & 1) != 0)
    {
      v50 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        v51 = *(id **)a2;
        *(_DWORD *)buf = 134349826;
        v101 = v51;
        v102 = 2114;
        v103 = (uint64_t)v6;
        v104 = 2114;
        v105 = (uint64_t)v7;
        v106 = 2114;
        v107 = (__CFString *)v86;
        _os_log_impl(&dword_185066000, v50, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Removed local record: %{public}@", buf, 0x2Au);
      }
    }
    v9 = v86[3];
    objc_msgSend(v9, "invalidate");

    -[_UIEventDeferringManager _removeLocalRecordForEnvironment:](*(_QWORD *)a2, (uint64_t)v6);
  }
  -[_UIEventDeferringManager _displayHardwareIndentifierAccountingForNotFinalizedChange:](*(unsigned __int8 **)a2, 1);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  if (v85)
    objc_msgSend(MEMORY[0x1E0D00CF8], "displayWithHardwareIdentifier:");
  else
    objc_msgSend(MEMORY[0x1E0D00CF8], "builtinDisplay");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v94 = 0;
  v95 = &v94;
  v96 = 0x3032000000;
  v97 = __Block_byref_object_copy__34;
  v98 = __Block_byref_object_dispose__34;
  v99 = 0;
  _eventDeferringCompatibilityQueue();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = stateMachineSpec_block_invoke_11;
  block[3] = &unk_1E16B9698;
  v93 = &v94;
  v84 = v10;
  v91 = v84;
  v92 = v6;
  dispatch_sync(v11, block);

  if (!v95[5])
  {
    v21 = 0;
    v81 = 0;
    goto LABEL_45;
  }
  if (os_variant_has_internal_diagnostics())
  {
    v52 = qword_1ECD7CFD8;
    if (!qword_1ECD7CFD8)
    {
      v52 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v52, (unint64_t *)&qword_1ECD7CFD8);
    }
    v53 = *(id *)(v52 + 8);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      v54 = *(id **)a2;
      v55 = (_QWORD *)v95[5];
      if (v55)
      {
        v82 = (__CFString *)v55[5];
        v56 = v55;
        v57 = (void *)MEMORY[0x1E0CB3940];
        v58 = (objc_class *)objc_opt_class();
        NSStringFromClass(v58);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "stringWithFormat:", CFSTR("<%@: %p>"), v59, v56);
        v60 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v82 = 0;
        v60 = CFSTR("(nil)");
      }

      *(_DWORD *)buf = 134350082;
      v101 = v54;
      v102 = 2114;
      v103 = (uint64_t)v6;
      v104 = 2114;
      v105 = (uint64_t)v7;
      v106 = 2050;
      v107 = v82;
      v108 = 2114;
      v109 = v60;
      _os_log_impl(&dword_185066000, v53, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}@] %{public}@: Found local compatibility record: recording manager: %{public}p; record: %{public}@",
        buf,
        0x34u);

    }
  }
  v13 = 2 * (*(_BYTE *)(a2 + 49) == 0);
  if (*(_BYTE *)(a2 + 48))
    v13 = 1;
  v14 = v13;
  switch(v13)
  {
    case 0:
      goto LABEL_19;
    case 2:
      v22 = v95[5];
      if (v22)
        v22 = *(_QWORD *)(v22 + 40);
      if (v22 == *(_QWORD *)a2)
        goto LABEL_19;
      break;
    case 1:
      v15 = v95[5];
      v16 = v15 ? objc_loadWeakRetained((id *)(v15 + 32)) : 0;
      v17 = v16 == *(id *)(a2 + 8);

      if (v17)
      {
LABEL_19:
        v18 = v95[5];
        if (v18)
          v18 = *(_QWORD *)(v18 + 40);
        v19 = v18 != *(_QWORD *)a2;
        v20 = 1;
        goto LABEL_27;
      }
      break;
  }
  v20 = 0;
  v19 = 0;
LABEL_27:
  v23 = qword_1ECD7CFE0;
  if (!qword_1ECD7CFE0)
  {
    v23 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v23, (unint64_t *)&qword_1ECD7CFE0);
  }
  if ((*(_BYTE *)v23 & 1) != 0)
  {
    v61 = *(NSObject **)(v23 + 8);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      v78 = *(id **)a2;
      v83 = off_1E16BAD00[v14];
      if (v20)
        v62 = CFSTR("YES");
      else
        v62 = CFSTR("NO");
      v63 = v62;
      if (v19)
        v64 = CFSTR("YES");
      else
        v64 = CFSTR("NO");
      v65 = v63;
      v66 = v64;
      *(_DWORD *)buf = 134350338;
      v101 = v78;
      v102 = 2114;
      v103 = (uint64_t)v6;
      v104 = 2114;
      v105 = (uint64_t)v7;
      v106 = 2114;
      v107 = v83;
      v108 = 2114;
      v109 = v65;
      v110 = 2114;
      *(_QWORD *)v111 = v66;
      v67 = v61;
      _os_log_impl(&dword_185066000, v67, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Matching strategy: %{public}@; shouldRemove: %{public}@; shouldNotify: %{public}@",
        buf,
        0x3Eu);

    }
  }
  if (v20)
  {
    v24 = qword_1ECD7CFE8;
    if (!qword_1ECD7CFE8)
    {
      v24 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v24, (unint64_t *)&qword_1ECD7CFE8);
    }
    if ((*(_BYTE *)v24 & 1) != 0)
    {
      v71 = *(NSObject **)(v24 + 8);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        v72 = (__CFString *)v95[5];
        v73 = *(id **)a2;
        v74 = *(__CFString **)(a2 + 8);
        *(_DWORD *)buf = 134350082;
        v101 = v73;
        v102 = 2114;
        v103 = (uint64_t)v6;
        v104 = 2114;
        v105 = (uint64_t)v7;
        v106 = 2114;
        v107 = v72;
        v108 = 2114;
        v109 = v74;
        _os_log_impl(&dword_185066000, v71, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Removed local compatibility record: %{public}@; context->deferringToken: %{public}@",
          buf,
          0x34u);
      }
    }
    v25 = (_QWORD *)v95[5];
    if (v25)
      v25 = (_QWORD *)v25[3];
    v26 = v25;
    objc_msgSend(v26, "invalidate");

    _eventDeferringCompatibilityQueue();
    v27 = objc_claimAutoreleasedReturnValue();
    v87[0] = v12;
    v87[1] = 3221225472;
    v87[2] = stateMachineSpec_block_invoke_12;
    v87[3] = &unk_1E16B1B50;
    v88 = v84;
    v89 = v6;
    dispatch_sync(v27, v87);

    if (v19)
    {
      v28 = (_QWORD *)v95[5];
      if (v28)
        v28 = (_QWORD *)v28[5];
      v29 = v28;
      v30 = *(id **)a2;
      v31 = (_QWORD *)v95[5];
      if (v31)
        v31 = (_QWORD *)v31[2];
      v32 = v31;
      objc_msgSend(v29, "eventDeferringManager:didRemoveLocalCompatibilityRecordForDescriptor:", v30, v32);

    }
    v81 = 1;
  }
  else
  {
    v81 = 0;
  }
  v21 = (__CFString *)v14;
LABEL_45:
  if (*(_BYTE *)(a2 + 48))
  {
    v33 = qword_1ECD7CFF0;
    if (!qword_1ECD7CFF0)
    {
      v33 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v33, (unint64_t *)&qword_1ECD7CFF0);
    }
    if ((*(_BYTE *)v33 & 1) != 0)
    {
      v68 = *(NSObject **)(v33 + 8);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        v69 = *(id **)a2;
        v70 = *(__CFString **)(a2 + 8);
        *(_DWORD *)buf = 134349826;
        v101 = v69;
        v102 = 2114;
        v103 = (uint64_t)v6;
        v104 = 2114;
        v105 = (uint64_t)v7;
        v106 = 2114;
        v107 = v70;
        _os_log_impl(&dword_185066000, v68, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Invalidating deferring token: %{public}@", buf, 0x2Au);
      }
    }
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      objc_msgSend(*(id *)(v34 + 8), "removeObject:", v6);
      if (!*(_BYTE *)(v34 + 16) && !objc_msgSend(*(id *)(v34 + 8), "count"))
        *(_BYTE *)(v34 + 16) = 1;
    }
  }
  -[_UIEventDeferringManager internalBehavior](*(id **)a2);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIEventDeferringManager _trackedLocalTargetWindowPointerForEnvironment:](*(_QWORD *)a2, (uint64_t)v6);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v35, "wantsLocalIdealRules") & 1) != 0
    || !objc_msgSend(v35, "wantsLocalCompatibilityRules"))
  {
    v39 = 0;
    v38 = 0;
  }
  else
  {
    if (v95[5])
      v37 = 1;
    else
      v37 = v36 == 0;
    v38 = !v37;
    v39 = 1;
  }
  if (v86)
    v40 = 1;
  else
    v40 = v81 | v38;
  objc_msgSend(v6, "description");
  v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v42 = objc_msgSend(v41, "UTF8String");

  v43 = objc_retainAutorelease(v7);
  v44 = -[__CFString UTF8String](v43, "UTF8String");
  if (os_variant_has_internal_diagnostics())
  {
    v47 = qword_1ECD7CFF8;
    if (!qword_1ECD7CFF8)
    {
      v47 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v47, (unint64_t *)&qword_1ECD7CFF8);
    }
    v77 = *(id *)(v47 + 8);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
    {
      v75 = *(id **)a2;
      v76 = (__CFString *)v95[5];
      v48 = objc_msgSend(v36, "pointerValue");
      *(_DWORD *)buf = 134351106;
      v101 = v75;
      v102 = 2082;
      v103 = v42;
      v104 = 2082;
      v105 = v44;
      v106 = 2050;
      v107 = v76;
      v108 = 2048;
      v109 = v21;
      v110 = 1024;
      *(_DWORD *)v111 = v81;
      *(_WORD *)&v111[4] = 1024;
      *(_DWORD *)&v111[6] = v39;
      v112 = 2048;
      v113 = v48;
      v114 = 1024;
      v115 = v40;
      _os_log_impl(&dword_185066000, v77, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}s] %{public}s: Local compatibility record: %{public}p; matching strategy: %lu; removed lo"
        "cal compatibility record: %d; has view service behavior: %d; tracked window: %p; should end observation: %d",
        buf,
        0x50u);
    }

  }
  if (v40)
    -[_UIEventDeferringManager _stopObservingContextForLocalTargetWindowInEnvironment:](*(_QWORD *)a2, v6);
  v45 = (_BYTE *)qword_1ECD7D000;
  if (!qword_1ECD7D000)
  {
    v45 = (_BYTE *)(__UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v45, (unint64_t *)&qword_1ECD7D000);
  }
  if ((*v45 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("removedLocalRecord: %d; removedCompatibilityRecord: %d;"),
      v86 != 0,
      v81);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    _emitDebugLogForTransition(a3, v80, v49, a2);

  }
  _Block_object_dispose(&v94, 8);

  return 4;
}

void sub_1853759F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void _UIEventDeferringAssertForInvalidOwningInterfaceElement(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("_UIEventDeferringManager.m"), 399, CFSTR("%s: An owning interface element must be present to begin event deferring"), "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");

  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("_UIEventDeferringManager.m"), 402, CFSTR("%s: An owning interface element must conform to _UIEventDeferringRuleOwning: %@"), "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)", a1);

  }
  v2 = objc_msgSend(a1, "interfaceElementCategory");
  v3 = _UIEventDeferringInterfaceCategoryForOwningElement();
  _NSStringFromUIEventDeferringInterfaceElementCategory(1uLL);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIEventDeferringManager.m"), 413, CFSTR("%s: %@ is an invalid interface element category: %@"), "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)", v10, a1);
    goto LABEL_15;
  }
  if (v2 == 1 && v3 != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIEventDeferringManager.m"), 416, CFSTR("%s: Owning interface element states it is %@ but is not: %@"), "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)", v10, a1);
LABEL_15:

    goto LABEL_16;
  }
  if (v2 == 2 && v3 != 2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIEventDeferringManager.m"), 420, CFSTR("%s: Owning interface element states it is %@ but is not: %@"), "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)", v10, a1);
    goto LABEL_15;
  }
  if (v2 == 3 && v3 != 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIEventDeferringManager.m"), 424, CFSTR("%s: Owning interface element states it is %@ but is not: %@"), "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)", v10, a1);
    goto LABEL_15;
  }
LABEL_16:

}

const __CFString *_NSStringFromUIEventDeferringInterfaceElementCategory(unint64_t a1)
{
  if (a1 > 3)
    return &stru_1E16EDF20;
  else
    return off_1E16B4D60[a1];
}

uint64_t stateMachineSpec_block_invoke_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  __CFString *v8;
  void *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  void *v19;
  id v20;
  _BYTE *v21;
  void *v23;
  NSObject *v24;
  uint64_t v25;
  _BYTE buf[24];
  __CFString *v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = *(id *)(a2 + 16);
  v8 = _NSStringFromUIDeferringAction[a4];
  -[_UIEventDeferringManager _remoteDeferringRecordStackForEnvironment:](*(_QWORD *)a2, (uint64_t)v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v9, "count") >= 2)
  {
    -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](*(_QWORD *)a2, (uint64_t)v7);
    v10 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v11 = -[_UIEventDeferringRecord needsRecreation](v10);
    v12 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      if (!*(_QWORD *)(v12 + 96))
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "handleFailureInMethod:object:file:lineNumber:description:", sel__sortRemoteRecordStackForEnvironment_, v12, CFSTR("_UIEventDeferringManager.m"), 2473, CFSTR("[%p] %s: Invalid state. Sorting records without a transaction: %@"), v12, "-[_UIEventDeferringManager _sortRemoteRecordStackForEnvironment:]", v12);

      }
      -[_UIEventDeferringManager _remoteDeferringRecordStackForEnvironment:](v12, (uint64_t)v7);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v13 && (unint64_t)objc_msgSend(v13, "count") >= 2)
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __65___UIEventDeferringManager__sortRemoteRecordStackForEnvironment___block_invoke;
        v27 = (__CFString *)&unk_1E16BABC8;
        *(_QWORD *)&v28 = v12;
        *((_QWORD *)&v28 + 1) = v7;
        objc_msgSend(v14, "sortWithOptions:usingComparator:", 16, buf);
      }

      v15 = *(_QWORD *)a2;
    }
    else
    {
      v15 = 0;
    }
    -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](v15, (uint64_t)v7);
    v16 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v17 = v16 == v10 || v11;
    if ((v17 & 1) == 0)
    {
      v18 = qword_1ECD7D0A0;
      if (!qword_1ECD7D0A0)
      {
        v18 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v18, (unint64_t *)&qword_1ECD7D0A0);
      }
      if ((*(_BYTE *)v18 & 1) != 0)
      {
        v24 = *(NSObject **)(v18 + 8);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = *(_QWORD *)a2;
          *(_DWORD *)buf = 134349826;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v7;
          *(_WORD *)&buf[22] = 2114;
          v27 = v8;
          LOWORD(v28) = 2114;
          *(_QWORD *)((char *)&v28 + 2) = v10;
          _os_log_impl(&dword_185066000, v24, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Invalidating previous top remote record in stack: %{public}@", buf, 0x2Au);
        }
      }
      if (v10)
        v19 = (void *)v10[3];
      else
        v19 = 0;
      v20 = v19;
      objc_msgSend(v20, "invalidate");

      -[_UIEventDeferringRecord addRecreationReason:]((uint64_t)v10, *(_QWORD *)(a2 + 24));
    }

  }
  v21 = (_BYTE *)qword_1ECD7D0A8;
  if (!qword_1ECD7D0A8)
  {
    v21 = (_BYTE *)(__UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v21, (unint64_t *)&qword_1ECD7D0A8);
  }
  if ((*v21 & 1) != 0)
    _emitDebugLogForTransition(a3, a4, &stru_1E16EDF20, a2);

  return 9;
}

uint64_t _disableTopRemoteRecordTransition_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  __CFString *v8;
  uint64_t v9;
  id v10;
  void *v11;
  char v12;
  int v13;
  id v14;
  void *v15;
  unint64_t v16;
  _BYTE *v17;
  void *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  id v26;
  __int16 v27;
  __CFString *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = *(id *)(a2 + 16);
  v8 = _NSStringFromUIDeferringAction[a4];
  if (*(_BYTE *)(a2 + 48))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_disableTopRemoteRecordTransition_block_invoke");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("_UIEventDeferringManager.m"), 884, CFSTR("[%p] [%@] %@: Invalid state. Unexpected value of ownerInitiatedRemoval: %d"), *(_QWORD *)a2, v7, v8, *(unsigned __int8 *)(a2 + 48));

  }
  -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](*(_QWORD *)a2, (uint64_t)v7);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(id *)(a2 + 24);
  if (v9)
  {
    -[_UIEventDeferringRecord recreationReasons]((_QWORD *)v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "containsObject:", v10);

    if ((v12 & 1) == 0)
    {
      if (-[_UIEventDeferringRecord needsRecreation]((_QWORD *)v9))
      {
        v13 = 0;
      }
      else
      {
        v14 = *(id *)(v9 + 24);
        objc_msgSend(v14, "invalidate");

        v13 = 1;
      }
      -[_UIEventDeferringRecord addRecreationReason:](v9, (uint64_t)v10);
      _UIEventDeferringShorterRecreationReasonStringForReason(v10);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = qword_1ECD7CF88;
      if (!qword_1ECD7CF88)
      {
        v16 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v16, (unint64_t *)&qword_1ECD7CF88);
      }
      if ((*(_BYTE *)v16 & 1) != 0)
      {
        v21 = *(NSObject **)(v16 + 8);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v22 = *(_QWORD *)a2;
          *(_DWORD *)buf = 134350338;
          v24 = v22;
          v25 = 2114;
          v26 = v7;
          v27 = 2114;
          v28 = v8;
          v29 = 1026;
          v30 = v13;
          v31 = 2114;
          v32 = v15;
          v33 = 2114;
          v34 = v9;
          _os_log_impl(&dword_185066000, v21, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Disabling top remote record: invalidated: %{public}d; added recreation"
            " reason: %{public}@; record: %{public}@",
            buf,
            0x3Au);
        }
      }

    }
  }
  v17 = (_BYTE *)qword_1ECD7CF90;
  if (!qword_1ECD7CF90)
  {
    v17 = (_BYTE *)(__UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v17, (unint64_t *)&qword_1ECD7CF90);
  }
  if ((*v17 & 1) != 0)
    _emitDebugLogForTransition(a3, a4, &stru_1E16EDF20, a2);

  return 7;
}

uint64_t stateMachineSpec_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = a2;
  objc_msgSend(v2, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "clickDriver:didPerformEvent:", v2, 3);

  objc_msgSend(v2, "gestureRecognizer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setCancelsTouchesInView:", 0);
  return 1;
}

uint64_t stateMachineSpec_block_invoke_0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_handleDidEndFromState:");
}

uint64_t stateMachineSpec_block_invoke_1(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_didTransitionToPresenting");
}

uint64_t stateMachineSpec_block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didTransitionToInactiveState");
}

uint64_t stateMachineSpec_block_invoke_5(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = a2;
  objc_msgSend(v2, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "clickDriver:didPerformEvent:", v2, 3);

  objc_msgSend(v2, "gestureRecognizer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setCancelsTouchesInView:", 0);
  return 1;
}

uint64_t stateMachineSpec_block_invoke_6(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = a2;
  objc_msgSend(v2, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "clickDriver:didPerformEvent:", v2, 3);

  objc_msgSend(v2, "gestureRecognizer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setCancelsTouchesInView:", 0);
  return 1;
}

void _emitDebugLogForTransition(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  _BYTE *v8;
  void *v9;
  __CFString *v10;
  unint64_t v11;
  NSObject *v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *v16;
  NSObject *v17;
  void *v18;
  uint8_t buf[4];
  id *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  __CFString *v26;
  __int16 v27;
  __CFString *v28;
  __int16 v29;
  const __CFString *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  const __CFString *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = (_BYTE *)qword_1ECD7D1D0;
  if (!qword_1ECD7D1D0)
  {
    v8 = (_BYTE *)(__UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16);
    atomic_store((unint64_t)v8, (unint64_t *)&qword_1ECD7D1D0);
  }
  if ((*v8 & 1) != 0)
  {
    -[_UIEventDeferringManager _transactionAssertion](*(id **)a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(a3, "length"))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\n%@actionSpecificLog: %@"), CFSTR("    "), a3);
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = &stru_1E16EDF20;
    }
    v11 = qword_1ECD7D1D8;
    if (!qword_1ECD7D1D8)
    {
      v11 = __UILogCategoryGetNode("EventDeferring", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v11, (unint64_t *)&qword_1ECD7D1D8);
    }
    if ((*(_BYTE *)v11 & 1) != 0)
    {
      v12 = *(NSObject **)(v11 + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = *(id **)a4;
        v14 = *(_QWORD *)(a4 + 16);
        v15 = _NSStringFromUIDeferringState[a1];
        v16 = _NSStringFromUIDeferringAction[a2];
        v17 = v12;
        _descriptionForTransactionContext(a4);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 134351106;
        v20 = v13;
        v21 = 2114;
        v22 = v14;
        v23 = 2114;
        v24 = v15;
        v25 = 2114;
        v26 = v16;
        v27 = 2114;
        v28 = v10;
        v29 = 2112;
        v30 = CFSTR("    ");
        v31 = 2114;
        v32 = v9;
        v33 = 2112;
        v34 = CFSTR("    ");
        v35 = 2114;
        v36 = v18;
        _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@ --%{public}@-->%{public}@ \n%@transaction: %{public}@; \n"
          "%@transactionContext: %{public}@",
          buf,
          0x5Cu);

      }
    }

  }
}

void ___instance_block_invoke()
{
  __int128 v0;
  void *v1;
  CFDictionaryKeyCallBacks v2;

  v0 = *(_OWORD *)(MEMORY[0x1E0C9B390] + 16);
  *(_OWORD *)&v2.version = *MEMORY[0x1E0C9B390];
  *(_OWORD *)&v2.release = v0;
  v2.equal = 0;
  v2.hash = 0;
  qword_1ECD82130 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &v2, MEMORY[0x1E0C9B3A0]);
  dword_1ECD82138 = 0;
  byte_1ECD8213C = 0;
  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  qword_1ECD82140 = _UIMachTimeForMediaTime(1.0 / (double)objc_msgSend(v1, "maximumFramesPerSecond"));

  qword_1ECD82158 = 0;
  word_1ECD82168 = 0;
  qword_1ECD82170 = 0;
}

void _UIVisualEffectViewConfigureDependent(void *a1, id *a2)
{
  id *v3;
  id *v4;
  void *v5;
  id *obj;

  obj = a1;
  v3 = a2 + 62;
  v4 = a2;
  objc_storeWeak(v3, obj);
  objc_msgSend(v4, "_deferredAnimationForKey:", CFSTR("backgroundEffects"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v4 + 65, obj[65]);
  if (v5)
  {
    objc_msgSend(v5, "addAnimationFrameForValue:", obj[65]);
  }
  else
  {
    *((_WORD *)v4 + 240) |= 1u;
    objc_msgSend(v4, "_configureEffects");
  }

}

void UIAccessibilityPostNotification(UIAccessibilityNotifications notification, id argument)
{
  if (__UIAccessibilityBroadcastCallback)
    __UIAccessibilityBroadcastCallback(*(_QWORD *)&notification, argument);
}

id _UIKitAppKeyColorAssetName()
{
  void *v0;

  if (UIApp)
  {
    objc_msgSend(*(id *)(UIApp + 232), "keyColorAssetName");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

uint64_t _isSystemGestureForDelegate(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD block[4];
  id v9;

  v1 = a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___isSystemGestureForDelegate_block_invoke;
  block[3] = &unk_1E16B1B28;
  v9 = v1;
  v2 = qword_1ECD7C5F0;
  v3 = v1;
  v4 = v3;
  if (v2 == -1)
  {
    v5 = v3;
  }
  else
  {
    dispatch_once(&qword_1ECD7C5F0, block);
    v5 = v9;
  }
  v6 = _MergedGlobals_15_0;

  return v6;
}

void sub_1853814E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id _UIDescriptionBuilderLightDescription(void *a1)
{
  void *v1;
  id v2;
  void *v3;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = a1;
  objc_msgSend(v1, "stringWithFormat:", CFSTR("<%s: %p>"), object_getClassName(v2), v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void *_UIInternalContainerClassArrayForContainerClassArray(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(a1);
        v7 = _UIAppearanceInternalContainerClassForContainer(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v6));
        if (v7)
          objc_msgSend(v2, "addObject:", v7);
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  return v2;
}

uint64_t _UIAppearanceInternalContainerClassForContainer(void *a1)
{
  objc_class *Class;
  BOOL isMetaClass;
  _QWORD *v4;

  Class = object_getClass(a1);
  isMetaClass = class_isMetaClass(Class);
  v4 = (_QWORD *)MEMORY[0x1E0C99778];
  if (!isMetaClass)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("*** %@ is not a Class"), a1);
  if ((objc_msgSend(a1, "conformsToProtocol:", &unk_1EDDD59A0) & 1) == 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v4, CFSTR("*** %@ does not conform to the UIAppearanceContainer protocol"), NSStringFromClass((Class)a1));
  if (objc_msgSend(a1, "isSubclassOfClass:", objc_opt_class()))
    return objc_opt_class();
  else
    return (uint64_t)a1;
}

void *appearancesNodeInNodeForClassCreateIfNecessary(void *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)objc_msgSend(a1, "objectForKey:", a2);
  if (!v4)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 0, 0, 0);
    objc_msgSend(a1, "setObject:forKey:", v4, a2);

  }
  return v4;
}

BOOL _UIDeviceHasExternalTouchInput()
{
  if (qword_1ECD7E340 != -1)
    dispatch_once(&qword_1ECD7E340, &__block_literal_global_39_1);
  return qword_1ECD7E338 == 2;
}

BOOL _isViewKeyboardLayoutPresent(void *a1)
{
  void *v1;
  _BOOL8 v2;

  _getViewKeyboardLayout(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

id _getViewKeyboardLayout(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "_keyboardLayoutView");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *_NSStringFromUISceneActivationState(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("UISceneActivationStateUnattached");
  else
    return off_1E16B2A80[a1];
}

uint64_t _checkApplicationRestorationState(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  int v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;

  if (a3)
    *a3 = 0;
  v5 = (void *)_stateRestorationPathForBundleIdentifier(a1, a2);
  if (!v5)
    return 0;
  v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", objc_msgSend(v5, "path"));
  if (_UIStateRestorationDebugLogEnabled())
  {
    v7 = CFSTR("does not exist");
    if (v6)
      v7 = CFSTR("exists");
    NSLog(CFSTR("%s: State restoration archive %@ for %@"), "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)", v7, a1);
  }
  if (!v6)
    return 0;
  v8 = objc_msgSend((id)objc_msgSend(v5, "URLByDeletingLastPathComponent"), "URLByAppendingPathComponent:", CFSTR("restorationInfo.plist"));
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:", v8);
  if (!v9)
  {
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: No restoration info dictionary, assuming snapshot is OK"), "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)");
    goto LABEL_17;
  }
  v10 = (void *)objc_msgSend(v9, "objectForKey:", CFSTR("kIgnoreSnapshotKey"));
  v11 = objc_msgSend(v10, "isEqual:", CFSTR("YES"));
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: state restoration info ignore snapshot string is %@"), "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)", v10);
  if (!v11)
  {
LABEL_17:
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: State Restoration marker says snapshot is OK, don't ignore it"), "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)");
    if (a3)
      *a3 = 1;
    goto LABEL_21;
  }
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: State Restoration marker indicates ignore snapshot"), "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)");
LABEL_21:
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: returning YES"), "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)");
  return 1;
}

void sub_18538F228()
{
  objc_end_catch();
  JUMPOUT(0x18538F230);
}

uint64_t _stateRestorationPathForBundleIdentifier(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 0;
  if (!objc_msgSend((id)UIApp, "_isSpringBoard"))
    return 0;
  v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Library/%@/%@.%@/%@"), CFSTR("Saved Application State"), a1, CFSTR("savedState"), CFSTR("data.data"));
  if (!a2)
  {
    a2 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA5860], "applicationProxyForIdentifier:", a1), "dataContainerURL"), "path");
    if (!a2)
      return 0;
  }
  if (!objc_msgSend(a2, "hasPrefix:", CFSTR("/Applications")))
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", a2, 0), "URLByAppendingPathComponent:", v4);
  v5 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("~/%@"), v4), "stringByStandardizingPath");
  return objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v5, 0);
}

__CFString *UIApplicationSceneDeactivationReasonDescription(unint64_t a1)
{
  __CFString *v1;

  if (a1 < 0x1F && ((0x40043FFFu >> a1) & 1) != 0)
  {
    v1 = off_1E16C86C8[a1];
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unknown reason %d"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

void sub_18538FCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _queue_ensureExistenceOfKnownSceneSessionMap()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;

  if (!qword_1ECD7F328)
  {
    _restorationPath(CFSTR("KnownSceneSessions"));
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 0;
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:options:error:", v0, 0, &v17);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v17;
    v3 = v2;
    if (v1)
    {
      v16 = 0;
      objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v1, 0, 0, &v16);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v16;

      if (v5)
      {
        if (_UIStateRestorationDebugLogEnabled())
          NSLog(CFSTR("%s: Could not convert saved SceneSessions data to dictionary, error = %@"), "void _queue_ensureExistenceOfKnownSceneSessionMap(void)", v5);
      }
      else
      {
        v6 = objc_msgSend(v4, "mutableCopy");
        v7 = (void *)qword_1ECD7F328;
        qword_1ECD7F328 = v6;

      }
    }
    else
    {
      v5 = v2;
    }
    v8 = qword_1ECD7F328;
    v9 = _UIStateRestorationDebugLogEnabled();
    if (v8)
    {
      if (v9)
        NSLog(CFSTR("%s: Read saved Scene Sessions from saved plist: %@"), "void _queue_ensureExistenceOfKnownSceneSessionMap(void)", qword_1ECD7F328);
    }
    else
    {
      if (v9)
        NSLog(CFSTR("%s: Could not read saved SceneSessions data file"), "void _queue_ensureExistenceOfKnownSceneSessionMap(void)");
      _restorationPath(CFSTR("KnownCanvasDefinitions"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfURL:", v10);
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = (void *)qword_1ECD7F328;
      qword_1ECD7F328 = v11;

      if (qword_1ECD7F328)
      {
        byte_1ECD7F322 = 1;
        if (_UIStateRestorationDebugLogEnabled())
          NSLog(CFSTR("%s: Found old SPI for CanvasDefinition Map, using that since could not get new SceneSession map: %@"), "void _queue_ensureExistenceOfKnownSceneSessionMap(void)", qword_1ECD7F328);
        _queue_scheduleUpdateAndSaveForPersistedSceneSessions();
      }

    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (_UIStateRestorationDebugLogEnabled())
        NSLog(CFSTR("%s: Could not convert saved Scene Sessions data to dictionary, error = %@, converted data = %@"), "void _queue_ensureExistenceOfKnownSceneSessionMap(void)", v5, qword_1ECD7F328);
      v13 = (void *)qword_1ECD7F328;
      qword_1ECD7F328 = 0;

    }
    if (!qword_1ECD7F328)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 1);
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = (void *)qword_1ECD7F328;
      qword_1ECD7F328 = v14;

    }
  }
}

void sub_18539019C()
{
  objc_end_catch();
  JUMPOUT(0x1853901A4);
}

id _decodeSceneSession(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v10;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v10 = 0;
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v3, &v10);
    v6 = v10;
    if (v6)
    {
      if (_UIStateRestorationDebugLogEnabled())
      {
        NSLog(CFSTR("%s: Couldn't create an NSKeyedUnarchiver to unarchive scene session from data for identifier %@"), "UISceneSession *_decodeSceneSession(NSData *__strong, NSString *__strong)", v4);
        v7 = 0;
LABEL_12:

        v8 = (void *)v7;
        goto LABEL_13;
      }
    }
    else
    {
      objc_msgSend(v5, "setRequiresSecureCoding:", 1);
      objc_msgSend(v5, "setDecodingFailurePolicy:", 0);
      objc_msgSend(v5, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("CanvasRestorationCanvasDefinitionKey"));
      v7 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "finishDecoding");
      if (v7)
      {
        if (_UIStateRestorationDebugLogEnabled())
          NSLog(CFSTR("%s: Decoded scene session: %@"), "UISceneSession *_decodeSceneSession(NSData *__strong, NSString *__strong)", v7);
        goto LABEL_12;
      }
      if (_UIStateRestorationDebugLogEnabled())
      {
        NSLog(CFSTR("%s: Couldn't decode scene session for identifier %@"), "UISceneSession *_decodeSceneSession(NSData *__strong, NSString *__strong)", v4);
        v7 = 0;
        goto LABEL_12;
      }
    }
    v7 = 0;
    goto LABEL_12;
  }
  v8 = 0;
LABEL_13:

  return v8;
}

void sub_185390B50()
{
  objc_end_catch();
  JUMPOUT(0x185390B5CLL);
}

void sub_185390B68(uint64_t a1, int a2)
{
  id v2;
  void *v3;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(v3);
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Exception occurred reading archived restorable state: %@"), "+[_UICanvasUserActivityManager _getRestorationUserActivityForPersistentIdentifier:error:]", v2);

    objc_end_catch();
    JUMPOUT(0x18539091CLL);
  }
  JUMPOUT(0x185390C00);
}

void sub_185390B7C(uint64_t a1, int a2)
{
  id v2;
  void *v3;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(v3);
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Exception occurred reading archived restorable state: %@"), "+[_UICanvasUserActivityManager _getRestorationUserActivityForPersistentIdentifier:error:]", v2);

    objc_end_catch();
    JUMPOUT(0x18539091CLL);
  }
  JUMPOUT(0x185390C00);
}

void sub_185390B94(uint64_t a1, int a2)
{
  id v2;
  void *v3;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(v3);
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Exception occurred reading archived restorable state: %@"), "+[_UICanvasUserActivityManager _getRestorationUserActivityForPersistentIdentifier:error:]", v2);

    objc_end_catch();
    JUMPOUT(0x18539091CLL);
  }
  JUMPOUT(0x185390C00);
}

void sub_185390BA0()
{
  JUMPOUT(0x185390BB0);
}

void sub_185390BF8()
{
  objc_end_catch();
  JUMPOUT(0x185390C00);
}

id _restorationPath(void *a1)
{
  void *v1;
  void *v2;

  _restorationDirectory(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "URLByAppendingPathComponent:isDirectory:", CFSTR("data.data"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _restorationDirectory(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v1 = a1;
  NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectAtIndex:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_web_createDirectoryAtPathWithIntermediateDirectories:attributes:", v3, 0);

  v5 = (void *)MEMORY[0x1E0CB3940];
  _UIMainBundleIdentifier();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringWithFormat:", CFSTR("%@/%@/%@.%@"), v3, CFSTR("Saved Application State"), v6, CFSTR("savedState"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
  {
    objc_msgSend(v7, "stringByAppendingFormat:", CFSTR("/%@"), v1);
    v8 = objc_claimAutoreleasedReturnValue();

    v7 = (void *)v8;
  }
  objc_msgSend(v7, "stringByStandardizingPath");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:isDirectory:", v9, 1);
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: URL for state restoration directory is %@"), "NSURL *_restorationDirectory(NSString *__strong)", v10);

  return v10;
}

uint64_t _UIStateRestorationDebugLogEnabled()
{
  if ((byte_1ECD80162 & 1) == 0)
  {
    byte_1ECD80162 = 1;
    byte_1ECD80163 = CFPreferencesGetAppBooleanValue(CFSTR("UIStateRestorationDebugLogging"), (CFStringRef)*MEMORY[0x1E0C9B248], 0) != 0;
  }
  return byte_1ECD80163;
}

void _queue_scheduleUpdateAndSaveForPersistedSceneSessions()
{
  dispatch_time_t v0;
  NSObject *v1;

  if ((byte_1ECD7F323 & 1) == 0)
  {
    qword_1ECD7F340 = objc_msgSend((id)UIApp, "_beginBackgroundTaskWithName:expirationHandler:", CFSTR("Persistent SceneSession Map Update"), &__block_literal_global_434_1);
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Scheduled background task %lu"), "void _queue_scheduleUpdateAndSaveForPersistedSceneSessions(void)", qword_1ECD7F340);
    v0 = dispatch_time(0, 500000000);
    _persistenceQueue();
    v1 = objc_claimAutoreleasedReturnValue();
    dispatch_after(v0, v1, &__block_literal_global_440_0);

    byte_1ECD7F323 = 1;
  }
}

uint64_t _UIApplicationBeginBackgroundTaskWithExpirationHandler(void *a1, void *a2)
{
  id v3;
  char *v4;
  const void *v5;
  __CFString *v6;
  __CFString *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  char *v12;
  id v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v20;
  Dl_info v21;
  uint64_t v22;
  uint64_t vars0;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v4)
  {
    v5 = *(const void **)(vars0 + 8);
    memset(&v21, 0, sizeof(v21));
    if (v5 && dladdr(v5, &v21))
    {
      if (v21.dli_sname && *v21.dli_sname)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:");
        v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v6 = CFSTR("unknown method");
      }
      if (v21.dli_fname && *v21.dli_fname)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "lastPathComponent");
        v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

        goto LABEL_9;
      }
    }
    else
    {
      v6 = CFSTR("unknown method");
    }
    v7 = CFSTR("unknown caller");
LABEL_9:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Called by %@, from %@"), v7, v6);
    v4 = (char *)objc_claimAutoreleasedReturnValue();

  }
  v8 = _UIApplicationBeginBackgroundTaskWithExpirationHandler___s_category;
  if (!_UIApplicationBeginBackgroundTaskWithExpirationHandler___s_category)
  {
    v8 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v8, (unint64_t *)&_UIApplicationBeginBackgroundTaskWithExpirationHandler___s_category);
  }
  v9 = *(NSObject **)(v8 + 8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = v9;
    v11 = _Block_copy(v3);
    LODWORD(v21.dli_fname) = 138478083;
    *(const char **)((char *)&v21.dli_fname + 4) = v4;
    WORD2(v21.dli_fbase) = 2112;
    *(void **)((char *)&v21.dli_fbase + 6) = v11;
    _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_DEFAULT, "Will add backgroundTask with taskName: %{private}@, expirationHandler: %@", (uint8_t *)&v21, 0x16u);

  }
  v12 = v4;
  v13 = v3;
  if (MGGetBoolAnswer() && (objc_msgSend((id)UIApp, "_isSpringBoard") & 1) == 0)
  {
    v15 = v12;
    if (!v12)
    {
      v16 = (void *)MEMORY[0x1E0CB3940];
      _UIMainBundleIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "stringWithFormat:", CFSTR("Background Task for %@"), v17);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

    }
    _doAddBackgroundTask(v15, v13, 1);
    v14 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14 = 0;
    v15 = v12;
  }

  if (v14)
    v18 = v14[1];
  else
    v18 = 0;

  return v18;
}

double _UIColorDecodeComponentForKey(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  double v8;
  double v9;
  float v10;
  float v11;

  v5 = a2;
  v6 = a3;
  v7 = a1;
  if (objc_msgSend(v7, "containsValueForKey:", v6))
  {
    objc_msgSend(v7, "decodeDoubleForKey:", v6);
    v9 = v8;

  }
  else
  {
    objc_msgSend(v7, "decodeFloatForKey:", v5);
    v11 = v10;

    v9 = v11;
  }

  return v9;
}

void _updateLastRestorationDictionaryForPersistentIdentifier(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;

  v9 = a1;
  v3 = a2;
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Called to update last restoration dictionary for identifier %@, dictionary is %@"), "void _updateLastRestorationDictionaryForPersistentIdentifier(NSDictionary * _Nullable __strong, NSString *__strong)", v3, v9);
  if (v3)
  {
    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("CanvasRestorationUserActivityUserInfoDataKey"));
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (!v4 || _lastRestorationDictionaryMap)
    {
      if (!v4)
        goto LABEL_11;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = (void *)_lastRestorationDictionaryMap;
      _lastRestorationDictionaryMap = v6;

    }
    if ((unint64_t)objc_msgSend(v5, "length") < 0x6401)
    {
      v8 = v9;
LABEL_15:
      v9 = v8;
      objc_msgSend((id)_lastRestorationDictionaryMap, "setObject:forKeyedSubscript:", v8, v3);

      goto LABEL_16;
    }
LABEL_11:
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Clearing last restoration dictionary, either userInfoData is nil or size (%lu) is greater than max size %d"), "void _updateLastRestorationDictionaryForPersistentIdentifier(NSDictionary * _Nullable __strong, NSString *__strong)", objc_msgSend(v5, "length"), 25600);

    v8 = 0;
    goto LABEL_15;
  }
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: No persistent identifier, not updating last restoration dictionary"), "void _updateLastRestorationDictionaryForPersistentIdentifier(NSDictionary * _Nullable __strong, NSString *__strong)");
LABEL_16:

}

void _decrementRestorationMarkerCount(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id obj;

  v3 = a1;
  v4 = a2;
  obj = v3;
  objc_sync_enter(obj);
  v5 = obj;
  v6 = --qword_1EDDC8398;
  if (!qword_1EDDC8398)
  {
    _deleteRestorationInProgressFile(v4);
    v6 = qword_1EDDC8398;
    v5 = obj;
  }
  objc_sync_exit(v5);

  if (v6 < 0)
    NSLog(CFSTR("Warning: completeStateRestoration unbalanced calls to extend/complete state restoration"));

}

void sub_185391D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void _deleteRestorationInProgressFile(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _restorationInProgressFilePath(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 0;
  objc_msgSend(v2, "removeItemAtURL:error:", v1, &v3);

}

id _getRestorationInProgressDictionary(void *a1, int a2, BOOL *a3)
{
  void *v5;
  void *v6;
  BOOL v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _restorationInProgressFilePath(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithContentsOfURL:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3)
    *a3 = v6 != 0;
  if (v6)
    v7 = 1;
  else
    v7 = a2 == 0;
  if (v7)
  {
    v8 = v6;
  }
  else
  {
    v9 = (void *)MEMORY[0x1E0C99E08];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "dictionaryWithObjectsAndKeys:", v10, CFSTR("kRestorationTriesLeft"), 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v11, "writeToURL:atomically:", v5, 1))
    {
      NSLog(CFSTR("Warning: Unable to create restoration in progress marker file"));
      v12 = 0;
      goto LABEL_13;
    }
    v8 = v11;
  }
  v12 = v8;
  v11 = v8;
LABEL_13:

  return v12;
}

id _restorationInProgressFilePath(void *a1)
{
  void *v1;
  void *v2;

  _restorationDirectory(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "URLByAppendingPathComponent:isDirectory:", CFSTR("inprogress.data"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _UIBackdropViewQueue()
{
  if (qword_1ECD7B6A0 != -1)
    dispatch_once(&qword_1ECD7B6A0, &__block_literal_global_33);
  return (id)qword_1ECD7B6A8;
}

void sub_1853944EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

UIColor *UIKeyboardGetLightCandidateSeparatorColor()
{
  return +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.1);
}

unint64_t SubviewUsesClassicLayout(void *a1)
{
  id v1;
  unint64_t v2;
  void *v3;
  id v4;
  double v5;

  v1 = a1;
  if (objc_msgSend(v1, "translatesAutoresizingMaskIntoConstraints"))
  {
    v2 = ((unint64_t)objc_msgSend(v1, "autoresizingMask") >> 4) & 1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v3 = v1;
    else
      v3 = 0;
    v4 = v3;
    if ((objc_msgSend(v4, "allowsSelfSizing") & 1) != 0 || (objc_msgSend(v1, "intrinsicContentSize"), v5 != -1.0))
      v2 = 0;
    else
      v2 = objc_msgSend(v1, "_hasAutolayoutHeightConstraint") ^ 1;

  }
  return v2;
}

uint64_t sub_185398CE0@<X0>(SEL *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t result;

  v3 = objc_msgSend((id)objc_opt_self(), *a1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD748F0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a2 = result;
  return result;
}

double _tintBehaviorAlphaReduction(void *a1, void *a2, double a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  void *v14;

  v7 = a1;
  v8 = a2;
  if (objc_msgSend(v8, "userInterfaceStyle") == 2)
  {
    +[UIColor systemRedColor](UIColor, "systemRedColor");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if ((_isSameColor(v7, v9, v8) & 1) != 0)
    {
      v10 = 0.2;
    }
    else
    {
      +[UIColor systemPinkColor](UIColor, "systemPinkColor");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (_isSameColor(v7, v14, v8))
        v10 = 0.2;
      else
        v10 = 0.25;

    }
    v13 = v10 * a4;
  }
  else
  {
    +[UIColor systemYellowColor](UIColor, "systemYellowColor");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (_isSameColor(v7, v11, v8))
      v12 = 0.2;
    else
      v12 = 0.18;

    v13 = v12 * a3;
  }

  return v13;
}

uint64_t _isSameColor(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5 == v6)
  {
    v8 = 1;
  }
  else
  {
    v8 = 0;
    if (v5 && v6)
    {
      v9 = (id)objc_msgSend(v5, "resolvedColorWithTraitCollection:", v7);
      v8 = objc_msgSend(v9, "isEqual:", objc_msgSend(v6, "resolvedColorWithTraitCollection:", v7));

    }
  }

  return v8;
}

id _TintColorFromTraitCollection(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = a1;
  objc_msgSend(v1, "_tintColor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    if (v1)
    {
      v3 = objc_msgSend(v1, "userInterfaceIdiom");
    }
    else
    {
      +[UIDevice currentDevice](UIDevice, "currentDevice");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v4, "userInterfaceIdiom");

    }
    +[UIView _defaultInteractionTintColorForIdiom:](UIView, "_defaultInteractionTintColorForIdiom:", v3);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

void _UIAssertValidUpdateIndexPath(void *a1)
{
  id v1;
  int v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  NSObject *v7;
  uint8_t buf[4];
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dyld_program_sdk_at_least();
  v3 = objc_msgSend(v1, "section");
  if (v2)
  {
    if (v3 < 0 || objc_msgSend(v1, "row") < 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIAssertValidUpdateIndexPath(NSIndexPath * _Nullable __strong)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UITableViewSupport.m"), 2713, CFSTR("Attempted to perform update with invalid index path: %@"), v1);

    }
  }
  else if (v3 < 0 || objc_msgSend(v1, "row") < 0)
  {
    v6 = _UIAssertValidUpdateIndexPath___s_category;
    if (!_UIAssertValidUpdateIndexPath___s_category)
    {
      v6 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&_UIAssertValidUpdateIndexPath___s_category);
    }
    v7 = *(NSObject **)(v6 + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v9 = v1;
      _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "Attempted to perform update with invalid index path: %@", buf, 0xCu);
    }
  }

}

double _sectionFooterMinY(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = *(double *)(a2 + 56);
  if (dyld_program_sdk_at_least())
    return v4 + -[UITableViewRowData offsetForSection:](a1, a2);
  return v4;
}

UIViewBlockBasedCAAction *_StatusBar_UIBlockBasedCAAction(void *a1)
{
  id v1;
  UIViewBlockBasedCAAction *v2;

  v1 = a1;
  v2 = -[UIViewBlockBasedCAAction initWithEmptyBlock:]([UIViewBlockBasedCAAction alloc], "initWithEmptyBlock:", v1);

  return v2;
}

void _UISheetLayoutInfoDirtyEffectiveKeyboardFrame(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  id v4;

  v1 = a1[1];
  if ((v1 & 0x200000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFDFFFFFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyStackAlignmentFrame(v2);
    _UISheetLayoutInfoDirtyActiveDetents(v2);
    objc_msgSend(v2, "_parentLayoutInfo");
    v4 = (id)objc_claimAutoreleasedReturnValue();

    v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyEffectiveKeyboardFrame(v4);
      v3 = v4;
    }

  }
}

void _UISheetLayoutInfoDirtyAnyDescendantDragging(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  void *v3;
  id v4;

  v1 = a1[5];
  if ((v1 & 0x40) != 0)
  {
    a1[5] = v1 & 0xFFFFFFBF;
    v2 = a1;
    objc_msgSend(v2, "_parentLayoutInfo");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    if (v4)
      _UISheetLayoutInfoDirtyAnyDescendantDragging(v4);
    objc_msgSend(v2, "_delegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyAlpha(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x40000) != 0)
  {
    a1[5] = v1 & 0xFFFBFFFF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

double _UISheetSize(void *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  double v11;

  v7 = qword_1ECD7D408;
  v8 = a1;
  if (v7 != -1)
    dispatch_once(&qword_1ECD7D408, &__block_literal_global_3_4);
  objc_msgSend((id)qword_1ECD7D400, "_setContainerView:", v8);
  objc_msgSend(v8, "bounds");
  objc_msgSend((id)qword_1ECD7D400, "_setContainerBounds:");
  objc_msgSend(v8, "safeAreaInsets");
  objc_msgSend((id)qword_1ECD7D400, "_setContainerSafeAreaInsets:");
  objc_msgSend(v8, "traitCollection");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ECD7D400, "_setContainerTraitCollection:", v9);
  objc_msgSend((id)qword_1ECD7D400, "_setMode:", a2);
  objc_msgSend((id)qword_1ECD7D400, "_presentedViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setPreferredContentSize:", a3, a4);

  objc_msgSend((id)qword_1ECD7D400, "_invalidatePreferredSize");
  objc_msgSend((id)qword_1ECD7D400, "_frameOfPresentedViewInContainerView");
  return v11;
}

uint64_t _UISheetLayoutInfoStacks(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  id v17;
  uint64_t v18;
  CGRect v20;
  CGRect v21;

  v17 = a1;
  v20.origin.x = a2;
  v20.origin.y = a3;
  v20.size.width = a4;
  v20.size.height = a5;
  v21.origin.x = a6;
  v21.origin.y = a7;
  v21.size.width = a8;
  v21.size.height = a9;
  if (CGRectEqualToRect(v20, v21))
    v18 = 1;
  else
    v18 = objc_msgSend(v17, "alwaysStacksWithChild");

  return v18;
}

void _UISheetLayoutInfoDirtyPercentFullScreen(_QWORD *a1)
{
  uint64_t v1;
  _DWORD *v2;
  void *v3;
  _DWORD *v4;

  v1 = a1[1];
  if ((v1 & 0x100000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFEFFFFFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyCornerRadii(v2);
    _UISheetLayoutInfoDirtyGrabberAlpha(v2);
    _UISheetLayoutInfoDirtyInteractionEnabled(v2);
    _UISheetLayoutInfoDirtyPercentDimmed(v2);
    objc_msgSend(v2, "_childLayoutInfo");
    v4 = (_DWORD *)objc_claimAutoreleasedReturnValue();

    v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyPercentDimmed(v4);
      v3 = v4;
    }

  }
}

void _UISheetLayoutInfoDirtyAnyDescendantWantsFullScreen(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  void *v3;
  _DWORD *v4;

  v1 = a1[5];
  if ((v1 & 0x80) != 0)
  {
    a1[5] = v1 & 0xFFFFFF7F;
    v2 = a1;
    objc_msgSend(v2, "_parentLayoutInfo");
    v4 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      _UISheetLayoutInfoDirtyAnyDescendantWantsFullScreen(v4);
      _UISheetLayoutInfoDirtyAlpha(v4);
    }
    objc_msgSend(v2, "_delegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyPercentDimmed(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x10000) != 0)
  {
    a1[5] = v1 & 0xFFFEFFFF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyInteractionEnabled(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x80000) != 0)
  {
    a1[5] = v1 & 0xFFF7FFFF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyFunctionallyFullScreen(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  if ((v1 & 0x80000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFF7FFFFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyPercentFullHeight(v2);
    _UISheetLayoutInfoDirtyFullHeightUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyActiveDetents(v2);
    _UISheetLayoutInfoDirtyExpanded(v2);

  }
}

void _UISheetLayoutInfoDirtyGrabberAlpha(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x2000000) != 0)
  {
    a1[5] = v1 & 0xFDFFFFFF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyRubberBandExtentBeyondMinimumOffset(_QWORD *a1)
{
  uint64_t v1;
  void (**v2)(void);
  void (**v3)(void);

  v1 = a1[1];
  if ((v1 & 0x80000000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFF7FFFFFFFLL;
    objc_msgSend(a1, "_rubberBandExtentBeyondMinimumOffsetWasInvalidated");
    v2 = (void (**)(void))objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      v3 = v2;
      v2[2]();
      v2 = v3;
    }

  }
}

void _UISheetLayoutInfoDirtyRubberBandExtentBeyondMaximumOffset(_QWORD *a1)
{
  uint64_t v1;
  void (**v2)(void);
  void (**v3)(void);

  v1 = a1[1];
  if ((v1 & 0x100000000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFEFFFFFFFFLL;
    objc_msgSend(a1, "_rubberBandExtentBeyondMaximumOffsetWasInvalidated");
    v2 = (void (**)(void))objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      v3 = v2;
      v2[2]();
      v2 = v3;
    }

  }
}

void _UISheetLayoutInfoDirtyPreferredSize(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  if ((v1 & 0x100) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFEFFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyEdgeAttached(v2);
    _UISheetLayoutInfoDirtyStackAlignmentFrame(v2);

  }
}

void _UISheetLayoutInfoDirtyActiveDetents(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  void *v7;
  _QWORD *v8;

  v1 = a1;
  v2 = v1[1];
  if ((v2 & 0x8000000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFF7FFFFFFLL;
    v8 = v1;
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v1);
    v3 = v8;
    v4 = v8[1];
    if ((v4 & 0x10000000) != 0)
    {
      v8[1] = v4 & 0xFFFFFFFFEFFFFFFFLL;
      if ((v4 & 0x20000000) != 0)
        v8[1] = v4 & 0xFFFFFFFFCFFFFFFFLL;
    }

    v5 = v8[1];
    if ((v5 & 0x20000000) != 0)
      v8[1] = v5 & 0xFFFFFFFFDFFFFFFFLL;
    _UISheetLayoutInfoDirtyIndexOfCurrentActiveOrDismissDetent(v3);
    _UISheetLayoutInfoDirtyPercentFullHeight(v3);
    if (v3[4])
    {
      v3[4] = 0;
      v6 = v3;
      _UISheetLayoutInfoDirtyCurrentOffset(v6);
      _UISheetLayoutInfoDirtyOffsetAdjustment(v6);
      _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v6);

    }
    _UISheetLayoutInfoDirtyPercentPresented(v3);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMinimumOffset(v3);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMaximumOffset(v3);
    _UISheetLayoutInfoDirtyUntransformedFrame(v3);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v3);
    _UISheetLayoutInfoDirtyPercentDimmedFromOffset(v3);
    _UISheetLayoutInfoDirtyInteractionEnabled(v3);
    _UISheetLayoutInfoDirtyExpanded(v3);
    _UISheetLayoutInfoDirtyModelDimmingEnabled(v3);
    objc_msgSend(v3, "_delegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_sheetLayoutInfoDidInvalidateDetentValues:", v3);

    v1 = v8;
  }

}

void _UISheetLayoutInfoDirtyPercentFullHeight(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;

  v1 = a1[1];
  if ((v1 & 0x200) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFDFFLL;
    v2 = a1;
    objc_msgSend(v2, "_parentLayoutInfo");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    if (v3)
      _UISheetLayoutInfoDirtyProposedDepthLevelIncrement(v3);
    _UISheetLayoutInfoDirtyDepthLevel(v2);
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v2);
    _UISheetLayoutInfoDirtyOffsetAdjustment(v2);

  }
}

void _UISheetLayoutInfoDirtyMargins(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  if ((v1 & 0x80) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFF7FLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyStackAlignmentFrame(v2);
    _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(v2);

  }
}

void _UISheetLayoutInfoDirtyEdgeAttached(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = a1;
  v2 = v1[1];
  if ((v2 & 0x4000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFBFFFLL;
    v4 = v1;
    _UISheetLayoutInfoDirtyMargins(v1);
    _UISheetLayoutInfoDirtyHidingUnderneathDescendantForDepthLevel(v4);
    _UISheetLayoutInfoDirtyDepthLevel(v4);
    _UISheetLayoutInfoDirtyDismissesHorizontally(v4);
    _UISheetLayoutInfoDirtyInverted(v4);
    _UISheetLayoutInfoDirtyStackAlignmentFrame(v4);
    v3 = v4[1];
    if ((v3 & 0x200000000) != 0)
    {
      v4[1] = v3 & 0xFFFFFFFDFFFFFFFFLL;
      _UISheetLayoutInfoDirtyActiveDetents(v4);
    }
    _UISheetLayoutInfoDirtyActiveDetents(v4);
    _UISheetLayoutInfoDirtyUntransformedFrame(v4);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v4);
    _UISheetLayoutInfoDirtyCornerRadii(v4);
    _UISheetLayoutInfoDirtyTransform(v4);
    _UISheetLayoutInfoDirtyPercentDimmed(v4);
    _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(v4);
    _UISheetLayoutInfoDirtyExpanded(v4);
    v1 = v4;
  }

}

void _UISheetLayoutInfoDirtyMarginsWhenFloating(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  if ((v1 & 0x40) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFFBFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyMargins(v2);
    _UISheetLayoutInfoDirtyEdgeAttached(v2);

  }
}

void _UISheetLayoutInfoDirtyStackAlignmentFrame(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v1 = a1;
  v2 = v1[1];
  if ((v2 & 0x400000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFBFFFFFLL;
    v8 = v1;
    _UISheetLayoutInfoDirtyPercentFullHeight(v1);
    _UISheetLayoutInfoDirtyParentDepthLevel(v8);
    _UISheetLayoutInfoDirtyStacksWithChild(v8);
    _UISheetLayoutInfoDirtyFullHeightUntransformedFrame(v8);
    objc_msgSend(v8, "_parentLayoutInfo");
    v3 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
      _UISheetLayoutInfoDirtyStacksWithChild(v3);
    objc_msgSend(v8, "_childLayoutInfo");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      _UISheetLayoutInfoDirtyParentDepthLevel(v5);
      objc_msgSend(v6, "_delegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "_sheetLayoutInfoDidInvalidateOutput:", v8);

    }
    _UISheetLayoutInfoDirtyTransform(v8);

    v1 = v8;
  }

}

void _UISheetLayoutInfoDirtyEffectivePresented(_QWORD *a1)
{
  uint64_t v1;
  _DWORD *v2;
  void *v3;
  id v4;

  v1 = a1[1];
  if ((v1 & 1) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFFFELL;
    v2 = a1;
    _UISheetLayoutInfoDirtyDepthLevel(v2);
    _UISheetLayoutInfoDirtyRawCurrentOffset(v2);
    _UISheetLayoutInfoDirtyCurrentOffset(v2);
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v2);
    _UISheetLayoutInfoDirtyOffsetAdjustment(v2);
    _UISheetLayoutInfoDirtyIndexOfCurrentActiveOrDismissDetent(v2);
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyAnyDescendantWantsFullScreen(v2);
    _UISheetLayoutInfoDirtyInteractionEnabled(v2);
    _UISheetLayoutInfoDirtyModelDimmingEnabled(v2);
    objc_msgSend(v2, "_parentLayoutInfo");
    v4 = (id)objc_claimAutoreleasedReturnValue();

    v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyDescendantHiddenAncestorSheetIDs(v4);
      v3 = v4;
    }

  }
}

void _UISheetLayoutInfoDirtyCurrentOffset(_DWORD *a1)
{
  int v1;
  _DWORD *v2;

  v1 = a1[5];
  if ((v1 & 2) != 0)
  {
    a1[5] = v1 & 0xFFFFFFFD;
    v2 = a1;
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v2);
    _UISheetLayoutInfoDirtyPercentFullHeight(v2);
    _UISheetLayoutInfoDirtyPercentPresented(v2);
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyPercentDimmedFromOffset(v2);
    _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(v2);
    _UISheetLayoutInfoDirtyExpanded(v2);

  }
}

void _UISheetLayoutInfoDirtyNonFullHeightOffset(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  _DWORD *v3;

  v1 = a1[5];
  if ((v1 & 8) != 0)
  {
    a1[5] = v1 & 0xFFFFFFF7;
    objc_msgSend(a1, "_parentLayoutInfo");
    v2 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      v3 = v2;
      _UISheetLayoutInfoDirtyNonFullHeightOffset();
      _UISheetLayoutInfoDirtyOffsetAdjustment(v3);
      v2 = v3;
    }

  }
}

void _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x400000) != 0)
  {
    a1[5] = v1 & 0xFFBFFFFF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyRawCurrentOffset(_DWORD *a1)
{
  int v1;
  _DWORD *v2;

  v1 = a1[5];
  if ((v1 & 1) != 0)
  {
    a1[5] = v1 & 0xFFFFFFFE;
    v2 = a1;
    _UISheetLayoutInfoDirtyCurrentOffset(v2);
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);

  }
}

void _UISheetLayoutInfoDirtyDepthLevel(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v1 = a1;
  v2 = v1[1];
  if ((v2 & 0x2000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFDFFFLL;
    v6 = v1;
    objc_msgSend(v1, "_childLayoutInfo");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      _UISheetLayoutInfoDirtyParentDepthLevel(v3);
      objc_msgSend(v4, "_delegate");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "_sheetLayoutInfoDidInvalidateOutput:", v6);

    }
    _UISheetLayoutInfoDirtyPercentFullScreen(v6);
    _UISheetLayoutInfoDirtyFullHeightUntransformedFrameForDepthLevel(v6);
    _UISheetLayoutInfoDirtyCornerRadii(v6);
    _UISheetLayoutInfoDirtyTransform(v6);

    v1 = v6;
  }

}

void _UISheetLayoutInfoDirtyFullHeightUntransformedFrameForDepthLevel(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _DWORD *v6;

  v1 = a1;
  v2 = v1[1];
  if ((v2 & 0x2000000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFDFFFFFFLL;
    v6 = v1;
    objc_msgSend(v1, "_childLayoutInfo");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)v3;
    if (v3)
    {
      _UISheetLayoutInfoDirtyFullHeightUntransformedFrameForDepthLevel(v3);
      objc_msgSend(v4, "_delegate");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "_sheetLayoutInfoDidInvalidateOutput:", v6);

    }
    _UISheetLayoutInfoDirtyTransform(v6);

    v1 = v6;
  }

}

void _UISheetLayoutInfoDirtyOffsetAdjustment(_DWORD *a1)
{
  int v1;
  _DWORD *v2;

  v1 = a1[5];
  if ((v1 & 0x10) != 0)
  {
    a1[5] = v1 & 0xFFFFFFEF;
    v2 = a1;
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v2);

  }
}

void _UISheetLayoutInfoDirtyUntransformedFrame(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x100) != 0)
  {
    a1[5] = v1 & 0xFFFFFEFF;
    v2 = a1;
    _UISheetLayoutInfoDirtyHostedUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyTouchInsets(v2);
    _UISheetLayoutInfoDirtyCornerRadii(v2);
    _UISheetLayoutInfoDirtyTransform(v2);
    _UISheetLayoutInfoDirtyShouldPresentedViewControllerControlStatusBarAppearance(v2);
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateUntransformedFrame:", v2);

  }
}

void _UISheetLayoutInfoDirtyCornerRadii(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  void *v3;
  id v4;

  v1 = a1[5];
  if ((v1 & 0x1000) != 0)
  {
    a1[5] = v1 & 0xFFFFEFFF;
    v2 = a1;
    _UISheetLayoutInfoDirtyHostedCornerRadii(v2);
    objc_msgSend(v2, "_parentLayoutInfo");
    v4 = (id)objc_claimAutoreleasedReturnValue();

    v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyCornerRadii(v4);
      v3 = v4;
    }

  }
}

void _UISheetLayoutInfoDirtyTransform(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x4000) != 0)
  {
    a1[5] = v1 & 0xFFFFBFFF;
    v2 = a1;
    _UISheetLayoutInfoDirtyShouldPresentedViewControllerControlStatusBarAppearance(v2);
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyShouldPresentedViewControllerControlStatusBarAppearance(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x200000) != 0)
  {
    a1[5] = v1 & 0xFFDFFFFF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyTouchInsets(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x800) != 0)
  {
    a1[5] = v1 & 0xFFFFF7FF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyHostedUntransformedFrame(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x200) != 0)
  {
    a1[5] = v1 & 0xFFFFFDFF;
    v2 = a1;
    _UISheetLayoutInfoDirtyTouchInsets(v2);
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x400) != 0)
  {
    a1[5] = v1 & 0xFFFFFBFF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyPercentDimmedFromOffset(void *a1)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  void *v7;
  _DWORD *v8;

  v1 = a1;
  v2 = v1[5];
  if ((v2 & 0x8000) != 0)
  {
    v1[5] = v2 & 0xFFFF7FFF;
    v8 = v1;
    _UISheetLayoutInfoDirtyPercentDimmed(v1);
    objc_msgSend(v8, "_parentLayoutInfo");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (_DWORD *)v3;
    if (v3)
    {
      _UISheetLayoutInfoDirtyPercentDimmedFromOffset(v3);
      _UISheetLayoutInfoDirtyPercentDimmed(v4);
      _UISheetLayoutInfoDirtyGrabberAlpha(v4);
    }
    _UISheetLayoutInfoDirtyShadowOpacity(v8);
    v5 = v8[5];
    if ((v5 & 0x1000000) != 0)
    {
      v8[5] = v5 & 0xFEFFFFFF;
      v6 = v8;
      objc_msgSend(v6, "_delegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "_sheetLayoutInfoDidInvalidateOutput:", v6);

    }
    v1 = v8;
  }

}

void _UISheetLayoutInfoDirtyShadowOpacity(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x20000) != 0)
  {
    a1[5] = v1 & 0xFFFDFFFF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyPercentPresented(_DWORD *a1)
{
  int v1;
  _DWORD *v2;

  v1 = a1[5];
  if ((v1 & 0x20) != 0)
  {
    a1[5] = v1 & 0xFFFFFFDF;
    v2 = a1;
    _UISheetLayoutInfoDirtyCornerRadii(v2);
    _UISheetLayoutInfoDirtyShadowOpacity(v2);

  }
}

void _UISheetLayoutInfoDirtyIndexOfCurrentActiveOrDismissDetent(_QWORD *a1)
{
  uint64_t v1;
  void (**v2)(void);
  void (**v3)(void);

  v1 = a1[1];
  if ((v1 & 0x40000000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFBFFFFFFFLL;
    objc_msgSend(a1, "_indexOfCurrentActiveOrDismissDetentWasInvalidated");
    v2 = (void (**)(void))objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      v3 = v2;
      v2[2]();
      v2 = v3;
    }

  }
}

void _UISheetLayoutInfoDirtyScalesDownBehindDescendants(void *a1)
{
  id v1;
  void *v2;
  _DWORD *v3;

  v1 = a1;
  _UISheetLayoutInfoDirtyProposedDepthLevel(v1);
  objc_msgSend(v1, "_childLayoutInfo");
  v3 = (_DWORD *)objc_claimAutoreleasedReturnValue();

  v2 = v3;
  if (v3)
  {
    _UISheetLayoutInfoDirtyPercentDimmed(v3);
    v2 = v3;
  }

}

void _UISheetLayoutInfoDirtyProposedDepthLevel(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = a1;
  v2 = v1[1];
  if ((v2 & 0x1000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFEFFFLL;
    v5 = v1;
    objc_msgSend(v1, "_parentLayoutInfo");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)v3;
    if (v3)
      _UISheetLayoutInfoDirtyProposedDepthLevel(v3);
    _UISheetLayoutInfoDirtyDepthLevel(v5);

    v1 = v5;
  }

}

void _UISheetLayoutInfoDirtyHostedCornerRadii(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x2000) != 0)
  {
    a1[5] = v1 & 0xFFFFDFFF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyFullHeightUntransformedFrame(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  if ((v1 & 0x1000000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFEFFFFFFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyFullHeightUntransformedFrameForDepthLevel(v2);
    _UISheetLayoutInfoDirtyRawCurrentOffset(v2);
    _UISheetLayoutInfoDirtyActiveDetents(v2);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMinimumOffset(v2);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMaximumOffset(v2);
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v2);
    _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(v2);

  }
}

void _UISheetLayoutInfoDirtyDismissOffset(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  if ((v1 & 0x4000000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFBFFFFFFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyPercentFullHeight(v2);
    _UISheetLayoutInfoDirtyActiveDetents(v2);
    _UISheetLayoutInfoDirtyCurrentOffset(v2);
    _UISheetLayoutInfoDirtyPercentPresented(v2);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v2);
    _UISheetLayoutInfoDirtyPercentDimmedFromOffset(v2);

  }
}

void _UISheetLayoutInfoDirtyForcedFullScreen(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  if ((v1 & 0x40000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFBFFFFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyFunctionallyFullScreen(v2);
    _UISheetLayoutInfoDirtyPercentFullScreen(v2);

  }
}

void _UISheetLayoutInfoDirtyUnsafeInsets(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  if ((v1 & 0x20) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFFDFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyMarginsWhenFloating(v2);
    _UISheetLayoutInfoDirtyMargins(v2);

  }
}

void _UISheetLayoutInfoDirtyHidingUnderneathDescendantForDepthLevel(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;

  v1 = a1[1];
  if ((v1 & 0x400) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFBFFLL;
    v2 = a1;
    objc_msgSend(v2, "_parentLayoutInfo");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    if (v3)
      _UISheetLayoutInfoDirtyProposedDepthLevelIncrement(v3);
    _UISheetLayoutInfoDirtyProposedDepthLevel(v2);
    _UISheetLayoutInfoDirtyDepthLevel(v2);

  }
}

void _UISheetLayoutInfoDirtyParentDepthLevel(void *a1)
{
  id v1;

  v1 = a1;
  _UISheetLayoutInfoDirtyDepthLevel();
  _UISheetLayoutInfoDirtyFullHeightUntransformedFrameForDepthLevel(v1);

}

void _UISheetLayoutInfoDirtyStacksWithChild(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  _DWORD *v4;

  v1 = a1[1];
  if ((v1 & 0x800000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFF7FFFFFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyProposedDepthLevel(v2);
    _UISheetLayoutInfoDirtyPercentDimmed(v2);
    objc_msgSend(v2, "_childLayoutInfo");
    v4 = (_DWORD *)objc_claimAutoreleasedReturnValue();

    v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyPercentDimmed(v4);
      v3 = v4;
    }

  }
}

void _UISheetLayoutInfoDirtyInverted(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  void *v5;
  _DWORD *v6;

  v1 = a1;
  v2 = v1[1];
  if ((v2 & 0x20000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFDFFFFLL;
    v6 = v1;
    _UISheetLayoutInfoDirtyPercentFullHeight(v1);
    _UISheetLayoutInfoDirtyStackAlignmentFrame(v6);
    _UISheetLayoutInfoDirtyDismissOffset(v6);
    _UISheetLayoutInfoDirtyRawCurrentOffset(v6);
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v6);
    _UISheetLayoutInfoDirtyOffsetAdjustment(v6);
    _UISheetLayoutInfoDirtyActiveDetents(v6);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMinimumOffset(v6);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMaximumOffset(v6);
    _UISheetLayoutInfoDirtyUntransformedFrame(v6);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v6);
    _UISheetLayoutInfoDirtyCornerRadii(v6);
    _UISheetLayoutInfoDirtyScrollInteractionEnabled(v6);
    _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(v6);
    objc_msgSend(v6, "_parentLayoutInfo");
    v3 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      _UISheetLayoutInfoDirtyNonFullHeightOffset(v3);
      _UISheetLayoutInfoDirtyOffsetAdjustment(v4);
    }
    objc_msgSend(v6, "_delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_sheetLayoutInfoDidInvalidateOutput:", v6);

    v1 = v6;
  }

}

void _UISheetLayoutInfoDirtyScrollInteractionEnabled(_DWORD *a1)
{
  int v1;
  _DWORD *v2;
  id v3;

  v1 = a1[5];
  if ((v1 & 0x100000) != 0)
  {
    a1[5] = v1 & 0xFFEFFFFF;
    v2 = a1;
    objc_msgSend(v2, "_delegate");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_sheetLayoutInfoDidInvalidateOutput:", v2);

  }
}

void _UISheetLayoutInfoDirtyDismissesHorizontally(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  if ((v1 & 0x8000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFF7FFFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyEffectiveDismissible(v2);
    _UISheetLayoutInfoDirtyRawCurrentOffset(v2);
    _UISheetLayoutInfoDirtyIndexOfCurrentActiveOrDismissDetent(v2);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMinimumOffset(v2);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMaximumOffset(v2);
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v2);
    _UISheetLayoutInfoDirtyInteractionEnabled(v2);

  }
}

void _UISheetLayoutInfoDirtyEffectiveDismissible(_QWORD *a1)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = a1[1];
  if ((v1 & 0x10000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFEFFFFLL;
    v2 = a1;
    _UISheetLayoutInfoDirtyCurrentOffset(v2);
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v2);
    _UISheetLayoutInfoDirtyActiveDetents(v2);

  }
}

void _UISheetLayoutInfoDirtyProposedDepthLevelIncrement(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = a1;
  v2 = v1[1];
  if ((v2 & 0x800) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFF7FFLL;
    v5 = v1;
    objc_msgSend(v1, "_parentLayoutInfo");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)v3;
    if (v3)
      _UISheetLayoutInfoDirtyProposedDepthLevelIncrement(v3);
    _UISheetLayoutInfoDirtyProposedDepthLevel(v5);

    v1 = v5;
  }

}

void _UISheetLayoutInfoDirtyDescendantHiddenAncestorSheetIDs(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  v1 = a1;
  v2 = v1[1];
  if ((v2 & 8) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFFFF7;
    v5 = v1;
    objc_msgSend(v1, "_parentLayoutInfo");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)v3;
    if (v3)
      _UISheetLayoutInfoDirtyDescendantHiddenAncestorSheetIDs(v3);
    _UISheetLayoutInfoDirtyHidingUnderneathDescendant(v5);

    v1 = v5;
  }

}

void _UISheetLayoutInfoDirtyHidingUnderneathDescendant(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;

  v1 = a1[1];
  if ((v1 & 0x10) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFFEFLL;
    v2 = a1;
    objc_msgSend(v2, "_parentLayoutInfo");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    if (v3)
      _UISheetLayoutInfoDirtyProposedDepthLevelIncrement(v3);
    _UISheetLayoutInfoDirtyHidingUnderneathDescendantForDepthLevel(v2);
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v2);
    _UISheetLayoutInfoDirtyOffsetAdjustment(v2);
    _UISheetLayoutInfoDirtyPercentDimmedFromOffset(v2);
    _UISheetLayoutInfoDirtyModelDimmingEnabled(v2);

  }
}

void _UISheetTransformForMetrics(uint64_t a1, void *a2, int a3, void *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14)
{
  id v29;
  id v30;
  uint64_t v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  long double v37;
  double v38;
  double v39;
  double v40;
  CGFloat Height;
  double v42;
  double v43;
  double v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  double MinY;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double MidY;
  double v56;
  CGFloat v57;
  CGFloat v58;
  double v59;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v62;
  CGAffineTransform v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;

  v29 = a2;
  v30 = a4;
  if (objc_msgSend(v30, "exclusivelyUsesZPositionForTransform"))
  {
    v31 = MEMORY[0x1E0C9BAA8];
    v32 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)a1 = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)(a1 + 16) = v32;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v31 + 32);
    goto LABEL_20;
  }
  v64.origin.y = a6;
  v64.origin.x = a5;
  v57 = a6;
  v58 = a7;
  v64.size.width = a7;
  v64.size.height = a8;
  +[UIViewController _horizontalContentMarginForView:ofWidth:](UIViewController, "_horizontalContentMarginForView:ofWidth:", v29, CGRectGetWidth(v64));
  v34 = v33;
  objc_msgSend(v30, "maximumSheetDepthLevel");
  v36 = v35 + -1.0;
  if (v36 > a14)
    v36 = a14;
  v37 = exp2(-v36);
  v38 = 1.0;
  v59 = 1.0 - v37 + 1.0 - v37;
  v65.origin.x = a9;
  v65.origin.y = a10;
  v65.size.width = a11;
  v65.size.height = a12;
  if (CGRectGetWidth(v65) == 0.0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
LABEL_9:
    objc_msgSend(v30, "topOffset");
    v40 = v39;
    v67.origin.x = a9;
    v67.origin.y = a10;
    v67.size.width = a11;
    v67.size.height = a12;
    Height = CGRectGetHeight(v67);
    v42 = 1.0;
    if (Height != 0.0)
    {
      v68.origin.x = a9;
      v68.origin.y = a10;
      v68.size.width = a11;
      v68.size.height = a12;
      v42 = 1.0 - v59 * (v40 + v40) / CGRectGetHeight(v68);
    }
    if (v38 < v42)
      v38 = v42;
    goto LABEL_13;
  }
  v66.origin.x = a9;
  v66.origin.y = a10;
  v66.size.width = a11;
  v66.size.height = a12;
  v38 = 1.0 - (v34 + v34) * v59 / CGRectGetWidth(v66);
  if ((a3 & 1) == 0)
    goto LABEL_9;
LABEL_13:
  memset(&v63, 0, sizeof(v63));
  CGAffineTransformMakeScale(&v63, v38, v38);
  v43 = 0.0;
  if (a3)
    v44 = (a8 - a8 * v38) * 0.5;
  else
    v44 = 0.0;
  v56 = v44;
  v45 = a5;
  v46 = v57;
  v47 = v58;
  v48 = a8;
  if ((a3 & 1) != 0)
  {
    MinY = CGRectGetMinY(*(CGRect *)&v45);
    v69.origin.x = a9;
    v69.origin.y = a10;
    v69.size.width = a11;
    v69.size.height = a12;
    v50 = MinY - CGRectGetMinY(v69);
    objc_msgSend(v30, "topOffset");
    v52 = v59 * v51;
    objc_msgSend(v30, "maximumSheetDepthLevel");
    v70.size.height = a12;
    v43 = v52 * fmax(fmin(v53 - a14, 1.0), 0.0);
    v70.origin.x = a9;
    v70.origin.y = a10;
    v70.size.width = a11;
    v54 = fmax(fmin(a14, 1.0), 0.0) * (CGRectGetMinY(v70) - a13);
  }
  else
  {
    MidY = CGRectGetMidY(*(CGRect *)&v45);
    v71.origin.x = a9;
    v71.origin.y = a10;
    v71.size.width = a11;
    v71.size.height = a12;
    v50 = MidY - CGRectGetMidY(v71);
    v54 = 0.0;
  }
  memset(&v62, 0, sizeof(v62));
  CGAffineTransformMakeTranslation(&v62, 0.0, -(v54 + v43 + v56 + (1.0 - v38) * v50) / v38);
  t1 = v62;
  t2 = v63;
  CGAffineTransformConcat((CGAffineTransform *)a1, &t1, &t2);
LABEL_20:

}

double _UISheetLayoutInfoMargins(void *a1, char a2, int a3, int a4, void *a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  double v29;
  double v30;
  BOOL v31;

  v20 = a5;
  v21 = a1;
  v22 = objc_msgSend(v21, "horizontalSizeClass");
  v23 = objc_msgSend(v21, "verticalSizeClass");

  if ((a2 & 1) == 0)
  {
    objc_msgSend(v20, "minimumSidePadding");
    v24 = fmax(a6, a8);
    if (!a4)
      a6 = v24;
  }
  if (v23 != 1)
  {
    if (v22 == 2 && v23 == 2)
    {
      objc_msgSend(v20, "topOffset");
      v27 = v26 + v26;
      if (a11 != 1.79769313e308)
        v27 = a11;
      goto LABEL_15;
    }
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v28, "userInterfaceIdiom"))
    {

    }
    else
    {
      v31 = +[UIDevice _hasHomeButton](UIDevice, "_hasHomeButton");

      if (!v31 && v22 == 1)
      {
        objc_msgSend(v20, "topOffset");
        goto LABEL_22;
      }
    }
    objc_msgSend(v20, "topOffset");
    v30 = v29 + v29;
LABEL_22:
    v25 = a6 + v30;
    goto LABEL_23;
  }
  if (!a3 || a7 <= 0.0)
  {
    objc_msgSend(v20, "topOffsetInCompactHeight");
    if (a10 != 1.79769313e308)
      v27 = a10;
LABEL_15:
    v25 = a6 + v27;
    goto LABEL_23;
  }
  v25 = 23.0;
LABEL_23:

  return v25;
}

void sub_1853A25B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UIAssistantViewPlacement(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = a1;
  objc_msgSend(v1, "assistantView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
    v2 = v1;
  v4 = v2;

  return v4;
}

void sub_1853A45F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _ensureDebugName(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  objc_class *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;

  v10 = a1;
  v3 = a2;
  if (!v10[52])
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    v5 = v3;
    if (!v3)
    {
      v6 = (objc_class *)objc_opt_class();
      NSStringFromClass(v6);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v7 = _ensureDebugName___windowCreationCount++;
    objc_msgSend(v4, "stringWithFormat:", CFSTR("%@-%p-%u"), v5, v10, v7);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v10[52];
    v10[52] = v8;

    if (!v3)
  }

}

uint64_t UIDebuggingOverlayIsEnabled()
{
  if (qword_1ECD7B010 != -1)
    dispatch_once(&qword_1ECD7B010, &__block_literal_global_82_5);
  return _MergedGlobals_11_15;
}

uint64_t CreateContextKey()
{
  return pthread_key_create((pthread_key_t *)&__contextThreadKey, (void (__cdecl *)(void *))FreeContextStack);
}

void sub_1853ADB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIRTreeContainerNode<unsigned long>::addContainer(_OWORD *a1, uint64_t a2, uint64_t *a3, int64x2_t **a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  char *v48;
  __int128 v49;
  int64x2_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  int64x2_t *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  __int128 v92;
  int64x2_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  _OWORD *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  char *v111;
  __int128 v112;
  int64x2_t v113;
  uint64_t v114;
  int64x2_t *v115;
  unint64_t *v116;
  uint64_t v117;
  int64x2_t *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  void *v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136[2];
  float64x2_t v137[2];
  _OWORD v138[2];
  __int128 v139;
  int64x2_t *v140;
  std::__shared_weak_count *v141;
  int64x2_t v142;
  _QWORD v143[3];
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  void ***v147;
  int64x2_t *v148;
  int64x2_t v149;
  uint64_t v150;
  _QWORD *v151;

  if (!*a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "shared_ptr<_UIRTreeContainerNode<T>> _UIRTreeContainerNode<>::addContainer(shared_ptr<_UIRTreeContainerNode<T>>, shared_ptr<_UIRTreeContainerNode<T>>) [T = unsigned long]");
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v132, "handleFailureInFunction:file:lineNumber:description:", v133, CFSTR("_UIRTree.mm"), 382, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("container"));

  }
  if (_UIRTreeContainerNode<unsigned long>::isFull(a2))
  {
    v8 = *(std::__shared_weak_count **)(a2 + 32);
    if (v8)
    {
      v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)(a2 + 24);
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (v13)
        {
          if (v11)
            goto LABEL_10;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v10);
          if (v11)
          {
LABEL_10:
            v142 = 0uLL;
            v14 = *(std::__shared_weak_count **)(a2 + 32);
            if (v14)
            {
              v142.i64[1] = (uint64_t)std::__shared_weak_count::lock(v14);
              if (v142.i64[1])
                v142.i64[0] = *(_QWORD *)(a2 + 24);
            }
            v66 = (std::__shared_weak_count *)a3[1];
            v145 = *a3;
            v146 = v66;
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
            }
            v69 = (std::__shared_weak_count *)a4[1];
            v143[2] = *a4;
            v144 = v69;
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
            }
            _UIRTreeContainerNode<unsigned long>::addContainer(&v148);
            std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::operator=[abi:nn180100]((uint64_t)a4, (__int128 *)&v148);
            v72 = (std::__shared_weak_count *)v149.i64[0];
            if (v149.i64[0])
            {
              v73 = (unint64_t *)(v149.i64[0] + 8);
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            if (v144)
            {
              v75 = &v144->__shared_owners_;
              do
                v76 = __ldaxr((unint64_t *)v75);
              while (__stlxr(v76 - 1, (unint64_t *)v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
            if (v146)
            {
              v77 = &v146->__shared_owners_;
              do
                v78 = __ldaxr((unint64_t *)v77);
              while (__stlxr(v78 - 1, (unint64_t *)v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                std::__shared_weak_count::__release_weak(v146);
              }
            }
            if (!v142.i64[1])
              goto LABEL_135;
            v79 = (unint64_t *)(v142.i64[1] + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (v80)
              goto LABEL_135;
            (*(void (**)(uint64_t))(*(_QWORD *)v142.i64[1] + 16))(v142.i64[1]);
            v81 = (std::__shared_weak_count *)v142.i64[1];
LABEL_142:
            std::__shared_weak_count::__release_weak(v81);
LABEL_135:
            *a1 = *(_OWORD *)a4;
            *a4 = 0;
            a4[1] = 0;
            return;
          }
        }
      }
    }
    v142 = 0uLL;
    v143[0] = 0;
    v83 = *(int64x2_t **)(a2 + 8);
    v82 = *(std::__shared_weak_count **)(a2 + 16);
    v140 = v83;
    if (v82)
    {
      v84 = std::__shared_weak_count::lock(v82);
      v141 = v84;
      if (v84)
      {
        v85 = v84;
        v151 = v143;
        v86 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(1uLL);
        v88 = v86;
        *v86 = v83;
        v86[1] = v85;
        v89 = (_QWORD *)v142.i64[1];
        v90 = (_QWORD *)v142.i64[0];
        if (v142.i64[1] == v142.i64[0])
        {
          v93 = vdupq_n_s64(v142.u64[1]);
          v91 = v86;
        }
        else
        {
          v91 = v86;
          do
          {
            v92 = *((_OWORD *)v89 - 1);
            v89 -= 2;
            *((_OWORD *)v91 - 1) = v92;
            v91 -= 2;
            *v89 = 0;
            v89[1] = 0;
          }
          while (v89 != v90);
          v93 = v142;
        }
        v94 = v86 + 2;
        v142.i64[0] = (uint64_t)v91;
        v149 = v93;
        v95 = v143[0];
        v143[0] = &v86[2 * v87];
        v150 = v95;
        v148 = (int64x2_t *)v93.i64[0];
        std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)&v148);
        v142.i64[1] = (uint64_t)(v88 + 2);
        if ((unint64_t)v94 >= v143[0])
        {
          v100 = ((uint64_t)v94 - v142.i64[0]) >> 4;
          if ((unint64_t)(v100 + 1) >> 60)
            abort();
          v101 = (v143[0] - v142.i64[0]) >> 3;
          if (v101 <= v100 + 1)
            v101 = v100 + 1;
          if (v143[0] - v142.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
            v102 = 0xFFFFFFFFFFFFFFFLL;
          else
            v102 = v101;
          v151 = v143;
          v103 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(v102);
          v105 = &v103[16 * v100];
          v106 = *(_OWORD *)a3;
          *(_OWORD *)v105 = *(_OWORD *)a3;
          if (*((_QWORD *)&v106 + 1))
          {
            v107 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
            do
              v108 = __ldxr(v107);
            while (__stxr(v108 + 1, v107));
          }
          v109 = (_QWORD *)v142.i64[1];
          v110 = (_QWORD *)v142.i64[0];
          if (v142.i64[1] == v142.i64[0])
          {
            v113 = vdupq_n_s64(v142.u64[1]);
            v111 = &v103[16 * v100];
          }
          else
          {
            v111 = &v103[16 * v100];
            do
            {
              v112 = *((_OWORD *)v109 - 1);
              v109 -= 2;
              *((_OWORD *)v111 - 1) = v112;
              v111 -= 16;
              *v109 = 0;
              v109[1] = 0;
            }
            while (v109 != v110);
            v113 = v142;
          }
          v99 = v105 + 16;
          v142.i64[0] = (uint64_t)v111;
          v142.i64[1] = (uint64_t)(v105 + 16);
          v149 = v113;
          v114 = v143[0];
          v143[0] = &v103[16 * v104];
          v150 = v114;
          v148 = (int64x2_t *)v113.i64[0];
          std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)&v148);
        }
        else
        {
          v88[2] = *a3;
          v96 = a3[1];
          v88[3] = v96;
          if (v96)
          {
            v97 = (unint64_t *)(v96 + 8);
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }
          v99 = v88 + 4;
        }
        v115 = (int64x2_t *)operator new(0xB0uLL);
        v115->i64[1] = 0;
        v116 = &v115->u64[1];
        v115[1].i64[0] = 0;
        v117 = v143[0];
        v115[4].i64[1] = v142.i64[0];
        v115->i64[0] = (uint64_t)&off_1E168B670;
        v115[2].i64[0] = (uint64_t)&off_1E168B618;
        v118 = v115 + 2;
        v143[0] = 0;
        v142 = 0uLL;
        v115[2].i64[1] = 0;
        v115[3].i64[1] = 0;
        v115[4].i64[0] = 0;
        v115[3].i64[0] = 0;
        v115[5].i64[0] = (uint64_t)v99;
        v115[5].i64[1] = v117;
        v149 = 0uLL;
        v148 = 0;
        v115[6] = 0u;
        v115[8] = 0u;
        v115[7] = 0u;
        _UIRTreeContainerNode<unsigned long>::commonInit(v115 + 2);
        v147 = (void ***)&v148;
        std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v147);
        v140 = v115 + 2;
        v141 = (std::__shared_weak_count *)v115;
        std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::__enable_weak_this[abi:nn180100]<_UIRTreeContainerNode<unsigned long>,_UIRTreeContainerNode<unsigned long>,void>((uint64_t)&v140, &v115[2].i64[1], (uint64_t)v115[2].i64);
        v119 = (unint64_t *)&v115[1];
        do
          v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
        do
          v121 = __ldxr(v119);
        while (__stxr(v121 + 1, v119));
        v122 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)(a2 + 24) = v118;
        *(_QWORD *)(a2 + 32) = v115;
        if (v122)
          std::__shared_weak_count::__release_weak(v122);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v115);
        do
          v123 = __ldxr(v116);
        while (__stxr(v123 + 1, v116));
        v124 = (std::__shared_weak_count *)a4[1];
        *a4 = v118;
        a4[1] = v115;
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        _UIRTreeContainerNode<unsigned long>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)a2);
        v127 = v141;
        if (v141)
        {
          v128 = (unint64_t *)&v141->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        v148 = &v142;
        std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v148);
        goto LABEL_135;
      }
    }
  }
  else
  {
    v16 = *a3;
    v15 = a3[1];
    *(_QWORD *)&v139 = *a3;
    *((_QWORD *)&v139 + 1) = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
    {
      v20 = *(_QWORD *)(a2 + 8);
      v21 = std::__shared_weak_count::lock(v19);
      if (v21)
      {
        v22 = v21;
        p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
        do
          v24 = __ldxr(p_shared_weak_owners);
        while (__stxr(v24 + 1, p_shared_weak_owners));
        do
          v25 = __ldxr(p_shared_weak_owners);
        while (__stxr(v25 + 1, p_shared_weak_owners));
        v26 = *(std::__shared_weak_count **)(v16 + 32);
        *(_QWORD *)(v16 + 24) = v20;
        *(_QWORD *)(v16 + 32) = v22;
        if (v26)
          std::__shared_weak_count::__release_weak(v26);
        std::__shared_weak_count::__release_weak(v22);
        v27 = (unint64_t *)&v22->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v29 = *(_QWORD *)(a2 + 56);
        v30 = *(_QWORD **)(a2 + 48);
        if ((unint64_t)v30 >= v29)
        {
          v35 = *(_QWORD *)(a2 + 40);
          v36 = ((uint64_t)v30 - v35) >> 4;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60)
            abort();
          v38 = v29 - v35;
          if (v38 >> 3 > v37)
            v37 = v38 >> 3;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
            v39 = 0xFFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          v151 = (_QWORD *)(a2 + 56);
          v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(v39);
          v42 = &v40[16 * v36];
          v43 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          *(_OWORD *)v42 = v139;
          v31 = v43;
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v47 = *(_QWORD **)(a2 + 40);
          v46 = *(_QWORD **)(a2 + 48);
          if (v46 == v47)
          {
            v50 = vdupq_n_s64((unint64_t)v46);
            v48 = v42;
          }
          else
          {
            v48 = v42;
            do
            {
              v49 = *((_OWORD *)v46 - 1);
              v46 -= 2;
              *((_OWORD *)v48 - 1) = v49;
              v48 -= 16;
              *v46 = 0;
              v46[1] = 0;
            }
            while (v46 != v47);
            v50 = *(int64x2_t *)(a2 + 40);
          }
          v34 = v42 + 16;
          *(_QWORD *)(a2 + 40) = v48;
          *(_QWORD *)(a2 + 48) = v42 + 16;
          v149 = v50;
          v51 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a2 + 56) = &v40[16 * v41];
          v150 = v51;
          v148 = (int64x2_t *)v50.i64[0];
          std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)&v148);
        }
        else
        {
          *v30 = v139;
          v31 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v30[1] = *((_QWORD *)&v139 + 1);
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          v34 = v30 + 2;
        }
        *(_QWORD *)(a2 + 48) = v34;
        if (v31)
        {
          v52 = (unint64_t *)&v31->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v138, a2);
        v134 = (float64x2_t)v138[0];
        v135 = (float64x2_t)v138[1];
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v137, *a3);
        v54 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(vaddq_f64(v134, v135), vaddq_f64(v137[0], v137[1])), (int8x16_t)vcgeq_f64(v137[0], v134));
        if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v54, 1), (int8x16_t)v54).u64[0] & 0x8000000000000000) != 0)
          goto LABEL_135;
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v136, *a3);
        v55 = *(float64x2_t *)(a2 + 112);
        v56 = vminnmq_f64(v55, v136[0]);
        v57 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v55, *(float64x2_t *)(a2 + 128)), vaddq_f64(v136[0], v136[1])), v56);
        *(float64x2_t *)(a2 + 112) = v56;
        *(float64x2_t *)(a2 + 128) = v57;
        v58 = *(std::__shared_weak_count **)(a2 + 32);
        if (!v58)
          goto LABEL_135;
        v59 = std::__shared_weak_count::lock(v58);
        if (!v59)
          goto LABEL_135;
        v60 = v59;
        v61 = *(_QWORD *)(a2 + 24);
        v62 = (unint64_t *)&v59->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v60);
        }
        if (!v61)
          goto LABEL_135;
        v148 = 0;
        v149.i64[0] = 0;
        v64 = *(std::__shared_weak_count **)(a2 + 32);
        if (v64)
        {
          v64 = std::__shared_weak_count::lock(v64);
          v65 = v64;
          v149.i64[0] = (uint64_t)v64;
          if (v64)
          {
            v64 = *(std::__shared_weak_count **)(a2 + 24);
            v148 = (int64x2_t *)v64;
          }
        }
        else
        {
          v65 = 0;
        }
        _UIRTreeContainerNode<unsigned long>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)v64);
        if (!v65)
          goto LABEL_135;
        v130 = (unint64_t *)&v65->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (v131)
          goto LABEL_135;
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        v81 = v65;
        goto LABEL_142;
      }
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
  __break(1u);
}

void sub_1853AEBDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CGRect CGRectFromString(NSString *string)
{
  NSString *v1;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  NSString *v6;
  CGPoint v7;
  NSString *v8;
  CGSize v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSString *v14;
  NSString *stringa;
  CGRect result;

  v1 = string;
  x = *MEMORY[0x1E0C9D648];
  y = *(double *)(MEMORY[0x1E0C9D648] + 8);
  width = *(double *)(MEMORY[0x1E0C9D648] + 16);
  height = *(double *)(MEMORY[0x1E0C9D648] + 24);
  if (-[NSString length](v1, "length") >= 0xD)
  {
    v14 = 0;
    stringa = 0;
    if (SplitBracesAndComma(v1, (CFStringRef *)&stringa, (CFStringRef *)&v14))
    {
      v6 = stringa;
      v7 = CGPointFromString(stringa);
      x = v7.x;
      y = v7.y;
      v8 = v14;
      v9 = CGSizeFromString(v14);
      width = v9.width;
      height = v9.height;
      CFRelease(v6);
      CFRelease(v8);
    }
  }

  v10 = x;
  v11 = y;
  v12 = width;
  v13 = height;
  result.size.height = v13;
  result.size.width = v12;
  result.origin.y = v11;
  result.origin.x = v10;
  return result;
}

CGSize CGSizeFromString(NSString *string)
{
  NSString *v1;
  double DoubleValue;
  double v3;
  CFStringRef v4;
  CFStringRef v5;
  double v6;
  double v7;
  CFStringRef v8;
  CFStringRef str;
  CGSize result;

  v1 = string;
  DoubleValue = *MEMORY[0x1E0C9D820];
  v3 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  if (-[NSString length](v1, "length") >= 5)
  {
    v8 = 0;
    str = 0;
    if (SplitBracesAndComma(v1, &str, &v8))
    {
      v4 = str;
      DoubleValue = CFStringGetDoubleValue(str);
      v5 = v8;
      v3 = CFStringGetDoubleValue(v8);
      CFRelease(v4);
      CFRelease(v5);
    }
  }

  v6 = DoubleValue;
  v7 = v3;
  result.height = v7;
  result.width = v6;
  return result;
}

CGPoint CGPointFromString(NSString *string)
{
  NSString *v1;
  double DoubleValue;
  double v3;
  CFStringRef v4;
  CFStringRef v5;
  double v6;
  double v7;
  CFStringRef v8;
  CFStringRef str;
  CGPoint result;

  v1 = string;
  DoubleValue = *MEMORY[0x1E0C9D538];
  v3 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  if (-[NSString length](v1, "length") >= 5)
  {
    v8 = 0;
    str = 0;
    if (SplitBracesAndComma(v1, &str, &v8))
    {
      v4 = str;
      DoubleValue = CFStringGetDoubleValue(str);
      v5 = v8;
      v3 = CFStringGetDoubleValue(v8);
      CFRelease(v4);
      CFRelease(v5);
    }
  }

  v6 = DoubleValue;
  v7 = v3;
  result.y = v7;
  result.x = v6;
  return result;
}

UIEdgeInsets UIEdgeInsetsFromString(NSString *string)
{
  NSString *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _QWORD v10[5];
  UIEdgeInsets result;

  v10[4] = *MEMORY[0x1E0C80C00];
  v1 = string;
  v2 = 0.0;
  if (-[NSString length](v1, "length") < 9)
  {
    v3 = 0.0;
    v4 = 0.0;
    v5 = 0.0;
  }
  else
  {
    v3 = 0.0;
    v4 = 0.0;
    v5 = 0.0;
    if (ParseNumbersWithDelimiter(v1, (uint64_t)v10, 4))
    {
      v4 = *(double *)v10;
      v3 = *(double *)&v10[1];
      v2 = *(double *)&v10[2];
      v5 = *(double *)&v10[3];
    }
  }

  v6 = v4;
  v7 = v3;
  v8 = v2;
  v9 = v5;
  result.right = v9;
  result.bottom = v8;
  result.left = v7;
  result.top = v6;
  return result;
}

BOOL ParseNumbersWithDelimiter(void *a1, uint64_t a2, uint64_t a3)
{
  __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  CFIndex *v8;
  _BOOL8 v11;
  uint64_t v12;
  CFIndex *v13;
  CFIndex v14;
  CFIndex *v15;
  CFIndex v16;
  const __CFString *v17;
  CFIndex v19;
  CFIndex v20;
  _QWORD v21[2];
  CFRange v22;

  v21[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v20 = 0;
  v21[0] = a3 - 1;
  v19 = 0;
  v6 = (const __CFString *)MEMORY[0x1E0C80A78](v5);
  v8 = (CFIndex *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  ParseBracesWithDelimiter(v6, &v20, &v19, v8, v21);
  if (v20 != -1 && v19 != -1 && v21[0] == a3 - 1)
  {
    if (a3 < 1)
    {
      v11 = 1;
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = v8 - 1;
        if (!v12)
          v13 = &v20;
        v14 = *v13;
        if (v21[0] <= v12)
          v15 = &v19;
        else
          v15 = v8;
        v16 = *v15 - v14;
        v11 = v16 - 2 >= 0;
        if (v16 - 2 < 0)
          break;
        v22.location = v14 + 1;
        v22.length = v16 - 1;
        v17 = CFStringCreateWithSubstring(0, v5, v22);
        *(double *)(a2 + 8 * v12) = CFStringGetDoubleValue(v17);
        CFRelease(v17);
        ++v12;
        ++v8;
      }
      while (a3 != v12);
    }
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

uint64_t SplitBracesAndComma(void *a1, CFStringRef *a2, CFStringRef *a3)
{
  __CFString *v5;
  CFIndex v6;
  BOOL v9;
  CFIndex v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  CFRange v18;
  CFRange v19;

  v5 = a1;
  v16 = 0;
  v17 = 0;
  v14 = 1;
  v15 = 0;
  ParseBracesWithDelimiter(v5, &v17, &v16, &v15, &v14);
  v6 = v16;
  v9 = v17 != -1 && v16 != -1 && v14 == 1 && v17 < v16;
  if (v9 && ((v10 = v15, v15 > v17 + 1) ? (v11 = v15 < v16 - 1) : (v11 = 0), v11))
  {
    v18.length = v15 + ~v17;
    v18.location = v17 + 1;
    *a2 = CFStringCreateWithSubstring(0, v5, v18);
    v19.location = v10 + 1;
    v19.length = v6 + ~v10;
    *a3 = CFStringCreateWithSubstring(0, v5, v19);
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void ParseBracesWithDelimiter(const __CFString *a1, CFIndex *a2, CFIndex *a3, CFIndex *a4, _QWORD *a5)
{
  __CFCharacterSet *MutableCopy;
  CFIndex Length;
  char CharacterAtIndex;
  int v13;
  CFIndex v14;
  uint64_t v15;
  int v16;
  CFIndex v17;
  int v19;
  void *v20;
  void *v21;
  CFIndex *v22;
  CFIndex *v23;
  CFRange result;
  CFRange v25;

  if (CFStringGetLength(CFSTR(",")) != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ParseBracesWithDelimiter(CFStringRef, CFStringRef, CFIndex *, CFIndex *, CFIndex *, NSInteger *)");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v21, CFSTR("UIGeometry.m"), 1444, CFSTR("Parsing allows delimiter of length 1 only"));

  }
  if (qword_1ECD7E220 != -1)
    dispatch_once(&qword_1ECD7E220, &__block_literal_global_147_1);
  MutableCopy = CFCharacterSetCreateMutableCopy(0, (CFCharacterSetRef)_MergedGlobals_1085);
  CFCharacterSetAddCharactersInString(MutableCopy, CFSTR(","));
  *a2 = -1;
  *a3 = -1;
  Length = CFStringGetLength(a1);
  result.location = 0;
  result.length = 0;
  CharacterAtIndex = CFStringGetCharacterAtIndex(CFSTR(","), 0);
  if (Length < 1)
  {
    v15 = 0;
  }
  else
  {
    v22 = a3;
    v23 = a4;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = CharacterAtIndex;
    v17 = Length;
    while (1)
    {
      v25.location = v14;
      v25.length = v17;
      if (!CFStringFindCharacterFromSet(a1, MutableCopy, v25, 0, &result))
        break;
      if (result.location >= Length || result.length != 1)
        break;
      v19 = CFStringGetCharacterAtIndex(a1, result.location);
      if ((v19 & 0xFFFFFFDF) == 0x5B)
      {
        if (!v13)
          *a2 = result.location;
        ++v13;
      }
      else if (v16 == v19)
      {
        if (v13 == 1)
        {
          if (v15 < *a5)
          {
            *v23++ = result.location;
            ++v15;
          }
          v13 = 1;
        }
      }
      else if ((v19 & 0xFFFFFFDF) == 0x5D && !--v13)
      {
        *v22 = result.location;
        break;
      }
      if (result.location + 1 < Length)
      {
        v17 += v14 + ~result.location;
        v14 = result.location + 1;
        if (v17 > 0)
          continue;
      }
      break;
    }
  }
  CFRelease(MutableCopy);
  if (a5)
    *a5 = v15;
}

uint64_t debugTracingCheck()
{
  int v0;
  int v1;
  BOOL v2;
  BOOL v3;
  uint64_t result;
  uint64_t (*v5)();

  v0 = _UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_UpdateCycleTracing, (uint64_t)CFSTR("UpdateCycleTracing"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger);
  v1 = dword_1ECD767B0;
  if (v0)
    v1 = 0;
  v2 = v1 == 1;
  v3 = v1 <= 1;
  if (v1 <= 1)
    result = v1;
  else
    result = 2;
  v5 = debugTracingTracepointsWithCallstacks;
  if (v3)
    v5 = 0;
  if (v2)
    v5 = debugTracingTracepoints;
  _UIUpdateCycleDebugTracingCheck = v5;
  return result;
}

__CFString *UIApplicationSceneStringForCompatibilityMode(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E16C8698[a1];
}

void NotifyVC(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "conformsToProtocol:", &unk_1EDFCB9C0))
      objc_msgSend(v2, "_sceneDidChange");
    objc_msgSend(v2, "presentedViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (*)(void))NotifyVC)();

    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    objc_msgSend(v2, "childViewControllers", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v4);
          NotifyVC(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8++));
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v6);
    }

  }
}

void sub_1853B3568(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1853B3624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _updateItemOwners(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v8++), "_setOwningNavigationItem:", v4);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

id _itemListUpdatingFirstItem(void *a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "count");
  if (v4)
  {
    if (v5 <= 1)
    {
      v13[0] = v4;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
      v6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
      v7 = v6;
      goto LABEL_14;
    }
    v8 = objc_msgSend(v3, "indexOfObjectIdenticalTo:", v4);
    if (!v8)
    {
      v6 = v3;
      goto LABEL_11;
    }
    v9 = v8;
    v10 = (void *)objc_msgSend(v3, "mutableCopy");
    v11 = v10;
    if (v9 == 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(v10, "setObject:atIndexedSubscript:", v4, 0);
    }
    else
    {
      objc_msgSend(v10, "removeObjectAtIndex:", v9);
      objc_msgSend(v11, "insertObject:atIndex:", v4, 0);
    }
    v7 = (void *)objc_msgSend(v11, "copy");

  }
  else
  {
    if (v5 >= 2)
    {
      objc_msgSend(v3, "subarrayWithRange:", 1, objc_msgSend(v3, "count") - 1);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_11;
    }
    v7 = 0;
  }
LABEL_14:

  return v7;
}

void _updateItemGroupOwners(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v3);
        -[UIBarButtonItemGroup _items](*(id **)(*((_QWORD *)&v10 + 1) + 8 * v8));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        _updateItemOwners(v9, v4);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

BOOL _UIGetBarNavigationPaletteEnabled()
{
  if (!_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_BarNavigationPaletteEnabled, (uint64_t)CFSTR("BarNavigationPaletteEnabled")))return byte_1ECD76084 != 0;
  if (_IsCalendar_onceToken != -1)
    dispatch_once(&_IsCalendar_onceToken, &__block_literal_global_1633);
  return _IsCalendar_result == 0;
}

void sub_1853B5A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  __destructor_8_s8_s16_s24_s80(&a27);
  _Unwind_Resume(a1);
}

void sub_1853B5BB4(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

id _itemListExcludingOtherItemList(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v5;
  if (!objc_msgSend(v7, "count") || !objc_msgSend(v6, "count"))
  {
    v10 = 0;
    v19 = v7;
    if (!a3)
      goto LABEL_28;
    goto LABEL_24;
  }
  v23 = v7;
  v24 = a3;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v7;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    v11 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v31 != v11)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i);
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        v14 = v6;
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
        if (v15)
        {
          v16 = v15;
          v17 = *(_QWORD *)v27;
          while (2)
          {
            for (j = 0; j != v16; ++j)
            {
              if (*(_QWORD *)v27 != v17)
                objc_enumerationMutation(v14);
              if (v13 == *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * j))
              {
                if (!v10)
                {
                  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                  v10 = (void *)objc_claimAutoreleasedReturnValue();
                }
                objc_msgSend(v10, "addObject:", v13);
                goto LABEL_20;
              }
            }
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
            if (v16)
              continue;
            break;
          }
        }
LABEL_20:

      }
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    }
    while (v9);
  }
  else
  {
    v10 = 0;
  }
  v19 = obj;

  if (objc_msgSend(v10, "count"))
  {
    objc_msgSend(obj, "arrayByExcludingObjectsInArray:", v10);
    v22 = objc_claimAutoreleasedReturnValue();

    v19 = (void *)v22;
  }
  v7 = v23;
  a3 = v24;
  if (v24)
  {
LABEL_24:
    if (v10)
      v20 = v10;
    else
      v20 = (void *)MEMORY[0x1E0C9AA60];
    *a3 = objc_retainAutorelease(v20);
  }
LABEL_28:

  return v19;
}

uint64_t ___shouldCoalesceBackgroundTaskAssertions_block_invoke()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
    _MergedGlobals_1065 = 1;
  return result;
}

id _colorsByThemeKeysecondarySystemGroupedBackgroundColor()
{
  UICachedDeviceRGBColor *v0;
  void *v1;
  UICachedDeviceWhiteColor *v2;
  void *v3;
  UICachedDeviceWhiteColor *v4;
  void *v5;
  UICachedDeviceWhiteColor *v6;
  void *v7;
  UICachedDeviceWhiteColor *v8;
  void *v9;
  void *v11;
  UICachedDeviceRGBColor *v12;
  void *v13;
  UICachedDeviceRGBColor *v14;
  void *v15;
  UICachedDeviceRGBColor *v16;
  void *v17;
  UICachedDeviceWhiteColor *v18;
  void *v19;
  UICachedDeviceWhiteColor *v20;
  void *v21;
  _QWORD v22[10];
  _QWORD v23[12];

  v23[10] = *MEMORY[0x1E0C80C00];
  _UIThemeKeyFromTraitValues(-1, 0, 0, 0, 0, 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = v21;
  v20 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 1.0, 1.0);
  v23[0] = v20;
  _UIThemeKeyFromTraitValues(-1, 0, 1, 0, 0, 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v22[1] = v19;
  v18 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 1.0, 1.0);
  v23[1] = v18;
  _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 0, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v22[2] = v17;
  v16 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.109803922, 0.109803922, 0.117647059, 1.0);
  v23[2] = v16;
  _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 0, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v22[3] = v15;
  v14 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.141176471, 0.141176471, 0.149019608, 1.0);
  v23[3] = v14;
  _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 1, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v22[4] = v13;
  v12 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.17254902, 0.17254902, 0.180392157, 1.0);
  v23[4] = v12;
  _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 1, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v22[5] = v11;
  v0 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.211764706, 0.211764706, 0.219607843, 1.0);
  v23[5] = v0;
  _UIThemeKeyFromTraitValues(4, 2, 0, 0, 0, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v22[6] = v1;
  v2 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 0.0, 1.0);
  v23[6] = v2;
  _UIThemeKeyFromTraitValues(4, 2, 1, 0, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v22[7] = v3;
  v4 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 0.0, 1.0);
  v23[7] = v4;
  _UIThemeKeyFromTraitValues(4, 1, 0, 0, 0, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v22[8] = v5;
  v6 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 1.0, 1.0);
  v23[8] = v6;
  _UIThemeKeyFromTraitValues(4, 1, 1, 0, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v22[9] = v7;
  v8 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 1.0, 1.0);
  v23[9] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 10);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id _colorsByThemeKeysystemGroupedBackgroundColor()
{
  UICachedDeviceWhiteColor *v0;
  void *v1;
  UICachedDeviceRGBColor *v2;
  void *v3;
  UICachedDeviceRGBColor *v4;
  void *v5;
  UICachedDeviceWhiteColor *v6;
  void *v7;
  UICachedDeviceWhiteColor *v8;
  void *v9;
  void *v11;
  UICachedDeviceWhiteColor *v12;
  void *v13;
  UICachedDeviceRGBColor *v14;
  void *v15;
  UICachedDeviceRGBColor *v16;
  void *v17;
  _QWORD v18[8];
  _QWORD v19[10];

  v19[8] = *MEMORY[0x1E0C80C00];
  _UIThemeKeyFromTraitValues(-1, 0, 0, 0, 0, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v17;
  v16 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.949019608, 0.949019608, 0.968627451, 1.0);
  v19[0] = v16;
  _UIThemeKeyFromTraitValues(-1, 0, 1, 0, 0, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = v15;
  v14 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.921568627, 0.921568627, 0.941176471, 1.0);
  v19[1] = v14;
  _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 0, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v18[2] = v13;
  v12 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 0.0, 1.0);
  v19[2] = v12;
  _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 0, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v18[3] = v11;
  v0 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 0.0, 1.0);
  v19[3] = v0;
  _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 1, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v18[4] = v1;
  v2 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.109803922, 0.109803922, 0.117647059, 1.0);
  v19[4] = v2;
  _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v18[5] = v3;
  v4 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.141176471, 0.141176471, 0.149019608, 1.0);
  v19[5] = v4;
  _UIThemeKeyFromTraitValues(4, 1, 0, 0, 0, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v18[6] = v5;
  v6 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 1.0, 1.0);
  v19[6] = v6;
  _UIThemeKeyFromTraitValues(4, 1, 1, 0, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v18[7] = v7;
  v8 = -[UIDeviceWhiteColor initWithWhite:alpha:]([UICachedDeviceWhiteColor alloc], "initWithWhite:alpha:", 1.0, 1.0);
  v19[7] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id _colorsByThemeKeyseparatorColor()
{
  void *v0;
  UICachedDeviceRGBColor *v1;
  void *v2;
  UICachedDeviceRGBColor *v3;
  void *v4;
  UICachedDeviceRGBColor *v5;
  void *v6;
  UICachedDeviceRGBColor *v7;
  void *v8;
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  _UIThemeKeyFromTraitValues(-1, 0, 0, 0, 0, 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v0;
  v1 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.235294118, 0.235294118, 0.262745098, 0.29);
  v11[0] = v1;
  _UIThemeKeyFromTraitValues(-1, 0, 1, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v2;
  v3 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.235294118, 0.235294118, 0.262745098, 0.37);
  v11[1] = v3;
  _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 0, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10[2] = v4;
  v5 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.329411765, 0.329411765, 0.345098039, 0.6);
  v11[2] = v5;
  _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 0, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[3] = v6;
  v7 = -[UIDeviceRGBColor initWithRed:green:blue:alpha:]([UICachedDeviceRGBColor alloc], "initWithRed:green:blue:alpha:", 0.329411765, 0.329411765, 0.345098039, 0.68);
  v11[3] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

uint64_t _UIThemeKeyFromTraitValues(char a1, uint64_t a2, int a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = 2;
  if (a2 != 1000)
    v6 = a2;
  v7 = 64;
  if (!a3)
    v7 = 0;
  v8 = (unint64_t)(a5 & 1) << 8;
  if (v6 != 2)
    v8 = 0;
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v7 & 0xFFFFFFFFFFFFFFC0 | (4 * a1 + 4) & 0x3C | v6 & 3 | ((unint64_t)(a4 == 1) << 7) | v8 | ((unint64_t)(a6 == 1) << 9));
}

UITraitCollection *_UITraitCollectionFromThemeKey(void *a1)
{
  int has_internal_diagnostics;
  char isKindOfClass;
  unint64_t v4;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  _QWORD v9[7];
  BOOL v10;
  BOOL v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (has_internal_diagnostics)
  {
    if ((isKindOfClass & 1) == 0)
    {
      v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v13 = a1;
        _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Unsupported themeKey: %@", buf, 0xCu);
      }
    }
  }
  else if ((isKindOfClass & 1) == 0)
  {
    v7 = _UITraitCollectionFromThemeKey___s_category;
    if (!_UITraitCollectionFromThemeKey___s_category)
    {
      v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&_UITraitCollectionFromThemeKey___s_category);
    }
    v8 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v13 = a1;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Unsupported themeKey: %@", buf, 0xCu);
    }
  }
  v4 = objc_msgSend(a1, "unsignedIntegerValue");
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___UITraitCollectionFromThemeKey_block_invoke;
  v9[3] = &__block_descriptor_58_e27_v16__0___UIMutableTraits__8l;
  v9[4] = v4 & 3;
  v9[5] = ((v4 >> 2) & 0xF) - 1;
  v10 = (v4 & 0x40) != 0;
  v11 = (v4 & 0x80) != 0;
  v9[6] = (v4 >> 8) & 1;
  return +[UITraitCollection traitCollectionWithTraits:](UITraitCollection, "traitCollectionWithTraits:", v9);
}

uint64_t _UIThemeKeyLeastSpecific()
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 0);
}

void __UIRunLoopObserverTrampoline(__CFRunLoopObserver *a1, int a2, void *aBlock)
{
  __CFRunLoop *Current;
  void (**v6)(void);

  v6 = (void (**)(void))_Block_copy(aBlock);
  v6[2]();
  CFRelease(aBlock);
  Current = CFRunLoopGetCurrent();
  CFRunLoopRemoveObserver(Current, a1, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);

}

void sub_1853C0634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

void _UIApplicationEndLaunchBackgroundTask()
{
  os_unfair_lock_lock((os_unfair_lock_t)&_launchBackgroundTaskLock);
  _launchBackgroundTaskPeriodOver = 1;
  if (_launchBackgroundTaskIdentifier)
  {
    _UIApplicationEndBackgroundTask((const void *)_launchBackgroundTaskIdentifier);
    _launchBackgroundTaskIdentifier = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_launchBackgroundTaskLock);
}

void GetProcStatistics(uint64_t a1, int32x4_t *a2)
{
  integer_t *v4;
  task_name_t v5;
  unint64_t i;
  integer_t v7;
  integer_t v8;
  int v9;
  int v10;
  integer_t v11;
  integer_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int32x4_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _QWORD block[5];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  mach_msg_type_number_t act_listCnt;
  thread_act_array_t act_list;
  integer_t thread_info_out[4];
  __int128 v37;
  uint64_t v38;
  mach_msg_type_number_t task_info_outCnt;

  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v4 = (integer_t *)(a1 + 32);
  v5 = task_self_trap();
  task_info_outCnt = 8;
  task_info(v5, 6u, v4, &task_info_outCnt);
  task_info_outCnt = 8;
  task_info(v5, 2u, (task_info_t)a1, &task_info_outCnt);
  v38 = 0;
  *(_OWORD *)thread_info_out = 0u;
  v37 = 0u;
  act_list = 0;
  act_listCnt = 0;
  if (task_threads(v5, &act_list, &act_listCnt))
    NSLog(CFSTR("Error returned by task_threads"));
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
  {
    *((_DWORD *)v31 + 6) = MEMORY[0x186DC9268]();
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __GetProcStatistics_block_invoke;
    block[3] = &unk_1E16B14C0;
    block[4] = &v30;
    dispatch_sync(MEMORY[0x1E0C80D38], block);
  }
  if (act_listCnt)
  {
    for (i = 0; i < act_listCnt; ++i)
    {
      task_info_outCnt = 10;
      if (!thread_info(act_list[i], 3u, thread_info_out, &task_info_outCnt))
      {
        v8 = thread_info_out[0];
        v7 = thread_info_out[1];
        v9 = *(_DWORD *)(a1 + 56) + thread_info_out[1];
        v10 = *(_DWORD *)(a1 + 52) + thread_info_out[0];
        *(_DWORD *)(a1 + 52) = v10;
        *(_DWORD *)(a1 + 56) = v9;
        if (v9 > 999999)
        {
          *(_DWORD *)(a1 + 52) = v10 + 1;
          *(_DWORD *)(a1 + 56) = v9 - 1000000;
        }
        v12 = thread_info_out[2];
        v11 = thread_info_out[3];
        v13 = *(_DWORD *)(a1 + 64) + thread_info_out[3];
        v14 = *(_DWORD *)(a1 + 60) + thread_info_out[2];
        *(_DWORD *)(a1 + 60) = v14;
        *(_DWORD *)(a1 + 64) = v13;
        if (v13 > 999999)
        {
          *(_DWORD *)(a1 + 60) = v14 + 1;
          *(_DWORD *)(a1 + 64) = v13 - 1000000;
        }
        if (act_list[i] == *((_DWORD *)v31 + 6))
        {
          v15 = *(_DWORD *)(a1 + 76) + v7;
          v16 = *(_DWORD *)(a1 + 72) + v8;
          *(_DWORD *)(a1 + 72) = v16;
          *(_DWORD *)(a1 + 76) = v15;
          if (v15 > 999999)
          {
            *(_DWORD *)(a1 + 72) = v16 + 1;
            *(_DWORD *)(a1 + 76) = v15 - 1000000;
          }
          v17 = *(_DWORD *)(a1 + 84) + v11;
          v18 = *(_DWORD *)(a1 + 80) + v12;
          *(_DWORD *)(a1 + 80) = v18;
          *(_DWORD *)(a1 + 84) = v17;
          if (v17 > 999999)
          {
            *(_DWORD *)(a1 + 80) = v18 + 1;
            *(_DWORD *)(a1 + 84) = v17 - 1000000;
          }
        }
      }
    }
    v19 = 8 * act_listCnt;
  }
  else
  {
    v19 = 0;
  }
  if (MEMORY[0x186DCA408](*MEMORY[0x1E0C83DA0], act_list, v19))
    NSLog(CFSTR("Error returned by vm_deallocate"));
  if (a2)
  {
    v20 = vsubq_s32(*(int32x4_t *)(a1 + 16), a2[1]);
    *(int32x4_t *)a1 = vsubq_s32(*(int32x4_t *)a1, *a2);
    *(int32x4_t *)(a1 + 16) = v20;
    v21 = *(_DWORD *)(a1 + 52);
    v22 = *(_DWORD *)(a1 + 56) - a2[3].i32[2];
    *(_DWORD *)(a1 + 56) = v22;
    if (v22 < 0)
    {
      *(_DWORD *)(a1 + 52) = --v21;
      *(_DWORD *)(a1 + 56) = v22 + 1000000;
    }
    *(_DWORD *)(a1 + 52) = v21 - a2[3].i32[1];
    v23 = *(_DWORD *)(a1 + 60);
    v24 = *(_DWORD *)(a1 + 64) - a2[4].i32[0];
    *(_DWORD *)(a1 + 64) = v24;
    if (v24 < 0)
    {
      *(_DWORD *)(a1 + 60) = --v23;
      *(_DWORD *)(a1 + 64) = v24 + 1000000;
    }
    *(_DWORD *)(a1 + 60) = v23 - a2[3].i32[3];
    v25 = *(_DWORD *)(a1 + 72);
    v26 = *(_DWORD *)(a1 + 76) - a2[4].i32[3];
    *(_DWORD *)(a1 + 76) = v26;
    if (v26 < 0)
    {
      *(_DWORD *)(a1 + 72) = --v25;
      *(_DWORD *)(a1 + 76) = v26 + 1000000;
    }
    *(_DWORD *)(a1 + 72) = v25 - a2[4].i32[2];
    v27 = *(_DWORD *)(a1 + 80);
    v28 = *(_DWORD *)(a1 + 84) - a2[5].i32[1];
    *(_DWORD *)(a1 + 84) = v28;
    if (v28 < 0)
    {
      *(_DWORD *)(a1 + 80) = --v27;
      *(_DWORD *)(a1 + 84) = v28 + 1000000;
    }
    *(_DWORD *)(a1 + 80) = v27 - a2[5].i32[0];
  }
  _Block_object_dispose(&v30, 8);
}

void sub_1853C20E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _pptLogHandle()
{
  if (qword_1ECD81A60 != -1)
    dispatch_once(&qword_1ECD81A60, &__block_literal_global_447);
  return (id)qword_1ECD81A58;
}

char *createBuffer(void *a1, size_t a2)
{
  const char *v3;
  size_t v4;
  char *v5;

  v3 = (const char *)objc_msgSend(objc_retainAutorelease(a1), "UTF8String");
  v4 = strlen(v3);
  v5 = (char *)malloc_type_calloc(a2, 1uLL, 0xD13336A4uLL);
  return strncpy(v5, v3, v4);
}

void sub_1853C3CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1853C6E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a50, 8);
  _Unwind_Resume(a1);
}

void _setTagForView(void *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  void *v5;
  char *object;

  v3 = a1;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 124);
    object = v3;
    if (a2)
    {
      *(_QWORD *)(v3 + 124) = v4 | 8;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_setAssociatedObject(object, &_UIViewTagAssocObjectKey, v5, (void *)1);

    }
    else
    {
      *(_QWORD *)(v3 + 124) = v4 & 0xFFFFFFFFFFFFFFF7;
      objc_setAssociatedObject(v3, &_UIViewTagAssocObjectKey, 0, (void *)1);
    }
    v3 = object;
  }

}

CFMutableDictionaryRef CFDictionaryCreateWithNonRetainedValuesFromNSDictionary(void *a1)
{
  CFIndex v2;
  CFMutableDictionaryRef v3;
  CFDictionaryValueCallBacks v5;

  if (!objc_msgSend(a1, "count"))
    return (CFMutableDictionaryRef)(id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
  v2 = objc_msgSend(a1, "count", 0, 0, 0, unk_1E16E7FE8, 0x182A98E6CLL);
  v3 = CFDictionaryCreateMutable(0, v2, MEMORY[0x1E0C9B390], &v5);
  -[__CFDictionary setValuesForKeysWithDictionary:](v3, "setValuesForKeysWithDictionary:", a1);
  return v3;
}

id UIResourceBundleForNIBBeingDecodedWithCoder(void *a1)
{
  id v1;
  const __CFDictionary *v2;
  void *v3;

  v1 = a1;
  v2 = UICoderToBundleMap();
  CFDictionaryGetValue(v2, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t _trackObjectWithIdentifier(uint64_t result)
{
  uint64_t v1;
  id v2;

  if (byte_1ECD80161 == 1)
  {
    v1 = result;
    v2 = (id)qword_1ECD80180;
    if (!qword_1ECD80180)
    {
      v2 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      qword_1ECD80180 = (uint64_t)v2;
    }
    return objc_msgSend(v2, "addObject:", v1);
  }
  return result;
}

CGAffineTransform *_UIScaleTransformForAspectFitOrFillOfSizeInTargetSize@<X0>(CGAffineTransform *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  __int128 v7;
  double v8;
  double v9;
  double v10;

  v6 = MEMORY[0x1E0C9BAA8];
  v7 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a2 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v6 + 32);
  if (a3 > 0.0 && a4 > 0.0)
  {
    v8 = fmax(a5, 0.1) / a3;
    v9 = fmax(a6, 0.1) / a4;
    if (v8 >= v9)
      v10 = v9;
    else
      v10 = v8;
    if (v8 <= v9)
      v8 = v9;
    if ((_DWORD)result)
      v8 = v10;
    return CGAffineTransformMakeScale((CGAffineTransform *)a2, v8, v8);
  }
  return result;
}

void sub_1853CEC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1853CF08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void SpringBoardServicesLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
    SpringBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("UIApplicationShortcutItem.m"), 18, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void *SpringBoardServicesLibrary_0()
{
  void *v0;
  void *v2;
  void *v3;

  if (!SpringBoardServicesLibraryCore_frameworkLibrary_0)
    SpringBoardServicesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  v0 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIKeyboardInputModeController.m"), 101, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void *SpringBoardServicesLibrary_1()
{
  void *v0;
  void *v2;
  void *v3;

  if (!SpringBoardServicesLibraryCore_frameworkLibrary_1)
    SpringBoardServicesLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  v0 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_1;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIApplication.m"), 479, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void *SpringBoardServicesLibrary_2()
{
  void *v0;
  void *v2;
  void *v3;

  if (!SpringBoardServicesLibraryCore_frameworkLibrary_2)
    SpringBoardServicesLibraryCore_frameworkLibrary_2 = _sl_dlopen();
  v0 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_2;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIAlertView_ViewServiceSupport.m"), 27, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void *SpringBoardServicesLibrary_3()
{
  void *v0;
  void *v2;
  void *v3;

  if (!SpringBoardServicesLibraryCore_frameworkLibrary_3)
    SpringBoardServicesLibraryCore_frameworkLibrary_3 = _sl_dlopen();
  v0 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_3;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("UIWebClip.m"), 45, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id UICollectionLayoutListConfiguration.headerMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_headerMode);
  if ((unint64_t)result >= 3)
  {
    result = (id)sub_186507E04();
    __break(1u);
  }
  else
  {
    *a1 = (_BYTE)result;
  }
  return result;
}

id LSApplicationProxyForSettingCurrentApplicationIcon()
{
  void *v0;
  int v1;
  void *v2;
  id v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "allowsAlternateIcons");

  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyForCurrentProcess");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v3 = v2;
      if (objc_msgSend(v3, "supportsAlternateIconNames"))
        v4 = v3;
      else
        v4 = 0;

    }
    else
    {
      v4 = 0;
    }

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t ___isVerboseLoggingForStrictRepeatedPushAssertionEnabled_block_invoke()
{
  uint64_t result;

  result = _resolvedPrefValue(CFSTR("UINavigationControllerEnableVerboseLoggingForStrictRepeatedPushAssertion"));
  byte_1EDDB0E54 = result;
  return result;
}

void ___overrideUISplitViewControllerToCompact_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("UIOverrideUISplitViewControllerInTabToCompact"));
  v3 = (id)objc_claimAutoreleasedReturnValue();

  v1 = v3;
  if (v3
    || (_UIKitPreferencesOnce(),
        v2 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v2, "objectForKey:", CFSTR("UIOverrideUISplitViewControllerInTabToCompact")),
        v4 = (id)objc_claimAutoreleasedReturnValue(),
        v2,
        (v1 = v4) != 0))
  {
    v5 = v1;
    _overrideUISplitViewControllerToCompact_override = objc_msgSend(v1, "BOOLValue");

  }
  else if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    _overrideUISplitViewControllerToCompact_override = 0;
  }
}

void ___scrollViewConvertSafeAreaToContentInset_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;

  _UIKitPreferencesOnce();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("UIScrollViewForceConvertSafeAreaToContentInsetPreference"));
  v3 = (id)objc_claimAutoreleasedReturnValue();

  v1 = v3;
  if (v3
    || (objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"),
        v2 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v2, "objectForKey:", CFSTR("UIScrollViewForceConvertSafeAreaToContentInsetPreference")),
        v4 = (id)objc_claimAutoreleasedReturnValue(),
        v2,
        (v1 = v4) != 0))
  {
    v5 = v1;
    _scrollViewConvertSafeAreaToContentInset_convert = objc_msgSend(v1, "BOOLValue");

  }
  else if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    _scrollViewConvertSafeAreaToContentInset_convert = 0;
  }
}

BOOL _UIGetUIViewLayoutFeedbackLoopDebuggingEnabled()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_UIViewLayoutFeedbackLoopDebuggingEnabled,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_UIViewLayoutFeedbackLoopDebuggingEnabled))
  {
    v1 = 0;
  }
  else
  {
    do
    {
      v1 = v0 < v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_UIViewLayoutFeedbackLoopDebuggingEnabled, (uint64_t)CFSTR("UIViewLayoutFeedbackLoopDebuggingEnabled"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_UIViewLayoutFeedbackLoopDebuggingEnabled;
    }
    while (v0 != _UIInternalPreference_UIViewLayoutFeedbackLoopDebuggingEnabled);
  }
  return byte_1ECD76B44 && v1;
}

uint64_t ___traitCollectionChangeLoggingMode_block_invoke()
{
  uint64_t result;
  uint64_t v1;

  result = _UIInternalPreferenceUsesDefault_2((int *)&_UIInternalPreference_TraitCollectionChangeLoggingEnabled, (uint64_t)CFSTR("TraitCollectionChangeLoggingEnabled"));
  v1 = qword_1ECD76610;
  if ((_DWORD)result)
    v1 = 0;
  qword_1ECD7E7C0 = v1;
  if (!v1)
  {
    result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("UITraitCollectionChangeLoggingEnabled"));
    if ((_DWORD)result)
      qword_1ECD7E7C0 = 1;
  }
  return result;
}

void _UIApplicationStartLaunchBackgroundTask()
{
  _QWORD *v0;
  dispatch_time_t v1;
  NSObject *v2;
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  os_unfair_lock_lock((os_unfair_lock_t)&_launchBackgroundTaskLock);
  if ((_launchBackgroundTaskPeriodOver & 1) == 0)
  {
    v0 = _doAddBackgroundTask(CFSTR("Launch Background Task for Coalescing"), 0, 0);
    if (v0)
    {
      _launchBackgroundTaskIdentifier = v0[1];
      if (_launchBackgroundTaskIdentifier)
      {
        v1 = dispatch_time(0, 1000000000);
        dispatch_get_current_queue();
        v2 = objc_claimAutoreleasedReturnValue();
        dispatch_after(v1, v2, &__block_literal_global_70);

        goto LABEL_11;
      }
    }
    else
    {
      _launchBackgroundTaskIdentifier = 0;
    }
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpectedly failed to create Launch Background Task.", buf, 2u);
      }

    }
    else
    {
      v3 = _UIApplicationStartLaunchBackgroundTask___s_category;
      if (!_UIApplicationStartLaunchBackgroundTask___s_category)
      {
        v3 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v3, (unint64_t *)&_UIApplicationStartLaunchBackgroundTask___s_category);
      }
      v4 = *(NSObject **)(v3 + 8);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "Unexpectedly failed to create Launch Background Task.", v6, 2u);
      }
    }
  }
LABEL_11:
  os_unfair_lock_unlock((os_unfair_lock_t)&_launchBackgroundTaskLock);
}

uint64_t _resolvedPrefValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3
    || (_UIKitPreferencesOnce(),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v4, "objectForKey:", v1),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4,
        v3))
  {
    v5 = objc_msgSend(v3, "BOOLValue");

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t _resolvedPrefValue_0(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  NSObject *v8;
  const __CFString *v9;
  int v11;
  id v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5
    || (_UIKitPreferencesOnce(),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v6, "objectForKey:", v3),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6,
        v5))
  {
    a2 = objc_msgSend(v5, "BOOLValue");

  }
  if (_UIGetUISplitViewControllerChamoisResizeLogging())
  {
    v7 = _resolvedPrefValue___s_category;
    if (!_resolvedPrefValue___s_category)
    {
      v7 = __UILogCategoryGetNode("ChamoisResize", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&_resolvedPrefValue___s_category);
    }
    v8 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = CFSTR("OFF");
      if ((_DWORD)a2)
        v9 = CFSTR("ON");
      v11 = 138412546;
      v12 = v3;
      v13 = 2112;
      v14 = v9;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "%@ is %@", (uint8_t *)&v11, 0x16u);
    }
  }

  return a2;
}

id _UIKitPreferencesOnce()
{
  if (qword_1ECD81E68 != -1)
    dispatch_once(&qword_1ECD81E68, &__block_literal_global_3_20);
  return (id)qword_1ECD81E60;
}

id tailComponentOfName(void *a1)
{
  id v1;
  void *v2;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(v1, "substringFromIndex:", objc_msgSend(v1, "rangeOfString:options:", CFSTR("_"), 4) + 1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

BOOL _UIGetUISplitViewControllerChamoisResizeLogging()
{
  int v0;
  _BOOL4 v1;
  int v3;

  if (_UIInternalPreferencesRevisionOnce != -1)
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_4_20);
  v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (v3 = _UIInternalPreference_UISplitViewControllerChamoisResizeLogging,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_UISplitViewControllerChamoisResizeLogging))
  {
    v1 = 0;
  }
  else
  {
    do
    {
      v1 = v0 < v3;
      if (v0 < v3)
        break;
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_UISplitViewControllerChamoisResizeLogging, (uint64_t)CFSTR("UISplitViewControllerChamoisResizeLogging"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      v3 = _UIInternalPreference_UISplitViewControllerChamoisResizeLogging;
    }
    while (v0 != _UIInternalPreference_UISplitViewControllerChamoisResizeLogging);
  }
  return byte_1ECD760A4 && v1;
}

uint64_t _UIWhitePointAdaptivityStyleFromString(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;

  v1 = a1;
  v2 = objc_msgSend(CFSTR("_UIWhitePointAdaptivityStyleStandard"), "length");
  v3 = v2 - 1;
  if (v2 == 1)
  {

  }
  else
  {
    if (objc_msgSend(v1, "isEqualToString:", CFSTR("_UIWhitePointAdaptivityStyleStandard")))
    {

LABEL_6:
      v6 = 0;
      goto LABEL_34;
    }
    objc_msgSend(CFSTR("_UIWhitePointAdaptivityStyleStandard"), "substringWithRange:", 1, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "isEqualToString:", v4);

    if ((v5 & 1) != 0)
      goto LABEL_6;
  }
  v7 = v1;
  v8 = objc_msgSend(CFSTR("_UIWhitePointAdaptivityStyleReading"), "length");
  v9 = v8 - 1;
  if (v8 == 1)
  {

  }
  else
  {
    if (objc_msgSend(v7, "isEqualToString:", CFSTR("_UIWhitePointAdaptivityStyleReading")))
    {

LABEL_12:
      v6 = 1;
      goto LABEL_34;
    }
    objc_msgSend(CFSTR("_UIWhitePointAdaptivityStyleReading"), "substringWithRange:", 1, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v7, "isEqualToString:", v10);

    if ((v11 & 1) != 0)
      goto LABEL_12;
  }
  v12 = v7;
  v13 = objc_msgSend(CFSTR("_UIWhitePointAdaptivityStylePhoto"), "length");
  v14 = v13 - 1;
  if (v13 == 1)
  {

  }
  else
  {
    if (objc_msgSend(v12, "isEqualToString:", CFSTR("_UIWhitePointAdaptivityStylePhoto")))
    {

LABEL_18:
      v6 = 2;
      goto LABEL_34;
    }
    objc_msgSend(CFSTR("_UIWhitePointAdaptivityStylePhoto"), "substringWithRange:", 1, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v12, "isEqualToString:", v15);

    if ((v16 & 1) != 0)
      goto LABEL_18;
  }
  v17 = v12;
  v18 = objc_msgSend(CFSTR("_UIWhitePointAdaptivityStyleVideo"), "length");
  v19 = v18 - 1;
  if (v18 == 1)
  {

  }
  else
  {
    if (objc_msgSend(v17, "isEqualToString:", CFSTR("_UIWhitePointAdaptivityStyleVideo")))
    {

LABEL_24:
      v6 = 3;
      goto LABEL_34;
    }
    objc_msgSend(CFSTR("_UIWhitePointAdaptivityStyleVideo"), "substringWithRange:", 1, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v17, "isEqualToString:", v20);

    if ((v21 & 1) != 0)
      goto LABEL_24;
  }
  v22 = v17;
  v23 = objc_msgSend(CFSTR("_UIWhitePointAdaptivityStyleGame"), "length");
  v24 = v23 - 1;
  if (v23 == 1)
  {

  }
  else
  {
    if (objc_msgSend(v22, "isEqualToString:", CFSTR("_UIWhitePointAdaptivityStyleGame")))
    {

LABEL_30:
      v6 = 4;
      goto LABEL_34;
    }
    objc_msgSend(CFSTR("_UIWhitePointAdaptivityStyleGame"), "substringWithRange:", 1, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v22, "isEqualToString:", v25);

    if ((v26 & 1) != 0)
      goto LABEL_30;
  }
  if (objc_msgSend(v22, "isEqualToString:", CFSTR("_UIWhitePointAdaptivityStyleOff")))
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v6 = 0;
LABEL_34:

  return v6;
}

void sub_1853D5F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id BarButtonItemTitleForSystemItem(uint64_t a1)
{
  void *v2;
  __CFString *v3;

  v2 = 0;
  switch(a1)
  {
    case 0:
      v3 = CFSTR("Done");
      goto LABEL_33;
    case 1:
      v3 = CFSTR("Cancel");
      goto LABEL_33;
    case 2:
      v3 = CFSTR("Edit");
      goto LABEL_33;
    case 3:
      v3 = CFSTR("Save");
      goto LABEL_33;
    case 4:
      v3 = CFSTR("Add");
      goto LABEL_33;
    case 5:
    case 6:
    case 23:
      return v2;
    case 7:
      v3 = CFSTR("Compose");
      goto LABEL_33;
    case 8:
      v3 = CFSTR("Reply");
      goto LABEL_33;
    case 9:
      v3 = CFSTR("Action");
      goto LABEL_33;
    case 10:
      v3 = CFSTR("Organize");
      goto LABEL_33;
    case 11:
      v3 = CFSTR("Bookmarks");
      goto LABEL_33;
    case 12:
      v3 = CFSTR("Search");
      goto LABEL_33;
    case 13:
      v3 = CFSTR("Refresh");
      goto LABEL_33;
    case 14:
      v3 = CFSTR("Stop");
      goto LABEL_33;
    case 15:
      v3 = CFSTR("Camera");
      goto LABEL_33;
    case 16:
      v3 = CFSTR("Trash");
      goto LABEL_33;
    case 17:
      v3 = CFSTR("Play");
      goto LABEL_33;
    case 18:
      v3 = CFSTR("Pause");
      goto LABEL_33;
    case 19:
      v3 = CFSTR("Rewind");
      goto LABEL_33;
    case 20:
      v3 = CFSTR("Fast Forward");
      goto LABEL_33;
    case 21:
      v3 = CFSTR("Undo");
      goto LABEL_33;
    case 22:
      v3 = CFSTR("Redo");
      goto LABEL_33;
    case 24:
      v3 = CFSTR("Close");
LABEL_33:
      _UINSLocalizedStringWithDefaultValue(v3, v3);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      switch(a1)
      {
        case 'd':
          v3 = CFSTR("Locate");
          goto LABEL_33;
        case 'e':
          v3 = CFSTR("Back");
          goto LABEL_33;
        case 'f':
          v3 = CFSTR("Forward");
          goto LABEL_33;
        case 'g':
          v3 = CFSTR("Up");
          goto LABEL_33;
        case 'h':
          v3 = CFSTR("Down");
          goto LABEL_33;
        case 'i':
          v3 = CFSTR("Left");
          goto LABEL_33;
        case 'j':
          v3 = CFSTR("Right");
          goto LABEL_33;
        case 'o':
          v3 = CFSTR("AirPlay");
          goto LABEL_33;
        default:
          return v2;
      }
  }
  return v2;
}

void sub_1853D977C()
{
  type metadata accessor for NSDiffableDataSourceSnapshot();
}

void sub_1853D97DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  _QWORD v34[16];

  v30 = *(void **)(v26 + 16);
  if (v28)
  {
    v34[4] = v28;
    v34[5] = v27;
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 1107296256;
    v34[2] = sub_18530A69C;
    v34[3] = v29;
    v31 = _Block_copy(v34);
    v32 = v30;
    sub_18518D708(v28);
    swift_release();
  }
  else
  {
    v33 = v30;
    v31 = 0;
  }
  objc_msgSend(v25, sel_applyDifferencesFromSnapshot_animatingDifferences_completion_, v30, v24 & 1, v31);
  _Block_release(v31);

}

void type metadata accessor for NSDiffableDataSourceSnapshot()
{
  JUMPOUT(0x186DC9E8CLL);
}

void sub_1853DA8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{

  _Unwind_Resume(a1);
}

__CFString *UIKBShiftKeyStringForActiveInputMode(void *a1)
{
  id v1;
  int v2;
  uint64_t v3;
  __CFString *v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "displayTypeHint");
  switch(v2)
  {
    case 2:
      UIKeyboardGetNumbersStringForActiveInputMode();
      v3 = objc_claimAutoreleasedReturnValue();
      break;
    case 3:
      v4 = CFSTR("#+=");
      goto LABEL_9;
    case 7:
      objc_msgSend(v1, "displayString");
      v3 = objc_claimAutoreleasedReturnValue();
      break;
    default:
      v4 = 0;
      goto LABEL_9;
  }
  v4 = (__CFString *)v3;
LABEL_9:

  return v4;
}

void sub_1853DEF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1853E437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

void _UINormalizeRectForPositiveOrigin(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRect v8;
  CGRect v9;
  CGRect v10;

  CGRectGetMinX(*(CGRect *)&a1);
  v8.origin.x = a1;
  v8.origin.y = a2;
  v8.size.width = a3;
  v8.size.height = a4;
  CGRectGetMinY(v8);
  v9.origin.x = a1;
  v9.origin.y = a2;
  v9.size.width = a3;
  v9.size.height = a4;
  CGRectGetWidth(v9);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetHeight(v10);
}

void sub_1853E61E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void setEnvironmentMatchingCornerRadius(void *a1, void *a2, uint64_t a3, double a4, double a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v9 = a1;
  v10 = a2;
  if (a4 == 1.79769313e308)
  {
    objc_msgSend(v9, "layer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setCornerRadius:", a5);

    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __setEnvironmentMatchingCornerRadius_block_invoke;
    v13[3] = &unk_1E16C4F78;
    v14 = v10;
    v16 = a3;
    v17 = 0x7FEFFFFFFFFFFFFFLL;
    v15 = v9;
    +[UIView _addOrPerformCompletion:](UIView, "_addOrPerformCompletion:", v13);

  }
  else
  {
    objc_msgSend(v9, "setClipsToBounds:", 1);
    objc_msgSend(v9, "layer");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setCornerRadius:", a4);

  }
}

uint64_t __setEnvironmentMatchingCornerRadius_block_invoke(uint64_t result)
{
  double v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = **(double **)(result + 48);
    if (v1 == *(double *)(result + 56))
      return objc_msgSend(*(id *)(result + 40), "setClipsToBounds:", 0, v1);
  }
  return result;
}

void sub_1853EAD30(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 112));
  objc_destroyWeak((id *)(v4 - 104));
  objc_destroyWeak((id *)(v4 - 96));
  _Unwind_Resume(a1);
}

void sub_1853EB7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *a15, uint64_t a16, uint64_t a17, uint64_t a18, id *location, uint64_t a20,uint64_t a21,uint64_t a22,id *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  id *v42;

  objc_destroyWeak(v42);
  objc_destroyWeak(location);
  objc_destroyWeak(a23);
  _Unwind_Resume(a1);
}

id _sessionsAvailableForAddingItems()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_opt_new();
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  +[_UIDragSessionImpl activeSessions](_UIDragSessionImpl, "activeSessions", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v6, "_canAddItems"))
          objc_msgSend(v0, "addObject:", v6);
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }

  return v0;
}

void sub_1853EDB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UISceneSystemShellManagesKeyboardFocusForScene(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;

  if (pthread_main_np() != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _UISceneSystemShellManagesKeyboardFocusForScene(UIScene *__unsafe_unretained _Nonnull)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("UIScene.m"), 255, CFSTR("Call must be made on main thread"));

  }
  if (!_UISceneSystemShellManagesKeyboardFocusIsPossibleForScene(a1))
    return 0;
  v2 = a1;
  v3 = _UISceneEffectiveIdiomOfSceneForSystemShellManagesKeyboardFocus(v2);
  if (v3 == -1)
    v4 = objc_msgSend(v2, "_isTargetOfKeyboardEventDeferringEnvironment");
  else
    v4 = ((1 << v3) & (unint64_t)~_systemShellManagesKeyboardFocusIdiomMask) == 0;

  return v4;
}

uint64_t _UISceneEffectiveIdiomOfSceneForSystemShellManagesKeyboardFocus(void *a1)
{
  void *v2;
  uint64_t v3;
  void *v5;
  void *v6;

  if (pthread_main_np() != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIUserInterfaceIdiom _UISceneEffectiveIdiomOfSceneForSystemShellManagesKeyboardFocus(UIScene *__unsafe_unretained)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("UIScene.m"), 207, CFSTR("Call must be made on main thread"));

  }
  if (!objc_msgSend(a1, "_hostsWindows"))
    return -1;
  objc_msgSend(a1, "_screen");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "_userInterfaceIdiom");

  if (v3 >= 10)
    return 10;
  else
    return v3;
}

void sub_1853EE83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  _Block_object_dispose(&a54, 8);
  _Unwind_Resume(a1);
}

void sub_1853EF05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_1853EF1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

_UIKeyWindowSceneObserver *_UIKeyWindowSceneObserverForScene(void *a1)
{
  _UIKeyWindowSceneObserver *v2;
  void *v4;
  void *v5;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_UIKeyWindowSceneObserver * _Nonnull _UIKeyWindowSceneObserverForScene(UIWindowScene * _Nonnull const __strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIKeyWindowSceneObserver.m"), 91, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("windowScene"));

  }
  objc_msgSend(a1, "_sceneComponentForKey:", _UIKeyWindowSceneObserverComponentKey);
  v2 = (_UIKeyWindowSceneObserver *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    v2 = -[_UIKeyWindowSceneObserver initWithScene:]([_UIKeyWindowSceneObserver alloc], "initWithScene:", a1);
    objc_msgSend(a1, "_registerSceneComponent:forKey:", v2, _UIKeyWindowSceneObserverComponentKey);
  }
  return v2;
}

void sub_1853EF670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _UIApplicationMayVendViews()
{
  if (qword_1EDDC80E0 != -1)
    dispatch_once(&qword_1EDDC80E0, &__block_literal_global_911);
  return byte_1EDDC7FFC;
}

const __CFString *_NSStringFromUIUserInterfaceIdiom(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 0xB)
    return CFSTR("UIUserInterfaceIdiomMac");
  else
    return off_1E16CBBB8[a1 + 1];
}

const __CFString *_NSStringFromUIKeyWindowEvaluationStrategy(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 2)
    return &stru_1E16EDF20;
  else
    return off_1E16DFFC0[a1 + 1];
}

void sub_1853F058C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIEventDeferringBehaviorForManager(void *a1)
{
  void *v2;
  void *v3;
  unint64_t v4;
  objc_class *v5;

  objc_msgSend(a1, "windowHostingScene");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_screen");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_userInterfaceIdiom");

  v5 = (objc_class *)objc_opt_class();
  if (_UIApplicationProcessIsSpringBoard()
    || (_UIEventDeferringProcessIsPineBoard() & 1) != 0
    || (_UIEventDeferringProcessIsCarPlayApp() & 1) != 0
    || _UIEventDeferringProcessIsCarousel())
  {
    v5 = (objc_class *)objc_opt_class();
  }
  if (v5 == (objc_class *)objc_opt_class() && v4 <= 8 && ((0x11Fu >> v4) & 1) != 0)
    v5 = (objc_class *)objc_opt_class();
  return (id)objc_msgSend([v5 alloc], "initWithEventDeferringManager:", a1);
}

uint64_t _UIEventDeferringProcessIsPineBoard()
{
  __CFString *v0;
  __CFString *v1;
  uint64_t v2;
  _QWORD v4[4];
  const __CFString *v5;
  const __CFString *v6;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[2] = ___UIEventDeferringProcessIsPineBoard_block_invoke;
  v4[3] = &unk_1E16B1B50;
  v4[1] = 3221225472;
  v5 = CFSTR("com.apple.PineBoard");
  v6 = CFSTR("com.apple.internal.PineBoardTests.xctrunner");
  if (qword_1ECD7F790 == -1)
  {
    v0 = CFSTR("com.apple.internal.PineBoardTests.xctrunner");
    v1 = CFSTR("com.apple.PineBoard");
  }
  else
  {
    dispatch_once(&qword_1ECD7F790, v4);
    v1 = (__CFString *)v5;
    v0 = (__CFString *)v6;
  }
  v2 = byte_1ECD7F781;

  return v2;
}

uint64_t _UIEventDeferringProcessIsCarousel()
{
  __CFString *v0;
  uint64_t v1;
  _QWORD block[4];
  const __CFString *v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___UIEventDeferringProcessIsCarousel_block_invoke;
  block[3] = &unk_1E16B1B28;
  v4 = CFSTR("com.apple.Carousel");
  if (qword_1ECD7F798 == -1)
  {
    v0 = CFSTR("com.apple.Carousel");
  }
  else
  {
    dispatch_once(&qword_1ECD7F798, block);
    v0 = (__CFString *)v4;
  }
  v1 = byte_1ECD7F782;

  return v1;
}

uint64_t _UIEventDeferringProcessIsCarPlayApp()
{
  __CFString *v0;
  uint64_t v1;
  _QWORD block[4];
  const __CFString *v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___UIEventDeferringProcessIsCarPlayApp_block_invoke;
  block[3] = &unk_1E16B1B28;
  v4 = CFSTR("com.apple.CarPlayApp");
  if (qword_1ECD7F788 == -1)
  {
    v0 = CFSTR("com.apple.CarPlayApp");
  }
  else
  {
    dispatch_once(&qword_1ECD7F788, block);
    v0 = (__CFString *)v4;
  }
  v1 = _MergedGlobals_1185;

  return v1;
}

uint64_t _UIApplicationIsMessagesExtension()
{
  if (qword_1EDDC8118 != -1)
    dispatch_once(&qword_1EDDC8118, &__block_literal_global_920);
  return byte_1EDDC8001;
}

void sub_1853F2508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t UIKeyboardAutomaticIsOnScreen()
{
  void *v0;
  uint64_t v1;

  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isOnScreen");

  return v1;
}

id _UIPerformVoidSelector2(void *a1, const char *a2, const char *a3, const char *a4)
{
  void *v8;
  const char *v9;
  const char *v10;
  const char *v11;

  if (dyld_program_sdk_at_least())
  {
    v8 = a1;
    v9 = a2;
    v10 = a3;
    v11 = a4;
  }
  else
  {
    v9 = sel_performSelector_withObject_withObject_;
    v8 = a1;
    v10 = a2;
    v11 = a3;
  }
  return objc_msgSend(v8, v9, v10, v11);
}

void sub_1853F5C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1853F9008(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1853FC0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1853FCCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1853FCEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

double _RelativeQuaternionFromReference(float32x4_t a1, float32_t a2, float32_t a3, int32x2_t a4, float32x4_t a5, float32_t a6, float a7, float a8)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  double result;

  a5.f32[1] = a6;
  a5.i64[1] = __PAIR64__(LODWORD(a8), LODWORD(a7));
  v8 = vmulq_f32(a5, a5);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  v9 = (float32x4_t)veorq_s8((int8x16_t)vmulq_n_f32(a5, 1.0 / vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32).f32[0]), (int8x16_t)xmmword_186681AD0);
  v10 = a1;
  v10.i32[1] = a4.i32[0];
  *(float32_t *)&a4.i32[1] = a2;
  v11 = (float32x4_t)vdupq_lane_s32(a4, 0);
  v11.f32[1] = a2;
  v10.f32[2] = a3;
  v12 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
  v10.i32[3] = a1.i32[0];
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp2q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 4uLL);
  v14 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL);
  v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  v9.i32[1] = v9.i32[3];
  v16 = vmulq_f32(v11, v9);
  v17 = vmulq_f32(v10, v13);
  v18 = (float32x4_t)vuzp2q_s32(v12, vdupq_lane_s32(a4, 1));
  v19 = vmulq_f32(v18, v14);
  v20 = vaddq_f32(vaddq_f32(v16, v17), v19);
  v20.i32[3] = vsubq_f32(vsubq_f32(v16, v17), v19).i32[3];
  *(_QWORD *)&result = vsubq_f32(v20, vmulq_f32((float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v18, vzip1q_s32((int32x4_t)v18, (int32x4_t)v18))), v15)).u64[0];
  return result;
}

void _HandleNewDeviceMotion(double *a1, void *a2)
{
  void *v3;
  _UIMotionEffectAttitudeEvent *v4;

  v4 = -[_UIMotionEffectAttitudeEvent initWithTimestamp:attitude:]([_UIMotionEffectAttitudeEvent alloc], "initWithTimestamp:attitude:", a1[11], a1[1], a1[2], a1[3], *a1);
  objc_msgSend(a2, "consumer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateWithEvent:", v4);

}

_UIMotionEffectEngineClient *_lazyMapClientForEffectAndView(void *a1, void *a2)
{
  id v3;
  id v4;
  _UIMotionEffectEngineClient *v5;

  v3 = a2;
  v4 = a1;
  v5 = -[_UIMotionEffectEngineClient initWithMotionEffect:view:]([_UIMotionEffectEngineClient alloc], "initWithMotionEffect:view:", v4, v3);

  return v5;
}

void unregisterObjectFromMapOfHashTables(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a1;
  v5 = a2;
  v6 = a3;
  objc_msgSend(v9, "objectForKey:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "removeObject:", v6);
    if (!objc_msgSend(v8, "count"))
      objc_msgSend(v9, "removeObjectForKey:", v5);
  }

}

void registerObjectInMapOfHashTables(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  v5 = a2;
  v6 = a3;
  objc_msgSend(v8, "objectForKey:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKey:", v7, v5);
  }
  objc_msgSend(v7, "addObject:", v6);

}

void _UIViewReconsiderMotionEffectSuspensionForScreenMirroring()
{
  void *v0;
  int v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend((id)_motionEffectEngine, "suspensionReasons");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "containsObject:", CFSTR("mirroringMainScreen"));

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  +[UIScene _scenesIncludingInternal:](UIScene, "_scenesIncludingInternal:", 1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v7, "_hostsWindows"))
        {
          objc_msgSend(v7, "_screen");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "mirroredScreen");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          +[UIScreen mainScreen](UIScreen, "mainScreen");
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          if (v9 == v10)
          {

            if ((v1 & 1) == 0)
            {
              +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", &__block_literal_global_3379, 0.2);
              objc_msgSend((id)_motionEffectEngine, "beginSuspendingForReason:", CFSTR("mirroringMainScreen"));
            }
            return;
          }
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v4)
        continue;
      break;
    }
  }

  if (v1)
    objc_msgSend((id)_motionEffectEngine, "endSuspendingForReason:", CFSTR("mirroringMainScreen"));
}

double UIRectCenteredRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a5 + (a7 - a3) * 0.5;
}

void _UIAnalyticsGatherMultitouchForegroundAnalytics(int a1)
{
  NSObject *v2;
  _BOOL4 v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint8_t v8[16];
  uint8_t buf[16];
  uint8_t v10[16];

  if ((_shouldGatherAnalytics() & 1) != 0)
  {
    if (_MergedGlobals_1329 == a1)
      return;
    _uiMultitouchAnalyticsLog();
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
    if (a1)
    {
      if (v3)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_185066000, v2, OS_LOG_TYPE_INFO, "Analytics: App became foreground active.", buf, 2u);
      }

      qword_1ECD82598 = mach_absolute_time();
      if (qword_1ECD825A0)
        goto LABEL_16;
      objc_msgSend(MEMORY[0x1E0C99E88], "scheduledTimerWithTimeInterval:repeats:block:", 1, &__block_literal_global_38_2, 60.0);
      v4 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v3)
      {
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_185066000, v2, OS_LOG_TYPE_INFO, "Analytics: App stopped being foreground active.", v8, 2u);
      }

      _submitAppForegroundStatus();
      objc_msgSend((id)qword_1ECD825A0, "invalidate");
      v4 = 0;
    }
    v7 = (void *)qword_1ECD825A0;
    qword_1ECD825A0 = v4;

LABEL_16:
    _MergedGlobals_1329 = a1;
    return;
  }
  if (_MergedGlobals_1329)
  {
    _uiMultitouchAnalyticsLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_INFO, "Analytics: Stopping foreground active measurement.", v10, 2u);
    }

    _MergedGlobals_1329 = 0;
    objc_msgSend((id)qword_1ECD825A0, "invalidate");
    v6 = (void *)qword_1ECD825A0;
    qword_1ECD825A0 = 0;

  }
}

void _UIAnalyticsGatherMultitouchAnalytics(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  _UIAnalyticsTouchesSession *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  void *v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_shouldGatherAnalytics() && !objc_msgSend(v1, "type"))
  {
    v17 = v1;
    objc_msgSend(v1, "_allWindows");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)UIApp, "_mainEventEnvironment");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v19 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          -[UIEventEnvironment _touchesEventForWindow:]((uint64_t)v3, v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          if (v10)
          {
            v11 = v9;
            _windowToTouchesMap();
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "objectForKey:", v11);
            v13 = (_UIAnalyticsTouchesSession *)objc_claimAutoreleasedReturnValue();

            if (!v13)
            {
              v13 = objc_alloc_init(_UIAnalyticsTouchesSession);
              _windowToTouchesMap();
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "setObject:forKey:", v13, v11);

            }
            -[_UIAnalyticsTouchesSession processEvent:](v13, "processEvent:", v10);
            if (!-[_UIAnalyticsTouchesSession isValid](v13, "isValid"))
            {
              v15 = v11;
              _windowToTouchesMap();
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "removeObjectForKey:", v15);

            }
          }
          else
          {
            _uiMultitouchAnalyticsLog();
            v13 = (_UIAnalyticsTouchesSession *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(&v13->super, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134217984;
              v23 = v9;
              _os_log_error_impl(&dword_185066000, &v13->super, OS_LOG_TYPE_ERROR, "Analytics: Event environment has no touch events for window %p", buf, 0xCu);
            }
          }

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
      }
      while (v6);
    }

    v1 = v17;
  }

}

uint64_t _shouldGatherAnalytics()
{
  if (qword_1ECD825C8 != -1)
    dispatch_once(&qword_1ECD825C8, &__block_literal_global_32_2);
  if ((byte_1ECD82589 & 1) != 0)
    return 0;
  else
    return AnalyticsIsEventUsed();
}

void ___shouldGatherAnalytics_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  if (_UIIsPrivateMainBundle())
  {
    _uiMultitouchAnalyticsLog();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v1 = 0;
      _os_log_debug_impl(&dword_185066000, v0, OS_LOG_TYPE_DEBUG, "Analytics: Skipping app.", v1, 2u);
    }

    byte_1ECD82589 = 1;
  }
}

id _uiMultitouchAnalyticsLog()
{
  if (qword_1ECD825B0 != -1)
    dispatch_once(&qword_1ECD825B0, &__block_literal_global_666);
  return (id)qword_1ECD825A8;
}

void FreeContextStack(int *a1)
{
  if (*a1 >= 1)
  {
    do
      PopContextFromStack(a1);
    while (*a1 > 0);
  }
  free(a1);
}

void sub_18540412C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185407670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18540979C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIDiffableDataSourceCommonInit(void *a1)
{
  dispatch_queue_t v1;
  void *v2;
  dispatch_queue_t v3;
  void *v4;
  id v5;

  v5 = a1;
  objc_msgSend(v5, "setTableViewDefaultRowAnimation:", 100);
  v1 = dispatch_queue_create("com.apple.uikit.datasource.diffing", 0);
  v2 = (void *)*((_QWORD *)v5 + 28);
  *((_QWORD *)v5 + 28) = v1;

  v3 = dispatch_queue_create("com.apple.uikit.datasource.diffing.snapshot", 0);
  v4 = (void *)*((_QWORD *)v5 + 30);
  *((_QWORD *)v5 + 30) = v3;

  *((_DWORD *)v5 + 17) = 0;
  *((_DWORD *)v5 + 18) = 0;

}

void _UIButtonBarClearOwners(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        -[UIBarButtonItemGroup _relinquishOwnership:]((uint64_t)v9, v4);
        objc_msgSend(v9, "representativeItem");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "_relinquishOwnership:", v4);
        -[UIBarButtonItemGroup _items]((id *)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        _UIButtonBarClearOwnedItems(v11, v4);

      }
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

void _UIButtonBarClearOwnedItems(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v8++), "_relinquishOwnership:", v4);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

id _UIPhysicalButtonSuccinctConfigurationsDescriptionForSet(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;
  __CFString *v5;
  id v6;
  _QWORD v8[4];
  id v9;
  __CFString *v10;
  const __CFString *v11;
  _QWORD *v12;
  _QWORD v13[4];

  v2 = (void *)objc_opt_new();
  if (!a1 || (v3 = (void *)a1[1]) != 0 && objc_msgSend(v3, "count"))
  {
    v13[0] = 0;
    v13[1] = v13;
    v13[2] = 0x2020000000;
    v13[3] = 0;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___UIPhysicalButtonSuccinctConfigurationsDescriptionForSet_block_invoke;
    v8[3] = &unk_1E16ECF48;
    v4 = v2;
    v9 = v4;
    v10 = &stru_1E16EDF20;
    v11 = CFSTR(", ");
    v12 = v13;
    objc_msgSend(a1, "_enumerateConfigurationsWithBlock:", v8);
    v5 = (__CFString *)v11;
    v6 = v4;

    _Block_object_dispose(v13, 8);
  }
  else
  {
    objc_msgSend(v2, "appendString:", CFSTR("(empty)"));
  }
  return v2;
}

void sub_18540B09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18540B184(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___doAddBackgroundTask_block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  NSObject *v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  NSObject *v28;
  uint64_t v29;
  unint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  _UIObjectReferenceCounter *v36;
  void *v37;
  unint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint8_t buf[4];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD7DF70 != -1)
    dispatch_once(&qword_1ECD7DF70, &__block_literal_global_94);
  v2 = _MergedGlobals_1065;
  if ((_MergedGlobals_1065 & 1) == 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), (id)qword_1ECD7DEA8);
    v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (v3)
    {
      if (objc_msgSend(v3, "valid"))
      {
        v4 = qword_1ECD7DF18;
        if (!qword_1ECD7DF18)
        {
          v4 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v4, (unint64_t *)&qword_1ECD7DF18);
        }
        v5 = *(NSObject **)(v4 + 8);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          *(_DWORD *)buf = 138412290;
          v42 = v6;
          v7 = "Reusing background assertion %@";
LABEL_18:
          v10 = v5;
          v11 = 12;
          goto LABEL_19;
        }
      }
      else
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v13 = *(void **)(v12 + 40);
        *(_QWORD *)(v12 + 40) = 0;

        v14 = qword_1ECD7DF20;
        if (!qword_1ECD7DF20)
        {
          v14 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v14, (unint64_t *)&qword_1ECD7DF20);
        }
        v5 = *(NSObject **)(v14 + 8);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          *(_DWORD *)buf = 138412290;
          v42 = v15;
          v7 = "Creating new assertion because existing background assertion is invalid %@";
          goto LABEL_18;
        }
      }
    }
    else
    {
      v8 = qword_1ECD7DF28;
      if (!qword_1ECD7DF28)
      {
        v8 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v8, (unint64_t *)&qword_1ECD7DF28);
      }
      v9 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v7 = "Creating new assertion because there is no existing background assertion.";
        v10 = v9;
        v11 = 2;
LABEL_19:
        _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_DEFAULT, v7, buf, v11);
      }
    }
  }
  v16 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (!v16)
  {
    v17 = qword_1ECD7DF30;
    if (!qword_1ECD7DF30)
    {
      v17 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v17, (unint64_t *)&qword_1ECD7DF30);
    }
    v18 = *(NSObject **)(v17 + 8);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v18, OS_LOG_TYPE_DEFAULT, "Creating new background assertion", buf, 2u);
    }
    if (v2)
    {
      v19 = *(id *)(a1 + 32);
    }
    else
    {
      v20 = (void *)MEMORY[0x1E0CB3940];
      v21 = qword_1ECD7DF38++;
      _UIMainBundleIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "stringWithFormat:", CFSTR("Shared Background Assertion %lu for %@"), v21, v22);
      v19 = (id)objc_claimAutoreleasedReturnValue();

    }
    v23 = objc_msgSend(objc_alloc(MEMORY[0x1E0CFE308]), "initWithPID:flags:reason:name:", getpid(), 1, 4, v19);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v25 = *(void **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v23;

    v26 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(*(_QWORD *)(v26 + 8) + 40))
    {
      v27 = qword_1ECD7DF40;
      if (!qword_1ECD7DF40)
      {
        v27 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v27, (unint64_t *)&qword_1ECD7DF40);
        v26 = *(_QWORD *)(a1 + 40);
      }
      v28 = *(NSObject **)(v27 + 8);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v42 = v29;
        _os_log_impl(&dword_185066000, v28, OS_LOG_TYPE_DEFAULT, "Created new background assertion %@", buf, 0xCu);
        v26 = *(_QWORD *)(a1 + 40);
      }
      if ((objc_msgSend(*(id *)(*(_QWORD *)(v26 + 8) + 40), "acquire") & 1) == 0)
      {
        v30 = qword_1ECD7DF48;
        if (!qword_1ECD7DF48)
        {
          v30 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v30, (unint64_t *)&qword_1ECD7DF48);
        }
        v31 = *(NSObject **)(v30 + 8);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          *(_DWORD *)buf = 138412290;
          v42 = v32;
          _os_log_impl(&dword_185066000, v31, OS_LOG_TYPE_DEFAULT, "Failed to aquire background assertion %@", buf, 0xCu);
        }
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v34 = *(void **)(v33 + 40);
        *(_QWORD *)(v33 + 40) = 0;

      }
    }

    v16 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  }
  if (v16)
    v35 = v2;
  else
    v35 = 1;
  if ((v35 & 1) == 0)
  {
    objc_storeStrong((id *)&qword_1ECD7DEA8, v16);
    if (!qword_1ECD7DEB0)
    {
      v36 = objc_alloc_init(_UIObjectReferenceCounter);
      v37 = (void *)qword_1ECD7DEB0;
      qword_1ECD7DEB0 = (uint64_t)v36;

    }
    v38 = qword_1ECD7DF50;
    if (!qword_1ECD7DF50)
    {
      v38 = __UILogCategoryGetNode("BackgroundTask", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v38, (unint64_t *)&qword_1ECD7DF50);
    }
    v39 = *(NSObject **)(v38 + 8);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 138477827;
      v42 = v40;
      _os_log_impl(&dword_185066000, v39, OS_LOG_TYPE_DEFAULT, "Incrementing reference count for background assertion %{private}@", buf, 0xCu);
    }
    objc_msgSend((id)qword_1ECD7DEB0, "incrementReferenceForObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
}

const __CFString *_NSStringFromUIEventDeferringScope(uint64_t a1)
{
  const __CFString *v1;

  v1 = &stru_1E16EDF20;
  if (a1 == 1)
    v1 = CFSTR("remote");
  if (a1)
    return v1;
  else
    return CFSTR("local");
}

id FindHeightConstraint(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  char v8;
  id v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend(a1, "constraints", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        objc_msgSend(v6, "identifier");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("_UIKBAutolayoutHeightConstraint"));

        if ((v8 & 1) != 0)
        {
          v9 = v6;
          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v3)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_11:

  return v9;
}

id _UIViewConstraints(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (id)objc_msgSend((id)objc_msgSend(a1, "_constraintsExceptingSubviewAutoresizingConstraints"), "mutableCopy");
  if (!v2)
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = (void *)objc_msgSend(a1, "_allSubviews", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (-[UIView _usesAutoresizingConstraints]((uint64_t)v8))
          objc_msgSend(v2, "addObjectsFromArray:", -[UIView _autoresizingConstraints](v8));
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }
  return v2;
}

void UIRectCenteredXInRectScale(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (a9 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
}

void _saveSceneSessionUserInfo(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  char v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;

  v1 = a1;
  objc_msgSend(v1, "_setUserInfoIsDirty:", 0);
  objc_msgSend(v1, "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "persistentIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _restorationDirectory(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "URLByAppendingPathComponent:isDirectory:", CFSTR("userInfo.data"), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    if (objc_msgSend(MEMORY[0x1E0CB38B0], "propertyList:isValidForFormat:", v2, 100))
    {
      objc_msgSend(v1, "persistentIdentifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      _ensureRestorationDirectoryExists(v6);

      v14 = 0;
      objc_msgSend(v2, "writeToURL:error:", v5, &v14);
      v7 = v14;
      if (v7)
      {
        if (_UIStateRestorationDebugLogEnabled())
          NSLog(CFSTR("%s: Could not save Scene Session userInfo dictionary error = %@"), "void _saveSceneSessionUserInfo(UISceneSession *__strong)", v7);
        goto LABEL_22;
      }
      if (_UIStateRestorationDebugLogEnabled())
      {
        v7 = 0;
        NSLog(CFSTR("%s: Saved Scene Session userInfo dictionary"), "void _saveSceneSessionUserInfo(UISceneSession *__strong)");
        goto LABEL_22;
      }
    }
    else if (_UIStateRestorationDebugLogEnabled())
    {
      NSLog(CFSTR("%s: Scene Session userInfo dictionary is not valid property list, skipping save"), "void _saveSceneSessionUserInfo(UISceneSession *__strong)");
    }
    v7 = 0;
    goto LABEL_22;
  }
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Nothing to save for UIScene's saved userInfo file, deleting existing file if it exists: %@"), "void _saveSceneSessionUserInfo(UISceneSession *__strong)", v5);
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0;
  v9 = objc_msgSend(v8, "removeItemAtURL:error:", v5, &v15);
  v10 = v15;

  if (v10 || (v7 = 0, (v9 & 1) == 0))
  {
    if (v10)
    {
      objc_msgSend(v10, "domain");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v11;
      if (v11 == (void *)*MEMORY[0x1E0CB28A8])
      {
        v13 = objc_msgSend(v10, "code");

        if (v13 == 4)
        {
LABEL_21:
          v7 = v10;
          goto LABEL_22;
        }
      }
      else
      {

      }
    }
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Warning: Unable to delete UIScene userInfo file: %@, error = %@"), "void _saveSceneSessionUserInfo(UISceneSession *__strong)", v5, v10);
    goto LABEL_21;
  }
LABEL_22:

}

void sub_18540E910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  id v10;

  if (a2 == 1)
  {
    v10 = objc_begin_catch(exception_object);
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: Exception occurred decoding Scene Session userInfo: %@"));

    objc_end_catch();
    JUMPOUT(0x18540E8CCLL);
  }
  _Unwind_Resume(exception_object);
}

void _ensureRestorationDirectoryExists(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _restorationDirectory(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 0;
  objc_msgSend(v2, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v1, 1, 0, &v3);

}

void ___queue_scheduleUpdateAndSaveForPersistedSceneSessions_block_invoke_3()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  _queue_persistentIdentifiersForDeletion();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v29 != v3)
          objc_enumerationMutation(v0);
        objc_msgSend((id)objc_opt_class(), "_deleteSavedSceneSessionDirectoryWithPersistentIdentifier:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i));
      }
      v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v2);
  }
  objc_msgSend(v0, "removeAllObjects");
  _restorationDirectory(CFSTR("KnownSceneSessions"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = 0;
  objc_msgSend(v6, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v5, 1, 0, &v27);
  v7 = v27;

  _restorationPath(CFSTR("KnownSceneSessions"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (qword_1ECD7F348 != -1)
    dispatch_once(&qword_1ECD7F348, &__block_literal_global_459);
  if (byte_1ECD7F324 && _UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Files are protected while locked, but we're saving sessions so they can be accessed when locked"), "void _queue_updateAndSavePersistedSceneSessions(void)");
  v26 = 0;
  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", qword_1ECD7F328, 200, 0, &v26);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v26;

  if (v9 && !v10)
  {
    v25 = 0;
    objc_msgSend(v9, "writeToURL:options:error:", v8, 0x40000000, &v25);
    v11 = v25;
    if (v11)
    {
      v10 = v11;
      if (_UIStateRestorationDebugLogEnabled())
        NSLog(CFSTR("%s: Could not write known SceneSessions dictionary after update, error = %@"), "void _queue_updateAndSavePersistedSceneSessions(void)", v10);
      goto LABEL_36;
    }
    v24 = 0;
    v12 = *MEMORY[0x1E0C99938];
    v23 = 0;
    objc_msgSend(v8, "getResourceValue:forKey:error:", &v24, v12, &v23);
    v13 = v24;
    v14 = v23;
    v15 = v14;
    if (v14)
    {
      NSLog(CFSTR("%s: Error getting protection class for known SceneSession map: %@"), "void _queue_updateAndSavePersistedSceneSessions(void)", v14);
    }
    else if (_UIStateRestorationDebugLogEnabled())
    {
      NSLog(CFSTR("%s: File protection class for known SceneSession map file is %@"), "void _queue_updateAndSavePersistedSceneSessions(void)", v13);
    }
    if (byte_1ECD7F322 != 1)
    {
      v10 = v15;
LABEL_35:

      goto LABEL_36;
    }
    byte_1ECD7F322 = 0;
    _restorationDirectory(CFSTR("KnownCanvasDefinitions"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v15;
    v18 = objc_msgSend(v17, "removeItemAtURL:error:", v16, &v22);
    v10 = v22;

    if (v10 || (v18 & 1) == 0)
    {
      if (!v10)
        goto LABEL_32;
      objc_msgSend(v10, "domain");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v19;
      if (v19 != (void *)*MEMORY[0x1E0CB28A8])
      {

        goto LABEL_32;
      }
      v21 = objc_msgSend(v10, "code");

      if (v21 != 4)
      {
LABEL_32:
        if (_UIStateRestorationDebugLogEnabled())
          NSLog(CFSTR("%s: Warning: Unable to delete old Canvas Definition Map directory: %@, error = %@"), "void _queue_updateAndSavePersistedSceneSessions(void)", v16, v10);
      }
    }

    goto LABEL_35;
  }
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Could not convert known SceneSessions dictionary to property list, error = %@"), "void _queue_updateAndSavePersistedSceneSessions(void)", v10);
LABEL_36:
  byte_1ECD7F323 = 0;
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Completed work for background task %lu, ending it"), "void _queue_updateAndSavePersistedSceneSessions(void)", qword_1ECD7F340);
  _queue_end_backgroundTaskToUpdatePersistentSceneSessionMap();

}

id _queue_persistentIdentifiersForDeletion()
{
  void *v0;
  id v1;
  void *v2;

  v0 = (void *)_queue_persistentIdentifiersForDeletion__persistentIdentifiersForDeletionSet;
  if (!_queue_persistentIdentifiersForDeletion__persistentIdentifiersForDeletionSet)
  {
    v1 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v2 = (void *)_queue_persistentIdentifiersForDeletion__persistentIdentifiersForDeletionSet;
    _queue_persistentIdentifiersForDeletion__persistentIdentifiersForDeletionSet = (uint64_t)v1;

    v0 = (void *)_queue_persistentIdentifiersForDeletion__persistentIdentifiersForDeletionSet;
  }
  return v0;
}

void _queue_end_backgroundTaskToUpdatePersistentSceneSessionMap()
{
  if (_UIStateRestorationDebugLogEnabled())
    NSLog(CFSTR("%s: Called to end background task %lu"), "void _queue_end_backgroundTaskToUpdatePersistentSceneSessionMap(void)", qword_1ECD7F340);
  if (qword_1ECD7F340)
  {
    if (_UIStateRestorationDebugLogEnabled())
      NSLog(CFSTR("%s: The background task %lu was active, so really ending it"), "void _queue_end_backgroundTaskToUpdatePersistentSceneSessionMap(void)", qword_1ECD7F340);
    objc_msgSend((id)UIApp, "_endBackgroundTask:", qword_1ECD7F340);
    qword_1ECD7F340 = 0;
  }
}

void sub_18540F6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18540F938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18540FE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSBSApplicationShortcutServiceClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SpringBoardServicesLibrary_1();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SBSApplicationShortcutService");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSBSApplicationShortcutServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSBSApplicationShortcutServiceClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIApplication.m"), 489, CFSTR("Unable to find class %s"), "SBSApplicationShortcutService");

    __break(1u);
  }
}

void __getSBSApplicationShortcutItemClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SpringBoardServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SBSApplicationShortcutItem");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSBSApplicationShortcutItemClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSBSApplicationShortcutItemClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIApplicationShortcutItem.m"), 25, CFSTR("Unable to find class %s"), "SBSApplicationShortcutItem");

    __break(1u);
  }
}

void __getSBSApplicationShortcutSystemIconClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SpringBoardServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SBSApplicationShortcutSystemIcon");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSBSApplicationShortcutSystemIconClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSBSApplicationShortcutSystemIconClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIApplicationShortcutItem.m"), 22, CFSTR("Unable to find class %s"), "SBSApplicationShortcutSystemIcon");

    __break(1u);
  }
}

void __getSBSApplicationShortcutTemplateIconClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  SpringBoardServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SBSApplicationShortcutTemplateIcon");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSBSApplicationShortcutTemplateIconClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSBSApplicationShortcutTemplateIconClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIApplicationShortcutItem.m"), 23, CFSTR("Unable to find class %s"), "SBSApplicationShortcutTemplateIcon");

    __break(1u);
  }
}

void sub_185411360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EdgeForAttribute(uint64_t result)
{
  switch((int)result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      return result;
    case 5:
      if (objc_msgSend((id)UIApp, "userInterfaceLayoutDirection"))
        result = 2;
      else
        result = 1;
      break;
    case 6:
      if (objc_msgSend((id)UIApp, "userInterfaceLayoutDirection"))
        result = 1;
      else
        result = 2;
      break;
    case 11:
    case 12:
      result = 5;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void _UIViewBaselineSpacing(void *a1, void *a2, int a3)
{
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v6 = objc_msgSend(a2, "_hasFontInfoForVerticalBaselineSpacing");
  v7 = (void *)objc_msgSend(a1, "_fontInfoForBaselineSpacing");
  v8 = v7;
  if (v6)
  {
    v9 = objc_msgSend(a2, "_fontInfoForBaselineSpacing");
    if (a3 == 6)
      v10 = v8;
    else
      v10 = (void *)v9;
    if (a3 == 6)
      v11 = (void *)v9;
    else
      v11 = v8;
    _UIViewBaselineToBaselineSpacing(v10, v11);
  }
  else
  {
    _UIViewBaselineToEdgeSpacing(v7, a3);
  }
  UICeilToViewScale(a1);
}

void _UIViewBaselineToEdgeSpacing(void *a1, int a2)
{
  BOOL v4;
  char v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  if (a1)
    v4 = (a2 - 5) >= 2;
  else
    v4 = 1;
  v5 = !v4;
  if (os_variant_has_internal_diagnostics())
  {
    if ((v5 & 1) != 0)
    {
LABEL_9:
      objc_msgSend(a1, "lineHeight");
      objc_msgSend(a1, "lineHeight");
      if (a2 != 5)
      {
        objc_msgSend(a1, "capHeight");
        objc_msgSend(a1, "descender");
      }
      return;
    }
    v6 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "UIKit problem: invalid arguments for internal layout spacing function.", buf, 2u);
    }
  }
  else
  {
    if ((v5 & 1) != 0)
      goto LABEL_9;
    v7 = _UIViewBaselineToEdgeSpacing___s_category;
    if (!_UIViewBaselineToEdgeSpacing___s_category)
    {
      v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&_UIViewBaselineToEdgeSpacing___s_category);
    }
    v8 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "UIKit problem: invalid arguments for internal layout spacing function.", v9, 2u);
    }
  }
}

void sub_185413700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1854139F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_185413B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{

  _Unwind_Resume(a1);
}

void _UIApplicationMainPreparations(int a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  const char **v9;
  const char *v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  NSString *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  _UISceneEventResponder *v25;
  void *v26;
  _UIAfterCACommitQueue *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  NSString *v34;
  void *v35;
  void *v36;
  objc_class *v37;
  id v38;
  void *v39;
  void *v40;
  NSString *v41;
  NSString *aClassName;
  NSObject *v43;

  v7 = a3;
  aClassName = a4;
  kdebug_trace();
  dispatch_get_global_queue(33, 0);
  v43 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v43, &__block_literal_global_3008);
  CGInitializeImageIO();
  _UIApplicationLinkedOnVersion = dyld_get_program_sdk_version();
  if (a1 >= 2)
  {
    v8 = a1 - 1;
    v9 = (const char **)(a2 + 8);
    do
    {
      v10 = *v9;
      if (!strcmp(*v9, "-BuildDefaultPNG"))
      {
        v11 = &_MergedGlobals_149;
      }
      else
      {
        if (strcmp(v10, "-RegisterForSystemEvents") && strcmp(v10, "--RegisterForSystemEvents"))
          goto LABEL_9;
        v11 = &byte_1EDDC7FF2;
      }
      *v11 = 1;
LABEL_9:
      ++v9;
      --v8;
    }
    while (v8);
  }
  kdebug_trace();
  BKSDisplayServicesStart();
  kdebug_trace();
  +[_UIApplicationConfigurationLoader sharedLoader](_UIApplicationConfigurationLoader, "sharedLoader");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "startPreloadInitializationContext");

  +[_UIScreenInitialDisplayConfigurationLoader sharedLoader](_UIScreenInitialDisplayConfigurationLoader, "sharedLoader");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "_startPreloadInitialDisplayContext");

  +[_UIDeviceInitialDeviceConfigurationLoader sharedLoader](_UIDeviceInitialDeviceConfigurationLoader, "sharedLoader");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "_startPreloadInitialDeviceContext");

  UIApplicationInitialize();
  v15 = (NSString *)v7;
  v41 = v15;
  if (!v15)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "infoDictionary");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectForKey:", CFSTR("NSPrincipalClass"));
    v15 = (NSString *)objc_claimAutoreleasedReturnValue();

  }
  if (-[NSString length](v15, "length"))
  {
    v18 = NSClassFromString(v15);
    if (!v18)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class _UIApplicationGetPrincipalClass(NSString *__strong)");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("UIApplication.m"), 5211, CFSTR("Unable to instantiate the UIApplication subclass instance. No class named %@ is loaded."), v15, v41);

      v18 = 0;
    }
  }
  else
  {
    v18 = (void *)objc_opt_class();
  }
  v21 = v18;

  GSEventRegisterEventCallBack();
  if ((_UIUpdateCycleEnabled() & 1) != 0)
    _UIUpdateSchedulerStart((uint64_t)&_UIUpdateCycleMainScheduler);
  v22 = (void *)objc_opt_new();
  byte_1EDDC7FF2 = objc_msgSend((id)objc_opt_class(), "registerAsSystemApp");
  if (qword_1EDDC80D0 != -1)
    dispatch_once(&qword_1EDDC80D0, &__block_literal_global_902);
  if (byte_1EDDC7FFB)
    GSEventInitializeAsExtension();
  else
    GSEventInitialize();
  GSEventPushRunLoopMode();
  objc_msgSend(v21, "_startWindowServerIfNecessary");
  objc_msgSend(v21, "_startStatusBarServerIfNecessary");
  v23 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v24 = (void *)qword_1EDDC8098;
  qword_1EDDC8098 = (uint64_t)v23;

  v25 = objc_alloc_init(_UISceneEventResponder);
  v26 = (void *)qword_1EDDC80B0;
  qword_1EDDC80B0 = (uint64_t)v25;

  v27 = objc_alloc_init(_UIAfterCACommitQueue);
  v28 = (void *)qword_1EDDC80C8;
  qword_1EDDC80C8 = (uint64_t)v27;

  UIApplicationInstantiateSingleton((objc_class *)v21);
  objc_storeStrong((id *)(UIApp + 152), v22);
  kdebug_trace();
  objc_msgSend(MEMORY[0x1E0D232B0], "optionsWithDelegate:", UIApp);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIApplication _systemAnimationFenceExemptQueue](UIApplication, "_systemAnimationFenceExemptQueue");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "setCallOutQueue:", v30);
  FBSWorkspaceInitialize();
  v31 = objc_claimAutoreleasedReturnValue();
  v32 = (void *)qword_1EDDC80A8;
  qword_1EDDC80A8 = v31;

  kdebug_trace();
  kdebug_trace();
  *(_QWORD *)(UIApp + 176) |= 0x80000000uLL;
  kdebug_trace();
  _UIApplicationInitializeForBackgroundTasks();
  objc_opt_class();
  v33 = +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient](UIKeyboardSceneDelegate, "automaticKeyboardArbiterClient");
  +[_UICanvasUserActivityManager _initializeUserActivityManager](_UICanvasUserActivityManager, "_initializeUserActivityManager");
  v34 = aClassName;
  if (aClassName)
    goto LABEL_25;
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "infoDictionary");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "objectForKey:", CFSTR("UIApplicationDelegateClass"));
  v34 = (NSString *)objc_claimAutoreleasedReturnValue();

  if (v34)
  {
LABEL_25:
    v37 = NSClassFromString(v34);
    if (!v37)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIApplicationMainPreparations(int, char **, NSString *__strong, NSString *__strong)");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "handleFailureInFunction:file:lineNumber:description:", v40, CFSTR("UIApplication.m"), 5426, CFSTR("Unable to instantiate the UIApplication delegate instance. No class named %@ is loaded."), v34);

    }
    if (-[objc_class isSubclassOfClass:](v37, "isSubclassOfClass:", objc_opt_class()))
    {
      objc_msgSend((id)UIApp, "setDelegate:", UIApp);
    }
    else
    {
      v38 = objc_alloc_init(v37);
      objc_msgSend((id)UIApp, "setDelegate:", v38);
      objc_setAssociatedObject((id)UIApp, &unk_1EDDC7FF3, v38, (void *)1);

    }
  }
  kdebug_trace();

}

uint64_t _UIUpdateInputTimingProfileLoad(const char *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  size_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  int v27;
  int v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  int v37;
  uint64_t result;
  int *v39;
  char *v40;
  unsigned __int8 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int16 v45;
  size_t v46;
  __int16 v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 4;
  makeProfilePath(a1, (char *)(a2 + 4));
  v5 = (void *)MEMORY[0x1E0C99D50];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dataWithContentsOfFile:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  *(_DWORD *)a2 = v7 == 0;
  if (!v7)
  {
    v11 = 0;
LABEL_46:

    return (uint64_t)v11;
  }
  v41 = 0;
  objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v7, 0, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      v11 = 0;
LABEL_44:
      v28 = 2;
LABEL_45:
      *(_DWORD *)a2 = v28;
      goto LABEL_46;
    }
  }
  profileDictionaryValue(v8, &v41);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    v27 = v41;

    v11 = 0;
    if (v27)
      v28 = 2;
    else
      v28 = 1;
    goto LABEL_45;
  }
  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("Profiles"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  profileDictionaryValue(v10, &v41);
  v11 = (_QWORD *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
LABEL_43:

    v37 = v41;
    if (!v37)
    {
      if (v11)
        goto LABEL_46;
      v28 = 1;
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  profileDictionaryValue(v13, &v41);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  profileDictionaryValue(v14, &v41);
  v11 = (_QWORD *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
LABEL_42:

    goto LABEL_43;
  }
  objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("Ready"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  profileDictionaryValue(v15, &v41);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("ReadyExpecting"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  profileDictionaryValue(v17, &v41);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
    v19 = 13;
  else
    v19 = 11;
  if (v18)
    v20 = v19 * 8 + 16;
  else
    v20 = v19 * 8;
  v21 = malloc_type_calloc(1uLL, v20, 0x13F0F44FuLL);
  if (v21)
  {
    v11 = v21;
    if (v16)
      v21[9] = v21 + 11;
    if (v18)
      v21[10] = &v21[v19];
    objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("Latency"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *v11 = profileDurationValue(v22, &v41);

    objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("TimestampAdjustment"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v11[1] = profileDurationValue(v23, &v41);

    objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("TimestampConfidence"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v11[2] = profileDurationValue(v24, &v41);

    objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("LowLatency"));
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = (void *)v25;
    if (v25)
    {
      LODWORD(v25) = _NSIsNSNumber();
      if ((_DWORD)v25)
        LOBYTE(v25) = objc_msgSend(v26, "BOOLValue");
      else
        v41 = 1;
    }
    *((_BYTE *)v11 + 24) = v25;

    objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("LowLatencyAlignmentShift"));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v11[4] = profileDurationValue(v29, &v41);

    objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("LowLatencyReadyShift"));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v11[5] = profileDurationValue(v30, &v41);

    objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("UseNextEventInformation"));
    v31 = objc_claimAutoreleasedReturnValue();
    v32 = (void *)v31;
    if (v31)
    {
      LODWORD(v31) = _NSIsNSNumber();
      if ((_DWORD)v31)
        LOBYTE(v31) = objc_msgSend(v32, "BOOLValue");
      else
        v41 = 1;
    }
    *((_BYTE *)v11 + 48) = v31;

    if (*((_BYTE *)v11 + 48))
    {
      objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("Period"));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v11[7] = profileDurationValue(v33, &v41);

      objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("SendPeriod"));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = v34;
      if (v34)
        v36 = profileDurationValue(v34, &v41);
      else
        v36 = v11[7];
      v11[8] = v36;

    }
    if (v16)
    {
      setReadyProfile(v11[9], v16, &v41);
      if (!v18)
      {
        v11[10] = v11[9];
LABEL_41:

        goto LABEL_42;
      }
    }
    else if (!v18)
    {
      goto LABEL_41;
    }
    setReadyProfile(v11[10], v18, &v41);
    goto LABEL_41;
  }
  v42 = 0;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  v39 = __error();
  v40 = strerror(*v39);
  v43 = 136315650;
  v44 = 0;
  v45 = 2048;
  v46 = v20;
  v47 = 2080;
  v48 = v40;
  _os_log_send_and_compose_impl();
  result = _os_crash_msg();
  __break(1u);
  return result;
}

unint64_t profileDurationValue(void *a1, _BYTE *a2)
{
  double v4;

  if (a1)
  {
    if (_NSIsNSNumber())
    {
      objc_msgSend(a1, "doubleValue");
      return _UIMachDurationForMediaDuration(v4);
    }
    *a2 = 1;
  }
  return 0;
}

id profileDictionaryValue(void *a1, _BYTE *a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (_NSIsNSDictionary())
      return v3;
    a1 = 0;
    *a2 = 1;
  }
  return a1;
}

char *makeProfilePath(const char *a1, char *a2)
{
  size_t v5;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, sizeof(v6));
  v5 = 32;
  if (sysctlbyname("hw.targettype", v6, &v5, 0, 0)
    || snprintf(a2, 0x400uLL, "%s/%s.%s.plist", "/System/Library/EventTimingProfiles", (const char *)v6, a1) >= 0x400)
  {
    abort();
  }
  return a2;
}

void setReadyProfile(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("ReceiveDeadline"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)a1 = profileDurationValue(v6, a3);

  objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("UseNextEventInformation"));
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (v7)
  {
    v9 = (void *)v7;
    LODWORD(v7) = _NSIsNSNumber();
    if ((_DWORD)v7)
      LOBYTE(v7) = objc_msgSend(v9, "BOOLValue");
    else
      *a3 = 1;
    v8 = v9;
  }
  *(_BYTE *)(a1 + 8) = v7;

}

void _UIUpdateSchedulerStart(uint64_t a1)
{
  char *v2;
  __CFRunLoop *Current;
  __CFRunLoopObserver *v4;
  const __CFString *v5;
  __CFRunLoopSource *v6;
  void *v7;
  void *v8;
  int v9;
  CFIndex v10;
  __CFNotificationCenter *LocalCenter;
  void *v12;
  void *v13;
  void *v14;
  _DWORD *v15;
  int v16;
  CFRunLoopSourceContext v17;
  CFRunLoopObserverContext context;

  v2 = (char *)malloc_type_calloc(1uLL, 0x300uLL, 0x10F0040D30C5117uLL);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)v2 = a1;
  *((_QWORD *)v2 + 92) = _UIMachDurationForMediaDuration(0.0166666667);
  *((_QWORD *)v2 + 90) = -1;
  *((_QWORD *)v2 + 93) = _UIMachDurationForMediaDuration(0.00208333333);
  *((_QWORD *)v2 + 94) = _UIMachDurationForMediaDuration(0.000431034483);
  Current = CFRunLoopGetCurrent();
  *((_QWORD *)v2 + 1) = Current;
  memset(&context, 0, sizeof(context));
  context.info = *(void **)v2;
  v4 = CFRunLoopObserverCreate(0, 0x20uLL, 1u, 2147418112, (CFRunLoopObserverCallBack)runloopObserverCallback, &context);
  v5 = (const __CFString *)*MEMORY[0x1E0C9B270];
  CFRunLoopAddObserver(Current, v4, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  *((_QWORD *)v2 + 3) = v4;
  v17.version = 0;
  memset(&v17.retain, 0, 56);
  v17.info = v2;
  v17.perform = (void (__cdecl *)(void *))runloopSourceCallback;
  v6 = CFRunLoopSourceCreate(0, 0, &v17);
  CFRunLoopAddSource(Current, v6, v5);
  *((_QWORD *)v2 + 2) = v6;
  _UIMachTimerInit((uint64_t)(v2 + 32), (uint64_t)runloopTimerCallback, *(_QWORD *)v2, 0);
  CFRunLoopAddSource(*((CFRunLoopRef *)v2 + 1), *((CFRunLoopSourceRef *)v2 + 6), v5);
  *((_QWORD *)v2 + 9) = -1;
  v7 = *(void **)v2;
  unk_1ECD82C88 = requestRegistrySignaledCallback;
  unk_1ECD82C90 = v7;
  *((_QWORD *)v2 + 10) = &mainGroup;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((_DWORD *)v2 + 30) = 2;
  *(_QWORD *)(v2 + 137) = 0;
  *(_QWORD *)(v2 + 124) = 0;
  *(_QWORD *)(v2 + 132) = 0;
  *((_DWORD *)v2 + 43) = 0;
  *(_QWORD *)(v2 + 156) = 0;
  *(_QWORD *)(v2 + 164) = 0;
  *(_QWORD *)(v2 + 148) = 0;
  _UIUpdateInputGroupAddInputSet((uint64_t)&mainGroup, (uint64_t)&commonSet);
  _UIUpdateInputGroupAddInputSet((uint64_t)&mainGroup, (uint64_t)(v2 + 80));
  *((_QWORD *)v2 + 22) = 0;
  *((_QWORD *)v2 + 23) = &mainGroup;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_QWORD *)v2 + 28) = 2;
  *((_DWORD *)v2 + 58) = 2;
  *((_QWORD *)v2 + 30) = &commonSet;
  *((_QWORD *)v2 + 31) = v2 + 80;
  *((_DWORD *)v2 + 88) = 2 * (objc_msgSend(MEMORY[0x1E0CD28B0], "currentState") != 0);
  *((_QWORD *)v2 + 45) = 0;
  *((_QWORD *)v2 + 46) = -1;
  *((_DWORD *)v2 + 94) = 0;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  *((_QWORD *)v2 + 54) = 0;
  *((_QWORD *)v2 + 55) = "ImplicitTransaction";
  *((_DWORD *)v2 + 112) = 0;
  *((_QWORD *)v2 + 57) = 0;
  *((_QWORD *)v2 + 58) = 0;
  *((_DWORD *)v2 + 118) = 0;
  *((_OWORD *)v2 + 30) = 0u;
  *((_OWORD *)v2 + 31) = 0u;
  *((_QWORD *)v2 + 64) = 0;
  *((_QWORD *)v2 + 67) = "DisplayLinks";
  *((_QWORD *)v2 + 66) = v2;
  *((_QWORD *)v2 + 65) = inputDisplayLinksReadyForModelTimeCallback;
  *((_DWORD *)v2 + 64) = 2 * (dword_1ECD82C74 != 0);
  *((_QWORD *)v2 + 33) = 0;
  *((_QWORD *)v2 + 34) = -1;
  *((_DWORD *)v2 + 70) = 0;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_QWORD *)v2 + 42) = 0;
  *((_QWORD *)v2 + 43) = "ForceUpdates";
  _UIUpdateInputSetAddInput((uint64_t)(v2 + 80), (_QWORD *)v2 + 44);
  _UIUpdateInputSetAddInput((uint64_t)(v2 + 80), (_QWORD *)v2 + 56);
  _UIUpdateInputSetAddInput((uint64_t)(v2 + 80), (_QWORD *)v2 + 32);
  v8 = *(void **)v2;
  v9 = dword_1ECD75BA0;
  if (qword_1ECD75BB0)
    v9 = dword_1ECD75BA0 + 1;
  dword_1ECD75BA0 = v9 - 1;
  qword_1ECD75BB0 = (uint64_t)inputGroupSignaledCallback;
  unk_1ECD75BB8 = v8;
  v10 = MEMORY[0x1E0C809B0];
  v17.version = MEMORY[0x1E0C809B0];
  v17.info = (void *)3221225472;
  v17.retain = (const void *(__cdecl *)(const void *))__setupCA_block_invoke;
  v17.release = (void (__cdecl *)(const void *))&__block_descriptor_40_e16_B16__0r____QQI_8l;
  v17.copyDescription = (CFStringRef (__cdecl *)(const void *))v2;
  objc_msgSend(MEMORY[0x1E0CD2730], "setWillFireHandler:", &v17);
  context.version = v10;
  context.info = (void *)3221225472;
  context.retain = (const void *(__cdecl *)(const void *))__setupCA_block_invoke_2;
  context.release = (void (__cdecl *)(const void *))&__block_descriptor_40_e5_v8__0l;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))v2;
  objc_msgSend(MEMORY[0x1E0CD28B0], "setImplicitTransactionDidBeginHandler:", &context);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableRunLoopObserverCommits:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDefaultDisableRunLoopObserverCommits:", 1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(MEMORY[0x1E0CD28B0], "enableUpdateCycleSupport");
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, *(const void **)v2, (CFNotificationCallback)targetListChangeNotificationCallback, CFSTR("UISceneWillEnterForegroundNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(LocalCenter, *(const void **)v2, (CFNotificationCallback)targetListChangeNotificationCallback, CFSTR("UISceneDidEnterBackgroundNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(LocalCenter, *(const void **)v2, (CFNotificationCallback)targetListChangeNotificationCallback, CFSTR("UISceneDidDisconnectNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(LocalCenter, *(const void **)v2, (CFNotificationCallback)targetListChangeNotificationCallback, CFSTR("UIWindowDidBecomeVisibleNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(LocalCenter, *(const void **)v2, (CFNotificationCallback)targetListChangeNotificationCallback, CFSTR("UIWindowDidBecomeHiddenNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(LocalCenter, *(const void **)v2, (CFNotificationCallback)targetListChangeNotificationCallback, _UIWindowDidDetachContextNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(LocalCenter, *(const void **)v2, (CFNotificationCallback)targetListChangeNotificationCallback, CFSTR("_UIWindowDidMoveToSceneNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(LocalCenter, *(const void **)v2, (CFNotificationCallback)targetListChangeNotificationCallback, CFSTR("_UIWindowHostingSceneDidMoveToScreenNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  *((_QWORD *)v2 + 68) = 0;
  v12 = (void *)qword_1ECD75CD0;
  qword_1ECD75CC8 = (uint64_t)v2;
  qword_1ECD75CD0 = (uint64_t)&__block_literal_global_400;

  v13 = (void *)qword_1ECD75CA0;
  qword_1ECD75C98 = (uint64_t)v2;
  qword_1ECD75CA0 = (uint64_t)&__block_literal_global_23_7;

  v14 = (void *)qword_1ECD75B60;
  qword_1ECD75B58 = (uint64_t)v2;
  qword_1ECD75B60 = (uint64_t)&__block_literal_global_24_4;

  v15 = *(_DWORD **)v2;
  v16 = *(_DWORD *)(*(_QWORD *)v2 + 4) | 6;
  *v15 = 2;
  v15[1] = v16;
  CFRunLoopSourceSignal(*((CFRunLoopSourceRef *)v2 + 2));
  CFRunLoopWakeUp(*((CFRunLoopRef *)v2 + 1));
}

uint64_t _UIUpdateInputSetAddInput(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  v2 = *(_QWORD *)(a1 + 72);
  ++*(_DWORD *)(a1 + 68);
  *(_BYTE *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 40) = 2;
  a2[7] = v2;
  if (v2)
    *(_QWORD *)(v2 + 64) = a2 + 7;
  *(_QWORD *)(a1 + 72) = a2;
  a2[8] = a1 + 72;
  a2[6] = a1;
  result = *(_QWORD *)a1;
  ++*(_QWORD *)(result + 16);
  v4 = *(_DWORD *)result | 1;
  if (*(_DWORD *)result != v4)
  {
    *(_DWORD *)result = v4;
    if (!*(_DWORD *)(result + 8))
      return (*(uint64_t (**)(uint64_t, _QWORD))(result + 24))(result, *(_QWORD *)(result + 32));
  }
  return result;
}

uint64_t _UIUpdateInputGroupAddInputSet(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 80) = v2;
  if (v2)
    *(_QWORD *)(v2 + 88) = a2 + 80;
  *(_QWORD *)(result + 40) = a2;
  *(_QWORD *)(a2 + 88) = result + 40;
  ++*(_QWORD *)(result + 16);
  v3 = *(_DWORD *)result | 1;
  if (*(_DWORD *)result != v3)
  {
    *(_DWORD *)result = v3;
    if (!*(_DWORD *)(result + 8))
      return (*(uint64_t (**)(uint64_t, _QWORD))(result + 24))(result, *(_QWORD *)(result + 32));
  }
  return result;
}

uint64_t _UIMachTimerInit(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex a4)
{
  mach_port_t v8;
  __CFMachPort *v9;
  CFRunLoopSourceRef RunLoopSource;
  CFMachPortContext context;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v8 = mk_timer_create();
  *(_DWORD *)a1 = v8;
  if (v8
    && (context.version = 1,
        context.info = (void *)a1,
        memset(&context.retain, 0, 24),
        v9 = CFMachPortCreateWithPort((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, (CFMachPortCallBack)runloopCallback, &context, 0), (*(_QWORD *)(a1 + 8) = v9) != 0)&& (RunLoopSource = CFMachPortCreateRunLoopSource(0, v9, a4), (*(_QWORD *)(a1 + 16) = RunLoopSource) != 0))
  {
    *(_QWORD *)(a1 + 24) = a2;
    *(_QWORD *)(a1 + 32) = a3;
    return 1;
  }
  else
  {
    _UIMachTimerKill((unsigned int *)a1);
    return 0;
  }
}

void _UIApplicationInstallAutoreleasePoolsIfNecessaryForMode(const __CFString *a1)
{
  __CFRunLoop *Current;
  __CFRunLoopObserver *v3;
  id v4;
  const __CFString *v5;
  CFRunLoopObserverContext context;

  if (!_CFRunLoopSetPerCalloutAutoreleasepoolEnabled())
  {
    Current = CFRunLoopGetCurrent();
    v3 = (__CFRunLoopObserver *)_MergedGlobals_1057;
    if (!_MergedGlobals_1057)
    {
      v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      context.version = 0;
      context.info = v4;
      context.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E0C98BD0];
      context.release = (void (__cdecl *)(const void *))MEMORY[0x1E0C98BC0];
      context.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E0C98350];
      _MergedGlobals_1057 = (uint64_t)CFRunLoopObserverCreate(0, 1uLL, 1u, -2147483647, (CFRunLoopObserverCallBack)_runLoopObserverCallout, &context);
      qword_1ECD7DD78 = (uint64_t)CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)_runLoopObserverCallout, &context);
      v5 = (const __CFString *)*MEMORY[0x1E0C9B270];
      CFRunLoopAddObserver(Current, (CFRunLoopObserverRef)_MergedGlobals_1057, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
      CFRunLoopAddObserver(Current, (CFRunLoopObserverRef)qword_1ECD7DD78, v5);

      v3 = (__CFRunLoopObserver *)_MergedGlobals_1057;
    }
    if (!CFRunLoopContainsObserver(Current, v3, a1))
    {
      CFRunLoopAddObserver(Current, (CFRunLoopObserverRef)_MergedGlobals_1057, a1);
      CFRunLoopAddObserver(Current, (CFRunLoopObserverRef)qword_1ECD7DD78, a1);
    }
  }
}

void _UIApplicationInitializeForBackgroundTasks()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0D87D68], "observeForImminentAssertionsExpiration:", &__block_literal_global_52);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)__processExpirationObserver;
  __processExpirationObserver = v0;

}

void UIApplicationInstantiateSingleton(objc_class *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  kdebug_trace();
  if (UIApp)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void UIApplicationInstantiateSingleton(__unsafe_unretained Class)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("UIApplication.m"), 5196, CFSTR("There can only be one UIApplication instance."));

  }
  v2 = [a1 alloc];
  v3 = (void *)UIApp;
  UIApp = (uint64_t)v2;

  v4 = objc_msgSend((id)UIApp, "init");
  v9 = (id)v4;
  if (!UIApp || UIApp != v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void UIApplicationInstantiateSingleton(__unsafe_unretained Class)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("UIApplication.m"), 5200, CFSTR("Unable to instantiate the UIApplication singleton."));

  }
  kdebug_trace();

}

void parametersOfSpringAnimation(double *a1, double *a2, _QWORD *a3, double a4, double a5, double a6, double a7, double a8)
{
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  float v18;
  double v19;
  double v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  id *v26;
  id v27;
  id v28;
  void (**v29)(void *, uint64_t, double);
  void *v30;
  void *v31;
  double v32;
  double v33;
  _QWORD v35[4];
  id v36;
  id v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  double v41;
  double v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[7];
  _QWORD v56[4];
  id v57[3];
  _QWORD v58[5];
  _QWORD v59[4];
  id v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  _QWORD v66[4];
  id v67;
  double v68;
  double v69;
  _QWORD v70[4];
  id v71[3];
  _QWORD aBlock[5];
  _QWORD v73[2];
  _QWORD v74[4];

  v74[2] = *MEMORY[0x1E0C80C00];
  v13 = fmax(a5, 0.00000011920929);
  if (v13 >= 1.0)
    v14 = 1.0;
  else
    v14 = v13;
  v33 = v14;
  v15 = fmin(fmax(a4, 0.01), 10.0);
  v16 = MEMORY[0x1E0C809B0];
  if (v13 < 1.0)
  {
    v17 = v13 * v13;
    v18 = 1.0 - v13 * v13;
    v19 = sqrtf(v18);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __parametersOfSpringAnimation_block_invoke;
    aBlock[3] = &__block_descriptor_40_e8_d16__0d8l;
    *(double *)&aBlock[4] = v19;
    v70[0] = MEMORY[0x1E0C809B0];
    v70[1] = 3221225472;
    v70[2] = __parametersOfSpringAnimation_block_invoke_2;
    v70[3] = &unk_1E16EC218;
    v71[1] = *(id *)&v13;
    v71[2] = *(id *)&a7;
    v71[0] = _Block_copy(aBlock);
    v23 = v71[0];
    v20 = v13 * v15;
    v66[0] = v16;
    v66[1] = 3221225472;
    v66[2] = __parametersOfSpringAnimation_block_invoke_3;
    v66[3] = &unk_1E16EC218;
    v68 = a8;
    v69 = v20;
    v21 = _Block_copy(v70);
    v67 = v21;
    v24 = _Block_copy(v66);
    v59[0] = v16;
    v59[1] = 3221225472;
    v59[2] = __parametersOfSpringAnimation_block_invoke_4;
    v59[3] = &unk_1E16EC240;
    v60 = v21;
    v61 = v20;
    v62 = a7;
    v63 = v20 * a7;
    v64 = v17 * v15;
    v65 = v19;
    v22 = v21;
    v25 = _Block_copy(v59);

    v26 = v71;
  }
  else
  {
    v58[0] = MEMORY[0x1E0C809B0];
    v58[1] = 3221225472;
    v58[2] = __parametersOfSpringAnimation_block_invoke_5;
    v58[3] = &__block_descriptor_40_e8_d16__0d8l;
    *(double *)&v58[4] = a7;
    v56[0] = MEMORY[0x1E0C809B0];
    v56[1] = 3221225472;
    v56[2] = __parametersOfSpringAnimation_block_invoke_6;
    v56[3] = &unk_1E16EC218;
    v57[0] = _Block_copy(v58);
    v57[1] = *(id *)&a8;
    v57[2] = *(id *)&v15;
    v23 = v57[0];
    v24 = _Block_copy(v56);
    v55[0] = v16;
    v55[1] = 3221225472;
    v55[2] = __parametersOfSpringAnimation_block_invoke_7;
    v55[3] = &__block_descriptor_56_e8_d16__0d8l;
    *(double *)&v55[4] = v15 * v15;
    *(double *)&v55[5] = a7;
    *(double *)&v55[6] = v15;
    v25 = _Block_copy(v55);
    v26 = v57;
  }

  v51 = 0;
  v52 = &v51;
  v53 = 0x2020000000;
  v54 = 0;
  v47 = 0;
  v48 = &v47;
  v49 = 0x2020000000;
  v50 = 0;
  v43 = 0;
  v44 = (double *)&v43;
  v45 = 0x2020000000;
  v46 = 0;
  v35[0] = v16;
  v35[1] = 3221225472;
  v35[2] = __parametersOfSpringAnimation_block_invoke_8;
  v35[3] = &unk_1E16EC288;
  v38 = &v43;
  v41 = v15;
  v42 = a8;
  v27 = v24;
  v36 = v27;
  v28 = v25;
  v37 = v28;
  v39 = &v47;
  v40 = &v51;
  v29 = (void (**)(void *, uint64_t, double))_Block_copy(v35);
  if ((((uint64_t (*)(void *, uint64_t, double))v29[2])(v29, 12, 5.0) & 1) == 0)
    v29[2](v29, 20, 1.0);
  if (a3)
  {
    v73[0] = CFSTR("nanCount");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v48[3]);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v73[1] = CFSTR("divergenceCount");
    v74[0] = v30;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v52[3]);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v74[1] = v31;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v74, v73, 2);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  if (a1)
    *a1 = v44[3] * (v44[3] * a6);
  if (a2)
  {
    v32 = sqrt(v44[3] * (a6 * a6 * v44[3]));
    *a2 = v33 * (v32 + v32);
  }

  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);

}

void sub_185417B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t __parametersOfSpringAnimation_block_invoke_8(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v3;
  unint64_t v6;
  _BOOL4 v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  *(double *)(v3 + 24) = 1.0 / *(double *)(a1 + 72) * a3;
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(double *)(a1 + 80) * 100000.0;
    v10 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    while (1)
    {
      v11 = (*(double (**)(double))(*(_QWORD *)(a1 + 32) + 16))(v10);
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v10
                                                                  - v11
                                                                  / (*(double (**)(double))(*(_QWORD *)(a1 + 40) + 16))(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v12 = *(double *)(v3 + 24);
      if (v6 >= 2 && vabdd_f64(v12, v10) <= *(double *)(a1 + 80))
        break;
      v8 = v10 - v12 > v9;
      v7 = ++v6 >= a2;
      v10 = *(double *)(v3 + 24);
      if (a2 == v6)
        goto LABEL_6;
    }
    if (v8)
    {
      v13 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      LODWORD(v3) = 0;
      ++*v13;
    }
    else
    {
      LODWORD(v3) = 1;
    }
  }
  else
  {
LABEL_6:
    v7 = 1;
  }
  return (v7 | v3) & 1;
}

double __parametersOfSpringAnimation_block_invoke_4(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;

  v4 = a2 * a2;
  v5 = exp(-(*(double *)(a1 + 40) * a2));
  v6 = (*(double (**)(double))(*(_QWORD *)(a1 + 32) + 16))(a2);
  v7 = *(double *)(a1 + 48);
  v8 = v4 * *(double *)(a1 + 64);
  if (v5 * v6 <= 0.0)
    v9 = v7 + *(double *)(a1 + 56) * a2 - v8;
  else
    v9 = -(v7 + *(double *)(a1 + 56) * a2 - v8);
  v10 = *(double *)(a1 + 40) * a2;
  return v9 / (v4 * *(double *)(a1 + 72) * expf(v10));
}

double __parametersOfSpringAnimation_block_invoke_3(uint64_t a1, double a2)
{
  double v4;
  double v5;

  v4 = *(double *)(a1 + 40);
  v5 = exp(-(*(double *)(a1 + 48) * a2));
  return v4 - fabs(v5 * (*(double (**)(double))(*(_QWORD *)(a1 + 32) + 16))(a2));
}

double __parametersOfSpringAnimation_block_invoke_2(uint64_t a1, double a2)
{
  double v2;

  v2 = *(double *)(a1 + 40) * a2 - *(double *)(a1 + 48);
  return v2 / (*(double (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

double __parametersOfSpringAnimation_block_invoke(uint64_t a1, double a2)
{
  return *(double *)(a1 + 32) * a2;
}

double __parametersOfSpringAnimation_block_invoke_7(double *a1, double a2)
{
  double v2;
  float v3;

  v2 = a1[4] * (a1[5] - a2);
  v3 = a1[6] * a2;
  return v2 / expf(v3);
}

double __parametersOfSpringAnimation_block_invoke_6(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  float v8;

  v4 = (*(double (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v5 = *(double *)(a1 + 48);
  if (v4 >= 0.0)
    v6 = *(double *)(a1 + 40);
  else
    v6 = -*(double *)(a1 + 40);
  v7 = v4 * v5 + 1.0;
  v8 = -(v5 * a2);
  return v7 * expf(v8) - v6;
}

double __parametersOfSpringAnimation_block_invoke_5(uint64_t a1, double a2)
{
  return a2 - *(double *)(a1 + 32);
}

void sub_18541B5D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_18541C00C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void ___eventDeferringCompatibilityQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.UIKit.eventDeferring.compatibilityQueue", 0);
  v1 = (void *)_MergedGlobals_986;
  _MergedGlobals_986 = (uint64_t)v0;

}

uint64_t _UIApplicationProcessIsSpotlight()
{
  if (qword_1EDDC8158 != -1)
    dispatch_once(&qword_1EDDC8158, &__block_literal_global_942);
  return byte_1EDDC8009;
}

uint64_t _UIApplicationProcessIsOverlayUI()
{
  if (qword_1EDDC8148 != -1)
    dispatch_once(&qword_1EDDC8148, &__block_literal_global_936);
  return byte_1EDDC8007;
}

void __preFenceHandler_block_invoke_7()
{
  void *v0;
  void (**v1)(void *, _QWORD);
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD aBlock[4];
  BOOL v7;

  v0 = (void *)MEMORY[0x186DC9484]();
  if (pthread_main_np() != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "__preFenceHandler_block_invoke_7");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("UIWindow.m"), 5696, CFSTR("__preFenceHandler must be called on the main thread"));

  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __preFenceHandler_block_invoke_8;
  aBlock[3] = &__block_descriptor_33_e8_v12__0B8l;
  v7 = __caCommitState == 1;
  v1 = (void (**)(void *, _QWORD))_Block_copy(aBlock);
  v1[2](v1, 0);
  objc_msgSend((id)UIApp, "_synchronizeSystemAnimationFencesWithSpinCleanUpBlock:", v1);
  if (objc_msgSend((id)qword_1EDDC8658, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "__preFenceHandler_block_invoke_7");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("UIWindow.m"), 5730, CFSTR("we can't support registering new preFenceHandlers after the system animation synchronizes"));

  }
  if (__caCommitState != 1)
    __caCommitState = 0;
  byte_1EDDC858D = 0;

  objc_autoreleasePoolPop(v0);
}

void sub_18541DA30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _UIImageDecompressionCompletionQueue()
{
  if (qword_1ECD79538 != -1)
    dispatch_once(&qword_1ECD79538, &__block_literal_global_9_3);
  return (id)qword_1ECD79530;
}

id UIDecompressorLog()
{
  if (qword_1ECD79E40 != -1)
    dispatch_once(&qword_1ECD79E40, &__block_literal_global_40_3);
  return (id)qword_1ECD79E38;
}

void ___persistenceQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.UIKit.UIScenePersistenceQueue", 0);
  v1 = (void *)qword_1ECD7F330;
  qword_1ECD7F330 = (uint64_t)v0;

}

void ___holdSceneEventResponsesQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("_holdSceneEventResponsesQueue", 0);
  v1 = (void *)qword_1ECD79220;
  qword_1ECD79220 = (uint64_t)v0;

}

double UIPointRoundToViewScale(void *a1, double a2, double a3)
{
  double v5;

  objc_msgSend(a1, "_currentScreenScale");
  return UIPointRoundToScale(a2, a3, v5);
}

id _smoothDecelerationAnimation()
{
  if (qword_1EDDB0C50 != -1)
    dispatch_once(&qword_1EDDB0C50, &__block_literal_global_1833);
  return (id)qword_1EDDB0C48;
}

void sub_185420374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185422238(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x520], 8);
  _Unwind_Resume(a1);
}

BOOL _UIFocusEnvironmentIsAncestorOfEnvironment(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3 && v4)
  {
    v11 = 0;
    v12 = &v11;
    v13 = 0x2020000000;
    v14 = 0;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___UIFocusEnvironmentIsAncestorOfEnvironment_block_invoke;
    v8[3] = &unk_1E16C5F90;
    v9 = v3;
    v10 = &v11;
    _UIFocusEnvironmentEnumerateAncestorEnvironments(v5, v8);
    v6 = *((_BYTE *)v12 + 24) != 0;

    _Block_object_dispose(&v11, 8);
  }

  return v6;
}

void sub_1854225B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___serverConnection_block_invoke()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  objc_msgSend(MEMORY[0x1E0D6C0F0], "defaultConnection");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECD7B210;
  qword_1ECD7B210 = v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *MEMORY[0x1E0D6C158];
  objc_msgSend(MEMORY[0x1E0CB3828], "mainQueue");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (id)objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", v3, 0, v4, &__block_literal_global_283);

  _notificationStateQueue();
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_sync(v6, &__block_literal_global_285_0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (id)objc_msgSend(v7, "addObserverForName:object:queue:usingBlock:", CFSTR("UIApplicationProtectedDataWillBecomeUnavailable"), 0, 0, &__block_literal_global_286_0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v9 = (id)objc_msgSend(v10, "addObserverForName:object:queue:usingBlock:", CFSTR("UIApplicationProtectedDataDidBecomeAvailable"), 0, 0, &__block_literal_global_288_0);

}

id _notificationStateQueue()
{
  if (qword_1ECD7B228 != -1)
    dispatch_once(&qword_1ECD7B228, &__block_literal_global_291);
  return (id)qword_1ECD7B220;
}

void _UIEventProfileCollectionInit()
{
  __CFNotificationCenter *DarwinNotifyCenter;
  char v1;

  if (os_variant_has_internal_diagnostics())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)eventProfileCollectionCallback, CFSTR("com.apple.EventTimingProfileCollection"), 0, CFNotificationSuspensionBehaviorCoalesce);
    eventProfileCollectionCheckEnabled();
    _MergedGlobals_994 = v1;
  }
}

unint64_t __UILogGetCategoryImpl(_BYTE *a1)
{
  return __UILogCategoryGetNode(a1, (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
}

id ___wakeOnTouchSynchronizationFilter_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___wakeOnTouchSynchronizationFilter_block_invoke_2;
  v7[3] = &unk_1E16DFA88;
  v9 = v3;
  v8 = *(id *)(a1 + 32);
  v4 = v3;
  v5 = _Block_copy(v7);

  return v5;
}

id ___pencilRangeAndTouchingSeparationFilter_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  _QWORD aBlock[4];
  id v7;

  v2 = a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___pencilRangeAndTouchingSeparationFilter_block_invoke_2;
  aBlock[3] = &unk_1E16DF8D8;
  v7 = v2;
  v3 = v2;
  v4 = _Block_copy(aBlock);

  return v4;
}

id ___iosMacEventExtractionFilter_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___iosMacEventExtractionFilter_block_invoke_2;
  v7[3] = &unk_1E16DFA88;
  v8 = *(id *)(a1 + 32);
  v9 = v3;
  v4 = v3;
  v5 = _Block_copy(v7);

  return v5;
}

id ___hoverEventMemoryFilter_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___hoverEventMemoryFilter_block_invoke_2;
  v7[3] = &unk_1E16DFA88;
  v8 = *(id *)(a1 + 32);
  v9 = v3;
  v4 = v3;
  v5 = _Block_copy(v7);

  return v5;
}

id ___grapeFingerOneStrokeMisinterpretationWorkaround_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  _QWORD aBlock[4];
  id v7;

  v2 = a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___grapeFingerOneStrokeMisinterpretationWorkaround_block_invoke_2;
  aBlock[3] = &unk_1E16DF8D8;
  v7 = v2;
  v3 = v2;
  v4 = _Block_copy(aBlock);

  return v4;
}

id ___dragEventExtractionFilter_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___dragEventExtractionFilter_block_invoke_2;
  v7[3] = &unk_1E16DFA88;
  v9 = v3;
  v8 = *(id *)(a1 + 32);
  v4 = v3;
  v5 = _Block_copy(v7);

  return v5;
}

id _logFilter(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___logFilter_block_invoke;
  v7[3] = &unk_1E16DF9E8;
  v8 = v3;
  v9 = a1;
  v4 = v3;
  v5 = _Block_copy(v7);

  return v5;
}

void sub_185426034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185426D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185428728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18542AFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *stringForFeedbackEngineState(unint64_t a1)
{
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint8_t buf[4];
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1 < 6)
    return off_1E16C5E20[a1];
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v7 = a1;
      _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unknown feedback engine state: %ld", buf, 0xCu);
    }

  }
  else
  {
    v3 = stringForFeedbackEngineState___s_category;
    if (!stringForFeedbackEngineState___s_category)
    {
      v3 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v3, (unint64_t *)&stringForFeedbackEngineState___s_category);
    }
    v4 = *(NSObject **)(v3 + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v7 = a1;
      _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "Unknown feedback engine state: %ld", buf, 0xCu);
    }
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown state: %ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void UIFloorToScale(double a1, double a2)
{
  if (a2 == 0.0 && AdjustToScale_onceToken_0 != -1)
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_276);
}

void ___pptLogHandle_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.UIKit", "PPT");
  v1 = (void *)qword_1ECD81A58;
  qword_1ECD81A58 = (uint64_t)v0;

}

void ___orientationLog_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.UIKit", "UIDevice.orientation");
  v1 = (void *)qword_1ECD7E428;
  qword_1ECD7E428 = (uint64_t)v0;

}

uint64_t _UITabBarDefaultMaxItemsForTraitCollection(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  v2 = objc_msgSend(v1, "userInterfaceIdiom");
  if (v2 == -1)
  {
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v3, "userInterfaceIdiom");

  }
  v4 = objc_msgSend(v1, "horizontalSizeClass");
  switch(v2)
  {
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_12;
    case 8:
LABEL_6:
      v5 = 7;
      goto LABEL_17;
  }
  if (v4 == 1)
    goto LABEL_12;
  if (v4)
  {
    if (qword_1ECD7B638 == -1)
      goto LABEL_14;
    goto LABEL_18;
  }
  if (v2 != 1)
  {
LABEL_12:
    v5 = 5;
    goto LABEL_17;
  }
  if (qword_1ECD7B638 != -1)
LABEL_18:
    dispatch_once(&qword_1ECD7B638, &__block_literal_global_128);
LABEL_14:
  if (_MergedGlobals_43_0)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v5 = 8;
LABEL_17:

  return v5;
}

void sub_18542F10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIGestureRecognizerSendActions(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  unint64_t v16;
  __CFString *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  __CFString *v23;
  CFTimeInterval v24;
  _BYTE v25[22];
  __int16 v26;
  __CFString *v27;
  __int16 v28;
  CFTimeInterval v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend((id)a1, "state");
  if ((unint64_t)(v4 - 3) >= 2)
  {
    if (v4 == 1)
    {
      v8 = *(_QWORD *)(a1 + 8) & 0xFFFFFFDFFFFFFFFFLL;
      *(_QWORD *)(a1 + 8) = v8;
      if ((v8 & 0x400000000) != 0)
        goto LABEL_12;
    }
    else if ((*(_QWORD *)(a1 + 8) & 0x400000000) != 0)
    {
      goto LABEL_12;
    }
LABEL_9:
    v9 = qword_1ECD7E0B8;
    if (!qword_1ECD7E0B8)
    {
      v9 = __UILogCategoryGetNode("GesturePerformance", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&qword_1ECD7E0B8);
    }
    if ((*(_BYTE *)v9 & 1) != 0)
    {
      v18 = *(id *)(v9 + 8);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend((id)a1, "_briefDescription");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 24), "firstObject");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        NSStringFromSelector((SEL)objc_msgSend(v20, "action"));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = *(_QWORD *)(a1 + 72);
        if (v22 > 5)
          v23 = 0;
        else
          v23 = off_1E16C94F0[v22];
        v24 = (CACurrentMediaTime() - *(double *)(a1 + 64)) * 1000.0;
        *(_DWORD *)v25 = 138413058;
        *(_QWORD *)&v25[4] = v19;
        *(_WORD *)&v25[12] = 2112;
        *(_QWORD *)&v25[14] = v21;
        v26 = 2112;
        v27 = v23;
        v28 = 2048;
        v29 = v24;
        _os_log_impl(&dword_185066000, v18, OS_LOG_TYPE_ERROR, "%@: sending action (%@) for state (%@) took (%.4f ms)", v25, 0x2Au);

      }
    }
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 0x800000000) != 0)
    return;
  v6 = *(_BYTE *)(a1 + 16);
  v7 = v5 | 0x800000000;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v6;
  if ((v7 & 0x400000000) == 0)
    goto LABEL_9;
LABEL_12:
  *(_QWORD *)(a1 + 8) |= 0x400000000uLL;
  v10 = qword_1ECD7E0C0;
  if (!qword_1ECD7E0C0)
  {
    v10 = __UILogCategoryGetNode("Gesture", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v10, (unint64_t *)&qword_1ECD7E0C0);
  }
  if ((*(_BYTE *)v10 & 1) != 0)
  {
    v12 = *(id *)(v10 + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend((id)a1, "_briefDescription");
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = (void *)v13;
      v15 = "";
      if (a2)
        v15 = " (delayed)";
      v16 = *(_QWORD *)(a1 + 72);
      if (v16 > 5)
        v17 = 0;
      else
        v17 = off_1E16C94F0[v16];
      *(_DWORD *)v25 = 138412802;
      *(_QWORD *)&v25[4] = v13;
      *(_WORD *)&v25[12] = 2080;
      *(_QWORD *)&v25[14] = v15;
      v26 = 2112;
      v27 = v17;
      _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "%@: performing action%s for state %@", v25, 0x20u);

    }
  }
  v11 = _os_activity_create(&dword_185066000, "send gesture actions", MEMORY[0x1E0C80FE0], OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)v25 = 0;
  *(_QWORD *)&v25[8] = 0;
  if (objc_msgSend(*(id *)(a1 + 24), "count", 0, 0))
  {
    os_activity_scope_enter(v11, (os_activity_scope_state_t)v25);
    _UIGestureRecognizerSendTargetActions(a1, *(void **)(a1 + 24));
    os_activity_scope_leave((os_activity_scope_state_t)v25);
  }

}

void _UIGestureRecognizerSendTargetActions(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a2, "count");
  if (v4 == 1)
  {
    objc_msgSend(a2, "lastObject");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    -[UIGestureRecognizerTarget _sendActionWithGestureRecognizer:]((uint64_t)v10, a1);

  }
  else if (v4 >= 2)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v5 = (void *)objc_msgSend(a2, "copy");
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v12;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v12 != v8)
            objc_enumerationMutation(v5);
          -[UIGestureRecognizerTarget _sendActionWithGestureRecognizer:](*(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v9++), a1);
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v7);
    }

  }
}

id _systemGestureLog()
{
  if (qword_1ECD7E060 != -1)
    dispatch_once(&qword_1ECD7E060, &__block_literal_global_228_0);
  return (id)_MergedGlobals_1073;
}

double UIRectInsetEdges(char a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;

  if ((a1 & 2) != 0)
    v6 = a6;
  else
    v6 = -0.0;
  return a2 + v6;
}

void __initializeActiveUserInterfaceIdiom_block_invoke()
{
  if (qword_1ECD7E340 != -1)
    dispatch_once(&qword_1ECD7E340, &__block_literal_global_39_1);
  sActiveUserInterfaceIdiom = qword_1ECD7E338;
}

void ____associateFlagWithPreferencesKeyLocked_block_invoke_2()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)__preferencesNotificationCallback, CFSTR("com.apple.UIKit.LoggingPreferences"), 0, CFNotificationSuspensionBehaviorCoalesce);
}

void _removeEntriesFromCollectionIfConstraintContainsItem(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = (void *)objc_msgSend(v4, "copy", 0);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v4, "objectForKey:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "firstItem");
        v12 = objc_claimAutoreleasedReturnValue();
        if ((id)v12 == v3)
        {

        }
        else
        {
          v13 = (void *)v12;
          objc_msgSend(v11, "secondItem");
          v14 = (id)objc_claimAutoreleasedReturnValue();

          if (v14 != v3)
            goto LABEL_11;
        }
        _UILACleanUpConstraintForItemInCollection(v10, v4);
LABEL_11:

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v7);
  }

}

void _UILACleanUpConstraintForItemInCollection(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a1;
  v3 = a2;
  objc_msgSend(v3, "objectForKey:", v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "setActive:", 0);
    objc_msgSend(v3, "removeObjectForKey:", v6);
  }

}

void sub_185435920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIUpdateRequestRegistryRemoveRecord(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  char **v6;
  int v7;
  uint64_t result;
  int v9;
  int v10;
  uint64_t (*v11)(uint64_t, _QWORD);

  if ((*a2 & 1) != 0)
    v6 = (char **)(a1 + 8);
  else
    v6 = (char **)(a1 + 48);
  if (_UIUpdateRequestRecordSortedSetRemoveRecord(v6, (unint64_t)a2, a3))
  {
    if ((*(_BYTE *)a2 & 8) != 0)
      free(a2);
    v7 = requestRemoved((_DWORD *)a1, (uint64_t)v6, a2);
  }
  else
  {
    v7 = 0;
  }
  result = _UIUpdateReasonSortedSetRemoveReason(a1 + 88, a3);
  if ((_DWORD)result)
  {
    if (*(_WORD *)(a1 + 102))
      v9 = 32;
    else
      v9 = 33;
    v7 |= v9;
  }
  v10 = *(_DWORD *)a1 | v7;
  if (v10 != *(_DWORD *)a1)
  {
    *(_DWORD *)a1 = v10;
    v11 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 136);
    if (v11)
      return v11(a1, *(_QWORD *)(a1 + 144));
  }
  return result;
}

uint64_t _UIUpdateReasonSortedSetRemoveReason(uint64_t a1, unsigned int a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v17;

  v2 = *(char **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(unsigned __int16 *)(a1 + 12);
  }
  else
  {
    v2 = (char *)(a1 + 8);
    v3 = 1;
  }
  v4 = *(unsigned __int16 *)(a1 + 14);
  if (!*(_WORD *)(a1 + 14))
    return 0;
  v5 = v2;
  v6 = *(unsigned __int16 *)(a1 + 14);
  do
  {
    v7 = v6 >> 1;
    v8 = &v5[4 * (v6 >> 1)];
    v10 = *(_DWORD *)v8;
    v9 = v8 + 4;
    v6 += ~(v6 >> 1);
    if (v10 < a2)
      v5 = v9;
    else
      v6 = v7;
  }
  while (v6);
  if (&v2[4 * v4] == v5 || *(_DWORD *)v5 != a2)
    return 0;
  v11 = v5 - v2;
  v12 = &v2[4 * v3 + ((v5 - v2) >> 1)];
  v13 = *(unsigned __int16 *)v12;
  v14 = v13 != 0;
  v15 = v13 - 1;
  if (v15 != 0 && v14)
  {
    *(_WORD *)v12 = v15;
  }
  else
  {
    *(_WORD *)(a1 + 14) = v4 - 1;
    v17 = (unsigned __int16)(v4 - 1) - (v11 >> 2);
    memmove(v5, v5 + 4, 4 * v17);
    memmove(v12, v12 + 2, 2 * v17);
  }
  return 1;
}

uint64_t _UIUpdateRequestRecordSortedSetRemoveRecord(char **a1, unint64_t a2, unsigned int a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  char *v9;
  unint64_t v10;
  char *v12;
  uint64_t v13;

  v3 = (unint64_t)a1[1];
  if (!v3)
    return 0;
  v5 = *a1;
  v6 = (uint64_t)&(*a1)[24 * v3];
  do
  {
    v7 = v3 >> 1;
    v8 = (unint64_t *)&v5[24 * (v3 >> 1)];
    v10 = *v8;
    v9 = (char *)(v8 + 3);
    v3 += ~(v3 >> 1);
    if (v10 < a2)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if ((char *)v6 == v5)
    return 0;
  if (*(_QWORD *)v5 != a2)
    return 0;
  _UIUpdateReasonSortedSetRemoveReason((uint64_t)(v5 + 8), a3);
  if (*((_WORD *)v5 + 11))
    return 0;
  free(*((void **)v5 + 1));
  v12 = *a1;
  v13 = (uint64_t)(a1[1] - 1);
  a1[1] = (char *)v13;
  memmove(v5, v5 + 24, v12 - v5 + 24 * v13);
  return 1;
}

uint64_t requestRemoved(_DWORD *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;

  v3 = *a3;
  v4 = 64;
  if ((*a3 & 4) != 0)
  {
    v6 = a1[29]-- == 1;
    if (v6)
      v4 = 66;
    else
      v4 = 64;
    if ((v3 & 0x10) == 0)
    {
LABEL_3:
      if ((v3 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  v6 = a1[30]-- == 1;
  if (v6)
    v4 = v4 | 4;
  else
    v4 = v4;
  if ((v3 & 0x20) == 0)
  {
LABEL_4:
    if ((v3 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_18:
  v6 = a1[33]-- == 1;
  if (v6)
    v4 = v4 | 8;
  else
    v4 = v4;
  if ((v3 & 0x40) == 0)
  {
LABEL_5:
    if ((v3 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_22:
  v6 = a1[31]-- == 1;
  if (v6)
    v4 = v4 | 0x10;
  else
    v4 = v4;
  if ((v3 & 0x80) == 0)
  {
LABEL_6:
    if ((v3 & 1) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_26:
  v6 = a1[32]-- == 1;
  if (v6)
    v4 = v4 | 0x80;
  else
    v4 = v4;
  if ((v3 & 1) != 0)
LABEL_7:
    *a3 = v3 & 0xFFFFFFFD;
LABEL_8:
  if (*(_QWORD *)(a2 + 8))
  {
    v5 = *(_DWORD *)(a2 + 24) | 1;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    v5 = *(_DWORD *)(a2 + 24) & 0xFFFFFFFE;
    *(_DWORD *)(a2 + 28) = 0;
  }
  *(_DWORD *)(a2 + 24) = v5;
  a1[1] |= 1u;
  return v4;
}

void _UIUpdateCompletionObservationRemoveObserver(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t **v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  void *v13;
  void *v14;

  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _UIUpdateCompletionObservationRemoveObserver(_UIUpdateCompletionObservation *const _Nonnull, const id<_UIUpdateCompletionObserving>  _Nonnull const __strong, const BOOL)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("_UIUpdateSequence.mm"), 187, CFSTR("Persistant observers are not implemented."));

  }
  v5 = *(uint64_t ***)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::find<void *>(v6, a2);
    if (v7)
    {
      v8 = v7;
      v9 = *v5;
      v10 = std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::erase(v6, v7);
      if (v9 == v8)
        **(_QWORD **)(a1 + 16) = v10;
    }
  }
  v11 = *(_QWORD **)a1;
  if (v11)
  {
    v12 = std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::find<void *>(v11, a2);
    if (v12)
      std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::erase(v11, v12);
  }
}

void sub_1854394A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void _UIQOSManagedCommitsEnd(void *a1, void *a2)
{
  id v3;
  id v4;
  CFIndex Count;
  __CFSet *Value;
  const __CFSet *v7;
  objc_class *Class;
  const char *Name;
  char __dst[8];

  v3 = a1;
  v4 = a2;
  _MergedGlobals_1293 = 0;
  if (qword_1ECD82128 != -1)
    dispatch_once(&qword_1ECD82128, &__block_literal_global_5_13);
  Count = CFDictionaryGetCount((CFDictionaryRef)qword_1ECD82130);
  if (!v4
    || (Value = (__CFSet *)CFDictionaryGetValue((CFDictionaryRef)qword_1ECD82130, v3)) != 0
    && (v7 = Value, CFSetRemoveValue(Value, v4), !CFSetGetCount(v7)))
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1ECD82130, v3);
    if (Count)
    {
      if (!CFDictionaryGetCount((CFDictionaryRef)qword_1ECD82130))
      {
        Class = object_getClass(v3);
        Name = class_getName(Class);
        strncpy(__dst, Name, 8uLL);
        if (v4)
          strncpy(__dst, (const char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String"), 8uLL);
        _tracepointArg4((uint64_t)&qword_1ECD82130);
        kdebug_trace();
      }
    }
  }

}

void sub_1854407B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

double __machDurationOfSecond_block_invoke()
{
  unint64_t v0;
  double result;
  mach_timebase_info info;

  info = 0;
  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  result = (double)(1000000000 * (unint64_t)info.denom) / (double)v0;
  *(double *)&qword_1ECD7F5A8 = result;
  return result;
}

void ____associateFlagWithPreferencesKeyLocked_block_invoke()
{
  NSObject *v0;

  dispatch_get_global_queue(-32768, 0);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v0, &__block_literal_global_8_7);

}

uint64_t _UIViewBackingObservesChanges(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  +[UIView _defaultKeyPathsToSyncWithPrivateSubviews]();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "containsObject:", a1);

  return v3;
}

void __InitializeUIKitBundlePath()
{
  uint64_t v0;
  void *v1;
  id v2;

  _UIKitBundle();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bundlePath");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)__kitLocation;
  __kitLocation = v0;

}

void sub_185445774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventHasEdgePendingOrLocked(void *a1)
{
  uint64_t result;
  const __CFArray *v2;
  CFIndex Count;
  uint64_t v4;
  CFIndex v5;
  int v6;

  result = objc_msgSend(a1, "_hidEvent");
  if (result)
  {
    result = IOHIDEventGetChildren();
    if (result)
    {
      v2 = (const __CFArray *)result;
      Count = CFArrayGetCount((CFArrayRef)result);
      if (Count < 1)
      {
        return 0;
      }
      else
      {
        v4 = Count;
        v5 = 0;
        v6 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(v2, v5);
          if (IOHIDEventGetType() == 11 && (IOHIDEventGetIntegerValue() & 0x42800) != 0)
            break;
          v5 = ++v6;
          if (v4 <= v6)
            return 0;
        }
        return 1;
      }
    }
  }
  return result;
}

UIMutableUserNotificationCategory *UNNotificationCategoryToUIUserNotificationCategory_block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  UIMutableUserNotificationCategory *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = a2;
  v3 = objc_alloc_init(UIMutableUserNotificationCategory);
  objc_msgSend(v2, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIUserNotificationCategory setIdentifier:](v3, "setIdentifier:", v4);

  objc_msgSend(v2, "actions");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "bs_map:", &__block_literal_global_11_5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIMutableUserNotificationCategory setActions:forContext:](v3, "setActions:forContext:", v6, 0);

  return v3;
}

void UIUserNotificationCategoryCommonInit(void *a1, void *a2, void *a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  v5 = a3;
  v6 = a1;
  v7 = objc_msgSend(a2, "copy");
  v8 = (void *)v6[1];
  v6[1] = v7;

  v9 = objc_msgSend(v5, "copy");
  v10 = (id)v6[2];
  v6[2] = v9;

}

uint64_t UIRemoteNotificationTypesFromUNNotificationSettings(void *a1)
{
  id v1;
  _BOOL8 v2;
  unint64_t v3;
  uint64_t v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "alertStyle") != 0;
  v3 = (objc_msgSend(v1, "badgeSetting") == 2) | (unint64_t)(4 * v2);
  v4 = objc_msgSend(v1, "soundSetting");

  if (v4 == 2)
    return v3 | 2;
  else
    return v3;
}

void sub_185447A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void _UISceneInspectDelegateSuport(unsigned int *a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;

  v3 = a2;
  objc_opt_self();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *a1 = *a1 & 0xFFFFFFFE | objc_opt_isKindOfClass() & 1;

  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = 2;
  else
    v5 = 0;
  *a1 = *a1 & 0xFFFFFFFD | v5;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v6 = 4;
  else
    v6 = 0;
  *a1 = *a1 & 0xFFFFFFFB | v6;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v7 = 8;
  else
    v7 = 0;
  *a1 = *a1 & 0xFFFFFFF7 | v7;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v8 = 16;
  else
    v8 = 0;
  *a1 = *a1 & 0xFFFFFFEF | v8;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v9 = 32;
  else
    v9 = 0;
  *a1 = *a1 & 0xFFFFFFDF | v9;
  v10 = objc_opt_respondsToSelector();

  if ((v10 & 1) != 0)
    v11 = 64;
  else
    v11 = 0;
  *a1 = *a1 & 0xFFFFFFBF | v11;
}

BOOL _UIEdgeInsetsEqualToInsetsAlongAxis(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  void *v22;
  void *v23;

  if ((unint64_t)(a1 - 4) <= 0xFFFFFFFFFFFFFFFCLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _UIEdgeInsetsEqualToInsetsAlongAxis(UIEdgeInsets, UIEdgeInsets, UIAxis)");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, CFSTR("_UICollectionLayoutHelpers.m"), 722, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("axis == UIAxisVertical || axis == UIAxisHorizontal || axis == UIAxisBoth"));

  }
  v18 = a3 == a7;
  if (a2 != a6)
    v18 = 0;
  if (a5 != a9)
    v18 = 0;
  if (a4 != a8)
    v18 = 0;
  v19 = a2 == a6;
  if (a4 != a8)
    v19 = 0;
  v20 = a3 == a7;
  if (a5 != a9)
    v20 = 0;
  if (a1 != 1)
    v20 = 0;
  if (a1 != 2)
    v19 = v20;
  if (a1 == 3)
    return v18;
  else
    return v19;
}

void sub_18544C030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UISupportsShouldInvalidateForInsets()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
  {
    LODWORD(result) = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_EnableCollectionViewLayoutShouldInvalidateForInsets, (uint64_t)CFSTR("EnableCollectionViewLayoutShouldInvalidateForInsets"));
    if (byte_1ECD75F2C)
      return 1;
    else
      return result;
  }
  return result;
}

double segmentBarHeight(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v7 = a2;
  objc_msgSend(a1, "_defaultHeightForTraitCollection:size:", a3, a4);
  v9 = v8;
  objc_msgSend(v7, "backgroundImageForState:isMini:withFallback:", 0, 0, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(v10, "capInsets");
    v12 = v11;
    v14 = v13;
    objc_msgSend(v10, "size");
    v9 = v15;
    if (v12 != 0.0 || v14 != 0.0)
    {
      objc_msgSend(v10, "alignmentRectInsets");
      v9 = v9 + v16 + v17;
    }
  }

  return v9;
}

void ___viewControllerIfStatusBarPartStyleProviding_block_invoke()
{
  id v0;

  _UIMainBundleIdentifier();
  v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EDDB0F75 = objc_msgSend(&unk_1E1A93278, "containsObject:", v0);

}

uint64_t _sSo24UICollectionViewListCellC5UIKitE27defaultContentConfigurationAC06UIListgH0VyF_0@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t result;

  v3 = objc_msgSend(v1, sel_defaultContentConfiguration);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD748F0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a1 = result;
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if ((unint64_t)v1 >= 0xA)

  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 48) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD878C8);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;
  int v1;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  v1 = *(unsigned __int8 *)(v0 + 112);
  if (v1 != 255)
    sub_185228168(*(void **)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), v1);
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_4()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

double UIEdgeInsetsMin(char a1, double result, double a3, double a4, double a5, double a6)
{
  double v6;

  v6 = fmin(result, a6);
  if ((a1 & 1) != 0)
    return v6;
  return result;
}

void ___isBundleAllowedSpringBoardDelegate_block_invoke()
{
  uint64_t v0;
  void *v1;
  void *v2;

  _UIMainBundleIdentifier();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)v0;
  if (v0)
  {
    v2 = (void *)v0;
    LOBYTE(v0) = objc_msgSend(&unk_1E1A94D30, "containsObject:", v0);
    v1 = v2;
  }
  byte_1ECD79BC9 = v0;

}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  BOOL v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  BOOL v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  BOOL v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (v37 > *v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3uLL:
        v39 = v8[1];
        v40 = *(a2 - 1);
        if (v39 <= v40)
          v41 = *(a2 - 1);
        else
          v41 = v8[1];
        if (v39 >= v40)
          v39 = *(a2 - 1);
        *(a2 - 1) = v39;
        v8[1] = v41;
        v42 = *(a2 - 1);
        if (v42 <= *v8)
          v43 = *v8;
        else
          v43 = *(a2 - 1);
        if (v42 >= *v8)
          v42 = *v8;
        *(a2 - 1) = v42;
        v45 = *v8;
        v44 = v8[1];
        if (v43 <= v44)
          v45 = v8[1];
        if (v43 < v44)
          v44 = v43;
        *v8 = v45;
        v8[1] = v44;
        return result;
      case 4uLL:
        v47 = v8[1];
        v46 = v8[2];
        if (*v8 <= v46)
          v48 = v8[2];
        else
          v48 = *v8;
        if (*v8 < v46)
          v46 = *v8;
        v8[2] = v46;
        *v8 = v48;
        v49 = *(a2 - 1);
        if (v47 <= v49)
          v50 = *(a2 - 1);
        else
          v50 = v47;
        if (v47 < v49)
          v49 = v47;
        *(a2 - 1) = v49;
        v51 = *v8;
        if (*v8 <= v50)
          v52 = v50;
        else
          v52 = *v8;
        if (*v8 >= v50)
          v51 = v50;
        *v8 = v52;
        v8[1] = v51;
        v53 = v8[2];
        v54 = *(a2 - 1);
        if (v53 <= v54)
          v55 = *(a2 - 1);
        else
          v55 = v8[2];
        if (v53 >= v54)
          v53 = *(a2 - 1);
        *(a2 - 1) = v53;
        v56 = v8[1];
        if (v56 <= v55)
          v57 = v55;
        else
          v57 = v8[1];
        if (v56 >= v55)
          v56 = v55;
        v8[1] = v57;
        v8[2] = v56;
        return result;
      case 5uLL:
        v58 = *v8;
        v59 = v8[1];
        if (*v8 <= v59)
          v60 = v8[1];
        else
          v60 = *v8;
        if (*v8 >= v59)
          v58 = v8[1];
        *v8 = v60;
        v8[1] = v58;
        v61 = v8[3];
        v62 = *(a2 - 1);
        if (v61 <= v62)
          v63 = *(a2 - 1);
        else
          v63 = v8[3];
        if (v61 >= v62)
          v61 = *(a2 - 1);
        *(a2 - 1) = v61;
        v8[3] = v63;
        v64 = *(a2 - 1);
        v65 = v8[2];
        if (v64 <= v65)
          v66 = v8[2];
        else
          v66 = *(a2 - 1);
        if (v64 >= v65)
          v64 = v8[2];
        *(a2 - 1) = v64;
        v68 = v8[2];
        v67 = v8[3];
        v69 = v8[1];
        if (v66 <= v67)
          v68 = v8[3];
        if (v66 < v67)
          v67 = v66;
        v8[2] = v68;
        v8[3] = v67;
        v70 = *(a2 - 1);
        if (v69 <= v70)
          v71 = *(a2 - 1);
        else
          v71 = v69;
        if (v69 < v70)
          v70 = v69;
        *(a2 - 1) = v70;
        v72 = *v8;
        v74 = v8[2];
        v73 = v8[3];
        if (v73 <= *v8)
          v75 = *v8;
        else
          v75 = v8[3];
        if (v73 >= *v8)
          v73 = *v8;
        if (v75 <= v74)
          v72 = v8[2];
        if (v75 < v74)
          v74 = v75;
        if (v73 <= v71)
          v76 = v71;
        else
          v76 = v73;
        if (v73 >= v71)
          v73 = v71;
        if (v76 <= v74)
          v71 = v74;
        *v8 = v72;
        v8[1] = v71;
        if (v76 >= v74)
          v77 = v74;
        else
          v77 = v76;
        v8[2] = v77;
        v8[3] = v73;
        return result;
      default:
        if (v9 <= 191)
        {
          v78 = v8 + 1;
          v80 = v8 == a2 || v78 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v80)
            {
              v81 = 8;
              v82 = v8;
              do
              {
                v84 = *v82;
                v83 = v82[1];
                v82 = v78;
                if (v83 > v84)
                {
                  v85 = v81;
                  while (1)
                  {
                    *(unint64_t *)((char *)v8 + v85) = v84;
                    v86 = v85 - 8;
                    if (v85 == 8)
                      break;
                    v84 = *(unint64_t *)((char *)v8 + v85 - 16);
                    v85 -= 8;
                    if (v83 <= v84)
                    {
                      v87 = (unint64_t *)((char *)v8 + v86);
                      goto LABEL_157;
                    }
                  }
                  v87 = v8;
LABEL_157:
                  *v87 = v83;
                }
                v78 = v82 + 1;
                v81 += 8;
              }
              while (v82 + 1 != a2);
            }
          }
          else if (!v80)
          {
            do
            {
              v113 = *v7;
              v112 = v7[1];
              v7 = v78;
              if (v112 > v113)
              {
                do
                {
                  *v78 = v113;
                  v113 = *(v78 - 2);
                  --v78;
                }
                while (v112 > v113);
                *v78 = v112;
              }
              v78 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v88 = (v10 - 2) >> 1;
            v89 = v88;
            do
            {
              v90 = v89;
              if (v88 >= v89)
              {
                v91 = (2 * v89) | 1;
                v92 = &v8[v91];
                if (2 * v90 + 2 >= (uint64_t)v10)
                {
                  v93 = *v92;
                }
                else
                {
                  v93 = v92[1];
                  v94 = *v92 > v93;
                  if (*v92 < v93)
                    v93 = *v92;
                  if (v94)
                  {
                    ++v92;
                    v91 = 2 * v90 + 2;
                  }
                }
                v95 = &v8[v90];
                v96 = *v95;
                if (v93 <= *v95)
                {
                  do
                  {
                    *v95 = v93;
                    v95 = v92;
                    if (v88 < v91)
                      break;
                    v97 = (2 * v91) | 1;
                    v92 = &v8[v97];
                    v91 = 2 * v91 + 2;
                    if (v91 >= (uint64_t)v10)
                    {
                      v93 = *v92;
                      v91 = v97;
                    }
                    else
                    {
                      v93 = *v92;
                      result = v92 + 1;
                      v98 = v92[1];
                      if (*v92 >= v98)
                        v93 = v92[1];
                      if (*v92 <= v98)
                        v91 = v97;
                      else
                        ++v92;
                    }
                  }
                  while (v93 <= v96);
                  *v95 = v96;
                }
              }
              v89 = v90 - 1;
            }
            while (v90);
            v99 = (unint64_t)v9 >> 3;
            do
            {
              v100 = 0;
              v101 = *v8;
              v102 = v8;
              do
              {
                v103 = &v102[v100 + 1];
                v104 = (2 * v100) | 1;
                v100 = 2 * v100 + 2;
                if (v100 >= v99)
                {
                  v105 = *v103;
                  v100 = v104;
                }
                else
                {
                  v105 = *v103;
                  v106 = v103[1];
                  if (*v103 >= v106)
                    v105 = v103[1];
                  if (*v103 <= v106)
                    v100 = v104;
                  else
                    ++v103;
                }
                *v102 = v105;
                v102 = v103;
              }
              while (v100 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
              if (v103 == --a2)
              {
                *v103 = v101;
              }
              else
              {
                *v103 = *a2;
                *a2 = v101;
                v107 = (char *)v103 - (char *)v8 + 8;
                if (v107 >= 9)
                {
                  v108 = (((unint64_t)v107 >> 3) - 2) >> 1;
                  v109 = &v8[v108];
                  v110 = *v109;
                  v111 = *v103;
                  if (*v109 > *v103)
                  {
                    do
                    {
                      *v103 = v110;
                      v103 = v109;
                      if (!v108)
                        break;
                      v108 = (v108 - 1) >> 1;
                      v109 = &v8[v108];
                      v110 = *v109;
                    }
                    while (*v109 > v111);
                    *v103 = v111;
                  }
                }
              }
              v94 = v99-- <= 2;
            }
            while (!v94);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) <= v14)
        {
          if (v14 <= *(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v14 <= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v14 <= v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v14 > v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v14 <= v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v14 > v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v7[++v15];
        while (v16 > v14);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (v20 <= v14);
        }
        else
        {
          do
            v19 = *--v18;
          while (v19 <= v14);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v7[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            do
            {
              v24 = v22[1];
              ++v22;
              v16 = v24;
            }
            while (v24 > v14);
            do
            {
              v25 = *--v23;
              v21 = v25;
            }
            while (v25 <= v14);
          }
          while (v22 < v23);
          v26 = v22 - 1;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v7, v26);
        v8 = v26 + 1;
        result = (unint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

