@implementation UITableView

- (void)_layoutMarginsDidChangeFromOldMargins:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  objc_super v11;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  -[UIView layoutMargins](self, "layoutMargins");
  if (left != v9 || right != v8)
    -[UITableView _setNeedsRebuildGeometry](self, "_setNeedsRebuildGeometry");
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  -[UIView _layoutMarginsDidChangeFromOldMargins:](&v11, sel__layoutMarginsDidChangeFromOldMargins_, top, left, bottom, right);
}

+ (BOOL)_supportsInvalidatingFocusCache
{
  return 1;
}

- (UIEdgeInsets)_sectionContentInset
{
  double left;
  double top;
  double right;
  double bottom;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  UIEdgeInsets result;

  top = self->_sectionContentInset.top;
  left = self->_sectionContentInset.left;
  bottom = self->_sectionContentInset.bottom;
  right = self->_sectionContentInset.right;
  -[UITableView _effectiveSafeAreaInsets](self, "_effectiveSafeAreaInsets");
  v8 = v7;
  v10 = v9;
  -[UITableConstants defaultSectionContentInsetsForTableStyle:](self->_constants, "defaultSectionContentInsetsForTableStyle:", (*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3);
  v35 = v14;
  v36 = v13;
  v15 = v11;
  v16 = v12;
  if (v11 > 0.0 || v12 > 0.0)
  {
    v15 = v8 + v11;
    v16 = v10 + v12;
  }
  if (left == -1.0
    && (-[UIView traitCollection](self, "traitCollection"),
        v17 = (void *)objc_claimAutoreleasedReturnValue(),
        v18 = objc_msgSend(v17, "userInterfaceIdiom"),
        v17,
        left = 0.0,
        v18 != 3))
  {
    if ((*((_BYTE *)&self->_tableFlags + 25) & 0x40) != 0)
    {
      -[UIView layoutMargins](self, "layoutMargins");
      v15 = v31;
      if ((*((_DWORD *)&self->super.super._viewFlags + 4) & 0x80000) != 0)
      {
        -[UITableView _indexBarExtentFromEdge](self, "_indexBarExtentFromEdge");
        v15 = fmax(v15, v32);
      }
    }
  }
  else
  {
    v15 = v8 + left;
  }
  if (right == -1.0
    && (-[UIView traitCollection](self, "traitCollection"),
        v19 = (void *)objc_claimAutoreleasedReturnValue(),
        v20 = objc_msgSend(v19, "userInterfaceIdiom"),
        v19,
        right = 0.0,
        v20 != 3))
  {
    if ((*((_BYTE *)&self->_tableFlags + 25) & 0x40) != 0)
    {
      -[UIView layoutMargins](self, "layoutMargins");
      v16 = v33;
      if ((*((_DWORD *)&self->super.super._viewFlags + 4) & 0x80000) == 0)
      {
        -[UITableView _indexBarExtentFromEdge](self, "_indexBarExtentFromEdge");
        v16 = fmax(v16, v34);
      }
    }
  }
  else
  {
    v16 = v10 + right;
  }
  if (bottom == -1.0)
    v21 = v35;
  else
    v21 = bottom;
  if (top == -1.0)
    v22 = v36;
  else
    v22 = top;
  -[UITableView _tableContentInset](self, "_tableContentInset", *(_QWORD *)&v35);
  v24 = v22 + v23;
  v26 = v15 + v25;
  v28 = v21 + v27;
  v30 = v16 + v29;
  result.right = v30;
  result.bottom = v28;
  result.left = v26;
  result.top = v24;
  return result;
}

- (UIEdgeInsets)_tableContentInset
{
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGRect v20;
  UIEdgeInsets result;

  -[UIScrollView accessoryInsets](self, "accessoryInsets");
  v4 = v3 + 0.0;
  v6 = v5 + 0.0;
  -[UIView traitCollection](self, "traitCollection");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "userInterfaceIdiom");

  if (v8 == 3)
  {
    -[UITableView _effectiveSafeAreaInsets](self, "_effectiveSafeAreaInsets");
    v10 = v9;
    v12 = v11;
    -[UIView bounds](self, "bounds");
    v13 = CGRectGetWidth(v20) - v4 - v6 - v10 - v12;
    v14 = round((v13 + -520.0) * 0.25);
    v15 = v13 <= 520.0 || v14 <= 12.0;
    if (!v15 || (v14 = 12.0, v6 == 0.0))
      v6 = v6 + v14;
    v4 = v4 + v14;
  }
  v16 = 0.0;
  v17 = 0.0;
  v18 = v4;
  v19 = v6;
  result.right = v19;
  result.bottom = v17;
  result.left = v18;
  result.top = v16;
  return result;
}

- (UIEdgeInsets)_effectiveSafeAreaInsets
{
  _BOOL4 v3;
  double v4;
  double v5;
  double v6;
  double v7;
  UIEdgeInsets result;

  v3 = -[UITableView insetsContentViewsToSafeArea](self, "insetsContentViewsToSafeArea");
  v4 = 0.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  if (v3)
    -[UIView safeAreaInsets](self, "safeAreaInsets", 0.0, 0.0, 0.0, 0.0);
  result.right = v7;
  result.bottom = v6;
  result.left = v4;
  result.top = v5;
  return result;
}

- (BOOL)insetsContentViewsToSafeArea
{
  return (*((unsigned __int8 *)&self->_tableFlags + 27) >> 1) & 1;
}

- (double)_indexBarExtentFromEdge
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  double result;
  _BOOL4 v9;
  double Width;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "userInterfaceIdiom") == 3)
  {
    -[UIView window](self, "window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_screen");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "integerValue");

    result = 0.0;
    if (v7 != 2)
      return result;
  }
  else
  {

  }
  v9 = -[UITableView _isShowingIndex](self, "_isShowingIndex", result);
  result = 0.0;
  if (v9)
  {
    if ((*((_DWORD *)&self->super.super._viewFlags + 4) & 0x80000) != 0)
    {
      -[UIView frame](self->_index, "frame", 0.0);
      return CGRectGetMaxX(v13);
    }
    else
    {
      -[UIView bounds](self, "bounds", 0.0);
      Width = CGRectGetWidth(v11);
      -[UIView frame](self->_index, "frame");
      return Width - CGRectGetMinX(v12);
    }
  }
  return result;
}

- (BOOL)_isShowingIndex
{
  return self->_index && (*((_BYTE *)&self->_tableFlags + 18) & 0x80) == 0;
}

- (void)tintColorDidChange
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)UITableView;
  -[UIView tintColorDidChange](&v3, sel_tintColorDidChange);
  -[UITableView _resetDarkenedSeparatorColor](self, "_resetDarkenedSeparatorColor");
}

- (CGFloat)estimatedRowHeight
{
  return self->_estimatedRowHeight;
}

- (void)_willChangeToIdiom:(int64_t)a3 onScreen:(id)a4
{
  objc_super v6;

  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  -[UIView _willChangeToIdiom:onScreen:](&v6, sel__willChangeToIdiom_onScreen_, a3, a4);
  if (a3 == 3)
    -[UIScrollView setScrollEnabled:](self->_wrapperView, "setScrollEnabled:", 0);
}

- (void)setSeparatorStyle:(UITableViewCellSeparatorStyle)separatorStyle
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)&self->_tableFlags + 1);
  if ((HIWORD(v3) & 7) != separatorStyle)
  {
    *(_QWORD *)&self->_tableFlags = self->_tableFlags;
    *((_QWORD *)&self->_tableFlags + 1) = v3 & 0xFFF8FFFFFFFFFFFFLL | ((unint64_t)(separatorStyle & 7) << 48);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = (void *)-[NSMutableArray copy](self->_visibleCells, "copy", 0);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v13 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
          -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v10, 1);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          -[UITableView _updateSeparatorStyleForCell:atIndexPath:](self, "_updateSeparatorStyleForCell:atIndexPath:", v10, v11);
          -[UITableView _backgroundContentInset](self, "_backgroundContentInset");
          objc_msgSend(v10, "_setBackgroundInset:");

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v7);
    }

    -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
  }
}

- (void)setBackgroundColor:(id)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v4;
  uint64_t v5;

  p_tableFlags = &self->_tableFlags;
  v4 = *((_QWORD *)&self->_tableFlags + 2);
  if ((v4 & 0x4000000000) == 0)
  {
    v5 = *((_QWORD *)&self->_tableFlags + 3);
    *((_QWORD *)&self->_tableFlags + 2) = v4 | 0x4000000000;
    *((_QWORD *)&self->_tableFlags + 3) = v5;
    -[UITableView _setBackgroundColor:animated:](self, "_setBackgroundColor:animated:", a3, 0);
    *((_QWORD *)p_tableFlags + 2) &= ~0x4000000000uLL;
  }
}

- (void)_setBackgroundColor:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id (*v10)(uint64_t);
  void *v11;
  id v12;
  UITableView *v13;

  v4 = a4;
  v6 = a3;
  v8 = MEMORY[0x1E0C809B0];
  v9 = 3221225472;
  v10 = __44__UITableView__setBackgroundColor_animated___block_invoke_2;
  v11 = &unk_1E16B1B50;
  v7 = v6;
  v12 = v7;
  v13 = self;
  +[UIView conditionallyAnimate:withAnimation:layout:completion:](UIView, "conditionallyAnimate:withAnimation:layout:completion:", v4, &__block_literal_global_750_0, &v8, 0);
  if (-[UITableView _shouldSetIndexBackgroundColorToTableBackgroundColor](self, "_shouldSetIndexBackgroundColorToTableBackgroundColor", v8, v9, v10, v11)&& !self->_indexBackgroundColor)
  {
    -[UIView setBackgroundColor:](self->_index, "setBackgroundColor:", v7);
  }

}

- (BOOL)_shouldSetIndexBackgroundColorToTableBackgroundColor
{
  void *v3;
  BOOL v4;
  void *v5;

  -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = 0;
  }
  else
  {
    -[UIView traitCollection](self, "traitCollection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "userInterfaceIdiom") == 3;

  }
  return v4;
}

- (void)setSeparatorColor:(UIColor *)separatorColor
{
  UIColor *v5;
  UIColor **p_separatorColor;
  uint64_t v7;
  UIColor *v8;
  _BOOL4 v9;
  UIColor **p_darkenedSeparatorColor;
  UIColor *v11;
  UIColor *v12;
  void *v13;
  UIColor *v14;
  void *v15;
  UIColor *v16;

  v5 = separatorColor;
  p_separatorColor = &self->_separatorColor;
  if (self->_separatorColor != v5)
  {
    v16 = v5;
    objc_storeStrong((id *)&self->_separatorColor, separatorColor);
    if (!*p_separatorColor)
    {
      -[UITableView _defaultSeparatorColor](self, "_defaultSeparatorColor");
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = *p_separatorColor;
      *p_separatorColor = (UIColor *)v7;

    }
    -[UITableView _resetDarkenedSeparatorColor](self, "_resetDarkenedSeparatorColor");
    v9 = -[UITableView _shouldDrawDarkSeparators](self, "_shouldDrawDarkSeparators");
    p_darkenedSeparatorColor = &self->_separatorColor;
    if (v9)
      p_darkenedSeparatorColor = &self->_darkenedSeparatorColor;
    v11 = *p_darkenedSeparatorColor;
    -[UITableView _distributeSeparatorColor:](self, "_distributeSeparatorColor:", v11);
    v12 = *p_separatorColor;
    +[UIColor tableSeparatorDarkColor](UIColor, "tableSeparatorDarkColor");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[UIColor isEqual:](v12, "isEqual:", v13))
    {

    }
    else
    {
      v14 = *p_separatorColor;
      +[UIColor tableSeparatorLightColor](UIColor, "tableSeparatorLightColor");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v14) = -[UIColor isEqual:](v14, "isEqual:", v15);

      if ((v14 & 1) == 0)
        -[UITableView _setSeparatorsDrawInVibrantLightModeUIAppearance:](self, "_setSeparatorsDrawInVibrantLightModeUIAppearance:", MEMORY[0x1E0C9AAA0]);
    }

    v5 = v16;
  }

}

- (void)_resetDarkenedSeparatorColor
{
  UIColor *v3;
  UIColor *darkenedSeparatorColor;

  -[UIView _accessibilityHigherContrastTintColorForColor:](self, "_accessibilityHigherContrastTintColorForColor:", self->_separatorColor);
  v3 = (UIColor *)objc_claimAutoreleasedReturnValue();
  darkenedSeparatorColor = self->_darkenedSeparatorColor;
  self->_darkenedSeparatorColor = v3;

}

- (void)_setSeparatorsDrawInVibrantLightModeUIAppearance:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __64__UITableView__setSeparatorsDrawInVibrantLightModeUIAppearance___block_invoke;
  v6[3] = &unk_1E16B1B50;
  v6[4] = self;
  v7 = v4;
  v5 = v4;
  +[UIView _performSystemAppearanceModifications:](UIView, "_performSystemAppearanceModifications:", v6);

}

- (void)_distributeSeparatorColor:(id)a3
{
  id v4;
  NSMutableArray *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSMutableArray *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v5 = self->_visibleCells;
  v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v20;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v20 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * v9++), "setSeparatorColor:", v4);
      }
      while (v7 != v9);
      v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    }
    while (v7);
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v10 = self->_extraSeparators;
    v11 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v10, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v16;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v16 != v13)
            objc_enumerationMutation(v10);
          objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v14++), "setBackgroundColor:", v4, (_QWORD)v15);
        }
        while (v12 != v14);
        v12 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v10, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
      }
      while (v12);
    }

  }
  -[UIView setNeedsDisplay](self->_topSeparator, "setNeedsDisplay", (_QWORD)v15);

}

uint64_t __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    ++*(_QWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_5(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateAnimationDidStopWithOldVisibleViews:finished:context:", *(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 48));
}

uint64_t __46__UITableView__updateWithItems_updateSupport___block_invoke_3(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 32);
  if (*(_BYTE *)(a1 + 72))
    v3 = *(_QWORD *)(a1 + 56);
  else
    v3 = 0;
  return objc_msgSend(v2, "_startViewAnimationsForUpdate:withContext:swipeOccurrenceAnimatingDelete:oldVisibleViews:useCopyBlendingForAnimations:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v3, *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 73));
}

uint64_t __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutBelowIfNeeded");
}

uint64_t __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_6(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setBounds:", *(double *)(*(_QWORD *)(a1 + 40) + 128), *(double *)(*(_QWORD *)(a1 + 40) + 136), *(double *)(*(_QWORD *)(a1 + 40) + 144), *(double *)(*(_QWORD *)(a1 + 40) + 152));
}

uint64_t __57__UITableView__dequeueReusableViewOfType_withIdentifier___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "prepareForReuse");
}

- (void)_setSectionContentInset:(UIEdgeInsets)a3
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a3.left != self->_sectionContentInset.left
    || a3.top != self->_sectionContentInset.top
    || a3.right != self->_sectionContentInset.right
    || a3.bottom != self->_sectionContentInset.bottom)
  {
    self->_sectionContentInset = a3;
    -[UITableView _sectionContentInset](self, "_sectionContentInset");
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    -[UITableView _preparedCells](self, "_preparedCells", 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v21 != v18)
            objc_enumerationMutation(v15);
          objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * i), "_setBackgroundInset:", v8, v10, v12, v14);
        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v17);
    }

    -[UITableView _rebuildGeometryWithCompatibility](self, "_rebuildGeometryWithCompatibility");
  }
}

- (void)_restoreOrAdjustContentOffsetWithRowCount:(int64_t)a3 initialContentInsetTop:(double)a4
{
  uint64_t v5;
  double v7;
  double v8;
  double v9;
  double v10;
  UITableView *v11;
  double v12;
  double v13;
  UITableView *v14;
  double v15;
  double v16;
  double v17;
  UITableView *v18;
  double v19;

  v5 = *((_QWORD *)&self->_tableFlags + 3);
  if ((v5 & 4) != 0)
  {
    -[UITableView _ensurePreReloadVisibleRowRangeIsValidWithPostReloadRowCount:](self, "_ensurePreReloadVisibleRowRangeIsValidWithPostReloadRowCount:", a3);
    -[UIScrollView contentOffset](self, "contentOffset");
    v8 = v7;
    -[UITableView _contentOffsetYForRestoringScrollPositionOfFirstVisibleRowWithContentInsetTop:canGuessHeights:](self, "_contentOffsetYForRestoringScrollPositionOfFirstVisibleRowWithContentInsetTop:canGuessHeights:", 1, a4);
    v10 = v9;
    if (-[UIScrollView isDecelerating](self, "isDecelerating"))
    {
      -[UITableView setContentOffset:](self, "setContentOffset:", v8, v10);
      v11 = self;
      v12 = v8;
      v13 = v10;
LABEL_7:
      -[UIScrollView _updateDecelerationLastOffset:](v11, "_updateDecelerationLastOffset:", v12, v13);
      return;
    }
    if (-[UIScrollView isDragging](self, "isDragging"))
    {
      v14 = self;
      v15 = v8;
      v16 = v10;
    }
    else
    {
      if (-[UIScrollView isScrollAnimating](self, "isScrollAnimating"))
      {
        -[UITableView setContentOffset:](self, "setContentOffset:", v8, v10);
        if (-[UITableView _retargetScrollAnimation](self, "_retargetScrollAnimation")
          || -[UIScrollView _isScrollingToTop](self, "_isScrollingToTop"))
        {
          return;
        }
        v17 = v10 + self->_preReloadAnimationTargetOffsetDelta;
        v18 = self;
        v19 = v8;
LABEL_23:
        -[UITableView _validContentOffsetForProposedOffset:](v18, "_validContentOffsetForProposedOffset:", v19, v17);
        -[UIScrollView _updateScrollAnimationForChangedTargetOffset:](self, "_updateScrollAnimationForChangedTargetOffset:");
        return;
      }
      -[UITableView _validContentOffsetForProposedOffset:](self, "_validContentOffsetForProposedOffset:", v8, v10);
      v14 = self;
    }
    -[UITableView setContentOffset:](v14, "setContentOffset:", v15, v16);
    return;
  }
  if ((v5 & 8) == 0 || -[UIScrollView isDragging](self, "isDragging", a3, a4))
  {
    -[UITableView _retargetScrollAnimation](self, "_retargetScrollAnimation", a3, a4);
    return;
  }
  if (-[UIScrollView isDecelerating](self, "isDecelerating"))
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    v11 = self;
    goto LABEL_7;
  }
  -[UIScrollView _adjustContentOffsetIfNecessary](self, "_adjustContentOffsetIfNecessary");
  if (!-[UITableView _retargetScrollAnimation](self, "_retargetScrollAnimation")
    && -[UIScrollView isScrollAnimating](self, "isScrollAnimating")
    && !-[UIScrollView _isScrollingToTop](self, "_isScrollingToTop"))
  {
    -[UIScrollView _animatedTargetOffset](self, "_animatedTargetOffset");
    v18 = self;
    goto LABEL_23;
  }
}

- (void)setContentSize:(CGSize)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  -[UIScrollView setContentSize:](&v4, sel_setContentSize_, a3.width, a3.height);
  -[UITableView _updateWrapperFrame](self, "_updateWrapperFrame");
}

- (void)_updateWrapperFrame
{
  if ((*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0)
  {
    -[UITableView _frameForWrapper](self, "_frameForWrapper");
    -[UIScrollView setFrame:](self->_wrapperView, "setFrame:");
    -[UITableView _updateWrapperContentInset](self, "_updateWrapperContentInset");
  }
}

- (void)setContentOffset:(CGPoint)a3
{
  double y;
  double x;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  objc_super v24;

  y = a3.y;
  x = a3.x;
  -[UIScrollView contentOffset](self, "contentOffset");
  v7 = v6;
  v9 = v8;
  -[UITableView _contentInset](self, "_contentInset");
  v11 = v10;
  -[UITableView heightForAutohidingTableHeaderView](self, "heightForAutohidingTableHeaderView");
  v13 = v11 + v12;
  if (-[UIScrollView isTracking](self, "isTracking"))
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    if (v14 >= v13 && y < v13)
    {
      v18 = 0x40000000;
      goto LABEL_12;
    }
  }
  -[UIScrollView contentOffset](self, "contentOffset");
  if (v16 < v13 && y >= v13)
  {
    v18 = 0x20000000;
LABEL_12:
    v19 = *((_QWORD *)&self->_tableFlags + 3);
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFF9FFFFFFFLL | v18;
    *((_QWORD *)&self->_tableFlags + 3) = v19;
  }
  v24.receiver = self;
  v24.super_class = (Class)UITableView;
  -[UIScrollView setContentOffset:](&v24, sel_setContentOffset_, x, y);
  -[UIView traitCollection](self, "traitCollection");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v20, "userInterfaceIdiom") != 3)
  {
LABEL_19:

    goto LABEL_20;
  }
  -[UIView window](self, "window");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "_screen");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v23, "integerValue") != 2)
  {

    goto LABEL_19;
  }

  if (x != v7 || y != v9)
    -[UIScrollView _flashScrollIndicatorsPersistingPreviousFlashes](self, "_flashScrollIndicatorsPersistingPreviousFlashes");
LABEL_20:
  -[UITableView _updateBackgroundView](self, "_updateBackgroundView");
}

- (CGRect)_visibleBounds
{
  double v3;
  CGFloat x;
  double v5;
  CGFloat y;
  double v7;
  CGFloat width;
  double v9;
  CGFloat height;
  double v11;
  double v12;
  double v13;
  double v14;
  objc_super v15;
  CGRect v16;
  CGRect v17;
  CGRect result;

  v15.receiver = self;
  v15.super_class = (Class)UITableView;
  -[UIScrollView visibleBounds](&v15, sel_visibleBounds);
  x = v3;
  y = v5;
  width = v7;
  height = v9;
  if (-[UITableView _shouldUnionVisibleBounds](self, "_shouldUnionVisibleBounds"))
  {
    v16.origin.x = x;
    v16.origin.y = y;
    v16.size.width = width;
    v16.size.height = height;
    v17 = CGRectUnion(v16, self->_visibleBounds);
    x = v17.origin.x;
    y = v17.origin.y;
    width = v17.size.width;
    height = v17.size.height;
  }
  v11 = x;
  v12 = y;
  v13 = width;
  v14 = height;
  result.size.height = v14;
  result.size.width = v13;
  result.origin.y = v12;
  result.origin.x = v11;
  return result;
}

- (BOOL)_shouldUnionVisibleBounds
{
  void *v3;
  void *v4;
  int v5;
  int v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  BOOL v11;
  CGRect v13;

  +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "scrollManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isScrollingScrollableContainer:", self);

  if ((*((_BYTE *)&self->_tableFlags + 23) & 4) != 0
    || +[UIView _isInAnimationBlock](UIView, "_isInAnimationBlock"))
  {
    v6 = 0;
    goto LABEL_4;
  }
  -[UIView window](self, "window");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isRotating") | v5) == 1)
  {
    v6 = 1;
LABEL_4:
    -[UIView bounds](self, "bounds");
    v13.origin.x = v7;
    v13.origin.y = v8;
    v13.size.width = v9;
    v13.size.height = v10;
    v11 = CGRectIntersectsRect(self->_visibleBounds, v13);
    if (!v6)
      goto LABEL_10;
    goto LABEL_9;
  }
  v11 = 0;
LABEL_9:

LABEL_10:
  return v11;
}

- (void)_updateBackgroundView
{
  UIView *backgroundView;

  -[UITableView _updateBackgroundViewFrame](self, "_updateBackgroundViewFrame");
  backgroundView = self->_backgroundView;
  if (backgroundView)
    -[UIScrollView _moveContentSubview:toBack:](self, "_moveContentSubview:toBack:", backgroundView, 1);
}

- (void)_updateBackgroundViewFrame
{
  -[UIView bounds](self, "bounds");
  -[UIView setFrame:](self->_backgroundView, "setFrame:");
}

- (double)heightForAutohidingTableHeaderView
{
  UITableViewRowData *rowData;
  double heightForTableHeaderViewHiding;

  rowData = self->_rowData;
  if (!rowData)
    return 0.0;
  heightForTableHeaderViewHiding = rowData->_heightForTableHeaderViewHiding;
  if (heightForTableHeaderViewHiding < 0.0)
    heightForTableHeaderViewHiding = -[UITableViewRowData heightForTableHeaderView]((uint64_t)rowData);
  return fmax(heightForTableHeaderViewHiding, 0.0);
}

- (void)_updateForChangedEdgesConvertingSafeAreaToContentInsetWithOldSystemContentInset:(UIEdgeInsets)a3 oldEdgesPropagatingSafeAreaInsets:(unint64_t)a4 adjustContentOffsetIfNecessary:(BOOL)a5
{
  unsigned __int8 v5;
  objc_super v7;

  v5 = a4;
  v7.receiver = self;
  v7.super_class = (Class)UITableView;
  -[UIScrollView _updateForChangedEdgesConvertingSafeAreaToContentInsetWithOldSystemContentInset:oldEdgesPropagatingSafeAreaInsets:adjustContentOffsetIfNecessary:](&v7, sel__updateForChangedEdgesConvertingSafeAreaToContentInsetWithOldSystemContentInset_oldEdgesPropagatingSafeAreaInsets_adjustContentOffsetIfNecessary_, a4, a5, a3.top, a3.left, a3.bottom, a3.right);
  if (((-[UIScrollView _edgesPropagatingSafeAreaInsetsToSubviews](self, "_edgesPropagatingSafeAreaInsetsToSubviews") ^ v5) & 5) != 0)
  {
    if (dyld_program_sdk_at_least())
      -[UITableView _setNeedsRebuildGeometry](self, "_setNeedsRebuildGeometry");
  }
}

- (void)_sendGeometryAffectingContentBottomChangedToScrollObservers
{
  objc_super v2;

  if ((*((_BYTE *)&self->_tableFlags + 28) & 1) == 0)
  {
    v2.receiver = self;
    v2.super_class = (Class)UITableView;
    -[UIScrollView _sendGeometryAffectingContentBottomChangedToScrollObservers](&v2, sel__sendGeometryAffectingContentBottomChangedToScrollObservers);
  }
}

- (CGRect)_frameForWrapper
{
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGFloat v16;
  double Height;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGRect v24;
  CGRect v25;
  CGRect result;

  -[UIView bounds](self, "bounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  -[UITableView _sectionContentInset](self, "_sectionContentInset");
  v12 = v11;
  v14 = v13;
  v24.origin.x = v4;
  v24.origin.y = v6;
  v24.size.width = v8;
  v24.size.height = v10;
  v15 = CGRectGetWidth(v24) - (v12 + v14);
  if (v15 <= 0.0)
    v16 = v8;
  else
    v16 = v15;
  if (v15 > 0.0)
    v4 = v12;
  v25.origin.y = 0.0;
  v25.origin.x = v4;
  v25.size.width = v16;
  v25.size.height = v10;
  Height = CGRectGetHeight(v25);
  -[UIScrollView contentSize](self, "contentSize");
  if (Height >= v18)
    v19 = Height;
  else
    v19 = v18;
  if (v19 >= 1.0)
    v20 = v19;
  else
    v20 = 1.0;
  v21 = 0.0;
  v22 = v4;
  v23 = v16;
  result.size.height = v20;
  result.size.width = v23;
  result.origin.y = v21;
  result.origin.x = v22;
  return result;
}

- (void)_updateWrapperContentInset
{
  double v3;
  double v4;

  -[UIView bounds](self->_wrapperView, "bounds");
  -[UIScrollView setContentSize:](self->_wrapperView, "setContentSize:", v3, v4);
}

- (BOOL)_retargetScrollAnimation
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = -[UIScrollView isScrollAnimating](self, "isScrollAnimating");
  if (v3)
  {
    if (!self->_targetIndexPathForScrolling)
      goto LABEL_7;
    v3 = -[UITableView _estimatesHeights](self, "_estimatesHeights");
    if (v3)
    {
      v4 = -[NSIndexPath section](self->_targetIndexPathForScrolling, "section");
      v5 = -[NSIndexPath row](self->_targetIndexPathForScrolling, "row");
      if (v4 < -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1)&& v5 < -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", v4, 1))
      {
        -[UIScrollView contentOffset](self, "contentOffset", -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v5, v4, 0));
        -[UITableView _validContentOffsetForProposedOffset:](self, "_validContentOffsetForProposedOffset:");
        -[UIScrollView _updateScrollAnimationForChangedTargetOffset:](self, "_updateScrollAnimationForChangedTargetOffset:");
        LOBYTE(v3) = 1;
        return v3;
      }
LABEL_7:
      LOBYTE(v3) = 0;
    }
  }
  return v3;
}

- (double)_heightForTableHeader
{
  double v3;
  void *v4;
  double v5;
  CGRect v7;

  if (-[UITableView _shouldUseNewHeaderFooterBehavior](self, "_shouldUseNewHeaderFooterBehavior"))
  {
    v3 = 0.0;
    if ((*((_BYTE *)&self->_tableFlags + 7) & 0x40) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "heightForHeaderInTableView:", self);
      v3 = v5;

    }
    if (v3 == -1.0)
      return 0.0;
    else
      return v3;
  }
  else
  {
    -[UIView frame](self->_tableHeaderView, "frame");
    return CGRectGetHeight(v7);
  }
}

- (void)_safeAreaInsetsDidChangeFromOldInsets:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  objc_super v11;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  -[UIView safeAreaInsets](self, "safeAreaInsets");
  if (left != v9 || right != v8)
  {
    -[UITableView _rebuildGeometry](self, "_rebuildGeometry");
    -[UISwipeActionController updateLayout](self->_swipeActionController, "updateLayout");
  }
  -[UITableView _setNeedsIndexBarInsetsUpdate](self, "_setNeedsIndexBarInsetsUpdate");
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  -[UIView _safeAreaInsetsDidChangeFromOldInsets:](&v11, sel__safeAreaInsetsDidChangeFromOldInsets_, top, left, bottom, right);
}

- (BOOL)_shouldDrawThickSeparators
{
  int v3;
  void *v4;
  NSString *v5;
  BOOL IsAccessibilityCategory;

  v3 = dyld_program_sdk_at_least();
  if (v3)
  {
    -[UIView traitCollection](self, "traitCollection");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "preferredContentSizeCategory");
    v5 = (NSString *)objc_claimAutoreleasedReturnValue();
    IsAccessibilityCategory = UIContentSizeCategoryIsAccessibilityCategory(v5);

    LOBYTE(v3) = IsAccessibilityCategory;
  }
  return v3;
}

- (UIEdgeInsets)_rawSeparatorInset
{
  double top;
  double left;
  double bottom;
  double right;
  UIEdgeInsets result;

  top = self->_separatorInset.top;
  left = self->_separatorInset.left;
  bottom = self->_separatorInset.bottom;
  right = self->_separatorInset.right;
  result.right = right;
  result.bottom = bottom;
  result.left = left;
  result.top = top;
  return result;
}

- (UIEdgeInsets)_cellSafeAreaInsets
{
  double v2;
  double v3;
  double v4;
  double v5;
  UIEdgeInsets result;

  if (self->_wrapperView)
    self = (UITableView *)self->_wrapperView;
  -[UIView safeAreaInsets](self, "safeAreaInsets");
  result.right = v5;
  result.bottom = v4;
  result.left = v3;
  result.top = v2;
  return result;
}

uint64_t __48__UITableView__configureCellPrefetchingHandlers__block_invoke_3(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;

  v5 = a2;
  if ((objc_msgSend(a3, "_isAnimating") & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = -[UITableViewRowData globalRowForRowAtIndexPath:](*(_QWORD *)(a1[4] + 2080), v5);
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v6 = 0;
    }
    else
    {
      v8 = a1[5];
      v10 = v7 >= v8;
      v9 = v7 - v8;
      v10 = !v10 || v9 >= a1[6];
      v6 = !v10;
    }
  }

  return v6;
}

id __46__UITableView__updateWithItems_updateSupport___block_invoke(uint64_t a1, void *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v3 = -[UITableViewRowData globalRowForRowAtIndexPath:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), a2);
  v4 = -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:](*(_QWORD *)(a1 + 32), v3);
  -[UITableViewRowData indexPathForRowAtGlobalRow:](*(_QWORD **)(*(_QWORD *)(a1 + 40) + 2080), v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (double)_heightForRowAtIndexPath:(id)a3
{
  id v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;

  v4 = a3;
  -[UITableView _classicHeightForRowAtIndexPath:](self, "_classicHeightForRowAtIndexPath:", v4);
  v6 = v5;
  if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0 && v5 == -1.0)
  {
    -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v4);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    if (!v7)
      v7 = -[UITableView _createPreparedCellForRowAtIndexPath:willDisplay:](self, "_createPreparedCellForRowAtIndexPath:willDisplay:", v4, 0);
    -[UITableView _heightForCell:atIndexPath:](self, "_heightForCell:atIndexPath:", v7, v4);
    v6 = v8;

  }
  else if (v5 == -1.0)
  {
    -[UITableConstants defaultRowHeightForTableView:](self->_constants, "defaultRowHeightForTableView:", self);
    v6 = v9;
  }

  return v6;
}

- (double)_heightForCell:(id)a3 atIndexPath:(id)a4
{
  double v7;
  double rowHeight;
  double v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  CGFloat Width;
  double v17;
  double v18;
  double v19;
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;
  void *v21;
  void *v22;
  uint64_t v23;
  double result;
  CGRect v25;
  CGRect v26;

  if ((objc_msgSend(a3, "_needsSetup") & 1) != 0
    || (objc_msgSend(a3, "_needsHeightCalculation") & 1) != 0
    || (objc_msgSend(a3, "needsUpdateConstraints") & 1) != 0
    || a3 && (objc_msgSend(*((id *)a3 + 21), "needsLayout") & 1) != 0)
  {
    -[UITableView _classicHeightForRowAtIndexPath:](self, "_classicHeightForRowAtIndexPath:", a4);
    rowHeight = v7;
    if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0 && v7 == -1.0)
    {
      if (!dyld_program_sdk_at_least()
        || (rowHeight = -1.0, -[UITableView _estimatesRowHeights](self, "_estimatesRowHeights")))
      {
        v9 = -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)self->_rowData, objc_msgSend(a4, "row"), objc_msgSend(a4, "section"), 1);
        v11 = v10;
        v13 = v12;
        v15 = v14;
        -[UITableView _prepareToSizeView:](self, "_prepareToSizeView:", a3);
        v25.origin.x = v9;
        v25.origin.y = v11;
        v25.size.width = v13;
        v25.size.height = v15;
        Width = CGRectGetWidth(v25);
        LODWORD(v17) = 1148846080;
        LODWORD(v18) = 1112014848;
        objc_msgSend(a3, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", Width, 0.0, v17, v18);
        rowHeight = v19;
        if (v19 <= 0.0)
          rowHeight = self->_rowHeight;
        intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
        if (intrinsicContentSizeInvalidationContext)
          -[UICollectionViewLayoutInvalidationContext _removeInvalidatedItemIndexPath:](intrinsicContentSizeInvalidationContext, "_removeInvalidatedItemIndexPath:", a4);
      }
    }
    objc_msgSend(a3, "_detailTextLabel:", 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "text");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "length");

    if (rowHeight == -1.0)
      -[UITableConstants defaultRowHeightForTableView:cellStyle:hasDetailText:](self->_constants, "defaultRowHeightForTableView:cellStyle:hasDetailText:", self, objc_msgSend(a3, "style"), v23 != 0);
    else
      return rowHeight;
  }
  else
  {
    objc_msgSend(a3, "frame");
    return CGRectGetHeight(v26);
  }
  return result;
}

- (BOOL)_estimatesRowHeights
{
  UITableView *v2;
  double estimatedRowHeight;

  v2 = self;
  estimatedRowHeight = self->_estimatedRowHeight;
  LOBYTE(self) = 1;
  if (estimatedRowHeight != -1.0 && estimatedRowHeight <= 0.0)
    LODWORD(self) = (*((unsigned __int8 *)&v2->_tableFlags + 4) >> 5) & 1;
  return (char)self;
}

- (double)_classicHeightForRowAtIndexPath:(id)a3
{
  id v5;
  double rowHeight;
  void *v7;
  double v8;
  int v9;
  _BOOL4 v10;
  void *v11;
  unint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 4) & 1) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "tableView:heightForRowAtIndexPath:", self, v5);
    rowHeight = v8;

    v9 = dyld_program_sdk_at_least();
    v10 = rowHeight < 0.0;
    if (rowHeight == -1.0)
      v10 = 0;
    if (v9)
    {
      if (v10)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 18541, CFSTR("Invalid row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&rowHeight);

      }
    }
    else if (v10)
    {
      v13 = _classicHeightForRowAtIndexPath____s_category;
      if (!_classicHeightForRowAtIndexPath____s_category)
      {
        v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v13, (unint64_t *)&_classicHeightForRowAtIndexPath____s_category);
      }
      v14 = *(NSObject **)(v13 + 8);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v16 = rowHeight;
        _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "Invalid row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
  }
  else
  {
    rowHeight = self->_rowHeight;
    if (rowHeight == -1.0 && (*((_BYTE *)&self->_tableFlags + 24) & 0x10) == 0)
      rowHeight = 44.0;
  }

  return rowHeight;
}

- (void)_prepareToSizeView:(id)a3
{
  id v4;

  v4 = a3;
  objc_msgSend(v4, "updateTraitsIfNeeded");
  -[UIView _eagerlyUpdateSafeAreaInsetsToDescendant:](self, v4);

}

- (id)_existingCellForRowAtIndexPath:(id)a3
{
  id v4;
  UIView *v5;
  void *v6;
  unint64_t v7;
  NSUInteger location;
  NSUInteger v9;
  BOOL v10;

  v4 = a3;
  if (v4)
  {
    if (-[UITableView _hasFocusedCellForIndexPath:](self, "_hasFocusedCellForIndexPath:", v4))
    {
      -[UITableView _focusedCell](self, "_focusedCell");
      v5 = (UIView *)objc_claimAutoreleasedReturnValue();
    }
    else if (self->_firstResponderIndexPath
           && self->_firstResponderViewType == 1
           && objc_msgSend(v4, "isEqual:"))
    {
      v5 = self->_firstResponderView;
    }
    else
    {
      v7 = -[UITableView _visibleGlobalRowForRowAtIndexPathAdjustedForCurrentUpdate:](self, "_visibleGlobalRowForRowAtIndexPathAdjustedForCurrentUpdate:", v4);
      location = self->_visibleRows.location;
      v9 = v7 - location;
      v10 = v7 < location || v9 >= self->_visibleRows.length;
      if (v10 || v9 >= -[NSMutableArray count](self->_visibleCells, "count"))
      {
        -[_UITableViewSubviewManager prefetchedCellAtIndexPath:]((id *)&self->_subviewManager->super.isa, (uint64_t)v4);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        if (v6)
          goto LABEL_17;
        -[NSMutableDictionary objectForKeyedSubscript:](self->_tentativeCells, "objectForKeyedSubscript:", v4);
        v5 = (UIView *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        -[NSMutableArray objectAtIndex:](self->_visibleCells, "objectAtIndex:", v9);
        v5 = (UIView *)objc_claimAutoreleasedReturnValue();
      }
    }
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
LABEL_17:

  return v6;
}

- (BOOL)_hasFocusedCellForIndexPath:(id)a3
{
  id v4;
  void *v5;
  char v6;

  v4 = a3;
  v5 = v4;
  if (self->_focusedCell && self->_focusedCellIndexPath && self->_focusedViewType == 1)
    v6 = objc_msgSend(v4, "isEqual:");
  else
    v6 = 0;

  return v6;
}

- (int64_t)_visibleGlobalRowForRowAtIndexPathAdjustedForCurrentUpdate:(id)a3
{
  int64_t v4;
  _UITableViewUpdateSupport *currentUpdate;

  v4 = -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:", a3);
  currentUpdate = self->_currentUpdate;
  if (currentUpdate)
    return -[_UITableViewUpdateSupport initialGlobalIndexForFinalGlobalIndex:]((uint64_t)currentUpdate, v4);
  else
    return v4;
}

- (int64_t)globalRowForRowAtIndexPath:(id)a3
{
  return -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_rowData, a3);
}

- (BOOL)allowsMultipleSelection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 17) >> 4) & 1;
}

- (BOOL)_isEditingRowAtIndexPath:(id)a3
{
  id v4;
  BOOL v5;
  uint64_t v6;
  NSIndexPath *swipedIndexPath;

  v4 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0)
  {
    v6 = *((_QWORD *)&self->_tableFlags + 2);
    if ((v6 & 0x100000000000) == 0)
    {
      v5 = 1;
      goto LABEL_10;
    }
    swipedIndexPath = self->_swipedIndexPath;
    if (!swipedIndexPath
      || -[NSIndexPath isEqual:](swipedIndexPath, "isEqual:", v4)
      && (*((_BYTE *)&self->_tableFlags + 14) & 0x80) == 0
      && (v6 = *((_QWORD *)&self->_tableFlags + 2), (v6 & 0x40000000000) == 0))
    {
      v5 = (v6 & 0x800000000000) == 0;
      goto LABEL_10;
    }
  }
  v5 = 0;
LABEL_10:

  return v5;
}

- (id)_visibleCellForGlobalRow:(int64_t)a3
{
  int64_t v3;
  void *v5;

  v3 = a3 - self->_visibleRows.location;
  if (v3 < 0 || v3 >= (unint64_t)-[NSMutableArray count](self->_visibleCells, "count"))
  {
    v5 = 0;
  }
  else
  {
    -[NSMutableArray objectAtIndex:](self->_visibleCells, "objectAtIndex:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v5;
}

- (BOOL)_shouldUseNewHeaderFooterBehavior
{
  return (*((_BYTE *)&self->_tableFlags + 7) & 0xC0) != 0;
}

- (id)_tableHeaderView
{
  return self->_tableHeaderView;
}

- (void)_coalesceContentSizeUpdateWithDelta:(double)a3
{
  self->_coalescedContentSizeDelta = self->_coalescedContentSizeDelta + a3;
  if (a3 != 0.0)
    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
}

- (double)_sectionHeaderToFirstRowPadding
{
  double result;

  result = self->_sectionHeaderFooterPadding;
  if (result <= 0.0)
    -[UITableConstants defaultPaddingBetweenHeaderAndRows](self->_constants, "defaultPaddingBetweenHeaderAndRows");
  return result;
}

- (UITableViewCell)_swipeToDeleteCell
{
  return self->_swipeToDeleteCell;
}

- (void)_reusePrefetchedCell:(id)a3 withIndexPath:(id)a4
{
  if ((-[NSMutableArray containsObject:](self->_visibleCells, "containsObject:") & 1) == 0)
    -[UITableView _reuseTableViewCell:withIndexPath:didEndDisplaying:](self, "_reuseTableViewCell:withIndexPath:didEndDisplaying:", a3, a4, 0);
}

id __44__UITableView__setBackgroundColor_animated___block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)UITableView;
  return objc_msgSendSuper2(&v3, sel_setBackgroundColor_, v1);
}

- (id)_createPreparedCellForRowAtIndexPath:(id)a3 willDisplay:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  id v7;

  v4 = a4;
  v6 = a3;
  v7 = -[UITableView _createPreparedCellForGlobalRow:withIndexPath:willDisplay:](self, "_createPreparedCellForGlobalRow:withIndexPath:willDisplay:", -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:", v6), v6, v4);

  return v7;
}

- (BOOL)allowsMultipleSelectionDuringEditing
{
  return (*((unsigned __int8 *)&self->_tableFlags + 17) >> 5) & 1;
}

- (double)_sectionCornerRadius
{
  return self->_sectionCornerRadius;
}

- (void)setRowHeight:(CGFloat)rowHeight
{
  self->_rowHeight = rowHeight;
  if ((*((_BYTE *)&self->_tableFlags + 14) & 7) != 0)
    -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
}

uint64_t __29__UITableView__updateRowData__block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "rowHeight");
  return objc_msgSend(*(id *)(a1 + 32), "setRowHeight:");
}

uint64_t __64__UITableView__setSeparatorsDrawInVibrantLightModeUIAppearance___block_invoke(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = objc_msgSend(*(id *)(a1 + 40), "BOOLValue");
  v3 = 0x20000000000000;
  if (!v2)
    v3 = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3096) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3096) & 0xFFDFFFFFFFFFFFFFLL | v3;
  return objc_msgSend(*(id *)(a1 + 32), "_setSeparatorBackdropOverlayBlendMode:", 0);
}

- (void)_setSeparatorsDrawAsOverlay:(BOOL)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSMutableArray *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  NSMutableArray *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t k;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  p_tableFlags = &self->_tableFlags;
  v6 = *((_QWORD *)&self->_tableFlags + 2);
  v5 = *((_QWORD *)&self->_tableFlags + 3);
  v7 = 0x400000000000;
  v8 = v6 & 0xFFE3FFFFFFFFFFFFLL | 0x4000000000000;
  if ((v6 & 0x1C000000000000) != 0)
    v8 = *((_QWORD *)&self->_tableFlags + 2);
  else
    v7 = 0x400000000000;
  if (a3)
  {
    v6 = v8;
    v5 = *((_QWORD *)&self->_tableFlags + 3);
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)&self->_tableFlags + 2) = v6 & 0xFFFFBFFFFFFFFFFFLL | v7;
  *((_QWORD *)&self->_tableFlags + 3) = v5;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v9 = self->_visibleCells;
  v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v37 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
        if ((*((_BYTE *)p_tableFlags + 22) & 0x20) != 0)
        {
          objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * i), "_setSeparatorDrawsInVibrantLightMode:", 1);
          v15 = 0;
        }
        else
        {
          objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * i), "_setSeparatorDrawsInVibrantLightMode:", 0);
          v15 = (*((_QWORD *)p_tableFlags + 2) >> 50) & 7;
        }
        objc_msgSend(v14, "_setSeparatorBackdropOverlayBlendMode:", v15);
      }
      v11 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
    }
    while (v11);
  }

  if ((*((_BYTE *)p_tableFlags + 22) & 0x20) != 0)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v16 = self->_extraSeparators;
    v23 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
    if (v23)
    {
      v24 = v23;
      v25 = *(_QWORD *)v33;
      do
      {
        for (j = 0; j != v24; ++j)
        {
          if (*(_QWORD *)v33 != v25)
            objc_enumerationMutation(v16);
          v27 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * j);
          objc_msgSend(v27, "_setDrawsAsBackdropOverlayWithBlendMode:", 0);
          objc_msgSend(v27, "setDrawsWithVibrantLightMode:", 1);
          objc_msgSend(v27, "setBackgroundColor:", 0);
        }
        v24 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
      }
      while (v24);
    }
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v16 = self->_extraSeparators;
    v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v28, v40, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v29;
      do
      {
        for (k = 0; k != v18; ++k)
        {
          if (*(_QWORD *)v29 != v19)
            objc_enumerationMutation(v16);
          v21 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * k);
          objc_msgSend(v21, "setDrawsWithVibrantLightMode:", 0, (_QWORD)v28);
          objc_msgSend(v21, "_setDrawsAsBackdropOverlayWithBlendMode:", (*((_QWORD *)p_tableFlags + 2) >> 50) & 7);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            -[UITableView separatorColor](self, "separatorColor");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "setBackgroundColor:", v22);

          }
        }
        v18 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v28, v40, 16);
      }
      while (v18);
    }
  }

}

- (void)_setSeparatorBackdropOverlayBlendMode:(int64_t)a3
{
  *((_QWORD *)&self->_tableFlags + 2) = ((unint64_t)(a3 & 7) << 50) | ((unint64_t)(a3 != 0) << 46) | *((_QWORD *)&self->_tableFlags + 2) & 0xFFE3BFFFFFFFFFFFLL;
  -[UITableView _setSeparatorsDrawAsOverlay:](self, "_setSeparatorsDrawAsOverlay:");
}

void __48__UITableView__applyAppearanceDefaultsForStyle___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  objc_msgSend(*(id *)(a1 + 32), "_constants");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultBackgroundColorForTableViewStyle:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setBackgroundColor:", v3);

  objc_msgSend(*(id *)(a1 + 32), "_constants");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "defaultBackgroundEffectsForTableViewStyle:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "_setBackgroundEffects:", v5);

  objc_msgSend(*(id *)(a1 + 32), "_constants");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "defaultSeparatorColorForTableViewStyle:", *(_QWORD *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setSeparatorColor:", v7);

  objc_msgSend(*(id *)(a1 + 32), "_constants");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setSeparatorStyle:", objc_msgSend(v8, "defaultSeparatorStyleForTableViewStyle:", *(_QWORD *)(a1 + 40)));

  objc_msgSend(*(id *)(a1 + 32), "_constants");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "defaultSeparatorVisualEffectForTableViewStyle:", *(_QWORD *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setSeparatorEffect:", v9);

}

- (void)setSeparatorEffect:(UIVisualEffect *)separatorEffect
{
  UIVisualEffect *v4;
  UIVisualEffect *v5;
  UIVisualEffect *v6;
  UIVisualEffect *v7;
  NSMutableArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  char isKindOfClass;
  NSMutableArray *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = separatorEffect;
  v5 = v4;
  if (self->_separatorEffect != v4)
  {
    v6 = (UIVisualEffect *)-[UIVisualEffect copy](v4, "copy");
    v7 = self->_separatorEffect;
    self->_separatorEffect = v6;

    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v8 = self->_visibleCells;
    v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v26 != v11)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * i), "_setSeparatorEffect:", self->_separatorEffect);
        }
        v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
      }
      while (v10);
    }

    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v14 = self->_extraSeparators;
    v15 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v22;
      do
      {
        for (j = 0; j != v16; ++j)
        {
          if (*(_QWORD *)v22 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * j);
          objc_msgSend(v19, "setSeparatorEffect:", self->_separatorEffect, (_QWORD)v21);
          if ((isKindOfClass & 1) != 0)
          {
            objc_msgSend(v19, "setBackgroundColor:", 0);
          }
          else
          {
            -[UITableView separatorColor](self, "separatorColor");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "setBackgroundColor:", v20);

          }
        }
        v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
      }
      while (v16);
    }

  }
}

- (CGSize)_sizeForHeaderInSection:(int64_t)a3
{
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGSize result;

  -[UITableView _classicHeightForHeaderInSection:](self, "_classicHeightForHeaderInSection:");
  v6 = v5;
  -[UITableView _fullWidthHeaderWidth](self, "_fullWidthHeaderWidth");
  v8 = v7;
  if (-[UITableView _supplementarySectionHeadersHugContent](self, "_supplementarySectionHeadersHugContent"))
  {
    -[UITableView _existingOrTentativeHeaderViewCreatedIfNeededForSection:](self, "_existingOrTentativeHeaderViewCreatedIfNeededForSection:", a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v9;
    if (v6 == -1.0)
      v13 = 0.0;
    else
      v13 = v6;
    LODWORD(v10) = 1112014848;
    if (v6 == -1.0)
      *(float *)&v11 = 50.0;
    else
      *(float *)&v11 = 1000.0;
    objc_msgSend(v9, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v8, v13, v10, v11);
    if (v6 == -1.0)
    {
      if (v14 > v8 || v14 <= 0.0)
      {
        LODWORD(v16) = 1148846080;
        LODWORD(v17) = 1112014848;
        objc_msgSend(v12, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v8, 0.0, v16, v17);
      }
      v8 = v14;
      v6 = v15;
    }
    else
    {
      v8 = fmin(v14, v8);
    }

  }
  else if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0 && v6 == -1.0)
  {
    -[UITableView _existingOrTentativeHeaderViewCreatedIfNeededForSection:](self, "_existingOrTentativeHeaderViewCreatedIfNeededForSection:", a3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _heightForHeaderView:inSection:](self, "_heightForHeaderView:inSection:", v18, a3);
    v6 = v19;

  }
  else if (v6 == -1.0)
  {
    -[UITableView _defaultSectionHeaderHeight](self, "_defaultSectionHeaderHeight");
    v6 = v20;
  }
  v21 = v8;
  v22 = v6;
  result.height = v22;
  result.width = v21;
  return result;
}

- (double)_classicHeightForHeaderInSection:(int64_t)a3
{
  double sectionHeaderHeight;
  double result;
  void *v8;
  double v9;
  int v10;
  _BOOL4 v11;
  void *v12;
  unint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)&self->_tableFlags + 4) & 2) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "tableView:heightForHeaderInSection:", self, a3);
    sectionHeaderHeight = v9;

    v10 = dyld_program_sdk_at_least();
    v11 = sectionHeaderHeight < 0.0;
    if (sectionHeaderHeight == -1.0)
      v11 = 0;
    if (v10)
    {
      if (v11)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 18579, CFSTR("Invalid section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&sectionHeaderHeight);

      }
    }
    else if (v11)
    {
      v13 = _classicHeightForHeaderInSection____s_category;
      if (!_classicHeightForHeaderInSection____s_category)
      {
        v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v13, (unint64_t *)&_classicHeightForHeaderInSection____s_category);
      }
      v14 = *(NSObject **)(v13 + 8);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v16 = sectionHeaderHeight;
        _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "Invalid section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
  }
  else
  {
    sectionHeaderHeight = self->_sectionHeaderHeight;
    if (sectionHeaderHeight == -1.0)
    {
      sectionHeaderHeight = -1.0;
      if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) == 0)
      {
        -[UITableView _defaultSectionHeaderHeight](self, "_defaultSectionHeaderHeight", a3);
        return result;
      }
    }
  }
  return sectionHeaderHeight;
}

- (BOOL)_delegateWantsHeaderForSection:(int64_t)a3
{
  double sectionHeaderHeight;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v9;
  void *v10;
  double v11;
  double v13;
  double v14;
  void *v15;
  char v16;

  sectionHeaderHeight = self->_sectionHeaderHeight;
  v6 = -[UITableView _shouldShowHeadersAndFooters](self, "_shouldShowHeadersAndFooters");
  if (v6)
  {
    if ((*((_BYTE *)&self->_tableFlags + 7) & 1) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "tableView:wantsHeaderForSection:", self, a3);

      LOBYTE(v6) = v16;
      return v6;
    }
    v7 = -[UITableView _estimatesSectionHeaderHeights](self, "_estimatesSectionHeaderHeights");
    if (sectionHeaderHeight != -1.0 || !v7)
    {
      if ((*((_BYTE *)&self->_tableFlags + 4) & 2) == 0)
        goto LABEL_22;
      v9 = v7;
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "tableView:heightForHeaderInSection:", self, a3);
      sectionHeaderHeight = v11;

      if (sectionHeaderHeight != -1.0 || !v9)
        goto LABEL_18;
    }
    -[UITableView _estimatedHeightForHeaderInSection:](self, "_estimatedHeightForHeaderInSection:", a3);
    v14 = v13;
    if (v13 != -1.0
      || (sectionHeaderHeight = 2.0, (*((_BYTE *)&self->_tableFlags + 4) & 0x40) != 0)
      && (dyld_program_sdk_at_least() & 1) == 0)
    {
      sectionHeaderHeight = v14;
    }
    if (self->_estimatedSectionHeaderHeight != -1.0)
    {
LABEL_18:
      if (sectionHeaderHeight != -1.0)
      {
        LOBYTE(v6) = sectionHeaderHeight > 0.0;
        return v6;
      }
LABEL_24:
      LOBYTE(v6) = -[UITableView _delegateWantsHeaderTitleForSection:](self, "_delegateWantsHeaderTitleForSection:", a3);
      return v6;
    }
LABEL_22:
    if (sectionHeaderHeight > 0.0 && (*((_BYTE *)&self->_tableFlags + 5) & 1) != 0)
    {
      LOBYTE(v6) = 1;
      return v6;
    }
    goto LABEL_24;
  }
  return v6;
}

- (BOOL)_estimatesSectionHeaderHeights
{
  UITableView *v2;
  double estimatedSectionHeaderHeight;

  v2 = self;
  estimatedSectionHeaderHeight = self->_estimatedSectionHeaderHeight;
  LOBYTE(self) = 1;
  if (estimatedSectionHeaderHeight != -1.0 && estimatedSectionHeaderHeight <= 0.0)
    LODWORD(self) = (*((unsigned __int8 *)&v2->_tableFlags + 4) >> 6) & 1;
  return (char)self;
}

- (double)_estimatedHeightForHeaderInSection:(int64_t)a3
{
  double estimatedSectionHeaderHeight;
  double v5;
  void *v8;
  double v9;
  int v10;
  _BOOL4 v11;
  void *v12;
  BOOL v13;
  double result;
  unint64_t v15;
  NSObject *v16;
  uint8_t buf[4];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)&self->_tableFlags + 4) & 0x40) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "tableView:estimatedHeightForHeaderInSection:", self, a3);
    estimatedSectionHeaderHeight = v9;

    v10 = dyld_program_sdk_at_least();
    v11 = estimatedSectionHeaderHeight < 0.0;
    if (estimatedSectionHeaderHeight == -1.0)
      v11 = 0;
    if (v10)
    {
      if (v11)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 19687, CFSTR("Invalid estimated section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&estimatedSectionHeaderHeight);

      }
    }
    else if (v11)
    {
      v15 = _estimatedHeightForHeaderInSection____s_category_0;
      if (!_estimatedHeightForHeaderInSection____s_category_0)
      {
        v15 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v15, (unint64_t *)&_estimatedHeightForHeaderInSection____s_category_0);
      }
      v16 = *(NSObject **)(v15 + 8);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v18 = estimatedSectionHeaderHeight;
        _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "Invalid estimated section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
  }
  else
  {
    estimatedSectionHeaderHeight = self->_estimatedSectionHeaderHeight;
    if (estimatedSectionHeaderHeight == -1.0)
    {
      estimatedSectionHeaderHeight = -1.0;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
        -[UITableConstants defaultSectionHeaderHeightForTableView:](self->_constants, "defaultSectionHeaderHeightForTableView:", self);
        estimatedSectionHeaderHeight = v5;
      }
    }
  }
  v13 = estimatedSectionHeaderHeight > 1.0 || estimatedSectionHeaderHeight <= 0.0;
  result = 2.0;
  if (v13)
    return estimatedSectionHeaderHeight;
  return result;
}

- (BOOL)_shouldShowHeadersAndFooters
{
  void *v2;
  BOOL v3;

  -[UIView traitCollection](self, "traitCollection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "userInterfaceIdiom") != 3;

  return v3;
}

- (BOOL)_estimatesHeights
{
  return -[UITableView _estimatesRowHeights](self, "_estimatesRowHeights")
      || -[UITableView _estimatesSectionHeaderHeights](self, "_estimatesSectionHeaderHeights")
      || -[UITableView _estimatesSectionFooterHeights](self, "_estimatesSectionFooterHeights");
}

- (BOOL)_delegateWantsFooterForSection:(int64_t)a3
{
  double sectionFooterHeight;
  _BOOL4 v6;
  _BOOL4 v8;
  void *v9;
  double v10;
  double v12;
  double v13;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  double v15;

  sectionFooterHeight = self->_sectionFooterHeight;
  v6 = -[UITableView _estimatesSectionFooterHeights](self, "_estimatesSectionFooterHeights");
  if (sectionFooterHeight != -1.0 || !v6)
  {
    if ((*((_BYTE *)&self->_tableFlags + 4) & 8) == 0)
      goto LABEL_21;
    v8 = v6;
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "tableView:heightForFooterInSection:", self, a3);
    sectionFooterHeight = v10;

    if (sectionFooterHeight != -1.0 || !v8)
    {
LABEL_19:
      if (sectionFooterHeight != -1.0)
        return sectionFooterHeight > 0.0;
      return -[UITableView _delegateWantsFooterTitleForSection:](self, "_delegateWantsFooterTitleForSection:", a3);
    }
    -[UITableView _estimatedHeightForFooterInSection:](self, "_estimatedHeightForFooterInSection:", a3);
    v13 = v12;
    if (v12 != -1.0)
      goto LABEL_17;
    p_tableFlags = &self->_tableFlags;
  }
  else
  {
    -[UITableView _estimatedHeightForFooterInSection:](self, "_estimatedHeightForFooterInSection:", a3);
    v13 = v15;
    if (v15 != -1.0)
      goto LABEL_17;
    p_tableFlags = &self->_tableFlags;
  }
  sectionFooterHeight = 2.0;
  if ((*((_BYTE *)p_tableFlags + 4) & 0x80) != 0 && (dyld_program_sdk_at_least() & 1) == 0)
LABEL_17:
    sectionFooterHeight = v13;
  if (self->_estimatedSectionFooterHeight != -1.0)
    goto LABEL_19;
LABEL_21:
  if (sectionFooterHeight <= 0.0 || (*((_BYTE *)&self->_tableFlags + 5) & 2) == 0)
    return -[UITableView _delegateWantsFooterTitleForSection:](self, "_delegateWantsFooterTitleForSection:", a3);
  return 1;
}

- (BOOL)_estimatesSectionFooterHeights
{
  UITableView *v2;
  double estimatedSectionFooterHeight;

  v2 = self;
  estimatedSectionFooterHeight = self->_estimatedSectionFooterHeight;
  LOBYTE(self) = 1;
  if (estimatedSectionFooterHeight != -1.0 && estimatedSectionFooterHeight <= 0.0)
    LODWORD(self) = *((unsigned __int8 *)&v2->_tableFlags + 4) >> 7;
  return (char)self;
}

- (double)_estimatedHeightForFooterInSection:(int64_t)a3
{
  double estimatedSectionFooterHeight;
  double v5;
  void *v8;
  double v9;
  int v10;
  _BOOL4 v11;
  void *v12;
  BOOL v13;
  double result;
  unint64_t v15;
  NSObject *v16;
  uint8_t buf[4];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)&self->_tableFlags + 4) & 0x80) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "tableView:estimatedHeightForFooterInSection:", self, a3);
    estimatedSectionFooterHeight = v9;

    v10 = dyld_program_sdk_at_least();
    v11 = estimatedSectionFooterHeight < 0.0;
    if (estimatedSectionFooterHeight == -1.0)
      v11 = 0;
    if (v10)
    {
      if (v11)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 19704, CFSTR("Invalid estimated section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&estimatedSectionFooterHeight);

      }
    }
    else if (v11)
    {
      v15 = _estimatedHeightForFooterInSection____s_category_0;
      if (!_estimatedHeightForFooterInSection____s_category_0)
      {
        v15 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v15, (unint64_t *)&_estimatedHeightForFooterInSection____s_category_0);
      }
      v16 = *(NSObject **)(v15 + 8);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v18 = estimatedSectionFooterHeight;
        _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "Invalid estimated section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
  }
  else
  {
    estimatedSectionFooterHeight = self->_estimatedSectionFooterHeight;
    if (estimatedSectionFooterHeight == -1.0)
    {
      estimatedSectionFooterHeight = -1.0;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
        -[UITableConstants defaultSectionFooterHeightForTableView:](self->_constants, "defaultSectionFooterHeightForTableView:", self);
        estimatedSectionFooterHeight = v5;
      }
    }
  }
  v13 = estimatedSectionFooterHeight > 1.0 || estimatedSectionFooterHeight <= 0.0;
  result = 2.0;
  if (v13)
    return estimatedSectionFooterHeight;
  return result;
}

- (CGFloat)rowHeight
{
  return self->_rowHeight;
}

- (int64_t)_numberOfRowsInSection:(int64_t)a3
{
  void *v5;
  uint64_t v6;

  -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "tableView:numberOfRowsInSection:", self, a3);

  return v6 & ~(v6 >> 63);
}

- (double)_estimatedHeightForRowAtIndexPath:(id)a3
{
  id v5;
  double estimatedRowHeight;
  double v7;
  void *v8;
  double v9;
  int v10;
  _BOOL4 v11;
  void *v12;
  unint64_t v15;
  NSObject *v16;
  uint8_t buf[4];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 4) & 0x20) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "tableView:estimatedHeightForRowAtIndexPath:", self, v5);
    estimatedRowHeight = v9;

    v10 = dyld_program_sdk_at_least();
    v11 = estimatedRowHeight < 0.0;
    if (estimatedRowHeight == -1.0)
      v11 = 0;
    if (v10)
    {
      if (v11)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 19670, CFSTR("Invalid estimated row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&estimatedRowHeight);

      }
    }
    else if (v11)
    {
      v15 = _estimatedHeightForRowAtIndexPath____s_category_0;
      if (!_estimatedHeightForRowAtIndexPath____s_category_0)
      {
        v15 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v15, (unint64_t *)&_estimatedHeightForRowAtIndexPath____s_category_0);
      }
      v16 = *(NSObject **)(v15 + 8);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v18 = estimatedRowHeight;
        _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "Invalid estimated row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
  }
  else
  {
    estimatedRowHeight = self->_estimatedRowHeight;
    if (estimatedRowHeight == -1.0)
    {
      estimatedRowHeight = -1.0;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
        -[UITableConstants defaultRowHeightForTableView:](self->_constants, "defaultRowHeightForTableView:", self);
        estimatedRowHeight = v7;
      }
    }
  }
  if (estimatedRowHeight <= 1.0 && estimatedRowHeight > 0.0)
    estimatedRowHeight = 2.0;

  return estimatedRowHeight;
}

- (id)_dataSourceProxy
{
  _UITableViewShadowUpdatesController *WeakRetained;

  if (-[_UITableViewShadowUpdatesController hasShadowUpdates](self->_shadowUpdatesController, "hasShadowUpdates"))
    WeakRetained = self->_shadowUpdatesController;
  else
    WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_dataSource);
  return WeakRetained;
}

- (id)_delegateProxy
{
  _UITableViewShadowUpdatesController *WeakRetained;

  if (-[_UITableViewShadowUpdatesController hasShadowUpdates](self->_shadowUpdatesController, "hasShadowUpdates"))
    WeakRetained = self->_shadowUpdatesController;
  else
    WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained(&self->super._delegate);
  return WeakRetained;
}

- (BOOL)overlapsSectionHeaderViews
{
  return (*((unsigned __int8 *)&self->_tableFlags + 16) >> 5) & 1;
}

- (double)_defaultSectionFooterHeight
{
  double v3;
  double v4;
  double v5;

  -[UITableConstants defaultSectionFooterHeightForTableView:](self->_constants, "defaultSectionFooterHeightForTableView:", self);
  v4 = v3;
  -[UIView _currentScreenScale](self, "_currentScreenScale");
  return UIPixelBoundaryOffset(0, v4, v5);
}

- (UITableViewStyle)style
{
  return (*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3;
}

- (double)_sectionFooterToLastRowPadding
{
  return self->_sectionHeaderFooterPadding;
}

- (double)_defaultSectionHeaderHeight
{
  double v3;
  double v4;
  double v5;

  -[UITableConstants defaultSectionHeaderHeightForTableView:](self->_constants, "defaultSectionHeaderHeightForTableView:", self);
  v4 = v3;
  -[UIView _currentScreenScale](self, "_currentScreenScale");
  return UIPixelBoundaryOffset(1, v4, v5);
}

- (int64_t)_titleAlignmentForHeaderInSection:(int64_t)a3
{
  void *v6;
  int64_t v7;

  if ((*((_BYTE *)&self->_tableFlags + 7) & 4) == 0)
    return 4;
  -[UITableView _delegateProxy](self, "_delegateProxy");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "tableView:titleAlignmentForHeaderInSection:", self, a3);

  return v7;
}

- (double)_maxTitleWidthForHeaderInSection:(int64_t)a3
{
  double v3;
  void *v6;
  double v7;
  double result;

  v3 = -1.0;
  if ((*((_BYTE *)&self->_tableFlags + 4) & 4) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "tableView:maxTitleWidthForHeaderInSection:", self, a3);
    v3 = floor(v7);

  }
  result = 1.79769313e308;
  if (v3 != -1.0)
    return v3;
  return result;
}

- (double)_paddingAboveSectionHeaders
{
  double result;

  result = self->_sectionHeaderTopPadding;
  if (result == -1.0)
    -[UITableConstants defaultPaddingAboveSectionHeadersForTableStyle:](self->_constants, "defaultPaddingAboveSectionHeadersForTableStyle:", (*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3);
  return result;
}

- (int64_t)_titleAlignmentForFooterInSection:(int64_t)a3
{
  void *v6;
  int64_t v7;

  if ((*((_BYTE *)&self->_tableFlags + 7) & 8) == 0)
    return 4;
  -[UITableView _delegateProxy](self, "_delegateProxy");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "tableView:titleAlignmentForFooterInSection:", self, a3);

  return v7;
}

- (double)_maxTitleWidthForFooterInSection:(int64_t)a3
{
  double v3;
  void *v6;
  double v7;
  double result;

  v3 = -1.0;
  if ((*((_BYTE *)&self->_tableFlags + 4) & 0x10) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "tableView:maxTitleWidthForFooterInSection:", self, a3);
    v3 = floor(v7);

  }
  result = 1.79769313e308;
  if (v3 != -1.0)
    return v3;
  return result;
}

- (double)_fullWidthHeaderWidth
{
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;

  -[UITableView _sectionHeaderContentInsets](self, "_sectionHeaderContentInsets");
  v4 = v3;
  v6 = v5;
  -[UITableView _scrollView](self, "_scrollView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "bounds");
  v9 = v8 - (v6 + v4);

  return fmax(v9, 0.0);
}

- (BOOL)_delegateWantsFooterTitleForSection:(int64_t)a3
{
  void *v3;
  void *v6;
  BOOL v7;

  if ((*(_BYTE *)&self->_tableFlags & 0x10) == 0)
  {
    v3 = 0;
LABEL_6:
    v7 = 0;
    goto LABEL_7;
  }
  -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "tableView:titleForFooterInSection:", self, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3 || !objc_msgSend(v3, "length"))
    goto LABEL_6;
  v7 = 1;
LABEL_7:

  return v7;
}

- (double)_paddingAboveFirstSectionHeader
{
  double result;

  result = self->_sectionHeaderTopPadding;
  if (result == -1.0)
    -[UITableConstants defaultPaddingAboveFirstSectionHeaderForTableStyle:](self->_constants, "defaultPaddingAboveFirstSectionHeaderForTableStyle:", (*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3);
  return result;
}

- (CGFloat)sectionFooterHeight
{
  return self->_sectionFooterHeight;
}

- (CGFloat)sectionHeaderHeight
{
  return self->_sectionHeaderHeight;
}

uint64_t __96__UITableView__sectionHeaderView_withFrame_forSection_floating_reuseViewIfPossible_willDisplay___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  char v3;
  unint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  NSObject *v10;
  void *v11;
  int IsKindOfUITableViewHeaderFooterView;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3080);
  if (*(_BYTE *)(a1 + 96))
  {
    if ((v2 & 0x10000000000) == 0)
    {
LABEL_3:
      v3 = 0;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x20000000000) == 0)
  {
    goto LABEL_3;
  }
  v4 = qword_1EDDB0A40;
  if (!qword_1EDDB0A40)
  {
    v4 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v4, (unint64_t *)&qword_1EDDB0A40);
  }
  v5 = *(id *)(v4 + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(v4 + 8), *(const void **)(a1 + 32)) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v5))
  {
    _os_signpost_emit_unreliably_with_name_impl();
  }

  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(a1 + 96))
    objc_msgSend(v6, "_delegateViewForHeaderInSection:", v7);
  else
    objc_msgSend(v6, "_delegateViewForFooterInSection:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v8);

  v9 = qword_1EDDB0A48;
  if (!qword_1EDDB0A48)
  {
    v9 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v9, (unint64_t *)&qword_1EDDB0A48);
  }
  v10 = *(id *)(v9 + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(v9 + 8), *(const void **)(a1 + 32)) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v10))
  {
    LOWORD(v45) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }

  v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v11)
  {
    IsKindOfUITableViewHeaderFooterView = _IsKindOfUITableViewHeaderFooterView(v11);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    if (IsKindOfUITableViewHeaderFooterView)
    {
      v13 = *(void **)(a1 + 32);
      if (*(_BYTE *)(a1 + 96))
        v14 = 2;
      else
        v14 = 3;
      v15 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      objc_msgSend(v13, "_ensureReturnedView:isNotContainedInReusePoolForViewType:", v15, v14);
      objc_msgSend(*(id *)(a1 + 32), "_setupSectionView:isHeader:forSection:", v15, *(unsigned __int8 *)(a1 + 96), *(_QWORD *)(a1 + 48));

    }
    v3 = 1;
  }
  else
  {
    v3 = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3104) |= 0x400000000000uLL;
  }
LABEL_26:
  v16 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (!v16 || _IsKindOfUITableViewHeaderFooterView(v16))
  {
    v17 = *(_QWORD **)(a1 + 32);
    v18 = v17[385];
    v19 = v17[386] >> 45;
    if (*(_BYTE *)(a1 + 96))
    {
      if ((v18 & 8) == 0)
        goto LABEL_36;
      objc_msgSend(v17, "_dataSourceProxy");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "tableView:titleForHeaderInSection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
      v21 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if ((v18 & 0x10) == 0)
        goto LABEL_36;
      objc_msgSend(v17, "_dataSourceProxy");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "tableView:titleForFooterInSection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
      v21 = objc_claimAutoreleasedReturnValue();
    }
    v22 = (void *)v21;

    if (v22)
    {
      v23 = *(_QWORD *)(a1 + 40);
      goto LABEL_40;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3104) |= 0x400000000000uLL;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3088) >> 45;
LABEL_36:
    v24 = (v19 & 3) - 1;
    v23 = *(_QWORD *)(a1 + 40);
    if (v24 > 1)
    {
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v25 = 0;
      if (!*(_QWORD *)(*(_QWORD *)(v23 + 8) + 40))
      {
LABEL_55:
        objc_msgSend(v25, "setAlpha:", 1.0);

        goto LABEL_56;
      }
    }
LABEL_40:
    v26 = *(id *)(*(_QWORD *)(v23 + 8) + 40);
    if (v26
      || *(_BYTE *)(a1 + 97)
      && (objc_msgSend(*(id *)(a1 + 32), "_popReusableHeaderView:", *(unsigned __int8 *)(a1 + 96)),
          (v26 = (id)objc_claimAutoreleasedReturnValue()) != 0))
    {
      objc_msgSend(v26, "setFrame:", *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2080);
      v28 = *(_QWORD *)(a1 + 48);
      if (*(_BYTE *)(a1 + 96))
        v29 = -[UITableViewRowData maxHeaderTitleWidthForSection:](v27, v28);
      else
        v29 = -[UITableViewRowData maxFooterTitleWidthForSection:](v27, v28);
      objc_msgSend(v26, "setMaxTitleWidth:", v29);
    }
    else
    {
      v26 = (id)objc_msgSend(*(id *)(a1 + 32), "_newSectionViewWithFrame:forSection:isHeader:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 96), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
    }
    v30 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v30 + 3080) & 0x20) != 0)
    {
      objc_msgSend((id)v30, "_dataSourceProxy");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "tableView:detailTextForHeaderInSection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
      v31 = (void *)objc_claimAutoreleasedReturnValue();

      v30 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v31 = 0;
    }
    v33 = *(_QWORD *)(v30 + 2080);
    v34 = *(_QWORD *)(a1 + 48);
    if (*(_BYTE *)(a1 + 96))
      v35 = -[UITableViewRowData headerAlignmentForSection:](v33, v34);
    else
      v35 = -[UITableViewRowData footerAlignmentForSection:](v33, v34);
    LOBYTE(v44) = v3;
    objc_msgSend(*(id *)(a1 + 32), "_configureTableHeaderFooterView:forHeader:section:floating:withTitle:detailText:textAlignment:fromClient:", v26, *(unsigned __int8 *)(a1 + 96), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 98), v22, v31, v35, v44, v45);
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v37 = *(void **)(v36 + 40);
    *(_QWORD *)(v36 + 40) = v26;

    v25 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    goto LABEL_55;
  }
LABEL_56:
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setAutoresizingMask:", 2);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setNeedsDisplayOnBoundsChange:", 1);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "_setHiddenForReuse:", 0);
  v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v38)
  {
    v39 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v39 + 3104) & 0x10) != 0)
    {
      if (*(_BYTE *)(a1 + 96))
        v40 = 2912;
      else
        v40 = 2920;
      v41 = *(void **)(v39 + v40);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 48));
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "setObject:forKey:", v38, v42);

    }
  }
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setEditing:animated:", objc_msgSend(*(id *)(a1 + 32), "isEditing"), 0);
  return result;
}

- (id)_delegateViewForHeaderInSection:(int64_t)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v6;
  void *v7;
  void *v8;

  p_tableFlags = &self->_tableFlags;
  v6 = *((_QWORD *)&self->_tableFlags + 2);
  *((_QWORD *)&self->_tableFlags + 2) = v6 & 0xFFFFFFFFFFFFFDFFLL;
  -[UITableView _delegateProxy](self, "_delegateProxy");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "tableView:viewForHeaderInSection:", self, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  *((_QWORD *)p_tableFlags + 2) = *((_QWORD *)p_tableFlags + 2) & 0xFFFFFFFFFFFFFDFFLL | (((v6 >> 9) & 1) << 9);
  if (v8
    && dyld_program_sdk_at_least()
    && objc_msgSend(v8, "translatesAutoresizingMaskIntoConstraints"))
  {
    objc_msgSend(v8, "_setHostsLayoutEngine:", 1);
  }
  return v8;
}

- (id)_delegateViewForFooterInSection:(int64_t)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v6;
  void *v7;
  void *v8;

  p_tableFlags = &self->_tableFlags;
  v6 = *((_QWORD *)&self->_tableFlags + 2);
  *((_QWORD *)&self->_tableFlags + 2) = v6 | 0x200;
  -[UITableView _delegateProxy](self, "_delegateProxy");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "tableView:viewForFooterInSection:", self, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  *((_QWORD *)p_tableFlags + 2) = *((_QWORD *)p_tableFlags + 2) & 0xFFFFFFFFFFFFFDFFLL | (((v6 >> 9) & 1) << 9);
  if (v8
    && dyld_program_sdk_at_least()
    && objc_msgSend(v8, "translatesAutoresizingMaskIntoConstraints"))
  {
    objc_msgSend(v8, "_setHostsLayoutEngine:", 1);
  }
  return v8;
}

- (void)bringSubviewToFront:(id)a3
{
  void *v4;
  objc_super v5;

  _UITableViewSubviewToMoveForView(a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5.receiver = self;
  v5.super_class = (Class)UITableView;
  -[UIView bringSubviewToFront:](&v5, sel_bringSubviewToFront_, v4);

}

- (id)_headerViewForSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  id v6;
  void *v7;

  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (a3 = -[_UITableViewShadowUpdatesController sectionAfterShadowUpdates:](shadowUpdatesController, "sectionAfterShadowUpdates:", a3), a3 == 0x7FFFFFFFFFFFFFFFLL))
  {
    v6 = 0;
  }
  else
  {
    -[UITableView _visibleHeaderViewForSection:](self, "_visibleHeaderViewForSection:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (_IsKindOfUITableViewHeaderFooterView(v7))
      v6 = v7;
    else
      v6 = 0;

  }
  return v6;
}

- (id)_existingOrTentativeHeaderViewCreatedIfNeededForSection:(int64_t)a3
{
  void *v5;
  NSMutableDictionary *tentativeHeaderViews;
  void *v7;

  -[UITableView _existingHeaderViewForSection:](self, "_existingHeaderViewForSection:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    tentativeHeaderViews = self->_tentativeHeaderViews;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary objectForKey:](tentativeHeaderViews, "objectForKey:", v7);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      -[UITableView _sectionHeaderViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionHeaderViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:", a3, 0, 1, 0, -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, a3, 1));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v5;
}

- (id)_existingFooterViewForSection:(int64_t)a3
{
  int64_t v5;
  NSMutableDictionary *visibleFooterViews;
  void *v7;
  void *v8;
  id v9;
  NSMutableDictionary *tentativeFooterViews;
  void *v11;

  v5 = -[UITableView _visibleSectionForSectionAdjustedForCurrentUpdate:](self, "_visibleSectionForSectionAdjustedForCurrentUpdate:");
  visibleFooterViews = self->_visibleFooterViews;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary objectForKey:](visibleFooterViews, "objectForKey:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8 && (*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    tentativeFooterViews = self->_tentativeFooterViews;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary objectForKey:](tentativeFooterViews, "objectForKey:", v11);
    v9 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = v8;
  }

  return v9;
}

- (id)_existingHeaderViewForSection:(int64_t)a3
{
  int64_t v5;
  NSMutableDictionary *visibleHeaderViews;
  void *v7;
  void *v8;
  id v9;
  NSMutableDictionary *tentativeHeaderViews;
  void *v11;

  v5 = -[UITableView _visibleSectionForSectionAdjustedForCurrentUpdate:](self, "_visibleSectionForSectionAdjustedForCurrentUpdate:");
  visibleHeaderViews = self->_visibleHeaderViews;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary objectForKey:](visibleHeaderViews, "objectForKey:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8 && (*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    tentativeHeaderViews = self->_tentativeHeaderViews;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary objectForKey:](tentativeHeaderViews, "objectForKey:", v11);
    v9 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = v8;
  }

  return v9;
}

- (int64_t)_visibleSectionForSectionAdjustedForCurrentUpdate:(int64_t)a3
{
  _UITableViewUpdateSupport *currentUpdate;

  currentUpdate = self->_currentUpdate;
  if (currentUpdate)
    return -[_UITableViewUpdateSupport initialSectionIndexForFinalSectionIndex:]((uint64_t)currentUpdate, a3);
  else
    return a3;
}

- (void)_addContentSubview:(id)a3 atBack:(BOOL)a4
{
  _BOOL8 v4;
  UITableViewWrapperView *v7;
  UITableViewWrapperView *v8;
  int IsKindOfUITableViewCell;
  char v10;
  void *v11;
  UIView **p_viewBeingPreparedToDisplay;
  UIView *v13;
  _UITableViewReorderingSupport *reorderingSupport;
  _UITableViewReorderingSupport *v15;
  UITableViewWrapperView *wrapperView;
  void *v17;
  UITableViewWrapperView *v18;
  UIView *v19;
  UIView *v20;
  objc_super v21;
  objc_super v22;

  v4 = a4;
  v7 = (UITableViewWrapperView *)a3;
  v8 = v7;
  if (v7)
  {
    IsKindOfUITableViewCell = _IsKindOfUITableViewCell(v7);
    v10 = IsKindOfUITableViewCell;
    if (!IsKindOfUITableViewCell
      || (-[UITableViewWrapperView _containerView](v8, "_containerView"),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v11,
          !v11))
    {
      p_viewBeingPreparedToDisplay = &self->_viewBeingPreparedToDisplay;
      v13 = self->_viewBeingPreparedToDisplay;
      objc_storeStrong((id *)&self->_viewBeingPreparedToDisplay, a3);
      reorderingSupport = self->_reorderingSupport;
      if (reorderingSupport)
        reorderingSupport = (_UITableViewReorderingSupport *)reorderingSupport->_reorderedCell;
      v15 = reorderingSupport;
      if ((*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0
        && ((v10 & 1) != 0
         || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
         || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)))
      {
        if (v4)
        {
          wrapperView = self->_wrapperView;
          -[UITableViewWrapperView stuckToBackViews](wrapperView, "stuckToBackViews");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          -[UIView insertSubview:atIndex:](wrapperView, "insertSubview:atIndex:", v8, objc_msgSend(v17, "count"));

        }
        else
        {
          v18 = self->_wrapperView;
          if (v15)
            -[UIView insertSubview:below:](v18, "insertSubview:below:", v8, v15);
          else
            -[UIView addSubview:](v18, "addSubview:", v8);
        }
      }
      else
      {
        v22.receiver = self;
        v22.super_class = (Class)UITableView;
        -[UIScrollView _addContentSubview:atBack:](&v22, sel__addContentSubview_atBack_, v8, v4);
        if (v15)
        {
          if ((*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0)
          {
            -[UITableViewWrapperView bringSubviewToFront:](self->_wrapperView, "bringSubviewToFront:", v15);
          }
          else
          {
            v21.receiver = self;
            v21.super_class = (Class)UITableView;
            -[UIScrollView _addContentSubview:atBack:](&v21, sel__addContentSubview_atBack_, v15, 0);
          }
        }
      }
      if (self->_wrapperView != v8)
        *((_QWORD *)&self->_tableFlags + 2) |= 0x80000000000000uLL;
      v19 = *p_viewBeingPreparedToDisplay;
      *p_viewBeingPreparedToDisplay = v13;
      v20 = v13;

    }
  }

}

- (id)_visibleHeaderViewForSection:(int64_t)a3
{
  NSMutableDictionary *visibleHeaderViews;
  void *v4;
  void *v5;

  visibleHeaderViews = self->_visibleHeaderViews;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary objectForKey:](visibleHeaderViews, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)_visibleFooterViewForSection:(int64_t)a3
{
  NSMutableDictionary *visibleFooterViews;
  void *v4;
  void *v5;

  visibleFooterViews = self->_visibleFooterViews;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary objectForKey:](visibleFooterViews, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (void)_addSubview:(id)a3 positioned:(int64_t)a4 relativeTo:(id)a5
{
  id v8;
  void *v9;
  objc_super v10;

  v8 = a5;
  _UITableViewSubviewToMoveForView(a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10.receiver = self;
  v10.super_class = (Class)UITableView;
  -[UIView _addSubview:positioned:relativeTo:](&v10, sel__addSubview_positioned_relativeTo_, v9, a4, v8);

}

- (void)_updateVisibleHeadersAndFootersNow:(BOOL)a3
{
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSMutableDictionary *visibleHeaderViews;
  void *v15;
  void *v16;
  NSMutableDictionary *visibleFooterViews;
  void *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL IsEmpty;
  BOOL v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  char v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  char v70;
  void *v71;
  _BOOL4 v73;
  void *v74;
  _BOOL4 v76;
  NSMutableDictionary *v77;
  void *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  double rect2;
  double rect2_8;
  double rect2_16;
  double rect2_24;
  double v92;
  double v93;
  double v94;
  _BOOL4 v95;
  double rect;
  NSMutableDictionary *recta;
  BOOL v98;
  _QWORD v99[5];
  _QWORD v100[5];
  _QWORD v101[7];
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t);
  void (*v106)(uint64_t);
  id v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;

  HIDWORD(v83) = a3;
  if (!-[UITableView _shouldShowHeadersAndFooters](self, "_shouldShowHeadersAndFooters"))
    return;
  -[UITableView _visibleBounds](self, "_visibleBounds");
  v86 = v5;
  v87 = v4;
  v84 = v7;
  v85 = v6;
  v8 = -[UITableViewRowData sectionsInRect:]((uint64_t)self->_rowData, v4, v5, v6, v7);
  v10 = v9;
  v103 = &v102;
  v104 = 0x3032000000;
  v105 = __Block_byref_object_copy__189;
  v106 = __Block_byref_object_dispose__189;
  v11 = MEMORY[0x1E0C809B0];
  v107 = 0;
  v101[0] = MEMORY[0x1E0C809B0];
  v101[1] = 3221225472;
  v101[2] = __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke;
  v101[3] = &unk_1E16E3C18;
  v101[6] = v9;
  v102 = 0;
  v101[4] = &v102;
  v101[5] = v8;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](self->_visibleHeaderViews, "enumerateKeysAndObjectsUsingBlock:", v101);
  v12 = (void *)v103[5];
  v100[0] = v11;
  v100[1] = 3221225472;
  v100[2] = __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke_2;
  v100[3] = &unk_1E16BCD20;
  v100[4] = self;
  objc_msgSend(v12, "enumerateKeysAndObjectsUsingBlock:", v100);
  objc_msgSend((id)v103[5], "removeAllObjects");
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](self->_visibleFooterViews, "enumerateKeysAndObjectsUsingBlock:", v101);
  v13 = (void *)v103[5];
  v99[0] = v11;
  v99[1] = 3221225472;
  v99[2] = __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke_3;
  v99[3] = &unk_1E16BCD20;
  v99[4] = self;
  objc_msgSend(v13, "enumerateKeysAndObjectsUsingBlock:", v99);
  if (v8 >= v8 + v10)
    goto LABEL_63;
  LODWORD(v83) = 0;
  do
  {
    visibleHeaderViews = self->_visibleHeaderViews;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v8, v83);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary objectForKey:](visibleHeaderViews, "objectForKey:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    visibleFooterViews = self->_visibleFooterViews;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v8);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary objectForKey:](visibleFooterViews, "objectForKey:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    rect2_8 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v8, 0);
    v93 = v21;
    v94 = v20;
    rect = v22;
    rect2 = -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v8, 0);
    rect2_16 = v24;
    rect2_24 = v23;
    v92 = v25;
    v108.origin.x = rect2_8;
    v108.size.width = v93;
    v108.origin.y = v94;
    v108.size.height = rect;
    IsEmpty = CGRectIsEmpty(v108);
    v109.origin.x = rect2;
    v109.size.width = rect2_16;
    v109.origin.y = rect2_24;
    v109.size.height = v92;
    v27 = CGRectIsEmpty(v109);
    v28 = -[UITableView _headerFooterPinningBehavior](self, "_headerFooterPinningBehavior") - 1;
    if (IsEmpty)
      goto LABEL_16;
    v98 = 0;
    -[UIView bounds](self, "bounds");
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;
    -[UITableView _contentInset](self, "_contentInset");
    v38 = v37;
    v40 = v39;
    v42 = v41;
    v44 = v43;
    if (-[UITableView allowsHeaderViewsToFloat](self, "allowsHeaderViewsToFloat"))
    {
      v45 = -[UITableViewRowData floatingRectForHeaderInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, v8, 0, &v98, v30 + v40, v32 + v38, v34 - (v40 + v44), v36 - (v38 + v42));
      if (v98)
      {
        rect2_8 = v45;
        v93 = v47;
        v94 = v46;
        rect = v48;
      }
    }
    v110.origin.x = rect2_8;
    v110.size.width = v93;
    v110.origin.y = v94;
    v110.size.height = rect;
    if (CGRectIsEmpty(v110))
      goto LABEL_16;
    v111.origin.y = v86;
    v111.origin.x = v87;
    v111.size.height = v84;
    v111.size.width = v85;
    v114.origin.x = rect2_8;
    v114.size.width = v93;
    v114.origin.y = v94;
    v114.size.height = rect;
    if (!CGRectIntersectsRect(v111, v114))
    {
LABEL_16:
      v49 = 0;
    }
    else
    {
      if (v16)
      {
        if (v98 && v28 <= 1)
          -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", v16, 0);
        if (_IsKindOfUITableViewHeaderFooterView(v16))
        {
          objc_msgSend(v16, "setFrame:", rect2_8, v94, v93, rect);
          objc_msgSend(v16, "setMaxTitleWidth:", -[UITableViewRowData maxHeaderTitleWidthForSection:]((uint64_t)self->_rowData, v8));
          objc_msgSend(v16, "setFloating:", v98);
        }
        else
        {
          -[UITableView _sectionContentInset](self, "_sectionContentInset");
          objc_msgSend(v16, "setFrame:", v80, v94, v93 - (v80 + v79), rect);
        }
LABEL_53:
        v49 = 1;
        goto LABEL_17;
      }
      if (!HIDWORD(v83))
        goto LABEL_53;
      -[UITableView _sectionHeaderViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionHeaderViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:", v8, v98, 1, 1, rect2_8, v94, v93, rect);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      if (v71)
      {
        -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", v71, 0);
        v73 = !v98 && v28 < 2;
        v95 = v73;
        recta = self->_visibleHeaderViews;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v8);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSMutableDictionary setObject:forKey:](recta, "setObject:forKey:", v71, v74);
        LODWORD(v83) = v95 | v83;

      }
      v49 = 1;
    }
LABEL_17:
    if (v16 && (v49 & 1) == 0)
      -[UITableView _reuseHeaderFooterView:isHeader:forSection:](self, "_reuseHeaderFooterView:isHeader:forSection:", v16, 1, v8);
    if (v27)
      goto LABEL_58;
    v98 = 0;
    -[UIView bounds](self, "bounds");
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v57 = v56;
    -[UITableView _contentInset](self, "_contentInset");
    v59 = v58;
    v61 = v60;
    v63 = v62;
    v65 = v64;
    if (-[UITableView allowsFooterViewsToFloat](self, "allowsFooterViewsToFloat"))
    {
      v66 = -[UITableViewRowData floatingRectForFooterInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, v8, 0, &v98, v51 + v61, v53 + v59, v55 - (v61 + v65), v57 - (v59 + v63));
      if (v98)
      {
        rect2 = v66;
        rect2_16 = v68;
        rect2_24 = v67;
        v92 = v69;
      }
    }
    v112.origin.x = rect2;
    v112.size.width = rect2_16;
    v112.origin.y = rect2_24;
    v112.size.height = v92;
    if (CGRectIsEmpty(v112))
      goto LABEL_32;
    v113.origin.y = v86;
    v113.origin.x = v87;
    v113.size.height = v84;
    v113.size.width = v85;
    v115.origin.x = rect2;
    v115.size.width = rect2_16;
    v115.origin.y = rect2_24;
    v115.size.height = v92;
    if (!CGRectIntersectsRect(v113, v115))
    {
LABEL_32:
      v70 = 0;
    }
    else
    {
      if (v19)
      {
        if (v98 && v28 <= 1)
          -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", v19, 0);
        if (_IsKindOfUITableViewHeaderFooterView(v19))
        {
          objc_msgSend(v19, "setFrame:", rect2, rect2_24, rect2_16, v92);
          objc_msgSend(v19, "setMaxTitleWidth:", -[UITableViewRowData maxFooterTitleWidthForSection:]((uint64_t)self->_rowData, v8));
          objc_msgSend(v19, "setFloating:", v98);
        }
        else
        {
          -[UITableView _sectionContentInset](self, "_sectionContentInset");
          objc_msgSend(v19, "setFrame:", v82, rect2_24, rect2_16 - (v82 + v81), v92);
        }
      }
      else if (HIDWORD(v83))
      {
        -[UITableView _sectionFooterViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionFooterViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:", v8, v98, 1, 1, rect2, rect2_24, rect2_16, v92);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19)
        {
          -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", v19, 0);
          v76 = !v98 && v28 < 2;
          v77 = self->_visibleFooterViews;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v8, v83);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSMutableDictionary setObject:forKey:](v77, "setObject:forKey:", v19, v78);
          LODWORD(v83) = v76 | v83;

        }
      }
      else
      {
        v19 = 0;
      }
      v70 = 1;
    }
    if ((v70 & 1) == 0)
    {
LABEL_58:
      if (v19)
        -[UITableView _reuseHeaderFooterView:isHeader:forSection:](self, "_reuseHeaderFooterView:isHeader:forSection:", v19, 0, v8);
    }

    ++v8;
    --v10;
  }
  while (v10);
  if ((v83 & 1) != 0)
    -[UITableView _updateVisibleHeadersAndFootersNow:](self, "_updateVisibleHeadersAndFootersNow:", 0);
LABEL_63:
  -[UITableView _updatePinnedTableHeader](self, "_updatePinnedTableHeader", v83);
  _Block_object_dispose(&v102, 8);

}

- (BOOL)_headerAndFooterViewsFloat
{
  return (*((_BYTE *)&self->_tableFlags + 13) & 0x60) == 0 && (*((_BYTE *)&self->_tableFlags + 20) & 0x10) == 0;
}

- (int64_t)_headerFooterPinningBehavior
{
  if ((*((_BYTE *)&self->_tableFlags + 29) & 0x20) != 0 || self->_sectionHeaderTopPadding == 0.0)
    return 0;
  else
    return -[UITableConstants defaultHeaderFooterPinningBehaviorForTableStyle:](self->_constants, "defaultHeaderFooterPinningBehaviorForTableStyle:", (*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3);
}

- (id)_sectionHeaderView:(BOOL)a3 withFrame:(CGRect)a4 forSection:(int64_t)a5 floating:(BOOL)a6 reuseViewIfPossible:(BOOL)a7 willDisplay:(BOOL)a8
{
  _BOOL4 v8;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  _BOOL8 v16;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  NSMutableDictionary *tentativeHeaderViews;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t IsKindOfUITableViewHeaderFooterView;
  NSMutableDictionary *tentativeFooterViews;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *context;
  _QWORD v37[12];
  BOOL v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t);
  id v46;
  _QWORD v47[2];
  void (*v48)(uint64_t, void *, int);
  void *v49;
  UITableView *v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  BOOL v55;

  v8 = a8;
  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v16 = a3;
  context = (void *)MEMORY[0x186DC9484](self, a2);
  v18 = MEMORY[0x1E0C809B0];
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3221225472;
  v48 = __96__UITableView__sectionHeaderView_withFrame_forSection_floating_reuseViewIfPossible_willDisplay___block_invoke;
  v49 = &unk_1E16E3FD8;
  v51 = x;
  v52 = y;
  v53 = width;
  v54 = height;
  v55 = a6;
  v50 = self;
  v41 = 0;
  v42 = &v41;
  v43 = 0x3032000000;
  v44 = __Block_byref_object_copy__189;
  v45 = __Block_byref_object_dispose__189;
  v46 = 0;
  if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    if (v16)
    {
      tentativeHeaderViews = self->_tentativeHeaderViews;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a5);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary objectForKey:](tentativeHeaderViews, "objectForKey:", v23);
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = (void *)v42[5];
      v42[5] = v24;

      v26 = (void *)v42[5];
      if (v26)
      {
        IsKindOfUITableViewHeaderFooterView = _IsKindOfUITableViewHeaderFooterView((void *)v42[5]);
        v48((uint64_t)v47, v26, IsKindOfUITableViewHeaderFooterView);
        if (v8)
          -[UITableView _notifyWillDisplayHeaderFooterView:forSection:isHeader:](self, "_notifyWillDisplayHeaderFooterView:forSection:isHeader:", v42[5], a5, 1);
        goto LABEL_14;
      }
    }
    else
    {
      tentativeFooterViews = self->_tentativeFooterViews;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a5);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary objectForKey:](tentativeFooterViews, "objectForKey:", v29);
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = (void *)v42[5];
      v42[5] = v30;

      v32 = (void *)v42[5];
      if (v32)
      {
        v33 = _IsKindOfUITableViewHeaderFooterView((void *)v42[5]);
        v48((uint64_t)v47, v32, v33);
        if (v8)
          -[UITableView _notifyWillDisplayHeaderFooterView:forSection:isHeader:](self, "_notifyWillDisplayHeaderFooterView:forSection:isHeader:", v42[5], a5, 0);
        goto LABEL_14;
      }
    }
  }
  if ((*((_BYTE *)&self->_tableFlags + 29) & 0x40) == 0)
    _UIQOSExpectComplexCommit("UITVHFV");
  v19 = (void *)_UISetCurrentFallbackEnvironment(self);
  v37[0] = v18;
  v37[1] = 3221225472;
  v37[2] = __96__UITableView__sectionHeaderView_withFrame_forSection_floating_reuseViewIfPossible_willDisplay___block_invoke_2;
  v37[3] = &unk_1E16E4000;
  v38 = v16;
  v37[4] = self;
  v37[5] = &v41;
  v37[6] = a5;
  v37[7] = v47;
  v39 = a7;
  *(CGFloat *)&v37[8] = x;
  *(CGFloat *)&v37[9] = y;
  *(CGFloat *)&v37[10] = width;
  *(CGFloat *)&v37[11] = height;
  v40 = a6;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v37);
  _UIRestorePreviousFallbackEnvironment(v19);
  v20 = v42;
  if (v8)
  {
    v21 = v42[5];
    if (v21)
    {
      -[UITableView _notifyWillDisplayHeaderFooterView:forSection:isHeader:](self, "_notifyWillDisplayHeaderFooterView:forSection:isHeader:", v21, a5, v16);
LABEL_14:
      v20 = v42;
    }
  }
  v34 = (id)v20[5];
  _Block_object_dispose(&v41, 8);

  objc_autoreleasePoolPop(context);
  return v34;
}

- (id)_sectionHeaderViewWithFrame:(CGRect)a3 forSection:(int64_t)a4 floating:(BOOL)a5 reuseViewIfPossible:(BOOL)a6 willDisplay:(BOOL)a7
{
  return -[UITableView _sectionHeaderView:withFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionHeaderView:withFrame:forSection:floating:reuseViewIfPossible:willDisplay:", 1, a4, a5, a6, a7, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (void)_updatePinnedTableHeader
{
  UITableViewRowData *rowData;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGRect v11;
  CGRect v12;

  rowData = self->_rowData;
  if (rowData && (*((_BYTE *)&self->_tableFlags + 21) & 0x20) == 0)
  {
    v4 = -[UITableViewRowData rectForTableHeaderView]((uint64_t)rowData);
    v6 = v5;
    v8 = v7;
    v10 = v9;
    -[UIView frame](self->_tableHeaderView, "frame");
    v12.origin.x = v4;
    v12.origin.y = v6;
    v12.size.width = v8;
    v12.size.height = v10;
    if (!CGRectEqualToRect(v11, v12))
      -[UIView setFrame:](self->_tableHeaderView, "setFrame:", v4, v6, v8, v10);
    if ((*((_BYTE *)&self->_tableFlags + 19) & 0x80) != 0)
      -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", self->_tableHeaderView, 0);
  }
}

- (BOOL)_isEditingWithNoSwipedCell
{
  return (*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0
      && (*((_BYTE *)&self->_tableFlags + 21) & 0x10) == 0
      && self->_swipedIndexPath == 0;
}

- (UITableConstants)_constants
{
  return self->_constants;
}

- (id)delegate
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)UITableView;
  -[UIScrollView delegate](&v3, sel_delegate);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (_NSRange)_visibleGlobalRows
{
  _NSRange *p_visibleRows;
  NSUInteger location;
  NSUInteger length;
  _NSRange result;

  p_visibleRows = &self->_visibleRows;
  location = self->_visibleRows.location;
  length = p_visibleRows->length;
  result.length = length;
  result.location = location;
  return result;
}

- (BOOL)_isTableHeaderViewHidden
{
  return (~*((_DWORD *)&self->_tableFlags + 4) & 0x30000000) == 0;
}

void __96__UITableView__sectionHeaderView_withFrame_forSection_floating_reuseViewIfPossible_willDisplay___block_invoke(uint64_t a1, void *a2, int a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  id v13;
  double v14;
  double v15;

  if (a3)
  {
    v4 = *(double *)(a1 + 40);
    v5 = *(double *)(a1 + 48);
    v6 = *(double *)(a1 + 56);
    v7 = *(double *)(a1 + 64);
    v8 = a2;
    objc_msgSend(v8, "setFrame:", v4, v5, v6, v7);
    objc_msgSend(v8, "setFloating:", *(unsigned __int8 *)(a1 + 72));
  }
  else
  {
    v9 = *(double *)(a1 + 48);
    v10 = *(double *)(a1 + 56);
    v11 = *(double *)(a1 + 64);
    v12 = *(void **)(a1 + 32);
    v13 = a2;
    objc_msgSend(v12, "_sectionContentInset");
    objc_msgSend(v13, "setFrame:", v15, v9, v10 - (v15 + v14), v11);
  }

}

- (void)_notifyWillDisplayHeaderFooterView:(id)a3 forSection:(int64_t)a4 isHeader:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;

  v5 = a5;
  v8 = a3;
  v9 = *((_QWORD *)&self->_tableFlags + 1);
  v11 = v8;
  if (v5)
  {
    if ((v9 & 0x200) == 0)
      goto LABEL_7;
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "tableView:willDisplayHeaderView:forSection:", self, v11, a4);
  }
  else
  {
    if ((v9 & 0x400) == 0)
      goto LABEL_7;
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "tableView:willDisplayFooterView:forSection:", self, v11, a4);
  }

  v8 = v11;
LABEL_7:
  if (_IsKindOfUITableViewHeaderFooterView(v8))
    objc_msgSend(v11, "_notifyIsDisplaying:", 1);

}

- (UIColor)_accessoryBaseColor
{
  return self->_accessoryBaseColor;
}

- (id)_newSectionViewWithFrame:(CGRect)a3 forSection:(int64_t)a4 isHeader:(BOOL)a5
{
  _BOOL8 v5;
  double height;
  double width;
  double y;
  double x;
  __CFString *v12;
  __CFString *v13;
  UITableViewHeaderFooterView *v14;

  v5 = a5;
  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v12 = CFSTR("__UITableViewFooterDefaultReuseIdentifier");
  if (a5)
    v12 = CFSTR("__UITableViewHeaderDefaultReuseIdentifier");
  v13 = v12;
  v14 = -[UITableViewHeaderFooterView initWithReuseIdentifier:]([UITableViewHeaderFooterView alloc], "initWithReuseIdentifier:", v13);

  -[UITableViewHeaderFooterView setFrame:](v14, "setFrame:", x, y, width, height);
  -[UIView setSemanticContentAttribute:](v14, "setSemanticContentAttribute:", -[UIView semanticContentAttribute](self, "semanticContentAttribute"));
  -[UITableView _setupSectionView:isHeader:forSection:](self, "_setupSectionView:isHeader:forSection:", v14, v5, a4);
  return v14;
}

uint64_t __29__UITableView__preparedCells__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

- (BOOL)_hasContentForBarInteractions
{
  objc_super v4;

  if ((-[UITableViewRowData hasRows]((uint64_t)self->_rowData) & 1) != 0)
    return 1;
  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  return -[UIScrollView _hasContentForBarInteractions](&v4, sel__hasContentForBarInteractions);
}

- (void)_updateWithItems:(id)a3 updateSupport:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  void (**v10)(void *, NSIndexPath *);
  NSIndexPath *v11;
  NSIndexPath *pendingSelectionIndexPath;
  void (**v13)(void *, NSMutableArray *);
  NSMutableArray *v14;
  NSMutableArray *selectedIndexPaths;
  NSMutableArray *v16;
  NSMutableArray *highlightedIndexPaths;
  NSMutableArray *v18;
  NSMutableArray *deselectionTransitionIndexPaths;
  NSMutableArray *v20;
  NSMutableArray *pendingDeselectionIndexPaths;
  NSMutableArray *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  _QWORD *v28;
  id updateCompletionHandler;
  NSUInteger v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  BOOL v35;
  UITableViewWrapperView *v36;
  UITableViewWrapperView *wrapperView;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id *v43;
  _QWORD *v44;
  id v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  UITableViewCell *v54;
  void *v55;
  void *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  void *v65;
  void *v66;
  void *v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  void *v74;
  void *v75;
  double v76;
  CGFloat v77;
  double v78;
  CGFloat v79;
  double v80;
  CGFloat v81;
  double v82;
  CGFloat v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  CGFloat Width;
  CGFloat MinX;
  id v90;
  id v91;
  id v92;
  UITableViewCell *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t j;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  double v102;
  double v103;
  void *v104;
  id v105;
  id v106;
  void (**v107)(void *, NSMutableArray *);
  _QWORD *v108;
  void (**v109)(void *, NSIndexPath *);
  void *v110;
  id obj;
  id obja;
  _QWORD v113[4];
  id v114;
  id v115;
  UITableViewCell *v116;
  UITableView *v117;
  id v118;
  _QWORD v119[4];
  id v120;
  CGFloat v121;
  uint64_t v122;
  CGFloat v123;
  uint64_t v124;
  _QWORD v125[4];
  id v126;
  CGFloat v127;
  uint64_t v128;
  CGFloat v129;
  uint64_t v130;
  _QWORD v131[5];
  id v132;
  id v133;
  id v134;
  char v135;
  _QWORD v136[5];
  id *v137;
  id v138;
  id v139;
  id v140;
  char v141;
  BOOL v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _QWORD v151[4];
  void (**v152)(void *, NSIndexPath *);
  _QWORD aBlock[4];
  id v154;
  UITableView *v155;
  _BYTE v156[128];
  _BYTE v157[128];
  uint64_t v158;
  CGRect v159;
  CGRect v160;

  v158 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  *((_QWORD *)&self->_tableFlags + 2) |= 0x400000000uLL;
  if (!dyld_program_sdk_at_least()
    || +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled"))
  {
    -[UITableView _adjustPreReloadStateForRestoringContentOffsetWithUpdateItems:updateSupport:](self, "_adjustPreReloadStateForRestoringContentOffsetWithUpdateItems:updateSupport:", v6, v7);
  }
  v8 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke;
  aBlock[3] = &unk_1E16E3CB8;
  v9 = v7;
  v154 = v9;
  v155 = self;
  v10 = (void (**)(void *, NSIndexPath *))_Block_copy(aBlock);
  -[_UITableViewSubviewManager rebasePrefetchedCellIndexPathsWithMapping:]((id *)&self->_subviewManager->super.isa, (uint64_t)v10);
  -[UITableView _resignOrRebaseFirstResponderViewWithUpdateSupport:indexPathMapping:](self, "_resignOrRebaseFirstResponderViewWithUpdateSupport:indexPathMapping:", v9, v10);
  -[UITableView _resetOrRebaseFocusedViewWithUpdateSupport:indexPathMapping:](self, "_resetOrRebaseFocusedViewWithUpdateSupport:indexPathMapping:", v9, v10);
  -[UITableView _updateIdentityTrackerWithUpdateSupport:](self, "_updateIdentityTrackerWithUpdateSupport:", v9);
  v10[2](v10, self->_pendingSelectionIndexPath);
  v11 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
  pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
  self->_pendingSelectionIndexPath = v11;

  v151[0] = v8;
  v151[1] = 3221225472;
  v151[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_2;
  v151[3] = &unk_1E16E3CE0;
  v109 = v10;
  v152 = v109;
  v13 = (void (**)(void *, NSMutableArray *))_Block_copy(v151);
  v13[2](v13, self->_selectedIndexPaths);
  v14 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
  selectedIndexPaths = self->_selectedIndexPaths;
  self->_selectedIndexPaths = v14;

  v13[2](v13, self->_highlightedIndexPaths);
  v16 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
  highlightedIndexPaths = self->_highlightedIndexPaths;
  self->_highlightedIndexPaths = v16;

  if (self->_deselectionTransitionIndexPaths)
  {
    ((void (*)(void (**)(void *, NSMutableArray *)))v13[2])(v13);
    v18 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    deselectionTransitionIndexPaths = self->_deselectionTransitionIndexPaths;
    self->_deselectionTransitionIndexPaths = v18;

  }
  if (self->_pendingDeselectionIndexPaths)
  {
    ((void (*)(void (**)(void *, NSMutableArray *)))v13[2])(v13);
    v20 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
    self->_pendingDeselectionIndexPaths = v20;

  }
  -[NSMutableSet removeAllObjects](self->_hiddenSeparatorIndexPaths, "removeAllObjects");
  v149 = 0u;
  v150 = 0u;
  v147 = 0u;
  v148 = 0u;
  v22 = self->_visibleCells;
  v23 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v22, "countByEnumeratingWithState:objects:count:", &v147, v157, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v148;
    do
    {
      for (i = 0; i != v24; ++i)
      {
        if (*(_QWORD *)v148 != v25)
          objc_enumerationMutation(v22);
        v27 = *(void **)(*((_QWORD *)&v147 + 1) + 8 * i);
        objc_msgSend(v27, "_setSeparatorHidden:", 0);
        objc_msgSend(v27, "_setNeedsSetup:", 1);
      }
      v24 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v22, "countByEnumeratingWithState:objects:count:", &v147, v157, 16);
    }
    while (v24);
  }

  -[UITableView _clearNeedsRecomputeHeightsForInvalidatedElements](self, "_clearNeedsRecomputeHeightsForInvalidatedElements");
  -[UITableView _updateContentSize](self, "_updateContentSize");
  -[_UITableViewUpdateSupport _setupAnimations]((uint64_t)v9);
  v28 = -[UIViewAnimationContext initWithCompletionHandler:]([UIViewAnimationContext alloc], self->_updateCompletionHandler);
  updateCompletionHandler = self->_updateCompletionHandler;
  self->_updateCompletionHandler = 0;

  -[UIViewAnimationContext setViewAnimations:]((uint64_t)v28, *((void **)v9 + 40));
  self->_visibleRows.location = -[UITableViewRowData globalRowsInRect:canGuess:](&self->_rowData->super.isa, 0, *((CGFloat *)v9 + 20), *((CGFloat *)v9 + 21), *((CGFloat *)v9 + 22), *((CGFloat *)v9 + 23));
  self->_visibleRows.length = v30;
  -[UITableView _visibleBounds](self, "_visibleBounds");
  self->_visibleBounds.origin.x = v31;
  self->_visibleBounds.origin.y = v32;
  self->_visibleBounds.size.width = v33;
  self->_visibleBounds.size.height = v34;
  ++self->_updateAnimationCount;
  v35 = 0;
  v110 = v6;
  if (+[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled"))
  {
    if (-[UITableView _clearBlendingViewAllowed](self, "_clearBlendingViewAllowed")
      && (*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0)
    {
      -[UIView superview](self->_clearBlendingView, "superview");
      v36 = (UITableViewWrapperView *)objc_claimAutoreleasedReturnValue();
      wrapperView = self->_wrapperView;

      if (v36 == wrapperView)
      {
        v38 = 1;
        goto LABEL_21;
      }
      if ((*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0)
      {
        v145 = 0u;
        v146 = 0u;
        v143 = 0u;
        v144 = 0u;
        obja = *((id *)v9 + 40);
        v95 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v143, v156, 16);
        if (v95)
        {
          v96 = v95;
          v97 = *(_QWORD *)v144;
          while (2)
          {
            for (j = 0; j != v96; ++j)
            {
              if (*(_QWORD *)v144 != v97)
                objc_enumerationMutation(obja);
              v99 = *(_QWORD **)(*((_QWORD *)&v143 + 1) + 8 * j);
              if (v99)
                v99 = (_QWORD *)v99[3];
              v100 = v99;
              if (_IsKindOfUITableViewCell(v100))
              {
                objc_msgSend(v100, "backgroundColor");
                v101 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v101, "alphaComponent");
                v103 = v102;

                if (v103 < 1.0)
                {
                  -[UITableView _beginAnimatingCells](self, "_beginAnimatingCells");

                  v38 = 1;
                  goto LABEL_40;
                }
              }

            }
            v96 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v143, v156, 16);
            if (v96)
              continue;
            break;
          }
          v38 = 0;
LABEL_40:
          v6 = v110;
        }
        else
        {
          v38 = 0;
        }

        goto LABEL_21;
      }
    }
    v38 = 0;
LABEL_21:
    v35 = v38 != 0;
  }
  v107 = v13;
  -[UITableView _visibleViews](self, "_visibleViews");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _swipeActionController](self, "_swipeActionController");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "_existingSwipeOccurrenceForIndexPath:", self->_swipedIndexPath);
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v40) = _tableViewIsAnimatingSwipeToDelete(v41, v6);
  v42 = MEMORY[0x1E0C809B0];
  v136[0] = MEMORY[0x1E0C809B0];
  v136[1] = 3221225472;
  v136[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_3;
  v136[3] = &unk_1E16BF9A8;
  v136[4] = self;
  v43 = (id *)v9;
  v137 = v43;
  v44 = v28;
  v138 = v44;
  v141 = (char)v40;
  v45 = v41;
  v139 = v45;
  v46 = v39;
  v140 = v46;
  v142 = v35;
  obj = _Block_copy(v136);
  v47 = *((_QWORD *)&self->_tableFlags + 2);
  v48 = HIWORD(v47) & 1;
  *((_QWORD *)&self->_tableFlags + 2) = v47 & 0xFFFEFFFFFFFFFFFFLL;
  v49 = v43[38];
  v131[0] = v42;
  v131[1] = 3221225472;
  v131[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_4;
  v131[3] = &unk_1E16BF810;
  v131[4] = self;
  v50 = v46;
  v132 = v50;
  v108 = v44;
  v133 = v108;
  v135 = v48;
  v51 = v49;
  v134 = v51;
  v52 = _Block_copy(v131);
  if ((_DWORD)v40)
  {
    *((_QWORD *)&self->_tableFlags + 2) |= 0x4000000000000000uLL;
    +[_UISwipeAnimationFactory animatorForTentativeWithOccurrence:](_UISwipeAnimationFactory, "animatorForTentativeWithOccurrence:", v45);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    +[_UISwipeAnimationFactory animatorForCollapse](_UISwipeAnimationFactory, "animatorForCollapse");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "addAnimations:", obj);
    v106 = v50;
    v54 = self->_swipeToDeleteCell;
    -[UITableViewCell _setSkipsLayout:](v54, "_setSkipsLayout:", 1);
    -[UIView layer](v54, "layer");
    v105 = v51;
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "presentationLayer");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "frame");
    v58 = v57;
    v60 = v59;
    v62 = v61;
    v64 = v63;

    -[UIView layer](v54, "layer");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "removeAllAnimations");

    -[UIView layer](v54, "layer");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "setFrame:", v58, v60, v62, v64);

    objc_msgSend(v45, "lockActionViewForAnimation");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableViewCell frame](v54, "frame");
    v69 = v68;
    v71 = v70;
    v73 = v72;
    -[UIView superview](v54, "superview");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v67, "superview");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "convertRect:toView:", v75, 0.0, v69, v71, v73);
    v77 = v76;
    v79 = v78;
    v81 = v80;
    v83 = v82;

    objc_msgSend(v67, "frame");
    v85 = v84;
    v87 = v86;
    v159.origin.x = v77;
    v159.origin.y = v79;
    v159.size.width = v81;
    v159.size.height = v83;
    Width = CGRectGetWidth(v159);
    v160.origin.x = v77;
    v160.origin.y = v79;
    v160.size.width = v81;
    v160.size.height = v83;
    MinX = CGRectGetMinX(v160);
    v125[0] = v42;
    v125[1] = 3221225472;
    v125[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_5;
    v125[3] = &unk_1E16B20D8;
    v90 = v67;
    v126 = v90;
    v127 = MinX;
    v128 = v85;
    v129 = Width;
    v130 = v87;
    objc_msgSend(v104, "addAnimations:", v125);
    v119[0] = v42;
    v119[1] = 3221225472;
    v119[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_6;
    v119[3] = &unk_1E16B20D8;
    v91 = v90;
    v120 = v91;
    v121 = MinX;
    v122 = v85;
    v123 = Width;
    v124 = 0;
    objc_msgSend(v53, "addAnimations:", v119);
    v113[0] = v42;
    v113[1] = 3221225472;
    v113[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_7;
    v113[3] = &unk_1E16E3D08;
    v118 = v52;
    v92 = v45;
    v114 = v92;
    v115 = v91;
    v116 = v54;
    v117 = self;
    v93 = v54;
    v94 = v91;
    objc_msgSend(v53, "addCompletion:", v113);
    objc_msgSend(v104, "startAnimation");
    objc_msgSend(v53, "startAnimation");
    -[UITableView _animateScanlineViewForCell:occurrence:actionsView:](self, "_animateScanlineViewForCell:occurrence:actionsView:", v93, v92, v94);

    v51 = v105;
    v50 = v106;

  }
  else
  {
    -[UITableConstants defaultEditAndUpdateAnimationDuration](self->_constants, "defaultEditAndUpdateAnimationDuration");
    +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 1028, obj, v52);
  }

}

- (void)_updateSeparatorStyleForCell:(id)a3 atIndexPath:(id)a4
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;

  if (a4)
  {
    v6 = *((_WORD *)&self->_tableFlags + 7) & 7;
    v7 = a4;
    v9 = a3;
    objc_msgSend(v9, "setSeparatorStyle:", v6);
    v8 = -[NSMutableSet containsObject:](self->_hiddenSeparatorIndexPaths, "containsObject:", v7);

    objc_msgSend(v9, "_setSeparatorHidden:", v8);
  }
}

- (void)_setupCell:(id)a3 forEditing:(BOOL)a4 atIndexPath:(id)a5 canEdit:(BOOL)a6 editingStyle:(int64_t)a7 shouldIndentWhileEditing:(BOOL)a8 showsReorderControl:(BOOL)a9 accessoryType:(int64_t)a10 animated:(BOOL)a11 updateSeparators:(BOOL)a12
{
  _BOOL8 v12;
  _BOOL4 v14;
  _BOOL4 v16;
  id v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  id v24;

  v12 = a8;
  v14 = a6;
  v16 = a4;
  v24 = a3;
  v18 = a5;
  if ((*((_BYTE *)&self->_tableFlags + 5) & 0x10) != 0
    && (objc_msgSend(v24, "setAccessoryType:", a10),
        objc_msgSend(v24, "_target"),
        v19 = (void *)objc_claimAutoreleasedReturnValue(),
        v19,
        !v19))
  {
    objc_msgSend(v24, "_setTarget:", self);
    objc_msgSend(v24, "_setAccessoryAction:", sel__accessoryButtonAction_);
    if (!v14)
      goto LABEL_10;
  }
  else if (!v14)
  {
LABEL_10:
    objc_msgSend(v24, "_setShowsReorderControl:", a9);
    objc_msgSend(v24, "setEditing:animated:", 0, a11);
    objc_msgSend(v24, "_setEditingStyle:", 0);
    objc_msgSend(v24, "_setShouldIndentWhileEditing:", 0);
    objc_msgSend(v24, "setWasSwiped:", 0);
    objc_msgSend(v24, "_setShowingDeleteConfirmation:", 0);
    v22 = v24;
    v21 = (_QWORD *)&self->_tableFlags + 2;
    v23 = 4096;
    goto LABEL_11;
  }
  if (!v16)
    goto LABEL_10;
  v20 = 0;
  v21 = (_QWORD *)&self->_tableFlags + 2;
  if (v18 && (*((_QWORD *)&self->_tableFlags + 2) & 0x100000000000) != 0)
    v20 = -[NSIndexPath isEqual:](self->_swipedIndexPath, "isEqual:", v18);
  objc_msgSend(v24, "_setShowsReorderControl:", a9);
  objc_msgSend(v24, "_setEditingStyle:", a7);
  objc_msgSend(v24, "_setShouldIndentWhileEditing:", v12);
  objc_msgSend(v24, "setWasSwiped:", v20);
  objc_msgSend(v24, "_setShowingDeleteConfirmation:", v20);
  objc_msgSend(v24, "setEditing:animated:", 1, a11);
  v22 = v24;
  v23 = 0x2000;
LABEL_11:
  objc_msgSend(v22, "_setMultiselecting:", (*v21 & v23) != 0);
  if (v18 && a12)
  {
    -[UITableView _updateSeparatorStateForCell:atIndexPath:](self, "_updateSeparatorStateForCell:atIndexPath:", v24, v18);
    objc_msgSend(v24, "_setNeedsSetup:", 0);
  }

}

- (BOOL)_hasHeaderFooterBelowRowAtIndexPath:(id)a3
{
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t i;
  uint64_t v11;
  double v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  v5 = objc_msgSend(a3, "section");
  v6 = -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1);
  if (v5 >= v6)
    return 0;
  v7 = v6;
  v8 = objc_msgSend(a3, "row");
  if (v8 != -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", v5, 1)- 1)return 0;
  v9 = 1;
  if (((*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3uLL) - 1 >= 2)
  {
    -[UITableView _rectForFooterInSection:usingPresentationValues:](self, "_rectForFooterInSection:usingPresentationValues:", v5, 1);
    if (CGRectGetHeight(v14) <= 0.0)
    {
      if (v5 != v7 - 1 || (-[UIView frame](self->_tableFooterView, "frame"), CGRectGetHeight(v15) <= 0.0))
      {
        for (i = v5 + 1; i < v7; ++i)
        {
          -[UITableView _rectForHeaderInSection:usingPresentationValues:](self, "_rectForHeaderInSection:usingPresentationValues:", i, 1);
          if (CGRectGetHeight(v16) > 0.0)
          {
            -[UITableView _paddingAboveSectionHeaders](self, "_paddingAboveSectionHeaders");
            return v13 == 0.0;
          }
          v11 = -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", i, 1);
          v9 = 0;
          if (v11 >= 1)
            return v9;
        }
        return 0;
      }
    }
  }
  return v9;
}

- (void)_updateSeparatorStateForCell:(id)a3 atIndexPath:(id)a4
{
  id v6;
  int64_t v7;
  id v8;

  if (a4)
  {
    v6 = a4;
    v8 = a3;
    -[UITableView _updateSeparatorStyleForCell:atIndexPath:](self, "_updateSeparatorStyleForCell:atIndexPath:", v8, v6);
    objc_msgSend(v8, "_setDrawsSeparatorAtTopOfSection:", -[UITableView _shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:](self, "_shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:", v6));
    objc_msgSend(v8, "_setDrawsSeparatorAtBottomOfSection:", -[UITableView _shouldDrawSeparatorAtBottomOfSectionForCellAtIndexPath:](self, "_shouldDrawSeparatorAtBottomOfSectionForCellAtIndexPath:", v6));
    objc_msgSend(v8, "_setShouldHaveFullLengthBottomSeparator:", -[UITableView _bottomSeparatorInsetBehaviorForCellAtIndexPath:](self, "_bottomSeparatorInsetBehaviorForCellAtIndexPath:", v6) == 2);
    v7 = -[UITableView _topSeparatorInsetBehaviorForCellAtIndexPath:](self, "_topSeparatorInsetBehaviorForCellAtIndexPath:", v6);

    objc_msgSend(v8, "_setShouldHaveFullLengthTopSeparator:", v7 == 2);
    objc_msgSend(v8, "_setTopSeparatorFollowsLayoutMargins:", v7 == 1);

  }
}

- (int64_t)_topSeparatorInsetBehaviorForCellAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v9;
  void *v10;
  int v11;

  v4 = a3;
  v5 = v4;
  if (v4
    && (v6 = objc_msgSend(v4, "section"),
        v6 < -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1))&& !objc_msgSend(v5, "row"))
  {
    v9 = *((_QWORD *)&self->_tableFlags + 1);
    if ((v9 & 0x400000) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "tableView:shouldHaveFullLengthTopSeparatorForSection:", self, objc_msgSend(v5, "section"));

      if (v11)
        v7 = 2;
      else
        v7 = 0;
    }
    else if (((v9 >> 45) & 3) - 1 >= 2)
    {
      v7 = -[UITableView _shouldDrawTopSeparatorDueToMergedBarForCellAtIndexPath:](self, "_shouldDrawTopSeparatorDueToMergedBarForCellAtIndexPath:", v5) ^ 1;
    }
    else
    {
      v7 = 2;
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (BOOL)_shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:(id)a3
{
  id v4;
  char v5;
  void *v6;
  CGRect v8;

  v4 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 10) & 0x10) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v6, "tableView:shouldDrawTopSeparatorForSection:", self, objc_msgSend(v4, "section"));

    goto LABEL_7;
  }
  if (-[UITableView _shouldDrawTopSeparatorDueToMergedBarForCellAtIndexPath:](self, "_shouldDrawTopSeparatorDueToMergedBarForCellAtIndexPath:", v4))
  {
    goto LABEL_3;
  }
  if ((*((_BYTE *)&self->_tableFlags + 22) & 2) == 0)
    goto LABEL_6;
  if (((*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3uLL) - 1 < 2)
  {
LABEL_3:
    v5 = 1;
    goto LABEL_7;
  }
  if (-[UITableView _headerFooterPinningBehavior](self, "_headerFooterPinningBehavior") != 1
    || (v5 = 1,
        -[UITableView _rectForHeaderInSection:usingPresentationValues:](self, "_rectForHeaderInSection:usingPresentationValues:", objc_msgSend(v4, "section"), 1), CGRectGetHeight(v8) <= 0.0))
  {
LABEL_6:
    v5 = 0;
  }
LABEL_7:

  return v5;
}

- (BOOL)_shouldDrawSeparatorAtBottomOfSectionForCellAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  char v7;
  void *v8;
  _BOOL4 v9;

  v4 = a3;
  v5 = v4;
  v6 = *((_QWORD *)&self->_tableFlags + 1);
  if ((v6 & 0x200000) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v8, "tableView:shouldDrawBottomSeparatorForSection:", self, objc_msgSend(v5, "section"));
LABEL_11:

    goto LABEL_12;
  }
  if (((v6 >> 45) & 3) - 1 >= 2)
  {
    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", objc_msgSend(v4, "section"), 1)- 1, objc_msgSend(v4, "section"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[UITableView _hasHeaderFooterBelowRowAtIndexPath:](self, "_hasHeaderFooterBelowRowAtIndexPath:", v8);
    if (v9 && -[UITableView _headerFooterPinningBehavior](self, "_headerFooterPinningBehavior") == 1)
      v7 = 1;
    else
      v7 = -[UITableView _headerFooterPinningBehavior](self, "_headerFooterPinningBehavior") != 2 && !v9;
    goto LABEL_11;
  }
  v7 = 1;
LABEL_12:

  return v7;
}

- (int64_t)_bottomSeparatorInsetBehaviorForCellAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  void *v10;
  int v11;

  v4 = a3;
  v5 = v4;
  if (!v4
    || (v6 = objc_msgSend(v4, "section"),
        v6 >= -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1))|| (v7 = objc_msgSend(v5, "row"), v7 != -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", objc_msgSend(v5, "section"), 1)- 1))
  {
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  if ((*((_BYTE *)&self->_tableFlags + 10) & 0x80) == 0)
  {
    if (-[UITableView _hasHeaderFooterBelowRowAtIndexPath:](self, "_hasHeaderFooterBelowRowAtIndexPath:", v5)
      && (unint64_t)(-[UITableView _headerFooterPinningBehavior](self, "_headerFooterPinningBehavior") - 1) >= 2)
    {
      v8 = 2;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  -[UITableView _delegateProxy](self, "_delegateProxy");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "tableView:shouldHaveFullLengthBottomSeparatorForSection:", self, objc_msgSend(v5, "section"));

  if (v11)
    v8 = 2;
  else
    v8 = 0;
LABEL_8:

  return v8;
}

- (int64_t)_numberOfRowsInSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  void *v7;
  void *v8;
  int64_t v9;

  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (-[_UITableViewShadowUpdatesController dataSourceBeforeShadowUpdates](shadowUpdatesController, "dataSourceBeforeShadowUpdates"), (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v8 = v7;
    v9 = objc_msgSend(v7, "numberOfItemsInSection:", a3);

    return v9;
  }
  else
  {
    -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
    return -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, a3);
  }
}

- (int64_t)_numberOfSectionsUsingPresentationValues:(BOOL)a3
{
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  void *v5;
  void *v6;
  int64_t v7;
  UITableViewRowData *rowData;

  if (!a3
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (-[_UITableViewShadowUpdatesController dataSourceBeforeShadowUpdates](shadowUpdatesController, "dataSourceBeforeShadowUpdates"), (v5 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "numberOfSections");

    return v7;
  }
  else
  {
    -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
    rowData = self->_rowData;
    if (rowData)
      return rowData->_numSections;
    else
      return 0;
  }
}

- (void)_ensureRowDataIsLoaded
{
  if (!self->_rowData)
    -[UITableView _updateRowData](self, "_updateRowData");
}

- (BOOL)_shouldDrawTopSeparatorDueToMergedBarForCellAtIndexPath:(id)a3
{
  id v4;
  char v5;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;

  v4 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 13) & 0x60) != 0
    || !-[UIScrollView _shouldAdjustLayoutToDrawTopSeparator](self, "_shouldAdjustLayoutToDrawTopSeparator")
    || self->_tableHeaderView
    || self->_tableHeaderBackgroundView
    || !-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData))
  {
    v5 = 0;
  }
  else
  {
    -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7
      && (v9 = objc_msgSend(v7, "section"), v9 == objc_msgSend(v4, "section"))
      && (v10 = objc_msgSend(v8, "row"), v10 == objc_msgSend(v4, "row")))
    {
      if (objc_msgSend(v4, "section") < 0)
      {
        v5 = 1;
      }
      else
      {
        v11 = 0;
        do
        {
          v12 = -[UITableView _delegateWantsHeaderForSection:](self, "_delegateWantsHeaderForSection:", v11);
          if (v12)
            break;
        }
        while (v11++ < objc_msgSend(v4, "section"));
        v5 = !v12;
      }
    }
    else
    {
      v5 = 0;
    }

  }
  return v5;
}

- (CGRect)_rectForHeaderInSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  int64_t v4;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  double v7;
  double v8;
  double v9;
  double v10;
  CGRect result;

  v4 = a3;
  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (v4 = -[_UITableViewShadowUpdatesController sectionAfterShadowUpdates:](shadowUpdatesController, "sectionAfterShadowUpdates:", a3), v4 == 0x7FFFFFFFFFFFFFFFLL))
  {
    v7 = *MEMORY[0x1E0C9D648];
    v8 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v9 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v10 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  }
  else
  {
    -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
    v7 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v4, 0);
  }
  result.size.height = v10;
  result.size.width = v9;
  result.origin.y = v8;
  result.origin.x = v7;
  return result;
}

- (void)_updateIndexFrame
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double MinX;
  double MinY;
  uint64_t v43;
  CGFloat v44;
  double v45;
  double v46;
  double v47;
  double v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  double v58;
  double v59;
  void *v60;
  double v61;
  double v62;
  void *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double MaxX;
  CGFloat v71;
  double v72;
  CGFloat v73;
  void *v74;
  char isKindOfClass;
  CGFloat v76;
  CGFloat v77;
  double v78;
  id v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;

  if (self->_indexContainerView)
  {
    -[UIView bounds](self, "bounds");
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;
    -[UITableView _insetsForIndexBar](self, "_insetsForIndexBar");
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    -[UIView traitCollection](self, "traitCollection");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "userInterfaceIdiom");

    if (v20 == 3)
    {
      -[UIView window](self, "window");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "_screen");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v23, "integerValue") == 2)
      {

      }
      else
      {
        -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "superview");
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        if (v25)
        {
          v26 = (v10 - (v12 + v16) + -64.0) * 0.5;
          v12 = v12 + v26;
          v16 = v16 + v26;
        }
      }
    }
    v76 = v4;
    v77 = v10;
    v27 = v4 + v14;
    v78 = v8;
    v28 = v8 - (v18 + v14);
    v29 = v6;
    v30 = v6 + v12;
    v31 = v10 - (v16 + v12);
    v32 = *((_DWORD *)&self->super.super._viewFlags + 4);
    -[UITableViewIndex sizeThatFits:](self->_index, "sizeThatFits:", v28, v31);
    v34 = v33;
    v36 = v35;
    v37 = v27;
    v38 = v30;
    v39 = v28;
    v40 = v31;
    if ((v32 & 0x80000) != 0)
      MinX = CGRectGetMinX(*(CGRect *)&v37);
    else
      MinX = CGRectGetMaxX(*(CGRect *)&v37) - v34;
    v80.origin.x = v27;
    v80.origin.y = v30;
    v80.size.width = v28;
    v80.size.height = v31;
    MinY = CGRectGetMinY(v80);
    v43 = *((_QWORD *)&self->_tableFlags + 2);
    if ((v43 & 0x800000) != 0)
    {
      if ((v43 & 0x1000000) == 0)
      {
        if ((v32 & 0x80000) != 0)
        {
          MinX = -v34;
        }
        else
        {
          -[UIView bounds](self, "bounds");
          MinX = CGRectGetMaxX(v81);
        }
      }
      -[UIView bounds](self->_index, "bounds");
      v44 = v29;
      if (v36 != v45)
      {
        -[UIView bounds](self->_index, "bounds");
        MinY = MinY + v36 - v46;
        -[UIView bounds](self->_index, "bounds");
        v36 = v47;
      }
    }
    else
    {
      v44 = v29;
    }
    if (v20 == 3)
    {
      -[UITableView _externalIndexWidth](self, "_externalIndexWidth");
      v34 = v48;
      -[UIView window](self, "window");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "_screen");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = objc_msgSend(v51, "integerValue");

      if (v52 != 2)
      {
        -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
        v53 = objc_claimAutoreleasedReturnValue();
        if (!v53)
          goto LABEL_23;
        v54 = (void *)v53;
        -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "superview");
        v56 = (void *)objc_claimAutoreleasedReturnValue();

        if (v56)
        {
          -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v57, "centeringBounds");
          MinX = round(v59 + (v58 - v34) * 0.5);

          -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v60, "centeringBounds");
          MinY = round(v62 + (v61 - v36) * 0.5);

        }
        else
        {
LABEL_23:
          MinX = v78 - v34;
        }
      }
    }
    if ((*((_BYTE *)&self->_tableFlags + 7) & 0x10) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "tableView:frameForSectionIndexGivenProposedFrame:", self, MinX, MinY, v34, v36);
      MinX = v64;
      MinY = v65;
      v34 = v66;
      v36 = v67;

    }
    v68 = 0.0;
    if (v20 == 3)
    {
      v69 = 0.0;
    }
    else if ((v32 & 0x80000) != 0)
    {
      v84.origin.x = MinX;
      v84.origin.y = MinY;
      v84.size.width = v34;
      v84.size.height = v36;
      v72 = CGRectGetMinX(v84);
      v85.origin.x = v76;
      v85.size.height = v77;
      v85.origin.y = v44;
      v85.size.width = v78;
      v73 = CGRectGetMinX(v85);
      v69 = 0.0;
      v68 = fmax(v72 - v73, 0.0);
      MinX = MinX - v68;
      v34 = v34 + v68;
    }
    else
    {
      v82.origin.x = v76;
      v82.size.height = v77;
      v82.origin.y = v44;
      v82.size.width = v78;
      MaxX = CGRectGetMaxX(v82);
      v83.origin.x = MinX;
      v83.origin.y = MinY;
      v83.size.width = v34;
      v83.size.height = v36;
      v71 = CGRectGetMaxX(v83);
      v68 = 0.0;
      v69 = fmax(MaxX - v71, 0.0);
      v34 = v34 + v69;
    }
    -[UITableViewIndex setDrawingInsets:](self->_index, "setDrawingInsets:", 0.0, v68, 0.0, v69);
    -[UIView setFrame:](self->_indexContainerView, "setFrame:", MinX, MinY, v34, v36);
    if (-[UITableView _isShowingIndex](self, "_isShowingIndex"))
    {
      -[UITableView tableHeaderView](self, "tableHeaderView");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) != 0)
      {
        -[UITableView tableHeaderView](self, "tableHeaderView");
        v79 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "_updateInsetsForTableView:", self);

      }
    }
  }
}

- (CGRect)_rectForFooterInSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  int64_t v4;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  double v7;
  double v8;
  double v9;
  double v10;
  CGRect result;

  v4 = a3;
  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (v4 = -[_UITableViewShadowUpdatesController sectionAfterShadowUpdates:](shadowUpdatesController, "sectionAfterShadowUpdates:", a3), v4 == 0x7FFFFFFFFFFFFFFFLL))
  {
    v7 = *MEMORY[0x1E0C9D648];
    v8 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v9 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v10 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  }
  else
  {
    -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
    v7 = -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v4, 0);
  }
  result.size.height = v10;
  result.size.width = v9;
  result.origin.y = v8;
  result.origin.x = v7;
  return result;
}

- (void)_updateContentSize
{
  -[UITableView _updateContentSizeSkippingContentOffsetAdjustment:](self, "_updateContentSizeSkippingContentOffsetAdjustment:", dyld_program_sdk_at_least());
}

id __46__UITableView__updateWithItems_updateSupport___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
          objc_msgSend(v4, "addObject:", v10, (_QWORD)v12);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  return v4;
}

- (void)_clearNeedsRecomputeHeightsForInvalidatedElements
{
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;

  intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
  self->_intrinsicContentSizeInvalidationContext = 0;

  *((_QWORD *)&self->_tableFlags + 3) &= 0xFFFFF9FFFFFFFFFFLL;
}

- (id)_visibleViews
{
  void *v3;
  NSMutableArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3690]), "initWithOptions:capacity:", 512, -[NSMutableArray count](self->_visibleCells, "count"));
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v4 = self->_visibleCells;
  v5 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v29;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v29 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "addObject:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * v8++));
      }
      while (v6 != v8);
      v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
    }
    while (v6);
  }

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  -[NSMutableDictionary objectEnumerator](self->_visibleHeaderViews, "objectEnumerator");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v25;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v25 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(v3, "addObject:", *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v13++));
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
    }
    while (v11);
  }

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[NSMutableDictionary objectEnumerator](self->_visibleFooterViews, "objectEnumerator", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v21;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v21 != v17)
          objc_enumerationMutation(v14);
        objc_msgSend(v3, "addObject:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v18++));
      }
      while (v16 != v18);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
    }
    while (v16);
  }

  return v3;
}

- (void)_resetOrRebaseFocusedViewWithUpdateSupport:(id)a3 indexPathMapping:(id)a4
{
  void (**v6)(id, NSIndexPath *);
  UIView *v7;
  uint64_t focusedViewType;
  NSIndexPath *v9;
  UIView *focusedCell;
  NSIndexPath *focusedCellIndexPath;
  int v12;
  uint64_t v13;
  void *v14;
  NSIndexPath *v15;
  id v16;

  v16 = a3;
  v6 = (void (**)(id, NSIndexPath *))a4;
  *((_QWORD *)&self->_tableFlags + 3) &= ~0x200uLL;
  if (!self->_focusedCellIndexPath)
    goto LABEL_16;
  v7 = self->_focusedCell;
  focusedViewType = self->_focusedViewType;
  v9 = self->_focusedCellIndexPath;
  if (-[UITableView _isFocusedViewInDeletedSectionOrRow:](self, "_isFocusedViewInDeletedSectionOrRow:", v16))
  {
    *((_QWORD *)&self->_tableFlags + 3) |= 0x200uLL;
    focusedCell = self->_focusedCell;
    self->_focusedCell = 0;

    self->_focusedViewType = 0;
    focusedCellIndexPath = self->_focusedCellIndexPath;
    self->_focusedCellIndexPath = 0;

  }
  if (v7 && !self->_focusedCell)
    -[UITableView _reusePreviouslyFocusedTableViewSubviewIfNeeded:viewType:indexPath:](self, "_reusePreviouslyFocusedTableViewSubviewIfNeeded:viewType:indexPath:", v7, focusedViewType, v9);
  if ((*((_BYTE *)&self->_tableFlags + 25) & 2) == 0)
  {
    v12 = self->_focusedViewType;
    if ((v12 - 2) < 2)
    {
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[_UITableViewUpdateSupport finalSectionIndexForInitialSectionIndex:]((uint64_t)v16, -[NSIndexPath section](self->_focusedCellIndexPath, "section")));
      v13 = objc_claimAutoreleasedReturnValue();
LABEL_12:
      v14 = (void *)v13;
      -[UITableView _setFocusedCellIndexPath:](self, "_setFocusedCellIndexPath:", v13);

      goto LABEL_13;
    }
    if (v12 == 1)
    {
      v6[2](v6, self->_focusedCellIndexPath);
      v13 = objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
  }
LABEL_13:
  if (!-[UITableView _indexPathIsValid:](self, "_indexPathIsValid:", self->_focusedCellIndexPath))
  {
    v15 = self->_focusedCellIndexPath;
    self->_focusedCellIndexPath = 0;

    self->_focusedViewType = 0;
  }

LABEL_16:
}

- (id)_reorderingCell
{
  _UITableViewReorderingSupport *reorderingSupport;

  reorderingSupport = self->_reorderingSupport;
  if (reorderingSupport)
    return reorderingSupport->_reorderedCell;
  else
    return 0;
}

- (BOOL)_clearBlendingViewAllowed
{
  return 1;
}

- (void)_boundingPathMayHaveChangedForView:(id)a3 relativeToBoundsOriginOnly:(BOOL)a4
{
  objc_super v6;

  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  -[UIScrollView _boundingPathMayHaveChangedForView:relativeToBoundsOriginOnly:](&v6, sel__boundingPathMayHaveChangedForView_relativeToBoundsOriginOnly_, a3);
  if (!a4)
  {
    -[UITableView _setNeedsIndexBarInsetsUpdate](self, "_setNeedsIndexBarInsetsUpdate");
    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
  }
}

- (void)_setCachedSectionIndexBarInsets:(UIEdgeInsets)a3
{
  self->_cachedSectionIndexBarInsets = a3;
}

- (void)_setNeedsIndexBarInsetsUpdate
{
  double v3;
  double v4;
  double v5;
  double v6;

  -[UITableView _cachedSectionIndexBarInsets](self, "_cachedSectionIndexBarInsets");
  if (v6 != 1.79769313e308 || v3 != 1.79769313e308 || v5 != 1.79769313e308 || v4 != 1.79769313e308)
    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
  -[UITableView _setCachedSectionIndexBarInsets:](self, "_setCachedSectionIndexBarInsets:", 1.79769313e308, 1.79769313e308, 1.79769313e308, 1.79769313e308);
}

- (UIEdgeInsets)_cachedSectionIndexBarInsets
{
  double top;
  double left;
  double bottom;
  double right;
  UIEdgeInsets result;

  top = self->_cachedSectionIndexBarInsets.top;
  left = self->_cachedSectionIndexBarInsets.left;
  bottom = self->_cachedSectionIndexBarInsets.bottom;
  right = self->_cachedSectionIndexBarInsets.right;
  result.right = right;
  result.bottom = bottom;
  result.left = left;
  result.top = top;
  return result;
}

uint64_t __65__UITableView__setupIdiom_forTableViewStyle_includingBackground___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "defaultBackgroundColorForTableViewStyle:", *(_QWORD *)(a1 + 48));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setBackgroundColor:", v3);

    v4 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "defaultBackgroundEffectsForTableViewStyle:", *(_QWORD *)(a1 + 48));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setBackgroundEffects:", v5);

  }
  v6 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "defaultSeparatorColorForTableViewStyle:", *(_QWORD *)(a1 + 48));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSeparatorColor:", v7);

  return objc_msgSend(*(id *)(a1 + 32), "setSeparatorStyle:", objc_msgSend(*(id *)(a1 + 40), "defaultSeparatorStyleForTableViewStyle:", *(_QWORD *)(a1 + 48)));
}

- (int64_t)_numberOfSections
{
  void *v4;
  uint64_t v5;

  if ((*(_BYTE *)&self->_tableFlags & 4) == 0)
    return 1;
  -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "numberOfSectionsInTableView:", self);

  return v5 & ~(v5 >> 63);
}

- (double)_rowSpacing
{
  double result;

  -[UITableConstants defaultPaddingBetweenRowsForTableStyle:](self->_constants, "defaultPaddingBetweenRowsForTableStyle:", -[UITableView style](self, "style"));
  return result;
}

- (double)_topPadding
{
  return self->_topPadding;
}

- (double)_bottomPadding
{
  return self->_bottomPadding;
}

- (double)_headerFooterTrailingMarginWidth
{
  int v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double right;
  BOOL v14;
  UITableConstants *constants;
  void *v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _BOOL4 v28;
  double v29;
  double v30;
  double v31;

  if ((dyld_program_sdk_at_least() & 1) == 0)
    return self->_sectionContentInset.right;
  v3 = *((_DWORD *)&self->super.super._viewFlags + 4);
  -[UITableView _sectionContentInset](self, "_sectionContentInset");
  v5 = v4;
  v7 = v6;
  -[UITableView _tableContentInset](self, "_tableContentInset");
  v9 = fmax(v5 - v8, 0.0);
  v11 = fmax(v7 - v10, 0.0);
  if ((*(_QWORD *)&v3 & 0x80000) != 0)
    v12 = v9;
  else
    v12 = v11;
  right = self->_separatorInset.right;
  v14 = -[UITableView _separatorInsetIsRelativeToCellEdges](self, "_separatorInsetIsRelativeToCellEdges");
  if (v12 == 0.0)
  {
    -[UITableView _defaultTrailingCellMarginWidth](self, "_defaultTrailingCellMarginWidth");
    v22 = v23;
  }
  else
  {
    constants = self->_constants;
    -[UIView window](self, "window");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "screen");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView frame](self->_wrapperView, "frame");
    -[UITableConstants defaultTableLayoutMarginsForScreen:size:tableStyle:](constants, "defaultTableLayoutMarginsForScreen:size:tableStyle:", v17, -[UITableView style](self, "style"), v18, v19);
    if ((*(_QWORD *)&v3 & 0x80000) != 0)
      v22 = v20;
    else
      v22 = v21;

  }
  -[UITableView _indexBarExtentFromEdge](self, "_indexBarExtentFromEdge");
  v25 = v24;
  -[UIView directionalLayoutMargins](self, "directionalLayoutMargins");
  v27 = v26;
  v28 = -[UITableView _shouldApplyReadableWidthInsets](self, "_shouldApplyReadableWidthInsets");
  if (v12 <= 0.0)
  {
    if (right == -1.0)
    {
      v29 = fmax(v25, v27);
      if (v28)
        right = v29;
      else
        right = v25;
    }
    else if (!v14)
    {
      v30 = right + fmax(v27, v25);
      if (v28)
        right = v30;
      else
        right = right + v25;
    }
    v31 = -0.0;
    if (!v28)
      v31 = v22;
    return v31 + right;
  }
  return v22;
}

- (double)_heightForFooterView:(id)a3 inSection:(int64_t)a4
{
  id v6;
  double v7;
  double sectionFooterHeight;
  double v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  CGFloat Width;
  double v17;
  double v18;
  double v19;
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;
  void *v21;
  double v22;
  CGRect v24;

  v6 = a3;
  -[UITableView _classicHeightForFooterInSection:](self, "_classicHeightForFooterInSection:", a4);
  sectionFooterHeight = v7;
  if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0 && v7 == -1.0)
  {
    if (dyld_program_sdk_at_least()
      && !-[UITableView _estimatesSectionFooterHeights](self, "_estimatesSectionFooterHeights"))
    {
      goto LABEL_12;
    }
    v9 = -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, a4, 1);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(v6, "setLayoutMarginsFollowReadableWidth:", -[UITableView cellLayoutMarginsFollowReadableWidth](self, "cellLayoutMarginsFollowReadableWidth"));
      objc_msgSend(v6, "_updateInferredLayoutMarginsFromSuperview:", self);
    }
    -[UITableView _prepareToSizeView:](self, "_prepareToSizeView:", v6);
    v24.origin.x = v9;
    v24.origin.y = v11;
    v24.size.width = v13;
    v24.size.height = v15;
    Width = CGRectGetWidth(v24);
    LODWORD(v17) = 1148846080;
    LODWORD(v18) = 1112014848;
    objc_msgSend(v6, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", Width, 0.0, v17, v18);
    sectionFooterHeight = v19;
    if (v19 <= 0.0)
      sectionFooterHeight = self->_sectionFooterHeight;
    intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
    if (intrinsicContentSizeInvalidationContext)
    {
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathWithIndex:", a4);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionViewLayoutInvalidationContext _removeInvalidatedSupplementaryOfKind:indexPath:](intrinsicContentSizeInvalidationContext, "_removeInvalidatedSupplementaryOfKind:indexPath:", CFSTR("UICollectionElementKindSectionFooter"), v21);

    }
  }
  if (sectionFooterHeight == -1.0)
  {
LABEL_12:
    -[UITableView _defaultSectionFooterHeight](self, "_defaultSectionFooterHeight");
    sectionFooterHeight = v22;
  }

  return sectionFooterHeight;
}

- (double)_heightForFooterInSection:(int64_t)a3
{
  double result;
  void *v6;
  NSMutableDictionary *tentativeFooterViews;
  void *v8;
  double v9;
  double v10;

  -[UITableView _classicHeightForFooterInSection:](self, "_classicHeightForFooterInSection:");
  if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0 && result == -1.0)
  {
    -[UITableView _existingFooterViewForSection:](self, "_existingFooterViewForSection:", a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      tentativeFooterViews = self->_tentativeFooterViews;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary objectForKey:](tentativeFooterViews, "objectForKey:", v8);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
      {
        -[UITableView _sectionFooterViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionFooterViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:", a3, 0, 1, 0, -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, a3, 1));
        v6 = (void *)objc_claimAutoreleasedReturnValue();
      }
    }
    -[UITableView _heightForFooterView:inSection:](self, "_heightForFooterView:inSection:", v6, a3);
    v10 = v9;

    return v10;
  }
  else if (result == -1.0)
  {
    -[UITableView _defaultSectionFooterHeight](self, "_defaultSectionFooterHeight");
  }
  return result;
}

- (id)_sectionFooterViewWithFrame:(CGRect)a3 forSection:(int64_t)a4 floating:(BOOL)a5 reuseViewIfPossible:(BOOL)a6 willDisplay:(BOOL)a7
{
  return -[UITableView _sectionHeaderView:withFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionHeaderView:withFrame:forSection:floating:reuseViewIfPossible:willDisplay:", 0, a4, a5, a6, a7, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (double)_classicHeightForFooterInSection:(int64_t)a3
{
  double sectionFooterHeight;
  double result;
  void *v8;
  double v9;
  int v10;
  _BOOL4 v11;
  void *v12;
  unint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)&self->_tableFlags + 4) & 8) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "tableView:heightForFooterInSection:", self, a3);
    sectionFooterHeight = v9;

    v10 = dyld_program_sdk_at_least();
    v11 = sectionFooterHeight < 0.0;
    if (sectionFooterHeight == -1.0)
      v11 = 0;
    if (v10)
    {
      if (v11)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 18614, CFSTR("Invalid section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&sectionFooterHeight);

      }
    }
    else if (v11)
    {
      v13 = _classicHeightForFooterInSection____s_category;
      if (!_classicHeightForFooterInSection____s_category)
      {
        v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v13, (unint64_t *)&_classicHeightForFooterInSection____s_category);
      }
      v14 = *(NSObject **)(v13 + 8);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v16 = sectionFooterHeight;
        _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "Invalid section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
  }
  else
  {
    sectionFooterHeight = self->_sectionFooterHeight;
    if (sectionFooterHeight == -1.0)
    {
      sectionFooterHeight = -1.0;
      if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) == 0)
      {
        -[UITableView _defaultSectionFooterHeight](self, "_defaultSectionFooterHeight", a3);
        return result;
      }
    }
  }
  return sectionFooterHeight;
}

void __53__UITableView__configureCellForDisplay_forIndexPath___block_invoke(id *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _BOOL4 v20;
  _BOOL8 v21;
  _BYTE *v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  void **v38;
  uint64_t v39;
  uint64_t *v40;
  void *v41;
  int v42;
  id *v43;
  id *v44;
  int v45;
  char v46;
  int v47;
  char v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double Width;
  double v58;
  uint64_t v59;
  double Height;
  void *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  void *v70;
  id *v71;
  id *v72;
  _QWORD v73[6];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  CGRect v83;
  CGRect v84;

  objc_msgSend(a1[5], "_setTableView:", a1[4]);
  objc_msgSend(a1[4], "_constants");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "_setConstants:", v2);

  v3 = a1[4];
  v4 = *((_QWORD *)v3 + 386);
  if ((v4 & 0x10000000000000) != 0)
  {
    v6 = *((_QWORD *)v3 + 387);
    v7 = v4 & 0x80000000000000 | *((_QWORD *)v3 + 293) | v6 & 0x40000000000;
    v8 = v6 & 0x100000000000;
    if (v7)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (v9)
    {
      v5 = 1;
    }
    else
    {
      v5 = objc_msgSend(*((id *)v3 + 293), "isEqual:", a1[6]);
      v3 = a1[4];
    }
  }
  else
  {
    v5 = 0;
  }
  v10 = objc_msgSend(v3, "_tableStyle");
  objc_msgSend(a1[5], "setTableViewStyle:", v10);
  objc_msgSend(a1[5], "setAutoresizingMask:", 2);
  objc_msgSend(a1[5], "_setNeedsSetup:", 1);
  objc_msgSend(a1[4], "_sectionContentInset");
  v14 = v13;
  v15 = v11;
  v17 = v16;
  v18 = v12;
  v20 = v10 == 16 || (unint64_t)(v10 - 1) < 2;
  if (v11 <= 0.0)
    v20 = 0;
  v21 = v12 > 0.0 && v20;
  objc_msgSend(a1[5], "_setOverrideUserInterfaceRenderingMode:", v21);
  objc_msgSend(a1[5], "setSemanticContentAttribute:", objc_msgSend(a1[4], "semanticContentAttribute"));
  v22 = a1[4];
  if ((v22[3085] & 0x10) != 0)
  {
    objc_msgSend(a1[5], "_target");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = a1[4];
    if (!v23)
    {
      objc_msgSend(a1[5], "_setTarget:", a1[4]);
      objc_msgSend(a1[5], "_setAccessoryAction:", sel__accessoryButtonAction_);
      v22 = a1[4];
    }
  }
  objc_msgSend(v22, "_updateDragStateForCell:atIndexPath:", a1[5], a1[6]);
  objc_msgSend(a1[4], "_updateSeparatorStyleForCell:atIndexPath:", a1[5], a1[6]);
  objc_msgSend(a1[4], "_updateTopSeparatorForCell:atIndexPath:", a1[5], a1[6]);
  v82 = 0;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v24 = a1[4];
  v25 = (void *)v24[375];
  v26 = objc_msgSend(v24, "_tableStyle");
  +[UICellConfigurationState _readonlyCellState:]((uint64_t)UICellConfigurationState, 0);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "traitCollection");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v25)
  {
    objc_msgSend(v25, "defaultCellBackgroundPropertiesForTableViewStyle:state:traitCollection:", v26, v27, v28);
  }
  else
  {
    v82 = 0;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
  }

  objc_msgSend(a1[5], "_setDefaultBackgroundColor:", *((_QWORD *)&v74 + 1));
  objc_msgSend(a1[4], "separatorColor");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "setSeparatorColor:", v29);

  objc_msgSend(a1[4], "sectionBorderColor");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "setSectionBorderColor:", v30);

  objc_msgSend(a1[4], "_cellIndexBarExtentFromEdge");
  objc_msgSend(a1[5], "_setIndexBarExtentFromEdge:");
  objc_msgSend(a1[4], "_defaultLeadingCellMarginWidth");
  objc_msgSend(a1[5], "_setDefaultLeadingMarginWidth:");
  objc_msgSend(a1[4], "_defaultTrailingCellMarginWidth");
  objc_msgSend(a1[5], "_setDefaultTrailingCellMarginWidth:");
  v31 = objc_msgSend(a1[5], "_separatorBackdropOverlayBlendMode");
  v32 = a1[4];
  if (v31 != ((v32[387] >> 50) & 7))
  {
    v73[0] = MEMORY[0x1E0C809B0];
    v73[1] = 3221225472;
    v73[2] = __53__UITableView__configureCellForDisplay_forIndexPath___block_invoke_2;
    v73[3] = &unk_1E16DF7D0;
    v33 = a1[5];
    v73[4] = v32;
    v73[5] = v33;
    +[UIView _performSystemAppearanceModifications:](UIView, "_performSystemAppearanceModifications:", v73);
    v32 = a1[4];
  }
  objc_msgSend(a1[5], "_setSeparatorEffect:", v32[324]);
  objc_msgSend(a1[5], "_setBackgroundInset:", v14, v15, v17, v18);
  objc_msgSend(a1[5], "_setAllowsReorderingWhenNotEditing:", *((_DWORD *)a1[4] + 776) & 1);
  v34 = a1[4];
  v35 = a1[5];
  v36 = *((_QWORD *)v34 + 317);
  objc_msgSend(*((id *)v34 + 301), "superview");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = (void **)a1[4];
  if (v37 == v38[302])
    v39 = (*((unsigned __int8 *)v38 + 3102) >> 6) & 1;
  else
    v39 = 0;
  objc_msgSend(v35, "_setAnimating:clippingAdjacentCells:", v36 > 0, v39);

  objc_msgSend(a1[5], "_setHiddenForReuse:", 0);
  v40 = (uint64_t *)a1[4];
  if ((*((_BYTE *)v40 + 3086) & 0x80) != 0)
  {
    objc_msgSend(v40, "_delegateProxy");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "setIndentationLevel:", objc_msgSend(v41, "tableView:indentationLevelForRowAtIndexPath:", a1[4], a1[6]));

    v40 = (uint64_t *)a1[4];
  }
  objc_msgSend(a1[5], "setSectionLocation:animated:", -[UITableViewRowData sectionLocationForRow:inSection:](v40[260], objc_msgSend(a1[6], "row"), objc_msgSend(a1[6], "section")), 0);
  v42 = dyld_program_sdk_at_least();
  if (v42)
  {
    objc_msgSend(a1[5], "_prepareToSetDefaultLayoutMargins");
    objc_msgSend(*((id *)a1[4] + 375), "defaultLayoutMarginsForCell:inTableView:", a1[5]);
    objc_msgSend(a1[5], "setLayoutMargins:");
    objc_msgSend(a1[5], "setLayoutMarginsFollowReadableWidth:", objc_msgSend(a1[4], "cellLayoutMarginsFollowReadableWidth"));
  }
  objc_msgSend(a1[5], "_setInsetsContentViewsToSafeArea:", objc_msgSend(a1[4], "insetsContentViewsToSafeArea"));
  objc_msgSend(a1[5], "_setSeparatorInsetIsRelativeToCellEdges:", objc_msgSend(a1[4], "_separatorInsetIsRelativeToCellEdges"));
  objc_msgSend(a1[5], "_setAutomaticIntrinsicContentSizeInvalidationEnabled:", (*((_QWORD *)a1[4] + 388) & 0x18000000000) == 0x10000000000);
  if (v42)
  {
    v43 = (id *)(id)objc_msgSend(a1[5], "superview");
    v44 = (id *)a1[4];
    if (v43 != v44 || v43 != v43[302])
      objc_msgSend(v44, "_addContentSubview:atBack:", a1[5], 1);
  }
  v45 = dyld_program_sdk_at_least();
  v46 = v45;
  if (v45 && (*((_BYTE *)a1[4] + 3094) & 0x80) == 0)
  {
    objc_msgSend(a1[5], "setNeedsLayout");
    objc_msgSend(a1[4], "_setupCell:forEditing:atIndexPath:animated:updateSeparators:", a1[5], v5, a1[6], 0, 1);
  }
  v47 = dyld_program_sdk_at_least();
  v48 = v47;
  if (v47)
  {
    objc_msgSend(a1[4], "_updateSelectedAndHighlightedStateForCell:atIndexPath:", a1[5], a1[6]);
    objc_msgSend(a1[4], "_updateSelectionGroupingForCell:atIndexPath:", a1[5], a1[6]);
  }
  objc_msgSend(a1[4], "_rectForRowAtIndexPath:canGuess:", a1[6], (*((_QWORD *)a1[4] + 388) >> 4) & 1);
  v53 = v49;
  v54 = v50;
  v55 = v51;
  v56 = v52;
  if ((*((_BYTE *)a1[4] + 3104) & 0x10) != 0)
  {
    if (v42)
    {
      Width = CGRectGetWidth(*(CGRect *)&v49);
      objc_msgSend(a1[5], "frame");
      if (Width != CGRectGetWidth(v83))
        objc_msgSend(a1[5], "_setFrame:skipLayout:", 1, v53, v54, v55, v56);
    }
    objc_msgSend(a1[4], "_heightForCell:atIndexPath:", a1[5], a1[6]);
    v56 = v58;
    v59 = *((_QWORD *)a1[4] + 260);
    v84.origin.x = v53;
    v84.origin.y = v54;
    v84.size.width = v55;
    v84.size.height = v56;
    Height = CGRectGetHeight(v84);
    -[UITableViewRowData setHeight:forRowAtIndexPath:](v59, a1[6], Height);
  }
  objc_msgSend(a1[5], "setFrame:", v53, v54, v55, v56);
  objc_msgSend(a1[5], "_setNeedsHeightCalculation:", 0);
  objc_msgSend(a1[5], "layoutManager");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "contentRectForCell:forState:", a1[5], objc_msgSend(a1[5], "currentStateMask"));
  v63 = v62;
  v65 = v64;
  v67 = v66;
  v69 = v68;
  objc_msgSend(a1[5], "contentView");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "setFrame:", v63, v65, v67, v69);

  objc_msgSend(a1[5], "_setTableView:", 0);
  if ((*((_BYTE *)a1[4] + 3094) & 0x80) == 0)
  {
    if ((v42 & 1) == 0)
    {
      v71 = (id *)(id)objc_msgSend(a1[5], "superview");
      v72 = (id *)a1[4];
      if (v71 != v72 || v71 != v71[302])
        objc_msgSend(v72, "_addContentSubview:atBack:", a1[5], 1);
    }
    if ((v46 & 1) == 0)
    {
      objc_msgSend(a1[5], "setNeedsLayout");
      objc_msgSend(a1[4], "_setupCell:forEditing:atIndexPath:animated:updateSeparators:", a1[5], v5, a1[6], 0, 1);
    }
  }
  if ((v48 & 1) == 0)
    objc_msgSend(a1[4], "_updateSelectedAndHighlightedStateForCell:atIndexPath:", a1[5], a1[6]);
  __destructor_8_s8_s16_s24_s80((id *)&v74);
}

- (BOOL)_separatorInsetIsRelativeToCellEdges
{
  return *((unsigned __int8 *)&self->_tableFlags + 25) >> 7;
}

- (void)_updateIndex
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  NSMutableArray *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  UITableViewIndex **p_index;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  UISelectionFeedbackGenerator *v22;
  UISelectionFeedbackGenerator *indexRetargetFeedbackGenerator;
  UITableViewIndex *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  id v30;
  id v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (-[UITableView _dataSourceHasSectionIndexTitlesForTableView](self, "_dataSourceHasSectionIndexTitlesForTableView"))
  {
    v3 = *((_QWORD *)&self->_tableFlags + 2);
    if ((v3 & 0x8000000) == 0)
    {
      v4 = *((_QWORD *)&self->_tableFlags + 3);
      *((_QWORD *)&self->_tableFlags + 2) = v3 | 0x8000000;
      *((_QWORD *)&self->_tableFlags + 3) = v4;
      -[UITableView _updateIndexTitlesFromDataSource](self, "_updateIndexTitlesFromDataSource");
      -[UITableView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v5;
      if (v5
        && objc_msgSend(v5, "count")
        && (uint64_t)-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData) >= self->_sectionIndexMinimumDisplayRowCount)
      {
        p_index = &self->_index;
        if (!self->_index)
        {
          v30 = 0;
          v31 = 0;
          -[UIView traitCollection](self, "traitCollection");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          +[UITableViewIndex makeTableViewIndex:containerView:forTraits:](UITableViewIndex, "makeTableViewIndex:containerView:forTraits:", &v31, &v30, v15);
          v16 = v31;
          v17 = v31;
          v18 = v30;
          v19 = v30;

          objc_storeStrong((id *)&self->_index, v16);
          -[UIControl addTarget:action:forControlEvents:](*p_index, "addTarget:action:forControlEvents:", self, sel__sectionIndexTouchesBegan_, 1);
          -[UIControl addTarget:action:forControlEvents:](*p_index, "addTarget:action:forControlEvents:", self, sel__sectionIndexChanged_, 4096);
          -[UIControl addTarget:action:forControlEvents:](*p_index, "addTarget:action:forControlEvents:", self, sel__sectionIndexTouchesEnded_, 448);
          objc_storeStrong((id *)&self->_indexContainerView, v18);
          if (!self->_indexRetargetFeedbackGenerator)
          {
            +[_UISelectionFeedbackGeneratorConfiguration strongConfiguration](_UISelectionFeedbackGeneratorConfiguration, "strongConfiguration");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "tweakedConfigurationForClass:usage:", objc_opt_class(), CFSTR("indexRetarget"));
            v21 = (void *)objc_claimAutoreleasedReturnValue();

            v22 = -[UIFeedbackGenerator initWithConfiguration:view:]([UISelectionFeedbackGenerator alloc], "initWithConfiguration:view:", v21, *p_index);
            indexRetargetFeedbackGenerator = self->_indexRetargetFeedbackGenerator;
            self->_indexRetargetFeedbackGenerator = v22;

          }
          if (-[UITableView _shouldSetIndexBackgroundColorToTableBackgroundColor](self, "_shouldSetIndexBackgroundColorToTableBackgroundColor"))
          {
            v24 = *p_index;
            -[UIView backgroundColor](self, "backgroundColor");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            -[UIView setBackgroundColor:](v24, "setBackgroundColor:", v25);

          }
          -[UITableViewIndex setIndexColor:](*p_index, "setIndexColor:", self->_indexColor);
          -[UITableViewIndex setIndexBackgroundColor:](*p_index, "setIndexBackgroundColor:", self->_indexBackgroundColor);
          -[UITableViewIndex setIndexTrackingBackgroundColor:](*p_index, "setIndexTrackingBackgroundColor:", self->_indexTrackingBackgroundColor);
          -[UITableView _addIndexToAppropriateContainer](self, "_addIndexToAppropriateContainer");

        }
        -[UITableView _updateIndexDisplayedTitles](self, "_updateIndexDisplayedTitles");
      }
      else
      {
        -[UITableView _removeIndex](self, "_removeIndex");
      }

    }
    if (self->_index)
    {
      -[UITableView _updateIndexFrame](self, "_updateIndexFrame");
      -[UITableView _addIndexToAppropriateContainer](self, "_addIndexToAppropriateContainer");
    }
  }
  else if (self->_index)
  {
    -[UITableView _removeIndex](self, "_removeIndex");
  }
  -[UITableView _cellIndexBarExtentFromEdge](self, "_cellIndexBarExtentFromEdge");
  v8 = v7;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v9 = self->_visibleCells;
  v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v27 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * i), "_setIndexBarExtentFromEdge:", v8, (_QWORD)v26);
      }
      v11 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
    }
    while (v11);
  }

}

- (double)_cellIndexBarExtentFromEdge
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  -[UITableView _indexBarExtentFromEdge](self, "_indexBarExtentFromEdge");
  v4 = v3;
  -[UITableView _sectionContentInset](self, "_sectionContentInset");
  if ((*((_DWORD *)&self->super.super._viewFlags + 4) & 0x80000) != 0)
    v7 = v5;
  else
    v7 = v6;
  return fmax(v4 - v7, 0.0);
}

- (BOOL)_dataSourceHasSectionIndexTitlesForTableView
{
  return (*(_WORD *)&self->_tableFlags & 0x180) != 0;
}

- (double)_defaultTrailingCellMarginWidth
{
  double result;

  -[UITableConstants defaultTrailingCellMarginWidthForTableView:](self->_constants, "defaultTrailingCellMarginWidthForTableView:", self);
  return result;
}

- (double)_heightForHeaderView:(id)a3 inSection:(int64_t)a4
{
  id v6;
  double v7;
  double sectionHeaderHeight;
  double v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  CGFloat Width;
  double v17;
  double v18;
  double v19;
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;
  void *v21;
  double v22;
  CGRect v24;

  v6 = a3;
  -[UITableView _classicHeightForHeaderInSection:](self, "_classicHeightForHeaderInSection:", a4);
  sectionHeaderHeight = v7;
  if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0 && v7 == -1.0)
  {
    if (dyld_program_sdk_at_least()
      && !-[UITableView _estimatesSectionHeaderHeights](self, "_estimatesSectionHeaderHeights"))
    {
      goto LABEL_12;
    }
    v9 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, a4, 1);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(v6, "setLayoutMarginsFollowReadableWidth:", -[UITableView cellLayoutMarginsFollowReadableWidth](self, "cellLayoutMarginsFollowReadableWidth"));
      objc_msgSend(v6, "_updateInferredLayoutMarginsFromSuperview:", self);
    }
    -[UITableView _prepareToSizeView:](self, "_prepareToSizeView:", v6);
    v24.origin.x = v9;
    v24.origin.y = v11;
    v24.size.width = v13;
    v24.size.height = v15;
    Width = CGRectGetWidth(v24);
    LODWORD(v17) = 1148846080;
    LODWORD(v18) = 1112014848;
    objc_msgSend(v6, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", Width, 0.0, v17, v18);
    sectionHeaderHeight = v19;
    if (v19 <= 0.0)
      sectionHeaderHeight = self->_sectionHeaderHeight;
    intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
    if (intrinsicContentSizeInvalidationContext)
    {
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathWithIndex:", a4);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionViewLayoutInvalidationContext _removeInvalidatedSupplementaryOfKind:indexPath:](intrinsicContentSizeInvalidationContext, "_removeInvalidatedSupplementaryOfKind:indexPath:", CFSTR("UICollectionElementKindSectionHeader"), v21);

    }
  }
  if (sectionHeaderHeight == -1.0)
  {
LABEL_12:
    -[UITableView _defaultSectionHeaderHeight](self, "_defaultSectionHeaderHeight");
    sectionHeaderHeight = v22;
  }

  return sectionHeaderHeight;
}

- (BOOL)cellLayoutMarginsFollowReadableWidth
{
  return (*((unsigned __int8 *)&self->_tableFlags + 25) >> 5) & 1;
}

- (CGRect)_rectForRowAtIndexPath:(id)a3 canGuess:(BOOL)a4
{
  id v6;
  UITableViewRowData *rowData;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGRect result;

  v6 = a3;
  -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
  rowData = self->_rowData;
  v8 = objc_msgSend(v6, "row");
  v9 = objc_msgSend(v6, "section");

  v10 = -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)rowData, v8, v9, a4);
  result.size.height = v13;
  result.size.width = v12;
  result.origin.y = v11;
  result.origin.x = v10;
  return result;
}

- (id)sectionBorderColor
{
  UIColor *sectionBorderColor;

  sectionBorderColor = self->_sectionBorderColor;
  if (sectionBorderColor)
    return sectionBorderColor;
  -[UITableView separatorColor](self, "separatorColor");
  return (id)objc_claimAutoreleasedReturnValue();
}

- (UIColor)separatorColor
{
  _BOOL4 v3;
  uint64_t v4;

  v3 = -[UITableView _shouldDrawDarkSeparators](self, "_shouldDrawDarkSeparators");
  v4 = 95;
  if (v3)
    v4 = 110;
  return (UIColor *)objc_retainAutoreleaseReturnValue(*(id *)((char *)&self->super.super.super.super.isa
                                                            + OBJC_IVAR___UITableView__rowData[v4]));
}

- (BOOL)_shouldDrawDarkSeparators
{
  int v2;

  v2 = dyld_program_sdk_at_least();
  if (v2)
    LOBYTE(v2) = _AXDarkenSystemColors() != 0;
  return v2;
}

- (void)_updateSelectionGroupingForCell:(id)a3 atIndexPath:(id)a4
{
  id v6;
  int64_t v7;
  int64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  double v28;
  double MinY;
  double v30;
  CGFloat v31;
  CGFloat v32;
  double v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  id v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;

  v45 = a3;
  v6 = a4;
  if (-[UITableView _allowsEffectiveMultipleSelection](self, "_allowsEffectiveMultipleSelection")
    && -[UITableView _shouldIncludeRowInMultipleSelectionGroupWithCell:atIndexPath:](self, "_shouldIncludeRowInMultipleSelectionGroupWithCell:atIndexPath:", v45, v6))
  {
    v7 = -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:", v6);
    v8 = v7;
    v9 = (*((_BYTE *)&self->_tableFlags + 28) & 1) == 0 && self->_indexPathBeingCreated == 0;
    -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", v7 + 1);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)v10;
    v12 = 0;
    if (v9 && v10)
    {
      -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v10, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v13 = -[UITableView _shouldIncludeRowInMultipleSelectionGroupWithCell:atIndexPath:](self, "_shouldIncludeRowInMultipleSelectionGroupWithCell:atIndexPath:", v12, v11);
    -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", v8 - 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
      v15 = v9;
    else
      v15 = 0;
    if (v15)
    {
      -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v14, 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v16 = 0;
    }
    v17 = -[UITableView _shouldIncludeRowInMultipleSelectionGroupWithCell:atIndexPath:](self, "_shouldIncludeRowInMultipleSelectionGroupWithCell:atIndexPath:", v16, v14);
    if (v13 || v17)
    {
      v18 = v17;
      -[UITableView _rectForRowAtIndexPath:canGuess:](self, "_rectForRowAtIndexPath:canGuess:", v6, 1);
      v20 = v19;
      v22 = v21;
      v24 = v23;
      v26 = v25;
      -[UIView _currentScreenScale](self, "_currentScreenScale");
      v28 = 1.0 / v27;
      if (v13)
      {
        -[UITableView _rectForRowAtIndexPath:canGuess:](self, "_rectForRowAtIndexPath:canGuess:", v11, 1);
        MinY = CGRectGetMinY(v46);
        v47.origin.x = v20;
        v47.origin.y = v22;
        v47.size.width = v24;
        v47.size.height = v26;
        LOBYTE(v13) = MinY - CGRectGetMaxY(v47) < v28;
      }
      if (v18)
      {
        -[UITableView _rectForRowAtIndexPath:canGuess:](self, "_rectForRowAtIndexPath:canGuess:", v14, 1);
        v31 = v30;
        v32 = v22;
        v33 = v28;
        v35 = v34;
        v37 = v36;
        v39 = v38;
        v48.origin.x = v20;
        v48.origin.y = v32;
        v48.size.width = v24;
        v48.size.height = v26;
        v40 = CGRectGetMinY(v48);
        v49.origin.x = v31;
        v49.origin.y = v35;
        v49.size.width = v37;
        v49.size.height = v39;
        v41 = v40 - CGRectGetMaxY(v49) < v33;
        if (v13)
          v42 = 2;
        else
          v42 = 4;
        if (v13 && v41)
          v43 = 1;
        else
          v43 = 3;
        if (v41)
          v44 = v43;
        else
          v44 = v42;
      }
      else if (v13)
      {
        v44 = 2;
      }
      else
      {
        v44 = 4;
      }
    }
    else
    {
      v44 = 4;
    }
    objc_msgSend(v45, "_setSelectionGrouping:", v44);

  }
  else
  {
    objc_msgSend(v45, "_setSelectionGrouping:", 4);
  }

}

- (void)_updateSelectedAndHighlightedStateForCell:(id)a3 atIndexPath:(id)a4
{
  id v6;
  id v7;

  v7 = a3;
  v6 = a4;
  if (!-[UITableView _shouldDeselectRowsOnTouchesBegan](self, "_shouldDeselectRowsOnTouchesBegan")
    || (-[NSMutableArray containsObject:](self->_pendingDeselectionIndexPaths, "containsObject:", v6) & 1) == 0)
  {
    objc_msgSend(v7, "setSelected:", -[NSMutableArray containsObject:](self->_selectedIndexPaths, "containsObject:", v6));
    objc_msgSend(v7, "setHighlighted:", -[NSMutableArray containsObject:](self->_highlightedIndexPaths, "containsObject:", v6));
  }

}

- (void)_updateDragStateForCell:(id)a3 atIndexPath:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  UITableViewRowData *rowData;
  NSIndexPath *v10;
  NSIndexPath *v11;
  id v12;

  v12 = a3;
  v6 = a4;
  -[_UITableViewDragController indexPaths](self->_dragController, "indexPaths");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7 && objc_msgSend(v7, "containsObject:", v6))
  {
    rowData = self->_rowData;
    if (rowData)
    {
      v10 = rowData->_draggedIndexPath;
      v11 = v10;
      if (v10 && -[NSIndexPath isEqual:](v10, "isEqual:", v6))
      {
        objc_msgSend(v12, "_setDragState:", 0);
        objc_msgSend(v12, "setAlpha:", 0.0);
LABEL_10:

        goto LABEL_11;
      }
    }
    else
    {
      v11 = 0;
    }
    objc_msgSend(v12, "_setDragState:", 2);
    goto LABEL_10;
  }
  objc_msgSend(v12, "_setDragState:", 0);
  objc_msgSend(v12, "setAlpha:", 1.0);
LABEL_11:

}

- (void)_updateTopSeparatorForCell:(id)a3 atIndexPath:(id)a4
{
  uint64_t v6;
  id v7;

  v7 = a3;
  if (-[UITableView shouldDisplayTopSeparatorForRowAtIndexPath:](self, "shouldDisplayTopSeparatorForRowAtIndexPath:", a4))
  {
    v6 = objc_msgSend(v7, "_drawsTopSeparatorDuringReordering");
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v7, "_setDrawsTopSeparator:", v6);

}

- (BOOL)shouldDisplayTopSeparatorForRowAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  UITableViewRowData *rowData;
  NSIndexPath *v9;
  NSIndexPath *v10;
  UITableViewRowData *v11;
  UITableViewRowData *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t i;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  uint64_t (*v23)(_QWORD *, void *);
  void *v24;
  UITableView *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, "section");
    v7 = objc_msgSend(v5, "row");
    rowData = self->_rowData;
    if (rowData)
    {
      v9 = rowData->_reorderedIndexPath;
      v10 = v9;
      if (v9 && v6 == -[NSIndexPath section](v9, "section") && v7 <= -[NSIndexPath row](v10, "row"))
        ++v7;
    }
    else
    {
      v10 = 0;
    }
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v23 = __58__UITableView_shouldDisplayTopSeparatorForRowAtIndexPath___block_invoke;
    v24 = &unk_1E16E3FB0;
    v26 = v6;
    v27 = v7;
    v25 = self;
    v11 = self->_rowData;
    if (v11)
      v11 = (UITableViewRowData *)v11->_gapIndexPath;
    v12 = v11;
    if ((__58__UITableView_shouldDisplayTopSeparatorForRowAtIndexPath___block_invoke(v22, v12) & 1) != 0)
    {
      LOBYTE(v13) = 1;
    }
    else
    {
      -[_UITableViewDragController indexPaths](self->_dragController, "indexPaths");
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v14 = (id)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v18, v28, 16);
      if (v13)
      {
        v15 = *(_QWORD *)v19;
        while (2)
        {
          for (i = 0; i != v13; ++i)
          {
            if (*(_QWORD *)v19 != v15)
              objc_enumerationMutation(v14);
            if ((v23(v22, *(void **)(*((_QWORD *)&v18 + 1) + 8 * i)) & 1) != 0)
            {
              LOBYTE(v13) = 1;
              goto LABEL_22;
            }
          }
          v13 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v18, v28, 16);
          if (v13)
            continue;
          break;
        }
      }
LABEL_22:

    }
  }
  else
  {
    LOBYTE(v13) = 0;
  }

  return v13;
}

uint64_t __58__UITableView_shouldDisplayTopSeparatorForRowAtIndexPath___block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = v3;
  if (!v3)
  {
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  v5 = objc_msgSend(v3, "section");
  v6 = objc_msgSend(v4, "row");
  v7 = a1[5];
  if (v7 != v5 || a1[6] != v6 + 1)
  {
    if (v7 == v5 + 1 && !a1[6])
    {
      v8 = -[UITableViewRowData hasHeaderForSection:](*(_QWORD *)(a1[4] + 2080), v7) ^ 1;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  v8 = 1;
LABEL_8:

  return v8;
}

- (BOOL)_shouldDeselectRowsOnTouchesBegan
{
  void *v2;
  uint64_t v3;

  if ((*((_BYTE *)&self->_tableFlags + 28) & 0x20) != 0)
    return 0;
  +[UIDevice currentDevice](UIDevice, "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  return (v3 & 0xFFFFFFFFFFFFFFFBLL) == 1;
}

- (double)_defaultLeadingCellMarginWidth
{
  double result;

  -[UITableConstants defaultLeadingCellMarginWidthForTableView:](self->_constants, "defaultLeadingCellMarginWidthForTableView:", self);
  return result;
}

- (BOOL)_allowsEffectiveMultipleSelection
{
  int v2;

  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0)
    v2 = 0x2000;
  else
    v2 = 4096;
  return (v2 & *((_DWORD *)&self->_tableFlags + 4)) != 0;
}

- (BOOL)_sectionContentInsetFollowsLayoutMargins
{
  return (*((unsigned __int8 *)&self->_tableFlags + 25) >> 6) & 1;
}

- (id)_createPreparedCellForGlobalRow:(int64_t)a3 willDisplay:(BOOL)a4
{
  _BOOL8 v4;
  void *v7;
  id v8;

  v4 = a4;
  -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[UITableView _createPreparedCellForGlobalRow:withIndexPath:willDisplay:](self, "_createPreparedCellForGlobalRow:withIndexPath:willDisplay:", a3, v7, v4);

  return v8;
}

- (id)_cellForRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4
{
  id v7;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  UIView *v14;
  unint64_t v15;
  NSUInteger location;
  NSUInteger v17;
  BOOL v18;
  _NSRange *p_visibleRows;
  NSUInteger v20;
  NSUInteger v21;
  void *v23;
  unint64_t v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  NSMutableArray *v29;
  NSMutableArray *visibleCells;
  int v32;
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  NSUInteger v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  NSMutableArray *v41;
  uint64_t v42;
  NSRange v43;
  NSRange v44;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (!a4)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v7);
      v9 = objc_claimAutoreleasedReturnValue();

      v7 = (id)v9;
    }
  }
  if (!v7)
    goto LABEL_40;
  if ((*((_BYTE *)&self->_tableFlags + 28) & 1) != 0)
  {
    UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate(self);
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
      v15 = -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:", v7);
      location = self->_visibleRows.location;
      v17 = v15 - location;
      v18 = v15 < location || v17 >= self->_visibleRows.length;
      if (!v18 && v17 < -[NSMutableArray count](self->_visibleCells, "count"))
      {
        -[NSMutableArray objectAtIndex:](self->_visibleCells, "objectAtIndex:", v17);
        v14 = (UIView *)objc_claimAutoreleasedReturnValue();
        goto LABEL_39;
      }
    }
LABEL_40:
    v23 = 0;
    goto LABEL_41;
  }
  -[UITableView _visibleBounds](self, "_visibleBounds");
  v10 = -[UITableView _visibleGlobalRowsInRect:](self, "_visibleGlobalRowsInRect:");
  v12 = v11;
  v13 = -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:", v7);
  if (v13 >= v10 && v13 - v10 < v12)
    -[UITableView _updateVisibleCellsImmediatelyIfNecessary](self, "_updateVisibleCellsImmediatelyIfNecessary");
  if (-[UITableView _hasFocusedCellForIndexPath:](self, "_hasFocusedCellForIndexPath:", v7))
  {
    -[UITableView _focusedCell](self, "_focusedCell");
    v14 = (UIView *)objc_claimAutoreleasedReturnValue();
LABEL_39:
    v23 = v14;
    goto LABEL_41;
  }
  if (self->_firstResponderIndexPath
    && self->_firstResponderViewType == 1
    && objc_msgSend(v7, "isEqual:")
    && dyld_program_sdk_at_least())
  {
    v14 = self->_firstResponderView;
    goto LABEL_39;
  }
  p_visibleRows = &self->_visibleRows;
  v20 = self->_visibleRows.location;
  v18 = v13 >= v20;
  v21 = v13 - v20;
  if (!v18 || v21 >= self->_visibleRows.length)
    goto LABEL_37;
  if (v21 >= -[NSMutableArray count](self->_visibleCells, "count"))
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v26 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
        goto LABEL_36;
      NSStringFromSelector(a2);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v44.location = p_visibleRows->location;
      v44.length = self->_visibleRows.length;
      NSStringFromRange(v44);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      visibleCells = self->_visibleCells;
      v32 = 138413314;
      v33 = v27;
      v34 = 2112;
      v35 = v7;
      v36 = 2048;
      v37 = v21;
      v38 = 2112;
      v39 = v28;
      v40 = 2112;
      v41 = visibleCells;
      _os_log_fault_impl(&dword_185066000, v26, OS_LOG_TYPE_FAULT, "UITableView internal inconsistency: out-of-bounds index into _visibleCells array in call to %@. indexPath: %@; i"
        "ndex into _visibleCells: %ld; _visibleRows: %@; _visibleCells: %@",
        (uint8_t *)&v32,
        0x34u);
LABEL_35:

LABEL_36:
      goto LABEL_37;
    }
    v24 = _cellForRowAtIndexPath_usingPresentationValues____s_category;
    if (!_cellForRowAtIndexPath_usingPresentationValues____s_category)
    {
      v24 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v24, (unint64_t *)&_cellForRowAtIndexPath_usingPresentationValues____s_category);
    }
    v25 = *(NSObject **)(v24 + 8);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = v25;
      NSStringFromSelector(a2);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v43.location = p_visibleRows->location;
      v43.length = self->_visibleRows.length;
      NSStringFromRange(v43);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = self->_visibleCells;
      v32 = 138413314;
      v33 = v27;
      v34 = 2112;
      v35 = v7;
      v36 = 2048;
      v37 = v21;
      v38 = 2112;
      v39 = v28;
      v40 = 2112;
      v41 = v29;
      _os_log_impl(&dword_185066000, v26, OS_LOG_TYPE_ERROR, "UITableView internal inconsistency: out-of-bounds index into _visibleCells array in call to %@. indexPath: %@; i"
        "ndex into _visibleCells: %ld; _visibleRows: %@; _visibleCells: %@",
        (uint8_t *)&v32,
        0x34u);
      goto LABEL_35;
    }
LABEL_37:
    if (dyld_program_sdk_at_least())
    {
      -[_UITableViewSubviewManager prefetchedCellAtIndexPath:]((id *)&self->_subviewManager->super.isa, (uint64_t)v7);
      v14 = (UIView *)objc_claimAutoreleasedReturnValue();
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  -[NSMutableArray objectAtIndex:](self->_visibleCells, "objectAtIndex:", v21);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v23)
    goto LABEL_37;
LABEL_41:

  return v23;
}

- (void)_applyContentSizeDeltaImmediately:(double)a3
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void (**v13)(_QWORD);
  _QWORD aBlock[7];

  -[UIScrollView contentSize](self, "contentSize");
  v6 = v5;
  v8 = v7 + a3;
  if (-[UIScrollView isScrollAnimating](self, "isScrollAnimating")
    || -[UIScrollView isDecelerating](self, "isDecelerating")
    || -[UIScrollView isDragging](self, "isDragging"))
  {
    -[UITableView setContentSize:skipContentOffsetAdjustment:](self, "setContentSize:skipContentOffsetAdjustment:", 1, v6, v8);
  }
  else
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    v10 = v9;
    -[UITableView _validContentOffsetForProposedOffset:](self, "_validContentOffsetForProposedOffset:");
    v12 = v11;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __49__UITableView__applyContentSizeDeltaImmediately___block_invoke;
    aBlock[3] = &unk_1E16B4E70;
    aBlock[4] = self;
    *(double *)&aBlock[5] = v6;
    *(double *)&aBlock[6] = v8;
    v13 = (void (**)(_QWORD))_Block_copy(aBlock);
    if (v10 == v12 && +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled"))
      -[UIScrollView performWhileAnimatingAutomaticContentOffsetAdjustments:](self, "performWhileAnimatingAutomaticContentOffsetAdjustments:", v13);
    else
      v13[2](v13);

  }
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1);
  -[UITableView _adjustTableHeaderAndFooterViews](self, "_adjustTableHeaderAndFooterViews");
}

- (void)_updateVisibleCellsNow:(BOOL)a3
{
  _BOOL8 v3;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  void *v15;
  _BOOL4 v16;
  _QWORD *v17;
  double v18;
  double v19;
  double MinY;
  CGRect *p_visibleBounds;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  CGFloat v40;
  double v41;
  double v42;
  NSUInteger v43;
  NSUInteger v44;
  NSUInteger v45;
  double v46;
  NSUInteger v47;
  NSUInteger v48;
  NSUInteger v49;
  NSUInteger location;
  NSUInteger length;
  NSRange v52;
  UIView *focusedCell;
  CGFloat x;
  CGFloat y;
  char v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  double v61;
  NSUInteger v62;
  uint64_t v63;
  NSUInteger v64;
  unint64_t v65;
  UITableViewCell *v66;
  UITableViewCell *v67;
  _UITableViewReorderingSupport *reorderingSupport;
  double v69;
  NSUInteger v70;
  void *v71;
  char v72;
  NSObject *v73;
  NSObject *v74;
  id v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  SEL v80;
  UIView *v81;
  unsigned int focusedViewType;
  BOOL v83;
  void *v84;
  double v85;
  double v86;
  _BYTE v87[7];
  CGRect remainder;
  __int128 v89;
  __int128 v90;
  CGRect slice;
  CGSize size;
  __int128 v93;
  __int128 v94;
  char v95;
  _DWORD v96[3];
  uint64_t v97;
  NSRange v98;
  NSRange v99;
  NSRange v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;

  v3 = a3;
  v97 = *MEMORY[0x1E0C80C00];
  p_tableFlags = &self->_tableFlags;
  v7 = *((_QWORD *)&self->_tableFlags + 3);
  if ((v7 & 0x100000000) != 0)
  {
    v8 = *((_QWORD *)&self->_tableFlags + 2);
    v9 = *((_QWORD *)&self->_tableFlags + 3);
  }
  else
  {
    if (-[UITableView _isUpdating](self, "_isUpdating") || self->_tableReloadingSuspendedCount > 0 || !self->_rowData)
      return;
    v8 = *((_QWORD *)p_tableFlags + 2);
    v9 = *((_QWORD *)p_tableFlags + 3);
  }
  *((_QWORD *)p_tableFlags + 2) = v8;
  *((_QWORD *)p_tableFlags + 3) = v9 | 0x100000000;
  -[UIScrollView contentOffset](self, "contentOffset");
  v85 = v11;
  v86 = v10;
  -[UIScrollView contentSize](self, "contentSize");
  v13 = v12;
  if ((v7 & 0x100000000) == 0)
  {
    v14 = _updateVisibleCellsNow____s_category;
    if (!_updateVisibleCellsNow____s_category)
    {
      v14 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v14, (unint64_t *)&_updateVisibleCellsNow____s_category);
    }
    if ((*(_BYTE *)v14 & 1) != 0)
    {
      v73 = *(NSObject **)(v14 + 8);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        v74 = v73;
        LODWORD(slice.origin.x) = 138412802;
        *(_QWORD *)((char *)&slice.origin.x + 4) = objc_opt_class();
        WORD2(slice.origin.y) = 2048;
        *(_QWORD *)((char *)&slice.origin.y + 6) = self;
        HIWORD(slice.size.width) = 2048;
        *(_QWORD *)&slice.size.height = v3;
        v75 = *(id *)((char *)&slice.origin.x + 4);
        _os_log_impl(&dword_185066000, v74, OS_LOG_TYPE_ERROR, "<%@ %p> _updateVisibleCellsNow:%ld starting", (uint8_t *)&slice, 0x20u);

      }
    }
    -[UIView window](self, "window");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v15)
      UITableViewAlertForLayoutOutsideViewHierarchy(self);
    -[UITableView _updateShowScrollIndicatorsFlag](self, "_updateShowScrollIndicatorsFlag");
    -[UITableView _reapTentativeViews](self, "_reapTentativeViews");
  }
  v80 = a2;
  -[UIView _focusSystem](self, "_focusSystem");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v84, "_lockEnvironment:", self);
  -[UITableView _suspendReloads](self, "_suspendReloads");
  v16 = (*((_BYTE *)p_tableFlags + 14) & 0x80) == 0 && v3;
  v83 = v16;
  if (v16)
    -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 0, 0);
  -[UITableView _applyCoalescedContentSizeUpdates](self, "_applyCoalescedContentSizeUpdates");
  v17 = -[UITableViewRowData numberOfRows]((uint64_t)self->_rowData);
  -[UITableView _contentInset](self, "_contentInset");
  v19 = v18;
  -[UITableView _visibleBounds](self, "_visibleBounds");
  MinY = CGRectGetMinY(v101);
  p_visibleBounds = &self->_visibleBounds;
  v22 = CGRectGetMinY(self->_visibleBounds);
  if ((v7 & 0x100000000) != 0)
  {
    -[UITableView _visibleBounds](self, "_visibleBounds", v22);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v30 = v29;
LABEL_30:
    location = -[UITableView _visibleGlobalRowsInRect:](self, "_visibleGlobalRowsInRect:", v24, v26, v28, v30);
    goto LABEL_31;
  }
  v31 = v22;
  if ((*((_BYTE *)p_tableFlags + 24) & 4) != 0)
  {
    -[UITableView _ensurePreReloadVisibleRowRangeIsValidWithPostReloadRowCount:](self, "_ensurePreReloadVisibleRowRangeIsValidWithPostReloadRowCount:", v17);
    -[UIScrollView contentOffset](self, "contentOffset");
    v33 = v32;
    -[UITableView _contentOffsetYForRestoringScrollPositionOfFirstVisibleRowWithContentInsetTop:canGuessHeights:](self, "_contentOffsetYForRestoringScrollPositionOfFirstVisibleRowWithContentInsetTop:canGuessHeights:", 0, v19);
    -[UITableView setContentOffset:](self, "setContentOffset:", v33, v34);
  }
  -[UITableView _visibleBounds](self, "_visibleBounds");
  v24 = v35;
  v26 = v36;
  v28 = v37;
  v30 = v38;
  if (MinY >= v31 || !-[UITableView _estimatesHeights](self, "_estimatesHeights"))
    goto LABEL_30;
  memset(&slice, 0, sizeof(slice));
  memset(&remainder, 0, sizeof(remainder));
  v102.origin.x = p_visibleBounds->origin.x;
  v102.origin.y = self->_visibleBounds.origin.y;
  v102.size.width = self->_visibleBounds.size.width;
  v102.size.height = self->_visibleBounds.size.height;
  v39 = CGRectGetMinY(v102);
  v103.origin.x = v24;
  v103.origin.y = v26;
  v103.size.width = v28;
  v103.size.height = v30;
  v40 = v39 - CGRectGetMinY(v103);
  v104.origin.x = v24;
  v104.origin.y = v26;
  v104.size.width = v28;
  v104.size.height = v30;
  CGRectDivide(v104, &slice, &remainder, v40, CGRectMinYEdge);
  -[UIScrollView contentSize](self, "contentSize");
  v42 = v41;
  v43 = -[UITableView _visibleGlobalRowsInRect:canGuess:](self, "_visibleGlobalRowsInRect:canGuess:", 0, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
  v45 = v44;
  -[UITableView _applyCoalescedContentSizeUpdates](self, "_applyCoalescedContentSizeUpdates");
  -[UIScrollView contentSize](self, "contentSize");
  if (v46 - v42 != 0.0)
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    -[UITableView setContentOffset:](self, "setContentOffset:");
  }
  v48 = -[UITableView _visibleGlobalRowsInRect:](self, "_visibleGlobalRowsInRect:", remainder.origin.x, remainder.origin.y, remainder.size.width, remainder.size.height);
  v49 = v47;
  if (!v45)
    goto LABEL_32;
  if (!v47)
  {
    v49 = v45;
    v48 = v43;
    goto LABEL_32;
  }
  v98.location = v43;
  v98.length = v45;
  v100.location = v48;
  v100.length = v49;
  v52 = NSUnionRange(v98, v100);
  length = v52.length;
  location = v52.location;
LABEL_31:
  v48 = location;
  v49 = length;
LABEL_32:
  focusedViewType = self->_focusedViewType;
  if ((*((_BYTE *)p_tableFlags + 25) & 4) != 0)
  {
    v81 = self->_focusedCell;
    focusedCell = self->_focusedCell;
    self->_focusedCell = 0;

    if (!-[UITableView remembersLastFocusedIndexPath](self, "remembersLastFocusedIndexPath")
      || !self->_focusedCellIndexPath
      || self->_focusedViewType != 1)
    {
      self->_focusedViewType = 0;
    }
  }
  else
  {
    v81 = 0;
  }
  do
  {
    -[UITableView _calculateVisibleCellsUpdateRangesForGlobalRowRange:createIfNecessary:](self, "_calculateVisibleCellsUpdateRangesForGlobalRowRange:createIfNecessary:", v48, v49, v3);
    x = slice.origin.x;
    y = slice.origin.y;
    remainder.origin = (CGPoint)slice.size;
    remainder.size = size;
    v89 = v93;
    v90 = v94;
    *(_DWORD *)v87 = v96[0];
    *(_DWORD *)&v87[3] = *(_DWORD *)((char *)v96 + 3);
    v56 = v95;
    if (*(_QWORD *)&slice.origin.y + *(_QWORD *)&slice.origin.x > (unint64_t)v17)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      *(CGFloat *)&v99.location = x;
      *(CGFloat *)&v99.length = y;
      NSStringFromRange(v99);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v79, "handleFailureInMethod:object:file:lineNumber:description:", v80, self, CFSTR("UITableView.m"), 3255, CFSTR("UITableView is trying to layout cells with a global row range of %@ when there are only %ld rows - this is a UIKit bug"), v78, v17);

    }
    slice.origin.x = x;
    slice.origin.y = y;
    slice.size = (CGSize)remainder.origin;
    size = remainder.size;
    v93 = v89;
    v94 = v90;
    v95 = v56;
    v96[0] = *(_DWORD *)v87;
    *(_DWORD *)((char *)v96 + 3) = *(_DWORD *)&v87[3];
    -[UITableView _updateVisibleCellsForRanges:createIfNecessary:](self, "_updateVisibleCellsForRanges:createIfNecessary:", &slice, v3);
    if ((*((_BYTE *)p_tableFlags + 14) & 0x80) != 0)
      break;
    *(CGFloat *)&self->_visibleRows.location = x;
    *(CGFloat *)&self->_visibleRows.length = y;
    -[UITableView _visibleBounds](self, "_visibleBounds");
    p_visibleBounds->origin.x = v57;
    self->_visibleBounds.origin.y = v58;
    self->_visibleBounds.size.width = v59;
    self->_visibleBounds.size.height = v60;
    if ((v56 & 1) == 0)
      break;
    -[UITableView _visibleBounds](self, "_visibleBounds");
    v30 = v61;
    v48 = -[UITableView _visibleGlobalRowsInRect:](self, "_visibleGlobalRowsInRect:");
    v49 = v62;
  }
  while ((*((_BYTE *)p_tableFlags + 14) & 0x80) == 0);
  -[UITableView _updateTableHeadersAndFootersNow:](self, "_updateTableHeadersAndFootersNow:", v3);
  -[UITableView _updateVisibleHeadersAndFootersNow:](self, "_updateVisibleHeadersAndFootersNow:", v3);
  -[UITableView _updateIndex](self, "_updateIndex");
  v63 = *((_QWORD *)p_tableFlags + 1);
  if ((v63 & 0x80000000000000) != 0)
  {
    -[UITableView performSelector:withObject:afterDelay:](self, "performSelector:withObject:afterDelay:", sel__resumeReloads, 0, 0.0);
    self->_visibleRows.location = 0;
    self->_visibleRows.length = 0;
  }
  else
  {
    if ((v63 & 0x2000000000000000) != 0)
    {
      *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags;
      *((_QWORD *)p_tableFlags + 1) = v63 & 0xDFFFFFFFFFFFFFFFLL;
      if (dyld_program_sdk_at_least())
      {
        v64 = self->_visibleRows.length;
        if (v64 != -[NSMutableArray count](self->_visibleCells, "count"))
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          NSStringFromRange(self->_visibleRows);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v76, "handleFailureInMethod:object:file:lineNumber:description:", v80, self, CFSTR("UITableView.m"), 3284, CFSTR("UITableView internal inconsistency: _visibleRows and _visibleCells must be of same length. _visibleRows: %@; _visibleCells.count: %ld, _visibleCells: %@"),
            v77,
            -[NSMutableArray count](self->_visibleCells, "count"),
            self->_visibleCells);

        }
        -[UITableView _beginSuspendingUpdates](self, "_beginSuspendingUpdates");
      }
      if (self->_visibleRows.length)
      {
        v65 = 0;
        do
        {
          v66 = (UITableViewCell *)(id)-[NSMutableArray objectAtIndexedSubscript:](self->_visibleCells, "objectAtIndexedSubscript:", v65);
          v67 = v66;
          reorderingSupport = self->_reorderingSupport;
          if (!reorderingSupport || v66 != reorderingSupport->_reorderedCell)
          {
            -[UITableViewCell setFrame:](v66, "setFrame:", -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, v65 + self->_visibleRows.location, 0));
            -[UITableViewCell _setNeedsHeightCalculation:](v67, "_setNeedsHeightCalculation:", 0);
          }
          if ((*((_BYTE *)p_tableFlags + 14) & 0x80) != 0)
            break;
          ++v65;
        }
        while (v65 < self->_visibleRows.length);
      }
      if (dyld_program_sdk_at_least())
        -[UITableView _endSuspendingUpdates](self, "_endSuspendingUpdates");
      -[UISwipeActionController updateLayout](self->_swipeActionController, "updateLayout");
      v63 = *((_QWORD *)p_tableFlags + 1);
    }
    if ((v63 & 0x7000000000000) != 0)
    {
      -[UIScrollView contentSize](self, "contentSize");
      if (v17)
      {
        if (v69 < v30)
        {
          v70 = self->_visibleRows.length;
          if (v70)
          {
            if ((_QWORD *)(self->_visibleRows.location + v70) == v17)
            {
              -[NSMutableArray objectAtIndexedSubscript:](self->_visibleCells, "objectAtIndexedSubscript:", v70 - 1);
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v71, "setSeparatorStyle:", *((_WORD *)p_tableFlags + 7) & 7);

            }
          }
        }
      }
    }
    -[UITableView _resumeReloads](self, "_resumeReloads");
  }
  -[UITableView _applyCoalescedContentSizeUpdates](self, "_applyCoalescedContentSizeUpdates");
  -[UITableView _restoreOrAdjustContentOffsetWithRowCount:initialContentInsetTop:](self, "_restoreOrAdjustContentOffsetWithRowCount:initialContentInsetTop:", v17, v19);
  v72 = !v83;
  if ((*((_BYTE *)p_tableFlags + 15) & 8) == 0)
    v72 = 1;
  if ((v72 & 1) == 0)
    -[UITableView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
  objc_msgSend(v84, "_unlockEnvironment:", self);
  -[UITableView _endUpdatingVisibleCells:originalContentOffset:originalContentHeight:focusedView:focusedViewType:](self, "_endUpdatingVisibleCells:originalContentOffset:originalContentHeight:focusedView:focusedViewType:", HIDWORD(v7) & 1, v81, focusedViewType, v86, v85, v13);

}

- (void)_applyCoalescedContentSizeUpdates
{
  if (self->_coalescedContentSizeDelta != 0.0)
  {
    self->_coalescedContentSizeDelta = 0.0;
    -[UITableView _applyContentSizeDeltaImmediately:](self, "_applyContentSizeDeltaImmediately:");
  }
}

- (_NSRange)_visibleGlobalRowsInRect:(CGRect)a3 canGuess:(BOOL)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  _QWORD *p_isa;
  NSUInteger v15;
  _NSRange result;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[UITableView _visibleBounds](self, "_visibleBounds");
  v19.origin.x = v10;
  v19.origin.y = v11;
  v19.size.width = v12;
  v19.size.height = v13;
  v17.origin.x = x;
  v17.origin.y = y;
  v17.size.width = width;
  v17.size.height = height;
  v18 = CGRectIntersection(v17, v19);
  p_isa = &self->_rowData->super.isa;
  if (p_isa)
    p_isa = (_QWORD *)-[UITableViewRowData globalRowsInRect:canGuess:](p_isa, a4, v18.origin.x, v18.origin.y, v18.size.width, v18.size.height);
  else
    v15 = 0;
  result.length = v15;
  result.location = (NSUInteger)p_isa;
  return result;
}

- (_NSRange)_visibleGlobalRowsInRect:(CGRect)a3
{
  NSUInteger v3;
  NSUInteger v4;
  _NSRange result;

  v3 = -[UITableView _visibleGlobalRowsInRect:canGuess:](self, "_visibleGlobalRowsInRect:canGuess:", 1, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  result.length = v4;
  result.location = v3;
  return result;
}

- (void)_updateVisibleCellsForRanges:(_UITableViewVisibleCellsUpdateRanges *)a3 createIfNecessary:(BOOL)a4
{
  _BOOL4 v4;
  id *v7;
  id *v8;
  id *v9;
  NSUInteger length;
  NSUInteger v11;
  NSUInteger v12;
  NSUInteger v13;
  void *v14;
  id v15;
  void *v16;
  NSUInteger v17;
  NSUInteger location;
  NSUInteger i;
  void *v20;
  id v21;
  void *v22;
  _QWORD v23[6];

  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x80) == 0)
  {
    v4 = a4;
    if ((a3->var2.length || a3->var1.length) && -[NSMutableArray count](self->_visibleCells, "count"))
    {
      -[UITableView _reorderingSupport](self, "_reorderingSupport");
      v7 = (id *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v7)
        v7 = (id *)v7[1];
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = __62__UITableView__updateVisibleCellsForRanges_createIfNecessary___block_invoke;
      v23[3] = &unk_1E16E3C90;
      v23[4] = self;
      v9 = v7;
      v23[5] = v9;
      length = a3->var2.length;
      if (length)
        __62__UITableView__updateVisibleCellsForRanges_createIfNecessary___block_invoke((uint64_t)v23, self->_visibleRows.length - length, length);
      v11 = a3->var1.length;
      if (v11)
        __62__UITableView__updateVisibleCellsForRanges_createIfNecessary___block_invoke((uint64_t)v23, 0, v11);

    }
    if (a3->var4.length)
    {
      if (!v4)
        return;
    }
    else if (!a3->var3.length || !v4)
    {
      return;
    }
    if (dyld_program_sdk_at_least())
      -[UITableView _beginSuspendingUpdates](self, "_beginSuspendingUpdates");
    v12 = a3->var3.length;
    if (v12 && (*((_BYTE *)&self->_tableFlags + 14) & 0x80) == 0)
    {
      v13 = v12 + a3->var3.location - 1;
      while (v13 >= a3->var3.location)
      {
        -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = -[UITableView _createPreparedCellForGlobalRow:withIndexPath:willDisplay:](self, "_createPreparedCellForGlobalRow:withIndexPath:willDisplay:", v13, v14, 1);
        v16 = v15;
        if ((*((_BYTE *)&self->_tableFlags + 14) & 0x80) != 0)
        {

          break;
        }
        objc_msgSend(v15, "_setIndexPath:", v14);
        -[NSMutableArray insertObject:atIndex:](self->_visibleCells, "insertObject:atIndex:", v16, 0);

        if (--v13 == -1)
          break;
      }
    }
    v17 = a3->var4.length;
    if (v17 && (*((_BYTE *)&self->_tableFlags + 14) & 0x80) == 0)
    {
      location = a3->var4.location;
      for (i = location + v17; location < i; i = a3->var4.length + a3->var4.location)
      {
        -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", location);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = -[UITableView _createPreparedCellForGlobalRow:withIndexPath:willDisplay:](self, "_createPreparedCellForGlobalRow:withIndexPath:willDisplay:", location, v20, 1);
        v22 = v21;
        if ((*((_BYTE *)&self->_tableFlags + 14) & 0x80) != 0)
        {

          break;
        }
        objc_msgSend(v21, "_setIndexPath:", v20);
        -[NSMutableArray addObject:](self->_visibleCells, "addObject:", v22);

        ++location;
      }
    }
    if (dyld_program_sdk_at_least())
      -[UITableView _endSuspendingUpdates](self, "_endSuspendingUpdates");
  }
}

- (_UITableViewVisibleCellsUpdateRanges)_calculateVisibleCellsUpdateRangesForGlobalRowRange:(SEL)a3 createIfNecessary:(_NSRange)a4
{
  NSUInteger length;
  NSUInteger location;
  _NSRange *p_var4;
  NSUInteger v9;
  NSUInteger v10;
  BOOL v11;
  NSUInteger v12;
  NSUInteger v13;
  NSUInteger v14;
  NSUInteger v15;
  NSUInteger v16;
  NSUInteger v17;
  NSUInteger v18;
  NSUInteger v19;
  BOOL v20;
  NSUInteger v21;
  NSUInteger v22;

  length = a4.length;
  location = a4.location;
  *(_QWORD *)&retstr->var5 = 0;
  retstr->var3 = 0u;
  retstr->var4 = 0u;
  retstr->var1 = 0u;
  retstr->var2 = 0u;
  retstr->var0 = a4;
  p_var4 = &self[24].var4;
  v9 = self[24].var4.length;
  if (!v9)
  {
    if (a5)
    {
      v16 = 0;
      v13 = 0;
      retstr->var4 = retstr->var0;
      v17 = retstr->var4.length;
    }
    else
    {
      length = 0;
      v16 = 0;
      v17 = 0;
      v13 = 0;
      retstr->var0.length = 0;
    }
    goto LABEL_39;
  }
  if (!a4.length)
  {
    v16 = 0;
    v17 = 0;
    v13 = 0;
    retstr->var2 = *p_var4;
    goto LABEL_39;
  }
  v10 = p_var4->location;
  v11 = a4.location >= p_var4->location;
  v12 = a4.location - p_var4->location;
  if (v11)
  {
    if (v12 != 0 && v11)
    {
      if (v9 < v12)
        v12 = self[24].var4.length;
      retstr->var1.location = v10;
      retstr->var1.length = v12;
    }
    v14 = a4.length + a4.location;
    v15 = v10 + v9;
    if (a4.length + a4.location > v10 + v9)
    {
      if (a5)
      {
        v16 = 0;
        v13 = 0;
        goto LABEL_21;
      }
LABEL_31:
      v16 = 0;
      v17 = 0;
      v13 = 0;
      length = (v15 - location) & ~((uint64_t)(v15 - location) >> 63);
      retstr->var0.length = length;
      goto LABEL_39;
    }
    v13 = 0;
    v16 = 0;
  }
  else
  {
    if (a5)
    {
      if (a4.length >= v10 - a4.location)
        v13 = v10 - a4.location;
      else
        v13 = a4.length;
      retstr->var3.location = a4.location;
      retstr->var3.length = v13;
      v14 = a4.length + a4.location;
      v15 = v10 + v9;
      v16 = a4.location;
      if (a4.length + a4.location <= v10 + v9)
      {
        v16 = a4.location;
        goto LABEL_34;
      }
LABEL_21:
      if (a4.location <= v15)
        v18 = v15;
      else
        v18 = a4.location;
      v19 = v14 - v15;
      if (a4.length >= v19)
        v17 = v19;
      else
        v17 = a4.length;
      retstr->var4.location = v18;
      retstr->var4.length = v17;
      goto LABEL_39;
    }
    retstr->var0.location = v10;
    v14 = v10 + a4.length;
    v15 = v10 + v9;
    if (v10 + a4.length > v10 + v9)
    {
      location = v10;
      goto LABEL_31;
    }
    v13 = 0;
    v16 = 0;
    location = v10;
  }
LABEL_34:
  v17 = 0;
  v20 = v15 > v14;
  v21 = v15 - v14;
  if (v20)
  {
    if (v21 < v9)
      v9 = v21;
    retstr->var2.location = v14;
    retstr->var2.length = v9;
  }
LABEL_39:
  v22 = v13 - 1;
  if (v13 > 1 || v17 >= 2)
  {
    self = (_UITableViewVisibleCellsUpdateRanges *)-[_UITableViewVisibleCellsUpdateRanges _estimatesRowHeights](self, "_estimatesRowHeights");
    if ((_DWORD)self)
    {
      self = (_UITableViewVisibleCellsUpdateRanges *)dyld_program_sdk_at_least();
      if ((_DWORD)self)
      {
        if (v13 >= 2)
        {
          retstr->var3.location = v22 + v16;
          retstr->var3.length = 1;
          length -= v22;
          retstr->var0.location = v22 + location;
          retstr->var0.length = length;
        }
        if (v17 >= 2)
        {
          retstr->var4.length = 1;
          retstr->var0.length = length - v17 + 1;
        }
        retstr->var5 = 1;
      }
    }
  }
  return self;
}

- (void)_setNeedsVisibleCellsUpdate:(BOOL)a3 withFrames:(BOOL)a4 updateImmediatelyIfPossible:(BOOL)a5
{
  _BOOL4 v5;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t tableFlags;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a5;
  p_tableFlags = &self->_tableFlags;
  tableFlags = (uint64_t)self->_tableFlags;
  v9 = *((_QWORD *)&self->_tableFlags + 1);
  if (a4)
  {
    v9 |= 0x2000000000000000uLL;
    *(_QWORD *)p_tableFlags = tableFlags;
    *((_QWORD *)&self->_tableFlags + 1) = v9;
  }
  if ((v9 & 0x1000000000000000) == 0 && ((((v9 & 0x800000000000000) == 0) ^ a3) & 1) != 0)
  {
    if (!a3)
      return;
    goto LABEL_15;
  }
  v10 = 0x800000000000000;
  if (!a3)
    v10 = 0;
  *(_QWORD *)p_tableFlags = tableFlags;
  *((_QWORD *)&self->_tableFlags + 1) = v9 & 0xE7FFFFFFFFFFFFFFLL | v10;
  if (a3)
  {
    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
    if (v5)
    {
      if (-[UITableView _shouldUnionVisibleBounds](self, "_shouldUnionVisibleBounds"))
      {
        if (!self->_tableReloadingSuspendedCount)
        {
          -[UIView window](self, "window");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          if (v11)
            -[UITableView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
        }
      }
    }
LABEL_15:
    v12 = *((_QWORD *)p_tableFlags + 2);
    if ((v12 & 0x100) != 0)
    {
      v13 = *((_QWORD *)p_tableFlags + 3);
      *((_QWORD *)p_tableFlags + 2) = v12 | 0x200000000;
      *((_QWORD *)p_tableFlags + 3) = v13;
    }
  }
}

- (void)_endSuspendingUpdates
{
  --self->_updateCount;
}

- (void)_beginSuspendingUpdates
{
  ++self->_updateCount;
}

- (void)_suspendReloads
{
  ++self->_tableReloadingSuspendedCount;
}

- (void)_resumeReloads
{
  int64_t v2;
  uint64_t v3;

  v2 = self->_tableReloadingSuspendedCount - 1;
  self->_tableReloadingSuspendedCount = v2;
  if (!v2)
  {
    v3 = *((_QWORD *)&self->_tableFlags + 1);
    if ((v3 & 0x80000000000000) != 0)
    {
      *(_QWORD *)&self->_tableFlags = self->_tableFlags;
      *((_QWORD *)&self->_tableFlags + 1) = v3 & 0xFF7FFFFFFFFFFFFFLL;
      -[UITableView reloadData](self, "reloadData");
    }
    else if ((v3 & 0x800000000000000) != 0)
    {
      -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
    }
  }
}

- (id)indexPathForRowAtGlobalRow:(int64_t)a3
{
  return -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, a3);
}

- (void)_setNeedsVisibleCellsUpdate:(BOOL)a3 withFrames:(BOOL)a4
{
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:updateImmediatelyIfPossible:](self, "_setNeedsVisibleCellsUpdate:withFrames:updateImmediatelyIfPossible:", a3, a4, dyld_program_sdk_at_least() ^ 1);
}

- (void)_endUpdatingVisibleCells:(BOOL)a3 originalContentOffset:(CGPoint)a4 originalContentHeight:(double)a5 focusedView:(id)a6 focusedViewType:(int)a7
{
  uint64_t v7;
  double y;
  double x;
  _BOOL4 v11;
  id v13;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  NSMutableArray *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  int has_internal_diagnostics;
  uint64_t v24;
  NSUInteger v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSUInteger length;
  NSObject *v33;
  void *v34;
  uint64_t v35;
  NSMutableArray *visibleCells;
  unint64_t v37;
  NSObject *v38;
  NSUInteger location;
  NSUInteger v40;
  uint64_t v41;
  NSMutableArray *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  NSMutableArray *v52;
  _BYTE v53[128];
  uint64_t v54;
  NSRange v55;

  v7 = *(_QWORD *)&a7;
  y = a4.y;
  x = a4.x;
  v11 = a3;
  v54 = *MEMORY[0x1E0C80C00];
  v13 = a6;
  p_tableFlags = &self->_tableFlags;
  v15 = *((_QWORD *)&self->_tableFlags + 2);
  v16 = 0x100000000;
  if (!v11)
    v16 = 0;
  v17 = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFEFFFFFFFFLL | v16;
  *((_QWORD *)&self->_tableFlags + 3) = v17;
  if (!v11)
  {
    *((_QWORD *)&self->_tableFlags + 2) = v15;
    *((_QWORD *)&self->_tableFlags + 3) = v17 & 0xFFFFFFFFFFFFFFF3;
    -[UITableView _updateFocusAfterLoadingCellsWithFocusedView:viewType:](self, "_updateFocusAfterLoadingCellsWithFocusedView:viewType:", v13, v7);
    -[UITableView _reapTentativeViews](self, "_reapTentativeViews");
    if ((*((_BYTE *)&self->_tableFlags + 21) & 2) == 0)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v18 = self->_visibleCells;
      v19 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v44;
        do
        {
          for (i = 0; i != v20; ++i)
          {
            if (*(_QWORD *)v44 != v21)
              objc_enumerationMutation(v18);
            objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * i), "_setIndexPath:", 0, (_QWORD)v43);
          }
          v20 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
        }
        while (v20);
      }

      *((_QWORD *)&self->_tableFlags + 2) |= 0x20000000000uLL;
    }
    has_internal_diagnostics = os_variant_has_internal_diagnostics();
    v24 = *((_QWORD *)&self->_tableFlags + 1);
    if (has_internal_diagnostics)
    {
      if ((v24 & 0x80000000000000) != 0)
        goto LABEL_16;
      length = self->_visibleRows.length;
      if (length == -[NSMutableArray count](self->_visibleCells, "count"))
        goto LABEL_16;
      __UIFaultDebugAssertLog();
      v33 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
      {
LABEL_36:

LABEL_16:
        -[UIScrollView contentOffset](self, "contentOffset", (_QWORD)v43);
        if (x == v27 && y == v26)
        {
          -[UIScrollView contentSize](self, "contentSize");
          if (v28 != a5)
            -[UITableView _sendGeometryAffectingContentBottomChangedToScrollObservers](self, "_sendGeometryAffectingContentBottomChangedToScrollObservers");
        }
        else
        {
          -[UITableView _notifyDidScroll](self, "_notifyDidScroll");
        }
        v29 = *((_QWORD *)p_tableFlags + 2);
        v30 = *((_QWORD *)p_tableFlags + 3);
        if ((v30 & 0x200000000) != 0)
        {
          *((_QWORD *)p_tableFlags + 2) = v29;
          *((_QWORD *)p_tableFlags + 3) = v30 & 0xFFFFFFFDFFFFFFFFLL;
          -[UITableView _scrollFirstResponderCellToVisible:](self, "_scrollFirstResponderCellToVisible:", 1);
          v29 = *((_QWORD *)p_tableFlags + 2);
        }
        if ((v29 & 0x200000000) != 0 && (*((_BYTE *)p_tableFlags + 7) & 0x20) != 0)
        {
          -[UITableView _delegateProxy](self, "_delegateProxy");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "tableViewDidFinishReload:", self);

          *((_QWORD *)p_tableFlags + 2) &= ~0x200000000uLL;
        }
        goto LABEL_26;
      }
      NSStringFromRange(self->_visibleRows);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = -[NSMutableArray count](self->_visibleCells, "count");
      visibleCells = self->_visibleCells;
      *(_DWORD *)buf = 138412802;
      v48 = v34;
      v49 = 2048;
      v50 = v35;
      v51 = 2112;
      v52 = visibleCells;
      _os_log_fault_impl(&dword_185066000, v33, OS_LOG_TYPE_FAULT, "UITableView internal inconsistency: _visibleRows and _visibleCells must be of same length. _visibleRows: %@; _vi"
        "sibleCells.count: %ld, _visibleCells: %@",
        buf,
        0x20u);
    }
    else
    {
      if ((v24 & 0x80000000000000) != 0)
        goto LABEL_16;
      v25 = self->_visibleRows.length;
      if (v25 == -[NSMutableArray count](self->_visibleCells, "count"))
        goto LABEL_16;
      v37 = _endUpdatingVisibleCells_originalContentOffset_originalContentHeight_focusedView_focusedViewType____s_category;
      if (!_endUpdatingVisibleCells_originalContentOffset_originalContentHeight_focusedView_focusedViewType____s_category)
      {
        v37 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v37, (unint64_t *)&_endUpdatingVisibleCells_originalContentOffset_originalContentHeight_focusedView_focusedViewType____s_category);
      }
      v38 = *(NSObject **)(v37 + 8);
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      location = self->_visibleRows.location;
      v40 = self->_visibleRows.length;
      v33 = v38;
      v55.location = location;
      v55.length = v40;
      p_tableFlags = &self->_tableFlags;
      NSStringFromRange(v55);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = -[NSMutableArray count](self->_visibleCells, "count");
      v42 = self->_visibleCells;
      *(_DWORD *)buf = 138412802;
      v48 = v34;
      v49 = 2048;
      v50 = v41;
      v51 = 2112;
      v52 = v42;
      _os_log_impl(&dword_185066000, v33, OS_LOG_TYPE_ERROR, "UITableView internal inconsistency: _visibleRows and _visibleCells must be of same length. _visibleRows: %@; _vi"
        "sibleCells.count: %ld, _visibleCells: %@",
        buf,
        0x20u);
    }

    goto LABEL_36;
  }
LABEL_26:

}

- (void)_reapTentativeViews
{
  uint64_t v3;
  id v4;
  _QWORD v5[5];
  _QWORD v6[5];

  if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    v4 = (id)-[NSMutableDictionary copy](self->_tentativeCells, "copy");
    v3 = MEMORY[0x1E0C809B0];
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __34__UITableView__reapTentativeViews__block_invoke;
    v6[3] = &unk_1E16E40F8;
    v6[4] = self;
    objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v6);
    -[NSMutableDictionary removeAllObjects](self->_tentativeCells, "removeAllObjects");
    v5[0] = v3;
    v5[1] = 3221225472;
    v5[2] = __34__UITableView__reapTentativeViews__block_invoke_2;
    v5[3] = &unk_1E16E3C68;
    v5[4] = self;
    __34__UITableView__reapTentativeViews__block_invoke_2((uint64_t)v5, self->_tentativeHeaderViews, self->_visibleHeaderViews, 1);
    __34__UITableView__reapTentativeViews__block_invoke_2((uint64_t)v5, self->_tentativeFooterViews, self->_visibleFooterViews, 0);

  }
}

void __34__UITableView__reapTentativeViews__block_invoke_2(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  char v15;

  v11 = a2;
  v7 = a3;
  if (objc_msgSend(v11, "count"))
  {
    objc_msgSend(v7, "allValues");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __34__UITableView__reapTentativeViews__block_invoke_3;
    v12[3] = &unk_1E16E3C40;
    v9 = *(_QWORD *)(a1 + 32);
    v13 = v8;
    v14 = v9;
    v15 = a4;
    v10 = v8;
    objc_msgSend(v11, "enumerateKeysAndObjectsUsingBlock:", v12);
    objc_msgSend(v11, "removeAllObjects");

  }
}

- (void)_updateTableHeadersAndFootersNow:(BOOL)a3
{
  _BOOL8 v3;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  UIView *tableHeaderView;
  UIView *v26;
  id v27;
  UIView *tableFooterView;
  UIView *v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v3 = a3;
  if (-[UITableView _shouldUseNewHeaderFooterBehavior](self, "_shouldUseNewHeaderFooterBehavior"))
  {
    -[UITableView _visibleBounds](self, "_visibleBounds");
    v6 = v5;
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v13 = -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v20 = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
    v32 = v21;
    v33 = v20;
    v30 = v23;
    v31 = v22;
    v34.origin.x = v6;
    v34.origin.y = v8;
    v34.size.width = v10;
    v34.size.height = v12;
    v36.origin.x = v13;
    v36.origin.y = v15;
    v36.size.width = v17;
    v36.size.height = v19;
    if (CGRectIntersectsRect(v34, v36))
    {
      v24 = -[UITableView _tableHeaderView:](self, "_tableHeaderView:", v3);
    }
    else
    {
      tableHeaderView = self->_tableHeaderView;
      if (tableHeaderView && tableHeaderView != self->_firstResponderView)
      {
        -[UIView removeFromSuperview](tableHeaderView, "removeFromSuperview");
        v26 = self->_tableHeaderView;
        self->_tableHeaderView = 0;

      }
    }
    v35.origin.x = v6;
    v35.origin.y = v8;
    v35.size.width = v10;
    v35.size.height = v12;
    v37.origin.y = v32;
    v37.origin.x = v33;
    v37.size.height = v30;
    v37.size.width = v31;
    if (CGRectIntersectsRect(v35, v37))
    {
      v27 = -[UITableView _tableFooterView:](self, "_tableFooterView:", v3);
    }
    else
    {
      tableFooterView = self->_tableFooterView;
      if (tableFooterView)
      {
        if (tableFooterView != self->_firstResponderView)
        {
          -[UIView removeFromSuperview](tableFooterView, "removeFromSuperview");
          v29 = self->_tableFooterView;
          self->_tableFooterView = 0;

        }
      }
    }
  }
}

- (BOOL)_isUpdating
{
  return self->_updateCount > 0;
}

- (id)_createPreparedCellForGlobalRow:(int64_t)a3 withIndexPath:(id)a4 willDisplay:(BOOL)a5
{
  _BOOL8 v5;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  id WeakRetained;
  uint64_t tableFlags;
  void *v21;
  id v22;
  void *v23;
  unint64_t v24;
  NSObject *v25;
  void *v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t v29;
  NSObject *v30;
  void *v31;
  unint64_t v32;
  NSIndexPath *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSIndexPath **p_indexPathBeingCreated;
  void *v40;
  _QWORD v41[4];
  id v42;
  _QWORD block[5];
  int v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v5 = a5;
  v48 = *MEMORY[0x1E0C80C00];
  v10 = a4;
  v11 = (void *)MEMORY[0x186DC9484]();
  if (!v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 16798, CFSTR("UITableView internal inconsistency: cannot create a cell with a nil index path for global row %ld."), a3);

  }
  -[NSMutableDictionary objectForKeyedSubscript:](self->_tentativeCells, "objectForKeyedSubscript:", v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    -[UITableView _prefetchedCellForRowAtIndexPath:willDisplay:](self, "_prefetchedCellForRowAtIndexPath:willDisplay:", v10, v5);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
    {
      -[UITableView _reorderingSupport](self, "_reorderingSupport");
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = (id *)v16;
      if (v16 && *(_QWORD *)(v16 + 8) && objc_msgSend(*(id *)(v16 + 16), "isEqual:", v10))
      {
        v14 = v17[1];
LABEL_20:
        v13 = 0;
LABEL_64:

        goto LABEL_8;
      }
      if (self->_firstResponderIndexPath
        && self->_firstResponderViewType == 1
        && objc_msgSend(v10, "isEqual:"))
      {
        v18 = 2240;
LABEL_19:
        v14 = *(id *)((char *)&self->super.super.super.super.isa + v18);
        -[UITableView _configureCachedCellForDisplay:forIndexPath:](self, "_configureCachedCellForDisplay:forIndexPath:", v14, v10);
        goto LABEL_20;
      }
      if (-[UITableView _hasFocusedCellForIndexPath:](self, "_hasFocusedCellForIndexPath:", v10))
      {
        v18 = 3160;
        goto LABEL_19;
      }
      _UIQOSExpectComplexCommit("UITVCell");
      if (self->_cellBeingReconfigured)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 16834, CFSTR("Performing side effects on UITableView that cause a new cell to be requested while an existing row is being reconfigured is not allowed. Check the backtrace to see what's causing this. Table view: %@"), self);

      }
      v40 = (void *)_UISetCurrentFallbackEnvironment(self);
      p_indexPathBeingCreated = &self->_indexPathBeingCreated;
      objc_storeStrong((id *)&self->_indexPathBeingCreated, a4);
      WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);

      if (!WeakRetained)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 16840, CFSTR("UITableView dataSource is not set"));

      }
      tableFlags = (uint64_t)self->_tableFlags;
      if ((tableFlags & 2) == 0)
      {
        if ((tableFlags & 0x8000000) == 0)
        {
LABEL_27:
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_loadWeakRetained((id *)&self->_dataSource);
          objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 16861, CFSTR("UITableView dataSource returned a nil cell for row at index path: %@. Table view: %@, dataSource: %@"), v10, self, v22);

          v23 = 0;
LABEL_53:
          -[UITableView _ensureReturnedView:isNotContainedInReusePoolForViewType:](self, "_ensureReturnedView:isNotContainedInReusePoolForViewType:", v23, 1);
          -[NSMutableDictionary setObject:forKeyedSubscript:](self->_tentativeCells, "setObject:forKeyedSubscript:", v23, v10);
          -[UITableView _configureCellForDisplay:forIndexPath:](self, "_configureCellForDisplay:forIndexPath:", v23, v10);
          v33 = *p_indexPathBeingCreated;
          *p_indexPathBeingCreated = 0;

          _UIRestorePreviousFallbackEnvironment(v40);
          if ((*((_BYTE *)&self->_tableFlags + 14) & 0x80) != 0)
            objc_msgSend(v23, "removeFromSuperview");
          if (v5)
            -[UITableView _notifyWillDisplayCell:forIndexPath:](self, "_notifyWillDisplayCell:forIndexPath:", v23, v10);
          if (dyld_program_sdk_at_least())
          {
            if ((*((_BYTE *)&self->_tableFlags + 14) & 0x80) == 0)
            {
              -[UIView window](self, "window");
              v34 = (void *)objc_claimAutoreleasedReturnValue();

              if (v34)
              {
                v35 = (void *)_UISetCurrentFallbackEnvironment(self);
                v41[0] = MEMORY[0x1E0C809B0];
                v41[1] = 3221225472;
                v41[2] = __73__UITableView__createPreparedCellForGlobalRow_withIndexPath_willDisplay___block_invoke_1018;
                v41[3] = &unk_1E16B1B28;
                v42 = v23;
                +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v41);
                _UIRestorePreviousFallbackEnvironment(v35);

              }
            }
          }
          if (-[UITableView _cellPrefetchingAllowed](self, "_cellPrefetchingAllowed"))
            -[_UITableViewSubviewManager storePrefetchedCell:forIndexPath:]((uint64_t)self->_subviewManager, (uint64_t)v23, v10);
          v13 = v23;
          v14 = v13;
          goto LABEL_64;
        }
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __73__UITableView__createPreparedCellForGlobalRow_withIndexPath_willDisplay___block_invoke;
        block[3] = &unk_1E16B1B28;
        block[4] = self;
        if (qword_1EDDB0A70 != -1)
          dispatch_once(&qword_1EDDB0A70, block);
        v28 = objc_loadWeakRetained(&self->super._delegate);
        -[NSObject tableView:cellForRowAtIndexPath:](v28, "tableView:cellForRowAtIndexPath:", self, v10);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_52:

        if (v23)
          goto LABEL_53;
        goto LABEL_27;
      }
      if (_isNotifyingIdleObservers == 1)
      {
        v24 = qword_1EDDB0A50;
        if (!qword_1EDDB0A50)
        {
          v24 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v24, (unint64_t *)&qword_1EDDB0A50);
        }
        v25 = *(id *)(v24 + 8);
        if (os_signpost_id_make_with_pointer(*(os_log_t *)(v24 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
          && os_signpost_enabled(v25))
        {
          v44 = 134218240;
          v45 = objc_msgSend(v10, "section");
          v46 = 2048;
          v47 = objc_msgSend(v10, "row");
          _os_signpost_emit_unreliably_with_name_impl();
        }

        -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "tableView:cellForRowAtIndexPath:", self, v10);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        v27 = qword_1EDDB0A58;
        if (!qword_1EDDB0A58)
        {
          v27 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v27, (unint64_t *)&qword_1EDDB0A58);
        }
        v28 = *(id *)(v27 + 8);
        if (os_signpost_id_make_with_pointer(*(os_log_t *)(v27 + 8), self) - 1 > 0xFFFFFFFFFFFFFFFDLL
          || !os_signpost_enabled(v28))
        {
          goto LABEL_52;
        }
      }
      else
      {
        v29 = qword_1EDDB0A60;
        if (!qword_1EDDB0A60)
        {
          v29 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v29, (unint64_t *)&qword_1EDDB0A60);
        }
        v30 = *(id *)(v29 + 8);
        if (os_signpost_id_make_with_pointer(*(os_log_t *)(v29 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
          && os_signpost_enabled(v30))
        {
          v44 = 134218240;
          v45 = objc_msgSend(v10, "section");
          v46 = 2048;
          v47 = objc_msgSend(v10, "row");
          _os_signpost_emit_unreliably_with_name_impl();
        }

        -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "tableView:cellForRowAtIndexPath:", self, v10);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        v32 = qword_1EDDB0A68;
        if (!qword_1EDDB0A68)
        {
          v32 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v32, (unint64_t *)&qword_1EDDB0A68);
        }
        v28 = *(id *)(v32 + 8);
        if (os_signpost_id_make_with_pointer(*(os_log_t *)(v32 + 8), self) - 1 > 0xFFFFFFFFFFFFFFFDLL
          || !os_signpost_enabled(v28))
        {
          goto LABEL_52;
        }
      }
      v44 = 67109120;
      LODWORD(v45) = objc_msgSend(v23, "_hasBeenReused");
      _os_signpost_emit_unreliably_with_name_impl();
      goto LABEL_52;
    }
  }
  if (v5)
    -[UITableView _notifyWillDisplayCell:forIndexPath:](self, "_notifyWillDisplayCell:forIndexPath:", v12, v10);
  v13 = v12;
  v14 = v13;
LABEL_8:

  objc_autoreleasePoolPop(v11);
  return v14;
}

- (void)_ensureReturnedView:(id)a3 isNotContainedInReusePoolForViewType:(int)a4
{
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(_QWORD *)&a4;
  v9 = a3;
  objc_msgSend(v9, "reuseIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    -[UITableView _cellReuseMapForType:](self, "_cellReuseMapForType:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKey:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8 && objc_msgSend(v8, "containsObject:", v9))
      objc_msgSend(v8, "removeObject:", v9);

  }
}

- (id)_reorderingSupport
{
  _UITableViewReorderingSupport *reorderingSupport;
  _UITableViewReorderingSupport *v4;
  _UITableViewReorderingSupport *v5;

  reorderingSupport = self->_reorderingSupport;
  if (!reorderingSupport)
  {
    v4 = objc_alloc_init(_UITableViewReorderingSupport);
    v5 = self->_reorderingSupport;
    self->_reorderingSupport = v4;

    reorderingSupport = self->_reorderingSupport;
  }
  return reorderingSupport;
}

- (id)_prefetchedCellForRowAtIndexPath:(id)a3 willDisplay:(BOOL)a4
{
  _BOOL4 v4;
  void *v7;
  BOOL v8;
  unint64_t v9;
  NSObject *v10;

  v4 = a4;
  -[_UITableViewSubviewManager prefetchedCellAtIndexPath:]((id *)&self->_subviewManager->super.isa, (uint64_t)a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
    v8 = !v4;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = _prefetchedCellForRowAtIndexPath_willDisplay____s_category;
    if (!_prefetchedCellForRowAtIndexPath_willDisplay____s_category)
    {
      v9 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&_prefetchedCellForRowAtIndexPath_willDisplay____s_category);
    }
    v10 = *(id *)(v9 + 8);
    if (os_signpost_id_make_with_pointer(*(os_log_t *)(v9 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
      && os_signpost_enabled(v10))
    {
      objc_msgSend(a3, "section");
      objc_msgSend(a3, "row");
      _os_signpost_emit_unreliably_with_name_impl();
    }

    -[UITableView _configureCachedCellForDisplay:forIndexPath:](self, "_configureCachedCellForDisplay:forIndexPath:", v7, a3);
  }
  return v7;
}

- (void)_configureCellForDisplay:(id)a3 forIndexPath:(id)a4
{
  UIView *v7;
  UIView *viewBeingPreparedToDisplay;
  UIView *v9;
  _QWORD v10[7];

  if ((objc_msgSend(a3, "_needsSetup") & 1) != 0
    || (objc_msgSend(a3, "needsUpdateConstraints") & 1) != 0
    || a3 && objc_msgSend(*((id *)a3 + 21), "needsLayout"))
  {
    v7 = self->_viewBeingPreparedToDisplay;
    objc_storeStrong((id *)&self->_viewBeingPreparedToDisplay, a3);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __53__UITableView__configureCellForDisplay_forIndexPath___block_invoke;
    v10[3] = &unk_1E16E3F18;
    v10[4] = self;
    v10[5] = a3;
    v10[6] = a4;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v10);
    viewBeingPreparedToDisplay = self->_viewBeingPreparedToDisplay;
    self->_viewBeingPreparedToDisplay = v7;
    v9 = v7;

  }
}

- (BOOL)_cellPrefetchingAllowed
{
  BOOL v3;
  void *v4;

  if (!-[UITableView _supportsCellPrefetching](self, "_supportsCellPrefetching")
    || (*((_BYTE *)&self->_tableFlags + 26) & 2) == 0)
  {
    return 0;
  }
  -[UITableView _reorderingIndexPath](self, "_reorderingIndexPath");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v4 == 0;

  return v3;
}

- (BOOL)_supportsCellPrefetching
{
  int v2;
  uint64_t v3;

  v2 = _UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_TableViewCellPrefetchingMode, (uint64_t)CFSTR("TableViewCellPrefetchingMode"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger);
  v3 = qword_1ECD768F8;
  if (v2)
    v3 = 0;
  if (v3 == -1)
    return 0;
  if (v3 == 1)
    return 1;
  return dyld_program_sdk_at_least();
}

- (id)_reorderingIndexPath
{
  _UITableViewReorderingSupport *reorderingSupport;

  reorderingSupport = self->_reorderingSupport;
  if (reorderingSupport)
    return reorderingSupport->_initialIndexPath;
  else
    return 0;
}

- (void)_notifyWillDisplayCell:(id)a3 forIndexPath:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 3) & 0x10) != 0)
  {
    v6 = a4;
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "tableView:willDisplayCell:forRowAtIndexPath:", self, v8, v6);

  }
  objc_msgSend(v8, "_notifyIsDisplaying:", 1);

}

- (void)_updateFocusAfterLoadingCellsWithFocusedView:(id)a3 viewType:(int)a4
{
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[5];
  id v10;
  int v11;

  v6 = a3;
  v7 = *((_QWORD *)&self->_tableFlags + 3);
  if ((v7 & 0x400) != 0)
  {
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v7 & 0xFFFFFFFFFFFFFBFFLL;
    v9[1] = 3221225472;
    v9[2] = __69__UITableView__updateFocusAfterLoadingCellsWithFocusedView_viewType___block_invoke;
    v9[3] = &unk_1E16B5C50;
    v9[4] = self;
    v8 = v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v10 = v6;
    v11 = a4;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v9);

    v6 = v8;
  }

}

- (void)_registerThing:(id)a3 asNib:(BOOL)a4 forViewType:(int)a5 withReuseIdentifer:(id)a6
{
  uint64_t v7;
  _BOOL4 v8;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v7 = *(_QWORD *)&a5;
  v8 = a4;
  v15 = a3;
  v10 = a6;
  -[UITableView _classMapForType:](self, "_classMapForType:", v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _nibMapForType:](self, "_nibMapForType:", v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[UITableView _nibMapForType:](self, "_nibMapForType:", v7);
    v13 = objc_claimAutoreleasedReturnValue();

    -[UITableView _classMapForType:](self, "_classMapForType:", v7);
    v14 = objc_claimAutoreleasedReturnValue();

    v11 = (void *)v13;
    v12 = (void *)v14;
  }
  objc_msgSend(v12, "removeObjectForKey:", v10);
  if (v15)
    objc_msgSend(v11, "setObject:forKey:", v15, v10);
  else
    objc_msgSend(v11, "removeObjectForKey:", v10);

}

- (id)_dequeueReusableViewOfType:(int)a3 withIdentifier:(id)a4
{
  uint64_t v4;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  objc_class *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _QWORD v29[4];
  id v30;

  v4 = *(_QWORD *)&a3;
  v7 = a4;
  -[UITableView _cellReuseMapForType:](self, "_cellReuseMapForType:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "lastObject");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    objc_msgSend(v9, "removeObject:", v10);
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __57__UITableView__dequeueReusableViewOfType_withIdentifier___block_invoke;
    v29[3] = &unk_1E16B1B28;
    v11 = v10;
    v30 = v11;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v29);
    v12 = v11;
    v13 = v30;
  }
  else
  {
    -[UITableView _nibMapForType:](self, "_nibMapForType:", v4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "valueForKey:", v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      -[UITableView _nibExternalObjectsTablesForType:](self, "_nibExternalObjectsTablesForType:", v4);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectForKey:", v7);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v16, CFSTR("UINibExternalObjects"));
        v17 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v17 = 0;
      }
      v28 = (void *)v17;
      objc_msgSend(v13, "instantiateWithOwner:options:", 0, v17);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 0;
      if (objc_msgSend(v21, "count") == 1)
      {
        objc_msgSend(v21, "objectAtIndexedSubscript:", 0);
        v12 = (id)objc_claimAutoreleasedReturnValue();
      }
      v22 = objc_opt_class();
      if (!v12 || (objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v26 = v22;
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 10057, CFSTR("invalid nib registered for identifier (%@) - nib must contain exactly one top level object which must be a %@ instance"), v7, v26);

      }
      objc_msgSend(v12, "reuseIdentifier");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v23, "length") && (objc_msgSend(v23, "isEqualToString:", v7) & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 10059, CFSTR("cell reuse indentifier in nib (%@) does not match the identifier used to register the nib (%@)"), v23, v7);

      }
      objc_msgSend(v12, "setReuseIdentifier:", v7);

    }
    else
    {
      -[UITableView _classMapForType:](self, "_classMapForType:", v4);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (objc_class *)(id)objc_msgSend(v18, "valueForKey:", v7);

      v20 = [v19 alloc];
      if ((_DWORD)v4 == 1)
      {
        v12 = (id)objc_msgSend(v20, "initWithStyle:reuseIdentifier:", 0, v7);
        objc_msgSend(v12, "setReuseIdentifier:", v7);
      }
      else
      {
        v12 = (id)objc_msgSend(v20, "initWithReuseIdentifier:", v7);
      }
      v13 = 0;
    }
  }

  return v12;
}

- (id)_cellReuseMapForType:(int)a3
{
  NSMutableDictionary *reusableTableCells;
  NSMutableDictionary *v5;
  NSMutableDictionary *reusableHeaderFooterViews;
  NSMutableDictionary *v8;
  void *v10;

  if ((a3 - 2) >= 2)
  {
    if (a3 != 1)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 5466, CFSTR("attempt to access view reuse map for unknown view type %ld"), a3);

      v8 = 0;
      return v8;
    }
    reusableTableCells = self->_reusableTableCells;
  }
  else
  {
    reusableTableCells = self->_reusableHeaderFooterViews;
    if (!reusableTableCells)
    {
      v5 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
      reusableHeaderFooterViews = self->_reusableHeaderFooterViews;
      self->_reusableHeaderFooterViews = v5;

      reusableTableCells = self->_reusableHeaderFooterViews;
    }
  }
  v8 = reusableTableCells;
  return v8;
}

- (id)_nibMapForType:(int)a3
{
  uint64_t v4;
  void **v6;
  void *v7;
  id v8;
  void *v9;
  void *v12;

  if ((a3 & 0xFFFFFFFE) == 2)
  {
    v4 = 2288;
  }
  else
  {
    if (a3 != 1)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 5480, CFSTR("attempt to access nib map for unknown view type %ld"), a3);

    }
    v4 = 2272;
  }
  v6 = (void **)((char *)&self->super.super.super.super.isa + v4);
  v7 = *v6;
  if (!*v6)
  {
    v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v9 = *v6;
    *v6 = v8;

    v7 = *v6;
  }
  return v7;
}

- (id)_classMapForType:(int)a3
{
  uint64_t v4;
  void **v6;
  void *v7;
  id v8;
  void *v9;
  void *v12;

  if ((a3 & 0xFFFFFFFE) == 2)
  {
    v4 = 2800;
  }
  else
  {
    if (a3 != 1)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 5510, CFSTR("attempt to access cell class map for unknown view type %ld"), a3);

    }
    v4 = 2792;
  }
  v6 = (void **)((char *)&self->super.super.super.super.isa + v4);
  v7 = *v6;
  if (!*v6)
  {
    v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v9 = *v6;
    *v6 = v8;

    v7 = *v6;
  }
  return v7;
}

- (CGPoint)_validContentOffsetForProposedOffset:(CGPoint)a3
{
  double y;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGPoint result;
  CGRect v14;

  y = a3.y;
  -[UIScrollView _effectiveContentInset](self, "_effectiveContentInset", a3.x);
  v6 = v5;
  v8 = v7;
  -[UIScrollView contentSize](self, "contentSize");
  v10 = v8 + v9;
  -[UIView bounds](self, "bounds");
  v11 = fmax(fmin(y, v10 - CGRectGetHeight(v14)), -v6);
  v12 = 0.0;
  result.y = v11;
  result.x = v12;
  return result;
}

- (void)_updateVisibleCellsImmediatelyIfNecessary
{
  id WeakRetained;

  if ((*((_BYTE *)&self->_tableFlags + 15) & 8) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);

    if (WeakRetained)
    {
      UITableViewAlertForForcedLayout(self);
      -[UITableView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
    }
  }
}

- (void)_headerFooterDidInvalidateIntrinsicContentSize:(id)a3
{
  id v4;
  __CFString *v5;
  int64_t v6;
  __CFString *v7;
  int64_t v8;
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;
  void *v10;
  void *v11;
  CATransform3D v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[UITableView _canRecomputePreferredAttributesForInvalidatedElements]((uint64_t)self)
    && (objc_msgSend(v4, "_isHiddenForReuse") & 1) == 0)
  {
    if (v4)
      objc_msgSend(v4, "transform3D");
    else
      memset(&v12, 0, sizeof(v12));
    if (CATransform3DIsIdentity(&v12))
    {
      v5 = CFSTR("UICollectionElementKindSectionHeader");
      v6 = -[UITableView _sectionForHeaderView:](self, "_sectionForHeaderView:", v4);
      if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v7 = CFSTR("UICollectionElementKindSectionFooter");

        v8 = -[UITableView _sectionForFooterView:](self, "_sectionForFooterView:", v4);
        v5 = v7;
        if (v8 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_12;
      }
      else
      {
        v8 = v6;
        v7 = v5;
      }
      -[UITableView _setNeedsRecomputeHeightsForInvalidatedElements](self, "_setNeedsRecomputeHeightsForInvalidatedElements", *(_OWORD *)&v12.m11, *(_OWORD *)&v12.m13, *(_OWORD *)&v12.m21, *(_OWORD *)&v12.m23, *(_OWORD *)&v12.m31, *(_OWORD *)&v12.m33, *(_OWORD *)&v12.m41, *(_OWORD *)&v12.m43);
      intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathWithIndex:", v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v13[0] = v10;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[UICollectionViewLayoutInvalidationContext invalidateSupplementaryElementsOfKind:atIndexPaths:](intrinsicContentSizeInvalidationContext, "invalidateSupplementaryElementsOfKind:atIndexPaths:", v5, v11);

LABEL_12:
    }
  }

}

- (int64_t)_sectionForHeaderView:(id)a3
{
  id v4;
  NSMutableDictionary *visibleHeaderViews;
  id v6;
  int64_t v7;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0x7FFFFFFFFFFFFFFFLL;
  visibleHeaderViews = self->_visibleHeaderViews;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __37__UITableView__sectionForHeaderView___block_invoke;
  v9[3] = &unk_1E16E3D58;
  v6 = v4;
  v10 = v6;
  v11 = &v12;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](visibleHeaderViews, "enumerateKeysAndObjectsUsingBlock:", v9);
  v7 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

- (int64_t)_sectionForFooterView:(id)a3
{
  id v4;
  NSMutableDictionary *visibleFooterViews;
  id v6;
  int64_t v7;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0x7FFFFFFFFFFFFFFFLL;
  visibleFooterViews = self->_visibleFooterViews;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __37__UITableView__sectionForFooterView___block_invoke;
  v9[3] = &unk_1E16E3D58;
  v6 = v4;
  v10 = v6;
  v11 = &v12;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](visibleFooterViews, "enumerateKeysAndObjectsUsingBlock:", v9);
  v7 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

- (BOOL)isEditing
{
  return (*((unsigned __int8 *)&self->_tableFlags + 14) >> 4) & 1;
}

- (uint64_t)_canRecomputePreferredAttributesForInvalidatedElements
{
  uint64_t v1;
  unint64_t v2;

  if (result)
  {
    v1 = result;
    result = _UISupportsIntrinsicContentSizeInvalidation();
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)(v1 + 3104);
      return (v2 & 0x18000000000) != 0
          && ((v2 >> 43) & 3) < _UIMaximumIntrinsicContentSizeInvalidationUpdatesPerCommit()
          && (*(_BYTE *)(v1 + 3095) & 6) == 0
          && !*(_QWORD *)(v1 + 2216)
          && *(_QWORD *)(v1 + 2880) == 0;
    }
  }
  return result;
}

- (void)_startViewAnimationsForUpdate:(id)a3 withContext:(id)a4 swipeOccurrenceAnimatingDelete:(id)a5 oldVisibleViews:(id)a6 useCopyBlendingForAnimations:(BOOL)a7
{
  _QWORD *v12;
  id v13;
  NSUInteger location;
  id v15;
  NSObject *v16;
  unint64_t v17;
  NSObject *v18;
  void *v19;
  UITableView *v20;
  UIView *firstResponderView;
  int firstResponderViewType;
  NSMutableDictionary *visibleHeaderViews;
  void *v24;
  NSMutableDictionary *visibleFooterViews;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  void *v36;
  BOOL v37;
  NSMutableDictionary *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  BOOL v43;
  NSMutableDictionary *v44;
  uint64_t v45;
  void *v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  UIView *tableHeaderView;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  UIView *tableFooterView;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  double v62;
  double v63;
  _BOOL4 v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  double v74;
  id v75;
  uint64_t v76;
  UITableView *v77;
  _BOOL8 v78;
  double v79;
  double *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double Height;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  NSMutableArray *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t i;
  id v97;
  void *v98;
  id v99;
  id obj;
  BOOL v101;
  void *v103;
  void *v104;
  UITableView *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _QWORD v110[5];
  double *v111;
  _QWORD v112[5];
  id v113;
  id v114;
  _QWORD v115[4];
  id v116;
  id v117;
  _QWORD aBlock[4];
  id v119;
  uint64_t v120;
  UITableView *v121;
  id v122;
  id v123;
  __int128 *p_buf;
  BOOL v125;
  BOOL v126;
  _QWORD v127[4];
  id v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _BYTE v133[128];
  uint8_t v134[128];
  __int128 buf;
  uint64_t v136;
  char v137;
  uint64_t v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;

  v138 = *MEMORY[0x1E0C80C00];
  v97 = a3;
  v12 = a4;
  v13 = a5;
  v99 = a6;
  v104 = v13;
  v101 = v13 != 0;
  if (v12)
    ++v12[2];
  v98 = v12;
  -[NSMutableArray removeAllObjects](self->_visibleCells, "removeAllObjects");
  v105 = self;
  location = self->_visibleRows.location;
  if (location < self->_visibleRows.length + location)
  {
    do
    {
      v15 = *(id *)(*((_QWORD *)v97 + 33) + 8 * location);
      if (os_variant_has_internal_diagnostics())
      {
        if (!v15)
        {
          __UIFaultDebugAssertLog();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
          {
            LODWORD(buf) = 134217984;
            *(_QWORD *)((char *)&buf + 4) = location;
            _os_log_fault_impl(&dword_185066000, v16, OS_LOG_TYPE_FAULT, "Missing animatedCell for newly visible row %ld", (uint8_t *)&buf, 0xCu);
          }

          goto LABEL_16;
        }
      }
      else if (!v15)
      {
        v17 = _startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations____s_category;
        if (!_startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations____s_category)
        {
          v17 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v17, (unint64_t *)&_startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations____s_category);
        }
        v18 = *(NSObject **)(v17 + 8);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = location;
          _os_log_impl(&dword_185066000, v18, OS_LOG_TYPE_ERROR, "Missing animatedCell for newly visible row %ld", (uint8_t *)&buf, 0xCu);
        }
LABEL_16:
        v15 = -[UITableView _createPreparedCellForGlobalRow:willDisplay:](self, "_createPreparedCellForGlobalRow:willDisplay:", location, 1);
        if (!v15)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 4524, CFSTR("Missing animatedCell for newly visible row %ld, and failed to create a new cell"), location);

          v15 = 0;
        }
      }
      -[NSMutableArray addObject:](self->_visibleCells, "addObject:", v15);

      ++location;
    }
    while (location < self->_visibleRows.length + self->_visibleRows.location);
  }
  -[NSMutableDictionary removeAllObjects](self->_visibleHeaderViews, "removeAllObjects");
  -[NSMutableDictionary removeAllObjects](self->_visibleFooterViews, "removeAllObjects");
  v20 = self;
  firstResponderView = self->_firstResponderView;
  if (firstResponderView)
  {
    firstResponderViewType = self->_firstResponderViewType;
    if (firstResponderViewType == 3)
    {
      visibleFooterViews = self->_visibleFooterViews;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[NSIndexPath section](self->_firstResponderIndexPath, "section"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKey:](visibleFooterViews, "setObject:forKey:", firstResponderView, v24);
    }
    else
    {
      if (firstResponderViewType != 2)
        goto LABEL_24;
      visibleHeaderViews = self->_visibleHeaderViews;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[NSIndexPath section](self->_firstResponderIndexPath, "section"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKey:](visibleHeaderViews, "setObject:forKey:", firstResponderView, v24);
    }

    v20 = self;
  }
LABEL_24:
  if (*((uint64_t *)v97 + 30) >= 1)
  {
    v26 = 0;
    do
    {
      -[UITableView _contentInset](v20, "_contentInset");
      v28 = *((double *)v97 + 20) + v27;
      v30 = v29 + *((double *)v97 + 21);
      v32 = *((double *)v97 + 22) - (v27 + v31);
      v34 = *((double *)v97 + 23) - (v29 + v33);
      v35 = *(void **)(*((_QWORD *)v97 + 34) + 8 * v26);
      if (v35)
      {
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = v35 == v36;

        if (!v37)
        {
          v139.origin.x = -[UITableViewRowData floatingRectForHeaderInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, v26, 0, 0, v28, v30, v32, v34);
          if (CGRectIntersectsRect(v139, *((CGRect *)v97 + 5)))
          {
            v38 = self->_visibleHeaderViews;
            v39 = *(_QWORD *)(*((_QWORD *)v97 + 34) + 8 * v26);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v26);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            -[NSMutableDictionary setObject:forKey:](v38, "setObject:forKey:", v39, v40);

          }
        }
      }
      v41 = *(void **)(*((_QWORD *)v97 + 35) + 8 * v26);
      if (v41)
      {
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = v41 == v42;

        if (!v43)
        {
          v140.origin.x = -[UITableViewRowData floatingRectForFooterInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, v26, 0, 0, v28, v30, v32, v34);
          if (CGRectIntersectsRect(v140, *((CGRect *)v97 + 5)))
          {
            v44 = self->_visibleFooterViews;
            v45 = *(_QWORD *)(*((_QWORD *)v97 + 35) + 8 * v26);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v26);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            -[NSMutableDictionary setObject:forKey:](v44, "setObject:forKey:", v45, v46);

          }
        }
      }
      ++v26;
      v20 = self;
    }
    while (v26 < *((_QWORD *)v97 + 30));
  }
  if (-[UITableView _shouldUseNewHeaderFooterBehavior](v20, "_shouldUseNewHeaderFooterBehavior"))
  {
    v142.origin.x = -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData);
    v142.origin.y = v47;
    v142.size.width = v48;
    v142.size.height = v49;
    if (!CGRectIntersectsRect(*((CGRect *)v97 + 5), v142))
    {
      tableHeaderView = self->_tableHeaderView;
      self->_tableHeaderView = 0;

    }
    v143.origin.x = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
    v143.origin.y = v51;
    v143.size.width = v52;
    v143.size.height = v53;
    if (!CGRectIntersectsRect(*((CGRect *)v97 + 5), v143))
    {
      tableFooterView = self->_tableFooterView;
      self->_tableFooterView = 0;

    }
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v136 = 0x2020000000;
  v137 = 1;
  -[UIView layer](self->_wrapperView, "layer");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v55, "animationForKey:", CFSTR("bounds"));
  v103 = (void *)objc_claimAutoreleasedReturnValue();

  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  obj = *((id *)v97 + 40);
  v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v129, v134, 16);
  v57 = MEMORY[0x1E0C809B0];
  if (v56)
  {
    v58 = *(_QWORD *)v130;
    do
    {
      v59 = 0;
      do
      {
        if (*(_QWORD *)v130 != v58)
          objc_enumerationMutation(obj);
        v60 = *(_QWORD *)(*((_QWORD *)&v129 + 1) + 8 * v59);
        if (v60)
        {
          v61 = *(id *)(v60 + 24);
          v62 = *(double *)(v60 + 48);
          v63 = *(double *)(v60 + 56);
        }
        else
        {
          v61 = 0;
          v62 = 0.0;
          v63 = 0.0;
        }
        v127[0] = v57;
        v127[1] = 3221225472;
        v64 = v63 < 1.0 || v62 > 0.0;
        v127[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke;
        v127[3] = &unk_1E16B1B28;
        v65 = v61;
        v128 = v65;
        +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v127);
        aBlock[0] = v57;
        aBlock[1] = 3221225472;
        aBlock[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_2;
        aBlock[3] = &unk_1E16E3D30;
        v66 = v65;
        v119 = v66;
        v120 = v60;
        v121 = self;
        p_buf = &buf;
        v125 = a7;
        v122 = v103;
        v126 = v101;
        v123 = v104;
        v67 = _Block_copy(aBlock);
        v68 = v67;
        if (v104)
        {
          (*((void (**)(void *))v67 + 2))(v67);
        }
        else
        {
          +[UIView _currentAnimationAttributes](UIView, "_currentAnimationAttributes");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "_duration");
          v71 = v70;

          if (v60)
          {
            v72 = v63 - v62;
            if (!v64)
              v72 = 1.0;
            if (*(_BYTE *)(v60 + 8))
              v73 = 68;
            else
              v73 = 64;
            switch(*(_DWORD *)(v60 + 20))
            {
              case 1:
                v73 |= 0x10000uLL;
                break;
              case 2:
                v73 |= 0x20000uLL;
                break;
              case 3:
                v73 |= 0x30000uLL;
                break;
              case 4:
                v73 |= 0x40000uLL;
                break;
              case 5:
                v73 |= 0x50000uLL;
                break;
              case 7:
                v73 |= 0x70000uLL;
                break;
              default:
                break;
            }
          }
          else
          {
            v72 = v63 - v62;
            if (!v64)
              v72 = 1.0;
            v73 = 64;
          }
          v74 = v71 * v72;
          v115[0] = v57;
          v115[1] = 3221225472;
          v115[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_4;
          v115[3] = &unk_1E16B1D18;
          v75 = v98;
          v116 = v75;
          v117 = v68;
          v112[0] = v57;
          v112[1] = 3221225472;
          v112[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_5;
          v112[3] = &unk_1E16B2B40;
          v112[4] = self;
          v113 = v99;
          v114 = v75;
          +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", v73, v115, v112, v74, 0.0);

        }
        ++v59;
      }
      while (v56 != v59);
      v76 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v129, v134, 16);
      v56 = v76;
    }
    while (v76);
  }

  v77 = self;
  if (-[UIScrollView _showsBackgroundShadow](self, "_showsBackgroundShadow"))
  {
    v78 = +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled");
    if (!*(_BYTE *)(*((_QWORD *)&buf + 1) + 24))
      +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 0);
    v79 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
    if (v79 - -[UITableViewRowData heightForTable](*((_QWORD *)v97 + 9)) != 0.0)
      -[UIScrollView _adjustShadowsIfNecessaryForOffset:](self, "_adjustShadowsIfNecessaryForOffset:");
    if (!*(_BYTE *)(*((_QWORD *)&buf + 1) + 24))
      +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", v78);
  }
  v110[0] = v57;
  v110[1] = 3221225472;
  v110[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_6;
  v110[3] = &unk_1E16B1B50;
  v110[4] = self;
  v80 = (double *)v97;
  v111 = v80;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v110);
  -[UIScrollView _skipNextStartOffsetAdjustment](self, "_skipNextStartOffsetAdjustment");
  -[UITableView setBounds:](self, "setBounds:", v80[20], v80[21], v80[22], v80[23]);
  if (-[UIScrollView isScrollAnimating](self, "isScrollAnimating"))
  {
    -[UIScrollView _animatedTargetOffset](self, "_animatedTargetOffset");
    v82 = v81;
    v84 = v83;
    -[UIView bounds](self, "bounds");
    Height = CGRectGetHeight(v141);
    -[UIScrollView contentSize](self, "contentSize");
    v87 = v86;
    -[UIScrollView _effectiveContentInset](self, "_effectiveContentInset");
    v89 = v84 + Height - (v87 + v88);
    if (v89 > 0.0)
    {
      -[UITableView _contentInset](self, "_contentInset");
      v91 = -v90;
      v92 = v84 - v89;
      if (v84 - v89 <= v91)
        v92 = v91;
      -[UIScrollView setContentOffset:animated:](self, "setContentOffset:animated:", 0, v82, v92);
    }
  }
  -[UITableView _updateBackgroundView](self, "_updateBackgroundView");
  -[UIScrollView _updateAccessories](self, "_updateAccessories");
  if ((*((_BYTE *)&self->_tableFlags + 16) & 0x10) != 0)
  {
    -[UITableView _adjustExtraSeparators](self, "_adjustExtraSeparators");
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v93 = self->_visibleCells;
    v94 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v93, "countByEnumeratingWithState:objects:count:", &v106, v133, 16);
    if (v94)
    {
      v95 = *(_QWORD *)v107;
      do
      {
        for (i = 0; i != v94; ++i)
        {
          if (*(_QWORD *)v107 != v95)
            objc_enumerationMutation(v93);
          objc_msgSend(*(id *)(*((_QWORD *)&v106 + 1) + 8 * i), "layoutBelowIfNeeded");
        }
        v94 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v93, "countByEnumeratingWithState:objects:count:", &v106, v133, 16);
      }
      while (v94);
    }

    v77 = v105;
  }
  -[UISwipeActionController updateLayout](v77->_swipeActionController, "updateLayout");

  _Block_object_dispose(&buf, 8);
}

- (void)_adjustExtraSeparators
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  double v4;
  double v5;
  double left;
  double right;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _BOOL8 v14;
  int v15;
  _BOOL4 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  char v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int *v31;
  double v32;
  double v33;
  unsigned int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  _UITableViewCellSeparatorView *v40;
  unint64_t v41;
  _BOOL8 v42;
  void *v43;
  void *v44;
  objc_class *v45;
  void *v46;
  NSMutableArray *extraSeparators;
  NSMutableArray *v48;
  void *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  double v58;
  CGRect v59;

  p_tableFlags = &self->_tableFlags;
  *((_QWORD *)&self->_tableFlags + 2) &= ~0x10uLL;
  v58 = 0.0;
  if (!-[UITableView _shouldDisplayExtraSeparatorsAtOffset:](self, "_shouldDisplayExtraSeparatorsAtOffset:", &v58))
    goto LABEL_37;
  v4 = 1.0;
  if (!-[UITableView _shouldDrawThickSeparators](self, "_shouldDrawThickSeparators"))
  {
    -[UIView _currentScreenScale](self, "_currentScreenScale");
    v4 = 1.0 / v5;
  }
  left = self->_separatorInset.left;
  right = self->_separatorInset.right;
  -[UITableView _defaultMarginWidth](self, "_defaultMarginWidth");
  v9 = v8;
  -[UIView directionalLayoutMargins](self, "directionalLayoutMargins");
  v52 = v10;
  v50 = v11;
  -[UITableView _indexBarExtentFromEdge](self, "_indexBarExtentFromEdge");
  v13 = v12;
  v14 = -[UITableView _shouldApplyReadableWidthInsets](self, "_shouldApplyReadableWidthInsets");
  v15 = *((_DWORD *)&self->super.super._viewFlags + 4);
  v16 = -[UITableView _separatorInsetIsRelativeToCellEdges](self, "_separatorInsetIsRelativeToCellEdges");
  -[UITableView _spacingForExtraSeparators](self, "_spacingForExtraSeparators");
  v18 = v17;
  -[UIView bounds](self, "bounds");
  v56 = v20;
  v57 = v19;
  v54 = v22;
  v55 = v21;
  v23 = floor(v22 * 1.5);
  v24 = v58;
  if (v58 < v23)
  {
    v25 = 0;
    v26 = left == -1.0 || v16;
    v51 = left;
    if (left == -1.0)
      v27 = v9;
    else
      v27 = left;
    v53 = v27;
    v28 = fmax(v50, v13);
    if (!v14)
      v28 = v13;
    v29 = -0.0;
    if (!v16)
      v29 = v28;
    v30 = right + v29;
    v31 = &OBJC_IVAR___UIPhysicalKeyboardEvent__originalEscapeKeyTranslationMap;
    if (right == -1.0)
      v32 = v28;
    else
      v32 = v30;
    do
    {
      v33 = v53;
      if ((v26 & 1) == 0)
      {
        v34 = dyld_program_sdk_at_least();
        v35 = -0.0;
        if (v14 | v34)
          v35 = v52;
        v33 = v51 + v35;
        v24 = v58;
      }
      v59.origin.y = v56;
      v59.origin.x = v57;
      v59.size.height = v54;
      v59.size.width = v55;
      v36 = v18 + v24 - v4;
      v37 = CGRectGetWidth(v59) - (v33 + v32);
      if ((*(_QWORD *)&v15 & 0x80000) != 0)
        v38 = v32;
      else
        v38 = v33;
      v39 = v31[963];
      if (v25 >= objc_msgSend(*(id *)((char *)&self->super.super.super.super.isa + v39), "count"))
      {
        v40 = -[_UITableViewCellSeparatorView initWithFrame:]([_UITableViewCellSeparatorView alloc], "initWithFrame:", v38, v36, v37, v4);
        -[UIView setAutoresizingMask:](v40, "setAutoresizingMask:", 2);
        v41 = *((_QWORD *)p_tableFlags + 2);
        if ((v41 & 0x1C000000000000) == 0xC000000000000)
        {
          -[_UITableViewCellSeparatorView setDrawsWithVibrantLightMode:](v40, "setDrawsWithVibrantLightMode:", 1);
        }
        else
        {
          v42 = v14;
          -[UIView _setDrawsAsBackdropOverlayWithBlendMode:](v40, "_setDrawsAsBackdropOverlayWithBlendMode:", (v41 >> 46) & 1);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            -[UITableView separatorColor](self, "separatorColor");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            -[UIView setBackgroundColor:](v40, "setBackgroundColor:", v43);

          }
          v14 = v42;
        }
        -[_UITableViewCellSeparatorView setSeparatorEffect:](v40, "setSeparatorEffect:", self->_separatorEffect);
        -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", v40, 0);
        v44 = *(Class *)((char *)&self->super.super.super.super.isa + v39);
        if (!v44)
        {
          v45 = (objc_class *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
          v46 = *(Class *)((char *)&self->super.super.super.super.isa + v39);
          *(Class *)((char *)&self->super.super.super.super.isa + v39) = v45;

          v44 = *(Class *)((char *)&self->super.super.super.super.isa + v39);
        }
        objc_msgSend(v44, "addObject:", v40);
        v31 = &OBJC_IVAR___UIPhysicalKeyboardEvent__originalEscapeKeyTranslationMap;
      }
      else
      {
        objc_msgSend(*(id *)((char *)&self->super.super.super.super.isa + v39), "objectAtIndex:", v25);
        v40 = (_UITableViewCellSeparatorView *)objc_claimAutoreleasedReturnValue();
        -[UIView setFrame:](v40, "setFrame:", v38, v36, v37, v4);
      }

      v24 = v18 + v58;
      v58 = v24;
      ++v25;
    }
    while (v24 < v23);
    while (1)
    {
      extraSeparators = *(NSMutableArray **)((char *)&self->super.super.super.super.isa + v39);
LABEL_42:
      if (-[NSMutableArray count](extraSeparators, "count") <= v25)
        break;
      objc_msgSend(*(id *)((char *)&self->super.super.super.super.isa + v39), "lastObject");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "removeFromSuperview");

      objc_msgSend(*(id *)((char *)&self->super.super.super.super.isa + v39), "removeLastObject");
    }
  }
  else
  {
LABEL_37:
    v39 = 2312;
    extraSeparators = self->_extraSeparators;
    if (!extraSeparators)
    {
      v25 = 0;
      goto LABEL_42;
    }
    -[NSMutableArray makeObjectsPerformSelector:](extraSeparators, "makeObjectsPerformSelector:", sel_removeFromSuperview);
    v48 = self->_extraSeparators;
    self->_extraSeparators = 0;

  }
}

- (double)_contentBottomForScrollObservation
{
  double v3;
  double v4;
  double v5;
  double v6;
  objc_super v8;

  v8.receiver = self;
  v8.super_class = (Class)UITableView;
  -[UIScrollView _contentBottomForScrollObservation](&v8, sel__contentBottomForScrollObservation);
  v4 = v3;
  if (-[UITableView _shouldDisplayExtraSeparatorsAtOffset:](self, "_shouldDisplayExtraSeparatorsAtOffset:", 0))
  {
    -[UIView bounds](self, "bounds");
    v6 = floor(v5 * 1.5);
    if (v4 < v6)
      return v6;
  }
  return v4;
}

- (BOOL)_shouldDisplayExtraSeparatorsAtOffset:(double *)a3
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  double v9;
  double v10;
  BOOL result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  UITableViewRowData *rowData;
  int64_t numSections;
  double v17;
  CGRect v18;
  CGRect v19;

  v3 = *((_QWORD *)&self->_tableFlags + 1);
  v4 = v3 & 0x7000000000000;
  v5 = v3 & 0x600000000000;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 0;
  if (!v6)
    return 0;
  v9 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
  -[UIView bounds](self, "bounds");
  if (v9 >= v10 || self->_tableFooterView)
    return 0;
  v12 = (uint64_t)-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData);
  if (v12 < 1)
  {
    v14 = 0;
  }
  else
  {
    -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, v12 - 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "section");

  }
  rowData = self->_rowData;
  if (rowData)
    numSections = rowData->_numSections;
  else
    numSections = 0;
  if (v14 < numSections)
  {
    do
    {
      v18.origin.x = -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v14, 1);
      if (CGRectGetHeight(v18) > 0.0)
        return 0;
    }
    while (numSections != ++v14);
  }
  -[UITableView _clientRequestedFillerRowHeight](self, "_clientRequestedFillerRowHeight");
  result = v17 != 0.0;
  if (a3)
  {
    if (v17 != 0.0)
    {
      v19.origin.x = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
      *a3 = CGRectGetMaxY(v19);
      return 1;
    }
  }
  return result;
}

- (void)setBounds:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  CGFloat v8;
  CGFloat v9;
  double v10;
  double v11;
  double v12;
  double v13;
  UITableViewRowData *rowData;
  double v15;
  objc_super v16;
  CGRect v17;
  CGRect v18;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[UIView bounds](self, "bounds");
  v18.origin.x = v8;
  v18.origin.y = v9;
  v11 = v10;
  v13 = v12;
  v17.origin.x = x;
  v17.origin.y = y;
  v17.size.width = width;
  v17.size.height = height;
  v18.size.width = v11;
  v18.size.height = v13;
  if (!CGRectEqualToRect(v17, v18))
  {
    if (width != v11)
    {
      rowData = self->_rowData;
      -[UITableView _widthForContentInRect:](self, "_widthForContentInRect:", x, y, width, height);
      if (rowData)
        rowData->_tableViewWidth = v15;
    }
    v16.receiver = self;
    v16.super_class = (Class)UITableView;
    -[UIScrollView setBounds:](&v16, sel_setBounds_, x, y, width, height);
    -[UITableView _rectChangedWithNewSize:oldSize:](self, "_rectChangedWithNewSize:oldSize:", width, height, v11, v13);
    -[UITableView _updatePinnedTableHeader](self, "_updatePinnedTableHeader");
  }
}

- (void)_rectChangedWithNewSize:(CGSize)a3 oldSize:(CGSize)a4
{
  double height;
  double width;
  double v6;
  double v7;
  void *v9;
  void *v10;
  int v11;
  double v13;
  double v14;
  double v15;

  height = a4.height;
  width = a4.width;
  v6 = a3.height;
  v7 = a3.width;
  if (a3.width != a4.width)
  {
    -[UIView setNeedsDisplay](self, "setNeedsDisplay");
    -[UIView setNeedsDisplay](self->_tableHeaderView, "setNeedsDisplay");
    -[UIView setNeedsDisplay](self->_tableFooterView, "setNeedsDisplay");
    -[UIView window](self, "window");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "screen");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "_wantsWideContentMargins");

    if (v11)
    {
      -[UIView _rawLayoutMargins](self, "_rawLayoutMargins");
      -[UITableView _setDefaultLayoutMargins:](self, "_setDefaultLayoutMargins:");
    }
    if (dyld_program_sdk_at_least())
      -[UITableView _storeStateForRestoringContentOffsetIfNeeded](self, "_storeStateForRestoringContentOffsetIfNeeded");
    -[UITableView _rebuildGeometry](self, "_rebuildGeometry");
  }
  if (v7 != width || v6 != height)
  {
    -[UITableView _updateContentSize](self, "_updateContentSize");
    -[UITableView _updateWrapperFrame](self, "_updateWrapperFrame");
    -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
  }
  if (v6 != height)
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    v14 = v13;
    -[UITableView heightForTableHeaderViewHiding](self, "heightForTableHeaderViewHiding");
    if (v14 > 0.0 && v14 <= v15)
      -[UITableView _scrollToTopHidingTableHeader:](self, "_scrollToTopHidingTableHeader:", 0);
    if ((*((_BYTE *)&self->_tableFlags + 20) & 8) != 0)
      -[UITableView _scrollFirstResponderCellToVisible:](self, "_scrollFirstResponderCellToVisible:", +[UIView _isInAnimationBlock](UIView, "_isInAnimationBlock") ^ 1);
  }
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, v7 != width);
  -[UITableView _updateIndexFrame](self, "_updateIndexFrame");
}

- (void)_storeStateForRestoringContentOffsetIfNeeded
{
  void *v3;
  id v4;

  -[UITableView _indexPathsForVisibleRowsUsingPresentationValues:](self, "_indexPathsForVisibleRowsUsingPresentationValues:", 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "firstObject");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  if ((*((_BYTE *)&self->_tableFlags + 24) & 4) == 0)
  {
    -[UITableView _storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:](self, "_storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:", v4);
    if (-[UITableView _shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:scrolledToTop:](self, "_shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:scrolledToTop:", v4, -[UITableView _isScrolledToTop](self, "_isScrolledToTop")))
    {
      *((_QWORD *)&self->_tableFlags + 3) |= 4uLL;
    }
  }

}

- (double)_clientRequestedFillerRowHeight
{
  double fillerRowHeight;
  void *v4;
  double v5;
  double result;

  if ((*((_BYTE *)&self->_tableFlags + 11) & 1) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "tableViewSpacingForExtraSeparators:", self);
    fillerRowHeight = v5;

  }
  else
  {
    fillerRowHeight = self->_fillerRowHeight;
  }
  result = -1.0;
  if (fillerRowHeight >= 0.0)
    return fillerRowHeight;
  return result;
}

- (void)_stopScrollingNotify:(BOOL)a3 pin:(BOOL)a4
{
  NSIndexPath *targetIndexPathForScrolling;
  objc_super v6;

  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  -[UIScrollView _stopScrollingNotify:pin:](&v6, sel__stopScrollingNotify_pin_, a3, a4);
  targetIndexPathForScrolling = self->_targetIndexPathForScrolling;
  self->_targetIndexPathForScrolling = 0;

}

- (UITableView)initWithFrame:(CGRect)a3
{
  return -[UITableView initWithFrame:style:](self, "initWithFrame:style:", 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (UITableView)initWithFrame:(CGRect)frame style:(UITableViewStyle)style
{
  UITableView *v5;
  uint64_t v6;
  uint64_t v7;
  UIView *backgroundView;
  UITableView *v9;
  objc_super v11;

  *((_QWORD *)&self->_tableFlags + 2) |= 0x2000000000uLL;
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  v5 = -[UIScrollView initWithFrame:](&v11, sel_initWithFrame_, frame.origin.x, frame.origin.y, frame.size.width, frame.size.height);
  if (v5)
  {
    objc_msgSend((id)objc_opt_class(), "_ensureInitializeSystemAppearanceModifications");
    v6 = -[UITableView _mappedStyle:](v5, "_mappedStyle:", style);
    *((_QWORD *)&v5->_tableFlags + 1) = *((_QWORD *)&v5->_tableFlags + 1) & 0xFFFF9FFFFFFFFFFFLL | ((unint64_t)(v6 & 3) << 45);
    -[UITableView _setupTableViewCommon](v5, "_setupTableViewCommon");
    if (((*((_QWORD *)&v5->_tableFlags + 1) >> 45) & 3uLL) - 1 <= 1)
    {
      -[UITableView _defaultBackgroundView](v5, "_defaultBackgroundView");
      v7 = objc_claimAutoreleasedReturnValue();
      backgroundView = v5->_backgroundView;
      v5->_backgroundView = (UIView *)v7;

    }
    -[UITableView _applyAppearanceDefaultsForStyle:](v5, "_applyAppearanceDefaultsForStyle:", v6);
    -[UITableView setAllowsSelection:](v5, "setAllowsSelection:", 1);
    -[UIView setMultipleTouchEnabled:](v5, "setMultipleTouchEnabled:", 0);
    -[UIScrollView _setAlwaysBounceVertical:](v5, "_setAlwaysBounceVertical:", 1);
    -[UITableView _setupDefaultHeights](v5, "_setupDefaultHeights");
    -[UITableView _scheduleAdjustExtraSeparators](v5, "_scheduleAdjustExtraSeparators");
    *((_QWORD *)&v5->_tableFlags + 2) &= ~0x2000000000uLL;
    v9 = v5;
  }

  return v5;
}

- (void)_setupDefaultHeights
{
  double v3;
  double v4;
  double v5;
  double v6;
  char v7;

  if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    self->_rowHeight = -1.0;
    self->_sectionHeaderHeight = -1.0;
    self->_sectionFooterHeight = -1.0;
    v7 = dyld_program_sdk_at_least();
    v6 = -1.0;
    if ((v7 & 1) == 0)
      return;
  }
  else
  {
    -[UITableConstants defaultRowHeightForTableView:](self->_constants, "defaultRowHeightForTableView:", self);
    self->_rowHeight = v3;
    -[UITableConstants defaultSectionHeaderHeightForTableView:](self->_constants, "defaultSectionHeaderHeightForTableView:", self);
    self->_sectionHeaderHeight = v4;
    -[UITableConstants defaultSectionFooterHeightForTableView:](self->_constants, "defaultSectionFooterHeightForTableView:", self);
    self->_sectionFooterHeight = v5;
    v6 = 0.0;
  }
  self->_estimatedRowHeight = v6;
  self->_estimatedSectionHeaderHeight = v6;
  self->_estimatedSectionFooterHeight = v6;
}

- (void)setAllowsSelection:(BOOL)allowsSelection
{
  uint64_t v3;

  v3 = 1024;
  if (!allowsSelection)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFFBFFLL | v3;
  if (!allowsSelection)
    -[UITableView setAllowsMultipleSelection:](self, "setAllowsMultipleSelection:", 0);
}

- (int64_t)_mappedStyle:(int64_t)a3
{
  return a3;
}

- (void)_applyAppearanceDefaultsForStyle:(int64_t)a3
{
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __48__UITableView__applyAppearanceDefaultsForStyle___block_invoke;
  v3[3] = &unk_1E16B1888;
  v3[4] = self;
  v3[5] = a3;
  +[UIView _performSystemAppearanceModifications:](UIView, "_performSystemAppearanceModifications:", v3);
}

+ (void)_ensureInitializeSystemAppearanceModifications
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __61__UITableView__ensureInitializeSystemAppearanceModifications__block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  if (_ensureInitializeSystemAppearanceModifications_onceToken_0 != -1)
    dispatch_once(&_ensureInitializeSystemAppearanceModifications_onceToken_0, block);
}

- (void)setEditing:(BOOL)editing animated:(BOOL)animated
{
  void *v5;
  void *v6;
  id deferredEditingHandler;
  _QWORD v8[5];
  BOOL v9;
  BOOL v10;

  if ((*((_BYTE *)&self->_tableFlags + 21) & 0x84) != 0)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __35__UITableView_setEditing_animated___block_invoke;
    v8[3] = &unk_1E16B70C0;
    v8[4] = self;
    v9 = editing;
    v10 = animated;
    v5 = _Block_copy(v8);
    v6 = (void *)objc_msgSend(v5, "copy");
    deferredEditingHandler = self->_deferredEditingHandler;
    self->_deferredEditingHandler = v6;

  }
  else
  {
    -[UITableView _setEditing:animated:forced:](self, "_setEditing:animated:forced:", editing, animated, 0);
  }
}

- (void)_setEditing:(BOOL)a3 animated:(BOOL)a4 forced:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL8 v6;
  unint64_t v8;
  _BOOL4 v9;
  void *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSIndexPath *swipedIndexPath;
  uint64_t v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  NSUInteger location;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSUInteger v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v31;
  NSObject *v32;
  id v33;
  _BOOL4 v34;
  _QWORD v35[4];
  BOOL v36;
  BOOL v37;
  uint8_t buf[4];
  id v39;
  __int16 v40;
  UITableView *v41;
  __int16 v42;
  _BOOL8 v43;
  __int16 v44;
  _BOOL8 v45;
  __int16 v46;
  _BOOL8 v47;
  uint64_t v48;

  v5 = a5;
  v34 = a4;
  v6 = a3;
  v48 = *MEMORY[0x1E0C80C00];
  v8 = _setEditing_animated_forced____s_category;
  if (!_setEditing_animated_forced____s_category)
  {
    v8 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v8, (unint64_t *)&_setEditing_animated_forced____s_category);
  }
  if ((*(_BYTE *)v8 & 1) != 0)
  {
    v31 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = v31;
      *(_DWORD *)buf = 138413314;
      v39 = (id)objc_opt_class();
      v40 = 2048;
      v41 = self;
      v42 = 2048;
      v43 = v6;
      v44 = 2048;
      v45 = v34;
      v46 = 2048;
      v47 = v5;
      v33 = v39;
      _os_log_impl(&dword_185066000, v32, OS_LOG_TYPE_ERROR, "<%@ %p> setEditing:%ld animated:%ld forced:%ld", buf, 0x34u);

    }
  }
  if (((*((_BYTE *)&self->_tableFlags + 14) & 0x10) == 0) == v6)
  {
    v9 = (*((_QWORD *)&self->_tableFlags + 2) & 0x40000000000) == 0 || v5;
    if ((*((_QWORD *)&self->_tableFlags + 3) & 0x200000) == 0 && v9)
    {
      if (!dyld_program_sdk_at_least()
        || !v6
        || (~*((_DWORD *)&self->_tableFlags + 4) & 0x3000) != 0
        || (-[UITableView indexPathsForSelectedRows](self, "indexPathsForSelectedRows"),
            v10 = (void *)objc_claimAutoreleasedReturnValue(),
            v11 = objc_msgSend(v10, "count"),
            v10,
            v11 <= 1))
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView selectRowAtIndexPath:animated:scrollPosition:](self, "selectRowAtIndexPath:animated:scrollPosition:", v12, 0, 0);

      }
      if (v6)
      {
        *((_QWORD *)&self->_tableFlags + 1) |= 0x10000000000000uLL;
      }
      else
      {
        -[_UITableViewMultiSelectController clearSelectionState](self->_multiSelectController, "clearSelectionState");
        *((_QWORD *)&self->_tableFlags + 1) &= ~0x10000000000000uLL;
        if (!-[UITableView _allowsReorderingWhenNotEditing](self, "_allowsReorderingWhenNotEditing"))
          -[UITableView _cancelCellReorder:](self, "_cancelCellReorder:", v34);
      }
      v14 = *((_QWORD *)&self->_tableFlags + 2);
      v13 = *((_QWORD *)&self->_tableFlags + 3);
      if ((v14 & 0x100000000000) != 0
        && (v14 & 0x8000000000000000) == 0
        && (swipedIndexPath = self->_swipedIndexPath) != 0)
      {
        v16 = -[NSIndexPath section](swipedIndexPath, "section");
        v17 = -[NSIndexPath row](self->_swipedIndexPath, "row");
        if (!v6)
        {
          -[UITableView _endSwipeToDeleteRowDidDelete:](self, "_endSwipeToDeleteRowDidDelete:", 0);
          *((_QWORD *)&self->_tableFlags + 2) &= ~0x100000000000uLL;
          if (!-[UITableView _isUpdating](self, "_isUpdating") || (*((_BYTE *)&self->_tableFlags + 21) & 0x80) != 0)
            -[UITableView _cleanupStateFromDeleteConfirmation](self, "_cleanupStateFromDeleteConfirmation");
        }
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", v17, v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:", v18);
        if (!-[UITableView _isUpdating](self, "_isUpdating") && (*((_BYTE *)&self->_tableFlags + 17) & 1) == 0)
        {
          location = self->_visibleRows.location;
          if (v19 >= location && v19 - location < self->_visibleRows.length)
          {
            -[NSMutableArray objectAtIndex:](self->_visibleCells, "objectAtIndex:");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            -[UITableView _setupCell:forEditing:atIndexPath:animated:updateSeparators:](self, "_setupCell:forEditing:atIndexPath:animated:updateSeparators:", v21, v6, v18, v34, 1);

          }
        }

      }
      else
      {
        if (!v6)
        {
          -[UITableView _endSwipeToDeleteRowDidDelete:](self, "_endSwipeToDeleteRowDidDelete:", 0);
          v14 = *((_QWORD *)&self->_tableFlags + 2);
          v13 = *((_QWORD *)&self->_tableFlags + 3);
        }
        if ((v14 & 0x100000000000) != 0)
        {
          *((_QWORD *)&self->_tableFlags + 2) = v14 & 0xFFFFEFFFFFFFFFFFLL;
          *((_QWORD *)&self->_tableFlags + 3) = v13;
          -[UITableView _cleanupStateFromDeleteConfirmation](self, "_cleanupStateFromDeleteConfirmation");
        }
        v22 = 0x20000000000000;
        if (!v6)
          v22 = 0;
        *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFDFFFFFFFFFFFFFLL | v22;
        if (!-[UITableView _isUpdating](self, "_isUpdating"))
        {
          -[UITableView _suspendReloads](self, "_suspendReloads");
          v23 = -[NSMutableArray count](self->_visibleCells, "count");
          v24 = v23 - 1;
          if (v23 >= 1)
          {
            v25 = 0;
            do
            {
              v26 = v25 + self->_visibleRows.location;
              -[NSMutableArray objectAtIndexedSubscript:](self->_visibleCells, "objectAtIndexedSubscript:", v25);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", v26);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              -[UITableView _setupCell:forEditing:atIndexPath:animated:updateSeparators:](self, "_setupCell:forEditing:atIndexPath:animated:updateSeparators:", v27, v6, v28, v34, 1);
              v29 = *((_QWORD *)&self->_tableFlags + 1);

              if ((v29 & 0x80000000000000) != 0)
                break;
            }
            while (v24 != v25++);
          }
          -[UITableView _resumeReloads](self, "_resumeReloads");
          v35[0] = MEMORY[0x1E0C809B0];
          v35[1] = 3221225472;
          v35[2] = __43__UITableView__setEditing_animated_forced___block_invoke;
          v35[3] = &__block_descriptor_34_e29_v16__0__NSMutableDictionary_8l;
          v36 = v6;
          v37 = v34;
          __43__UITableView__setEditing_animated_forced___block_invoke((uint64_t)v35, self->_visibleFooterViews);
          __43__UITableView__setEditing_animated_forced___block_invoke((uint64_t)v35, self->_visibleHeaderViews);
        }
        if (self->_tableHeaderView && (objc_opt_respondsToSelector() & 1) != 0)
          -[UIView setEditing:animated:](self->_tableHeaderView, "setEditing:animated:", v6, v34);
        if (self->_tableFooterView)
        {
          if ((objc_opt_respondsToSelector() & 1) != 0)
            -[UIView setEditing:animated:](self->_tableFooterView, "setEditing:animated:", v6, v34);
        }
      }
      -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");
      -[UITableView _updateSelectionIsKey](self, "_updateSelectionIsKey");
    }
  }
}

- (void)setEditing:(BOOL)editing
{
  -[UITableView setEditing:animated:](self, "setEditing:animated:", editing, 0);
}

- (id)_defaultBackgroundView
{
  return 0;
}

void __43__UITableView__setEditing_animated_forced___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a2, "objectEnumerator", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * v7);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v8, "setEditing:animated:", *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

}

- (void)selectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated scrollPosition:(UITableViewScrollPosition)scrollPosition
{
  _BOOL8 v6;
  unint64_t v8;
  uint64_t v9;
  NSIndexPath *v10;

  v6 = animated;
  if ((~*((_DWORD *)&self->_tableFlags + 6) & 0xC00) == 0)
  {
    v8 = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFF7FFLL;
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v8;
  }
  v10 = indexPath;
  LOBYTE(v9) = 0;
  -[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:isCellMultiSelect:deselectPrevious:performCustomSelectionAction:](self, "_selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:isCellMultiSelect:deselectPrevious:performCustomSelectionAction:", v10, v6, scrollPosition, 0, -[UITableView _isRowMultiSelect:followingMacBehavior:](self, "_isRowMultiSelect:followingMacBehavior:", v10, 0), 0, v9);

}

- (void)_selectRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 notifyDelegate:(BOOL)a6 isCellMultiSelect:(BOOL)a7 deselectPrevious:(BOOL)a8 performCustomSelectionAction:(BOOL)a9
{
  _BOOL4 v9;
  _BOOL8 v11;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  void *v21;
  _BOOL4 v22;
  int v23;
  _BOOL4 v24;
  void *v25;
  unint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  char v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  _BOOL4 v40;
  _BOOL4 v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  int v47;
  _BOOL4 v48;
  void *v49;
  uint64_t v50;
  _BOOL4 v51;
  NSObject *v52;
  NSObject *v53;
  id v54;
  unint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  int64_t v58;
  int v59;
  _BOOL4 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint8_t v65[128];
  uint8_t buf[4];
  id v67;
  __int16 v68;
  UITableView *v69;
  __int16 v70;
  id v71;
  __int16 v72;
  _BOOL8 v73;
  __int16 v74;
  int64_t v75;
  __int16 v76;
  _BOOL8 v77;
  uint64_t v78;

  v9 = a8;
  v59 = a7;
  v60 = a6;
  v11 = a4;
  v78 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = _selectRowAtIndexPath_animated_scrollPosition_notifyDelegate_isCellMultiSelect_deselectPrevious_performCustomSelectionAction____s_category[0];
  if (!_selectRowAtIndexPath_animated_scrollPosition_notifyDelegate_isCellMultiSelect_deselectPrevious_performCustomSelectionAction____s_category[0])
  {
    v14 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v14, _selectRowAtIndexPath_animated_scrollPosition_notifyDelegate_isCellMultiSelect_deselectPrevious_performCustomSelectionAction____s_category);
  }
  if ((*(_BYTE *)v14 & 1) != 0)
  {
    v52 = *(NSObject **)(v14 + 8);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      v53 = v52;
      *(_DWORD *)buf = 138413570;
      v67 = (id)objc_opt_class();
      v68 = 2048;
      v69 = self;
      v70 = 2112;
      v71 = v13;
      v72 = 2048;
      v73 = v11;
      v74 = 2048;
      v75 = a5;
      v76 = 2048;
      v77 = v60;
      v54 = v67;
      _os_log_impl(&dword_185066000, v53, OS_LOG_TYPE_ERROR, "<%@ %p> _selectRowAtIndexPath:%@ animated:%ld scrollPosition:%ld notifyDelegate:%ld", buf, 0x3Eu);

    }
  }
  v58 = a5;
  -[UITableView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  v15 = objc_msgSend(v13, "row");
  v16 = objc_msgSend(v13, "section");
  if (v13)
  {
    v17 = v16;
    v18 = 0;
    v19 = v16 != 0x7FFFFFFFFFFFFFFFLL;
    v20 = v15 != 0x7FFFFFFFFFFFFFFFLL;
    if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v57 = 0;
    }
    else
    {
      -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v13);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v21;
      v22 = v21 != 0;
      v20 = 1;
      if (a9 && v21)
      {
        if (objc_msgSend(v21, "_hasCustomSelectionAction"))
        {
          objc_msgSend(v18, "_performCustomSelectionAction");
          goto LABEL_71;
        }
        v22 = 1;
      }
      v57 = v22;
      v19 = 1;
    }
  }
  else
  {
    v17 = 0x7FFFFFFFFFFFFFFFLL;
    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    v57 = 0;
    v18 = 0;
    v20 = 0;
    v19 = 0;
    v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0)
    goto LABEL_19;
  if (!-[UITableView allowsSelection](self, "allowsSelection"))
  {
LABEL_20:
    v23 = 0;
LABEL_24:
    v24 = 0;
    if (v60 && a9)
      v24 = -[UITableView _canPerformPrimaryActionForRowAtIndexPath:](self, "_canPerformPrimaryActionForRowAtIndexPath:", v13);
    if (v23)
    {
      if (!v60 || (*((_BYTE *)&self->_tableFlags + 5) & 0x40) == 0)
      {
        v25 = v13;
        goto LABEL_31;
      }
      v48 = v24;
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "tableView:willSelectRowAtIndexPath:", self, v13);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      v15 = objc_msgSend(v25, "row");
      v50 = objc_msgSend(v25, "section");
      if (v25)
      {
        v17 = v50;
        v24 = v48;
        if (v15 != 0x7FFFFFFFFFFFFFFFLL && v17 != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_31:
          v26 = *((_QWORD *)&self->_tableFlags + 3);
          *((_QWORD *)&self->_tableFlags + 3) = v26 | 0x1000000000000;
          v56 = v24;
          v55 = v26;
          if (v9)
          {
            -[UITableView _deselectAllRowsAnimated:notifyDelegate:excludingMultiSelectRows:](self, "_deselectAllRowsAnimated:notifyDelegate:excludingMultiSelectRows:", v11, v60, 0);
          }
          else if ((v59 & 1) == 0)
          {
            -[UITableView _indexPathForSelectedRowUsingPresentationValues:](self, "_indexPathForSelectedRowUsingPresentationValues:", 1);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = objc_msgSend(v34, "isEqual:", v25);

            if ((v35 & 1) == 0)
              -[UITableView _deselectAllNonMultiSelectRowsAnimated:notifyDelegate:](self, "_deselectAllNonMultiSelectRowsAnimated:notifyDelegate:", v11, v60);
          }
          objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", v15, v17);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          if ((-[NSMutableArray containsObject:](self->_selectedIndexPaths, "containsObject:", v36) & 1) == 0)
            -[NSMutableArray addObject:](self->_selectedIndexPaths, "addObject:", v36);
          objc_msgSend(v18, "setSelected:animated:", 1, v11);
          if (v58)
            -[UITableView _scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:](self, "_scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:", v25, v58, v11, 1);
          -[UIView _focusSystem](self, "_focusSystem");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "focusedItem");
          v38 = (id)objc_claimAutoreleasedReturnValue();
          v39 = v18;
          v40 = -[UITableView _shouldSelectionFollowFocusForIndexPath:initiatedBySelection:](self, "_shouldSelectionFollowFocusForIndexPath:initiatedBySelection:", v25, 1);
          v41 = v38 != v39 && v57;
          if (v41 && dyld_program_sdk_at_least())
          {
            if (v40)
            {
              if (((!v60 | objc_msgSend(v37, "_focusedItemIsContainedInEnvironment:includeSelf:", self, 1)) & 1) != 0)
              {
                if (!v38)
                {
LABEL_59:
                  if ((objc_msgSend(v37, "_focusedItemIsContainedInEnvironment:includeSelf:", self, 1) & 1) == 0)
                    -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");
                  goto LABEL_61;
                }
              }
              else
              {
                v51 = -[UITableView _shouldBecomeFocusedOnSelection](self, "_shouldBecomeFocusedOnSelection");
                if (v51 || !v38)
                {
                  if (!v51)
                    goto LABEL_59;
                  goto LABEL_82;
                }
              }
              if ((objc_msgSend(v37, "_focusedItemIsContainedInEnvironment:includeSelf:", self, 1) & 1) == 0)
                goto LABEL_59;
LABEL_82:
              objc_msgSend(v37, "_updateFocusImmediatelyToEnvironment:", v39);
            }
          }
          else if (v40)
          {
            goto LABEL_59;
          }
LABEL_61:
          if (v60)
          {
            objc_msgSend(v39, "selectionSegueTemplate");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            v43 = (id)objc_msgSend(v42, "perform:", v39);

            if ((*((_BYTE *)&self->_tableFlags + 6) & 1) != 0)
            {
              +[UIViewController _sendPrepareForTapGesture:]((uint64_t)UIViewController, v39);
              -[UITableView _delegateProxy](self, "_delegateProxy");
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v44, "tableView:didSelectRowAtIndexPath:", self, v25);

            }
            -[UITableView _selectedIndexPathsDidChange](self, "_selectedIndexPathsDidChange");
          }
          *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFEFFFFFFFFFFFFLL | ((HIWORD(v55) & 1) << 48);

          v24 = v56;
        }
      }
      else
      {
        v24 = v48;
      }
    }
    else
    {
      v25 = v13;
    }
    if (v24)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "tableView:performPrimaryActionForRowAtIndexPath:", self, v25);

    }
    -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = objc_msgSend(v46, "isEqual:", v25);

    if (v47)
      -[UITableView _updateSelectionIsKey](self, "_updateSelectionIsKey");
    v13 = v25;
    goto LABEL_71;
  }
  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0)
  {
LABEL_19:
    if (!-[UITableView allowsSelectionDuringEditing](self, "allowsSelectionDuringEditing")
      && (v20 & ~v59 & v19 & 1) != 0)
    {
      goto LABEL_20;
    }
  }
  if (v15 != 0x7FFFFFFFFFFFFFFFLL && v17 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v23 = 1;
    goto LABEL_24;
  }
  v27 = (void *)-[NSMutableArray copy](self->_selectedIndexPaths, "copy");
  -[NSMutableArray removeAllObjects](self->_selectedIndexPaths, "removeAllObjects");
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v28 = v27;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v61, v65, 16);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)v62;
    do
    {
      for (i = 0; i != v30; ++i)
      {
        if (*(_QWORD *)v62 != v31)
          objc_enumerationMutation(v28);
        -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * i));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "setSelected:animated:", 0, v11);

      }
      v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v61, v65, 16);
    }
    while (v30);
  }

LABEL_71:
}

- (BOOL)allowsSelection
{
  return (*((_BYTE *)&self->_tableFlags + 17) & 0x14) != 0;
}

- (BOOL)_isRowMultiSelect:(id)a3 followingMacBehavior:(BOOL)a4
{
  return !a4 && -[UITableView _canRowBeIncludedInMultipleSelection:](self, "_canRowBeIncludedInMultipleSelection:", a3);
}

- (BOOL)_canRowBeIncludedInMultipleSelection:(id)a3
{
  id v4;
  BOOL v5;
  void *v7;
  void *v8;
  uint64_t v9;

  v4 = a3;
  if (objc_msgSend(v4, "row") == 0x7FFFFFFFFFFFFFFFLL || objc_msgSend(v4, "section") == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_3;
  if (-[UITableView _allowsEffectiveMultipleSelection](self, "_allowsEffectiveMultipleSelection"))
  {
    v5 = 1;
    goto LABEL_4;
  }
  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) == 0)
  {
LABEL_3:
    v5 = 0;
  }
  else
  {
    -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
      v9 = objc_msgSend(v7, "editingStyle");
    else
      v9 = -[UITableView _editingStyleForRowAtIndexPath:](self, "_editingStyleForRowAtIndexPath:", v4);
    v5 = v9 == 3;

  }
LABEL_4:

  return v5;
}

uint64_t __62__UITableView__updateVisibleCellsForRanges_createIfNecessary___block_invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;

  v3 = a3;
  if (a2 < a2 + a3)
  {
    v6 = a3;
    v7 = a2;
    do
    {
      v8 = (id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2192), "objectAtIndexedSubscript:", v7, v3);
      if (v8 != *(id *)(a1 + 40))
      {
        v9 = v8;
        v10 = *(_QWORD *)(a1 + 32);
        if ((*(_BYTE *)(v10 + 3101) & 2) != 0)
          -[UITableViewRowData indexPathForRowAtGlobalRow:](*(_QWORD **)(v10 + 2080), v7 + *(_QWORD *)(v10 + 2176));
        else
          objc_msgSend(v8, "_indexPath");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v10, "_reuseTableViewCell:withIndexPath:didEndDisplaying:", v9, v11, 1);

      }
      ++v7;
      --v6;
    }
    while (v6);
    v3 = a3;
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2192), "removeObjectsInRange:", a2, v3);
}

void __37__UITableView__removeAllVisibleCells__block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend(v4, "_reuseHeaderFooterView:isHeader:forSection:", v5, 0, objc_msgSend(a2, "integerValue"));

}

- (void)_reuseHeaderFooterView:(id)a3 isHeader:(BOOL)a4 forSection:(int64_t)a5
{
  _BOOL8 v6;
  UIView *v8;
  UIView *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  UIView *v15;

  v6 = a4;
  v8 = (UIView *)a3;
  if (v8 && self->_firstResponderView != v8 && self->_focusedCell != v8)
  {
    v15 = v8;
    v9 = v8;
    if (_IsKindOfUITableViewHeaderFooterView(v9)
      && (-[UIView reuseIdentifier](v9, "reuseIdentifier"),
          v10 = (void *)objc_claimAutoreleasedReturnValue(),
          v10,
          v10))
    {
      if (v6)
        v11 = 2;
      else
        v11 = 3;
      -[UITableView _reuseTableViewSubview:viewType:](self, "_reuseTableViewSubview:viewType:", v9, v11);
    }
    else
    {
      -[UIView removeFromSuperview](v9, "removeFromSuperview");
    }
    if (a5 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v6)
        v12 = 2200;
      else
        v12 = 2208;
      v13 = *(Class *)((char *)&self->super.super.super.super.isa + v12);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a5);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "removeObjectForKey:", v14);

      -[UITableView _notifyDidEndDisplayingHeaderFooterView:forSection:isHeader:](self, "_notifyDidEndDisplayingHeaderFooterView:forSection:isHeader:", v9, a5, v6);
    }

    v8 = v15;
  }

}

- (void)_notifyDidEndDisplayingHeaderFooterView:(id)a3 forSection:(int64_t)a4 isHeader:(BOOL)a5
{
  _BOOL4 v5;
  uint64_t tableFlags;
  void *v9;
  id v10;

  v5 = a5;
  v10 = a3;
  if (_IsKindOfUITableViewHeaderFooterView(v10))
    objc_msgSend(v10, "_notifyIsDisplaying:", 0);
  tableFlags = (uint64_t)self->_tableFlags;
  if (v5)
  {
    if ((tableFlags & 0x40000000) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "tableView:didEndDisplayingHeaderView:forSection:", self, v10, a4);
LABEL_8:

    }
  }
  else if ((tableFlags & 0x80000000) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "tableView:didEndDisplayingFooterView:forSection:", self, v10, a4);
    goto LABEL_8;
  }

}

- (void)_layoutAdjustmentsDidChange
{
  double v3;
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  -[UIScrollView _layoutAdjustmentsDidChange](&v4, sel__layoutAdjustmentsDidChange);
  if (((*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3uLL) - 1 > 1)
  {
    -[UITableView _updateSeparatorStateForVisibleCells](self, "_updateSeparatorStateForVisibleCells");
  }
  else
  {
    -[UITableView _topPadding](self, "_topPadding");
    if (v3 == -1.0)
      -[UITableView _invalidateForTopOrBottomPaddingChange:](self, "_invalidateForTopOrBottomPaddingChange:", 1);
  }
}

- (void)_invalidateForTopOrBottomPaddingChange:(BOOL)a3
{
  UITableViewRowData *rowData;
  _BOOL4 v5;

  rowData = self->_rowData;
  if (rowData)
  {
    v5 = a3;
    -[UITableViewRowData invalidateAllSectionOffsetsAndUpdatePadding](rowData);
    -[UITableView _updateContentSize](self, "_updateContentSize");
    if (v5)
      -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1);
  }
}

- (NSIndexPath)indexPathForCell:(UITableViewCell *)cell
{
  UITableViewCell *v4;
  void *v5;

  v4 = cell;
  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v4, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSIndexPath *)v5;
}

- (void)_updateSeparatorStateForVisibleCells
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = (void *)-[NSMutableArray copy](self->_visibleCells, "copy", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v8, 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _updateSeparatorStateForCell:atIndexPath:](self, "_updateSeparatorStateForCell:atIndexPath:", v8, v9);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

- (id)_indexPathForCell:(id)a3 usingPresentationValues:(BOOL)a4
{
  UIView *v6;
  uint64_t v7;
  NSIndexPath *v8;
  UIView *v9;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v11;

  v6 = (UIView *)a3;
  v7 = -[NSMutableArray indexOfObject:](self->_visibleCells, "indexOfObject:", v6);
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_22;
  if ((*((_BYTE *)&self->_tableFlags + 21) & 2) != 0)
    -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", self->_visibleRows.location + v7);
  else
    -[UIView _indexPath](v6, "_indexPath");
  v8 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
LABEL_22:
    -[_UITableViewSubviewManager indexPathForPrefetchedCell:]((id *)&self->_subviewManager->super.isa, (uint64_t)v6);
    v8 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      -[UITableView _indexPathForTentativeCell:](self, "_indexPathForTentativeCell:", v6);
      v8 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
      if (!v8)
      {
        if (self->_focusedViewType != 1
          || (-[UITableView _focusedCell](self, "_focusedCell"),
              v9 = (UIView *)objc_claimAutoreleasedReturnValue(),
              v9,
              v9 != v6)
          || (-[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath"),
              (v8 = (NSIndexPath *)objc_claimAutoreleasedReturnValue()) == 0))
        {
          if (self->_firstResponderViewType == 1 && self->_firstResponderView == v6)
            v8 = self->_firstResponderIndexPath;
          else
            v8 = 0;
        }
      }
    }
  }
  if (!a4)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathBeforeShadowUpdates:](shadowUpdatesController, "indexPathBeforeShadowUpdates:", v8);
      v11 = objc_claimAutoreleasedReturnValue();

      v8 = (NSIndexPath *)v11;
    }
  }

  return v8;
}

- (id)_indexPathForTentativeCell:(id)a3
{
  id v4;
  NSMutableDictionary *tentativeCells;
  id v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  tentativeCells = self->_tentativeCells;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __42__UITableView__indexPathForTentativeCell___block_invoke;
  v10[3] = &unk_1E16E3D80;
  v11 = v4;
  v6 = v4;
  -[NSMutableDictionary keysOfEntriesPassingTest:](tentativeCells, "keysOfEntriesPassingTest:", v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "anyObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void __37__UITableView__removeAllVisibleCells__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  id v9;

  v5 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v5 + 3101) & 2) != 0)
  {
    v6 = *(_QWORD **)(v5 + 2080);
    v7 = *(_QWORD *)(v5 + 2176) + a3;
    v8 = a2;
    -[UITableViewRowData indexPathForRowAtGlobalRow:](v6, v7);
  }
  else
  {
    objc_msgSend(a2, "_indexPath");
  }
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "_reuseTableViewCell:withIndexPath:didEndDisplaying:", a2, v9, 1);

}

- (void)_endAnimatingCells
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  -[UITableView _preparedCells](self, "_preparedCells", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v7++), "_setAnimating:", 0);
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

  -[UIView removeFromSuperview](self->_clearBlendingView, "removeFromSuperview");
}

uint64_t __46__UITableView__updateWithItems_updateSupport___block_invoke_4(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "_updateAnimationDidStopWithOldVisibleViews:finished:context:", *(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 48));
  if (*(_BYTE *)(a1 + 64))
  {
    objc_msgSend(*(id *)(a1 + 32), "_swipeActionController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "currentSwipeOccurrence");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "resetAnimated:completion:", 0, 0);

  }
  return objc_msgSend(*(id *)(a1 + 56), "endIgnoringDrags");
}

- (void)_updateAnimationDidStopWithOldVisibleViews:(id)a3 finished:(BOOL)a4 context:(id)a5
{
  UITableViewCell *swipeToDeleteCell;
  _BOOL4 v7;
  id v9;
  id *v10;
  id *v11;
  uint64_t v12;
  id WeakRetained;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  UITableViewCell *v18;
  uint64_t v19;
  uint64_t v20;
  UIView *v21;
  UIView *v22;
  void *v23;
  UITableView *v24;
  id v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  UITableView *v38;
  UITableView *v39;
  char isKindOfClass;
  UITableView *v41;
  UITableViewWrapperView *v42;
  uint64_t v43;
  uint64_t v44;
  NSIndexPath *swipedIndexPath;
  _BOOL4 v46;
  UITableViewCell *v47;
  int64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  _BOOL4 v69;
  id v70;
  id *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[128];
  _BYTE v81[128];
  uint64_t v82;
  CGRect v83;
  CGRect v84;

  v7 = a4;
  v82 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = (id *)a5;
  v11 = v10;
  if (v10)
  {
    v12 = (uint64_t)v10[2] - 1;
    v10[2] = (id)v12;
    if (v12)
      goto LABEL_89;
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  if (WeakRetained)
  {
    swipeToDeleteCell = (UITableViewCell *)*((_QWORD *)&self->_tableFlags + 1);

    if (((unint64_t)swipeToDeleteCell & 0x200000000000000) == 0)
    {
      -[UITableView _setNeedsVisibleCellsUpdate:withFrames:updateImmediatelyIfPossible:](self, "_setNeedsVisibleCellsUpdate:withFrames:updateImmediatelyIfPossible:", 1, 0, 0);
      -[UITableView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
    }
  }
  v14 = v9;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v70 = v9;
  v71 = v11;
  v69 = v7;
  if (v11)
    v15 = v11[1];
  else
    v15 = 0;
  v16 = v15;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v76, v81, 16);
  if (v17)
  {
    v18 = (UITableViewCell *)v17;
    v19 = *(_QWORD *)v77;
    do
    {
      swipeToDeleteCell = 0;
      do
      {
        if (*(_QWORD *)v77 != v19)
          objc_enumerationMutation(v16);
        v20 = *(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)swipeToDeleteCell);
        if (v20)
        {
          v21 = (UIView *)*(id *)(v20 + 24);
          v22 = v21;
          if (*(_BYTE *)(v20 + 12))
          {
            -[UIView layer](v21, "layer");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "setAllowsGroupOpacity:", *(unsigned __int8 *)(v20 + 13));
            if ((_IsKindOfUITableViewCell(v22) & 1) == 0)
              objc_msgSend(v23, "setMasksToBounds:", *(unsigned __int8 *)(v20 + 14));

          }
          if (v22)
          {
            if (_IsKindOfUITableViewCell(v22))
            {
              v24 = v22;
              if ((-[NSMutableArray containsObject:](self->_visibleCells, "containsObject:", v24) & 1) == 0)
              {
                -[UITableView _setAnimating:](v24, "_setAnimating:", 0);
                v25 = *(id *)(v20 + 32);
                -[UITableView _reuseTableViewCell:withIndexPath:didEndDisplaying:](self, "_reuseTableViewCell:withIndexPath:didEndDisplaying:", v24, v25, 1);

              }
              -[UITableView _removeFloatingSeparator](v24, "_removeFloatingSeparator");
              -[UITableView _removeInnerShadow](v24, "_removeInnerShadow");
LABEL_37:

              goto LABEL_41;
            }
            if (!-[UITableView _visibleHeaderViewsContainsView:](self, "_visibleHeaderViewsContainsView:", v22)
              && !-[UITableView _visibleFooterViewsContainsView:](self, "_visibleFooterViewsContainsView:", v22))
            {
              if (v22 != self->_tableHeaderView && v22 != self->_tableFooterView)
                goto LABEL_29;
              -[UITableView _visibleBounds](self, "_visibleBounds");
              v27 = v26;
              v29 = v28;
              v31 = v30;
              v33 = v32;
              if (-[UITableView _shouldUseNewHeaderFooterBehavior](self, "_shouldUseNewHeaderFooterBehavior"))
              {
                -[UIView frame](v22, "frame");
                v84.origin.x = v34;
                v84.origin.y = v35;
                v84.size.width = v36;
                v84.size.height = v37;
                v83.origin.x = v27;
                v83.origin.y = v29;
                v83.size.width = v31;
                v83.size.height = v33;
                if (!CGRectIntersectsRect(v83, v84))
                {
LABEL_29:
                  -[UIView superview](v22, "superview");
                  v38 = (UITableView *)objc_claimAutoreleasedReturnValue();
                  if (v38 == self)
                  {

                  }
                  else
                  {
                    v39 = v38;
                    objc_opt_class();
                    isKindOfClass = objc_opt_isKindOfClass();

                    if ((isKindOfClass & 1) != 0)
                      goto LABEL_34;
                  }
                  -[UIView removeFromSuperview](v22, "removeFromSuperview");
                }
              }
            }
LABEL_34:
            -[UIView superview](v22, "superview");
            v41 = (UITableView *)objc_claimAutoreleasedReturnValue();
            if (v41 == self)
            {

            }
            else
            {
              v24 = v41;
              -[UIView superview](v22, "superview");
              v42 = (UITableViewWrapperView *)objc_claimAutoreleasedReturnValue();
              if (v42 != self->_wrapperView)
              {

                goto LABEL_37;
              }
              v43 = *((_QWORD *)&self->_tableFlags + 2);

              if ((v43 & 0x40000000000000) == 0)
              {
LABEL_41:
                objc_msgSend(v14, "removeObject:", v22);
                goto LABEL_42;
              }
            }
            -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", v22, 0);
            goto LABEL_41;
          }
        }
        else
        {
          v22 = 0;
        }
LABEL_42:

        swipeToDeleteCell = (UITableViewCell *)((char *)swipeToDeleteCell + 1);
      }
      while (v18 != swipeToDeleteCell);
      v44 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v76, v81, 16);
      v18 = (UITableViewCell *)v44;
    }
    while (v44);
  }

  swipedIndexPath = self->_swipedIndexPath;
  if (swipedIndexPath)
  {
    swipeToDeleteCell = self->_swipeToDeleteCell;
    v46 = swipeToDeleteCell != 0;
    if (!swipeToDeleteCell)
      goto LABEL_51;
    if (!v71)
    {
      swipeToDeleteCell = 0;
      LODWORD(swipedIndexPath) = 0;
      v46 = 1;
      goto LABEL_53;
    }
    v47 = (UITableViewCell *)v71[4];
    if (swipeToDeleteCell == v47)
    {
LABEL_51:
      LODWORD(swipedIndexPath) = (*((_BYTE *)&self->_tableFlags + 23) & 0x20) == 0;
    }
    else
    {
      LODWORD(swipedIndexPath) = 0;
      v46 = 1;
      swipeToDeleteCell = v47;
    }
  }
  else
  {
    v46 = 0;
  }
LABEL_53:
  *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFFFFDLL | (2 * (((*((_QWORD *)&self->_tableFlags + 3) >> 1) & 1 | swipedIndexPath) & 1));
  if (v46)

  v48 = self->_updateAnimationCount - 1;
  self->_updateAnimationCount = v48;
  if (!v48)
  {
    -[UITableView _endAnimatingCells](self, "_endAnimatingCells");
    -[UITableView _updateSeparatorStateForVisibleCells](self, "_updateSeparatorStateForVisibleCells");
    if ((*((_BYTE *)&self->_tableFlags + 24) & 2) != 0)
      -[UITableView _cleanupStateFromDeleteConfirmation](self, "_cleanupStateFromDeleteConfirmation");
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    if (v71)
      v49 = v71[1];
    else
      v49 = 0;
    v50 = v49;
    v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v72, v80, 16);
    if (v51)
    {
      v52 = v51;
      v53 = *(_QWORD *)v73;
      do
      {
        v54 = 0;
        do
        {
          if (*(_QWORD *)v73 != v53)
            objc_enumerationMutation(v50);
          v55 = *(_QWORD *)(*((_QWORD *)&v72 + 1) + 8 * v54);
          if (v55)
          {
            v56 = *(id *)(v55 + 24);
            v57 = v56;
            if (v56)
            {
              if (_IsKindOfUITableViewCell(v56)
                && (-[NSMutableArray containsObject:](self->_visibleCells, "containsObject:", v57) & 1) == 0)
              {
                v58 = *(id *)(v55 + 32);
                -[UITableView _reuseTableViewCell:withIndexPath:didEndDisplaying:](self, "_reuseTableViewCell:withIndexPath:didEndDisplaying:", v57, v58, 1);

              }
              objc_msgSend(v14, "removeObject:", v57);
            }
          }
          else
          {
            v57 = 0;
          }

          ++v54;
        }
        while (v52 != v54);
        v59 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v72, v80, 16);
        v52 = v59;
      }
      while (v59);
    }

    -[UITableView _removeOrphanedViews:](self, "_removeOrphanedViews:", v14);
  }
  -[UIView traitCollection](self, "traitCollection");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = objc_msgSend(v60, "userInterfaceIdiom");

  v11 = v71;
  if (v61 == 3)
    -[UITableView _highlightFirstVisibleRowIfAppropriate](self, "_highlightFirstVisibleRowIfAppropriate");
  if (self->_focusedCell)
  {
    if (self->_focusedCellIndexPath
      && self->_focusedViewType == 1
      && (-[NSMutableArray containsObject:](self->_visibleCells, "containsObject:") & 1) == 0)
    {
      -[UITableView _configureCellForDisplay:forIndexPath:](self, "_configureCellForDisplay:forIndexPath:", self->_focusedCell, self->_focusedCellIndexPath);
    }
    -[UIView traitCollection](self, "traitCollection");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    v63 = objc_msgSend(v62, "userInterfaceIdiom");

    v11 = v71;
    if (v63 == 3)
    {
      +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "scrollManager");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIScrollView _focusTuple](self, "_focusTuple");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "animateOffsetOfEnvironmentScrollableContainer:toShowFocusItem:", v66, self->_focusedCell);

    }
  }
  if (v11)
  {
    v67 = v11[3];
    v68 = v67;
    v9 = v70;
    if (v67)
      (*((void (**)(id, _BOOL4))v67 + 2))(v67, v69);
  }
  else
  {
    v68 = 0;
    v9 = v70;
  }
  *((_QWORD *)&self->_tableFlags + 2) &= ~0x400000000uLL;
  -[UITableView _updateContentSize](self, "_updateContentSize");

LABEL_89:
}

void __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_2(uint64_t a1)
{
  double v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _BOOL8 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  double MinX;
  double v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  double MidX;
  void *v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  _BOOL4 v49;
  double *v50;
  double v51;
  uint64_t v52;
  _BOOL8 v53;
  double *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _BOOL8 v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  _QWORD v78[4];
  id v79;
  uint64_t v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;

  objc_msgSend(*(id *)(a1 + 32), "alpha");
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    if (v2 == *(double *)(v3 + 40))
      goto LABEL_17;
  }
  else if (v2 == 0.0)
  {
    goto LABEL_18;
  }
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:");
  objc_msgSend(*(id *)(a1 + 32), "layer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "allowsGroupOpacity");
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_BYTE *)(v6 + 13) = v5;
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      *(_BYTE *)(v7 + 12) = 1;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 3104);
  objc_msgSend(*(id *)(a1 + 32), "traitCollection");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "_userInterfaceRenderingMode");
  v12 = (v8 & 0x400000000) == 0 && v10 != 2;

  objc_msgSend(v4, "setAllowsGroupOpacity:", v12);
  if ((_IsKindOfUITableViewCell(*(void **)(a1 + 32)) & 1) == 0)
  {
    v13 = objc_msgSend(v4, "masksToBounds");
    v14 = *(_QWORD *)(a1 + 40);
    if (v14)
      *(_BYTE *)(v14 + 14) = v13;
    objc_msgSend(v4, "setMasksToBounds:", 1);
  }

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
LABEL_17:
    if (*(_BYTE *)(v3 + 11))
      goto LABEL_19;
  }
LABEL_18:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
LABEL_19:
  if (_IsKindOfUITableViewCell(*(void **)(a1 + 32)))
  {
    objc_msgSend(*(id *)(a1 + 32), "_setAnimating:clippingAdjacentCells:", 1, *(unsigned __int8 *)(a1 + 80));
    v15 = *(_QWORD *)(a1 + 40);
    if (v15 && *(_BYTE *)(v15 + 9))
      objc_msgSend(*(id *)(a1 + 48), "_addContentSubview:atBack:", *(_QWORD *)(a1 + 32), 1);
    v16 = *(void **)(a1 + 56);
    if (!v16
      || (objc_msgSend(v16, "fromValue"),
          v17 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v17, "CGRectValue"),
          MinX = CGRectGetMinX(v81),
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 2416), "bounds"),
          v19 = CGRectGetMinX(v82),
          v17,
          MinX == v19))
    {
      v43 = *(double **)(a1 + 40);
      if (v43)
      {
        v44 = v43[8];
        v45 = v43[9];
        v46 = v43[10];
        v47 = v43[11];
      }
      else
      {
        v45 = 0.0;
        v46 = 0.0;
        v47 = 0.0;
        v44 = 0.0;
      }
      objc_msgSend(*(id *)(a1 + 32), "setFrame:", v44, v45, v46, v47);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "layer");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIView _defaultUIViewAnimationForLayer:forKey:](UIView, "_defaultUIViewAnimationForLayer:forKey:", v20, CFSTR("position"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v78[0] = MEMORY[0x1E0C809B0];
        v78[1] = 3221225472;
        v78[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_3;
        v78[3] = &unk_1E16B1B50;
        v22 = *(id *)(a1 + 32);
        v23 = *(_QWORD *)(a1 + 40);
        v79 = v22;
        v80 = v23;
        +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v78);
        v24 = (void *)objc_msgSend(v21, "copy");
        objc_msgSend(v24, "setKeyPath:", CFSTR("position.y"));
        v25 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v21, "fromValue");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "CGPointValue");
        objc_msgSend(v25, "numberWithDouble:", v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "setFromValue:", v28);

        objc_msgSend(v20, "removeAnimationForKey:", CFSTR("position"));
        objc_msgSend(v21, "delegate");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "setDelegate:", v29);

        objc_msgSend(v20, "addAnimation:forKey:", v24, CFSTR("position.y"));
        v30 = (void *)objc_msgSend(*(id *)(a1 + 56), "copy");
        objc_msgSend(v30, "setKeyPath:", CFSTR("position.x"));
        v31 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*(id *)(a1 + 32), "frame");
        MidX = CGRectGetMidX(v83);
        objc_msgSend(*(id *)(a1 + 56), "fromValue");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "CGRectValue");
        objc_msgSend(v31, "numberWithDouble:", MidX + CGRectGetMinX(v84));
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "setFromValue:", v34);

        objc_msgSend(v30, "setDelegate:", 0);
        objc_msgSend(v20, "addAnimation:forKey:", v30, CFSTR("position.x"));

      }
      else
      {
        v54 = *(double **)(a1 + 40);
        if (v54)
        {
          v55 = v54[8];
          v56 = v54[9];
          v57 = v54[10];
          v58 = v54[11];
        }
        else
        {
          v56 = 0.0;
          v57 = 0.0;
          v58 = 0.0;
          v55 = 0.0;
        }
        objc_msgSend(*(id *)(a1 + 32), "setFrame:", v55, v56, v57, v58);
      }

    }
    v59 = *(void **)(a1 + 32);
    v60 = *(_QWORD **)(a1 + 48);
    if (v59 == (void *)v60[333] && !*(_BYTE *)(a1 + 81))
    {
      objc_msgSend(v60, "_animateSwipeOccurrenceAction:alongsideCell:animation:", *(_QWORD *)(a1 + 64));
      v59 = *(void **)(a1 + 32);
    }
    objc_msgSend(v59, "layoutIfNeeded");
    v77 = *(id *)(a1 + 32);
    v61 = *(_QWORD *)(a1 + 40);
    if (!v61 || (v62 = *(id *)(v61 + 32)) == 0)
    {
      v70 = *(_QWORD *)(a1 + 48);
      v71 = *(_QWORD *)(v70 + 3088);
      if ((v71 & 0x10000000000000) != 0)
      {
        v72 = objc_msgSend(*(id *)(a1 + 48), "_editingStyleForRowAtIndexPath:", 0);
        v73 = objc_msgSend(*(id *)(a1 + 48), "_shouldIndentWhileEditingForRowAtIndexPath:", 0);
        v74 = objc_msgSend(*(id *)(a1 + 48), "_canReorderRowAtIndexPath:", 0);
        v70 = *(_QWORD *)(a1 + 48);
      }
      else
      {
        v73 = 0;
        v72 = 0;
        v74 = *(_BYTE *)(v70 + 3104) & 1;
      }
      LOWORD(v76) = 257;
      LOBYTE(v75) = v74;
      objc_msgSend((id)v70, "_setupCell:forEditing:atIndexPath:canEdit:editingStyle:shouldIndentWhileEditing:showsReorderControl:accessoryType:animated:updateSeparators:", v77, (v71 >> 52) & 1, 0, objc_msgSend(v77, "isEditing"), v72, v73, v75, objc_msgSend(v77, "accessoryType"), v76);
      v69 = v77;
      v63 = 0;
      goto LABEL_70;
    }
    v63 = v62;
    v64 = *(_QWORD *)(a1 + 40);
    if (!v64 || !*(_BYTE *)(v64 + 9))
    {
      if ((objc_msgSend(v77, "_needsSetup") & 1) != 0)
      {
LABEL_60:
        v67 = *(_QWORD *)(a1 + 40);
        if (v67)
          v68 = *(unsigned __int8 *)(v67 + 10) != 0;
        else
          v68 = 0;
        objc_msgSend(*(id *)(a1 + 48), "_setupCell:forEditing:atIndexPath:animated:updateSeparators:", v77, v68, v63, 1, 1);
        goto LABEL_63;
      }
      v65 = *(_QWORD *)(a1 + 40);
      if (v65)
      {
        v66 = *(unsigned __int8 *)(v65 + 10) != 0;
        if (v66 != objc_msgSend(v77, "isEditing"))
          goto LABEL_60;
      }
      else if ((objc_msgSend(v77, "isEditing") & 1) != 0)
      {
        goto LABEL_60;
      }
    }
LABEL_63:
    v69 = v77;
LABEL_70:
    objc_msgSend(v69, "_setNeedsHeightCalculation:", 0);

    return;
  }
  objc_msgSend(*(id *)(a1 + 48), "_sectionContentInset");
  v37 = v36;
  v38 = v35;
  if (v36 <= 0.0 && v35 <= 0.0
    || ((v48 = *(_QWORD *)(a1 + 40)) == 0 ? (v49 = 0) : (v49 = (*(_DWORD *)(v48 + 16) & 0xFFFFFFFE) == 4),
        (_IsKindOfUITableViewHeaderFooterView(*(void **)(a1 + 32)) & 1) != 0 || v49))
  {
    v39 = *(double **)(a1 + 40);
    if (v39)
    {
      v37 = v39[8];
      v40 = v39[9];
      v41 = v39[10];
      v42 = v39[11];
    }
    else
    {
      v37 = 0.0;
      v40 = 0.0;
      v41 = 0.0;
      v42 = 0.0;
    }
  }
  else
  {
    v50 = *(double **)(a1 + 40);
    if (v50)
    {
      v40 = v50[9];
      v51 = v50[10];
      v42 = v50[11];
    }
    else
    {
      v40 = 0.0;
      v51 = 0.0;
      v42 = 0.0;
    }
    v41 = v51 - (v37 + v38);
  }
  objc_msgSend(*(id *)(a1 + 32), "setFrame:", v37, v40, v41, v42);
  objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v52 = *(_QWORD *)(a1 + 40);
    if (v52)
      v53 = *(unsigned __int8 *)(v52 + 10) != 0;
    else
      v53 = 0;
    objc_msgSend(*(id *)(a1 + 32), "setEditing:animated:", v53, 1);
  }
}

- (void)_setupCell:(id)a3 forEditing:(BOOL)a4 atIndexPath:(id)a5 animated:(BOOL)a6 updateSeparators:(BOOL)a7
{
  _BOOL8 v10;
  id v13;
  int64_t v14;
  _BOOL8 v15;
  _BOOL8 v16;
  uint64_t v17;
  int64_t v18;
  _BOOL8 v19;
  BOOL v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v10 = a4;
  v25 = a3;
  v13 = a5;
  if (!v13)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(a2);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 16713, CFSTR("UITableView internal inconsistency: indexPath cannot be nil in %@"), v22);

  }
  if ((*((_BYTE *)&self->_tableFlags + 5) & 0x10) != 0)
    v14 = -[UITableView _accessoryTypeForCell:forRowAtIndexPath:](self, "_accessoryTypeForCell:forRowAtIndexPath:", v25, v13);
  else
    v14 = 0;
  v15 = -[UITableView _canEditRowAtIndexPath:](self, "_canEditRowAtIndexPath:", v13);
  v16 = v15;
  v17 = *((_QWORD *)&self->_tableFlags + 3);
  if (!v10)
  {
    v19 = 0;
    v18 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_10;
LABEL_12:
    v20 = v17 & 1;
    goto LABEL_13;
  }
  if (!v15)
  {
    v18 = 0;
    v19 = 0;
    goto LABEL_12;
  }
  v18 = -[UITableView _editingStyleForRowAtIndexPath:](self, "_editingStyleForRowAtIndexPath:", v13);
  v19 = -[UITableView _shouldIndentWhileEditingForRowAtIndexPath:](self, "_shouldIndentWhileEditingForRowAtIndexPath:", v13);
LABEL_10:
  v20 = -[UITableView _canReorderRowAtIndexPath:](self, "_canReorderRowAtIndexPath:", v13);
LABEL_13:
  BYTE1(v24) = a7;
  LOBYTE(v24) = a6;
  LOBYTE(v23) = v20;
  -[UITableView _setupCell:forEditing:atIndexPath:canEdit:editingStyle:shouldIndentWhileEditing:showsReorderControl:accessoryType:animated:updateSeparators:](self, "_setupCell:forEditing:atIndexPath:canEdit:editingStyle:shouldIndentWhileEditing:showsReorderControl:accessoryType:animated:updateSeparators:", v25, v10, v13, v16, v18, v19, v23, v14, v24);

}

- (BOOL)_canEditRowAtIndexPath:(id)a3
{
  id v4;
  char v5;
  void *v6;

  v4 = a3;
  if (v4)
  {
    if ((*((_BYTE *)&self->_tableFlags + 1) & 4) != 0)
    {
      -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v6, "tableView:canEditRowAtIndexPath:", self, v4);

    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)_reuseTableViewCell:(id)a3 withIndexPath:(id)a4 didEndDisplaying:(BOOL)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  void *v10;
  id v11;

  if (self->_firstResponderView != a3 && self->_focusedCell != a3)
  {
    v6 = a5;
    v8 = a3;
    v11 = v8;
    if (a4)
    {
      -[NSMutableDictionary objectForKey:](self->_tentativeCells, "objectForKey:", a4);
      v9 = (id)objc_claimAutoreleasedReturnValue();

      v8 = v11;
      if (v9 == v11)
      {
        -[NSMutableDictionary removeObjectForKey:](self->_tentativeCells, "removeObjectForKey:", a4);
        v8 = v11;
      }
    }
    if (-[_UITableViewSubviewManager shouldDeferReuseOfCell:]((uint64_t)self->_subviewManager, (uint64_t)v8))
    {
      -[_UITableViewSubviewManager cellReadyForReuse:withIndexPath:didEndDisplaying:]((uint64_t)self->_subviewManager, (uint64_t)v11, a4, v6);
    }
    else
    {
      -[UITableView _reuseTableViewSubview:viewType:](self, "_reuseTableViewSubview:viewType:", v11, 1);
      v10 = v11;
      if (a4 && v11 && v6)
      {
        -[UITableView _notifyDidEndDisplayingCell:forIndexPath:](self, "_notifyDidEndDisplayingCell:forIndexPath:", v11, a4);
        v10 = v11;
      }
      objc_msgSend(v10, "_setNeedsSetup:", 1);
    }

  }
}

- (void)_reuseTableViewSubview:(id)a3 viewType:(int)a4
{
  uint64_t v4;
  UIView *v6;
  UIView *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  UITableViewRowData *rowData;
  double minimumRowHeight;
  unint64_t v16;
  int v17;
  UIView *v18;
  UIView *v19;

  v4 = *(_QWORD *)&a4;
  v6 = (UIView *)a3;
  v7 = v6;
  if (self->_firstResponderView != v6 && self->_focusedCell != v6)
  {
    v19 = v6;
    if ((_DWORD)v4 == 1
      && (-[_UITableViewSubviewManager indexPathForPrefetchedCell:]((id *)&self->_subviewManager->super.isa, (uint64_t)v6), v8 = (void *)objc_claimAutoreleasedReturnValue(), v8, v7 = v19, v8))
    {
      -[UIView _setHiddenForReuse:](v19, "_setHiddenForReuse:", 1);
    }
    else
    {
      -[UIView reuseIdentifier](v7, "reuseIdentifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        -[UITableView _cellReuseMapForType:](self, "_cellReuseMapForType:", v4);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "objectForKey:", v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v11;
        if (!v11 || (objc_msgSend(v11, "containsObject:", v19) & 1) == 0)
        {
          -[UIView bounds](self, "bounds");
          rowData = self->_rowData;
          if (rowData)
            minimumRowHeight = rowData->_minimumRowHeight;
          else
            minimumRowHeight = 0.0;
          v16 = (unint64_t)(ceil(v13 / fmax(fmin(minimumRowHeight, v13), 10.0)) + 1.0);
          if (!v12)
          {
            v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E10]), "initWithCapacity:", v16);
            objc_msgSend(v10, "setObject:forKey:", v12, v9);
          }
          if (objc_msgSend(v12, "count") < v16)
            objc_msgSend(v12, "addObject:", v19);
        }
        v17 = objc_msgSend(v12, "containsObject:", v19);

      }
      else
      {
        v17 = 0;
      }
      if ((_DWORD)v4 == 1)
      {
        v18 = v19;
        -[UIView _setIndexPath:](v18, "_setIndexPath:", 0);
        -[UIView _willEnterReusePool](v18, "_willEnterReusePool");

      }
      if (v17)
        -[UIView _setHiddenForReuse:](v19, "_setHiddenForReuse:", 1);
      else
        -[UIView removeFromSuperview](v19, "removeFromSuperview");
      -[UITableViewWrapperView _unstickView:](self->_wrapperView, "_unstickView:", v19);

    }
    v7 = v19;
  }

}

- (void)_notifyDidEndDisplayingCell:(id)a3 forIndexPath:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  v6 = a4;
  objc_msgSend(v8, "_notifyIsDisplaying:", 0);
  if ((*((_BYTE *)&self->_tableFlags + 3) & 0x20) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "tableView:didEndDisplayingCell:forRowAtIndexPath:", self, v8, v6);

  }
}

- (BOOL)_visibleHeaderViewsContainsView:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    -[NSMutableDictionary objectEnumerator](self->_visibleHeaderViews, "objectEnumerator", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v11;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v5);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "isEqual:", v4) & 1) != 0)
          {
            LOBYTE(v6) = 1;
            goto LABEL_12;
          }
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (BOOL)_visibleFooterViewsContainsView:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    -[NSMutableDictionary objectEnumerator](self->_visibleFooterViews, "objectEnumerator", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v11;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v5);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "isEqual:", v4) & 1) != 0)
          {
            LOBYTE(v6) = 1;
            goto LABEL_12;
          }
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (void)_removeOrphanedViews:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    -[UITableView _visibleViews](self, "_visibleViews");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "minusHashTable:", v5);

  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "removeFromSuperview", (_QWORD)v11);
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }

}

uint64_t __59__UITableView__performBatchUpdates_withContext_completion___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a2);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

- (void)_updateContentSizeSkippingContentOffsetAdjustment:(BOOL)a3
{
  _BOOL8 v3;
  double v5;
  double v6;
  double v7;
  double v8;
  UITableViewCountView *countLabel;
  double v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  double v16;
  double v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGRect v26;
  CGRect v27;

  if (self->_rowData)
  {
    v3 = a3;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (-[UIView _isSpecialInternalHeaderView](self->_tableHeaderView, "_isSpecialInternalHeaderView"))
      {
        -[UIView frame](self->_tableHeaderView, "frame");
        v6 = v5;
        -[UIView frame](self, "frame");
        -[UIView sizeToFit](self->_tableHeaderView, "sizeToFit", CGRectGetWidth(v26));
        -[UIView frame](self->_tableHeaderView, "frame");
        if (v7 != v6)
          -[UITableViewRowData tableHeaderHeightDidChangeToHeight:]((uint64_t)self->_rowData, v7);
      }
    }
    v8 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
    countLabel = self->_countLabel;
    if (countLabel && -[UITableViewCountView count](countLabel, "count") >= 20)
    {
      -[UITableConstants defaultRowHeightForTableView:](self->_constants, "defaultRowHeightForTableView:", self);
      v8 = v8 + v10;
    }
    -[UIView bounds](self, "bounds");
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    *((_QWORD *)&self->_tableFlags + 2) &= ~0x100000000uLL;
    -[UITableView heightForTableHeaderViewHiding](self, "heightForTableHeaderViewHiding");
    if (v19 > 0.0)
    {
      v20 = v19;
      -[UITableView _contentInset](self, "_contentInset");
      v22 = v21;
      v24 = v23;
      v27.origin.x = v12;
      v27.origin.y = v14;
      v27.size.width = v16;
      v27.size.height = v18;
      v25 = v20 + CGRectGetHeight(v27) - v22 - v24;
      if (v8 < v25)
      {
        *((_QWORD *)&self->_tableFlags + 2) |= 0x100000000uLL;
        v8 = v25;
      }
    }
    -[UITableView _updateShowScrollIndicatorsFlag](self, "_updateShowScrollIndicatorsFlag");
    self->_coalescedContentSizeDelta = 0.0;
    -[UITableView setContentSize:skipContentOffsetAdjustment:](self, "setContentSize:skipContentOffsetAdjustment:", v3, v16, v8);
    -[UITableView _adjustTableHeaderAndFooterViews](self, "_adjustTableHeaderAndFooterViews");
    -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
    -[UITableView _adjustCountLabel](self, "_adjustCountLabel");
    -[UITableView _updateIndexFrame](self, "_updateIndexFrame");
  }
}

- (void)_updateShowScrollIndicatorsFlag
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  objc_super v8;
  objc_super v9;
  objc_super v10;
  objc_super v11;

  if (self->_index)
  {
    -[UIView window](self, "window");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_screen");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "integerValue") == 2)
    {
      v6 = *((_QWORD *)&self->_tableFlags + 2);

      if ((v6 & 0x100000000) == 0)
      {
        v7 = *((_QWORD *)&self->_tableFlags + 2);
LABEL_6:
        v9.receiver = self;
        v9.super_class = (Class)UITableView;
        -[UIScrollView setShowsHorizontalScrollIndicator:](&v9, sel_setShowsHorizontalScrollIndicator_, (v7 >> 25) & 1);
        -[UIScrollView _setDefaultShowsVerticalScrollIndicator:](&v8, sel__setDefaultShowsVerticalScrollIndicator_, (*((_QWORD *)&self->_tableFlags + 2) >> 26) & 1, self, UITableView);
        return;
      }
    }
    else
    {

    }
  }
  else
  {
    v7 = *((_QWORD *)&self->_tableFlags + 2);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_6;
  }
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  -[UIScrollView setShowsHorizontalScrollIndicator:](&v11, sel_setShowsHorizontalScrollIndicator_, 0);
  v10.receiver = self;
  v10.super_class = (Class)UITableView;
  -[UIScrollView setShowsVerticalScrollIndicator:](&v10, sel_setShowsVerticalScrollIndicator_, 0, v8.receiver, v8.super_class);
}

- (void)_scheduleAdjustExtraSeparators
{
  *((_QWORD *)&self->_tableFlags + 2) |= 0x10uLL;
  if ((*((_BYTE *)&self->_tableFlags + 15) & 8) == 0)
    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
}

- (void)_adjustTableHeaderAndFooterViews
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGRect v10;
  CGRect v11;

  if (self->_tableHeaderView)
  {
    if ((*((_BYTE *)&self->_tableFlags + 21) & 0x20) == 0)
    {
      v3 = -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData);
      v5 = v4;
      v7 = v6;
      v9 = v8;
      -[UIView frame](self->_tableHeaderView, "frame");
      v11.origin.x = v3;
      v11.origin.y = v5;
      v11.size.width = v7;
      v11.size.height = v9;
      if (!CGRectEqualToRect(v10, v11))
        -[UIView setFrame:](self->_tableHeaderView, "setFrame:", v3, v5, v7, v9);
    }
  }
  if (self->_tableFooterView)
    -[UIView setFrame:](self->_tableFooterView, "setFrame:", -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData));
}

- (void)setContentSize:(CGSize)a3 skipContentOffsetAdjustment:(BOOL)a4
{
  _BOOL4 v4;
  double height;
  double width;
  _BOOL8 v8;
  _BOOL8 v9;

  v4 = a4;
  height = a3.height;
  width = a3.width;
  v8 = -[UIScrollView _isAutomaticContentOffsetAdjustmentEnabled](self, "_isAutomaticContentOffsetAdjustmentEnabled");
  v9 = !v4;
  -[UIScrollView _setAutomaticContentOffsetAdjustmentEnabled:](self, "_setAutomaticContentOffsetAdjustmentEnabled:", v9);
  -[UIScrollView _hideScrollIndicatorsIfNeededForNewContentSize:animated:](self, "_hideScrollIndicatorsIfNeededForNewContentSize:animated:", 0, width, height);
  -[UITableView setContentSize:](self, "setContentSize:", width, height);
  -[UIScrollView _setAutomaticContentOffsetAdjustmentEnabled:](self, "_setAutomaticContentOffsetAdjustmentEnabled:", v8);
  if (!v9)
    *((_QWORD *)&self->_tableFlags + 3) |= 8uLL;
}

- (BOOL)_isTableHeaderAutohiding
{
  void *v2;
  char isKindOfClass;

  -[UITableView tableHeaderView](self, "tableHeaderView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

- (UIView)tableHeaderView
{
  return self->_tableHeaderView;
}

- (double)heightForTableHeaderViewHiding
{
  return -[UITableViewRowData heightForTableHeaderViewHiding]((uint64_t)self->_rowData);
}

- (void)_adjustCountLabel
{
  UITableViewCountView *countLabel;
  double v4;
  double v5;
  double v6;
  CGFloat v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGRect v14;

  countLabel = self->_countLabel;
  if (countLabel)
  {
    -[UIView frame](countLabel, "frame");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    -[UIScrollView contentSize](self, "contentSize");
    v11 = v10;
    v13 = v12;
    v14.origin.x = v5;
    v14.origin.y = v7;
    v14.size.width = v11;
    v14.size.height = v9;
    -[UILabel setFrame:](self->_countLabel, "setFrame:", v5, v13 - CGRectGetHeight(v14), v11, v9);
  }
}

- (double)_heightForTableFooter
{
  double v3;
  void *v4;
  double v5;
  CGRect v7;

  if (-[UITableView _shouldUseNewHeaderFooterBehavior](self, "_shouldUseNewHeaderFooterBehavior"))
  {
    v3 = 0.0;
    if ((*((_BYTE *)&self->_tableFlags + 7) & 0x80) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "heightForFooterInTableView:", self);
      v3 = v5;

    }
    if (v3 == -1.0)
      return 0.0;
    else
      return v3;
  }
  else
  {
    -[UIView frame](self->_tableFooterView, "frame");
    return CGRectGetHeight(v7);
  }
}

uint64_t __49__UITableView__applyContentSizeDeltaImmediately___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setContentSize:skipContentOffsetAdjustment:", 0, *(double *)(a1 + 40), *(double *)(a1 + 48));
}

- (void)setDirectionalLayoutMargins:(NSDirectionalEdgeInsets)a3
{
  double trailing;
  double bottom;
  double leading;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  objc_super v23;

  trailing = a3.trailing;
  bottom = a3.bottom;
  leading = a3.leading;
  top = a3.top;
  -[UIView _rawLayoutMargins](self, "_rawLayoutMargins");
  v12 = *((_DWORD *)&self->super.super._viewFlags + 4);
  if ((v12 & 0x80000) != 0)
    v13 = v11;
  else
    v13 = v9;
  if ((*(_QWORD *)&v12 & 0x80000) == 0)
    v9 = v11;
  if (leading != v13 || top != v8 || trailing != v9 || bottom != v10)
  {
    -[UIView layoutMargins](self, "layoutMargins");
    v18 = v17;
    v20 = v19;
    *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFFFDFLL | (32 * ((*((_QWORD *)&self->_tableFlags + 3) & 0x60) != 64));
    v23.receiver = self;
    v23.super_class = (Class)UITableView;
    -[UIView setDirectionalLayoutMargins:](&v23, sel_setDirectionalLayoutMargins_, top, leading, bottom, trailing);
    -[UIView layoutMargins](self, "layoutMargins");
    if (v18 != v22 || v20 != v21)
      -[UITableView _rebuildGeometryWithCompatibility](self, "_rebuildGeometryWithCompatibility");
  }
}

- (void)setInsetsContentViewsToSafeArea:(BOOL)insetsContentViewsToSafeArea
{
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v6;
  NSMutableArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)&self->_tableFlags + 3);
  if (((((v3 & 0x2000000) == 0) ^ insetsContentViewsToSafeArea) & 1) == 0)
  {
    v4 = insetsContentViewsToSafeArea;
    v6 = 0x2000000;
    if (!insetsContentViewsToSafeArea)
      v6 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v3 & 0xFFFFFFFFFDFFFFFFLL | v6;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v7 = self->_visibleCells;
    v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v23 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * i), "_setInsetsContentViewsToSafeArea:", v4);
        }
        v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      }
      while (v9);
    }

    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    -[UITableView _visibleHeaderFooterViews](self, "_visibleHeaderFooterViews", 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v19;
      do
      {
        for (j = 0; j != v14; ++j)
        {
          if (*(_QWORD *)v19 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * j);
          if (_IsKindOfUITableViewHeaderFooterView(v17))
            objc_msgSend(v17, "_setInsetsContentViewsToSafeArea:", v4);
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      }
      while (v14);
    }

    -[UITableView _updateTableHeaderFooterViewInsetsContentViewsToSafeArea](self, "_updateTableHeaderFooterViewInsetsContentViewsToSafeArea");
    -[UITableView _rebuildGeometryWithCompatibility](self, "_rebuildGeometryWithCompatibility");
  }
}

- (void)setTableHeaderView:(UIView *)tableHeaderView
{
  UIView **p_tableHeaderView;
  UIView *v7;
  UITableViewRowData *rowData;
  double v9;
  double v10;
  void *v11;
  UIView *v12;

  v12 = tableHeaderView;
  if (-[UITableView _shouldUseNewHeaderFooterBehavior](self, "_shouldUseNewHeaderFooterBehavior"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 9952, CFSTR("Cannot explicitliy set header when using new heightForHeaderInTableView: or heightForFooterInTableView: methods.  Use viewForHeaderInTableView: instead."));

  }
  p_tableHeaderView = &self->_tableHeaderView;
  v7 = self->_tableHeaderView;
  if (v7 != v12)
  {
    -[UIView removeFromSuperview](v7, "removeFromSuperview");
    objc_storeStrong((id *)&self->_tableHeaderView, tableHeaderView);
    if (*p_tableHeaderView
      && -[UIView translatesAutoresizingMaskIntoConstraints](*p_tableHeaderView, "translatesAutoresizingMaskIntoConstraints")&& dyld_program_sdk_at_least())
    {
      -[UIView _setHostsLayoutEngine:](*p_tableHeaderView, "_setHostsLayoutEngine:", 1);
    }
    -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", *p_tableHeaderView, 0);
  }
  -[UITableView _updateTableHeaderFooterViewInsetsContentViewsToSafeArea](self, "_updateTableHeaderFooterViewInsetsContentViewsToSafeArea");
  -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
  if ((objc_opt_respondsToSelector() & 1) != 0
    && -[UIView _isSpecialInternalHeaderView](*p_tableHeaderView, "_isSpecialInternalHeaderView"))
  {
    -[UIView sizeToFit](*p_tableHeaderView, "sizeToFit");
  }
  rowData = self->_rowData;
  if (*p_tableHeaderView)
  {
    -[UIView frame](*p_tableHeaderView, "frame");
    v10 = v9;
  }
  else
  {
    v10 = 0.0;
  }
  -[UITableViewRowData tableHeaderHeightDidChangeToHeight:]((uint64_t)rowData, v10);
  -[UIView setFrame:](*p_tableHeaderView, "setFrame:", -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData));
  -[UITableView _updateContentSize](self, "_updateContentSize");
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1);
  -[UITableView _updateSeparatorStateForVisibleCells](self, "_updateSeparatorStateForVisibleCells");
  if (!-[UITableView _pinsTableHeaderView](self, "_pinsTableHeaderView"))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      -[UITableView setTableHeaderViewShouldAutoHide:](self, "setTableHeaderViewShouldAutoHide:", 1);
  }

}

- (void)setTableFooterView:(UIView *)tableFooterView
{
  UIView **p_tableFooterView;
  UIView *v7;
  UITableViewRowData *rowData;
  double v9;
  void *v10;
  UIView *v11;

  v11 = tableFooterView;
  if (-[UITableView _shouldUseNewHeaderFooterBehavior](self, "_shouldUseNewHeaderFooterBehavior"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 9984, CFSTR("Cannot explicitliy set footer when using new heightForHeaderInTableView: or heightForFooterInTableView: methods.  Use viewForFooterInTableView: instead."));

  }
  p_tableFooterView = &self->_tableFooterView;
  v7 = self->_tableFooterView;
  if (v7 != v11)
  {
    -[UIView removeFromSuperview](v7, "removeFromSuperview");
    objc_storeStrong((id *)&self->_tableFooterView, tableFooterView);
    if (*p_tableFooterView
      && -[UIView translatesAutoresizingMaskIntoConstraints](*p_tableFooterView, "translatesAutoresizingMaskIntoConstraints")&& dyld_program_sdk_at_least())
    {
      -[UIView _setHostsLayoutEngine:](*p_tableFooterView, "_setHostsLayoutEngine:", 1);
    }
    -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", *p_tableFooterView, 0);
  }
  -[UITableView _updateTableHeaderFooterViewInsetsContentViewsToSafeArea](self, "_updateTableHeaderFooterViewInsetsContentViewsToSafeArea");
  -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
  rowData = self->_rowData;
  if (!*p_tableFooterView)
  {
    v9 = 0.0;
    if (!rowData)
      goto LABEL_12;
    goto LABEL_11;
  }
  -[UIView frame](*p_tableFooterView, "frame");
  if (rowData)
LABEL_11:
    rowData->_tableFooterHeight = v9;
LABEL_12:
  -[UIView setFrame:](*p_tableFooterView, "setFrame:", -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData));
  -[UITableView _updateContentSize](self, "_updateContentSize");

}

- (void)_updateTableHeaderFooterViewInsetsContentViewsToSafeArea
{
  if (_IsKindOfUITableViewHeaderFooterView(self->_tableHeaderView))
    -[UIView _setInsetsContentViewsToSafeArea:](self->_tableHeaderView, "_setInsetsContentViewsToSafeArea:", -[UITableView insetsContentViewsToSafeArea](self, "insetsContentViewsToSafeArea"));
  if (_IsKindOfUITableViewHeaderFooterView(self->_tableFooterView))
    -[UIView _setInsetsContentViewsToSafeArea:](self->_tableFooterView, "_setInsetsContentViewsToSafeArea:", -[UITableView insetsContentViewsToSafeArea](self, "insetsContentViewsToSafeArea"));
}

- (BOOL)_pinsTableHeaderView
{
  return *((unsigned __int8 *)&self->_tableFlags + 19) >> 7;
}

- (void)didMoveToWindow
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  int v9;
  double v10;
  double v11;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v13;
  objc_super v14;
  CGRect v15;

  v14.receiver = self;
  v14.super_class = (Class)UITableView;
  -[UIView didMoveToWindow](&v14, sel_didMoveToWindow);
  -[UIView window](self, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[UIView _rawLayoutMargins](self, "_rawLayoutMargins");
    v5 = v4;
    v7 = v6;
    objc_msgSend(v3, "screen");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "_wantsWideContentMargins");

    if (v9)
    {
      -[UIView frame](self, "frame");
      if (CGRectGetWidth(v15) <= 320.0)
        v10 = 16.0;
      else
        v10 = 20.0;
      v11 = v10;
    }
    else
    {
      if (dyld_program_sdk_at_least())
        v11 = 16.0;
      else
        v11 = 15.0;
      dyld_program_sdk_at_least();
    }
    -[UITableView _setDefaultLayoutMargins:](self, "_setDefaultLayoutMargins:", v5, v11, v7);
    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
    if (-[UITableView _supportsCellPrefetching](self, "_supportsCellPrefetching"))
    {
      p_tableFlags = &self->_tableFlags;
      if ((*((_BYTE *)&self->_tableFlags + 24) & 0x80) == 0)
      {
        _UIUpdateCycleRegisterIdleObserver(self);
        v13 = *((_QWORD *)&self->_tableFlags + 3) | 0x80;
        goto LABEL_16;
      }
    }
  }
  else
  {
    p_tableFlags = &self->_tableFlags;
    if ((*((_BYTE *)&self->_tableFlags + 24) & 0x80) != 0)
    {
      _UIUpdateCycleUnregisterIdleObserver(self);
      v13 = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFFF7FLL;
LABEL_16:
      *((_QWORD *)p_tableFlags + 3) = v13;
    }
  }

}

- (void)_setDefaultLayoutMargins:(UIEdgeInsets)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v4;

  p_tableFlags = &self->_tableFlags;
  v4 = *((_QWORD *)&self->_tableFlags + 3);
  if ((v4 & 0x20) == 0)
  {
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v4 | 0x40;
    -[UITableView setLayoutMargins:](self, "setLayoutMargins:", a3.top, a3.left, a3.bottom, a3.right);
    *((_QWORD *)p_tableFlags + 3) = *((_QWORD *)p_tableFlags + 3) & 0xFFFFFFFFFFFFFFBFLL | (((v4 >> 6) & 1) << 6);
  }
}

- (void)setLayoutMargins:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  objc_super v21;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  -[UIView _rawLayoutMargins](self, "_rawLayoutMargins");
  if (left != v11 || top != v8 || right != v10 || bottom != v9)
  {
    -[UIView layoutMargins](self, "layoutMargins");
    v16 = v15;
    v18 = v17;
    *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFFFDFLL | (32 * ((*((_QWORD *)&self->_tableFlags + 3) & 0x60) != 64));
    v21.receiver = self;
    v21.super_class = (Class)UITableView;
    -[UIView setLayoutMargins:](&v21, sel_setLayoutMargins_, top, left, bottom, right);
    -[UIView layoutMargins](self, "layoutMargins");
    if (v16 != v20 || v18 != v19)
      -[UITableView _rebuildGeometryWithCompatibility](self, "_rebuildGeometryWithCompatibility");
  }
}

- (void)_rebuildGeometryWithCompatibility
{
  uint64_t v3;

  v3 = dyld_program_sdk_at_least();
  -[UITableView _rebuildGeometryForcingRowDataUpdate:skipContentOffsetAdjustment:updateImmediatelyIfPossible:](self, "_rebuildGeometryForcingRowDataUpdate:skipContentOffsetAdjustment:updateImmediatelyIfPossible:", 1, v3, v3 ^ 1);
}

- (void)_cellDidInvalidateIntrinsicContentSize:(id)a3
{
  id v4;
  void *v5;
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;
  void *v7;
  CATransform3D v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[UITableView _canRecomputePreferredAttributesForInvalidatedElements]((uint64_t)self)
    && (objc_msgSend(v4, "_isHiddenForReuse") & 1) == 0)
  {
    if (v4)
      objc_msgSend(v4, "transform3D");
    else
      memset(&v8, 0, sizeof(v8));
    if (CATransform3DIsIdentity(&v8))
    {
      -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v4, 1);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (v5)
      {
        -[UITableView _setNeedsRecomputeHeightsForInvalidatedElements](self, "_setNeedsRecomputeHeightsForInvalidatedElements");
        intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
        v9[0] = v5;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[UICollectionViewLayoutInvalidationContext invalidateItemsAtIndexPaths:](intrinsicContentSizeInvalidationContext, "invalidateItemsAtIndexPaths:", v7);

      }
    }
  }

}

- (void)_setNeedsRebuildGeometry
{
  *((_QWORD *)&self->_tableFlags + 1) |= 0x400000000000000uLL;
  -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
}

- (void)endUpdates
{
  -[UITableView endUpdatesWithContext:](self, "endUpdatesWithContext:", 0);
}

- (UIView)tableFooterView
{
  return self->_tableFooterView;
}

void __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  v6 = objc_msgSend(v14, "integerValue");
  v7 = a1[5];
  v9 = v6 >= v7;
  v8 = v6 - v7;
  v9 = !v9 || v8 >= a1[6];
  if (v9)
  {
    v10 = *(void **)(*(_QWORD *)(a1[4] + 8) + 40);
    if (v10)
    {
      objc_msgSend(v10, "setObject:forKey:", v5, v14);
    }
    else
    {
      v11 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithObjectsAndKeys:", v5, v14, 0);
      v12 = *(_QWORD *)(a1[4] + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

    }
  }

}

- (void)_setUsesStaticScrollBar:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  UITableViewRowData *rowData;
  double v9;
  objc_super v10;

  v3 = a3;
  -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5 || v3)
  {
    -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v10.receiver = self;
    v10.super_class = (Class)UITableView;
    -[UIScrollView _setUsesStaticScrollBar:](&v10, sel__setUsesStaticScrollBar_, v3);
    if (v7 || !v3)
    {
      -[UITableView _addIndexToAppropriateContainer](self, "_addIndexToAppropriateContainer");
      return;
    }
  }
  else
  {

    v10.receiver = self;
    v10.super_class = (Class)UITableView;
    -[UIScrollView _setUsesStaticScrollBar:](&v10, sel__setUsesStaticScrollBar_, 0);
  }
  -[UITableView _updateWrapperView](self, "_updateWrapperView");
  -[UITableView _addIndexToAppropriateContainer](self, "_addIndexToAppropriateContainer");
  -[UITableView _updateWrapperFrame](self, "_updateWrapperFrame");
  rowData = self->_rowData;
  -[UIView bounds](self, "bounds");
  -[UITableView _widthForContentInRect:](self, "_widthForContentInRect:");
  if (rowData)
    rowData->_tableViewWidth = v9;
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1);
}

- (void)layoutSubviews
{
  void *v3;
  UIFocusContainerGuide *contentFocusContainerGuide;
  _UITableViewPrefetchContext *prefetchContext;
  double v6;
  CGRect v7;

  -[UITableView _applyCoalescedContentSizeUpdates](self, "_applyCoalescedContentSizeUpdates");
  -[UITableView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  if ((*((_BYTE *)&self->_tableFlags + 15) & 4) != 0)
    -[UITableView _rebuildGeometry](self, "_rebuildGeometry");
  -[UITableView _recomputeHeightsForInvalidatedElementsIfNeeded](self, "_recomputeHeightsForInvalidatedElementsIfNeeded");
  if ((*((_BYTE *)&self->_tableFlags + 15) & 8) != 0 && !self->_tableReloadingSuspendedCount)
  {
    -[UITableView _visibleBounds](self, "_visibleBounds");
    if (CGRectIsEmpty(v7))
    {
      *((_QWORD *)&self->_tableFlags + 1) |= 0x1000000000000000uLL;
    }
    else
    {
      v3 = (void *)MEMORY[0x186DC9484]();
      -[UITableView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
      objc_autoreleasePoolPop(v3);
    }
  }
  if ((*((_BYTE *)&self->_tableFlags + 16) & 0x10) != 0)
    -[UITableView _adjustExtraSeparators](self, "_adjustExtraSeparators");
  -[UITableView _updateBackgroundView](self, "_updateBackgroundView");
  -[UITableView _updateIndex](self, "_updateIndex");
  -[UIScrollView _scrollViewDidLayoutSubviews](self, "_scrollViewDidLayoutSubviews");
  contentFocusContainerGuide = self->_contentFocusContainerGuide;
  -[UIView bounds](self, "bounds");
  -[UILayoutGuide _setManualLayoutFrame:](contentFocusContainerGuide, "_setManualLayoutFrame:");
  -[UITableView _preparePrefetchContext](self, "_preparePrefetchContext");
  -[_UITableViewPrefetchContext pruneCellsForVisibleIndexRange:]((uint64_t)self->_prefetchContext, self->_visibleRows.location, self->_visibleRows.length);
  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x20080) == 0x20000)
  {
    prefetchContext = self->_prefetchContext;
    -[UIScrollView contentOffset](self, "contentOffset");
    -[_UITableViewPrefetchContext updateVisibleIndexRange:withContentOffset:]((uint64_t)prefetchContext, self->_visibleRows.location, self->_visibleRows.length, v6);
  }
}

- (void)_reloadDataIfNeeded
{
  if ((*((_BYTE *)&self->_tableFlags + 15) & 2) != 0
    && (*((_BYTE *)&self->_tableFlags + 17) & 1) == 0
    && !self->_tableReloadingSuspendedCount)
  {
    -[UITableView reloadData](self, "reloadData");
  }
}

- (void)_recomputeHeightsForInvalidatedElementsIfNeeded
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  id v16;
  id v17;
  unint64_t v18;
  _QWORD v19[5];
  _QWORD v20[5];
  id v21;
  _QWORD *v22;
  _QWORD v23[5];
  id v24;
  id v25;
  _QWORD *v26;
  id *v27;
  _QWORD v28[5];
  id v29;
  id v30[4];
  id v31;
  UITableView *v32;
  id v33;

  if (self->_intrinsicContentSizeInvalidationContext)
  {
    p_tableFlags = &self->_tableFlags;
    if ((*((_BYTE *)&self->_tableFlags + 29) & 2) != 0
      && (-[UIView window](self, "window"), v4 = (void *)objc_claimAutoreleasedReturnValue(), v4, v4))
    {
      v5 = *((_QWORD *)p_tableFlags + 3);
      if ((v5 & 0x40000000000) == 0)
      {
        *((_QWORD *)p_tableFlags + 2) = *((_QWORD *)p_tableFlags + 2);
        *((_QWORD *)p_tableFlags + 3) = v5 | 0x40000000000;
        -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
        return;
      }
      v6 = 1;
    }
    else
    {
      v6 = 0;
    }
    -[UICollectionViewLayoutInvalidationContext invalidatedItemIndexPaths](self->_intrinsicContentSizeInvalidationContext, "invalidatedItemIndexPaths");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionViewLayoutInvalidationContext invalidatedSupplementaryIndexPaths](self->_intrinsicContentSizeInvalidationContext, "invalidatedSupplementaryIndexPaths");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = MEMORY[0x1E0C809B0];
    v30[0] = (id)MEMORY[0x1E0C809B0];
    v30[1] = (id)3221225472;
    v30[2] = __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke;
    v30[3] = &unk_1E16B47A8;
    v10 = v7;
    v31 = v10;
    v32 = self;
    v11 = v8;
    v33 = v11;
    if (v6)
    {
      v12 = (void *)-[UITableViewRowData copy](self->_rowData, "copy");
      -[UITableView _visibleViews](self, "_visibleViews");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v28[0] = 0;
      v28[1] = v28;
      v28[2] = 0x3032000000;
      v28[3] = __Block_byref_object_copy__189;
      v28[4] = __Block_byref_object_dispose__189;
      v29 = 0;
      -[UITableConstants defaultEditAndUpdateAnimationDuration](self->_constants, "defaultEditAndUpdateAnimationDuration");
      v15 = v14;
      v23[0] = v9;
      v23[1] = 3221225472;
      v23[2] = __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_2;
      v23[3] = &unk_1E16E4028;
      v26 = v28;
      v27 = v30;
      v23[4] = self;
      v16 = v12;
      v24 = v16;
      v25 = v13;
      v20[0] = v9;
      v20[1] = 3221225472;
      v20[2] = __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_3;
      v20[3] = &unk_1E16C2608;
      v22 = v28;
      v20[4] = self;
      v17 = v25;
      v21 = v17;
      +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 1028, v23, v20, v15, 0.0);

      _Block_object_dispose(v28, 8);
    }
    else
    {
      __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke(v30);
    }
    -[UITableView _clearNeedsRecomputeHeightsForInvalidatedElements](self, "_clearNeedsRecomputeHeightsForInvalidatedElements");
    v18 = *((_QWORD *)p_tableFlags + 3);
    *((_QWORD *)p_tableFlags + 3) = v18 & 0xFFFFE7FFFFFFFFFFLL | ((unint64_t)(((v18 >> 43) + 1) & 3) << 43);
    if ((v18 & 0x180000000000) == 0)
    {
      v19[0] = v9;
      v19[1] = 3221225472;
      v19[2] = __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_4;
      v19[3] = &unk_1E16B1B28;
      v19[4] = self;
      objc_msgSend((id)UIApp, "_performBlockAfterCATransactionCommits:", v19);
    }

  }
}

- (void)_preparePrefetchContext
{
  _UITableViewPrefetchContext *v3;
  _UITableViewPrefetchContext *prefetchContext;

  if (!self->_prefetchContext && (*((_BYTE *)&self->_tableFlags + 26) & 2) != 0)
  {
    v3 = (_UITableViewPrefetchContext *)-[_UITableViewPrefetchContext initWithMaxIndex:prefetchItemCount:refreshPrefetchThresholdCount:cancelThresholdCount:]([_UITableViewPrefetchContext alloc], -[UITableView _lastGlobalRowIndex](self, "_lastGlobalRowIndex"), 10, 9, 15);
    prefetchContext = self->_prefetchContext;
    self->_prefetchContext = v3;

  }
  -[UITableView _configureDataSourcePrefetchingHandlers](self, "_configureDataSourcePrefetchingHandlers");
  -[UITableView _configureCellPrefetchingHandlers](self, "_configureCellPrefetchingHandlers");
}

- (void)_configureDataSourcePrefetchingHandlers
{
  _UITableViewPrefetchContext *prefetchContext;
  id v4;
  _BOOL4 v5;
  _UITableViewPrefetchContext *v6;
  _UITableViewPrefetchContext *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _UITableViewPrefetchContext *v12;
  const char *v13;
  _UITableViewPrefetchContext *v14;
  _UITableViewPrefetchContext *v16;
  const char *v17;
  _UITableViewPrefetchContext *v18;
  _QWORD v19[4];
  id v20;
  _QWORD newValue[4];
  id v22;
  id location;

  prefetchContext = self->_prefetchContext;
  if (prefetchContext && (v4 = prefetchContext->_requestHandler) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = self->_prefetchContext;
    if (v6)
      v6 = (_UITableViewPrefetchContext *)v6->_cancelHandler;
    v7 = v6;
    v5 = v7 != 0;

    v4 = 0;
  }

  v9 = *((_QWORD *)&self->_tableFlags + 3) & 0x60000;
  if (v5 || v9 != 393216)
  {
    if (v9 != 393216 && v5)
    {
      v16 = self->_prefetchContext;
      if (v16)
      {
        objc_setProperty_nonatomic_copy(v16, v8, 0, 16);
        v18 = self->_prefetchContext;
        if (v18)
          objc_setProperty_nonatomic_copy(v18, v17, 0, 24);
      }
    }
  }
  else
  {
    objc_initWeak(&location, self);
    v10 = MEMORY[0x1E0C809B0];
    newValue[0] = MEMORY[0x1E0C809B0];
    newValue[1] = 3221225472;
    newValue[2] = __54__UITableView__configureDataSourcePrefetchingHandlers__block_invoke;
    newValue[3] = &unk_1E16D91F0;
    objc_copyWeak(&v22, &location);
    v12 = self->_prefetchContext;
    if (v12)
      objc_setProperty_nonatomic_copy(v12, v11, newValue, 16);
    v19[0] = v10;
    v19[1] = 3221225472;
    v19[2] = __54__UITableView__configureDataSourcePrefetchingHandlers__block_invoke_2;
    v19[3] = &unk_1E16D91F0;
    objc_copyWeak(&v20, &location);
    v14 = self->_prefetchContext;
    if (v14)
      objc_setProperty_nonatomic_copy(v14, v13, v19, 24);
    objc_destroyWeak(&v20);
    objc_destroyWeak(&v22);
    objc_destroyWeak(&location);
  }
}

- (void)_configureCellPrefetchingHandlers
{
  _UITableViewPrefetchContext *prefetchContext;
  id v4;
  _BOOL4 v5;
  _UITableViewPrefetchContext *v6;
  _UITableViewPrefetchContext *v7;
  const char *v8;
  _BOOL4 v9;
  _UITableViewPrefetchContext *v10;
  const char *v11;
  _UITableViewPrefetchContext *v12;
  uint64_t v13;
  const char *v14;
  _UITableViewPrefetchContext *v15;
  const char *v16;
  _UITableViewPrefetchContext *v17;
  _QWORD v18[4];
  id v19;
  _QWORD newValue[4];
  id v21;
  id location;

  prefetchContext = self->_prefetchContext;
  if (prefetchContext && (v4 = prefetchContext->_cellHandler) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = self->_prefetchContext;
    if (v6)
      v6 = (_UITableViewPrefetchContext *)v6->_cellPruningHandler;
    v7 = v6;
    v5 = v7 != 0;

    v4 = 0;
  }

  if ((*((_BYTE *)&self->_tableFlags + 26) & 2) == 0)
  {
    LOBYTE(v9) = 0;
LABEL_10:
    if (v5 && !v9)
    {
      v10 = self->_prefetchContext;
      if (v10)
      {
        objc_setProperty_nonatomic_copy(v10, v8, 0, 32);
        v12 = self->_prefetchContext;
        if (v12)
          objc_setProperty_nonatomic_copy(v12, v11, 0, 40);
      }
      -[_UITableViewSubviewManager removeAllPrefetchedCells]((id *)&self->_subviewManager->super.isa);
    }
    return;
  }
  v9 = -[UITableView _supportsCellPrefetching](self, "_supportsCellPrefetching");
  if (v5 || !v9)
    goto LABEL_10;
  objc_initWeak(&location, self);
  v13 = MEMORY[0x1E0C809B0];
  newValue[0] = MEMORY[0x1E0C809B0];
  newValue[1] = 3221225472;
  newValue[2] = __48__UITableView__configureCellPrefetchingHandlers__block_invoke;
  newValue[3] = &unk_1E16E3E80;
  objc_copyWeak(&v21, &location);
  v15 = self->_prefetchContext;
  if (v15)
    objc_setProperty_nonatomic_copy(v15, v14, newValue, 32);
  v18[0] = v13;
  v18[1] = 3221225472;
  v18[2] = __48__UITableView__configureCellPrefetchingHandlers__block_invoke_2;
  v18[3] = &unk_1E16E3ED0;
  objc_copyWeak(&v19, &location);
  v17 = self->_prefetchContext;
  if (v17)
    objc_setProperty_nonatomic_copy(v17, v16, v18, 40);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&location);
}

void __48__UITableView__configureCellPrefetchingHandlers__block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id **WeakRetained;
  id **v6;
  id *v7;
  id **v8;
  _QWORD v9[7];

  WeakRetained = (id **)objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = WeakRetained[271];
    v9[1] = 3221225472;
    v9[2] = __48__UITableView__configureCellPrefetchingHandlers__block_invoke_3;
    v9[3] = &unk_1E16E3EA8;
    v9[4] = v6;
    v9[5] = a2;
    v9[6] = a3;
    v8 = v6;
    v9[0] = MEMORY[0x1E0C809B0];
    -[_UITableViewSubviewManager filterPrefetchedCells:](v7, (uint64_t)v9);
    v6 = v8;
  }

}

- (void)_addIndexToAppropriateContainer
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  UIView *indexContainerView;
  id v12;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == 3)
  {
    -[UIView window](self, "window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_screen");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "integerValue");

    if (v8 == 2)
    {
      -[UITableView _removeIndex](self, "_removeIndex");
      return;
    }
    indexContainerView = self->_indexContainerView;
    -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v9;
    if (indexContainerView)
    {
      objc_msgSend(v9, "addSubview:", self->_indexContainerView);

      -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v9;
      v10 = 1;
      goto LABEL_8;
    }
  }
  else
  {
    -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", self->_indexContainerView, 0);
    -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v9;
  }
  v10 = 0;
LABEL_8:
  objc_msgSend(v9, "setShouldInsetButtonsForIndex:", v10);

}

void __34__UITableView__reapTentativeViews__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2192), "containsObject:", v5) & 1) == 0)
  {
    objc_msgSend(v5, "_tableView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6 == *(void **)(a1 + 32))
    {

LABEL_6:
      objc_msgSend(*(id *)(a1 + 32), "_reuseTableViewCell:withIndexPath:didEndDisplaying:", v5, v9, 0);
      goto LABEL_7;
    }
    objc_msgSend(v5, "superview");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
      goto LABEL_6;
  }
LABEL_7:

}

- (double)_widthForContentInRect:(CGRect)a3
{
  return a3.size.width;
}

- (void)setEstimatedSectionFooterHeight:(CGFloat)estimatedSectionFooterHeight
{
  int v6;
  _BOOL4 v7;
  void *v8;
  _BOOL4 v9;
  BOOL v10;
  CGFloat v11;
  unint64_t v12;
  NSObject *v13;
  uint8_t buf[4];
  CGFloat v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = dyld_program_sdk_at_least();
  v7 = estimatedSectionFooterHeight != -1.0 && estimatedSectionFooterHeight < 0.0;
  if (v6)
  {
    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 6774, CFSTR("Invalid estimated section footer height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&estimatedSectionFooterHeight);

    }
  }
  else if (v7)
  {
    v12 = setEstimatedSectionFooterHeight____s_category;
    if (!setEstimatedSectionFooterHeight____s_category)
    {
      v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v12, (unint64_t *)&setEstimatedSectionFooterHeight____s_category);
    }
    v13 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v15 = estimatedSectionFooterHeight;
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "Invalid estimated section footer height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }
  v9 = -[UITableView _estimatesSectionFooterHeights](self, "_estimatesSectionFooterHeights");
  v10 = estimatedSectionFooterHeight > 1.0 || estimatedSectionFooterHeight <= 0.0;
  v11 = 2.0;
  if (v10)
    v11 = estimatedSectionFooterHeight;
  self->_estimatedSectionFooterHeight = v11;
  if (v9 != -[UITableView _estimatesSectionFooterHeights](self, "_estimatesSectionFooterHeights"))
    -[UITableView _updateRowDataIfNeeded](self, "_updateRowDataIfNeeded");
}

- (void)reloadData
{
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  os_signpost_id_t v10;
  os_signpost_id_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  _BOOL4 v28;
  uint64_t v29;
  void *v30;
  _BOOL8 v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _UITableViewReorderingSupport *reorderingSupport;
  UITableViewRowData *rowData;
  _UITableViewReorderingSupport *v39;
  NSMutableArray *deselectionTransitionIndexPaths;
  NSIndexPath *pendingSelectionIndexPath;
  _BOOL4 v42;
  uint64_t v43;
  unint64_t v44;
  NSIndexPath *focusedCellIndexPath;
  _UITableViewPrefetchContext *prefetchContext;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  NSObject *v50;
  id v51;
  _BYTE v52[24];
  uint64_t v53;
  CGRect v54;
  CGRect v55;

  v53 = *MEMORY[0x1E0C80C00];
  if (self->_tableReloadingSuspendedCount < 1)
  {
    v7 = qword_1EDDB0A10;
    if (!qword_1EDDB0A10)
    {
      v7 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&qword_1EDDB0A10);
    }
    if ((*(_BYTE *)v7 & 1) != 0)
    {
      v49 = *(NSObject **)(v7 + 8);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = v49;
        *(_DWORD *)v52 = 138412546;
        *(_QWORD *)&v52[4] = objc_opt_class();
        *(_WORD *)&v52[12] = 2048;
        *(_QWORD *)&v52[14] = self;
        v51 = *(id *)&v52[4];
        _os_log_impl(&dword_185066000, v50, OS_LOG_TYPE_ERROR, "<%@ %p> reloadData performing", v52, 0x16u);

      }
    }
    v8 = qword_1EDDB0A18;
    if (!qword_1EDDB0A18)
    {
      v8 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v8, (unint64_t *)&qword_1EDDB0A18);
    }
    v9 = *(id *)(v8 + 8);
    v10 = os_signpost_id_make_with_pointer(*(os_log_t *)(v8 + 8), self);
    if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = v10;
      if (os_signpost_enabled(v9))
      {
        *(_WORD *)v52 = 0;
        _os_signpost_emit_with_name_impl(&dword_185066000, v9, OS_SIGNPOST_EVENT, v11, "ReloadData", ", v52, 2u);
      }
    }

    -[UITableView _suspendReloads](self, "_suspendReloads");
    if (self->_firstResponderViewType == 1
      || -[UITableView _shouldUseNewHeaderFooterBehavior](self, "_shouldUseNewHeaderFooterBehavior"))
    {
      if (self->_firstResponderView)
      {
        *((_QWORD *)&self->_tableFlags + 3) |= 0x800000000000uLL;
        -[UIView window](self, "window");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "firstResponder");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "resignFirstResponder");

        *((_QWORD *)&self->_tableFlags + 3) &= ~0x800000000000uLL;
        if (self->_firstResponderView)
        {
          -[UITableView _resumeReloads](self, "_resumeReloads");
          return;
        }
      }
    }
    v15 = *((_QWORD *)&self->_tableFlags + 2);
    v14 = *((_QWORD *)&self->_tableFlags + 3);
    *((_QWORD *)&self->_tableFlags + 2) = v15 | 0x100;
    if (self->_focusedCell)
    {
      *((_QWORD *)&self->_tableFlags + 2) = v15 | 0x100;
      *((_QWORD *)&self->_tableFlags + 3) = v14 | 0x400;
      -[UIView frame](self->_focusedCell, "frame");
      v17 = v16;
      v19 = v18;
      v21 = v20;
      v23 = v22;
      -[UIScrollView visibleBounds](self, "visibleBounds");
      v55.origin.x = v24;
      v55.origin.y = v25;
      v55.size.width = v26;
      v55.size.height = v27;
      v54.origin.x = v17;
      v54.origin.y = v19;
      v54.size.width = v21;
      v54.size.height = v23;
      v28 = CGRectIntersectsRect(v54, v55);
      v29 = 2048;
      if (!v28)
        v29 = 0;
      *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFF7FFLL | v29;
    }
    -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate", *(_OWORD *)v52, *(_QWORD *)&v52[16], v53);
    -[_UITableViewDragController forceReset](self->_dragController, "forceReset");
    -[_UITableViewDropController beginIgnoringDrags](self->_dropController, "beginIgnoringDrags");
    v5 = objc_claimAutoreleasedReturnValue();
    -[UITableView _resetAllShadowUpdates](self, "_resetAllShadowUpdates");
    -[UITableView _identityTracker:](self, "_identityTracker:", 0);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIIndexPathIdentityTracker reset]((uint64_t)v30);

    -[UIContextMenuInteraction _retargetDismissingMenuWithInternalIdentifier:toPreview:force:](self->_contextMenuInteraction, "_retargetDismissingMenuWithInternalIdentifier:toPreview:force:", 0, 0, 1);
    -[UITableView _resetSwipeActionController](self, "_resetSwipeActionController");
    v31 = -[UITableView _isScrolledToTop](self, "_isScrolledToTop");
    -[UITableView _indexPathsForVisibleRowsUsingPresentationValues:](self, "_indexPathsForVisibleRowsUsingPresentationValues:", 1);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "firstObject");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    v34 = *((_QWORD *)&self->_tableFlags + 3);
    if ((v34 & 4) == 0)
    {
      -[UITableView _storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:](self, "_storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:", v33);
      v34 = *((_QWORD *)&self->_tableFlags + 3);
    }
    v35 = *((_QWORD *)&self->_tableFlags + 2);
    if ((v35 & 0x40000000000) != 0)
    {
      *((_QWORD *)&self->_tableFlags + 2) = v35 | 0x80000000000;
      *((_QWORD *)&self->_tableFlags + 3) = v34;
    }
    -[UITableView _cleanupStateFromDeleteConfirmation](self, "_cleanupStateFromDeleteConfirmation");
    -[UIView layer](self->_wrapperView, "layer");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "removeAllAnimations");

    reorderingSupport = self->_reorderingSupport;
    if (reorderingSupport && (*((_BYTE *)reorderingSupport + 32) & 4) == 0)
    {
      *((_BYTE *)reorderingSupport + 32) |= 4u;
      rowData = self->_rowData;
      v39 = reorderingSupport;
      -[UITableViewRowData setReorderedIndexPath:]((uint64_t)rowData, 0);
      -[UITableView _cancelCellReorder:](self, "_cancelCellReorder:", 0);

    }
    -[UITableView _removeAllVisibleCells](self, "_removeAllVisibleCells");
    *((_QWORD *)&self->_tableFlags + 2) &= ~0x8000000uLL;
    -[UITableView noteNumberOfRowsChanged](self, "noteNumberOfRowsChanged");
    if ((*((_BYTE *)&self->_tableFlags + 28) & 0x40) == 0)
    {
      -[NSMutableArray removeAllObjects](self->_highlightedIndexPaths, "removeAllObjects");
      -[NSMutableArray removeAllObjects](self->_selectedIndexPaths, "removeAllObjects");
      deselectionTransitionIndexPaths = self->_deselectionTransitionIndexPaths;
      self->_deselectionTransitionIndexPaths = 0;

      -[NSMutableSet removeAllObjects](self->_hiddenSeparatorIndexPaths, "removeAllObjects");
    }
    pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
    if (pendingSelectionIndexPath)
    {
      self->_pendingSelectionIndexPath = 0;

    }
    -[UITableView _updateIndex](self, "_updateIndex");
    v42 = -[UITableView _shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:scrolledToTop:](self, "_shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:scrolledToTop:", v33, v31);
    v43 = *((_QWORD *)&self->_tableFlags + 3);
    if (v42)
      v43 |= 4uLL;
    v44 = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFFEFFLL | (((v15 >> 8) & 1) << 8);
    *((_QWORD *)&self->_tableFlags + 1) &= ~0x200000000000000uLL;
    *((_QWORD *)&self->_tableFlags + 2) = v44;
    *((_QWORD *)&self->_tableFlags + 3) = v43;
    -[UITableView _clearNeedsRecomputeHeightsForInvalidatedElements](self, "_clearNeedsRecomputeHeightsForInvalidatedElements");
    if (self->_focusedCellIndexPath && !-[UITableView _indexPathIsValid:](self, "_indexPathIsValid:"))
    {
      focusedCellIndexPath = self->_focusedCellIndexPath;
      self->_focusedCellIndexPath = 0;

    }
    -[NSObject endIgnoringDrags](v5, "endIgnoringDrags");
    -[UITableView _resumeReloads](self, "_resumeReloads");
    prefetchContext = self->_prefetchContext;
    if (prefetchContext)
      -[_UITableViewPrefetchContext cancelWithNewMaxIndex:]((uint64_t)prefetchContext, -[UITableView _lastGlobalRowIndex](self, "_lastGlobalRowIndex"));
    v47 = *((_QWORD *)&self->_tableFlags + 3);
    if ((v47 & 0x800000000) != 0 && !self->_tableReloadingSuspendedCount)
    {
      *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
      *((_QWORD *)&self->_tableFlags + 3) = v47 & 0xFFFFFFF7FFFFFFFFLL;
      -[UITableView _purgeReuseQueues](self, "_purgeReuseQueues");
      v47 = *((_QWORD *)&self->_tableFlags + 3);
    }
    if ((v47 & 0x4020000000) == 0x20000000)
    {
      -[UIView window](self, "window");
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      if (v48)
        -[UIView layoutIfNeeded](self, "layoutIfNeeded");
    }

    goto LABEL_49;
  }
  *((_QWORD *)&self->_tableFlags + 1) |= 0x80000000000000uLL;
  v3 = qword_1EDDB0A08;
  if (!qword_1EDDB0A08)
  {
    v3 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v3, (unint64_t *)&qword_1EDDB0A08);
  }
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v4 = *(NSObject **)(v3 + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = v4;
      *(_DWORD *)v52 = 138412546;
      *(_QWORD *)&v52[4] = objc_opt_class();
      *(_WORD *)&v52[12] = 2048;
      *(_QWORD *)&v52[14] = self;
      v6 = *(id *)&v52[4];
      _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "<%@ %p> reloadData called but reloads are suspended", v52, 0x16u);

LABEL_49:
    }
  }
}

- (void)_updateIdentityTrackerWithUpdateSupport:(id)a3
{
  id *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  id *v23;
  id obj;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (id *)a3;
  -[UITableView _identityTracker:](self, "_identityTracker:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v23 = v4;
    -[UITableView contextMenuInteraction](self, "contextMenuInteraction");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_internalIdentifiersForDismissingMenu");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    obj = v7;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v30;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v30 != v10)
            objc_enumerationMutation(obj);
          v12 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * i);
          -[_UIIndexPathIdentityTracker currentIndexPathForIdentifier:]((uint64_t)v5, v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
          {
            v14 = -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_currentUpdate->oldRowData, v13);
            if (v14 != 0x7FFFFFFFFFFFFFFFLL
              && -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:]((uint64_t)self->_currentUpdate, v14) != 0x7FFFFFFFFFFFFFFFLL)
            {
              -[UITableView contextMenuInteraction](self, "contextMenuInteraction");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "_retargetDismissingMenuWithInternalIdentifier:toPreview:force:", v12, 0, 0);

              goto LABEL_14;
            }
          }

        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
        if (v9)
          continue;
        break;
      }
    }
LABEL_14:

    v4 = v23;
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v23[8], "count"));
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v17 = v23[8];
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v26;
      do
      {
        for (j = 0; j != v19; ++j)
        {
          if (*(_QWORD *)v26 != v20)
            objc_enumerationMutation(v17);
          objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * j), "collectionViewUpdateItem");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "addObject:", v22);

        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
      }
      while (v19);
    }

    -[_UIIndexPathIdentityTracker updateWithUpdateItems:]((uint64_t)v5, v16);
  }

}

- (id)_identityTracker:(BOOL)a3
{
  _UIIndexPathIdentityTracker *identityTracker;
  BOOL v5;
  _UIIndexPathIdentityTracker *v6;
  _UIIndexPathIdentityTracker *v7;

  identityTracker = self->_identityTracker;
  if (identityTracker)
    v5 = 1;
  else
    v5 = !a3;
  if (!v5)
  {
    v6 = (_UIIndexPathIdentityTracker *)-[_UIIndexPathIdentityTracker initWithTableView:]((id *)[_UIIndexPathIdentityTracker alloc], self);
    v7 = self->_identityTracker;
    self->_identityTracker = v6;

    identityTracker = self->_identityTracker;
  }
  return identityTracker;
}

- (void)_resetSwipeActionController
{
  UITableViewCell *swipeToDeleteCell;
  NSIndexPath *swipedIndexPath;

  -[UISwipeActionController reloadData](self->_swipeActionController, "reloadData");
  if ((*((_BYTE *)&self->_tableFlags + 21) & 0x10) != 0)
    -[UITableView _setEditing:animated:forced:](self, "_setEditing:animated:forced:", 0, 0, 1);
  swipeToDeleteCell = self->_swipeToDeleteCell;
  self->_swipeToDeleteCell = 0;

  swipedIndexPath = self->_swipedIndexPath;
  self->_swipedIndexPath = 0;

}

- (void)_removeAllVisibleCells
{
  NSMutableArray *visibleCells;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];

  visibleCells = self->_visibleCells;
  v4 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __37__UITableView__removeAllVisibleCells__block_invoke;
  v9[3] = &unk_1E16E3BA8;
  v9[4] = self;
  -[NSMutableArray enumerateObjectsWithOptions:usingBlock:](visibleCells, "enumerateObjectsWithOptions:usingBlock:", 2, v9);
  -[NSMutableArray removeAllObjects](self->_visibleCells, "removeAllObjects");
  self->_visibleRows.location = 0;
  self->_visibleRows.length = 0;
  *((_QWORD *)&self->_tableFlags + 2) &= ~0x80000000000000uLL;
  v5 = (void *)-[NSMutableDictionary copy](self->_visibleHeaderViews, "copy");
  v8[0] = v4;
  v8[1] = 3221225472;
  v8[2] = __37__UITableView__removeAllVisibleCells__block_invoke_2;
  v8[3] = &unk_1E16BCD20;
  v8[4] = self;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v8);

  v6 = (void *)-[NSMutableDictionary copy](self->_visibleFooterViews, "copy");
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = __37__UITableView__removeAllVisibleCells__block_invoke_3;
  v7[3] = &unk_1E16BCD20;
  v7[4] = self;
  objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v7);

  -[_UITableViewSubviewManager removeAllPrefetchedCells]((id *)&self->_subviewManager->super.isa);
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1);
}

- (void)_resetAllShadowUpdates
{
  -[NSMutableArray removeAllObjects](self->_placeholderContexts, "removeAllObjects");
  -[_UITableViewShadowUpdatesController reset](self->_shadowUpdatesController, "reset");
}

- (void)_cleanupStateFromDeleteConfirmation
{
  NSIndexPath *swipedIndexPath;
  UITableViewCell *swipeToDeleteCell;

  swipedIndexPath = self->_swipedIndexPath;
  self->_swipedIndexPath = 0;

  *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFDFFFFFFFFFFFFFLL | (((*((_QWORD *)&self->_tableFlags + 1) >> 52) & 1) << 53);
  swipeToDeleteCell = self->_swipeToDeleteCell;
  self->_swipeToDeleteCell = 0;

  if ((*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0 && -[UIView clipsToBounds](self->_wrapperView, "clipsToBounds"))
    -[UITableView _updateWrapperClipping](self, "_updateWrapperClipping");
  *((_QWORD *)&self->_tableFlags + 3) &= ~2uLL;
}

- (void)_rebuildGeometryForcingRowDataUpdate:(BOOL)a3 skipContentOffsetAdjustment:(BOOL)a4 updateImmediatelyIfPossible:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  _BOOL4 v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v5 = a5;
  v6 = a4;
  v7 = a3;
  v20 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)&self->_tableFlags + 1) &= ~0x400000000000000uLL;
  -[UITableView _clearNeedsRecomputeHeightsForInvalidatedElements](self, "_clearNeedsRecomputeHeightsForInvalidatedElements");
  -[UITableView _updateWrapperView](self, "_updateWrapperView");
  -[UITableView _updateWrapperFrame](self, "_updateWrapperFrame");
  if (v7)
    -[UITableView _updateRowData](self, "_updateRowData");
  else
    -[UITableView _updateRowDataIfNeeded](self, "_updateRowDataIfNeeded");
  -[UITableView _updateContentSizeSkippingContentOffsetAdjustment:](self, "_updateContentSizeSkippingContentOffsetAdjustment:", v6);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[UITableView _preparedCells](self, "_preparedCells", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v16 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v14, "_setNeedsHeightCalculation:", 1);
        -[UITableView _sectionContentInset](self, "_sectionContentInset");
        objc_msgSend(v14, "_setBackgroundInset:");
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v11);
  }

  -[UITableView _updateMarginWidthForVisibleViewsForceLayout:](self, "_updateMarginWidthForVisibleViewsForceLayout:", 0);
  -[UITableView _sectionContentInset](self, "_sectionContentInset");
  -[UITableView _updateListEnvironmentTraitOverrideWithSectionContentInsets:](self, "_updateListEnvironmentTraitOverrideWithSectionContentInsets:");
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:updateImmediatelyIfPossible:](self, "_setNeedsVisibleCellsUpdate:withFrames:updateImmediatelyIfPossible:", 1, 1, v5);
}

- (void)_updateWrapperView
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  UITableViewWrapperView *wrapperView;
  double v7;
  double v8;
  double v9;
  double v10;
  UITableViewWrapperView *v11;
  UITableViewWrapperView *v12;
  void *v13;
  uint64_t v14;
  UITableViewWrapperView *v15;

  v3 = -[UITableView _shouldWrapCells](self, "_shouldWrapCells");
  v4 = *((_QWORD *)&self->_tableFlags + 2);
  v5 = 0x40000000000000;
  if (!v3)
    v5 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = v4 & 0xFFBFFFFFFFFFFFFFLL | v5;
  wrapperView = self->_wrapperView;
  if (!v3)
  {
    if (!wrapperView)
      return;
    -[UIScrollView removeFromSuperview](wrapperView, "removeFromSuperview");
    v15 = self->_wrapperView;
    self->_wrapperView = 0;

    if ((v4 & 0x80000000000000) == 0)
      return;
LABEL_11:
    if ((*((_BYTE *)&self->_tableFlags + 15) & 2) == 0)
      -[UITableView _removeAndResetAllVisibleCells](self, "_removeAndResetAllVisibleCells");
    return;
  }
  if (!wrapperView)
  {
    -[UITableView _frameForWrapper](self, "_frameForWrapper");
    v11 = -[UITableViewWrapperView initWithFrame:]([UITableViewWrapperView alloc], "initWithFrame:", v7, v8, v9, v10);
    v12 = self->_wrapperView;
    self->_wrapperView = v11;

    -[UIScrollView _setAutomaticContentOffsetAdjustmentEnabled:](self->_wrapperView, "_setAutomaticContentOffsetAdjustmentEnabled:", 0);
    -[UIView setEdgesPreservingSuperviewLayoutMargins:](self->_wrapperView, "setEdgesPreservingSuperviewLayoutMargins:", 10);
    -[UIView setEdgesInsettingLayoutMarginsFromSafeArea:](self->_wrapperView, "setEdgesInsettingLayoutMarginsFromSafeArea:", -[UIView edgesInsettingLayoutMarginsFromSafeArea](self->_wrapperView, "edgesInsettingLayoutMarginsFromSafeArea") & 0xA);
    -[UIView setLayoutMargins:](self->_wrapperView, "setLayoutMargins:", 0.0, 0.0, 0.0, 0.0);
    -[UIScrollView setShowsHorizontalScrollIndicator:](self->_wrapperView, "setShowsHorizontalScrollIndicator:", 0);
    -[UIScrollView setShowsVerticalScrollIndicator:](self->_wrapperView, "setShowsVerticalScrollIndicator:", 0);
    -[UIScrollView setScrollsToTop:](self->_wrapperView, "setScrollsToTop:", 0);
    -[UIView setInsetsLayoutMarginsFromSafeArea:](self->_wrapperView, "setInsetsLayoutMarginsFromSafeArea:", -[UIView insetsLayoutMarginsFromSafeArea](self, "insetsLayoutMarginsFromSafeArea"));
    -[UIScrollView setScrollEnabled:](self->_wrapperView, "setScrollEnabled:", 0);
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
      -[UIScrollView _touchesDelayedGestureRecognizer](self->_wrapperView, "_touchesDelayedGestureRecognizer");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setEnabled:", 1);

    }
    -[UITableView _updateWrapperContentInset](self, "_updateWrapperContentInset");
    v14 = *((_QWORD *)&self->_tableFlags + 2);
    -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", self->_wrapperView, 1);
    -[UITableView _updateWrapperClipping](self, "_updateWrapperClipping");
    if ((v14 & 0x80000000000000) != 0)
      goto LABEL_11;
  }
}

- (BOOL)_shouldWrapCells
{
  BOOL v3;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  void *v10;

  if (!dyld_program_sdk_at_least()
    || -[UITableView _manuallyManagesSwipeUI](self, "_manuallyManagesSwipeUI")
    || -[UITableView _sectionContentInsetFollowsLayoutMargins](self, "_sectionContentInsetFollowsLayoutMargins"))
  {
    return 1;
  }
  -[UITableView _sectionContentInset](self, "_sectionContentInset");
  v3 = 1;
  if (v8 == 0.0 && v5 == 0.0 && v7 == 0.0 && v6 == 0.0)
  {
    -[UIView traitCollection](self, "traitCollection");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "userInterfaceIdiom") != 3)
    {
      -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v10 != 0;

    }
  }
  return v3;
}

- (BOOL)_manuallyManagesSwipeUI
{
  return *((unsigned __int8 *)&self->_tableFlags + 23) >> 7;
}

- (id)_preparedCells
{
  void *v3;
  NSMutableArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _UITableViewSubviewManager *subviewManager;
  id v10;
  _QWORD v12[4];
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3690]), "initWithOptions:capacity:", 512, -[NSMutableArray count](self->_visibleCells, "count"));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = self->_visibleCells;
  v5 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v15;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "addObject:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v8++));
      }
      while (v6 != v8);
      v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v6);
  }

  subviewManager = self->_subviewManager;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __29__UITableView__preparedCells__block_invoke;
  v12[3] = &unk_1E16E40F8;
  v10 = v3;
  v13 = v10;
  if (subviewManager)
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](subviewManager->_prefetchedCells, "enumerateKeysAndObjectsUsingBlock:", v12);
  if (self->_focusedCell && self->_focusedViewType == 1)
    objc_msgSend(v10, "addObject:");
  if (self->_firstResponderView && self->_firstResponderViewType == 1)
    objc_msgSend(v10, "addObject:");

  return v10;
}

- (void)_updateMarginWidthForVisibleViewsForceLayout:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t k;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t m;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE v47[128];
  _BYTE v48[128];
  _BYTE v49[128];
  uint64_t v50;

  v3 = a3;
  v50 = *MEMORY[0x1E0C80C00];
  v5 = (void *)-[NSMutableArray copy](self->_visibleCells, "copy");
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v43;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v43 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * i);
        -[UITableView _defaultLeadingCellMarginWidth](self, "_defaultLeadingCellMarginWidth");
        objc_msgSend(v11, "_setDefaultLeadingMarginWidth:");
        -[UITableView _defaultTrailingCellMarginWidth](self, "_defaultTrailingCellMarginWidth");
        objc_msgSend(v11, "_setDefaultTrailingCellMarginWidth:");
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
    }
    while (v8);
  }

  -[UITableView _visibleHeaderFooterViews](self, "_visibleHeaderFooterViews");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v39;
    do
    {
      for (j = 0; j != v14; ++j)
      {
        if (*(_QWORD *)v39 != v15)
          objc_enumerationMutation(v12);
        v17 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * j);
        if (_IsKindOfUITableViewHeaderFooterView(v17))
        {
          v18 = v17;
          -[UITableView _headerFooterLeadingMarginWidthIsHeader:isFirstSection:](self, "_headerFooterLeadingMarginWidthIsHeader:isFirstSection:", objc_msgSend(v18, "sectionHeader"), objc_msgSend(v18, "_isTopHeader"));
          objc_msgSend(v18, "_setMarginWidth:");
          -[UITableView _headerFooterTrailingMarginWidth](self, "_headerFooterTrailingMarginWidth");
          objc_msgSend(v18, "_setRightMarginWidth:");

        }
      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
    }
    while (v14);
  }
  if (v3)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v19 = v6;
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v34, v47, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v35;
      do
      {
        for (k = 0; k != v21; ++k)
        {
          if (*(_QWORD *)v35 != v22)
            objc_enumerationMutation(v19);
          objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * k), "_tableViewDidUpdateMarginWidth");
        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v34, v47, 16);
      }
      while (v21);
    }

    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v24 = v12;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v30, v46, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v31;
      do
      {
        for (m = 0; m != v26; ++m)
        {
          if (*(_QWORD *)v31 != v27)
            objc_enumerationMutation(v24);
          v29 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * m);
          if (_IsKindOfUITableViewHeaderFooterView(v29))
            objc_msgSend(v29, "_tableViewDidUpdateMarginWidth", (_QWORD)v30);
        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v30, v46, 16);
      }
      while (v26);
    }

  }
}

- (id)_visibleHeaderFooterViews
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  UITableViewRowData *rowData;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  uint64_t v11;
  uint64_t v12;
  NSMutableDictionary *visibleHeaderViews;
  id v14;
  _QWORD v16[7];

  v3 = -[NSMutableDictionary count](self->_visibleHeaderViews, "count");
  v4 = -[NSMutableDictionary count](self->_visibleFooterViews, "count") + v3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    rowData = self->_rowData;
    -[UITableView _visibleBounds](self, "_visibleBounds");
    v11 = -[UITableViewRowData sectionsInRect:]((uint64_t)rowData, v7, v8, v9, v10);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __40__UITableView__visibleHeaderFooterViews__block_invoke;
    v16[3] = &unk_1E16E3E58;
    v16[5] = v11;
    v16[6] = v12;
    v16[4] = v5;
    visibleHeaderViews = self->_visibleHeaderViews;
    v14 = v5;
    __40__UITableView__visibleHeaderFooterViews__block_invoke((uint64_t)v16, visibleHeaderViews);
    __40__UITableView__visibleHeaderFooterViews__block_invoke((uint64_t)v16, self->_visibleFooterViews);

  }
  return v5;
}

- (void)noteNumberOfRowsChanged
{
  if (self->_tableReloadingSuspendedCount < 2)
  {
    -[UITableView _setRowCount:](self, "_setRowCount:", 0x7FFFFFFFFFFFFFFFLL);
    -[UITableView _updateRowData](self, "_updateRowData");
    -[UITableView _setRowCount:](self, "_setRowCount:", -[UITableViewRowData numberOfRows]((uint64_t)self->_rowData));
    -[UITableView _updateContentSize](self, "_updateContentSize");
    -[UITableView _updateIndex](self, "_updateIndex");
    -[UITableView _numberOfRowsDidChange](self, "_numberOfRowsDidChange");
  }
  else
  {
    *((_QWORD *)&self->_tableFlags + 1) |= 0x80000000000000uLL;
  }
}

- (void)_setRowCount:(unint64_t)a3
{
  if (a3 != 0x7FFFFFFFFFFFFFFFLL)
    -[UITableViewCountView setCount:](self->_countLabel, "setCount:", -[UITableView _countStringRowCount](self, "_countStringRowCount"));
}

- (void)_updateRowData
{
  UITableViewRowData *v3;
  UITableViewRowData *rowData;
  NSMutableArray *visibleCells;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];

  if (!self->_rowData)
  {
    v3 = (UITableViewRowData *)-[UITableViewRowData initWithTableView:]([UITableViewRowData alloc], self);
    rowData = self->_rowData;
    self->_rowData = v3;

  }
  visibleCells = self->_visibleCells;
  v6 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __29__UITableView__updateRowData__block_invoke;
  v8[3] = &unk_1E16E3BA8;
  v8[4] = self;
  -[NSMutableArray enumerateObjectsUsingBlock:](visibleCells, "enumerateObjectsUsingBlock:", v8);
  *((_QWORD *)&self->_tableFlags + 2) &= ~0x20000000000uLL;
  -[UITableViewRowData invalidateAllSections]((uint64_t)self->_rowData);
  if ((*(_QWORD *)&self->_tableFlags & 0x100000000) != 0)
  {
    if ((*((_QWORD *)&self->_tableFlags + 1) & 0x7000000000000) != 0)
      -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
  }
  else
  {
    v7[0] = v6;
    v7[1] = 3221225472;
    v7[2] = __29__UITableView__updateRowData__block_invoke_2;
    v7[3] = &unk_1E16B1B28;
    v7[4] = self;
    +[UIView _performSystemAppearanceModifications:](UIView, "_performSystemAppearanceModifications:", v7);
  }
  -[UITableView _adjustReusableTableCells](self, "_adjustReusableTableCells");
}

- (void)_adjustReusableTableCells
{
  NSMutableDictionary *reusableTableCells;
  NSMutableDictionary *v4;

  reusableTableCells = self->_reusableTableCells;
  if (self->_rowData)
  {
    if (reusableTableCells)
      return;
    v4 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    reusableTableCells = self->_reusableTableCells;
  }
  else
  {
    if (!reusableTableCells)
      return;
    v4 = 0;
  }
  self->_reusableTableCells = v4;

}

- (unint64_t)_countStringRowCount
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *((_QWORD *)&self->_tableFlags + 2) & 0xFLL;
  v3 = -[UITableViewRowData numberOfRows]((uint64_t)self->_rowData);
  if ((unint64_t)v3 >= v2)
    return (unint64_t)v3 - v2;
  else
    return 0;
}

- (void)_updateRowDataIfNeeded
{
  if (self->_rowData)
    -[UITableView _updateRowData](self, "_updateRowData");
}

- (void)_updateWrapperClipping
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)&self->_tableFlags + 2);
  if ((v2 & 0x40000000000000) != 0)
  {
    v3 = 1;
    if ((v2 & 0x2000000000000000) == 0 && self->_updateAnimationCount <= 0)
    {
      v4 = (v2 >> 62) & 1;
      if (self->_swipeToDeleteCell)
        v3 = 1;
      else
        v3 = v4;
    }
    -[UIView setClipsToBounds:](self->_wrapperView, "setClipsToBounds:", v3);
  }
}

- (void)_cancelCellReorder:(BOOL)a3
{
  void *v4;
  NSIndexPath *v5;
  void *v6;
  _UITableViewReorderingSupport *v7;

  -[UITableView _reorderingIndexPath](self, "_reorderingIndexPath", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v7 = self->_reorderingSupport;
    -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
    -[UITableViewRowData addGapAtIndexPath:]((uint64_t)self->_rowData, v7->_initialIndexPath);
    *((_BYTE *)v7 + 32) |= 8u;
    v5 = v7->_initialIndexPath;
    -[UITableView _endReorderingForCell:wasCancelled:animated:](self, "_endReorderingForCell:wasCancelled:animated:", v7->_reorderedCell, 1, 0);
    if ((*((_BYTE *)&self->_tableFlags + 9) & 1) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "tableView:didCancelReorderingRowAtIndexPath:", self, v5);

    }
  }
}

- (void)_removeAndResetAllVisibleCells
{
  -[UITableView _resetSwipeActionController](self, "_resetSwipeActionController");
  -[UITableView _removeAllVisibleCells](self, "_removeAllVisibleCells");
}

- (void)_setCellsSelfSize:(BOOL)a3
{
  uint64_t v4;

  v4 = 16;
  if (!a3)
    v4 = 0;
  *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFFFEFLL | v4;
  -[UITableView _initializeTentativeViewContainers](self, "_initializeTentativeViewContainers");
  -[UITableView _setupDefaultHeights](self, "_setupDefaultHeights");
}

- (void)dealloc
{
  UISwipeActionController *swipeActionController;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  UIView *tableHeaderBackgroundView;
  objc_super v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  swipeActionController = self->_swipeActionController;
  self->_swipeActionController = 0;

  *((_QWORD *)&self->_tableFlags + 3) |= 0x100uLL;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  v5 = WeakRetained;
  if (WeakRetained)
    objc_setAssociatedObject(WeakRetained, (char *)&self->super.super.super.super.isa + 2, 0, (void *)1);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = CFSTR("UIContentSizeCategoryDidChangeNotification");
  v10[1] = 0x1E1761B80;
  v10[2] = CFSTR("UIAccessibilityDarkerSystemColorsStatusDidChangeNotification");
  v10[3] = CFSTR("UIApplicationDidReceiveMemoryWarningNotification");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSNotificationCenter _uiRemoveObserver:names:](v6, self, v7);

  if (self->_reorderingSupport)
    -[UITableView _stopAutoscrollTimer](self, "_stopAutoscrollTimer");
  tableHeaderBackgroundView = self->_tableHeaderBackgroundView;
  self->_tableHeaderBackgroundView = 0;

  if (self->_indexOverlayTimer)
    -[UITableView _stopIndexOverlayTimer](self, "_stopIndexOverlayTimer");
  if (self->_indexOverlayIndicatorEventIgnoreTimer)
    -[UITableView _stopIgnoringWheelEventsOnIndexOverlayIndicator:](self, "_stopIgnoringWheelEventsOnIndexOverlayIndicator:", 0);
  -[UITableView _tearDownIndexOverlayViews](self, "_tearDownIndexOverlayViews");
  v9.receiver = self;
  v9.super_class = (Class)UITableView;
  -[UIScrollView dealloc](&v9, sel_dealloc);
}

- (void)_didChangeFromIdiom:(int64_t)a3 onScreen:(id)a4 traverseHierarchy:(BOOL)a5
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  UILongPressGestureRecognizer *v15;
  UILongPressGestureRecognizer *upArrowLongPressGestureRecognizer;
  UILongPressGestureRecognizer *v17;
  UILongPressGestureRecognizer *downArrowLongPressGestureRecognizer;
  UITapGestureRecognizer *v19;
  UITapGestureRecognizer *upArrowTapGestureRecognizer;
  UITapGestureRecognizer *v21;
  UITapGestureRecognizer *downArrowTapGestureRecognizer;
  objc_super v23;

  v23.receiver = self;
  v23.super_class = (Class)UITableView;
  -[UIScrollView _didChangeFromIdiom:onScreen:traverseHierarchy:](&v23, sel__didChangeFromIdiom_onScreen_traverseHierarchy_, a3, a4, a5);
  -[UITableView _updateConstants](self, "_updateConstants");
  -[UIView _screen](self, "_screen");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "_userInterfaceIdiom");

  if (v7 == 3)
  {
    -[UIView window](self, "window");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_screen");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xF7FFFFFFFFFFFFFFLL | ((unint64_t)(objc_msgSend(v10, "integerValue") != 2) << 59);

    self->_currentIndexTitleIndex = -[UITableView _currentSectionIndexTitleIndex](self, "_currentSectionIndexTitleIndex");
    -[UITableView _configureIndexOverlayIndicatorViewIfNecessary](self, "_configureIndexOverlayIndicatorViewIfNecessary");
    -[UITableView _configureIndexOverlaySelectionViewIfNecessary](self, "_configureIndexOverlaySelectionViewIfNecessary");
    -[UIView window](self, "window");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "_screen");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "_capabilityForKey:", CFSTR("UIScreenCapabilityInteractionModelsKey"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "integerValue");

    if ((v14 & 2) != 0)
    {
      if (!self->_upArrowLongPressGestureRecognizer)
      {
        v15 = -[UILongPressGestureRecognizer initWithTarget:action:]([UILongPressGestureRecognizer alloc], "initWithTarget:action:", self, sel__upArrowLongPress_);
        upArrowLongPressGestureRecognizer = self->_upArrowLongPressGestureRecognizer;
        self->_upArrowLongPressGestureRecognizer = v15;

        -[UIGestureRecognizer setAllowedPressTypes:](self->_upArrowLongPressGestureRecognizer, "setAllowedPressTypes:", &unk_1E1A94CB8);
        -[UIView addGestureRecognizer:](self, "addGestureRecognizer:", self->_upArrowLongPressGestureRecognizer);
      }
      if (!self->_downArrowLongPressGestureRecognizer)
      {
        v17 = -[UILongPressGestureRecognizer initWithTarget:action:]([UILongPressGestureRecognizer alloc], "initWithTarget:action:", self, sel__downArrowLongPress_);
        downArrowLongPressGestureRecognizer = self->_downArrowLongPressGestureRecognizer;
        self->_downArrowLongPressGestureRecognizer = v17;

        -[UIGestureRecognizer setAllowedPressTypes:](self->_downArrowLongPressGestureRecognizer, "setAllowedPressTypes:", &unk_1E1A94CD0);
        -[UIView addGestureRecognizer:](self, "addGestureRecognizer:", self->_downArrowLongPressGestureRecognizer);
      }
      if (!self->_upArrowTapGestureRecognizer)
      {
        v19 = -[UITapGestureRecognizer initWithTarget:action:]([UITapGestureRecognizer alloc], "initWithTarget:action:", self, sel__upArrowTap_);
        upArrowTapGestureRecognizer = self->_upArrowTapGestureRecognizer;
        self->_upArrowTapGestureRecognizer = v19;

        -[UITapGestureRecognizer setAllowedPressTypes:](self->_upArrowTapGestureRecognizer, "setAllowedPressTypes:", &unk_1E1A94CE8);
        -[UIView addGestureRecognizer:](self, "addGestureRecognizer:", self->_upArrowTapGestureRecognizer);
      }
      if (!self->_downArrowTapGestureRecognizer)
      {
        v21 = -[UITapGestureRecognizer initWithTarget:action:]([UITapGestureRecognizer alloc], "initWithTarget:action:", self, sel__downArrowTap_);
        downArrowTapGestureRecognizer = self->_downArrowTapGestureRecognizer;
        self->_downArrowTapGestureRecognizer = v21;

        -[UITapGestureRecognizer setAllowedPressTypes:](self->_downArrowTapGestureRecognizer, "setAllowedPressTypes:", &unk_1E1A94D00);
        -[UIView addGestureRecognizer:](self, "addGestureRecognizer:", self->_downArrowTapGestureRecognizer);
      }
    }
  }
  else
  {
    -[UITableView _tearDownIndexOverlayViews](self, "_tearDownIndexOverlayViews");
  }
}

- (void)_tearDownIndexOverlayViews
{
  _UICollectionTableIndexOverlayIndicatorView *indexOverlayIndicatorView;
  _UICollectionTableIndexOverlaySelectionView *indexOverlaySelectionView;

  -[UIView removeFromSuperview](self->_indexOverlayIndicatorView, "removeFromSuperview");
  indexOverlayIndicatorView = self->_indexOverlayIndicatorView;
  self->_indexOverlayIndicatorView = 0;

  -[UIView removeFromSuperview](self->_indexOverlaySelectionView, "removeFromSuperview");
  indexOverlaySelectionView = self->_indexOverlaySelectionView;
  self->_indexOverlaySelectionView = 0;

}

- (void)_updateConstants
{
  UITableConstants *v3;
  UITableConstants *v4;
  UITableConstants *constants;
  UITableConstants *v6;

  v3 = self->_constants;
  -[UITableView _resolvedTableConstants](self, "_resolvedTableConstants");
  v4 = (UITableConstants *)objc_claimAutoreleasedReturnValue();
  constants = self->_constants;
  self->_constants = v4;

  v6 = self->_constants;
  if (v3 != v6)
  {
    -[UITableView _updateConstantsForVisibleCellsAndHeaderFooterViews](self, "_updateConstantsForVisibleCellsAndHeaderFooterViews");
    -[UITableView _rebuildGeometry](self, "_rebuildGeometry");
  }
}

- (void)_setupTableViewCommon
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  char *v4;
  void *v5;
  _UITableViewSubviewManager *v6;
  _UITableViewSubviewManager *subviewManager;
  NSMutableArray *v8;
  NSMutableArray *visibleCells;
  NSMutableDictionary *v10;
  NSMutableDictionary *visibleHeaderViews;
  NSMutableDictionary *v12;
  NSMutableDictionary *visibleFooterViews;
  NSMutableArray *v14;
  NSMutableArray *highlightedIndexPaths;
  NSMutableArray *v16;
  NSMutableArray *selectedIndexPaths;
  _BOOL4 v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  void *v35;
  UISwipeActionController *v36;
  UISwipeActionController *swipeActionController;
  UITableConstants *v38;
  UITableConstants *constants;
  void *v40;
  void *v41;
  _UIDragSnappingFeedbackGenerator *v42;
  _UIDragSnappingFeedbackGenerator *reorderFeedbackGenerator;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  NSArray *v53;
  NSArray *sectionIndexTitlesForTableView;
  int v55;
  uint64_t v56;
  void *v57;
  void *v58;
  _UISelectionInteraction *v59;
  _UISelectionInteraction *selectionInteraction;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];

  v63[2] = *MEMORY[0x1E0C80C00];
  p_tableFlags = &self->_tableFlags;
  if ((*((_QWORD *)&self->_tableFlags + 1) & 0x600000000000) == 0x400000000000)
  {
    v4 = (char *)&self->_tableFlags + 16;
    *((_QWORD *)&self->_tableFlags + 3) |= 0x4000uLL;
  }
  else
  {
    -[UIView traitCollection](self, "traitCollection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (char *)p_tableFlags + 16;
    *((_QWORD *)p_tableFlags + 3) = *((_QWORD *)p_tableFlags + 3) & 0xFFFFFFFFFFFFBFFFLL | ((unint64_t)(objc_msgSend(v5, "userInterfaceIdiom") == 6) << 14);

  }
  -[UITableView _setUpContentFocusContainerGuide](self, "_setUpContentFocusContainerGuide");
  -[UITableView _removeTableViewGestureRecognizers](self, "_removeTableViewGestureRecognizers");
  v6 = (_UITableViewSubviewManager *)-[_UITableViewSubviewManager initWithTableView:]([_UITableViewSubviewManager alloc], self);
  subviewManager = self->_subviewManager;
  self->_subviewManager = v6;

  v8 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  visibleCells = self->_visibleCells;
  self->_visibleCells = v8;

  v10 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  visibleHeaderViews = self->_visibleHeaderViews;
  self->_visibleHeaderViews = v10;

  v12 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  visibleFooterViews = self->_visibleFooterViews;
  self->_visibleFooterViews = v12;

  v14 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  highlightedIndexPaths = self->_highlightedIndexPaths;
  self->_highlightedIndexPaths = v14;

  v16 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  selectedIndexPaths = self->_selectedIndexPaths;
  self->_selectedIndexPaths = v16;

  *((_QWORD *)p_tableFlags + 1) |= 0x200000000000000uLL;
  *((_QWORD *)p_tableFlags + 3) |= 0x20000uLL;
  v18 = -[UIScrollView showsHorizontalScrollIndicator](self, "showsHorizontalScrollIndicator");
  v19 = 0x2000000;
  if (!v18)
    v19 = 0;
  *((_QWORD *)p_tableFlags + 2) = *((_QWORD *)p_tableFlags + 2) & 0xFFFFFFFFFDFFFFFFLL | v19;
  v20 = -[UIScrollView showsVerticalScrollIndicator](self, "showsVerticalScrollIndicator");
  v21 = 0x4000000;
  if (!v20)
    v21 = 0;
  *((_QWORD *)p_tableFlags + 2) = *((_QWORD *)p_tableFlags + 2) & 0xFFFFFFFFFBFFFFFFLL | v21;
  self->_sectionIndexMinimumDisplayRowCount = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&self->_sectionContentInset.top = _Q0;
  *(_OWORD *)&self->_sectionContentInset.bottom = _Q0;
  self->_sectionCornerRadius = -1.0;
  self->_topPadding = -1.0;
  self->_bottomPadding = -1.0;
  self->_sectionHeaderTopPadding = -1.0;
  *((_QWORD *)p_tableFlags + 2) |= 0x2000000000000uLL;
  *(_OWORD *)&self->_separatorInset.top = _Q0;
  *(_OWORD *)&self->_separatorInset.bottom = _Q0;
  -[UIView traitCollection](self, "traitCollection");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v27, "userInterfaceIdiom") == 6 && (*((_BYTE *)p_tableFlags + 13) & 0x60) == 0)
    v28 = _UISupportsVisionDefaultContentHuggingSectionHeaders();
  else
    v28 = 0;

  -[UITableView _setSupplementarySectionHeadersHugContent:](self, "_setSupplementarySectionHeadersHugContent:", v28);
  if (dyld_program_sdk_at_least())
    v29 = dyld_program_sdk_at_least() ^ 1;
  else
    v29 = 0;
  -[UITableView setCellLayoutMarginsFollowReadableWidth:](self, "setCellLayoutMarginsFollowReadableWidth:", v29);
  *((_QWORD *)v4 + 1) |= 0x2000000uLL;
  -[UITableView _setSeparatorInsetIsRelativeToCellEdges:](self, "_setSeparatorInsetIsRelativeToCellEdges:", dyld_program_sdk_at_least());
  v30 = dyld_program_sdk_at_least();
  v31 = 0x2000000000;
  if (!v30)
    v31 = 0;
  *((_QWORD *)v4 + 1) = *((_QWORD *)v4 + 1) & 0xFFFFFFDFFFFFFFFFLL | v31;
  v32 = _UISupportsIntrinsicContentSizeInvalidation();
  v33 = 0x8000000000;
  if (!v32)
    v33 = 0;
  *((_QWORD *)v4 + 1) = *((_QWORD *)v4 + 1) & 0xFFFFFE7FFFFFFFFFLL | v33;
  -[UITableView _updateWrapperView](self, "_updateWrapperView");
  -[UIView traitCollection](self, "traitCollection");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  +[UISwipeActionVisualStyleProvider visualStyleForIdiom:](UISwipeActionVisualStyleProvider, "visualStyleForIdiom:", objc_msgSend(v34, "userInterfaceIdiom"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  v36 = -[UISwipeActionController initWithSwipeActionHost:style:]([UISwipeActionController alloc], "initWithSwipeActionHost:style:", self, objc_msgSend(v35, "defaultSwipeActionUIStyleForUITableViewStyle:", -[UITableView style](self, "style")));
  swipeActionController = self->_swipeActionController;
  self->_swipeActionController = v36;

  -[UITableView _resolvedTableConstants](self, "_resolvedTableConstants");
  v38 = (UITableConstants *)objc_claimAutoreleasedReturnValue();
  constants = self->_constants;
  self->_constants = v38;

  -[UITableView _defaultFillerRowHeight](self, "_defaultFillerRowHeight");
  -[UITableView setFillerRowHeight:](self, "setFillerRowHeight:");
  +[_UIDragSnappingFeedbackGeneratorConfiguration defaultConfiguration](_UIDragSnappingFeedbackGeneratorConfiguration, "defaultConfiguration");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "tweakedConfigurationForClass:usage:", objc_opt_class(), CFSTR("reorder"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  v42 = -[UIFeedbackGenerator initWithConfiguration:view:]([_UIDragSnappingFeedbackGenerator alloc], "initWithConfiguration:view:", v41, self);
  reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
  self->_reorderFeedbackGenerator = v42;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "addObserver:selector:name:object:", self, sel__languageChanged, 0x1E1761B80, UIApp);
  objc_msgSend(v44, "addObserver:selector:name:object:", self, sel__darkenedSystemColorsChanged, CFSTR("UIAccessibilityDarkerSystemColorsStatusDidChangeNotification"), 0);
  if (dyld_program_sdk_at_least())
  {
    v63[0] = 0x1E1A99540;
    v63[1] = 0x1E1A995A0;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v63, 2);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = -[UIView _registerForTraitTokenChanges:withTarget:action:](self, "_registerForTraitTokenChanges:withTarget:action:", v45, self, sel__systemTextSizeChanged);

  }
  else
  {
    objc_msgSend(v44, "addObserver:selector:name:object:", self, sel__systemTextSizeChanged, CFSTR("UIContentSizeCategoryDidChangeNotification"), 0);
  }
  v62 = 0x1E1A99498;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v62, 1);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = -[UIView _registerForTraitTokenChanges:withTarget:action:](self, "_registerForTraitTokenChanges:withTarget:action:", v47, self, sel__handleUserInterfaceIdiomChange);

  v61 = 0x1E1A99690;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v61, 1);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = -[UIView _registerForTraitTokenChanges:withTarget:action:](self, "_registerForTraitTokenChanges:withTarget:action:", v49, self, sel__updateVerticalScrollIndicatorVisibility);

  -[UITableView _updateVerticalScrollIndicatorVisibility](self, "_updateVerticalScrollIndicatorVisibility");
  _UITableTraitsAffectingSelectionIsKey();
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v51, "count"))
    v52 = -[UIView _registerForTraitTokenChanges:withTarget:action:](self, "_registerForTraitTokenChanges:withTarget:action:", v51, self, sel__updateSelectionIsKey);
  v53 = (NSArray *)objc_opt_new();
  sectionIndexTitlesForTableView = self->_sectionIndexTitlesForTableView;
  self->_sectionIndexTitlesForTableView = v53;

  v55 = dyld_program_sdk_at_least();
  v56 = 16;
  if (!v55)
    v56 = 0;
  *((_QWORD *)v4 + 1) = *((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFEFLL | v56;
  -[UITableView _initializeTentativeViewContainers](self, "_initializeTentativeViewContainers");
  +[UIView appearance](UITableView, "appearance");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "_beginListeningForAppearanceEventsForSetter:", sel_setBackgroundColor_);
  objc_msgSend(v57, "_beginListeningForAppearanceEventsForSetter:", sel_setSeparatorColor_);
  objc_msgSend(v57, "_beginListeningForAppearanceEventsForSetter:", sel_setSeparatorStyle_);
  -[UIScrollView _setContentScrollsAlongXAxis:](self, "_setContentScrollsAlongXAxis:", 0);
  -[UIScrollView _setContentScrollsAlongYAxis:](self, "_setContentScrollsAlongYAxis:", 1);
  -[UITableView _setCachedSectionIndexBarInsets:](self, "_setCachedSectionIndexBarInsets:", 1.79769313e308, 1.79769313e308, 1.79769313e308, 1.79769313e308);
  if (dyld_program_sdk_at_least())
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "addObserver:selector:name:object:", self, sel__purgeReuseQueues, CFSTR("UIApplicationDidReceiveMemoryWarningNotification"), 0);

  }
  -[UITableView _updateListEnvironmentTraitOverrideWithSectionContentInsets:](self, "_updateListEnvironmentTraitOverrideWithSectionContentInsets:", 0.0, 0.0, 0.0, 0.0);
  -[UITableView _updateSelectionIsKey](self, "_updateSelectionIsKey");
  v59 = (_UISelectionInteraction *)objc_opt_new();
  -[_UISelectionInteraction setDelegate:](v59, "setDelegate:", self);
  -[_UISelectionInteraction setEnabled:](v59, "setEnabled:", 0);
  -[_UISelectionInteraction setSimulatePressesCallbacksForLegacyBehavior:](v59, "setSimulatePressesCallbacksForLegacyBehavior:", 1);
  -[UIView addInteraction:](self, "addInteraction:", v59);
  selectionInteraction = self->_selectionInteraction;
  self->_selectionInteraction = v59;

}

+ (void)_initializeForIdiom:(int64_t)a3
{
  void *v5;
  id v6;
  void *v7;

  if ((id)objc_opt_class() == a1)
  {
    v5 = (void *)__initializedIdioms;
    if (!__initializedIdioms)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0CB3788]);
      v7 = (void *)__initializedIdioms;
      __initializedIdioms = (uint64_t)v6;

      v5 = (void *)__initializedIdioms;
    }
    if ((objc_msgSend(v5, "containsIndex:", a3) & 1) == 0)
    {
      objc_msgSend(a1, "_setupIdiom:forTableViewStyle:includingBackground:", a3, 0, 1);
      objc_msgSend(a1, "_setupIdiom:forTableViewStyle:includingBackground:", a3, 1, 1);
      objc_msgSend(a1, "_setupIdiom:forTableViewStyle:includingBackground:", a3, 2, 1);
      objc_msgSend((id)__initializedIdioms, "addIndex:", a3);
    }
  }
}

+ (void)_setupIdiom:(int64_t)a3 forTableViewStyle:(int64_t)a4 includingBackground:(BOOL)a5
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  int64_t v18;
  BOOL v19;
  const __CFString *v20;
  void *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  +[UITraitCollection traitCollectionWithUserInterfaceIdiom:](UITraitCollection, "traitCollectionWithUserInterfaceIdiom:");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = _UIAppearanceContainerForUserInterfaceIdiom();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = CFSTR("_styleForAppearance");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v9;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIView appearanceMatchingProperties:whenContainedInInstancesOfClasses:](UITableView, "appearanceMatchingProperties:whenContainedInInstancesOfClasses:", v10, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  _UITableConstantsForTraitCollection(v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __65__UITableView__setupIdiom_forTableViewStyle_includingBackground___block_invoke;
  v15[3] = &unk_1E16C07C8;
  v19 = a5;
  v16 = v11;
  v17 = v12;
  v18 = a4;
  v13 = v12;
  v14 = v11;
  +[UIView _performSystemAppearanceModifications:](UIView, "_performSystemAppearanceModifications:", v15);

}

- (id)_resolvedTableConstants
{
  void *v2;
  void *v3;

  -[UIView traitCollection](self, "traitCollection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _UITableConstantsForTraitCollection(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)setCellLayoutMarginsFollowReadableWidth:(BOOL)cellLayoutMarginsFollowReadableWidth
{
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v6;
  NSMutableArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)&self->_tableFlags + 3);
  if (((((v3 & 0x2000) == 0) ^ cellLayoutMarginsFollowReadableWidth) & 1) == 0)
  {
    v4 = cellLayoutMarginsFollowReadableWidth;
    v6 = 0x2000;
    if (!cellLayoutMarginsFollowReadableWidth)
      v6 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v3 & 0xFFFFFFFFFFFFDFFFLL | v6;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = self->_visibleCells;
    v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v13 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "setLayoutMarginsFollowReadableWidth:", v4, (_QWORD)v12);
        }
        v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v9);
    }

    -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
    if (self)
      -[UIView _updateInferredLayoutMargins](self, "_updateInferredLayoutMargins");
  }
}

- (void)_updateSelectionIsKey
{
  _UITableUpdateSelectionIsKeyTraitOverride(self, (*((_QWORD *)&self->_tableFlags + 2) >> 22) & 1, -[UITableView selectionFollowsFocus](self, "selectionFollowsFocus"));
}

- (BOOL)selectionFollowsFocus
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = (unsigned __int16)*((_QWORD *)&self->_tableFlags + 2) >> 14;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __36__UITableView_selectionFollowsFocus__block_invoke;
  v4[3] = &unk_1E16B2268;
  v4[4] = self;
  return _UITriStateToBool_0(v2, v4);
}

- (void)_initializeTentativeViewContainers
{
  NSMutableDictionary *v3;
  NSMutableDictionary *tentativeCells;
  NSMutableDictionary *v5;
  NSMutableDictionary *tentativeHeaderViews;
  NSMutableDictionary *v7;
  NSMutableDictionary *tentativeFooterViews;

  if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    if (!self->_tentativeCells)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v3 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();
      tentativeCells = self->_tentativeCells;
      self->_tentativeCells = v3;

    }
    if (!self->_tentativeHeaderViews)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v5 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();
      tentativeHeaderViews = self->_tentativeHeaderViews;
      self->_tentativeHeaderViews = v5;

    }
    if (!self->_tentativeFooterViews)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v7 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();
      tentativeFooterViews = self->_tentativeFooterViews;
      self->_tentativeFooterViews = v7;

    }
  }
}

- (void)setFillerRowHeight:(CGFloat)fillerRowHeight
{
  if (fillerRowHeight < 0.0)
    fillerRowHeight = -1.0;
  if ((*((_BYTE *)&self->_tableFlags + 13) & 0x60) != 0)
    fillerRowHeight = 0.0;
  if (self->_fillerRowHeight != fillerRowHeight)
  {
    self->_fillerRowHeight = fillerRowHeight;
    if ((*((_BYTE *)&self->_tableFlags + 14) & 7) != 0)
      -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
  }
}

- (void)_updateVerticalScrollIndicatorVisibility
{
  void *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == 6)
  {
    -[UIView traitCollection](self, "traitCollection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "_hasSplitViewControllerContextPrimaryColumn");
    v7 = 0x4000000;
    if (v6)
      v7 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFBFFFFFFLL | v7;

    -[UITableView _updateShowScrollIndicatorsFlag](self, "_updateShowScrollIndicatorsFlag");
  }
}

- (void)_setUpContentFocusContainerGuide
{
  UIFocusContainerGuide *v3;
  UIFocusContainerGuide *contentFocusContainerGuide;
  UIFocusContainerGuide *v5;

  if (!self->_contentFocusContainerGuide)
  {
    v3 = objc_alloc_init(UIFocusContainerGuide);
    contentFocusContainerGuide = self->_contentFocusContainerGuide;
    self->_contentFocusContainerGuide = v3;

    -[UIView addLayoutGuide:](self, "addLayoutGuide:", self->_contentFocusContainerGuide);
    -[UILayoutGuide _setLockedToOwningView:](self->_contentFocusContainerGuide, "_setLockedToOwningView:", 1);
    -[UILayoutGuide setIdentifier:](self->_contentFocusContainerGuide, "setIdentifier:", CFSTR("UITableViewContentFocusContainerGuide"));
    v5 = self->_contentFocusContainerGuide;
    -[UIView bounds](self, "bounds");
    -[UILayoutGuide _setManualLayoutFrame:](v5, "_setManualLayoutFrame:");
  }
}

- (void)_setSeparatorInsetIsRelativeToCellEdges:(BOOL)a3
{
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v6;
  NSMutableArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)&self->_tableFlags + 3);
  if (((((v3 & 0x8000) == 0) ^ a3) & 1) == 0)
  {
    v4 = a3;
    v6 = 0x8000;
    if (!a3)
      v6 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v3 & 0xFFFFFFFFFFFF7FFFLL | v6;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = self->_visibleCells;
    v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v13 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "_setSeparatorInsetIsRelativeToCellEdges:", v4, (_QWORD)v12);
        }
        v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v9);
    }

    -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
  }
}

- (void)_removeTableViewGestureRecognizers
{
  UILongPressGestureRecognizer *upArrowLongPressGestureRecognizer;
  UILongPressGestureRecognizer *downArrowLongPressGestureRecognizer;
  UITapGestureRecognizer *upArrowTapGestureRecognizer;
  UITapGestureRecognizer *downArrowTapGestureRecognizer;

  -[UIView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_upArrowLongPressGestureRecognizer);
  upArrowLongPressGestureRecognizer = self->_upArrowLongPressGestureRecognizer;
  self->_upArrowLongPressGestureRecognizer = 0;

  -[UIView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_downArrowLongPressGestureRecognizer);
  downArrowLongPressGestureRecognizer = self->_downArrowLongPressGestureRecognizer;
  self->_downArrowLongPressGestureRecognizer = 0;

  -[UIView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_upArrowTapGestureRecognizer);
  upArrowTapGestureRecognizer = self->_upArrowTapGestureRecognizer;
  self->_upArrowTapGestureRecognizer = 0;

  -[UIView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_downArrowTapGestureRecognizer);
  downArrowTapGestureRecognizer = self->_downArrowTapGestureRecognizer;
  self->_downArrowTapGestureRecognizer = 0;

}

- (double)_defaultFillerRowHeight
{
  double result;
  int v3;

  result = 0.0;
  if ((*((_BYTE *)&self->_tableFlags + 13) & 0x60) == 0)
  {
    v3 = -[UITableConstants useChromelessSectionHeadersAndFootersForTableStyle:](self->_constants, "useChromelessSectionHeadersAndFootersForTableStyle:", 0, 0.0);
    result = -1.0;
    if (v3)
      return 0.0;
  }
  return result;
}

- (void)_stopAutoscrollTimer
{
  _UITableViewReorderingSupport *reorderingSupport;
  _UITableViewReorderingSupport *v4;
  NSTimer *autoscrollTimer;

  reorderingSupport = self->_reorderingSupport;
  if (reorderingSupport)
  {
    -[NSTimer invalidate](reorderingSupport->_autoscrollTimer, "invalidate");
    v4 = self->_reorderingSupport;
    autoscrollTimer = v4->_autoscrollTimer;
    v4->_autoscrollTimer = 0;

  }
}

- (void)_endCellAnimationsWithContext:(id)a3
{
  unint64_t v4;
  NSObject *v5;
  os_signpost_id_t v6;
  os_signpost_id_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  int v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  UIDecomposedReloadUpdateItem *v64;
  void *v65;
  id *v66;
  int v67;
  char v68;
  UIDecomposedReloadUpdateItem *v69;
  void *v70;
  id *v71;
  int v72;
  char v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  void *v91;
  void *v92;
  uint64_t v93;
  _BYTE *v94;
  void *v95;
  id v96;
  uint64_t v97;
  unint64_t i;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  int v103;
  int v104;
  void *v105;
  void *v106;
  void *v107;
  id v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  int j;
  uint64_t v115;
  void *v116;
  void *v117;
  id v118;
  int v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t k;
  _QWORD *v125;
  _QWORD *v126;
  char v127;
  void *v128;
  NSIndexPath *swipedIndexPath;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  void *v133;
  uint64_t v134;
  _QWORD *v135;
  void *v136;
  id v137;
  uint64_t v138;
  void *v139;
  id v140;
  int v141;
  void *v142;
  NSIndexPath *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  void *v147;
  void *v148;
  void *v149;
  _QWORD *v150;
  uint64_t v151;
  int v152;
  void *v153;
  uint64_t v154;
  _BYTE *v155;
  void *v156;
  id v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  void *v161;
  int v162;
  int v163;
  void *v164;
  void *v165;
  void *v166;
  BOOL v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  UITableViewRowData *rowData;
  int64_t numSections;
  int m;
  uint64_t v174;
  void *v175;
  void *v176;
  id v177;
  int v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t n;
  _QWORD *v184;
  _QWORD *v185;
  char v186;
  UITableViewRowData *v187;
  uint64_t v188;
  int v189;
  void *v190;
  uint64_t v191;
  _QWORD *v192;
  void *v193;
  id v194;
  uint64_t v195;
  void *v196;
  id v197;
  int v198;
  void *v199;
  void *v200;
  UITableViewRowData *v201;
  void *v202;
  void *v203;
  void *v204;
  UITableViewRowData *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  id v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  UITableViewRowData *v216;
  void *v217;
  void *v218;
  UITableViewRowData *v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  uint64_t v223;
  UITableViewRowData *v224;
  int64_t v225;
  uint64_t v226;
  char *v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  id *v232;
  void *v233;
  id v234;
  void *v235;
  int v236;
  int v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  char *v243;
  void *v244;
  void *v245;
  _QWORD *v246;
  void *v247;
  void *v248;
  void *v249;
  UITableViewRowData *v250;
  void *v251;
  void *v252;
  int64_t v253;
  _QWORD *v254;
  uint64_t ii;
  UITableViewRowData *v256;
  size_t v257;
  id v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int64_t v263;
  void *v264;
  uint64_t jj;
  uint64_t v266;
  void *v267;
  id v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t kk;
  uint64_t v274;
  void *v275;
  id v276;
  _UITableViewUpdateSupport *v277;
  UITableViewRowData *v278;
  _QWORD *v279;
  _QWORD *v280;
  uint64_t v281;
  id *v282;
  _UITableViewUpdateSupport *currentUpdate;
  _UITableViewUpdateSupport *v284;
  void *v285;
  NSString *v286;
  void *v287;
  void *v288;
  uint64_t v289;
  void *v290;
  uint64_t v291;
  unint64_t v292;
  NSObject *v293;
  unint64_t v294;
  NSObject *v295;
  int64_t v296;
  id v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  id v304;
  int64_t v305;
  int v306;
  _QWORD *v307;
  _QWORD *v308;
  void *v309;
  uint64_t v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  uint64_t v315;
  char v316;
  int v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  unint64_t v327;
  NSObject *v328;
  unint64_t v329;
  void *v330;
  id updateCompletionHandler;
  NSObject *v332;
  id v333;
  _UITableViewUpdateSupport *v334;
  _BOOL4 v335;
  uint64_t v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t mm;
  void *v342;
  unint64_t v343;
  NSObject *v344;
  os_signpost_id_t v345;
  os_signpost_id_t v346;
  NSObject *v347;
  uint64_t v348;
  unsigned int v349;
  void *v350;
  void *v351;
  void *v352;
  void *v353;
  id v354;
  id v355;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *v356;
  _QWORD *v357;
  char v358;
  char v359;
  id obj;
  int v361;
  void *v362;
  _QWORD *v363;
  void *v364;
  void *v365;
  _QWORD *v366;
  void *v367;
  char *v368;
  _QWORD *v369;
  int v370;
  void *v371;
  _QWORD *v372;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  UITableView *v377;
  _QWORD *v378;
  void *v379;
  uint64_t v380;
  void *v381;
  uint64_t v382;
  void *v383;
  uint64_t v384;
  void *v385;
  void *v386;
  void *v387;
  uint64_t v388;
  void *v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  _QWORD block[4];
  id v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  _BYTE v432[128];
  uint8_t v433[128];
  uint8_t buf[4];
  id v435;
  _BYTE v436[128];
  _BYTE v437[128];
  _BYTE v438[128];
  _BYTE v439[128];
  _BYTE v440[128];
  _BYTE v441[128];
  _BYTE v442[128];
  _BYTE v443[128];
  uint64_t v444;

  v444 = *MEMORY[0x1E0C80C00];
  v354 = a3;
  v4 = _MergedGlobals_329_0;
  if (!_MergedGlobals_329_0)
  {
    v4 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v4, (unint64_t *)&_MergedGlobals_329_0);
  }
  v5 = *(id *)(v4 + 8);
  v6 = os_signpost_id_make_with_pointer(*(os_log_t *)(v4 + 8), self);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = v6;
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_185066000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v7, "BatchUpdates", ", buf, 2u);
    }
  }

  v353 = (void *)_UISetCurrentFallbackEnvironment(self);
  -[_UITableViewDragController forceReset](self->_dragController, "forceReset");
  -[_UITableViewDropController beginIgnoringDrags](self->_dropController, "beginIgnoringDrags");
  v355 = (id)objc_claimAutoreleasedReturnValue();
  v8 = -[UITableView _isScrolledToTop](self, "_isScrolledToTop");
  -[UITableView _indexPathsForVisibleRowsUsingPresentationValues:](self, "_indexPathsForVisibleRowsUsingPresentationValues:", 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "firstObject");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  p_tableFlags = &self->_tableFlags;
  if ((*((_BYTE *)&self->_tableFlags + 24) & 4) == 0)
    -[UITableView _storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:](self, "_storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:", v10);
  -[UITableView _beginSuspendingUpdates](self, "_beginSuspendingUpdates");
  v12 = *MEMORY[0x1E0C9D628];
  v13 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v14 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v15 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  if (!self->_rowData)
    goto LABEL_500;
  if ((*((_BYTE *)&self->_tableFlags + 15) & 2) != 0
    && (*((_BYTE *)&self->_tableFlags + 27) & 0x20) != 0
    && dyld_program_sdk_at_least())
  {
    -[UITableView _resetUpdateItemArrays](self, "_resetUpdateItemArrays");
    v358 = 1;
    v359 = 0;
  }
  else
  {
    v358 = 0;
    v359 = 1;
  }
  v349 = v8;
  v356 = &self->_tableFlags;
  v352 = v10;
  -[UIView _focusSystem](self, "_focusSystem");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "focusedItem");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v351 = v17;
  _UIFocusEnvironmentContainingView(v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v18, "isDescendantOfView:", self))
  {
    objc_msgSend(v18, "bounds");
    objc_msgSend(v18, "convertRect:toView:", self);
    v12 = v19;
    v13 = v20;
    v14 = v21;
    v15 = v22;
  }
  v350 = v18;
  v357 = (_QWORD *)-[UITableViewRowData copy](self->_rowData, "copy");
  -[UITableView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "sortedArrayUsingSelector:");
  v364 = (void *)objc_claimAutoreleasedReturnValue();

  -[UITableView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "sortedArrayUsingSelector:");
  v362 = (void *)objc_claimAutoreleasedReturnValue();

  -[UITableView _sortedDeduplicatedReloadItems](self, "_sortedDeduplicatedReloadItems");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray sortedArrayUsingSelector:](self->_moveItems, "sortedArrayUsingSelector:", sel_compareIndexPathsForMoves_);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = (void *)objc_msgSend(v26, "mutableCopy");

  -[UITableView _sectionsWithSectionOperationsInUpdateItems:](self, self->_deleteItems);
  v386 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _sectionsWithSectionOperationsInUpdateItems:](self, self->_insertItems);
  v387 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = dyld_program_sdk_at_least();
  v428 = 0u;
  v429 = 0u;
  v430 = 0u;
  v431 = 0u;
  obj = v25;
  v377 = self;
  v379 = v27;
  v374 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v428, v443, 16);
  if (v374)
  {
    v370 = v28 ^ 1;
    v367 = *(void **)v429;
    do
    {
      v29 = 0;
      do
      {
        if (*(void **)v429 != v367)
          objc_enumerationMutation(obj);
        v30 = *(_QWORD *)(*((_QWORD *)&v428 + 1) + 8 * v29);
        if (v30)
          v31 = *(void **)(v30 + 24);
        else
          v31 = 0;
        v32 = v31;
        v33 = objc_msgSend(v32, "section");
        v384 = objc_msgSend(v32, "row");
        if (v30)
          v34 = *(_BYTE *)(v30 + 16) & 1;
        else
          v34 = 0;
        if (((v34 | v370) & 1) == 0)
        {
          -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v32);
          v35 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v35)
            goto LABEL_108;
        }
        v380 = v29;
        v426 = 0u;
        v427 = 0u;
        v424 = 0u;
        v425 = 0u;
        v36 = v364;
        v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v424, v442, 16);
        v388 = v384;
        v382 = v33;
        if (!v37)
          goto LABEL_59;
        v38 = v37;
        v39 = *(_QWORD *)v425;
        v388 = v384;
        do
        {
          v40 = 0;
          do
          {
            if (*(_QWORD *)v425 != v39)
              objc_enumerationMutation(v36);
            v41 = *(_QWORD *)(*((_QWORD *)&v424 + 1) + 8 * v40);
            if (v41)
              v42 = *(void **)(v41 + 24);
            else
              v42 = 0;
            v43 = v42;
            if (objc_msgSend(v43, "isEqual:", v32))
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v47, "handleFailureInMethod:object:file:lineNumber:description:", a2, v377, CFSTR("UITableView.m"), 2039, CFSTR("attempt to delete and reload the same index path (%@)"), v43);

            }
            v44 = objc_msgSend(v43, "section");
            if (v41)
            {
              if ((*(_BYTE *)(v41 + 16) & 1) != 0)
              {
                if (v44 == objc_msgSend(v32, "section"))
                  goto LABEL_53;
                v45 = *(_BYTE *)(v41 + 16) & 1;
              }
              else
              {
                v45 = 0;
              }
              LODWORD(v46) = v45 != 0;
            }
            else
            {
              LODWORD(v46) = 0;
            }
            if (v44 <= v33)
              v46 = v46;
            else
              v46 = 0;
            v33 -= v46;
            if ((!v30 || (*(_BYTE *)(v30 + 16) & 1) == 0) && (!v41 || (*(_BYTE *)(v41 + 16) & 1) == 0) && v44 == v33)
            {
              if ((objc_msgSend(v386, "containsIndex:", v44) & 1) == 0)
                v388 -= objc_msgSend(v43, "row") <= v388;
              v33 = v44;
            }
LABEL_53:

            ++v40;
          }
          while (v38 != v40);
          v48 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v424, v442, 16);
          v38 = v48;
        }
        while (v48);
LABEL_59:

        v422 = 0u;
        v423 = 0u;
        v420 = 0u;
        v421 = 0u;
        v49 = v362;
        v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v420, v441, 16);
        if (v50)
        {
          v51 = v50;
          v52 = *(_QWORD *)v421;
          do
          {
            v53 = 0;
            do
            {
              if (*(_QWORD *)v421 != v52)
                objc_enumerationMutation(v49);
              v54 = *(_QWORD *)(*((_QWORD *)&v420 + 1) + 8 * v53);
              if (v54)
                v55 = *(void **)(v54 + 24);
              else
                v55 = 0;
              v56 = v55;
              v57 = objc_msgSend(v56, "section");
              if (v54)
                LODWORD(v58) = *(_BYTE *)(v54 + 16) & 1;
              else
                LODWORD(v58) = 0;
              if (v57 <= v33)
                v58 = v58;
              else
                v58 = 0;
              v33 += v58;
              if ((!v30 || (*(_BYTE *)(v30 + 16) & 1) == 0)
                && (!v54 || (*(_BYTE *)(v54 + 16) & 1) == 0)
                && v57 == v33
                && (objc_msgSend(v387, "containsIndex:", v57) & 1) == 0)
              {
                v59 = objc_msgSend(v56, "row");
                v60 = v388;
                if (v59 <= v388)
                  v60 = v388 + 1;
                v388 = v60;
              }

              ++v53;
            }
            while (v51 != v53);
            v61 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v420, v441, 16);
            v51 = v61;
          }
          while (v61);
        }

        self = v377;
        if (v30)
        {
          v62 = *(_QWORD *)(v30 + 32);
          v27 = v379;
          if (v62 > 6)
            v63 = *(void **)(v30 + 32);
          else
            v63 = (void *)qword_186684530[v62];
        }
        else
        {
          v62 = 0;
          v63 = 0;
          v27 = v379;
        }
        v64 = [UIDecomposedReloadUpdateItem alloc];
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", v384, v382);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v66 = -[UIUpdateItem initWithAction:forIndexPath:animation:]((id *)&v64->super.super.isa, 1, v65, (void *)v62);

        if (v30)
        {
          v67 = (*(unsigned __int8 *)(v30 + 16) >> 1) & 1;
          if (v66)
            goto LABEL_92;
        }
        else
        {
          v67 = 0;
          if (v66)
          {
LABEL_92:
            if (v67)
              v68 = 2;
            else
              v68 = 0;
            *((_BYTE *)v66 + 16) = (_BYTE)v66[2] & 0xFD | v68;
          }
        }
        v69 = [UIDecomposedReloadUpdateItem alloc];
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", v388, v33);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = -[UIUpdateItem initWithAction:forIndexPath:animation:]((id *)&v69->super.super.isa, 0, v70, v63);

        if (v30)
          v72 = (*(unsigned __int8 *)(v30 + 16) >> 1) & 1;
        else
          v72 = 0;
        v29 = v380;
        if (v71)
        {
          if (v72)
            v73 = 2;
          else
            v73 = 0;
          *((_BYTE *)v71 + 16) = (_BYTE)v71[2] & 0xFD | v73;
        }
        if (v66)
          objc_storeWeak(v66 + 5, v71);
        if (v71)
          objc_storeWeak(v71 + 5, v66);
        -[NSMutableArray addObject:](v377->_deleteItems, "addObject:", v66);
        -[NSMutableArray addObject:](v377->_insertItems, "addObject:", v71);

LABEL_108:
        ++v29;
      }
      while (v29 != v374);
      v74 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v428, v443, 16);
      v374 = v74;
    }
    while (v74);
  }

  -[NSMutableArray sortedArrayUsingSelector:](self->_deleteItems, "sortedArrayUsingSelector:", sel_inverseCompareIndexPaths_);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = objc_msgSend(v75, "mutableCopy");

  -[NSMutableArray sortedArrayUsingSelector:](self->_insertItems, "sortedArrayUsingSelector:", sel_compareIndexPaths_);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = objc_msgSend(v77, "mutableCopy");

  v381 = (void *)v78;
  v383 = (void *)v76;
  -[UITableView _rebaseExistingShadowUpdatesIfNecessaryWithSortedInsertItems:sortedDeleteItems:sortedMoveItems:](self, "_rebaseExistingShadowUpdatesIfNecessaryWithSortedInsertItems:sortedDeleteItems:sortedMoveItems:", v78, v76, v27);
  -[UITableViewRowData invalidateAllSections]((uint64_t)self->_rowData);
  -[UITableViewRowData ensureAllSectionsAreValid](self->_rowData);
  if (objc_msgSend(v27, "count"))
  {
    v389 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3550]), "initWithCapacity:", objc_msgSend(v27, "count"));
    v385 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3550]), "initWithCapacity:", objc_msgSend(v27, "count"));
    v416 = 0u;
    v417 = 0u;
    v418 = 0u;
    v419 = 0u;
    v79 = v27;
    v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v416, v440, 16);
    if (v80)
    {
      v81 = v80;
      v82 = *(_QWORD *)v417;
      do
      {
        v83 = 0;
        do
        {
          if (*(_QWORD *)v417 != v82)
            objc_enumerationMutation(v79);
          v84 = *(_QWORD *)(*((_QWORD *)&v416 + 1) + 8 * v83);
          if (v84)
            v85 = *(void **)(v84 + 24);
          else
            v85 = 0;
          v86 = v85;
          objc_msgSend(v389, "addObject:", v86);

          -[UIRowMoveUpdateItem newIndexPath]((id *)v84);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v385, "addObject:", v87);

          ++v83;
        }
        while (v81 != v83);
        v88 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v416, v440, 16);
        v81 = v88;
      }
      while (v88);
    }

  }
  else
  {
    v385 = 0;
    v389 = 0;
  }
  if (objc_msgSend(v383, "count"))
  {
    v89 = 0;
    v90 = 0;
    v91 = v379;
    v92 = v383;
    while (1)
    {
      objc_msgSend(v92, "objectAtIndexedSubscript:", v89);
      v93 = objc_claimAutoreleasedReturnValue();
      v94 = (_BYTE *)v93;
      if (v93)
        v95 = *(void **)(v93 + 24);
      else
        v95 = 0;
      v96 = v95;
      v97 = objc_msgSend(v96, "section");
      if (v389 && (v94 && (v94[16] & 1) != 0 || (objc_msgSend(v389, "containsObject:", v96) & 1) != 0))
        LODWORD(i) = 0;
      else
        LODWORD(i) = objc_msgSend(v91, "count");
      if (objc_msgSend(v91, "count") > (unint64_t)(int)i)
      {
        for (i = (int)i; objc_msgSend(v91, "count") > i; ++i)
        {
          objc_msgSend(v91, "objectAtIndexedSubscript:", i);
          v99 = objc_claimAutoreleasedReturnValue();
          v100 = v99;
          if (v99)
            v101 = *(void **)(v99 + 24);
          else
            v101 = 0;
          v102 = v101;
          v103 = objc_msgSend(v102, "isEqual:", v96);

          if (v103)
          {
            if (v100)
              v104 = *(_BYTE *)(v100 + 16) & 1;
            else
              v104 = 0;
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            v106 = v105;
            if (v104)
              objc_msgSend(v105, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2137, CFSTR("attempt to perform a delete and a move from the same section (%ld)"), v97);
            else
              objc_msgSend(v105, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2140, CFSTR("attempt to perform a delete and a move from the same index path (%@)"), v96);

          }
          else
          {
            if (!v94 || (v94[16] & 1) == 0)
              goto LABEL_158;
            if (v100)
              v107 = *(void **)(v100 + 24);
            else
              v107 = 0;
            v108 = v107;
            v109 = v97 == objc_msgSend(v108, "section");

            v358 |= v109;
            v359 &= !v109;
          }
          v91 = v379;
LABEL_158:

        }
      }
      if (!v94 || (v94[16] & 1) == 0)
      {
        v110 = objc_msgSend(v96, "row");
        v111 = objc_msgSend(v96, "section");
        v112 = v111;
        v113 = v357;
        if (v357)
          v113 = (_QWORD *)v357[8];
        if (v111 >= (uint64_t)v113)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          v145 = v144;
          v146 = v357;
          if (v357)
            v146 = (_QWORD *)v357[8];
          objc_msgSend(v144, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2184, CFSTR("attempt to delete row %ld from section %ld, but there are only %ld sections before the update"), v110, v112, v146);

        }
        if (v110 >= -[UITableViewRowData numberOfRowsInSection:]((uint64_t)v357, objc_msgSend(v96, "section")))
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v147 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v147, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2185, CFSTR("attempt to delete row %ld from section %ld which only contains %ld rows before the update"), v110, v112, -[UITableViewRowData numberOfRowsInSection:]((uint64_t)v357, objc_msgSend(v96, "section")));

        }
        for (j = v90 + 1; objc_msgSend(v383, "count") > (unint64_t)j; objc_msgSend(v383, "removeObjectAtIndex:", j))
        {
          objc_msgSend(v383, "objectAtIndex:", j);
          v115 = objc_claimAutoreleasedReturnValue();
          v116 = (void *)v115;
          if (v115)
            v117 = *(void **)(v115 + 24);
          else
            v117 = 0;
          v118 = v117;
          v119 = objc_msgSend(v118, "isEqual:", v96);

          if (!v119)
            break;
        }
        v414 = 0u;
        v415 = 0u;
        v412 = 0u;
        v413 = 0u;
        v120 = v381;
        v121 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v412, v439, 16);
        if (v121)
        {
          v122 = v121;
          v123 = *(_QWORD *)v413;
          while (2)
          {
            for (k = 0; k != v122; ++k)
            {
              if (*(_QWORD *)v413 != v123)
                objc_enumerationMutation(v120);
              v125 = *(_QWORD **)(*((_QWORD *)&v412 + 1) + 8 * k);
              if (v125)
                v125 = (_QWORD *)v125[3];
              v126 = v125;
              v127 = objc_msgSend(v126, "isEqual:", v96);

              if ((v127 & 1) != 0)
              {

                self = v377;
                goto LABEL_217;
              }
            }
            v122 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v412, v439, 16);
            if (v122)
              continue;
            break;
          }
        }

        self = v377;
        -[UITableView _swipeActionController](v377, "_swipeActionController");
        v128 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v128, "deleteRowAtIndexPath:", v96);

        swipedIndexPath = v377->_swipedIndexPath;
        if (!swipedIndexPath)
        {
LABEL_217:
          v91 = v379;
          goto LABEL_218;
        }
        v91 = v379;
        if (!-[NSIndexPath isEqual:](swipedIndexPath, "isEqual:", v96))
          goto LABEL_218;
LABEL_216:
        *((_QWORD *)v356 + 2) |= 0x1000000000000uLL;
        goto LABEL_218;
      }
      if ((v94[16] & 2) == 0)
      {
        v130 = v357;
        if (v357)
          v130 = (_QWORD *)v357[8];
        if (v97 >= (uint64_t)v130)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          v149 = v148;
          v150 = v357;
          if (v357)
            v150 = (_QWORD *)v357[8];
          objc_msgSend(v148, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2154, CFSTR("attempt to delete section %ld, but there are only %ld sections before the update"), v97, v150);

        }
        if (objc_msgSend(v383, "count"))
        {
          v131 = 0;
          v132 = 0;
          v133 = v383;
          do
          {
            objc_msgSend(v133, "objectAtIndexedSubscript:", v131);
            v134 = objc_claimAutoreleasedReturnValue();
            v135 = (_QWORD *)v134;
            if (v134)
            {
              if ((*(_BYTE *)(v134 + 16) & 1) != 0)
              {
                if (v132 > v90)
                  goto LABEL_205;
                goto LABEL_208;
              }
              v136 = *(void **)(v134 + 24);
            }
            else
            {
              v136 = 0;
            }
            v137 = v136;
            v138 = objc_msgSend(v137, "section");

            if (v138 != v97)
            {
              if (v132 > v90)
              {
                if (v135)
LABEL_205:
                  v139 = (void *)v135[3];
                else
                  v139 = 0;
                v140 = v139;
                v141 = objc_msgSend(v140, "isEqual:", v96);

                if (v141)
                  objc_msgSend(v383, "removeObjectAtIndex:", v131);
              }
LABEL_208:
              ++v132;
              goto LABEL_209;
            }
            objc_msgSend(v383, "removeObjectAtIndex:", v131);
            v90 -= v132 < v90;
LABEL_209:

            v131 = v132;
            v133 = v383;
          }
          while (objc_msgSend(v383, "count") > (unint64_t)v132);
        }
        -[UITableView _swipeActionController](self, "_swipeActionController");
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v142, "deleteSectionAtIndex:", v97);

        v143 = self->_swipedIndexPath;
        if (!v143)
          goto LABEL_217;
        v91 = v379;
        if (-[NSIndexPath section](v143, "section") == v97)
          goto LABEL_216;
      }
LABEL_218:
      ++v90;

      v89 = v90;
      v92 = v383;
      if (objc_msgSend(v383, "count") <= (unint64_t)v90)
        goto LABEL_228;
    }
  }
  v91 = v379;
LABEL_228:
  if (objc_msgSend(v381, "count"))
  {
    v151 = 0;
    v152 = 0;
    v153 = v381;
    while (1)
    {
      objc_msgSend(v153, "objectAtIndexedSubscript:", v151);
      v154 = objc_claimAutoreleasedReturnValue();
      v155 = (_BYTE *)v154;
      if (v154)
        v156 = *(void **)(v154 + 24);
      else
        v156 = 0;
      v157 = v156;
      v158 = objc_msgSend(v157, "section");
      if (v385 && (v155 && (v155[16] & 1) != 0 || (objc_msgSend(v385, "containsObject:", v157) & 1) != 0))
        LODWORD(v159) = 0;
      else
        LODWORD(v159) = objc_msgSend(v91, "count");
      if (objc_msgSend(v91, "count") > (unint64_t)(int)v159)
      {
        v159 = (int)v159;
        do
        {
          objc_msgSend(v91, "objectAtIndexedSubscript:", v159);
          v160 = objc_claimAutoreleasedReturnValue();
          -[UIRowMoveUpdateItem newIndexPath]((id *)v160);
          v161 = (void *)objc_claimAutoreleasedReturnValue();
          v162 = objc_msgSend(v161, "isEqual:", v157);

          if (v162)
          {
            if (v160)
              v163 = *(_BYTE *)(v160 + 16) & 1;
            else
              v163 = 0;
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v164 = (void *)objc_claimAutoreleasedReturnValue();
            v165 = v164;
            if (v163)
              objc_msgSend(v164, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2233, CFSTR("attempt to perform an insert and a move to the same section (%ld)"), v158);
            else
              objc_msgSend(v164, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2236, CFSTR("attempt to perform an insert and a move to the same index path (%@)"), v157);

            v91 = v379;
          }
          else if (v155 && (v155[16] & 1) != 0)
          {
            -[UIRowMoveUpdateItem newIndexPath]((id *)v160);
            v166 = (void *)objc_claimAutoreleasedReturnValue();
            v167 = v158 == objc_msgSend(v166, "section");

            v358 |= v167;
            v168 = !v167;
            v91 = v379;
            v359 &= v168;
          }
          ++v159;

        }
        while (objc_msgSend(v91, "count") > v159);
      }
      if (!v155 || (v155[16] & 1) == 0)
      {
        v169 = objc_msgSend(v157, "section");
        v170 = objc_msgSend(v157, "row");
        rowData = self->_rowData;
        if (rowData)
          numSections = rowData->_numSections;
        else
          numSections = 0;
        if (v169 >= numSections)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v199 = (void *)objc_claimAutoreleasedReturnValue();
          v200 = v199;
          v201 = self->_rowData;
          if (v201)
            v201 = (UITableViewRowData *)v201->_numSections;
          objc_msgSend(v199, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2277, CFSTR("attempt to insert row %ld into section %ld, but there are only %ld sections after the update"), v170, v169, v201);

          rowData = self->_rowData;
        }
        if (v170 >= -[UITableViewRowData numberOfRowsInSection:]((uint64_t)rowData, objc_msgSend(v157, "section")))
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v202 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v202, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2278, CFSTR("attempt to insert row %ld into section %ld, but there are only %ld rows in section %ld after the update"), v170, v169, -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, objc_msgSend(v157, "section")), v169);

        }
        for (m = v152 + 1; objc_msgSend(v381, "count") > (unint64_t)m; objc_msgSend(v381, "removeObjectAtIndex:", m))
        {
          objc_msgSend(v381, "objectAtIndex:", m);
          v174 = objc_claimAutoreleasedReturnValue();
          v175 = (void *)v174;
          if (v174)
            v176 = *(void **)(v174 + 24);
          else
            v176 = 0;
          v177 = v176;
          v178 = objc_msgSend(v177, "isEqual:", v157);

          if (!v178)
            break;
        }
        v410 = 0u;
        v411 = 0u;
        v408 = 0u;
        v409 = 0u;
        v179 = v383;
        v180 = objc_msgSend(v179, "countByEnumeratingWithState:objects:count:", &v408, v438, 16);
        if (v180)
        {
          v181 = v180;
          v182 = *(_QWORD *)v409;
          while (2)
          {
            for (n = 0; n != v181; ++n)
            {
              if (*(_QWORD *)v409 != v182)
                objc_enumerationMutation(v179);
              v184 = *(_QWORD **)(*((_QWORD *)&v408 + 1) + 8 * n);
              if (v184)
                v184 = (_QWORD *)v184[3];
              v185 = v184;
              v186 = objc_msgSend(v185, "isEqual:", v157);

              if ((v186 & 1) != 0)
              {
                self = v377;
                goto LABEL_303;
              }
            }
            v181 = objc_msgSend(v179, "countByEnumeratingWithState:objects:count:", &v408, v438, 16);
            if (v181)
              continue;
            break;
          }
        }

        self = v377;
        -[UITableView _swipeActionController](v377, "_swipeActionController");
        v179 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v179, "insertRowAtIndexPath:", v157);
        goto LABEL_303;
      }
      if ((v155[16] & 2) == 0)
        break;
LABEL_304:
      ++v152;

      v151 = v152;
      v153 = v381;
      if (objc_msgSend(v381, "count") <= (unint64_t)v152)
        goto LABEL_314;
    }
    v187 = self->_rowData;
    if (v187)
      v187 = (UITableViewRowData *)v187->_numSections;
    if (v158 >= (uint64_t)v187)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v203 = (void *)objc_claimAutoreleasedReturnValue();
      v204 = v203;
      v205 = self->_rowData;
      if (v205)
        v205 = (UITableViewRowData *)v205->_numSections;
      objc_msgSend(v203, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2250, CFSTR("attempt to insert section %ld but there are only %ld sections after the update"), v158, v205);

    }
    if (!objc_msgSend(v381, "count"))
    {
LABEL_302:
      -[UITableView _swipeActionController](self, "_swipeActionController");
      v179 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v179, "insertSectionAtIndex:", v158);
LABEL_303:

      v91 = v379;
      goto LABEL_304;
    }
    v188 = 0;
    v189 = 0;
    v190 = v381;
    while (1)
    {
      objc_msgSend(v190, "objectAtIndexedSubscript:", v188);
      v191 = objc_claimAutoreleasedReturnValue();
      v192 = (_QWORD *)v191;
      if (v191)
      {
        if ((*(_BYTE *)(v191 + 16) & 1) != 0)
        {
          if (v189 > v152)
            goto LABEL_293;
          goto LABEL_296;
        }
        v193 = *(void **)(v191 + 24);
      }
      else
      {
        v193 = 0;
      }
      v194 = v193;
      v195 = objc_msgSend(v194, "section");

      if (v195 != v158)
      {
        if (v189 > v152)
        {
          if (v192)
LABEL_293:
            v196 = (void *)v192[3];
          else
            v196 = 0;
          v197 = v196;
          v198 = objc_msgSend(v197, "isEqual:", v157);

          if (v198)
            objc_msgSend(v381, "removeObjectAtIndex:", v188);
        }
LABEL_296:
        ++v189;
        goto LABEL_297;
      }
      objc_msgSend(v381, "removeObjectAtIndex:", v188);
      v152 -= v189 < v152;
LABEL_297:

      v188 = v189;
      v190 = v381;
      if (objc_msgSend(v381, "count") <= (unint64_t)v189)
        goto LABEL_302;
    }
  }
LABEL_314:
  if (objc_msgSend(v91, "count"))
  {
    v206 = 0;
    do
    {
      objc_msgSend(v91, "objectAtIndexedSubscript:", v206);
      v207 = objc_claimAutoreleasedReturnValue();
      v208 = v207;
      if (v207)
        v209 = *(void **)(v207 + 24);
      else
        v209 = 0;
      v210 = v209;
      -[UIRowMoveUpdateItem newIndexPath]((id *)v208);
      v211 = (void *)objc_claimAutoreleasedReturnValue();
      v371 = (void *)objc_msgSend(v210, "section");
      v212 = objc_msgSend(v210, "row");
      v375 = objc_msgSend(v211, "section");
      v213 = objc_msgSend(v211, "row");
      v365 = (void *)v208;
      if (v208)
        LODWORD(v208) = *(_BYTE *)(v208 + 16) & 1;
      v214 = (uint64_t)v357;
      if (v357)
      {
        v215 = v357[8];
        if ((_DWORD)v208)
          goto LABEL_322;
      }
      else
      {
        v215 = 0;
        if ((_DWORD)v208)
        {
LABEL_322:
          if ((uint64_t)v371 >= v215)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v220 = (void *)objc_claimAutoreleasedReturnValue();
            v221 = v220;
            v222 = v357;
            if (v357)
              v222 = (_QWORD *)v357[8];
            objc_msgSend(v220, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2322, CFSTR("attempt to move section %ld, but there are only %ld sections before the update"), v371, v222);

          }
          v216 = self->_rowData;
          if (v216)
            v216 = (UITableViewRowData *)v216->_numSections;
          if (v375 >= (uint64_t)v216)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v217 = (void *)objc_claimAutoreleasedReturnValue();
            v218 = v217;
            v219 = self->_rowData;
            if (v219)
              v219 = (UITableViewRowData *)v219->_numSections;
            objc_msgSend(v217, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2323, CFSTR("attempt to to move section %ld to section %ld, but there are only %ld sections after the update"), v371, v375, v219, v348);
            goto LABEL_375;
          }
          goto LABEL_341;
        }
      }
      v223 = (uint64_t)v371;
      if ((uint64_t)v371 >= v215)
      {
        v243 = v206;
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v244 = (void *)objc_claimAutoreleasedReturnValue();
        v245 = v244;
        v246 = v357;
        if (v357)
          v246 = (_QWORD *)v357[8];
        objc_msgSend(v244, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2326, CFSTR("attempt to move index path (%@) from a section that does not exist - there are only %ld sections before the update"), v210, v246);

        v214 = (uint64_t)v357;
        v206 = v243;
        v223 = (uint64_t)v371;
      }
      if (v212 >= -[UITableViewRowData numberOfRowsInSection:](v214, v223))
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v247 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v247, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2327, CFSTR("attempt to move index path (%@) that does not exist - there are only %ld rows in section %ld before the update"), v210, -[UITableViewRowData numberOfRowsInSection:]((uint64_t)v357, (uint64_t)v371), v371);

      }
      v224 = self->_rowData;
      if (v224)
        v225 = v224->_numSections;
      else
        v225 = 0;
      v226 = v375;
      if (v375 >= v225)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v248 = (void *)objc_claimAutoreleasedReturnValue();
        v249 = v248;
        v250 = self->_rowData;
        if (v250)
          v250 = (UITableViewRowData *)v250->_numSections;
        objc_msgSend(v248, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2328, CFSTR("attempt to move index path (%@) to index path (%@) in section that does not exist - there are only %ld sections after the update"), v210, v211, v250);

        v224 = self->_rowData;
        v226 = v375;
      }
      if (v213 >= -[UITableViewRowData numberOfRowsInSection:]((uint64_t)v224, v226))
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v218 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v218, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2329, CFSTR("attempt to move index path (%@) to index path (%@) that does not exist - there are only %ld rows in section %ld after the update"), v210, v211, -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, v375), v375);
LABEL_375:

      }
LABEL_341:
      v227 = v206 + 1;
      v228 = (int)v227;
      if (objc_msgSend(v389, "countForObject:", v210) == 1)
      {
        v228 = (int)v227;
        if (objc_msgSend(v385, "countForObject:", v211) == 1)
          v228 = objc_msgSend(v91, "count");
      }
      v368 = v227;
      if (objc_msgSend(v91, "count") > (unint64_t)v228)
      {
        v229 = v228;
        v230 = v228;
        while (1)
        {
          objc_msgSend(v91, "objectAtIndex:", v229);
          v231 = objc_claimAutoreleasedReturnValue();
          v232 = (id *)v231;
          v233 = v231 ? *(void **)(v231 + 24) : 0;
          v234 = v233;
          -[UIRowMoveUpdateItem newIndexPath](v232);
          v235 = (void *)objc_claimAutoreleasedReturnValue();
          v236 = objc_msgSend(v210, "isEqual:", v234);
          v237 = objc_msgSend(v211, "isEqual:", v235);
          if (!v236)
            break;
          if (!v237)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v240 = (void *)objc_claimAutoreleasedReturnValue();
            v239 = v240;
            if ((_DWORD)v208)
              objc_msgSend(v240, "handleFailureInMethod:object:file:lineNumber:description:", a2, v377, CFSTR("UITableView.m"), 2347, CFSTR("attempt to move section %ld to both section %ld and section %ld"), v371, v375, objc_msgSend(v235, "section"));
            else
              objc_msgSend(v240, "handleFailureInMethod:object:file:lineNumber:description:", a2, v377, CFSTR("UITableView.m"), 2350, CFSTR("attempt to move row at index path %@ to both %@ and %@"), v210, v211, v235);
            goto LABEL_358;
          }
          objc_msgSend(v91, "removeObjectAtIndex:", v229);
LABEL_360:

          v229 = v230;
          if (objc_msgSend(v91, "count") <= (unint64_t)v230)
            goto LABEL_363;
        }
        if (v237)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v238 = (void *)objc_claimAutoreleasedReturnValue();
          v239 = v238;
          if ((_DWORD)v208)
            objc_msgSend(v238, "handleFailureInMethod:object:file:lineNumber:description:", a2, v377, CFSTR("UITableView.m"), 2356, CFSTR("attempt to move both section %ld and section %ld to section %ld"), objc_msgSend(v210, "section"), objc_msgSend(v234, "section"), v375);
          else
            objc_msgSend(v238, "handleFailureInMethod:object:file:lineNumber:description:", a2, v377, CFSTR("UITableView.m"), 2359, CFSTR("attempt to move both row at index path %@ and %@ to %@"), v210, v234, v211);
LABEL_358:

        }
        ++v230;
        goto LABEL_360;
      }
LABEL_363:
      self = v377;
      -[UITableView _swipeActionController](v377, "_swipeActionController");
      v241 = (void *)objc_claimAutoreleasedReturnValue();
      v242 = v241;
      if ((_DWORD)v208)
        objc_msgSend(v241, "moveSectionAtIndex:toIndex:", v371, v375);
      else
        objc_msgSend(v241, "moveRowAtIndexPath:toIndexPath:", v210, v211);
      v206 = v368;

    }
    while (objc_msgSend(v91, "count") > (unint64_t)v368);
  }
  if (self->_swipedIndexPath)
  {
    -[UITableView _swipeActionController](self, "_swipeActionController");
    v251 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v251, "swipedIndexPath");
    v252 = (void *)objc_claimAutoreleasedReturnValue();

    if (v252)
      objc_storeStrong((id *)&self->_swipedIndexPath, v252);

  }
  if (v357)
  {
    v253 = v357[8];
    v254 = malloc_type_malloc(8 * v253, 0x100004000313F17uLL);
    if (v253 >= 1)
    {
      for (ii = 0; ii != v253; ++ii)
        v254[ii] = -[UITableViewRowData numberOfRowsInSection:]((uint64_t)v357, ii);
    }
  }
  else
  {
    v254 = malloc_type_malloc(0, 0x100004000313F17uLL);
    v253 = 0;
  }
  v256 = self->_rowData;
  if (v256)
    v257 = v256->_numSections;
  else
    v257 = 0;
  v376 = v257;
  v363 = v254;
  if ((v359 & 1) != 0)
  {
    v406 = 0u;
    v407 = 0u;
    v404 = 0u;
    v405 = 0u;
    v258 = v383;
    v259 = objc_msgSend(v258, "countByEnumeratingWithState:objects:count:", &v404, v437, 16);
    if (v259)
    {
      v260 = v259;
      v261 = 0;
      v262 = *(_QWORD *)v405;
      v263 = v253;
      v264 = v381;
      do
      {
        for (jj = 0; jj != v260; ++jj)
        {
          if (*(_QWORD *)v405 != v262)
            objc_enumerationMutation(v258);
          v266 = *(_QWORD *)(*((_QWORD *)&v404 + 1) + 8 * jj);
          if (v266 && (*(_BYTE *)(v266 + 16) & 3) == 1)
          {
            ++v261;
            --v263;
          }
        }
        v260 = objc_msgSend(v258, "countByEnumeratingWithState:objects:count:", &v404, v437, 16);
      }
      while (v260);
    }
    else
    {
      v261 = 0;
      v263 = v253;
      v264 = v381;
    }

    v402 = 0u;
    v403 = 0u;
    v400 = 0u;
    v401 = 0u;
    v268 = v264;
    v269 = objc_msgSend(v268, "countByEnumeratingWithState:objects:count:", &v400, v436, 16);
    if (v269)
    {
      v270 = v269;
      v271 = 0;
      v272 = *(_QWORD *)v401;
      do
      {
        for (kk = 0; kk != v270; ++kk)
        {
          if (*(_QWORD *)v401 != v272)
            objc_enumerationMutation(v268);
          v274 = *(_QWORD *)(*((_QWORD *)&v400 + 1) + 8 * kk);
          if (v274 && (*(_BYTE *)(v274 + 16) & 3) == 1)
          {
            ++v271;
            ++v263;
          }
        }
        v270 = objc_msgSend(v268, "countByEnumeratingWithState:objects:count:", &v400, v436, 16);
      }
      while (v270);
    }
    else
    {
      v271 = 0;
    }

    if (v263 == v376)
    {
      v275 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v379, "count") + objc_msgSend(v258, "count") + objc_msgSend(v268, "count"));
      objc_msgSend(v275, "addObjectsFromArray:", v258);
      objc_msgSend(v275, "addObjectsFromArray:", v379);
      objc_msgSend(v275, "addObjectsFromArray:", v268);
      v276 = v275;
      v277 = [_UITableViewUpdateSupport alloc];
      self = v377;
      v278 = v377->_rowData;
      v279 = -[UITableViewRowData numberOfRows]((uint64_t)v357);
      v280 = -[UITableViewRowData numberOfRows]((uint64_t)v377->_rowData);
      v282 = -[_UITableViewUpdateSupport initWithTableView:updateItems:oldRowData:newRowData:oldRowRange:newRowRange:context:](v277, v377, v276, v357, v278, 0, v279, v281, 0, v280, v354);
      currentUpdate = v377->_currentUpdate;
      v377->_currentUpdate = (_UITableViewUpdateSupport *)v282;

      v284 = v377->_currentUpdate;
      if (v284 && v284->_updateMaps.updatesAreInvalid)
      {
        v285 = (void *)MEMORY[0x1E0CB3940];
        v286 = v284->_invalidUpdatesErrorMessage;
        objc_msgSend(v285, "stringWithFormat:", CFSTR("%@\nTable view: %@"), v286, v377);
        v287 = (void *)objc_claimAutoreleasedReturnValue();

        if ((*((_BYTE *)v356 + 27) & 0x20) != 0)
        {
          if (os_variant_has_internal_diagnostics())
          {
            __UIFaultDebugAssertLog();
            v347 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v347, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412290;
              v435 = v287;
              _os_log_fault_impl(&dword_185066000, v347, OS_LOG_TYPE_FAULT, "Performing reloadData as a fallback — %@", buf, 0xCu);
            }

            v358 = 1;
            self = v377;
            v91 = v379;
            v257 = v376;
          }
          else
          {
            v292 = qword_1EDDB09D8;
            v91 = v379;
            v257 = v376;
            if (!qword_1EDDB09D8)
            {
              v292 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v292, (unint64_t *)&qword_1EDDB09D8);
            }
            v293 = *(id *)(v292 + 8);
            if (os_log_type_enabled(v293, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v435 = v287;
              _os_log_impl(&dword_185066000, v293, OS_LOG_TYPE_ERROR, "Performing reloadData as a fallback — %@", buf, 0xCu);
            }

            v358 = 1;
          }
        }
        else
        {
          -[UITableView _Bug_Detected_In_Client_Of_UITableView_Invalid_Batch_Updates:](v377, "_Bug_Detected_In_Client_Of_UITableView_Invalid_Batch_Updates:", v287);
          v91 = v379;
          v257 = v376;
        }

        v361 = 0;
        v267 = v276;
      }
      else
      {
        v361 = 1;
        v267 = v276;
        v91 = v379;
        v257 = v376;
      }
    }
    else
    {
      v257 = v376;
      self = v377;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid update: invalid number of sections. The number of sections contained in the table view after the update (%lu) must be equal to the number of sections contained in the table view before the update (%lu), plus or minus the number of sections inserted or deleted (%lu inserted, %lu deleted). Table view: %@"), v376, v253, v271, v261, v377);
      v276 = (id)objc_claimAutoreleasedReturnValue();
      if ((*((_BYTE *)v356 + 27) & 0x20) != 0)
      {
        -[UITableView _diffableDataSourceImpl](v377, "_diffableDataSourceImpl");
        v288 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v288, "currentTransaction");
        v289 = objc_claimAutoreleasedReturnValue();
        v290 = (void *)v289;
        if (v288)
        {
          v91 = v379;
          if (v289)
          {
            objc_msgSend(v276, "stringByAppendingFormat:", CFSTR("; Diffable transaction: %@"), v289);
            v291 = objc_claimAutoreleasedReturnValue();

            v276 = (id)v291;
          }
        }
        else
        {
          v91 = v379;
        }
        v294 = qword_1EDDB09D0;
        if (!qword_1EDDB09D0)
        {
          v294 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v294, (unint64_t *)&qword_1EDDB09D0);
        }
        v295 = *(id *)(v294 + 8);
        if (os_log_type_enabled(v295, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v435 = v276;
          _os_log_impl(&dword_185066000, v295, OS_LOG_TYPE_ERROR, "Performing reloadData as a fallback — %@", buf, 0xCu);
        }

        v267 = 0;
        v361 = 0;
        v358 = 1;
      }
      else
      {
        -[UITableView _Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Sections:](v377, "_Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Sections:", v276);
        v267 = 0;
        v361 = 0;
        v91 = v379;
      }
    }

  }
  else
  {
    v267 = 0;
    v361 = 0;
  }
  v378 = malloc_type_calloc(8uLL, v257, 0xAA00287AuLL);
  v372 = malloc_type_calloc(8uLL, v253, 0x57F839F2uLL);
  v369 = malloc_type_calloc(8uLL, v257, 0x111DE163uLL);
  v296 = v253;
  v366 = malloc_type_calloc(8uLL, v253, 0xB0F7CB44uLL);
  v396 = 0u;
  v397 = 0u;
  v398 = 0u;
  v399 = 0u;
  v297 = v267;
  v298 = objc_msgSend(v297, "countByEnumeratingWithState:objects:count:", &v396, v433, 16);
  if (v298)
  {
    v299 = v298;
    v300 = *(_QWORD *)v397;
    do
    {
      v301 = 0;
      do
      {
        if (*(_QWORD *)v397 != v300)
          objc_enumerationMutation(v297);
        v302 = *(_QWORD *)(*((_QWORD *)&v396 + 1) + 8 * v301);
        if (v302)
        {
          if ((*(_BYTE *)(v302 + 16) & 1) != 0)
            goto LABEL_458;
          v303 = *(void **)(v302 + 24);
        }
        else
        {
          v303 = 0;
        }
        v304 = v303;
        v305 = objc_msgSend(v304, "section");

        if (!v302)
          goto LABEL_450;
        v306 = *(_DWORD *)(v302 + 20);
        if (v306 != 3)
        {
          if (v306 == 1)
          {
            if (v305 >= v296)
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v312 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v312, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2475, CFSTR("UITableView internal inconsistency: encountered out of bounds section index while validating delete updates (section=%ld, oldSectionCount=%ld)"), v305, v296);

            }
            v307 = v372;
          }
          else
          {
            if (v306)
              goto LABEL_458;
LABEL_450:
            if (v305 >= v376)
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v311 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v311, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2471, CFSTR("UITableView internal inconsistency: encountered out of bounds section index while validating insert updates (section=%ld, newSectionCount=%ld)"), v305, v376);

            }
            v307 = v378;
          }
          v308 = &v307[v305];
LABEL_457:
          ++*v308;
          goto LABEL_458;
        }
        -[UIRowMoveUpdateItem newIndexPath]((id *)v302);
        v309 = (void *)objc_claimAutoreleasedReturnValue();
        v310 = objc_msgSend(v309, "section");

        if (-[_UITableViewUpdateSupport finalSectionIndexForInitialSectionIndex:]((uint64_t)self->_currentUpdate, v305) != v310)
        {
          if (v305 >= v296)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v313 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v313, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2481, CFSTR("UITableView internal inconsistency: encountered out of bounds section index while validating move updates (section=%ld, oldSectionCount=%ld)"), v305, v296);

          }
          if (v310 >= v376)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v314 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v314, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2482, CFSTR("UITableView internal inconsistency: encountered out of bounds section index while validating move updates (newSection=%ld, newSectionCount=%ld)"), v310, v376);

          }
          ++v366[v305];
          v308 = &v369[v310];
          goto LABEL_457;
        }
LABEL_458:
        ++v301;
      }
      while (v299 != v301);
      v315 = objc_msgSend(v297, "countByEnumeratingWithState:objects:count:", &v396, v433, 16);
      v299 = v315;
    }
    while (v315);
  }

  v316 = v361;
  if (v376 > 0)
    v317 = v361;
  else
    v317 = 0;
  p_tableFlags = v356;
  if (v317 != 1)
  {
    v10 = v352;
    v8 = v349;
    goto LABEL_493;
  }
  v318 = 0;
  v10 = v352;
  while (1)
  {
    v319 = -[_UITableViewUpdateSupport initialSectionIndexForFinalSectionIndex:]((uint64_t)self->_currentUpdate, v318);
    if (v319 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_476;
    v320 = v319;
    v321 = v363[v319];
    v322 = -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, v318);
    if (v322 < 0)
      break;
    v323 = v369[v318];
    v324 = v372[v320];
    v325 = v378[v318];
    if (v322 != v321 + v323 - (v366[v320] + v324) + v325)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid update: invalid number of rows in section %lu. The number of rows contained in an existing section after the update (%lu) must be equal to the number of rows contained in that section before the update (%lu), plus or minus the number of rows inserted or deleted from that section (%lu inserted, %lu deleted) and plus or minus the number of rows moved into or out of that section (%lu moved in, %lu moved out). Table view: %@"), v318, v322, v321, v325, v324, v323, v366[v320], self);
      v326 = (void *)objc_claimAutoreleasedReturnValue();
      if ((*((_BYTE *)v356 + 27) & 0x20) == 0)
        goto LABEL_485;
      v329 = qword_1EDDB09E8;
      v8 = v349;
      v91 = v379;
      if (!qword_1EDDB09E8)
      {
        v329 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v329, (unint64_t *)&qword_1EDDB09E8);
      }
      v328 = *(id *)(v329 + 8);
      if (os_log_type_enabled(v328, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v435 = v326;
        goto LABEL_490;
      }
      goto LABEL_491;
    }
LABEL_476:
    if (v376 == ++v318)
    {
      v316 = 1;
      v8 = v349;
      v91 = v379;
      goto LABEL_493;
    }
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid update: invalid number of rows in section %lu. Attempt to delete more rows than exist in section. Table view: %@"), v320, self);
  v326 = (void *)objc_claimAutoreleasedReturnValue();
  if ((*((_BYTE *)v356 + 27) & 0x20) == 0)
  {
LABEL_485:
    -[UITableView _Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Rows_In_Section:](self, "_Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Rows_In_Section:", v326);
    v8 = v349;
    v91 = v379;
    goto LABEL_492;
  }
  v327 = qword_1EDDB09E0;
  v8 = v349;
  v91 = v379;
  if (!qword_1EDDB09E0)
  {
    v327 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v327, (unint64_t *)&qword_1EDDB09E0);
  }
  v328 = *(id *)(v327 + 8);
  if (os_log_type_enabled(v328, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v435 = v326;
LABEL_490:
    _os_log_impl(&dword_185066000, v328, OS_LOG_TYPE_ERROR, "Performing reloadData as a fallback — %@", buf, 0xCu);
  }
LABEL_491:

  v358 = 1;
LABEL_492:

  v316 = 0;
LABEL_493:
  free(v363);
  free(v378);
  free(v372);
  free(v369);
  free(v366);
  if ((v316 & 1) != 0)
  {
    objc_storeStrong((id *)&self->_currentUpdate->_ignoringDragsToken, v355);
    -[UITableView _updateWithItems:updateSupport:](self, "_updateWithItems:updateSupport:", v297, self->_currentUpdate);
  }
  else if ((v358 & 1) != 0)
  {
    v330 = _Block_copy(self->_updateCompletionHandler);
    updateCompletionHandler = self->_updateCompletionHandler;
    self->_updateCompletionHandler = 0;

    -[UITableView reloadData](self, "reloadData");
    if (v330)
    {
      v332 = MEMORY[0x1E0C80D38];
      v333 = MEMORY[0x1E0C80D38];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __45__UITableView__endCellAnimationsWithContext___block_invoke;
      block[3] = &unk_1E16B1BF8;
      v395 = v330;
      dispatch_async(v332, block);

    }
  }
  v334 = self->_currentUpdate;
  self->_currentUpdate = 0;

  -[UITableView _numberOfRowsDidChange](self, "_numberOfRowsDidChange");
LABEL_500:
  -[UITableView _endSuspendingUpdates](self, "_endSuspendingUpdates");
  -[UITableView _resetUpdateItemArrays](self, "_resetUpdateItemArrays");
  v335 = -[UITableView _shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:scrolledToTop:](self, "_shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:scrolledToTop:", v10, v8);
  v336 = *((_QWORD *)p_tableFlags + 3);
  if (v335)
  {
    v336 |= 4uLL;
    *((_QWORD *)p_tableFlags + 2) = *((_QWORD *)p_tableFlags + 2);
    *((_QWORD *)p_tableFlags + 3) = v336;
  }
  if ((v336 & 0x100000000) == 0)
    -[UITableView _reapTentativeViews](self, "_reapTentativeViews");
  -[UITableView _adjustExtraSeparators](self, "_adjustExtraSeparators");
  -[UITableView _resumeReloads](self, "_resumeReloads");
  -[_UITableViewPrefetchContext cancelWithNewMaxIndex:]((uint64_t)self->_prefetchContext, -[UITableView _lastGlobalRowIndex](self, "_lastGlobalRowIndex"));
  if ((*((_BYTE *)p_tableFlags + 25) & 2) != 0)
  {
    -[UITableView _updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:](self, "_updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:", v12, v13, v14, v15);
    -[UITableView _updateVisibleCellsImmediatelyIfNecessary](self, "_updateVisibleCellsImmediatelyIfNecessary");
    -[UITableView _updateContentSize](self, "_updateContentSize");
    -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");
    -[UIView updateFocusIfNeeded](self, "updateFocusIfNeeded");
    *((_QWORD *)p_tableFlags + 3) &= ~0x200uLL;
  }
  v392 = 0u;
  v393 = 0u;
  v390 = 0u;
  v391 = 0u;
  v337 = (void *)-[NSMutableArray copy](self->_selectedIndexPaths, "copy");
  v338 = objc_msgSend(v337, "countByEnumeratingWithState:objects:count:", &v390, v432, 16);
  if (v338)
  {
    v339 = v338;
    v340 = *(_QWORD *)v391;
    do
    {
      for (mm = 0; mm != v339; ++mm)
      {
        if (*(_QWORD *)v391 != v340)
          objc_enumerationMutation(v337);
        -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", *(_QWORD *)(*((_QWORD *)&v390 + 1) + 8 * mm));
        v342 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v342, "_updateShowingSelectedBackground");

      }
      v339 = objc_msgSend(v337, "countByEnumeratingWithState:objects:count:", &v390, v432, 16);
    }
    while (v339);
  }

  _UIRestorePreviousFallbackEnvironment(v353);
  v343 = qword_1EDDB09F0;
  if (!qword_1EDDB09F0)
  {
    v343 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v343, (unint64_t *)&qword_1EDDB09F0);
  }
  v344 = *(id *)(v343 + 8);
  v345 = os_signpost_id_make_with_pointer(*(os_log_t *)(v343 + 8), self);
  if (v345 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v346 = v345;
    if (os_signpost_enabled(v344))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_185066000, v344, OS_SIGNPOST_INTERVAL_END, v346, "BatchUpdates", ", buf, 2u);
    }
  }

}

- (id)_indexPathsForRowsInRect:(CGRect)a3 usingPresentationValues:(BOOL)a4
{
  void *v6;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v8;

  -[UITableViewRowData indexPathsForRowsInRect:]((double *)self->_rowData, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!a4)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathsBeforeShadowUpdates:](shadowUpdatesController, "indexPathsBeforeShadowUpdates:", v6);
      v8 = objc_claimAutoreleasedReturnValue();

      v6 = (void *)v8;
    }
  }
  return v6;
}

- (id)_indexPathsForVisibleRowsUsingPresentationValues:(BOOL)a3
{
  _BOOL8 v3;

  v3 = a3;
  -[UITableView _visibleBounds](self, "_visibleBounds");
  return -[UITableView _indexPathsForRowsInRect:usingPresentationValues:](self, "_indexPathsForRowsInRect:usingPresentationValues:", v3);
}

- (id)_tableFooterView
{
  return self->_tableFooterView;
}

- (id)_arrayForUpdateAction:(int)a3
{
  uint64_t v3;
  id v4;
  void **v5;
  void *v6;
  id v7;
  void *v8;

  switch(a3)
  {
    case 0:
      v3 = 2544;
      goto LABEL_8;
    case 1:
      v3 = 2552;
      goto LABEL_8;
    case 2:
      v3 = 2560;
      goto LABEL_8;
    case 3:
      v3 = 2568;
LABEL_8:
      v5 = (void **)((char *)&self->super.super.super.super.isa + v3);
      v6 = *(Class *)((char *)&self->super.super.super.super.isa + v3);
      if (!v6)
      {
        v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v8 = *v5;
        *v5 = v7;

        v6 = *v5;
      }
      v4 = v6;
      break;
    default:
      v4 = 0;
      break;
  }
  return v4;
}

- (id)_swipeActionController
{
  return self->_swipeActionController;
}

- (id)_sectionsWithSectionOperationsInUpdateItems:(void *)a1
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  id v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v5)
    {
      v6 = v5;
      a1 = 0;
      v7 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (v9 && (*(_BYTE *)(v9 + 16) & 1) != 0)
          {
            v10 = *(id *)(v9 + 24);
            v11 = objc_msgSend(v10, "section");

            if (a1)
            {
              objc_msgSend(a1, "addIndex:", v11);
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB3788], "indexSetWithIndex:", v11);
              a1 = (void *)objc_claimAutoreleasedReturnValue();
            }
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v6);
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

- (void)_storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:(id)a3
{
  double v4;
  _BOOL4 v5;
  double v6;
  double v7;
  double v8;
  double v9;

  -[UITableView _computeOffsetOfFirstVisibleCellWithIndexPath:](self, "_computeOffsetOfFirstVisibleCellWithIndexPath:", a3);
  self->_preReloadFirstCellOffset = v4;
  self->_preReloadVisibleRowRange = self->_visibleRows;
  v5 = -[UIScrollView isScrollAnimating](self, "isScrollAnimating");
  v6 = 0.0;
  if (v5)
  {
    -[UIScrollView contentOffset](self, "contentOffset", 0.0);
    v8 = v7;
    -[UIScrollView _animatedTargetOffset](self, "_animatedTargetOffset");
    v6 = v9 - v8;
  }
  self->_preReloadAnimationTargetOffsetDelta = v6;
}

- (double)_computeOffsetOfFirstVisibleCellWithIndexPath:(id)a3
{
  uint64_t v4;
  double v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGRect v17;

  if (!a3)
    return 0.0;
  v4 = -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_rowData, a3);
  v5 = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, v4, 1);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  -[UITableView _contentInset](self, "_contentInset");
  v13 = v12;
  -[UIScrollView contentOffset](self, "contentOffset");
  v15 = v14;
  v17.origin.x = v5;
  v17.origin.y = v7;
  v17.size.width = v9;
  v17.size.height = v11;
  return v13 + v15 - CGRectGetMinY(v17);
}

- (BOOL)_shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:(id)a3 scrolledToTop:(BOOL)a4
{
  _BOOL4 v7;
  BOOL result;

  v7 = -[UITableView _estimatesHeights](self, "_estimatesHeights");
  result = 0;
  if (a3 && v7 && !a4)
    return self->_preReloadVisibleRowRange.length != 0;
  return result;
}

- (BOOL)_isScrolledToTop
{
  double v3;

  -[UIScrollView contentOffset](self, "contentOffset");
  return -[UITableView _isScrolledToTopAtContentOffsetY:](self, "_isScrolledToTopAtContentOffsetY:", v3);
}

- (BOOL)_isScrolledToTopAtContentOffsetY:(double)a3
{
  double v4;

  -[UITableView _contentInset](self, "_contentInset");
  return v4 + a3 <= 0.001;
}

- (int64_t)_lastGlobalRowIndex
{
  return -[UITableView maximumGlobalRowIndex](self, "maximumGlobalRowIndex") - 1;
}

- (int64_t)maximumGlobalRowIndex
{
  return (int64_t)-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData);
}

- (id)_sortedDeduplicatedReloadItems
{
  NSMutableArray *v2;
  NSMutableArray *v3;
  void *v4;
  void *v5;
  NSMutableArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = self->_reloadItems;
  v3 = v2;
  if (v2)
  {
    if ((unint64_t)-[NSMutableArray count](v2, "count") > 1)
    {
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", -[NSMutableArray count](v3, "count"));
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", -[NSMutableArray count](v3, "count"));
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v6 = v3;
      v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v17;
        do
        {
          v10 = 0;
          do
          {
            if (*(_QWORD *)v17 != v9)
              objc_enumerationMutation(v6);
            v11 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v10);
            if (v11)
              v12 = *(void **)(v11 + 24);
            else
              v12 = 0;
            v13 = v12;
            if ((objc_msgSend(v5, "containsObject:", v13, (_QWORD)v16) & 1) == 0)
            {
              objc_msgSend(v5, "addObject:", v13);
              objc_msgSend(v4, "insertObject:atIndex:", v11, objc_msgSend(v4, "indexOfObject:inSortedRange:options:usingComparator:", v11, 0, objc_msgSend(v4, "count"), 1024, &__block_literal_global_715));
            }

            ++v10;
          }
          while (v8 != v10);
          v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
          v8 = v14;
        }
        while (v14);
      }

    }
    else
    {
      v4 = (void *)-[NSMutableArray mutableCopy](v3, "mutableCopy");
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (void)_resetUpdateItemArrays
{
  NSMutableArray *insertItems;
  NSMutableArray *deleteItems;
  NSMutableArray *reloadItems;
  NSMutableArray *moveItems;

  insertItems = self->_insertItems;
  self->_insertItems = 0;

  deleteItems = self->_deleteItems;
  self->_deleteItems = 0;

  reloadItems = self->_reloadItems;
  self->_reloadItems = 0;

  moveItems = self->_moveItems;
  self->_moveItems = 0;

}

- (void)_rebaseExistingShadowUpdatesIfNecessaryWithSortedInsertItems:(id)a3 sortedDeleteItems:(id)a4 sortedMoveItems:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (-[_UITableViewShadowUpdatesController hasShadowUpdates](self->_shadowUpdatesController, "hasShadowUpdates")
    && !-[UITableView _isPerformingShadowUpdates](self, "_isPerformingShadowUpdates")
    && !-[UITableView _isPerformingRevertingShadowUpdates](self, "_isPerformingRevertingShadowUpdates"))
  {
    v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v11, "addObjectsFromArray:", v9);
    objc_msgSend(v11, "addObjectsFromArray:", v10);
    v19 = v8;
    objc_msgSend(v11, "addObjectsFromArray:", v8);
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v11, "count"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v13 = v11;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v21;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v21 != v16)
            objc_enumerationMutation(v13);
          objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v17), "collectionViewUpdateItem");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "addObject:", v18);

          ++v17;
        }
        while (v15 != v17);
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v15);
    }

    -[_UITableViewShadowUpdatesController rebaseExistingShadowUpdatesForUpdates:](self->_shadowUpdatesController, "rebaseExistingShadowUpdatesForUpdates:", v12);
    v8 = v19;
  }

}

- (void)_configureTableHeaderFooterView:(id)a3 forHeader:(BOOL)a4 section:(int64_t)a5 floating:(BOOL)a6 withTitle:(id)a7 detailText:(id)a8 textAlignment:(int64_t)a9 fromClient:(BOOL)a10
{
  _BOOL8 v12;
  _BOOL8 v14;
  id v16;
  id v17;
  _BOOL8 v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;

  v12 = a6;
  v14 = a4;
  v29 = a3;
  v16 = a7;
  v17 = a8;
  objc_msgSend(v29, "setFloating:", v12);
  objc_msgSend(v29, "setSectionHeader:", v14);
  if (v14)
  {
    objc_msgSend(v29, "_setTopHeader:", -[UITableView _isTopHeaderForSection:](self, "_isTopHeaderForSection:", a5));
    -[UITableView _headerFooterLeadingMarginWidthIsHeader:isFirstSection:](self, "_headerFooterLeadingMarginWidthIsHeader:isFirstSection:", 1, objc_msgSend(v29, "_isTopHeader"));
    objc_msgSend(v29, "_setMarginWidth:");
    -[UITableView _headerFooterTrailingMarginWidth](self, "_headerFooterTrailingMarginWidth");
    objc_msgSend(v29, "_setRightMarginWidth:");
    objc_msgSend(v29, "_setInsetsContentViewsToSafeArea:", -[UITableView insetsContentViewsToSafeArea](self, "insetsContentViewsToSafeArea"));
    v18 = -[UITableView _shouldStripHeaderTopPaddingForSection:](self, "_shouldStripHeaderTopPaddingForSection:", a5);
  }
  else
  {
    objc_msgSend(v29, "_setTopHeader:", 0);
    -[UITableView _headerFooterLeadingMarginWidthIsHeader:isFirstSection:](self, "_headerFooterLeadingMarginWidthIsHeader:isFirstSection:", 0, objc_msgSend(v29, "_isTopHeader"));
    objc_msgSend(v29, "_setMarginWidth:");
    -[UITableView _headerFooterTrailingMarginWidth](self, "_headerFooterTrailingMarginWidth");
    objc_msgSend(v29, "_setRightMarginWidth:");
    objc_msgSend(v29, "_setInsetsContentViewsToSafeArea:", -[UITableView insetsContentViewsToSafeArea](self, "insetsContentViewsToSafeArea"));
    v18 = 0;
  }
  objc_msgSend(v29, "_setStripPadding:", v18);
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration, (uint64_t)CFSTR("TableViewHeadersFootersUseModernConfiguration"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) != 0|| !byte_1EDDA8334|| a10)
  {
    if (v16)
    {
      -[UITableView _constants](self, "_constants");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "shouldUppercaseHeaderFooterTextForTableStyle:isHeader:", (*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3, v14);

      if (v24)
      {
        objc_msgSend(v16, "localizedUppercaseString");
        v25 = objc_claimAutoreleasedReturnValue();

        v16 = (id)v25;
      }
      objc_msgSend(v29, "textLabel");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setText:", v16);

    }
    v27 = v29;
    if (v17)
    {
      objc_msgSend(v29, "detailTextLabel");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setText:", v17);

      v27 = v29;
    }
    objc_msgSend(v27, "setTextAlignment:", a9);
  }
  else
  {
    objc_msgSend(v29, "defaultContentConfiguration");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setText:", v16);
    objc_msgSend(v19, "setSecondaryText:", v17);
    if (a9 == 1)
      v20 = 1;
    else
      v20 = 2 * (a9 == 3);
    objc_msgSend(v19, "textProperties");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setAlignment:", v20);

    objc_msgSend(v19, "secondaryTextProperties");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setAlignment:", v20);

    objc_msgSend(v29, "setContentConfiguration:", v19);
  }
  objc_msgSend(v29, "setNeedsLayout");

}

- (void)_setupSectionView:(id)a3 isHeader:(BOOL)a4 forSection:(int64_t)a5
{
  _BOOL8 v6;
  void *v8;
  UITableViewRowData *rowData;
  uint64_t v10;
  id v11;

  v6 = a4;
  v11 = a3;
  objc_msgSend(v11, "setTableViewStyle:", -[UITableView _tableStyle](self, "_tableStyle"));
  -[UITableView _constants](self, "_constants");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "_setConstants:", v8);

  objc_msgSend(v11, "setTableView:", self);
  objc_msgSend(v11, "setSectionHeader:", v6);
  -[UITableView _headerFooterLeadingMarginWidthIsHeader:isFirstSection:](self, "_headerFooterLeadingMarginWidthIsHeader:isFirstSection:", v6, a5 == 0);
  objc_msgSend(v11, "_setMarginWidth:");
  -[UITableView _headerFooterTrailingMarginWidth](self, "_headerFooterTrailingMarginWidth");
  objc_msgSend(v11, "_setRightMarginWidth:");
  objc_msgSend(v11, "_setInsetsContentViewsToSafeArea:", -[UITableView insetsContentViewsToSafeArea](self, "insetsContentViewsToSafeArea"));
  objc_msgSend(v11, "_setAutomaticIntrinsicContentSizeInvalidationEnabled:", (*((_QWORD *)&self->_tableFlags + 3) & 0x18000000000) == 0x10000000000);
  if (a5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    rowData = self->_rowData;
    if (v6)
    {
      objc_msgSend(v11, "setMaxTitleWidth:", -[UITableViewRowData maxHeaderTitleWidthForSection:]((uint64_t)rowData, a5));
      v10 = -[UITableViewRowData headerAlignmentForSection:]((uint64_t)self->_rowData, a5);
    }
    else
    {
      objc_msgSend(v11, "setMaxTitleWidth:", -[UITableViewRowData maxFooterTitleWidthForSection:]((uint64_t)rowData, a5));
      v10 = -[UITableViewRowData footerAlignmentForSection:]((uint64_t)self->_rowData, a5);
    }
    objc_msgSend(v11, "setTextAlignment:", v10);
  }
  objc_msgSend(v11, "_setupLabelAppearance");

}

- (BOOL)_shouldApplyReadableWidthInsets
{
  _BOOL4 v3;

  v3 = -[UITableView cellLayoutMarginsFollowReadableWidth](self, "cellLayoutMarginsFollowReadableWidth");
  if (v3)
    LOBYTE(v3) = -[UIView _safeAreaWidthExceedsReadableWidth](self, "_safeAreaWidthExceedsReadableWidth");
  return v3;
}

- (double)_defaultMarginWidth
{
  double result;

  -[UITableConstants defaultMarginWidthForTableView:](self->_constants, "defaultMarginWidthForTableView:", self);
  return result;
}

- (BOOL)_shouldStripHeaderTopPaddingForSection:(int64_t)a3
{
  BOOL v3;
  int64_t v4;
  uint64_t tableFlags;
  void *v8;
  double v9;
  double v10;
  void *v11;
  void *v12;

  v3 = 0;
  v4 = a3 - 1;
  if (a3 >= 1 && ((*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3uLL) - 3 >= 0xFFFFFFFFFFFFFFFELL)
  {
    tableFlags = (uint64_t)self->_tableFlags;
    if ((tableFlags & 0x800000000) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "tableView:heightForFooterInSection:", self, v4);
      v10 = v9;

      if (v10 != -1.0)
        return 0;
      tableFlags = (uint64_t)self->_tableFlags;
    }
    if ((tableFlags & 0x10) != 0)
    {
      -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "tableView:titleForFooterInSection:", self, a3);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v12 != 0;

      return v3;
    }
    return 0;
  }
  return v3;
}

- (BOOL)_isTopHeaderForSection:(int64_t)a3
{
  if (a3)
    return 0;
  return !dyld_program_sdk_at_least()
      || !-[UIScrollView _shouldAdjustLayoutToCollapseTopSpacing](self, "_shouldAdjustLayoutToCollapseTopSpacing");
}

- (void)_accessibilitySetInterfaceStyleIntent:(unint64_t)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  -[UIView _accessibilitySetInterfaceStyleIntent:](&v4, sel__accessibilitySetInterfaceStyleIntent_, a3);
  -[UITableView _resetDarkenedSeparatorColor](self, "_resetDarkenedSeparatorColor");
}

- (void)setFrame:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  CGFloat v8;
  CGFloat v9;
  double v10;
  double v11;
  double v12;
  double v13;
  UITableViewRowData *rowData;
  double v15;
  objc_super v16;
  CGRect v17;
  CGRect v18;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[UIView frame](self, "frame");
  v18.origin.x = v8;
  v18.origin.y = v9;
  v11 = v10;
  v13 = v12;
  v17.origin.x = x;
  v17.origin.y = y;
  v17.size.width = width;
  v17.size.height = height;
  v18.size.width = v11;
  v18.size.height = v13;
  if (!CGRectEqualToRect(v17, v18))
  {
    if (width != v11)
    {
      rowData = self->_rowData;
      -[UITableView _widthForContentInRect:](self, "_widthForContentInRect:", x, y, width, height);
      if (rowData)
        rowData->_tableViewWidth = v15;
    }
    v16.receiver = self;
    v16.super_class = (Class)UITableView;
    -[UIScrollView setFrame:](&v16, sel_setFrame_, x, y, width, height);
    -[UITableView _rectChangedWithNewSize:oldSize:](self, "_rectChangedWithNewSize:oldSize:", width, height, v11, v13);
  }
}

- (void)_performBatchUpdates:(id)a3 withContext:(id)a4 completion:(id)a5
{
  void (**v8)(_QWORD);
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id updateCompletionHandler;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void *v19;
  id v20;
  id v21;

  v8 = (void (**)(_QWORD))a3;
  v9 = a4;
  v10 = a5;
  v11 = self->_updateCompletionHandler;
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __59__UITableView__performBatchUpdates_withContext_completion___block_invoke;
  v19 = &unk_1E16BC218;
  v12 = v11;
  v20 = v12;
  v13 = v10;
  v21 = v13;
  v14 = (void *)objc_msgSend(&v16, "copy");
  updateCompletionHandler = self->_updateCompletionHandler;
  self->_updateCompletionHandler = v14;

  if ((*((_BYTE *)&self->_tableFlags + 27) & 0x20) == 0 || (dyld_program_sdk_at_least() & 1) == 0)
    -[UIView layoutBelowIfNeeded](self, "layoutBelowIfNeeded", v16, v17, v18, v19, v20);
  -[UITableView beginUpdates](self, "beginUpdates", v16, v17, v18, v19);
  if (v8)
    v8[2](v8);
  -[UITableView endUpdatesWithContext:](self, "endUpdatesWithContext:", v9);

}

- (id)_popReusableHeaderView:(BOOL)a3
{
  BOOL v3;
  const __CFString *v4;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v6;
  uint64_t v7;
  id result;

  v3 = !a3;
  if (a3)
    v4 = CFSTR("__UITableViewHeaderDefaultReuseIdentifier");
  else
    v4 = CFSTR("__UITableViewFooterDefaultReuseIdentifier");
  p_tableFlags = &self->_tableFlags;
  v6 = *((_QWORD *)&self->_tableFlags + 2);
  v7 = 512;
  if (!v3)
    v7 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = v6 & 0xFFFFFFFFFFFFFDFFLL | v7;
  result = -[UITableView dequeueReusableHeaderFooterViewWithIdentifier:](self, "dequeueReusableHeaderFooterViewWithIdentifier:", v4);
  *((_QWORD *)p_tableFlags + 2) = *((_QWORD *)p_tableFlags + 2) & 0xFFFFFFFFFFFFFDFFLL | (((v6 >> 9) & 1) << 9);
  return result;
}

- (NSIndexPath)indexPathForRowAtPoint:(CGPoint)point
{
  return (NSIndexPath *)-[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"), point.x, point.y);
}

- (CGRect)rectForSection:(NSInteger)section
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  -[UITableView _rectForSection:usingPresentationValues:](self, "_rectForSection:usingPresentationValues:", section, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (NSArray)indexPathsForSelectedRows
{
  return (NSArray *)-[UITableView _indexPathsForSelectedRowsUsingPresentationValues:](self, "_indexPathsForSelectedRowsUsingPresentationValues:", -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
}

- (NSArray)indexPathsForRowsInRect:(CGRect)rect
{
  return (NSArray *)-[UITableView _indexPathsForRowsInRect:usingPresentationValues:](self, "_indexPathsForRowsInRect:usingPresentationValues:", -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"), rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
}

- (NSArray)visibleCells
{
  return (NSArray *)-[UITableView _visibleCellsUsingPresentationValues:](self, "_visibleCellsUsingPresentationValues:", -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
}

- (void)insertRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation
{
  NSArray *v7;
  unint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  void *v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  UITableView *v17;
  __int16 v18;
  NSArray *v19;
  __int16 v20;
  UITableViewRowAnimation v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = indexPaths;
  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8645, CFSTR("UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@"), self);

  }
  v8 = insertRowsAtIndexPaths_withRowAnimation____s_category;
  if (!insertRowsAtIndexPaths_withRowAnimation____s_category)
  {
    v8 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v8, (unint64_t *)&insertRowsAtIndexPaths_withRowAnimation____s_category);
  }
  if ((*(_BYTE *)v8 & 1) != 0)
  {
    v10 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      *(_DWORD *)buf = 138413058;
      v15 = (id)objc_opt_class();
      v16 = 2048;
      v17 = self;
      v18 = 2112;
      v19 = v7;
      v20 = 2048;
      v21 = animation;
      v12 = v15;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> insertRowsAtIndexPaths:%@ withRowAnimation:%ld", buf, 0x2Au);

    }
  }
  v9 = -[UITableView _updateRowsAtIndexPaths:withUpdateAction:rowAnimation:usingPresentationValues:](self, "_updateRowsAtIndexPaths:withUpdateAction:rowAnimation:usingPresentationValues:", v7, 0, animation, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));

}

- (void)reloadRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation
{
  NSArray *v7;
  unint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  void *v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  UITableView *v17;
  __int16 v18;
  NSArray *v19;
  __int16 v20;
  UITableViewRowAnimation v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = indexPaths;
  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8659, CFSTR("UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@"), self);

  }
  v8 = reloadRowsAtIndexPaths_withRowAnimation____s_category;
  if (!reloadRowsAtIndexPaths_withRowAnimation____s_category)
  {
    v8 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v8, (unint64_t *)&reloadRowsAtIndexPaths_withRowAnimation____s_category);
  }
  if ((*(_BYTE *)v8 & 1) != 0)
  {
    v10 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      *(_DWORD *)buf = 138413058;
      v15 = (id)objc_opt_class();
      v16 = 2048;
      v17 = self;
      v18 = 2112;
      v19 = v7;
      v20 = 2048;
      v21 = animation;
      v12 = v15;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> reloadRowsAtIndexPaths:%@ withRowAnimation:%ld", buf, 0x2Au);

    }
  }
  if (animation == UITableViewRowAnimationAutomatic)
    animation = UITableViewRowAnimationFade;
  v9 = -[UITableView _updateRowsAtIndexPaths:withUpdateAction:rowAnimation:usingPresentationValues:](self, "_updateRowsAtIndexPaths:withUpdateAction:rowAnimation:usingPresentationValues:", v7, 2, animation, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));

}

- (UITableViewHeaderFooterView)headerViewForSection:(NSInteger)section
{
  return (UITableViewHeaderFooterView *)-[UITableView _headerViewForSection:usingPresentationValues:](self, "_headerViewForSection:usingPresentationValues:", section, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
}

- (CGRect)rectForRowAtIndexPath:(NSIndexPath *)indexPath
{
  NSIndexPath *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect result;

  v4 = indexPath;
  -[UITableView _rectForRowAtIndexPath:usingPresentationValues:](self, "_rectForRowAtIndexPath:usingPresentationValues:", v4, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;

  v13 = v6;
  v14 = v8;
  v15 = v10;
  v16 = v12;
  result.size.height = v16;
  result.size.width = v15;
  result.origin.y = v14;
  result.origin.x = v13;
  return result;
}

- (CGRect)_rectForRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4
{
  id v6;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGRect result;

  v6 = a3;
  if (a4
    || (shadowUpdatesController = self->_shadowUpdatesController) == 0
    || (-[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v6), v8 = objc_claimAutoreleasedReturnValue(), v6, (v6 = (id)v8) != 0))
  {
    -[UITableView _tableViewRectForRowAtIndexPath:canGuess:](self, "_tableViewRectForRowAtIndexPath:canGuess:", v6, 0);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;

  }
  else
  {
    v10 = *MEMORY[0x1E0C9D648];
    v12 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v14 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v16 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  }
  v17 = v10;
  v18 = v12;
  v19 = v14;
  v20 = v16;
  result.size.height = v20;
  result.size.width = v19;
  result.origin.y = v18;
  result.origin.x = v17;
  return result;
}

- (CGRect)_tableViewRectForRowAtIndexPath:(id)a3 canGuess:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  UITableViewRowData *rowData;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGRect result;

  v4 = a4;
  v6 = a3;
  v7 = objc_msgSend(v6, "section");
  v8 = v7;
  rowData = self->_rowData;
  if (rowData)
    rowData = (UITableViewRowData *)rowData->_numSections;
  if (v7 >= (uint64_t)rowData
    || (v10 = objc_msgSend(v6, "row"), v10 >= -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, v8)))
  {
    v12 = *MEMORY[0x1E0C9D648];
    v14 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v16 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v18 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  }
  else
  {
    -[UITableView _rectForRowAtIndexPath:canGuess:](self, "_rectForRowAtIndexPath:canGuess:", v6, v4);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    if ((*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0
      && self->_wrapperView
      && dyld_program_sdk_at_least())
    {
      -[UIView convertRect:toView:](self->_wrapperView, "convertRect:toView:", self, v12, v14, v16, v18);
      v12 = v19;
      v14 = v20;
      v16 = v21;
      v18 = v22;
    }
  }

  v23 = v12;
  v24 = v14;
  v25 = v16;
  v26 = v18;
  result.size.height = v26;
  result.size.width = v25;
  result.origin.y = v24;
  result.origin.x = v23;
  return result;
}

- (void)insertSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation
{
  NSIndexSet *v7;
  unint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  void *v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  UITableView *v17;
  __int16 v18;
  NSIndexSet *v19;
  __int16 v20;
  UITableViewRowAnimation v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = sections;
  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8564, CFSTR("UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@"), self);

  }
  v8 = insertSections_withRowAnimation____s_category;
  if (!insertSections_withRowAnimation____s_category)
  {
    v8 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v8, (unint64_t *)&insertSections_withRowAnimation____s_category);
  }
  if ((*(_BYTE *)v8 & 1) != 0)
  {
    v10 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      *(_DWORD *)buf = 138413058;
      v15 = (id)objc_opt_class();
      v16 = 2048;
      v17 = self;
      v18 = 2112;
      v19 = v7;
      v20 = 2048;
      v21 = animation;
      v12 = v15;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> insertSections:%@ withRowAnimation:%ld", buf, 0x2Au);

    }
  }
  v9 = -[UITableView _updateSections:withUpdateAction:rowAnimation:headerFooterOnly:usingPresentationValues:](self, "_updateSections:withUpdateAction:rowAnimation:headerFooterOnly:usingPresentationValues:", v7, 0, animation, 0, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));

}

- (void)reloadSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation
{
  NSIndexSet *v7;
  unint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  void *v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  UITableView *v17;
  __int16 v18;
  NSIndexSet *v19;
  __int16 v20;
  UITableViewRowAnimation v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = sections;
  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8578, CFSTR("UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@"), self);

  }
  v8 = reloadSections_withRowAnimation____s_category;
  if (!reloadSections_withRowAnimation____s_category)
  {
    v8 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v8, (unint64_t *)&reloadSections_withRowAnimation____s_category);
  }
  if ((*(_BYTE *)v8 & 1) != 0)
  {
    v10 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      *(_DWORD *)buf = 138413058;
      v15 = (id)objc_opt_class();
      v16 = 2048;
      v17 = self;
      v18 = 2112;
      v19 = v7;
      v20 = 2048;
      v21 = animation;
      v12 = v15;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> reloadSections:%@ withRowAnimation:%ld", buf, 0x2Au);

    }
  }
  if (animation == UITableViewRowAnimationAutomatic)
    animation = UITableViewRowAnimationFade;
  v9 = -[UITableView _updateSections:withUpdateAction:rowAnimation:headerFooterOnly:usingPresentationValues:](self, "_updateSections:withUpdateAction:rowAnimation:headerFooterOnly:usingPresentationValues:", v7, 2, animation, 0, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));

}

- (id)_updateSections:(id)a3 withUpdateAction:(int)a4 rowAnimation:(int64_t)a5 headerFooterOnly:(BOOL)a6 usingPresentationValues:(BOOL)a7
{
  uint64_t v10;
  id v13;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v15;
  NSIndexPath *swipedIndexPath;
  int v17;
  void *v18;
  BOOL v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v26;
  void *v27;
  _QWORD v28[5];
  id v29;
  void *v30;
  int64_t v31;
  int v32;
  BOOL v33;

  v10 = *(_QWORD *)&a4;
  v13 = a3;
  if (!a7)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController sectionsAfterShadowUpdates:allowAppendingInsert:](shadowUpdatesController, "sectionsAfterShadowUpdates:allowAppendingInsert:", v13, (_DWORD)v10 == 0);
      v15 = objc_claimAutoreleasedReturnValue();

      v13 = (id)v15;
    }
  }
  if ((*((_BYTE *)&self->_tableFlags + 21) & 0x80) != 0)
  {
    swipedIndexPath = self->_swipedIndexPath;
    if (!swipedIndexPath)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromSelector(a2);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8529, CFSTR("UITableView internal inconsistency: the _swipedIndexPath cannot be nil if the swipe to delete row is being deleted in %@"), v27);

      swipedIndexPath = self->_swipedIndexPath;
    }
    v17 = objc_msgSend(v13, "containsIndex:", -[NSIndexPath section](swipedIndexPath, "section"));
    if ((_DWORD)v10 == 2 && v17)
      -[UISwipeActionController resetSwipedItemAnimated:completion:](self->_swipeActionController, "resetSwipedItemAnimated:completion:", 0, 0);
  }
  if (-[UITableView _isPerformingShadowUpdates](self, "_isPerformingShadowUpdates"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v13, "count"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v18 = 0;
  }
  v19 = -[UITableView _isUpdating](self, "_isUpdating");
  if (!v19)
    -[UITableView _setupCellAnimations](self, "_setupCellAnimations");
  -[UITableView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", v10);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __102__UITableView__updateSections_withUpdateAction_rowAnimation_headerFooterOnly_usingPresentationValues___block_invoke;
  v28[3] = &unk_1E16E3DE8;
  v32 = v10;
  v33 = a6;
  v31 = a5;
  v28[4] = self;
  v21 = v18;
  v29 = v21;
  v30 = v20;
  v22 = v20;
  objc_msgSend(v13, "enumerateIndexesUsingBlock:", v28);
  if (!v19)
    -[UITableView _endCellAnimationsWithContext:](self, "_endCellAnimationsWithContext:", 0);
  v23 = v30;
  v24 = v21;

  return v24;
}

- (NSIndexPath)indexPathForSelectedRow
{
  return (NSIndexPath *)-[UITableView _indexPathForSelectedRowUsingPresentationValues:](self, "_indexPathForSelectedRowUsingPresentationValues:", -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
}

- (UITableViewCell)cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
  NSIndexPath *v4;
  void *v5;

  v4 = indexPath;
  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v4, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return (UITableViewCell *)v5;
}

- (UITableViewHeaderFooterView)dequeueReusableHeaderFooterViewWithIdentifier:(NSString *)identifier
{
  void *v4;

  -[UITableView _dequeueReusableViewOfType:withIdentifier:](self, "_dequeueReusableViewOfType:withIdentifier:", 2, identifier);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (_IsKindOfUITableViewHeaderFooterView(v4))
    -[UITableView _setupSectionView:isHeader:forSection:](self, "_setupSectionView:isHeader:forSection:", v4, (*((_QWORD *)&self->_tableFlags + 2) & 0x200) == 0, 0x7FFFFFFFFFFFFFFFLL);
  return (UITableViewHeaderFooterView *)v4;
}

- (NSInteger)numberOfSections
{
  return -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
}

- (UITableViewCell)dequeueReusableCellWithIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath *)indexPath
{
  NSIndexPath *v6;
  NSString *v7;
  void *v8;

  v6 = indexPath;
  v7 = identifier;
  -[UITableView _dequeueReusableCellWithIdentifier:forIndexPath:usingPresentationValues:](self, "_dequeueReusableCellWithIdentifier:forIndexPath:usingPresentationValues:", v7, v6, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return (UITableViewCell *)v8;
}

- (NSInteger)numberOfRowsInSection:(NSInteger)section
{
  return -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", section, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
}

- (NSArray)indexPathsForVisibleRows
{
  return (NSArray *)-[UITableView _indexPathsForVisibleRowsUsingPresentationValues:](self, "_indexPathsForVisibleRowsUsingPresentationValues:", -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
}

- (BOOL)_isUsingPresentationValues
{
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  _BOOL4 v4;

  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController
    && -[_UITableViewShadowUpdatesController hasShadowUpdates](shadowUpdatesController, "hasShadowUpdates"))
  {
    return *((unsigned __int8 *)&self->_tableFlags + 27) >> 7;
  }
  else
  {
    LOBYTE(v4) = 1;
  }
  return v4;
}

- (id)_dequeueReusableCellWithIdentifier:(id)a3 forIndexPath:(id)a4 usingPresentationValues:(BOOL)a5
{
  id v9;
  id v10;
  void *v11;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v13;
  void *v14;
  NSIndexPath *indexPathBeingReconfigured;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v24;
  unint64_t v25;
  NSObject *v26;
  unint64_t v27;
  NSObject *v28;
  uint8_t buf[4];
  id v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  if (dyld_program_sdk_at_least())
  {
    if (!v10)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 10093, CFSTR("Attempted to dequeue a cell for a nil index path"));

    }
  }
  else if (!v10)
  {
    v25 = qword_1EDDB0A30;
    if (!qword_1EDDB0A30)
    {
      v25 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v25, (unint64_t *)&qword_1EDDB0A30);
    }
    v26 = *(NSObject **)(v25 + 8);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v26, OS_LOG_TYPE_ERROR, "Attempted to dequeue a cell for a nil index path", buf, 2u);
    }
  }
  if (!a5)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v10);
      v13 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v13;
    }
  }
  -[UITableView dequeueReusableCellWithIdentifier:](self, "dequeueReusableCellWithIdentifier:", v9);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v14)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 10099, CFSTR("unable to dequeue a cell with identifier %@ - must register a nib or a class for the identifier or connect a prototype cell in a storyboard"), v9);

  }
  indexPathBeingReconfigured = self->_indexPathBeingReconfigured;
  if (indexPathBeingReconfigured)
  {
    if ((-[NSIndexPath isEqual:](indexPathBeingReconfigured, "isEqual:", v10) & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView dataSourceIndexPathForPresentationIndexPath:](self, "dataSourceIndexPathForPresentationIndexPath:", v10);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView dataSourceIndexPathForPresentationIndexPath:](self, "dataSourceIndexPathForPresentationIndexPath:", self->_indexPathBeingReconfigured);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 10101, CFSTR("Attempted to dequeue a cell for a different index path than the index path being reconfigured, which is not allowed. You must dequeue a cell for the same index path that is being reconfigured to obtain the existing cell. Dequeued index path: %@; Reconfigured index path: %@; Existing cell: %@"),
        v17,
        v18,
        self->_cellBeingReconfigured);

    }
  }
  else if (-[UITableView _shouldConfigureCellForDisplayDuringDequeueForIndexPath:](self, "_shouldConfigureCellForDisplayDuringDequeueForIndexPath:", v10))
  {
    v19 = dyld_program_sdk_at_least();
    -[NSMutableDictionary objectForKeyedSubscript:](self->_tentativeCells, "objectForKeyedSubscript:", v10);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      if (v20)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 10107, CFSTR("Attempted to dequeue multiple cells for the same index path, which is not allowed. If you really need to dequeue more cells than the table view is requesting, use the -dequeueReusableCellWithIdentifier: method (without an index path). Cell identifier: %@, index path: %@"), v9, v10);

      }
    }
    else if (v20)
    {
      v27 = qword_1EDDB0A38;
      if (!qword_1EDDB0A38)
      {
        v27 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v27, (unint64_t *)&qword_1EDDB0A38);
      }
      v28 = *(NSObject **)(v27 + 8);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v30 = v9;
        v31 = 2112;
        v32 = v10;
        _os_log_impl(&dword_185066000, v28, OS_LOG_TYPE_ERROR, "Attempted to dequeue multiple cells for the same index path, which is not allowed. If you really need to dequeue more cells than the table view is requesting, use the -dequeueReusableCellWithIdentifier: method (without an index path). Cell identifier: %@, index path: %@", buf, 0x16u);
      }
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:](self->_tentativeCells, "setObject:forKeyedSubscript:", v14, v10);
    -[UITableView _configureCellForDisplay:forIndexPath:](self, "_configureCellForDisplay:forIndexPath:", v14, v10);
  }
  else
  {
    objc_msgSend(v14, "_setTableView:", self);
    -[UITableView _constants](self, "_constants");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "_setConstants:", v22);

    objc_msgSend(v14, "setTableViewStyle:", -[UITableView _tableStyle](self, "_tableStyle"));
  }

  return v14;
}

- (UITableViewCell)dequeueReusableCellWithIdentifier:(NSString *)identifier
{
  NSString *v5;
  UITableViewCell *cellBeingReconfigured;
  NSString *v7;
  NSString *v8;
  void *v9;
  char v10;
  UITableViewCell *v11;
  void *v12;
  UITableViewCell *v13;
  uint64_t v15;

  v5 = identifier;
  cellBeingReconfigured = self->_cellBeingReconfigured;
  if (cellBeingReconfigured)
  {
    -[UITableViewCell reuseIdentifier](cellBeingReconfigured, "reuseIdentifier");
    v7 = (NSString *)(id)objc_claimAutoreleasedReturnValue();
    v8 = v5;
    v9 = v8;
    if (v7 == v8)
    {

      v12 = v9;
    }
    else
    {
      if (v8 && v7)
      {
        v10 = -[NSString isEqual:](v7, "isEqual:", v8);

        if ((v10 & 1) != 0)
        {
LABEL_10:
          v11 = self->_cellBeingReconfigured;
          goto LABEL_11;
        }
      }
      else
      {

      }
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableViewCell reuseIdentifier](self->_cellBeingReconfigured, "reuseIdentifier");
      v15 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 10079, CFSTR("Attempted to dequeue a cell for a different reuse identifier than the existing cell when reconfiguring a row, which is not allowed. You must dequeue a cell using the same reuse identifier that was used to dequeue the cell originally to obtain the existing cell. Dequeued reuse identifier: %@; Original reuse identifier: %@; Existing cell: %@"),
        v9,
        v15,
        self->_cellBeingReconfigured);
      v9 = (void *)v15;
    }

    goto LABEL_10;
  }
  -[UITableView _dequeueReusableViewOfType:withIdentifier:](self, "_dequeueReusableViewOfType:withIdentifier:", 1, v5);
  v11 = (UITableViewCell *)objc_claimAutoreleasedReturnValue();
LABEL_11:
  v13 = v11;

  return v13;
}

- (BOOL)_shouldConfigureCellForDisplayDuringDequeueForIndexPath:(id)a3
{
  id v4;
  BOOL v5;
  void *v7;
  double v8;

  v4 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0
    && -[UITableView _estimatesRowHeights](self, "_estimatesRowHeights"))
  {
    if ((*((_BYTE *)&self->_tableFlags + 4) & 1) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "tableView:heightForRowAtIndexPath:", self, v4);
      v5 = v8 != -1.0;

    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

- (void)endUpdatesWithContext:(id)a3
{
  id v4;
  unint64_t v5;
  int64_t v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  int v10;
  id v11;
  __int16 v12;
  UITableView *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = endUpdatesWithContext____s_category[0];
  if (!endUpdatesWithContext____s_category[0])
  {
    v5 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v5, endUpdatesWithContext____s_category);
  }
  if ((*(_BYTE *)v5 & 1) != 0)
  {
    v7 = *(NSObject **)(v5 + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = v7;
      v10 = 138412546;
      v11 = (id)objc_opt_class();
      v12 = 2048;
      v13 = self;
      v9 = v11;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "<%@ %p> endUpdatesWithContext", (uint8_t *)&v10, 0x16u);

    }
  }
  v6 = self->_updateCount - 1;
  self->_updateCount = v6;
  if (!v6)
    -[UITableView _endCellAnimationsWithContext:](self, "_endCellAnimationsWithContext:", v4);

}

- (void)beginUpdates
{
  unint64_t v3;
  int64_t updateCount;
  NSObject *v5;
  NSObject *v6;
  id v7;
  int v8;
  id v9;
  __int16 v10;
  UITableView *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = beginUpdates___s_category;
  if (!beginUpdates___s_category)
  {
    v3 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v3, (unint64_t *)&beginUpdates___s_category);
  }
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v5 = *(NSObject **)(v3 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = v5;
      v8 = 138412546;
      v9 = (id)objc_opt_class();
      v10 = 2048;
      v11 = self;
      v7 = v9;
      _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "<%@ %p> beginUpdates", (uint8_t *)&v8, 0x16u);

    }
  }
  updateCount = self->_updateCount;
  if (!updateCount)
  {
    -[UITableView _setupCellAnimations](self, "_setupCellAnimations");
    updateCount = self->_updateCount;
  }
  self->_updateCount = updateCount + 1;
}

- (void)_setupCellAnimations
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  _UITableViewPrefetchContext *prefetchContext;

  p_tableFlags = &self->_tableFlags;
  if ((*((_BYTE *)&self->_tableFlags + 28) & 1) == 0)
    -[UITableView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 0);
  *((_QWORD *)p_tableFlags + 1) = *((_QWORD *)p_tableFlags + 1) & 0xFFF7FFFFFFFFFFFFLL | (((*((_QWORD *)p_tableFlags + 1) >> 52) & 1) << 51);
  -[UITableView _suspendReloads](self, "_suspendReloads");
  prefetchContext = self->_prefetchContext;
  if (prefetchContext)
    -[_UITableViewPrefetchContext cancelWithNewMaxIndex:]((uint64_t)prefetchContext, prefetchContext->_maxIndex);
}

void __102__UITableView__updateSections_withUpdateAction_rowAnimation_headerFooterOnly_usingPresentationValues___block_invoke(uint64_t a1, uint64_t a2)
{
  UIUpdateItem *v4;
  int v5;
  void *v6;
  void *v7;
  id *v8;

  v4 = [UIUpdateItem alloc];
  v5 = *(_DWORD *)(a1 + 64);
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[UIUpdateItem initWithAction:forIndexPath:animation:]((id *)&v4->super.isa, v5, v6, *(void **)(a1 + 56));

  if (v8)
    *((_BYTE *)v8 + 16) = (_BYTE)v8[2] & 0xFD | (2 * *(_BYTE *)(a1 + 68));
  objc_msgSend(*(id *)(a1 + 32), "_addToShadowUpdatesControllerIfNeeded:");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);
  objc_msgSend(*(id *)(a1 + 48), "addObject:", v8);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3096) &= ~0x8000000uLL;

}

- (id)_updateRowsAtIndexPaths:(id)a3 withUpdateAction:(int)a4 rowAnimation:(int64_t)a5 usingPresentationValues:(BOOL)a6
{
  uint64_t v8;
  id v10;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  id *v18;
  void *v19;
  BOOL v21;
  id obj;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v8 = *(_QWORD *)&a4;
  v29 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  if (!a6)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathsAfterShadowUpdates:allowAppendingInsert:](shadowUpdatesController, "indexPathsAfterShadowUpdates:allowAppendingInsert:", v10, (_DWORD)v8 == 0);
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }
  }
  if (-[UITableView _isPerformingShadowUpdates](self, "_isPerformingShadowUpdates"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v10, "count"));
    v23 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v23 = 0;
  }
  v21 = -[UITableView _isUpdating](self, "_isUpdating");
  if (!v21)
    -[UITableView _setupCellAnimations](self, "_setupCellAnimations");
  -[UITableView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", v8);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = v10;
  v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v25 != v16)
          objc_enumerationMutation(obj);
        v18 = -[UIUpdateItem initWithAction:forIndexPath:animation:]((id *)[UIUpdateItem alloc], v8, *(void **)(*((_QWORD *)&v24 + 1) + 8 * i), (void *)a5);
        -[UITableView _addToShadowUpdatesControllerIfNeeded:](self, "_addToShadowUpdatesControllerIfNeeded:", v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend(v23, "addObject:", v19);
        objc_msgSend(v13, "addObject:", v18);

      }
      v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v15);
  }

  if (!v21)
    -[UITableView _endCellAnimationsWithContext:](self, "_endCellAnimationsWithContext:", 0);

  return v23;
}

- (id)_addToShadowUpdatesControllerIfNeeded:(id)a3
{
  id v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  id v8;

  v4 = a3;
  if (-[UITableView _isPerformingShadowUpdates](self, "_isPerformingShadowUpdates"))
  {
    -[UITableView _shadowUpdatesController](self, "_shadowUpdatesController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "collectionViewUpdateItem");
    v6 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "appendShadowUpdate:", v6);
    if (v6)
      v7 = (void *)v6[11];
    else
      v7 = 0;
    v8 = v7;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (BOOL)_isPerformingShadowUpdates
{
  return (*((unsigned __int8 *)&self->_tableFlags + 27) >> 3) & 1;
}

- (void)_notifyDidScroll
{
  objc_super v2;

  if ((*((_BYTE *)&self->_tableFlags + 28) & 1) == 0)
  {
    v2.receiver = self;
    v2.super_class = (Class)UITableView;
    -[UIScrollView _notifyDidScroll](&v2, sel__notifyDidScroll);
  }
}

- (void)_rebuildGeometry
{
  -[UITableView _rebuildGeometryForcingRowDataUpdate:skipContentOffsetAdjustment:updateImmediatelyIfPossible:](self, "_rebuildGeometryForcingRowDataUpdate:skipContentOffsetAdjustment:updateImmediatelyIfPossible:", 0, 1, 0);
}

- (void)_deselectAllNonMultiSelectRowsAnimated:(BOOL)a3 notifyDelegate:(BOOL)a4
{
  -[UITableView _deselectAllRowsAnimated:notifyDelegate:excludingMultiSelectRows:](self, "_deselectAllRowsAnimated:notifyDelegate:excludingMultiSelectRows:", a3, a4, 1);
}

- (void)_adjustForAutomaticKeyboardInfo:(id)a3 animated:(BOOL)a4 lastAdjustment:(double *)a5
{
  _BOOL8 v6;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  objc_super v21;

  v6 = a4;
  v8 = a3;
  if (-[UIScrollView _isFirstResponderKeyboardAvoidanceEnabled](self, "_isFirstResponderKeyboardAvoidanceEnabled"))
  {
    -[UITableView _contentInset](self, "_contentInset");
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v21.receiver = self;
    v21.super_class = (Class)UITableView;
    -[UIScrollView _adjustForAutomaticKeyboardInfo:animated:lastAdjustment:](&v21, sel__adjustForAutomaticKeyboardInfo_animated_lastAdjustment_, v8, v6, a5);
    -[UITableView _contentInset](self, "_contentInset");
    if (v12 != v20 || v10 != v17 || v16 != v19 || v14 != v18)
      -[UITableView _setNeedsIndexBarInsetsUpdate](self, "_setNeedsIndexBarInsetsUpdate");
    if (*a5 != 0.0)
      -[UITableView _scrollFirstResponderCellToVisible:](self, "_scrollFirstResponderCellToVisible:", 1, *a5);
  }

}

- (void)_deselectAllRowsAnimated:(BOOL)a3 notifyDelegate:(BOOL)a4 excludingMultiSelectRows:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL8 v6;
  _BOOL8 v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v5 = a5;
  v6 = a4;
  v7 = a3;
  v27 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v9 = (void *)-[NSMutableArray copy](self->_selectedIndexPaths, "copy");
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (!v10)
  {

    return;
  }
  v11 = v10;
  v20 = v5;
  v21 = 0;
  v12 = *(_QWORD *)v23;
  do
  {
    v13 = 0;
    do
    {
      if (*(_QWORD *)v23 != v12)
        objc_enumerationMutation(v9);
      v14 = *(id *)(*((_QWORD *)&v22 + 1) + 8 * v13);
      if (v5 && -[UITableView _isRowMultiSelect:](self, "_isRowMultiSelect:", v14))
      {
        v15 = v14;
        goto LABEL_13;
      }
      if (!v6 || (*((_BYTE *)&self->_tableFlags + 5) & 0x80) == 0)
      {
        v15 = v14;
LABEL_12:
        -[UITableView _deselectRowAtIndexPath:animated:notifyDelegate:](self, "_deselectRowAtIndexPath:animated:notifyDelegate:", v15, v7, v6);
        v21 = 1;
        goto LABEL_13;
      }
      v16 = v9;
      v17 = v7;
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "tableView:willDeselectRowAtIndexPath:", self, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v15)
      {
        v7 = v17;
LABEL_20:
        v9 = v16;
        v5 = v20;
        goto LABEL_13;
      }
      v7 = v17;
      if (objc_msgSend(v15, "row") == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_20;
      v9 = v16;
      v5 = v20;
      if (objc_msgSend(v15, "section") != 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_12;
LABEL_13:

      ++v13;
    }
    while (v11 != v13);
    v19 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    v11 = v19;
  }
  while (v19);

  if (v6 & v21)
    -[UITableView _selectedIndexPathsDidChange](self, "_selectedIndexPathsDidChange");
}

uint64_t __36__UITableView_selectionFollowsFocus__block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(*(id *)(a1 + 32), "_focusBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "defaultValueForSelectionFollowsFocusInTableView:", *(_QWORD *)(a1 + 32));

  return v3;
}

- (void)setDataSource:(id)dataSource
{
  id v4;
  char v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  id v13;
  unint64_t v14;
  unsigned int v15;
  _UIWeakHelper *v16;
  _UIWeakHelper *v17;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  id v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  void *v66;
  _QWORD v67[4];
  id v68;
  id location;
  _QWORD block[4];
  id v71;
  UITableView *v72;

  v4 = dataSource;
  if (!v4)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  v5 = dyld_program_sdk_at_least();
  v6 = v4;
  if ((v5 & 1) == 0)
  {
    v7 = objc_msgSend(v4, sel_allowsWeakReference);
    v6 = v4;
    if ((v7 & 1) == 0)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __29__UITableView_setDataSource___block_invoke;
      block[3] = &unk_1E16B1B50;
      v8 = v4;
      v71 = v8;
      v72 = self;
      if (setDataSource__once_1 != -1)
      {
        dispatch_once(&setDataSource__once_1, block);
        v8 = v71;
      }

      goto LABEL_7;
    }
  }
LABEL_8:
  v9 = v6;

  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  v11 = WeakRetained;
  if (WeakRetained != v9 || !v9 && (*((_BYTE *)&self->_tableFlags + 2) & 2) != 0)
  {
    if (WeakRetained)
      objc_setAssociatedObject(WeakRetained, (char *)&self->super.super.super.super.isa + 2, 0, (void *)1);
    objc_storeWeak((id *)&self->_dataSource, v9);
    v12 = v9;
    -[UITableView dataSource](self, "dataSource");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    if (v12 == v13)
    {
      v15 = -[UITableView allowsWeakReference](self, sel_allowsWeakReference);

      v14 = (unint64_t)(v12 != 0) << 17;
      if (v12 && v15)
      {
        objc_initWeak(&location, self);
        v16 = [_UIWeakHelper alloc];
        v67[0] = MEMORY[0x1E0C809B0];
        v67[1] = 3221225472;
        v67[2] = __29__UITableView_setDataSource___block_invoke_468;
        v67[3] = &unk_1E16B3F40;
        objc_copyWeak(&v68, &location);
        v17 = -[_UIWeakHelper initWithDeallocationBlock:](v16, "initWithDeallocationBlock:", v67);
        objc_setAssociatedObject(v12, (char *)&self->super.super.super.super.isa + 2, v17, (void *)1);

        objc_destroyWeak(&v68);
        objc_destroyWeak(&location);
        v14 = 0x20000;
      }
    }
    else
    {

      v14 = (unint64_t)(v12 != 0) << 17;
    }

    p_tableFlags = &self->_tableFlags;
    v19 = *((_QWORD *)&self->_tableFlags + 1);
    *(_QWORD *)&self->_tableFlags = *(_QWORD *)&self->_tableFlags & 0xFFFFFFFFFFFDFFFFLL | v14;
    *((_QWORD *)&self->_tableFlags + 1) = v19;
    *(_QWORD *)&self->_tableFlags = *(_QWORD *)&self->_tableFlags & 0xFFFFFFFFFFFFFFFELL | objc_opt_respondsToSelector() & 1;
    v20 = objc_opt_respondsToSelector();
    v21 = 2;
    if ((v20 & 1) == 0)
      v21 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFFFDLL | v21;
    v22 = objc_opt_respondsToSelector();
    v23 = 4;
    if ((v22 & 1) == 0)
      v23 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFFFBLL | v23;
    v24 = objc_opt_respondsToSelector();
    v25 = 8;
    if ((v24 & 1) == 0)
      v25 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFFF7 | v25;
    v26 = objc_opt_respondsToSelector();
    v27 = 16;
    if ((v26 & 1) == 0)
      v27 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFFEFLL | v27;
    v28 = objc_opt_respondsToSelector();
    v29 = 64;
    if ((v28 & 1) == 0)
      v29 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFFBFLL | v29;
    v30 = objc_opt_respondsToSelector();
    v31 = 128;
    if ((v30 & 1) == 0)
      v31 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFF7FLL | v31;
    v32 = objc_opt_respondsToSelector();
    v33 = 256;
    if ((v32 & 1) == 0)
      v33 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFEFFLL | v33;
    v34 = objc_opt_respondsToSelector();
    v35 = 512;
    if ((v34 & 1) == 0)
      v35 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFDFFLL | v35;
    v36 = objc_opt_respondsToSelector();
    v37 = 0x4000000;
    if ((v36 & 1) == 0)
      v37 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFBFFFFFFLL | v37;
    v38 = objc_opt_respondsToSelector();
    v39 = 1024;
    if ((v38 & 1) == 0)
      v39 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFBFFLL | v39;
    v40 = objc_opt_respondsToSelector();
    v41 = 2048;
    if ((v40 & 1) == 0)
      v41 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFF7FFLL | v41;
    v42 = objc_opt_respondsToSelector();
    v43 = 4096;
    if ((v42 & 1) == 0)
      v43 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFEFFFLL | v43;
    v44 = objc_opt_respondsToSelector();
    v45 = 0x2000;
    if ((v44 & 1) == 0)
      v45 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFDFFFLL | v45;
    v46 = objc_opt_respondsToSelector();
    v47 = 0x4000;
    if ((v46 & 1) == 0)
      v47 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFBFFFLL | v47;
    v48 = objc_opt_respondsToSelector();
    v49 = 0x8000;
    if ((v48 & 1) == 0)
      v49 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFF7FFFLL | v49;
    v50 = objc_opt_respondsToSelector();
    v51 = 0x10000;
    if ((v50 & 1) == 0)
      v51 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFEFFFFLL | v51;
    v52 = objc_opt_respondsToSelector();
    v53 = 32;
    if ((v52 & 1) == 0)
      v53 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFFDFLL | v53;
    v54 = objc_opt_respondsToSelector();
    v55 = 0x20000000;
    if ((v54 & 1) == 0)
      v55 = 0;
    *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFDFFFFFFFLL | v55;
    if (dyld_program_sdk_at_least()
      && (*((_BYTE *)&self->_tableFlags + 27) & 0x20) != 0
      && (objc_opt_respondsToSelector() & 1) != 0)
    {
      v56 = v12;
      if (objc_msgSend(v56, "_subclassOverridesMethodWithSelector:", sel_tableView_titleForHeaderInSection_))v57 = 8;
      else
        v57 = 0;
      *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFFF7 | v57 & *(_QWORD *)p_tableFlags;
      if (objc_msgSend(v56, "_subclassOverridesMethodWithSelector:", sel_tableView_titleForFooterInSection_))v58 = 16;
      else
        v58 = 0;
      *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFFEFLL | v58 & *(_QWORD *)p_tableFlags;
      if (objc_msgSend(v56, "_subclassOverridesMethodWithSelector:", sel_tableView_moveRowAtIndexPath_toIndexPath_))v59 = 0x4000000;
      else
        v59 = 0;
      *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFBFFFFFFLL | v59 & *(_QWORD *)p_tableFlags;
      if (objc_msgSend(v56, "_subclassOverridesMethodWithSelector:", sel_tableView_canMoveRowAtIndexPath_))v60 = 2048;
      else
        v60 = 0;
      *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFF7FFLL | v60 & *(_QWORD *)p_tableFlags;
      if (objc_msgSend(v56, "_subclassOverridesMethodWithSelector:", sel_tableView_canEditRowAtIndexPath_))v61 = 1024;
      else
        v61 = 0;
      *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFBFFLL | v61 & *(_QWORD *)p_tableFlags;
      if (objc_msgSend(v56, "_subclassOverridesMethodWithSelector:", sel_tableView_commitEditingStyle_forRowAtIndexPath_))v62 = 64;
      else
        v62 = 0;
      *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFFBFLL | v62 & *(_QWORD *)p_tableFlags;
      if (objc_msgSend(v56, "_subclassOverridesMethodWithSelector:", sel_sectionIndexTitlesForTableView_))
        v63 = 128;
      else
        v63 = 0;
      *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFF7FLL | v63 & *(_QWORD *)p_tableFlags;
      v64 = objc_msgSend(v56, "_subclassOverridesMethodWithSelector:", sel_tableView_sectionForSectionIndexTitle_atIndex_);

      if (v64)
        v65 = 512;
      else
        v65 = 0;
      *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFFFDFFLL | v65 & *(_QWORD *)p_tableFlags;
    }
    *((_QWORD *)&self->_tableFlags + 1) |= 0x200000000000000uLL;
    -[UITableView _setRowCount:](self, "_setRowCount:", 0x7FFFFFFFFFFFFFFFLL);
    -[UITableView _createOrUninstallDragAndDropControllersIfNeeded](self, "_createOrUninstallDragAndDropControllersIfNeeded");
    -[UITableView _identityTracker:](self, "_identityTracker:", 0);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIIndexPathIdentityTracker reset]((uint64_t)v66);

    -[UIContextMenuInteraction _retargetDismissingMenuWithInternalIdentifier:toPreview:force:](self->_contextMenuInteraction, "_retargetDismissingMenuWithInternalIdentifier:toPreview:force:", 0, 0, 1);
  }

}

- (id)dataSource
{
  return objc_loadWeakRetained((id *)&self->_dataSource);
}

- (void)setDelegate:(id)delegate
{
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  void *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  void *v178;
  char isKindOfClass;
  _BOOL4 v180;
  objc_super v181;
  _QWORD block[4];
  id v183;
  UITableView *v184;

  v4 = delegate;
  -[UITableView delegate](self, "delegate");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    if ((dyld_program_sdk_at_least() & 1) != 0 || (objc_msgSend(v4, sel_allowsWeakReference) & 1) != 0)
    {
      if (v5 == v4 && (*((_BYTE *)&self->_tableFlags + 13) & 0x10) == 0)
        goto LABEL_208;
      goto LABEL_11;
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __27__UITableView_setDelegate___block_invoke;
    block[3] = &unk_1E16B1B50;
    v183 = v4;
    v184 = self;
    v6 = setDelegate__once_2;
    v7 = v4;
    v8 = v7;
    if (v6 == -1)
    {
      v9 = v7;
    }
    else
    {
      dispatch_once(&setDelegate__once_2, block);
      v9 = v183;
    }

    v4 = 0;
  }
  if (!v5)
    goto LABEL_208;
LABEL_11:
  p_tableFlags = &self->_tableFlags;
  if ((*((_BYTE *)&self->_tableFlags + 25) & 1) == 0)
  {
    v180 = -[UITableView _estimatesHeights](self, "_estimatesHeights");
    v181.receiver = self;
    v181.super_class = (Class)UITableView;
    -[UIScrollView setDelegate:](&v181, sel_setDelegate_, v4);
    -[UITableView delegate](self, "delegate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFEFFFFFFFFFFFLL | ((unint64_t)(v11 != 0) << 44);
    v12 = objc_opt_respondsToSelector();
    v13 = 0x8000000;
    if ((v12 & 1) == 0)
      v13 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFF7FFFFFFLL | v13;
    v14 = objc_opt_respondsToSelector();
    v15 = 0x10000000;
    if ((v14 & 1) == 0)
      v15 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFEFFFFFFFLL | v15;
    v16 = objc_opt_respondsToSelector();
    v17 = 0x20000000;
    if ((v16 & 1) == 0)
      v17 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFDFFFFFFFLL | v17;
    v18 = objc_opt_respondsToSelector();
    v19 = 0x40000000;
    if ((v18 & 1) == 0)
      v19 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFBFFFFFFFLL | v19;
    v20 = objc_opt_respondsToSelector();
    v21 = 0x80000000;
    if ((v20 & 1) == 0)
      v21 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFF7FFFFFFFLL | v21;
    v22 = objc_opt_respondsToSelector();
    v23 = 0x100000000;
    if ((v22 & 1) == 0)
      v23 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFEFFFFFFFFLL | v23;
    v24 = objc_opt_respondsToSelector();
    v25 = 0x200000000;
    if ((v24 & 1) == 0)
      v25 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFDFFFFFFFFLL | v25;
    v26 = objc_opt_respondsToSelector();
    v27 = 0x400000000;
    if ((v26 & 1) == 0)
      v27 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFBFFFFFFFFLL | v27;
    v28 = objc_opt_respondsToSelector();
    v29 = 0x800000000;
    if ((v28 & 1) == 0)
      v29 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFF7FFFFFFFFLL | v29;
    v30 = objc_opt_respondsToSelector();
    v31 = 0x1000000000;
    if ((v30 & 1) == 0)
      v31 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFEFFFFFFFFFLL | v31;
    v32 = objc_opt_respondsToSelector();
    v33 = 0x2000000000;
    if ((v32 & 1) == 0)
      v33 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFDFFFFFFFFFLL | v33;
    v34 = objc_opt_respondsToSelector();
    v35 = 0x4000000000;
    if ((v34 & 1) == 0)
      v35 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFBFFFFFFFFFLL | v35;
    v36 = objc_opt_respondsToSelector();
    v37 = 0x8000000000;
    if ((v36 & 1) == 0)
      v37 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFF7FFFFFFFFFLL | v37;
    v38 = objc_opt_respondsToSelector();
    v39 = 0x10000000000;
    if ((v38 & 1) == 0)
      v39 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFEFFFFFFFFFFLL | v39;
    v40 = objc_opt_respondsToSelector();
    v41 = 0x20000000000;
    if ((v40 & 1) == 0)
      v41 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFDFFFFFFFFFFLL | v41;
    v42 = objc_opt_respondsToSelector();
    v43 = 0x40000000000;
    if ((v42 & 1) == 0)
      v43 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFBFFFFFFFFFFLL | v43;
    v44 = objc_opt_respondsToSelector();
    v45 = 0x80000000000;
    if ((v44 & 1) == 0)
      v45 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFF7FFFFFFFFFFLL | v45;
    v46 = objc_opt_respondsToSelector();
    v47 = 0x100000000000;
    if ((v46 & 1) == 0)
      v47 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFEFFFFFFFFFFFLL | v47;
    if ((v46 & 1) != 0)
      NSLog(CFSTR("WARNING: Using legacy cell layout due to delegate implementation of tableView:accessoryTypeForRowWithIndexPath: in %@.  Please remove your implementation of this method and set the cell properties accessoryType and/or editingAccessoryType to move to the new cell layout behavior.  This method will no longer be called in a future release."), v11);
    v48 = objc_opt_respondsToSelector();
    v49 = 0x200000000000;
    if ((v48 & 1) == 0)
      v49 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFDFFFFFFFFFFFLL | v49;
    v50 = objc_opt_respondsToSelector();
    v51 = 0x400000000000;
    if ((v50 & 1) == 0)
      v51 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFBFFFFFFFFFFFLL | v51;
    v52 = objc_opt_respondsToSelector();
    v53 = 0x800000000000;
    if ((v52 & 1) == 0)
      v53 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFF7FFFFFFFFFFFLL | v53;
    v54 = objc_opt_respondsToSelector();
    v55 = 0x1000000000000;
    if ((v54 & 1) == 0)
      v55 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFEFFFFFFFFFFFFLL | v55;
    v56 = objc_opt_respondsToSelector();
    v57 = 0x2000000000000;
    if ((v56 & 1) == 0)
      v57 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFDFFFFFFFFFFFFLL | v57;
    v58 = objc_opt_respondsToSelector();
    v59 = 0x4000000000000;
    if ((v58 & 1) == 0)
      v59 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFBFFFFFFFFFFFFLL | v59;
    v60 = objc_opt_respondsToSelector();
    v61 = 0x8000000000000;
    if ((v60 & 1) == 0)
      v61 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFF7FFFFFFFFFFFFLL | v61;
    v62 = objc_opt_respondsToSelector();
    v63 = 0x10000000000000;
    if ((v62 & 1) == 0)
      v63 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFEFFFFFFFFFFFFFLL | v63;
    v64 = objc_opt_respondsToSelector();
    v65 = 0x20000000000000;
    if ((v64 & 1) == 0)
      v65 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFDFFFFFFFFFFFFFLL | v65;
    v66 = objc_opt_respondsToSelector();
    v67 = 0x40000000000000;
    if ((v66 & 1) == 0)
      v67 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFBFFFFFFFFFFFFFLL | v67;
    v68 = objc_opt_respondsToSelector();
    v69 = 0x40000;
    if ((v68 & 1) == 0)
      v69 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFFBFFFFLL | v69;
    v70 = objc_opt_respondsToSelector();
    v71 = 0x80000;
    if ((v70 & 1) == 0)
      v71 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFF7FFFFLL | v71;
    v72 = objc_opt_respondsToSelector();
    v73 = 0x100000;
    if ((v72 & 1) == 0)
      v73 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFEFFFFFLL | v73;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v74 = 0x200000;
    else
      v74 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFDFFFFFLL | v74;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v75 = 0x400000;
    else
      v75 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFFBFFFFFLL | v75;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v76 = 0x800000;
    else
      v76 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFF7FFFFFLL | v76;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v77 = 0x1000000;
    else
      v77 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFEFFFFFFLL | v77;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v78 = 0x2000000;
    else
      v78 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFFFFFFFFFDFFFFFFLL | v78;
    v79 = objc_opt_respondsToSelector();
    v80 = 0x80000000000000;
    if ((v79 & 1) == 0)
      v80 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFF7FFFFFFFFFFFFFLL | v80;
    v81 = objc_opt_respondsToSelector();
    v82 = 0x100000000000000;
    if ((v81 & 1) == 0)
      v82 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFEFFFFFFFFFFFFFFLL | v82;
    v83 = objc_opt_respondsToSelector();
    v84 = 0x200000000000000;
    if ((v83 & 1) == 0)
      v84 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFDFFFFFFFFFFFFFFLL | v84;
    v85 = objc_opt_respondsToSelector();
    v86 = 0x400000000000000;
    if ((v85 & 1) == 0)
      v86 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xFBFFFFFFFFFFFFFFLL | v86;
    v87 = objc_opt_respondsToSelector();
    v88 = 0x800000000000000;
    if ((v87 & 1) == 0)
      v88 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xF7FFFFFFFFFFFFFFLL | v88;
    v89 = objc_opt_respondsToSelector();
    v90 = 0x1000000000000000;
    if ((v89 & 1) == 0)
      v90 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xEFFFFFFFFFFFFFFFLL | v90;
    v91 = objc_opt_respondsToSelector();
    v92 = 0x2000000000000000;
    if ((v91 & 1) == 0)
      v92 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xDFFFFFFFFFFFFFFFLL | v92;
    v93 = objc_opt_respondsToSelector();
    v94 = 0x4000000000000000;
    if ((v93 & 1) == 0)
      v94 = 0;
    *(_QWORD *)p_tableFlags = *(_QWORD *)p_tableFlags & 0xBFFFFFFFFFFFFFFFLL | v94;
    v95 = objc_opt_respondsToSelector();
    v96 = 0x8000000000000000;
    if ((v95 & 1) == 0)
      v96 = 0;
    *(_QWORD *)p_tableFlags = v96 & 0x8000000000000000 | *(_QWORD *)p_tableFlags & 0x7FFFFFFFFFFFFFFFLL;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFFELL | ((objc_opt_respondsToSelector() & 1) != 0);
    v97 = objc_opt_respondsToSelector();
    v98 = 2;
    if ((v97 & 1) == 0)
      v98 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFFDLL | v98;
    v99 = objc_opt_respondsToSelector();
    v100 = 4;
    if ((v99 & 1) == 0)
      v100 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFFBLL | v100;
    v101 = objc_opt_respondsToSelector();
    v102 = 8;
    if ((v101 & 1) == 0)
      v102 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFF7 | v102;
    v103 = objc_opt_respondsToSelector();
    v104 = 16;
    if ((v103 & 1) == 0)
      v104 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFEFLL | v104;
    v105 = objc_opt_respondsToSelector();
    v106 = 32;
    if ((v105 & 1) == 0)
      v106 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFDFLL | v106;
    v107 = objc_opt_respondsToSelector();
    v108 = 64;
    if ((v107 & 1) == 0)
      v108 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFBFLL | v108;
    v109 = objc_opt_respondsToSelector();
    v110 = 128;
    if ((v109 & 1) == 0)
      v110 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFF7FLL | v110;
    v111 = objc_opt_respondsToSelector();
    v112 = 256;
    if ((v111 & 1) == 0)
      v112 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFEFFLL | v112;
    v113 = objc_opt_respondsToSelector();
    v114 = 512;
    if ((v113 & 1) == 0)
      v114 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFDFFLL | v114;
    v115 = objc_opt_respondsToSelector();
    v116 = 1024;
    if ((v115 & 1) == 0)
      v116 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFBFFLL | v116;
    v117 = objc_opt_respondsToSelector();
    v118 = 2048;
    if ((v117 & 1) == 0)
      v118 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFF7FFLL | v118;
    v119 = objc_opt_respondsToSelector();
    v120 = 4096;
    if ((v119 & 1) == 0)
      v120 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFEFFFLL | v120;
    v121 = objc_opt_respondsToSelector();
    v122 = 0x2000;
    if ((v121 & 1) == 0)
      v122 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFDFFFLL | v122;
    v123 = objc_opt_respondsToSelector();
    v124 = 0x4000;
    if ((v123 & 1) == 0)
      v124 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFBFFFLL | v124;
    v125 = objc_opt_respondsToSelector();
    v126 = 0x8000;
    if ((v125 & 1) == 0)
      v126 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFF7FFFLL | v126;
    v127 = objc_opt_respondsToSelector();
    v128 = 0x10000;
    if ((v127 & 1) == 0)
      v128 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFEFFFFLL | v128;
    v129 = objc_opt_respondsToSelector();
    v130 = 0x20000;
    if ((v129 & 1) == 0)
      v130 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFDFFFFLL | v130;
    v131 = objc_opt_respondsToSelector();
    v132 = 0x40000;
    if ((v131 & 1) == 0)
      v132 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFBFFFFLL | v132;
    v133 = objc_opt_respondsToSelector();
    v134 = 0x80000;
    if ((v133 & 1) == 0)
      v134 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFF7FFFFLL | v134;
    v135 = objc_opt_respondsToSelector();
    v136 = 0x100000;
    if ((v135 & 1) == 0)
      v136 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFEFFFFFLL | v136;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v137 = 0x200000;
    else
      v137 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFDFFFFFLL | v137;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v138 = 0x400000;
    else
      v138 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFFBFFFFFLL | v138;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v139 = 0x800000;
    else
      v139 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFF7FFFFFLL | v139;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v140 = 0x1000000;
    else
      v140 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFEFFFFFFLL | v140;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v141 = 0x2000000;
    else
      v141 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFDFFFFFFLL | v141;
    v142 = objc_opt_respondsToSelector();
    v143 = 0x4000000;
    if ((v142 & 1) == 0)
      v143 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFFBFFFFFFLL | v143;
    v144 = objc_opt_respondsToSelector();
    v145 = 0x8000000;
    if ((v144 & 1) == 0)
      v145 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFF7FFFFFFLL | v145;
    v146 = objc_opt_respondsToSelector();
    v147 = 0x10000000;
    if ((v146 & 1) == 0)
      v147 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFEFFFFFFFLL | v147;
    v148 = objc_opt_respondsToSelector();
    v149 = 0x20000000;
    if ((v148 & 1) == 0)
      v149 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFDFFFFFFFLL | v149;
    v150 = objc_opt_respondsToSelector();
    v151 = 0x40000000;
    if ((v150 & 1) == 0)
      v151 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFFBFFFFFFFLL | v151;
    v152 = objc_opt_respondsToSelector();
    v153 = 0x80000000;
    if ((v152 & 1) == 0)
      v153 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFF7FFFFFFFLL | v153;
    v154 = objc_opt_respondsToSelector();
    v155 = 0x100000000;
    if ((v154 & 1) == 0)
      v155 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFEFFFFFFFFLL | v155;
    v156 = objc_opt_respondsToSelector();
    v157 = 0x200000000;
    if ((v156 & 1) == 0)
      v157 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFDFFFFFFFFLL | v157;
    v158 = objc_opt_respondsToSelector();
    v159 = 0x400000000;
    if ((v158 & 1) == 0)
      v159 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFFBFFFFFFFFLL | v159;
    v160 = objc_opt_respondsToSelector();
    v161 = 0x800000000;
    if ((v160 & 1) == 0)
      v161 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFF7FFFFFFFFLL | v161;
    v162 = objc_opt_respondsToSelector();
    v163 = 0x1000000000;
    if ((v162 & 1) == 0)
      v163 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFEFFFFFFFFFLL | v163;
    v164 = objc_opt_respondsToSelector();
    v165 = 0x2000000000;
    if ((v164 & 1) == 0)
      v165 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFDFFFFFFFFFLL | v165;
    v166 = objc_opt_respondsToSelector();
    v167 = 0x4000000000;
    if ((v166 & 1) == 0)
      v167 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFFBFFFFFFFFFLL | v167;
    v168 = objc_opt_respondsToSelector();
    v169 = 0x80000000000;
    if ((v168 & 1) == 0)
      v169 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFF7FFFFFFFFFFLL | v169;
    if (_UIIsPrivateMainBundle())
    {
      v170 = objc_opt_respondsToSelector();
      v171 = 0x8000000000;
      if ((v170 & 1) == 0)
        v171 = 0;
      *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFF7FFFFFFFFFLL | v171;
    }
    v172 = objc_opt_respondsToSelector();
    v173 = 0x10000000000;
    if ((v172 & 1) == 0)
      v173 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFEFFFFFFFFFFLL | v173;
    v174 = objc_opt_respondsToSelector();
    v175 = 0x20000000000;
    if ((v174 & 1) == 0)
      v175 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFDFFFFFFFFFFLL | v175;
    v176 = objc_opt_respondsToSelector();
    v177 = 0x40000000000;
    if ((v176 & 1) == 0)
      v177 = 0;
    *((_QWORD *)&self->_tableFlags + 1) = *((_QWORD *)&self->_tableFlags + 1) & 0xFFFFFBFFFFFFFFFFLL | v177;
    if ((*((_BYTE *)&self->_tableFlags + 19) & 0x80) == 0)
    {
      -[UITableView _tableHeaderView:](self, "_tableHeaderView:", 1);
      v178 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) != 0)
        -[UITableView setTableHeaderViewShouldAutoHide:](self, "setTableHeaderViewShouldAutoHide:", 1);
    }
    if (v180 != -[UITableView _estimatesHeights](self, "_estimatesHeights"))
      -[UITableView _updateRowDataIfNeeded](self, "_updateRowDataIfNeeded");
    -[UITableView _configureContextMenuInteractionIfNeeded](self, "_configureContextMenuInteractionIfNeeded");

  }
LABEL_208:

}

- (id)_tableHeaderView:(BOOL)a3
{
  BOOL v4;
  double x;
  double y;
  double width;
  double height;
  void *v9;
  UIView *v10;
  UIView *tableHeaderView;
  CGRect v13;

  if (self->_tableHeaderView)
    v4 = 1;
  else
    v4 = !a3;
  if (!v4 && (*((_BYTE *)&self->_tableFlags + 8) & 1) != 0)
  {
    v13.origin.x = -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData);
    x = v13.origin.x;
    y = v13.origin.y;
    width = v13.size.width;
    height = v13.size.height;
    if (!CGRectIsEmpty(v13))
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "viewForHeaderInTableView:", self);
      v10 = (UIView *)objc_claimAutoreleasedReturnValue();
      tableHeaderView = self->_tableHeaderView;
      self->_tableHeaderView = v10;

      -[UIView setFrame:](self->_tableHeaderView, "setFrame:", x, y, width, height);
      -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", self->_tableHeaderView, 0);
    }
  }
  return self->_tableHeaderView;
}

- (void)_configureContextMenuInteractionIfNeeded
{
  UIContextMenuInteraction *contextMenuInteraction;
  UIContextMenuInteraction *v4;
  UIContextMenuInteraction *v5;
  UIContextMenuInteraction *v6;

  contextMenuInteraction = self->_contextMenuInteraction;
  if ((*((_BYTE *)&self->_tableFlags + 12) & 0x10) != 0)
  {
    if (!contextMenuInteraction)
    {
      v5 = -[UIContextMenuInteraction initWithDelegate:]([UIContextMenuInteraction alloc], "initWithDelegate:", self);
      v6 = self->_contextMenuInteraction;
      self->_contextMenuInteraction = v5;

      -[UIView addInteraction:](self, "addInteraction:", self->_contextMenuInteraction);
    }
  }
  else if (contextMenuInteraction)
  {
    -[UIView removeInteraction:](self, "removeInteraction:");
    v4 = self->_contextMenuInteraction;
    self->_contextMenuInteraction = 0;

  }
}

- (void)registerClass:(Class)aClass forHeaderFooterViewReuseIdentifier:(NSString *)identifier
{
  void *v7;
  uint64_t v8;
  void *v9;
  NSString *v10;

  v10 = identifier;
  if (-[NSString length](v10, "length"))
  {
    if (!aClass)
      goto LABEL_6;
  }
  else
  {
    v7 = (void *)MEMORY[0x1E0C99DA0];
    v8 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "raise:format:", v8, CFSTR("must pass a valid reuse identifier to -[UITableView %@]"), v9);

    if (!aClass)
      goto LABEL_6;
  }
  if ((-[objc_class isSubclassOfClass:](aClass, "isSubclassOfClass:", objc_opt_class()) & 1) == 0
    && (Class)objc_opt_class() != aClass)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("must pass a class of kind %@"), objc_opt_class());
  }
LABEL_6:
  -[UITableView _registerThing:asNib:forViewType:withReuseIdentifer:](self, "_registerThing:asNib:forViewType:withReuseIdentifer:", aClass, 0, 2, v10);

}

- (void)registerClass:(Class)cellClass forCellReuseIdentifier:(NSString *)identifier
{
  void *v7;
  uint64_t v8;
  void *v9;
  NSString *v10;

  v10 = identifier;
  if (-[NSString length](v10, "length"))
  {
    if (!cellClass)
      goto LABEL_6;
  }
  else
  {
    v7 = (void *)MEMORY[0x1E0C99DA0];
    v8 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "raise:format:", v8, CFSTR("must pass a valid reuse identifier to -[UITableView %@]"), v9);

    if (!cellClass)
      goto LABEL_6;
  }
  if ((-[objc_class isSubclassOfClass:](cellClass, "isSubclassOfClass:", objc_opt_class()) & 1) == 0
    && (Class)objc_opt_class() != cellClass)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("must pass a class of kind %@"), objc_opt_class());
  }
LABEL_6:
  -[UITableView _registerThing:asNib:forViewType:withReuseIdentifer:](self, "_registerThing:asNib:forViewType:withReuseIdentifer:", cellClass, 0, 1, v10);

}

uint64_t __45__UITableView__sortedDeduplicatedReloadItems__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compareIndexPaths:");
}

- (BOOL)_highlightFirstVisibleRowIfAppropriate
{
  return 0;
}

- (void)setSemanticContentAttribute:(int64_t)a3
{
  NSMutableArray *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  objc_super v23;
  _BYTE v24[128];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23.receiver = self;
  v23.super_class = (Class)UITableView;
  -[UIView setSemanticContentAttribute:](&v23, sel_setSemanticContentAttribute_);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v5 = self->_visibleCells;
  v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v20;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v20 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * v9++), "setSemanticContentAttribute:", a3);
      }
      while (v7 != v9);
      v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
    }
    while (v7);
  }

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[UITableView _visibleHeaderFooterViews](self, "_visibleHeaderFooterViews", 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v24, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v14++), "setSemanticContentAttribute:", a3);
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v24, 16);
    }
    while (v12);
  }

}

- (void)sendSubviewToBack:(id)a3
{
  void *v4;
  objc_super v5;

  _UITableViewSubviewToMoveForView(a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5.receiver = self;
  v5.super_class = (Class)UITableView;
  -[UIView sendSubviewToBack:](&v5, sel_sendSubviewToBack_, v4);

}

BOOL __42__UITableView__indexPathForTentativeCell___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == a3)
    *a4 = 1;
  return v4 == a3;
}

- (BOOL)_delegateWantsHeaderTitleForSection:(int64_t)a3
{
  void *v3;
  void *v6;
  BOOL v7;

  if ((*(_BYTE *)&self->_tableFlags & 8) == 0)
  {
    v3 = 0;
LABEL_6:
    v7 = 0;
    goto LABEL_7;
  }
  -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "tableView:titleForHeaderInSection:", self, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3 || !objc_msgSend(v3, "length"))
    goto LABEL_6;
  v7 = 1;
LABEL_7:

  return v7;
}

- (void)setContentInset:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;
  double v14;
  objc_super v15;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  -[UIScrollView contentInset](self, "contentInset");
  if (left == v11 && top == v8 && right == v10)
  {
    v14 = v9;
    v15.receiver = self;
    v15.super_class = (Class)UITableView;
    -[UIScrollView setContentInset:](&v15, sel_setContentInset_, top, left, bottom, right);
    if (bottom == v14)
      return;
  }
  else
  {
    v15.receiver = self;
    v15.super_class = (Class)UITableView;
    -[UIScrollView setContentInset:](&v15, sel_setContentInset_, top, left, bottom, right);
  }
  -[UITableView _updateForChangeInEffectiveContentInset](self, "_updateForChangeInEffectiveContentInset");
}

- (void)_updateForChangeInEffectiveContentInset
{
  if ((*((_BYTE *)&self->_tableFlags + 19) & 1) == 0)
    -[UITableView _setNeedsIndexBarInsetsUpdate](self, "_setNeedsIndexBarInsetsUpdate");
  -[UITableView _updateContentSize](self, "_updateContentSize");
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 0);
}

- (void)flashScrollIndicators
{
  objc_super v3;

  -[UITableView _updateShowScrollIndicatorsFlag](self, "_updateShowScrollIndicatorsFlag");
  v3.receiver = self;
  v3.super_class = (Class)UITableView;
  -[UIScrollView flashScrollIndicators](&v3, sel_flashScrollIndicators);
}

- (void).cxx_destruct
{
  objc_destroyWeak((id *)&self->_dragDestinationDelegate);
  objc_destroyWeak((id *)&self->_dragSourceDelegate);
  objc_storeStrong((id *)&self->_placeholderContexts, 0);
  objc_storeStrong((id *)&self->_dropController, 0);
  objc_storeStrong((id *)&self->_dragController, 0);
  objc_storeStrong((id *)&self->_indexPathToFocus, 0);
  objc_storeStrong((id *)&self->_focusedCell, 0);
  objc_storeStrong((id *)&self->_focusedCellIndexPath, 0);
  objc_destroyWeak((id *)&self->_dropDelegate);
  objc_destroyWeak((id *)&self->_dragDelegate);
  objc_storeStrong((id *)&self->_multiSelectController, 0);
  objc_storeStrong((id *)&self->_prefetchContext, 0);
  objc_destroyWeak((id *)&self->_prefetchDataSource);
  objc_storeStrong((id *)&self->_reorderFeedbackGenerator, 0);
  objc_storeStrong((id *)&self->_indexRetargetFeedbackGenerator, 0);
  objc_storeStrong((id *)&self->_targetIndexPathForScrolling, 0);
  objc_storeStrong((id *)&self->_constants, 0);
  objc_storeStrong((id *)&self->_contentFocusContainerGuide, 0);
  objc_storeStrong((id *)&self->_shadowUpdatesController, 0);
  objc_storeStrong((id *)&self->_currentUpdate, 0);
  objc_storeStrong((id *)&self->_clientGesturesRequiringTableGesturesToFail, 0);
  objc_storeStrong((id *)&self->_tentativeFooterViews, 0);
  objc_storeStrong((id *)&self->_tentativeHeaderViews, 0);
  objc_storeStrong((id *)&self->_tentativeCells, 0);
  objc_storeStrong((id *)&self->_intrinsicContentSizeInvalidationContext, 0);
  objc_storeStrong((id *)&self->_indexPathBeingReconfigured, 0);
  objc_storeStrong((id *)&self->_cellBeingReconfigured, 0);
  objc_storeStrong((id *)&self->_hiddenSeparatorIndexPaths, 0);
  objc_storeStrong(&self->_deferredEditingHandler, 0);
  objc_storeStrong(&self->_updateCompletionHandler, 0);
  objc_storeStrong((id *)&self->_headerFooterClassDict, 0);
  objc_storeStrong((id *)&self->_cellClassDict, 0);
  objc_storeStrong((id *)&self->_currentTouch, 0);
  objc_storeStrong((id *)&self->_downArrowTapGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_upArrowTapGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_downArrowLongPressGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_upArrowLongPressGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_identityTracker, 0);
  objc_storeStrong((id *)&self->_selectionInteraction, 0);
  objc_storeStrong((id *)&self->_contextMenuInteraction, 0);
  objc_storeStrong((id *)&self->_swipeToDeleteCell, 0);
  objc_storeStrong((id *)&self->_swipeActionController, 0);
  objc_storeStrong((id *)&self->_defaultSectionIndexTitles, 0);
  objc_storeStrong((id *)&self->_indexTrackingBackgroundColor, 0);
  objc_storeStrong((id *)&self->_indexBackgroundColor, 0);
  objc_storeStrong((id *)&self->_indexColor, 0);
  objc_storeStrong((id *)&self->_sectionBorderColor, 0);
  objc_storeStrong((id *)&self->_checkmarkColor, 0);
  objc_storeStrong((id *)&self->_accessoryBaseColor, 0);
  objc_storeStrong((id *)&self->_separatorEffect, 0);
  objc_storeStrong((id *)&self->_darkenedSeparatorColor, 0);
  objc_storeStrong((id *)&self->_separatorColor, 0);
  objc_storeStrong((id *)&self->_moveItems, 0);
  objc_storeStrong((id *)&self->_reloadItems, 0);
  objc_storeStrong((id *)&self->_deleteItems, 0);
  objc_storeStrong((id *)&self->_insertItems, 0);
  objc_storeStrong((id *)&self->_indexOverlaySelectionView, 0);
  objc_storeStrong((id *)&self->_indexOverlayIndicatorEventIgnoreTimer, 0);
  objc_storeStrong((id *)&self->_indexOverlayTimer, 0);
  objc_storeStrong((id *)&self->_indexOverlayIndicatorView, 0);
  objc_storeStrong((id *)&self->_sectionIndexTitlesForTableView, 0);
  objc_storeStrong((id *)&self->_countLabel, 0);
  objc_storeStrong((id *)&self->_tableFooterView, 0);
  objc_storeStrong((id *)&self->_tableHeaderView, 0);
  objc_storeStrong((id *)&self->_tableHeaderBackgroundView, 0);
  objc_storeStrong((id *)&self->_indexContainerView, 0);
  objc_storeStrong((id *)&self->_index, 0);
  objc_storeStrong((id *)&self->_wrapperView, 0);
  objc_storeStrong((id *)&self->_clearBlendingView, 0);
  objc_storeStrong((id *)&self->_backgroundView, 0);
  objc_storeStrong((id *)&self->_expectedDiffableUpdateItem, 0);
  objc_storeStrong((id *)&self->_reorderingSupport, 0);
  objc_storeStrong((id *)&self->_deleteAnimationSupport, 0);
  objc_storeStrong((id *)&self->_pendingDeselectionIndexPaths, 0);
  objc_storeStrong((id *)&self->_pendingSelectionIndexPath, 0);
  objc_storeStrong((id *)&self->_highlightedSpringLoadedIndexPath, 0);
  objc_storeStrong((id *)&self->_swipedIndexPath, 0);
  objc_storeStrong((id *)&self->_deselectionTransitionIndexPaths, 0);
  objc_storeStrong((id *)&self->_selectedIndexPaths, 0);
  objc_storeStrong((id *)&self->_highlightedIndexPaths, 0);
  objc_storeStrong((id *)&self->_extraSeparators, 0);
  objc_storeStrong((id *)&self->_topSeparator, 0);
  objc_storeStrong((id *)&self->_headerFooterNibExternalObjectsTables, 0);
  objc_storeStrong((id *)&self->_headerFooterNibMap, 0);
  objc_storeStrong((id *)&self->_nibExternalObjectsTables, 0);
  objc_storeStrong((id *)&self->_nibMap, 0);
  objc_storeStrong((id *)&self->_reusableHeaderFooterViews, 0);
  objc_storeStrong((id *)&self->_reusableTableCells, 0);
  objc_storeStrong((id *)&self->_firstResponderView, 0);
  objc_storeStrong((id *)&self->_firstResponderIndexPath, 0);
  objc_storeStrong((id *)&self->_viewBeingPreparedToDisplay, 0);
  objc_storeStrong((id *)&self->_indexPathBeingCreated, 0);
  objc_storeStrong((id *)&self->_visibleFooterViews, 0);
  objc_storeStrong((id *)&self->_visibleHeaderViews, 0);
  objc_storeStrong((id *)&self->_visibleCells, 0);
  objc_storeStrong((id *)&self->_subviewManager, 0);
  objc_storeStrong((id *)&self->_rowData, 0);
  objc_destroyWeak((id *)&self->_dataSource);
}

- (void)willMoveToSuperview:(id)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  -[UIView willMoveToSuperview:](&v4, sel_willMoveToSuperview_, a3);
  if (-[UITableView _hasSwipeToDeleteRow](self, "_hasSwipeToDeleteRow"))
  {
    if ((*((_QWORD *)&self->_tableFlags + 2) & 0x8000100000000000) == 0x100000000000)
      -[UITableView _setEditing:animated:forced:](self, "_setEditing:animated:forced:", 0, 0, 0);
  }
}

- (BOOL)_hasSwipeToDeleteRow
{
  return self->_swipedIndexPath != 0;
}

- (void)resizeSubviewsWithOldSize:(CGSize)a3
{
  double height;
  double width;
  objc_super v6;

  height = a3.height;
  width = a3.width;
  -[UITableView _updateIndexFrame](self, "_updateIndexFrame");
  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  -[UIView resizeSubviewsWithOldSize:](&v6, sel_resizeSubviewsWithOldSize_, width, height);
}

- (void)_resignOrRebaseFirstResponderViewWithUpdateSupport:(id)a3 indexPathMapping:(id)a4
{
  unint64_t v7;
  void *v8;
  void *v9;
  UIView *v10;
  NSIndexPath *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  void *v19;
  const __CFString *v20;
  int firstResponderViewType;
  NSIndexPath *v22;
  NSIndexPath *firstResponderIndexPath;
  void (**v24)(id, NSIndexPath *);
  id v25;

  v25 = a3;
  v24 = (void (**)(id, NSIndexPath *))a4;
  if (-[UITableView _isFirstResponderInDeletedSectionOrRow:](self, "_isFirstResponderInDeletedSectionOrRow:", v25))
  {
    v7 = 0;
    do
    {
      -[UIView window](self, "window");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "firstResponder");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = self->_firstResponderView;
      v11 = self->_firstResponderIndexPath;
      v12 = objc_msgSend(v9, "resignFirstResponder");
      -[UIView window](self, "window");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "firstResponder");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v12 || v9 == v14)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15;
        v17 = CFSTR("NO");
        if (v12)
          v17 = CFSTR("YES");
        objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 4860, CFSTR("The first responder contained inside of a deleted section or row refused to resign.\nFirst responder that was asked to resign (returned %@ from -resignFirstResponder): %@ inside containing view: %@ at index path: %@\nCurrent first responder: %@ inside containing view: %@ at index path: %@"), v17, v9, v10, v11, v14, self->_firstResponderView, self->_firstResponderIndexPath);

      }
      if (v7 >= 0x64)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v18;
        v20 = CFSTR("NO");
        if (v12)
          v20 = CFSTR("YES");
        objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 4861, CFSTR("Attempted to delete a section or row containing the first responder, but after repeatedly telling the first responder to resign, the first responder remained inside a deleted section or row. This may be caused by a cycle where the first responder is moving back and forth between the same views.\nFirst responder that was asked to resign (returned %@ from -resignFirstResponder): %@ inside containing view: %@ at index path: %@\nCurrent first responder: %@ inside containing view: %@ at index path: %@"), v20, v9, v10, v11, v14, self->_firstResponderView, self->_firstResponderIndexPath);

      }
      ++v7;

    }
    while (-[UITableView _isFirstResponderInDeletedSectionOrRow:](self, "_isFirstResponderInDeletedSectionOrRow:", v25));
  }
  if (self->_firstResponderView)
  {
    firstResponderViewType = self->_firstResponderViewType;
    if ((firstResponderViewType - 2) >= 2)
    {
      if (firstResponderViewType != 1)
      {
        firstResponderIndexPath = self->_firstResponderIndexPath;
        self->_firstResponderIndexPath = 0;
        goto LABEL_21;
      }
      v24[2](v24, self->_firstResponderIndexPath);
      v22 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[_UITableViewUpdateSupport finalSectionIndexForInitialSectionIndex:]((uint64_t)v25, -[NSIndexPath section](self->_firstResponderIndexPath, "section")));
      v22 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
    }
    firstResponderIndexPath = self->_firstResponderIndexPath;
    self->_firstResponderIndexPath = v22;
LABEL_21:

  }
}

- (BOOL)_isFirstResponderInDeletedSectionOrRow:(id)a3
{
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  NSIndexPath *firstResponderIndexPath;
  int firstResponderViewType;
  uint64_t v9;
  unint64_t v10;

  v4 = (uint64_t *)a3;
  v5 = v4;
  if (!self->_firstResponderView)
    goto LABEL_9;
  v6 = 0;
  if (v4)
  {
    firstResponderIndexPath = self->_firstResponderIndexPath;
    if (firstResponderIndexPath)
    {
      firstResponderViewType = self->_firstResponderViewType;
      if ((firstResponderViewType - 2) < 2)
      {
        v9 = -[_UITableViewUpdateSupport finalSectionIndexForInitialSectionIndex:]((uint64_t)v4, -[NSIndexPath section](self->_firstResponderIndexPath, "section"));
LABEL_8:
        v6 = v9 == 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_10;
      }
      if (firstResponderViewType == 1)
      {
        v10 = -[UITableViewRowData globalRowForRowAtIndexPath:](v4[9], firstResponderIndexPath);
        v9 = -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:]((uint64_t)v5, v10);
        goto LABEL_8;
      }
LABEL_9:
      v6 = 0;
    }
  }
LABEL_10:

  return v6;
}

- (void)setBackgroundView:(UIView *)backgroundView
{
  UIView *v5;
  UIView *v6;
  UIView *v7;

  v5 = backgroundView;
  v6 = self->_backgroundView;
  if (v6 != v5)
  {
    v7 = v5;
    -[UIView removeFromSuperview](v6, "removeFromSuperview");
    objc_storeStrong((id *)&self->_backgroundView, backgroundView);
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFE7FFFFFFFFFLL | 0x8000000000;
    -[UITableView _configureBackgroundView](self, "_configureBackgroundView");
    v5 = v7;
  }

}

- (void)_setBackgroundEffects:(id)a3
{
  UIView *backgroundView;
  UIVisualEffectView *v5;
  UIView *v6;
  id v7;

  v7 = a3;
  if (v7)
  {
    backgroundView = self->_backgroundView;
    if (backgroundView)
    {
      if ((*((_BYTE *)&self->_tableFlags + 21) & 1) != 0)
      {
        v5 = backgroundView;
        goto LABEL_9;
      }
      -[UIView removeFromSuperview](backgroundView, "removeFromSuperview");
    }
    v5 = objc_alloc_init(UIVisualEffectView);
    objc_storeStrong((id *)&self->_backgroundView, v5);
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFE7FFFFFFFFFLL | 0x10000000000;
LABEL_9:
    -[UIVisualEffectView setBackgroundEffects:](v5, "setBackgroundEffects:", v7);

    goto LABEL_10;
  }
  if ((*((_BYTE *)&self->_tableFlags + 21) & 1) != 0)
  {
    -[UIView removeFromSuperview](self->_backgroundView, "removeFromSuperview");
    v6 = self->_backgroundView;
    self->_backgroundView = 0;

    *((_QWORD *)&self->_tableFlags + 2) &= ~0x10000000000uLL;
  }
LABEL_10:
  -[UITableView _configureBackgroundView](self, "_configureBackgroundView");

}

- (void)_configureBackgroundView
{
  UIView *backgroundView;
  UIView *v4;

  backgroundView = self->_backgroundView;
  if (backgroundView)
  {
    -[UIView setAutoresizingMask:](backgroundView, "setAutoresizingMask:", 18);
    v4 = self->_backgroundView;
    -[UIView bounds](self, "bounds");
    -[UIView setFrame:](v4, "setFrame:");
    -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", self->_backgroundView, 1);
  }
}

- (void)_adjustPreReloadStateForRestoringContentOffsetWithUpdateItems:(id)a3 updateSupport:(id)a4
{
  id v6;
  uint64_t *v7;
  uint64_t *v8;
  _NSRange *p_preReloadVisibleRowRange;
  int64_t location;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  uint8_t buf[4];
  int64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (uint64_t *)a4;
  v8 = v7;
  p_preReloadVisibleRowRange = &self->_preReloadVisibleRowRange;
  if (self->_preReloadVisibleRowRange.length)
  {
    location = p_preReloadVisibleRowRange->location;
    if ((int64_t)p_preReloadVisibleRowRange->location < v7[31])
    {
      -[UITableViewRowData indexPathForRowAtGlobalRow:]((_QWORD *)v7[9], p_preReloadVisibleRowRange->location);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 0;
      -[UITableView _generateDeletedOrMovedRowsIndexSetFromUpdateItems:updateSupport:preReloadFirstVisibleRowIndexPath:outReloadedRowNewIndexPath:](self, "_generateDeletedOrMovedRowsIndexSetFromUpdateItems:updateSupport:preReloadFirstVisibleRowIndexPath:outReloadedRowNewIndexPath:", v6, v8, v11, &v19);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v19;
      if ((location & 0x8000000000000000) == 0)
      {
        if (objc_msgSend(v12, "containsIndex:", location))
        {
          do
          {

            if (location <= 0)
            {
              v13 = 0;
              goto LABEL_19;
            }
            --location;
            v13 = 0;
          }
          while (objc_msgSend(v12, "containsIndex:", location));
          v14 = -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:]((uint64_t)v8, location);
          if (v14 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v13 = 0;
            goto LABEL_14;
          }
          v13 = 0;
          v15 = v14 + 1;
          goto LABEL_20;
        }
        if (v13)
          v15 = -[UITableViewRowData globalRowForRowAtIndexPath:](v8[10], v13);
        else
          v15 = -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:]((uint64_t)v8, location);
        if (v15 != 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_21;
LABEL_14:
        if (os_variant_has_internal_diagnostics())
        {
          __UIFaultDebugAssertLog();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 134217984;
            v21 = location;
            _os_log_fault_impl(&dword_185066000, v18, OS_LOG_TYPE_FAULT, "Unable to determine new global row index for preReloadFirstVisibleRow (%ld)", buf, 0xCu);
          }

        }
        else
        {
          v16 = _adjustPreReloadStateForRestoringContentOffsetWithUpdateItems_updateSupport____s_category;
          if (!_adjustPreReloadStateForRestoringContentOffsetWithUpdateItems_updateSupport____s_category)
          {
            v16 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v16, (unint64_t *)&_adjustPreReloadStateForRestoringContentOffsetWithUpdateItems_updateSupport____s_category);
          }
          v17 = *(NSObject **)(v16 + 8);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            v21 = location;
            _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, "Unable to determine new global row index for preReloadFirstVisibleRow (%ld)", buf, 0xCu);
          }
        }
      }
LABEL_19:
      v15 = 0;
LABEL_20:
      self->_preReloadFirstCellOffset = 0.0;
LABEL_21:
      p_preReloadVisibleRowRange->location = v15;

    }
  }

}

- (id)_generateDeletedOrMovedRowsIndexSetFromUpdateItems:(id)a3 updateSupport:(id)a4 preReloadFirstVisibleRowIndexPath:(id)a5 outReloadedRowNewIndexPath:(id *)a6
{
  id v8;
  uint64_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  id v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id *v58;
  id v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[128];
  uint64_t v67;

  v58 = a6;
  v67 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (uint64_t *)a4;
  v61 = a5;
  objc_msgSend(MEMORY[0x1E0CB3788], "indexSet");
  v59 = (id)objc_claimAutoreleasedReturnValue();
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v10 = v8;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v62, v66, 16);
  if (!v11)
  {
    v60 = 0;
    goto LABEL_41;
  }
  v12 = v11;
  v60 = 0;
  v13 = *(_QWORD *)v63;
  do
  {
    v14 = 0;
    do
    {
      if (*(_QWORD *)v63 != v13)
        objc_enumerationMutation(v10);
      v15 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * v14);
      if (v15)
      {
        v16 = *(_DWORD *)(v15 + 20);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v62 + 1) + 8 * v14), "isDecomposedFromReload") & 1) != 0)
        {
          if (v16 != 1)
            goto LABEL_33;
          v17 = *(_BYTE *)(v15 + 16);
          v18 = *(id *)(v15 + 24);
          v19 = v18;
          if ((v17 & 1) == 0)
          {
            v20 = objc_msgSend(v18, "isEqual:", v61);

            if (!v20)
              goto LABEL_33;
            -[UIDecomposedReloadUpdateItem pairedItem]((id *)v15);
            v21 = objc_claimAutoreleasedReturnValue();
            v22 = (void *)v21;
            if (v21)
              v23 = *(void **)(v21 + 24);
            else
              v23 = 0;
            v24 = v23;

            goto LABEL_26;
          }
          v28 = objc_msgSend(v18, "section");
          v29 = objc_msgSend(v61, "section");

          if (v28 != v29)
            goto LABEL_33;
          -[UIDecomposedReloadUpdateItem pairedItem]((id *)v15);
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = (void *)v30;
          if (v30)
            v32 = *(void **)(v30 + 24);
          else
            v32 = 0;
          v33 = v32;
          v34 = objc_msgSend(v33, "section");

          v35 = objc_msgSend(v61, "row");
          v36 = -[UITableViewRowData numberOfRowsInSection:](v9[10], v34);
          if (v35 >= v36 - 1)
            v37 = v36 - 1;
          else
            v37 = v35;
          if ((v37 & 0x8000000000000000) == 0)
          {
            objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:");
            v24 = (id)objc_claimAutoreleasedReturnValue();

LABEL_26:
            v60 = v24;
            goto LABEL_33;
          }
          v48 = v9[9];
          v49 = *(id *)(v15 + 24);
          v50 = -[UITableViewRowData numberOfRowsInSection:](v48, objc_msgSend(v49, "section"));

          v51 = v9[9];
          v52 = (void *)MEMORY[0x1E0CB36B0];
          v53 = *(id *)(v15 + 24);
          objc_msgSend(v52, "indexPathForRow:inSection:", 0, objc_msgSend(v53, "section"));
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = -[UITableViewRowData globalRowForRowAtIndexPath:](v51, v54);

          if (v55 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v45 = v59;
            v46 = v55;
            v47 = v50;
            goto LABEL_32;
          }
        }
        else
        {
          if ((v16 & 0xFFFFFFFD) != 1)
            goto LABEL_33;
          if ((*(_BYTE *)(v15 + 16) & 1) != 0)
          {
            v38 = *(id *)(v15 + 24);
            v39 = objc_msgSend(v38, "section");

            v40 = -[UITableViewRowData numberOfRowsInSection:](v9[9], v39);
            if (v40 >= 1)
            {
              v41 = v40;
              v42 = v9[9];
              objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0, v39);
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              v44 = -[UITableViewRowData globalRowForRowAtIndexPath:](v42, v43);

              if (v44 != 0x7FFFFFFFFFFFFFFFLL)
              {
                v45 = v59;
                v46 = v44;
                v47 = v41;
LABEL_32:
                objc_msgSend(v45, "addIndexesInRange:", v46, v47, v58);
              }
            }
          }
          else
          {
            v25 = v9[9];
            v26 = *(id *)(v15 + 24);
            v27 = -[UITableViewRowData globalRowForRowAtIndexPath:](v25, v26);

            if (v27 != 0x7FFFFFFFFFFFFFFFLL)
              objc_msgSend(v59, "addIndex:", v27);
          }
        }
      }
      else
      {
        objc_msgSend(0, "isDecomposedFromReload");
      }
LABEL_33:
      ++v14;
    }
    while (v12 != v14);
    v56 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v62, v66, 16);
    v12 = v56;
  }
  while (v56);
LABEL_41:

  if (v58)
    *v58 = objc_retainAutorelease(v60);

  return v59;
}

- (void)setSectionHeaderTopPadding:(CGFloat)sectionHeaderTopPadding
{
  if (sectionHeaderTopPadding < 0.0)
    sectionHeaderTopPadding = -1.0;
  if (self->_sectionHeaderTopPadding != sectionHeaderTopPadding)
  {
    self->_sectionHeaderTopPadding = sectionHeaderTopPadding;
    -[UITableView _setNeedsRebuildGeometry](self, "_setNeedsRebuildGeometry");
  }
}

void __34__UITableView__reapTentativeViews__block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v5) & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "_reuseHeaderFooterView:isHeader:forSection:", v5, *(unsigned __int8 *)(a1 + 48), objc_msgSend(v6, "integerValue"));

}

- (void)setAllowsMultipleSelectionDuringEditing:(BOOL)allowsMultipleSelectionDuringEditing
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSMutableArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  p_tableFlags = &self->_tableFlags;
  if (((((*((_QWORD *)&self->_tableFlags + 2) & 0x2000) == 0) ^ allowsMultipleSelectionDuringEditing) & 1) == 0)
  {
    v5 = *((_QWORD *)&self->_tableFlags + 3);
    v6 = 0x2000;
    if (!allowsMultipleSelectionDuringEditing)
      v6 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFDFFFLL | v6;
    *((_QWORD *)&self->_tableFlags + 3) = v5;
    if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0)
    {
      if (!allowsMultipleSelectionDuringEditing)
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:](self, "_selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:", v7, 0, 0, 0);

      }
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v8 = self->_visibleCells;
      v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v14;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v14 != v11)
              objc_enumerationMutation(v8);
            objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "_setMultiselecting:", (*((_QWORD *)p_tableFlags + 2) >> 13) & 1, (_QWORD)v13);
          }
          v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        }
        while (v10);
      }

    }
    -[UITableView _updateMultiSelectControllerIfNeeded](self, "_updateMultiSelectControllerIfNeeded", (_QWORD)v13);
  }
}

- (void)_updateMultiSelectControllerIfNeeded
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v4;
  _UITableViewMultiSelectController *multiSelectController;
  _UITableViewMultiSelectController *v6;

  p_tableFlags = &self->_tableFlags;
  v4 = *((_QWORD *)&self->_tableFlags + 2) & 0x2000;
  if (dyld_program_sdk_at_least())
  {
    if ((*((_DWORD *)p_tableFlags + 4) >> 12) & 1 | (v4 >> 13))
      goto LABEL_3;
LABEL_6:
    -[_UITableViewMultiSelectController uninstallFromTableView](self->_multiSelectController, "uninstallFromTableView");
    multiSelectController = self->_multiSelectController;
    self->_multiSelectController = 0;
LABEL_8:

    return;
  }
  if (!v4)
    goto LABEL_6;
LABEL_3:
  if (!self->_multiSelectController)
  {
    v6 = -[_UITableViewMultiSelectController initWithTableView:]([_UITableViewMultiSelectController alloc], "initWithTableView:", self);
    multiSelectController = self->_multiSelectController;
    self->_multiSelectController = v6;
    goto LABEL_8;
  }
}

- (void)setDropDelegate:(id)dropDelegate
{
  id WeakRetained;
  id obj;

  obj = dropDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dropDelegate, obj);
    _UIValidateAccountBasedDelegateRespondsToSelector(obj, (uint64_t)sel__tableView_dataOwnerForDropSession_withDestinationIndexPath_);
    -[UITableView _createOrUninstallDragAndDropControllersIfNeeded](self, "_createOrUninstallDragAndDropControllersIfNeeded");
  }

}

- (void)setDragDelegate:(id)dragDelegate
{
  id WeakRetained;
  id obj;

  obj = dragDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dragDelegate, obj);
    _UIValidateAccountBasedDelegateRespondsToSelector(obj, (uint64_t)sel__tableView_dataOwnerForDragSession_atIndexPath_);
    -[UITableView _createOrUninstallDragAndDropControllersIfNeeded](self, "_createOrUninstallDragAndDropControllersIfNeeded");
  }

}

- (void)_updateDragControllerEnabledState
{
  uint64_t v3;

  -[_UITableViewDragController setForceEnabledForReordering:](self->_dragController, "setForceEnabledForReordering:", -[UITableView _dragAndDropUsedForReordering](self, "_dragAndDropUsedForReordering"));
  v3 = 1;
  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x1000000) == 0)
    v3 = 2;
  -[_UITableViewDragController setClientEnabledState:](self->_dragController, "setClientEnabledState:", v3 & ((uint64_t)(*((_QWORD *)&self->_tableFlags + 3) << 40) >> 63));
}

- (void)_createOrUninstallDragAndDropControllersIfNeeded
{
  BOOL v3;
  id WeakRetained;
  id v5;
  char v6;
  _UITableViewDragController *v7;
  _UITableViewDragController *v8;
  _UITableViewDragController *dragController;
  id v10;
  id v11;
  _UITableViewDropController *v12;
  _UITableViewDropController *dropController;
  _UITableViewDropController *v14;

  v3 = -[UITableView _dragAndDropUsedForReordering](self, "_dragAndDropUsedForReordering");
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (WeakRetained)
  {

  }
  else
  {
    v5 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (v5)
      v6 = 1;
    else
      v6 = v3;

    if ((v6 & 1) == 0)
    {
      -[_UITableViewDragController uninstallFromTableView](self->_dragController, "uninstallFromTableView");
      dragController = self->_dragController;
      self->_dragController = 0;

      goto LABEL_11;
    }
  }
  if (!self->_dragController)
  {
    v7 = -[_UITableViewDragController initWithTableView:]([_UITableViewDragController alloc], "initWithTableView:", self);
    v8 = self->_dragController;
    self->_dragController = v7;

  }
  -[UITableView _updateDragControllerEnabledState](self, "_updateDragControllerEnabledState");
LABEL_11:
  v10 = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (v10)
  {

LABEL_16:
    if (!self->_dropController)
    {
      v12 = -[_UITableViewDropController initWithTableView:]([_UITableViewDropController alloc], "initWithTableView:", self);
      dropController = self->_dropController;
      self->_dropController = v12;

    }
    return;
  }
  v11 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v11)
    v3 = 1;

  if (v3)
    goto LABEL_16;
  -[_UITableViewDropController uninstallFromTableView](self->_dropController, "uninstallFromTableView");
  v14 = self->_dropController;
  self->_dropController = 0;

}

- (BOOL)_dragAndDropUsedForReordering
{
  int v3;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  _BOOL4 v5;
  id WeakRetained;
  _BOOL4 v7;
  id v8;
  id v9;
  id v10;

  v3 = dyld_program_sdk_at_least();
  if (v3)
  {
    p_tableFlags = &self->_tableFlags;
    v5 = (~*((_DWORD *)&self->_tableFlags + 6) & 0x1800000) == 0;
    if ((*((_QWORD *)&self->_tableFlags + 3) & 0x800000) == 0)
      v5 = +[_UITableViewDragController isEnabledByDefault](_UITableViewDragController, "isEnabledByDefault");
    WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
    if (WeakRetained)
    {
      v7 = 1;
    }
    else
    {
      v8 = objc_loadWeakRetained((id *)&self->_dropDelegate);
      if (v8)
      {
        v7 = 1;
      }
      else
      {
        v9 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
        if (v9)
        {
          v7 = 1;
        }
        else
        {
          v10 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
          v7 = v10 != 0;

        }
      }

    }
    LOBYTE(v3) = (*((_BYTE *)p_tableFlags + 3) & 4) != 0
              && (v5 && v7
               || (_UIInternalPreferenceUsesDefault(&_UIInternalPreference_TableViewReorderingUsesDragAndDrop, (uint64_t)CFSTR("TableViewReorderingUsesDragAndDrop"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EDDA832C);
  }
  return v3;
}

- (void)_setHeaderAndFooterViewsFloat:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x1000000000;
  if (a3)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFEFFFFFFFFFLL | v3;
  -[UITableView _updateVisibleHeadersAndFootersNow:](self, "_updateVisibleHeadersAndFootersNow:", 1);
}

- (id)_indexPathForSelectedRowUsingPresentationValues:(BOOL)a3
{
  NSMutableArray *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v5 = self->_selectedIndexPaths;
  v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = *(_QWORD *)v21;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v21 != v9)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v10);
        if (!v8
          || (v12 = objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v10), "section", (_QWORD)v20),
              v12 < objc_msgSend(v8, "section"))
          || (v14 = objc_msgSend(v11, "section"), v14 == objc_msgSend(v8, "section"))
          && (v15 = objc_msgSend(v11, "row"), v15 < objc_msgSend(v8, "row")))
        {
          v13 = v11;

          v8 = v13;
        }
        ++v10;
      }
      while (v7 != v10);
      v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      v7 = v16;
    }
    while (v16);
  }
  else
  {
    v8 = 0;
  }

  if (!a3)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathBeforeShadowUpdates:](shadowUpdatesController, "indexPathBeforeShadowUpdates:", v8);
      v18 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v18;
    }
  }
  return v8;
}

void __61__UITableView__ensureInitializeSystemAppearanceModifications__block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];

  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "userInterfaceIdiom");

    if (((v3 - 1) & 0xFFFFFFFFFFFFFFFBLL) == 0)
    {
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = __61__UITableView__ensureInitializeSystemAppearanceModifications__block_invoke_2;
      v4[3] = &__block_descriptor_40_e5_v8__0l;
      v4[4] = *(_QWORD *)(a1 + 32);
      +[UIView _performSystemAppearanceModifications:](UIView, "_performSystemAppearanceModifications:", v4);
    }
  }
}

- (void)setPrefetchDataSource:(id)prefetchDataSource
{
  id v4;
  char v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  id v13;
  unint64_t v14;
  unsigned int v15;
  _UIWeakHelper *v16;
  _UIWeakHelper *v17;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  id location;
  _QWORD block[4];
  id v28;
  UITableView *v29;

  v4 = prefetchDataSource;
  if (!v4)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  v5 = dyld_program_sdk_at_least();
  v6 = v4;
  if ((v5 & 1) == 0)
  {
    v7 = objc_msgSend(v4, sel_allowsWeakReference);
    v6 = v4;
    if ((v7 & 1) == 0)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __37__UITableView_setPrefetchDataSource___block_invoke;
      block[3] = &unk_1E16B1B50;
      v8 = v4;
      v28 = v8;
      v29 = self;
      if (setPrefetchDataSource__once_0 != -1)
      {
        dispatch_once(&setPrefetchDataSource__once_0, block);
        v8 = v28;
      }

      goto LABEL_7;
    }
  }
LABEL_8:
  v9 = v6;

  WeakRetained = objc_loadWeakRetained((id *)&self->_prefetchDataSource);
  v11 = WeakRetained;
  if (WeakRetained != v9 || !v9 && (*((_BYTE *)&self->_tableFlags + 26) & 4) != 0)
  {
    if (WeakRetained)
      objc_setAssociatedObject(WeakRetained, (char *)&self->super.super.super.super.isa + 3, 0, (void *)1);
    objc_storeWeak((id *)&self->_prefetchDataSource, v9);
    v12 = v9;
    -[UITableView prefetchDataSource](self, "prefetchDataSource");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    if (v12 == v13)
    {
      v15 = -[UITableView allowsWeakReference](self, sel_allowsWeakReference);

      v14 = (unint64_t)(v12 != 0) << 18;
      if (v12 && v15)
      {
        objc_initWeak(&location, self);
        v16 = [_UIWeakHelper alloc];
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 3221225472;
        v24[2] = __37__UITableView_setPrefetchDataSource___block_invoke_509;
        v24[3] = &unk_1E16B3F40;
        objc_copyWeak(&v25, &location);
        v17 = -[_UIWeakHelper initWithDeallocationBlock:](v16, "initWithDeallocationBlock:", v24);
        objc_setAssociatedObject(v12, (char *)&self->super.super.super.super.isa + 3, v17, (void *)1);

        objc_destroyWeak(&v25);
        objc_destroyWeak(&location);
        v14 = 0x40000;
      }
    }
    else
    {

      v14 = (unint64_t)(v12 != 0) << 18;
    }

    p_tableFlags = &self->_tableFlags;
    v19 = *((_QWORD *)p_tableFlags + 3) & 0xFFFFFFFFFFFBFFFFLL | v14;
    *((_QWORD *)p_tableFlags + 2) = *((_QWORD *)p_tableFlags + 2);
    *((_QWORD *)p_tableFlags + 3) = v19;
    v20 = objc_opt_respondsToSelector();
    v21 = 0x80000;
    if ((v20 & 1) == 0)
      v21 = 0;
    *((_QWORD *)p_tableFlags + 3) = *((_QWORD *)p_tableFlags + 3) & 0xFFFFFFFFFFF7FFFFLL | v21;
    v22 = objc_opt_respondsToSelector();
    v23 = 0x100000;
    if ((v22 & 1) == 0)
      v23 = 0;
    *((_QWORD *)p_tableFlags + 3) = *((_QWORD *)p_tableFlags + 3) & 0xFFFFFFFFFFEFFFFFLL | v23;
  }

}

- (id)prefetchDataSource
{
  return objc_loadWeakRetained((id *)&self->_prefetchDataSource);
}

- (void)setDragInteractionEnabled:(BOOL)dragInteractionEnabled
{
  uint64_t v3;

  v3 = 0x800000;
  if (dragInteractionEnabled)
    v3 = 25165824;
  *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFFE7FFFFFLL | v3;
  -[UITableView _updateDragControllerEnabledState](self, "_updateDragControllerEnabledState");
}

- (void)_setTopPadding:(double)a3
{
  if (self->_topPadding != a3)
  {
    self->_topPadding = a3;
    -[UITableView _invalidateForTopOrBottomPaddingChange:](self, "_invalidateForTopOrBottomPaddingChange:", 1);
  }
}

- (void)_setBottomPadding:(double)a3
{
  if (self->_bottomPadding != a3)
  {
    self->_bottomPadding = a3;
    -[UITableView _invalidateForTopOrBottomPaddingChange:](self, "_invalidateForTopOrBottomPaddingChange:", 0);
  }
}

- (id)_indexPathsForSelectedRowsUsingPresentationValues:(BOOL)a3
{
  void *v5;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v7;

  if (-[NSMutableArray count](self->_selectedIndexPaths, "count"))
  {
    v5 = (void *)-[NSMutableArray copy](self->_selectedIndexPaths, "copy");
    if (a3)
      return v5;
  }
  else
  {
    v5 = 0;
    if (a3)
      return v5;
  }
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
  {
    -[_UITableViewShadowUpdatesController indexPathsBeforeShadowUpdates:](shadowUpdatesController, "indexPathsBeforeShadowUpdates:", v5);
    v7 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v7;
  }
  return v5;
}

- (void)setSectionHeaderHeight:(CGFloat)sectionHeaderHeight
{
  self->_sectionHeaderHeight = sectionHeaderHeight;
  if ((*((_BYTE *)&self->_tableFlags + 14) & 7) != 0)
    -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
}

- (void)setAllowsSelectionDuringEditing:(BOOL)allowsSelectionDuringEditing
{
  uint64_t v3;

  v3 = 2048;
  if (!allowsSelectionDuringEditing)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFF7FFLL | v3;
  if (!allowsSelectionDuringEditing)
    -[UITableView setAllowsMultipleSelectionDuringEditing:](self, "setAllowsMultipleSelectionDuringEditing:", 0);
}

- (CGRect)_rectForSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  int64_t v4;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  double v7;
  double v8;
  double v9;
  double v10;
  CGRect result;

  v4 = a3;
  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (v4 = -[_UITableViewShadowUpdatesController sectionAfterShadowUpdates:](shadowUpdatesController, "sectionAfterShadowUpdates:", a3), v4 == 0x7FFFFFFFFFFFFFFFLL))
  {
    v7 = *MEMORY[0x1E0C9D648];
    v8 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v9 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v10 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  }
  else
  {
    -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
    v7 = -[UITableViewRowData rectForSection:]((uint64_t)self->_rowData, v4);
  }
  result.size.height = v10;
  result.size.width = v9;
  result.origin.y = v8;
  result.origin.x = v7;
  return result;
}

- (void)setEstimatedRowHeight:(CGFloat)estimatedRowHeight
{
  int v6;
  _BOOL4 v7;
  void *v8;
  _BOOL4 v9;
  BOOL v10;
  CGFloat v11;
  unint64_t v12;
  NSObject *v13;
  uint8_t buf[4];
  CGFloat v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = dyld_program_sdk_at_least();
  v7 = estimatedRowHeight != -1.0 && estimatedRowHeight < 0.0;
  if (v6)
  {
    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 6754, CFSTR("Invalid estimated row height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&estimatedRowHeight);

    }
  }
  else if (v7)
  {
    v12 = setEstimatedRowHeight____s_category;
    if (!setEstimatedRowHeight____s_category)
    {
      v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v12, (unint64_t *)&setEstimatedRowHeight____s_category);
    }
    v13 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v15 = estimatedRowHeight;
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "Invalid estimated row height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }
  v9 = -[UITableView _estimatesRowHeights](self, "_estimatesRowHeights");
  v10 = estimatedRowHeight > 1.0 || estimatedRowHeight <= 0.0;
  v11 = 2.0;
  if (v10)
    v11 = estimatedRowHeight;
  self->_estimatedRowHeight = v11;
  if (v9 != -[UITableView _estimatesRowHeights](self, "_estimatesRowHeights"))
    -[UITableView _updateRowDataIfNeeded](self, "_updateRowDataIfNeeded");
}

- (void)_setSectionCornerRadius:(double)a3
{
  self->_sectionCornerRadius = a3;
}

- (void)setEstimatedSectionHeaderHeight:(CGFloat)estimatedSectionHeaderHeight
{
  int v6;
  _BOOL4 v7;
  void *v8;
  _BOOL4 v9;
  BOOL v10;
  CGFloat v11;
  unint64_t v12;
  NSObject *v13;
  uint8_t buf[4];
  CGFloat v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = dyld_program_sdk_at_least();
  v7 = estimatedSectionHeaderHeight != -1.0 && estimatedSectionHeaderHeight < 0.0;
  if (v6)
  {
    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 6764, CFSTR("Invalid estimated section header height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&estimatedSectionHeaderHeight);

    }
  }
  else if (v7)
  {
    v12 = setEstimatedSectionHeaderHeight____s_category;
    if (!setEstimatedSectionHeaderHeight____s_category)
    {
      v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v12, (unint64_t *)&setEstimatedSectionHeaderHeight____s_category);
    }
    v13 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v15 = estimatedSectionHeaderHeight;
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "Invalid estimated section header height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }
  v9 = -[UITableView _estimatesSectionHeaderHeights](self, "_estimatesSectionHeaderHeights");
  v10 = estimatedSectionHeaderHeight > 1.0 || estimatedSectionHeaderHeight <= 0.0;
  v11 = 2.0;
  if (v10)
    v11 = estimatedSectionHeaderHeight;
  self->_estimatedSectionHeaderHeight = v11;
  if (v9 != -[UITableView _estimatesSectionHeaderHeights](self, "_estimatesSectionHeaderHeights"))
    -[UITableView _updateRowDataIfNeeded](self, "_updateRowDataIfNeeded");
}

- (void)setSectionFooterHeight:(CGFloat)sectionFooterHeight
{
  self->_sectionFooterHeight = sectionFooterHeight;
  if ((*((_BYTE *)&self->_tableFlags + 14) & 7) != 0)
    -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
}

- (void)_setIgnoreCopyFilterForTableAnimations:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x400000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFBFFFFFFFFLL | v3;
  -[UITableView _setClearBlendingViewCompositingFilter](self, "_setClearBlendingViewCompositingFilter");
}

- (void)setSelectionFollowsFocus:(BOOL)selectionFollowsFocus
{
  uint64_t v3;

  v3 = 0x4000;
  if (selectionFollowsFocus)
    v3 = 0x8000;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFF3FFFLL | v3;
  -[UITableView _updateSelectionIsKey](self, "_updateSelectionIsKey");
}

- (id)_visibleCellsUsingPresentationValues:(BOOL)a3
{
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a3
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && -[_UITableViewShadowUpdatesController hasShadowUpdates](shadowUpdatesController, "hasShadowUpdates"))
  {
    -[UITableView _indexPathsForVisibleRowsUsingPresentationValues:](self, "_indexPathsForVisibleRowsUsingPresentationValues:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v5, "count"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v7);
          -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i), 0, (_QWORD)v14);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
            objc_msgSend(v6, "addObject:", v12);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }

  }
  else
  {
    if ((*((_BYTE *)&self->_tableFlags + 28) & 1) != 0)
    {
      UITableViewAlertForVisibleCellsAccessDuringUpdate(self);
      if ((dyld_program_sdk_at_least() & 1) != 0)
        return MEMORY[0x1E0C9AA60];
    }
    else
    {
      -[UITableView _updateVisibleCellsImmediatelyIfNecessary](self, "_updateVisibleCellsImmediatelyIfNecessary");
    }
    v6 = (void *)-[NSMutableArray copy](self->_visibleCells, "copy");
  }
  return v6;
}

- (void)setSeparatorInset:(UIEdgeInsets)separatorInset
{
  if (separatorInset.left != self->_separatorInset.left
    || separatorInset.top != self->_separatorInset.top
    || separatorInset.right != self->_separatorInset.right
    || separatorInset.bottom != self->_separatorInset.bottom)
  {
    self->_separatorInset = separatorInset;
    -[UITableView _adjustExtraSeparators](self, "_adjustExtraSeparators");
    -[UITableView _updateMarginWidthForVisibleViewsForceLayout:](self, "_updateMarginWidthForVisibleViewsForceLayout:", dyld_program_sdk_at_least() ^ 1);
  }
}

- (void)performBatchUpdates:(void *)updates completion:(void *)completion
{
  -[UITableView _performBatchUpdates:withContext:completion:](self, "_performBatchUpdates:withContext:completion:", updates, 0, completion);
}

- (double)_marginWidth
{
  double result;

  result = self->_separatorInset.left;
  if (result == -1.0)
    -[UITableView _defaultMarginWidth](self, "_defaultMarginWidth");
  return result;
}

- (void)setSectionIndexBackgroundColor:(UIColor *)sectionIndexBackgroundColor
{
  UIColor *v5;
  UIColor *v6;

  v5 = sectionIndexBackgroundColor;
  if (self->_indexBackgroundColor != v5)
  {
    v6 = v5;
    objc_storeStrong((id *)&self->_indexBackgroundColor, sectionIndexBackgroundColor);
    -[UITableViewIndex setIndexBackgroundColor:](self->_index, "setIndexBackgroundColor:", self->_indexBackgroundColor);
    v5 = v6;
  }

}

- (void)setRemembersLastFocusedIndexPath:(BOOL)remembersLastFocusedIndexPath
{
  uint64_t v3;

  v3 = 4096;
  if (!remembersLastFocusedIndexPath)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFEFFFLL | v3;
}

- (void)setAllowsFocus:(BOOL)allowsFocus
{
  uint64_t v3;

  v3 = 0x40000;
  if (allowsFocus)
    v3 = 0x80000;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFF3FFFFLL | v3;
}

uint64_t __37__UITableView__sectionForHeaderView___block_invoke(uint64_t result, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;

  if (*(_QWORD *)(result + 32) == a3)
  {
    v5 = result;
    result = objc_msgSend(a2, "integerValue");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

- (void)_setClearBlendingViewCompositingFilter
{
  uint64_t v2;
  id v3;

  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x400000000) != 0)
    v2 = 0;
  else
    v2 = *MEMORY[0x1E0CD2C18];
  -[UIView layer](self->_clearBlendingView, "layer");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCompositingFilter:", v2);

}

- (void)setSectionIndexColor:(UIColor *)sectionIndexColor
{
  UIColor **p_indexColor;
  UITableViewIndex *index;
  UIColor *v7;

  p_indexColor = &self->_indexColor;
  v7 = sectionIndexColor;
  if (*p_indexColor != v7)
  {
    objc_storeStrong((id *)&self->_indexColor, sectionIndexColor);
    index = self->_index;
    if (index)
      -[UITableViewIndex setIndexColor:](index, "setIndexColor:", *p_indexColor);
  }

}

- (void)_setMarginWidth:(double)a3
{
  -[UITableView setSeparatorInset:](self, "setSeparatorInset:", self->_separatorInset.top, a3, self->_separatorInset.bottom, self->_separatorInset.right);
}

- (void)setTableHeaderBackgroundColor:(id)a3
{
  id v4;
  UIView *tableHeaderBackgroundView;
  double v6;
  double v7;
  UIView *v8;
  UIView *v9;
  UIView *v10;
  id v11;

  v4 = a3;
  tableHeaderBackgroundView = self->_tableHeaderBackgroundView;
  v11 = v4;
  if (v4 && !tableHeaderBackgroundView)
  {
    -[UIView bounds](self, "bounds");
    v8 = -[UIView initWithFrame:]([UIView alloc], "initWithFrame:", 0.0, 0.0 - v6, v7, v6);
    v9 = self->_tableHeaderBackgroundView;
    self->_tableHeaderBackgroundView = v8;

    -[UIView setAutoresizingMask:](self->_tableHeaderBackgroundView, "setAutoresizingMask:", 2);
    -[UIView insertSubview:atIndex:](self, "insertSubview:atIndex:", self->_tableHeaderBackgroundView, 0);
LABEL_6:
    v4 = v11;
    goto LABEL_7;
  }
  if (!v4)
  {
    -[UIView removeFromSuperview](tableHeaderBackgroundView, "removeFromSuperview");
    v10 = self->_tableHeaderBackgroundView;
    self->_tableHeaderBackgroundView = 0;

    goto LABEL_6;
  }
LABEL_7:
  -[UIView setBackgroundColor:](self->_tableHeaderBackgroundView, "setBackgroundColor:", v4);

}

- (id)_indexPathForRowAtPoint:(CGPoint)a3 usingPresentationValues:(BOOL)a4
{
  CGFloat y;
  CGFloat x;
  UITableViewRowData *rowData;
  NSIndexPath *v9;
  UITableViewRowData *v10;
  UITableViewRowData *v11;
  void *v12;
  UITableViewRowData *v13;
  UITableViewRowData *v14;
  uint64_t v15;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v17;

  y = a3.y;
  x = a3.x;
  rowData = self->_rowData;
  if (rowData && (v9 = rowData->_draggedIndexPath) != 0)
  {

  }
  else
  {
    v10 = self->_rowData;
    if (v10)
      v10 = (UITableViewRowData *)v10->_gapIndexPath;
    v11 = v10;

    if (!v11)
    {
      -[UITableViewRowData indexPathsForRowsInRect:extraHitSpaceBetweenRows:]((uint64_t)self->_rowData, x, y, 0.0, 0.0, 0.0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "firstObject");
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
  }
  -[UITableViewRowData targetIndexPathForPoint:adjustedForGap:]((uint64_t)self->_rowData, 1, x, y);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v13 = self->_rowData;
    if (v13)
      v13 = (UITableViewRowData *)v13->_gapIndexPath;
    v14 = v13;

    if (v14)
    {
      if (-[UITableViewRowData dropLocationForPoint:atIndexPath:withInsets:]((uint64_t)self->_rowData, v12, x, y, 0.0, 0.0, 0.0, 0.0))
      {
        v15 = 0;
LABEL_14:

        v12 = (void *)v15;
      }
    }
  }
  if (!a4)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathBeforeShadowUpdates:](shadowUpdatesController, "indexPathBeforeShadowUpdates:", v12);
      v17 = objc_claimAutoreleasedReturnValue();

      v12 = (void *)v17;
    }
  }
  return v12;
}

- (void)_performDiffableUpdate:(id)a3
{
  id v5;
  void *v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t buf[4];
  UITableView *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 27) & 0x20) == 0)
  {
    _UIIsPrivateMainBundle();
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 19920, CFSTR("Attempted to apply updates to a table view from a UITableViewDiffableDataSource, but the table view's dataSource is not the UITableViewDiffableDataSource. Table view: %@"), self);

    }
    else if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v11 = self;
        _os_log_fault_impl(&dword_185066000, v9, OS_LOG_TYPE_FAULT, "Attempted to apply updates to a table view from a UITableViewDiffableDataSource, but the table view's dataSource is not the UITableViewDiffableDataSource. Table view: %@  This will become an assert in a future version.", buf, 0xCu);
      }

    }
    else
    {
      v7 = _performDiffableUpdate____s_category_0;
      if (!_performDiffableUpdate____s_category_0)
      {
        v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v7, (unint64_t *)&_performDiffableUpdate____s_category_0);
      }
      v8 = *(NSObject **)(v7 + 8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v11 = self;
        _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Attempted to apply updates to a table view from a UITableViewDiffableDataSource, but the table view's dataSource is not the UITableViewDiffableDataSource. Table view: %@  This will become an assert in a future version.", buf, 0xCu);
      }
    }
  }
  -[UITableView _performInternalBatchUpdates:](self, "_performInternalBatchUpdates:", v5);

}

- (void)_performInternalBatchUpdates:(id)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v4;

  p_tableFlags = &self->_tableFlags;
  v4 = *((_QWORD *)&self->_tableFlags + 3);
  *((_QWORD *)&self->_tableFlags + 3) = v4 | 0x40000000;
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  *((_QWORD *)p_tableFlags + 3) = *((_QWORD *)p_tableFlags + 3) & 0xFFFFFFFFBFFFFFFFLL | (((v4 >> 30) & 1) << 30);
}

- (id)_expectedDiffableUpdateItem
{
  UICollectionViewUpdateItem *expectedDiffableUpdateItem;

  if (dyld_program_sdk_at_least())
    expectedDiffableUpdateItem = self->_expectedDiffableUpdateItem;
  else
    expectedDiffableUpdateItem = 0;
  return expectedDiffableUpdateItem;
}

void __37__UITableView__removeAllVisibleCells__block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend(v4, "_reuseHeaderFooterView:isHeader:forSection:", v5, 1, objc_msgSend(a2, "integerValue"));

}

- (BOOL)isElementAccessibilityExposedToInterfaceBuilder
{
  return 0;
}

+ (BOOL)_isInternalTableView
{
  return 0;
}

- (id)_scrollTestExtraResults
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  objc_super v11;

  v3 = (void *)MEMORY[0x1E0C99D20];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -[UITableViewRowData numberOfRows]((uint64_t)self->_rowData));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "arrayWithObjects:", v4, CFSTR("sections"), v5, CFSTR("rows"), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("sections"), CFSTR("sectionsUnits"), CFSTR("rows"), CFSTR("rowsUnits"), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithObjects:forKeys:", v6, v7);
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  -[UIScrollView _scrollTestExtraResults](&v11, sel__scrollTestExtraResults);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addEntriesFromDictionary:", v9);

  return v8;
}

- (BOOL)_displaysCellContentStringsOnTapAndHold
{
  return 0;
}

void __29__UITableView__updateRowData__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  id v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v3 + 2080);
  v5 = *(_QWORD *)(v3 + 2176) + a3;
  v6 = a2;
  -[UITableViewRowData indexPathForRowAtGlobalRow:](v4, v5);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "_setIndexPath:", v7);

}

- (void)setCountStringInsignificantRowCount:(unint64_t)a3
{
  uint64_t v3;
  UITableViewCountView *countLabel;

  if (a3 <= 0xF && (*((_QWORD *)&self->_tableFlags + 2) & 0xFLL) != a3)
  {
    v3 = *((_QWORD *)&self->_tableFlags + 3);
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFFFF0 | a3;
    *((_QWORD *)&self->_tableFlags + 3) = v3;
    countLabel = self->_countLabel;
    if (countLabel)
      -[UITableViewCountView setCount:](countLabel, "setCount:", -[UITableView _countStringRowCount](self, "_countStringRowCount"));
  }
}

- (void)setCountString:(id)a3
{
  uint64_t v4;
  UITableViewCountView *countLabel;
  UITableViewCountView *v6;
  double v7;
  double v8;
  double v9;
  UITableViewCountView *v10;
  UITableViewCountView *v11;
  UITableViewCountView *v12;
  void *v13;
  id v14;

  v14 = a3;
  v4 = objc_msgSend(v14, "length");
  countLabel = self->_countLabel;
  if (!v4)
  {
    if (!countLabel)
      goto LABEL_8;
    -[UIView removeFromSuperview](self->_countLabel, "removeFromSuperview");
    v6 = self->_countLabel;
    self->_countLabel = 0;

LABEL_7:
    -[UITableView _updateContentSize](self, "_updateContentSize");
    goto LABEL_8;
  }
  if (!countLabel)
  {
    -[UIView bounds](self, "bounds");
    v8 = v7;
    -[UITableConstants defaultRowHeightForTableView:](self->_constants, "defaultRowHeightForTableView:", self);
    v10 = -[UITableViewCountView initWithFrame:withCountString:withCount:]([UITableViewCountView alloc], "initWithFrame:withCountString:withCount:", v14, -[UITableView _countStringRowCount](self, "_countStringRowCount"), 0.0, 0.0, v8, v9);
    v11 = self->_countLabel;
    self->_countLabel = v10;

    v12 = self->_countLabel;
    -[UIView backgroundColor](self, "backgroundColor");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView setBackgroundColor:](v12, "setBackgroundColor:", v13);

    -[UIView addSubview:](self, "addSubview:", self->_countLabel);
    -[UITableView sendSubviewToBack:](self, "sendSubviewToBack:", self->_countLabel);
    goto LABEL_7;
  }
  -[UITableViewCountView setCountString:withCount:](countLabel, "setCountString:withCount:", v14, -[UITableView _countStringRowCount](self, "_countStringRowCount"));
LABEL_8:

}

- (id)tableHeaderBackgroundColor
{
  return -[UIView backgroundColor](self->_tableHeaderBackgroundView, "backgroundColor");
}

- (id)_tableHeaderBackgroundView
{
  return self->_tableHeaderBackgroundView;
}

- (void)_setAccessoryBaseColor:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryBaseColor, a3);
}

- (void)setMultiselectCheckmarkColor:(id)a3
{
  id v5;
  NSMutableArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_storeStrong((id *)&self->_checkmarkColor, a3);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = self->_visibleCells;
  v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "_multiselectColorChanged", (_QWORD)v11);
      }
      while (v8 != v10);
      v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }

}

- (UIColor)multiselectCheckmarkColor
{
  return self->_checkmarkColor;
}

- (void)setSectionBorderColor:(id)a3
{
  UIColor *v5;
  UIColor **p_sectionBorderColor;
  NSMutableArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (UIColor *)a3;
  p_sectionBorderColor = &self->_sectionBorderColor;
  if (self->_sectionBorderColor != v5)
  {
    objc_storeStrong((id *)&self->_sectionBorderColor, a3);
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v7 = self->_visibleCells;
    v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v13;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v13 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "setSectionBorderColor:", *p_sectionBorderColor, (_QWORD)v12);
        }
        while (v9 != v11);
        v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v9);
    }

  }
}

- (void)_setHeightForTableHeaderViewHiding:(double)a3
{
  UITableViewRowData *rowData;

  -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
  rowData = self->_rowData;
  if (rowData)
    rowData->_heightForTableHeaderViewHiding = a3;
}

- (BOOL)_drawsTopShadowInGroupedSections
{
  return 0;
}

- (unint64_t)_edgesApplyingBaseInsetsToIndexBarInsets
{
  unint64_t v3;
  _BOOL4 v4;
  uint64_t v5;

  v3 = -[UIScrollView _edgesApplyingSafeAreaInsetsToScrollAccessoryInsets](self, "_edgesApplyingSafeAreaInsetsToScrollAccessoryInsets");
  v4 = -[UIView _shouldReverseLayoutDirection](self, "_shouldReverseLayoutDirection");
  v5 = -3;
  if (v4)
    v5 = -9;
  return v5 & v3;
}

- (UIEdgeInsets)_insetsForIndexBar
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double Width;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  CGRect v36;
  UIEdgeInsets result;

  -[UITableView _cachedSectionIndexBarInsets](self, "_cachedSectionIndexBarInsets");
  if (v6 == 1.79769313e308 && v3 == 1.79769313e308 && v5 == 1.79769313e308 && v4 == 1.79769313e308)
  {
    v18 = -[UITableView _edgesApplyingBaseInsetsToIndexBarInsets](self, "_edgesApplyingBaseInsetsToIndexBarInsets");
    -[UITableView _contentInset](self, "_contentInset");
    v23 = v19;
    if ((v18 & 1) != 0)
      v11 = 0.0;
    else
      v11 = v19;
    if ((~v18 & 2) != 0)
      v13 = v20;
    else
      v13 = 0.0;
    if ((~v18 & 4) != 0)
      v15 = v21;
    else
      v15 = 0.0;
    if ((~v18 & 8) != 0)
      v17 = v22;
    else
      v17 = 0.0;
    if (v18)
    {
      v24 = v21;
      -[UIView frame](self->_index, "frame");
      Width = CGRectGetWidth(v36);
      if (Width == 0.0)
        Width = 1.0;
      -[UIScrollView _baseInsetsForAccessoryOnEdge:hasCustomClientInsets:accessorySize:additionalInsetFromEdge:](self, "_baseInsetsForAccessoryOnEdge:hasCustomClientInsets:accessorySize:additionalInsetFromEdge:", 1, 0, Width, 0.0);
      v29 = fmax(v28, v23);
      v31 = fmax(v30, v24);
      if ((v18 & 1) != 0)
        v11 = v29;
      if ((v18 & 2) != 0)
        v13 = v26;
      if ((v18 & 4) != 0)
        v15 = v31;
      if ((v18 & 8) != 0)
        v17 = v27;
    }
    -[UITableView _setCachedSectionIndexBarInsets:](self, "_setCachedSectionIndexBarInsets:", v11, v13, v15, v17);
  }
  else
  {
    -[UITableView _cachedSectionIndexBarInsets](self, "_cachedSectionIndexBarInsets");
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;
  }
  v32 = v11;
  v33 = v13;
  v34 = v15;
  v35 = v17;
  result.right = v35;
  result.bottom = v34;
  result.left = v33;
  result.top = v32;
  return result;
}

- (void)_updateIndexTitles:(id)a3
{
  id v5;

  objc_storeStrong((id *)&self->_sectionIndexTitlesForTableView, a3);
  v5 = a3;
  -[_UICollectionTableIndexOverlaySelectionView reloadData](self->_indexOverlaySelectionView, "reloadData");
  -[UIView setNeedsLayout](self->_indexOverlaySelectionView, "setNeedsLayout");

}

- (void)_updateIndexDisplayedTitles
{
  id v3;

  -[UITableView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[UITableViewIndex setTitles:](self->_index, "setTitles:", v3);

}

- (id)_dataSourceSectionIndexTitles
{
  return self->_sectionIndexTitlesForTableView;
}

- (void)_removeIndex
{
  UIView *indexContainerView;
  UITableViewIndex *index;
  id v5;

  -[UIView removeFromSuperview](self->_indexContainerView, "removeFromSuperview");
  indexContainerView = self->_indexContainerView;
  self->_indexContainerView = 0;

  index = self->_index;
  self->_index = 0;

  -[UIScrollView _staticScrollBar](self, "_staticScrollBar");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setShouldInsetButtonsForIndex:", 0);

}

- (id)_sectionIndex
{
  return self->_index;
}

- (void)_updateIndexTitlesFromDataSource
{
  uint64_t tableFlags;
  void *v4;
  uint64_t v5;
  id v6;

  tableFlags = (uint64_t)self->_tableFlags;
  if ((tableFlags & 0x100) != 0)
  {
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_tableView:sectionIndexTitlesTrimmedToCount:", self, 0x7FFFFFFFFFFFFFFFLL);
    v5 = objc_claimAutoreleasedReturnValue();
LABEL_6:
    v6 = (id)v5;

    -[UITableView _updateIndexTitles:](self, "_updateIndexTitles:", v6);
    goto LABEL_7;
  }
  if ((tableFlags & 0x80) != 0)
  {
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sectionIndexTitlesForTableView:", self);
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  v6 = (id)MEMORY[0x1E0C9AA60];
  -[UITableView _updateIndexTitles:](self, "_updateIndexTitles:", MEMORY[0x1E0C9AA60]);
LABEL_7:

}

- (id)_indexBarEntries
{
  id v4;
  NSArray *sectionIndexTitlesForTableView;
  id v6;
  void *v7;
  void *v8;
  objc_super v9;
  _QWORD v10[5];
  id v11;

  if ((*(_BYTE *)&self->_tableFlags & 0x80) != 0)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    sectionIndexTitlesForTableView = self->_sectionIndexTitlesForTableView;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __31__UITableView__indexBarEntries__block_invoke;
    v10[3] = &unk_1E16BD3E8;
    v10[4] = self;
    v11 = v4;
    v6 = v4;
    -[NSArray enumerateObjectsUsingBlock:](sectionIndexTitlesForTableView, "enumerateObjectsUsingBlock:", v10);
    objc_msgSend(v6, "sortedArrayUsingComparator:", &__block_literal_global_532);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "valueForKey:", CFSTR("entry"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    return v8;
  }
  else
  {
    v9.receiver = self;
    v9.super_class = (Class)UITableView;
    -[UIScrollView _indexBarEntries](&v9, sel__indexBarEntries);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void __31__UITableView__indexBarEntries__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD v20[4];

  v20[3] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = v6[385];
  if ((v7 & 0x10000) == 0)
  {
LABEL_8:
    if ((v7 & 0x200) == 0)
      goto LABEL_13;
    objc_msgSend(v6, "_dataSourceProxy");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "tableView:sectionForSectionIndexTitle:atIndex:", *(_QWORD *)(a1 + 32), v5, a3);

    if (v17 < 0)
      goto LABEL_13;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2080);
    if (!v18)
      goto LABEL_13;
    if (v17 >= *(_QWORD *)(v18 + 64))
      goto LABEL_13;
    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, v17);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v9)
      goto LABEL_13;
    goto LABEL_3;
  }
  objc_msgSend(v6, "_dataSourceProxy");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "tableView:indexPathForSectionIndexTitle:atIndex:", *(_QWORD *)(a1 + 32), v5, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    v6 = *(_QWORD **)(a1 + 32);
    v7 = v6[385];
    goto LABEL_8;
  }
LABEL_3:
  if (objc_msgSend(v9, "row") == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0, objc_msgSend(v9, "section"));
    v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = v9;
  }
  v11 = v10;
  +[UIIndexBarEntry entryWithTitle:](UIIndexBarEntry, "entryWithTitle:", v5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setIndexPath:", v11);
  v13 = *(void **)(a1 + 40);
  v20[0] = v12;
  v19[0] = CFSTR("entry");
  v19[1] = CFSTR("index");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19[2] = CFSTR("indexPath");
  v20[1] = v14;
  v20[2] = v9;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "addObject:", v15);

LABEL_13:
}

uint64_t __31__UITableView__indexBarEntries__block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v4 = a2;
  v5 = a3;
  objc_msgSend(v4, "objectForKey:", CFSTR("indexPath"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", CFSTR("indexPath"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "compare:", v7);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v6, "section");
    if (v10 == objc_msgSend(v7, "section"))
    {
      if (objc_msgSend(v6, "row") == 0x7FFFFFFFFFFFFFFFLL)
      {
        v9 = -1;
      }
      else if (objc_msgSend(v7, "row") == 0x7FFFFFFFFFFFFFFFLL)
      {
        v9 = 1;
      }
    }
  }
  else
  {
    objc_msgSend(v4, "objectForKey:", CFSTR("index"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKey:", CFSTR("index"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v11, "compare:", v12);

  }
  return v9;
}

- (id)_focusFastScrollingIndexBarEntries
{
  void *v3;
  id v4;
  NSArray *sectionIndexTitlesForTableView;
  id v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v11[5];
  id v12;
  id v13;
  objc_super v14;

  if (-[UITableView _dataSourceHasSectionIndexTitlesForTableView](self, "_dataSourceHasSectionIndexTitlesForTableView"))
  {
    +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    sectionIndexTitlesForTableView = self->_sectionIndexTitlesForTableView;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __49__UITableView__focusFastScrollingIndexBarEntries__block_invoke;
    v11[3] = &unk_1E16D4108;
    v11[4] = self;
    v12 = v3;
    v13 = v4;
    v6 = v4;
    v7 = v3;
    -[NSArray enumerateObjectsUsingBlock:](sectionIndexTitlesForTableView, "enumerateObjectsUsingBlock:", v11);
    objc_msgSend(v6, "sortedArrayUsingComparator:", &__block_literal_global_150_1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "valueForKey:", CFSTR("entry"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    return v9;
  }
  else
  {
    v14.receiver = self;
    v14.super_class = (Class)UITableView;
    -[UIScrollView _focusFastScrollingIndexBarEntries](&v14, sel__focusFastScrollingIndexBarEntries);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void __49__UITableView__focusFastScrollingIndexBarEntries__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double (*v23)(uint64_t);
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id location;
  _QWORD v30[3];
  _QWORD v31[4];

  v31[3] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = v6[385];
  if ((v7 & 0x10000) == 0)
  {
LABEL_8:
    if ((v7 & 0x200) == 0)
      goto LABEL_13;
    objc_msgSend(v6, "_dataSourceProxy");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "tableView:sectionForSectionIndexTitle:atIndex:", *(_QWORD *)(a1 + 32), v5, a3);

    if (v19 < 0)
      goto LABEL_13;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2080);
    if (!v20)
      goto LABEL_13;
    if (v19 >= *(_QWORD *)(v20 + 64))
      goto LABEL_13;
    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, v19);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v9)
      goto LABEL_13;
    goto LABEL_3;
  }
  objc_msgSend(v6, "_dataSourceProxy");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "tableView:indexPathForSectionIndexTitle:atIndex:", *(_QWORD *)(a1 + 32), v5, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    v6 = *(_QWORD **)(a1 + 32);
    v7 = v6[385];
    goto LABEL_8;
  }
LABEL_3:
  if (objc_msgSend(v9, "row") == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0, objc_msgSend(v9, "section"));
    v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = v9;
  }
  v11 = v10;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v21 = MEMORY[0x1E0C809B0];
  v22 = 3221225472;
  v23 = __49__UITableView__focusFastScrollingIndexBarEntries__block_invoke_2;
  v24 = &unk_1E16E3BF0;
  objc_copyWeak(&v28, &location);
  v12 = v11;
  v25 = v12;
  v13 = v9;
  v26 = v13;
  v27 = *(id *)(a1 + 40);
  +[_UIFocusFastScrollingIndexBarEntry entryWithTitle:generator:](_UIFocusFastScrollingIndexBarEntry, "entryWithTitle:generator:", v5, &v21);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTargetFocusedIndexPath:", v12, v21, v22, v23, v24);
  v15 = *(void **)(a1 + 48);
  v31[0] = v14;
  v30[0] = CFSTR("entry");
  v30[1] = CFSTR("index");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v30[2] = CFSTR("indexPath");
  v31[1] = v16;
  v31[2] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, v30, 3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "addObject:", v17);

  objc_destroyWeak(&v28);
  objc_destroyWeak(&location);

LABEL_13:
}

double __49__UITableView__focusFastScrollingIndexBarEntries__block_invoke_2(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  double v20;
  double v21;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (!WeakRetained
    || (objc_msgSend(WeakRetained, "contentSize"), v4 == 0.0)
    || (objc_msgSend(v3, "contentSize"), v5 == 0.0))
  {
    v21 = INFINITY;
  }
  else
  {
    objc_msgSend(v3, "_rectForRowAtIndexPath:usingPresentationValues:", *(_QWORD *)(a1 + 32), 1);
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;
    objc_msgSend(v3, "_contentOffsetForScrollingToRowAtIndexPath:atScrollPosition:", *(_QWORD *)(a1 + 40), 1);
    v15 = v14;
    v17 = v16;
    objc_msgSend(*(id *)(a1 + 48), "scrollManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_focusTuple");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "contentOffsetForEnvironmentScrollableContainer:toShowRect:targetOffset:", v19, v7, v9, v11, v13, v15, v17);
    v21 = v20;

  }
  return v21;
}

uint64_t __49__UITableView__focusFastScrollingIndexBarEntries__block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v4 = a2;
  v5 = a3;
  objc_msgSend(v4, "objectForKey:", CFSTR("indexPath"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", CFSTR("indexPath"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "compare:", v7);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v6, "section");
    if (v10 == objc_msgSend(v7, "section"))
    {
      if (objc_msgSend(v6, "row") == 0x7FFFFFFFFFFFFFFFLL)
      {
        v9 = -1;
      }
      else if (objc_msgSend(v7, "row") == 0x7FFFFFFFFFFFFFFFLL)
      {
        v9 = 1;
      }
    }
  }
  else
  {
    objc_msgSend(v4, "objectForKey:", CFSTR("index"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKey:", CFSTR("index"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v11, "compare:", v12);

  }
  return v9;
}

- (CGPoint)indexBarAccessoryView:(id)a3 contentOffsetForEntry:(id)a4 atIndex:(int64_t)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t tableFlags;
  void *v13;
  void *v14;
  uint64_t v15;
  UITableViewRowData *rowData;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  objc_super v39;
  CGPoint result;

  v8 = a3;
  v9 = a4;
  if (!-[UITableView _dataSourceHasSectionIndexTitlesForTableView](self, "_dataSourceHasSectionIndexTitlesForTableView"))
  {
    v39.receiver = self;
    v39.super_class = (Class)UITableView;
    -[UIScrollView indexBarAccessoryView:contentOffsetForEntry:atIndex:](&v39, sel_indexBarAccessoryView_contentOffsetForEntry_atIndex_, v8, v9, a5);
    v18 = v35;
    v20 = v36;
    goto LABEL_18;
  }
  objc_msgSend(v9, "indexPath");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "title");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    tableFlags = (uint64_t)self->_tableFlags;
    if ((tableFlags & 0x10000) == 0)
    {
LABEL_6:
      if ((tableFlags & 0x200) == 0
        || (-[UITableView _dataSourceProxy](self, "_dataSourceProxy"),
            v14 = (void *)objc_claimAutoreleasedReturnValue(),
            v15 = objc_msgSend(v14, "tableView:sectionForSectionIndexTitle:atIndex:", self, v11, a5),
            v14,
            v15 < 0)
        || (rowData = self->_rowData) == 0
        || v15 >= rowData->_numSections
        || (objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, v15),
            (v10 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0, a5);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
      }
      goto LABEL_12;
    }
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "tableView:indexPathForSectionIndexTitle:atIndex:", self, v11, a5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
      tableFlags = (uint64_t)self->_tableFlags;
      goto LABEL_6;
    }
  }
LABEL_12:
  -[UITableView _contentOffsetForScrollingToRowAtIndexPath:atScrollPosition:usingPresentationValues:](self, "_contentOffsetForScrollingToRowAtIndexPath:atScrollPosition:usingPresentationValues:", v10, 1, 1);
  v18 = v17;
  v20 = v19;
  -[UIView _focusBehavior](self, "_focusBehavior");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v21, "refinesIndexBarTargetContentOffset"))
  {
    +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "scrollManager");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (v23)
    {
      -[UITableView _rectForRowAtIndexPath:usingPresentationValues:](self, "_rectForRowAtIndexPath:usingPresentationValues:", v10, 1);
      v25 = v24;
      v27 = v26;
      v29 = v28;
      v31 = v30;
      -[UIScrollView _focusTuple](self, "_focusTuple");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "contentOffsetForEnvironmentScrollableContainer:toShowRect:targetOffset:", v32, v25, v27, v29, v31, v18, v20);
      v18 = v33;
      v20 = v34;

    }
  }

LABEL_18:
  v37 = v18;
  v38 = v20;
  result.y = v38;
  result.x = v37;
  return result;
}

uint64_t __45__UITableView__endCellAnimationsWithContext___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)_Bug_Detected_In_Client_Of_UITableView_Invalid_Batch_Updates:(id)a3
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB3488];
  v6 = a3;
  objc_msgSend(v5, "currentHandler");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2608, CFSTR("%@"), v6);

}

- (void)_Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Sections:(id)a3
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB3488];
  v6 = a3;
  objc_msgSend(v5, "currentHandler");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2613, CFSTR("%@"), v6);

}

- (void)_Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Rows_In_Section:(id)a3
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB3488];
  v6 = a3;
  objc_msgSend(v5, "currentHandler");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 2618, CFSTR("%@"), v6);

}

- (void)_updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  NSIndexPath *focusedCellIndexPath;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  CGRect v20;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  focusedCellIndexPath = self->_focusedCellIndexPath;
  if (!focusedCellIndexPath)
    goto LABEL_19;
  v9 = -[NSIndexPath row](focusedCellIndexPath, "row");
  v10 = -[NSIndexPath section](self->_focusedCellIndexPath, "section");
  v11 = -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1);
  v12 = v10 < v11
      ? -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", -[NSIndexPath section](self->_focusedCellIndexPath, "section"), 1): 0;
  v13 = v9 == 0x7FFFFFFFFFFFFFFFLL || -[NSIndexPath row](self->_focusedCellIndexPath, "row") < v12;
  if (v10 >= v11 || !v13)
  {
    if (v10 >= v11)
      LOBYTE(v13) = 1;
    if (!v13 && v12)
    {
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", v12 - 1, -[NSIndexPath section](self->_focusedCellIndexPath, "section"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView _setFocusedCellIndexPath:](self, "_setFocusedCellIndexPath:", v15);

      self->_focusedViewType = 1;
    }
    if (!self->_focusedCellIndexPath)
    {
LABEL_19:
      v20.origin.x = x;
      v20.origin.y = y;
      v20.size.width = width;
      v20.size.height = height;
      if (!CGRectIsNull(v20))
      {
        _UIFocusClosestFocusableViewToRectInView(self, x, y, width, height);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (v16)
        {
          v19 = 0;
          v18 = 0;
          -[UITableView _managedSubviewForView:viewType:indexPath:](self, "_managedSubviewForView:viewType:indexPath:", v16, &v19, &v18);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          -[UITableView _setFocusedCellIndexPath:](self, "_setFocusedCellIndexPath:", v18);
          self->_focusedViewType = v19;

        }
      }
    }
  }
}

void __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend(v4, "_reuseHeaderFooterView:isHeader:forSection:", v5, 1, objc_msgSend(a2, "integerValue"));

}

void __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend(v4, "_reuseHeaderFooterView:isHeader:forSection:", v5, 0, objc_msgSend(a2, "integerValue"));

}

void __69__UITableView__updateFocusAfterLoadingCellsWithFocusedView_viewType___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  _UIFocusUpdateRequest *v7;

  v7 = -[_UIFocusUpdateRequest initWithEnvironment:]([_UIFocusUpdateRequest alloc], "initWithEnvironment:", *(_QWORD *)(a1 + 32));
  -[_UIFocusUpdateRequest setAllowsFocusingCurrentItem:](v7, "setAllowsFocusingCurrentItem:", 1);
  -[_UIFocusUpdateRequest setScrollIfNecessary:](v7, "setScrollIfNecessary:", (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 3104) >> 11) & 1);
  objc_msgSend(*(id *)(a1 + 32), "_focusSystem");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_requestFocusUpdate:", v7);
  objc_msgSend(v2, "updateFocusIfNeeded");
  v3 = *(_QWORD *)(a1 + 40);
  if (v3
    && objc_msgSend(*(id *)(a1 + 32), "_shouldReusePreviouslyFocusedTableViewSubview:viewType:", v3, *(unsigned int *)(a1 + 48)))
  {
    v4 = *(_DWORD *)(a1 + 48);
    v5 = *(void **)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    if (v4 == 1)
      objc_msgSend(v5, "_reuseTableViewCell:withIndexPath:didEndDisplaying:", v6, 0, 0);
    else
      objc_msgSend(v5, "_reuseHeaderFooterView:isHeader:forSection:", v6, v4 == 2, 0x7FFFFFFFFFFFFFFFLL);
  }

}

- (_NSRange)_sectionsInRect:(CGRect)a3
{
  NSUInteger v3;
  NSUInteger v4;
  _NSRange result;

  v3 = -[UITableViewRowData sectionsInRect:]((uint64_t)self->_rowData, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  result.length = v4;
  result.location = v3;
  return result;
}

- (id)_cellContainerView
{
  if ((*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0)
    self = (UITableView *)self->_wrapperView;
  return self;
}

- (BOOL)_shouldIncludeRowInMultipleSelectionGroupWithCell:(id)a3 atIndexPath:(id)a4
{
  id v6;
  id v7;
  BOOL v8;

  v6 = a3;
  v7 = a4;
  v8 = v7
    && ((-[NSMutableArray containsObject:](self->_selectedIndexPaths, "containsObject:", v7) & 1) != 0
     || -[NSMutableArray containsObject:](self->_highlightedIndexPaths, "containsObject:", v7))
    && (!v6
     || objc_msgSend(v6, "_usingBackgroundViewConfiguration")
     && (objc_msgSend(v6, "_backgroundIsVerticallyInset") & 1) == 0
     && objc_msgSend(v6, "_backgroundFillIsCustomized"));

  return v8;
}

- (void)_updateSelectionGroupingForVisibleCells
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = (void *)-[NSMutableArray copy](self->_visibleCells, "copy", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v8, 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _updateSelectionGroupingForCell:atIndexPath:](self, "_updateSelectionGroupingForCell:atIndexPath:", v8, v9);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

- (void)_cellDidShowSelectedBackground:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  double v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;
  CGRect v30;
  CGRect v31;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[UITableView _cellContainerView](self, "_cellContainerView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  objc_msgSend(v5, "subviews", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v25 != v10)
          objc_enumerationMutation(v6);
        v12 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        if (-[NSMutableArray containsObject:](self->_visibleCells, "containsObject:", v12))
        {
          v13 = v12;

          v9 = v13;
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v8);

    if (v9 && v9 != v4)
      objc_msgSend(v5, "insertSubview:aboveSubview:", v4, v9);
  }
  else
  {

    v9 = 0;
  }
  if ((objc_msgSend(v4, "_isMultiselecting") & 1) == 0 && objc_msgSend(v4, "selectionStyle"))
  {
    -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v4, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      v15 = -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_rowData, v14);
      v16 = v15 - 1;
      if (v15 >= 1)
      {
        v30.origin.x = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, v16, 1);
        CGRectGetMaxY(v30);
        -[UIView _screen](self, "_screen");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        UIRoundToScreenScale(v17);
        v19 = v18;
        objc_msgSend(v4, "frame");
        CGRectGetMinY(v31);
        -[UIView _screen](self, "_screen");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        UIRoundToScreenScale(v20);
        v22 = v21;

        if (v19 == v22)
        {
          -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, v16);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          -[UITableView _hideSeparatorForRowAtIndexPath:](self, "_hideSeparatorForRowAtIndexPath:", v23);

        }
      }
    }

  }
  -[UITableView _updateSelectionGroupingForVisibleCells](self, "_updateSelectionGroupingForVisibleCells");

}

- (void)_cellDidHideSelectedBackground:(id)a3
{
  void *v4;

  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", a3, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _showSeparatorForRowBeforeIndexPath:](self, "_showSeparatorForRowBeforeIndexPath:", v4);

  -[UITableView _updateSelectionGroupingForVisibleCells](self, "_updateSelectionGroupingForVisibleCells");
}

- (void)_hideSeparatorForRowAtIndexPath:(id)a3
{
  id v4;
  NSMutableSet *hiddenSeparatorIndexPaths;
  NSMutableSet *v6;
  NSMutableSet *v7;
  void *v8;
  id v9;

  v4 = a3;
  if (v4)
  {
    hiddenSeparatorIndexPaths = self->_hiddenSeparatorIndexPaths;
    v9 = v4;
    if (!hiddenSeparatorIndexPaths)
    {
      v6 = (NSMutableSet *)objc_alloc_init(MEMORY[0x1E0C99E20]);
      v7 = self->_hiddenSeparatorIndexPaths;
      self->_hiddenSeparatorIndexPaths = v6;

      v4 = v9;
      hiddenSeparatorIndexPaths = self->_hiddenSeparatorIndexPaths;
    }
    if ((-[NSMutableSet containsObject:](hiddenSeparatorIndexPaths, "containsObject:", v4) & 1) == 0)
      -[NSMutableSet addObject:](self->_hiddenSeparatorIndexPaths, "addObject:", v9);
    -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v9);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_setSeparatorHidden:", 1);

    v4 = v9;
  }

}

- (void)_showSeparatorForRowBeforeIndexPath:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  id v13;
  CGRect v14;
  CGRect v15;

  v4 = -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_rowData, a3);
  v5 = v4 - 1;
  if (v4 >= 1)
  {
    v6 = v4;
    v14.origin.x = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, v5, 1);
    CGRectGetMaxY(v14);
    -[UIView _screen](self, "_screen");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    UIRoundToScreenScale(v7);
    v9 = v8;
    v15.origin.x = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, v6, 1);
    CGRectGetMinY(v15);
    -[UIView _screen](self, "_screen");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    UIRoundToScreenScale(v10);
    v12 = v11;

    if (v9 == v12)
    {
      -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, v5);
      v13 = (id)objc_claimAutoreleasedReturnValue();
      -[UITableView _showSeparatorForRowAtIndexPath:](self, "_showSeparatorForRowAtIndexPath:", v13);

    }
  }
}

- (void)_showSeparatorForRowAtIndexPath:(id)a3
{
  NSMutableSet *hiddenSeparatorIndexPaths;
  id v5;
  id v6;

  if (a3)
  {
    hiddenSeparatorIndexPaths = self->_hiddenSeparatorIndexPaths;
    v5 = a3;
    -[NSMutableSet removeObject:](hiddenSeparatorIndexPaths, "removeObject:", v5);
    -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "_setSeparatorHidden:", 0);
  }
}

- (id)_tableViewCellForContentView:(id)a3
{
  id v3;
  uint64_t v4;

  v3 = a3;
  if (v3)
  {
    do
    {
      if ((_IsKindOfUITableViewCell(v3) & 1) != 0)
        break;
      objc_msgSend(v3, "superview");
      v4 = objc_claimAutoreleasedReturnValue();

      v3 = (id)v4;
    }
    while (v4);
  }
  return v3;
}

- (int64_t)_editingStyleForRowAtIndexPath:(id)a3
{
  id v4;
  uint64_t v5;
  int64_t v6;
  void *v7;

  v4 = a3;
  if (v4
    && ((v5 = *((_QWORD *)&self->_tableFlags + 2), (v5 & 0x2000) == 0)
     || (v5 & 0x100000000000) != 0
     || (*((_QWORD *)&self->_tableFlags + 1) & 0x10000000000000) == 0))
  {
    if ((*(_QWORD *)&self->_tableFlags & 0x40000) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v7, "tableView:editingStyleForRowAtIndexPath:", self, v4);

    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)_titleForDeleteConfirmationButtonForRowAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  if (v4)
  {
    if ((*((_BYTE *)&self->_tableFlags + 2) & 8) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:", self, v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      _UINSLocalizedStringWithDefaultValue(CFSTR("Delete"), CFSTR("Delete"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (id)_titleForSwipeAccessoryButtonForRowAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  if (v4 && (*((_BYTE *)&self->_tableFlags + 9) & 0x40) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "tableView:titleForSwipeAccessoryButtonForRowAtIndexPath:", self, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (id)_backgroundColorForDeleteConfirmationButtonForRowAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  if (v4)
  {
    if ((*((_BYTE *)&self->_tableFlags + 9) & 0x80) == 0
      || (-[UITableView _delegateProxy](self, "_delegateProxy"),
          v5 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v5, "tableView:backgroundColorForDeleteConfirmationButtonForRowAtIndexPath:", self, v4),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          v5,
          !v6))
    {
      +[UIColor systemRedColor](UIColor, "systemRedColor");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)_backgroundColorForSwipeAccessoryButtonForRowAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  if (v4)
  {
    if ((*((_BYTE *)&self->_tableFlags + 10) & 1) == 0
      || (-[UITableView _delegateProxy](self, "_delegateProxy"),
          v5 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v5, "tableView:backgroundColorForSwipeAccessoryButtonForRowAtIndexPath:", self, v4),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          v5,
          !v6))
    {
      +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.780392157, 0.780392157, 0.8, 1.0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (BOOL)_shouldIndentWhileEditingForRowAtIndexPath:(id)a3
{
  id v4;
  char v5;
  void *v6;

  v4 = a3;
  if (v4)
  {
    if ((*((_BYTE *)&self->_tableFlags + 3) & 2) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v6, "tableView:shouldIndentWhileEditingRowAtIndexPath:", self, v4);

    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (int64_t)_accessoryTypeForCell:(id)a3 forRowAtIndexPath:(id)a4
{
  id v6;
  id v7;
  int64_t v8;
  void *v9;

  v6 = a3;
  v7 = a4;
  if (v7)
  {
    if ((*((_BYTE *)&self->_tableFlags + 5) & 0x10) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v9, "tableView:accessoryTypeForRowWithIndexPath:", self, v7);

    }
    else
    {
      v8 = objc_msgSend(v6, "accessoryType");
    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (BOOL)_canMoveRowAtIndexPath:(id)a3
{
  id v4;
  uint64_t tableFlags;
  char v6;
  void *v8;

  v4 = a3;
  if (v4 && (tableFlags = (uint64_t)self->_tableFlags, (tableFlags & 0x4000000) != 0))
  {
    if ((tableFlags & 0x800) != 0)
    {
      -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v8, "tableView:canMoveRowAtIndexPath:", self, v4);

    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)_purgeReuseQueues
{
  _UITableViewPrefetchContext *prefetchContext;

  -[_UITableViewSubviewManager removeAllPrefetchedCells]((id *)&self->_subviewManager->super.isa);
  __32__UITableView__purgeReuseQueues__block_invoke(self->_reusableTableCells);
  __32__UITableView__purgeReuseQueues__block_invoke(self->_reusableHeaderFooterViews);
  prefetchContext = self->_prefetchContext;
  if (prefetchContext)
    -[_UITableViewPrefetchContext cancelWithNewMaxIndex:]((uint64_t)prefetchContext, prefetchContext->_maxIndex);
}

void __32__UITableView__purgeReuseQueues__block_invoke(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(v1, "objectEnumerator");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v18;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v18 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v6);
        v13 = 0u;
        v14 = 0u;
        v15 = 0u;
        v16 = 0u;
        v8 = v7;
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v14;
          do
          {
            v12 = 0;
            do
            {
              if (*(_QWORD *)v14 != v11)
                objc_enumerationMutation(v8);
              objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v12++), "removeFromSuperview");
            }
            while (v10 != v12);
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
          }
          while (v10);
        }

        ++v6;
      }
      while (v6 != v4);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v4);
  }

  objc_msgSend(v1, "removeAllObjects");
}

- (void)_setGestureRecognizerRequiresTableGestureRecognizersToFail:(id)a3
{
  id v4;
  NSMutableSet *clientGesturesRequiringTableGesturesToFail;
  NSMutableSet *v6;
  NSMutableSet *v7;
  id v8;
  UITableViewWrapperView *wrapperView;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  clientGesturesRequiringTableGesturesToFail = self->_clientGesturesRequiringTableGesturesToFail;
  if (!clientGesturesRequiringTableGesturesToFail)
  {
    v6 = (NSMutableSet *)objc_alloc_init(MEMORY[0x1E0C99E20]);
    v7 = self->_clientGesturesRequiringTableGesturesToFail;
    self->_clientGesturesRequiringTableGesturesToFail = v6;

    clientGesturesRequiringTableGesturesToFail = self->_clientGesturesRequiringTableGesturesToFail;
  }
  -[NSMutableSet addObject:](clientGesturesRequiringTableGesturesToFail, "addObject:", v4);
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  wrapperView = self->_wrapperView;
  if (wrapperView)
  {
    -[UIScrollView panGestureRecognizer](wrapperView, "panGestureRecognizer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addObject:", v10);

  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v11 = v8;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(v4, "requireGestureRecognizerToFail:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i), (_QWORD)v16);
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v13);
  }

}

- (BOOL)_ignoreCopyFilterForTableAnimations
{
  return (*((unsigned __int8 *)&self->_tableFlags + 28) >> 2) & 1;
}

- (void)_beginAnimatingCells
{
  UIView *clearBlendingView;
  UIView *v4;
  UIView *v5;
  UIView *v6;
  UITableViewWrapperView *v7;
  UITableViewWrapperView *wrapperView;
  NSMutableArray *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0
    && -[UITableView _clearBlendingViewAllowed](self, "_clearBlendingViewAllowed"))
  {
    clearBlendingView = self->_clearBlendingView;
    if (!clearBlendingView)
    {
      v4 = [UIView alloc];
      -[UIView bounds](self, "bounds");
      v5 = -[UIView initWithFrame:](v4, "initWithFrame:");
      v6 = self->_clearBlendingView;
      self->_clearBlendingView = v5;

      -[UIView setAutoresizingMask:](self->_clearBlendingView, "setAutoresizingMask:", 18);
      -[UITableView _setClearBlendingViewCompositingFilter](self, "_setClearBlendingViewCompositingFilter");
      clearBlendingView = self->_clearBlendingView;
    }
    -[UIView superview](clearBlendingView, "superview");
    v7 = (UITableViewWrapperView *)objc_claimAutoreleasedReturnValue();
    wrapperView = self->_wrapperView;

    if (v7 != wrapperView)
      -[UITableViewWrapperView _stickViewToBack:](self->_wrapperView, "_stickViewToBack:", self->_clearBlendingView);
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v9 = self->_visibleCells;
    v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v15;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v15 != v12)
            objc_enumerationMutation(v9);
          objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v13++), "_setAnimating:clippingAdjacentCells:", 1, 1, (_QWORD)v14);
        }
        while (v11 != v13);
        v11 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v11);
    }

  }
}

uint64_t __46__UITableView__updateWithItems_updateSupport___block_invoke_5(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

uint64_t __46__UITableView__updateWithItems_updateSupport___block_invoke_6(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

uint64_t __46__UITableView__updateWithItems_updateSupport___block_invoke_7(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  (*(void (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), a2 == 0);
  objc_msgSend(*(id *)(a1 + 32), "unlockActionViewForAnimation:", *(_QWORD *)(a1 + 40));
  result = objc_msgSend(*(id *)(a1 + 48), "_setSkipsLayout:", 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 3096) &= ~0x4000000000000000uLL;
  return result;
}

uint64_t __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_3(uint64_t a1)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;

  v1 = *(double **)(a1 + 40);
  if (v1)
  {
    v2 = v1[8];
    v3 = v1[9];
    v4 = v1[10];
    v5 = v1[11];
  }
  else
  {
    v3 = 0.0;
    v4 = 0.0;
    v5 = 0.0;
    v2 = 0.0;
  }
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", v2, v3, v4, v5);
}

- (BOOL)_isFocusedViewInDeletedSectionOrRow:(id)a3
{
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  NSIndexPath *focusedCellIndexPath;
  int focusedViewType;
  uint64_t v9;
  unint64_t v10;

  v4 = (uint64_t *)a3;
  v5 = v4;
  if (!self->_focusedCell)
    goto LABEL_9;
  v6 = 0;
  if (v4)
  {
    focusedCellIndexPath = self->_focusedCellIndexPath;
    if (focusedCellIndexPath)
    {
      focusedViewType = self->_focusedViewType;
      if ((focusedViewType - 2) < 2)
      {
        v9 = -[_UITableViewUpdateSupport finalSectionIndexForInitialSectionIndex:]((uint64_t)v4, -[NSIndexPath section](self->_focusedCellIndexPath, "section"));
LABEL_8:
        v6 = v9 == 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_10;
      }
      if (focusedViewType == 1)
      {
        v10 = -[UITableViewRowData globalRowForRowAtIndexPath:](v4[9], focusedCellIndexPath);
        v9 = -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:]((uint64_t)v5, v10);
        goto LABEL_8;
      }
LABEL_9:
      v6 = 0;
    }
  }
LABEL_10:

  return v6;
}

- (void)_animateSwipeOccurrenceAction:(id)a3 alongsideCell:(id)a4 animation:(id)a5
{
  CGRect *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  void *v18;
  double y;
  double x;
  double width;
  double height;
  void *v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  uint64_t v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat MinX;
  CGFloat v38;
  double v39;
  double MaxX;
  double MinY;
  double v42;
  id v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;

  v43 = a3;
  v7 = (CGRect *)a5;
  objc_msgSend(v43, "actionView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "frame");
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;
    -[UITableView _cellContainerView](self, "_cellContainerView");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      x = v7[2].origin.x;
      y = v7[2].origin.y;
      width = v7[2].size.width;
      height = v7[2].size.height;
    }
    else
    {
      y = 0.0;
      width = 0.0;
      height = 0.0;
      x = 0.0;
    }
    objc_msgSend(v9, "superview");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "convertRect:toView:", v23, x, y, width, height);
    v25 = v24;
    v27 = v26;
    v29 = v28;
    v31 = v30;

    v32 = objc_msgSend(v43, "direction");
    v33 = v25;
    v34 = v27;
    v35 = v29;
    v36 = v31;
    if (v32 == 1)
    {
      MinX = CGRectGetMinX(*(CGRect *)&v33);
      v38 = v11;
      v39 = MinX;
      v44.origin.x = v38;
      v44.origin.y = v13;
      v44.size.width = v15;
      v44.size.height = v17;
      MaxX = v39 - CGRectGetWidth(v44);
    }
    else
    {
      MaxX = CGRectGetMaxX(*(CGRect *)&v33);
    }
    v45.origin.x = v25;
    v45.origin.y = v27;
    v45.size.width = v29;
    v45.size.height = v31;
    MinY = CGRectGetMinY(v45);
    if (v7)
    {
      objc_msgSend(v9, "setFrame:", MaxX, MinY, v15, CGRectGetHeight(v7[2]));
      v42 = v7[1].origin.y;
    }
    else
    {
      v42 = 0.0;
      v46.origin.x = 0.0;
      v46.origin.y = 0.0;
      v46.size.width = 0.0;
      v46.size.height = 0.0;
      objc_msgSend(v9, "setFrame:", MaxX, MinY, v15, CGRectGetHeight(v46));
    }
    objc_msgSend(v9, "setAlpha:", v42);
  }

}

- (void)_animateScanlineViewForCell:(id)a3 occurrence:(id)a4 actionsView:(id)a5
{
  id v7;
  id v8;
  void *v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  CGFloat v20;
  double Width;
  double v22;
  double v23;
  UISwipeActionDeleteScanlineView *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  UISwipeActionDeleteScanlineView *v29;
  UISwipeActionDeleteScanlineView *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void *v34;
  UISwipeActionDeleteScanlineView *v35;
  _QWORD v36[4];
  UISwipeActionDeleteScanlineView *v37;
  uint64_t v38;
  CGFloat v39;
  double v40;
  double v41;
  CGRect v42;
  CGRect v43;

  v7 = a4;
  v8 = a3;
  -[UITableView _cellContainerView](self, "_cellContainerView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "bounds");
  objc_msgSend(v8, "convertRect:toView:", v9);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  +[UISwipeActionDeleteScanlineView lineHeight](UISwipeActionDeleteScanlineView, "lineHeight");
  v19 = v18;
  v42.origin.x = v11;
  v42.origin.y = v13;
  v42.size.width = v15;
  v42.size.height = v17;
  v20 = CGRectGetMinY(v42) - v19;
  v43.origin.x = v11;
  v43.origin.y = v13;
  v43.size.width = v15;
  v43.size.height = v17;
  Width = CGRectGetWidth(v43);
  objc_msgSend(v8, "separatorInset");
  v23 = v22;

  v24 = -[UISwipeActionDeleteScanlineView initWithFrame:]([UISwipeActionDeleteScanlineView alloc], "initWithFrame:", v23 + 0.0, v20 + 0.0, Width - (v23 + 0.0), v19);
  objc_msgSend(v7, "currentAction");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v25, "backgroundColor");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[UISwipeActionDeleteScanlineView setDeleteLineColor:](v24, "setDeleteLineColor:", v26);

  -[UIView setAlpha:](v24, "setAlpha:", 0.0);
  _UITableInsertSubviewInContainerAboveAllCells(v9, v24);
  +[_UISwipeAnimationFactory animatorForScanlineCollapse](_UISwipeAnimationFactory, "animatorForScanlineCollapse");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke;
  v36[3] = &unk_1E16B20D8;
  v29 = v24;
  v37 = v29;
  v38 = 0;
  v39 = v20;
  v40 = Width;
  v41 = v19;
  objc_msgSend(v27, "addAnimations:", v36);
  v31 = v28;
  v32 = 3221225472;
  v33 = __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_2;
  v34 = &unk_1E16B42D0;
  v35 = v29;
  v30 = v29;
  objc_msgSend(v27, "addCompletion:", &v31);
  objc_msgSend(v27, "startAnimation", v31, v32, v33, v34);

}

uint64_t __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  _QWORD aBlock[4];
  id v10;

  v4 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_3;
  aBlock[3] = &unk_1E16B3FD8;
  v10 = *(id *)(a1 + 32);
  v5 = _Block_copy(aBlock);
  v6 = v5;
  if (a2)
  {
    (*((void (**)(void *, _QWORD))v5 + 2))(v5, 0);
  }
  else
  {
    v7[0] = v4;
    v7[1] = 3221225472;
    v7[2] = __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_4;
    v7[3] = &unk_1E16B1B28;
    v8 = *(id *)(a1 + 32);
    +[UIView animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:](UIView, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 2, v7, v6, 0.5, 0.0, 1.0, 0.0);

  }
}

uint64_t __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_3(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

uint64_t __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

- (void)_accessoryButtonAction:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  unint64_t v10;
  NSObject *v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  id v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[UITableView _tableViewCellForContentView:](self, "_tableViewCellForContentView:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v5, 1);
    v6 = objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(v5, "accessoryActionSegueTemplate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (id)objc_msgSend(v7, "perform:", v5);

      objc_msgSend(v5, "_toggleExpansionButton");
      if ((*((_BYTE *)&self->_tableFlags + 5) & 0x20) != 0)
      {
        -[UITableView _delegateProxy](self, "_delegateProxy");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "tableView:accessoryButtonTappedForRowWithIndexPath:", self, v6);

      }
    }
    else if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        v15 = 138412546;
        v16 = v4;
        v17 = 2112;
        v18 = v5;
        _os_log_fault_impl(&dword_185066000, v14, OS_LOG_TYPE_FAULT, "Unable to obtain index path for accessory: %@ in cell: %@", (uint8_t *)&v15, 0x16u);
      }

    }
    else
    {
      v12 = qword_1EDDB0A00;
      if (!qword_1EDDB0A00)
      {
        v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v12, (unint64_t *)&qword_1EDDB0A00);
      }
      v13 = *(NSObject **)(v12 + 8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = 138412546;
        v16 = v4;
        v17 = 2112;
        v18 = v5;
        _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "Unable to obtain index path for accessory: %@ in cell: %@", (uint8_t *)&v15, 0x16u);
      }
    }
LABEL_15:

    goto LABEL_16;
  }
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      v15 = 138412290;
      v16 = v4;
      _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Unable to find containing cell for accessory: %@", (uint8_t *)&v15, 0xCu);
    }
    goto LABEL_15;
  }
  v10 = qword_1EDDB09F8;
  if (!qword_1EDDB09F8)
  {
    v10 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v10, (unint64_t *)&qword_1EDDB09F8);
  }
  v11 = *(NSObject **)(v10 + 8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v15 = 138412290;
    v16 = v4;
    _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "Unable to find containing cell for accessory: %@", (uint8_t *)&v15, 0xCu);
  }
LABEL_16:

}

- (BOOL)_shouldChangeIndexBasedOnValueChanged
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  BOOL v7;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "userInterfaceIdiom") == 3)
  {
    -[UIView window](self, "window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_screen");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "integerValue") == 2;

  }
  else
  {
    v7 = 1;
  }

  return v7;
}

- (void)_sectionIndexChanged:(id)a3
{
  if (-[UITableView _shouldChangeIndexBasedOnValueChanged](self, "_shouldChangeIndexBasedOnValueChanged", a3))
    -[UITableView _updateSectionIndex](self, "_updateSectionIndex");
}

- (void)_updateSectionIndex
{
  int64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  UISelectionFeedbackGenerator *indexRetargetFeedbackGenerator;
  double v17;

  v3 = -[UITableViewIndex selectedSection](self->_index, "selectedSection");
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (-[UITableViewIndex pastTop](self->_index, "pastTop"))
    {
      v4 = *MEMORY[0x1E0C9D648];
      v5 = *(double *)(MEMORY[0x1E0C9D648] + 8);
      v6 = *(double *)(MEMORY[0x1E0C9D648] + 16);
      v7 = *(double *)(MEMORY[0x1E0C9D648] + 24);
    }
    else
    {
      if (!-[UITableViewIndex pastBottom](self->_index, "pastBottom"))
        goto LABEL_12;
      -[UITableViewRowData rectForTable]((uint64_t)self->_rowData);
      v5 = v17 + -1.0;
      v4 = 0.0;
      v6 = 0.0;
      v7 = 0.0;
    }
    -[UIScrollView scrollRectToVisible:animated:](self, "scrollRectToVisible:animated:", 0, v4, v5, v6, v7);
  }
  else
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    v9 = v8;
    -[UITableViewIndex selectedSectionTitle](self->_index, "selectedSectionTitle");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _sectionIndexChangedToIndex:title:](self, "_sectionIndexChangedToIndex:title:", v3, v10);

    -[UIScrollView contentOffset](self, "contentOffset");
    v12 = v9 - v11;
    v13 = -(v9 - v11);
    if (v12 >= 0.0)
      v14 = v12;
    else
      v14 = v13;
    -[UITableView _defaultSectionHeaderHeight](self, "_defaultSectionHeaderHeight");
    if (v14 > v15)
    {
      indexRetargetFeedbackGenerator = self->_indexRetargetFeedbackGenerator;
      -[UIView center](self->_index, "center");
      -[UISelectionFeedbackGenerator selectionChangedAtLocation:](indexRetargetFeedbackGenerator, "selectionChangedAtLocation:");
    }
  }
LABEL_12:
  if (-[UITableView _shouldShowIndexOverlays](self, "_shouldShowIndexOverlays"))
  {
    -[UITableView _transitionIndexOverlayToVisible:shouldFadeBackToInvisible:](self, "_transitionIndexOverlayToVisible:shouldFadeBackToInvisible:", 1, 0);
    -[UITableView _moveSectionIndexTitleIndexToIndex:highlight:](self, "_moveSectionIndexTitleIndexToIndex:highlight:", v3, 0);
  }
}

- (int64_t)_sectionIndexChangedToIndex:(int64_t)a3 title:(id)a4
{
  id v6;
  uint64_t tableFlags;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  UITableViewRowData *rowData;
  void *v13;
  char v14;

  v6 = a4;
  tableFlags = (uint64_t)self->_tableFlags;
  v8 = a3;
  if ((tableFlags & 0x10000) != 0)
  {
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "tableView:indexPathForSectionIndexTitle:atIndex:", self, v6, a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = objc_msgSend(v10, "section");
    if (v10)
    {
      -[UITableView _scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:](self, "_scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:", v10, 1, 0, 1);
LABEL_12:
      -[UIView traitCollection](self, "traitCollection");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "interactionModel");

      if ((v14 & 2) != 0)
        -[UITableView _updateFocusedItemToIndexPath:](self, "_updateFocusedItemToIndexPath:", v10);
      goto LABEL_15;
    }
    tableFlags = (uint64_t)self->_tableFlags;
  }
  if ((tableFlags & 0x200) != 0)
  {
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v11, "tableView:sectionForSectionIndexTitle:atIndex:", self, v6, a3);

  }
  if (v8 < 0)
    goto LABEL_14;
  rowData = self->_rowData;
  if (rowData)
    rowData = (UITableViewRowData *)rowData->_numSections;
  if (v8 >= (uint64_t)rowData)
  {
LABEL_14:
    v10 = 0;
    goto LABEL_15;
  }
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:](self, "_scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:", v10, 1, 0, 1);
  if (v10)
    goto LABEL_12;
LABEL_15:

  return v8;
}

- (void)_sectionIndexTouchesBegan:(id)a3
{
  UISelectionFeedbackGenerator *indexRetargetFeedbackGenerator;

  indexRetargetFeedbackGenerator = self->_indexRetargetFeedbackGenerator;
  -[UIView center](self->_index, "center", a3);
  -[UISelectionFeedbackGenerator userInteractionStartedAtLocation:](indexRetargetFeedbackGenerator, "userInteractionStartedAtLocation:");
  if (-[UITableView _shouldChangeIndexBasedOnValueChanged](self, "_shouldChangeIndexBasedOnValueChanged"))
    -[UITableView _updateSectionIndex](self, "_updateSectionIndex");
}

- (void)_sectionIndexTouchesEnded:(id)a3
{
  UISelectionFeedbackGenerator *indexRetargetFeedbackGenerator;

  if ((*((_BYTE *)&self->_tableFlags + 23) & 1) != 0)
  {
    -[UITableView _startIndexOverlayTimerWithDelay:](self, "_startIndexOverlayTimerWithDelay:", a3, 0.75);
  }
  else if (!-[UITableView _shouldChangeIndexBasedOnValueChanged](self, "_shouldChangeIndexBasedOnValueChanged", a3)
         && -[UITableView _shouldShowIndexOverlays](self, "_shouldShowIndexOverlays"))
  {
    -[UITableView _transitionIndexOverlaySelectionViewToVisible:](self, "_transitionIndexOverlaySelectionViewToVisible:", 1);
  }
  indexRetargetFeedbackGenerator = self->_indexRetargetFeedbackGenerator;
  -[UIView center](self->_index, "center");
  -[UISelectionFeedbackGenerator userInteractionEndedAtLocation:](indexRetargetFeedbackGenerator, "userInteractionEndedAtLocation:");
}

- (void)_languageChanged
{
  NSArray *defaultSectionIndexTitles;

  defaultSectionIndexTitles = self->_defaultSectionIndexTitles;
  self->_defaultSectionIndexTitles = 0;

  *((_QWORD *)&self->_tableFlags + 2) &= ~0x8000000uLL;
}

- (void)_sendWillBeginEditingForIndexPath:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  if (v4 && (*((_BYTE *)&self->_tableFlags + 6) & 0x10) != 0)
  {
    v6 = v4;
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "tableView:willBeginEditingRowAtIndexPath:", self, v6);

    v4 = v6;
  }

}

- (void)_sendDidEndEditingForIndexPath:(id)a3
{
  id v4;
  id v5;

  if ((*((_BYTE *)&self->_tableFlags + 6) & 0x20) != 0)
  {
    v4 = a3;
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "tableView:didEndEditingRowAtIndexPath:", self, v4);

  }
}

- (id)deleteConfirmationIndexPath
{
  NSIndexPath *v3;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v5;

  v3 = self->_swipedIndexPath;
  if (!-[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"))
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathBeforeShadowUpdates:](shadowUpdatesController, "indexPathBeforeShadowUpdates:", v3);
      v5 = objc_claimAutoreleasedReturnValue();

      v3 = (NSIndexPath *)v5;
    }
  }
  return v3;
}

- (void)setDeleteConfirmationIndexPath:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v7;
  id v8;

  v4 = a4;
  v8 = a3;
  if (!-[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"))
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v8);
      v7 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v7;
    }
  }
  -[UISwipeActionController swipeItemAtIndexPath:configuration:direction:animated:completion:](self->_swipeActionController, "swipeItemAtIndexPath:configuration:direction:animated:completion:", v8, 0, 0, v4, 0);

}

- (void)_scrollToTopHidingTableHeader:(BOOL)a3
{
  _BOOL8 v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v3 = a3;
  -[UITableView _contentInset](self, "_contentInset");
  v6 = v5;
  v8 = v7;
  -[UITableView heightForAutohidingTableHeaderView](self, "heightForAutohidingTableHeaderView");
  -[UIScrollView setContentOffset:animated:](self, "setContentOffset:animated:", v3, v8, v9 - v6);
}

uint64_t __37__UITableView__sectionForFooterView___block_invoke(uint64_t result, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;

  if (*(_QWORD *)(result + 32) == a3)
  {
    v5 = result;
    result = objc_msgSend(a2, "integerValue");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

- (id)_nibExternalObjectsTablesForType:(int)a3
{
  uint64_t v4;
  void **v6;
  void *v7;
  id v8;
  void *v9;
  void *v12;

  if ((a3 & 0xFFFFFFFE) == 2)
  {
    v4 = 2296;
  }
  else
  {
    if (a3 != 1)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 5495, CFSTR("attempt to access nib external objects tables for unknown view type %ld"), a3);

    }
    v4 = 2280;
  }
  v6 = (void **)((char *)&self->super.super.super.super.isa + v4);
  v7 = *v6;
  if (!*v6)
  {
    v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v9 = *v6;
    *v6 = v8;

    v7 = *v6;
  }
  return v7;
}

- (UIScrollView)_wrapperView
{
  return (UIScrollView *)self->_wrapperView;
}

- (void)_handleUserInterfaceIdiomChange
{
  -[UITableView _updateConstants](self, "_updateConstants");
  -[UITableView _updateWrapperView](self, "_updateWrapperView");
  -[UITableView _updateVerticalScrollIndicatorVisibility](self, "_updateVerticalScrollIndicatorVisibility");
}

- (void)_updateConstantsForVisibleCellsAndHeaderFooterViews
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t k;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  -[UITableView _preparedCells](self, "_preparedCells");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v29 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "_setConstants:", self->_constants);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
    }
    while (v5);
  }

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  -[NSMutableDictionary objectEnumerator](self->_visibleHeaderViews, "objectEnumerator");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v25;
    do
    {
      for (j = 0; j != v10; ++j)
      {
        if (*(_QWORD *)v25 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * j);
        if (_IsKindOfUITableViewHeaderFooterView(v13))
          objc_msgSend(v13, "_setConstants:", self->_constants);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
    }
    while (v10);
  }

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[NSMutableDictionary objectEnumerator](self->_visibleFooterViews, "objectEnumerator", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v21;
    do
    {
      for (k = 0; k != v16; ++k)
      {
        if (*(_QWORD *)v21 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * k);
        if (_IsKindOfUITableViewHeaderFooterView(v19))
          objc_msgSend(v19, "_setConstants:", self->_constants);
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
    }
    while (v16);
  }

}

- (void)_updateListEnvironmentTraitOverrideWithSectionContentInsets:(UIEdgeInsets)a3
{
  unint64_t v6;
  uint64_t v7;
  id v8;

  if (a3.right <= 0.0 && a3.left <= 0.0 || ((*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3uLL) - 1 >= 2)
    v6 = (*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3;
  else
    v6 = 2;
  v7 = _UIListEnvironmentFromTableViewStyle(v6);
  -[UIView _internalTraitOverrides](self);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setListEnvironment:", v7);

}

void __61__UITableView__ensureInitializeSystemAppearanceModifications__block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "appearance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_setSeparatorsDrawInVibrantLightModeUIAppearance:", MEMORY[0x1E0C9AAA0]);

  v3 = *(void **)(a1 + 32);
  v7[0] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appearanceMatchingProperties:whenContainedInInstancesOfClasses:", &unk_1E1A9B518, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  +[UIColor clearColor](UIColor, "clearColor");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setBackgroundColor:", v6);

  objc_msgSend(v5, "_setSeparatorsDrawInVibrantLightModeUIAppearance:", MEMORY[0x1E0C9AAB0]);
}

- (void)_populateArchivedSubviews:(id)a3
{
  id v4;
  uint64_t v5;
  NSMutableArray *v6;
  uint64_t v7;
  char v8;
  char v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  objc_super v39;
  _BYTE v40[128];
  _BYTE v41[128];
  _BYTE v42[128];
  _QWORD v43[2];
  _QWORD v44[6];

  v44[5] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v39.receiver = self;
  v39.super_class = (Class)UITableView;
  -[UIScrollView _populateArchivedSubviews:](&v39, sel__populateArchivedSubviews_, v4);
  v44[0] = self->_topSeparator;
  v44[1] = self->_index;
  v44[2] = self->_countLabel;
  v44[3] = self->_backgroundView;
  v5 = 0;
  v44[4] = self->_wrapperView;
  do
  {
    if (v44[v5])
      objc_msgSend(v4, "removeObject:");
    ++v5;
  }
  while (v5 != 5);
  v43[0] = self->_visibleCells;
  v6 = self->_extraSeparators;
  v7 = 0;
  v43[1] = v6;
  v8 = 1;
  do
  {
    v9 = v8;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v10 = (id)v43[v7];
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v36 != v13)
            objc_enumerationMutation(v10);
          objc_msgSend(v4, "removeObject:", *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i));
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
      }
      while (v12);
    }

    v8 = 0;
    v7 = 1;
  }
  while ((v9 & 1) != 0);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  -[NSMutableDictionary objectEnumerator](self->_visibleHeaderViews, "objectEnumerator");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v32;
    do
    {
      for (j = 0; j != v17; ++j)
      {
        if (*(_QWORD *)v32 != v18)
          objc_enumerationMutation(v15);
        objc_msgSend(v4, "removeObject:", *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * j));
      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
    }
    while (v17);
  }

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  -[NSMutableDictionary objectEnumerator](self->_visibleFooterViews, "objectEnumerator", 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v27, v40, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v28;
    do
    {
      for (k = 0; k != v22; ++k)
      {
        if (*(_QWORD *)v28 != v23)
          objc_enumerationMutation(v20);
        objc_msgSend(v4, "removeObject:", *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * k));
      }
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v27, v40, 16);
    }
    while (v22);
  }

  for (m = 1; m != -1; --m)
  for (n = 4; n != -1; --n)

}

- (UITableView)initWithCoder:(NSCoder *)coder
{
  NSCoder *v4;
  id v5;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  char v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  _BOOL4 v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  char v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  uint64_t v71;
  objc_super v73;

  v4 = coder;
  *((_QWORD *)&self->_tableFlags + 2) |= 0x2000000000uLL;
  v73.receiver = self;
  v73.super_class = (Class)UITableView;
  v5 = -[UIScrollView initWithCoder:](&v73, sel_initWithCoder_, v4);
  if (!v5)
    goto LABEL_85;
  objc_msgSend((id)objc_opt_class(), "_ensureInitializeSystemAppearanceModifications");
  v6 = CFSTR("UITableViewStyle");
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UITableViewStyle"))
    || (v6 = CFSTR("UIStyle"), -[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIStyle"))))
  {
    v7 = -[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", v6);
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)v5 + 386) = *((_QWORD *)v5 + 386) & 0xFFFF9FFFFFFFFFFFLL | ((objc_msgSend(v5, "_mappedStyle:", v7) & 3) << 45);
  objc_msgSend(v5, "_setupTableViewCommon");
  if (-[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIUseCustomBackgroundView")))
  {
    -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UIBackgroundView"));
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)*((_QWORD *)v5 + 300);
    *((_QWORD *)v5 + 300) = v8;

    *((_QWORD *)v5 + 387) |= 0x8000000000uLL;
  }
  else if (((*((_QWORD *)v5 + 386) >> 45) & 3uLL) - 1 <= 1)
  {
    objc_msgSend(v5, "_defaultBackgroundView");
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)*((_QWORD *)v5 + 300);
    *((_QWORD *)v5 + 300) = v10;

  }
  objc_msgSend(v5, "_configureBackgroundView");
  if (!dyld_program_sdk_at_least())
  {
    *((_QWORD *)v5 + 386) &= 0xFFF8FFFFFFFFFFFFLL;
    if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISeparatorStyleIOS5AndLater")))
    {
      v12 = CFSTR("UISeparatorStyleIOS5AndLater");
    }
    else
    {
      if (!-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISeparatorStyle")))
        goto LABEL_20;
      v12 = CFSTR("UISeparatorStyle");
    }
    goto LABEL_18;
  }
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISeparatorStyleIOS9AndLater")))
  {
    v12 = CFSTR("UISeparatorStyleIOS9AndLater");
LABEL_18:
    v13 = -[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", v12);
    goto LABEL_19;
  }
  v13 = objc_msgSend(*((id *)v5 + 375), "defaultSeparatorStyleForTableViewStyle:", (*((_QWORD *)v5 + 386) >> 45) & 3);
LABEL_19:
  *((_QWORD *)v5 + 386) = *((_QWORD *)v5 + 386) & 0xFFF8FFFFFFFFFFFFLL | ((unint64_t)(v13 & 7) << 48);
LABEL_20:
  _tagObjectForSelector(v5, (uint64_t)sel_setSeparatorStyle_);
  v14 = *((_QWORD *)v5 + 386);
  if (__CFSUB__(v14 & 0x7000000000000, 0x2000000000000, 0))
  {
    *((_QWORD *)v5 + 385) = *((_QWORD *)v5 + 385);
    *((_QWORD *)v5 + 386) = v14 & 0xFFF8FFFFFFFFFFFFLL | 0x1000000000000;
  }
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIPrefetchingEnabled")))
  {
    v15 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIPrefetchingEnabled"));
    v16 = 0x20000;
    if (!v15)
      v16 = 0;
    *((_QWORD *)v5 + 388) = *((_QWORD *)v5 + 388) & 0xFFFFFFFFFFFDFFFFLL | v16;
  }
  objc_msgSend(v5, "_setupDefaultHeights");
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIRowHeight")))
  {
    -[NSCoder decodeFloatForKey:](v4, "decodeFloatForKey:", CFSTR("UIRowHeight"));
    *((double *)v5 + 261) = v17;
  }
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISectionHeaderHeight")))
  {
    -[NSCoder decodeFloatForKey:](v4, "decodeFloatForKey:", CFSTR("UISectionHeaderHeight"));
    *((double *)v5 + 262) = v18;
  }
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISectionFooterHeight")))
  {
    -[NSCoder decodeFloatForKey:](v4, "decodeFloatForKey:", CFSTR("UISectionFooterHeight"));
    *((double *)v5 + 263) = v19;
  }
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIEstimatedRowHeight")))
  {
    -[NSCoder decodeFloatForKey:](v4, "decodeFloatForKey:", CFSTR("UIEstimatedRowHeight"));
    *((double *)v5 + 264) = v20;
  }
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIEstimatedSectionHeaderHeight")))
  {
    -[NSCoder decodeFloatForKey:](v4, "decodeFloatForKey:", CFSTR("UIEstimatedSectionHeaderHeight"));
    *((double *)v5 + 265) = v21;
  }
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIEstimatedSectionFooterHeight")))
  {
    -[NSCoder decodeFloatForKey:](v4, "decodeFloatForKey:", CFSTR("UIEstimatedSectionFooterHeight"));
    *((double *)v5 + 266) = v22;
  }
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIFillerRowHeight")))
  {
    -[NSCoder decodeDoubleForKey:](v4, "decodeDoubleForKey:", CFSTR("UIFillerRowHeight"));
    *((_QWORD *)v5 + 391) = v23;
  }
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISectionHeaderTopPadding")))
  {
    -[NSCoder decodeDoubleForKey:](v4, "decodeDoubleForKey:", CFSTR("UISectionHeaderTopPadding"));
    *((_QWORD *)v5 + 392) = v24;
  }
  *((_QWORD *)v5 + 387) |= 0x400uLL;
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIAllowsSelection")))
  {
    v25 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIAllowsSelection"));
    v26 = *((_QWORD *)v5 + 388);
    v27 = 1024;
    if (!v25)
      v27 = 0;
    v28 = *((_QWORD *)v5 + 387) & 0xFFFFFFFFFFFFFBFFLL | v27;
    *((_QWORD *)v5 + 387) = v28;
    if ((v28 & 0x400) != 0)
      goto LABEL_47;
  }
  else
  {
    v28 = *((_QWORD *)v5 + 387);
    v26 = *((_QWORD *)v5 + 388);
    if ((v28 & 0x400) != 0)
    {
LABEL_47:
      if (-[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIAllowsMultipleSelection")))
        v29 = 4096;
      else
        v29 = 0;
      v28 = *((_QWORD *)v5 + 387);
      v26 = *((_QWORD *)v5 + 388);
      goto LABEL_53;
    }
  }
  v29 = 0;
LABEL_53:
  *((_QWORD *)v5 + 387) = v28 & 0xFFFFFFFFFFFFEFFFLL | v29;
  *((_QWORD *)v5 + 388) = v26;
  v30 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIAllowsSelectionDuringEditing"));
  v31 = *((_QWORD *)v5 + 388);
  v32 = 2048;
  if (!v30)
    v32 = 0;
  v33 = *((_QWORD *)v5 + 387) & 0xFFFFFFFFFFFFF7FFLL | v32;
  *((_QWORD *)v5 + 387) = v33;
  if (v30)
  {
    if (-[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIAllowsMultipleSelectionDuringEditing")))
      v34 = 0x2000;
    else
      v34 = 0;
    v33 = *((_QWORD *)v5 + 387);
    v31 = *((_QWORD *)v5 + 388);
  }
  else
  {
    v34 = 0;
  }
  *((_QWORD *)v5 + 387) = v33 & 0xFFFFFFFFFFFFDFFFLL | v34;
  *((_QWORD *)v5 + 388) = v31;
  objc_msgSend(v5, "_updateMultiSelectControllerIfNeeded");
  v35 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UICellLayoutMarginsFollowReadableWidth"));
  v36 = 0x2000;
  if (!v35)
    v36 = 0;
  *((_QWORD *)v5 + 388) = *((_QWORD *)v5 + 388) & 0xFFFFFFFFFFFFDFFFLL | v36;
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIInsetsContentViewsToSafeArea")))
  {
    v37 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIInsetsContentViewsToSafeArea"));
    v38 = 0x2000000;
    if (!v37)
      v38 = 0;
    *((_QWORD *)v5 + 388) = *((_QWORD *)v5 + 388) & 0xFFFFFFFFFDFFFFFFLL | v38;
  }
  -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UITableHeaderView"));
  v39 = objc_claimAutoreleasedReturnValue();
  v40 = (void *)*((_QWORD *)v5 + 306);
  *((_QWORD *)v5 + 306) = v39;

  -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UITableFooterView"));
  v41 = objc_claimAutoreleasedReturnValue();
  v42 = (void *)*((_QWORD *)v5 + 307);
  *((_QWORD *)v5 + 307) = v41;

  -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UISeparatorColor"));
  v43 = objc_claimAutoreleasedReturnValue();
  v44 = (void *)*((_QWORD *)v5 + 322);
  *((_QWORD *)v5 + 322) = v43;

  v45 = (void *)*((_QWORD *)v5 + 322);
  if (v45)
  {
    objc_msgSend(*((id *)v5 + 375), "defaultSeparatorColorForTableViewStyle:", (*((_QWORD *)v5 + 386) >> 45) & 3);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = objc_msgSend(v45, "isEqual:", v46);

    if ((v47 & 1) == 0)
      _tagObjectForSelector(v5, (uint64_t)sel_setSeparatorColor_);
  }
  else
  {
    if ((*((_BYTE *)v5 + 3093) & 0x60) != 0)
      +[UIColor tableSeparatorDarkColor](UIColor, "tableSeparatorDarkColor");
    else
      +[UIColor tableSeparatorLightColor](UIColor, "tableSeparatorLightColor");
    v48 = objc_claimAutoreleasedReturnValue();
    v49 = (void *)*((_QWORD *)v5 + 322);
    *((_QWORD *)v5 + 322) = v48;

  }
  objc_msgSend(v5, "_resetDarkenedSeparatorColor");
  -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UITableViewCellPrototypeNibs"));
  v50 = objc_claimAutoreleasedReturnValue();
  v51 = (void *)*((_QWORD *)v5 + 284);
  *((_QWORD *)v5 + 284) = v50;

  -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UITableViewCellPrototypeNibExternalObjects"));
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  mutableDictionaryByTransformingLeafDictionariesToWeakValued(v52);
  v53 = objc_claimAutoreleasedReturnValue();
  v54 = (void *)*((_QWORD *)v5 + 285);
  *((_QWORD *)v5 + 285) = v53;

  -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UITableViewHeaderFooterPrototypeNibs"));
  v55 = objc_claimAutoreleasedReturnValue();
  v56 = (void *)*((_QWORD *)v5 + 286);
  *((_QWORD *)v5 + 286) = v55;

  -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UITableViewHeaderFooterPrototypeNibExternalObjects"));
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  mutableDictionaryByTransformingLeafDictionariesToWeakValued(v57);
  v58 = objc_claimAutoreleasedReturnValue();
  v59 = (void *)*((_QWORD *)v5 + 287);
  *((_QWORD *)v5 + 287) = v58;

  -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UISectionIndexColor"));
  v60 = objc_claimAutoreleasedReturnValue();
  v61 = (void *)*((_QWORD *)v5 + 328);
  *((_QWORD *)v5 + 328) = v60;

  -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UISectionIndexBackgroundColor"));
  v62 = objc_claimAutoreleasedReturnValue();
  v63 = (void *)*((_QWORD *)v5 + 329);
  *((_QWORD *)v5 + 329) = v62;

  -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UISectionIndexTrackingBackgroundColor"));
  v64 = objc_claimAutoreleasedReturnValue();
  v65 = (void *)*((_QWORD *)v5 + 330);
  *((_QWORD *)v5 + 330) = v64;

  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISectionIndexMinimumDisplayRowCount")))
    *((_QWORD *)v5 + 316) = -[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", CFSTR("UISectionIndexMinimumDisplayRowCount"));
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISeparatorInset")))
  {
    -[NSCoder decodeUIEdgeInsetsForKey:](v4, "decodeUIEdgeInsetsForKey:", CFSTR("UISeparatorInset"));
    *((_QWORD *)v5 + 353) = v66;
    *((_QWORD *)v5 + 354) = v67;
    *((_QWORD *)v5 + 355) = v68;
    *((_QWORD *)v5 + 356) = v69;
  }
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISeparatorInsetReference")))
    objc_msgSend(v5, "setSeparatorInsetReference:", -[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", CFSTR("UISeparatorInsetReference")));
  if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UISpringLoaded")))
    objc_msgSend(v5, "setSpringLoaded:", -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UISpringLoaded")));
  v70 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIUsingCustomLayoutMargins"));
  v71 = *((_QWORD *)v5 + 388);
  if (v70)
    v71 |= 0x20uLL;
  *((_QWORD *)v5 + 387) &= ~0x2000000000uLL;
  *((_QWORD *)v5 + 388) = v71;
  _tagObjectForBackgroundColorIfNecessary(v5);
LABEL_85:

  return (UITableView *)v5;
}

- (void)awakeFromNib
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)UITableView;
  -[NSObject awakeFromNib](&v3, sel_awakeFromNib);
  _tagObjectForBackgroundColorIfNecessary(self);
}

- (void)encodeWithCoder:(id)a3
{
  id v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  double rowHeight;
  double sectionHeaderHeight;
  double sectionFooterHeight;
  double estimatedRowHeight;
  double estimatedSectionHeaderHeight;
  double estimatedSectionFooterHeight;
  uint64_t v18;
  unint64_t v19;
  UIView *tableHeaderView;
  UIView *tableFooterView;
  UIColor *v22;
  UIColor *separatorColor;
  UIView *backgroundView;
  UIColor *indexColor;
  UIColor *indexBackgroundColor;
  UIColor *indexTrackingBackgroundColor;
  int64_t sectionIndexMinimumDisplayRowCount;
  objc_super v29;

  v4 = a3;
  -[UIScrollView _setShowsVerticalScrollIndicatorFlag:](self, "_setShowsVerticalScrollIndicatorFlag:", (*((_QWORD *)&self->_tableFlags + 2) >> 26) & 1);
  -[UIScrollView _setShowsHorizontalScrollIndicatorFlag:](self, "_setShowsHorizontalScrollIndicatorFlag:", (*((_QWORD *)&self->_tableFlags + 2) >> 25) & 1);
  v29.receiver = self;
  v29.super_class = (Class)UITableView;
  -[UIScrollView encodeWithCoder:](&v29, sel_encodeWithCoder_, v4);
  -[UITableView _updateShowScrollIndicatorsFlag](self, "_updateShowScrollIndicatorsFlag");
  objc_msgSend(v4, "encodeInteger:forKey:", (*((_QWORD *)&self->_tableFlags + 1) >> 45) & 3, CFSTR("UITableViewStyle"));
  objc_msgSend(v4, "encodeInteger:forKey:", (*((_QWORD *)&self->_tableFlags + 1) & 0x600000000000) != 0, CFSTR("UIStyle"));
  v5 = *((_QWORD *)&self->_tableFlags + 1);
  v6 = HIWORD(v5) & 7;
  if (v6)
  {
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "userInterfaceIdiom");

    if ((v8 & 0xFFFFFFFFFFFFFFFBLL) != 1 && v6 == 2)
      v10 = 1;
    else
      v10 = v6;
    objc_msgSend(v4, "encodeInteger:forKey:", v10, CFSTR("UISeparatorStyle"));
    objc_msgSend(v4, "encodeInteger:forKey:", *((_WORD *)&self->_tableFlags + 7) & 7, CFSTR("UISeparatorStyleIOS5AndLater"));
    v5 = *((_QWORD *)&self->_tableFlags + 1);
    v11 = HIWORD(v5) & 7;
  }
  else
  {
    v11 = 0;
  }
  if (v11 != -[UITableConstants defaultSeparatorStyleForTableViewStyle:](self->_constants, "defaultSeparatorStyleForTableViewStyle:", (v5 >> 45) & 3))objc_msgSend(v4, "encodeInteger:forKey:", *((_WORD *)&self->_tableFlags + 7) & 7, CFSTR("UISeparatorStyleIOS9AndLater"));
  objc_msgSend(v4, "encodeBool:forKey:", (*((_QWORD *)&self->_tableFlags + 3) >> 17) & 1, CFSTR("UIPrefetchingEnabled"));
  rowHeight = self->_rowHeight;
  *(float *)&rowHeight = rowHeight;
  objc_msgSend(v4, "encodeFloat:forKey:", CFSTR("UIRowHeight"), rowHeight);
  sectionHeaderHeight = self->_sectionHeaderHeight;
  *(float *)&sectionHeaderHeight = sectionHeaderHeight;
  objc_msgSend(v4, "encodeFloat:forKey:", CFSTR("UISectionHeaderHeight"), sectionHeaderHeight);
  sectionFooterHeight = self->_sectionFooterHeight;
  *(float *)&sectionFooterHeight = sectionFooterHeight;
  objc_msgSend(v4, "encodeFloat:forKey:", CFSTR("UISectionFooterHeight"), sectionFooterHeight);
  estimatedRowHeight = self->_estimatedRowHeight;
  *(float *)&estimatedRowHeight = estimatedRowHeight;
  objc_msgSend(v4, "encodeFloat:forKey:", CFSTR("UIEstimatedRowHeight"), estimatedRowHeight);
  estimatedSectionHeaderHeight = self->_estimatedSectionHeaderHeight;
  *(float *)&estimatedSectionHeaderHeight = estimatedSectionHeaderHeight;
  objc_msgSend(v4, "encodeFloat:forKey:", CFSTR("UIEstimatedSectionHeaderHeight"), estimatedSectionHeaderHeight);
  estimatedSectionFooterHeight = self->_estimatedSectionFooterHeight;
  *(float *)&estimatedSectionFooterHeight = estimatedSectionFooterHeight;
  objc_msgSend(v4, "encodeFloat:forKey:", CFSTR("UIEstimatedSectionFooterHeight"), estimatedSectionFooterHeight);
  objc_msgSend(v4, "encodeDouble:forKey:", CFSTR("UIFillerRowHeight"), self->_fillerRowHeight);
  objc_msgSend(v4, "encodeDouble:forKey:", CFSTR("UISectionHeaderTopPadding"), self->_sectionHeaderTopPadding);
  v18 = *((_QWORD *)&self->_tableFlags + 2);
  if ((v18 & 0x400) != 0)
  {
    v19 = *((_QWORD *)&self->_tableFlags + 3);
    if ((v18 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  objc_msgSend(v4, "encodeBool:forKey:", 0, CFSTR("UIAllowsSelection"));
  v18 = *((_QWORD *)&self->_tableFlags + 2);
  v19 = *((_QWORD *)&self->_tableFlags + 3);
  if ((v18 & 0x800) != 0)
  {
LABEL_16:
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIAllowsSelectionDuringEditing"));
    v18 = *((_QWORD *)&self->_tableFlags + 2);
    v19 = *((_QWORD *)&self->_tableFlags + 3);
  }
LABEL_17:
  if ((v18 & 0x1000) != 0)
  {
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIAllowsMultipleSelection"));
    v19 = *((_QWORD *)&self->_tableFlags + 3);
    if ((*((_QWORD *)&self->_tableFlags + 2) & 0x2000) == 0)
    {
LABEL_19:
      if ((v19 & 0x2000) == 0)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  else if ((v18 & 0x2000) == 0)
  {
    goto LABEL_19;
  }
  objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIAllowsMultipleSelectionDuringEditing"));
  v19 = *((_QWORD *)&self->_tableFlags + 3);
  if ((v19 & 0x2000) != 0)
  {
LABEL_20:
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UICellLayoutMarginsFollowReadableWidth"));
    v19 = *((_QWORD *)&self->_tableFlags + 3);
  }
LABEL_21:
  objc_msgSend(v4, "encodeBool:forKey:", (v19 >> 25) & 1, CFSTR("UIInsetsContentViewsToSafeArea"));
  tableHeaderView = self->_tableHeaderView;
  if (tableHeaderView)
    objc_msgSend(v4, "encodeObject:forKey:", tableHeaderView, CFSTR("UITableHeaderView"));
  tableFooterView = self->_tableFooterView;
  if (tableFooterView)
    objc_msgSend(v4, "encodeObject:forKey:", tableFooterView, CFSTR("UITableFooterView"));
  if ((*((_BYTE *)&self->_tableFlags + 13) & 0x60) != 0)
    +[UIColor tableSeparatorDarkColor](UIColor, "tableSeparatorDarkColor");
  else
    +[UIColor tableSeparatorLightColor](UIColor, "tableSeparatorLightColor");
  v22 = (UIColor *)objc_claimAutoreleasedReturnValue();
  separatorColor = self->_separatorColor;
  if (separatorColor != v22)
    objc_msgSend(v4, "encodeObject:forKey:", separatorColor, CFSTR("UISeparatorColor"));
  if (-[NSMutableDictionary count](self->_nibMap, "count"))
    objc_msgSend(v4, "encodeObject:forKey:", self->_nibMap, CFSTR("UITableViewCellPrototypeNibs"));
  if (-[NSMutableDictionary count](self->_nibExternalObjectsTables, "count"))
    objc_msgSend(v4, "encodeObject:forKey:", self->_nibExternalObjectsTables, CFSTR("UITableViewCellPrototypeNibExternalObjects"));
  if (-[NSMutableDictionary count](self->_headerFooterNibMap, "count"))
    objc_msgSend(v4, "encodeObject:forKey:", self->_headerFooterNibMap, CFSTR("UITableViewHeaderFooterPrototypeNibs"));
  if (-[NSMutableDictionary count](self->_headerFooterNibExternalObjectsTables, "count"))
    objc_msgSend(v4, "encodeObject:forKey:", self->_headerFooterNibExternalObjectsTables, CFSTR("UITableViewHeaderFooterPrototypeNibExternalObjects"));
  if ((*((_BYTE *)&self->_tableFlags + 20) & 0x80) != 0)
  {
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIUseCustomBackgroundView"));
    backgroundView = self->_backgroundView;
    if (backgroundView)
      objc_msgSend(v4, "encodeObject:forKey:", backgroundView, CFSTR("UIBackgroundView"));
  }
  indexColor = self->_indexColor;
  if (indexColor)
    objc_msgSend(v4, "encodeObject:forKey:", indexColor, CFSTR("UISectionIndexColor"));
  indexBackgroundColor = self->_indexBackgroundColor;
  if (indexBackgroundColor)
    objc_msgSend(v4, "encodeObject:forKey:", indexBackgroundColor, CFSTR("UISectionIndexBackgroundColor"));
  indexTrackingBackgroundColor = self->_indexTrackingBackgroundColor;
  if (indexTrackingBackgroundColor)
    objc_msgSend(v4, "encodeObject:forKey:", indexTrackingBackgroundColor, CFSTR("UISectionIndexTrackingBackgroundColor"));
  sectionIndexMinimumDisplayRowCount = self->_sectionIndexMinimumDisplayRowCount;
  if (sectionIndexMinimumDisplayRowCount)
    objc_msgSend(v4, "encodeInteger:forKey:", sectionIndexMinimumDisplayRowCount, CFSTR("UISectionIndexMinimumDisplayRowCount"));
  if (self->_separatorInset.left != -1.0 || self->_separatorInset.right != -1.0)
    objc_msgSend(v4, "encodeUIEdgeInsets:forKey:", CFSTR("UISeparatorInset"), self->_separatorInset.top);
  objc_msgSend(v4, "encodeInteger:forKey:", -[UITableView separatorInsetReference](self, "separatorInsetReference"), CFSTR("UISeparatorInsetReference"));
  if (-[UITableView isSpringLoaded](self, "isSpringLoaded"))
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UISpringLoaded"));
  if ((*((_BYTE *)&self->_tableFlags + 24) & 0x20) != 0)
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIUsingCustomLayoutMargins"));

}

- (void)setDelaysContentTouches:(BOOL)a3
{
  _BOOL8 v3;
  objc_super v5;

  v3 = a3;
  v5.receiver = self;
  v5.super_class = (Class)UITableView;
  -[UIScrollView setDelaysContentTouches:](&v5, sel_setDelaysContentTouches_);
  if (dyld_program_sdk_at_least())
    -[UIScrollView setDelaysContentTouches:](self->_wrapperView, "setDelaysContentTouches:", v3);
}

- (int64_t)_popoverControllerStyle
{
  void *v2;
  void *v3;
  int64_t v4;

  -[UIView _viewControllerForAncestor](self, "_viewControllerForAncestor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_popoverController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_popoverControllerStyle");

  return v4;
}

- (BOOL)_isInModalViewController
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  -[UIView _viewControllerForAncestor](self, "_viewControllerForAncestor");
  v2 = objc_claimAutoreleasedReturnValue();
  if (!v2)
    return 0;
  v3 = (_QWORD *)v2;
  do
  {
    v4 = v3[15];
    v5 = v4 != 0;
    if (v4)
      break;
    objc_msgSend(v3, "parentViewController");
    v6 = objc_claimAutoreleasedReturnValue();

    v3 = (_QWORD *)v6;
  }
  while (v6);

  return v5;
}

void __29__UITableView_setDataSource___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = _UITableViewCodingKey_style_Yukon_block_invoke___s_category;
  if (!_UITableViewCodingKey_style_Yukon_block_invoke___s_category)
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UITableViewCodingKey_style_Yukon_block_invoke___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "You are trying to set a deallocating object as dataSource. This will be a hard crash in the future. Offending object: %@ hosting object: %@", (uint8_t *)&v6, 0x16u);
  }
}

void __29__UITableView_setDataSource___block_invoke_468(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "dataSource");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v2)
      objc_msgSend(v3, "setDataSource:", 0);

    WeakRetained = v3;
  }

}

- (id)_dataSourceActual
{
  return objc_loadWeakRetained((id *)&self->_dataSource);
}

void __37__UITableView_setPrefetchDataSource___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = _UITableViewCodingKey_style_Yukon_block_invoke_2___s_category;
  if (!_UITableViewCodingKey_style_Yukon_block_invoke_2___s_category)
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UITableViewCodingKey_style_Yukon_block_invoke_2___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "You are trying to set a deallocating object as prefetchDataSource. This will be a hard crash in the future. Offending object: %@ hosting object: %@", (uint8_t *)&v6, 0x16u);
  }
}

void __37__UITableView_setPrefetchDataSource___block_invoke_509(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "prefetchDataSource");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v2)
      objc_msgSend(v3, "setPrefetchDataSource:", 0);

    WeakRetained = v3;
  }

}

- (id)_prefetchDataSourceActual
{
  return objc_loadWeakRetained((id *)&self->_prefetchDataSource);
}

- (id)_prefetchDataSourceProxy
{
  _UITableViewShadowUpdatesController *WeakRetained;

  if (-[_UITableViewShadowUpdatesController hasShadowUpdates](self->_shadowUpdatesController, "hasShadowUpdates"))
    WeakRetained = self->_shadowUpdatesController;
  else
    WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_prefetchDataSource);
  return WeakRetained;
}

void __27__UITableView_setDelegate___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = _UITableViewCodingKey_style_Yukon_block_invoke_3___s_category;
  if (!_UITableViewCodingKey_style_Yukon_block_invoke_3___s_category)
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UITableViewCodingKey_style_Yukon_block_invoke_3___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "You are trying to set a deallocating object as a delegate. This will be a hard crash in the future. Offending object: %@ hostObject: %@", (uint8_t *)&v6, 0x16u);
  }
}

- (id)_delegateActual
{
  return objc_loadWeakRetained(&self->super._delegate);
}

- (UIColor)sectionIndexColor
{
  return self->_indexColor;
}

- (UIColor)sectionIndexBackgroundColor
{
  return self->_indexBackgroundColor;
}

- (UIColor)sectionIndexTrackingBackgroundColor
{
  return self->_indexTrackingBackgroundColor;
}

- (void)setSectionIndexTrackingBackgroundColor:(UIColor *)sectionIndexTrackingBackgroundColor
{
  UIColor *v5;
  UIColor *v6;

  v5 = sectionIndexTrackingBackgroundColor;
  if (self->_indexTrackingBackgroundColor != v5)
  {
    v6 = v5;
    objc_storeStrong((id *)&self->_indexTrackingBackgroundColor, sectionIndexTrackingBackgroundColor);
    -[UITableViewIndex setIndexTrackingBackgroundColor:](self->_index, "setIndexTrackingBackgroundColor:", self->_indexTrackingBackgroundColor);
    v5 = v6;
  }

}

- (void)_performInternalReloadData
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v3;

  p_tableFlags = &self->_tableFlags;
  v3 = *((_QWORD *)&self->_tableFlags + 3);
  *((_QWORD *)&self->_tableFlags + 3) = v3 | 0x4000000000;
  -[UITableView reloadData](self, "reloadData");
  *((_QWORD *)p_tableFlags + 3) = *((_QWORD *)p_tableFlags + 3) & 0xFFFFFFBFFFFFFFFFLL | (((v3 >> 38) & 1) << 38);
}

- (void)_ensurePreReloadVisibleRowRangeIsValidWithPostReloadRowCount:(int64_t)a3
{
  NSUInteger length;
  NSUInteger location;

  location = self->_preReloadVisibleRowRange.location;
  length = self->_preReloadVisibleRowRange.length;
  if (length + location > a3)
  {
    length = a3 - location;
    self->_preReloadVisibleRowRange.length = a3 - location;
  }
  if (a3 >= 1 && !length)
  {
    self->_preReloadVisibleRowRange.location = a3 - 1;
    self->_preReloadVisibleRowRange.length = 1;
    self->_preReloadFirstCellOffset = 0.0;
  }
}

- (double)_contentOffsetYForRestoringScrollPositionOfFirstVisibleRowWithContentInsetTop:(double)a3 canGuessHeights:(BOOL)a4
{
  CGRect v7;

  if (!self->_preReloadVisibleRowRange.length)
    return -a3;
  v7.origin.x = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, self->_preReloadVisibleRowRange.location, a4);
  return CGRectGetMinY(v7) + self->_preReloadFirstCellOffset - a3;
}

- (void)reloadSectionIndexTitles
{
  *((_QWORD *)&self->_tableFlags + 2) &= ~0x8000000uLL;
  -[UITableView _updateIndex](self, "_updateIndex");
}

- (void)setIndexHiddenForSearch:(BOOL)a3
{
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  NSMutableArray *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  UITableViewIndex *index;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)&self->_tableFlags + 2);
  if (((((v3 & 0x800000) == 0) ^ a3) & 1) == 0)
  {
    v4 = a3;
    v6 = *((_QWORD *)&self->_tableFlags + 3);
    v7 = v3 & 0xFFFFFFFFFE7FFFFFLL;
    v8 = 25165824;
    if (!a3)
      v8 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = v7 | v8;
    *((_QWORD *)&self->_tableFlags + 3) = v6;
    if (self->_index)
    {
      -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
      v9 = 1.0;
      if (v4)
        v9 = 0.0;
      -[UIView setAlpha:](self->_index, "setAlpha:", v9);
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v10 = self->_visibleCells;
      v11 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v10, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v18;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v18 != v13)
              objc_enumerationMutation(v10);
            v15 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
            if (objc_msgSend(v15, "drawingEnabled", (_QWORD)v17))
              objc_msgSend(v15, "setNeedsDisplay");
          }
          v12 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v10, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        }
        while (v12);
      }

      index = self->_index;
    }
    else
    {
      index = 0;
    }
    -[UIView setUserInteractionEnabled:](index, "setUserInteractionEnabled:", !v4, (_QWORD)v17);
  }
}

- (void)setIndexHidden:(BOOL)a3 animated:(BOOL)a4
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v7;
  uint64_t v8;
  UITableViewIndex *index;
  _BOOL8 v10;
  _QWORD v11[5];

  v4 = *((_QWORD *)&self->_tableFlags + 2);
  if (((((v4 & 0x800000) == 0) ^ a3) & 1) == 0)
  {
    v5 = a3;
    v7 = *((_QWORD *)&self->_tableFlags + 3);
    v8 = 0x800000;
    if (!a3)
      v8 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = v4 & 0xFFFFFFFFFE7FFFFFLL | v8;
    *((_QWORD *)&self->_tableFlags + 3) = v7;
    index = self->_index;
    if (index)
    {
      v10 = a4;
      -[UIView setAlpha:](index, "setAlpha:", 1.0);
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __39__UITableView_setIndexHidden_animated___block_invoke_2;
      v11[3] = &unk_1E16B1B28;
      v11[4] = self;
      +[UIView conditionallyAnimate:withAnimation:layout:completion:](UIView, "conditionallyAnimate:withAnimation:layout:completion:", v10, &__block_literal_global_699, v11, 0);
      index = self->_index;
    }
    -[UIView setUserInteractionEnabled:](index, "setUserInteractionEnabled:", !v5, a4);
  }
}

uint64_t __39__UITableView_setIndexHidden_animated___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 4, a2, a3, 0.2, 0.0);
}

void __39__UITableView_setIndexHidden_animated___block_invoke_2(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_updateIndexFrame");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 2192);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        objc_msgSend(v7, "setNeedsLayout", (_QWORD)v8);
        objc_msgSend(v7, "layoutSubviews");
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

}

- (CGRect)_indexFrame
{
  UITableViewIndex *index;
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  index = self->_index;
  if (index)
  {
    -[UIView frame](index, "frame");
  }
  else
  {
    v3 = *MEMORY[0x1E0C9D648];
    v4 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v5 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v6 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  }
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (BOOL)isIndexHidden
{
  return *((unsigned __int8 *)&self->_tableFlags + 18) >> 7;
}

- (void)setTableHeaderViewShouldAutoHide:(BOOL)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  p_tableFlags = &self->_tableFlags;
  v4 = *((_QWORD *)&self->_tableFlags + 2);
  if (((((v4 & 0x10000000) == 0) ^ a3) & 1) == 0)
  {
    v6 = *((_QWORD *)&self->_tableFlags + 3);
    if (a3)
    {
      *((_QWORD *)&self->_tableFlags + 2) = v4 & 0xFFFFFFFF7FFFFFFFLL;
      *((_QWORD *)&self->_tableFlags + 3) = v6;
      -[UITableView _updatePinnedTableHeader](self, "_updatePinnedTableHeader");
      v4 = *((_QWORD *)p_tableFlags + 2);
      v6 = *((_QWORD *)p_tableFlags + 3);
      v7 = 0x10000000;
      v8 = 0x20000000;
      v9 = 0x40000000;
    }
    else
    {
      v9 = 0;
      v8 = 0;
      v7 = 0;
    }
    *((_QWORD *)p_tableFlags + 2) = v4 & 0xFFFFFFFF8FFFFFFFLL | v9 | v8 | v7;
    *((_QWORD *)p_tableFlags + 3) = v6;
    -[UIScrollView contentOffset](self, "contentOffset");
    -[UITableView setContentOffset:](self, "setContentOffset:");
  }
}

- (BOOL)tableHeaderViewShouldAutoHide
{
  return (*((unsigned __int8 *)&self->_tableFlags + 19) >> 4) & 1;
}

- (void)setOverlapsSectionHeaderViews:(BOOL)a3
{
  uint64_t v3;

  v3 = 32;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFFFDFLL | v3;
  if ((*((_BYTE *)&self->_tableFlags + 14) & 7) != 0)
    -[UITableView _scheduleAdjustExtraSeparators](self, "_scheduleAdjustExtraSeparators");
}

- (NSString)description
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v4;
  void *v5;
  void *v6;
  UITableViewDataSource **p_dataSource;
  id WeakRetained;
  void *v9;
  objc_class *v10;
  void *v11;
  id v12;
  objc_super v14;

  p_tableFlags = &self->_tableFlags;
  v4 = *((_QWORD *)&self->_tableFlags + 3);
  *((_QWORD *)&self->_tableFlags + 3) = v4 | 0x4000000;
  v14.receiver = self;
  v14.super_class = (Class)UITableView;
  -[UIScrollView description](&v14, sel_description);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "mutableCopy");

  objc_msgSend(v6, "deleteCharactersInRange:", objc_msgSend(v6, "length") - 1, 1);
  p_dataSource = &self->_dataSource;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  v9 = WeakRetained;
  if ((v4 & 0x4000000) != 0)
  {
    v10 = (objc_class *)objc_opt_class();
    NSStringFromClass(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_loadWeakRetained((id *)p_dataSource);
    objc_msgSend(v6, "appendFormat:", CFSTR("; dataSource: <%@: %p>>"), v11, v12);

  }
  else
  {
    objc_msgSend(v6, "appendFormat:", CFSTR("; dataSource: %@>"), WeakRetained);
  }

  *((_QWORD *)p_tableFlags + 3) = *((_QWORD *)p_tableFlags + 3) & 0xFFFFFFFFFBFFFFFFLL | v4 & 0x4000000;
  return (NSString *)v6;
}

- (CGRect)rectForHeaderInSection:(NSInteger)section
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  -[UITableView _rectForHeaderInSection:usingPresentationValues:](self, "_rectForHeaderInSection:usingPresentationValues:", section, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (CGRect)_floatingRectForHeaderInSection:(int64_t)a3 heightCanBeGuessed:(BOOL)a4
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGRect result;

  -[UIView bounds](self, "bounds");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  -[UITableView _contentInset](self, "_contentInset");
  v19 = -[UITableViewRowData floatingRectForHeaderInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, a3, a4, 0, v8 + v18, v10 + v15, v12 - (v18 + v16), v14 - (v15 + v17));
  result.size.height = v22;
  result.size.width = v21;
  result.origin.y = v20;
  result.origin.x = v19;
  return result;
}

- (CGRect)rectForFooterInSection:(NSInteger)section
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  -[UITableView _rectForFooterInSection:usingPresentationValues:](self, "_rectForFooterInSection:usingPresentationValues:", section, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (CGRect)_floatingRectForFooterInSection:(int64_t)a3 heightCanBeGuessed:(BOOL)a4
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGRect result;

  -[UIView bounds](self, "bounds");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  -[UITableView _contentInset](self, "_contentInset");
  v19 = -[UITableViewRowData floatingRectForFooterInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, a3, a4, 0, v8 + v18, v10 + v15, v12 - (v18 + v16), v14 - (v15 + v17));
  result.size.height = v22;
  result.size.width = v21;
  result.origin.y = v20;
  result.origin.x = v19;
  return result;
}

- (CGRect)_rectForTableHeaderView
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  v2 = -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

- (CGRect)_rectForTableFooterView
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  v2 = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

- (UITableViewHeaderFooterView)footerViewForSection:(NSInteger)section
{
  return (UITableViewHeaderFooterView *)-[UITableView _footerViewForSection:usingPresentationValues:](self, "_footerViewForSection:usingPresentationValues:", section, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
}

- (id)_footerViewForSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  id v6;
  void *v7;

  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (a3 = -[_UITableViewShadowUpdatesController sectionAfterShadowUpdates:](shadowUpdatesController, "sectionAfterShadowUpdates:", a3), a3 == 0x7FFFFFFFFFFFFFFFLL))
  {
    v6 = 0;
  }
  else
  {
    -[UITableView _visibleFooterViewForSection:](self, "_visibleFooterViewForSection:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (_IsKindOfUITableViewHeaderFooterView(v7))
      v6 = v7;
    else
      v6 = 0;

  }
  return v6;
}

- (CGPoint)_contentOffsetForScrollingToRowAtIndexPath:(id)a3 atScrollPosition:(int64_t)a4
{
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGPoint result;

  v6 = a3;
  -[UITableView _contentOffsetForScrollingToRowAtIndexPath:atScrollPosition:usingPresentationValues:](self, "_contentOffsetForScrollingToRowAtIndexPath:atScrollPosition:usingPresentationValues:", v6, a4, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
  v8 = v7;
  v10 = v9;

  v11 = v8;
  v12 = v10;
  result.y = v12;
  result.x = v11;
  return result;
}

- (CGPoint)_contentOffsetForScrollingToRowAtIndexPath:(id)a3 atScrollPosition:(int64_t)a4 usingPresentationValues:(BOOL)a5
{
  id v8;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v10;
  uint64_t v11;
  UITableViewRowData *rowData;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  UITableViewRowData *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double Height;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  int v56;
  CGFloat v57;
  CGFloat v58;
  double v59;
  uint64_t v60;
  double v61;
  int64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  int v68;
  void *v69;
  double x;
  double y;
  double width;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  CGFloat v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  CGFloat v103;
  double v104;
  double v105;
  CGFloat v106;
  CGFloat v107;
  double v108;
  UITableViewRowData *v109;
  uint64_t v110;
  CGFloat v111;
  double v112;
  double v113;
  double v114;
  CGFloat v115;
  CGFloat v116;
  CGFloat v117;
  CGFloat v118;
  CGFloat v119;
  double v120;
  double v121;
  CGFloat v122;
  CGFloat v123;
  double v124;
  double MaxY;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  BOOL v131;
  double v132;
  double v133;
  CGFloat v134;
  CGFloat v135;
  CGFloat v136;
  uint64_t v137;
  double v138;
  CGFloat v139;
  CGFloat v140;
  CGFloat v141;
  CGFloat MinX;
  double MinY;
  double v144;
  CGFloat v145;
  CGFloat v146;
  CGFloat v147;
  void *v148;
  double v149;
  double v150;
  double rect;
  CGFloat v152;
  CGFloat v153;
  CGFloat v154;
  double v155;
  CGRect v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  CGPoint result;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;
  CGRect v173;
  CGRect v174;
  CGRect v175;
  CGRect v176;
  CGRect v177;
  CGRect v178;
  CGRect v179;
  CGRect v180;
  CGRect v181;
  CGRect v182;
  CGRect v183;
  CGRect v184;

  v8 = a3;
  if (!a5)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v8);
      v10 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v10;
    }
  }
  -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
  if (!v8)
    goto LABEL_15;
  v11 = objc_msgSend(v8, "section");
  rowData = self->_rowData;
  if (rowData)
    rowData = (UITableViewRowData *)rowData->_numSections;
  if (v11 >= (uint64_t)rowData)
  {
    v20 = (void *)MEMORY[0x1E0C99DA0];
    v21 = *MEMORY[0x1E0C99858];
    v22 = objc_msgSend(v8, "section");
    v23 = self->_rowData;
    if (v23)
      v23 = (UITableViewRowData *)v23->_numSections;
    objc_msgSend(v20, "raise:format:", v21, CFSTR("Attempted to scroll the table view to an out-of-bounds section (%ld) when there are only %ld sections. Table view: %@"), v22, v23, self, v137);
    goto LABEL_15;
  }
  if (objc_msgSend(v8, "row") != 0x7FFFFFFFFFFFFFFFLL)
  {
    v13 = objc_msgSend(v8, "row");
    if (v13 >= -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, objc_msgSend(v8, "section")))
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99858], CFSTR("Attempted to scroll the table view to an out-of-bounds row (%ld) when there are only %ld rows in section %ld. Table view: %@"), objc_msgSend(v8, "row"), -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, objc_msgSend(v8, "section")), objc_msgSend(v8, "section"), self);
      goto LABEL_15;
    }
  }
  v14 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
  v15 = objc_msgSend(v8, "row");
  v150 = v14;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL)
    v16 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, objc_msgSend(v8, "section"), 0);
  else
    -[UITableView _rectForRowAtIndexPath:usingPresentationValues:](self, "_rectForRowAtIndexPath:usingPresentationValues:", v8, 1);
  v152 = v16;
  v153 = v18;
  v30 = v17;
  v154 = v19;
  -[UIView bounds](self, "bounds");
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  -[UITableView _contentInset](self, "_contentInset");
  v40 = v39;
  v42 = v39 + v41;
  v149 = v43;
  v155 = v44;
  v45 = v44 + v43;
  v46 = objc_msgSend(v8, "row");
  v47 = objc_msgSend(v8, "section");
  -[UIView bounds](self, "bounds");
  Height = CGRectGetHeight(v164);
  if (-[UITableViewRowData ensureHeightsFaultedInForScrollToIndexPath:boundsHeight:]((uint64_t)self->_rowData, v8, Height))
  {
    v150 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
    if (v15 == 0x7FFFFFFFFFFFFFFFLL)
      v49 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, objc_msgSend(v8, "section"), 0);
    else
      -[UITableView _rectForRowAtIndexPath:usingPresentationValues:](self, "_rectForRowAtIndexPath:usingPresentationValues:", v8, 1);
    v152 = v49;
    v153 = v51;
    v30 = v50;
    v154 = v52;
  }
  v53 = v32 + v40;
  rect = v34 + v155;
  v54 = v36 - v42;
  v55 = v38 - v45;
  if (a4)
  {
    v56 = 1;
    v57 = v53;
    v58 = v154;
  }
  else
  {
    v58 = v154;
    if (-[UITableView allowsHeaderViewsToFloat](self, "allowsHeaderViewsToFloat")
      || (v59 = 0.0, !objc_msgSend(v8, "row")))
    {
      v59 = -[UITableViewRowData heightForHeaderInSection:canGuess:]((uint64_t)self->_rowData, objc_msgSend(v8, "section"), 0);
    }
    v57 = v53;
    if (-[UITableView allowsFooterViewsToFloat](self, "allowsFooterViewsToFloat")
      || (v60 = -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, v47) - 1, v61 = 0.0, v46 == v60))
    {
      v61 = -[UITableViewRowData heightForFooterInSection:canGuess:]((uint64_t)self->_rowData, objc_msgSend(v8, "section"), 0);
    }
    *(_QWORD *)&v156.origin.x = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v156.origin.y = 3221225472;
    *(_QWORD *)&v156.size.width = __99__UITableView__contentOffsetForScrollingToRowAtIndexPath_atScrollPosition_usingPresentationValues___block_invoke;
    *(_QWORD *)&v156.size.height = &__block_descriptor_80_e39_q40__0_CGRect__CGPoint_dd__CGSize_dd__8l;
    v157 = v53;
    v158 = rect;
    v159 = v54;
    v160 = v55;
    v161 = v59;
    v162 = v61;
    v62 = __99__UITableView__contentOffsetForScrollingToRowAtIndexPath_atScrollPosition_usingPresentationValues___block_invoke(&v156, v152, v30, v153, v154);
    if (!v62)
      goto LABEL_15;
    a4 = v62;
    if (v154 > v55 && dyld_program_sdk_at_least())
    {
      -[UIView window](self, "window");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "_firstResponder");
      v64 = objc_claimAutoreleasedReturnValue();
      v65 = (void *)v64;
      if (v64)
      {
        v148 = v63;
        v66 = (void *)v64;
        -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v8);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v68 = objc_msgSend(v67, "_isAncestorOfFirstResponder");

        if (v68)
        {
          v65 = v66;
          v69 = v66;
          v63 = v148;
          objc_msgSend(v69, "_rectToScrollToVisibleInCellInWindow:", v148);
          x = v165.origin.x;
          y = v165.origin.y;
          width = v165.size.width;
          v73 = v165.size.height;
          if (CGRectIsNull(v165))
          {
            v56 = 1;
            v57 = v53;
            v58 = v154;
          }
          else
          {
            objc_msgSend(v148, "convertRect:toView:", self, x, y, width, v73);
            v184.origin.x = v115;
            v184.origin.y = v116;
            v184.size.width = v117;
            v184.size.height = v118;
            v174.origin.x = v152;
            v174.size.width = v153;
            v174.origin.y = v30;
            v58 = v154;
            v174.size.height = v154;
            v175 = CGRectIntersection(v174, v184);
            v119 = v175.origin.x;
            v120 = v175.size.height;
            v146 = v175.size.width;
            v147 = v175.origin.y;
            if (CGRectIsNull(v175))
            {
              v56 = 1;
              v57 = v53;
            }
            else
            {
              v121 = v55 - v120;
              v57 = v53;
              if (v55 - v120 <= 0.0)
              {
                v58 = v120;
                v136 = v146;
                v135 = v147;
                v152 = v119;
                v153 = v146;
                v30 = v147;
              }
              else
              {
                v176.origin.x = v119;
                v176.size.width = v146;
                v176.origin.y = v147;
                v176.size.height = v120;
                MinY = CGRectGetMinY(v176);
                v145 = v120;
                v177.origin.x = v152;
                v177.origin.y = v30;
                v122 = v119;
                v141 = v119;
                v177.size.height = v154;
                v177.size.width = v153;
                v123 = CGRectGetMinY(v177);
                v178.origin.y = v30;
                v140 = v30;
                v124 = MinY - v123;
                v178.origin.x = v152;
                v178.size.width = v153;
                v178.size.height = v154;
                MaxY = CGRectGetMaxY(v178);
                v179.origin.x = v122;
                v179.origin.y = v147;
                v179.size.width = v146;
                v179.size.height = v145;
                v126 = MaxY - CGRectGetMaxY(v179);
                if (v121 >= v126)
                  v127 = v126;
                else
                  v127 = v121;
                v128 = fmax(v121 - v127, 0.0);
                if (v121 >= v124)
                  v129 = v124;
                else
                  v129 = v121;
                v130 = fmax(v121 - v129, 0.0);
                v131 = v124 <= v126;
                if (v124 > v126)
                  v132 = v129;
                else
                  v132 = v128;
                v138 = v132;
                if (v131)
                  v133 = v127;
                else
                  v133 = v130;
                v144 = v133;
                v180.size.width = v153;
                v180.origin.x = v152;
                v180.origin.y = v140;
                v180.size.height = v154;
                MinX = CGRectGetMinX(v180);
                v181.origin.x = v141;
                v181.origin.y = v147;
                v181.size.width = v146;
                v181.size.height = v145;
                v139 = CGRectGetMinY(v181) - v138;
                v182.origin.x = v152;
                v182.origin.y = v140;
                v182.size.width = v153;
                v182.size.height = v154;
                v134 = CGRectGetWidth(v182);
                v183.origin.x = v141;
                v183.origin.y = v147;
                v183.size.width = v146;
                v183.size.height = v145;
                v120 = v144 + CGRectGetHeight(v183);
                v30 = v139;
                v135 = v139;
                v152 = MinX;
                v153 = v134;
                v136 = v134;
                v119 = MinX;
                v58 = v120;
              }
              a4 = __99__UITableView__contentOffsetForScrollingToRowAtIndexPath_atScrollPosition_usingPresentationValues___block_invoke(&v156, v119, v135, v136, v120);
              v56 = 0;
            }
          }
        }
        else
        {
          v56 = 1;
          v65 = v66;
          v63 = v148;
        }
      }
      else
      {
        v56 = 1;
      }

    }
    else
    {
      v56 = 1;
    }
  }
  if (a4 == 3)
  {
    -[UIView bounds](self, "bounds");
    v85 = CGRectGetHeight(v166);
    v167.origin.x = v152;
    v167.origin.y = v30;
    v167.size.width = v153;
    v167.size.height = v58;
    v86 = CGRectGetMinY(v167) - v85;
    v168.origin.x = v152;
    v168.origin.y = v30;
    v168.size.width = v153;
    v168.size.height = v58;
    v87 = v86 + CGRectGetHeight(v168);
    if (v56)
    {
      if (-[UITableView allowsHeaderViewsToFloat](self, "allowsHeaderViewsToFloat"))
      {
        -[UITableView _visibleBounds](self, "_visibleBounds");
        v89 = v88;
        v91 = v90;
        v93 = v92;
        -[UITableView _contentInset](self, "_contentInset");
        -[UITableViewRowData floatingRectForFooterInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, objc_msgSend(v8, "section"), 0, 0, v89 + v94, v87, v91 - (v94 + v95), v93 - (v96 + v97));
        v99 = v98;
        v101 = v100;
        v169.origin.x = v57;
        v169.origin.y = rect;
        v169.size.width = v54;
        v169.size.height = v55;
        if (v87 + CGRectGetHeight(v169) > v99)
          v87 = v87 + v101;
      }
      else if (v46 == -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, v47) - 1)
      {
        v87 = v87 + -[UITableViewRowData heightForFooterInSection:canGuess:]((uint64_t)self->_rowData, v47, 0);
      }
    }
    v105 = v149 + v87;
    goto LABEL_64;
  }
  if (a4 != 2)
  {
    if (a4 == 1)
    {
      if (v56)
      {
        if (-[UITableView allowsHeaderViewsToFloat](self, "allowsHeaderViewsToFloat"))
        {
          v74 = v30;
          -[UITableView _visibleBounds](self, "_visibleBounds");
          v76 = v75;
          v78 = v77;
          v80 = v79;
          -[UITableView _contentInset](self, "_contentInset");
          if (v15 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v30 = v74;
          }
          else
          {
            v106 = v76 + v82;
            v107 = v78 - (v82 + v84);
            v108 = v80 - (v81 + v83);
            v109 = self->_rowData;
            v110 = objc_msgSend(v8, "section");
            v111 = v106;
            v30 = v74;
            -[UITableViewRowData floatingRectForHeaderInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)v109, v110, 0, 0, v111, v74, v107, v108);
            if (v74 < v113 + v112)
              v30 = v74 - v112;
          }
        }
        else if (!v46)
        {
          v30 = v30
              - -[UITableViewRowData heightForHeaderInSection:canGuess:]((uint64_t)self->_rowData, objc_msgSend(v8, "section"), 0);
        }
      }
      v105 = v30 - v155;
      if ((*((_BYTE *)&self->_tableFlags + 19) & 0x80) != 0)
        v105 = v105 - -[UITableViewRowData heightForTableHeaderView]((uint64_t)self->_rowData);
      goto LABEL_64;
    }
LABEL_15:
    -[UIScrollView contentOffset](self, "contentOffset");
    v25 = v24;
    v27 = v26;
    goto LABEL_16;
  }
  v170.origin.x = v152;
  v170.origin.y = v30;
  v170.size.width = v153;
  v170.size.height = v58;
  v102 = CGRectGetMinY(v170);
  v171.origin.x = v57;
  v171.origin.y = rect;
  v171.size.width = v54;
  v171.size.height = v55;
  v103 = CGRectGetHeight(v171);
  v172.size.height = v58;
  v104 = v102 - v103 * 0.5;
  v172.origin.x = v152;
  v172.origin.y = v30;
  v172.size.width = v153;
  v105 = v104 + CGRectGetHeight(v172) * 0.5 - v155;
LABEL_64:
  v173.origin.x = v57;
  v173.origin.y = rect;
  v173.size.width = v54;
  v173.size.height = v55;
  if (v155 + v105 + CGRectGetHeight(v173) <= v150)
    v114 = v105;
  else
    v114 = v150 - (v155 + v55);
  if (v114 >= -v155)
    v27 = v114;
  else
    v27 = -v155;
  v25 = 0.0;
LABEL_16:

  v28 = v25;
  v29 = v27;
  result.y = v29;
  result.x = v28;
  return result;
}

uint64_t __99__UITableView__contentOffsetForScrollingToRowAtIndexPath_atScrollPosition_usingPresentationValues___block_invoke(CGRect *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGFloat v10;
  _BOOL8 v11;
  CGFloat v12;
  CGRect v14;
  CGRect v15;

  v10 = CGRectGetMinY(a1[1]) + a1[2].origin.x;
  v14.origin.x = a2;
  v14.origin.y = a3;
  v14.size.width = a4;
  v14.size.height = a5;
  v11 = v10 > CGRectGetMinY(v14);
  v12 = CGRectGetMaxY(a1[1]) - a1[2].origin.y;
  v15.origin.x = a2;
  v15.origin.y = a3;
  v15.size.width = a4;
  v15.size.height = a5;
  if (v12 >= CGRectGetMaxY(v15))
    return v11;
  else
    return 3;
}

- (void)scrollToRowAtIndexPath:(NSIndexPath *)indexPath atScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated
{
  _BOOL8 v5;
  NSIndexPath *v8;
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  _BYTE v13[24];
  NSIndexPath *v14;
  _BYTE v15[24];
  uint64_t v16;

  v5 = animated;
  v16 = *MEMORY[0x1E0C80C00];
  v8 = indexPath;
  v9 = scrollToRowAtIndexPath_atScrollPosition_animated____s_category;
  if (!scrollToRowAtIndexPath_atScrollPosition_animated____s_category)
  {
    v9 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v9, (unint64_t *)&scrollToRowAtIndexPath_atScrollPosition_animated____s_category);
  }
  if ((*(_BYTE *)v9 & 1) != 0)
  {
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      *(_DWORD *)v13 = 138413314;
      *(_QWORD *)&v13[4] = objc_opt_class();
      *(_WORD *)&v13[12] = 2048;
      *(_QWORD *)&v13[14] = self;
      *(_WORD *)&v13[22] = 2112;
      v14 = v8;
      *(_WORD *)v15 = 2048;
      *(_QWORD *)&v15[2] = scrollPosition;
      *(_WORD *)&v15[10] = 2048;
      *(_QWORD *)&v15[12] = v5;
      v12 = *(id *)&v13[4];
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> scrollToRowAtIndexPath:%@ atScrollPosition:%ld animated:%ld", v13, 0x34u);

    }
  }
  -[UITableView _scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:](self, "_scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:", v8, scrollPosition, v5, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues", *(_OWORD *)v13, *(_QWORD *)&v13[16], v14, *(_OWORD *)v15, *(_QWORD *)&v15[16], v16));

}

- (void)_scrollToRowAtIndexPath:(id)a3 atScrollPosition:(int64_t)a4 animated:(BOOL)a5 usingPresentationValues:(BOOL)a6
{
  _BOOL8 v7;
  id v10;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  void *v21;
  NSIndexPath *v22;
  NSIndexPath *v23;
  double v24;
  double v25;
  NSIndexPath *v26;
  int v27;
  NSIndexPath *targetIndexPathForScrolling;
  id v29;
  id v30;

  v7 = a5;
  v10 = a3;
  if (!a6)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      v29 = v10;
      -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v10);
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
      if (!v12)
        return;
    }
  }
  v30 = v10;
  -[UITableView _contentOffsetForScrollingToRowAtIndexPath:atScrollPosition:usingPresentationValues:](self, "_contentOffsetForScrollingToRowAtIndexPath:atScrollPosition:usingPresentationValues:", v10, a4, 1);
  v14 = v13;
  v16 = v15;
  v18 = *MEMORY[0x1E0C9D538];
  v17 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  if (-[UITableView _estimatesHeights](self, "_estimatesHeights"))
  {
    if (!v7)
    {
      v23 = 0;
      v27 = 1;
      goto LABEL_12;
    }
    -[UIView bounds](self, "bounds");
    -[UITableViewRowData indexPathsForRowsInRect:]((double *)self->_rowData, v14, v16, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "firstObject");
    v22 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
    v23 = v22;
    if (v22)
    {
      -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)self->_rowData, -[NSIndexPath row](v22, "row"), -[NSIndexPath section](v22, "section"), 0);
      v25 = v24;
      v26 = v23;
      v17 = v16 - v25;
      v18 = 0.0;
    }

  }
  else
  {
    v23 = 0;
  }
  v27 = 0;
LABEL_12:
  -[UIScrollView setContentOffset:animated:](self, "setContentOffset:animated:", v7, v14, v16);
  targetIndexPathForScrolling = self->_targetIndexPathForScrolling;
  self->_targetIndexPathForScrolling = v23;

  self->_targetOffsetToIndexPathForScrolling.x = v18;
  self->_targetOffsetToIndexPathForScrolling.y = v17;
  if (v27)
    *((_QWORD *)&self->_tableFlags + 3) &= ~4uLL;

}

- (void)scrollToNearestSelectedRowAtScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated
{
  _BOOL8 v4;
  id v7;

  v4 = animated;
  -[UITableView _indexPathForSelectedRowUsingPresentationValues:](self, "_indexPathForSelectedRowUsingPresentationValues:", 1);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  -[UITableView _scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:](self, "_scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:", v7, scrollPosition, v4, 1);

}

- (void)_performBatchUpdates:(id)a3 completion:(id)a4
{
  -[UITableView _performBatchUpdates:withContext:completion:](self, "_performBatchUpdates:withContext:completion:", a3, 0, a4);
}

- (void)deleteSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation
{
  NSIndexSet *v7;
  unint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  void *v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  UITableView *v17;
  __int16 v18;
  NSIndexSet *v19;
  __int16 v20;
  UITableViewRowAnimation v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = sections;
  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8571, CFSTR("UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@"), self);

  }
  v8 = deleteSections_withRowAnimation____s_category;
  if (!deleteSections_withRowAnimation____s_category)
  {
    v8 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v8, (unint64_t *)&deleteSections_withRowAnimation____s_category);
  }
  if ((*(_BYTE *)v8 & 1) != 0)
  {
    v10 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      *(_DWORD *)buf = 138413058;
      v15 = (id)objc_opt_class();
      v16 = 2048;
      v17 = self;
      v18 = 2112;
      v19 = v7;
      v20 = 2048;
      v21 = animation;
      v12 = v15;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> deleteSections:%@ withRowAnimation:%ld", buf, 0x2Au);

    }
  }
  v9 = -[UITableView _updateSections:withUpdateAction:rowAnimation:headerFooterOnly:usingPresentationValues:](self, "_updateSections:withUpdateAction:rowAnimation:headerFooterOnly:usingPresentationValues:", v7, 1, animation, 0, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));

}

- (void)_reloadSectionHeaderFooters:(id)a3 withRowAnimation:(int64_t)a4
{
  id v6;
  id v7;

  v7 = a3;
  if (a4 == 100)
    a4 = 0;
  v6 = -[UITableView _updateSections:withUpdateAction:rowAnimation:headerFooterOnly:usingPresentationValues:](self, "_updateSections:withUpdateAction:rowAnimation:headerFooterOnly:usingPresentationValues:", v7, 2, a4, 1, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));

}

- (id)_moveSection:(int64_t)a3 toSection:(int64_t)a4 usingPresentationValues:(BOOL)a5
{
  int64_t v6;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  void *v9;
  UIRowMoveUpdateItem *v10;
  void *v11;
  void *v12;
  id *v13;
  void *v14;

  v6 = a3;
  if (!a5)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      v6 = -[_UITableViewShadowUpdatesController sectionAfterShadowUpdates:](shadowUpdatesController, "sectionAfterShadowUpdates:", a3);
      a4 = -[_UITableViewShadowUpdatesController sectionAfterShadowUpdates:](self->_shadowUpdatesController, "sectionAfterShadowUpdates:", a4);
    }
  }
  -[UITableView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = [UIRowMoveUpdateItem alloc];
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[UIRowMoveUpdateItem initWithOldIndexPath:newIndexPath:]((id *)&v10->super.super.isa, v11, v12);

  -[UITableView _addToShadowUpdatesControllerIfNeeded:](self, "_addToShadowUpdatesControllerIfNeeded:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addObject:", v13);
  if (!-[UITableView _isUpdating](self, "_isUpdating"))
  {
    -[UITableView _setupCellAnimations](self, "_setupCellAnimations");
    -[UITableView _endCellAnimationsWithContext:](self, "_endCellAnimationsWithContext:", 0);
  }

  return v14;
}

- (void)moveSection:(NSInteger)section toSection:(NSInteger)newSection
{
  unint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  void *v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  UITableView *v17;
  __int16 v18;
  NSInteger v19;
  __int16 v20;
  NSInteger v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (dyld_program_sdk_at_least() && (*((_QWORD *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8611, CFSTR("UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@"), self);

  }
  v8 = moveSection_toSection____s_category;
  if (!moveSection_toSection____s_category)
  {
    v8 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v8, (unint64_t *)&moveSection_toSection____s_category);
  }
  if ((*(_BYTE *)v8 & 1) != 0)
  {
    v10 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      *(_DWORD *)buf = 138413058;
      v15 = (id)objc_opt_class();
      v16 = 2048;
      v17 = self;
      v18 = 2048;
      v19 = section;
      v20 = 2048;
      v21 = newSection;
      v12 = v15;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> moveSection:%ld toSection:%ld", buf, 0x2Au);

    }
  }
  v9 = -[UITableView _moveSection:toSection:usingPresentationValues:](self, "_moveSection:toSection:usingPresentationValues:", section, newSection, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
}

- (void)deleteRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation
{
  NSArray *v7;
  unint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  void *v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  UITableView *v17;
  __int16 v18;
  NSArray *v19;
  __int16 v20;
  UITableViewRowAnimation v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = indexPaths;
  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8652, CFSTR("UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@"), self);

  }
  v8 = deleteRowsAtIndexPaths_withRowAnimation____s_category;
  if (!deleteRowsAtIndexPaths_withRowAnimation____s_category)
  {
    v8 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v8, (unint64_t *)&deleteRowsAtIndexPaths_withRowAnimation____s_category);
  }
  if ((*(_BYTE *)v8 & 1) != 0)
  {
    v10 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      *(_DWORD *)buf = 138413058;
      v15 = (id)objc_opt_class();
      v16 = 2048;
      v17 = self;
      v18 = 2112;
      v19 = v7;
      v20 = 2048;
      v21 = animation;
      v12 = v15;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> deleteRowsAtIndexPaths:%@ withRowAnimation:%ld", buf, 0x2Au);

    }
  }
  v9 = -[UITableView _updateRowsAtIndexPaths:withUpdateAction:rowAnimation:usingPresentationValues:](self, "_updateRowsAtIndexPaths:withUpdateAction:rowAnimation:usingPresentationValues:", v7, 1, animation, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));

}

- (void)reconfigureRowsAtIndexPaths:(NSArray *)indexPaths
{
  NSArray *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  NSArray *v9;
  void (**v10)(_QWORD);
  NSObject *v11;
  NSObject *v12;
  id v13;
  void *v14;
  _QWORD aBlock[4];
  NSArray *v16;
  UITableView *v17;
  BOOL v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  UITableView *v22;
  __int16 v23;
  NSArray *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = indexPaths;
  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8665, CFSTR("UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@"), self);

  }
  v6 = reconfigureRowsAtIndexPaths____s_category;
  if (!reconfigureRowsAtIndexPaths____s_category)
  {
    v6 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v6, (unint64_t *)&reconfigureRowsAtIndexPaths____s_category);
  }
  if ((*(_BYTE *)v6 & 1) != 0)
  {
    v11 = *(NSObject **)(v6 + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = v11;
      *(_DWORD *)buf = 138412802;
      v20 = (id)objc_opt_class();
      v21 = 2048;
      v22 = self;
      v23 = 2112;
      v24 = v5;
      v13 = v20;
      _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "<%@ %p> reconfigureRowsAtIndexPaths:%@", buf, 0x20u);

    }
  }
  -[UITableView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  v7 = -[UITableView _isUpdating](self, "_isUpdating");
  if (!v7)
    -[UITableView _setupCellAnimations](self, "_setupCellAnimations");
  v8 = -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues");
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __43__UITableView_reconfigureRowsAtIndexPaths___block_invoke;
  aBlock[3] = &unk_1E16B4008;
  v9 = v5;
  v16 = v9;
  v17 = self;
  v18 = v8;
  v10 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (+[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled"))
  {
    -[UITableConstants defaultEditAndUpdateAnimationDuration](self->_constants, "defaultEditAndUpdateAnimationDuration");
    +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 1028, v10, 0);
    if (v7)
      goto LABEL_13;
    goto LABEL_12;
  }
  v10[2](v10);
  if (!v7)
LABEL_12:
    -[UITableView _endCellAnimationsWithContext:](self, "_endCellAnimationsWithContext:", 0);
LABEL_13:

}

void __43__UITableView_reconfigureRowsAtIndexPaths___block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "_reconfigureRowAtIndexPath:usingPresentationValues:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++), *(unsigned __int8 *)(a1 + 48), (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

- (void)_reconfigureRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4
{
  id v7;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;

  v7 = a3;
  if (v7)
  {
    if (a4)
      goto LABEL_5;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8695, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("indexPath != nil"));

    v7 = 0;
    if (a4)
      goto LABEL_5;
  }
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
  {
    v12 = v7;
    -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v7);
    v9 = objc_claimAutoreleasedReturnValue();

    v7 = (id)v9;
  }
LABEL_5:
  v13 = v7;
  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v7, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
    -[UITableView _reconfigureCell:forRowAtIndexPath:](self, "_reconfigureCell:forRowAtIndexPath:", v10, v13);

}

- (void)_reconfigureCell:(id)a3 forRowAtIndexPath:(id)a4
{
  id v8;
  id v9;
  void *v10;
  UITableViewCell **p_cellBeingReconfigured;
  NSIndexPath **p_indexPathBeingReconfigured;
  void *v13;
  unint64_t v14;
  NSObject *v15;
  id WeakRetained;
  void *v17;
  id v18;
  unint64_t v19;
  NSObject *v20;
  UITableViewCell *v21;
  NSIndexPath *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  UITableViewCell *v32;
  void *v33;

  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v8)
  {
    if (v9)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8709, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("cell != nil"));

    if (v10)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8710, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("indexPath != nil"));

LABEL_3:
  p_cellBeingReconfigured = &self->_cellBeingReconfigured;
  if (self->_cellBeingReconfigured)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView dataSourceIndexPathForPresentationIndexPath:](self, "dataSourceIndexPathForPresentationIndexPath:", v10);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = *p_cellBeingReconfigured;
    -[UITableView dataSourceIndexPathForPresentationIndexPath:](self, "dataSourceIndexPathForPresentationIndexPath:", self->_indexPathBeingReconfigured);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8713, CFSTR("Attempted to reconfigure a cell while already in the process of reconfiguring a cell. Check the backtrace to see what's causing this. (Attempted to reconfigure cell %@ for index path %@ while already reconfiguring cell %@ for index path %@)"), v8, v25, v32, v26);

  }
  objc_storeStrong((id *)&self->_cellBeingReconfigured, a3);
  p_indexPathBeingReconfigured = &self->_indexPathBeingReconfigured;
  objc_storeStrong((id *)&self->_indexPathBeingReconfigured, a4);
  v13 = (void *)_UISetCurrentFallbackEnvironment(self);
  v14 = qword_1EDDB0A20;
  if (!qword_1EDDB0A20)
  {
    v14 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v14, (unint64_t *)&qword_1EDDB0A20);
  }
  v15 = *(id *)(v14 + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(v14 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v15))
  {
    objc_msgSend(v10, "section");
    objc_msgSend(v10, "row");
    _os_signpost_emit_unreliably_with_name_impl();
  }

  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8720, CFSTR("UITableView dataSource is not set: %@"), self);

  }
  if ((*(_BYTE *)&self->_tableFlags & 2) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_loadWeakRetained((id *)&self->_dataSource);
    objc_msgSend(v28, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8721, CFSTR("UITableView dataSource does not implement required method -tableView:cellForRowAtIndexPath: %@"), v29);

  }
  -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "tableView:cellForRowAtIndexPath:", self, v10);
  v18 = (id)objc_claimAutoreleasedReturnValue();

  if (v18 != v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView dataSourceIndexPathForPresentationIndexPath:](self, "dataSourceIndexPathForPresentationIndexPath:", v10);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8723, CFSTR("UITableView dataSource returned a different cell from -tableView:cellForRowAtIndexPath: than the cell being reconfigured, which is not allowed. When reconfiguring a row, you must obtain the existing cell by dequeuing a cell for the index path specified, using the same reuse identifier that was used to dequeue the cell originally, and return the same cell. Index path: %@; Existing cell: %@; Returned cell: %@"),
      v31,
      v8,
      v18);

  }
  v19 = qword_1EDDB0A28;
  if (!qword_1EDDB0A28)
  {
    v19 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v19, (unint64_t *)&qword_1EDDB0A28);
  }
  v20 = *(id *)(v19 + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(v19 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v20))
  {
    _os_signpost_emit_unreliably_with_name_impl();
  }

  _UIRestorePreviousFallbackEnvironment(v13);
  v21 = *p_cellBeingReconfigured;
  *p_cellBeingReconfigured = 0;

  v22 = *p_indexPathBeingReconfigured;
  *p_indexPathBeingReconfigured = 0;

}

- (id)_moveRowAtIndexPath:(id)a3 toIndexPath:(id)a4 usingPresentationValues:(BOOL)a5
{
  id v8;
  id v9;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  void *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id *v16;
  void *v17;

  v8 = a3;
  v9 = a4;
  if (a5 || (shadowUpdatesController = self->_shadowUpdatesController) == 0)
  {
    v11 = v8;
  }
  else
  {
    -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = 0;
    if (v9 && v11)
    {
      v13 = objc_msgSend(v9, "section");
      v12 = v13 != objc_msgSend(v11, "section");
    }
    -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:allowAppendingInsert:](self->_shadowUpdatesController, "indexPathAfterShadowUpdates:allowAppendingInsert:", v9, v12);
    v14 = objc_claimAutoreleasedReturnValue();

    v9 = (id)v14;
  }
  -[UITableView _arrayForUpdateAction:](self, "_arrayForUpdateAction:", 3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[UIRowMoveUpdateItem initWithOldIndexPath:newIndexPath:]((id *)[UIRowMoveUpdateItem alloc], v11, v9);
  -[UITableView _addToShadowUpdatesControllerIfNeeded:](self, "_addToShadowUpdatesControllerIfNeeded:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "addObject:", v16);
  if (!-[UITableView _isUpdating](self, "_isUpdating"))
  {
    -[UITableView _setupCellAnimations](self, "_setupCellAnimations");
    -[UITableView _endCellAnimationsWithContext:](self, "_endCellAnimationsWithContext:", 0);
  }

  return v17;
}

- (void)moveRowAtIndexPath:(NSIndexPath *)indexPath toIndexPath:(NSIndexPath *)newIndexPath
{
  NSIndexPath *v7;
  NSIndexPath *v8;
  unint64_t v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  void *v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  UITableView *v18;
  __int16 v19;
  NSIndexPath *v20;
  __int16 v21;
  NSIndexPath *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = indexPath;
  v8 = newIndexPath;
  if ((*((_QWORD *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 8754, CFSTR("UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@"), self);

  }
  v9 = moveRowAtIndexPath_toIndexPath____s_category;
  if (!moveRowAtIndexPath_toIndexPath____s_category)
  {
    v9 = __UILogCategoryGetNode("TableViewOperations", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v9, (unint64_t *)&moveRowAtIndexPath_toIndexPath____s_category);
  }
  if ((*(_BYTE *)v9 & 1) != 0)
  {
    v11 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = v11;
      *(_DWORD *)buf = 138413058;
      v16 = (id)objc_opt_class();
      v17 = 2048;
      v18 = self;
      v19 = 2112;
      v20 = v7;
      v21 = 2112;
      v22 = v8;
      v13 = v16;
      _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "<%@ %p> moveRowAtIndexPath:%@ toIndexPath:%@", buf, 0x2Au);

    }
  }
  v10 = -[UITableView _moveRowAtIndexPath:toIndexPath:usingPresentationValues:](self, "_moveRowAtIndexPath:toIndexPath:usingPresentationValues:", v7, v8, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));

}

- (BOOL)allowsSelectionDuringEditing
{
  return (*((_BYTE *)&self->_tableFlags + 17) & 0x28) != 0;
}

- (BOOL)_allowsEffectiveSelectionOrCustomActionAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  BOOL v8;

  v4 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0)
  {
    if (-[UITableView allowsSelectionDuringEditing](self, "allowsSelectionDuringEditing")
      || -[UITableView _isRowMultiSelect:](self, "_isRowMultiSelect:", v4)
      || objc_msgSend(v4, "row") == 0x7FFFFFFFFFFFFFFFLL
      || objc_msgSend(v4, "section") == 0x7FFFFFFFFFFFFFFFLL)
    {
      goto LABEL_10;
    }
  }
  else if (-[UITableView allowsSelection](self, "allowsSelection"))
  {
LABEL_10:
    v8 = 1;
    goto LABEL_11;
  }
  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v4, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "_hasCustomSelectionAction");

    if ((v7 & 1) != 0)
      goto LABEL_10;
  }
  v8 = -[UITableView _canPerformPrimaryActionForRowAtIndexPath:](self, "_canPerformPrimaryActionForRowAtIndexPath:", v4);
LABEL_11:

  return v8;
}

- (BOOL)_allowsEffectiveSelection
{
  int v2;

  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0)
    v2 = 2048;
  else
    v2 = 1024;
  return (v2 & *((_DWORD *)&self->_tableFlags + 4)) != 0;
}

- (void)_setShouldBecomeFocusedOnSelection:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x10000;
  if (a3)
    v3 = 0x20000;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFCFFFFLL | v3;
}

- (BOOL)_shouldBecomeFocusedOnSelection
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = (*((_QWORD *)&self->_tableFlags + 2) >> 16) & 3;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __46__UITableView__shouldBecomeFocusedOnSelection__block_invoke;
  v4[3] = &unk_1E16B2268;
  v4[4] = self;
  return _UITriStateToBool_0(v2, v4);
}

uint64_t __46__UITableView__shouldBecomeFocusedOnSelection__block_invoke(uint64_t a1)
{
  _BOOL8 v2;
  void *v3;

  if ((dyld_program_sdk_at_least() & 1) != 0)
    return 1;
  objc_msgSend(*(id *)(a1 + 32), "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v3, "_splitViewControllerContext") == 3;

  return v2;
}

- (BOOL)_defaultAllowsFocus
{
  void *v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL result;
  void *v7;
  char v8;

  -[UIView _focusBehavior](self, "_focusBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "cellFocusability");

  v5 = -[UITableView allowsSelection](self, "allowsSelection");
  result = 0;
  if (v5 && v4 != 3)
  {
    if (v4 == 2)
    {
      -[UIView traitCollection](self, "traitCollection");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "_hasSplitViewControllerContextSidebarColumn");

      return v8;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

- (BOOL)allowsFocus
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = (*((_QWORD *)&self->_tableFlags + 2) >> 18) & 3;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __26__UITableView_allowsFocus__block_invoke;
  v4[3] = &unk_1E16B2268;
  v4[4] = self;
  return _UITriStateToBool_0(v2, v4);
}

uint64_t __26__UITableView_allowsFocus__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_defaultAllowsFocus");
}

- (void)setAllowsFocusDuringEditing:(BOOL)allowsFocusDuringEditing
{
  uint64_t v3;

  v3 = 0x100000;
  if (allowsFocusDuringEditing)
    v3 = 0x200000;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFCFFFFFLL | v3;
}

- (BOOL)_defaultAllowsFocusDuringEditing
{
  char v3;
  void *v4;
  void *v5;

  if (dyld_program_sdk_at_least())
  {
    if (!-[UITableView allowsSelectionDuringEditing](self, "allowsSelectionDuringEditing"))
      return 0;
  }
  else if (!-[UITableView allowsSelection](self, "allowsSelection"))
  {
    return 0;
  }
  -[UIView _focusBehavior](self, "_focusBehavior");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "cellFocusability") == 2)
  {
    -[UIView traitCollection](self, "traitCollection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v5, "_hasSplitViewControllerContextSidebarColumn");

  }
  else
  {
    v3 = 1;
  }

  return v3;
}

- (BOOL)allowsFocusDuringEditing
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = (*((_QWORD *)&self->_tableFlags + 2) >> 20) & 3;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __39__UITableView_allowsFocusDuringEditing__block_invoke;
  v4[3] = &unk_1E16B2268;
  v4[4] = self;
  return _UITriStateToBool_0(v2, v4);
}

uint64_t __39__UITableView_allowsFocusDuringEditing__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_defaultAllowsFocusDuringEditing");
}

- (BOOL)_allowsEffectiveFocus
{
  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0)
    return -[UITableView allowsFocusDuringEditing](self, "allowsFocusDuringEditing");
  if (-[UITableView allowsFocus](self, "allowsFocus"))
    return 1;
  return (*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0
      && -[UITableView allowsFocusDuringEditing](self, "allowsFocusDuringEditing");
}

- (BOOL)_effectiveDefaultAllowsFocus
{
  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0)
    return -[UITableView _defaultAllowsFocusDuringEditing](self, "_defaultAllowsFocusDuringEditing");
  if (-[UITableView _defaultAllowsFocus](self, "_defaultAllowsFocus"))
    return 1;
  return (*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0
      && -[UITableView _defaultAllowsFocusDuringEditing](self, "_defaultAllowsFocusDuringEditing");
}

- (id)_indexPathsForHighlightedRows
{
  return -[UITableView _indexPathsForHighlightedRowsUsingPresentationValues:](self, "_indexPathsForHighlightedRowsUsingPresentationValues:", -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
}

- (id)_indexPathsForHighlightedRowsUsingPresentationValues:(BOOL)a3
{
  void *v5;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v7;

  if (-[NSMutableArray count](self->_highlightedIndexPaths, "count"))
  {
    v5 = (void *)-[NSMutableArray copy](self->_highlightedIndexPaths, "copy");
    if (a3)
      return v5;
  }
  else
  {
    v5 = 0;
    if (a3)
      return v5;
  }
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
  {
    -[_UITableViewShadowUpdatesController indexPathsBeforeShadowUpdates:](shadowUpdatesController, "indexPathsBeforeShadowUpdates:", v5);
    v7 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v7;
  }
  return v5;
}

- (BOOL)_isRowMultiSelect:(id)a3
{
  return -[UITableView _isRowMultiSelect:followingMacBehavior:](self, "_isRowMultiSelect:followingMacBehavior:", a3, 0);
}

- (void)_forciblyCancelPendingSelection
{
  NSIndexPath *pendingSelectionIndexPath;

  pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
  self->_pendingSelectionIndexPath = 0;

  *((_QWORD *)&self->_tableFlags + 2) |= 0x40uLL;
  -[UITableView setCurrentTouch:](self, "setCurrentTouch:", 0);
}

- (id)_indexPathForSpringLoadingAtPoint:(CGPoint)a3
{
  return -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, a3.x, a3.y);
}

- (BOOL)_shouldSpringLoadRowAtIndexPath:(id)a3 withContext:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  int v10;
  id WeakRetained;
  char v12;
  void *v13;
  char v14;
  id v15;
  char v16;

  v6 = a3;
  v7 = a4;
  -[_UITableViewDragController indexPaths](self->_dragController, "indexPaths");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
    v10 = objc_msgSend(v8, "containsObject:", v6) ^ 1;
  else
    LOBYTE(v10) = 1;
  WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  v12 = objc_opt_respondsToSelector();

  if ((v12 & 1) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "tableView:shouldSpringLoadRowAtIndexPath:withContext:", self, v6, v7);
LABEL_8:
    LOBYTE(v10) = v14;

    goto LABEL_9;
  }
  v15 = objc_loadWeakRetained(&self->super._delegate);
  v16 = objc_opt_respondsToSelector();

  if ((v16 & 1) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "_tableView:shouldSpringLoadRowAtIndexPath:withContext:", self, v6, v7);
    goto LABEL_8;
  }
LABEL_9:

  return v10;
}

- (void)_unhighlightSpringLoadedRow
{
  NSIndexPath *highlightedSpringLoadedIndexPath;

  -[UITableView unhighlightRowAtIndexPath:animated:](self, "unhighlightRowAtIndexPath:animated:", self->_highlightedSpringLoadedIndexPath, 0);
  highlightedSpringLoadedIndexPath = self->_highlightedSpringLoadedIndexPath;
  self->_highlightedSpringLoadedIndexPath = 0;

}

- (void)_highlightSpringLoadedRowAtIndexPath:(id)a3
{
  id v5;

  objc_storeStrong((id *)&self->_highlightedSpringLoadedIndexPath, a3);
  v5 = a3;
  -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:", v5, 0, 0, 1);

}

- (BOOL)highlightRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5
{
  _BOOL8 v6;
  id v8;

  v6 = a4;
  v8 = a3;
  LOBYTE(a5) = -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:", v8, v6, a5, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));

  return a5;
}

- (BOOL)_highlightRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 usingPresentationValues:(BOOL)a6
{
  return -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:playFeedback:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:playFeedback:", a3, a4, a5, a6, 0);
}

- (BOOL)_highlightRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 usingPresentationValues:(BOOL)a6 playFeedback:(BOOL)a7
{
  _BOOL8 v9;
  id v11;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v13;
  char v14;
  NSMutableArray *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v9 = a4;
  v35 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  if (!a6)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v11);
      v13 = objc_claimAutoreleasedReturnValue();

      v11 = (id)v13;
    }
  }
  if (!v11)
    goto LABEL_20;
  if ((-[NSMutableArray containsObject:](self->_highlightedIndexPaths, "containsObject:", v11) & 1) != 0)
  {
LABEL_6:
    v14 = 1;
    goto LABEL_21;
  }
  if (!-[UITableView _allowsEffectiveSelectionOrCustomActionAtIndexPath:](self, "_allowsEffectiveSelectionOrCustomActionAtIndexPath:", v11))
  {
LABEL_20:
    v14 = 0;
    goto LABEL_21;
  }
  if (objc_msgSend(v11, "row") == 0x7FFFFFFFFFFFFFFFLL || objc_msgSend(v11, "section") == 0x7FFFFFFFFFFFFFFFLL)
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v15 = self->_highlightedIndexPaths;
    v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v31 != v18)
            objc_enumerationMutation(v15);
          v20 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i);
          -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "setHighlighted:animated:", 0, v9);

          if ((*((_BYTE *)&self->_tableFlags + 9) & 0x20) != 0)
          {
            -[UITableView _delegateProxy](self, "_delegateProxy");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "tableView:didUnhighlightRowAtIndexPath:", self, v20);

          }
        }
        v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      }
      while (v17);
    }

    -[NSMutableArray removeAllObjects](self->_highlightedIndexPaths, "removeAllObjects");
    goto LABEL_20;
  }
  if ((*((_BYTE *)&self->_tableFlags + 9) & 8) == 0
    || -[_UISelectionInteraction isHinting](self->_selectionInteraction, "isHinting")
    || (-[UITableView _delegateProxy](self, "_delegateProxy"),
        v24 = (void *)objc_claimAutoreleasedReturnValue(),
        v25 = objc_msgSend(v24, "tableView:shouldHighlightRowAtIndexPath:", self, v11),
        v24,
        v25))
  {
    -[NSMutableArray addObject:](self->_highlightedIndexPaths, "addObject:", v11);
    -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v11);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setHighlighted:animated:", 1, v9);
    if ((*((_BYTE *)&self->_tableFlags + 9) & 0x10) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "tableView:didHighlightRowAtIndexPath:", self, v11);

    }
    if (a5)
      -[UITableView _scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:](self, "_scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:", v11, a5, v9, 1);

    goto LABEL_6;
  }
  -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v11);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = v28;
  if (v28)
    v14 = objc_msgSend(v28, "_hasCustomSelectionAction");
  else
    v14 = 0;

LABEL_21:
  return v14;
}

- (void)unhighlightRowAtIndexPath:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  void *v7;
  id v8;

  v4 = a4;
  v8 = a3;
  if (-[NSMutableArray containsObject:](self->_highlightedIndexPaths, "containsObject:"))
  {
    -[NSMutableArray removeObject:](self->_highlightedIndexPaths, "removeObject:", v8);
    -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setHighlighted:animated:", 0, v4);

    if ((*((_BYTE *)&self->_tableFlags + 9) & 0x20) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "tableView:didUnhighlightRowAtIndexPath:", self, v8);

    }
  }

}

- (void)_highlightCell:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 highlight:(BOOL)a6
{
  _BOOL4 v6;
  _BOOL8 v8;
  uint64_t v10;
  void *v11;
  void *v12;

  v6 = a6;
  v8 = a4;
  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", a3, 1);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v10)
  {
    v12 = (void *)v10;
    if (v6)
      -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:", v10, v8, a5, 1);
    else
      -[UITableView unhighlightRowAtIndexPath:animated:](self, "unhighlightRowAtIndexPath:animated:", v10, v8);
    v11 = v12;
  }

}

- (void)_selectedIndexPathsDidChange
{
  void *v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37C0], "notificationWithName:object:userInfo:", CFSTR("UITableViewSelectionDidChangeNotification"), self, 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "postNotification:", v4);

  -[_UITableViewMultiSelectController selectedIndexPathsChanged:](self->_multiSelectController, "selectedIndexPathsChanged:", self->_selectedIndexPaths);
}

- (BOOL)_inferFocusabilityForCell:(id)a3 atIndexPath:(id)a4
{
  id v6;
  id v7;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;

  v6 = a3;
  v7 = a4;
  if ((-[NSMutableArray containsObject:](self->_selectedIndexPaths, "containsObject:", v7) & 1) == 0)
  {
    objc_msgSend(v6, "_existingContentView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v9 || !dyld_program_sdk_at_least() || (_UIViewContainsFocusableSubviews(v9) & 1) == 0)
    {
      if ((objc_msgSend(v6, "_hasCustomSelectionAction") & 1) != 0)
      {
        v8 = 1;
LABEL_15:

        goto LABEL_16;
      }
      if (-[UITableView _allowsEffectiveSelectionOrCustomActionAtIndexPath:](self, "_allowsEffectiveSelectionOrCustomActionAtIndexPath:", v7))
      {
        -[UITableView _delegateProxy](self, "_delegateProxy");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = v10;
        v8 = !v10
          || (*((_BYTE *)&self->_tableFlags + 9) & 8) == 0
          || objc_msgSend(v10, "tableView:shouldHighlightRowAtIndexPath:", self, v7);

        goto LABEL_15;
      }
    }
    v8 = 0;
    goto LABEL_15;
  }
  v8 = 1;
LABEL_16:

  return v8;
}

- (void)_selectRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 notifyDelegate:(BOOL)a6
{
  _BOOL8 v6;
  _BOOL8 v8;
  uint64_t v10;
  id v11;

  v6 = a6;
  v8 = a4;
  v11 = a3;
  LOBYTE(v10) = 0;
  -[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:isCellMultiSelect:deselectPrevious:performCustomSelectionAction:](self, "_selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:isCellMultiSelect:deselectPrevious:performCustomSelectionAction:", v11, v8, a5, v6, -[UITableView _isRowMultiSelect:](self, "_isRowMultiSelect:", v11), 0, v10);

}

- (void)_userSelectRowAtPendingSelectionIndexPath:(id)a3 animatedSelection:(BOOL)a4
{
  _BOOL8 v4;
  UITableView *v6;
  UITableView *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v4 = a4;
  v15 = a3;
  v6 = self;
  v7 = v6;
  if (v6)
  {
    v8 = v6;
    while (objc_msgSend(v8, "isUserInteractionEnabled"))
    {
      objc_msgSend(v8, "superview");
      v9 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v9;
      if (!v9)
      {

        goto LABEL_6;
      }
    }

  }
  else
  {
LABEL_6:
    -[UITableView unhighlightRowAtIndexPath:animated:](v7, "unhighlightRowAtIndexPath:animated:", v15, 0);
    -[UITableView _existingCellForRowAtIndexPath:](v7, "_existingCellForRowAtIndexPath:", v15);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isSelected");

    v12 = -[UITableView _canPerformPrimaryActionForRowAtIndexPath:](v7, "_canPerformPrimaryActionForRowAtIndexPath:", v15);
    v13 = -[UITableView _isRowMultiSelect:](v7, "_isRowMultiSelect:", v15);
    if ((v12 & 1) == 0 && (_DWORD)v13 && v11)
    {
      -[UITableView _deselectRowAtIndexPath:animated:notifyDelegate:](v7, "_deselectRowAtIndexPath:animated:notifyDelegate:", v15, v4, 1);
    }
    else
    {
      LOBYTE(v14) = 1;
      -[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:isCellMultiSelect:deselectPrevious:performCustomSelectionAction:](v7, "_selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:isCellMultiSelect:deselectPrevious:performCustomSelectionAction:", v15, v4, 0, 1, v13, v12, v14);
    }
  }

}

- (void)_userSelectRowAtPendingSelectionIndexPath:(id)a3
{
  void *v4;
  int v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v7 = a3;
  -[UIView traitCollection](self, "traitCollection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = _UIShouldAnimateDefaultCellHighlightAndSelection(v4);

  if (v5)
  {
    -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v7, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __57__UITableView__userSelectRowAtPendingSelectionIndexPath___block_invoke;
      v8[3] = &unk_1E16B1B50;
      v8[4] = self;
      v9 = v7;
      objc_msgSend(v6, "_performConfigurationStateModifications:", v8);

    }
    else
    {
      -[UITableView _userSelectRowAtPendingSelectionIndexPath:animatedSelection:](self, "_userSelectRowAtPendingSelectionIndexPath:animatedSelection:", v7, 0);
    }

  }
  else
  {
    -[UITableView _userSelectRowAtPendingSelectionIndexPath:animatedSelection:](self, "_userSelectRowAtPendingSelectionIndexPath:animatedSelection:", v7, 0);
  }

}

uint64_t __57__UITableView__userSelectRowAtPendingSelectionIndexPath___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_userSelectRowAtPendingSelectionIndexPath:animatedSelection:", *(_QWORD *)(a1 + 40), 1);
}

- (void)_userSelectCell:(id)a3
{
  id v4;

  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", a3, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[UITableView _userSelectRowAtPendingSelectionIndexPath:](self, "_userSelectRowAtPendingSelectionIndexPath:", v4);

}

- (void)deselectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated
{
  -[UITableView _deselectRowAtIndexPath:animated:notifyDelegate:](self, "_deselectRowAtIndexPath:animated:notifyDelegate:", indexPath, animated, 0);
}

- (void)_selectAllSelectedRows
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = (void *)-[NSMutableArray copy](self->_selectedIndexPaths, "copy", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (!-[UITableView _isRowMultiSelect:](self, "_isRowMultiSelect:", v8))
        {
          -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v8);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "setSelected:animated:", 1, 0);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

- (BOOL)_delegateSupportsPrimaryAction
{
  return (*((unsigned __int8 *)&self->_tableFlags + 6) >> 3) & 1;
}

- (BOOL)_canPerformPrimaryActionForRowAtIndexPath:(id)a3
{
  id v4;
  char v5;
  void *v7;

  v4 = a3;
  if (v4 && -[UITableView _delegateSupportsPrimaryAction](self, "_delegateSupportsPrimaryAction"))
  {
    if ((*(_QWORD *)&self->_tableFlags & 0x4000000000000) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v7, "tableView:canPerformPrimaryActionForRowAtIndexPath:", self, v4);

    }
    else
    {
      v5 = (*((_QWORD *)&self->_tableFlags + 1) & 0x10000000000000) == 0;
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (unint64_t)maximumNumberOfSectionIndexTitlesWithoutTruncation
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  -[UITableView _contentInset](self, "_contentInset");
  v4 = v3;
  v6 = v5;
  -[UIView bounds](self, "bounds");
  return -[UITableViewIndex maximumNumberOfTitlesWithoutTruncationForHeight:](self->_index, "maximumNumberOfTitlesWithoutTruncationForHeight:", v7 - v4 - v6);
}

- (UITableViewCellSeparatorStyle)separatorStyle
{
  return *((_WORD *)&self->_tableFlags + 7) & 7;
}

- (void)_darkenedSystemColorsChanged
{
  id v3;

  -[UITableView separatorColor](self, "separatorColor");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[UITableView _distributeSeparatorColor:](self, "_distributeSeparatorColor:", v3);

}

- (id)_defaultSeparatorColor
{
  if ((*((_BYTE *)&self->_tableFlags + 13) & 0x60) != 0)
    +[UIColor tableSeparatorDarkColor](UIColor, "tableSeparatorDarkColor");
  else
    +[UIColor tableSeparatorLightColor](UIColor, "tableSeparatorLightColor");
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)separatorTopShadowColor
{
  return 0;
}

- (id)separatorBottomShadowColor
{
  return 0;
}

- (void)_setDrawsSeparatorAtTopOfSections:(BOOL)a3
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = 0x2000000000000;
  if (!a3)
    v4 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFDFFFFFFFFFFFFLL | v4;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[UITableView visibleCells](self, "visibleCells", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v10, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "_setDrawsSeparatorAtTopOfSection:", -[UITableView _shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:](self, "_shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:", v11));

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

}

- (BOOL)_drawsSeparatorAtTopOfSections
{
  return (*((unsigned __int8 *)&self->_tableFlags + 22) >> 1) & 1;
}

- (BOOL)usesVariableMargins
{
  UITableViewRowData *rowData;
  char rowDataFlags;
  BOOL result;

  rowData = self->_rowData;
  if (!rowData)
    return 0;
  rowDataFlags = (char)rowData->_rowDataFlags;
  if ((rowDataFlags & 4) != 0)
    return rowData->_tableSidePadding > 9.0;
  result = 0;
  rowData->_tableSidePadding = 0.0;
  *(_BYTE *)&rowData->_rowDataFlags = rowDataFlags | 4;
  return result;
}

- (UIView)backgroundView
{
  return self->_backgroundView;
}

- (BOOL)_usingCustomBackgroundView
{
  return *((unsigned __int8 *)&self->_tableFlags + 20) >> 7;
}

- (id)_backgroundEffects
{
  if ((*((_BYTE *)&self->_tableFlags + 21) & 1) == 0)
    return 0;
  -[UIView backgroundEffects](self->_backgroundView, "backgroundEffects");
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t __44__UITableView__setBackgroundColor_animated___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 4, a2, a3, 0.35, 0.0);
}

- (BOOL)_canSelectRowContainingHitView:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  char IsKindOfUITableViewCell;

  v3 = a3;
  if (!v3)
    return 0;
  v4 = v3;
  while (1)
  {
    if ((_IsKindOfUITableViewCell(v4) & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
LABEL_8:
      IsKindOfUITableViewCell = _IsKindOfUITableViewCell(v4);
      goto LABEL_9;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_msgSend(v4, "isTracking") & 1) != 0)
      break;
    objc_msgSend(v4, "superview");
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
    if (!v5)
      goto LABEL_8;
  }
  IsKindOfUITableViewCell = 0;
LABEL_9:

  return IsKindOfUITableViewCell;
}

- (void)_resetDragSwipeAndTouchSelectFlags
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;

  p_tableFlags = &self->_tableFlags;
  *((_QWORD *)&self->_tableFlags + 2) &= ~0x40uLL;
  if (-[UIScrollView isDragging](self, "isDragging"))
    *((_QWORD *)p_tableFlags + 2) |= 0x40uLL;
}

- (BOOL)_beginTrackingWithEvent:(id)a3
{
  id v4;
  objc_super v6;

  v4 = a3;
  -[UITableView _resetDragSwipeAndTouchSelectFlags](self, "_resetDragSwipeAndTouchSelectFlags");
  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  LOBYTE(self) = -[UIScrollView _beginTrackingWithEvent:](&v6, sel__beginTrackingWithEvent_, v4);

  return (char)self;
}

- (void)_setUseUnifiedSelectionBehavior:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x2000000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFDFFFFFFFFFLL | v3;
}

- (BOOL)_useUnifiedSelectionBehavior
{
  return (*((unsigned __int8 *)&self->_tableFlags + 28) >> 5) & 1;
}

- (BOOL)_allowsSelectionOfPendingSelectionIndexPath:(id)a3
{
  id v4;
  BOOL v5;

  v4 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0)
  {
    if (!-[UITableView allowsSelectionDuringEditing](self, "allowsSelectionDuringEditing")
      && !-[UITableView allowsMultipleSelectionDuringEditing](self, "allowsMultipleSelectionDuringEditing")
      && !-[UITableView _isRowMultiSelect:](self, "_isRowMultiSelect:", v4))
    {
      goto LABEL_8;
    }
  }
  else if (!-[UITableView allowsSelection](self, "allowsSelection"))
  {
LABEL_8:
    v5 = 0;
    goto LABEL_9;
  }
  v5 = 1;
LABEL_9:

  return v5;
}

- (void)touchesBegan:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;
  UITableViewCell *swipeToDeleteCell;
  void *v14;
  UITableViewCell *v15;
  NSIndexPath **p_pendingSelectionIndexPath;
  double v17;
  double v18;
  double v19;
  double v20;
  UITableView *v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned int (**v25)(void *, _QWORD);
  NSMutableArray *pendingDeselectionIndexPaths;
  NSIndexPath *v27;
  NSMutableArray *v28;
  NSMutableArray *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  uint64_t v42;
  void *v43;
  void *v44;
  UITableView *v45;
  UITableView *v46;
  void *v47;
  void *v48;
  unsigned int v49;
  id obj;
  objc_super v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD aBlock[5];
  objc_super v61;
  objc_super v62;
  _BYTE v63[128];
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if ((_UITouchesContainsTouchFromExternalTouchpad(v6) & 1) != 0)
    goto LABEL_4;
  v8 = v7;
  if (!objc_msgSend(v8, "_buttonMask"))
  {

LABEL_7:
    -[UITableView currentTouch](self, "currentTouch");
    v10 = objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = (void *)v10;
      -[UITableView currentTouch](self, "currentTouch");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v12, "phase") == 3)
      {
        swipeToDeleteCell = self->_swipeToDeleteCell;

        if (swipeToDeleteCell)
          goto LABEL_5;
      }
      else
      {
        -[UITableView currentTouch](self, "currentTouch");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v14, "phase") != 4)
        {

LABEL_58:
          goto LABEL_5;
        }
        v15 = self->_swipeToDeleteCell;

        if (v15)
          goto LABEL_5;
      }
    }
    else if (self->_swipeToDeleteCell)
    {
      goto LABEL_5;
    }
    objc_msgSend(v6, "anyObject");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView setCurrentTouch:](self, "setCurrentTouch:", v11);
    if (objc_msgSend(v11, "_isPointerTouch"))
      -[UITableView _resetDragSwipeAndTouchSelectFlags](self, "_resetDragSwipeAndTouchSelectFlags");
    if (v11)
    {
      p_pendingSelectionIndexPath = &self->_pendingSelectionIndexPath;
      if (!self->_pendingSelectionIndexPath)
      {
        objc_msgSend(v11, "locationInView:", self);
        v18 = v17;
        v20 = v19;
        v61.receiver = self;
        v61.super_class = (Class)UITableView;
        -[UIScrollView hitTest:withEvent:](&v61, sel_hitTest_withEvent_, v8);
        v21 = (UITableView *)objc_claimAutoreleasedReturnValue();
        -[UIView traitCollection](self, "traitCollection");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = _UIShouldAnimateDefaultCellHighlightAndSelection(v22);

        if (v21 == self)
        {
          objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:", v23, v49, 0, 1);

        }
        if (-[UITableView _canSelectRowContainingHitView:](self, "_canSelectRowContainingHitView:", v21))
        {
          -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, v18, v20);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          if (v24
            && -[UITableView _allowsSelectionOfPendingSelectionIndexPath:](self, "_allowsSelectionOfPendingSelectionIndexPath:", v24))
          {
            objc_storeStrong((id *)&self->_pendingSelectionIndexPath, v24);
            if (-[UIScrollView isDragging](self, "isDragging")
              || !-[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:playFeedback:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:playFeedback:", *p_pendingSelectionIndexPath, v49, 0, 1, 1))
            {
              v27 = *p_pendingSelectionIndexPath;
              *p_pendingSelectionIndexPath = 0;

              *((_QWORD *)&self->_tableFlags + 2) |= 0x40uLL;
            }
            else
            {
              v43 = v24;
              v45 = v21;
              v47 = v11;
              aBlock[0] = MEMORY[0x1E0C809B0];
              aBlock[1] = 3221225472;
              aBlock[2] = __38__UITableView_touchesBegan_withEvent___block_invoke;
              aBlock[3] = &unk_1E16DB4E8;
              aBlock[4] = self;
              v25 = (unsigned int (**)(void *, _QWORD))_Block_copy(aBlock);
              if (-[UITableView _shouldDeselectRowsOnTouchesBegan](self, "_shouldDeselectRowsOnTouchesBegan"))
              {
                pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
                if (pendingDeselectionIndexPaths)
                {
                  -[NSMutableArray removeAllObjects](pendingDeselectionIndexPaths, "removeAllObjects");
                }
                else
                {
                  v28 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  v29 = self->_pendingDeselectionIndexPaths;
                  self->_pendingDeselectionIndexPaths = v28;

                }
                v58 = 0u;
                v59 = 0u;
                v56 = 0u;
                v57 = 0u;
                obj = (id)-[NSMutableArray copy](self->_selectedIndexPaths, "copy", v24, v21, v11);
                v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
                if (v30)
                {
                  v31 = v30;
                  v32 = *(_QWORD *)v57;
                  do
                  {
                    for (i = 0; i != v31; ++i)
                    {
                      if (*(_QWORD *)v57 != v32)
                        objc_enumerationMutation(obj);
                      v34 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * i);
                      if (v25[2](v25, v34))
                      {
                        -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v34);
                        v35 = (void *)objc_claimAutoreleasedReturnValue();
                        v36 = v35;
                        if (v35)
                          objc_msgSend(v35, "setSelected:animated:", 0, v49);
                        else
                          -[UITableView _showSeparatorForRowBeforeIndexPath:](self, "_showSeparatorForRowBeforeIndexPath:", v34);
                        -[NSMutableArray addObject:](self->_pendingDeselectionIndexPaths, "addObject:", v34);

                      }
                    }
                    v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
                  }
                  while (v31);
                }

              }
              v54 = 0u;
              v55 = 0u;
              v52 = 0u;
              v53 = 0u;
              v37 = (void *)-[NSMutableArray copy](self->_highlightedIndexPaths, "copy", v43, v45, v47);
              v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v52, v63, 16);
              if (v38)
              {
                v39 = v38;
                v40 = *(_QWORD *)v53;
                do
                {
                  for (j = 0; j != v39; ++j)
                  {
                    if (*(_QWORD *)v53 != v40)
                      objc_enumerationMutation(v37);
                    v42 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * j);
                    if (v25[2](v25, v42))
                      -[UITableView unhighlightRowAtIndexPath:animated:](self, "unhighlightRowAtIndexPath:animated:", v42, 0);
                  }
                  v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v52, v63, 16);
                }
                while (v39);
              }

              v21 = v46;
              v11 = v48;
              v24 = v44;
            }
          }

        }
      }
    }
    v51.receiver = self;
    v51.super_class = (Class)UITableView;
    -[UIScrollView touchesBegan:withEvent:](&v51, sel_touchesBegan_withEvent_, v6, v8);
    goto LABEL_58;
  }
  v9 = objc_msgSend(v8, "_buttonMask");

  if ((v9 & 1) != 0)
    goto LABEL_7;
LABEL_4:
  v62.receiver = self;
  v62.super_class = (Class)UITableView;
  -[UIScrollView touchesBegan:withEvent:](&v62, sel_touchesBegan_withEvent_, v6, v7);
LABEL_5:

}

uint64_t __38__UITableView_touchesBegan_withEvent___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "_isRowMultiSelect:", v3) & 1) != 0)
    v4 = 0;
  else
    v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2360)) ^ 1;

  return v4;
}

- (void)touchesMoved:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  void *v8;
  NSIndexPath *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  void *v23;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v25;
  objc_super v26;
  CGPoint v27;
  CGRect v28;

  v6 = a3;
  v7 = a4;
  -[UITableView currentTouch](self, "currentTouch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "containsObject:", v8))
  {
    if (!v8)
    {
LABEL_12:
      v26.receiver = self;
      v26.super_class = (Class)UITableView;
      -[UIScrollView touchesMoved:withEvent:](&v26, sel_touchesMoved_withEvent_, v6, v7);
      goto LABEL_13;
    }
    v9 = self->_pendingSelectionIndexPath;
    -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      -[UIView traitCollection](self, "traitCollection");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = _UIShouldAnimateDefaultCellHighlightAndSelection(v11);

      objc_msgSend(v10, "bounds");
      v14 = v13;
      v16 = v15;
      v18 = v17;
      v20 = v19;
      objc_msgSend(v8, "locationInView:", v10);
      v27.x = v21;
      v27.y = v22;
      v28.origin.x = v14;
      v28.origin.y = v16;
      v28.size.width = v18;
      v28.size.height = v20;
      if (CGRectContainsPoint(v28, v27) && !self->_swipeToDeleteCell)
      {
        if ((objc_msgSend(v10, "isHighlighted") & 1) == 0)
        {
          -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:", self->_pendingSelectionIndexPath, v12, 0, 1);
          p_tableFlags = &self->_tableFlags;
          v25 = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFFFBFLL;
          goto LABEL_10;
        }
      }
      else if (objc_msgSend(v10, "isHighlighted"))
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:", v23, v12, 0, 1);

        p_tableFlags = &self->_tableFlags;
        v25 = *((_QWORD *)&self->_tableFlags + 2) | 0x40;
LABEL_10:
        *((_QWORD *)p_tableFlags + 2) = v25;
      }
    }

    goto LABEL_12;
  }
LABEL_13:

}

- (void)_updateTableHeaderViewForAutoHideWithVelocity:(double)a3 targetOffset:(CGPoint *)a4
{
  double v7;
  CGFloat v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  UITableViewRowData *rowData;
  double heightForTableHeaderViewHiding;
  double y;
  unint64_t v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  BOOL v25;

  -[UIScrollView contentOffset](self, "contentOffset");
  v8 = v7;
  v10 = v9;
  -[UIScrollView _effectiveContentInset](self, "_effectiveContentInset");
  if (a4)
  {
    v12 = v11;
    if (self->_tableHeaderView)
      goto LABEL_3;
    if (-[UITableView _shouldUseNewHeaderFooterBehavior](self, "_shouldUseNewHeaderFooterBehavior"))
    {
      rowData = self->_rowData;
      if (rowData)
      {
        heightForTableHeaderViewHiding = rowData->_heightForTableHeaderViewHiding;
        if (heightForTableHeaderViewHiding < 0.0)
          heightForTableHeaderViewHiding = -[UITableViewRowData heightForTableHeaderView]((uint64_t)rowData);
        if (heightForTableHeaderViewHiding > 0.0)
        {
LABEL_3:
          if ((*((_BYTE *)&self->_tableFlags + 19) & 0x10) != 0)
          {
            v13 = -v12;
            if (a4->y > -v12)
            {
              -[UITableView heightForAutohidingTableHeaderView](self, "heightForAutohidingTableHeaderView");
              if (v10 > v13)
              {
                v15 = v10 + v12;
                if (v10 + v12 < v14)
                {
                  if (a3 <= 0.0)
                  {
                    if (a3 < 0.0)
                    {
                      v16 = *((_QWORD *)&self->_tableFlags + 3);
                      v17 = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFDFFFFFFFLL;
                      goto LABEL_21;
                    }
                    if (v15 <= v14 * 0.8)
                    {
                      v22 = *((_QWORD *)&self->_tableFlags + 2);
                      v16 = *((_QWORD *)&self->_tableFlags + 3);
                      v23 = v14 - v12;
                      v24 = v22 & 0xFFFFFFFFDFFFFFFFLL;
                      v25 = (v22 & 0x40000000) == 0;
                      if ((v22 & 0x40000000) != 0)
                        v17 = v22 & 0xFFFFFFFFDFFFFFFFLL;
                      else
                        v17 = v22 | 0x20000000;
                      if (!v25)
                        v23 = -v12;
                      if (v15 >= v14 * 0.2)
                        v13 = v23;
                      else
                        v17 = v24;
                      goto LABEL_21;
                    }
                  }
                  v13 = v14 - v12;
                  v16 = *((_QWORD *)&self->_tableFlags + 3);
                  v17 = *((_QWORD *)&self->_tableFlags + 2) | 0x20000000;
LABEL_21:
                  *((_QWORD *)&self->_tableFlags + 2) = v17;
                  *((_QWORD *)&self->_tableFlags + 3) = v16;
                  if (a4->y <= v14 - v12)
                  {
                    a4->x = v8;
                    a4->y = v13;
                  }
                  goto LABEL_25;
                }
              }
              y = a4->y;
              if (y < v14 - v12)
              {
                if (v12 + y <= v14 * 0.5)
                {
                  a4->y = v13;
                  v21 = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFDFFFFFFFLL;
                }
                else
                {
                  a4->y = v14 - v12;
                  v21 = *((_QWORD *)&self->_tableFlags + 2) | 0x20000000;
                }
                *((_QWORD *)&self->_tableFlags + 2) = v21;
              }
            }
          }
        }
      }
    }
  }
LABEL_25:
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFBFFFFFFFLL | (2 * *((_QWORD *)&self->_tableFlags + 2)) & 0x40000000;
}

- (void)_scrollViewWillEndDraggingWithVelocity:(CGPoint)a3 targetContentOffset:(CGPoint *)a4
{
  -[UITableView _updateTableHeaderViewForAutoHideWithVelocity:targetOffset:](self, "_updateTableHeaderViewForAutoHideWithVelocity:targetOffset:", a4, a3.y);
}

- (void)_scrollViewDidEndDraggingWithDeceleration:(BOOL)a3
{
  NSMutableArray *pendingDeselectionIndexPaths;
  objc_super v5;

  v5.receiver = self;
  v5.super_class = (Class)UITableView;
  -[UIScrollView _scrollViewDidEndDraggingWithDeceleration:](&v5, sel__scrollViewDidEndDraggingWithDeceleration_, a3);
  if (-[UITableView _shouldDeselectRowsOnTouchesBegan](self, "_shouldDeselectRowsOnTouchesBegan"))
  {
    -[UITableView _selectAllSelectedRows](self, "_selectAllSelectedRows");
    pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
    self->_pendingDeselectionIndexPaths = 0;

  }
}

void __40__UITableView__visibleHeaderFooterViews__block_invoke(uint64_t a1, void *a2)
{
  _QWORD v3[4];
  id v4;
  __int128 v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __40__UITableView__visibleHeaderFooterViews__block_invoke_2;
  v3[3] = &unk_1E16E3E30;
  v5 = *(_OWORD *)(a1 + 40);
  v4 = *(id *)(a1 + 32);
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v3);

}

void __40__UITableView__visibleHeaderFooterViews__block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  id v9;

  v9 = a3;
  v5 = objc_msgSend(a2, "integerValue");
  v6 = *(_QWORD *)(a1 + 40);
  v8 = v5 >= v6;
  v7 = v5 - v6;
  v8 = !v8 || v7 >= *(_QWORD *)(a1 + 48);
  if (!v8)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v9);

}

- (id)_contentSubviews
{
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", self->_visibleCells);
  -[UITableView _visibleHeaderFooterViews](self, "_visibleHeaderFooterViews");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v4);

  return v3;
}

- (id)_nearestCellToPoint:(CGPoint)a3
{
  return -[UITableView _nearestCellToPoint:expandingVisibleCells:](self, "_nearestCellToPoint:expandingVisibleCells:", 0, a3.x, a3.y);
}

- (id)_nearestCellToPoint:(CGPoint)a3 expandingVisibleCells:(BOOL)a4
{
  _BOOL4 v4;
  double y;
  double x;
  double v8;
  double v9;
  double v10;
  NSMutableArray *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  double v16;
  uint64_t i;
  void *v18;
  double v19;
  double v20;
  double v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  double v26;
  id v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v4 = a4;
  y = a3.y;
  x = a3.x;
  v34 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    -[UITableView _visibleBounds](self, "_visibleBounds");
    v10 = (v9 - y) * -0.75;
    if (v9 - y <= 0.0)
      v10 = 0.0;
    -[UITableView _ensureViewsAreLoadedInRect:](self, "_ensureViewsAreLoadedInRect:", v8 + 0.0, v9 + v10);
  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v11 = self->_visibleCells;
  v12 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v12)
  {
    v13 = v12;
    v14 = 0;
    v15 = *(_QWORD *)v30;
    v16 = 1.79769313e308;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v30 != v15)
          objc_enumerationMutation(v11);
        v18 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        if (v4)
        {
          objc_msgSend(v18, "frame");
          v21 = sqrt((v19 - x) * (v19 - x) + (v20 - y) * (v20 - y));
        }
        else
        {
          objc_msgSend(v18, "bounds", (_QWORD)v29);
          -[UIView convertRect:fromView:](self, "convertRect:fromView:", v18);
          UIDistanceBetweenPointAndRect(x, y, v22, v23, v24, v25);
          v21 = v26;
        }
        if (v21 < v16)
        {
          v27 = v18;

          v16 = v21;
          v14 = v27;
        }
      }
      v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v13);
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

- (CGPoint)_contentOffsetForLowFidelityScrollInDirection:(CGPoint)a3 duration:(double *)a4
{
  double y;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  double MinY;
  void *v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  double MaxY;
  UIView *tableHeaderView;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  void *v54;
  void *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  void *v60;
  void *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  BOOL v67;
  void *v68;
  void *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  objc_super v82;
  CGPoint result;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;

  y = a3.y;
  v82.receiver = self;
  v82.super_class = (Class)UITableView;
  -[UIScrollView _contentOffsetForLowFidelityScrollInDirection:duration:](&v82, sel__contentOffsetForLowFidelityScrollInDirection_duration_, a4, a3.x);
  v7 = v6;
  v9 = v8;
  -[UIScrollView contentSize](self, "contentSize");
  v11 = v10;
  -[UIView bounds](self, "bounds");
  if (v11 <= v12)
    goto LABEL_37;
  if (-[UIScrollView isScrollAnimating](self, "isScrollAnimating"))
    -[UIScrollView _animatedTargetOffset](self, "_animatedTargetOffset");
  else
    -[UIScrollView contentOffset](self, "contentOffset");
  v15 = v13;
  v16 = v14;
  -[UIView bounds](self, "bounds");
  v18 = v16 + y * v17;
  if (y >= 0.0)
  {
    if (y <= 0.0)
      goto LABEL_15;
    -[UITableView _visibleCellsUsingPresentationValues:](self, "_visibleCellsUsingPresentationValues:", 1);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "lastObject");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      -[UIView bounds](self, "bounds");
      v36 = v35;
      v81 = v15;
      v38 = v37;
      v40 = v39;
      v42 = v41;
      objc_msgSend(v20, "frame");
      v91.origin.x = v43;
      v91.origin.y = v44;
      v91.size.width = v45;
      v91.size.height = v46;
      v87.origin.x = v36;
      v87.origin.y = v38;
      v15 = v81;
      v87.size.width = v40;
      v87.size.height = v42;
      if (!CGRectContainsRect(v87, v91))
      {
        -[UIView bounds](self, "bounds");
        MaxY = CGRectGetMaxY(v88);
        objc_msgSend(v20, "frame");
        v18 = v18 + MaxY - CGRectGetMaxY(v89);
      }
    }
  }
  else
  {
    -[UITableView _visibleCellsUsingPresentationValues:](self, "_visibleCellsUsingPresentationValues:", 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "firstObject");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      v80 = v15;
      -[UIView bounds](self, "bounds");
      v22 = v21;
      v24 = v23;
      v26 = v25;
      v28 = v27;
      objc_msgSend(v20, "frame");
      v90.origin.x = v29;
      v90.origin.y = v30;
      v90.size.width = v31;
      v90.size.height = v32;
      v84.origin.x = v22;
      v84.origin.y = v24;
      v84.size.width = v26;
      v84.size.height = v28;
      if (!CGRectContainsRect(v84, v90))
      {
        -[UIView bounds](self, "bounds");
        MinY = CGRectGetMinY(v85);
        objc_msgSend(v20, "frame");
        v18 = v18 + MinY - CGRectGetMinY(v86);
      }
      v15 = v80;
    }
  }

LABEL_15:
  tableHeaderView = self->_tableHeaderView;
  if (tableHeaderView && (-[UIView frame](tableHeaderView, "frame"), v49 > v18))
  {
    -[UIView frame](self->_tableHeaderView, "frame");
    v7 = v50;
    v52 = v51;
    -[UITableView _contentInset](self, "_contentInset");
    v9 = v52 - v53;
  }
  else
  {
    -[UITableView _nearestCellToPoint:expandingVisibleCells:](self, "_nearestCellToPoint:expandingVisibleCells:", 1, v15, v18);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = v54;
    if (v54)
    {
      objc_msgSend(v54, "frame");
      v7 = v56;
      v58 = v57;
      -[UITableView _contentInset](self, "_contentInset");
      v9 = v58 - v59;
      -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v55, 1);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView _headerViewForSection:usingPresentationValues:](self, "_headerViewForSection:usingPresentationValues:", objc_msgSend(v60, "section"), 1);
      v61 = (void *)objc_claimAutoreleasedReturnValue();

      if (v61)
      {
        objc_msgSend(v61, "size");
        v63 = v9 - v62;
        -[UIView bounds](self, "bounds");
        v65 = v63 + v64;
        -[UIScrollView contentSize](self, "contentSize");
        if (v65 < v66)
          v9 = v63;
      }

    }
  }
  if (-[UITableView _isScrolledToTop](self, "_isScrolledToTop")
    && (-[UITableView _isScrolledToTopAtContentOffsetY:](self, "_isScrolledToTopAtContentOffsetY:", v9)
      ? (v67 = y == -1.0)
      : (v67 = 0),
        v67))
  {
    v9 = v9 + -20.0;
  }
  else if (y == 1.0)
  {
    -[UIScrollView accessoryViewAtEdge:](self, "accessoryViewAtEdge:", 4);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = v68;
    if (v68)
    {
      objc_msgSend(v68, "frame");
      v71 = v70 + 20.0;
    }
    else
    {
      v71 = 20.0;
    }
    -[UIView bounds](self, "bounds");
    v73 = v9 + v72;
    -[UIScrollView contentSize](self, "contentSize");
    if (v73 > v71 + v74)
    {
      -[UIScrollView contentSize](self, "contentSize");
      v76 = v75;
      -[UIView bounds](self, "bounds");
      v9 = v71 + v76 - v77;
    }

  }
LABEL_37:
  v78 = v7;
  v79 = v9;
  result.y = v79;
  result.x = v78;
  return result;
}

- (void)touchesEnded:(id)a3 withEvent:(id)a4
{
  id v5;
  void *v6;
  int v7;
  BOOL v8;
  NSIndexPath *v9;
  _BOOL4 v10;
  void *v11;
  NSIndexPath *pendingSelectionIndexPath;
  void *v13;
  void *v14;
  void *v15;
  char isKindOfClass;
  void *v17;
  uint64_t v18;
  NSIndexPath *v19;
  NSMutableArray *pendingDeselectionIndexPaths;
  _QWORD v21[5];
  _QWORD v22[5];
  NSIndexPath *v23;

  v5 = a3;
  -[UITableView currentTouch](self, "currentTouch");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "containsObject:", v6);

  if (v7)
  {
    -[UITableView setCurrentTouch:](self, "setCurrentTouch:", 0);
    v8 = 0;
    if (!-[UIScrollView isDragging](self, "isDragging") && v6 && (*((_QWORD *)&self->_tableFlags + 2) & 0x40) == 0)
    {
      v9 = self->_pendingSelectionIndexPath;
      if (v9 && !self->_swipeToDeleteCell)
      {
        v10 = -[UITableView _allowsSelectionOfPendingSelectionIndexPath:](self, "_allowsSelectionOfPendingSelectionIndexPath:", v9);
        v8 = v10;
        if (v10)
        {
          v11 = (void *)UIApp;
          v22[0] = MEMORY[0x1E0C809B0];
          v22[1] = 3221225472;
          v22[2] = __38__UITableView_touchesEnded_withEvent___block_invoke;
          v22[3] = &unk_1E16B1B50;
          v22[4] = self;
          v23 = v9;
          objc_msgSend(v11, "_performBlockAfterCATransactionCommits:", v22);
          pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
          self->_pendingSelectionIndexPath = 0;

        }
        -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v9);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = v13;
        if ((*((_BYTE *)&self->_tableFlags + 1) & 0x10) != 0)
        {
          objc_msgSend(v13, "layoutManager");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) != 0)
            objc_msgSend(v14, "_startToEditTextField");
        }

      }
      else
      {
        v8 = 0;
      }

    }
    if (!v8 && self->_pendingSelectionIndexPath)
    {
      -[UIView traitCollection](self, "traitCollection");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = _UIShouldAnimateDefaultCellHighlightAndSelection(v17);

      -[UITableView unhighlightRowAtIndexPath:animated:](self, "unhighlightRowAtIndexPath:animated:", self->_pendingSelectionIndexPath, v18);
      v19 = self->_pendingSelectionIndexPath;
      self->_pendingSelectionIndexPath = 0;

    }
    if (-[UITableView _shouldDeselectRowsOnTouchesBegan](self, "_shouldDeselectRowsOnTouchesBegan"))
    {
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __38__UITableView_touchesEnded_withEvent___block_invoke_2;
      v21[3] = &unk_1E16B1B28;
      v21[4] = self;
      objc_msgSend((id)UIApp, "_performBlockAfterCATransactionCommits:", v21);
      pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
      self->_pendingDeselectionIndexPaths = 0;

    }
    -[UITableView _resetDragSwipeAndTouchSelectFlags](self, "_resetDragSwipeAndTouchSelectFlags");
  }

}

uint64_t __38__UITableView_touchesEnded_withEvent___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_userSelectRowAtPendingSelectionIndexPath:", *(_QWORD *)(a1 + 40));
}

uint64_t __38__UITableView_touchesEnded_withEvent___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_selectAllSelectedRows");
}

- (void)touchesCancelled:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  void *v8;
  int v9;
  NSIndexPath *pendingSelectionIndexPath;
  void *v11;
  uint64_t v12;
  void *v13;
  NSMutableArray *pendingDeselectionIndexPaths;
  objc_super v15;

  v6 = a3;
  v7 = a4;
  -[UITableView currentTouch](self, "currentTouch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "containsObject:", v8);

  if (v9)
  {
    -[UITableView setCurrentTouch:](self, "setCurrentTouch:", 0);
    pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
    self->_pendingSelectionIndexPath = 0;

    -[UIView traitCollection](self, "traitCollection");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = _UIShouldAnimateDefaultCellHighlightAndSelection(v11);

    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:", v13, v12, 0, 1);

    if (-[UIScrollView isScrollEnabled](self, "isScrollEnabled"))
      *((_QWORD *)&self->_tableFlags + 2) |= 0x40uLL;
    v15.receiver = self;
    v15.super_class = (Class)UITableView;
    -[UIScrollView touchesCancelled:withEvent:](&v15, sel_touchesCancelled_withEvent_, v6, v7);
    if (-[UITableView _shouldDeselectRowsOnTouchesBegan](self, "_shouldDeselectRowsOnTouchesBegan")
      && !-[UIScrollView isTracking](self, "isTracking"))
    {
      -[UITableView _selectAllSelectedRows](self, "_selectAllSelectedRows");
      pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
      self->_pendingDeselectionIndexPaths = 0;

    }
  }

}

- (id)hitTest:(CGPoint)a3 forEvent:(__GSEvent *)a4
{
  double y;
  double x;
  UIView *indexContainerView;
  UITableViewIndex *v9;
  UITableViewIndex *v10;
  UITableViewIndex *v11;
  UITableViewIndex *v12;
  objc_super v14;

  y = a3.y;
  x = a3.x;
  indexContainerView = self->_indexContainerView;
  -[UIView convertPoint:fromView:](indexContainerView, "convertPoint:fromView:", self);
  -[UIView hitTest:forEvent:](indexContainerView, "hitTest:forEvent:", a4);
  v9 = (UITableViewIndex *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9 && (v9 == self->_index || v9 == (UITableViewIndex *)self->_indexContainerView))
  {
    v11 = v9;
  }
  else
  {
    v14.receiver = self;
    v14.super_class = (Class)UITableView;
    -[UIView hitTest:forEvent:](&v14, sel_hitTest_forEvent_, a4, x, y);
    v11 = (UITableViewIndex *)objc_claimAutoreleasedReturnValue();
  }
  v12 = v11;

  return v12;
}

- (id)hitTest:(CGPoint)a3 withEvent:(id)a4
{
  double y;
  double x;
  id v7;
  UIView *indexContainerView;
  UITableViewIndex *v9;
  UITableViewIndex *v10;
  UITableViewIndex *v11;
  UITableViewIndex *v12;
  objc_super v14;

  y = a3.y;
  x = a3.x;
  v7 = a4;
  indexContainerView = self->_indexContainerView;
  -[UIView convertPoint:fromView:](indexContainerView, "convertPoint:fromView:", self, x, y);
  -[UIView hitTest:withEvent:](indexContainerView, "hitTest:withEvent:", v7);
  v9 = (UITableViewIndex *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9 && (v9 == self->_index || v9 == (UITableViewIndex *)self->_indexContainerView))
  {
    v11 = v9;
  }
  else
  {
    v14.receiver = self;
    v14.super_class = (Class)UITableView;
    -[UIScrollView hitTest:withEvent:](&v14, sel_hitTest_withEvent_, v7, x, y);
    v11 = (UITableViewIndex *)objc_claimAutoreleasedReturnValue();
  }
  v12 = v11;

  return v12;
}

- (BOOL)touchesShouldCancelInContentView:(id)a3
{
  id v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  objc_super v9;

  v4 = a3;
  v9.receiver = self;
  v9.super_class = (Class)UITableView;
  v5 = -[UIScrollView touchesShouldCancelInContentView:](&v9, sel_touchesShouldCancelInContentView_, v4);
  if (v5)
  {
    -[UITableView _tableViewCellForContentView:](self, "_tableViewCellForContentView:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v6, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView unhighlightRowAtIndexPath:animated:](self, "unhighlightRowAtIndexPath:animated:", v7, 0);

    }
  }

  return v5;
}

- (BOOL)_scrollsToMakeFirstResponderVisible
{
  return 0;
}

void __54__UITableView__configureDataSourcePrefetchingHandlers__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained && (*((_BYTE *)WeakRetained + 3106) & 8) != 0)
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v7 = v3;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(v5, "indexPathForRowAtGlobalRow:", objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v11), "integerValue", (_QWORD)v14));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
            objc_msgSend(v6, "addObject:", v12);

          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }

    if (objc_msgSend(v6, "count"))
    {
      objc_msgSend(v5, "_prefetchDataSourceProxy");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "tableView:prefetchRowsAtIndexPaths:", v5, v6);

    }
  }

}

void __54__UITableView__configureDataSourcePrefetchingHandlers__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained && (*((_BYTE *)WeakRetained + 3106) & 0x10) != 0)
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v7 = v3;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(v5, "indexPathForRowAtGlobalRow:", objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v11), "integerValue", (_QWORD)v14));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
            objc_msgSend(v6, "addObject:", v12);

          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }

    if (objc_msgSend(v6, "count"))
    {
      objc_msgSend(v5, "_prefetchDataSourceProxy");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "tableView:cancelPrefetchingForRowsAtIndexPaths:", v5, v6);

    }
  }

}

void __48__UITableView__configureCellPrefetchingHandlers__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_prefetchCellAtGlobalRow:aboveVisibleRange:", a2, a3);

}

- (void)_prefetchCellAtGlobalRow:(int64_t)a3 aboveVisibleRange:(BOOL)a4
{
  _BOOL4 v4;
  void *v7;
  void *v8;
  char v9;
  char v10;
  double v11;
  double v12;
  id v13;
  double v14;
  void *v15;

  v4 = a4;
  if (-[UITableView _cellPrefetchingAllowed](self, "_cellPrefetchingAllowed"))
  {
    -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      v15 = v7;
      if (!self->_focusedCell
        || self->_focusedViewType != 1
        || (v9 = objc_msgSend(v7, "isEqual:", self->_focusedCellIndexPath), v8 = v15, (v9 & 1) == 0))
      {
        if (!self->_firstResponderView
          || self->_firstResponderViewType != 1
          || (v10 = objc_msgSend(v8, "isEqual:", self->_firstResponderIndexPath), v8 = v15, (v10 & 1) == 0))
        {
          -[UIScrollView contentSize](self, "contentSize");
          v12 = v11;
          v13 = -[UITableView _createPreparedCellForGlobalRow:withIndexPath:willDisplay:](self, "_createPreparedCellForGlobalRow:withIndexPath:willDisplay:", a3, v15, 0, -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, a3, 0));
          objc_msgSend(v13, "_setHiddenForReuse:", 1);
          -[NSMutableDictionary removeObjectForKey:](self->_tentativeCells, "removeObjectForKey:", v15);
          if (v4 && -[UITableView _estimatesHeights](self, "_estimatesHeights"))
          {
            -[UITableView _applyCoalescedContentSizeUpdates](self, "_applyCoalescedContentSizeUpdates");
            -[UIScrollView contentSize](self, "contentSize");
            if (v14 - v12 != 0.0)
            {
              -[UIScrollView contentOffset](self, "contentOffset");
              -[UITableView setContentOffset:](self, "setContentOffset:");
            }
          }

          v8 = v15;
        }
      }
    }

  }
}

- (BOOL)isPrefetchingEnabled
{
  return (*((unsigned __int8 *)&self->_tableFlags + 26) >> 1) & 1;
}

- (void)setPrefetchingEnabled:(BOOL)prefetchingEnabled
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)&self->_tableFlags + 3);
  if (((((v3 & 0x20000) == 0) ^ prefetchingEnabled) & 1) == 0)
  {
    v4 = 0x20000;
    if (!prefetchingEnabled)
      v4 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v3 & 0xFFFFFFFFFFFDFFFFLL | v4;
    -[UITableView _preparePrefetchContext](self, "_preparePrefetchContext");
  }
}

- (void)_updateCycleIdleUntil:(unint64_t)a3
{
  id WeakRetained;
  UITableViewRowData *rowData;
  void *v6;
  _UITableViewPrefetchContext *prefetchContext;
  double v8;

  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  if (WeakRetained)
  {
    rowData = self->_rowData;

    if (rowData)
    {
      if ((*((_BYTE *)&self->_tableFlags + 26) & 2) != 0)
      {
        v6 = (void *)_UISetCurrentFallbackEnvironment(self);
        -[UITableView _preparePrefetchContext](self, "_preparePrefetchContext");
        prefetchContext = self->_prefetchContext;
        -[UIScrollView contentOffset](self, "contentOffset");
        -[_UITableViewPrefetchContext updateVisibleIndexRange:withContentOffset:]((uint64_t)prefetchContext, self->_visibleRows.location, self->_visibleRows.length, v8);
        _UIRestorePreviousFallbackEnvironment(v6);
      }
    }
  }
}

- (void)accessoryInsetsDidChange:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;
  objc_super v15;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  v15.receiver = self;
  v15.super_class = (Class)UITableView;
  -[UIScrollView accessoryInsetsDidChange:](&v15, sel_accessoryInsetsDidChange_);
  -[UIScrollView accessoryInsets](self, "accessoryInsets");
  if (v9 != left || v8 != top || v11 != right || v10 != bottom)
  {
    if (v9 == left && v11 == right)
      -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1);
    else
      -[UITableView _setNeedsRebuildGeometry](self, "_setNeedsRebuildGeometry");
    -[UIView layoutIfNeeded](self, "layoutIfNeeded");
  }
}

- (void)_getGradientMaskBounds:(CGRect *)a3 startInsets:(UIEdgeInsets *)a4 endInsets:(UIEdgeInsets *)a5 intensities:(UIEdgeInsets *)a6
{
  double v10;
  double v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;
  objc_super v17;

  v17.receiver = self;
  v17.super_class = (Class)UITableView;
  -[UIScrollView _getGradientMaskBounds:startInsets:endInsets:intensities:](&v17, sel__getGradientMaskBounds_startInsets_endInsets_intensities_, a3, a4, a5, a6);
  -[UITableConstants defaultFocusedShadowRadiusForTableView:](self->_constants, "defaultFocusedShadowRadiusForTableView:", self);
  v11 = v10;
  v12 = dyld_program_sdk_at_least();
  v13 = 0.0;
  v14 = 0.0;
  if ((v12 & 1) == 0)
    -[UITableView _contentInset](self, "_contentInset", 0.0);
  v15 = v11 + v11;
  v16 = v11 * 4.0;
  if (a3)
  {
    a3->origin.y = a3->origin.y - v15;
    a3->size.height = v15 + v16 + a3->size.height;
  }
  if (a4)
  {
    a4->top = v14 + v15 + a4->top;
    a4->bottom = v16 + v13 + a4->bottom;
  }
  if (a5)
  {
    a5->top = v14 + v15 + a5->top;
    a5->bottom = v16 + v13 + a5->bottom;
  }
}

- (CGSize)_contentSize
{
  double v3;
  double v4;
  double v5;
  double v6;
  UITableViewCountView *countLabel;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGSize result;
  CGRect v21;

  if (self->_rowData)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (-[UIView _isSpecialInternalHeaderView](self->_tableHeaderView, "_isSpecialInternalHeaderView"))
      {
        -[UIView frame](self->_tableHeaderView, "frame");
        v4 = v3;
        -[UIView frame](self, "frame");
        -[UIView sizeToFit](self->_tableHeaderView, "sizeToFit", CGRectGetWidth(v21));
        -[UIView frame](self->_tableHeaderView, "frame");
        if (v5 != v4)
          -[UITableViewRowData tableHeaderHeightDidChangeToHeight:]((uint64_t)self->_rowData, v5);
      }
    }
    v6 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
    countLabel = self->_countLabel;
    if (countLabel && -[UITableViewCountView count](countLabel, "count") >= 20)
    {
      -[UITableConstants defaultRowHeightForTableView:](self->_constants, "defaultRowHeightForTableView:", self);
      v6 = v6 + v8;
    }
    -[UIView bounds](self, "bounds");
    v10 = v9;
    -[UITableView heightForTableHeaderViewHiding](self, "heightForTableHeaderViewHiding");
    if (v11 > 0.0)
    {
      v12 = v11;
      -[UITableView _contentInset](self, "_contentInset");
      v14 = v13;
      v16 = v15;
      -[UIView bounds](self, "bounds");
      if (v6 < v12 + v17 - v14 - v16)
        v6 = v12 + v17 - v14 - v16;
    }
  }
  else
  {
    v10 = *MEMORY[0x1E0C9D820];
    v6 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  }
  v18 = v10;
  v19 = v6;
  result.height = v19;
  result.width = v18;
  return result;
}

- (CGSize)sizeThatFits:(CGSize)a3
{
  double height;
  CGFloat width;
  double v6;
  double v7;
  double v8;
  CGSize result;

  height = a3.height;
  width = a3.width;
  -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
  v6 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
  if (v6 >= height)
    v7 = height;
  else
    v7 = v6;
  v8 = width;
  result.height = v7;
  result.width = v8;
  return result;
}

- (BOOL)canBeEdited
{
  return 1;
}

uint64_t __35__UITableView_setEditing_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setEditing:animated:forced:", *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), 0);
}

- (void)_updateCell:(id)a3 withValue:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v13 = a3;
  v6 = a4;
  if (-[UITableView _dataSourceImplementsCanUpdateRowAtIndexPath](self, "_dataSourceImplementsCanUpdateRowAtIndexPath"))
  {
    -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v13, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "tableView:didUpdateTextFieldForRowAtIndexPath:withValue:", self, v7, v6);

      if (objc_msgSend(v13, "returnAction"))
      {
        objc_msgSend(v13, "_target");
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        if (v9)
        {
          v10 = (void *)UIApp;
          v11 = objc_msgSend(v13, "returnAction");
          objc_msgSend(v13, "_target");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "sendAction:toTarget:fromSender:forEvent:", v11, v12, v13, 0);

        }
      }
    }

  }
}

- (void)setShowsHorizontalScrollIndicator:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x2000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFDFFFFFFLL | v3;
  -[UITableView _updateShowScrollIndicatorsFlag](self, "_updateShowScrollIndicatorsFlag");
}

- (void)_scrollFirstResponderCellToVisible:(BOOL)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v4;
  _BOOL8 v5;
  NSMutableArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSMutableArray *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  p_tableFlags = &self->_tableFlags;
  v4 = *((_QWORD *)&self->_tableFlags + 3);
  if ((v4 & 0x100000000) != 0)
    goto LABEL_4;
  v5 = a3;
  if (-[UITableView _isUpdating](self, "_isUpdating"))
  {
    v4 = *((_QWORD *)p_tableFlags + 3);
LABEL_4:
    *((_QWORD *)p_tableFlags + 2) = *((_QWORD *)p_tableFlags + 2);
    *((_QWORD *)p_tableFlags + 3) = v4 | 0x200000000;
    return;
  }
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v7 = self->_visibleCells;
  v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v16;
LABEL_7:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v16 != v10)
        objc_enumerationMutation(v7);
      v12 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v11);
      if ((objc_msgSend(v12, "_isAncestorOfFirstResponder", (_QWORD)v15) & 1) != 0)
        break;
      if (v9 == ++v11)
      {
        v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v9)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    v13 = v12;

    if (!v13)
      return;
    -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v13, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      if (-[UITableView _indexPathIsValid:](self, "_indexPathIsValid:", v14))
        -[UITableView _scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:](self, "_scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:", v14, 0, v5, 1);
    }

  }
  else
  {
LABEL_13:
    v13 = v7;
  }

}

- (void)registerNib:(UINib *)nib forCellReuseIdentifier:(NSString *)identifier
{
  NSString *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  UINib *v11;

  v11 = nib;
  v7 = identifier;
  if (!-[NSString length](v7, "length"))
  {
    v8 = (void *)MEMORY[0x1E0C99DA0];
    v9 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "raise:format:", v9, CFSTR("must pass a valid reuse identifier to -[UITableView %@]"), v10);

  }
  -[UITableView _registerThing:asNib:forViewType:withReuseIdentifer:](self, "_registerThing:asNib:forViewType:withReuseIdentifer:", v11, 1, 1, v7);

}

- (void)registerNib:(UINib *)nib forHeaderFooterViewReuseIdentifier:(NSString *)identifier
{
  NSString *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  UINib *v11;

  v11 = nib;
  v7 = identifier;
  if (!-[NSString length](v7, "length"))
  {
    v8 = (void *)MEMORY[0x1E0C99DA0];
    v9 = *MEMORY[0x1E0C99778];
    NSStringFromSelector(a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "raise:format:", v9, CFSTR("must pass a valid reuse identifier to -[UITableView %@]"), v10);

  }
  -[UITableView _registerThing:asNib:forViewType:withReuseIdentifer:](self, "_registerThing:asNib:forViewType:withReuseIdentifer:", v11, 1, 2, v7);

}

- (void)_setExternalObjectTable:(id)a3 forNibLoadingOfCellWithReuseIdentifier:(id)a4
{
  id v6;
  NSMutableDictionary *nibExternalObjectsTables;
  NSMutableDictionary *v8;
  NSMutableDictionary *v9;
  id v10;

  v10 = a3;
  v6 = a4;
  nibExternalObjectsTables = self->_nibExternalObjectsTables;
  if (!nibExternalObjectsTables)
  {
    v8 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    v9 = self->_nibExternalObjectsTables;
    self->_nibExternalObjectsTables = v8;

    nibExternalObjectsTables = self->_nibExternalObjectsTables;
  }
  -[NSMutableDictionary setObject:forKey:](nibExternalObjectsTables, "setObject:forKey:", v10, v6);

}

- (void)_setExternalObjectTable:(id)a3 forNibLoadingOfHeaderFooterWithReuseIdentifier:(id)a4
{
  id v6;
  NSMutableDictionary *headerFooterNibExternalObjectsTables;
  NSMutableDictionary *v8;
  NSMutableDictionary *v9;
  id v10;

  v10 = a3;
  v6 = a4;
  headerFooterNibExternalObjectsTables = self->_headerFooterNibExternalObjectsTables;
  if (!headerFooterNibExternalObjectsTables)
  {
    v8 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    v9 = self->_headerFooterNibExternalObjectsTables;
    self->_headerFooterNibExternalObjectsTables = v8;

    headerFooterNibExternalObjectsTables = self->_headerFooterNibExternalObjectsTables;
  }
  -[NSMutableDictionary setObject:forKey:](headerFooterNibExternalObjectsTables, "setObject:forKey:", v10, v6);

}

- (double)_contentWidthForCell:(id)a3 forRowAtIndexPath:(id)a4
{
  id v6;
  id v7;
  double v8;
  double v9;

  v6 = a4;
  v7 = a3;
  -[UITableView _contentWidthForCell:forRowAtIndexPath:usingPresentationValues:](self, "_contentWidthForCell:forRowAtIndexPath:usingPresentationValues:", v7, v6, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
  v9 = v8;

  return v9;
}

- (double)_contentWidthForCell:(id)a3 forRowAtIndexPath:(id)a4 usingPresentationValues:(BOOL)a5
{
  id v8;
  id v9;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  double v18;
  double v19;

  v8 = a3;
  v9 = a4;
  if (!a5)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v9);
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }
  }
  objc_msgSend(v8, "_setTableView:", self);
  objc_msgSend(v8, "setTableViewStyle:", -[UITableView _tableStyle](self, "_tableStyle"));
  objc_msgSend(v8, "setAutoresizingMask:", 2);
  objc_msgSend(v8, "_setNeedsSetup:", 1);
  objc_msgSend(v8, "frame");
  v13 = v12;
  v15 = v14;
  -[UIView bounds](self, "bounds");
  objc_msgSend(v8, "setFrame:", v13, v15);
  objc_msgSend(v8, "setSeparatorStyle:", *((_WORD *)&self->_tableFlags + 7) & 7);
  if ((*((_BYTE *)&self->_tableFlags + 6) & 0x80) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setIndentationLevel:", objc_msgSend(v16, "tableView:indentationLevelForRowAtIndexPath:", self, v9));

  }
  -[UITableView _setupCell:forEditing:atIndexPath:animated:updateSeparators:](self, "_setupCell:forEditing:atIndexPath:animated:updateSeparators:", v8, -[UITableView isEditing](self, "isEditing"), v9, 0, 0);
  objc_msgSend(v8, "layoutManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "contentRectForCell:forState:", v8, objc_msgSend(v8, "currentStateMask"));
  v19 = v18;

  objc_msgSend(v8, "_setTableView:", 0);
  return v19;
}

- (void)setAllowsMultipleSelection:(BOOL)allowsMultipleSelection
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSMutableArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  p_tableFlags = &self->_tableFlags;
  if (((((*((_QWORD *)&self->_tableFlags + 2) & 0x1000) == 0) ^ allowsMultipleSelection) & 1) == 0)
  {
    v5 = *((_QWORD *)&self->_tableFlags + 3);
    v6 = 4096;
    if (!allowsMultipleSelection)
      v6 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFEFFFLL | v6;
    *((_QWORD *)&self->_tableFlags + 3) = v5;
    if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) == 0)
    {
      if (!allowsMultipleSelection)
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:](self, "_selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:", v7, 0, 0, 0);

      }
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v8 = self->_visibleCells;
      v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v14;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v14 != v11)
              objc_enumerationMutation(v8);
            objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "_setMultiselecting:", (*((_QWORD *)p_tableFlags + 2) >> 12) & 1, (_QWORD)v13);
          }
          v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        }
        while (v10);
      }

    }
    -[UITableView _updateMultiSelectControllerIfNeeded](self, "_updateMultiSelectControllerIfNeeded", (_QWORD)v13);
  }
}

- (void)_setSectionContentInsetFollowsLayoutMargins:(BOOL)a3
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)&self->_tableFlags + 3);
  if (((((v3 & 0x4000) == 0) ^ a3) & 1) == 0)
  {
    v4 = 0x4000;
    if (!a3)
      v4 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v3 & 0xFFFFFFFFFFFFBFFFLL | v4;
    -[UITableView _rebuildGeometryWithCompatibility](self, "_rebuildGeometryWithCompatibility");
  }
}

- (void)_setSectionHeaderFooterPadding:(double)a3
{
  if (self->_sectionHeaderFooterPadding != a3)
  {
    self->_sectionHeaderFooterPadding = a3;
    -[UITableView _setNeedsRebuildGeometry](self, "_setNeedsRebuildGeometry");
  }
}

- (double)_sectionHeaderFooterPadding
{
  return self->_sectionHeaderFooterPadding;
}

- (void)_setUseLegacySectionHeaderFooterPinningBehavior:(BOOL)a3
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)&self->_tableFlags + 3);
  if (((((v3 & 0x200000000000) == 0) ^ a3) & 1) == 0)
  {
    v4 = 0x200000000000;
    if (!a3)
      v4 = 0;
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v3 & 0xFFFFDFFFFFFFFFFFLL | v4;
    -[UITableView _setNeedsRebuildGeometry](self, "_setNeedsRebuildGeometry");
  }
}

- (BOOL)_useLegacySectionHeaderFooterPinningBehavior
{
  return (*((unsigned __int8 *)&self->_tableFlags + 29) >> 5) & 1;
}

uint64_t __53__UITableView__configureCellForDisplay_forIndexPath___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 40), "_setSeparatorBackdropOverlayBlendMode:", (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 3096) >> 50) & 7);
}

- (void)_updateDropStateForVisibleCellsForActiveDrop:(BOOL)a3 dropTargetIndexPath:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  NSMutableArray *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v4 = a3;
  v33 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (void *)-[NSMutableArray copy](self->_highlightedIndexPaths, "copy");
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v28 != v11)
          objc_enumerationMutation(v8);
        v13 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
        if (!self->_highlightedSpringLoadedIndexPath
          || (objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * i), "isEqual:") & 1) == 0)
        {
          -[UITableView unhighlightRowAtIndexPath:animated:](self, "unhighlightRowAtIndexPath:animated:", v13, 0);
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v10);
  }

  if (dyld_program_sdk_at_least())
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v14 = self->_visibleCells;
    v15 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v24;
      do
      {
        for (j = 0; j != v16; ++j)
        {
          if (*(_QWORD *)v24 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
          if (v4)
          {
            -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * j), 1);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v21 = v20;
            if (v6 && (objc_msgSend(v20, "isEqual:", v6) & 1) != 0)
              v22 = 2;
            else
              v22 = 1;
            objc_msgSend(v19, "_setDropState:", v22, (_QWORD)v23);

          }
          else
          {
            objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * j), "_setDropState:", 0, (_QWORD)v23);
          }
        }
        v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
      }
      while (v16);
    }

  }
  else if (v6 && v4)
  {
    -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:", v6, 0, 0, 1);
  }

}

- (void)_setPinsTableHeaderView:(BOOL)a3
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *((_QWORD *)&self->_tableFlags + 2);
  v4 = v3 & 0xFFFFFFFF7FFFFFFFLL;
  v5 = v3 & 0xFFFFFFFF0FFFFFFFLL | 0x80000000;
  if (!a3)
    v5 = v4;
  *((_QWORD *)&self->_tableFlags + 2) = v5;
  -[UITableView _updatePinnedTableHeader](self, "_updatePinnedTableHeader");
}

- (BOOL)_supplementarySectionHeadersHugContent
{
  return self->_contentHuggingElements & 1;
}

- (void)_setSupplementarySectionHeadersHugContent:(BOOL)a3
{
  self->_contentHuggingElements = self->_contentHuggingElements & 0xFFFFFFFFFFFFFFFELL | a3;
}

- (BOOL)_delegateImplementsEstimatedHeightForRowAtIndexPath
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 5) & 1;
}

- (BOOL)_delegateImplementsEstimatedHeightForSectionHeader
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 6) & 1;
}

- (BOOL)_delegateImplementsEstimatedHeightForSectionFooter
{
  return *((unsigned __int8 *)&self->_tableFlags + 4) >> 7;
}

- (void)_selectRowsAtIndexPaths:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 notifyDelegate:(BOOL)a6
{
  _BOOL8 v6;
  _BOOL8 v8;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v6 = a6;
  v8 = a4;
  v20 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v10);
        -[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:](self, "_selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v14++), v8, a5, v6);
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v12);
  }

}

- (void)_deselectRowsAtIndexPaths:(id)a3 animated:(BOOL)a4 notifyDelegate:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v5 = a5;
  v6 = a4;
  v18 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v14;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v14 != v11)
          objc_enumerationMutation(v8);
        -[UITableView _deselectRowAtIndexPath:animated:notifyDelegate:](self, "_deselectRowAtIndexPath:animated:notifyDelegate:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v12++), v6, v5);
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v10);
  }

}

- (void)_deselectRowsAtIndexPaths:(id)a3 animated:(BOOL)a4 transitionCoordinator:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  NSMutableArray *deselectionTransitionIndexPaths;
  NSMutableArray *v18;
  NSMutableArray *v19;
  _BOOL4 v20;
  _QWORD v21[5];
  _QWORD v22[5];
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v6 = a4;
  v29 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  if (objc_msgSend(v8, "count"))
  {
    v20 = v6;
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v8, "count"));
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v11 = v8;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v25 != v14)
            objc_enumerationMutation(v11);
          v16 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i);
          if (-[NSMutableArray containsObject:](self->_selectedIndexPaths, "containsObject:", v16))
            objc_msgSend(v10, "addObject:", v16);
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v13);
    }

    if (v9)
    {
      deselectionTransitionIndexPaths = self->_deselectionTransitionIndexPaths;
      if (deselectionTransitionIndexPaths)
      {
        -[NSMutableArray addObjectsFromArray:](deselectionTransitionIndexPaths, "addObjectsFromArray:", v10);
      }
      else
      {
        v18 = (NSMutableArray *)objc_msgSend(v10, "mutableCopy");
        v19 = self->_deselectionTransitionIndexPaths;
        self->_deselectionTransitionIndexPaths = v18;

      }
      v21[4] = self;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __72__UITableView__deselectRowsAtIndexPaths_animated_transitionCoordinator___block_invoke;
      v22[3] = &unk_1E16BF900;
      v22[4] = self;
      v23 = v20;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __72__UITableView__deselectRowsAtIndexPaths_animated_transitionCoordinator___block_invoke_2;
      v21[3] = &unk_1E16B2150;
      objc_msgSend(v9, "animateAlongsideTransition:completion:", v22, v21);
    }
    else
    {
      -[UITableView _deselectRowsAtIndexPaths:animated:notifyDelegate:](self, "_deselectRowsAtIndexPaths:animated:notifyDelegate:", v10, v20, 0);
    }

  }
}

void __72__UITableView__deselectRowsAtIndexPaths_animated_transitionCoordinator___block_invoke(uint64_t a1)
{
  id *v2;
  id v3;

  v2 = *(id **)(a1 + 32);
  v3 = (id)objc_msgSend(v2[292], "copy");
  objc_msgSend(v2, "_deselectRowsAtIndexPaths:animated:notifyDelegate:", v3, *(unsigned __int8 *)(a1 + 40), 0);

}

void __72__UITableView__deselectRowsAtIndexPaths_animated_transitionCoordinator___block_invoke_2(uint64_t a1, void *a2)
{
  id *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  if ((objc_msgSend(a2, "isCancelled") & 1) != 0)
  {
    v3 = *(id **)(a1 + 32);
    v4 = (void *)objc_msgSend(v3[292], "copy");
    objc_msgSend(v3, "_selectRowsAtIndexPaths:animated:scrollPosition:notifyDelegate:", v4, 0, 0, 0);

  }
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 2336);
  *(_QWORD *)(v5 + 2336) = 0;

}

- (void)_wheelChangedWithEvent:(id)a3
{
  id v4;
  double v5;
  double v6;
  objc_super v7;

  v4 = a3;
  objc_msgSend(v4, "_wheelVelocity");
  v6 = v5;
  if (-[UITableView _shouldShowIndexOverlays](self, "_shouldShowIndexOverlays")
    && -[UIView _isFocusedOrAncestorOfFocusedView](self, "_isFocusedOrAncestorOfFocusedView")
    && fabs(v6) >= 20.0
    && (*((_BYTE *)&self->_tableFlags + 23) & 1) == 0)
  {
    -[UITableView _recomputeSectionIndexTitleIndex](self, "_recomputeSectionIndexTitleIndex");
    -[UITableView _transitionIndexOverlayToVisible:shouldFadeBackToInvisible:](self, "_transitionIndexOverlayToVisible:shouldFadeBackToInvisible:", 1, 1);
    -[UITableView _startIndexOverlayIndicatorIgnoreTimer](self, "_startIndexOverlayIndicatorIgnoreTimer");
  }
  else
  {
    if ((*((_BYTE *)&self->_tableFlags + 23) & 1) != 0)
    {
      if (-[UITableView _shouldShowIndexOverlays](self, "_shouldShowIndexOverlays"))
        -[UITableView _prolongIndexOverlayTimer](self, "_prolongIndexOverlayTimer");
      else
        -[UITableView _hideIndexOverlay](self, "_hideIndexOverlay");
    }
    v7.receiver = self;
    v7.super_class = (Class)UITableView;
    -[UIResponder _wheelChangedWithEvent:](&v7, sel__wheelChangedWithEvent_, v4);
  }

}

- (void)_moveWithEvent:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v4 = a3;
  if (-[UITableView maximumGlobalRowIndex](self, "maximumGlobalRowIndex") >= 1
    && (v5 = *((_QWORD *)&self->_tableFlags + 2), (v5 & 0x100000000000000) != 0))
  {
    if ((v5 & 0x1000000000000000) == 0)
    {
      if (objc_msgSend(v4, "_moveDirection") == 1)
        v6 = 1;
      else
        v6 = -1;
      if (objc_msgSend(v4, "_focusHeading") == 32 || objc_msgSend(v4, "_focusHeading") == 16)
        *((_QWORD *)&self->_tableFlags + 3) |= 0x10000uLL;
      -[UITableView _shiftSectionIndexTitleIndexByAmount:](self, "_shiftSectionIndexTitleIndexByAmount:", v6);
    }
  }
  else
  {
    v7.receiver = self;
    v7.super_class = (Class)UITableView;
    -[UIResponder _moveWithEvent:](&v7, sel__moveWithEvent_, v4);
  }

}

- (void)_unhighlightAllRowsAndHighlightGlobalRow:(int64_t)a3
{
  void *v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:", v5, 0, 0, 1);

  -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[UITableView _highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:](self, "_highlightRowAtIndexPath:animated:scrollPosition:usingPresentationValues:", v6, 0, 0, 1);
  -[UITableView _updateFocusedItemToIndexPath:](self, "_updateFocusedItemToIndexPath:", v6);

}

- (void)_requestAppropriateFocusUpdate
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;

  p_tableFlags = &self->_tableFlags;
  if ((*((_BYTE *)&self->_tableFlags + 26) & 1) != 0)
  {
    -[UIView _setNeedsNonDeferredFocusUpdate](self, "_setNeedsNonDeferredFocusUpdate");
    *((_QWORD *)p_tableFlags + 3) &= ~0x10000uLL;
  }
  else
  {
    -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");
  }
}

- (void)_updateFocusedItemToIndexPath:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;

  v4 = a3;
  if (v4)
  {
    v19 = v4;
    -[UIView traitCollection](self, "traitCollection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "userInterfaceIdiom");

    v4 = v19;
    if (v6 == 3)
    {
      v7 = v19;
      if (objc_msgSend(v7, "row") == 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0, objc_msgSend(v7, "section"));
        v8 = objc_claimAutoreleasedReturnValue();

        v7 = (id)v8;
      }
      -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "isEqual:", v7);

      if (v10)
      {
        +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "scrollManager");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIScrollView _focusTuple](self, "_focusTuple");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _focusedCell](self, "_focusedCell");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIScrollView contentOffset](self, "contentOffset");
        objc_msgSend(v12, "contentOffsetForEnvironmentScrollableContainer:toShowFocusItem:targetOffset:", v13, v14);
        v16 = v15;
        v18 = v17;

        -[UIScrollView setContentOffset:animated:](self, "setContentOffset:animated:", 0, v16, v18);
      }
      else
      {
        -[UITableView _setIndexPathToFocus:](self, "_setIndexPathToFocus:", v7);
        -[UITableView _requestAppropriateFocusUpdate](self, "_requestAppropriateFocusUpdate");
      }

      v4 = v19;
    }
  }

}

- (id)_updateIndexOverlayToShowTitleAtIndex:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;

  -[UITableView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (a3 < 0 || objc_msgSend(v5, "count") <= (unint64_t)a3)
  {
    v7 = 0;
  }
  else
  {
    objc_msgSend(v6, "objectAtIndex:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UICollectionTableIndexOverlayIndicatorView setCurrentText:](self->_indexOverlayIndicatorView, "setCurrentText:", v7);
  }

  return v7;
}

- (void)_moveSectionIndexTitleIndexToIndex:(int64_t)a3 highlight:(BOOL)a4
{
  _BOOL4 v4;
  void *v7;
  int64_t v8;
  void *v9;
  int64_t v10;
  void *v11;

  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = a4;
    -[UITableView _updateIndexOverlayToShowTitleAtIndex:](self, "_updateIndexOverlayToShowTitleAtIndex:");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v11 = v7;
      v8 = -[UITableView _sectionIndexChangedToIndex:title:](self, "_sectionIndexChangedToIndex:title:", a3, v7);
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      self->_currentIndexTitleIndex = a3;
      if (v4)
      {
        v10 = -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:", v9);
        if (v10 != 0x7FFFFFFFFFFFFFFFLL)
          -[UITableView _unhighlightAllRowsAndHighlightGlobalRow:](self, "_unhighlightAllRowsAndHighlightGlobalRow:", v10);
      }

      v7 = v11;
    }

  }
}

- (void)_shiftSectionIndexTitleIndexByAmount:(int64_t)a3
{
  -[UITableView _moveSectionIndexTitleIndexToIndex:highlight:](self, "_moveSectionIndexTitleIndexToIndex:highlight:", -[UITableView _currentSectionIndexTitleIndex](self, "_currentSectionIndexTitleIndex") + a3, 1);
  -[UITableView _prolongIndexOverlayTimer](self, "_prolongIndexOverlayTimer");
}

- (BOOL)_shouldConsumePressEvent:(id)a3
{
  id v4;
  void *v5;
  UILongPressGestureRecognizer *upArrowLongPressGestureRecognizer;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;

  v4 = a3;
  -[UIView traitCollection](self, "traitCollection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "userInterfaceIdiom") != 3)
  {

    goto LABEL_6;
  }
  upArrowLongPressGestureRecognizer = self->_upArrowLongPressGestureRecognizer;

  if (!upArrowLongPressGestureRecognizer)
  {
LABEL_6:
    v11 = 0;
    goto LABEL_12;
  }
  if (_UIPressesContainsPressType(v4, 0))
  {
    -[UITableView _visibleCellsUsingPresentationValues:](self, "_visibleCellsUsingPresentationValues:", 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v8, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v7, "containsObject:", v9) ^ 1;

  }
  else
  {
    LOBYTE(v10) = 0;
  }
  if (_UIPressesContainsPressType(v4, 1))
  {
    -[UITableView _visibleCellsUsingPresentationValues:](self, "_visibleCellsUsingPresentationValues:", 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", -[UITableView _lastGlobalRowIndex](self, "_lastGlobalRowIndex"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v13, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v12, "containsObject:", v14) ^ 1;

  }
  else
  {
    LOBYTE(v15) = 0;
  }
  v11 = v10 | v15;
LABEL_12:

  return v11;
}

- (void)pressesBegan:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  objc_super v8;

  v6 = a3;
  v7 = a4;
  if (!-[UITableView _shouldConsumePressEvent:](self, "_shouldConsumePressEvent:", v6))
  {
    v8.receiver = self;
    v8.super_class = (Class)UITableView;
    -[UIScrollView pressesBegan:withEvent:](&v8, sel_pressesBegan_withEvent_, v6, v7);
  }

}

- (void)pressesChanged:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  objc_super v8;

  v6 = a3;
  v7 = a4;
  if (!-[UITableView _shouldConsumePressEvent:](self, "_shouldConsumePressEvent:", v6))
  {
    v8.receiver = self;
    v8.super_class = (Class)UITableView;
    -[UIScrollView pressesChanged:withEvent:](&v8, sel_pressesChanged_withEvent_, v6, v7);
  }

}

- (void)pressesEnded:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  objc_super v8;

  v6 = a3;
  v7 = a4;
  if (!-[UITableView _shouldConsumePressEvent:](self, "_shouldConsumePressEvent:", v6))
  {
    v8.receiver = self;
    v8.super_class = (Class)UITableView;
    -[UIScrollView pressesEnded:withEvent:](&v8, sel_pressesEnded_withEvent_, v6, v7);
  }

}

- (void)pressesCancelled:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  objc_super v8;

  v6 = a3;
  v7 = a4;
  if (!-[UITableView _shouldConsumePressEvent:](self, "_shouldConsumePressEvent:", v6))
  {
    v8.receiver = self;
    v8.super_class = (Class)UITableView;
    -[UIScrollView pressesCancelled:withEvent:](&v8, sel_pressesCancelled_withEvent_, v6, v7);
  }

}

- (BOOL)_selectionInteractionShouldBegin:(id)a3
{
  void *v4;
  void *v5;
  BOOL v6;

  _focusedCellForSelectionInteraction(self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v4, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[UITableView _allowsEffectiveSelectionOrCustomActionAtIndexPath:](self, "_allowsEffectiveSelectionOrCustomActionAtIndexPath:", v5))
    {
      v6 = -[UITableView _delegateAllowsHighlightingItemAtIndexPath:](self, "_delegateAllowsHighlightingItemAtIndexPath:", v5);
    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)_selectionInteractionDidBeginHinting:(id)a3
{
  void *v4;
  void *v5;

  _focusedCellForSelectionInteraction(self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    -[UITableView _highlightCell:animated:scrollPosition:highlight:](self, "_highlightCell:animated:scrollPosition:highlight:", v4, 0, 0, 1);
    v4 = v5;
  }

}

- (void)_selectionInteractionDidCancelHinting:(id)a3
{
  void *v4;
  void *v5;

  _focusedCellForSelectionInteraction(self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    -[UITableView _highlightCell:animated:scrollPosition:highlight:](self, "_highlightCell:animated:scrollPosition:highlight:", v4, 0, 0, 0);
    v4 = v5;
  }

}

- (void)_selectionInteractionDidSelect:(id)a3
{
  int64_t v4;
  void *v5;
  id v6;
  id v7;

  v4 = -[UITableView highlightedGlobalRow](self, "highlightedGlobalRow", a3);
  if (v4 < 0)
  {
    _focusedCellForSelectionInteraction(self);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v7 = v5;
      -[UITableView _userSelectCell:](self, "_userSelectCell:", v5);
      v5 = v7;
    }

  }
  else if ((*((_BYTE *)&self->_tableFlags + 23) & 1) != 0)
  {
    -[UITableView _transitionIndexOverlayToVisible:shouldFadeBackToInvisible:](self, "_transitionIndexOverlayToVisible:shouldFadeBackToInvisible:", 0, 1);
  }
  else
  {
    -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", v4);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    -[UITableView _userSelectRowAtPendingSelectionIndexPath:](self, "_userSelectRowAtPendingSelectionIndexPath:", v6);

  }
}

- (int64_t)highlightedGlobalRow
{
  void *v3;
  int64_t v4;

  if (!-[NSMutableArray count](self->_highlightedIndexPaths, "count"))
    return -1;
  -[NSMutableArray objectAtIndex:](self->_highlightedIndexPaths, "objectAtIndex:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:", v3);

  return v4;
}

- (CGRect)_boundsForIndexOverlay
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CGRect result;

  -[UIView window](self, "window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = v4;
  v12 = v6;
  v13 = v8;
  v14 = v10;
  result.size.height = v14;
  result.size.width = v13;
  result.origin.y = v12;
  result.origin.x = v11;
  return result;
}

- (BOOL)_shouldShowIndexOverlays
{
  void *v3;
  BOOL v4;
  uint64_t tableFlags;
  void *v6;
  BOOL v7;

  if (-[UITableView _dataSourceHasSectionIndexTitlesForTableView](self, "_dataSourceHasSectionIndexTitlesForTableView"))
  {
    -[UITableView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "count") == 0;

  }
  else
  {
    v4 = 1;
  }
  tableFlags = (uint64_t)self->_tableFlags;
  -[UIView traitCollection](self, "traitCollection");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  if (objc_msgSend(v6, "userInterfaceIdiom") == 3 && (tableFlags & 0x10200) != 0 && !v4)
  {
    if (-[UIView isUserInteractionEnabled](self, "isUserInteractionEnabled"))
      v7 = (uint64_t)-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData) >= self->_sectionIndexMinimumDisplayRowCount;
    else
      v7 = 0;
  }

  return v7;
}

- (int64_t)_currentSectionIndexTitleIndex
{
  unint64_t currentIndexTitleIndex;
  void *v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;

  currentIndexTitleIndex = self->_currentIndexTitleIndex;
  if (currentIndexTitleIndex != -1)
  {
    -[UITableView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "count");

    if (currentIndexTitleIndex < v5)
      return self->_currentIndexTitleIndex;
  }
  -[UITableView _visibleBounds](self, "_visibleBounds");
  v7 = -[UITableView _visibleGlobalRowsInRect:](self, "_visibleGlobalRowsInRect:");
  if (!v8)
    return 0x7FFFFFFFFFFFFFFFLL;
  -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "section");

  -[UITableView _dataSourceSectionIndexTitles](self, "_dataSourceSectionIndexTitles");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v11, "count"))
    goto LABEL_14;
  v6 = 0;
  while (1)
  {
    objc_msgSend(v11, "objectAtIndex:", v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v6;
    if ((*((_BYTE *)&self->_tableFlags + 1) & 2) != 0)
    {
      -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v14, "tableView:sectionForSectionIndexTitle:atIndex:", self, v12, v6);

    }
    if (v13 == v10)
      break;
    if (++v6 >= (unint64_t)objc_msgSend(v11, "count"))
      goto LABEL_14;
  }
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_14:
    if (objc_msgSend(v11, "count"))
      v6 = 0;
    else
      v6 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v6;
}

- (void)_recomputeSectionIndexTitleIndex
{
  int64_t v3;
  id v4;

  self->_currentIndexTitleIndex = -1;
  v3 = -[UITableView _currentSectionIndexTitleIndex](self, "_currentSectionIndexTitleIndex");
  self->_currentIndexTitleIndex = v3;
  v4 = -[UITableView _updateIndexOverlayToShowTitleAtIndex:](self, "_updateIndexOverlayToShowTitleAtIndex:", v3);
}

- (void)_configureIndexOverlayIndicatorViewIfNecessary
{
  _UICollectionTableIndexOverlayIndicatorView *indexOverlayIndicatorView;
  _UICollectionTableIndexOverlayIndicatorView *v4;
  _UICollectionTableIndexOverlayIndicatorView *v5;
  id v6;

  indexOverlayIndicatorView = self->_indexOverlayIndicatorView;
  if (!indexOverlayIndicatorView)
  {
    v4 = -[_UICollectionTableIndexOverlayIndicatorView initWithHost:]([_UICollectionTableIndexOverlayIndicatorView alloc], "initWithHost:", self);
    v5 = self->_indexOverlayIndicatorView;
    self->_indexOverlayIndicatorView = v4;

    indexOverlayIndicatorView = self->_indexOverlayIndicatorView;
  }
  -[UITableView _boundsForIndexOverlay](self, "_boundsForIndexOverlay");
  -[UIView setFrame:](indexOverlayIndicatorView, "setFrame:");
  -[UIView setAlpha:](self->_indexOverlayIndicatorView, "setAlpha:", 0.0);
  -[UIView setAutoresizingMask:](self->_indexOverlayIndicatorView, "setAutoresizingMask:", 18);
  -[UIView window](self, "window");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addSubview:", self->_indexOverlayIndicatorView);

}

- (void)_transitionIndexOverlayToVisible:(BOOL)a3 shouldFadeBackToInvisible:(BOOL)a4
{
  _BOOL4 v4;
  _BOOL4 v5;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  double v8;
  _QWORD v9[5];
  BOOL v10;
  _QWORD v11[5];
  BOOL v12;

  v4 = a4;
  v5 = a3;
  p_tableFlags = &self->_tableFlags;
  if (((((*((_BYTE *)&self->_tableFlags + 23) & 1) == 0) ^ a3) & 1) == 0)
  {
    v8 = 0.15;
    if (!a3)
      v8 = 0.25;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __74__UITableView__transitionIndexOverlayToVisible_shouldFadeBackToInvisible___block_invoke;
    v11[3] = &unk_1E16B1B78;
    v11[4] = self;
    v12 = a3;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __74__UITableView__transitionIndexOverlayToVisible_shouldFadeBackToInvisible___block_invoke_2;
    v9[3] = &unk_1E16B7F38;
    v10 = a3;
    v9[4] = self;
    +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 2, v11, v9, v8, 0.0);
    if (v5)
      *((_QWORD *)p_tableFlags + 2) |= 0x100000000000000uLL;
  }
  -[UITableView _stopIndexOverlayTimer](self, "_stopIndexOverlayTimer");
  if (v5 && v4)
    -[UITableView _startIndexOverlayTimerWithDelay:](self, "_startIndexOverlayTimerWithDelay:", 2.0);
}

uint64_t __74__UITableView__transitionIndexOverlayToVisible_shouldFadeBackToInvisible___block_invoke(uint64_t a1)
{
  double v1;

  v1 = 1.0;
  if (!*(_BYTE *)(a1 + 40))
    v1 = 0.0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2480), "setAlpha:", v1);
}

uint64_t __74__UITableView__transitionIndexOverlayToVisible_shouldFadeBackToInvisible___block_invoke_2(uint64_t result)
{
  if (!*(_BYTE *)(result + 40))
    *(_QWORD *)(*(_QWORD *)(result + 32) + 3096) &= ~0x100000000000000uLL;
  return result;
}

- (void)_hideIndexOverlay:(id)a3
{
  -[UITableView _stopIndexOverlayTimer](self, "_stopIndexOverlayTimer", a3);
  -[UITableView _transitionIndexOverlayToVisible:shouldFadeBackToInvisible:](self, "_transitionIndexOverlayToVisible:shouldFadeBackToInvisible:", 0, 1);
}

- (void)_hideIndexOverlay
{
  -[UITableView _hideIndexOverlay:](self, "_hideIndexOverlay:", 0);
}

- (void)_startIndexOverlayTimerWithDelay:(double)a3
{
  NSTimer *v4;
  NSTimer *indexOverlayTimer;

  objc_msgSend(MEMORY[0x1E0C99E88], "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", self, sel__hideIndexOverlay_, 0, 0, a3);
  v4 = (NSTimer *)objc_claimAutoreleasedReturnValue();
  indexOverlayTimer = self->_indexOverlayTimer;
  self->_indexOverlayTimer = v4;

}

- (void)_stopIndexOverlayTimer
{
  NSTimer *indexOverlayTimer;

  -[NSTimer invalidate](self->_indexOverlayTimer, "invalidate");
  indexOverlayTimer = self->_indexOverlayTimer;
  self->_indexOverlayTimer = 0;

}

- (void)_prolongIndexOverlayTimer
{
  if (self->_indexOverlayTimer)
  {
    -[UITableView _stopIndexOverlayTimer](self, "_stopIndexOverlayTimer");
    -[UITableView _startIndexOverlayTimerWithDelay:](self, "_startIndexOverlayTimerWithDelay:", 2.0);
  }
}

- (void)_startIndexOverlayIndicatorIgnoreTimer
{
  void *v3;
  NSTimer *v4;
  NSTimer *indexOverlayIndicatorEventIgnoreTimer;

  -[UITableView _stopIgnoringWheelEventsOnIndexOverlayIndicator:](self, "_stopIgnoringWheelEventsOnIndexOverlayIndicator:", 0);
  *((_QWORD *)&self->_tableFlags + 2) |= 0x1000000000000000uLL;
  v3 = (void *)MEMORY[0x1E0C99E88];
  -[UITableView _timeToIgnoreWheelEventsOnIndexOverlayIndicator](self, "_timeToIgnoreWheelEventsOnIndexOverlayIndicator");
  objc_msgSend(v3, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", self, sel__stopIgnoringWheelEventsOnIndexOverlayIndicator_, 0, 0);
  v4 = (NSTimer *)objc_claimAutoreleasedReturnValue();
  indexOverlayIndicatorEventIgnoreTimer = self->_indexOverlayIndicatorEventIgnoreTimer;
  self->_indexOverlayIndicatorEventIgnoreTimer = v4;

}

- (void)_stopIgnoringWheelEventsOnIndexOverlayIndicator:(id)a3
{
  NSTimer *indexOverlayIndicatorEventIgnoreTimer;

  *((_QWORD *)&self->_tableFlags + 2) &= ~0x1000000000000000uLL;
  -[NSTimer invalidate](self->_indexOverlayIndicatorEventIgnoreTimer, "invalidate", a3);
  indexOverlayIndicatorEventIgnoreTimer = self->_indexOverlayIndicatorEventIgnoreTimer;
  self->_indexOverlayIndicatorEventIgnoreTimer = 0;

}

- (BOOL)_shouldHaveIndexOverlaySelectionView
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  BOOL v7;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "userInterfaceIdiom") == 3)
  {
    -[UIView window](self, "window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_screen");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_capabilityForKey:", CFSTR("UIScreenCapabilityTouchLevelsKey"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "integerValue") != 2;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)_configureIndexOverlaySelectionViewIfNecessary
{
  _UICollectionTableIndexOverlaySelectionView *indexOverlaySelectionView;
  _UICollectionTableIndexOverlaySelectionView *v4;
  _UICollectionTableIndexOverlaySelectionView *v5;
  id v6;

  if (-[UITableView _shouldHaveIndexOverlaySelectionView](self, "_shouldHaveIndexOverlaySelectionView"))
  {
    indexOverlaySelectionView = self->_indexOverlaySelectionView;
    if (!indexOverlaySelectionView)
    {
      v4 = -[_UICollectionTableIndexOverlaySelectionView initWithHost:]([_UICollectionTableIndexOverlaySelectionView alloc], "initWithHost:", self);
      v5 = self->_indexOverlaySelectionView;
      self->_indexOverlaySelectionView = v4;

      indexOverlaySelectionView = self->_indexOverlaySelectionView;
    }
    -[UITableView _boundsForIndexOverlay](self, "_boundsForIndexOverlay");
    -[UIView setFrame:](indexOverlaySelectionView, "setFrame:");
    -[UIView setAutoresizingMask:](self->_indexOverlaySelectionView, "setAutoresizingMask:", 18);
    -[UIView setAlpha:](self->_indexOverlaySelectionView, "setAlpha:", 0.0);
    -[UIView window](self, "window");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addSubview:", self->_indexOverlaySelectionView);

  }
}

- (void)_transitionIndexOverlaySelectionViewToVisible:(BOOL)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  _BOOL4 v4;
  double v6;
  _UICollectionTableIndexOverlaySelectionView *indexOverlaySelectionView;
  _QWORD v8[5];
  BOOL v9;
  _QWORD v10[5];
  BOOL v11;

  p_tableFlags = &self->_tableFlags;
  if (((((*((_BYTE *)&self->_tableFlags + 23) & 2) == 0) ^ a3) & 1) == 0)
  {
    v4 = a3;
    v6 = 0.15;
    if (!a3)
      v6 = 0.25;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __61__UITableView__transitionIndexOverlaySelectionViewToVisible___block_invoke;
    v10[3] = &unk_1E16B1B78;
    v10[4] = self;
    v11 = a3;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __61__UITableView__transitionIndexOverlaySelectionViewToVisible___block_invoke_2;
    v8[3] = &unk_1E16B7F38;
    v9 = a3;
    v8[4] = self;
    +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 2, v10, v8, v6, 0.0);
    if (v4)
    {
      *((_QWORD *)p_tableFlags + 2) |= 0x200000000000000uLL;
      indexOverlaySelectionView = self->_indexOverlaySelectionView;
    }
    else
    {
      indexOverlaySelectionView = 0;
    }
    if (__UIAccessibilityBroadcastCallback)
      __UIAccessibilityBroadcastCallback(1000, indexOverlaySelectionView);
  }
}

uint64_t __61__UITableView__transitionIndexOverlaySelectionViewToVisible___block_invoke(uint64_t a1)
{
  double v1;

  v1 = 1.0;
  if (!*(_BYTE *)(a1 + 40))
    v1 = 0.0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2512), "setAlpha:", v1);
}

uint64_t __61__UITableView__transitionIndexOverlaySelectionViewToVisible___block_invoke_2(uint64_t result)
{
  if (!*(_BYTE *)(result + 40))
    *(_QWORD *)(*(_QWORD *)(result + 32) + 3096) &= ~0x200000000000000uLL;
  return result;
}

- (double)_externalIndexWidth
{
  return 32.0;
}

- (double)_timeToIgnoreWheelEventsOnIndexOverlayIndicator
{
  return 0.5;
}

- (void)_upArrowLongPress:(id)a3
{
  if (objc_msgSend(a3, "state") == 1)
    -[UITableView _longPressNudgeScrollToRow:position:](self, "_longPressNudgeScrollToRow:position:", 0, 1);
}

- (void)_downArrowLongPress:(id)a3
{
  if (objc_msgSend(a3, "state") == 1)
    -[UITableView _longPressNudgeScrollToRow:position:](self, "_longPressNudgeScrollToRow:position:", -[UITableView _lastGlobalRowIndex](self, "_lastGlobalRowIndex"), 3);
}

- (void)_longPressNudgeScrollToRow:(int64_t)a3 position:(int64_t)a4
{
  void *v7;
  void *v8;

  -[UITableView _focusedCell](self, "_focusedCell");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:](self, "_scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:", v8, a4, 0, 1);
    -[UITableView _setIndexPathToFocus:](self, "_setIndexPathToFocus:", v8);

  }
  -[UIView _setNeedsNonDeferredFocusUpdate](self, "_setNeedsNonDeferredFocusUpdate");
}

- (void)_upArrowTap:(id)a3
{
  BOOL v4;

  -[UITableView _updateVisibleCellsImmediatelyIfNecessary](self, "_updateVisibleCellsImmediatelyIfNecessary", a3);
  if (self->_visibleRows.location)
    v4 = 1;
  else
    v4 = self->_visibleRows.length == 0;
  if (v4)
    -[UITableView _handleNudgeInDirection:](self, "_handleNudgeInDirection:", 1);
}

- (void)_downArrowTap:(id)a3
{
  unint64_t v4;
  NSUInteger location;
  NSUInteger v6;
  BOOL v7;

  -[UITableView _updateVisibleCellsImmediatelyIfNecessary](self, "_updateVisibleCellsImmediatelyIfNecessary", a3);
  v4 = -[UITableView _lastGlobalRowIndex](self, "_lastGlobalRowIndex");
  location = self->_visibleRows.location;
  v7 = v4 >= location;
  v6 = v4 - location;
  v7 = !v7 || v6 >= self->_visibleRows.length;
  if (v7)
    -[UITableView _handleNudgeInDirection:](self, "_handleNudgeInDirection:", 2);
}

- (void)_handleNudgeInDirection:(int64_t)a3
{
  void *v5;

  -[UITableView _focusedCell](self, "_focusedCell");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    -[UITableView _nudgeScroll:](self, "_nudgeScroll:", a3);
  else
    -[UIView _setNeedsNonDeferredFocusUpdate](self, "_setNeedsNonDeferredFocusUpdate");
}

- (void)_nudgeScroll:(int64_t)a3
{
  void *v5;
  uint64_t v6;
  void *v7;
  int focusedViewType;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  id v29;

  -[UITableView _indexPathToFocus](self, "_indexPathToFocus");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    if (a3 == 2)
      v6 = 1;
    else
      v6 = -1;
    -[UITableView _focusedCell](self, "_focusedCell");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    focusedViewType = self->_focusedViewType;
    v29 = v7;
    objc_msgSend(v7, "frameOrigin");
    v10 = v9;
    v12 = v11;
    -[UIView bounds](self, "bounds");
    -[UITableView _nearestCellToPoint:expandingVisibleCells:](self, "_nearestCellToPoint:expandingVisibleCells:", 1, v10, v12 + v13 * (double)v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "frameOrigin");
    v16 = v15;
    objc_msgSend(v14, "frameOrigin");
    v18 = v17;
    -[UIScrollView contentOffset](self, "contentOffset");
    v20 = v18 - (v12 - v19);
    +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "scrollManager");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIScrollView _focusTuple](self, "_focusTuple");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "contentOffsetForEnvironmentScrollableContainer:toShowFocusItem:targetOffset:", v23, v14, v16, v20);
    v25 = v24;
    v27 = v26;

    -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v14, 1);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _setIndexPathToFocus:](self, "_setIndexPathToFocus:", v28);

    if (focusedViewType == 1)
      objc_msgSend(v29, "setHighlighted:animated:", 0, 1);
    -[UIScrollView setContentOffset:animated:](self, "setContentOffset:animated:", 1, v25, v27);

  }
}

- (void)_scrollViewAnimationEnded:(id)a3 finished:(BOOL)a4
{
  _BOOL4 v4;
  NSIndexPath *targetIndexPathForScrolling;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  objc_super v11;

  v4 = a4;
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  -[UIScrollView _scrollViewAnimationEnded:finished:](&v11, sel__scrollViewAnimationEnded_finished_, a3);
  targetIndexPathForScrolling = self->_targetIndexPathForScrolling;
  self->_targetIndexPathForScrolling = 0;

  if (v4)
  {
    -[UITableView _indexPathToFocus](self, "_indexPathToFocus");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      -[UIView _focusSystem](self, "_focusSystem");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "focusedItem");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      _UIFocusEnvironmentContainingView(v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v10, "isDescendantOfView:", self))
        -[UIView _setNeedsNonDeferredFocusUpdate](self, "_setNeedsNonDeferredFocusUpdate");

    }
  }
}

- (id)_contentFocusContainerGuide
{
  return self->_contentFocusContainerGuide;
}

- (BOOL)remembersLastFocusedIndexPath
{
  return (*((unsigned __int8 *)&self->_tableFlags + 25) >> 4) & 1;
}

- (void)_setDefaultGradientMaskInsets
{
  double v3;
  double v4;
  double v5;

  -[UITableConstants defaultMaskGradientHeightForTableView:](self->_constants, "defaultMaskGradientHeightForTableView:", self);
  v4 = v3;
  -[UITableConstants defaultFocusedShadowRadiusForTableView:](self->_constants, "defaultFocusedShadowRadiusForTableView:", self);
  -[UIScrollView _setGradientMaskLengths:](self, "_setGradientMaskLengths:", v4, -(v5 * 3.0 + 30.0), v4, -(v5 * 3.0 + 30.0));
}

- (BOOL)canBecomeFocused
{
  void *v3;
  UITableViewRowData *rowData;
  uint64_t v5;
  void *v6;
  void *v7;
  _BOOL4 v8;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "userInterfaceIdiom") != 3
    && -[UITableView remembersLastFocusedIndexPath](self, "remembersLastFocusedIndexPath")
    && (rowData = self->_rowData) != 0
    && rowData->_numSections >= 1)
  {
    v5 = (uint64_t)-[UITableViewRowData numberOfRows]((uint64_t)rowData);

    if (v5 < 1)
    {
      LOBYTE(v8) = 0;
      return v8;
    }
    -[UIView _focusSystem](self, "_focusSystem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "focusedItem");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v3;
    else
      v7 = 0;
    v8 = !-[UIView containsView:](self, "containsView:", v7);
  }
  else
  {
    LOBYTE(v8) = 0;
  }

  return v8;
}

- (id)keyCommands
{
  return -[_UITableViewMultiSelectController keyCommandsForSelectionExtension](self->_multiSelectController, "keyCommandsForSelectionExtension");
}

- (id)targetForAction:(SEL)a3 withSender:(id)a4
{
  id v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  objc_super v12;

  v6 = a4;
  -[_UITableViewMultiSelectController targetForKeyCommands](self->_multiSelectController, "targetForKeyCommands");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_opt_respondsToSelector();

  if ((v8 & 1) != 0)
  {
    -[_UITableViewMultiSelectController targetForKeyCommands](self->_multiSelectController, "targetForKeyCommands");
    v9 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12.receiver = self;
    v12.super_class = (Class)UITableView;
    -[UIResponder targetForAction:withSender:](&v12, sel_targetForAction_withSender_, a3, v6);
    v9 = objc_claimAutoreleasedReturnValue();
  }
  v10 = (void *)v9;

  return v10;
}

- (BOOL)_canFocusCell:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  _BOOL4 v7;
  id WeakRetained;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  void *v14;
  char v15;

  v4 = a3;
  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v4, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5
    && objc_msgSend(v5, "length") == 2
    && objc_msgSend(v6, "row") != 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend(v6, "section") != 0x7FFFFFFFFFFFFFFFLL
    && (*((_BYTE *)&self->_tableFlags + 29) & 0x80) == 0)
  {
    v7 = -[UITableView _allowsEffectiveFocus](self, "_allowsEffectiveFocus");
    WeakRetained = objc_loadWeakRetained(&self->super._delegate);
    if (!WeakRetained)
      goto LABEL_9;
    v9 = *((_QWORD *)&self->_tableFlags + 1);
    if ((v9 & 0x8000000) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "_tableView:canFocusRowAtIndexPath:", self, v6);
    }
    else
    {
      if ((v9 & 0x10000000) == 0)
      {
LABEL_9:
        if (v7)
        {
          -[UIView _focusBehavior](self, "_focusBehavior");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "cellFocusability");

          v12 = v11 != 1
             || -[UITableView _inferFocusabilityForCell:atIndexPath:](self, "_inferFocusabilityForCell:atIndexPath:", v4, v6);
        }
        else
        {
          v12 = 0;
        }
        goto LABEL_19;
      }
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "tableView:canFocusRowAtIndexPath:", self, v6);
    }
    v12 = v15;

LABEL_19:
    goto LABEL_13;
  }
  v12 = 0;
LABEL_13:

  return v12;
}

- (void)_cellDidBecomeFocused:(id)a3
{
  id WeakRetained;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  if (WeakRetained)
  {
    v5 = *((_QWORD *)&self->_tableFlags + 1);

    if ((v5 & 0x20000000) != 0)
    {
      -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v8, 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "tableView:didFocusRowAtIndexPath:", self, v6);

    }
  }

}

- (void)_cellDidBecomeUnfocused:(id)a3
{
  id WeakRetained;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  if (WeakRetained)
  {
    v5 = *((_QWORD *)&self->_tableFlags + 1);

    if ((v5 & 0x40000000) != 0)
    {
      -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v8, 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "tableView:didUnfocusRowAtIndexPath:", self, v6);

    }
  }

}

- (int64_t)_cellFocusItemDeferral:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  int64_t v9;

  v4 = a3;
  if (!-[UITableView _shouldBecomeFocusedOnSelection](self, "_shouldBecomeFocusedOnSelection"))
    goto LABEL_6;
  if (!-[UITableView selectionFollowsFocus](self, "selectionFollowsFocus"))
    goto LABEL_6;
  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v4, 1);
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v5)
    goto LABEL_6;
  v6 = (void *)v5;
  -[UITableView indexPathsForSelectedRows](self, "indexPathsForSelectedRows");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "containsObject:", v6);

  if ((v8 & 1) != 0)
    v9 = 2;
  else
LABEL_6:
    v9 = 0;

  return v9;
}

- (BOOL)_shouldUpdateFocusInContext:(id)a3
{
  id v4;
  unsigned __int8 v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  objc_super v14;

  v4 = a3;
  v14.receiver = self;
  v14.super_class = (Class)UITableView;
  v5 = -[UIScrollView _shouldUpdateFocusInContext:](&v14, sel__shouldUpdateFocusInContext_, v4);
  WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  -[UITableView _reorderingIndexPath](self, "_reorderingIndexPath");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v5 = 0;
  }
  else if (WeakRetained)
  {
    v8 = *((_QWORD *)&self->_tableFlags + 1);
    if ((v8 & 0x400000000) != 0)
    {
      +[UITableViewFocusUpdateContext _contextWithContext:tableView:](UITableViewFocusUpdateContext, "_contextWithContext:tableView:", v4, self);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v10, "tableView:shouldUpdateFocusInContext:", self, v9);
    }
    else
    {
      if ((v8 & 0x100000000) == 0)
        goto LABEL_9;
      +[UITableViewFocusUpdateContext _contextWithContext:tableView:](UITableViewFocusUpdateContext, "_contextWithContext:tableView:", v4, self);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "previouslyFocusedIndexPath");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "nextFocusedView");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v10, "tableView:shouldUpdateFocusFromRowAtIndexPath:toView:heading:", self, v11, v12, objc_msgSend(v9, "focusHeading"));

    }
  }
LABEL_9:

  return v5;
}

- (id)_managedSubviewForView:(id)a3 viewType:(int *)a4 indexPath:(id *)a5
{
  UITableView *v8;
  UITableView *v9;
  UIView *v10;
  UITableView *v11;
  UITableView *v12;
  UITableViewWrapperView *v13;
  UITableViewWrapperView *wrapperView;
  UIView *v15;
  int v16;
  void *v17;
  UIView *v18;

  v8 = (UITableView *)a3;
  v9 = v8;
  if (self == v8 || !-[UIView isDescendantOfView:](v8, "isDescendantOfView:", self))
  {
    v10 = 0;
  }
  else
  {
    v10 = v9;
    if (v10)
    {
      while (1)
      {
        -[UIView superview](v10, "superview");
        v11 = (UITableView *)objc_claimAutoreleasedReturnValue();
        if (v11 == self)
          break;
        v12 = v11;
        -[UIView superview](v10, "superview");
        v13 = (UITableViewWrapperView *)objc_claimAutoreleasedReturnValue();
        wrapperView = self->_wrapperView;

        if (v13 == wrapperView)
          goto LABEL_16;
        -[UIView superview](v10, "superview");
        v15 = (UIView *)objc_claimAutoreleasedReturnValue();

        v10 = v15;
        if (!v15)
          goto LABEL_10;
      }

LABEL_16:
      if (v10 == self->_tableHeaderView)
      {
        v17 = 0;
        v16 = 4;
        goto LABEL_28;
      }
      if (v10 == self->_tableFooterView)
      {
        v17 = 0;
        v16 = 5;
        goto LABEL_28;
      }
      if ((*((_BYTE *)&self->_tableFlags + 28) & 1) == 0)
        -[UITableView _updateVisibleCellsImmediatelyIfNecessary](self, "_updateVisibleCellsImmediatelyIfNecessary");
      if (-[UITableView _visibleHeaderViewsContainsView:](self, "_visibleHeaderViewsContainsView:", v10))
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[UITableView _sectionForHeaderView:](self, "_sectionForHeaderView:", v10));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 2;
        goto LABEL_28;
      }
      if (-[UITableView _visibleFooterViewsContainsView:](self, "_visibleFooterViewsContainsView:", v10))
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[UITableView _sectionForFooterView:](self, "_sectionForFooterView:", v10));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 3;
        goto LABEL_28;
      }
      if (_IsKindOfUITableViewCell(v10))
      {
        v16 = 1;
        -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v10, 1);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_28:
        v15 = v10;
        if (!a4)
          goto LABEL_12;
LABEL_11:
        *a4 = v16;
        goto LABEL_12;
      }
    }
  }
  v15 = 0;
LABEL_10:
  v16 = 0;
  v17 = 0;
  if (a4)
    goto LABEL_11;
LABEL_12:
  if (a5)
    *a5 = (id)objc_msgSend(v17, "copy");
  v18 = v15;

  return v18;
}

- (BOOL)_shouldSelectionFollowFocusForIndexPath:(id)a3 initiatedBySelection:(BOOL)a4
{
  _BOOL4 v4;
  id v7;
  char v8;
  uint64_t v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;

  v4 = a4;
  v7 = a3;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 13381, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("indexPath != nil"));

  }
  if (_AXSFullKeyboardAccessEnabled())
    goto LABEL_4;
  if (dyld_program_sdk_at_least())
  {
    if (v4)
    {
      if (-[_UITableViewMultiSelectController isInMultiselectInteraction](self->_multiSelectController, "isInMultiselectInteraction"))
      {
        -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
        v10 = objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)v10;
          -[UITableView indexPathsForSelectedRows](self, "indexPathsForSelectedRows");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "containsObject:", v11);

          if ((v13 & 1) != 0)
            goto LABEL_4;
        }
      }
    }
  }
  if (v4)
  {
    v8 = -[UITableView selectionFollowsFocus](self, "selectionFollowsFocus");
    goto LABEL_5;
  }
  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v7, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14 && objc_msgSend(v14, "_hasCustomSelectionAction"))
  {

LABEL_4:
    v8 = 0;
    goto LABEL_5;
  }

  v16 = -[UITableView selectionFollowsFocus](self, "selectionFollowsFocus");
  v8 = v16;
  if (v7 && v16)
  {
    if ((*((_BYTE *)&self->_tableFlags + 13) & 8) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v17, "tableView:selectionFollowsFocusForRowAtIndexPath:", self, v7);

    }
    else
    {
      v8 = 1;
    }
  }
LABEL_5:

  return v8;
}

- (void)_willUpdateFocusInContext:(id)a3
{
  void *v4;
  UITableView *v5;
  BOOL v6;

  objc_msgSend(a3, "nextFocusedItem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _UIFocusEnvironmentFirstCommonAncestor(v4, self);
  v5 = (UITableView *)objc_claimAutoreleasedReturnValue();
  v6 = v5 == self;

  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)v6 << 22);
  -[UITableView _updateSelectionIsKey](self, "_updateSelectionIsKey");
}

- (void)_didUpdateFocusInContext:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int *p_focusedViewType;
  uint64_t focusedViewType;
  void *v10;
  void *v11;
  UITableView *v12;
  UITableView *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  BOOL v30;
  void *v31;
  void *v32;
  char v33;
  void *v34;
  _BOOL4 v35;
  void *v36;
  _BOOL8 v37;
  void *v38;
  uint64_t v39;
  id v41;
  id v42;
  id v43;
  unsigned int v44;
  objc_super v45;

  v4 = a3;
  v45.receiver = self;
  v45.super_class = (Class)UITableView;
  -[UIScrollView _didUpdateFocusInContext:](&v45, sel__didUpdateFocusInContext_, v4);
  -[UITableView _focusedCell](self, "_focusedCell");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  p_focusedViewType = &self->_focusedViewType;
  focusedViewType = self->_focusedViewType;
  v44 = 0;
  objc_msgSend(v4, "previouslyFocusedView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0;
  -[UITableView _managedSubviewForView:viewType:indexPath:](self, "_managedSubviewForView:viewType:indexPath:", v10, &v44, &v43);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = v43;

  if (v5 && (_DWORD)focusedViewType == 1)
    -[UITableView _highlightCell:animated:scrollPosition:highlight:](self, "_highlightCell:animated:scrollPosition:highlight:", v5, 0, 0, 0);
  objc_msgSend(v4, "nextFocusedView");
  v12 = (UITableView *)objc_claimAutoreleasedReturnValue();
  if (v12 == self)
  {

  }
  else
  {
    v13 = v12;
    objc_msgSend(v4, "nextFocusedView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "isDescendantOfView:", self);

    if (v15)
    {
      objc_msgSend(v4, "nextFocusedView");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 0;
      -[UITableView _managedSubviewForView:viewType:indexPath:](self, "_managedSubviewForView:viewType:indexPath:", v16, &self->_focusedViewType, &v42);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v42;
      -[UITableView _setFocusedCell:](self, "_setFocusedCell:", v17);

      if (!*p_focusedViewType)
        -[UITableView _setFocusedCellIndexPath:](self, "_setFocusedCellIndexPath:", 0);
      if (v18)
        -[UITableView _setFocusedCellIndexPath:](self, "_setFocusedCellIndexPath:", v18);

      goto LABEL_15;
    }
  }
  -[UITableView _setFocusedCell:](self, "_setFocusedCell:", 0);
  if (!-[UITableView remembersLastFocusedIndexPath](self, "remembersLastFocusedIndexPath"))
  {
    *p_focusedViewType = 0;
    -[UITableView _setFocusedCellIndexPath:](self, "_setFocusedCellIndexPath:", 0);
  }
  -[UITableView _hideIndexOverlay](self, "_hideIndexOverlay");
LABEL_15:
  -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UISelectionInteraction setEnabled:](self->_selectionInteraction, "setEnabled:", v19 != 0);

  -[UITableView _reusePreviouslyFocusedTableViewSubviewIfNeeded:viewType:indexPath:](self, "_reusePreviouslyFocusedTableViewSubviewIfNeeded:viewType:indexPath:", v5, focusedViewType, v7);
  if (v11 && v11 != v5)
    -[UITableView _reusePreviouslyFocusedTableViewSubviewIfNeeded:viewType:indexPath:](self, "_reusePreviouslyFocusedTableViewSubviewIfNeeded:viewType:indexPath:", v11, v44, v41);
  if ((*((_BYTE *)&self->_tableFlags + 12) & 8) != 0)
  {
    +[_UIFocusAnimationCoordinatorManager animationCoordinatorForContext:](_UIFocusAnimationCoordinatorManager, "animationCoordinatorForContext:", v4);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v20)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 13516, CFSTR("Received call to _didUpdateFocusInContext: outside of a focus update."));

    }
    +[UITableViewFocusUpdateContext _contextWithContext:tableView:](UITableViewFocusUpdateContext, "_contextWithContext:tableView:", v4, self);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "tableView:didUpdateFocusInContext:withAnimationCoordinator:", self, v21, v20);

  }
  if (*p_focusedViewType == 1)
  {
    -[UITableView _focusedCell](self, "_focusedCell");
    v23 = objc_claimAutoreleasedReturnValue();
    if (v23)
    {
      v24 = (void *)v23;
      -[UITableView _focusedCell](self, "_focusedCell");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "nextFocusedItem");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      if (v25 != v26)
      {

LABEL_26:
        goto LABEL_27;
      }
      -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (v27)
      {
        if (dyld_program_sdk_at_least())
        {
          if ((*((_BYTE *)&self->_tableFlags + 30) & 1) == 0)
          {
            objc_msgSend(v4, "_focusMovement");
            v28 = objc_claimAutoreleasedReturnValue();
            if (v28)
            {
              v29 = (void *)v28;
              v30 = -[UITableView _delegateSupportsPrimaryAction](self, "_delegateSupportsPrimaryAction");

              if (v30)
                goto LABEL_34;
            }
          }
        }
        -[UITableView indexPathsForSelectedRows](self, "indexPathsForSelectedRows");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v31, "containsObject:", v32);

        if ((v33 & 1) == 0)
        {
LABEL_34:
          -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = -[UITableView _shouldSelectionFollowFocusForIndexPath:initiatedBySelection:](self, "_shouldSelectionFollowFocusForIndexPath:initiatedBySelection:", v34, 0);

          if (v35)
          {
            -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            v37 = -[UITableView _isRowMultiSelect:](self, "_isRowMultiSelect:", v36);

            -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            LOBYTE(v39) = 0;
            -[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:isCellMultiSelect:deselectPrevious:performCustomSelectionAction:](self, "_selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:isCellMultiSelect:deselectPrevious:performCustomSelectionAction:", v24, 0, 0, 1, v37, 1, v39);
            goto LABEL_26;
          }
        }
      }
    }
  }
LABEL_27:

}

- (id)_systemDefaultFocusGroupIdentifier
{
  void *v3;
  char v4;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  objc_super v10;
  objc_super v11;

  -[UIView _focusBehavior](self, "_focusBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "focusGroupContainmentBehavior");

  if ((v4 & 0x40) != 0)
  {
    _UIFocusGroupIdentifierOfAssociatedSearchTextFieldForView(self);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      v8 = v6;
    }
    else
    {
      v11.receiver = self;
      v11.super_class = (Class)UITableView;
      -[UIView _systemDefaultFocusGroupIdentifier](&v11, sel__systemDefaultFocusGroupIdentifier);
      v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    v9 = v8;

    return v9;
  }
  else
  {
    v10.receiver = self;
    v10.super_class = (Class)UITableView;
    -[UIView _systemDefaultFocusGroupIdentifier](&v10, sel__systemDefaultFocusGroupIdentifier);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

- (void)_reusePreviouslyFocusedTableViewSubviewIfNeeded:(id)a3 viewType:(int)a4 indexPath:(id)a5
{
  uint64_t v6;
  id v8;
  id v9;
  char v10;
  id v11;

  v6 = *(_QWORD *)&a4;
  v11 = a3;
  v8 = a5;
  if (v11)
  {
    -[UITableView _focusedCell](self, "_focusedCell");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (v9 == v11)
    {

    }
    else
    {
      v10 = objc_msgSend(v11, "_isHiddenForReuse");

      if ((v10 & 1) == 0
        && -[UITableView _shouldReusePreviouslyFocusedTableViewSubview:viewType:](self, "_shouldReusePreviouslyFocusedTableViewSubview:viewType:", v11, v6))
      {
        if ((_DWORD)v6 == 1)
          -[UITableView _reuseTableViewCell:withIndexPath:didEndDisplaying:](self, "_reuseTableViewCell:withIndexPath:didEndDisplaying:", v11, v8, v8 != 0);
        else
          -[UITableView _reuseHeaderFooterView:isHeader:forSection:](self, "_reuseHeaderFooterView:isHeader:forSection:", v11, (_DWORD)v6 == 2, 0x7FFFFFFFFFFFFFFFLL);
      }
    }
  }

}

- (BOOL)_shouldReusePreviouslyFocusedTableViewSubview:(id)a3 viewType:(int)a4
{
  id v6;
  char v7;
  char v8;

  v6 = a3;
  switch(a4)
  {
    case 3:
      v7 = -[UITableView _visibleFooterViewsContainsView:](self, "_visibleFooterViewsContainsView:", v6);
      break;
    case 2:
      v7 = -[UITableView _visibleHeaderViewsContainsView:](self, "_visibleHeaderViewsContainsView:", v6);
      break;
    case 1:
      v7 = -[NSMutableArray containsObject:](self->_visibleCells, "containsObject:", v6);
      break;
    default:
      v8 = 0;
      goto LABEL_9;
  }
  v8 = v7 ^ 1;
LABEL_9:

  return v8;
}

- (id)preferredFocusedView
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int focusedViewType;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  char v22;
  UIView *focusedCell;
  UIView *v24;
  id v25;
  uint64_t v27;
  objc_super v28;
  objc_super v29;

  if (*((_QWORD *)&self->_tableFlags + 2) & 0x100 | *((_QWORD *)&self->_tableFlags + 3) & 0x100000000
    || (*((_BYTE *)&self->_tableFlags + 15) & 2) != 0
    || !-[NSMutableArray count](self->_visibleCells, "count"))
  {
    goto LABEL_41;
  }
  -[UITableView indexPathsForSelectedRows](self, "indexPathsForSelectedRows");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if (!v4)
    goto LABEL_6;
  -[UITableView indexPathsForSelectedRows](self, "indexPathsForSelectedRows");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[UITableView indexPathsForSelectedRows](self, "indexPathsForSelectedRows");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "firstObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView cellForRowAtIndexPath:](self, "cellForRowAtIndexPath:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
LABEL_6:
    -[UITableView _indexPathToFocus](self, "_indexPathToFocus");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      -[UITableView _indexPathToFocus](self, "_indexPathToFocus");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView _setIndexPathToFocus:](self, "_setIndexPathToFocus:", 0);
      focusedViewType = 1;
      goto LABEL_8;
    }
    if (dyld_program_sdk_at_least())
    {
      if (-[UITableView remembersLastFocusedIndexPath](self, "remembersLastFocusedIndexPath"))
      {
        -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        focusedViewType = self->_focusedViewType;
      }
      else
      {
        focusedViewType = 0;
        v11 = 0;
      }
      -[UITableView indexPathsForSelectedRows](self, "indexPathsForSelectedRows");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "firstObject");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13)
      {
        if (!v11
          || -[UITableView _shouldSelectionFollowFocusForIndexPath:initiatedBySelection:](self, "_shouldSelectionFollowFocusForIndexPath:initiatedBySelection:", v13, 1))
        {
          goto LABEL_21;
        }
      }
      else if (v11)
      {
        v13 = 0;
      }
      else
      {
        -[UITableView _delegatePreferredIndexPath](self, "_delegatePreferredIndexPath");
        v27 = objc_claimAutoreleasedReturnValue();
        if (v27)
        {
          v11 = (void *)v27;
          v15 = 0;
LABEL_22:

          if (objc_msgSend(v11, "row") != 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_27;
          goto LABEL_23;
        }
        -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 0;
        focusedViewType = self->_focusedViewType;
      }
    }
    else
    {
      -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      focusedViewType = self->_focusedViewType;
      -[UITableView _delegatePreferredIndexPath](self, "_delegatePreferredIndexPath");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
      {
LABEL_21:
        v15 = v13;

        v11 = v15;
        goto LABEL_22;
      }
    }

    if (focusedViewType > 1)
    {
LABEL_40:

LABEL_41:
      v28.receiver = self;
      v28.super_class = (Class)UITableView;
      -[UIView preferredFocusedView](&v28, sel_preferredFocusedView);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      return v9;
    }
LABEL_8:
    if (v11 && objc_msgSend(v11, "row") != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (!focusedViewType)
        goto LABEL_40;
LABEL_27:
      -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v11, 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v21;
      if (v21)
      {
        v22 = objc_msgSend(v21, "_isHiddenForReuse");
        if (!v11 || (v22 & 1) == 0)
          goto LABEL_36;
      }
      else if (!v11)
      {
LABEL_35:
        v29.receiver = self;
        v29.super_class = (Class)UITableView;
        -[UIView preferredFocusedView](&v29, sel_preferredFocusedView);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_36:

        return v9;
      }
      focusedCell = self->_focusedCell;
      if (focusedCell)
      {
        v24 = focusedCell;
        -[UITableView _setFocusedCell:](self, "_setFocusedCell:", 0);
        -[UITableView _reusePreviouslyFocusedTableViewSubviewIfNeeded:viewType:indexPath:](self, "_reusePreviouslyFocusedTableViewSubviewIfNeeded:viewType:indexPath:", v24, self->_focusedViewType, self->_focusedCellIndexPath);

      }
      v25 = -[UITableView _createPreparedCellForRowAtIndexPath:willDisplay:](self, "_createPreparedCellForRowAtIndexPath:willDisplay:", v11, 1);

      -[UITableView _setFocusedCell:](self, "_setFocusedCell:", v25);
      -[UITableView _setFocusedCellIndexPath:](self, "_setFocusedCellIndexPath:", v11);
      self->_focusedViewType = 1;
      v9 = v25;
      if (v25)
        goto LABEL_36;
      goto LABEL_35;
    }
LABEL_23:
    -[UITableView _indexPathsForVisibleRowsUsingPresentationValues:](self, "_indexPathsForVisibleRowsUsingPresentationValues:", 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "firstObject");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v17)
    {
      v19 = v17;
    }
    else
    {
      -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", 0);
      v19 = (id)objc_claimAutoreleasedReturnValue();
    }
    v20 = v19;

    v11 = v20;
    goto LABEL_27;
  }
  return v9;
}

- (id)_delegatePreferredIndexPath
{
  id WeakRetained;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;

  WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  if (!WeakRetained)
    goto LABEL_4;
  v5 = *((_QWORD *)&self->_tableFlags + 1);
  if ((v5 & 0x200000000) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "indexPathForPreferredFocusedViewInTableView:", self);
    v8 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if ((v5 & 0x80000000) == 0)
    {
LABEL_4:
      v6 = 0;
      goto LABEL_10;
    }
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "indexPathForPreferredFocusedItemForTableView:", self);
    v8 = objc_claimAutoreleasedReturnValue();
  }
  v6 = (void *)v8;

  if (v6 && !-[UITableView _indexPathIsValid:](self, "_indexPathIsValid:", v6))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 13704, CFSTR("no cell for index path (%@) - the table view's delegate must return an index path for a valid UITableViewCell from -indexPathForPreferredFocusedViewInTableView:"), v6);

  }
LABEL_10:

  return v6;
}

- (id)focusItemsInRect:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  void *v8;
  void *v9;
  void *v10;
  objc_super v12;
  objc_super v13;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  if (_UIViewShouldReturnSubviewsInFocusItemsInRect())
  {
    v13.receiver = self;
    v13.super_class = (Class)UITableView;
    -[UIView focusItemsInRect:](&v13, sel_focusItemsInRect_, x, y, width, height);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _focusPromiseRegionsInRect:](self, "_focusPromiseRegionsInRect:", x, y, width, height);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "arrayByAddingObjectsFromArray:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v12.receiver = self;
    v12.super_class = (Class)UITableView;
    -[UIView focusItemsInRect:](&v12, sel_focusItemsInRect_, x, y, width, height);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v10;
}

- (id)_focusPromiseRegionsInRect:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  _UITableViewCellPromiseRegion *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _indexPathsForRowsInRect:usingPresentationValues:](self, "_indexPathsForRowsInRect:usingPresentationValues:", 1, x, y, width, height);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i);
        -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v14, 1);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15;
        if (!v15 || objc_msgSend(v15, "_isHiddenForReuse"))
        {
          v17 = objc_alloc_init(_UITableViewCellPromiseRegion);
          -[_UITableViewCellPromiseRegion setTableView:](v17, "setTableView:", self);
          -[_UITableViewCellPromiseRegion setIndexPath:](v17, "setIndexPath:", v14);
          objc_msgSend(v8, "addObject:", v17);

        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v11);
  }

  return v8;
}

- (id)_childFocusRegionsInRect:(CGRect)a3 inCoordinateSpace:(id)a4
{
  double height;
  double width;
  double y;
  double x;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  void *v21;
  UIView *tableHeaderView;
  UIView *tableFooterView;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, void *);
  void *v32;
  UITableView *v33;
  id v34;
  objc_super v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v9 = a4;
  if (_UIViewShouldReturnSubviewsInFocusItemsInRect())
  {
    v35.receiver = self;
    v35.super_class = (Class)UITableView;
    -[UIView _childFocusRegionsInRect:inCoordinateSpace:](&v35, sel__childFocusRegionsInRect_inCoordinateSpace_, v9, x, y, width, height);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[UITableView _contentSubviews](self, "_contentSubviews");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v11, "mutableCopy");

    -[UIView convertRect:fromCoordinateSpace:](self, "convertRect:fromCoordinateSpace:", v9, x, y, width, height);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;
    -[UITableView _focusPromiseRegionsInRect:](self, "_focusPromiseRegionsInRect:");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addObjectsFromArray:", v21);

    tableHeaderView = self->_tableHeaderView;
    if (tableHeaderView)
    {
      -[UIView frame](tableHeaderView, "frame");
      v38.origin.x = v14;
      v38.origin.y = v16;
      v38.size.width = v18;
      v38.size.height = v20;
      if (CGRectIntersectsRect(v36, v38))
        objc_msgSend(v12, "addObject:", self->_tableHeaderView);
    }
    tableFooterView = self->_tableFooterView;
    if (tableFooterView)
    {
      -[UIView frame](tableFooterView, "frame");
      v39.origin.x = v14;
      v39.origin.y = v16;
      v39.size.width = v18;
      v39.size.height = v20;
      if (CGRectIntersectsRect(v37, v39))
        objc_msgSend(v12, "addObject:", self->_tableFooterView);
    }
    -[UIView traitCollection](self, "traitCollection");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "userInterfaceIdiom");

    if (v25 == 3 && !-[UIView _isFocusedOrAncestorOfFocusedView](self, "_isFocusedOrAncestorOfFocusedView"))
    {
      v26 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v29 = MEMORY[0x1E0C809B0];
      v30 = 3221225472;
      v31 = __58__UITableView__childFocusRegionsInRect_inCoordinateSpace___block_invoke;
      v32 = &unk_1E16BFD98;
      v33 = self;
      v34 = v26;
      v27 = v26;
      objc_msgSend(v12, "enumerateObjectsUsingBlock:", &v29);
      objc_msgSend(v12, "removeObjectsInArray:", v27, v29, v30, v31, v32, v33);

    }
    objc_msgSend(v12, "bs_map:", &__block_literal_global_887);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v10;
}

void __58__UITableView__childFocusRegionsInRect_inCoordinateSpace___block_invoke(uint64_t a1, void *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  id v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;

  v39 = a2;
  objc_msgSend(*(id *)(a1 + 32), "bounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  objc_msgSend(*(id *)(a1 + 32), "_contentInset");
  v12 = v4 + v11;
  v14 = v6 + v13;
  v16 = v8 - (v11 + v15);
  v18 = v10 - (v13 + v17);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v19 = *(void **)(a1 + 32);
    v20 = v39;
    objc_msgSend(v20, "frame");
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v28 = v27;
    objc_msgSend(v20, "superview");
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "convertRect:fromView:", v29, v22, v24, v26, v28);
LABEL_5:
    v35 = v30;
    v36 = v31;
    v37 = v32;
    v38 = v33;

    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v34 = *(void **)(a1 + 32);
    objc_msgSend(v39, "indexPath");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "_rectForRowAtIndexPath:usingPresentationValues:", v29, 1);
    goto LABEL_5;
  }
  v35 = *MEMORY[0x1E0C9D648];
  v36 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v37 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v38 = *(double *)(MEMORY[0x1E0C9D648] + 24);
LABEL_7:
  v40.origin.x = v12;
  v40.origin.y = v14;
  v40.size.width = v16;
  v40.size.height = v18;
  v41 = CGRectInset(v40, -0.001, -0.001);
  v42.origin.x = v35;
  v42.origin.y = v36;
  v42.size.width = v37;
  v42.size.height = v38;
  if (!CGRectContainsRect(v41, v42))
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v39);

}

id __58__UITableView__childFocusRegionsInRect_inCoordinateSpace___block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = a2;
  objc_msgSend(v2, "focusItemContainer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _UIFocusRegionContainerFromEnvironmentAndContainer((uint64_t)v2, (uint64_t)v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)_fulfillPromisedFocusRegionForCell:(id)a3
{
  id v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  void *v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  void *v22;
  void *v23;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  v4 = a3;
  -[UIView bounds](self, "bounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  objc_msgSend(v4, "indexPath");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _rectForRowAtIndexPath:usingPresentationValues:](self, "_rectForRowAtIndexPath:usingPresentationValues:", v13, 1);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;

  v25.origin.x = v6;
  v25.origin.y = v8;
  v25.size.width = v10;
  v25.size.height = v12;
  v27.origin.x = v15;
  v27.origin.y = v17;
  v27.size.width = v19;
  v27.size.height = v21;
  v26 = CGRectUnion(v25, v27);
  -[UITableView _ensureViewsAreLoadedInRect:](self, "_ensureViewsAreLoadedInRect:", v26.origin.x, v26.origin.y, v26.size.width, v26.size.height);
  objc_msgSend(v4, "indexPath");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v22, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  return v23;
}

- (BOOL)_allowsFocusToLeaveViaHeading:(unint64_t)a3
{
  return (a3 & 0x300) == 0;
}

- (id)_focusScrollBoundaryMetricsForItem:(id)a3
{
  id v4;
  _UIFocusScrollBoundaryMetrics *v5;
  _UIFocusScrollBoundaryMetrics *v6;
  UITableView *v7;
  UITableView *v8;
  UITableView *v9;
  UITableView *v10;
  UITableView *v11;
  void *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  NSInteger v16;
  _UIFocusScrollBoundaryMetrics *v17;
  void *v18;
  _UIFocusScrollBoundaryMetrics *v19;
  objc_super v21;

  v4 = a3;
  v5 = -[_UIFocusScrollBoundaryMetrics initWithFocusItem:scrollView:]([_UIFocusScrollBoundaryMetrics alloc], "initWithFocusItem:scrollView:", v4, self);
  if (-[_UIFocusScrollBoundaryMetrics hasDisprovedAllRelevantAssumptions](v5, "hasDisprovedAllRelevantAssumptions"))
  {
    v6 = v5;
  }
  else
  {
    _UIFocusEnvironmentContainingView(v4);
    v7 = (UITableView *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    v9 = 0;
    if (!v7 || v7 == self)
    {
      v10 = v7;
LABEL_11:
      v11 = 0;
    }
    else
    {
      while ((_IsKindOfUITableViewCell(v8) & 1) == 0)
      {
        if ((_IsKindOfUITableViewHeaderFooterView(v8) & 1) != 0)
        {
          v10 = v8;
          v15 = -[UITableView _sectionForHeaderView:](self, "_sectionForHeaderView:", v10);
          if (v15 != 0x7FFFFFFFFFFFFFFFLL
            || (v15 = -[UITableView _sectionForFooterView:](self, "_sectionForFooterView:", v10),
                v15 != 0x7FFFFFFFFFFFFFFFLL))
          {
            v16 = -[UITableView numberOfSections](self, "numberOfSections") - 1;
            if (v15 >= 1)
              -[_UIFocusScrollBoundaryMetrics setIsMinY:](v5, "setIsMinY:", 0);
            if (v15 < v16)
              -[_UIFocusScrollBoundaryMetrics setIsMaxY:](v5, "setIsMaxY:", 0);
          }
          v11 = 0;
          v9 = v10;
          goto LABEL_25;
        }
        -[UIView superview](v8, "superview");
        v10 = (UITableView *)objc_claimAutoreleasedReturnValue();

        v9 = 0;
        if (!v10)
          goto LABEL_11;
        v8 = v10;
        v11 = 0;
        if (v10 == self)
          goto LABEL_25;
      }
      v10 = v8;
      -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v10, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        v13 = -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:", v12);
        v14 = -[UITableView maximumGlobalRowIndex](self, "maximumGlobalRowIndex");
        if (v13 >= 1)
          -[_UIFocusScrollBoundaryMetrics setIsMinY:](v5, "setIsMinY:", 0);
        if (v13 < v14)
          -[_UIFocusScrollBoundaryMetrics setIsMaxY:](v5, "setIsMaxY:", 0);
      }

      v9 = 0;
      v11 = v10;
    }
LABEL_25:
    if (-[_UIFocusScrollBoundaryMetrics hasDisprovedAllRelevantAssumptions](v5, "hasDisprovedAllRelevantAssumptions"))
    {
      v17 = v5;
    }
    else
    {
      v21.receiver = self;
      v21.super_class = (Class)UITableView;
      -[UIScrollView _focusScrollBoundaryMetricsForItem:](&v21, sel__focusScrollBoundaryMetricsForItem_, v4);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIFocusScrollBoundaryMetrics consumeOtherMetrics:](v5, "consumeOtherMetrics:", v18);
      v19 = v5;

    }
  }

  return v5;
}

- (CGPoint)_adjustFocusContentOffset:(CGPoint)a3 toShowFocusItemWithInfo:(id)a4
{
  double y;
  CGFloat x;
  UITableView *v7;
  UITableView *v8;
  UITableView *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGPoint result;
  CGRect v21;
  CGRect v22;

  y = a3.y;
  x = a3.x;
  objc_msgSend(a4, "containingView");
  v7 = (UITableView *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7 && v7 != self)
  {
    while ((_IsKindOfUITableViewCell(v8) & 1) == 0)
    {
      -[UIView superview](v8, "superview");
      v9 = (UITableView *)objc_claimAutoreleasedReturnValue();

      if (v9)
      {
        v8 = v9;
        if (v9 != self)
          continue;
      }
      v8 = v9;
      goto LABEL_21;
    }
    v8 = v8;
    -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v8, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      if (-[UITableView allowsHeaderViewsToFloat](self, "allowsHeaderViewsToFloat")
        || (v11 = 0.0, !objc_msgSend(v10, "row")))
      {
        v11 = -[UITableViewRowData heightForHeaderInSection:canGuess:]((uint64_t)self->_rowData, objc_msgSend(v10, "section"), 0);
      }
      -[UIView frame](v8, "frame");
      v12 = CGRectGetMinY(v21) - v11;
      if (y >= v12)
        v13 = v12;
      else
        v13 = y;
      if (-[UITableView allowsFooterViewsToFloat](self, "allowsFooterViewsToFloat")
        || (v14 = objc_msgSend(v10, "row"),
            v15 = 0.0,
            v14 == -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, objc_msgSend(v10, "section"))
                 - 1))
      {
        v15 = -[UITableViewRowData heightForFooterInSection:canGuess:]((uint64_t)self->_rowData, objc_msgSend(v10, "section"), 0);
      }
      -[UIView frame](v8, "frame");
      v16 = v15 + CGRectGetMaxY(v22);
      -[UIView bounds](self, "bounds");
      if (v13 >= v16 - v17)
        y = v13;
      else
        y = v16 - v17;
    }

  }
LABEL_21:

  v18 = x;
  v19 = y;
  result.y = v19;
  result.x = v18;
  return result;
}

- (unint64_t)_focusPrimaryScrollableAxis
{
  return 2;
}

- (void)setRefreshControl:(id)a3
{
  UIView *tableHeaderBackgroundView;
  void *v5;
  objc_super v6;

  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  -[UIScrollView setRefreshControl:](&v6, sel_setRefreshControl_, a3);
  tableHeaderBackgroundView = self->_tableHeaderBackgroundView;
  if (tableHeaderBackgroundView)
  {
    -[UIScrollView _refreshControl](self, "_refreshControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView insertSubview:belowSubview:](self, "insertSubview:belowSubview:", tableHeaderBackgroundView, v5);

  }
}

- (BOOL)_dataSourceImplementsNumberOfSectionsInTableView
{
  return (*(_BYTE *)&self->_tableFlags >> 2) & 1;
}

- (BOOL)_delegateImplementsHeightForRowAtIndexPath
{
  return *((_BYTE *)&self->_tableFlags + 4) & 1;
}

- (BOOL)_dataSourceImplementsCanUpdateRowAtIndexPath
{
  return (*((unsigned __int8 *)&self->_tableFlags + 1) >> 4) & 1;
}

- (BOOL)_delegateImplementsMarginForTableView
{
  return (*((unsigned __int8 *)&self->_tableFlags + 7) >> 1) & 1;
}

- (BOOL)_delegateImplementsHeightForHeaderInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 1) & 1;
}

- (BOOL)_delegateImplementsTitleWidthForHeaderInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 2) & 1;
}

- (BOOL)_delegateImplementsAlignmentForHeaderInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 7) >> 2) & 1;
}

- (BOOL)_delegateImplementsHeightForFooterInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 3) & 1;
}

- (BOOL)_delegateImplementsTitleWidthForFooterInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 4) & 1;
}

- (BOOL)_delegateImplementsAlignmentForFooterInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 7) >> 3) & 1;
}

- (BOOL)_dataSourceImplementsTitleForHeaderInSection
{
  return (*(_BYTE *)&self->_tableFlags >> 3) & 1;
}

- (BOOL)_dataSourceImplementsTitleForFooterInSection
{
  return (*(_BYTE *)&self->_tableFlags >> 4) & 1;
}

- (BOOL)_dataSourceImplementsDetailTextForHeaderInSection
{
  return (*(_BYTE *)&self->_tableFlags >> 5) & 1;
}

- (BOOL)_delegateImplementsViewForHeaderInSection
{
  return *((_BYTE *)&self->_tableFlags + 5) & 1;
}

- (BOOL)_delegateImplementsViewForFooterInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 5) >> 1) & 1;
}

- (void)_deselectAllNonMultiSelectRowsAnimated:(BOOL)a3
{
  -[UITableView _deselectAllNonMultiSelectRowsAnimated:notifyDelegate:](self, "_deselectAllNonMultiSelectRowsAnimated:notifyDelegate:", a3, 0);
}

- (void)_deselectRowAtIndexPath:(id)a3 animated:(BOOL)a4 notifyDelegate:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL8 v6;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  id v17;

  v5 = a5;
  v6 = a4;
  v8 = a3;
  if (!-[NSMutableArray containsObject:](self->_selectedIndexPaths, "containsObject:", v8))
  {
    v17 = v8;
    goto LABEL_14;
  }
  if (!v5 || (*((_BYTE *)&self->_tableFlags + 5) & 0x80) == 0)
  {
    v17 = v8;
LABEL_5:
    -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v17);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
      objc_msgSend(v9, "setSelected:animated:", 0, v6);
    else
      -[UITableView _showSeparatorForRowBeforeIndexPath:](self, "_showSeparatorForRowBeforeIndexPath:", v17);
    -[NSMutableArray removeObject:](self->_selectedIndexPaths, "removeObject:", v17);
    if (v5)
    {
      if ((*((_BYTE *)&self->_tableFlags + 6) & 2) != 0)
      {
        -[UITableView _delegateProxy](self, "_delegateProxy");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "tableView:didDeselectRowAtIndexPath:", self, v17);

      }
      -[UITableView _selectedIndexPathsDidChange](self, "_selectedIndexPathsDidChange");
    }

    goto LABEL_14;
  }
  -[UITableView _delegateProxy](self, "_delegateProxy");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "tableView:willDeselectRowAtIndexPath:", self, v8);
  v17 = (id)objc_claimAutoreleasedReturnValue();

  if (!v17)
  {
    v17 = 0;
    goto LABEL_14;
  }
  if (objc_msgSend(v17, "row") != 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(v17, "section") != 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_5;
LABEL_14:
  -[UIView traitCollection](self, "traitCollection");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "userInterfaceIdiom");

  if (v13 == 3)
    -[UIView setNeedsFocusUpdate](self, "setNeedsFocusUpdate");
  -[UITableView _focusedCellIndexPath](self, "_focusedCellIndexPath");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isEqual:", v17);

  if (v15)
    -[UITableView _updateSelectionIsKey](self, "_updateSelectionIsKey");

}

- (void)_animateTableViewContentToNewLayoutWithDuration:(double)a3 reorderingCell:(id)a4 additionalAnimations:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id v14;

  v8 = a4;
  v9 = a5;
  -[UITableView _applyCoalescedContentSizeUpdates](self, "_applyCoalescedContentSizeUpdates");
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __99__UITableView__animateTableViewContentToNewLayoutWithDuration_reorderingCell_additionalAnimations___block_invoke;
  v12[3] = &unk_1E16BAD68;
  v12[4] = self;
  v13 = v8;
  v14 = v9;
  v10 = v9;
  v11 = v8;
  +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 4, v12, 0, a3, 0.0);

}

uint64_t __99__UITableView__animateTableViewContentToNewLayoutWithDuration_reorderingCell_additionalAnimations___block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  unint64_t v20;
  void *v21;
  uint64_t result;
  CGRect v23;
  CGRect v24;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 2176);
  if (v3 < *(_QWORD *)(v2 + 2184) + v3)
  {
    v4 = 0;
    do
    {
      -[UITableViewRowData indexPathForRowAtGlobalRow:](*(_QWORD **)(v2 + 2080), v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "_existingCellForRowAtIndexPath:", v5);
      v6 = objc_claimAutoreleasedReturnValue();
      if (v6)
        v7 = v4 + 1;
      else
        v7 = v4;
      if (v6)
      {
        v8 = (void *)v6;
        if (v6 != *(_QWORD *)(a1 + 40))
        {
          v9 = -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2080), objc_msgSend(v5, "row"), objc_msgSend(v5, "section"), 0);
          v11 = v10;
          v13 = v12;
          v15 = v14;
          objc_msgSend(v8, "frame");
          v24.origin.x = v16;
          v24.origin.y = v17;
          v24.size.width = v18;
          v24.size.height = v19;
          v23.origin.x = v9;
          v23.origin.y = v11;
          v23.size.width = v13;
          v23.size.height = v15;
          if (!CGRectEqualToRect(v23, v24) && v8 != *(void **)(a1 + 40))
          {
            objc_msgSend(v8, "setFrame:", v9, v11, v13, v15);
            objc_msgSend(v8, "_setNeedsHeightCalculation:", 0);
          }
          objc_msgSend(v8, "setSectionLocation:animated:", -[UITableViewRowData sectionLocationForRow:inSection:](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2080), objc_msgSend(v5, "row"), objc_msgSend(v5, "section")), 1);
          objc_msgSend(*(id *)(a1 + 32), "_updateDragStateForCell:atIndexPath:", v8, v5);
        }
      }
      else
      {
        v8 = (void *)objc_msgSend(*(id *)(a1 + 32), "_createPreparedCellForGlobalRow:willDisplay:", v3, 1);
        v20 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2192), "count");
        v21 = *(void **)(*(_QWORD *)(a1 + 32) + 2192);
        if (v4 >= v20)
          objc_msgSend(v21, "addObject:", v8);
        else
          objc_msgSend(v21, "insertObject:atIndex:", v8, v4);
      }

      ++v3;
      v2 = *(_QWORD *)(a1 + 32);
      v4 = v7;
    }
    while (v3 < *(_QWORD *)(v2 + 2184) + *(_QWORD *)(v2 + 2176));
  }
  objc_msgSend((id)v2, "_updateTableHeadersAndFootersNow:", 1);
  objc_msgSend(*(id *)(a1 + 32), "_updateVisibleHeadersAndFootersNow:", 1);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (void)_animateTableViewContentToNewLayout
{
  -[UITableView _animateTableViewContentToNewLayoutWithDuration:reorderingCell:additionalAnimations:](self, "_animateTableViewContentToNewLayoutWithDuration:reorderingCell:additionalAnimations:", 0, 0, 0.3);
}

- (id)_gapIndexPath
{
  UITableViewRowData *rowData;

  rowData = self->_rowData;
  if (rowData)
    return rowData->_gapIndexPath;
  else
    return 0;
}

- (id)_draggedIndexPath
{
  UITableViewRowData *rowData;

  rowData = self->_rowData;
  if (rowData)
    return rowData->_draggedIndexPath;
  else
    return 0;
}

- (BOOL)hasUncommittedUpdates
{
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  BOOL v4;
  UITableViewRowData *rowData;
  NSIndexPath *v6;
  BOOL v7;
  UITableViewRowData *v8;
  UITableViewRowData *v9;
  UITableViewRowData *v10;
  UITableViewRowData *v11;
  BOOL v12;

  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
    v4 = -[_UITableViewShadowUpdatesController hasShadowUpdates](shadowUpdatesController, "hasShadowUpdates");
  else
    v4 = 0;
  rowData = self->_rowData;
  if (rowData && (v6 = rowData->_draggedIndexPath) != 0)
  {
    v7 = 1;
  }
  else
  {
    v8 = self->_rowData;
    if (v8)
      v8 = (UITableViewRowData *)v8->_reorderedIndexPath;
    v9 = v8;
    v7 = v9 != 0;

    v6 = 0;
  }

  v10 = self->_rowData;
  if (v10)
    v10 = (UITableViewRowData *)v10->_gapIndexPath;
  v11 = v10;

  if (v11)
    v12 = 1;
  else
    v12 = v7;
  return v4 || v12;
}

- (BOOL)dragInteractionEnabled
{
  unint64_t v2;
  _BOOL8 v3;

  v2 = *((_QWORD *)&self->_tableFlags + 3);
  if ((v2 & 0x800000) != 0)
    return (v2 >> 24) & 1;
  else
    LOBYTE(v3) = +[_UITableViewDragController isEnabledByDefault](_UITableViewDragController, "isEnabledByDefault");
  return v3;
}

- (BOOL)hasActiveDrag
{
  _UITableViewDragController *dragController;

  dragController = self->_dragController;
  if (dragController)
    LOBYTE(dragController) = -[_UITableViewDragController isActive](dragController, "isActive");
  return (char)dragController;
}

- (BOOL)hasActiveDrop
{
  _UITableViewDropController *dropController;

  dropController = self->_dropController;
  if (dropController)
    LOBYTE(dropController) = -[_UITableViewDropController isActive](dropController, "isActive");
  return (char)dropController;
}

- (BOOL)_isReordering
{
  BOOL v3;
  void *v4;

  if (-[UITableView hasActiveDrag](self, "hasActiveDrag"))
    v3 = -[UITableView hasActiveDrop](self, "hasActiveDrop");
  else
    v3 = 0;
  -[UITableView _reorderingIndexPath](self, "_reorderingIndexPath");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4 || v3;
}

- (id)_dragDelegateActual
{
  return objc_loadWeakRetained((id *)&self->_dragDelegate);
}

- (id)_dragDelegateProxy
{
  _UITableViewShadowUpdatesController *WeakRetained;

  if (-[_UITableViewShadowUpdatesController hasShadowUpdates](self->_shadowUpdatesController, "hasShadowUpdates"))
    WeakRetained = self->_shadowUpdatesController;
  else
    WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_dragDelegate);
  return WeakRetained;
}

- (void)setDragSourceDelegate:(id)a3
{
  id WeakRetained;
  id obj;

  obj = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dragSourceDelegate, obj);
    _UIValidateAccountBasedDelegateRespondsToSelector(obj, (uint64_t)sel___tableView_dataOwnerForDragSession_atIndexPath_);
    -[UITableView _createOrUninstallDragAndDropControllersIfNeeded](self, "_createOrUninstallDragAndDropControllersIfNeeded");
  }

}

- (id)_dragSourceDelegateActual
{
  return objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
}

- (id)_dragSourceDelegateProxy
{
  _UITableViewShadowUpdatesController *WeakRetained;

  if (-[_UITableViewShadowUpdatesController hasShadowUpdates](self->_shadowUpdatesController, "hasShadowUpdates"))
    WeakRetained = self->_shadowUpdatesController;
  else
    WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
  return WeakRetained;
}

- (BOOL)_canBeginDragAtPoint:(CGPoint)a3 indexPath:(id)a4
{
  id WeakRetained;
  int v6;
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (WeakRetained)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    v7 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (v7)
      LOBYTE(v6) = 0;
    else
      v6 = !-[UITableView _dragAndDropUsedForReordering](self, "_dragAndDropUsedForReordering");

  }
  return v6 ^ 1;
}

- (int64_t)_dataOwnerForDragSession:(id)a3 atIndexPath:(id)a4
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  id v10;
  char v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  char v17;
  int64_t v18;

  v6 = a3;
  v7 = a4;
  if (!_UIShouldEnforceOpenInRulesInAccountBasedApp())
    goto LABEL_9;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (!WeakRetained
    || (v9 = WeakRetained,
        v10 = objc_loadWeakRetained((id *)&self->_dragDelegate),
        v11 = objc_opt_respondsToSelector(),
        v10,
        v9,
        (v11 & 1) == 0))
  {
    v14 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (v14)
    {
      v15 = v14;
      v16 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
      v17 = objc_opt_respondsToSelector();

      if ((v17 & 1) != 0)
      {
        -[UITableView _dragSourceDelegateProxy](self, "_dragSourceDelegateProxy");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "__tableView:dataOwnerForDragSession:atIndexPath:", self, v6, v7);
        goto LABEL_8;
      }
    }
LABEL_9:
    v18 = 0;
    goto LABEL_10;
  }
  -[UITableView _dragDelegateProxy](self, "_dragDelegateProxy");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "_tableView:dataOwnerForDragSession:atIndexPath:", self, v6, v7);
LABEL_8:
  v18 = v13;

LABEL_10:
  return v18;
}

- (id)_rowsToIncludeInDragSession:(id)a3 atIndexPath:(id)a4 withDataOwner:(int64_t)a5
{
  id v8;
  id v9;
  void *v10;
  id WeakRetained;
  void *v12;
  int v13;
  id v14;
  void *v15;
  char v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  objc_msgSend(MEMORY[0x1E0C99E10], "orderedSet");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (WeakRetained)
  {
    v12 = WeakRetained;
    v13 = -[NSMutableArray containsObject:](self->_selectedIndexPaths, "containsObject:", v9);

    if (!v13)
    {
LABEL_17:
      objc_msgSend(v10, "addObject:", v9);
      goto LABEL_20;
    }
  }
  else
  {
    v14 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (!v14)
      goto LABEL_17;
    v15 = v14;
    v16 = -[NSMutableArray containsObject:](self->_selectedIndexPaths, "containsObject:", v9);

    if ((v16 & 1) == 0)
      goto LABEL_17;
  }
  -[NSMutableArray sortedArrayUsingSelector:](self->_selectedIndexPaths, "sortedArrayUsingSelector:", sel_compare_);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (_UIShouldEnforceOpenInRulesInAccountBasedApp())
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = v17;
    v18 = v17;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v27 != v21)
            objc_enumerationMutation(v18);
          v23 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
          if (-[UITableView _dataOwnerForDragSession:atIndexPath:](self, "_dataOwnerForDragSession:atIndexPath:", v8, v23) == a5)objc_msgSend(v10, "addObject:", v23);
        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      }
      while (v20);
    }

    v17 = v25;
  }
  else
  {
    objc_msgSend(v10, "addObjectsFromArray:", v17);
  }

LABEL_20:
  return v10;
}

- (id)_dragPreviewParametersForIndexPath:(id)a3
{
  id v4;
  id WeakRetained;
  char v6;
  void *v7;
  UIDragPreviewParameters *v8;
  void *v9;
  void *v10;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) == 0
    || (-[UITableView _dragDelegateProxy](self, "_dragDelegateProxy"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v7, "tableView:dragPreviewParametersForRowAtIndexPath:", self, v4),
        v8 = (UIDragPreviewParameters *)objc_claimAutoreleasedReturnValue(),
        v7,
        !v8))
  {
    -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v4, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_visiblePathForBackgroundConfiguration");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v8 = objc_alloc_init(UIDragPreviewParameters);
      -[UIPreviewParameters setVisiblePath:](v8, "setVisiblePath:", v10);
    }
    else
    {
      v8 = 0;
    }

  }
  return v8;
}

- (void)_prepareToLiftRowsAtIndexPaths:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i);
        -[UITableView unhighlightRowAtIndexPath:animated:](self, "unhighlightRowAtIndexPath:animated:", v9, 0);
        -[UITableView _existingCellForRowAtIndexPath:](self, "_existingCellForRowAtIndexPath:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "layoutIfNeeded");

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

}

- (void)_animateLiftOfRowsAtIndexPaths:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v8), 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = v9;
        if (v9)
        {
          objc_msgSend(v9, "_setSeparatorHidden:", 1);
          objc_msgSend(v10, "_setDragState:", 1);
          objc_msgSend(v10, "layoutIfNeeded");
        }

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

}

- (void)_animateDragCancelForCell:(id)a3
{
  id v3;

  v3 = a3;
  objc_msgSend(v3, "_setDragState:", 0);
  objc_msgSend(v3, "setAlpha:", 1.0);

}

- (id)_itemsForBeginningDragSession:(id)a3 atIndexPath:(id)a4
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  char v15;
  id v16;
  UIDragItem *v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);

  if (WeakRetained)
  {
    -[UITableView _dragDelegateProxy](self, "_dragDelegateProxy");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "tableView:itemsForBeginningDragSession:atIndexPath:", self, v6, v7);
    v10 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (!v12
      || (v13 = v12,
          v14 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate),
          v15 = objc_opt_respondsToSelector(),
          v14,
          v13,
          (v15 & 1) == 0))
    {
      v11 = (void *)MEMORY[0x1E0C9AA60];
      goto LABEL_8;
    }
    -[UITableView _dragSourceDelegateProxy](self, "_dragSourceDelegateProxy");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_tableView:itemsForBeginningDragSession:atIndexPath:", self, v6, v7);
    v10 = objc_claimAutoreleasedReturnValue();
  }
  v11 = (void *)v10;

LABEL_8:
  if (!objc_msgSend(v11, "count") && -[UITableView _canMoveRowAtIndexPath:](self, "_canMoveRowAtIndexPath:", v7))
  {
    v16 = objc_alloc_init(MEMORY[0x1E0CB36C8]);
    v17 = -[UIDragItem initWithItemProvider:]([UIDragItem alloc], "initWithItemProvider:", v16);
    v20[0] = v17;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1);
    v18 = objc_claimAutoreleasedReturnValue();

    v11 = (void *)v18;
  }

  return v11;
}

- (id)_itemsForAddingToDragSession:(id)a3 atIndexPath:(id)a4 point:(CGPoint)a5 withDataOwner:(int64_t)a6
{
  double y;
  double x;
  id v11;
  id v12;
  id WeakRetained;
  void *v14;
  id v15;
  char v16;
  id v17;
  char v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  char v26;
  id v27;
  char v28;
  void *v29;
  uint64_t v30;
  void *v31;

  y = a5.y;
  x = a5.x;
  v11 = a3;
  v12 = a4;
  if (!+[_UITableViewDragController isEnabledByDefault](_UITableViewDragController, "isEnabledByDefault")
    && -[_UITableViewDragController clientEnabledState](self->_dragController, "clientEnabledState") != 1)
  {
    goto LABEL_16;
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (!WeakRetained
    || (v14 = WeakRetained,
        v15 = objc_loadWeakRetained((id *)&self->_dragDelegate),
        v16 = objc_opt_respondsToSelector(),
        v15,
        v14,
        (v16 & 1) == 0))
  {
    v23 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (v23)
    {
      v24 = v23;
      v25 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
      v26 = objc_opt_respondsToSelector();

      if ((v26 & 1) != 0)
      {
        if (!_UIShouldEnforceOpenInRulesInAccountBasedApp()
          || (v27 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate),
              v28 = objc_opt_respondsToSelector(),
              v27,
              (v28 & 1) == 0)
          || (-[UITableView _dragSourceDelegateProxy](self, "_dragSourceDelegateProxy"),
              v29 = (void *)objc_claimAutoreleasedReturnValue(),
              v30 = objc_msgSend(v29, "__tableView:dataOwnerForDragSession:atIndexPath:", self, v11, v12),
              v29,
              v30 == a6))
        {
          -[UITableView _dragSourceDelegateProxy](self, "_dragSourceDelegateProxy");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "_tableView:itemsForAddingToDragSession:atIndexPath:point:", self, v11, v12, x, y);
          v22 = objc_claimAutoreleasedReturnValue();
          goto LABEL_15;
        }
      }
    }
LABEL_16:
    v31 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_17;
  }
  if (_UIShouldEnforceOpenInRulesInAccountBasedApp())
  {
    v17 = objc_loadWeakRetained((id *)&self->_dragDelegate);
    v18 = objc_opt_respondsToSelector();

    if ((v18 & 1) != 0)
    {
      -[UITableView _dragDelegateProxy](self, "_dragDelegateProxy");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "_tableView:dataOwnerForDragSession:atIndexPath:", self, v11, v12);

      if (v20 != a6)
        goto LABEL_16;
    }
  }
  -[UITableView _dragDelegateProxy](self, "_dragDelegateProxy");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "tableView:itemsForAddingToDragSession:atIndexPath:point:", self, v11, v12, x, y);
  v22 = objc_claimAutoreleasedReturnValue();
LABEL_15:
  v31 = (void *)v22;

LABEL_17:
  return v31;
}

- (void)_dragSessionWillBegin:(id)a3
{
  id WeakRetained;
  void *v5;
  id v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  char v12;
  id v13;

  v13 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v6 = objc_loadWeakRetained((id *)&self->_dragDelegate);
    v7 = objc_opt_respondsToSelector();

    if ((v7 & 1) != 0)
    {
      -[UITableView _dragDelegateProxy](self, "_dragDelegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "tableView:dragSessionWillBegin:", self, v13);
LABEL_7:

      goto LABEL_8;
    }
  }
  v9 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
  if (v9)
  {
    v10 = v9;
    v11 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    v12 = objc_opt_respondsToSelector();

    if ((v12 & 1) != 0)
    {
      -[UITableView _dragSourceDelegateProxy](self, "_dragSourceDelegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_tableView:dragSessionWillBegin:", self, v13);
      goto LABEL_7;
    }
  }
LABEL_8:

}

- (void)_updateAppearanceOfVisibleRowsForDragState
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[UITableView _updateTopSeparatorForVisibleCells](self, "_updateTopSeparatorForVisibleCells");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  -[UITableView _visibleCellsUsingPresentationValues:](self, "_visibleCellsUsingPresentationValues:", 1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v8, 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _updateDragStateForCell:atIndexPath:](self, "_updateDragStateForCell:atIndexPath:", v8, v9);
        -[UITableView _updateSeparatorStateForCell:atIndexPath:](self, "_updateSeparatorStateForCell:atIndexPath:", v8, v9);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

- (void)_dragSessionDidEnd:(id)a3
{
  id WeakRetained;
  void *v5;
  id v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  char v12;
  id v13;

  v13 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v6 = objc_loadWeakRetained((id *)&self->_dragDelegate);
    v7 = objc_opt_respondsToSelector();

    if ((v7 & 1) != 0)
    {
      -[UITableView _dragDelegateProxy](self, "_dragDelegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "tableView:dragSessionDidEnd:", self, v13);
LABEL_7:

      goto LABEL_8;
    }
  }
  v9 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
  if (v9)
  {
    v10 = v9;
    v11 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    v12 = objc_opt_respondsToSelector();

    if ((v12 & 1) != 0)
    {
      -[UITableView _dragSourceDelegateProxy](self, "_dragSourceDelegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_tableView:dragSessionDidEnd:", self, v13);
      goto LABEL_7;
    }
  }
LABEL_8:

}

- (BOOL)_dragSessionAllowsMoveOperation:(id)a3
{
  id v4;
  id WeakRetained;
  char v6;
  void *v7;
  char v8;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) != 0)
  {
    -[UITableView _dragDelegateProxy](self, "_dragDelegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "tableView:dragSessionAllowsMoveOperation:", self, v4);

  }
  else
  {
    v8 = 1;
  }

  return v8;
}

- (BOOL)_dragSessionIsRestrictedToDraggingApplication:(id)a3
{
  id v4;
  id WeakRetained;
  char v6;
  void *v7;
  char v8;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) != 0)
  {
    -[UITableView _dragDelegateProxy](self, "_dragDelegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "tableView:dragSessionIsRestrictedToDraggingApplication:", self, v4);

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (id)_dragSessionPropertiesForSession:(id)a3
{
  id v4;
  id WeakRetained;
  char v6;
  void *v7;
  void *v8;
  id v9;
  char v10;
  void *v11;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) == 0
    || (-[UITableView _dragDelegateProxy](self, "_dragDelegateProxy"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v7, "_tableView:dragSessionPropertiesForSession:", self, v4),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v7,
        !v8))
  {
    v9 = objc_loadWeakRetained((id *)&self->_dragDelegate);
    v10 = objc_opt_respondsToSelector();

    if ((v10 & 1) != 0)
    {
      v8 = (void *)objc_opt_new();
      -[UITableView _dragDelegateProxy](self, "_dragDelegateProxy");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "set_supportsSystemDrag:", objc_msgSend(v11, "_tableView:dragSessionSupportsSystemDrag:", self, v4));

    }
    else
    {
      v8 = 0;
    }
  }

  return v8;
}

- (id)_dropDelegateActual
{
  return objc_loadWeakRetained((id *)&self->_dropDelegate);
}

- (id)_dropDelegateProxy
{
  _UITableViewShadowUpdatesController *WeakRetained;

  if (-[_UITableViewShadowUpdatesController hasShadowUpdates](self->_shadowUpdatesController, "hasShadowUpdates"))
    WeakRetained = self->_shadowUpdatesController;
  else
    WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_dropDelegate);
  return WeakRetained;
}

- (void)setDragDestinationDelegate:(id)a3
{
  id WeakRetained;
  id obj;

  obj = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dragDestinationDelegate, obj);
    _UIValidateAccountBasedDelegateRespondsToSelector(obj, (uint64_t)sel___tableView_dataOwnerForDropSession_withDestinationIndexPath_);
    -[UITableView _createOrUninstallDragAndDropControllersIfNeeded](self, "_createOrUninstallDragAndDropControllersIfNeeded");
  }

}

- (id)_dragDestinationDelegateActual
{
  return objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
}

- (id)_dragDestinationDelegateProxy
{
  _UITableViewShadowUpdatesController *WeakRetained;

  if (-[_UITableViewShadowUpdatesController hasShadowUpdates](self->_shadowUpdatesController, "hasShadowUpdates"))
    WeakRetained = self->_shadowUpdatesController;
  else
    WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  return WeakRetained;
}

- (id)_activeSourceDragSession
{
  return -[_UITableViewDragController dragSession](self->_dragController, "dragSession");
}

- (BOOL)_shouldAllowInternalDrop
{
  id WeakRetained;
  BOOL v4;
  id v5;
  void *v6;
  id v7;
  char v8;
  void *v9;

  WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);

  if (WeakRetained)
    return 1;
  v5 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v5)
  {
    v6 = v5;
    v7 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    v8 = objc_opt_respondsToSelector();

    if ((v8 & 1) != 0)
      return 1;
  }
  -[_UITableViewDragController draggedIndexPath](self->_dragController, "draggedIndexPath");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
    v4 = -[UITableView _canMoveRowAtIndexPath:](self, "_canMoveRowAtIndexPath:", v9);
  else
    v4 = 0;

  return v4;
}

- (BOOL)_canHandleDropSession:(id)a3
{
  id v4;
  id WeakRetained;
  char v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  char v12;
  void *v13;
  char v14;
  id v15;
  void *v16;
  id v17;
  char v18;
  char v19;
  _BOOL4 v20;
  void *v21;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (WeakRetained)
  {
    v6 = 1;
  }
  else
  {
    v7 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    if (v7)
    {
      v8 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      v6 = objc_opt_respondsToSelector();

    }
    else
    {
      v6 = 0;
    }

  }
  -[_UITableViewDropController setCanOnlyHandleReordering:](self->_dropController, "setCanOnlyHandleReordering:", 0);
  if ((v6 & 1) != 0)
  {
    v9 = objc_loadWeakRetained((id *)&self->_dropDelegate);
    if (v9
      && (v10 = v9,
          v11 = objc_loadWeakRetained((id *)&self->_dropDelegate),
          v12 = objc_opt_respondsToSelector(),
          v11,
          v10,
          (v12 & 1) != 0))
    {
      -[UITableView _dropDelegateProxy](self, "_dropDelegateProxy");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "tableView:canHandleDropSession:", self, v4);
    }
    else
    {
      v15 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      if (!v15)
        goto LABEL_15;
      v16 = v15;
      v17 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      v18 = objc_opt_respondsToSelector();

      if ((v18 & 1) == 0)
        goto LABEL_15;
      -[UITableView _dragDestinationDelegateProxy](self, "_dragDestinationDelegateProxy");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "_tableView:canHandleDropSession:", self, v4);
    }
    v19 = v14;

    if ((v19 & 1) != 0)
    {
LABEL_15:
      LOBYTE(v20) = 1;
      goto LABEL_19;
    }
  }
  -[_UITableViewDragController draggedIndexPath](self->_dragController, "draggedIndexPath");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[UITableView _canMoveRowAtIndexPath:](self, "_canMoveRowAtIndexPath:", v21);
  if (v20)
    -[_UITableViewDropController setCanOnlyHandleReordering:](self->_dropController, "setCanOnlyHandleReordering:", 1);

LABEL_19:
  return v20;
}

- (void)_dropEntered:(id)a3
{
  id WeakRetained;
  void *v5;
  id v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  char v12;
  id v13;

  v13 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v6 = objc_loadWeakRetained((id *)&self->_dropDelegate);
    v7 = objc_opt_respondsToSelector();

    if ((v7 & 1) != 0)
    {
      -[UITableView _dropDelegateProxy](self, "_dropDelegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "tableView:dropSessionDidEnter:", self, v13);
LABEL_7:

      goto LABEL_8;
    }
  }
  v9 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v9)
  {
    v10 = v9;
    v11 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    v12 = objc_opt_respondsToSelector();

    if ((v12 & 1) != 0)
    {
      -[UITableView _dragDestinationDelegateProxy](self, "_dragDestinationDelegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_tableView:dropSessionDidEnter:", self, v13);
      goto LABEL_7;
    }
  }
LABEL_8:

}

- (id)_targetIndexPathForDrop:(id)a3
{
  CGFloat v4;
  CGFloat v5;

  objc_msgSend(a3, "locationInView:", self);
  return -[UITableViewRowData targetIndexPathForPoint:adjustedForGap:]((uint64_t)self->_rowData, 1, v4, v5);
}

- (int64_t)_dataOwnerForDropSession:(id)a3 atIndexPath:(id)a4
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  id v10;
  char v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  char v17;
  int64_t v18;

  v6 = a3;
  v7 = a4;
  if (!_UIShouldEnforceOpenInRulesInAccountBasedApp())
    goto LABEL_9;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (!WeakRetained
    || (v9 = WeakRetained,
        v10 = objc_loadWeakRetained((id *)&self->_dropDelegate),
        v11 = objc_opt_respondsToSelector(),
        v10,
        v9,
        (v11 & 1) == 0))
  {
    v14 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    if (v14)
    {
      v15 = v14;
      v16 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      v17 = objc_opt_respondsToSelector();

      if ((v17 & 1) != 0)
      {
        -[UITableView _dragDestinationDelegateProxy](self, "_dragDestinationDelegateProxy");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "__tableView:dataOwnerForDropSession:withDestinationIndexPath:", self, v6, v7);
        goto LABEL_8;
      }
    }
LABEL_9:
    v18 = 0;
    goto LABEL_10;
  }
  -[UITableView _dropDelegateProxy](self, "_dropDelegateProxy");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "_tableView:dataOwnerForDropSession:withDestinationIndexPath:", self, v6, v7);
LABEL_8:
  v18 = v13;

LABEL_10:
  return v18;
}

- (id)_updatedDropProposalForIndexPath:(id)a3 dropSession:(id)a4 withDefaultProposal:(id)a5
{
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  unsigned int v16;
  _BOOL4 v18;
  int v19;
  UITableViewRowData *rowData;
  UITableViewRowData *v21;
  UITableViewRowData *v22;
  UITableViewRowData *v23;
  id WeakRetained;
  char v25;
  id v26;
  id v27;
  id v28;
  BOOL v29;
  BOOL v30;
  int v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  char v37;
  void *v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  char v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  void *v49;
  BOOL v50;
  _BOOL4 v51;
  uint64_t v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v61;
  id v62;
  int v63;
  SEL v64;
  _BOOL4 v65;
  void *v66;
  id v67;

  v9 = a3;
  v67 = a4;
  v10 = a5;
  v11 = objc_msgSend(v10, "operation");
  v12 = objc_msgSend(v10, "intent");
  -[_UITableViewDragController indexPaths](self->_dragController, "indexPaths");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  v64 = a2;
  if (v9 && objc_msgSend(v13, "count"))
    v15 = objc_msgSend(v14, "containsObject:", v9);
  else
    v15 = 0;
  if (objc_msgSend(v14, "count") == 1)
  {
    v16 = *((unsigned __int8 *)&self->_tableFlags + 3);
    if ((v15 & ((v16 & 4) >> 2)) == 1 && v11 == 3)
    {
      rowData = self->_rowData;
      if (rowData)
        rowData = (UITableViewRowData *)rowData->_draggedIndexPath;
      v21 = rowData;
      v18 = v21 == 0;

      v19 = 1;
    }
    else
    {
      v18 = 0;
      v19 = (v16 >> 2) & 1;
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v65 = v18;
  if (v15 && !v18)
  {
    v22 = self->_rowData;
    if (v22)
      v22 = (UITableViewRowData *)v22->_draggedIndexPath;
    v23 = v22;

    if (v23)
      v12 = 1;
    else
      v11 = 1;
LABEL_34:
    v27 = v10;
    if (!v11)
      goto LABEL_69;
    goto LABEL_66;
  }
  v63 = v19;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (WeakRetained)
  {
    v25 = 1;
  }
  else
  {
    v26 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    if (v26)
    {
      v62 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v25 = 1;
      }
      else
      {
        v61 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
        v25 = objc_opt_respondsToSelector();

      }
    }
    else
    {
      v25 = 0;
    }

  }
  if ((unint64_t)objc_msgSend(v14, "count") >= 2 && (v25 & 1) == 0)
  {
    v11 = 1;
    goto LABEL_34;
  }
  v28 = v9;
  if (v9)
    v29 = v11 == 0;
  else
    v29 = 1;
  v30 = v29 || v11 == 1;
  v31 = v63 ^ 1;
  if (v30)
    v31 = 1;
  if (((v31 | v18) & 1) == 0)
  {
    -[UITableView _resolvedDropProposalAfterAdditionalHitTestingForIndexPath:dropSession:dropOperation:dropIntent:dropProposal:](self, "_resolvedDropProposalAfterAdditionalHitTestingForIndexPath:dropSession:dropOperation:dropIntent:dropProposal:", v28, v67, v11, 1, v10);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "_adjustedTargetIndexPath");
    v33 = objc_claimAutoreleasedReturnValue();

    v28 = (id)v33;
  }
  v34 = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (v34)
  {
    v35 = v34;
    v36 = objc_loadWeakRetained((id *)&self->_dropDelegate);
    v37 = objc_opt_respondsToSelector();

    if ((v37 & 1) != 0)
    {
      -[UITableView _dropDelegateProxy](self, "_dropDelegateProxy");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "tableView:dropSessionDidUpdate:withDestinationIndexPath:", self, v67, v28);
      v39 = objc_claimAutoreleasedReturnValue();
LABEL_53:
      v44 = (void *)v39;

      v27 = v10;
      if (v44)
      {
        v27 = v44;

        v11 = objc_msgSend(v27, "operation");
        v12 = objc_msgSend(v27, "intent");
      }

      goto LABEL_65;
    }
  }
  v40 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v40)
  {
    v41 = v40;
    v42 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    v43 = objc_opt_respondsToSelector();

    if ((v43 & 1) != 0)
    {
      -[UITableView _dragDestinationDelegateProxy](self, "_dragDestinationDelegateProxy");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "_tableView:dropSessionDidUpdate:withDestinationIndexPath:", self, v67, v28);
      v39 = objc_claimAutoreleasedReturnValue();
      goto LABEL_53;
    }
  }
  v45 = objc_msgSend(v14, "count");
  if (v63)
    v46 = 1;
  else
    v46 = v12;
  if (v63)
    v47 = v11;
  else
    v47 = 0;
  if (v45)
  {
    v12 = v46;
    v11 = v47;
  }
  v27 = v10;
LABEL_65:

  if (!v11)
    goto LABEL_69;
LABEL_66:
  if (v12 == 1 && (unint64_t)objc_msgSend(v14, "count") > 1)
    v11 = 1;
LABEL_69:
  v48 = v9;
  v49 = v48;
  if (v9)
    v50 = v11 == 3;
  else
    v50 = 0;
  v51 = v50 && v65;
  if (v51 && v12 == 1)
  {
    v11 = 3;
    v52 = 1;
LABEL_78:
    v53 = v48;
    goto LABEL_82;
  }
  v52 = 0;
  if (!v9 || v11 < 2)
    goto LABEL_78;
  -[UITableView _resolvedDropProposalAfterAdditionalHitTestingForIndexPath:dropSession:dropOperation:dropIntent:dropProposal:](self, "_resolvedDropProposalAfterAdditionalHitTestingForIndexPath:dropSession:dropOperation:dropIntent:dropProposal:", v48, v67, v11, v12, v27);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v54, "operation");
  v52 = objc_msgSend(v54, "intent");
  objc_msgSend(v54, "_adjustedTargetIndexPath");
  v53 = (id)objc_claimAutoreleasedReturnValue();

LABEL_82:
  -[_UITableViewDragController draggedIndexPath](self->_dragController, "draggedIndexPath");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = v55;
  if (v55)
  {
    if (!v53)
    {
      v53 = v55;
      v52 = 1;
      goto LABEL_88;
    }
    -[UITableView _retargetedReorderIndexPathForInitialIndexPath:proposedIndexPath:](self, "_retargetedReorderIndexPathForInitialIndexPath:proposedIndexPath:", v55, v53);
    v57 = objc_claimAutoreleasedReturnValue();

    v53 = (id)v57;
  }
  if (v52 == 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    _UITableViewStringFromDropIntent(3uLL);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "handleFailureInMethod:object:file:lineNumber:description:", v64, self, CFSTR("UITableView.m"), 14986, CFSTR("UITableView internal inconsistency: %@ must be resolved to a concrete value"), v66);

  }
LABEL_88:
  objc_msgSend(v27, "_updatedDropProposalWithDropOperation:dropIntent:adjustedTargetIndexPath:", v11, v52, v53);
  v59 = (void *)objc_claimAutoreleasedReturnValue();

  return v59;
}

- (id)_resolvedDropProposalAfterAdditionalHitTestingForIndexPath:(id)a3 dropSession:(id)a4 dropOperation:(unint64_t)a5 dropIntent:(int64_t)a6 dropProposal:(id)a7
{
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  UITableViewRowData *rowData;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  CGFloat v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v37;
  uint64_t v38;
  SEL v39;
  void *v40;
  void *v41;
  const char *v42;

  v13 = a3;
  v14 = a4;
  v15 = a7;
  v16 = v13;
  v17 = objc_msgSend(v16, "row");
  if (v17 < -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, objc_msgSend(v16, "section")))
  {
    v18 = 0.2;
    if (a6 != 3)
      v18 = 0.0;
    if (a6 == 1)
      v19 = 0.5;
    else
      v19 = v18;
    if (v19 <= 0.0)
    {
      v23 = v16;
      goto LABEL_32;
    }
    -[_UITableViewDragController draggedIndexPath](self->_dragController, "draggedIndexPath", v18);
    v20 = objc_claimAutoreleasedReturnValue();
    v41 = (void *)v20;
    v42 = a2;
    if (v20)
    {
      v21 = objc_msgSend(v16, "section");
      if (v21 == objc_msgSend((id)v20, "section"))
      {
        v22 = objc_msgSend(v16, "row");
        LODWORD(v20) = v22 > objc_msgSend((id)v20, "row");
      }
      else
      {
        LODWORD(v20) = 0;
      }
    }
    rowData = self->_rowData;
    v25 = objc_msgSend(v16, "row");
    v26 = objc_msgSend(v16, "section");
    if (rowData)
      v27 = -[UITableViewRowData heightForRow:inSection:canGuess:adjustForReorderedRow:]((uint64_t)rowData, v25, v26, 1, 1);
    else
      v27 = 0.0;
    v28 = v19 * v27;
    objc_msgSend(v14, "locationInView:", self);
    v31 = -[UITableViewRowData dropLocationForPoint:atIndexPath:withInsets:]((uint64_t)self->_rowData, v16, v29, v30, v28, 0.0, v28, 0.0);
    a2 = v42;
    if (v31 == 1)
    {
      v32 = v41;
      if ((v20 & 1) == 0)
      {
        v33 = (void *)MEMORY[0x1E0CB36B0];
        v34 = objc_msgSend(v16, "row") + 1;
        goto LABEL_30;
      }
    }
    else
    {
      v32 = v41;
      if (!v31)
      {
        if (a6 == 3)
          a6 = 2;
        goto LABEL_28;
      }
      v23 = v16;
      if (v31 != -1)
      {
LABEL_31:

LABEL_32:
        if (a6 == 3)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", v18);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          _UITableViewStringFromDropIntent(3uLL);
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = a2;
          v40 = (void *)v38;
          objc_msgSend(v37, "handleFailureInMethod:object:file:lineNumber:description:", v39, self, CFSTR("UITableView.m"), 15052, CFSTR("UITableView internal inconsistency: %@ must be resolved to a concrete value"), v38);

        }
        goto LABEL_34;
      }
      if ((_DWORD)v20)
      {
        v33 = (void *)MEMORY[0x1E0CB36B0];
        v34 = objc_msgSend(v16, "row") - 1;
LABEL_30:
        objc_msgSend(v33, "indexPathForRow:inSection:", v34, objc_msgSend(v16, "section"));
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        a6 = 1;
        goto LABEL_31;
      }
    }
    a6 = 1;
LABEL_28:
    v23 = v16;
    goto LABEL_31;
  }
  if (a6 == 3)
    a6 = 1;
  v23 = v16;
LABEL_34:
  objc_msgSend(v15, "_updatedDropProposalWithDropOperation:dropIntent:adjustedTargetIndexPath:", a5, a6, v23);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  return v35;
}

- (void)_updateDropTargetAppearanceWithTargetIndexPath:(id)a3 dropProposal:(id)a4 dropSession:(id)a5
{
  uint64_t v7;
  void *v8;
  UITableViewRowData *rowData;
  UITableViewRowData *v10;
  _BOOL4 v11;
  void *v12;
  unint64_t v13;
  UITableViewRowData *v14;
  int v15;
  BOOL v16;
  void *v17;
  BOOL v18;
  UITableViewRowData *v19;
  id v21;
  id v22;

  v22 = a3;
  v7 = objc_msgSend(a4, "_dropAction");
  -[_UITableViewDragController draggedCell](self->_dragController, "draggedCell");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  rowData = self->_rowData;
  if (rowData)
    rowData = (UITableViewRowData *)rowData->_gapIndexPath;
  v10 = rowData;
  v11 = v10 != 0;

  -[_UITableViewDragController indexPaths](self->_dragController, "indexPaths");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "count");

  if (v13 > 1)
  {
    v14 = self->_rowData;
    if (v14)
    {
      -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
      v14->_gapRowHeight = 0.0;
    }
    -[UITableView _endDragAndDropReordering](self, "_endDragAndDropReordering");
    if (v7 == 3)
      goto LABEL_7;
    v11 = 0;
    v15 = 0;
    goto LABEL_21;
  }
  if (v22 && !v7)
  {
    v15 = 1;
LABEL_21:
    -[_UITableViewDragController draggedIndexPath](self->_dragController, "draggedIndexPath");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
      v18 = v15 == 0;
    else
      v18 = 1;
    if (!v18)
      -[UITableView _beginDragAndDropReorderingOfIndexPath:cell:](self, "_beginDragAndDropReorderingOfIndexPath:cell:", v17, v8);
    if (((v11 | v15 ^ 1) & 1) != 0)
    {
      if (((!v11 | v15) & 1) != 0)
      {
        if ((v11 & v15) == 1 && v7 != 1)
          -[UITableViewRowData moveDropTargetGapToIndexPath:]((uint64_t)self->_rowData, v22);
      }
      else
      {
        v19 = self->_rowData;
        if (v19)
        {
          -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
          v19->_gapRowHeight = 0.0;
        }
      }
    }
    else
    {
      -[UITableViewRowData addDropTargetGapAtIndexPath:]((uint64_t)self->_rowData, v22);
    }

    goto LABEL_35;
  }
  if (v10)
    v16 = v7 == 1;
  else
    v16 = 0;
  v15 = v16;
  if (v7 != 3)
    goto LABEL_21;
  if (!v10)
LABEL_7:
    -[UITableView _endDragAndDropReordering](self, "_endDragAndDropReordering");
LABEL_35:
  -[UITableView _updateTopSeparatorForVisibleCells](self, "_updateTopSeparatorForVisibleCells");
  if (v7 != 1 || v22 == 0)
    v21 = 0;
  else
    v21 = v22;
  -[UITableView _updateDropStateForVisibleCellsForActiveDrop:dropTargetIndexPath:](self, "_updateDropStateForVisibleCellsForActiveDrop:dropTargetIndexPath:", v7 != 3, v21);
  -[UITableView _animateTableViewContentToNewLayoutWithDuration:reorderingCell:additionalAnimations:](self, "_animateTableViewContentToNewLayoutWithDuration:reorderingCell:additionalAnimations:", v8, 0, 0.3);

}

- (void)_removeDropTargetAndResetAppearance
{
  UITableViewRowData *rowData;

  rowData = self->_rowData;
  if (rowData)
  {
    -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
    rowData->_gapRowHeight = 0.0;
  }
  -[UITableView _endDragAndDropReordering](self, "_endDragAndDropReordering");
  -[UITableView _updateTopSeparatorForVisibleCells](self, "_updateTopSeparatorForVisibleCells");
  -[UITableView _updateDropStateForVisibleCellsForActiveDrop:dropTargetIndexPath:](self, "_updateDropStateForVisibleCellsForActiveDrop:dropTargetIndexPath:", 0, 0);
  -[UITableView _animateTableViewContentToNewLayout](self, "_animateTableViewContentToNewLayout");
}

- (void)_beginDragAndDropReorderingOfIndexPath:(id)a3 cell:(id)a4
{
  UITableViewRowData *rowData;
  id v7;
  id v8;

  rowData = self->_rowData;
  v8 = a4;
  v7 = a3;
  -[UITableViewRowData setDraggedIndexPath:]((uint64_t)rowData, v7);
  -[UITableView _updateDragStateForCell:atIndexPath:](self, "_updateDragStateForCell:atIndexPath:", v8, v7);

  -[_UITableViewSubviewManager setReorderingCell:]((id *)&self->_subviewManager->super.isa, v8);
}

- (void)_endDragAndDropReordering
{
  -[UITableViewRowData setDraggedIndexPath:]((uint64_t)self->_rowData, 0);
  -[_UITableViewSubviewManager setReorderingCell:]((id *)&self->_subviewManager->super.isa, 0);
}

- (void)_dropExited:(id)a3
{
  id WeakRetained;
  void *v5;
  id v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  char v12;
  id v13;

  v13 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v6 = objc_loadWeakRetained((id *)&self->_dropDelegate);
    v7 = objc_opt_respondsToSelector();

    if ((v7 & 1) != 0)
    {
      -[UITableView _dropDelegateProxy](self, "_dropDelegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "tableView:dropSessionDidExit:", self, v13);
LABEL_7:

      goto LABEL_8;
    }
  }
  v9 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v9)
  {
    v10 = v9;
    v11 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    v12 = objc_opt_respondsToSelector();

    if ((v12 & 1) != 0)
    {
      -[UITableView _dragDestinationDelegateProxy](self, "_dragDestinationDelegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_tableView:dropSessionDidExit:", self, v13);
      goto LABEL_7;
    }
  }
LABEL_8:

}

- (void)_dropEnded:(id)a3
{
  id WeakRetained;
  void *v5;
  id v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  char v12;
  id v13;

  v13 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v6 = objc_loadWeakRetained((id *)&self->_dropDelegate);
    v7 = objc_opt_respondsToSelector();

    if ((v7 & 1) != 0)
    {
      -[UITableView _dropDelegateProxy](self, "_dropDelegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "tableView:dropSessionDidEnd:", self, v13);
LABEL_7:

      goto LABEL_8;
    }
  }
  v9 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v9)
  {
    v10 = v9;
    v11 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    v12 = objc_opt_respondsToSelector();

    if ((v12 & 1) != 0)
    {
      -[UITableView _dragDestinationDelegateProxy](self, "_dragDestinationDelegateProxy");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_tableView:dropSessionDidEnd:", self, v13);
      goto LABEL_7;
    }
  }
LABEL_8:

}

- (void)_performDrop:(id)a3 withDropCoordinator:(id)a4 forceHandleAsReorder:(BOOL)a5
{
  id v8;
  void *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  void *v16;
  uint64_t v17;
  id WeakRetained;
  void *v19;
  id v20;
  void *v21;
  id v22;
  char v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  int v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  UITableView *v46;
  void *v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[5];
  id v54;
  id v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  objc_msgSend(v8, "proposal");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "operation");

  if (v10 <= 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(a2);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15197, CFSTR("UITableView internal inconsistency: the drop action should never be Cancel or Forbidden in %@"), v41);

  }
  objc_msgSend(v8, "proposal");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "intent");

  if (v12 == 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    _UITableViewStringFromDropIntent(3uLL);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(a2);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15199, CFSTR("UITableView internal inconsistency: the drop action should never be %@ in %@"), v43, v44);

  }
  -[_UITableViewDragController draggedIndexPath](self->_dragController, "draggedIndexPath");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
    v14 = v10 == 3;
  else
    v14 = 0;
  if (v14 && v12 == 1)
  {
    objc_msgSend(v8, "items");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "count");

    if (v17 == 1)
    {
      if (dyld_program_sdk_at_least())
      {
        if (!-[UITableView _canMoveRowAtIndexPath:](self, "_canMoveRowAtIndexPath:", v13))
          goto LABEL_16;
LABEL_24:
        objc_msgSend(v8, "destinationIndexPath");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v53[0] = MEMORY[0x1E0C809B0];
        v53[1] = 3221225472;
        v53[2] = __69__UITableView__performDrop_withDropCoordinator_forceHandleAsReorder___block_invoke;
        v53[3] = &unk_1E16B47A8;
        v53[4] = self;
        v25 = v13;
        v54 = v25;
        v26 = v24;
        v55 = v26;
        -[UITableView _performInternalBatchUpdates:](self, "_performInternalBatchUpdates:", v53);
        v48 = v26;
        -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v26, 1);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        if (v47)
        {
          v45 = v13;
          v46 = self;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v27 = v8;
          objc_msgSend(v8, "items");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v49, v56, 16);
          if (v29)
          {
            v30 = v29;
            v31 = *(_QWORD *)v50;
            do
            {
              for (i = 0; i != v30; ++i)
              {
                if (*(_QWORD *)v50 != v31)
                  objc_enumerationMutation(v28);
                v33 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * i);
                objc_msgSend(v33, "sourceIndexPath");
                v34 = objc_claimAutoreleasedReturnValue();
                if (v34)
                {
                  v35 = (void *)v34;
                  objc_msgSend(v33, "sourceIndexPath");
                  v36 = (void *)objc_claimAutoreleasedReturnValue();
                  v37 = objc_msgSend(v25, "isEqual:", v36);

                  if (v37)
                  {
                    -[UITableView _dropPreviewParametersForIndexPath:](v46, "_dropPreviewParametersForIndexPath:", v48);
                    v38 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v33, "dragItem");
                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v27, "_dropItem:toCell:withPreviewParameters:", v39, v47, v38);

                  }
                }
              }
              v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v49, v56, 16);
            }
            while (v30);
          }

          v8 = v27;
          v13 = v45;
        }

        goto LABEL_37;
      }
      if ((*((_BYTE *)&self->_tableFlags + 3) & 4) != 0)
        goto LABEL_24;
    }
  }
LABEL_16:
  if (!a5)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);

    if (WeakRetained)
    {
      -[UITableView _dropDelegateProxy](self, "_dropDelegateProxy");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "tableView:performDropWithCoordinator:", self, v8);
LABEL_19:

      goto LABEL_37;
    }
    v20 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    if (v20)
    {
      v21 = v20;
      v22 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      v23 = objc_opt_respondsToSelector();

      if ((v23 & 1) != 0)
      {
        -[UITableView _dragDestinationDelegateProxy](self, "_dragDestinationDelegateProxy");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "_tableView:performDropWithCoordinator:", self, v8);
        goto LABEL_19;
      }
    }
  }
LABEL_37:

}

void __69__UITableView__performDrop_withDropCoordinator_forceHandleAsReorder___block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __69__UITableView__performDrop_withDropCoordinator_forceHandleAsReorder___block_invoke_2;
  v3[3] = &unk_1E16B47A8;
  v2 = *(void **)(a1 + 40);
  v4 = *(id *)(a1 + 32);
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v4, "performBatchUpdates:completion:", v3, 0);

}

id __69__UITableView__performDrop_withDropCoordinator_forceHandleAsReorder___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_notifyDataSourceForMoveOfRowFromIndexPath:toIndexPath:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return (id)objc_msgSend(*(id *)(a1 + 32), "_moveRowAtIndexPath:toIndexPath:usingPresentationValues:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 1);
}

- (id)_dropPreviewParametersForIndexPath:(id)a3
{
  id v4;
  id WeakRetained;
  char v6;
  void *v7;
  void *v8;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) != 0)
  {
    -[UITableView _dropDelegateProxy](self, "_dropDelegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "tableView:dropPreviewParametersForRowAtIndexPath:", self, v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (id)_beginAnimatingDropOfCell:(id)a3 isCanceling:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  _UITableViewDropAnimationContainerView *v7;
  double v8;

  v4 = a4;
  v6 = a3;
  -[_UITableViewSubviewManager preventReuseOfCell:]((uint64_t)self->_subviewManager, (uint64_t)v6);
  objc_msgSend(v6, "_dropAnimationContainerView");
  v7 = (_UITableViewDropAnimationContainerView *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    v7 = objc_alloc_init(_UITableViewDropAnimationContainerView);
    objc_msgSend(v6, "_setDropAnimationContainerView:", v7);
    v8 = 0.0;
    if (v4)
      v8 = 1.0;
    -[UIView setAlpha:](v7, "setAlpha:", v8);
  }
  -[_UITableViewDropAnimationContainerView beginDropAnimation](v7, "beginDropAnimation");

  return v7;
}

- (void)_endAnimatingDropOfCell:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(v5, "_dropAnimationContainerView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(a2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15285, CFSTR("UITableView internal inconsistency: there should always be a drop animation container view for the cell in %@. Cell: %@"), v18, v5);

  }
  objc_msgSend(v6, "endDropAnimation");
  if (objc_msgSend(v6, "hasCompletedAllDropAnimations"))
  {
    objc_msgSend(v6, "cells");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v24 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "_setDropAnimationContainerView:", 0);
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      }
      while (v9);
    }
    objc_msgSend(v6, "removeFromSuperview");
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v12 = v7;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v20;
      do
      {
        for (j = 0; j != v14; ++j)
        {
          if (*(_QWORD *)v20 != v15)
            objc_enumerationMutation(v12);
          -[_UITableViewSubviewManager resumeReuseOfCell:]((id *)&self->_subviewManager->super.isa, *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * j));
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
      }
      while (v14);
    }

  }
}

- (void)_beginAnimatingDropIntoCell:(id)a3
{
  -[_UITableViewSubviewManager preventReuseOfCell:]((uint64_t)self->_subviewManager, (uint64_t)a3);
}

- (void)_endAnimatingDropIntoCell:(id)a3
{
  -[_UITableViewSubviewManager resumeReuseOfCell:]((id *)&self->_subviewManager->super.isa, (uint64_t)a3);
}

- (NSMutableArray)_placeholderContexts
{
  NSMutableArray *placeholderContexts;
  NSMutableArray *v4;
  NSMutableArray *v5;

  placeholderContexts = self->_placeholderContexts;
  if (!placeholderContexts)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v4 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    v5 = self->_placeholderContexts;
    self->_placeholderContexts = v4;

    placeholderContexts = self->_placeholderContexts;
  }
  return placeholderContexts;
}

- (id)_placeholderContextForIndexPath:(id)a3
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  id v13;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15364, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("indexPath != nil"));

  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[UITableView _placeholderContexts](self, "_placeholderContexts");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        -[UITableView _currentIndexPathForPlaceholder:](self, "_currentIndexPathForPlaceholder:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v12, "isEqual:", v5) & 1) != 0)
        {
          v13 = v11;

          goto LABEL_13;
        }

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v8)
        continue;
      break;
    }
  }
  v13 = 0;
LABEL_13:

  return v13;
}

- (id)_shadowUpdateForPlaceholder:(id)a3
{
  id v5;
  int has_internal_diagnostics;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  -[UITableView _placeholderContexts](self, "_placeholderContexts");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "containsObject:", v5);

  if (has_internal_diagnostics)
  {
    if ((v8 & 1) != 0)
      goto LABEL_3;
    __UIFaultDebugAssertLog();
    v13 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      goto LABEL_16;
    NSStringFromSelector(a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138412290;
    v20 = v14;
    _os_log_fault_impl(&dword_185066000, v13, OS_LOG_TYPE_FAULT, "%@ should never be called with a placeholder context that isn't contained in the placeholderContexts array", (uint8_t *)&v19, 0xCu);
LABEL_15:

LABEL_16:
    goto LABEL_3;
  }
  if ((v8 & 1) == 0)
  {
    v17 = _shadowUpdateForPlaceholder____s_category;
    if (!_shadowUpdateForPlaceholder____s_category)
    {
      v17 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v17, (unint64_t *)&_shadowUpdateForPlaceholder____s_category);
    }
    v18 = *(NSObject **)(v17 + 8);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v13 = v18;
      NSStringFromSelector(a2);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138412290;
      v20 = v14;
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "%@ should never be called with a placeholder context that isn't contained in the placeholderContexts array", (uint8_t *)&v19, 0xCu);
      goto LABEL_15;
    }
  }
LABEL_3:
  objc_msgSend(v5, "_shadowUpdateIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15381, CFSTR("UITableView internal inconsistency: cannot get the shadow update for a placeholder that was not inserted (missing shadow update identifier)"));

  }
  -[UITableView _shadowUpdatesController](self, "_shadowUpdatesController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "shadowUpdateWithIdentifier:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15385, CFSTR("UITableView internal inconsistency: cannot get the shadow update for a placeholder that was not inserted (missing shadow update)"));

  }
  return v11;
}

- (id)_currentIndexPathForPlaceholder:(id)a3
{
  id v5;
  int has_internal_diagnostics;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  NSObject *v12;
  void *v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  -[UITableView _placeholderContexts](self, "_placeholderContexts");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "containsObject:", v5);

  if (has_internal_diagnostics)
  {
    if ((v8 & 1) == 0)
    {
      __UIFaultDebugAssertLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      {
LABEL_12:

        goto LABEL_3;
      }
      NSStringFromSelector(a2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138412290;
      v17 = v13;
      _os_log_fault_impl(&dword_185066000, v12, OS_LOG_TYPE_FAULT, "%@ should never be called with a placeholder context that isn't contained in the placeholderContexts array", (uint8_t *)&v16, 0xCu);
LABEL_11:

      goto LABEL_12;
    }
  }
  else if ((v8 & 1) == 0)
  {
    v14 = _currentIndexPathForPlaceholder____s_category;
    if (!_currentIndexPathForPlaceholder____s_category)
    {
      v14 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v14, (unint64_t *)&_currentIndexPathForPlaceholder____s_category);
    }
    v15 = *(NSObject **)(v14 + 8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v12 = v15;
      NSStringFromSelector(a2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138412290;
      v17 = v13;
      _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "%@ should never be called with a placeholder context that isn't contained in the placeholderContexts array", (uint8_t *)&v16, 0xCu);
      goto LABEL_11;
    }
  }
LABEL_3:
  -[UITableView _shadowUpdateForPlaceholder:](self, "_shadowUpdateForPlaceholder:", v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _currentIndexPathForExistingShadowInsertUpdate:](self, "_currentIndexPathForExistingShadowInsertUpdate:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (id)_insertPlaceholderAtIndexPath:(id)a3 withContext:(id)a4
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v18;
  _QWORD v19[5];
  id v20;
  id v21;
  SEL v22;

  v7 = a4;
  v8 = a3;
  -[UITableView _shadowUpdatesController](self, "_shadowUpdatesController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "indexPathAfterShadowUpdates:allowAppendingInsert:", v8, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15406, CFSTR("UITableView internal inconsistency: the insertion index path for a placeholder cannot be nil"));

  }
  -[UITableView _placeholderContexts](self, "_placeholderContexts");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addObject:", v7);

  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __57__UITableView__insertPlaceholderAtIndexPath_withContext___block_invoke;
  v19[3] = &unk_1E16C5CA0;
  v19[4] = self;
  v12 = v10;
  v21 = v7;
  v22 = a2;
  v20 = v12;
  v13 = v7;
  v14 = -[UITableView _performShadowUpdates:](self, "_performShadowUpdates:", v19);
  v15 = v21;
  v16 = v12;

  return v16;
}

void __57__UITableView__insertPlaceholderAtIndexPath_withContext___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v7[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_updateRowsAtIndexPaths:withUpdateAction:rowAnimation:usingPresentationValues:", v3, 0, 0, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("UITableView.m"), 15413, CFSTR("UITableView internal inconsistency: missing identifier for placeholder insertion update"));

  }
  objc_msgSend(*(id *)(a1 + 48), "_setShadowUpdateIdentifier:", v5);

}

- (id)_deletePlaceholderForContext:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  _QWORD v10[5];
  id v11;

  v4 = a3;
  -[UITableView _placeholderContexts](self, "_placeholderContexts");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "containsObject:", v4);

  if (v6)
  {
    -[UITableView _shadowUpdateForPlaceholder:](self, "_shadowUpdateForPlaceholder:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __44__UITableView__deletePlaceholderForContext___block_invoke;
    v10[3] = &unk_1E16B1B50;
    v10[4] = self;
    v11 = v4;
    -[UITableView _revertExistingShadowInsertUpdate:withAlongsideUpdates:](self, "_revertExistingShadowInsertUpdate:withAlongsideUpdates:", v7, v10);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void __44__UITableView__deletePlaceholderForContext___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_placeholderContexts");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

}

- (void)_deleteAllPlaceholderCells
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  -[UITableView _placeholderContexts](self, "_placeholderContexts");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        v10 = -[UITableView _deletePlaceholderForContext:](self, "_deletePlaceholderForContext:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v9++), (_QWORD)v11);
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v7);
  }

}

- (BOOL)_commitPlaceholderInsertionWithContext:(id)a3 dataSourceUpdates:(id)a4
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  _QWORD *v22;
  id v23;
  void *v24;
  void *v25;
  void *v27;
  void *v28;
  _QWORD *v29;
  id v30;
  void *v31;
  void *v32;
  SEL v33;
  char v34;
  char v35;
  void *v36;
  _QWORD v37[5];
  id v38;
  id v39;
  id v40;

  v7 = a3;
  v8 = a4;
  -[UITableView _placeholderContexts](self, "_placeholderContexts");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v10) = objc_msgSend(v9, "containsObject:", v7);

  if ((_DWORD)v10)
  {
    -[UITableView _shadowUpdateForPlaceholder:](self, "_shadowUpdateForPlaceholder:", v7);
    v11 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    -[UITableView _shadowUpdatesController](self, "_shadowUpdatesController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[UICollectionViewUpdateItem _indexPath](v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "indexPathBeforeShadowUpdates:startingBeforeUpdate:", v13, v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v14)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15458, CFSTR("UITableView internal inconsistency: the data source index path of a placeholder that exists should never be nil"));

    }
    v33 = a2;
    -[UITableView _currentIndexPathForExistingShadowInsertUpdate:](self, "_currentIndexPathForExistingShadowInsertUpdate:", v11);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v15, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v16)
    {
      objc_msgSend(v16, "_dropAnimationContainerView");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v36 = 0;
    }
    -[UITableView _deletePlaceholderForContext:](self, "_deletePlaceholderForContext:", v7);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v18)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v35 = (char)v10;
      v10 = v17;
      v28 = v15;
      v29 = v11;
      v30 = v8;
      v31 = v12;
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "handleFailureInMethod:object:file:lineNumber:description:", v33, self, CFSTR("UITableView.m"), 15469, CFSTR("UITableView internal inconsistency: the presentation index path of a placeholder that exists should never be nil"));

      v12 = v31;
      v8 = v30;
      v11 = v29;
      v15 = v28;
      v17 = v10;
      LOBYTE(v10) = v35;
    }
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3221225472;
    v37[2] = __72__UITableView__commitPlaceholderInsertionWithContext_dataSourceUpdates___block_invoke;
    v37[3] = &unk_1E16BE398;
    v37[4] = self;
    v19 = v14;
    v38 = v19;
    v40 = v8;
    v20 = v18;
    v39 = v20;
    -[UITableView _performInternalBatchUpdates:](self, "_performInternalBatchUpdates:", v37);
    if (v36)
    {
      v34 = (char)v10;
      v10 = v17;
      v21 = v15;
      v22 = v11;
      v23 = v8;
      v24 = v12;
      -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v20, 1);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (v25)
      {
        -[_UITableViewSubviewManager preventReuseOfCell:]((uint64_t)self->_subviewManager, (uint64_t)v25);
        objc_msgSend(v25, "_setDropAnimationContainerView:", v36);
      }

      v12 = v24;
      v8 = v23;
      v11 = v22;
      v15 = v21;
      v17 = v10;
      LOBYTE(v10) = v34;
    }

  }
  return (char)v10;
}

void __72__UITableView__commitPlaceholderInsertionWithContext_dataSourceUpdates___block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  id v7;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __72__UITableView__commitPlaceholderInsertionWithContext_dataSourceUpdates___block_invoke_2;
  v3[3] = &unk_1E16BE398;
  v2 = *(void **)(a1 + 40);
  v4 = *(id *)(a1 + 32);
  v5 = v2;
  v7 = *(id *)(a1 + 56);
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v4, "performBatchUpdates:completion:", v3, 0);

}

void __72__UITableView__commitPlaceholderInsertionWithContext_dataSourceUpdates___block_invoke_2(_QWORD *a1)
{
  UICollectionViewUpdateItem *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1[4] + 3107) & 0x20) != 0)
  {
    v2 = -[UICollectionViewUpdateItem initWithAction:forIndexPath:]([UICollectionViewUpdateItem alloc], "initWithAction:forIndexPath:", 0, a1[5]);
    v3 = a1[4];
    v4 = *(void **)(v3 + 2392);
    *(_QWORD *)(v3 + 2392) = v2;

    (*(void (**)(void))(a1[7] + 16))();
    v5 = a1[4];
    v6 = *(void **)(v5 + 2392);
    *(_QWORD *)(v5 + 2392) = 0;

  }
  else
  {
    (*(void (**)(void))(a1[7] + 16))();
  }
  v7 = (void *)a1[4];
  v10[0] = a1[6];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (id)objc_msgSend(v7, "_updateRowsAtIndexPaths:withUpdateAction:rowAnimation:usingPresentationValues:", v8, 0, 0, 1);

}

- (double)_heightForShadowRowAtIndexPath:(id)a3
{
  id v5;
  double rowHeight;
  void *v7;
  double v8;
  double v9;
  void *v11;

  v5 = a3;
  rowHeight = -1.0;
  if ((*((_BYTE *)&self->_tableFlags + 26) & 0x40) == 0)
  {
    -[UITableView _placeholderContextForIndexPath:](self, "_placeholderContextForIndexPath:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15527, CFSTR("UITableView internal inconsistency: missing placeholder context for this index path: %@"), v5);

    }
    objc_msgSend(v7, "rowHeight");
    rowHeight = v8;
    if (v8 == -1.0)
    {
      if ((*((_BYTE *)&self->_tableFlags + 24) & 0x10) != 0
        && -[UITableView _estimatesRowHeights](self, "_estimatesRowHeights"))
      {
        *((_QWORD *)&self->_tableFlags + 3) |= 0x400000uLL;
        -[UITableView _heightForRowAtIndexPath:](self, "_heightForRowAtIndexPath:", v5);
        rowHeight = v9;
        *((_QWORD *)&self->_tableFlags + 3) &= ~0x400000uLL;
      }
      else if (self->_rowHeight == -1.0)
      {
        rowHeight = 44.0;
      }
      else
      {
        rowHeight = self->_rowHeight;
      }
    }

  }
  return rowHeight;
}

- (id)_cellForShadowRowAtIndexPath:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v12;
  void *v13;

  v5 = a3;
  -[UITableView _placeholderContextForIndexPath:](self, "_placeholderContextForIndexPath:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15560, CFSTR("UITableView internal inconsistency: missing placeholder context for this index path: %@"), v5);

  }
  objc_msgSend(v6, "reuseIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView dequeueReusableCellWithIdentifier:](self, "dequeueReusableCellWithIdentifier:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15564, CFSTR("Unable to dequeue a placeholder cell with identifier %@ - must register a nib or a class for the identifier or connect a prototype cell in a storyboard"), v7);

  }
  objc_msgSend(v6, "cellUpdateHandler");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v9)
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v8);

  return v8;
}

- (id)_shadowUpdatesController
{
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  _UITableViewShadowUpdatesController *v4;
  _UITableViewShadowUpdatesController *v5;

  shadowUpdatesController = self->_shadowUpdatesController;
  if (!shadowUpdatesController)
  {
    v4 = -[_UITableViewShadowUpdatesController initWithTableView:]([_UITableViewShadowUpdatesController alloc], "initWithTableView:", self);
    v5 = self->_shadowUpdatesController;
    self->_shadowUpdatesController = v4;

    shadowUpdatesController = self->_shadowUpdatesController;
  }
  return shadowUpdatesController;
}

- (id)_performShadowUpdates:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v20;
  _QWORD v21[5];
  id v22;

  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15593, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("shadowUpdates != nil"));

  }
  -[UITableView _shadowUpdatesController](self, "_shadowUpdatesController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "shadowUpdates");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "count");

  v9 = *((_QWORD *)&self->_tableFlags + 3);
  v10 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&self->_tableFlags + 3) = v9 | 0x8000000;
  v21[0] = v10;
  v21[1] = 3221225472;
  v21[2] = __37__UITableView__performShadowUpdates___block_invoke;
  v21[3] = &unk_1E16B1D18;
  v21[4] = self;
  v11 = v5;
  v22 = v11;
  -[UITableView _performInternalBatchUpdates:](self, "_performInternalBatchUpdates:", v21);
  *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFF7FFFFFFLL | (((v9 >> 27) & 1) << 27);
  objc_msgSend(v6, "shadowUpdates");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "count");

  objc_msgSend(MEMORY[0x1E0CB3788], "indexSetWithIndexesInRange:", 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "removeIndexesInRange:", 0, v8);
  if (objc_msgSend(v14, "firstIndex") == 0x7FFFFFFFFFFFFFFFLL)
  {
    v15 = (void *)MEMORY[0x1E0C9AA60];
  }
  else
  {
    v16 = objc_msgSend(v14, "firstIndex");
    v17 = objc_msgSend(v14, "count");
    objc_msgSend(v6, "shadowUpdates");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "subarrayWithRange:", v16, v17);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v15;
}

uint64_t __37__UITableView__performShadowUpdates___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performBatchUpdates:completion:", *(_QWORD *)(a1 + 40), 0);
}

- (BOOL)_isPerformingRevertingShadowUpdates
{
  return (*((unsigned __int8 *)&self->_tableFlags + 27) >> 4) & 1;
}

- (void)_performRevertingShadowUpdates:(id)a3
{
  id v5;
  unint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;

  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15624, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("revertingShadowUpdates != nil"));

  }
  v6 = *((_QWORD *)&self->_tableFlags + 3);
  *((_QWORD *)&self->_tableFlags + 3) = v6 | 0x10000000;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __46__UITableView__performRevertingShadowUpdates___block_invoke;
  v9[3] = &unk_1E16B1D18;
  v9[4] = self;
  v10 = v5;
  v8 = v5;
  -[UITableView _performInternalBatchUpdates:](self, "_performInternalBatchUpdates:", v9);
  *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFFFEFFFFFFFLL | (((v6 >> 28) & 1) << 28);

}

uint64_t __46__UITableView__performRevertingShadowUpdates___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performBatchUpdates:completion:", *(_QWORD *)(a1 + 40), 0);
}

- (id)_currentIndexPathForExistingShadowInsertUpdate:(id)a3
{
  _QWORD *v5;
  void *v6;
  int has_internal_diagnostics;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  void *v13;
  NSObject *v14;
  void *v15;
  unint64_t v16;
  NSObject *v17;
  uint8_t buf[16];
  uint8_t v19[16];

  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15637, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("shadowInsertUpdate != nil"));

  }
  -[UITableView _shadowUpdatesController](self, "_shadowUpdatesController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  objc_msgSend(v6, "shadowUpdates");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "containsObject:", v5);

  if (has_internal_diagnostics)
  {
    if ((v9 & 1) == 0)
    {
      __UIFaultDebugAssertLog();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v19 = 0;
        _os_log_fault_impl(&dword_185066000, v14, OS_LOG_TYPE_FAULT, "Attempted to request the index path of an update that isn't actually an existing shadow update", v19, 2u);
      }

    }
  }
  else if ((v9 & 1) == 0)
  {
    v16 = _currentIndexPathForExistingShadowInsertUpdate____s_category;
    if (!_currentIndexPathForExistingShadowInsertUpdate____s_category)
    {
      v16 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v16, (unint64_t *)&_currentIndexPathForExistingShadowInsertUpdate____s_category);
    }
    v17 = *(NSObject **)(v16 + 8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, "Attempted to request the index path of an update that isn't actually an existing shadow update", buf, 2u);
    }
  }
  -[UICollectionViewUpdateItem _indexPath](v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "indexPathAfterShadowUpdates:startingAtUpdate:", v10, v5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15644, CFSTR("UITableView internal inconsistency: the current index path of an inserted shadow update should never be nil"));

  }
  return v11;
}

- (id)_revertExistingShadowInsertUpdate:(id)a3 withAlongsideUpdates:(id)a4
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  UITableView *v23;
  id v24;
  id v25;

  v7 = a3;
  v8 = a4;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15653, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("shadowInsertUpdate != nil"));

  }
  if (objc_msgSend(v7, "updateAction"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 15654, CFSTR("This method only supports reverting insertion shadow updates"));

  }
  -[UITableView _currentIndexPathForExistingShadowInsertUpdate:](self, "_currentIndexPathForExistingShadowInsertUpdate:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _shadowUpdatesController](self, "_shadowUpdatesController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __70__UITableView__revertExistingShadowInsertUpdate_withAlongsideUpdates___block_invoke;
  v20[3] = &unk_1E16E3F60;
  v21 = v10;
  v22 = v7;
  v25 = v8;
  v23 = self;
  v11 = v9;
  v24 = v11;
  v12 = v7;
  v13 = v10;
  v14 = v8;
  -[UITableView _performRevertingShadowUpdates:](self, "_performRevertingShadowUpdates:", v20);
  v15 = v24;
  v16 = v11;

  return v16;
}

void __70__UITableView__revertExistingShadowInsertUpdate_withAlongsideUpdates___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  objc_msgSend(*(id *)(a1 + 32), "removeShadowUpdate:", *(_QWORD *)(a1 + 40));
  v3 = *(void **)(a1 + 48);
  v6[0] = *(_QWORD *)(a1 + 56);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (id)objc_msgSend(v3, "_updateRowsAtIndexPaths:withUpdateAction:rowAnimation:usingPresentationValues:", v4, 1, 0, 1);

}

- (BOOL)_isReorderControlActiveForCell:(id)a3
{
  return !-[UITableView hasActiveDrag](self, "hasActiveDrag", a3);
}

- (BOOL)_beginReorderingForCell:(id)a3 touch:(id)a4
{
  id v8;
  id v9;
  int has_internal_diagnostics;
  BOOL v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  NSUInteger v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  _BOOL4 v30;
  void *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v38;
  void *v39;
  unint64_t v40;
  NSObject *v41;
  id obj;
  void *v43;
  _QWORD v44[7];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  uint8_t v50[128];
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  id v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v11 = -[UITableView _isReorderControlActiveForCell:](self, "_isReorderControlActiveForCell:", v8);
  if (has_internal_diagnostics)
  {
    if (v11)
      goto LABEL_3;
    __UIFaultDebugAssertLog();
    v38 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
      goto LABEL_41;
    NSStringFromSelector(a2);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v52 = v39;
    v53 = 2112;
    v54 = v8;
    _os_log_fault_impl(&dword_185066000, v38, OS_LOG_TYPE_FAULT, "It should not be possible for %@ to be called if the reorder control is not active for the cell: %@", buf, 0x16u);
LABEL_40:

LABEL_41:
    goto LABEL_3;
  }
  if (!v11)
  {
    v40 = _beginReorderingForCell_touch____s_category;
    if (!_beginReorderingForCell_touch____s_category)
    {
      v40 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v40, (unint64_t *)&_beginReorderingForCell_touch____s_category);
    }
    v41 = *(NSObject **)(v40 + 8);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v38 = v41;
      NSStringFromSelector(a2);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v52 = v39;
      v53 = 2112;
      v54 = v8;
      _os_log_impl(&dword_185066000, v38, OS_LOG_TYPE_ERROR, "It should not be possible for %@ to be called if the reorder control is not active for the cell: %@", buf, 0x16u);
      goto LABEL_40;
    }
  }
LABEL_3:
  if (-[UITableView _dragAndDropUsedForReordering](self, "_dragAndDropUsedForReordering"))
  {
    -[_UITableViewDragController immediatelyBeginDragWithTouch:](self->_dragController, "immediatelyBeginDragWithTouch:", v9);
    v12 = 0;
  }
  else
  {
    obj = a3;
    v43 = v9;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    objc_msgSend(v9, "gestureRecognizers");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v46 != v16)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
          if (_UISheetInteractionGestureIsForInteractiveDismiss(v18))
          {
            v19 = (void *)UIApp;
            v49 = v18;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v49, 1);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "_cancelGestureRecognizers:", v20);

          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
      }
      while (v15);
    }

    -[_UITableViewSubviewManager removeAllPrefetchedCells]((id *)&self->_subviewManager->super.isa);
    -[UITableView _beginAnimatingCells](self, "_beginAnimatingCells");
    if (objc_msgSend(v8, "_usingBackgroundViewConfiguration"))
      objc_msgSend(v8, "_setAnimating:", 0);
    else
      objc_msgSend(v8, "_setAnimating:clippingAdjacentCells:", 1, (*((_QWORD *)&self->_tableFlags + 2) >> 54) & 1);
    -[UITableView _reorderingSupport](self, "_reorderingSupport");
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = *(void **)(v21 + 8);
    *(_QWORD *)(v21 + 8) = 0;

    v23 = *(void **)(v21 + 16);
    *(_QWORD *)(v21 + 16) = 0;

    v24 = -[NSMutableArray indexOfObject:](self->_visibleCells, "indexOfObject:", v8);
    v12 = v24 != 0x7FFFFFFFFFFFFFFFLL;
    v9 = v43;
    if (v24 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v25 = self->_visibleRows.location + v24;
      objc_storeStrong((id *)(v21 + 8), obj);
      -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:", v25);
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = *(void **)(v21 + 16);
      *(_QWORD *)(v21 + 16) = v26;

      *(_BYTE *)(v21 + 32) &= 0xF3u;
      if ((*((_BYTE *)&self->_tableFlags + 8) & 0x40) != 0)
      {
        -[UITableView _delegateProxy](self, "_delegateProxy");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "tableView:willBeginReorderingRowAtIndexPath:", self, *(_QWORD *)(v21 + 16));

      }
      objc_storeStrong((id *)(v21 + 24), *(id *)(v21 + 16));
      -[UITableViewRowData setReorderedIndexPath:]((uint64_t)self->_rowData, *(void **)(v21 + 16));
      -[UITableViewRowData addGapAtIndexPath:]((uint64_t)self->_rowData, *(void **)(v21 + 16));
      -[UITableView _updateTopSeparatorForVisibleCells](self, "_updateTopSeparatorForVisibleCells");
      -[UITableView _cellContainerView](self, "_cellContainerView");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "bringSubviewToFront:", v8);

      if ((objc_msgSend(v8, "isSelected") & 1) == 0 && (objc_msgSend(v8, "isHighlighted") & 1) == 0)
      {
        objc_msgSend(v8, "_saveOpaqueViewState:", v8);
        objc_msgSend(v8, "_setOpaque:forSubview:", 0, v8);
      }
      if ((objc_msgSend(v8, "_usingBackgroundViewConfiguration") & 1) == 0)
      {
        -[UITableConstants defaultAlphaForReorderingCell](self->_constants, "defaultAlphaForReorderingCell");
        objc_msgSend(v8, "setAlpha:");
      }
      objc_msgSend(v8, "setSeparatorStyle:", 0);
      objc_msgSend(v8, "_setReordering:", 1);
      v30 = -[UIScrollView isScrollEnabled](self, "isScrollEnabled");
      *(_BYTE *)(v21 + 64) = v30;
      if (v30)
      {
        *(_BYTE *)(v21 + 65) = -[UIScrollView _adjustsContentInsetWhenScrollDisabled](self, "_adjustsContentInsetWhenScrollDisabled");
        -[UIScrollView _setAdjustsContentInsetWhenScrollDisabled:](self, "_setAdjustsContentInsetWhenScrollDisabled:", 1);
        -[UIScrollView setScrollEnabled:](self, "setScrollEnabled:", 0);
      }
      -[UIView window](self, "window");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "beginDisablingInterfaceAutorotation");

      *(_BYTE *)(v21 + 32) = *(_BYTE *)(v21 + 32) & 0xFE | -[UIScrollView showsHorizontalScrollIndicator](self, "showsHorizontalScrollIndicator");
      if (-[UIScrollView showsVerticalScrollIndicator](self, "showsVerticalScrollIndicator"))
        v32 = 2;
      else
        v32 = 0;
      *(_BYTE *)(v21 + 32) = *(_BYTE *)(v21 + 32) & 0xFD | v32;
      -[UITableView setShowsHorizontalScrollIndicator:](self, "setShowsHorizontalScrollIndicator:", 0);
      -[UIScrollView setShowsVerticalScrollIndicator:](self, "setShowsVerticalScrollIndicator:", 0);
      objc_msgSend(v43, "locationInView:", self);
      v34 = v33;
      v36 = v35;
      -[_UIDragFeedbackGenerator userInteractionStartedAtLocation:](self->_reorderFeedbackGenerator, "userInteractionStartedAtLocation:");
      v44[0] = MEMORY[0x1E0C809B0];
      v44[1] = 3221225472;
      v44[2] = __45__UITableView__beginReorderingForCell_touch___block_invoke;
      v44[3] = &unk_1E16B4E70;
      v44[4] = self;
      v44[5] = v34;
      v44[6] = v36;
      objc_msgSend((id)UIApp, "_performBlockAfterCATransactionCommits:", v44);
      -[UITableView _reorderPositionChangedForCell:](self, "_reorderPositionChangedForCell:", v8);
    }

  }
  return v12;
}

uint64_t __45__UITableView__beginReorderingForCell_touch___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 3040), "isActive");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 3040), "draggedObjectLiftedAtLocation:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  return result;
}

- (void)_draggingReorderingCell:(id)a3 yDelta:(double)a4 touch:(id)a5
{
  id v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  _UIDragSnappingFeedbackGenerator *reorderFeedbackGenerator;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  CGRect v42;
  CGRect v43;

  v7 = a5;
  v8 = a3;
  objc_msgSend(v8, "frame");
  v39 = v10;
  v40 = v9;
  v38 = v11;
  v13 = v12;
  -[UITableView _scrollView](self, "_scrollView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "contentSize");
  v16 = v15;

  -[UITableView _scrollView](self, "_scrollView");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "bounds");
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;

  v26 = round(v13 * 0.5);
  v42.origin.x = v19;
  v42.origin.y = v21;
  v42.size.width = v23;
  v42.size.height = v25;
  v27 = CGRectGetMinY(v42) - v26;
  if (0.0 - v26 >= v27)
    v27 = 0.0 - v26;
  v28 = round(v27);
  v29 = v16 - v26;
  v43.origin.x = v19;
  v43.origin.y = v21;
  v43.size.width = v23;
  v43.size.height = v25;
  v30 = CGRectGetMaxY(v43) - v26;
  if (v29 < v30)
    v30 = v29;
  v31 = round(v30);
  v32 = v38 + a4;
  if (v28 >= v38 + a4)
    v32 = v28;
  if (v32 >= v31)
    v32 = v31;
  objc_msgSend(v8, "setFrame:", v40, v32, v39, v13);
  -[UITableView _reorderPositionChangedForCell:](self, "_reorderPositionChangedForCell:", v8);

  reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
  objc_msgSend(v7, "locationInView:", self);
  v35 = v34;
  v37 = v36;

  -[_UIDragFeedbackGenerator positionUpdatedAtLocation:](reorderFeedbackGenerator, "positionUpdatedAtLocation:", v35, v37);
}

- (id)_adjustedIndexPath:(id)a3 forMoveOfIndexPath:(id)a4 toIndexPath:(id)a5
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a3;
  v8 = a4;
  v9 = a5;
  if (objc_msgSend(v7, "isEqual:", v8))
  {
    v10 = v9;
  }
  else
  {
    v10 = v7;
    v11 = objc_msgSend(v10, "section");
    if (v11 == objc_msgSend(v8, "section"))
    {
      v12 = objc_msgSend(v10, "row");
      if (v12 > objc_msgSend(v8, "row"))
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", objc_msgSend(v10, "row") - 1, objc_msgSend(v10, "section"));
        v13 = objc_claimAutoreleasedReturnValue();

        v10 = (id)v13;
      }
    }
    v14 = objc_msgSend(v10, "section");
    if (v14 == objc_msgSend(v9, "section"))
    {
      v15 = objc_msgSend(v10, "row");
      if (v15 >= objc_msgSend(v9, "row"))
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", objc_msgSend(v10, "row") + 1, objc_msgSend(v10, "section"));
        v16 = objc_claimAutoreleasedReturnValue();

        v10 = (id)v16;
      }
    }
  }

  return v10;
}

- (void)adjustIndexPaths:(id)a3 forMoveOfIndexPath:(id)a4 toIndexPath:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)objc_msgSend(v8, "copy");
  objc_msgSend(v8, "removeAllObjects");
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v12 = v11;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v19;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v19 != v15)
          objc_enumerationMutation(v12);
        -[UITableView _adjustedIndexPath:forMoveOfIndexPath:toIndexPath:](self, "_adjustedIndexPath:forMoveOfIndexPath:toIndexPath:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v16), v9, v10, (_QWORD)v18);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObject:", v17);

        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v14);
  }

}

- (void)_endReorderingForCell:(id)a3 wasCancelled:(BOOL)a4 animated:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL8 v6;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  _UIDragSnappingFeedbackGenerator *reorderFeedbackGenerator;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGFloat v21;
  double v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  NSMutableArray *deselectionTransitionIndexPaths;
  NSIndexPath *focusedCellIndexPath;
  NSIndexPath *v30;
  NSIndexPath *v31;
  char v32;
  _NSRange *p_visibleRows;
  UITableViewRowData *rowData;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  NSUInteger v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  uint64_t v44;
  unint64_t v45;
  NSUInteger location;
  NSUInteger length;
  unint64_t v48;
  unint64_t v49;
  NSUInteger v50;
  unint64_t v51;
  NSObject *v52;
  NSUInteger v53;
  NSUInteger v54;
  NSObject *v55;
  void *v56;
  uint64_t v57;
  NSMutableArray *v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSMutableArray *visibleCells;
  uint64_t v74;
  uint64_t v75;
  _BOOL4 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[5];
  BOOL v82;
  BOOL v83;
  _QWORD v84[4];
  id v85;
  id v86;
  CGFloat v87;
  double v88;
  CGFloat v89;
  CGFloat v90;
  _QWORD v91[5];
  uint8_t v92[128];
  uint8_t buf[4];
  void *v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  NSMutableArray *v98;
  uint64_t v99;
  NSRange v100;
  NSRange v101;
  CGRect v102;
  CGRect v103;

  v5 = a5;
  v6 = a4;
  v99 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  -[UITableView _reorderingSupport](self, "_reorderingSupport");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(void **)(v9 + 16);
  if (!v10)
    goto LABEL_63;
  v11 = v10;
  v74 = -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_rowData, v11);
  v12 = *(void **)(v9 + 16);
  *(_QWORD *)(v9 + 16) = 0;

  -[UITableView _stopAutoscrollTimer](self, "_stopAutoscrollTimer");
  reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
  objc_msgSend(v8, "frame");
  v16 = v15 + v14 * 0.5;
  v19 = v18 + v17 * 0.5;
  if (v6)
    -[_UIDragFeedbackGenerator userInteractionCancelledAtLocation:](reorderFeedbackGenerator, "userInteractionCancelledAtLocation:", v16, v19);
  else
    -[_UIDragFeedbackGenerator userInteractionEndedAtLocation:](reorderFeedbackGenerator, "userInteractionEndedAtLocation:", v16, v19);
  objc_msgSend(v8, "frame", v74);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  if ((*(_BYTE *)(v9 + 32) & 4) == 0)
  {
    -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
    -[UITableViewRowData setReorderedIndexPath:]((uint64_t)self->_rowData, 0);
    if (v6)
      objc_storeStrong((id *)(v9 + 24), v10);
    -[UITableViewRowData moveRowAtIndexPathFrom:toIndexPath:]((uint64_t)self->_rowData, v11, *(void **)(v9 + 24));
    -[UITableView adjustIndexPaths:forMoveOfIndexPath:toIndexPath:](self, "adjustIndexPaths:forMoveOfIndexPath:toIndexPath:", self->_selectedIndexPaths, v11, *(_QWORD *)(v9 + 24));
    -[UITableView adjustIndexPaths:forMoveOfIndexPath:toIndexPath:](self, "adjustIndexPaths:forMoveOfIndexPath:toIndexPath:", self->_highlightedIndexPaths, v11, *(_QWORD *)(v9 + 24));
    deselectionTransitionIndexPaths = self->_deselectionTransitionIndexPaths;
    if (deselectionTransitionIndexPaths)
      -[UITableView adjustIndexPaths:forMoveOfIndexPath:toIndexPath:](self, "adjustIndexPaths:forMoveOfIndexPath:toIndexPath:", deselectionTransitionIndexPaths, v11, *(_QWORD *)(v9 + 24));
    focusedCellIndexPath = self->_focusedCellIndexPath;
    if (focusedCellIndexPath)
    {
      -[UITableView _adjustedIndexPath:forMoveOfIndexPath:toIndexPath:](self, "_adjustedIndexPath:forMoveOfIndexPath:toIndexPath:", focusedCellIndexPath, v11, *(_QWORD *)(v9 + 24));
      v30 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
      v31 = self->_focusedCellIndexPath;
      self->_focusedCellIndexPath = v30;

    }
  }
  v76 = v5;
  v32 = *(_BYTE *)(v9 + 32);
  if (!v6 && (*(_BYTE *)(v9 + 32) & 4) == 0)
  {
    -[UITableView _notifyDataSourceForMoveOfRowFromIndexPath:toIndexPath:](self, "_notifyDataSourceForMoveOfRowFromIndexPath:toIndexPath:", v11, *(_QWORD *)(v9 + 24));
    v32 = *(_BYTE *)(v9 + 32);
  }
  if ((v32 & 4) == 0)
  {
    p_visibleRows = &self->_visibleRows;
    rowData = self->_rowData;
    -[UIView bounds](self, "bounds");
    self->_visibleRows.location = -[UITableViewRowData globalRowsInRect:canGuess:](rowData, 0, v35, v36, v37, v38);
    self->_visibleRows.length = v39;
    -[UITableView _visibleBounds](self, "_visibleBounds");
    self->_visibleBounds.origin.x = v40;
    self->_visibleBounds.origin.y = v41;
    self->_visibleBounds.size.width = v42;
    self->_visibleBounds.size.height = v43;
    v44 = -[NSMutableArray indexOfObject:](self->_visibleCells, "indexOfObject:", v8);
    if (v44 != 0x7FFFFFFFFFFFFFFFLL)
      -[NSMutableArray removeObjectAtIndex:](self->_visibleCells, "removeObjectAtIndex:", v44);
    v45 = -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:", *(_QWORD *)(v9 + 24));
    location = p_visibleRows->location;
    length = self->_visibleRows.length;
    v48 = v45 - p_visibleRows->location;
    if (v45 < p_visibleRows->location || v48 >= length)
    {
      if (v44 != 0x7FFFFFFFFFFFFFFFLL)
      {
        self->_visibleRows.length = --length;
        if (v75 == location && v45 > v75 + length - 1)
          p_visibleRows->location = v75 + 1;
      }
    }
    else
    {
      v49 = -[NSMutableArray count](self->_visibleCells, "count");
      if (v48 <= v49)
        -[NSMutableArray insertObject:atIndex:](self->_visibleCells, "insertObject:atIndex:", v8, v48);
      if (v44 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v50 = self->_visibleRows.length;
        if (v50 < -[NSMutableArray count](self->_visibleCells, "count"))
          ++self->_visibleRows.length;
      }
      if (v48 > v49)
      {
LABEL_32:
        if (os_variant_has_internal_diagnostics())
        {
          __UIFaultDebugAssertLog();
          v55 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v55, OS_LOG_TYPE_FAULT))
            goto LABEL_38;
          v101.location = p_visibleRows->location;
          v101.length = self->_visibleRows.length;
          NSStringFromRange(v101);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = -[NSMutableArray count](self->_visibleCells, "count");
          visibleCells = self->_visibleCells;
          *(_DWORD *)buf = 138412802;
          v94 = v56;
          v95 = 2048;
          v96 = v72;
          v97 = 2112;
          v98 = visibleCells;
          _os_log_fault_impl(&dword_185066000, v55, OS_LOG_TYPE_FAULT, "UITableView internal inconsistency: _visibleRows and _visibleCells mismatch when ending reordering, sacrificing the animation and performing reloadData as a fallback. _visibleRows: %@; _visibleCells.count: %ld, _visibleCells: %@",
            buf,
            0x20u);
        }
        else
        {
          v51 = _endReorderingForCell_wasCancelled_animated____s_category;
          if (!_endReorderingForCell_wasCancelled_animated____s_category)
          {
            v51 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v51, (unint64_t *)&_endReorderingForCell_wasCancelled_animated____s_category);
          }
          v52 = *(NSObject **)(v51 + 8);
          if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
            goto LABEL_39;
          v53 = p_visibleRows->location;
          v54 = self->_visibleRows.length;
          v55 = v52;
          v100.location = v53;
          v100.length = v54;
          NSStringFromRange(v100);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v57 = -[NSMutableArray count](self->_visibleCells, "count");
          v58 = self->_visibleCells;
          *(_DWORD *)buf = 138412802;
          v94 = v56;
          v95 = 2048;
          v96 = v57;
          v97 = 2112;
          v98 = v58;
          _os_log_impl(&dword_185066000, v55, OS_LOG_TYPE_ERROR, "UITableView internal inconsistency: _visibleRows and _visibleCells mismatch when ending reordering, sacrificing the animation and performing reloadData as a fallback. _visibleRows: %@; _visibleCells.count: %ld, _visibleCells: %@",
            buf,
            0x20u);
        }

LABEL_38:
LABEL_39:
        -[UITableView _performInternalReloadData](self, "_performInternalReloadData");
        goto LABEL_40;
      }
      length = self->_visibleRows.length;
    }
    if (length != -[NSMutableArray count](self->_visibleCells, "count"))
      goto LABEL_32;
  }
LABEL_40:
  if ((*(_BYTE *)(v9 + 32) & 4) != 0)
  {
    objc_msgSend(v8, "removeFromSuperview");
    -[UITableView _endCellReorderAnimation:wasCancelled:](self, "_endCellReorderAnimation:wasCancelled:", 0, v6);
    -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1);
    -[UIView layoutIfNeeded](self, "layoutIfNeeded");
  }
  else
  {
    -[UITableView _updateVisibleCellsNow:](self, "_updateVisibleCellsNow:", 1);
    -[UITableView _rectForRowAtIndexPath:usingPresentationValues:](self, "_rectForRowAtIndexPath:usingPresentationValues:", *(_QWORD *)(v9 + 24), 1);
    v60 = v59;
    if (v76)
      objc_msgSend((id)UIApp, "setIgnoresInteractionEvents:", 1);
    if (v60 == v23)
    {
      -[UITableView _endCellReorderAnimation:wasCancelled:](self, "_endCellReorderAnimation:wasCancelled:", v76, v6);
    }
    else
    {
      v102.origin.x = v21;
      v102.origin.y = v23;
      v102.size.width = v25;
      v102.size.height = v27;
      if (CGRectGetHeight(v102) <= 0.0)
      {
        v63 = 0.3;
      }
      else
      {
        if (v60 - v23 >= 0.0)
          v61 = v60 - v23;
        else
          v61 = -(v60 - v23);
        v103.origin.x = v21;
        v103.origin.y = v23;
        v103.size.width = v25;
        v103.size.height = v27;
        v62 = v61 / (CGRectGetHeight(v103) * 0.5);
        if (v62 <= 1.0)
          v63 = v62 * 0.3;
        else
          v63 = 0.3;
      }
      v64 = MEMORY[0x1E0C809B0];
      v91[0] = MEMORY[0x1E0C809B0];
      v91[1] = 3221225472;
      v91[2] = __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke;
      v91[3] = &__block_descriptor_40_e24_v24__0___v___8___v__B_16l;
      *(double *)&v91[4] = v63;
      v84[0] = MEMORY[0x1E0C809B0];
      v84[1] = 3221225472;
      v84[2] = __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke_2;
      v84[3] = &unk_1E16BE770;
      v85 = v8;
      v87 = v21;
      v88 = v60;
      v89 = v25;
      v90 = v27;
      v86 = (id)v9;
      v81[0] = v64;
      v81[1] = 3221225472;
      v81[2] = __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke_3;
      v81[3] = &unk_1E16E3F88;
      v81[4] = self;
      v82 = v76;
      v83 = v6;
      +[UIView conditionallyAnimate:withAnimation:layout:completion:](UIView, "conditionallyAnimate:withAnimation:layout:completion:", v76, v91, v84, v81);

    }
  }
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  -[UITableView _visibleCellsUsingPresentationValues:](self, "_visibleCellsUsingPresentationValues:", 1);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v77, v92, 16);
  if (v66)
  {
    v67 = v66;
    v68 = *(_QWORD *)v78;
    do
    {
      for (i = 0; i != v67; ++i)
      {
        if (*(_QWORD *)v78 != v68)
          objc_enumerationMutation(v65);
        v70 = *(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * i);
        -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v70, 1);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _updateSeparatorStateForCell:atIndexPath:](self, "_updateSeparatorStateForCell:atIndexPath:", v70, v71);

      }
      v67 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v77, v92, 16);
    }
    while (v67);
  }

LABEL_63:
}

uint64_t __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 4, a2, a3, *(double *)(a1 + 32), 0.0);
}

uint64_t __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
  objc_msgSend(*(id *)(a1 + 32), "_setReordering:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "frame");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "setFrame:");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "frame");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "setFrame:");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "setAlpha:", 0.0);
}

uint64_t __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke_3(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;

  v3 = *(void **)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
    v4 = a2 ^ 1u;
  else
    v4 = *(unsigned __int8 *)(a1 + 41) != 0;
  return objc_msgSend(v3, "_endCellReorderAnimation:wasCancelled:", *(unsigned __int8 *)(a1 + 40) != 0, v4);
}

- (void)_endCellReorderAnimation:(BOOL)a3 wasCancelled:(BOOL)a4
{
  _BOOL4 v5;
  id v7;
  void *v8;
  _UIDragSnappingFeedbackGenerator *reorderFeedbackGenerator;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id *v22;

  v5 = a3;
  -[UITableView _reorderingSupport](self, "_reorderingSupport");
  v22 = (id *)objc_claimAutoreleasedReturnValue();
  v7 = v22[1];
  v8 = v7;
  if (!a4)
  {
    reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
    objc_msgSend(v7, "frame");
    -[_UIDragSnappingFeedbackGenerator draggedObjectLandedAtLocation:](reorderFeedbackGenerator, "draggedObjectLandedAtLocation:", v11 + v10 * 0.5, v13 + v12 * 0.5);
  }
  objc_msgSend(v8, "setOpaque:", 1);
  objc_msgSend(v8, "setSeparatorStyle:", *((_WORD *)&self->_tableFlags + 7) & 7);
  objc_msgSend(v8, "setAlpha:", 1.0);
  if ((objc_msgSend(v8, "isSelected") & 1) == 0 && (objc_msgSend(v8, "isHighlighted") & 1) == 0)
    objc_msgSend(v8, "_updateHighlightColors");
  objc_msgSend(v8, "_setReordering:", 0);
  if (*((_BYTE *)v22 + 64))
  {
    -[UIScrollView setScrollEnabled:](self, "setScrollEnabled:", 1);
    -[UIScrollView _setAdjustsContentInsetWhenScrollDisabled:](self, "_setAdjustsContentInsetWhenScrollDisabled:", *((unsigned __int8 *)v22 + 65));
  }
  -[UIView window](self, "window");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "endDisablingInterfaceAutorotation");

  -[UITableView setShowsHorizontalScrollIndicator:](self, "setShowsHorizontalScrollIndicator:", (_BYTE)v22[4] & 1);
  -[UIScrollView setShowsVerticalScrollIndicator:](self, "setShowsVerticalScrollIndicator:", (*((unsigned __int8 *)v22 + 32) >> 1) & 1);
  -[UITableView _updateTopSeparatorForVisibleCells](self, "_updateTopSeparatorForVisibleCells");
  if (v5)
    objc_msgSend((id)UIApp, "setIgnoresInteractionEvents:", 0);
  if (((_BYTE)v22[4] & 8) != 0)
  {
    v15 = v22[2];
  }
  else
  {
    v15 = v22[3];
    if ((*((_BYTE *)&self->_tableFlags + 8) & 0x80) != 0)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "tableView:didEndReorderingRowAtIndexPath:", self, v15);

    }
  }
  -[UIScrollView _adjustShadowsIfNecessary](self, "_adjustShadowsIfNecessary");
  v17 = v22[1];
  v22[1] = 0;

  if (-[NSMutableArray containsObject:](self->_visibleCells, "containsObject:", v8))
  {
    -[UIScrollView _moveContentSubview:toBack:](self, "_moveContentSubview:toBack:", v8, 1);
  }
  else if (_IsKindOfUITableViewCell(v8))
  {
    -[UITableView _reuseTableViewCell:withIndexPath:didEndDisplaying:](self, "_reuseTableViewCell:withIndexPath:didEndDisplaying:", v8, v15, 1);
  }
  v18 = v22[2];
  v22[2] = 0;

  v19 = v22[3];
  v22[3] = 0;

  objc_msgSend(v22[7], "removeFromSuperview");
  v20 = v22[7];
  v22[7] = 0;

  objc_msgSend(v22[6], "removeFromSuperview");
  v21 = v22[6];
  v22[6] = 0;

  *((_BYTE *)v22 + 32) &= ~4u;
  -[UITableView _endAnimatingCells](self, "_endAnimatingCells");
  objc_msgSend(v8, "_setAnimating:", 0);

}

- (void)_autoscrollForReordering:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MaxY;
  double v25;
  double v26;
  double v27;
  float v28;
  float v29;
  double v30;
  double v31;
  double v32;
  float v33;
  double MinY;
  double v35;
  float v36;
  double v37;
  float v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  float v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double rect;
  id v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;

  v4 = a3;
  -[UIView bounds](self, "bounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  -[UITableView _contentInset](self, "_contentInset");
  v14 = v6 + v13;
  v16 = v8 + v15;
  v63 = v10 - (v13 + v17);
  v19 = v12 - (v15 + v18);
  objc_msgSend(v4, "userInfo");
  v65 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v65, "frame");
  x = v66.origin.x;
  y = v66.origin.y;
  width = v66.size.width;
  height = v66.size.height;
  MaxY = CGRectGetMaxY(v66);
  v67.origin.x = v14;
  v67.origin.y = v16;
  v67.size.width = v63;
  v67.size.height = v19;
  v61 = y;
  v62 = x;
  if (MaxY > CGRectGetMaxY(v67) + -5.0)
  {
    v68.origin.x = v14;
    v68.origin.y = v16;
    v68.size.width = v63;
    v68.size.height = v19;
    v25 = CGRectGetMaxY(v68);
    -[UIScrollView contentSize](self, "contentSize");
    if (v25 < v26)
    {
      v69.origin.x = x;
      v69.origin.y = y;
      v69.size.width = width;
      v69.size.height = height;
      v27 = CGRectGetMaxY(v69);
      v70.origin.x = v14;
      v70.origin.y = v16;
      v70.size.width = v63;
      v70.size.height = v19;
      v28 = v27 - CGRectGetMaxY(v70);
      v29 = 2.0;
      v30 = width;
      v31 = height;
      if (v28 <= 0.0)
        goto LABEL_11;
      v32 = v28;
      v71.origin.y = v61;
      v71.origin.x = v62;
      v71.size.width = width;
      v71.size.height = height;
      v33 = v32 / (CGRectGetHeight(v71) * 0.5);
      v29 = floorf((float)((float)(v33 * 8.0) * v33) + 2.0);
      goto LABEL_9;
    }
  }
  v72.origin.x = x;
  v72.origin.y = y;
  v72.size.width = width;
  v72.size.height = height;
  MinY = CGRectGetMinY(v72);
  v73.origin.x = v14;
  v73.origin.y = v16;
  v73.size.width = v63;
  v73.size.height = v19;
  if (MinY >= CGRectGetMinY(v73) + 5.0)
    goto LABEL_10;
  v30 = width;
  v31 = height;
  v74.origin.x = v14;
  v74.origin.y = v16;
  v74.size.width = v63;
  v74.size.height = v19;
  if (CGRectGetMinY(v74) <= 0.0)
    goto LABEL_10;
  v75.origin.y = v61;
  v75.origin.x = v62;
  v75.size.width = width;
  v75.size.height = height;
  v35 = CGRectGetMinY(v75);
  v76.origin.x = v14;
  v76.origin.y = v16;
  v76.size.width = v63;
  v76.size.height = v19;
  v36 = v35 - CGRectGetMinY(v76);
  v29 = -2.0;
  if (v36 < 0.0)
  {
    v37 = v36;
    v77.origin.y = v61;
    v77.origin.x = v62;
    v77.size.width = width;
    v77.size.height = height;
    v38 = v37 / (CGRectGetHeight(v77) * 0.5);
    v29 = -floorf((float)((float)(v38 * 8.0) * v38) + 2.0);
LABEL_9:
    if (v29 == 0.0)
    {
LABEL_10:
      -[UITableView _stopAutoscrollTimer](self, "_stopAutoscrollTimer");
      goto LABEL_23;
    }
  }
LABEL_11:
  -[UIScrollView contentOffset](self, "contentOffset");
  rect = v39;
  v41 = v40;
  -[UITableView _contentInset](self, "_contentInset");
  v43 = v42;
  v45 = v44;
  v46 = v29;
  v47 = v29;
  v48 = v41 + v47;
  v49 = -v42;
  -[UIScrollView contentSize](self, "contentSize");
  v51 = v43 + v45 + v50;
  -[UIView bounds](self, "bounds");
  v53 = v51 - v52;
  if (v48 <= v51 - v52)
    v53 = v48;
  if (v48 >= v49)
    v54 = v53;
  else
    v54 = v49;
  -[UITableView setContentOffset:](self, "setContentOffset:", rect, v54);
  v55 = round(v31 * 0.5);
  v56 = (float)(0.0 - v55);
  if (v61 + v47 > v56)
    v56 = v61 + v47;
  v57 = round(v56);
  -[UIScrollView contentSize](self, "contentSize");
  v59 = v58 - v55;
  if (v57 < v59)
    v59 = v57;
  objc_msgSend(v65, "setFrame:", v62, round(v59), v30, v31);
  *(float *)&v60 = v46 / 10.0;
  if ((float)(v46 / 10.0) < 0.0)
    *(float *)&v60 = -(float)(v46 / 10.0);
  *(float *)&v60 = 1.0 - *(float *)&v60;
  -[UITableView _reorderPositionChangedForCell:withScrollFactorPercentage:](self, "_reorderPositionChangedForCell:withScrollFactorPercentage:", v65, v60);
LABEL_23:

}

- (void)_notifyDataSourceForMoveOfRowFromIndexPath:(id)a3 toIndexPath:(id)a4
{
  id v6;
  id v7;
  UICollectionViewUpdateItem *v8;
  id v9;
  id v10;
  UICollectionViewUpdateItem *v11;
  UICollectionViewUpdateItem *expectedDiffableUpdateItem;
  void *v13;
  UICollectionViewUpdateItem *v14;

  if ((*((_BYTE *)&self->_tableFlags + 27) & 0x20) != 0)
  {
    v9 = a4;
    v10 = a3;
    v11 = -[UICollectionViewUpdateItem initWithInitialIndexPath:finalIndexPath:updateAction:]([UICollectionViewUpdateItem alloc], "initWithInitialIndexPath:finalIndexPath:updateAction:", v10, v9, 3);
    expectedDiffableUpdateItem = self->_expectedDiffableUpdateItem;
    self->_expectedDiffableUpdateItem = v11;

    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "tableView:moveRowAtIndexPath:toIndexPath:", self, v10, v9);

    v8 = self->_expectedDiffableUpdateItem;
    self->_expectedDiffableUpdateItem = 0;
  }
  else
  {
    v6 = a4;
    v7 = a3;
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v14 = (UICollectionViewUpdateItem *)objc_claimAutoreleasedReturnValue();
    -[UICollectionViewUpdateItem tableView:moveRowAtIndexPath:toIndexPath:](v14, "tableView:moveRowAtIndexPath:toIndexPath:", self, v7, v6);

    v8 = v14;
  }

}

- (id)_targetIndexPathAtPoint:(CGPoint)a3 withLastTargetIndexPath:(id)a4 adjustedForGap:(BOOL)a5
{
  CGFloat y;
  CGFloat x;
  id v9;
  id v10;

  y = a3.y;
  x = a3.x;
  v9 = a4;
  -[UITableViewRowData targetIndexPathForPoint:adjustedForGap:]((uint64_t)self->_rowData, a5, x, y);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (!v10)
    v10 = v9;

  return v10;
}

- (void)_updateTopSeparatorForVisibleCells
{
  NSMutableArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = self->_visibleCells;
  v4 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v8, 1, (_QWORD)v10);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _updateTopSeparatorForCell:atIndexPath:](self, "_updateTopSeparatorForCell:atIndexPath:", v8, v9);

      }
      v5 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

- (void)_invalidateLayoutForVisibleBounds:(CGRect)a3 oldVisibleBounds:(CGRect)a4
{
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height, a4.origin.x, a4.origin.y, a4.size.width, a4.size.height);
}

- (void)_ensureViewsAreLoadedInRect:(CGRect)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;

  p_tableFlags = &self->_tableFlags;
  *((_QWORD *)&self->_tableFlags + 2) |= 0x400000000000000uLL;
  self->_visibleBounds = a3;
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 0);
  -[UIView layoutBelowIfNeeded](self, "layoutBelowIfNeeded");
  *((_QWORD *)p_tableFlags + 2) &= ~0x400000000000000uLL;
}

- (BOOL)_wasEditing
{
  return (*((unsigned __int8 *)&self->_tableFlags + 14) >> 3) & 1;
}

- (BOOL)_wasEditingRowAtIndexPath:(id)a3
{
  id v4;
  NSIndexPath *swipedIndexPath;
  BOOL v6;

  v4 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 14) & 8) == 0)
    goto LABEL_7;
  swipedIndexPath = self->_swipedIndexPath;
  if ((*((_BYTE *)&self->_tableFlags + 21) & 0x10) != 0 || swipedIndexPath)
  {
    if (-[NSIndexPath isEqual:](swipedIndexPath, "isEqual:", v4))
    {
      v6 = (*((_BYTE *)&self->_tableFlags + 21) & 0x80) == 0;
      goto LABEL_8;
    }
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  v6 = 1;
LABEL_8:

  return v6;
}

- (int64_t)_globalReorderingRow
{
  _UITableViewReorderingSupport *reorderingSupport;

  reorderingSupport = self->_reorderingSupport;
  if (reorderingSupport && reorderingSupport->_initialIndexPath)
    return -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:");
  else
    return 0x7FFFFFFFFFFFFFFFLL;
}

- (void)_configureCachedCellForDisplay:(id)a3 forIndexPath:(id)a4
{
  if ((dyld_program_sdk_at_least() & 1) != 0
    || -[UITableView _supportsCellPrefetching](self, "_supportsCellPrefetching"))
  {
    objc_msgSend(a3, "_setNeedsSetup:", 1);
    -[UITableView _configureCellForDisplay:forIndexPath:](self, "_configureCellForDisplay:forIndexPath:", a3, a4);
  }
  else
  {
    -[UITableView _rectForRowAtIndexPath:canGuess:](self, "_rectForRowAtIndexPath:canGuess:", a4, (*((_QWORD *)&self->_tableFlags + 3) >> 4) & 1);
    objc_msgSend(a3, "setFrame:");
  }
}

void __73__UITableView__createPreparedCellForGlobalRow_withIndexPath_willDisplay___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  id *v4;
  NSObject *v5;
  id WeakRetained;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = _UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_5___s_category;
  if (!_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_5___s_category)
  {
    v2 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_5___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = (id *)(*(_QWORD *)(a1 + 32) + 416);
    v5 = v3;
    WeakRetained = objc_loadWeakRetained(v4);
    v7 = 138412290;
    v8 = WeakRetained;
    _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "The -tableView:cellForRowAtIndexPath: method must be implemented by the UITableViewDataSource, not the UITableViewDelegate. This error will cause undefined behavior. Please move the implementation of this method to the data source of this table view, instead of the delegate: %@", (uint8_t *)&v7, 0xCu);

  }
}

uint64_t __73__UITableView__createPreparedCellForGlobalRow_withIndexPath_willDisplay___block_invoke_1018(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

- (void)_tableHeaderHeightDidChangeToHeight:(double)a3
{
  -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
  -[UITableViewRowData tableHeaderHeightDidChangeToHeight:]((uint64_t)self->_rowData, a3);
  -[UITableView _updateContentSize](self, "_updateContentSize");
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1);
}

- (void)_tableFooterHeightDidChangeToHeight:(double)a3
{
  UITableViewRowData *rowData;

  -[UITableView _ensureRowDataIsLoaded](self, "_ensureRowDataIsLoaded");
  rowData = self->_rowData;
  if (rowData)
    rowData->_tableFooterHeight = a3;
  -[UITableView _updateContentSize](self, "_updateContentSize");
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1);
}

- (void)_drawExtraSeparator:(CGRect)a3
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t v7;
  void *v8;
  id v9;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v7 = *((_WORD *)&self->_tableFlags + 7) & 7;
  -[UITableView separatorColor](self, "separatorColor");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)(v7 - 1) <= 1)
  {
    v9 = v8;
    objc_msgSend(v8, "set");
    UIRectFillUsingOperation(1, x, y, width, height);
    v8 = v9;
  }

}

- (BOOL)_isCellReorderable:(id)a3
{
  UITableView *v3;
  void *v4;

  v3 = self;
  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", a3, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v3) = -[UITableView _canReorderRowAtIndexPath:](v3, "_canReorderRowAtIndexPath:", v4);

  return (char)v3;
}

- (id)_titleForDeleteConfirmationButton:(id)a3
{
  void *v4;
  void *v5;

  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", a3, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _titleForDeleteConfirmationButtonForRowAtIndexPath:](self, "_titleForDeleteConfirmationButtonForRowAtIndexPath:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (BOOL)_isLastRowForIndexPath:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v4 = a3;
  v5 = v4;
  if (v4
    && (v6 = objc_msgSend(v4, "section"),
        v6 == -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1)- 1))
  {
    v7 = objc_msgSend(v5, "row");
    v8 = v7 == -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", objc_msgSend(v5, "section"), 1)- 1;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (double)_shadowHeightOffset
{
  uint64_t v3;
  id *v4;
  double v5;
  double v6;

  -[UITableView _reorderingSupport](self, "_reorderingSupport");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (id *)v3;
  v5 = 0.0;
  if (v3 && -[UITableView _isLastRowForIndexPath:](self, "_isLastRowForIndexPath:", *(_QWORD *)(v3 + 24)))
  {
    objc_msgSend(v4[1], "frame");
    v5 = -v6;
  }

  return v5;
}

- (id)_retargetedReorderIndexPathForInitialIndexPath:(id)a3 proposedIndexPath:(id)a4
{
  id v7;
  void *v8;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  UITableViewRowData *rowData;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  UITableViewRowData *v23;
  void *v24;
  unint64_t v25;
  NSObject *v26;
  unint64_t v27;
  NSObject *v28;
  uint8_t v29[16];
  uint8_t v30[16];
  uint8_t buf[16];
  uint8_t v32[16];

  v7 = a4;
  v8 = v7;
  if ((*((_BYTE *)&self->_tableFlags + 6) & 0x40) == 0)
    return v7;
  v10 = a3;
  if (os_variant_has_internal_diagnostics())
  {
    if (!v10)
    {
      __UIFaultDebugAssertLog();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v32 = 0;
        _os_log_fault_impl(&dword_185066000, v17, OS_LOG_TYPE_FAULT, "Cannot pass a nil initialTargetIndexPath to the delegate callback per API contract!", v32, 2u);
      }

    }
  }
  else if (!v10)
  {
    v25 = qword_1EDDB0A78;
    if (!qword_1EDDB0A78)
    {
      v25 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v25, (unint64_t *)&qword_1EDDB0A78);
    }
    v26 = *(NSObject **)(v25 + 8);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v26, OS_LOG_TYPE_ERROR, "Cannot pass a nil initialTargetIndexPath to the delegate callback per API contract!", buf, 2u);
    }
  }
  if (os_variant_has_internal_diagnostics())
  {
    if (!v8)
    {
      __UIFaultDebugAssertLog();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v30 = 0;
        _os_log_fault_impl(&dword_185066000, v18, OS_LOG_TYPE_FAULT, "Cannot pass a nil newTargetIndexPath to the delegate callback per API contract!", v30, 2u);
      }

    }
  }
  else if (!v8)
  {
    v27 = qword_1EDDB0A80;
    if (!qword_1EDDB0A80)
    {
      v27 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v27, (unint64_t *)&qword_1EDDB0A80);
    }
    v28 = *(NSObject **)(v27 + 8);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_185066000, v28, OS_LOG_TYPE_ERROR, "Cannot pass a nil newTargetIndexPath to the delegate callback per API contract!", v29, 2u);
    }
  }
  -[UITableView _delegateProxy](self, "_delegateProxy");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:", self, v10, v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  NSStringFromSelector(sel_tableView_targetIndexPathForMoveFromRowAtIndexPath_toProposedIndexPath_);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 17071, CFSTR("UITableView delegate method %@ needs to return a non-nil value"), v13);

  }
  v14 = objc_msgSend(v12, "section");
  rowData = self->_rowData;
  if (rowData)
    rowData = (UITableViewRowData *)rowData->_numSections;
  if (v14 >= (uint64_t)rowData)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v12, "section");
    v22 = objc_msgSend(v12, "row");
    v23 = self->_rowData;
    if (v23)
      v23 = (UITableViewRowData *)v23->_numSections;
    objc_msgSend(v20, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 17072, CFSTR("UITableView delegate method %@ returned an invalid target index path (section: %ld, row: %ld) because there are only %ld sections in the table view."), v13, v21, v22, v23);

  }
  v16 = objc_msgSend(v12, "row");
  if (v16 > -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, objc_msgSend(v12, "section")))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 17073, CFSTR("UITableView delegate method %@ returned an invalid target index path (section: %ld, row: %ld) because there are only %ld rows in this section of the table view."), v13, objc_msgSend(v12, "section"), objc_msgSend(v12, "row"), -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, objc_msgSend(v12, "section")));

  }
  return v12;
}

- (void)_reorderPositionChangedForCell:(id)a3
{
  double v3;

  LODWORD(v3) = 1.0;
  -[UITableView _reorderPositionChangedForCell:withScrollFactorPercentage:](self, "_reorderPositionChangedForCell:withScrollFactorPercentage:", a3, v3);
}

- (void)_reorderPositionChangedForCell:(id)a3 withScrollFactorPercentage:(float)a4
{
  id v5;
  uint64_t v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  double v12;
  CGFloat v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  UIShadowView *v39;
  void *v40;
  void *v41;
  void *v42;
  UIShadowView *v43;
  double v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  CGFloat MinY;
  CGFloat v50;
  CGFloat v51;
  CGFloat y;
  CGFloat v53;
  uint64_t v54;
  void *v55;
  double MidY;
  id v57;
  void *v58;
  _UIDragSnappingFeedbackGenerator *reorderFeedbackGenerator;
  uint64_t v60;
  double v61;
  double v63;
  double v64;
  CGFloat rect;
  _QWORD v66[4];
  id v67;
  id v68;
  UITableView *v69;
  _QWORD v70[10];
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;

  v5 = a3;
  -[UITableView _reorderingSupport](self, "_reorderingSupport");
  v6 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "frame");
  v8 = v7;
  v10 = v9;
  rect = v11;
  v13 = v12;
  -[UIView bounds](self, "bounds");
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  -[UITableView _contentInset](self, "_contentInset");
  v63 = v17 + v22;
  v64 = v15 + v23;
  v25 = v19 - (v23 + v24);
  v27 = v21 - (v22 + v26);
  v28 = *(id *)(v6 + 16);
  if (-[UITableConstants reorderingCellWantsShadows](self->_constants, "reorderingCellWantsShadows")
    && (objc_msgSend(v5, "_usingBackgroundViewConfiguration") & 1) == 0)
  {
    v29 = *(void **)(v6 + 48);
    if (!v29)
    {
      -[UITableView _cellContainerView](self, "_cellContainerView");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = v10;
      v31 = v27;
      v32 = -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)self->_rowData, objc_msgSend(v28, "row"), objc_msgSend(v28, "section"), 0);
      v34 = v33;
      v36 = v35;
      v38 = v37;
      v39 = -[UIShadowView initWithFrame:]([UIShadowView alloc], "initWithFrame:", v32, v33, v35, v37);
      v40 = *(void **)(v6 + 48);
      *(_QWORD *)(v6 + 48) = v39;

      v41 = *(void **)(v6 + 48);
      +[UIShadowView topShadowImage](UIShadowView, "topShadowImage");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "setShadowImage:forEdge:inside:", v42, 1, 0);

      objc_msgSend(v30, "insertSubview:aboveSubview:", *(_QWORD *)(v6 + 48), v5);
      v43 = [UIShadowView alloc];
      v44 = v32;
      v27 = v31;
      v10 = v61;
      v45 = -[UIShadowView initWithFrame:](v43, "initWithFrame:", v44, v34, v36, v38);
      v46 = *(void **)(v6 + 56);
      *(_QWORD *)(v6 + 56) = v45;

      v47 = *(void **)(v6 + 56);
      +[UIShadowView bottomShadowImage](UIShadowView, "bottomShadowImage");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "setShadowImage:forEdge:inside:", v48, 4, 0);

      objc_msgSend(v30, "insertSubview:belowSubview:", *(_QWORD *)(v6 + 56), v5);
      v29 = *(void **)(v6 + 48);
    }
    objc_msgSend(v29, "frame", *(_QWORD *)&v61);
    objc_msgSend(*(id *)(v6 + 48), "setFrame:");
    objc_msgSend(*(id *)(v6 + 56), "frame");
    objc_msgSend(*(id *)(v6 + 56), "setFrame:");
  }
  v71.origin.x = v64;
  v71.origin.y = v63;
  v71.size.width = v25;
  v71.size.height = v27;
  MinY = CGRectGetMinY(v71);
  v72.origin.y = v10;
  v50 = v27;
  v51 = MinY + 5.0;
  v72.origin.x = v8;
  y = v72.origin.y;
  v72.size.width = rect;
  v72.size.height = v13;
  if (v51 > CGRectGetMinY(v72))
    goto LABEL_19;
  v73.origin.x = v64;
  v73.origin.y = v63;
  v73.size.width = v25;
  v73.size.height = v50;
  v53 = CGRectGetMaxY(v73) + -5.0;
  v74.origin.x = v8;
  v74.origin.y = y;
  v74.size.width = rect;
  v74.size.height = v13;
  if (v53 >= CGRectGetMaxY(v74))
  {
    if (*(_QWORD *)(v6 + 40))
      -[UITableView _stopAutoscrollTimer](self, "_stopAutoscrollTimer");
  }
  else
  {
LABEL_19:
    if (!*(_QWORD *)(v6 + 40))
    {
      objc_msgSend(MEMORY[0x1E0C99E88], "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", self, sel__autoscrollForReordering_, v5, 1, 0.02);
      v54 = objc_claimAutoreleasedReturnValue();
      v55 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v54;

    }
  }
  v75.origin.x = v8;
  v75.origin.y = y;
  v75.size.width = rect;
  v75.size.height = v13;
  MidY = CGRectGetMidY(v75);
  -[UITableView _targetIndexPathAtPoint:withLastTargetIndexPath:adjustedForGap:](self, "_targetIndexPathAtPoint:withLastTargetIndexPath:adjustedForGap:", *(_QWORD *)(v6 + 24), 0, 0.0, MidY);
  v57 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(*(id *)(v6 + 24), "isEqual:", v57) & 1) == 0)
  {
    -[UITableView _retargetedReorderIndexPathForInitialIndexPath:proposedIndexPath:](self, "_retargetedReorderIndexPathForInitialIndexPath:proposedIndexPath:", v28, v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(*(id *)(v6 + 24), "isEqual:", v58) & 1) != 0)
    {
      v57 = v58;
    }
    else
    {
      -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
      -[UITableViewRowData addGapAtIndexPath:]((uint64_t)self->_rowData, v58);
      -[UITableView _updateTopSeparatorForVisibleCells](self, "_updateTopSeparatorForVisibleCells");
      reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
      v60 = MEMORY[0x1E0C809B0];
      v70[0] = MEMORY[0x1E0C809B0];
      v70[1] = 3221225472;
      v70[2] = __73__UITableView__reorderPositionChangedForCell_withScrollFactorPercentage___block_invoke;
      v70[3] = &unk_1E16E0798;
      v70[4] = self;
      *(CGFloat *)&v70[5] = v8;
      *(CGFloat *)&v70[6] = y;
      *(CGFloat *)&v70[7] = rect;
      *(CGFloat *)&v70[8] = v13;
      *(double *)&v70[9] = MidY;
      -[UIFeedbackGenerator performFeedbackWithDelay:insideBlock:](reorderFeedbackGenerator, "performFeedbackWithDelay:insideBlock:", v70, 0.05);
      v66[0] = v60;
      v66[1] = 3221225472;
      v66[2] = __73__UITableView__reorderPositionChangedForCell_withScrollFactorPercentage___block_invoke_2;
      v66[3] = &unk_1E16B47A8;
      v67 = (id)v6;
      v57 = v58;
      v68 = v57;
      v69 = self;
      -[UITableView _animateTableViewContentToNewLayoutWithDuration:reorderingCell:additionalAnimations:](self, "_animateTableViewContentToNewLayoutWithDuration:reorderingCell:additionalAnimations:", v5, v66, a4 * 0.3);
      objc_msgSend(v5, "setSectionLocation:animated:", -[UITableViewRowData sectionLocationForReorderedRow:inSection:]((uint64_t)self->_rowData, objc_msgSend(*(id *)(v6 + 24), "row"), objc_msgSend(*(id *)(v6 + 24), "section")), 1);

    }
  }

}

uint64_t __73__UITableView__reorderPositionChangedForCell_withScrollFactorPercentage___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 3040), "objectSnappedAtLocation:", CGRectGetMidX(*(CGRect *)(a1 + 40)), *(double *)(a1 + 72));
}

uint64_t __73__UITableView__reorderPositionChangedForCell_withScrollFactorPercentage___block_invoke_2(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 48), "_adjustShadowsIfNecessary");
}

- (void)_endSwipeToDeleteRowDidDelete:(BOOL)a3
{
  _BOOL4 v3;
  NSIndexPath *v5;
  NSIndexPath *v6;

  v3 = a3;
  if (-[UITableView _hasSwipeToDeleteRow](self, "_hasSwipeToDeleteRow")
    && (*((_BYTE *)&self->_tableFlags + 23) & 0x80) == 0)
  {
    v6 = self->_swipedIndexPath;
    if (!v3
      || (*((_BYTE *)&self->_tableFlags + 21) & 0x10) != 0
      && !-[UITableViewCell _isAnimating](self->_swipeToDeleteCell, "_isAnimating"))
    {
      -[UITableView _animateSwipeCancelation](self, "_animateSwipeCancelation");
    }
    if ((*((_QWORD *)&self->_tableFlags + 2) & 0x100000000000) != 0)
    {
      -[UITableView _setEditing:animated:forced:](self, "_setEditing:animated:forced:", 0, (*((_QWORD *)&self->_tableFlags + 2) & 0x100) == 0, 0);
      if (v3)
        v5 = 0;
      else
        v5 = v6;
      -[UITableView _sendDidEndEditingForIndexPath:](self, "_sendDidEndEditingForIndexPath:", v5);
    }

  }
}

- (void)_animateSwipeCancelation
{
  uint64_t v2;
  uint64_t v3;
  UISwipeActionController *swipeActionController;
  _QWORD v5[5];

  v2 = *((_QWORD *)&self->_tableFlags + 2);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = *((_QWORD *)&self->_tableFlags + 3);
    *((_QWORD *)&self->_tableFlags + 2) = v2 | 0x2000000000000000;
    *((_QWORD *)&self->_tableFlags + 3) = v3;
    swipeActionController = self->_swipeActionController;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __39__UITableView__animateSwipeCancelation__block_invoke;
    v5[3] = &unk_1E16B3FD8;
    v5[4] = self;
    -[UISwipeActionController resetSwipedItemAnimated:completion:](swipeActionController, "resetSwipedItemAnimated:completion:", 1, v5);
  }
}

uint64_t __39__UITableView__animateSwipeCancelation__block_invoke(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3096) &= ~0x2000000000000000uLL;
  return objc_msgSend(*(id *)(a1 + 32), "_updateWrapperClipping");
}

- (void)_didInsertRowForTableCell:(id)a3
{
  void *v4;
  id v5;

  if ((*(_BYTE *)&self->_tableFlags & 0x40) != 0)
  {
    -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", a3, 1);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "tableView:commitEditingStyle:forRowAtIndexPath:", self, 2, v5);

  }
}

- (void)_animateDeletionOfRowAtIndexPath:(id)a3
{
  id v5;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v5 = a3;
  p_tableFlags = &self->_tableFlags;
  v7 = *((_QWORD *)&self->_tableFlags + 2);
  if ((v7 & 0x8000000000000000) == 0 && (*(_BYTE *)p_tableFlags & 0x40) != 0)
  {
    v8 = *((_QWORD *)&self->_tableFlags + 3);
    *((_QWORD *)&self->_tableFlags + 2) = v7 & 0xFFFFF3FFFFFFFFFFLL | 0x40000000000;
    *((_QWORD *)&self->_tableFlags + 3) = v8;
    v13 = v5;
    if (!v5)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 17224, CFSTR("UITableView internal inconsistency: no index path for deletion."));

      p_tableFlags = &self->_tableFlags;
    }
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "tableView:commitEditingStyle:forRowAtIndexPath:", self, 1, v13);

    v11 = *((_QWORD *)p_tableFlags + 2);
    v10 = *((_QWORD *)p_tableFlags + 3);
    *((_QWORD *)p_tableFlags + 2) = v11 & 0xFFFFFBFFFFFFFFFFLL;
    v5 = v13;
    if ((v11 & 0x800000000000) == 0)
    {
      *((_QWORD *)p_tableFlags + 2) = v11 & 0xFFFFF3FFFFFFFFFFLL;
      *((_QWORD *)p_tableFlags + 3) = v10;
    }
  }

}

- (void)_animateDeletionOfRowWithCell:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v5 = a3;
  v8 = v5;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 17237, CFSTR("UITableView internal inconsistency: no cell for deletion."));

    v5 = 0;
  }
  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v5, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITableView _animateDeletionOfRowAtIndexPath:](self, "_animateDeletionOfRowAtIndexPath:", v6);

}

- (BOOL)_shouldResignFirstResponderWithInteractionDisabled
{
  return (*((_BYTE *)&self->_tableFlags + 20) & 4) == 0;
}

- (void)_setIsAncestorOfFirstResponder:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  UIView *v6;
  UIView *p_super;
  UITableView *v8;
  UITableView *v9;
  int IsKindOfUITableViewCell;
  UIView **p_firstResponderView;
  int v12;
  NSIndexPath *v13;
  NSIndexPath *firstResponderIndexPath;
  UIView *v15;
  UIView *v16;
  int firstResponderViewType;
  NSIndexPath *v18;
  NSIndexPath *v19;
  NSIndexPath *v20;
  int v21;
  int v22;
  NSIndexPath *v23;
  NSIndexPath *v24;
  objc_super v25;

  v3 = a3;
  v25.receiver = self;
  v25.super_class = (Class)UITableView;
  -[UIView _setIsAncestorOfFirstResponder:](&v25, sel__setIsAncestorOfFirstResponder_);
  -[UIView window](self, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstResponder");
  v6 = (UIView *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    while (1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      -[UIView nextResponder](v6, "nextResponder");
      p_super = (UIView *)objc_claimAutoreleasedReturnValue();

      v6 = p_super;
      if (!p_super)
        goto LABEL_13;
    }
    v6 = v6;
    p_super = v6;
    while (1)
    {
      -[UIView superview](p_super, "superview");
      v8 = (UITableView *)objc_claimAutoreleasedReturnValue();
      if (v8 == self)
        break;
      v9 = v8;
      if (v8 == (UITableView *)self->_wrapperView)
        goto LABEL_12;

      p_super = &v9->super.super;
      if (!v9)
        goto LABEL_13;
    }
    v9 = self;
LABEL_12:

  }
  else
  {
    p_super = 0;
  }
LABEL_13:
  IsKindOfUITableViewCell = _IsKindOfUITableViewCell(p_super);
  p_firstResponderView = &self->_firstResponderView;
  if (v3)
  {
    v12 = IsKindOfUITableViewCell;
    objc_storeStrong((id *)&self->_firstResponderView, p_super);
    if (v12)
    {
      self->_firstResponderViewType = 1;
      -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", p_super, 1);
      v13 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
      firstResponderIndexPath = self->_firstResponderIndexPath;
      self->_firstResponderIndexPath = v13;
LABEL_35:

      goto LABEL_36;
    }
    if (p_super == self->_tableHeaderView)
    {
      v22 = 4;
    }
    else
    {
      if (p_super != self->_tableFooterView)
      {
        if (-[UITableView _visibleHeaderViewsContainsView:](self, "_visibleHeaderViewsContainsView:", p_super))
        {
          objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[UITableView _sectionForHeaderView:](self, "_sectionForHeaderView:", p_super));
          v19 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
          v20 = self->_firstResponderIndexPath;
          self->_firstResponderIndexPath = v19;

          v21 = 2;
LABEL_39:
          self->_firstResponderViewType = v21;
          goto LABEL_36;
        }
        if (-[UITableView _visibleFooterViewsContainsView:](self, "_visibleFooterViewsContainsView:", p_super))
        {
          objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[UITableView _sectionForFooterView:](self, "_sectionForFooterView:", p_super));
          v23 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
          v24 = self->_firstResponderIndexPath;
          self->_firstResponderIndexPath = v23;

          v21 = 3;
          goto LABEL_39;
        }
        objc_opt_class();
        objc_opt_isKindOfClass();
        self->_firstResponderViewType = 0;
LABEL_34:
        firstResponderIndexPath = self->_firstResponderIndexPath;
        self->_firstResponderIndexPath = 0;
        goto LABEL_35;
      }
      v22 = 5;
    }
    self->_firstResponderViewType = v22;
    goto LABEL_34;
  }
  v15 = *p_firstResponderView;
  v16 = *p_firstResponderView;
  *p_firstResponderView = 0;

  objc_opt_self();
  if ((__addingResponderToTree & 1) == 0 && v15)
  {
    firstResponderViewType = self->_firstResponderViewType;
    if ((firstResponderViewType - 2) >= 2)
    {
      if ((firstResponderViewType - 4) >= 2)
      {
        if (firstResponderViewType == 1
          && (-[NSMutableArray containsObject:](self->_visibleCells, "containsObject:", v15) & 1) == 0
          && v15 != self->_viewBeingPreparedToDisplay)
        {
          -[UITableView _reuseTableViewCell:withIndexPath:didEndDisplaying:](self, "_reuseTableViewCell:withIndexPath:didEndDisplaying:", v15, self->_firstResponderIndexPath, 1);
        }
        goto LABEL_22;
      }
      -[UITableView _updateTableHeadersAndFootersNow:](self, "_updateTableHeadersAndFootersNow:", 0);
    }
    -[UITableView _updateVisibleHeadersAndFootersNow:](self, "_updateVisibleHeadersAndFootersNow:", 0);
  }
LABEL_22:
  v18 = self->_firstResponderIndexPath;
  self->_firstResponderIndexPath = 0;

  self->_firstResponderViewType = 0;
LABEL_36:

}

- (id)_rowData
{
  return self->_rowData;
}

- (BOOL)_wantsSwipes
{
  double v4;
  double v5;
  double v6;

  if ((*((_BYTE *)&self->_tableFlags + 14) & 0x10) != 0 && (*((_BYTE *)&self->_tableFlags + 21) & 0x10) == 0)
    return 0;
  -[UIScrollView contentSize](self, "contentSize");
  v5 = v4;
  -[UIView bounds](self, "bounds");
  return v5 == v6;
}

- (BOOL)_swipeDeletionStateHasBeenReset
{
  return (*((_BYTE *)&self->_tableFlags + 21) & 0x88) == 0;
}

- (id)_tableFooterView:(BOOL)a3
{
  BOOL v4;
  double x;
  double y;
  double width;
  double height;
  void *v9;
  UIView *v10;
  UIView *tableFooterView;
  CGRect v13;

  if (self->_tableFooterView)
    v4 = 1;
  else
    v4 = !a3;
  if (!v4 && (*((_BYTE *)&self->_tableFlags + 8) & 2) != 0)
  {
    v13.origin.x = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
    x = v13.origin.x;
    y = v13.origin.y;
    width = v13.size.width;
    height = v13.size.height;
    if (!CGRectIsEmpty(v13))
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "viewForFooterInTableView:", self);
      v10 = (UIView *)objc_claimAutoreleasedReturnValue();
      tableFooterView = self->_tableFooterView;
      self->_tableFooterView = v10;

      -[UIView setFrame:](self->_tableFooterView, "setFrame:", x, y, width, height);
      -[UITableView _addContentSubview:atBack:](self, "_addContentSubview:atBack:", self->_tableFooterView, 0);
    }
  }
  return self->_tableFooterView;
}

- (double)_spacingForExtraSeparators
{
  CGFloat v3;

  -[UITableView _clientRequestedFillerRowHeight](self, "_clientRequestedFillerRowHeight");
  return _UITableRowHeightForExtraSeparators(self, self->_rowData, v3);
}

- (BOOL)_shouldShowMenuForCell:(id)a3
{
  void *v4;
  uint64_t v5;
  void *WeakRetained;
  void *v7;
  char v8;
  _QWORD block[5];

  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", a3, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
    goto LABEL_10;
  v5 = *((_QWORD *)&self->_tableFlags + 1);
  if ((v5 & 0x1000000000) != 0)
    goto LABEL_10;
  if ((~(_BYTE)v5 & 0x38) != 0)
  {
    if ((~*(_DWORD *)&self->_tableFlags & 0xE000) == 0)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __38__UITableView__shouldShowMenuForCell___block_invoke;
      block[3] = &unk_1E16B1B28;
      block[4] = self;
      if (_shouldShowMenuForCell__once != -1)
        dispatch_once(&_shouldShowMenuForCell__once, block);
      WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
      goto LABEL_9;
    }
LABEL_10:
    v8 = 0;
    goto LABEL_11;
  }
  -[UITableView _delegateProxy](self, "_delegateProxy");
  WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:
  v7 = WeakRetained;
  v8 = objc_msgSend(WeakRetained, "tableView:shouldShowMenuForRowAtIndexPath:", self, v4);

LABEL_11:
  return v8;
}

void __38__UITableView__shouldShowMenuForCell___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  id *v4;
  NSObject *v5;
  id WeakRetained;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = _UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_6___s_category;
  if (!_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_6___s_category)
  {
    v2 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_6___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = (id *)(*(_QWORD *)(a1 + 32) + 2072);
    v5 = v3;
    WeakRetained = objc_loadWeakRetained(v4);
    v7 = 138412290;
    v8 = WeakRetained;
    _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "The -tableView:shouldShowMenuForRowAtIndexPath: method must be implemented by the UITableViewDelegate, not the UITableViewDataSource. This error will cause undefined behavior. Please move the implementation of this method to the delegate of this table view, instead of the data source: %@", (uint8_t *)&v7, 0xCu);

  }
}

- (BOOL)_canPerformAction:(SEL)a3 forCell:(id)a4 sender:(id)a5
{
  id v8;
  void *v9;
  uint64_t v10;
  void *WeakRetained;
  void *v12;
  char v13;
  _QWORD block[5];

  v8 = a5;
  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", a4, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
    goto LABEL_10;
  v10 = *((_QWORD *)&self->_tableFlags + 1);
  if ((v10 & 0x1000000000) != 0)
    goto LABEL_10;
  if ((~(_BYTE)v10 & 0x30) != 0)
  {
    if ((~*(_DWORD *)&self->_tableFlags & 0xC000) == 0)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __48__UITableView__canPerformAction_forCell_sender___block_invoke;
      block[3] = &unk_1E16B1B28;
      block[4] = self;
      if (_canPerformAction_forCell_sender__once != -1)
        dispatch_once(&_canPerformAction_forCell_sender__once, block);
      WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
      goto LABEL_9;
    }
LABEL_10:
    v13 = 0;
    goto LABEL_11;
  }
  -[UITableView _delegateProxy](self, "_delegateProxy");
  WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:
  v12 = WeakRetained;
  v13 = objc_msgSend(WeakRetained, "tableView:canPerformAction:forRowAtIndexPath:withSender:", self, a3, v9, v8);

LABEL_11:
  return v13;
}

void __48__UITableView__canPerformAction_forCell_sender___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  id *v4;
  NSObject *v5;
  id WeakRetained;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = _UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_7___s_category;
  if (!_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_7___s_category)
  {
    v2 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_7___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = (id *)(*(_QWORD *)(a1 + 32) + 2072);
    v5 = v3;
    WeakRetained = objc_loadWeakRetained(v4);
    v7 = 138412290;
    v8 = WeakRetained;
    _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "The -tableView:canPerformAction:forRowAtIndexPath:withSender: method must be implemented by the UITableViewDelegate, not the UITableViewDataSource. This error will cause undefined behavior. Please move the implementation of this method to the delegate of this table view, instead of the data source: %@", (uint8_t *)&v7, 0xCu);

  }
}

- (void)_performAction:(SEL)a3 forCell:(id)a4 sender:(id)a5
{
  void *v8;
  uint64_t v9;
  void *WeakRetained;
  void *v11;
  id v12;
  _QWORD block[5];

  v12 = a5;
  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", a4, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = *((_QWORD *)&self->_tableFlags + 1);
    if ((v9 & 0x1000000000) == 0)
    {
      if ((~(_BYTE)v9 & 0x30) == 0)
      {
        -[UITableView _delegateProxy](self, "_delegateProxy");
        WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:
        v11 = WeakRetained;
        objc_msgSend(WeakRetained, "tableView:performAction:forRowAtIndexPath:withSender:", self, a3, v8, v12);

        goto LABEL_10;
      }
      if ((~*(_DWORD *)&self->_tableFlags & 0xC000) == 0)
      {
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __45__UITableView__performAction_forCell_sender___block_invoke;
        block[3] = &unk_1E16B1B28;
        block[4] = self;
        if (_performAction_forCell_sender__once != -1)
          dispatch_once(&_performAction_forCell_sender__once, block);
        WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
        goto LABEL_9;
      }
    }
  }
LABEL_10:

}

void __45__UITableView__performAction_forCell_sender___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  id *v4;
  NSObject *v5;
  id WeakRetained;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = _UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_8___s_category;
  if (!_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_8___s_category)
  {
    v2 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_8___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = (id *)(*(_QWORD *)(a1 + 32) + 2072);
    v5 = v3;
    WeakRetained = objc_loadWeakRetained(v4);
    v7 = 138412290;
    v8 = WeakRetained;
    _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "The -tableView:performAction:forRowAtIndexPath:withSender: method must be implemented by the UITableViewDelegate, not the UITableViewDataSource. This error will cause undefined behavior. Please move the implementation of this method to the delegate of this table view, instead of the data source: %@", (uint8_t *)&v7, 0xCu);

  }
}

- (BOOL)_canBeginMenuInteractionAtLocation:(CGPoint)a3
{
  BOOL v3;
  void *v4;

  if (self->_swipedIndexPath)
    return 0;
  -[UITableView hitTest:withEvent:](self, "hitTest:withEvent:", 0, a3.x, a3.y);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 1;
  if (objc_msgSend(v4, "isUserInteractionEnabled"))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v3 = 0;
  }

  return v3;
}

- (id)contextMenuInteraction:(id)a3 configurationForMenuAtLocation:(CGPoint)a4
{
  double y;
  double x;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  y = a4.y;
  x = a4.x;
  v7 = a3;
  if ((*((_BYTE *)&self->_tableFlags + 12) & 0x10) != 0
    && -[UITableView _canBeginMenuInteractionAtLocation:](self, "_canBeginMenuInteractionAtLocation:", x, y))
  {
    -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, x, y);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "tableView:contextMenuConfigurationForRowAtIndexPath:point:", self, v8, x, y);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        -[UITableView _identityTracker:](self, "_identityTracker:", 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIIndexPathIdentityTracker identifierForIndexPath:]((uint64_t)v11, v8);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_setAssociatedObject(v10, &ContextMenuConfigurationAssociatedIdentifierKey, v12, (void *)1);
      }
    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

- (id)_defaultContextMenuTargetedPreviewForIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  NSObject *v12;
  NSObject *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    -[UITableView _identityTracker:](self, "_identityTracker:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIIndexPathIdentityTracker currentIndexPathForIdentifier:]((uint64_t)v5, (uint64_t)v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
      v10 = 0;
LABEL_15:

      goto LABEL_16;
    }
    -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v6, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      objc_msgSend(v7, "window");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9)
      {
        _UITargetedPreviewForContextMenuFromCell(v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:

        goto LABEL_15;
      }
      if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
        {
          v15 = 138412802;
          v16 = v8;
          v17 = 2112;
          v18 = v6;
          v19 = 2112;
          v20 = v4;
          _os_log_fault_impl(&dword_185066000, v14, OS_LOG_TYPE_FAULT, "Cell (%@) at indexPath (%@) with identifier (%@) is not in a window. Was the table view removed from its window?", (uint8_t *)&v15, 0x20u);
        }

      }
      else
      {
        v11 = _defaultContextMenuTargetedPreviewForIdentifier____s_category;
        if (!_defaultContextMenuTargetedPreviewForIdentifier____s_category)
        {
          v11 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v11, (unint64_t *)&_defaultContextMenuTargetedPreviewForIdentifier____s_category);
        }
        v12 = *(NSObject **)(v11 + 8);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v15 = 138412802;
          v16 = v8;
          v17 = 2112;
          v18 = v6;
          v19 = 2112;
          v20 = v4;
          _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "Cell (%@) at indexPath (%@) with identifier (%@) is not in a window. Was the table view removed from its window?", (uint8_t *)&v15, 0x20u);
        }
      }
    }
    v10 = 0;
    goto LABEL_14;
  }
  v10 = 0;
LABEL_16:

  return v10;
}

- (id)contextMenuInteraction:(id)a3 previewForHighlightingMenuWithConfiguration:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v6 = a3;
  v7 = a4;
  if ((*((_BYTE *)&self->_tableFlags + 12) & 0x20) == 0
    || (-[UITableView _delegateProxy](self, "_delegateProxy"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v8, "tableView:previewForHighlightingContextMenuWithConfiguration:", self, v7),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v8,
        !v9))
  {
    objc_getAssociatedObject(v7, &ContextMenuConfigurationAssociatedIdentifierKey);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _defaultContextMenuTargetedPreviewForIdentifier:](self, "_defaultContextMenuTargetedPreviewForIdentifier:", v10);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v9;
}

- (id)contextMenuInteraction:(id)a3 previewForDismissingMenuWithConfiguration:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v6 = a3;
  v7 = a4;
  if ((*((_BYTE *)&self->_tableFlags + 12) & 0x40) == 0
    || (-[UITableView _delegateProxy](self, "_delegateProxy"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v8, "tableView:previewForDismissingContextMenuWithConfiguration:", self, v7),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v8,
        !v9))
  {
    objc_getAssociatedObject(v7, &ContextMenuConfigurationAssociatedIdentifierKey);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _defaultContextMenuTargetedPreviewForIdentifier:](self, "_defaultContextMenuTargetedPreviewForIdentifier:", v10);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v9;
}

- (void)contextMenuInteraction:(id)a3 willPerformPreviewActionForMenuWithConfiguration:(id)a4 animator:(id)a5
{
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;

  v12 = a3;
  v8 = a4;
  v9 = a5;
  v10 = *((_QWORD *)&self->_tableFlags + 1);
  if ((v10 & 0x10000000000) != 0)
  {
    -[UITableView delegate](self, "delegate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "tableView:willPerformPreviewActionForMenuWithConfiguration:animator:", self, v8, v9);
    goto LABEL_5;
  }
  if ((v10 & 0x8000000000) != 0)
  {
    -[UITableView delegate](self, "delegate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "tableView:willCommitMenuWithAnimator:", self, v9);
LABEL_5:

  }
}

- (void)contextMenuInteraction:(id)a3 willDisplayMenuForConfiguration:(id)a4 animator:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v16 = a3;
  v8 = a4;
  v9 = a5;
  if ((*((_BYTE *)&self->_tableFlags + 13) & 2) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "tableView:willDisplayContextMenuWithConfiguration:animator:", self, v8, v9);

  }
  objc_msgSend(v8, "_effectiveSecondaryItemIdentifiers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "count");

  if (v12 >= 2)
  {
    objc_getAssociatedObject(v8, &ContextMenuConfigurationAssociatedIdentifierKey);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITableView _identityTracker:](self, "_identityTracker:", 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIIndexPathIdentityTracker currentIndexPathForIdentifier:]((uint64_t)v14, (uint64_t)v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    -[UITableView _updateContextMenuStateForVisibleCells:](self, "_updateContextMenuStateForVisibleCells:", v15);
  }

}

- (void)contextMenuInteraction:(id)a3 willEndForConfiguration:(id)a4 animator:(id)a5
{
  id v7;
  void *v8;
  id v9;

  v9 = a4;
  v7 = a5;
  -[UITableView _updateContextMenuStateForVisibleCells:](self, "_updateContextMenuStateForVisibleCells:", 0);
  if ((*((_BYTE *)&self->_tableFlags + 13) & 4) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "tableView:willEndContextMenuInteractionWithConfiguration:animator:", self, v9, v7);

  }
}

- (void)_updateContextMenuStateForVisibleCells:(id)a3
{
  id v4;
  NSMutableArray *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4
    && (unint64_t)-[NSMutableArray count](self->_selectedIndexPaths, "count") >= 2
    && -[NSMutableArray containsObject:](self->_selectedIndexPaths, "containsObject:", v4))
  {

    v4 = 0;
  }
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = self->_visibleCells;
  v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        v11 = 1;
        -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v10, 1, (_QWORD)v14);
        v12 = (id)objc_claimAutoreleasedReturnValue();
        v13 = v4;
        if (v12 != v13)
        {
          v11 = 0;
          if (v4)
          {
            if (v12)
              v11 = objc_msgSend(v12, "isEqual:", v13);
          }
        }

        objc_msgSend(v10, "_setShowingCompactContextMenu:", v11);
      }
      v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }

}

- (double)_heightForSeparator
{
  unint64_t v3;
  double result;
  double v5;

  v3 = -[UITableView separatorStyle](self, "separatorStyle") - 1;
  result = 0.0;
  if (v3 <= 1)
  {
    -[UIView _currentScreenScale](self, "_currentScreenScale", 0.0);
    return 1.0 / v5;
  }
  return result;
}

- (double)_backgroundInset
{
  UITableViewRowData *rowData;
  double result;
  char rowDataFlags;

  rowData = self->_rowData;
  result = 0.0;
  if (rowData)
  {
    rowDataFlags = (char)rowData->_rowDataFlags;
    if ((rowDataFlags & 4) != 0)
    {
      return rowData->_tableSidePadding;
    }
    else
    {
      rowData->_tableSidePadding = 0.0;
      *(_BYTE *)&rowData->_rowDataFlags = rowDataFlags | 4;
    }
  }
  return result;
}

- (UIEdgeInsets)_backgroundContentInset
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  UIEdgeInsets result;

  -[UITableView _backgroundInset](self, "_backgroundInset");
  v3 = v2;
  v4 = 0.0;
  v5 = 0.0;
  v6 = v3;
  result.right = v6;
  result.bottom = v5;
  result.left = v3;
  result.top = v4;
  return result;
}

- (CGRect)_calloutTargetRectForCell:(id)a3
{
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGRect result;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    if ((*((_BYTE *)&self->_tableFlags + 8) & 4) != 0)
    {
      -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v4, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "tableView:calloutTargetRectForCell:forRowAtIndexPath:", self, v5, v14);
      v7 = v16;
      v9 = v17;
      v11 = v18;
      v13 = v19;

    }
    else
    {
      objc_msgSend(v4, "bounds");
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v13 = v12;
    }
  }
  else
  {
    v7 = *MEMORY[0x1E0C9D648];
    v9 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v11 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v13 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  }

  v20 = v7;
  v21 = v9;
  v22 = v11;
  v23 = v13;
  result.size.height = v23;
  result.size.width = v22;
  result.origin.y = v21;
  result.origin.x = v20;
  return result;
}

- (BOOL)_keepsFirstResponderVisibleOnBoundsChange
{
  return (*((unsigned __int8 *)&self->_tableFlags + 20) >> 3) & 1;
}

- (void)_setKeepsFirstResponderVisibleOnBoundsChange:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x800000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFFFF7FFFFFFFFLL | v3;
}

- (void)_setIgnorePinnedTableHeaderUpdates:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x200000000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2) & 0xFFFFDFFFFFFFFFFFLL | v3;
}

- (BOOL)ignorePinnedTableHeaderUpdates
{
  return (*((unsigned __int8 *)&self->_tableFlags + 21) >> 5) & 1;
}

- (void)encodeRestorableStateWithCoder:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  objc_super v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[UITableView dataSource](self, "dataSource");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend((id)objc_opt_class(), "conformsToProtocol:", &unk_1EE02B570);

  v33.receiver = self;
  v33.super_class = (Class)UITableView;
  -[UIScrollView encodeRestorableStateWithCoder:](&v33, sel_encodeRestorableStateWithCoder_, v4);
  -[UIView window](self, "window");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "firstResponder");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v8, "isDescendantOfView:", self))
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIViewNeedsLayoutKey"));
  if (v6)
  {
    -[UIScrollView contentOffset](self, "contentOffset");
    v10 = v9;
    v12 = v11;
    -[UITableView _contentInset](self, "_contentInset");
    -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, v10, v12 + v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "modelIdentifierForElementAtIndexPath:inView:", v14, self);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
        objc_msgSend(v4, "encodeObject:forKey:", v16, CFSTR("kTopApplicationTopVisibleModelIdentifier"));

    }
  }
  if (-[UITableView isEditing](self, "isEditing"))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v17, CFSTR("kApplicationIsEditingKey"));

  }
  -[UITableView _indexPathsForSelectedRowsUsingPresentationValues:](self, "_indexPathsForSelectedRowsUsingPresentationValues:", 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v18, "count"))
  {
    objc_msgSend(v4, "encodeObject:forKey:", v18, CFSTR("kApplicationSelectedCellIndexPathsKey"));
    if (v6)
    {
      v28 = v8;
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v20 = v18;
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
      if (v21)
      {
        v22 = v21;
        v23 = *(_QWORD *)v30;
        do
        {
          v24 = 0;
          do
          {
            if (*(_QWORD *)v30 != v23)
              objc_enumerationMutation(v20);
            v25 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v24);
            -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "modelIdentifierForElementAtIndexPath:inView:", v25, self);
            v27 = (void *)objc_claimAutoreleasedReturnValue();

            if (v27)
              objc_msgSend(v19, "addObject:", v27);

            ++v24;
          }
          while (v22 != v24);
          v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
        }
        while (v22);
      }

      if (objc_msgSend(v19, "count"))
        objc_msgSend(v4, "encodeObject:forKey:", v19, CFSTR("kApplicationSelectedCells"));

      v8 = v28;
    }
  }

}

- (BOOL)_indexPathIsValid:(id)a3
{
  uint64_t v5;
  uint64_t v6;

  if (!a3)
    return 0;
  v5 = objc_msgSend(a3, "section");
  v6 = objc_msgSend(a3, "row");
  return -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1) > v5&& -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", v5, 1) > v6;
}

- (BOOL)_pathIsHidden:(id)a3
{
  id v4;
  BOOL v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = 1;
  -[UITableView _indexPathsForVisibleRowsUsingPresentationValues:](self, "_indexPathsForVisibleRowsUsingPresentationValues:", 1);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v6);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "isEqual:", v4, (_QWORD)v12) & 1) != 0)
        {
          v5 = 0;
          goto LABEL_11;
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v8)
        continue;
      break;
    }
    v5 = 1;
  }
LABEL_11:

  return v5;
}

- (void)decodeRestorableStateWithCoder:(id)a3
{
  id v4;
  void *v5;
  int v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  UITableView *v33;
  UITableView *v34;
  char v35;
  UITableView *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  objc_super v57;
  _BYTE v58[128];
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "decodeBoolForKey:", CFSTR("UIViewNeedsLayoutKey")))
    -[UIView layoutIfNeeded](self, "layoutIfNeeded");
  -[UITableView dataSource](self, "dataSource");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend((id)objc_opt_class(), "conformsToProtocol:", &unk_1EE02B570);

  -[UITableView _reloadDataIfNeeded](self, "_reloadDataIfNeeded");
  v57.receiver = self;
  v57.super_class = (Class)UITableView;
  -[UIScrollView decodeRestorableStateWithCoder:](&v57, sel_decodeRestorableStateWithCoder_, v4);
  if (v6)
  {
    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kTopApplicationTopVisibleModelIdentifier"));
    v7 = objc_claimAutoreleasedReturnValue();
    -[UIScrollView contentOffset](self, "contentOffset");
    v9 = v8;
    v11 = v10;
    -[UITableView _contentInset](self, "_contentInset");
    v13 = 1;
    -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, v9, v11 + v12);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "modelIdentifierForElementAtIndexPath:inView:", v14, self);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v47 = v16;
    v48 = (void *)v7;
    if (v7)
    {
      if ((objc_msgSend(v16, "isEqualToString:", v7) & 1) != 0)
      {
        v13 = 0;
      }
      else
      {
        -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "indexPathForElementWithModelIdentifier:inView:", v7, self);
        v27 = objc_claimAutoreleasedReturnValue();

        if (v27)
        {
          if (-[UITableView _indexPathIsValid:](self, "_indexPathIsValid:", v27))
          {
            -[UITableView _scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:](self, "_scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:", v27, 1, 0, 1);
            v13 = 0;
          }
          v14 = (id)v27;
        }
        else
        {
          v14 = 0;
        }
      }
    }
    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kApplicationIsEditingKey"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = (void *)MEMORY[0x1E0C99E60];
    v30 = objc_opt_class();
    objc_msgSend(v29, "setWithObjects:", v30, objc_opt_class(), 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v31, CFSTR("kApplicationSelectedCells"));
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v28)
    {
      -[UITableView delegate](self, "delegate");
      v33 = (UITableView *)objc_claimAutoreleasedReturnValue();
      -[UITableView dataSource](self, "dataSource");
      v34 = (UITableView *)objc_claimAutoreleasedReturnValue();
      v35 = objc_opt_respondsToSelector();
      v36 = v33;
      if ((v35 & 1) == 0)
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
          v36 = v34;
        else
          v36 = self;
      }
      -[UITableView setEditing:animated:](v36, "setEditing:animated:", 1, 0);

    }
    if (v32)
    {
      v45 = v32;
      v46 = v28;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v37 = v32;
      v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v53, v59, 16);
      if (v38)
      {
        v39 = v38;
        v40 = *(_QWORD *)v54;
        do
        {
          for (i = 0; i != v39; ++i)
          {
            v42 = v14;
            if (*(_QWORD *)v54 != v40)
              objc_enumerationMutation(v37);
            v43 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * i);
            -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "indexPathForElementWithModelIdentifier:inView:", v43, self);
            v14 = (id)objc_claimAutoreleasedReturnValue();

            if (v14 && -[UITableView _indexPathIsValid:](self, "_indexPathIsValid:", v14))
            {
              if ((v13 & 1) != 0 && -[UITableView _pathIsHidden:](self, "_pathIsHidden:", v14))
                -[UITableView _scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:](self, "_scrollToRowAtIndexPath:atScrollPosition:animated:usingPresentationValues:", v14, 0, 0, 1);
              -[UITableView selectRowAtIndexPath:animated:scrollPosition:](self, "selectRowAtIndexPath:animated:scrollPosition:", v14, 0, 0);
              v13 = 0;
            }
          }
          v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v53, v59, 16);
        }
        while (v39);
      }

      v32 = v45;
      v28 = v46;
    }

    v20 = v48;
LABEL_45:

    goto LABEL_46;
  }
  v17 = (void *)MEMORY[0x1E0C99E60];
  v18 = objc_opt_class();
  objc_msgSend(v17, "setWithObjects:", v18, objc_opt_class(), 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v19, CFSTR("kApplicationSelectedCellIndexPathsKey"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v20, "count"))
  {
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v14 = v20;
    v21 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v50;
      do
      {
        for (j = 0; j != v22; ++j)
        {
          if (*(_QWORD *)v50 != v23)
            objc_enumerationMutation(v14);
          v25 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * j);
          if (-[UITableView _indexPathIsValid:](self, "_indexPathIsValid:", v25))
            -[UITableView selectRowAtIndexPath:animated:scrollPosition:](self, "selectRowAtIndexPath:animated:scrollPosition:", v25, 0, 0);
        }
        v22 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
      }
      while (v22);
    }
    v20 = v14;
    goto LABEL_45;
  }
LABEL_46:

}

- (BOOL)_separatorsDrawAsOverlay
{
  return (*((unsigned __int8 *)&self->_tableFlags + 21) >> 6) & 1;
}

- (int64_t)_separatorBackdropOverlayBlendMode
{
  return (*((_QWORD *)&self->_tableFlags + 2) >> 50) & 7;
}

- (UIVisualEffect)separatorEffect
{
  return self->_separatorEffect;
}

- (void)setInsetsLayoutMarginsFromSafeArea:(BOOL)a3
{
  _BOOL8 v3;
  objc_super v5;

  v3 = a3;
  v5.receiver = self;
  v5.super_class = (Class)UITableView;
  -[UIView setInsetsLayoutMarginsFromSafeArea:](&v5, sel_setInsetsLayoutMarginsFromSafeArea_);
  -[UIView setInsetsLayoutMarginsFromSafeArea:](self->_wrapperView, "setInsetsLayoutMarginsFromSafeArea:", v3);
}

- (void)setSeparatorInsetReference:(UITableViewSeparatorInsetReference)separatorInsetReference
{
  -[UITableView _setSeparatorInsetIsRelativeToCellEdges:](self, "_setSeparatorInsetIsRelativeToCellEdges:", separatorInsetReference == UITableViewSeparatorInsetFromCellEdges);
}

- (UITableViewSeparatorInsetReference)separatorInsetReference
{
  return (unint64_t)((*((_BYTE *)&self->_tableFlags + 25) & 0x80) == 0);
}

- (UIEdgeInsets)separatorInset
{
  double left;
  double top;
  double right;
  double bottom;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  UIEdgeInsets result;

  top = self->_separatorInset.top;
  left = self->_separatorInset.left;
  bottom = self->_separatorInset.bottom;
  right = self->_separatorInset.right;
  if (left == -1.0)
  {
    -[UITableView _defaultMarginWidth](self, "_defaultMarginWidth");
    left = v7;
  }
  if (right == -1.0)
  {
    -[UITableView _indexBarExtentFromEdge](self, "_indexBarExtentFromEdge");
    right = v8;
  }
  if (bottom == -1.0)
    v9 = 0.0;
  else
    v9 = bottom;
  if (top == -1.0)
    v10 = 0.0;
  else
    v10 = top;
  v11 = left;
  v12 = right;
  result.right = v12;
  result.bottom = v9;
  result.left = v11;
  result.top = v10;
  return result;
}

- (BOOL)_isEditingForSwipeDeletion
{
  return (*((unsigned __int8 *)&self->_tableFlags + 21) >> 4) & 1;
}

- (void)setSelfSizingInvalidation:(UITableViewSelfSizingInvalidation)selfSizingInvalidation
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t k;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  p_tableFlags = &self->_tableFlags;
  v4 = *((_QWORD *)&self->_tableFlags + 3);
  v5 = (v4 >> 39) & 3;
  v6 = v4 & 0xFFFFFE7FFFFFFFFFLL | ((unint64_t)(selfSizingInvalidation & 3) << 39);
  *((_QWORD *)&self->_tableFlags + 3) = v6;
  if (v5 != selfSizingInvalidation)
  {
    if ((selfSizingInvalidation & 3) == 0)
    {
      -[UITableView _clearNeedsRecomputeHeightsForInvalidatedElements](self, "_clearNeedsRecomputeHeightsForInvalidatedElements");
      v6 = *((_QWORD *)p_tableFlags + 3);
    }
    v8 = v6 & 0x18000000000;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    -[UITableView _preparedCells](self, "_preparedCells");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v35;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v35 != v12)
            objc_enumerationMutation(v9);
          objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * i), "_setAutomaticIntrinsicContentSizeInvalidationEnabled:", v8 == 0x10000000000);
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
      }
      while (v11);
    }

    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    -[NSMutableDictionary objectEnumerator](self->_visibleHeaderViews, "objectEnumerator");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v31;
      do
      {
        for (j = 0; j != v16; ++j)
        {
          if (*(_QWORD *)v31 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * j);
          if (_IsKindOfUITableViewHeaderFooterView(v19))
            objc_msgSend(v19, "_setAutomaticIntrinsicContentSizeInvalidationEnabled:", v8 == 0x10000000000);
        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
      }
      while (v16);
    }

    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    -[NSMutableDictionary objectEnumerator](self->_visibleFooterViews, "objectEnumerator", 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v27;
      do
      {
        for (k = 0; k != v22; ++k)
        {
          if (*(_QWORD *)v27 != v23)
            objc_enumerationMutation(v20);
          v25 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * k);
          if (_IsKindOfUITableViewHeaderFooterView(v25))
            objc_msgSend(v25, "_setAutomaticIntrinsicContentSizeInvalidationEnabled:", v8 == 0x10000000000);
        }
        v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
      }
      while (v22);
    }

  }
}

- (UITableViewSelfSizingInvalidation)selfSizingInvalidation
{
  return (*((_QWORD *)&self->_tableFlags + 3) >> 39) & 3;
}

- (void)_setNeedsRecomputeHeightsForInvalidatedElements
{
  UICollectionViewLayoutInvalidationContext *v3;
  UICollectionViewLayoutInvalidationContext *intrinsicContentSizeInvalidationContext;
  _BOOL4 v5;
  unint64_t v6;
  uint64_t v7;

  if (!self->_intrinsicContentSizeInvalidationContext)
  {
    v3 = objc_alloc_init(UICollectionViewLayoutInvalidationContext);
    intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
    self->_intrinsicContentSizeInvalidationContext = v3;

    -[UIScrollView setNeedsLayout](self, "setNeedsLayout");
  }
  v5 = +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled");
  v6 = *((_QWORD *)&self->_tableFlags + 3);
  v7 = 0x20000000000;
  if (!(v5 | (v6 >> 41) & 1))
    v7 = 0;
  *((_QWORD *)&self->_tableFlags + 3) = v7 | v6 & 0xFFFFFDFFFFFFFFFFLL;
}

void __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t k;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v32 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * i);
        if (objc_msgSend(a1[5], "_indexPathIsValid:", v7))
        {
          objc_msgSend(a1[5], "_cellForRowAtIndexPath:usingPresentationValues:", v7, 1);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[5], "_recomputeHeightForCell:atIndexPath:", v8, v7);

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[6], "objectForKey:", CFSTR("UICollectionElementKindSectionHeader"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v36, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v28;
    do
    {
      for (j = 0; j != v11; ++j)
      {
        if (*(_QWORD *)v28 != v12)
          objc_enumerationMutation(v9);
        v14 = objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * j), "section");
        if (v14 < objc_msgSend(a1[5], "_numberOfSectionsUsingPresentationValues:", 1))
        {
          objc_msgSend(a1[5], "_headerViewForSection:usingPresentationValues:", v14, 1);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[5], "_recomputeHeightForHeaderOrFooter:view:inSection:", 1, v15, v14);

        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v36, 16);
    }
    while (v11);
  }
  objc_msgSend(a1[6], "objectForKey:", CFSTR("UICollectionElementKindSectionFooter"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v23, v35, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v24;
    do
    {
      for (k = 0; k != v18; ++k)
      {
        if (*(_QWORD *)v24 != v19)
          objc_enumerationMutation(v16);
        v21 = objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * k), "section");
        if (v21 < objc_msgSend(a1[5], "_numberOfSectionsUsingPresentationValues:", 1))
        {
          objc_msgSend(a1[5], "_footerViewForSection:usingPresentationValues:", v21, 1);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[5], "_recomputeHeightForHeaderOrFooter:view:inSection:", 0, v22, v21);

        }
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v23, v35, 16);
    }
    while (v18);
  }

}

void __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_2(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  (*(void (**)(void))(a1[8] + 16))();
  v2 = (_BYTE *)a1[4];
  if ((v2[3095] & 0x20) != 0)
  {
    objc_msgSend(v2, "_setupAnimationsForResizedViewsWithOldRowData:oldVisibleViews:", a1[5], a1[6]);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1[7] + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

uint64_t __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_3(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 40))
    return objc_msgSend(*(id *)(result + 32), "_updateAnimationDidStopWithOldVisibleViews:finished:context:", *(_QWORD *)(result + 40), a2);
  return result;
}

uint64_t __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_4(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 3104) &= 0xFFFFE7FFFFFFFFFFLL;
  return result;
}

- (id)_setupAnimationsForResizedViewsWithOldRowData:(id)a3 oldVisibleViews:(id)a4
{
  id v6;
  id v7;
  _UITableViewUpdateSupport *v8;
  UITableViewRowData *rowData;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _UITableViewUpdateSupport *v13;
  _UITableViewUpdateSupport *currentUpdate;
  _QWORD *v15;
  NSUInteger v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  _UITableViewUpdateSupport *v21;
  _QWORD v23[5];

  v6 = a4;
  v7 = a3;
  v8 = [_UITableViewUpdateSupport alloc];
  rowData = self->_rowData;
  v10 = -[UITableViewRowData numberOfRows]((uint64_t)v7);
  v11 = -[UITableViewRowData numberOfRows]((uint64_t)self->_rowData);
  v13 = (_UITableViewUpdateSupport *)-[_UITableViewUpdateSupport initWithTableView:updateItems:oldRowData:newRowData:oldRowRange:newRowRange:context:](v8, self, MEMORY[0x1E0C9AA60], v7, rowData, 0, v10, v12, 0, v11, 0);

  currentUpdate = self->_currentUpdate;
  self->_currentUpdate = v13;

  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __77__UITableView__setupAnimationsForResizedViewsWithOldRowData_oldVisibleViews___block_invoke;
  v23[3] = &unk_1E16B1B28;
  v23[4] = self;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v23);
  v15 = -[UIViewAnimationContext initWithCompletionHandler:]([UIViewAnimationContext alloc], 0);
  -[UIViewAnimationContext setViewAnimations:]((uint64_t)v15, self->_currentUpdate->viewAnimations);
  ++self->_updateAnimationCount;
  self->_visibleRows.location = -[UITableViewRowData globalRowsInRect:canGuess:](&self->_rowData->super.isa, 0, self->_currentUpdate->newTableViewVisibleBounds.origin.x, self->_currentUpdate->newTableViewVisibleBounds.origin.y, self->_currentUpdate->newTableViewVisibleBounds.size.width, self->_currentUpdate->newTableViewVisibleBounds.size.height);
  self->_visibleRows.length = v16;
  -[UITableView _visibleBounds](self, "_visibleBounds");
  self->_visibleBounds.origin.x = v17;
  self->_visibleBounds.origin.y = v18;
  self->_visibleBounds.size.width = v19;
  self->_visibleBounds.size.height = v20;
  -[UITableView _startViewAnimationsForUpdate:withContext:swipeOccurrenceAnimatingDelete:oldVisibleViews:useCopyBlendingForAnimations:](self, "_startViewAnimationsForUpdate:withContext:swipeOccurrenceAnimatingDelete:oldVisibleViews:useCopyBlendingForAnimations:", self->_currentUpdate, v15, 0, v6, 0);

  v21 = self->_currentUpdate;
  self->_currentUpdate = 0;

  return v15;
}

void __77__UITableView__setupAnimationsForResizedViewsWithOldRowData_oldVisibleViews___block_invoke(uint64_t a1)
{
  -[_UITableViewUpdateSupport _setupAnimations](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2936));
}

- (BOOL)_recomputeHeightForCell:(id)a3 atIndexPath:(id)a4
{
  id v4;
  double v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  double v15;
  CGRect v17;

  v4 = a3;
  if (a3)
  {
    if ((objc_msgSend(a3, "_isHiddenForReuse") & 1) != 0)
    {
      LOBYTE(v4) = 0;
    }
    else
    {
      v7 = -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)self->_rowData, objc_msgSend(a4, "row"), objc_msgSend(a4, "section"), 1);
      v9 = v8;
      v11 = v10;
      v13 = v12;
      objc_msgSend(v4, "_setNeedsHeightCalculation:", 1);
      -[UITableView _heightForCell:atIndexPath:](self, "_heightForCell:atIndexPath:", v4, a4);
      v15 = v14;
      objc_msgSend(v4, "_setNeedsHeightCalculation:", 0);
      v17.origin.x = v7;
      v17.origin.y = v9;
      v17.size.width = v11;
      v17.size.height = v13;
      LOBYTE(v4) = 0;
      if (vabdd_f64(CGRectGetHeight(v17), v15) > 0.0001)
      {
        -[UITableViewRowData setHeight:forRowAtIndexPath:]((uint64_t)self->_rowData, a4, v15);
        LOBYTE(v4) = 1;
        -[UITableView _setNeedsVisibleCellsUpdate:withFrames:updateImmediatelyIfPossible:](self, "_setNeedsVisibleCellsUpdate:withFrames:updateImmediatelyIfPossible:", 1, 1, 0);
      }
    }
  }
  return (char)v4;
}

- (BOOL)_recomputeHeightForHeaderOrFooter:(BOOL)a3 view:(id)a4 inSection:(int64_t)a5
{
  _BOOL4 v6;
  id v8;
  void *v9;
  UITableViewRowData *rowData;
  double v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  UITableViewRowData *v23;
  BOOL v24;
  CGRect v26;

  v6 = a3;
  v8 = a4;
  v9 = v8;
  if (!v8 || (objc_msgSend(v8, "_isHiddenForReuse") & 1) != 0)
    goto LABEL_9;
  rowData = self->_rowData;
  if (v6)
  {
    v11 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)rowData, a5, 1);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    -[UITableView _heightForHeaderView:inSection:](self, "_heightForHeaderView:inSection:", v9, a5);
  }
  else
  {
    v11 = -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)rowData, a5, 1);
    v13 = v19;
    v15 = v20;
    v17 = v21;
    -[UITableView _heightForFooterView:inSection:](self, "_heightForFooterView:inSection:", v9, a5);
  }
  v22 = v18;
  v26.origin.x = v11;
  v26.origin.y = v13;
  v26.size.width = v15;
  v26.size.height = v17;
  if (vabdd_f64(CGRectGetHeight(v26), v22) <= 0.0001)
  {
LABEL_9:
    v24 = 0;
  }
  else
  {
    v23 = self->_rowData;
    if (v6)
      -[UITableViewRowData setHeight:forHeaderInSection:]((uint64_t)v23, a5, v22);
    else
      -[UITableViewRowData setHeight:forFooterInSection:]((uint64_t)v23, a5, v22);
    v24 = 1;
    -[UITableView _setNeedsVisibleCellsUpdate:withFrames:updateImmediatelyIfPossible:](self, "_setNeedsVisibleCellsUpdate:withFrames:updateImmediatelyIfPossible:", 1, 1, 0);
  }

  return v24;
}

- (BOOL)_disableReuseQueuePurgeOnTextSizeChanges
{
  return (*((unsigned __int8 *)&self->_tableFlags + 28) >> 4) & 1;
}

- (void)_setDisableReuseQueuePurgeOnTextSizeChanges:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x1000000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 3) = *((_QWORD *)&self->_tableFlags + 3) & 0xFFFFFFEFFFFFFFFFLL | v3;
}

- (void)_systemTextSizeChanged
{
  _BOOL4 v3;
  NSMutableArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = -[UITableView cellLayoutMarginsFollowReadableWidth](self, "cellLayoutMarginsFollowReadableWidth");
  if (self && v3)
    -[UIView _updateInferredLayoutMargins](self, "_updateInferredLayoutMargins");
  -[UITableView _reapTentativeViews](self, "_reapTentativeViews");
  -[_UITableViewSubviewManager removeAllPrefetchedCells]((id *)&self->_subviewManager->super.isa);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v4 = self->_visibleCells;
  v5 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v30;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v30 != v7)
          objc_enumerationMutation(v4);
        __37__UITableView__systemTextSizeChanged__block_invoke(*(void **)(*((_QWORD *)&v29 + 1) + 8 * v8++));
      }
      while (v6 != v8);
      v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
    }
    while (v6);
  }

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  -[NSMutableDictionary objectEnumerator](self->_reusableTableCells, "objectEnumerator");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v26;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v26 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v13);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v15 = v14;
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v21, v33, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v22;
          do
          {
            v19 = 0;
            do
            {
              if (*(_QWORD *)v22 != v18)
                objc_enumerationMutation(v15);
              __37__UITableView__systemTextSizeChanged__block_invoke(*(void **)(*((_QWORD *)&v21 + 1) + 8 * v19++));
            }
            while (v17 != v19);
            v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v21, v33, 16);
          }
          while (v17);
        }

        ++v13;
      }
      while (v13 != v11);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
    }
    while (v11);
  }

  v20 = *((_QWORD *)&self->_tableFlags + 3);
  if ((v20 & 0x1000000000) == 0)
  {
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v20 | 0x800000000;
  }
  -[UITableView _performInternalReloadData](self, "_performInternalReloadData");
}

void __37__UITableView__systemTextSizeChanged__block_invoke(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v1 = (id)objc_claimAutoreleasedReturnValue();

  v2 = v3;
  if (v1 != v3)
  {
    objc_msgSend(v3, "_systemTextSizeChanged");
    v2 = v3;
  }

}

- (void)_setManuallyManagesSwipeUI:(BOOL)a3
{
  unint64_t v3;

  v3 = 0x8000000000000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_tableFlags + 2) = v3 & 0x8000000000000000 | *((_QWORD *)&self->_tableFlags + 2) & 0x7FFFFFFFFFFFFFFFLL;
  -[UITableView _updateWrapperView](self, "_updateWrapperView");
}

- (void)_setHeight:(double)a3 forRowAtIndexPath:(id)a4
{
  id v6;

  v6 = a4;
  -[UITableView _setHeight:forRowAtIndexPath:usingPresentationValues:](self, "_setHeight:forRowAtIndexPath:usingPresentationValues:", v6, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"), a3);

}

- (void)_setHeight:(double)a3 forRowAtIndexPath:(id)a4 usingPresentationValues:(BOOL)a5
{
  id v8;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v10;
  double v11;
  id v12;
  id v13;

  v8 = a4;
  if (!a5)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      v12 = v8;
      -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:");
      v10 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v10;
    }
  }
  v11 = 0.00000011920929;
  if (a3 > 0.0)
    v11 = a3;
  v13 = v8;
  -[UITableViewRowData setHeight:forRowAtIndexPath:]((uint64_t)self->_rowData, v8, v11);
  -[UITableView _setNeedsVisibleCellsUpdate:withFrames:](self, "_setNeedsVisibleCellsUpdate:withFrames:", 1, 1);

}

- (BOOL)_allowsReorderingWhenNotEditing
{
  return *((_BYTE *)&self->_tableFlags + 24) & 1;
}

- (void)_setAllowsReorderingWhenNotEditing:(BOOL)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v4;
  NSMutableArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  _BOOL8 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  p_tableFlags = &self->_tableFlags;
  v4 = *((_QWORD *)&self->_tableFlags + 3);
  if (((((v4 & 1) == 0) ^ a3) & 1) == 0)
  {
    *((_QWORD *)&self->_tableFlags + 2) = *((_QWORD *)&self->_tableFlags + 2);
    *((_QWORD *)&self->_tableFlags + 3) = v4 & 0xFFFFFFFFFFFFFFFELL | a3;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v6 = self->_visibleCells;
    v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (!v7)
      goto LABEL_16;
    v8 = v7;
    v9 = *(_QWORD *)v16;
    while (1)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v16 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v11, "_setAllowsReorderingWhenNotEditing:", *((_DWORD *)p_tableFlags + 6) & 1, (_QWORD)v15);
        -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v11, 1);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = *((_QWORD *)p_tableFlags + 1);
        if ((v13 & 0x10000000000000) != 0)
        {
          if (-[UITableView _canEditRowAtIndexPath:](self, "_canEditRowAtIndexPath:", v12))
            goto LABEL_13;
          v13 = *((_QWORD *)p_tableFlags + 1);
        }
        if ((v13 & 0x10000000000000) != 0 || (*((_BYTE *)p_tableFlags + 24) & 1) == 0)
        {
          v14 = 0;
          goto LABEL_14;
        }
LABEL_13:
        v14 = -[UITableView _canReorderRowAtIndexPath:](self, "_canReorderRowAtIndexPath:", v12);
LABEL_14:
        objc_msgSend(v11, "_setShowsReorderControl:", v14);

      }
      v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (!v8)
      {
LABEL_16:

        return;
      }
    }
  }
}

- (void)_setIndexRetargetFeedbackGenerator:(id)a3
{
  UISelectionFeedbackGenerator *v5;
  UISelectionFeedbackGenerator *indexRetargetFeedbackGenerator;
  void *v7;

  v5 = (UISelectionFeedbackGenerator *)a3;
  if (-[UIFeedbackGenerator isActive](self->_indexRetargetFeedbackGenerator, "isActive"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 18769, CFSTR("Index retarget feedback behavior should not be changed while active."));

  }
  indexRetargetFeedbackGenerator = self->_indexRetargetFeedbackGenerator;
  self->_indexRetargetFeedbackGenerator = v5;

}

- (id)_indexRetargetFeedbackGenerator
{
  return self->_indexRetargetFeedbackGenerator;
}

- (void)_setReorderFeedbackGenerator:(id)a3
{
  _UIDragSnappingFeedbackGenerator *v5;
  _UIDragSnappingFeedbackGenerator *reorderFeedbackGenerator;
  void *v7;

  v5 = (_UIDragSnappingFeedbackGenerator *)a3;
  if (-[UIFeedbackGenerator isActive](self->_reorderFeedbackGenerator, "isActive"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 18780, CFSTR("Reorder feedback behavior should not be changed while active."));

  }
  reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
  self->_reorderFeedbackGenerator = v5;

}

- (id)_reorderFeedbackGenerator
{
  return self->_reorderFeedbackGenerator;
}

- (BOOL)_cellsSelfSize
{
  return (*((unsigned __int8 *)&self->_tableFlags + 24) >> 4) & 1;
}

- (void)swipeActionController:(id)a3 swipeOccurrence:(id)a4 didChangeStateFrom:(int64_t)a5 to:(int64_t)a6
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a3;
  v8 = a4;
  v9 = v8;
  if (a6 == 5
    || a6 == 4
    && (objc_msgSend(v8, "currentAction"),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        v11 = objc_msgSend(v10, "style"),
        v10,
        v11 != 1))
  {
    objc_msgSend(v12, "resetSwipedItemAnimated:completion:", 1, 0);
  }

}

- (id)swipeActionController:(id)a3 indexPathForTouchLocation:(CGPoint)a4
{
  return -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, a4.x, a4.y);
}

- (id)swipeActionController:(id)a3 viewForItemAtIndexPath:(id)a4
{
  return -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", a4, 1);
}

- (id)swipeActionController:(id)a3 leadingSwipeConfigurationForItemAtIndexPath:(id)a4
{
  id v7;
  id v8;
  uint64_t tableFlags;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  objc_class *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  void *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  tableFlags = (uint64_t)self->_tableFlags;
  if ((tableFlags & 0x200000) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "tableView:leadingSwipeActionsConfigurationForRowAtIndexPath:", self, v8);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v19)
    {
LABEL_18:
      -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v8, 1);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = v26;
      if (v26
        && (objc_msgSend(v26, "contentView"),
            v28 = (void *)objc_claimAutoreleasedReturnValue(),
            v29 = objc_opt_respondsToSelector(),
            v28,
            (v29 & 1) != 0))
      {
        objc_msgSend(v27, "contentView");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "_leadingSwipeActionsConfiguration");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v19 = 0;
      }

      goto LABEL_23;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITableView _delegateActual](self, "_delegateActual");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = (objc_class *)objc_opt_class();
      NSStringFromClass(v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 18864, CFSTR("%@ is expected to return an instance of %@ from -tableView:leadingSwipeActionsConfigurationForRowAtIndexPath: but returned %@."), v23, v25, v19);

    }
  }
  else
  {
    if ((tableFlags & 0x800000) == 0)
      goto LABEL_18;
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "tableView:leadingSwipeActionsForRowAtIndexPath:", self, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v11)
      goto LABEL_18;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v12 = v11;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v35;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v35 != v15)
            objc_enumerationMutation(v12);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            -[UITableView _delegateActual](self, "_delegateActual");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = (objc_class *)objc_opt_class();
            NSStringFromClass(v17);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 18872, CFSTR("%@ is expected to return an array of %@ from -tableView:leadingSwipeActionsForRowAtIndexPath: but returned %@."), v32, v18, v12);

          }
          ++v16;
        }
        while (v14 != v16);
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      }
      while (v14);
    }

    +[UISwipeActionsConfiguration configurationWithActions:](UISwipeActionsConfiguration, "configurationWithActions:", v12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "firstObject");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setPerformsFirstActionWithFullSwipe:", objc_msgSend(v20, "canBeTriggeredBySwipe"));

    if (!v19)
      goto LABEL_18;
  }
LABEL_23:

  return v19;
}

- (id)swipeActionController:(id)a3 trailingSwipeConfigurationForItemAtIndexPath:(id)a4
{
  return -[UITableView _trailingSwipeConfigurationAtIndexPath:fromRemoveButton:](self, "_trailingSwipeConfigurationAtIndexPath:fromRemoveButton:", a4, 0);
}

- (int64_t)layoutDirectionForSwipeActionController:(id)a3
{
  void *v5;
  int64_t v6;

  if (dyld_program_sdk_at_least())
    return -[UIView effectiveUserInterfaceLayoutDirection](self, "effectiveUserInterfaceLayoutDirection");
  -[UIView traitCollection](self, "traitCollection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "layoutDirection");

  return v6;
}

- (void)swipeActionController:(id)a3 willPerformAction:(id)a4 atIndexPath:(id)a5
{
  if (objc_msgSend(a4, "style", a3) == 1)
    *((_QWORD *)&self->_tableFlags + 2) |= 0x800000000000uLL;
}

- (void)swipeActionController:(id)a3 didCompleteAction:(id)a4 cancelled:(BOOL)a5 atIndexPath:(id)a6
{
  *((_QWORD *)&self->_tableFlags + 2) &= ~0x800000000000uLL;
}

- (void)swipeActionController:(id)a3 didCompleteAnimationOfAction:(id)a4 canceled:(BOOL)a5 atIndexPath:(id)a6
{
  id deferredEditingHandler;
  void (**v8)(void);
  id v9;

  deferredEditingHandler = self->_deferredEditingHandler;
  if (deferredEditingHandler)
  {
    v8 = (void (**)(void))_Block_copy(deferredEditingHandler);
    v8[2]();
    v9 = self->_deferredEditingHandler;
    self->_deferredEditingHandler = 0;

  }
  *((_QWORD *)&self->_tableFlags + 2) &= ~0x80000000000uLL;
}

- (UIEdgeInsets)swipeActionController:(id)a3 extraInsetsForItemAtIndexPath:(id)a4
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double Width;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGRect v20;
  UIEdgeInsets result;

  -[UITableView _effectiveSafeAreaInsets](self, "_effectiveSafeAreaInsets", a3, a4);
  if ((*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0)
  {
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    if (!-[UITableView insetsContentViewsToSafeArea](self, "insetsContentViewsToSafeArea"))
      goto LABEL_5;
    -[UIView safeAreaInsets](self->_wrapperView, "safeAreaInsets");
  }
  v12 = v5;
  v11 = v6;
  v10 = v7;
  v9 = v8;
LABEL_5:
  v13 = *((_DWORD *)&self->super.super._viewFlags + 4);
  -[UIView frame](self->_index, "frame");
  Width = CGRectGetWidth(v20);
  if ((*(_QWORD *)&v13 & 0x80000) != 0)
    v15 = -0.0;
  else
    v15 = Width;
  v16 = v9 + v15;
  if ((*(_QWORD *)&v13 & 0x80000) == 0)
    Width = -0.0;
  v17 = v11 + Width;
  v18 = v12;
  v19 = v10;
  result.right = v16;
  result.bottom = v19;
  result.left = v17;
  result.top = v18;
  return result;
}

- (BOOL)swipeActionController:(id)a3 insertActionsView:(id)a4 forItemAtIndexPath:(id)a5
{
  id v7;
  id v8;
  void *v9;
  NSObject *v10;
  unint64_t v11;
  NSObject *v12;
  int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = a5;
  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v8, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = objc_opt_new();
    objc_msgSend(v9, "_setSwipeContainerView:", v10);
    -[NSObject insertSubview:atIndex:](v10, "insertSubview:atIndex:", v7, 0);
LABEL_3:

    goto LABEL_9;
  }
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      v14 = 138412290;
      v15 = v8;
      _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Swipe actions view was not created for index path: %@", (uint8_t *)&v14, 0xCu);
    }
    goto LABEL_3;
  }
  v11 = swipeActionController_insertActionsView_forItemAtIndexPath____s_category_0;
  if (!swipeActionController_insertActionsView_forItemAtIndexPath____s_category_0)
  {
    v11 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v11, (unint64_t *)&swipeActionController_insertActionsView_forItemAtIndexPath____s_category_0);
  }
  v12 = *(NSObject **)(v11 + 8);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v14 = 138412290;
    v15 = v8;
    _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "Swipe actions view was not created for index path: %@", (uint8_t *)&v14, 0xCu);
  }
LABEL_9:

  return v9 != 0;
}

- (void)swipeActionController:(id)a3 cleanupActionsView:(id)a4 forItemAtIndexPath:(id)a5
{
  id v7;
  id v8;

  v7 = a5;
  objc_msgSend(a4, "removeFromSuperview");
  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v7, 1);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "_setSwipeContainerView:", 0);
}

- (BOOL)swipeActionController:(id)a3 mayBeginSwipeForItemAtIndexPath:(id)a4
{
  id v5;
  BOOL v6;
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v9;
  _UITableViewReorderingSupport *reorderingSupport;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v5 = a4;
  if (!-[UITableView _wantsSwipes](self, "_wantsSwipes"))
    goto LABEL_8;
  if ((objc_msgSend(v5, "isEqual:", self->_swipedIndexPath) & 1) != 0)
  {
    v6 = 1;
    goto LABEL_9;
  }
  if (!-[UITableView _canEditRowAtIndexPath:](self, "_canEditRowAtIndexPath:", v5)
    || (p_tableFlags = &self->_tableFlags, (*((_QWORD *)&self->_tableFlags + 3) & 0x100000000) != 0)
    || (*((_BYTE *)&self->_tableFlags + 15) & 8) != 0
    || self->_tableReloadingSuspendedCount > 0)
  {
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  v9 = *((_QWORD *)&self->_tableFlags + 2);
  reorderingSupport = self->_reorderingSupport;
  if (!reorderingSupport)
  {
    if (v9 < 0)
      goto LABEL_8;
LABEL_15:
    -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v5, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UITableViewDragController indexPaths](self->_dragController, "indexPaths");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (!v12 || (objc_msgSend(v12, "containsObject:", v5) & 1) == 0)
    {
      objc_msgSend(v11, "_dropAnimationContainerView");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v14)
      {
        if ((*(_DWORD *)p_tableFlags & 0x1F00040) != 0)
        {
          v6 = 1;
          goto LABEL_19;
        }
        if (dyld_program_sdk_at_least())
        {
          objc_msgSend(v11, "contentView");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v6 = (objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0;

          goto LABEL_19;
        }
      }
    }
    v6 = 0;
LABEL_19:

    goto LABEL_9;
  }
  v6 = 0;
  if ((v9 & 0x8000000000000000) == 0 && !reorderingSupport->_initialIndexPath)
    goto LABEL_15;
LABEL_9:

  return v6;
}

- (void)swipeActionController:(id)a3 willBeginSwipeForItemAtIndexPath:(id)a4
{
  id v6;
  NSIndexPath **p_swipedIndexPath;
  NSIndexPath *swipedIndexPath;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSIndexPath *v12;
  UITableViewCell *v13;
  UITableViewCell *swipeToDeleteCell;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v19 = a3;
  v6 = a4;
  p_swipedIndexPath = &self->_swipedIndexPath;
  swipedIndexPath = self->_swipedIndexPath;
  if (swipedIndexPath)
  {
    if ((-[NSIndexPath isEqual:](swipedIndexPath, "isEqual:", v6) & 1) == 0)
    {
      v9 = *((_QWORD *)&self->_tableFlags + 2);
      if ((v9 & 0x100000000000) != 0)
      {
        v10 = *((_QWORD *)&self->_tableFlags + 3) | 0x200000;
        *((_QWORD *)&self->_tableFlags + 2) = v9;
        *((_QWORD *)&self->_tableFlags + 3) = v10;
        -[UITableView _sendDidEndEditingForIndexPath:](self, "_sendDidEndEditingForIndexPath:", *p_swipedIndexPath);
        *((_QWORD *)&self->_tableFlags + 3) &= ~0x200000uLL;
      }
    }
  }
  -[UITableView _suspendReloads](self, "_suspendReloads");
  if ((*((_BYTE *)&self->_tableFlags + 11) & 2) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "tableView:willBeginSwipingRowAtIndexPath:", self, v6);

  }
  v12 = *p_swipedIndexPath;
  objc_storeStrong((id *)&self->_swipedIndexPath, a4);
  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v6, 1);
  v13 = (UITableViewCell *)objc_claimAutoreleasedReturnValue();
  swipeToDeleteCell = self->_swipeToDeleteCell;
  self->_swipeToDeleteCell = v13;

  v15 = *((_QWORD *)&self->_tableFlags + 2);
  *((_QWORD *)&self->_tableFlags + 2) = v15 & 0xFFFEFFFFFFFFFFFFLL;
  if ((v15 & 0x40000000000000) != 0)
  {
    -[UITableView _updateWrapperClipping](self, "_updateWrapperClipping");
    -[UITableView _updateWrapperFrame](self, "_updateWrapperFrame");
  }
  v16 = -[UITableView isEditing](self, "isEditing");
  v17 = *((_QWORD *)&self->_tableFlags + 2);
  if (v16)
  {
    if ((v17 & 0x100000000000) != 0 && (-[NSIndexPath isEqual:](v12, "isEqual:", v6) & 1) == 0)
      -[UITableView _sendWillBeginEditingForIndexPath:](self, "_sendWillBeginEditingForIndexPath:", v6);
  }
  else
  {
    v18 = *((_QWORD *)&self->_tableFlags + 3);
    *((_QWORD *)&self->_tableFlags + 2) = v17 | 0x100000000000;
    *((_QWORD *)&self->_tableFlags + 3) = v18;
    -[UITableView _sendWillBeginEditingForIndexPath:](self, "_sendWillBeginEditingForIndexPath:", v6);
    -[UITableView _setEditing:animated:forced:](self, "_setEditing:animated:forced:", 1, 1, 0);
  }
  -[UITableView _resumeReloads](self, "_resumeReloads");

}

- (void)swipeActionController:(id)a3 didEndSwipeForItemAtIndexPath:(id)a4
{
  id v5;
  UITableViewCell *v6;
  int v7;
  UITableViewCell *swipeToDeleteCell;
  UITableViewCell *v9;
  UITableViewCell *v10;
  UITableViewCell *v11;
  NSIndexPath *swipedIndexPath;
  void *v13;
  id v14;

  v5 = a4;
  *((_QWORD *)&self->_tableFlags + 2) &= ~0x800000000000uLL;
  v14 = v5;
  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:");
  v6 = (UITableViewCell *)objc_claimAutoreleasedReturnValue();
  if (!-[UITableView _swipeDeletionCommitted](self, "_swipeDeletionCommitted"))
    -[UITableViewCell _resetEditControlRotation](v6, "_resetEditControlRotation");
  v7 = objc_msgSend(v14, "isEqual:", self->_swipedIndexPath);
  swipeToDeleteCell = v6;
  if (v7)
    swipeToDeleteCell = self->_swipeToDeleteCell;
  v9 = swipeToDeleteCell;
  v10 = v9;
  if ((*((_BYTE *)&self->_tableFlags + 17) & 1) == 0)
    -[UITableViewCell _setSwipeContainerView:](v9, "_setSwipeContainerView:", 0);
  if (v7)
  {
    if ((*((_QWORD *)&self->_tableFlags + 2) & 0x100000000000) != 0)
      -[UITableView _setEditing:animated:forced:](self, "_setEditing:animated:forced:", 0, (*((_QWORD *)&self->_tableFlags + 2) & 0x100) == 0, 1);
    v11 = self->_swipeToDeleteCell;
    self->_swipeToDeleteCell = 0;

    swipedIndexPath = self->_swipedIndexPath;
    self->_swipedIndexPath = 0;

    if ((*((_BYTE *)&self->_tableFlags + 22) & 0x40) != 0)
    {
      -[UITableView _updateWrapperClipping](self, "_updateWrapperClipping");
      -[UITableView _updateWrapperFrame](self, "_updateWrapperFrame");
    }
  }
  if ((*((_BYTE *)&self->_tableFlags + 11) & 4) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "tableView:didEndSwipingRowAtIndexPath:", self, v14);

  }
}

- (id)swipeActionForDeletingRowAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[5];
  id v10;

  v4 = a3;
  -[UITableView _titleForDeleteConfirmationButtonForRowAtIndexPath:](self, "_titleForDeleteConfirmationButtonForRowAtIndexPath:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __52__UITableView_swipeActionForDeletingRowAtIndexPath___block_invoke;
  v9[3] = &unk_1E16BC990;
  v9[4] = self;
  v10 = v4;
  v6 = v4;
  +[UISwipeAction swipeActionWithStyle:title:handler:](UISwipeAction, "swipeActionWithStyle:title:handler:", 1, v5, v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t __52__UITableView_swipeActionForDeletingRowAtIndexPath___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_animateDeletionOfRowAtIndexPath:", *(_QWORD *)(a1 + 40));
}

- (id)contextualActionForDeletingRowAtIndexPath:(id)a3
{
  id v4;
  void *v5;

  v4 = a3;
  -[UITableView _contextualActionForDeletingRowAtIndexPath:usingPresentationValues:](self, "_contextualActionForDeletingRowAtIndexPath:usingPresentationValues:", v4, -[UITableView _isUsingPresentationValues](self, "_isUsingPresentationValues"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)_contextualActionForDeletingRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4
{
  id v7;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v14;
  void *v15;
  _QWORD v16[5];
  id v17;

  v7 = a3;
  if (!a4)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v7);
      v9 = objc_claimAutoreleasedReturnValue();

      v7 = (id)v9;
    }
  }
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 19123, CFSTR("UITableView internal inconsistency: indexPath cannot be nil in %@"), v15);

  }
  -[UITableView _titleForDeleteConfirmationButtonForRowAtIndexPath:](self, "_titleForDeleteConfirmationButtonForRowAtIndexPath:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __82__UITableView__contextualActionForDeletingRowAtIndexPath_usingPresentationValues___block_invoke;
  v16[3] = &unk_1E16BC9B8;
  v16[4] = self;
  v17 = v7;
  v11 = v7;
  +[UIContextualAction contextualActionWithStyle:title:handler:](UIContextualAction, "contextualActionWithStyle:title:handler:", 1, v10, v16);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void __82__UITableView__contextualActionForDeletingRowAtIndexPath_usingPresentationValues___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v5;
  uint64_t v6;
  void (**v7)(id, uint64_t);

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = a4;
  objc_msgSend(v5, "_animateDeletionOfRowAtIndexPath:", v6);
  v7[2](v7, objc_msgSend(*(id *)(a1 + 32), "_swipeDeletionCommitted"));

}

- (id)_contextualActionForDeletingRowAtIndexPath:(id)a3 performsFirstActionWithFullSwipe:(BOOL *)a4
{
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v6 = a3;
  v7 = -[UITableView methodForSelector:](self, "methodForSelector:", sel_swipeActionForDeletingRowAtIndexPath_);
  if (v7 == +[UITableView instanceMethodForSelector:](UITableView, "instanceMethodForSelector:", sel_swipeActionForDeletingRowAtIndexPath_))
  {
    *a4 = 1;
  }
  else
  {
    -[UITableView swipeActionForDeletingRowAtIndexPath:](self, "swipeActionForDeletingRowAtIndexPath:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *a4 = objc_msgSend(v8, "canBeTriggeredBySwipe");

  }
  -[UITableView contextualActionForDeletingRowAtIndexPath:](self, "contextualActionForDeletingRowAtIndexPath:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)_trailingSwipeConfigurationAtIndexPath:(id)a3 fromRemoveButton:(BOOL)a4
{
  _BOOL4 v4;
  id v7;
  int v8;
  uint64_t tableFlags;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  objc_class *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t i;
  void *v24;
  UITableView *v25;
  void *v26;
  objc_class *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  UITableView *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  uint64_t v40;
  _BOOL8 v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  objc_class *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  char v61;
  void *v62;
  SEL v64;
  char v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[5];
  id v70;
  char v71;
  _QWORD v72[4];
  id v73;
  void *v74;
  UITableView *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  _BYTE v85[128];
  _BYTE v86[128];
  uint64_t v87;

  v4 = a4;
  v87 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = dyld_program_sdk_at_least();
  tableFlags = (uint64_t)self->_tableFlags;
  if ((v4 & ~v8 & 1) != 0 || (tableFlags & 0x400000) == 0)
  {
    if (v4 || (tableFlags & 0x1000000) == 0)
    {
      if ((tableFlags & 0x100000) == 0)
        goto LABEL_38;
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "tableView:editActionsForRowAtIndexPath:", self, v7);
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v32)
        goto LABEL_38;
      v33 = self;
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v32, "count"));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = dyld_program_sdk_at_least();
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v18 = v32;
      v68 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v76, v85, 16);
      if (v68)
      {
        v66 = *(_QWORD *)v77;
        v67 = v30;
        do
        {
          v34 = 0;
          do
          {
            if (*(_QWORD *)v77 != v66)
              objc_enumerationMutation(v18);
            v35 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * v34);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              -[UITableView _delegateActual](v33, "_delegateActual");
              v47 = v7;
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              v49 = (objc_class *)objc_opt_class();
              NSStringFromClass(v49);
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v46, "handleFailureInMethod:object:file:lineNumber:description:", a2, v33, CFSTR("UITableView.m"), 19178, CFSTR("%@ is expected to return an array of %@ from -tableView:editActionsForRowAtIndexPath: but returned %@."), v48, v50, v18);

              v7 = v47;
            }
            v36 = v18;
            v37 = v7;
            v38 = v7;
            shadowUpdatesController = v33->_shadowUpdatesController;
            if (shadowUpdatesController)
            {
              -[_UITableViewShadowUpdatesController indexPathBeforeShadowUpdates:](shadowUpdatesController, "indexPathBeforeShadowUpdates:", v38);
              v40 = objc_claimAutoreleasedReturnValue();

              v38 = (id)v40;
            }
            v41 = objc_msgSend(v35, "style") == 0;
            objc_msgSend(v35, "title");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            v72[0] = MEMORY[0x1E0C809B0];
            v72[1] = 3221225472;
            v72[2] = __71__UITableView__trailingSwipeConfigurationAtIndexPath_fromRemoveButton___block_invoke;
            v72[3] = &unk_1E16E4050;
            v43 = v38;
            v73 = v43;
            v74 = v35;
            v75 = v33;
            +[UIContextualAction contextualActionWithStyle:title:handler:](UIContextualAction, "contextualActionWithStyle:title:handler:", v41, v42, v72);
            v44 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v35, "backgroundColor");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = v67;
            if (objc_msgSend(v45, "isPatternColor"))
            {
              if (_trailingSwipeConfigurationAtIndexPath_fromRemoveButton__once != -1)
                dispatch_once(&_trailingSwipeConfigurationAtIndexPath_fromRemoveButton__once, &__block_literal_global_1102_0);
              objc_msgSend(v44, "setForcesFallbackBackgroundColor:", 1);
              v65 = 0;
            }
            objc_msgSend(v44, "setBackgroundColor:", v45);
            objc_msgSend(v67, "addObject:", v44);

            ++v34;
            v7 = v37;
            v18 = v36;
          }
          while (v68 != v34);
          v68 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v76, v85, 16);
        }
        while (v68);
      }

      +[UISwipeActionsConfiguration configurationWithActions:](UISwipeActionsConfiguration, "configurationWithActions:", v30);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setPerformsFirstActionWithFullSwipe:", v65 & 1);
      self = v33;
    }
    else
    {
      -[UITableView _delegateProxy](self, "_delegateProxy");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "tableView:trailingSwipeActionsForRowAtIndexPath:", self, v7);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v17)
        goto LABEL_38;
      v64 = a2;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v18 = v17;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v80, v86, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v81;
        v22 = 0x1E0CB3000uLL;
        do
        {
          for (i = 0; i != v20; ++i)
          {
            if (*(_QWORD *)v81 != v21)
              objc_enumerationMutation(v18);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              objc_msgSend(*(id *)(v22 + 1160), "currentHandler");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              -[UITableView _delegateActual](self, "_delegateActual");
              v25 = self;
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = (objc_class *)objc_opt_class();
              NSStringFromClass(v27);
              v28 = v7;
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "handleFailureInMethod:object:file:lineNumber:description:", v64, v25, CFSTR("UITableView.m"), 19159, CFSTR("%@ is expected to return an array of %@ from -tableView:trailingSwipeActionsForRowAtIndexPath: but returned %@."), v26, v29, v18);

              v7 = v28;
              self = v25;
              v22 = 0x1E0CB3000;

            }
          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v80, v86, 16);
        }
        while (v20);
      }

      +[UISwipeActionsConfiguration configurationWithActions:](UISwipeActionsConfiguration, "configurationWithActions:", v18);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "firstObject");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setPerformsFirstActionWithFullSwipe:", objc_msgSend(v30, "canBeTriggeredBySwipe"));
    }

    if (v11)
      goto LABEL_57;
  }
  else
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:", self, v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[UITableView _delegateActual](self, "_delegateActual");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (objc_class *)objc_opt_class();
        NSStringFromClass(v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 19151, CFSTR("%@ is expected to return an instance of %@ from -tableView:trailingSwipeActionsConfigurationForRowAtIndexPath: but returned %@."), v13, v15, v11);

      }
      goto LABEL_57;
    }
  }
LABEL_38:
  v71 = 1;
  if ((*(_BYTE *)&self->_tableFlags & 0x40) != 0
    && -[UITableView _canEditRowAtIndexPath:](self, "_canEditRowAtIndexPath:", v7)
    && -[UITableView _editingStyleForRowAtIndexPath:](self, "_editingStyleForRowAtIndexPath:", v7) == 1)
  {
    -[UITableView _contextualActionForDeletingRowAtIndexPath:performsFirstActionWithFullSwipe:](self, "_contextualActionForDeletingRowAtIndexPath:performsFirstActionWithFullSwipe:", v7, &v71);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = v51;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v84, 1);
    v52 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v52 = (void *)MEMORY[0x1E0C9AA60];
  }
  -[UITableView _titleForSwipeAccessoryButtonForRowAtIndexPath:](self, "_titleForSwipeAccessoryButtonForRowAtIndexPath:", v7);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  if (v53)
  {
    v69[0] = MEMORY[0x1E0C809B0];
    v69[1] = 3221225472;
    v69[2] = __71__UITableView__trailingSwipeConfigurationAtIndexPath_fromRemoveButton___block_invoke_1103;
    v69[3] = &unk_1E16BC9B8;
    v69[4] = self;
    v70 = v7;
    +[UIContextualAction contextualActionWithStyle:title:handler:](UIContextualAction, "contextualActionWithStyle:title:handler:", 0, v53, v69);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "arrayByAddingObject:", v54);
    v55 = objc_claimAutoreleasedReturnValue();

    v52 = (void *)v55;
  }
  if (objc_msgSend(v52, "count"))
  {
    +[UISwipeActionsConfiguration configurationWithActions:](UISwipeActionsConfiguration, "configurationWithActions:", v52);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = dyld_program_sdk_at_least();
    if (v71)
      v57 = v56;
    else
      v57 = 0;
    objc_msgSend(v11, "setPerformsFirstActionWithFullSwipe:", v57);

    if (v11)
      goto LABEL_57;
  }
  else
  {

  }
  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", v7, 1);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = v58;
  if (v58
    && (objc_msgSend(v58, "contentView"),
        v60 = (void *)objc_claimAutoreleasedReturnValue(),
        v61 = objc_opt_respondsToSelector(),
        v60,
        (v61 & 1) != 0))
  {
    objc_msgSend(v59, "contentView");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "_trailingSwipeActionsConfiguration");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v11 = 0;
  }

LABEL_57:
  return v11;
}

void __71__UITableView__trailingSwipeConfigurationAtIndexPath_fromRemoveButton___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void (**v5)(_QWORD, _QWORD, _QWORD);
  uint64_t v6;
  void (**v7)(id, uint64_t);

  v7 = a4;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "_handler");
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v5[2](v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

    if (objc_msgSend(*(id *)(a1 + 40), "style"))
      v6 = 1;
    else
      v6 = objc_msgSend(*(id *)(a1 + 48), "_swipeDeletionCommitted");
  }
  else
  {
    v6 = 0;
  }
  v7[2](v7, v6);

}

void __71__UITableView__trailingSwipeConfigurationAtIndexPath_fromRemoveButton___block_invoke_2()
{
  unint64_t v0;
  NSObject *v1;
  uint8_t v2[16];

  v0 = _UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_9___s_category;
  if (!_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_9___s_category)
  {
    v0 = __UILogCategoryGetNode("TableView", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v0, (unint64_t *)&_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_9___s_category);
  }
  v1 = *(NSObject **)(v0 + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_185066000, v1, OS_LOG_TYPE_ERROR, "Setting a pattern color as backgroundColor of UITableViewRowAction is no longer supported.", v2, 2u);
  }
}

void __71__UITableView__trailingSwipeConfigurationAtIndexPath_fromRemoveButton___block_invoke_1103(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  _BYTE *v4;
  id v6;
  void *v7;

  v4 = *(_BYTE **)(a1 + 32);
  if ((v4[3090] & 8) != 0)
  {
    v6 = a4;
    objc_msgSend(v4, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "tableView:swipeAccessoryButtonPushedForRowAtIndexPath:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

    (*((void (**)(id, uint64_t))v6 + 2))(v6, 1);
  }
  else
  {
    a4[2](a4, 0);
  }

}

- (void)_swipeToDeleteCell:(id)a3
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  UISwipeActionController *swipeActionController;
  void *v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  -[UITableView _reorderingIndexPath](self, "_reorderingIndexPath");
  v6 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "_dropAnimationContainerView");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v6 | v7;

  if (v8)
  {
    objc_msgSend(v5, "_resetEditControlRotation");
    goto LABEL_13;
  }
  -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v5, 1);
  v9 = objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v14 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
        goto LABEL_11;
      NSStringFromSelector(a2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138412290;
      v17 = v15;
      _os_log_fault_impl(&dword_185066000, v14, OS_LOG_TYPE_FAULT, "The index path should never be nil in %@", (uint8_t *)&v16, 0xCu);
    }
    else
    {
      v12 = _swipeToDeleteCell____s_category;
      if (!_swipeToDeleteCell____s_category)
      {
        v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v12, (unint64_t *)&_swipeToDeleteCell____s_category);
      }
      v13 = *(NSObject **)(v12 + 8);
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        goto LABEL_12;
      v14 = v13;
      NSStringFromSelector(a2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138412290;
      v17 = v15;
      _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "The index path should never be nil in %@", (uint8_t *)&v16, 0xCu);
    }

LABEL_11:
LABEL_12:
    v5 = 0;
    goto LABEL_13;
  }
  swipeActionController = self->_swipeActionController;
  -[UITableView _trailingSwipeConfigurationAtIndexPath:fromRemoveButton:](self, "_trailingSwipeConfigurationAtIndexPath:fromRemoveButton:", v9, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[UISwipeActionController swipeItemAtIndexPath:configuration:direction:animated:completion:](swipeActionController, "swipeItemAtIndexPath:configuration:direction:animated:completion:", v9, v11, -[UISwipeActionController _swipeDirectionForLeadingEdge:](self->_swipeActionController, "_swipeDirectionForLeadingEdge:", 0), 1, 0);

  v5 = (id)v9;
LABEL_13:

}

- (BOOL)_swipeDeletionCommitted
{
  void *v2;
  void *v3;
  BOOL v4;

  -[UISwipeActionController currentSwipeOccurrence](self->_swipeActionController, "currentSwipeOccurrence");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "currentAction");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "style") == 1 && objc_msgSend(v2, "state") == 4;

  return v4;
}

- (int64_t)_dataSourceNumberOfSections
{
  id WeakRetained;
  uint64_t v5;

  if ((*(_BYTE *)&self->_tableFlags & 4) == 0)
    return 1;
  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  v5 = objc_msgSend(WeakRetained, "numberOfSectionsInTableView:", self);

  return v5 & ~(v5 >> 63);
}

- (int64_t)_dataSourceNumberOfItemsInSection:(int64_t)a3
{
  id WeakRetained;
  uint64_t v6;

  WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  v6 = objc_msgSend(WeakRetained, "tableView:numberOfRowsInSection:", self, a3);

  return v6 & ~(v6 >> 63);
}

- (double)_headerFooterLeadingMarginWidthIsHeader:(BOOL)a3 isFirstSection:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGFloat left;
  BOOL v18;
  double v19;
  double v20;
  double v21;
  double result;
  void *v23;
  uint64_t v24;
  UITableConstants *constants;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  _BOOL4 v38;
  char v39;
  _BOOL4 v40;
  int v41;
  double v42;

  v4 = a4;
  v5 = a3;
  if ((dyld_program_sdk_at_least() & 1) != 0)
  {
    v7 = *((_DWORD *)&self->super.super._viewFlags + 4);
    -[UITableView _sectionContentInset](self, "_sectionContentInset");
    v9 = v8;
    v11 = v10;
    -[UITableView _tableContentInset](self, "_tableContentInset");
    v13 = fmax(v9 - v12, 0.0);
    v15 = fmax(v11 - v14, 0.0);
    if ((*(_QWORD *)&v7 & 0x80000) != 0)
      v16 = v15;
    else
      v16 = v13;
    left = self->_separatorInset.left;
    v18 = -[UITableView _separatorInsetIsRelativeToCellEdges](self, "_separatorInsetIsRelativeToCellEdges");
    if (v16 == 0.0)
    {
      -[UITableView _defaultMarginWidth](self, "_defaultMarginWidth");
      v20 = v19;
    }
    else
    {
      -[UIView traitCollection](self, "traitCollection");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "userInterfaceIdiom");

      constants = self->_constants;
      if (v24 == 6)
      {
        -[UITableConstants defaultHeaderFooterLayoutMarginsForTableViewStyle:isHeader:isFirstSection:](constants, "defaultHeaderFooterLayoutMarginsForTableViewStyle:isHeader:isFirstSection:", -[UITableView style](self, "style"), v5, v4);
        v27 = v26;
        v20 = v28;
      }
      else
      {
        -[UIView window](self, "window");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "screen");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIView frame](self->_wrapperView, "frame");
        -[UITableConstants defaultTableLayoutMarginsForScreen:size:tableStyle:](constants, "defaultTableLayoutMarginsForScreen:size:tableStyle:", v31, -[UITableView style](self, "style"), v32, v33);
        v27 = v34;
        v20 = v35;

      }
      if ((*(_QWORD *)&v7 & 0x80000) == 0)
        v20 = v27;
    }
    -[UIView directionalLayoutMargins](self, "directionalLayoutMargins");
    v37 = v36;
    v38 = -[UITableView _shouldApplyReadableWidthInsets](self, "_shouldApplyReadableWidthInsets");
    if (v16 <= 0.0)
    {
      v39 = left == -1.0 || v18;
      if (left == -1.0)
        result = v20;
      else
        result = left;
      if ((v39 & 1) == 0)
      {
        v40 = v38;
        v41 = dyld_program_sdk_at_least();
        v42 = -0.0;
        if (v40 | v41)
          v42 = v37;
        return left + v42;
      }
    }
    else
    {
      return v16 + v20;
    }
  }
  else
  {
    v21 = self->_sectionContentInset.left;
    if (v21 == -1.0)
    {
      -[UITableView _defaultMarginWidth](self, "_defaultMarginWidth");
    }
    else
    {
      -[UITableView separatorInset](self, "separatorInset");
      return v21 + v29;
    }
  }
  return result;
}

- (double)_sidePadding
{
  void *v4;
  double v5;
  double v6;

  if ((*((_BYTE *)&self->_tableFlags + 7) & 2) == 0)
    return 9.0;
  -[UITableView _delegateProxy](self, "_delegateProxy");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "marginForTableView:", self);
  v6 = v5;

  return v6;
}

- (UIEdgeInsets)_rawSectionContentInset
{
  double top;
  double left;
  double bottom;
  double right;
  UIEdgeInsets result;

  top = self->_sectionContentInset.top;
  left = self->_sectionContentInset.left;
  bottom = self->_sectionContentInset.bottom;
  right = self->_sectionContentInset.right;
  result.right = right;
  result.bottom = bottom;
  result.left = left;
  result.top = top;
  return result;
}

- (BOOL)_providesRowHeights
{
  return *((_BYTE *)&self->_tableFlags + 4) & 1;
}

- (UIEdgeInsets)_sectionHeaderContentInsets
{
  double v3;
  double v4;
  double v5;
  double v6;
  UIEdgeInsets result;

  if (-[UITableView _supplementarySectionHeadersHugContent](self, "_supplementarySectionHeadersHugContent")
    || -[UITableView _supplementariesFollowSectionContentInsets](self, "_supplementariesFollowSectionContentInsets"))
  {
    -[UITableView _sectionContentInset](self, "_sectionContentInset");
  }
  else
  {
    -[UITableView _tableContentInset](self, "_tableContentInset");
  }
  result.right = v6;
  result.bottom = v5;
  result.left = v4;
  result.top = v3;
  return result;
}

- (UIEdgeInsets)_sectionFooterContentInsets
{
  double v3;
  double v4;
  double v5;
  double v6;
  UIEdgeInsets result;

  if (-[UITableView _supplementariesFollowSectionContentInsets](self, "_supplementariesFollowSectionContentInsets"))
    -[UITableView _sectionContentInset](self, "_sectionContentInset");
  else
    -[UITableView _tableContentInset](self, "_tableContentInset");
  result.right = v6;
  result.bottom = v5;
  result.left = v4;
  result.top = v3;
  return result;
}

- (BOOL)_supplementariesFollowSectionContentInsets
{
  void *v3;
  BOOL v4;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "userInterfaceIdiom") == 6 && -[UITableView style](self, "style") == UITableViewStylePlain;

  return v4;
}

- (double)_dataSourceHeightForRowAtIndexPath:(id)a3
{
  id v5;
  double v6;
  void *v7;
  double v8;
  int v9;
  _BOOL4 v10;
  void *v11;
  unint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = -1.0;
  if ((*((_BYTE *)&self->_tableFlags + 4) & 1) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "tableView:heightForRowAtIndexPath:", self, v5);
    v6 = v8;

  }
  v9 = dyld_program_sdk_at_least();
  v10 = v6 < 0.0;
  if (v6 == -1.0)
    v10 = 0;
  if (v9)
  {
    if (v10)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 19718, CFSTR("Invalid row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&v6);

    }
  }
  else if (v10)
  {
    v13 = _dataSourceHeightForRowAtIndexPath____s_category;
    if (!_dataSourceHeightForRowAtIndexPath____s_category)
    {
      v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v13, (unint64_t *)&_dataSourceHeightForRowAtIndexPath____s_category);
    }
    v14 = *(NSObject **)(v13 + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v16 = v6;
      _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "Invalid row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }

  return v6;
}

- (double)_dataSourceHeightForHeaderInSection:(int64_t)a3
{
  double v5;
  void *v7;
  double v8;
  int v9;
  _BOOL4 v10;
  void *v11;
  unint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = -1.0;
  if ((*((_BYTE *)&self->_tableFlags + 4) & 2) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "tableView:heightForHeaderInSection:", self, a3);
    v5 = v8;

  }
  v9 = dyld_program_sdk_at_least();
  v10 = v5 < 0.0;
  if (v5 == -1.0)
    v10 = 0;
  if (v9)
  {
    if (v10)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 19725, CFSTR("Invalid section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&v5);

    }
  }
  else if (v10)
  {
    v13 = _dataSourceHeightForHeaderInSection____s_category;
    if (!_dataSourceHeightForHeaderInSection____s_category)
    {
      v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v13, (unint64_t *)&_dataSourceHeightForHeaderInSection____s_category);
    }
    v14 = *(NSObject **)(v13 + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v16 = v5;
      _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "Invalid section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }
  return v5;
}

- (double)_dataSourceHeightForFooterInSection:(int64_t)a3
{
  double v5;
  void *v7;
  double v8;
  int v9;
  _BOOL4 v10;
  void *v11;
  unint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = -1.0;
  if ((*((_BYTE *)&self->_tableFlags + 4) & 8) != 0)
  {
    -[UITableView _delegateProxy](self, "_delegateProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "tableView:heightForFooterInSection:", self, a3);
    v5 = v8;

  }
  v9 = dyld_program_sdk_at_least();
  v10 = v5 < 0.0;
  if (v5 == -1.0)
    v10 = 0;
  if (v9)
  {
    if (v10)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UITableView.m"), 19732, CFSTR("Invalid section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension."), *(_QWORD *)&v5);

    }
  }
  else if (v10)
  {
    v13 = _dataSourceHeightForFooterInSection____s_category;
    if (!_dataSourceHeightForFooterInSection____s_category)
    {
      v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v13, (unint64_t *)&_dataSourceHeightForFooterInSection____s_category);
    }
    v14 = *(NSObject **)(v13 + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v16 = v5;
      _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "Invalid section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }
  return v5;
}

- (id)_titleForHeaderInSection:(int64_t)a3
{
  void *v3;
  void *v6;

  if ((*(_BYTE *)&self->_tableFlags & 8) != 0)
  {
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "tableView:titleForHeaderInSection:", self, a3);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (id)_titleForFooterInSection:(int64_t)a3
{
  void *v3;
  void *v6;

  if ((*(_BYTE *)&self->_tableFlags & 0x10) != 0)
  {
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "tableView:titleForFooterInSection:", self, a3);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (id)_detailTextForHeaderInSection:(int64_t)a3
{
  void *v3;
  void *v6;

  if ((*(_BYTE *)&self->_tableFlags & 0x20) != 0)
  {
    -[UITableView _dataSourceProxy](self, "_dataSourceProxy");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "tableView:detailTextForHeaderInSection:", self, a3);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (BOOL)_shouldUseSearchBarHeaderBehavior
{
  objc_opt_class();
  return objc_opt_isKindOfClass() & 1;
}

- (id)_diffableDataSourceImpl
{
  UITableView *v3;
  void *v4;

  -[UITableView _dataSourceActual](self, "_dataSourceActual");
  v3 = (UITableView *)objc_claimAutoreleasedReturnValue();
  v4 = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0 && v3 != self)
  {
    -[UITableView _diffableDataSourceImpl](v3, "_diffableDataSourceImpl");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v4;
}

- (int64_t)presentationSectionIndexForDataSourceSectionIndex:(int64_t)a3
{
  _UITableViewShadowUpdatesController *shadowUpdatesController;

  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
    return -[_UITableViewShadowUpdatesController sectionAfterShadowUpdates:](shadowUpdatesController, "sectionAfterShadowUpdates:", a3);
  else
    return a3;
}

- (int64_t)dataSourceSectionIndexForPresentationSectionIndex:(int64_t)a3
{
  _UITableViewShadowUpdatesController *shadowUpdatesController;

  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
    return -[_UITableViewShadowUpdatesController sectionBeforeShadowUpdates:](shadowUpdatesController, "sectionBeforeShadowUpdates:", a3);
  else
    return a3;
}

- (id)presentationIndexPathForDataSourceIndexPath:(id)a3
{
  id v4;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  id v6;
  void *v7;

  v4 = a3;
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
  {
    -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:", v4);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = v4;
  }
  v7 = v6;

  return v7;
}

- (id)dataSourceIndexPathForPresentationIndexPath:(id)a3
{
  id v4;
  _UITableViewShadowUpdatesController *shadowUpdatesController;
  id v6;
  void *v7;

  v4 = a3;
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
  {
    -[_UITableViewShadowUpdatesController indexPathBeforeShadowUpdates:](shadowUpdatesController, "indexPathBeforeShadowUpdates:", v4);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = v4;
  }
  v7 = v6;

  return v7;
}

- (void)performUsingPresentationValues:(id)a3
{
  $AC7AE66B6EBF9A3B3B000BBDFA4C1301 *p_tableFlags;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  p_tableFlags = &self->_tableFlags;
  v4 = *((_QWORD *)&self->_tableFlags + 2);
  v5 = *((_QWORD *)&self->_tableFlags + 3);
  v6 = v5 | 0x80000000;
  *((_QWORD *)&self->_tableFlags + 3) = v5 | 0x80000000;
  if (a3)
  {
    (*((void (**)(id, SEL))a3 + 2))(a3, a2);
    v4 = *((_QWORD *)p_tableFlags + 2);
    v6 = *((_QWORD *)p_tableFlags + 3);
  }
  *((_QWORD *)p_tableFlags + 2) = v4;
  *((_QWORD *)p_tableFlags + 3) = v6 & 0xFFFFFFFF7FFFFFFFLL | (((v5 >> 31) & 1) << 31);
}

- (void)setSpringLoaded:(BOOL)a3
{
  -[UIView _setSpringLoaded:interactionInitializer:](self, a3, &__block_literal_global_1115);
}

id __31__UITableView_setSpringLoaded___block_invoke()
{
  return +[_UITableViewSpringLoadedInteraction tableViewSpringLoadedInteraction](_UITableViewSpringLoadedInteraction, "tableViewSpringLoadedInteraction");
}

- (void)_prepareHighlightForCell:(id)a3 withInteraction:(id)a4
{
  -[_UITableViewSubviewManager preventReuseOfCell:]((uint64_t)self->_subviewManager, (uint64_t)a3);
}

- (void)_highlightDidEndForCell:(id)a3 withInteraction:(id)a4
{
  -[_UITableViewSubviewManager resumeReuseOfCell:]((id *)&self->_subviewManager->super.isa, (uint64_t)a3);
}

- (BOOL)_delegateAllowsHighlightingItemAtIndexPath:(id)a3
{
  UITableView *v4;
  id v5;
  void *v6;

  if ((*((_BYTE *)&self->_tableFlags + 9) & 8) == 0)
    return 1;
  v4 = self;
  v5 = a3;
  -[UITableView _delegateProxy](v4, "_delegateProxy");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v4) = objc_msgSend(v6, "tableView:shouldHighlightRowAtIndexPath:", v4, v5);

  return (char)v4;
}

- (UITouch)currentTouch
{
  return self->_currentTouch;
}

- (void)setCurrentTouch:(id)a3
{
  objc_storeStrong((id *)&self->_currentTouch, a3);
}

- (CGFloat)estimatedSectionHeaderHeight
{
  return self->_estimatedSectionHeaderHeight;
}

- (CGFloat)estimatedSectionFooterHeight
{
  return self->_estimatedSectionFooterHeight;
}

- (NSInteger)sectionIndexMinimumDisplayRowCount
{
  return self->_sectionIndexMinimumDisplayRowCount;
}

- (void)setSectionIndexMinimumDisplayRowCount:(NSInteger)sectionIndexMinimumDisplayRowCount
{
  self->_sectionIndexMinimumDisplayRowCount = sectionIndexMinimumDisplayRowCount;
}

- (void)_setSwipeToDeleteCell:(id)a3
{
  objc_storeStrong((id *)&self->_swipeToDeleteCell, a3);
}

- (id)dragDelegate
{
  return objc_loadWeakRetained((id *)&self->_dragDelegate);
}

- (id)dropDelegate
{
  return objc_loadWeakRetained((id *)&self->_dropDelegate);
}

- (CGFloat)fillerRowHeight
{
  return self->_fillerRowHeight;
}

- (CGFloat)sectionHeaderTopPadding
{
  return self->_sectionHeaderTopPadding;
}

- (UIContextMenuInteraction)contextMenuInteraction
{
  return self->_contextMenuInteraction;
}

- (int64_t)contentHuggingElements
{
  return self->_contentHuggingElements;
}

- (void)setContentHuggingElements:(int64_t)a3
{
  self->_contentHuggingElements = a3;
}

- (NSIndexPath)_focusedCellIndexPath
{
  return self->_focusedCellIndexPath;
}

- (void)_setFocusedCellIndexPath:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 3152);
}

- (UIView)_focusedCell
{
  return self->_focusedCell;
}

- (void)_setFocusedCell:(id)a3
{
  objc_storeStrong((id *)&self->_focusedCell, a3);
}

- (NSIndexPath)_indexPathToFocus
{
  return self->_indexPathToFocus;
}

- (void)_setIndexPathToFocus:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 3168);
}

- (_UITableViewDragController)_dragController
{
  return self->_dragController;
}

- (void)_setDragController:(id)a3
{
  objc_storeStrong((id *)&self->_dragController, a3);
}

- (_UITableViewDropController)_dropController
{
  return self->_dropController;
}

- (void)_setDropController:(id)a3
{
  objc_storeStrong((id *)&self->_dropController, a3);
}

- (void)_setPlaceholderContexts:(id)a3
{
  objc_storeStrong((id *)&self->_placeholderContexts, a3);
}

- (UITableViewDragSourceDelegate)dragSourceDelegate
{
  return (UITableViewDragSourceDelegate *)objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
}

- (UITableViewDragDestinationDelegate)dragDestinationDelegate
{
  return (UITableViewDragDestinationDelegate *)objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
}

@end
