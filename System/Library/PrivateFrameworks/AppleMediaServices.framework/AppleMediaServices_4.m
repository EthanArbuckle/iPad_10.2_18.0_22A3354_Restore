void sub_18CC3B7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void (**a33)(_QWORD),uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46)
{
  void *v46;
  uint64_t v47;
  void *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;

  operator delete(v46);
  v49 = *(void **)(v47 - 120);
  if (v49)
  {
    *(_QWORD *)(v47 - 112) = v49;
    operator delete(v49);
    v50 = *(void **)(v47 - 144);
    if (!v50)
    {
LABEL_3:
      v51 = *(std::__shared_weak_count **)(v47 - 152);
      if (!v51)
        goto LABEL_11;
LABEL_7:
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
LABEL_11:
      v54 = *(std::__shared_weak_count **)(v47 - 168);
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::~$_0(&a14);
      std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a24);
      if (a42)
        std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&a33);
      else
        (*a33)(&a33);
      std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a44);
      if (*(_BYTE *)(v47 - 184))
        std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>((_QWORD *)(v47 - 256));
      else
        (**(void (***)(uint64_t))(v47 - 256))(v47 - 256);
      std::ostringstream::~ostringstream((uint64_t)&a46);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v50 = *(void **)(v47 - 144);
    if (!v50)
      goto LABEL_3;
  }
  *(_QWORD *)(v47 - 136) = v50;
  operator delete(v50);
  v51 = *(std::__shared_weak_count **)(v47 - 152);
  if (!v51)
    goto LABEL_11;
  goto LABEL_7;
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::runtime_error_vtbl *v6;
  uint64_t v7;
  std::runtime_error_vtbl *v8;
  std::runtime_error_vtbl *v9;
  std::ios_base *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  const char *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *imp;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  uint64_t v24;
  _OWORD *v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t result;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const void *v35;
  int64_t v36;
  std::runtime_error_vtbl *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  _QWORD *v43;
  BOOL v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  _OWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::runtime_error_vtbl *v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::runtime_error v63;
  __int128 v64;
  unsigned int **v65;
  unsigned int *v66;
  _OWORD *v67;
  __int128 v68;
  std::runtime_error v69;
  __int128 v70;
  unsigned int **v71;
  unsigned int *v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78[19];
  std::runtime_error __p;
  __int128 v80;
  unsigned int **v81;
  unsigned int *v82;
  _OWORD *v83;
  __int128 v84;
  char v85;
  std::runtime_error v86;
  __int128 v87;
  unsigned int **v88;
  unsigned int *v89;
  _OWORD *v90;
  __int128 v91;
  char v92;
  std::runtime_error v93;
  __int128 v94;
  unsigned int **v95;
  unsigned int *v96;
  _OWORD *v97;
  __int128 v98;

  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&__p, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, a2[1]);
  if (v85)
  {
    LOBYTE(v86.__vftable) = 0;
    v92 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v69, &__p);
    v70 = v80;
    v69.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v71 = v81;
    v72 = v82;
    v73 = v83;
    if (v83)
    {
      *((_QWORD *)v82 + 2) = &v72;
      v81 = &v82;
      v82 = 0;
      v83 = 0;
    }
    else
    {
      v71 = &v72;
    }
    v74 = v84;
    v84 = 0uLL;
    LOBYTE(v75) = 0;
    std::runtime_error::runtime_error(&v86, &v69);
    v87 = v70;
    v86.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v88 = v71;
    v89 = v72;
    v90 = v73;
    if (v73)
    {
      *((_QWORD *)v72 + 2) = &v89;
      v71 = &v72;
      v72 = 0;
      v73 = 0;
    }
    else
    {
      v88 = &v89;
    }
    v91 = v74;
    v74 = 0uLL;
    v92 = 1;
    if (!(_BYTE)v75)
      ((void (*)(AMSCore::Error *))v69.~runtime_error)((AMSCore::Error *)&v69);
    if (!v85)
    {
      ((void (*)(std::runtime_error *))__p.~runtime_error)(&__p);
      if (v92)
        goto LABEL_26;
      goto LABEL_4;
    }
  }
  if (v92)
  {
LABEL_26:
    std::runtime_error::runtime_error(&v69, &v86);
    v70 = v87;
    v69.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v71 = v88;
    v72 = v89;
    v73 = v90;
    if (v90)
    {
      *((_QWORD *)v89 + 2) = &v72;
      v88 = &v89;
      v89 = 0;
      v90 = 0;
    }
    else
    {
      v71 = &v72;
    }
    v74 = v91;
    v91 = 0uLL;
    std::runtime_error::runtime_error(&__p, &v69);
    v80 = v70;
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = v72;
    v81 = v71;
    v82 = v72;
    v83 = v73;
    if (v73)
    {
      *((_QWORD *)v72 + 2) = &v82;
      v27 = 0;
      v71 = &v72;
      v72 = 0;
      v73 = 0;
    }
    else
    {
      v81 = &v82;
    }
    v84 = v74;
    v74 = 0uLL;
    v69.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v71, v27);
    MEMORY[0x18D7898AC](&v69);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &__p);
    *(_OWORD *)(a3 + 16) = v80;
    *(_QWORD *)a3 = off_1E2521330;
    v28 = v82;
    *(_QWORD *)(a3 + 32) = v81;
    *(_QWORD *)(a3 + 40) = v28;
    v29 = a3 + 40;
    v30 = v83;
    *(_QWORD *)(a3 + 48) = v83;
    if (v30)
    {
      *((_QWORD *)v28 + 2) = v29;
      v28 = 0;
      v81 = &v82;
      v82 = 0;
      v83 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v29;
    }
    *(_OWORD *)(a3 + 56) = v84;
    v84 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v81, v28);
    result = MEMORY[0x18D7898AC](&__p);
    if (v92)
    {
      v86.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      if (*((_QWORD *)&v91 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v88, v89);
      return MEMORY[0x18D7898AC](&v86);
    }
    return result;
  }
LABEL_4:
  v6 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v78[0] = MEMORY[0x1E0DE4FE0] + 64;
  v69.__vftable = v8;
  *(std::runtime_error_vtbl **)((char *)&v69.__vftable + (unint64_t)v8[-1].~runtime_error) = v9;
  v10 = (std::ios_base *)((char *)&v69 + (unint64_t)v69.__vftable[-1].~runtime_error);
  std::ios_base::init(v10, &v69.__imp_);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v69.__vftable = v6 + 1;
  v78[0] = v7;
  std::streambuf::basic_streambuf();
  v69.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  v75 = 0u;
  v76 = 0u;
  v77 = 16;
  v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v69, (uint64_t)"DELETE FROM \"", 13);
  v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"\n", 2);
  v86.__vftable = (std::runtime_error_vtbl *)a2;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
  v15 = *(_QWORD *)(a1 + 16);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v69.__imp_, (std::string *)&__p);
  v16 = *(const char **)(v15 + 8);
  v93.__vftable = *(std::runtime_error_vtbl **)v15;
  v93.__imp_.__imp_ = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v86, (uint64_t)&v93, (uint64_t)&__p);
  imp = (std::__shared_weak_count *)v93.__imp_.__imp_;
  if (!v93.__imp_.__imp_)
    goto LABEL_11;
  v20 = (unint64_t *)(v93.__imp_.__imp_ + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_11:
    if ((SBYTE7(v80) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
  std::__shared_weak_count::__release_weak(imp);
  if (SBYTE7(v80) < 0)
LABEL_12:
    operator delete(__p.__vftable);
LABEL_13:
  if (v92)
  {
    v22 = (char *)operator new(0x50uLL);
    *((_QWORD *)v22 + 1) = 0;
    v23 = (unint64_t *)(v22 + 8);
    *((_QWORD *)v22 + 2) = 0;
    *(_QWORD *)v22 = &off_1E2522A10;
    *(std::runtime_error *)(v22 + 24) = v86;
    v86.__vftable = 0;
    v86.__imp_.__imp_ = 0;
    v24 = v87;
    v25 = v90;
    *(_QWORD *)&v87 = 0;
    *((_QWORD *)v22 + 5) = v24;
    if (v25)
    {
      if (v25 == (__int128 *)((char *)&v87 + 8))
      {
        *((_QWORD *)v22 + 9) = v22 + 48;
        (*(void (**)(_OWORD *))(*(_QWORD *)v25 + 24))(v25);
LABEL_50:
        v93.__vftable = (std::runtime_error_vtbl *)(v22 + 24);
        v93.__imp_.__imp_ = v22;
        __p.__vftable = 0;
        __p.__imp_.__imp_ = 0;
        *(_QWORD *)&v80 = 0;
        v35 = (const void *)*a2;
        v36 = a2[1] - *a2;
        if (v36)
        {
          if (v36 < 0)
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          v37 = (std::runtime_error_vtbl *)operator new(v36);
          __p.__vftable = v37;
          *(_QWORD *)&v80 = (char *)v37 + 32 * (v36 >> 5);
          memcpy(v37, v35, v36 - 4);
          __p.__imp_.__imp_ = (char *)v37 + 32 * (v36 >> 5);
          *((_QWORD *)&v80 + 1) = v22 + 24;
          v81 = (unsigned int **)v22;
          do
            v38 = __ldxr(v23);
          while (__stxr(v38 + 1, v23));
          v39 = 32 * (v36 >> 5);
          if ((std::runtime_error_vtbl *)((char *)v37 + v39) != v37)
          {
            if (v39 < 0)
              std::vector<std::string>::__throw_length_error[abi:fe180100]();
            v40 = (char *)operator new(32 * (v36 >> 5));
            v41 = &v40[32 * (v39 >> 5)];
            memcpy(v40, v37, v39 - 4);
            goto LABEL_61;
          }
        }
        else
        {
          *((_QWORD *)&v80 + 1) = v22 + 24;
          v81 = (unsigned int **)v22;
          do
            v42 = __ldxr(v23);
          while (__stxr(v42 + 1, v23));
          v37 = 0;
        }
        v40 = 0;
        v41 = 0;
LABEL_61:
        *((_QWORD *)&v80 + 1) = 0;
        v81 = 0;
        *(_QWORD *)(a3 + 24) = 0;
        v43 = operator new(0x30uLL);
        *v43 = &off_1E2521970;
        v43[1] = 0;
        v43[2] = 0;
        v43[3] = 0;
        v45 = v41 - v40;
        v44 = v41 == v40;
        v46 = MEMORY[0x1E0DE4F60];
        if (!v44)
        {
          if (v45 < 0)
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          v47 = (char *)operator new(v45);
          v43[1] = v47;
          v48 = &v47[32 * (v45 >> 5)];
          v43[3] = v48;
          memcpy(v47, v40, v45 - 4);
          v43[2] = v48;
        }
        v43[4] = v22 + 24;
        v43[5] = v22;
        *(_QWORD *)(a3 + 24) = v43;
        if (v40)
          operator delete(v40);
        *(_BYTE *)(a3 + 72) = 1;
        if (v37)
          operator delete(v37);
        do
          v49 = __ldaxr(v23);
        while (__stlxr(v49 - 1, v23));
        if (!v49)
        {
          (*(void (**)(char *))(*(_QWORD *)v22 + 16))(v22);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
        }
        goto LABEL_88;
      }
      v26 = &v90;
      *((_QWORD *)v22 + 9) = v25;
    }
    else
    {
      v26 = v22 + 72;
    }
    *v26 = 0;
    goto LABEL_50;
  }
  std::runtime_error::runtime_error(&__p, &v86);
  v80 = v87;
  __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v81 = v88;
  v82 = v89;
  v83 = v90;
  if (v90)
  {
    *((_QWORD *)v89 + 2) = &v82;
    v88 = &v89;
    v89 = 0;
    v90 = 0;
  }
  else
  {
    v81 = &v82;
  }
  v84 = v91;
  v91 = 0uLL;
  v85 = 1;
  std::runtime_error::runtime_error(&v93, &__p);
  v94 = v80;
  v93.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v95 = v81;
  v96 = v82;
  v97 = v83;
  if (v83)
  {
    *((_QWORD *)v82 + 2) = &v96;
    v81 = &v82;
    v82 = 0;
    v83 = 0;
  }
  else
  {
    v95 = &v96;
  }
  v98 = v84;
  v84 = 0uLL;
  std::runtime_error::runtime_error(&v63, &v93);
  v64 = v94;
  v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v50 = v96;
  v65 = v95;
  v66 = v96;
  v67 = v97;
  if (v97)
  {
    *((_QWORD *)v96 + 2) = &v66;
    v50 = 0;
    v95 = &v96;
    v96 = 0;
    v97 = 0;
  }
  else
  {
    v65 = &v66;
  }
  v68 = v98;
  v98 = 0uLL;
  v93.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v95, v50);
  MEMORY[0x18D7898AC](&v93);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v63);
  *(_OWORD *)(a3 + 16) = v64;
  *(_QWORD *)a3 = off_1E2521330;
  v51 = v66;
  *(_QWORD *)(a3 + 32) = v65;
  *(_QWORD *)(a3 + 40) = v51;
  v52 = a3 + 40;
  v53 = v67;
  *(_QWORD *)(a3 + 48) = v67;
  if (v53)
  {
    *((_QWORD *)v51 + 2) = v52;
    v51 = 0;
    v65 = &v66;
    v66 = 0;
    v67 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = v52;
  }
  v46 = MEMORY[0x1E0DE4F60];
  *(_OWORD *)(a3 + 56) = v68;
  v68 = 0uLL;
  *(_BYTE *)(a3 + 72) = 0;
  v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v65, v51);
  MEMORY[0x18D7898AC](&v63);
  if (v85)
  {
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
    if (*((_QWORD *)&v84 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v81, v82);
    MEMORY[0x18D7898AC](&__p);
  }
LABEL_88:
  if (v92)
  {
    v57 = (std::runtime_error_vtbl *)v87;
    *(_QWORD *)&v87 = 0;
    if (v57)
    {
      __p.__vftable = v57;
      if (!v90)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_OWORD *, std::runtime_error *))(*(_QWORD *)v90 + 48))(v90, &__p);
    }
    v58 = v90;
    if (v90 == (__int128 *)((char *)&v87 + 8))
    {
      v59 = 4;
      v58 = (_QWORD *)&v87 + 1;
    }
    else
    {
      if (!v90)
      {
LABEL_98:
        v60 = (std::__shared_weak_count *)v86.__imp_.__imp_;
        if (v86.__imp_.__imp_)
        {
          v61 = (unint64_t *)(v86.__imp_.__imp_ + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        goto LABEL_103;
      }
      v59 = 5;
    }
    (*(void (**)(void))(*v58 + 8 * v59))();
    goto LABEL_98;
  }
  ((void (*)(std::runtime_error *))v86.~runtime_error)(&v86);
LABEL_103:
  v69.__vftable = *(std::runtime_error_vtbl **)v46;
  *(std::runtime_error_vtbl **)((char *)&v69.__vftable + (unint64_t)v69.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v46 + 24);
  v69.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  if (SBYTE7(v76) < 0)
    operator delete((void *)v75);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v78);
}

void sub_18CC3C400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0((uint64_t)&a53);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v53 - 168);
  if (*(_BYTE *)(v53 - 184))
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>((_QWORD *)(v53 - 256));
  else
    (**(void (***)(uint64_t))(v53 - 256))(v53 - 256);
  std::ostringstream::~ostringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::runtime_error_vtbl *v8;
  uint64_t v9;
  std::runtime_error_vtbl *v10;
  std::runtime_error_vtbl *v11;
  std::ios_base *v12;
  _QWORD *v13;
  uint64_t v14;
  const void *v15;
  int64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  char *v33;
  unint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  const char *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *imp;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  unint64_t *v47;
  uint64_t v48;
  _OWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  const void *v52;
  int64_t v53;
  void **v54;
  void (__cdecl *v55)(std::runtime_error *__hidden);
  int64_t v56;
  char *v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned int *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::runtime_error_vtbl *v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::runtime_error_vtbl *v80;
  std::runtime_error v81;
  __int128 v82;
  void **v83;
  char *v84;
  char *v85;
  __int128 v86;
  std::runtime_error v87;
  __int128 v88;
  unsigned int **v89;
  unsigned int *v90;
  _OWORD *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  uint64_t v96[19];
  std::runtime_error v97;
  void *v98[2];
  void **p_p;
  void *__p;
  char *v101;
  __int128 v102;
  char v103;
  std::runtime_error v104;
  __int128 v105;
  unsigned int **v106;
  unsigned int *v107;
  _OWORD *v108;
  __int128 v109;
  char v110;
  std::runtime_error v111;
  __int128 v112;
  void **v113;
  char *v114;
  char *v115;
  __int128 v116;

  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::ColumnDesc>>((uint64_t)&v97, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, a2[1]);
  if (v103)
  {
    LOBYTE(v104.__vftable) = 0;
    v110 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v87, &v97);
    v88 = *(_OWORD *)v98;
    v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v89 = (unsigned int **)p_p;
    v90 = (unsigned int *)__p;
    v91 = v101;
    if (v101)
    {
      *((_QWORD *)__p + 2) = &v90;
      p_p = &__p;
      __p = 0;
      v101 = 0;
    }
    else
    {
      v89 = &v90;
    }
    v92 = v102;
    v102 = 0uLL;
    LOBYTE(v93) = 0;
    std::runtime_error::runtime_error(&v104, &v87);
    v105 = v88;
    v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v106 = v89;
    v107 = v90;
    v108 = v91;
    if (v91)
    {
      *((_QWORD *)v90 + 2) = &v107;
      v89 = &v90;
      v90 = 0;
      v91 = 0;
    }
    else
    {
      v106 = &v107;
    }
    v109 = v92;
    v92 = 0uLL;
    v110 = 1;
    if (!(_BYTE)v93)
      ((void (*)(AMSCore::Error *))v87.~runtime_error)((AMSCore::Error *)&v87);
    if (!v103)
    {
      ((void (*)(std::runtime_error *))v97.~runtime_error)(&v97);
      if (v110)
        goto LABEL_24;
      goto LABEL_4;
    }
  }
  if (v110)
  {
LABEL_24:
    std::runtime_error::runtime_error(&v87, &v104);
    v88 = v105;
    v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v89 = v106;
    v90 = v107;
    v91 = v108;
    if (v108)
    {
      *((_QWORD *)v107 + 2) = &v90;
      v106 = &v107;
      v107 = 0;
      v108 = 0;
    }
    else
    {
      v89 = &v90;
    }
    v92 = v109;
    v109 = 0uLL;
    std::runtime_error::runtime_error(&v97, &v87);
    *(_OWORD *)v98 = v88;
    v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v22 = v90;
    p_p = (void **)v89;
    __p = v90;
    v101 = (char *)v91;
    if (v91)
    {
      *((_QWORD *)v90 + 2) = &__p;
      v22 = 0;
      v89 = &v90;
      v90 = 0;
      v91 = 0;
    }
    else
    {
      p_p = &__p;
    }
    v102 = v92;
    v92 = 0uLL;
    v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v89, v22);
    MEMORY[0x18D7898AC](&v87);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v97);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v98;
    *(_QWORD *)a4 = off_1E2521330;
    v23 = (unsigned int *)__p;
    *(_QWORD *)(a4 + 32) = p_p;
    *(_QWORD *)(a4 + 40) = v23;
    v24 = a4 + 40;
    v25 = v101;
    *(_QWORD *)(a4 + 48) = v101;
    if (v25)
    {
      *((_QWORD *)v23 + 2) = v24;
      v23 = 0;
      p_p = &__p;
      __p = 0;
      v101 = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v24;
    }
    *(_OWORD *)(a4 + 56) = v102;
    v102 = 0uLL;
    *(_BYTE *)(a4 + 72) = 0;
    v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&p_p, v23);
    result = MEMORY[0x18D7898AC](&v97);
    if (v110)
    {
      v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
      if (*((_QWORD *)&v109 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
LABEL_59:
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        goto LABEL_61;
      }
      goto LABEL_61;
    }
    return result;
  }
LABEL_4:
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&v97, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a3, a3[1]);
  if (v103)
  {
    LOBYTE(v104.__vftable) = 0;
    v110 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v87, &v97);
    v88 = *(_OWORD *)v98;
    v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v89 = (unsigned int **)p_p;
    v90 = (unsigned int *)__p;
    v91 = v101;
    if (v101)
    {
      *((_QWORD *)__p + 2) = &v90;
      p_p = &__p;
      __p = 0;
      v101 = 0;
    }
    else
    {
      v89 = &v90;
    }
    v92 = v102;
    v102 = 0uLL;
    LOBYTE(v93) = 0;
    std::runtime_error::runtime_error(&v104, &v87);
    v105 = v88;
    v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v106 = v89;
    v107 = v90;
    v108 = v91;
    if (v91)
    {
      *((_QWORD *)v90 + 2) = &v107;
      v89 = &v90;
      v90 = 0;
      v91 = 0;
    }
    else
    {
      v106 = &v107;
    }
    v109 = v92;
    v92 = 0uLL;
    v110 = 1;
    if (!(_BYTE)v93)
      ((void (*)(AMSCore::Error *))v87.~runtime_error)((AMSCore::Error *)&v87);
    if (!v103)
    {
      ((void (*)(std::runtime_error *))v97.~runtime_error)(&v97);
      if (v110)
        goto LABEL_46;
LABEL_7:
      v80 = (std::runtime_error_vtbl *)a3;
      v8 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v9 = MEMORY[0x1E0DE4FE0] + 64;
      v10 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v11 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v96[0] = MEMORY[0x1E0DE4FE0] + 64;
      v87.__vftable = v10;
      *(std::runtime_error_vtbl **)((char *)&v87.__vftable + (unint64_t)v10[-1].~runtime_error) = v11;
      v12 = (std::ios_base *)((char *)&v87 + (unint64_t)v87.__vftable[-1].~runtime_error);
      std::ios_base::init(v12, &v87.__imp_);
      v12[1].__vftable = 0;
      v12[1].__fmtflags_ = -1;
      v87.__vftable = v8 + 1;
      v96[0] = v9;
      std::streambuf::basic_streambuf();
      v87.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      v93 = 0u;
      v94 = 0u;
      v95 = 16;
      v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v87, (uint64_t)"SELECT DISTINCT ", 16);
      v15 = (const void *)*a2;
      v14 = a2[1];
      v16 = v14 - *a2;
      if (v14 == *a2)
      {
        v17 = 0;
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * (v16 >> 3) > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::string>::__throw_length_error[abi:fe180100]();
        v17 = (uint64_t *)operator new(v16);
        memcpy(v17, v15, v16);
        v18 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"", 0);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v18, (uint64_t)"", 0);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, *v17, v17[1]);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"", 0);
        if (v16 != 24)
        {
          v19 = 3;
          do
          {
            v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)"", 0);
            v21 = &v17[v19];
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, v17[v19], v17[v19 + 1]);
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"", 0);
            v19 += 3;
          }
          while (v21 + 3 != &v17[v16 >> 3]);
        }
      }
      v35 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      v36 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v35, (uint64_t)"FROM ", 5);
      v37 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v36, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      LOBYTE(v104.__vftable) = 10;
      v38 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v37, (uint64_t)&v104, 1);
      v104.__vftable = v80;
      if (v17)
        operator delete(v17);
      v39 = *(_QWORD *)(a1 + 16);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v87.__imp_, (std::string *)&v97);
      v40 = *(const char **)(v39 + 8);
      v111.__vftable = *(std::runtime_error_vtbl **)v39;
      v111.__imp_.__imp_ = v40;
      if (v40)
      {
        v41 = (unint64_t *)(v40 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      AMSCore::SQLiteStatement::make((uint64_t)&v104, (uint64_t)&v111, (uint64_t)&v97);
      imp = (std::__shared_weak_count *)v111.__imp_.__imp_;
      if (v111.__imp_.__imp_)
      {
        v44 = (unint64_t *)(v111.__imp_.__imp_ + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      if (SHIBYTE(v98[0]) < 0)
      {
        operator delete(v97.__vftable);
        if (v110)
        {
LABEL_76:
          v46 = (char *)operator new(0x50uLL);
          *((_QWORD *)v46 + 1) = 0;
          v47 = (unint64_t *)(v46 + 8);
          *((_QWORD *)v46 + 2) = 0;
          *(_QWORD *)v46 = &off_1E2522A10;
          *(std::runtime_error *)(v46 + 24) = v104;
          v104.__vftable = 0;
          v104.__imp_.__imp_ = 0;
          v48 = v105;
          v49 = v108;
          *(_QWORD *)&v105 = 0;
          *((_QWORD *)v46 + 5) = v48;
          if (v49)
          {
            if (v49 == (__int128 *)((char *)&v105 + 8))
            {
              *((_QWORD *)v46 + 9) = v46 + 48;
              (*(void (**)(_OWORD *))(*(_QWORD *)v49 + 24))(v49);
LABEL_85:
              v81.__vftable = (std::runtime_error_vtbl *)(v46 + 24);
              v81.__imp_.__imp_ = v46;
              v111.__vftable = (std::runtime_error_vtbl *)(v46 + 24);
              v111.__imp_.__imp_ = v46;
              do
                v51 = __ldxr(v47);
              while (__stxr(v51 + 1, v47));
              v112 = 0uLL;
              v113 = 0;
              v52 = (const void *)*a2;
              v53 = a2[1] - *a2;
              if (v53)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v53 >> 3) > 0xAAAAAAAAAAAAAAALL)
                  std::vector<std::string>::__throw_length_error[abi:fe180100]();
                *(_QWORD *)&v112 = operator new(v53);
                *((_QWORD *)&v112 + 1) = v112;
                v54 = (void **)(v112 + 8 * (v53 >> 3));
                v113 = v54;
                memcpy((void *)v112, v52, v53);
                *((_QWORD *)&v112 + 1) = v54;
              }
              v114 = 0;
              v115 = 0;
              *(_QWORD *)&v116 = 0;
              v55 = v80->~runtime_error;
              v56 = (char *)v80->~runtime_error_0 - (char *)v80->~runtime_error;
              if (v56)
              {
                if (v56 < 0)
                  std::vector<std::string>::__throw_length_error[abi:fe180100]();
                v114 = (char *)operator new(v56);
                v115 = v114;
                v57 = &v114[32 * (v56 >> 5)];
                *(_QWORD *)&v116 = v57;
                memcpy(v114, v55, v56 - 4);
                v115 = v57;
              }
              AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0((uint64_t)&v97, (uint64_t)&v111);
              *(_QWORD *)(a4 + 24) = 0;
              v58 = operator new(0x48uLL);
              *v58 = &off_1E2521B28;
              AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0((uint64_t)(v58 + 1), (uint64_t)&v97);
              *(_QWORD *)(a4 + 24) = v58;
              if (__p)
              {
                v101 = (char *)__p;
                operator delete(__p);
              }
              if (v98[0])
              {
                v98[1] = v98[0];
                operator delete(v98[0]);
              }
              v59 = (std::__shared_weak_count *)v97.__imp_.__imp_;
              if (v97.__imp_.__imp_)
              {
                v60 = (unint64_t *)(v97.__imp_.__imp_ + 8);
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              *(_BYTE *)(a4 + 72) = 1;
              if (v114)
              {
                v115 = v114;
                operator delete(v114);
              }
              if ((_QWORD)v112)
              {
                *((_QWORD *)&v112 + 1) = v112;
                operator delete((void *)v112);
              }
              v62 = (std::__shared_weak_count *)v111.__imp_.__imp_;
              if (v111.__imp_.__imp_)
              {
                v63 = (unint64_t *)(v111.__imp_.__imp_ + 8);
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
              if (v81.__imp_.__imp_)
              {
                v65 = (unint64_t *)(v81.__imp_.__imp_ + 8);
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  (*(void (**)(const char *))(*(_QWORD *)v81.__imp_.__imp_ + 16))(v81.__imp_.__imp_);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v81.__imp_.__imp_);
                }
              }
              goto LABEL_133;
            }
            v50 = &v108;
            *((_QWORD *)v46 + 9) = v49;
          }
          else
          {
            v50 = v46 + 72;
          }
          *v50 = 0;
          goto LABEL_85;
        }
      }
      else if (v110)
      {
        goto LABEL_76;
      }
      std::runtime_error::runtime_error(&v97, &v104);
      *(_OWORD *)v98 = v105;
      v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      p_p = (void **)v106;
      __p = v107;
      v101 = (char *)v108;
      if (v108)
      {
        *((_QWORD *)v107 + 2) = &__p;
        v106 = &v107;
        v107 = 0;
        v108 = 0;
      }
      else
      {
        p_p = &__p;
      }
      v102 = v109;
      v109 = 0uLL;
      v103 = 1;
      std::runtime_error::runtime_error(&v111, &v97);
      v112 = *(_OWORD *)v98;
      v111.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v113 = p_p;
      v114 = (char *)__p;
      v115 = v101;
      if (v101)
      {
        *((_QWORD *)__p + 2) = &v114;
        p_p = &__p;
        __p = 0;
        v101 = 0;
      }
      else
      {
        v113 = (void **)&v114;
      }
      v116 = v102;
      v102 = 0uLL;
      std::runtime_error::runtime_error(&v81, &v111);
      v82 = v112;
      v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v67 = (unsigned int *)v114;
      v83 = v113;
      v84 = v114;
      v85 = v115;
      if (v115)
      {
        *((_QWORD *)v114 + 2) = &v84;
        v67 = 0;
        v113 = (void **)&v114;
        v114 = 0;
        v115 = 0;
      }
      else
      {
        v83 = (void **)&v84;
      }
      v86 = v116;
      v116 = 0uLL;
      v111.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v113, v67);
      MEMORY[0x18D7898AC](&v111);
      std::runtime_error::runtime_error((std::runtime_error *)a4, &v81);
      *(_OWORD *)(a4 + 16) = v82;
      *(_QWORD *)a4 = off_1E2521330;
      v68 = v84;
      *(_QWORD *)(a4 + 32) = v83;
      *(_QWORD *)(a4 + 40) = v68;
      v69 = a4 + 40;
      v70 = v85;
      *(_QWORD *)(a4 + 48) = v85;
      if (v70)
      {
        *((_QWORD *)v68 + 2) = v69;
        v68 = 0;
        v83 = (void **)&v84;
        v84 = 0;
        v85 = 0;
      }
      else
      {
        *(_QWORD *)(a4 + 32) = v69;
      }
      *(_OWORD *)(a4 + 56) = v86;
      v86 = 0uLL;
      *(_BYTE *)(a4 + 72) = 0;
      v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v83, (unsigned int *)v68);
      MEMORY[0x18D7898AC](&v81);
      if (v103)
      {
        v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v71 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
        if (*((_QWORD *)&v102 + 1))
        {
          v72 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&p_p, (unsigned int *)__p);
        MEMORY[0x18D7898AC](&v97);
      }
LABEL_133:
      if (!v110)
      {
        ((void (*)(std::runtime_error *))v104.~runtime_error)(&v104);
LABEL_148:
        v87.__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E0DE4F60];
        *(std::runtime_error_vtbl **)((char *)&v87.__vftable + (unint64_t)v87.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
        v87.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
        if (SBYTE7(v94) < 0)
          operator delete((void *)v93);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        return MEMORY[0x18D789B58](v96);
      }
      v74 = (std::runtime_error_vtbl *)v105;
      *(_QWORD *)&v105 = 0;
      if (v74)
      {
        v97.__vftable = v74;
        if (!v108)
          std::__throw_bad_function_call[abi:fe180100]();
        (*(void (**)(_OWORD *, std::runtime_error *))(*(_QWORD *)v108 + 48))(v108, &v97);
      }
      v75 = v108;
      if (v108 == (__int128 *)((char *)&v105 + 8))
      {
        v76 = 4;
        v75 = (_QWORD *)&v105 + 1;
      }
      else
      {
        if (!v108)
        {
LABEL_143:
          v77 = (std::__shared_weak_count *)v104.__imp_.__imp_;
          if (v104.__imp_.__imp_)
          {
            v78 = (unint64_t *)(v104.__imp_.__imp_ + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          goto LABEL_148;
        }
        v76 = 5;
      }
      (*(void (**)(void))(*v75 + 8 * v76))();
      goto LABEL_143;
    }
  }
  if (!v110)
    goto LABEL_7;
LABEL_46:
  std::runtime_error::runtime_error(&v87, &v104);
  v88 = v105;
  v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v89 = v106;
  v90 = v107;
  v91 = v108;
  if (v108)
  {
    *((_QWORD *)v107 + 2) = &v90;
    v106 = &v107;
    v107 = 0;
    v108 = 0;
  }
  else
  {
    v89 = &v90;
  }
  v92 = v109;
  v109 = 0uLL;
  std::runtime_error::runtime_error(&v97, &v87);
  *(_OWORD *)v98 = v88;
  v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v30 = v90;
  p_p = (void **)v89;
  __p = v90;
  v101 = (char *)v91;
  if (v91)
  {
    *((_QWORD *)v90 + 2) = &__p;
    v30 = 0;
    v89 = &v90;
    v90 = 0;
    v91 = 0;
  }
  else
  {
    p_p = &__p;
  }
  v102 = v92;
  v92 = 0uLL;
  v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v89, v30);
  MEMORY[0x18D7898AC](&v87);
  std::runtime_error::runtime_error((std::runtime_error *)a4, &v97);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)v98;
  *(_QWORD *)a4 = off_1E2521330;
  v31 = (unsigned int *)__p;
  *(_QWORD *)(a4 + 32) = p_p;
  *(_QWORD *)(a4 + 40) = v31;
  v32 = a4 + 40;
  v33 = v101;
  *(_QWORD *)(a4 + 48) = v101;
  if (v33)
  {
    *((_QWORD *)v31 + 2) = v32;
    v31 = 0;
    p_p = &__p;
    __p = 0;
    v101 = 0;
  }
  else
  {
    *(_QWORD *)(a4 + 32) = v32;
  }
  *(_OWORD *)(a4 + 56) = v102;
  v102 = 0uLL;
  *(_BYTE *)(a4 + 72) = 0;
  v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&p_p, v31);
  result = MEMORY[0x18D7898AC](&v97);
  if (v110)
  {
    v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v29 = __ldaxr(v34);
      while (__stlxr(v29 - 1, v34));
      goto LABEL_59;
    }
LABEL_61:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v106, v107);
    return MEMORY[0x18D7898AC](&v104);
  }
  return result;
}

void sub_18CC3D42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56,void *a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61)
{
  void *v61;
  uint64_t v62;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;

  operator delete(v61);
  if (__p)
  {
    a61 = (uint64_t)__p;
    operator delete(__p);
    v64 = a57;
    if (!a57)
    {
LABEL_3:
      v65 = a56;
      if (!a56)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    v64 = a57;
    if (!a57)
      goto LABEL_3;
  }
  a58 = (uint64_t)v64;
  operator delete(v64);
  v65 = a56;
  if (!a56)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v65->__shared_owners_;
  do
    v67 = __ldaxr(p_shared_owners);
  while (__stlxr(v67 - 1, p_shared_owners));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
LABEL_11:
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0((_QWORD *)(v62 - 168));
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a13);
  if (*(_BYTE *)(v62 - 184))
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>((_QWORD *)(v62 - 256));
  else
    (**(void (***)(uint64_t))(v62 - 256))(v62 - 256);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::runtime_error_vtbl *v6;
  uint64_t v7;
  std::runtime_error_vtbl *v8;
  std::runtime_error_vtbl *v9;
  std::ios_base *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  const char *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *imp;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  uint64_t v24;
  _OWORD *v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t result;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  char *v39;
  unsigned int **v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  _OWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::runtime_error_vtbl *v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::runtime_error v58;
  __int128 v59;
  unsigned int **v60;
  unsigned int *v61;
  _OWORD *v62;
  __int128 v63;
  std::runtime_error v64;
  __int128 v65;
  unsigned int **v66;
  unsigned int *v67;
  _OWORD *v68;
  __int128 v69;
  __int128 __p;
  __int128 v71;
  int v72;
  uint64_t v73[19];
  std::runtime_error v74;
  __int128 v75;
  unsigned int **v76;
  unsigned int *v77;
  _OWORD *v78;
  __int128 v79;
  char v80;
  std::runtime_error v81;
  __int128 v82;
  unsigned int **v83;
  unsigned int *v84;
  _OWORD *v85;
  __int128 v86;
  char v87;
  std::runtime_error v88;
  __int128 v89;
  unsigned int **v90;
  unsigned int *v91;
  _OWORD *v92;
  __int128 v93;

  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&v74, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, a2[1]);
  if (v80)
  {
    LOBYTE(v81.__vftable) = 0;
    v87 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v64, &v74);
    v65 = v75;
    v64.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v66 = v76;
    v67 = v77;
    v68 = v78;
    if (v78)
    {
      *((_QWORD *)v77 + 2) = &v67;
      v76 = &v77;
      v77 = 0;
      v78 = 0;
    }
    else
    {
      v66 = &v67;
    }
    v69 = v79;
    v79 = 0uLL;
    LOBYTE(__p) = 0;
    std::runtime_error::runtime_error(&v81, &v64);
    v82 = v65;
    v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v83 = v66;
    v84 = v67;
    v85 = v68;
    if (v68)
    {
      *((_QWORD *)v67 + 2) = &v84;
      v66 = &v67;
      v67 = 0;
      v68 = 0;
    }
    else
    {
      v83 = &v84;
    }
    v86 = v69;
    v69 = 0uLL;
    v87 = 1;
    if (!(_BYTE)__p)
      ((void (*)(AMSCore::Error *))v64.~runtime_error)((AMSCore::Error *)&v64);
    if (!v80)
    {
      ((void (*)(std::runtime_error *))v74.~runtime_error)(&v74);
      if (v87)
        goto LABEL_25;
      goto LABEL_4;
    }
  }
  if (v87)
  {
LABEL_25:
    std::runtime_error::runtime_error(&v64, &v81);
    v65 = v82;
    v64.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v66 = v83;
    v67 = v84;
    v68 = v85;
    if (v85)
    {
      *((_QWORD *)v84 + 2) = &v67;
      v83 = &v84;
      v84 = 0;
      v85 = 0;
    }
    else
    {
      v66 = &v67;
    }
    v69 = v86;
    v86 = 0uLL;
    std::runtime_error::runtime_error(&v74, &v64);
    v75 = v65;
    v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = v67;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    if (v68)
    {
      *((_QWORD *)v67 + 2) = &v77;
      v27 = 0;
      v66 = &v67;
      v67 = 0;
      v68 = 0;
    }
    else
    {
      v76 = &v77;
    }
    v79 = v69;
    v69 = 0uLL;
    v64.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v66, v27);
    MEMORY[0x18D7898AC](&v64);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v74);
    *(_OWORD *)(a3 + 16) = v75;
    *(_QWORD *)a3 = off_1E2521330;
    v28 = v77;
    *(_QWORD *)(a3 + 32) = v76;
    *(_QWORD *)(a3 + 40) = v28;
    v29 = a3 + 40;
    v30 = v78;
    *(_QWORD *)(a3 + 48) = v78;
    if (v30)
    {
      *((_QWORD *)v28 + 2) = v29;
      v28 = 0;
      v76 = &v77;
      v77 = 0;
      v78 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v29;
    }
    *(_OWORD *)(a3 + 56) = v79;
    v79 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v28);
    result = MEMORY[0x18D7898AC](&v74);
    if (v87)
    {
      v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v83, v84);
      return MEMORY[0x18D7898AC](&v81);
    }
    return result;
  }
LABEL_4:
  v6 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v73[0] = MEMORY[0x1E0DE4FE0] + 64;
  v64.__vftable = v8;
  *(std::runtime_error_vtbl **)((char *)&v64.__vftable + (unint64_t)v8[-1].~runtime_error) = v9;
  v10 = (std::ios_base *)((char *)&v64 + (unint64_t)v64.__vftable[-1].~runtime_error);
  std::ios_base::init(v10, &v64.__imp_);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v64.__vftable = v6 + 1;
  v73[0] = v7;
  std::streambuf::basic_streambuf();
  v64.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  __p = 0u;
  v71 = 0u;
  v72 = 16;
  v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v64, (uint64_t)"SELECT COUNT(*) FROM \"", 22);
  v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"\n", 2);
  v81.__vftable = (std::runtime_error_vtbl *)a2;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
  v15 = *(_QWORD *)(a1 + 16);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v64.__imp_, (std::string *)&v74);
  v16 = *(const char **)(v15 + 8);
  v88.__vftable = *(std::runtime_error_vtbl **)v15;
  v88.__imp_.__imp_ = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v81, (uint64_t)&v88, (uint64_t)&v74);
  imp = (std::__shared_weak_count *)v88.__imp_.__imp_;
  if (!v88.__imp_.__imp_)
    goto LABEL_11;
  v20 = (unint64_t *)(v88.__imp_.__imp_ + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
    if ((SBYTE7(v75) & 0x80000000) == 0)
    {
LABEL_12:
      if (v87)
        goto LABEL_13;
      goto LABEL_44;
    }
  }
  else
  {
LABEL_11:
    if ((SBYTE7(v75) & 0x80000000) == 0)
      goto LABEL_12;
  }
  operator delete(v74.__vftable);
  if (v87)
  {
LABEL_13:
    v22 = (char *)operator new(0x50uLL);
    *((_QWORD *)v22 + 1) = 0;
    v23 = (unint64_t *)(v22 + 8);
    *((_QWORD *)v22 + 2) = 0;
    *(_QWORD *)v22 = &off_1E2522A10;
    *(std::runtime_error *)(v22 + 24) = v81;
    v81.__vftable = 0;
    v81.__imp_.__imp_ = 0;
    v24 = v82;
    v25 = v85;
    *(_QWORD *)&v82 = 0;
    *((_QWORD *)v22 + 5) = v24;
    if (v25)
    {
      if (v25 == (__int128 *)((char *)&v82 + 8))
      {
        *((_QWORD *)v22 + 9) = v22 + 48;
        (*(void (**)(_OWORD *))(*(_QWORD *)v25 + 24))(v25);
LABEL_49:
        v88.__vftable = (std::runtime_error_vtbl *)(v22 + 24);
        v88.__imp_.__imp_ = v22;
        v74.__vftable = (std::runtime_error_vtbl *)(v22 + 24);
        v74.__imp_.__imp_ = v22;
        do
          v35 = __ldxr(v23);
        while (__stxr(v35 + 1, v23));
        v75 = 0uLL;
        v76 = 0;
        v37 = (const void *)*a2;
        v36 = a2[1];
        v38 = v36 - *a2;
        if (v36 == *a2)
        {
          v40 = 0;
          v39 = 0;
        }
        else
        {
          if (v38 < 0)
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          v39 = (char *)operator new(v36 - *a2);
          *(_QWORD *)&v75 = v39;
          *((_QWORD *)&v75 + 1) = v39;
          v40 = (unsigned int **)&v39[32 * (v38 >> 5)];
          v76 = v40;
          memcpy(v39, v37, v38 - 4);
        }
        v76 = 0;
        v74 = (std::runtime_error)0;
        v75 = 0u;
        *(_QWORD *)(a3 + 24) = 0;
        v41 = operator new(0x30uLL);
        v42 = MEMORY[0x1E0DE4FB8];
        *v41 = &off_1E2521BD8;
        v41[1] = v22 + 24;
        v41[2] = v22;
        v41[3] = v39;
        v41[4] = v40;
        v41[5] = v40;
        *(_QWORD *)(a3 + 24) = v41;
        *(_BYTE *)(a3 + 72) = 1;
        do
          v43 = __ldaxr(v23);
        while (__stlxr(v43 - 1, v23));
        v44 = MEMORY[0x1E0DE4F60];
        if (!v43)
        {
          (*(void (**)(char *))(*(_QWORD *)v22 + 16))(v22);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
        }
        goto LABEL_76;
      }
      v26 = &v85;
      *((_QWORD *)v22 + 9) = v25;
    }
    else
    {
      v26 = v22 + 72;
    }
    *v26 = 0;
    goto LABEL_49;
  }
LABEL_44:
  std::runtime_error::runtime_error(&v74, &v81);
  v75 = v82;
  v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v76 = v83;
  v77 = v84;
  v78 = v85;
  if (v85)
  {
    *((_QWORD *)v84 + 2) = &v77;
    v83 = &v84;
    v84 = 0;
    v85 = 0;
  }
  else
  {
    v76 = &v77;
  }
  v79 = v86;
  v86 = 0uLL;
  v80 = 1;
  std::runtime_error::runtime_error(&v88, &v74);
  v89 = v75;
  v88.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v90 = v76;
  v91 = v77;
  v92 = v78;
  if (v78)
  {
    *((_QWORD *)v77 + 2) = &v91;
    v76 = &v77;
    v77 = 0;
    v78 = 0;
  }
  else
  {
    v90 = &v91;
  }
  v93 = v79;
  v79 = 0uLL;
  std::runtime_error::runtime_error(&v58, &v88);
  v59 = v89;
  v58.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v45 = v91;
  v60 = v90;
  v61 = v91;
  v62 = v92;
  if (v92)
  {
    *((_QWORD *)v91 + 2) = &v61;
    v45 = 0;
    v90 = &v91;
    v91 = 0;
    v92 = 0;
  }
  else
  {
    v60 = &v61;
  }
  v42 = MEMORY[0x1E0DE4FB8];
  v63 = v93;
  v93 = 0uLL;
  v88.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v90, v45);
  MEMORY[0x18D7898AC](&v88);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v58);
  *(_OWORD *)(a3 + 16) = v59;
  *(_QWORD *)a3 = off_1E2521330;
  v46 = v61;
  *(_QWORD *)(a3 + 32) = v60;
  *(_QWORD *)(a3 + 40) = v46;
  v47 = a3 + 40;
  v48 = v62;
  *(_QWORD *)(a3 + 48) = v62;
  if (v48)
  {
    *((_QWORD *)v46 + 2) = v47;
    v46 = 0;
    v60 = &v61;
    v61 = 0;
    v62 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = v47;
  }
  v44 = MEMORY[0x1E0DE4F60];
  *(_OWORD *)(a3 + 56) = v63;
  v63 = 0uLL;
  *(_BYTE *)(a3 + 72) = 0;
  v58.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v60, v46);
  MEMORY[0x18D7898AC](&v58);
  if (v80)
  {
    v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
    if (*((_QWORD *)&v79 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v77);
    MEMORY[0x18D7898AC](&v74);
  }
LABEL_76:
  if (v87)
  {
    v52 = (std::runtime_error_vtbl *)v82;
    *(_QWORD *)&v82 = 0;
    if (v52)
    {
      v74.__vftable = v52;
      if (!v85)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_OWORD *, std::runtime_error *))(*(_QWORD *)v85 + 48))(v85, &v74);
    }
    v53 = v85;
    if (v85 == (__int128 *)((char *)&v82 + 8))
    {
      v54 = 4;
      v53 = (_QWORD *)&v82 + 1;
    }
    else
    {
      if (!v85)
      {
LABEL_86:
        v55 = (std::__shared_weak_count *)v81.__imp_.__imp_;
        if (v81.__imp_.__imp_)
        {
          v56 = (unint64_t *)(v81.__imp_.__imp_ + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        goto LABEL_91;
      }
      v54 = 5;
    }
    (*(void (**)(void))(*v53 + 8 * v54))();
    goto LABEL_86;
  }
  ((void (*)(std::runtime_error *))v81.~runtime_error)(&v81);
LABEL_91:
  v64.__vftable = *(std::runtime_error_vtbl **)v44;
  *(std::runtime_error_vtbl **)((char *)&v64.__vftable + (unint64_t)v64.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v44 + 24);
  v64.__imp_.__imp_ = (const char *)(v42 + 16);
  if (SBYTE7(v71) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v73);
}

void sub_18CC3DF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56)
{
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v61;

  if (v56)
    operator delete(v56);
  do
    v61 = __ldaxr(v58);
  while (__stlxr(v61 - 1, v58));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0(&a53);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v59 - 168);
  if (*(_BYTE *)(v59 - 184))
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>((_QWORD *)(v59 - 256));
  else
    (**(void (***)(uint64_t))(v59 - 256))(v59 - 256);
  std::ostringstream::~ostringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  size_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v17;
  std::runtime_error *v18;
  uint64_t v19;
  uint64_t v20;
  std::runtime_error v21;
  std::runtime_error v22;
  std::runtime_error_vtbl *v23;
  uint64_t v24;
  std::runtime_error_vtbl *v25;
  __int128 v26;

  v18 = (std::runtime_error *)result;
  if (a4 == a5)
  {
LABEL_15:
    LOBYTE(v18[4].__imp_.__imp_) = 1;
  }
  else
  {
    v6 = a4;
    v20 = 24 * a3;
    v19 = a2 + 24 * a3;
    while (1)
    {
      if (a3)
      {
        v10 = *(const void **)v6;
        v9 = *(_QWORD *)(v6 + 8);
        v11 = v20;
        v12 = a2;
        v13 = *(_DWORD *)(v6 + 16);
        v14 = *(_DWORD *)(v6 + 20);
        while (1)
        {
          if (*(_QWORD *)(v12 + 8) == v9)
          {
            result = memcmp(*(const void **)v12, v10, v9);
            if (!(_DWORD)result && *(_DWORD *)(v12 + 16) == v13 && *(_DWORD *)(v12 + 20) == v14)
              break;
          }
          v12 += 24;
          v11 -= 24;
          if (!v11)
          {
            v12 = v19;
            break;
          }
        }
      }
      else
      {
        v12 = a2;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v12 - a2) >> 3) == a3)
        break;
      v6 += 32;
      if (v6 == a5)
        goto LABEL_15;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[31],std::string_view const&>((uint64_t)&v21, 3u, (uint64_t *)v6);
    std::runtime_error::runtime_error(v18, &v21);
    v18[1] = v22;
    v18->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v15 = v24;
    v18[2].__vftable = v23;
    v18[2].__imp_.__imp_ = (const char *)v15;
    p_imp = (std::runtime_error_vtbl *)&v18[2].__imp_;
    v17 = v25;
    v18[3].__vftable = v25;
    if (v17)
    {
      *(_QWORD *)(v15 + 16) = p_imp;
      v23 = (std::runtime_error_vtbl *)&v24;
      v24 = 0;
      v25 = 0;
      v15 = 0;
    }
    else
    {
      v18[2].__vftable = p_imp;
    }
    *(_OWORD *)&v18[3].__imp_.__imp_ = v26;
    v26 = 0uLL;
    LOBYTE(v18[4].__imp_.__imp_) = 0;
    v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v15);
    return MEMORY[0x18D7898AC](&v21);
  }
  return result;
}

_QWORD *AMSCore::StructuredData::`anonymous namespace'::operator<<(_QWORD *a1, const void ***a2)
{
  _QWORD *v2;
  const void **v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = a1;
  if ((*a2)[1] != **a2)
  {
    v2 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"WHERE ", 6);
    v4 = *a2;
    v6 = **a2;
    v5 = v4[1];
    v7 = v5 - v6;
    if (v5 != v6)
    {
      if ((v7 & 0x8000000000000000) == 0)
      {
        v8 = (uint64_t *)operator new(v5 - v6);
        memcpy(v8, v6, v7 - 4);
        v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v2, (uint64_t)"", 0);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)"", 0);
        v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v2, (uint64_t)"(", 1);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, *v8, v8[1]);
        __asm { BR              X10 }
      }
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
  }
  return v2;
}

void sub_18CC3E514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E2521BD8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E2521BD8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x30uLL);
  *v2 = &off_1E2521BD8;
  std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_18CC3E6CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2521BD8;
  return std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(a2 + 1, (_QWORD *)(a1 + 8));
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::operator()(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  sqlite3 **v14;
  std::runtime_error *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error v24;
  __int128 v25;
  unsigned int **v26;
  unsigned int *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31[3];
  std::runtime_error v32;
  __int128 v33;
  unsigned int **v34;
  unsigned int *v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  std::runtime_error v39;
  __int128 v40;
  unsigned int **v41;
  unsigned int *v42;
  uint64_t v43;
  __int128 v44;
  char v45;
  std::runtime_error v46;
  __int128 v47;
  unsigned int **v48;
  unsigned int *v49;
  uint64_t v50;
  __int128 v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 3;
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>((uint64_t)&v32, a1[3], a1[4], *a2, a2[1]);
  if (v38)
  {
    LOBYTE(v46.__vftable) = 0;
    v52 = 0;
    goto LABEL_11;
  }
  std::runtime_error::runtime_error(&v39, &v32);
  v40 = v33;
  v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v41 = v34;
  v42 = v35;
  v43 = v36;
  if (v36)
  {
    *((_QWORD *)v35 + 2) = &v42;
    v34 = &v35;
    v35 = 0;
    v36 = 0;
  }
  else
  {
    v41 = &v42;
  }
  v44 = v37;
  v37 = 0uLL;
  v45 = 0;
  std::runtime_error::runtime_error(&v46, &v39);
  v47 = v40;
  v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v48 = v41;
  v49 = v42;
  v50 = v43;
  if (v43)
  {
    *((_QWORD *)v42 + 2) = &v49;
    v41 = &v42;
    v42 = 0;
    v43 = 0;
  }
  else
  {
    v48 = &v49;
  }
  v51 = v44;
  v44 = 0uLL;
  v52 = 1;
  if (!v45)
    ((void (*)(AMSCore::Error *))v39.~runtime_error)((AMSCore::Error *)&v39);
  if (v38)
  {
LABEL_11:
    if (v52)
      goto LABEL_12;
    goto LABEL_30;
  }
  ((void (*)(std::runtime_error *))v32.~runtime_error)(&v32);
  if (v52)
  {
LABEL_12:
    std::runtime_error::runtime_error(&v39, &v46);
    v40 = v47;
    v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v41 = v48;
    v42 = v49;
    v43 = v50;
    if (v50)
    {
      *((_QWORD *)v49 + 2) = &v42;
      v48 = &v49;
      v49 = 0;
      v50 = 0;
    }
    else
    {
      v41 = &v42;
    }
    v44 = v51;
    v51 = 0uLL;
    std::runtime_error::runtime_error(&v32, &v39);
    v33 = v40;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v7 = v42;
    v34 = v41;
    v35 = v42;
    v36 = v43;
    if (v43)
    {
      *((_QWORD *)v42 + 2) = &v35;
      v7 = 0;
      v41 = &v42;
      v42 = 0;
      v43 = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = v44;
    v44 = 0uLL;
    v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v41, v7);
    MEMORY[0x18D7898AC](&v39);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v32);
    *(_OWORD *)(a3 + 16) = v33;
    *(_QWORD *)a3 = off_1E2521330;
    v8 = v35;
    *(_QWORD *)(a3 + 32) = v34;
    *(_QWORD *)(a3 + 40) = v8;
    v9 = a3 + 40;
    v10 = v36;
    *(_QWORD *)(a3 + 48) = v36;
    if (v10)
    {
      *((_QWORD *)v8 + 2) = v9;
      v8 = 0;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v9;
    }
    *(_OWORD *)(a3 + 56) = v37;
    v37 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v8);
    MEMORY[0x18D7898AC](&v32);
    if (v52)
    {
      v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v48, v49);
      MEMORY[0x18D7898AC](&v46);
    }
    return;
  }
LABEL_30:
  v30 = 0;
  v14 = (sqlite3 **)a1[1];
  v46.__vftable = (std::runtime_error_vtbl *)&off_1E25221B0;
  v46.__imp_.__imp_ = (const char *)&v30;
  *((_QWORD *)&v47 + 1) = &v46;
  AMSCore::SQLiteStatement::exec((uint64_t)&v39, v14, v31, (uint64_t)&v46);
  v15 = (std::runtime_error *)*((_QWORD *)&v47 + 1);
  if (*((std::runtime_error **)&v47 + 1) == &v46)
  {
    v16 = 4;
    v15 = &v46;
    goto LABEL_34;
  }
  if (*((_QWORD *)&v47 + 1))
  {
    v16 = 5;
LABEL_34:
    (*((void (**)(void))&v15->~runtime_error + v16))();
  }
  if (v45)
  {
    *(_QWORD *)a3 = v30;
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v46, &v39);
    v47 = v40;
    v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v48 = v41;
    v49 = v42;
    v50 = v43;
    if (v43)
    {
      *((_QWORD *)v42 + 2) = &v49;
      v41 = &v42;
      v42 = 0;
      v43 = 0;
    }
    else
    {
      v48 = &v49;
    }
    v51 = v44;
    v44 = 0uLL;
    v52 = 1;
    std::runtime_error::runtime_error(&v32, &v46);
    v33 = v47;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v34 = v48;
    v35 = v49;
    v36 = v50;
    if (v50)
    {
      *((_QWORD *)v49 + 2) = &v35;
      v48 = &v49;
      v49 = 0;
      v50 = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = v51;
    v51 = 0uLL;
    std::runtime_error::runtime_error(&v24, &v32);
    v25 = v33;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v17 = v35;
    v26 = v34;
    v27 = v35;
    v28 = v36;
    if (v36)
    {
      *((_QWORD *)v35 + 2) = &v27;
      v17 = 0;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v26 = &v27;
    }
    v29 = v37;
    v37 = 0uLL;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v17);
    MEMORY[0x18D7898AC](&v32);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v24);
    *(_OWORD *)(a3 + 16) = v25;
    *(_QWORD *)a3 = off_1E2521330;
    v18 = v27;
    *(_QWORD *)(a3 + 32) = v26;
    *(_QWORD *)(a3 + 40) = v18;
    v19 = a3 + 40;
    v20 = v28;
    *(_QWORD *)(a3 + 48) = v28;
    if (v20)
    {
      *((_QWORD *)v18 + 2) = v19;
      v18 = 0;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v19;
    }
    *(_OWORD *)(a3 + 56) = v29;
    v29 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, v18);
    MEMORY[0x18D7898AC](&v24);
    if (v52)
    {
      v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v48, v49);
      MEMORY[0x18D7898AC](&v46);
    }
    if (!v45)
      ((void (*)(std::runtime_error *))v39.~runtime_error)(&v39);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v31, (unsigned int *)v31[1]);
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vecto"
                     "rINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNS"
                                "t3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target_type()
{
}

uint64_t AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::runtime_error v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v5 = result;
  if (a3 - a2 == a5 - a4)
  {
    if (a2 == a3 || a4 == a5)
    {
LABEL_14:
      *(_BYTE *)(result + 72) = 1;
      return result;
    }
    v6 = a2 + 32;
    v7 = a4 + 32;
    while (1)
    {
      if (*(_DWORD *)(v6 - 12) != 2)
      {
        v8 = *(_DWORD *)(v7 - 8);
        if (v8 == -1)
          v9 = 0;
        else
          v9 = *(_DWORD *)(v7 - 8);
        if (*(_DWORD *)(v6 - 16) != v9)
          goto LABEL_15;
        if ((v8 + 1) <= 1)
          break;
      }
      if (v6 != a3)
      {
        v6 += 32;
        v10 = v7 == a5;
        v7 += 32;
        if (!v10)
          continue;
      }
      goto LABEL_14;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[41]>((uint64_t)&v14, 3u);
  }
  else
  {
LABEL_15:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40]>((uint64_t)&v14, 3u);
  }
  std::runtime_error::runtime_error((std::runtime_error *)v5, &v14);
  *(_OWORD *)(v5 + 16) = v15;
  *(_QWORD *)v5 = off_1E2521330;
  v11 = v17;
  *(_QWORD *)(v5 + 32) = v16;
  *(_QWORD *)(v5 + 40) = v11;
  v12 = v5 + 40;
  v13 = v18;
  *(_QWORD *)(v5 + 48) = v18;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    v16 = &v17;
    v17 = 0;
    v18 = 0;
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 32) = v12;
  }
  *(_OWORD *)(v5 + 56) = v19;
  v19 = 0uLL;
  *(_BYTE *)(v5 + 72) = 0;
  v14.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, (unsigned int *)v11);
  return MEMORY[0x18D7898AC](&v14);
}

void AMSCore::StructuredData::`anonymous namespace'::buildBindings<std::vector<AMSCore::StructuredData::Condition>>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t **v6;
  int v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  size_t v12;
  _BYTE *v13;
  unint64_t v14;
  size_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::size_type size;
  std::string *v26;
  std::string::size_type v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  std::string v35;
  _BYTE v36[24];
  std::string v37;

  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  v3 = *a2;
  v4 = *a3;
  v5 = *a2 == a2[1] || v4 == a3[1];
  if (!v5)
  {
    v6 = a1;
    v7 = 0;
    v8 = v4 + 32;
    while (1)
    {
      std::to_string(&v35, v7);
      v9 = std::string::insert(&v35, 0, ":", 1uLL);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *(_QWORD *)&v36[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)v36 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = v36[23];
      if (v36[23] >= 0)
        v12 = 22;
      else
        v12 = (*(_QWORD *)&v36[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v36[23] < 0)
        v11 = *(_QWORD *)&v36[8];
      if (v12 == v11)
        break;
      v16 = v36;
      if (v36[23] < 0)
        v16 = *(_BYTE **)v36;
      v16[v11] = 95;
      v17 = v11 + 1;
      if ((v36[23] & 0x80000000) != 0)
        *(_QWORD *)&v36[8] = v17;
      else
        v36[23] = v17 & 0x7F;
      v16[v17] = 0;
      v19 = *(_QWORD *)v36;
      v20 = v36[23];
LABEL_38:
      v37.__r_.__value_.__l.__size_ = *(_QWORD *)&v36[8];
      *(std::string::size_type *)((char *)&v37.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v36[15];
      memset(v36, 0, sizeof(v36));
      v37.__r_.__value_.__r.__words[0] = v19;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = v20;
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      v23 = *(_QWORD *)(v3 + 8);
      if ((v20 & 0x80u) == 0)
        v24 = 22;
      else
        v24 = (v37.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v20 & 0x80u) == 0)
        size = v20;
      else
        size = v37.__r_.__value_.__l.__size_;
      if (v24 - size >= v23)
      {
        if (v23)
        {
          if ((v20 & 0x80u) == 0)
            v26 = &v37;
          else
            v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
          memmove((char *)v26 + size, *(const void **)v3, *(_QWORD *)(v3 + 8));
          v27 = size + v23;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            v37.__r_.__value_.__l.__size_ = size + v23;
          else
            *((_BYTE *)&v37.__r_.__value_.__s + 23) = v27 & 0x7F;
          v26->__r_.__value_.__s.__data_[v27] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v37, v24, size + v23 - v24, size, size, 0, *(_QWORD *)(v3 + 8), *(const std::string::value_type **)v3);
      }
      v28 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&v37);
      v29 = v28;
      v30 = *((unsigned int *)v28 + 20);
      v31 = *(unsigned int *)(v8 - 8);
      if ((_DWORD)v30 == -1)
      {
        if ((_DWORD)v31 != -1)
        {
LABEL_60:
          *(_QWORD *)v36 = v28 + 56;
          ((void (*)(_BYTE *))off_1E253D0D8[v31])(v36);
        }
      }
      else
      {
        if ((_DWORD)v31 != -1)
          goto LABEL_60;
        ((void (*)(_BYTE *, char *))off_1E253D240[v30])(v36, v28 + 56);
        *((_DWORD *)v29 + 20) = -1;
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v3 += 32;
      if (v3 != a2[1])
      {
        ++v7;
        v5 = v8 == a3[1];
        v8 += 32;
        if (!v5)
          continue;
      }
      return;
    }
    if (v12 == 0x7FFFFFFFFFFFFFF6)
      std::string::__throw_length_error[abi:fe180100]();
    if (v36[23] >= 0)
      v13 = v36;
    else
      v13 = *(_BYTE **)v36;
    if (v12 > 0x3FFFFFFFFFFFFFF2)
    {
      v18 = 0x7FFFFFFFFFFFFFF6;
    }
    else
    {
      if (v12 + 1 > 2 * v12)
        v14 = v12 + 1;
      else
        v14 = 2 * v12;
      if (v14 < 0x17)
      {
        v15 = 23;
        goto LABEL_32;
      }
      v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      v18 = v14 | 7;
      if (v18 == 23)
        v18 = v21;
    }
    v15 = v18 + 1;
LABEL_32:
    v22 = operator new(v15);
    v19 = (std::string::size_type)v22;
    if (v12)
    {
      memmove(v22, v13, v12);
      *(_BYTE *)(v19 + v12) = 95;
      if (v12 == 22)
        goto LABEL_37;
    }
    else
    {
      *v22 = 95;
    }
    operator delete(v13);
LABEL_37:
    *(_QWORD *)v36 = v19;
    *(_QWORD *)&v36[8] = v12 + 1;
    *(_QWORD *)&v36[16] = v15 | 0x8000000000000000;
    *(_BYTE *)(v19 + v12 + 1) = 0;
    v20 = (v15 | 0x8000000000000000) >> 56;
    v6 = a1;
    goto LABEL_38;
  }
}

void sub_18CC3F364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (v29 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a9, *(unsigned int **)(a9 + 8));
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E25221B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E25221B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;

  v2 = a2[2];
  if (v2)
  {
    v2 = 0;
    v3 = *a2;
    v4 = *(_DWORD *)(*a2 + 80);
    if (v4 == -1)
      v4 = 0;
    switch(v4)
    {
      case 1:
        v5 = 0;
        LOBYTE(v3) = *(_BYTE *)(v3 + 56);
        goto LABEL_10;
      case 2:
        v3 = (uint64_t)*(double *)(v3 + 56);
        goto LABEL_9;
      case 3:
      case 4:
        v3 = *(_QWORD *)(v3 + 56);
        goto LABEL_9;
      case 7:
        v3 = *(_QWORD *)(v3 + 56) / 1000;
LABEL_9:
        v5 = v3 & 0xFFFFFFFFFFFFFF00;
LABEL_10:
        **(_QWORD **)(a1 + 8) = v5 | v3;
        v2 = 1;
        break;
      default:
        return v2;
    }
  }
  return v2;
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vect"
                     "orINS0_9ConditionENS3_9allocatorIS5_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISC_EEEEEUlRKNS3_3mapINS3_12ba"
                     "sic_stringIcNS3_11char_traitsIcEENS6_IcEEEESC_NS3_4lessIvEENS6_INS3_4pairIKSM_SC_EEEEEEE_"
    || ((v3 & (unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKN"
                                "St3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISC_EEEE"
                                "EUlRKNS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESC_NS3_4lessIvEENS6_INS"
                                "3_4pairIKSM_SC_EEEEEEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISC_EEEEEUlRKNS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESC_NS3_4lessIvEENS6_INS3_4pairIKSM_SC_EEEEEEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISC_EEEEEUlRKNS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESC_NS3_4lessIvEENS6_INS3_4pairIKSM_SC_EEEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::target_type()
{
}

char *std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  int v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = (char *)(a1 + 1);
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (char *)v5;
      v13 = (_QWORD *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *(uint64_t **)v10;
      v6 = (uint64_t **)v10;
      if (!*(_QWORD *)v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    v19 = memcmp(v15, v8, v17);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return v10;
    }
    else if (v16 >= v9)
    {
      return v10;
    }
    v5 = (uint64_t *)*((_QWORD *)v10 + 1);
  }
  while (v5);
  v6 = (uint64_t **)(v10 + 8);
LABEL_29:
  v20 = v10;
  v10 = (char *)operator new(0x58uLL);
  *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
  *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = v20;
  *v6 = (uint64_t *)v10;
  v21 = (uint64_t *)**a1;
  v22 = (uint64_t *)v10;
  if (v21)
  {
    *a1 = v21;
    v22 = *v6;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40]>(uint64_t a1, unsigned int a2)
{
  std::system_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error_vtbl *v7;
  std::system_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v15;
  std::system_error v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::error_code v25;

  v4 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = MEMORY[0x1E0DE4F60];
  v7 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16.__vftable = v7;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v7[-1].~system_error) = v8;
  v9 = (std::ios_base *)((char *)&v16 + (unint64_t)v16.__vftable[-1].~system_error);
  std::ios_base::init(v9, &v16.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16.__vftable = v4 + 1;
  v24[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v16.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Arguments and where clause do not match", 39);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v16.__imp_, &v15);
  v16.__vftable = *(std::system_error_vtbl **)v6;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v16.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v6 + 24);
  v16.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v24);
  *(_QWORD *)&v25.__val_ = a2;
  v25.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v16, v25, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v18 = 0;
  v19 = 0;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v17 = &v18;
  v20 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  *(std::error_code *)(a1 + 16) = v16.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v11 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v11;
  v12 = a1 + 40;
  v13 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    v11 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v12;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v11);
  return MEMORY[0x18D7898AC](&v16);
}

void sub_18CC3F898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC3F8B4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[41]>(uint64_t a1, unsigned int a2)
{
  std::system_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error_vtbl *v7;
  std::system_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v15;
  std::system_error v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::error_code v25;

  v4 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = MEMORY[0x1E0DE4F60];
  v7 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16.__vftable = v7;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v7[-1].~system_error) = v8;
  v9 = (std::ios_base *)((char *)&v16 + (unint64_t)v16.__vftable[-1].~system_error);
  std::ios_base::init(v9, &v16.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16.__vftable = v4 + 1;
  v24[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v16.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Arguments was null for a non null column", 40);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v16.__imp_, &v15);
  v16.__vftable = *(std::system_error_vtbl **)v6;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v16.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v6 + 24);
  v16.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v24);
  *(_QWORD *)&v25.__val_ = a2;
  v25.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v16, v25, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v18 = 0;
  v19 = 0;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v17 = &v18;
  v20 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  *(std::error_code *)(a1 + 16) = v16.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v11 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v11;
  v12 = a1 + 40;
  v13 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    v11 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v12;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v11);
  return MEMORY[0x18D7898AC](&v16);
}

void sub_18CC3FAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC3FB00(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

_QWORD *std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v7 = (_BYTE *)a2[2];
  v6 = (_BYTE *)a2[3];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v9 = (char *)operator new(v6 - v7);
    a1[2] = v9;
    a1[3] = v9;
    v10 = &v9[32 * (v8 >> 5)];
    a1[4] = v10;
    memcpy(v9, v7, v8 - 4);
    a1[3] = v10;
  }
  return a1;
}

void sub_18CC3FBC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMSCore::SQLiteStatement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::SQLiteStatement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::SQLiteStatement>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>((_QWORD *)(a1 + 24));
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[31],std::string_view const&>(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  std::system_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::system_error_vtbl *v9;
  std::system_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v17;
  std::system_error v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *__p[2];
  __int128 v24;
  int v25;
  uint64_t v26[19];
  std::error_code v27;

  v6 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = MEMORY[0x1E0DE4F60];
  v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v26[0] = MEMORY[0x1E0DE4FE0] + 64;
  v18.__vftable = v9;
  *(std::system_error_vtbl **)((char *)&v18.__vftable + (unint64_t)v9[-1].~system_error) = v10;
  v11 = (std::ios_base *)((char *)&v18 + (unint64_t)v18.__vftable[-1].~system_error);
  std::ios_base::init(v11, &v18.__imp_);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v18.__vftable = v6 + 1;
  v26[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v18.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v24 = 0u;
  v25 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Table doesn't contain column: ", 30);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, *a3, a3[1]);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v18.__imp_, &v17);
  v18.__vftable = *(std::system_error_vtbl **)v8;
  *(std::system_error_vtbl **)((char *)&v18.__vftable + (unint64_t)v18.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v8 + 24);
  v18.__imp_.__imp_ = (const char *)(v12 + 16);
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v26);
  *(_QWORD *)&v27.__val_ = a2;
  v27.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v18, v27, &v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v20 = 0;
  v21 = 0;
  v18.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v19 = &v20;
  v22 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v18);
  *(std::error_code *)(a1 + 16) = v18.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v13 = v20;
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v13;
  v14 = a1 + 40;
  v15 = v21;
  *(_QWORD *)(a1 + 48) = v21;
  if (v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
    v13 = 0;
    v19 = &v20;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v14;
  }
  *(_OWORD *)(a1 + 56) = v22;
  v22 = 0uLL;
  v18.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, (unsigned int *)v13);
  return MEMORY[0x18D7898AC](&v18);
}

void sub_18CC3FE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC3FE90(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::ColumnDesc>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  size_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v17;
  std::runtime_error *v18;
  uint64_t v19;
  uint64_t v20;
  std::runtime_error v21;
  std::runtime_error v22;
  std::runtime_error_vtbl *v23;
  uint64_t v24;
  std::runtime_error_vtbl *v25;
  __int128 v26;

  v18 = (std::runtime_error *)result;
  if (a4 == a5)
  {
LABEL_15:
    LOBYTE(v18[4].__imp_.__imp_) = 1;
  }
  else
  {
    v6 = a4;
    v20 = 24 * a3;
    v19 = a2 + 24 * a3;
    while (1)
    {
      if (a3)
      {
        v10 = *(const void **)v6;
        v9 = *(_QWORD *)(v6 + 8);
        v11 = v20;
        v12 = a2;
        v13 = *(_DWORD *)(v6 + 16);
        v14 = *(_DWORD *)(v6 + 20);
        while (1)
        {
          if (*(_QWORD *)(v12 + 8) == v9)
          {
            result = memcmp(*(const void **)v12, v10, v9);
            if (!(_DWORD)result && *(_DWORD *)(v12 + 16) == v13 && *(_DWORD *)(v12 + 20) == v14)
              break;
          }
          v12 += 24;
          v11 -= 24;
          if (!v11)
          {
            v12 = v19;
            break;
          }
        }
      }
      else
      {
        v12 = a2;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v12 - a2) >> 3) == a3)
        break;
      v6 += 24;
      if (v6 == a5)
        goto LABEL_15;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[31],std::string_view const&>((uint64_t)&v21, 3u, (uint64_t *)v6);
    std::runtime_error::runtime_error(v18, &v21);
    v18[1] = v22;
    v18->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v15 = v24;
    v18[2].__vftable = v23;
    v18[2].__imp_.__imp_ = (const char *)v15;
    p_imp = (std::runtime_error_vtbl *)&v18[2].__imp_;
    v17 = v25;
    v18[3].__vftable = v25;
    if (v17)
    {
      *(_QWORD *)(v15 + 16) = p_imp;
      v23 = (std::runtime_error_vtbl *)&v24;
      v24 = 0;
      v25 = 0;
      v15 = 0;
    }
    else
    {
      v18[2].__vftable = p_imp;
    }
    *(_OWORD *)&v18[3].__imp_.__imp_ = v26;
    v26 = 0uLL;
    LOBYTE(v18[4].__imp_.__imp_) = 0;
    v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v15);
    return MEMORY[0x18D7898AC](&v21);
  }
  return result;
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = *(_BYTE **)(a2 + 16);
  v4 = *(_BYTE **)(a2 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v7 = (char *)operator new(v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 32) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 24) = v8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = *(_BYTE **)(a2 + 40);
  v9 = *(_BYTE **)(a2 + 48);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v12;
    v13 = &v12[32 * (v11 >> 5)];
    *(_QWORD *)(a1 + 56) = v13;
    memcpy(v12, v10, v11 - 4);
    *(_QWORD *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_18CC4015C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v5 = *v2;
  if (*v2)
  {
    v1[6] = v5;
    operator delete(v5);
    v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      v7 = (std::__shared_weak_count *)v1[1];
      if (!v7)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[3] = v6;
  operator delete(v6);
  v7 = (std::__shared_weak_count *)v1[1];
  if (!v7)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *a1 = &off_1E2521B28;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *a1 = &off_1E2521B28;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x48uLL);
  *v2 = &off_1E2521B28;
  std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_18CC403B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2521B28;
  return std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(a2 + 1, (_QWORD *)(a1 + 8));
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[3];
  if (v3)
  {
    __p[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)__p[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  sqlite3 **v14;
  std::runtime_error *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error v24;
  __int128 v25;
  unsigned int **v26;
  unsigned int *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32[3];
  std::runtime_error v33;
  __int128 v34;
  unsigned int **v35;
  unsigned int *v36;
  uint64_t v37;
  __int128 v38;
  char v39;
  std::runtime_error v40;
  __int128 v41;
  unsigned int **v42;
  unsigned int *v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  std::runtime_error v47;
  __int128 v48;
  unsigned int **v49;
  unsigned int *v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)(a1 + 48);
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>((uint64_t)&v33, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *a2, a2[1]);
  if (v39)
  {
    LOBYTE(v47.__vftable) = 0;
    v53 = 0;
    goto LABEL_11;
  }
  std::runtime_error::runtime_error(&v40, &v33);
  v41 = v34;
  v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v42 = v35;
  v43 = v36;
  v44 = v37;
  if (v37)
  {
    *((_QWORD *)v36 + 2) = &v43;
    v35 = &v36;
    v36 = 0;
    v37 = 0;
  }
  else
  {
    v42 = &v43;
  }
  v45 = v38;
  v38 = 0uLL;
  v46 = 0;
  std::runtime_error::runtime_error(&v47, &v40);
  v48 = v41;
  v47.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v49 = v42;
  v50 = v43;
  v51 = v44;
  if (v44)
  {
    *((_QWORD *)v43 + 2) = &v50;
    v42 = &v43;
    v43 = 0;
    v44 = 0;
  }
  else
  {
    v49 = &v50;
  }
  v52 = v45;
  v45 = 0uLL;
  v53 = 1;
  if (!v46)
    ((void (*)(AMSCore::Error *))v40.~runtime_error)((AMSCore::Error *)&v40);
  if (v39)
  {
LABEL_11:
    if (v53)
      goto LABEL_12;
    goto LABEL_30;
  }
  ((void (*)(std::runtime_error *))v33.~runtime_error)(&v33);
  if (v53)
  {
LABEL_12:
    std::runtime_error::runtime_error(&v40, &v47);
    v41 = v48;
    v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v42 = v49;
    v43 = v50;
    v44 = v51;
    if (v51)
    {
      *((_QWORD *)v50 + 2) = &v43;
      v49 = &v50;
      v50 = 0;
      v51 = 0;
    }
    else
    {
      v42 = &v43;
    }
    v45 = v52;
    v52 = 0uLL;
    std::runtime_error::runtime_error(&v33, &v40);
    v34 = v41;
    v33.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v7 = v43;
    v35 = v42;
    v36 = v43;
    v37 = v44;
    if (v44)
    {
      *((_QWORD *)v43 + 2) = &v36;
      v7 = 0;
      v42 = &v43;
      v43 = 0;
      v44 = 0;
    }
    else
    {
      v35 = &v36;
    }
    v38 = v45;
    v45 = 0uLL;
    v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v7);
    MEMORY[0x18D7898AC](&v40);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v33);
    *(_OWORD *)(a3 + 16) = v34;
    *(_QWORD *)a3 = off_1E2521330;
    v8 = v36;
    *(_QWORD *)(a3 + 32) = v35;
    *(_QWORD *)(a3 + 40) = v8;
    v9 = a3 + 40;
    v10 = v37;
    *(_QWORD *)(a3 + 48) = v37;
    if (v10)
    {
      *((_QWORD *)v8 + 2) = v9;
      v8 = 0;
      v35 = &v36;
      v36 = 0;
      v37 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v9;
    }
    *(_OWORD *)(a3 + 56) = v38;
    v38 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v33.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v35, v8);
    MEMORY[0x18D7898AC](&v33);
    if (v53)
    {
      v47.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v49, v50);
      MEMORY[0x18D7898AC](&v47);
    }
    return;
  }
LABEL_30:
  v30 = 0uLL;
  v31 = 0;
  v14 = *(sqlite3 ***)(a1 + 8);
  v47.__vftable = (std::runtime_error_vtbl *)&off_1E2522158;
  v47.__imp_.__imp_ = (const char *)(a1 + 24);
  *(_QWORD *)&v48 = &v30;
  *((_QWORD *)&v48 + 1) = &v47;
  AMSCore::SQLiteStatement::exec((uint64_t)&v40, v14, v32, (uint64_t)&v47);
  v15 = (std::runtime_error *)*((_QWORD *)&v48 + 1);
  if (*((std::runtime_error **)&v48 + 1) == &v47)
  {
    v16 = 4;
    v15 = &v47;
    goto LABEL_34;
  }
  if (*((_QWORD *)&v48 + 1))
  {
    v16 = 5;
LABEL_34:
    (*((void (**)(void))&v15->~runtime_error + v16))();
  }
  if (v46)
  {
    *(_OWORD *)a3 = v30;
    *(_QWORD *)(a3 + 16) = v31;
    v30 = 0uLL;
    v31 = 0;
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v47, &v40);
    v48 = v41;
    v47.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v49 = v42;
    v50 = v43;
    v51 = v44;
    if (v44)
    {
      *((_QWORD *)v43 + 2) = &v50;
      v42 = &v43;
      v43 = 0;
      v44 = 0;
    }
    else
    {
      v49 = &v50;
    }
    v52 = v45;
    v45 = 0uLL;
    v53 = 1;
    std::runtime_error::runtime_error(&v33, &v47);
    v34 = v48;
    v33.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v35 = v49;
    v36 = v50;
    v37 = v51;
    if (v51)
    {
      *((_QWORD *)v50 + 2) = &v36;
      v49 = &v50;
      v50 = 0;
      v51 = 0;
    }
    else
    {
      v35 = &v36;
    }
    v38 = v52;
    v52 = 0uLL;
    std::runtime_error::runtime_error(&v24, &v33);
    v25 = v34;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v17 = v36;
    v26 = v35;
    v27 = v36;
    v28 = v37;
    if (v37)
    {
      *((_QWORD *)v36 + 2) = &v27;
      v17 = 0;
      v35 = &v36;
      v36 = 0;
      v37 = 0;
    }
    else
    {
      v26 = &v27;
    }
    v29 = v38;
    v38 = 0uLL;
    v33.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v35, v17);
    MEMORY[0x18D7898AC](&v33);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v24);
    *(_OWORD *)(a3 + 16) = v25;
    *(_QWORD *)a3 = off_1E2521330;
    v18 = v27;
    *(_QWORD *)(a3 + 32) = v26;
    *(_QWORD *)(a3 + 40) = v18;
    v19 = a3 + 40;
    v20 = v28;
    *(_QWORD *)(a3 + 48) = v28;
    if (v20)
    {
      *((_QWORD *)v18 + 2) = v19;
      v18 = 0;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v19;
    }
    *(_OWORD *)(a3 + 56) = v29;
    v29 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, v18);
    MEMORY[0x18D7898AC](&v24);
    if (v53)
    {
      v47.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v49, v50);
      MEMORY[0x18D7898AC](&v47);
    }
    if (!v46)
      ((void (*)(std::runtime_error *))v40.~runtime_error)(&v40);
  }
  v40.__vftable = (std::runtime_error_vtbl *)&v30;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v40);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v32, (unsigned int *)v32[1]);
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16v"
                     "ectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctE"
                                "RKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target_type()
{
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

__n128 std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2522158;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2522158;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  void (**v10)(void **);
  void **v11;
  char *v12;
  void (**v13)(void **);
  void (**v14)(void **);
  uint64_t v15;
  unsigned int **v17;
  unsigned int *v18;
  void *__p[2];
  uint64_t v21;
  unsigned __int8 v22;
  char v23;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = a2 + 1;
  v6 = a2[1];
  v17 = (unsigned int **)*a2;
  v18 = (unsigned int *)v6;
  if (a2[2])
  {
    *(_QWORD *)(v6 + 16) = &v18;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    v17 = &v18;
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v18);
  v7 = v22;
  if (!v22)
  {
    v10 = (void (**)(void **))__p[0];
    goto LABEL_15;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)(v8 + 8);
  if ((unint64_t)v9 < *(_QWORD *)(v8 + 16))
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *(_OWORD *)v9 = *(_OWORD *)__p;
    v9[2] = v21;
    *(_QWORD *)(v8 + 8) = v9 + 3;
    return v7 != 0;
  }
  v11 = std::vector<std::vector<AMSCore::Any>>::__emplace_back_slow_path<std::vector<AMSCore::Any>>((void ***)v8, (uint64_t)__p);
  v10 = (void (**)(void **))__p[0];
  *(_QWORD *)(v8 + 8) = v11;
  if (!v22)
  {
LABEL_15:
    (*v10)(__p);
    return v7 != 0;
  }
  if (v10)
  {
    v12 = (char *)__p[1];
    v13 = v10;
    if (__p[1] != v10)
    {
      do
      {
        v14 = (void (**)(void **))(v12 - 32);
        v15 = *((unsigned int *)v12 - 2);
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, char *))off_1E253D240[v15])(&v23, v12 - 32);
        *((_DWORD *)v12 - 2) = -1;
        v12 -= 32;
      }
      while (v14 != v10);
      v13 = (void (**)(void **))__p[0];
    }
    __p[1] = v10;
    operator delete(v13);
  }
  return v7 != 0;
}

void sub_18CC40D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v24 = __p;
  if (!a22)
  {
    (*(void (**)(char **))__p)(&__p);
    _Unwind_Resume(exception_object);
  }
  if (__p)
  {
    v25 = a14;
    v26 = __p;
    if (a14 != __p)
    {
      do
      {
        v27 = v25 - 32;
        v28 = *((unsigned int *)v25 - 2);
        if ((_DWORD)v28 != -1)
          ((void (*)(uint64_t, char *))off_1E253D240[v28])(v22 - 49, v25 - 32);
        *((_DWORD *)v25 - 2) = -1;
        v25 -= 32;
      }
      while (v27 != v24);
      v26 = __p;
    }
    a14 = v24;
    operator delete(v26);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16"
                     "vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEENK3$_0clERKNS4_INS"
                     "_3AnyENS6_ISH_EEEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEEN"
                     "S6_INS3_4pairIKSR_SH_EEEEEEE_"
    || ((v3 & (unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinct"
                                "ERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_E"
                                "EEEENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_trai"
                                "tsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKSR_SH_EEEEEEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKSR_SH_EEEEEEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKSR_SH_EEEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::target_type()
{
}

void AMSCore::StructuredData::`anonymous namespace'::mapToRow(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  size_t v9;
  const void *v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  const void *__dst[2];
  unint64_t v35;
  __int128 v36;
  unint64_t v37;

  v36 = 0uLL;
  v37 = 0;
  std::vector<AMSCore::Any>::reserve((char **)&v36, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
LABEL_30:
    *(_OWORD *)a1 = v36;
    *(_QWORD *)(a1 + 16) = v37;
    *(_BYTE *)(a1 + 72) = 1;
    return;
  }
  v8 = (uint64_t *)(a3 + 8);
  v27 = a1 + 40;
  while (1)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:fe180100]();
    v10 = *(const void **)v7;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = (const void **)operator new(v12 + 1);
      __dst[1] = (const void *)v9;
      v35 = v13 | 0x8000000000000000;
      __dst[0] = v11;
LABEL_10:
      memmove(v11, v10, v9);
      goto LABEL_11;
    }
    HIBYTE(v35) = *(_QWORD *)(v7 + 8);
    v11 = __dst;
    if (v9)
      goto LABEL_10;
LABEL_11:
    *((_BYTE *)v11 + v9) = 0;
    v14 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a3, __dst);
    v15 = v14;
    if (v8 != v14)
    {
      v16 = *((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1) >= v37)
      {
        v19 = std::vector<AMSCore::Any>::__emplace_back_slow_path<AMSCore::Any>((uint64_t *)&v36, (uint64_t)(v14 + 7));
LABEL_22:
        *((_QWORD *)&v36 + 1) = v19;
        if ((SHIBYTE(v35) & 0x80000000) == 0)
          goto LABEL_24;
LABEL_23:
        operator delete((void *)__dst[0]);
        goto LABEL_24;
      }
      **((_BYTE **)&v36 + 1) = 0;
      *(_DWORD *)(v16 + 24) = -1;
      v17 = *((unsigned int *)v14 + 20);
      if ((_DWORD)v17 != -1)
      {
        ((void (*)(std::runtime_error *, uint64_t, uint64_t *))off_1E253CAE8[v17])(&v28, v16, v14 + 7);
        *(_DWORD *)(v16 + 24) = v17;
        v18 = *((unsigned int *)v15 + 20);
        if ((_DWORD)v18 != -1)
        {
          if (!(_DWORD)v18)
          {
LABEL_18:
            v19 = v16 + 32;
            goto LABEL_22;
          }
          ((void (*)(std::runtime_error *, uint64_t *))off_1E253D240[v18])(&v28, v15 + 7);
        }
      }
      *((_DWORD *)v15 + 20) = 0;
      goto LABEL_18;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>((uint64_t)&v28, 0x3E7u, "Column not found");
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v28);
    *(_OWORD *)(a1 + 16) = v29;
    *(_QWORD *)a1 = off_1E2521330;
    v20 = v31;
    *(_QWORD *)(a1 + 32) = v30;
    *(_QWORD *)(a1 + 40) = v20;
    v21 = v32;
    *(_QWORD *)(a1 + 48) = v32;
    if (v21)
    {
      *(_QWORD *)(v20 + 16) = v27;
      v20 = 0;
      v30 = &v31;
      v31 = 0;
      v32 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v27;
    }
    *(_OWORD *)(a1 + 56) = v33;
    v33 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v28.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v30, (unsigned int *)v20);
    MEMORY[0x18D7898AC](&v28);
    if (SHIBYTE(v35) < 0)
      goto LABEL_23;
LABEL_24:
    if (v8 == v15)
      break;
    v7 += 24;
    if (v7 == v6)
      goto LABEL_30;
  }
  v22 = v36;
  if ((_QWORD)v36)
  {
    v23 = *((_QWORD *)&v36 + 1);
    v24 = (void *)v36;
    if (*((_QWORD *)&v36 + 1) != (_QWORD)v36)
    {
      do
      {
        v25 = v23 - 32;
        v26 = *(unsigned int *)(v23 - 8);
        if ((_DWORD)v26 != -1)
          ((void (*)(std::runtime_error *, uint64_t))off_1E253D240[v26])(&v28, v23 - 32);
        *(_DWORD *)(v23 - 8) = -1;
        v23 -= 32;
      }
      while (v25 != v22);
      v24 = (void *)v36;
    }
    *((_QWORD *)&v36 + 1) = v22;
    operator delete(v24);
  }
}

void sub_18CC411C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::vector<AMSCore::Any>::~vector[abi:fe180100]((void **)(v29 - 112));
  _Unwind_Resume(a1);
}

_QWORD *std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v10 = (char *)operator new(v9);
    a1[2] = v10;
    a1[3] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[4] = v11;
    memcpy(v10, v8, v9);
    a1[3] = v11;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v15 = (char *)operator new(v12 - v13);
    a1[5] = v15;
    a1[6] = v15;
    v16 = &v15[32 * (v14 >> 5)];
    a1[7] = v16;
    memcpy(v15, v13, v14 - 4);
    a1[6] = v16;
  }
  return a1;
}

void sub_18CC41314(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v5 = *v2;
  if (*v2)
  {
    v1[6] = v5;
    operator delete(v5);
    v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      v7 = (std::__shared_weak_count *)v1[1];
      if (!v7)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[3] = v6;
  operator delete(v6);
  v7 = (std::__shared_weak_count *)v1[1];
  if (!v7)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(void **)a1;
      if (!*(_QWORD *)a1)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_6:
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &off_1E2521970;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[1];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[1];
  if (v5)
  {
LABEL_6:
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &off_1E2521970;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[1];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[1];
    if (!v5)
      goto LABEL_9;
  }
  a1[2] = v5;
  operator delete(v5);
LABEL_9:
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x30uLL);
  *v2 = &off_1E2521970;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = (_BYTE *)a1[1];
  v3 = (_BYTE *)a1[2];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[32 * (v5 >> 5)];
    v2[3] = v7;
    memcpy(v6, v4, v5 - 4);
    v2[2] = v7;
  }
  v8 = a1[5];
  v2[4] = a1[4];
  v2[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v2;
}

void sub_18CC415CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result;
  a2[1] = 0;
  *a2 = &off_1E2521970;
  a2[2] = 0;
  a2[3] = 0;
  v5 = (_BYTE *)result[1];
  v4 = (_BYTE *)result[2];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v7 = (char *)operator new(v4 - v5);
    a2[1] = v7;
    a2[2] = v7;
    v8 = &v7[32 * (v6 >> 5)];
    a2[3] = v8;
    result = memcpy(v7, v5, v6 - 4);
    a2[2] = v8;
  }
  v9 = v3[5];
  a2[4] = v3[4];
  a2[5] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_18CC41688(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[1];
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[1];
  if (v5)
  {
LABEL_6:
    a1[2] = v5;
    operator delete(v5);
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)__p[1];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (void *)__p[1];
  if (v5)
  {
LABEL_6:
    __p[2] = v5;
    operator delete(v5);
  }
LABEL_7:
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::operator()(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  sqlite3 **v14;
  std::runtime_error v15;
  __int128 v16;
  unsigned int **v17;
  unsigned int *v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  std::runtime_error v22;
  __int128 v23;
  unsigned int **v24;
  unsigned int *v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  std::runtime_error v29;
  __int128 v30;
  unsigned int **v31;
  unsigned int *v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 1;
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>((uint64_t)&v15, a1[1], a1[2], *a2, a2[1]);
  if (v21)
  {
    LOBYTE(v22.__vftable) = 0;
    v28 = 0;
    goto LABEL_11;
  }
  std::runtime_error::runtime_error(&v29, &v15);
  v30 = v16;
  v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v31 = v17;
  v32 = v18;
  v33 = v19;
  if (v19)
  {
    *((_QWORD *)v18 + 2) = &v32;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v31 = &v32;
  }
  v34 = v20;
  v20 = 0uLL;
  v35 = 0;
  std::runtime_error::runtime_error(&v22, &v29);
  v23 = v30;
  v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v24 = v31;
  v25 = v32;
  v26 = v33;
  if (v33)
  {
    *((_QWORD *)v32 + 2) = &v25;
    v31 = &v32;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v24 = &v25;
  }
  v27 = v34;
  v34 = 0uLL;
  v28 = 1;
  if (!v35)
    ((void (*)(AMSCore::Error *))v29.~runtime_error)((AMSCore::Error *)&v29);
  if (v21)
  {
LABEL_11:
    if (v28)
      goto LABEL_12;
LABEL_30:
    v14 = (sqlite3 **)a1[4];
    *((_QWORD *)&v30 + 1) = 0;
    AMSCore::SQLiteStatement::exec(a3, v14, &v22, (uint64_t)&v29);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v22.__imp_.__imp_);
    return;
  }
  ((void (*)(std::runtime_error *))v15.~runtime_error)(&v15);
  if (!v28)
    goto LABEL_30;
LABEL_12:
  std::runtime_error::runtime_error(&v29, &v22);
  v30 = v23;
  v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v31 = v24;
  v32 = v25;
  v33 = v26;
  if (v26)
  {
    *((_QWORD *)v25 + 2) = &v32;
    v24 = &v25;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v31 = &v32;
  }
  v34 = v27;
  v27 = 0uLL;
  std::runtime_error::runtime_error(&v15, &v29);
  v16 = v30;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v7 = v32;
  v17 = v31;
  v18 = v32;
  v19 = v33;
  if (v33)
  {
    *((_QWORD *)v32 + 2) = &v18;
    v7 = 0;
    v31 = &v32;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v17 = &v18;
  }
  v20 = v34;
  v34 = 0uLL;
  v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, v7);
  MEMORY[0x18D7898AC](&v29);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v15);
  *(_OWORD *)(a3 + 16) = v16;
  *(_QWORD *)a3 = off_1E2521330;
  v8 = v18;
  *(_QWORD *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = v8;
  v9 = a3 + 40;
  v10 = v19;
  *(_QWORD *)(a3 + 48) = v19;
  if (v10)
  {
    *((_QWORD *)v8 + 2) = v9;
    v8 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = v9;
  }
  *(_OWORD *)(a3 + 56) = v20;
  v20 = 0uLL;
  *(_BYTE *)(a3 + 72) = 0;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v8);
  MEMORY[0x18D7898AC](&v15);
  if (v28)
  {
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v25);
    MEMORY[0x18D7898AC](&v22);
  }
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withDeleteERKNSt3__16vec"
                     "torINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withDeleteERK"
                                "NSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withDeleteERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withDeleteERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target_type()
{
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_BYTE **)(a2 + 32);
  v4 = *(_BYTE **)(a2 + 40);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = &v7[32 * (v6 >> 5)];
    *(_QWORD *)(a1 + 48) = v8;
    memcpy(v7, v5, v6 - 4);
    *(_QWORD *)(a1 + 40) = v8;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v10 = *(_BYTE **)(a2 + 56);
  v9 = *(_BYTE **)(a2 + 64);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v12 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 72) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 64) = v13;
  }
  return a1;
}

void sub_18CC41CAC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v5 = *v2;
  if (*v2)
  {
    v1[8] = v5;
    operator delete(v5);
    v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      v7 = (std::__shared_weak_count *)v1[3];
      if (!v7)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[5] = v6;
  operator delete(v6);
  v7 = (std::__shared_weak_count *)v1[3];
  if (!v7)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  v10 = (std::__shared_weak_count *)v1[1];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::~$_0(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[3];
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)a1[1];
    if (!v7)
      return a1;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)a1[1];
    if (!v7)
      return a1;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = &off_1E2521A20;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[4];
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)a1[2];
    if (!v7)
      return a1;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)a1[2];
    if (!v7)
      return a1;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = &off_1E2521A20;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[4];
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)a1[2];
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)a1[2];
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x58uLL);
  *v2 = &off_1E2521A20;
  std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_18CC42008(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2521A20;
  return std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0 const&,0ul>(a2 + 1, (_QWORD *)(a1 + 8));
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy[abi:fe180100]((_QWORD *)(a1 + 8));
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy_deallocate(_QWORD *a1)
{
  std::__function::__alloc_func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy[abi:fe180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::runtime_error_vtbl *v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  sqlite3 ***v18;
  sqlite3 **v19;
  std::runtime_error *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error v29;
  __int128 v30;
  unsigned int **v31;
  unsigned int *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37[3];
  std::runtime_error v38;
  __int128 v39;
  unsigned int **v40;
  unsigned int *v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  std::runtime_error v45;
  __int128 v46;
  unsigned int **v47;
  unsigned int *v48;
  uint64_t v49;
  __int128 v50;
  char v51;
  std::runtime_error v52;
  __int128 v53;
  unsigned int **v54;
  unsigned int *v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v7 = *(std::runtime_error_vtbl **)a3;
  v8 = *(unsigned __int8 *)(a3 + 8);
  v9 = (uint64_t *)(a1 + 40);
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>((uint64_t)&v38, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *a2, a2[1]);
  if (v44)
  {
    LOBYTE(v52.__vftable) = 0;
    v58 = 0;
    goto LABEL_11;
  }
  std::runtime_error::runtime_error(&v45, &v38);
  v46 = v39;
  v45.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v47 = v40;
  v48 = v41;
  v49 = v42;
  if (v42)
  {
    *((_QWORD *)v41 + 2) = &v48;
    v40 = &v41;
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v47 = &v48;
  }
  v50 = v43;
  v43 = 0uLL;
  v51 = 0;
  std::runtime_error::runtime_error(&v52, &v45);
  v53 = v46;
  v52.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v54 = v47;
  v55 = v48;
  v56 = v49;
  if (v49)
  {
    *((_QWORD *)v48 + 2) = &v55;
    v47 = &v48;
    v48 = 0;
    v49 = 0;
  }
  else
  {
    v54 = &v55;
  }
  v57 = v50;
  v50 = 0uLL;
  v58 = 1;
  if (!v51)
    ((void (*)(AMSCore::Error *))v45.~runtime_error)((AMSCore::Error *)&v45);
  if (v44)
  {
LABEL_11:
    if (v58)
      goto LABEL_12;
    goto LABEL_30;
  }
  ((void (*)(std::runtime_error *))v38.~runtime_error)(&v38);
  if (v58)
  {
LABEL_12:
    std::runtime_error::runtime_error(&v45, &v52);
    v46 = v53;
    v45.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v47 = v54;
    v48 = v55;
    v49 = v56;
    if (v56)
    {
      *((_QWORD *)v55 + 2) = &v48;
      v54 = &v55;
      v55 = 0;
      v56 = 0;
    }
    else
    {
      v47 = &v48;
    }
    v50 = v57;
    v57 = 0uLL;
    std::runtime_error::runtime_error(&v38, &v45);
    v39 = v46;
    v38.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v10 = v48;
    v40 = v47;
    v41 = v48;
    v42 = v49;
    if (v49)
    {
      *((_QWORD *)v48 + 2) = &v41;
      v10 = 0;
      v47 = &v48;
      v48 = 0;
      v49 = 0;
    }
    else
    {
      v40 = &v41;
    }
    v43 = v50;
    v50 = 0uLL;
    v45.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v47, v10);
    MEMORY[0x18D7898AC](&v45);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v38);
    *(_OWORD *)(a4 + 16) = v39;
    *(_QWORD *)a4 = off_1E2521330;
    v11 = v41;
    *(_QWORD *)(a4 + 32) = v40;
    *(_QWORD *)(a4 + 40) = v11;
    v12 = a4 + 40;
    v13 = v42;
    *(_QWORD *)(a4 + 48) = v42;
    if (v13)
    {
      *((_QWORD *)v11 + 2) = v12;
      v11 = 0;
      v40 = &v41;
      v41 = 0;
      v42 = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v12;
    }
    *(_OWORD *)(a4 + 56) = v43;
    v43 = 0uLL;
    *(_BYTE *)(a4 + 72) = 0;
    v38.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v40, v11);
    MEMORY[0x18D7898AC](&v38);
    if (v58)
    {
      v52.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v54, v55);
      MEMORY[0x18D7898AC](&v52);
    }
    return;
  }
LABEL_30:
  if (v8)
  {
    v45.__vftable = v7;
    DWORD2(v46) = 4;
    BYTE7(v53) = 6;
    strcpy((char *)&v52, ":limit");
    v17 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v37, (const void **)&v52.__vftable, (uint64_t)&v52);
    AMSCore::Any::operator=((uint64_t)(v17 + 56), (uint64_t)&v45);
    if (SBYTE7(v53) < 0)
      operator delete(v52.__vftable);
    if (DWORD2(v46) != -1)
      ((void (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[DWORD2(v46)])(&v52, &v45);
  }
  v35 = 0uLL;
  v36 = 0;
  v18 = (sqlite3 ***)(a1 + 24);
  if (!v8)
    v18 = (sqlite3 ***)(a1 + 8);
  v19 = *v18;
  v52.__vftable = (std::runtime_error_vtbl *)&off_1E2522100;
  v52.__imp_.__imp_ = (const char *)(a1 + 64);
  *(_QWORD *)&v53 = &v35;
  *((_QWORD *)&v53 + 1) = &v52;
  AMSCore::SQLiteStatement::exec((uint64_t)&v45, v19, v37, (uint64_t)&v52);
  v20 = (std::runtime_error *)*((_QWORD *)&v53 + 1);
  if (*((std::runtime_error **)&v53 + 1) == &v52)
  {
    v21 = 4;
    v20 = &v52;
    goto LABEL_41;
  }
  if (*((_QWORD *)&v53 + 1))
  {
    v21 = 5;
LABEL_41:
    (*((void (**)(void))&v20->~runtime_error + v21))();
  }
  if (v51)
  {
    *(_OWORD *)a4 = v35;
    *(_QWORD *)(a4 + 16) = v36;
    v35 = 0uLL;
    v36 = 0;
    *(_BYTE *)(a4 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v52, &v45);
    v53 = v46;
    v52.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v54 = v47;
    v55 = v48;
    v56 = v49;
    if (v49)
    {
      *((_QWORD *)v48 + 2) = &v55;
      v47 = &v48;
      v48 = 0;
      v49 = 0;
    }
    else
    {
      v54 = &v55;
    }
    v57 = v50;
    v50 = 0uLL;
    v58 = 1;
    std::runtime_error::runtime_error(&v38, &v52);
    v39 = v53;
    v38.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v40 = v54;
    v41 = v55;
    v42 = v56;
    if (v56)
    {
      *((_QWORD *)v55 + 2) = &v41;
      v54 = &v55;
      v55 = 0;
      v56 = 0;
    }
    else
    {
      v40 = &v41;
    }
    v43 = v57;
    v57 = 0uLL;
    std::runtime_error::runtime_error(&v29, &v38);
    v30 = v39;
    v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v22 = v41;
    v31 = v40;
    v32 = v41;
    v33 = v42;
    if (v42)
    {
      *((_QWORD *)v41 + 2) = &v32;
      v22 = 0;
      v40 = &v41;
      v41 = 0;
      v42 = 0;
    }
    else
    {
      v31 = &v32;
    }
    v34 = v43;
    v43 = 0uLL;
    v38.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v40, v22);
    MEMORY[0x18D7898AC](&v38);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v29);
    *(_OWORD *)(a4 + 16) = v30;
    *(_QWORD *)a4 = off_1E2521330;
    v23 = v32;
    *(_QWORD *)(a4 + 32) = v31;
    *(_QWORD *)(a4 + 40) = v23;
    v24 = a4 + 40;
    v25 = v33;
    *(_QWORD *)(a4 + 48) = v33;
    if (v25)
    {
      *((_QWORD *)v23 + 2) = v24;
      v23 = 0;
      v31 = &v32;
      v32 = 0;
      v33 = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v24;
    }
    *(_OWORD *)(a4 + 56) = v34;
    v34 = 0uLL;
    *(_BYTE *)(a4 + 72) = 0;
    v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, v23);
    MEMORY[0x18D7898AC](&v29);
    if (v58)
    {
      v52.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v54, v55);
      MEMORY[0x18D7898AC](&v52);
    }
    if (!v51)
      ((void (*)(std::runtime_error *))v45.~runtime_error)(&v45);
  }
  v45.__vftable = (std::runtime_error_vtbl *)&v35;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v45);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, (unsigned int *)v37[1]);
}

void sub_18CC427A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,int a39)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16vec"
                     "torINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERK"
                                "NSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::target_type()
{
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

__n128 std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2522100;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2522100;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  void (**v10)(void **);
  void **v11;
  char *v12;
  void (**v13)(void **);
  void (**v14)(void **);
  uint64_t v15;
  unsigned int **v17;
  unsigned int *v18;
  void *__p[2];
  uint64_t v21;
  unsigned __int8 v22;
  char v23;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = a2 + 1;
  v6 = a2[1];
  v17 = (unsigned int **)*a2;
  v18 = (unsigned int *)v6;
  if (a2[2])
  {
    *(_QWORD *)(v6 + 16) = &v18;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    v17 = &v18;
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v18);
  v7 = v22;
  if (!v22)
  {
    v10 = (void (**)(void **))__p[0];
    goto LABEL_15;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)(v8 + 8);
  if ((unint64_t)v9 < *(_QWORD *)(v8 + 16))
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *(_OWORD *)v9 = *(_OWORD *)__p;
    v9[2] = v21;
    *(_QWORD *)(v8 + 8) = v9 + 3;
    return v7 != 0;
  }
  v11 = std::vector<std::vector<AMSCore::Any>>::__emplace_back_slow_path<std::vector<AMSCore::Any>>((void ***)v8, (uint64_t)__p);
  v10 = (void (**)(void **))__p[0];
  *(_QWORD *)(v8 + 8) = v11;
  if (!v22)
  {
LABEL_15:
    (*v10)(__p);
    return v7 != 0;
  }
  if (v10)
  {
    v12 = (char *)__p[1];
    v13 = v10;
    if (__p[1] != v10)
    {
      do
      {
        v14 = (void (**)(void **))(v12 - 32);
        v15 = *((unsigned int *)v12 - 2);
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, char *))off_1E253D240[v15])(&v23, v12 - 32);
        *((_DWORD *)v12 - 2) = -1;
        v12 -= 32;
      }
      while (v14 != v10);
      v13 = (void (**)(void **))__p[0];
    }
    __p[1] = v10;
    operator delete(v13);
  }
  return v7 != 0;
}

void sub_18CC42A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v24 = __p;
  if (!a22)
  {
    (*(void (**)(char **))__p)(&__p);
    _Unwind_Resume(exception_object);
  }
  if (__p)
  {
    v25 = a14;
    v26 = __p;
    if (a14 != __p)
    {
      do
      {
        v27 = v25 - 32;
        v28 = *((unsigned int *)v25 - 2);
        if ((_DWORD)v28 != -1)
          ((void (*)(uint64_t, char *))off_1E253D240[v28])(v22 - 49, v25 - 32);
        *((_DWORD *)v25 - 2) = -1;
        v25 -= 32;
      }
      while (v27 != v24);
      v26 = __p;
    }
    a14 = v24;
    operator delete(v26);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16ve"
                     "ctorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEENK3$_0clERKNS4_INS_3"
                     "AnyENS6_ISH_EEEENS3_8optionalImEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH"
                     "_NS3_4lessIvEENS6_INS3_4pairIKST_SH_EEEEEEE_"
    || ((v3 & (unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectER"
                                "KNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEE"
                                "EENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEENS3_8optionalImEEEUlONS3_3mapINS3_12basic_stringIc"
                                "NS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKST_SH_EEEEEEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEENS3_8optionalImEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKST_SH_EEEEEEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEENS3_8optionalImEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKST_SH_EEEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::target_type()
{
}

void std::__function::__alloc_func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy[abi:fe180100](_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[3];
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)a1[1];
    if (!v7)
      return;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)a1[1];
    if (!v7)
      return;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

_QWORD *std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0 const&,0ul>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v11 = (_BYTE *)a2[4];
  v10 = (_BYTE *)a2[5];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v13 = (char *)operator new(v10 - v11);
    a1[4] = v13;
    a1[5] = v13;
    v14 = &v13[32 * (v12 >> 5)];
    a1[6] = v14;
    memcpy(v13, v11, v12 - 4);
    a1[5] = v14;
  }
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  v16 = (_BYTE *)a2[7];
  v15 = (_BYTE *)a2[8];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v17 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v18 = (char *)operator new(v17);
    a1[7] = v18;
    a1[8] = v18;
    v19 = &v18[8 * (v17 >> 3)];
    a1[9] = v19;
    memcpy(v18, v16, v17);
    a1[8] = v19;
  }
  return a1;
}

void sub_18CC42D40(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v5 = *v2;
  if (*v2)
  {
    v1[8] = v5;
    operator delete(v5);
    v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      v7 = (std::__shared_weak_count *)v1[3];
      if (!v7)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[5] = v6;
  operator delete(v6);
  v7 = (std::__shared_weak_count *)v1[3];
  if (!v7)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  v10 = (std::__shared_weak_count *)v1[1];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *AMSCore::operator<<(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v10;
  uint64_t *v11;

  AMSCore::StructuredData::TableDesc::keyColumns((AMSCore::StructuredData::TableDesc *)&v10, a2, a3);
  v4 = v10;
  v5 = v11;
  if (v10 != v11)
  {
    v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, *v4, v4[1]);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"", 0);
    v7 = v4 + 3;
    if (v4 + 3 == v5)
    {
LABEL_5:
      operator delete(v4);
      return a1;
    }
    do
    {
      v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"", 0);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, *v7, v7[1]);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"", 0);
      v7 += 3;
    }
    while (v7 != v5);
  }
  if (v4)
    goto LABEL_5;
  return a1;
}

void sub_18CC42EFC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = *(_BYTE **)(a2 + 16);
  v4 = *(_BYTE **)(a2 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v7 = (char *)operator new(v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 32) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 24) = v8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = *(_BYTE **)(a2 + 40);
  v9 = *(_BYTE **)(a2 + 48);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v12;
    v13 = &v12[32 * (v11 >> 5)];
    *(_QWORD *)(a1 + 56) = v13;
    memcpy(v12, v10, v11 - 4);
    *(_QWORD *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_18CC43010(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v5 = *v2;
  if (*v2)
  {
    v1[6] = v5;
    operator delete(v5);
    v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      v7 = (std::__shared_weak_count *)v1[1];
      if (!v7)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[3] = v6;
  operator delete(v6);
  v7 = (std::__shared_weak_count *)v1[1];
  if (!v7)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *a1 = &off_1E2521A78;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *a1 = &off_1E2521A78;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x48uLL);
  *v2 = &off_1E2521A78;
  std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_18CC431F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2521A78;
  return std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(a2 + 1, (_QWORD *)(a1 + 8));
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[3];
  if (v3)
  {
    __p[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)__p[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::operator()(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, std::runtime_error *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::string *v22;
  std::runtime_error v23;
  const char *imp;
  size_t v25;
  void *v26;
  unint64_t v27;
  size_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  unint64_t v33;
  std::runtime_error_vtbl *v34;
  std::runtime_error_vtbl *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  void **v39;
  unint64_t v40;
  size_t v41;
  void **v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  void *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  _BYTE *v52;
  std::string::size_type v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  sqlite3 **v59;
  unsigned int *v60;
  std::runtime_error *v61;
  unsigned int *v62;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unsigned int *v68;
  std::runtime_error *v69;
  unsigned int *v70;
  std::runtime_error_vtbl *v71;
  std::runtime_error_vtbl *v72;
  unint64_t *v73;
  std::runtime_error_vtbl *v74;
  uint64_t *v78[3];
  std::runtime_error v79;
  std::runtime_error v80;
  unsigned int **v81;
  unsigned int *v82;
  std::runtime_error_vtbl *v83;
  __int128 v84;
  char v85;
  void *__p[2];
  std::runtime_error v87;
  unsigned int **v88;
  unsigned int *v89;
  std::runtime_error_vtbl *v90;
  __int128 v91;
  char v92;
  std::string v93;
  std::runtime_error v94;
  std::runtime_error v95;
  unsigned int **v96;
  unsigned int *v97;
  std::runtime_error_vtbl *v98;
  __int128 v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a4;
  v7 = *(unsigned __int8 *)(a4 + 8);
  v9 = a1[3];
  v8 = a1[4];
  v11 = *a2;
  v10 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3) == (v10 - *a2) >> 5)
  {
    v12 = v9 == v8 || v11 == v10;
    if (v12)
    {
LABEL_7:
      v85 = 1;
LABEL_25:
      LOBYTE(__p[0]) = 0;
      v92 = 0;
      goto LABEL_140;
    }
    v14 = v9 + 24;
    v15 = v11 + 32;
    while (1)
    {
      if (*(_DWORD *)(v14 - 4) != 2)
      {
        v16 = *(_DWORD *)(v15 - 8);
        if (v16 == -1)
          v17 = 0;
        else
          v17 = *(_DWORD *)(v15 - 8);
        if (*(_DWORD *)(v14 - 8) != v17)
          goto LABEL_10;
        if ((v16 + 1) <= 1)
          break;
      }
      if (v14 != v8)
      {
        v14 += 24;
        v12 = v15 == v10;
        v15 += 32;
        if (!v12)
          continue;
      }
      goto LABEL_7;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[41]>((uint64_t)&v94, 3u);
  }
  else
  {
LABEL_10:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40]>((uint64_t)&v94, 3u);
  }
  std::runtime_error::runtime_error(&v79, &v94);
  v80 = v95;
  v79.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v13 = v97;
  v81 = v96;
  v82 = v97;
  v83 = v98;
  if (v98)
  {
    *((_QWORD *)v97 + 2) = &v82;
    v96 = &v97;
    v97 = 0;
    v98 = 0;
    v13 = 0;
  }
  else
  {
    v81 = &v82;
  }
  v84 = v99;
  v99 = 0uLL;
  v85 = 0;
  v94.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v96, v13);
  MEMORY[0x18D7898AC](&v94);
  if (v85)
    goto LABEL_25;
  std::runtime_error::runtime_error(&v94, &v79);
  v95 = v80;
  v94.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v96 = v81;
  v97 = v82;
  v98 = v83;
  if (v83)
  {
    *((_QWORD *)v82 + 2) = &v97;
    v81 = &v82;
    v82 = 0;
    v83 = 0;
  }
  else
  {
    v96 = &v97;
  }
  v99 = v84;
  v84 = 0uLL;
  v100 = 0;
  std::runtime_error::runtime_error((std::runtime_error *)__p, &v94);
  v87 = v95;
  __p[0] = off_1E2521330;
  v88 = v96;
  v89 = v97;
  v90 = v98;
  if (v98)
  {
    *((_QWORD *)v97 + 2) = &v89;
    v96 = &v97;
    v97 = 0;
    v98 = 0;
  }
  else
  {
    v88 = &v89;
  }
  v91 = v99;
  v99 = 0uLL;
  v92 = 1;
  if (!v100)
    ((void (*)(AMSCore::Error *))v94.~runtime_error)((AMSCore::Error *)&v94);
  if (!v85)
  {
    ((void (*)(std::runtime_error *))v79.~runtime_error)(&v79);
    if (v92)
      goto LABEL_141;
    goto LABEL_27;
  }
LABEL_140:
  if (v92)
  {
LABEL_141:
    std::runtime_error::runtime_error(&v94, (const std::runtime_error *)__p);
    v95 = v87;
    v94.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v96 = v88;
    v97 = v89;
    v98 = v90;
    if (v90)
    {
      *((_QWORD *)v89 + 2) = &v97;
      v88 = &v89;
      v89 = 0;
      v90 = 0;
    }
    else
    {
      v96 = &v97;
    }
    v99 = v91;
    v91 = 0uLL;
    std::runtime_error::runtime_error(&v79, &v94);
    v80 = v95;
    v79.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v60 = v97;
    v81 = v96;
    v82 = v97;
    v83 = v98;
    if (v98)
    {
      *((_QWORD *)v97 + 2) = &v82;
      v60 = 0;
      v96 = &v97;
      v97 = 0;
      v98 = 0;
    }
    else
    {
      v81 = &v82;
    }
    v84 = v99;
    v99 = 0uLL;
    v94.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v96, v60);
    MEMORY[0x18D7898AC](&v94);
    v61 = std::runtime_error::runtime_error(a5, &v79);
    v61[1] = v80;
    v61->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v62 = v82;
    v61[2].__vftable = (std::runtime_error_vtbl *)v81;
    v61[2].__imp_.__imp_ = (const char *)v62;
    p_imp = (std::runtime_error_vtbl *)&v61[2].__imp_;
    v64 = v83;
    v61[3].__vftable = v83;
    if (v64)
    {
      *((_QWORD *)v62 + 2) = p_imp;
      v62 = 0;
      v81 = &v82;
      v82 = 0;
      v83 = 0;
    }
    else
    {
      v61[2].__vftable = p_imp;
    }
    *(_OWORD *)&v61[3].__imp_.__imp_ = v84;
    v84 = 0uLL;
    LOBYTE(v61[4].__imp_.__imp_) = 0;
    v79.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v81, v62);
    MEMORY[0x18D7898AC](&v79);
    if (v92)
    {
      __p[0] = off_1E2521330;
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      if (*((_QWORD *)&v91 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
LABEL_180:
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
        goto LABEL_182;
      }
      goto LABEL_182;
    }
    return;
  }
LABEL_27:
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>((uint64_t)&v79, a1[6], a1[7], *a3, a3[1]);
  if (v85)
  {
    LOBYTE(__p[0]) = 0;
    v92 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v94, &v79);
    v95 = v80;
    v94.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v96 = v81;
    v97 = v82;
    v98 = v83;
    if (v83)
    {
      *((_QWORD *)v82 + 2) = &v97;
      v81 = &v82;
      v82 = 0;
      v83 = 0;
    }
    else
    {
      v96 = &v97;
    }
    v99 = v84;
    v84 = 0uLL;
    v100 = 0;
    std::runtime_error::runtime_error((std::runtime_error *)__p, &v94);
    v87 = v95;
    __p[0] = off_1E2521330;
    v88 = v96;
    v89 = v97;
    v90 = v98;
    if (v98)
    {
      *((_QWORD *)v97 + 2) = &v89;
      v96 = &v97;
      v97 = 0;
      v98 = 0;
    }
    else
    {
      v88 = &v89;
    }
    v91 = v99;
    v99 = 0uLL;
    v92 = 1;
    if (!v100)
      ((void (*)(AMSCore::Error *))v94.~runtime_error)((AMSCore::Error *)&v94);
    if (!v85)
    {
      ((void (*)(std::runtime_error *))v79.~runtime_error)(&v79);
      if (v92)
        goto LABEL_167;
      goto LABEL_30;
    }
  }
  if (!v92)
  {
LABEL_30:
    if (v7)
      v18 = v6;
    else
      v18 = -1;
    v74 = (std::runtime_error_vtbl *)v18;
    v19 = a1[3];
    if (v19 == a1[4] || *a2 == a2[1])
    {
LABEL_129:
      v94.__vftable = v74;
      LODWORD(v95.__imp_.__imp_) = 4;
      HIBYTE(v87.__vftable) = 6;
      strcpy((char *)__p, ":limit");
      v58 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78, (const void **)__p, (uint64_t)__p);
      AMSCore::Any::operator=((uint64_t)(v58 + 56), (uint64_t)&v94);
      if (SHIBYTE(v87.__vftable) < 0)
        operator delete(__p[0]);
      if (LODWORD(v95.__imp_.__imp_) != -1)
        ((void (*)(void **, std::runtime_error *))off_1E253D240[LODWORD(v95.__imp_.__imp_)])(__p, &v94);
      v59 = (sqlite3 **)a1[1];
      v95.__imp_.__imp_ = 0;
      AMSCore::SQLiteStatement::exec((uint64_t)a5, v59, v78, (uint64_t)&v94);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v78, (unsigned int *)v78[1]);
      return;
    }
    v20 = 0;
    v21 = *a2 + 32;
    while (1)
    {
      std::to_string(&v93, v20);
      v22 = std::string::insert(&v93, 0, ":", 1uLL);
      v23 = *(std::runtime_error *)&v22->__r_.__value_.__l.__data_;
      v80.__vftable = (std::runtime_error_vtbl *)v22->__r_.__value_.__r.__words[2];
      v79 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      imp = (const char *)HIBYTE(v80.__vftable);
      if (SHIBYTE(v80.__vftable) >= 0)
        v25 = 22;
      else
        v25 = ((uint64_t)v80.__vftable & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (SHIBYTE(v80.__vftable) < 0)
        imp = v79.__imp_.__imp_;
      if ((const char *)v25 == imp)
        break;
      v29 = &v79;
      if (SHIBYTE(v80.__vftable) < 0)
        v29 = v79.__vftable;
      imp[(_QWORD)v29] = 95;
      v30 = imp + 1;
      if (SHIBYTE(v80.__vftable) < 0)
        v79.__imp_.__imp_ = v30;
      else
        HIBYTE(v80.__vftable) = v30 & 0x7F;
      v31 = &v30[(_QWORD)v29];
LABEL_68:
      *v31 = 0;
      v87.__vftable = v80.__vftable;
      *(std::runtime_error *)__p = v79;
      v79.__imp_.__imp_ = 0;
      v80.__vftable = 0;
      v79.__vftable = 0;
      if (SHIBYTE(v87.__vftable) >= 0)
        v36 = 22;
      else
        v36 = ((uint64_t)v87.__vftable & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (SHIBYTE(v87.__vftable) >= 0)
        v37 = (char *)((unint64_t)v87.__vftable >> 56);
      else
        v37 = (char *)__p[1];
      if (v36 - (unint64_t)v37 < 4)
      {
        v38 = (unint64_t)(v37 + 4);
        if (0x7FFFFFFFFFFFFFF6 - v36 < (unint64_t)&v37[-v36 + 4])
          std::string::__throw_length_error[abi:fe180100]();
        if (SHIBYTE(v87.__vftable) >= 0)
          v39 = __p;
        else
          v39 = (void **)__p[0];
        if (v36 >= 0x3FFFFFFFFFFFFFF3)
        {
          v45 = 0x7FFFFFFFFFFFFFF6;
        }
        else
        {
          v40 = 2 * v36;
          if (v38 > 2 * v36)
            v40 = (unint64_t)(v37 + 4);
          if (v40 < 0x17)
          {
            v41 = 23;
LABEL_94:
            v47 = (char *)operator new(v41);
            v48 = v47;
            if (v37)
              memmove(v47, v39, (size_t)v37);
            *(_DWORD *)&v37[(_QWORD)v48] = 1601463667;
            if (v36 != 22)
              operator delete(v39);
            __p[1] = v37 + 4;
            v87.__vftable = (std::runtime_error_vtbl *)(v41 | 0x8000000000000000);
            __p[0] = v48;
            v44 = (char *)v48 + v38;
            goto LABEL_99;
          }
          v46 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          v45 = v40 | 7;
          if (v45 == 23)
            v45 = v46;
        }
        v41 = v45 + 1;
        goto LABEL_94;
      }
      v42 = __p;
      if (SHIBYTE(v87.__vftable) < 0)
        v42 = (void **)__p[0];
      *(_DWORD *)&v37[(_QWORD)v42] = 1601463667;
      v43 = v37 + 4;
      if (SHIBYTE(v87.__vftable) < 0)
        __p[1] = v37 + 4;
      else
        HIBYTE(v87.__vftable) = v43 & 0x7F;
      v44 = &v43[(_QWORD)v42];
LABEL_99:
      *v44 = 0;
      v94 = *(std::runtime_error *)__p;
      v95.__vftable = v87.__vftable;
      __p[1] = 0;
      v87.__vftable = 0;
      __p[0] = 0;
      if (SHIBYTE(v80.__vftable) < 0)
      {
        operator delete(v79.__vftable);
        if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_101;
      }
      else if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_101;
      }
      operator delete(v93.__r_.__value_.__l.__data_);
LABEL_101:
      v49 = *(_QWORD *)(v19 + 8);
      if (SHIBYTE(v95.__vftable) >= 0)
        v50 = 22;
      else
        v50 = ((uint64_t)v95.__vftable & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (SHIBYTE(v95.__vftable) >= 0)
        v51 = HIBYTE(v95.__vftable);
      else
        v51 = (std::string::size_type)v94.__imp_.__imp_;
      if (v50 - v51 >= v49)
      {
        if (v49)
        {
          if (SHIBYTE(v95.__vftable) >= 0)
            v52 = &v94;
          else
            v52 = v94.__vftable;
          memmove(&v52[v51], *(const void **)v19, *(_QWORD *)(v19 + 8));
          v53 = v51 + v49;
          if (SHIBYTE(v95.__vftable) < 0)
            v94.__imp_.__imp_ = (const char *)(v51 + v49);
          else
            HIBYTE(v95.__vftable) = v53 & 0x7F;
          v52[v53] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace((std::string *)&v94, v50, v51 + v49 - v50, v51, v51, 0, *(_QWORD *)(v19 + 8), *(const std::string::value_type **)v19);
      }
      v54 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78, (const void **)&v94.__vftable, (uint64_t)&v94);
      v55 = v54;
      v56 = *((unsigned int *)v54 + 20);
      v57 = *(unsigned int *)(v21 - 8);
      if ((_DWORD)v56 == -1)
      {
        if ((_DWORD)v57 != -1)
        {
LABEL_123:
          __p[0] = v54 + 56;
          ((void (*)(void **))off_1E253D0D8[v57])(__p);
        }
      }
      else
      {
        if ((_DWORD)v57 != -1)
          goto LABEL_123;
        ((void (*)(void **, char *))off_1E253D240[v56])(__p, v54 + 56);
        *((_DWORD *)v55 + 20) = -1;
      }
      if (SHIBYTE(v95.__vftable) < 0)
        operator delete(v94.__vftable);
      v19 += 24;
      if (v19 != a1[4])
      {
        ++v20;
        v12 = v21 == a2[1];
        v21 += 32;
        if (!v12)
          continue;
      }
      goto LABEL_129;
    }
    if (v25 == 0x7FFFFFFFFFFFFFF6)
      std::string::__throw_length_error[abi:fe180100]();
    if (SHIBYTE(v80.__vftable) >= 0)
      v26 = &v79;
    else
      v26 = v79.__vftable;
    if (v25 >= 0x3FFFFFFFFFFFFFF3)
    {
      v32 = 0x7FFFFFFFFFFFFFF6;
    }
    else
    {
      if (v25 + 1 > 2 * v25)
        v27 = v25 + 1;
      else
        v27 = 2 * v25;
      if (v27 < 0x17)
      {
        v28 = 23;
        goto LABEL_62;
      }
      v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      v32 = v27 | 7;
      if (v32 == 23)
        v32 = v33;
    }
    v28 = v32 + 1;
LABEL_62:
    v34 = (std::runtime_error_vtbl *)operator new(v28);
    v35 = v34;
    if (v25)
    {
      memmove(v34, v26, v25);
      *((_BYTE *)&v35->~runtime_error + v25) = 95;
      if (v25 == 22)
        goto LABEL_67;
    }
    else
    {
      LOBYTE(v34->~runtime_error) = 95;
    }
    operator delete(v26);
LABEL_67:
    v79.__vftable = v35;
    v79.__imp_.__imp_ = (const char *)(v25 + 1);
    v80.__vftable = (std::runtime_error_vtbl *)(v28 | 0x8000000000000000);
    v31 = (char *)&v35->~runtime_error + v25 + 1;
    goto LABEL_68;
  }
LABEL_167:
  std::runtime_error::runtime_error(&v94, (const std::runtime_error *)__p);
  v95 = v87;
  v94.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v96 = v88;
  v97 = v89;
  v98 = v90;
  if (v90)
  {
    *((_QWORD *)v89 + 2) = &v97;
    v88 = &v89;
    v89 = 0;
    v90 = 0;
  }
  else
  {
    v96 = &v97;
  }
  v99 = v91;
  v91 = 0uLL;
  std::runtime_error::runtime_error(&v79, &v94);
  v80 = v95;
  v79.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v68 = v97;
  v81 = v96;
  v82 = v97;
  v83 = v98;
  if (v98)
  {
    *((_QWORD *)v97 + 2) = &v82;
    v68 = 0;
    v96 = &v97;
    v97 = 0;
    v98 = 0;
  }
  else
  {
    v81 = &v82;
  }
  v84 = v99;
  v99 = 0uLL;
  v94.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v96, v68);
  MEMORY[0x18D7898AC](&v94);
  v69 = std::runtime_error::runtime_error(a5, &v79);
  v69[1] = v80;
  v69->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v70 = v82;
  v69[2].__vftable = (std::runtime_error_vtbl *)v81;
  v69[2].__imp_.__imp_ = (const char *)v70;
  v71 = (std::runtime_error_vtbl *)&v69[2].__imp_;
  v72 = v83;
  v69[3].__vftable = v83;
  if (v72)
  {
    *((_QWORD *)v70 + 2) = v71;
    v70 = 0;
    v81 = &v82;
    v82 = 0;
    v83 = 0;
  }
  else
  {
    v69[2].__vftable = v71;
  }
  *(_OWORD *)&v69[3].__imp_.__imp_ = v84;
  v84 = 0uLL;
  LOBYTE(v69[4].__imp_.__imp_) = 0;
  v79.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v81, v70);
  MEMORY[0x18D7898AC](&v79);
  if (v92)
  {
    __p[0] = off_1E2521330;
    v65 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
    if (*((_QWORD *)&v91 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
      do
        v67 = __ldaxr(v73);
      while (__stlxr(v67 - 1, v73));
      goto LABEL_180;
    }
LABEL_182:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v88, v89);
    MEMORY[0x18D7898AC](__p);
  }
}

void sub_18CC4403C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_18CC44100()
{
  JUMPOUT(0x18CC44130);
}

void sub_18CC44108()
{
  uint64_t v0;

  if (*(char *)(v0 - 193) < 0)
    JUMPOUT(0x18CC44114);
  JUMPOUT(0x18CC44130);
}

void sub_18CC4411C()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    JUMPOUT(0x18CC4412CLL);
  JUMPOUT(0x18CC44130);
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withUpdateERKNSt3__16vec"
                     "torINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withUpdateERK"
                                "NSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withUpdateERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withUpdateERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v10 = (char *)operator new(v9);
    a1[2] = v10;
    a1[3] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[4] = v11;
    memcpy(v10, v8, v9);
    a1[3] = v11;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v15 = (char *)operator new(v12 - v13);
    a1[5] = v15;
    a1[6] = v15;
    v16 = &v15[32 * (v14 >> 5)];
    a1[7] = v16;
    memcpy(v15, v13, v14 - 4);
    a1[6] = v16;
  }
  return a1;
}

void sub_18CC442B0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v5 = *v2;
  if (*v2)
  {
    v1[6] = v5;
    operator delete(v5);
    v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      v7 = (std::__shared_weak_count *)v1[1];
      if (!v7)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[3] = v6;
  operator delete(v6);
  v7 = (std::__shared_weak_count *)v1[1];
  if (!v7)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

void AMSCore::StructuredData::TableDesc::keyColumns(AMSCore::StructuredData::TableDesc *this, __int128 *a2, uint64_t a3)
{
  __int128 *v3;
  char *v5;
  __int128 *v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a3)
  {
    v3 = a2;
    v5 = 0;
    v6 = (__int128 *)((char *)a2 + 24 * a3);
    do
    {
      if (!*((_DWORD *)v3 + 5))
      {
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v5 < v9)
        {
          v7 = *v3;
          *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
          *(_OWORD *)v5 = v7;
          v8 = v5 + 24;
        }
        else
        {
          v10 = *(char **)this;
          v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*(_QWORD *)this] >> 3);
          v12 = v11 + 1;
          if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v10) >> 3);
          if (2 * v13 > v12)
            v12 = 2 * v13;
          if (v13 >= 0x555555555555555)
            v14 = 0xAAAAAAAAAAAAAAALL;
          else
            v14 = v12;
          if (v14)
          {
            if (v14 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:fe180100]();
            v15 = (char *)operator new(24 * v14);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[24 * v11];
          *(_OWORD *)v16 = *v3;
          *((_QWORD *)v16 + 2) = *((_QWORD *)v3 + 2);
          v17 = v16;
          if (v5 != v10)
          {
            do
            {
              v18 = *(_OWORD *)(v5 - 24);
              *((_QWORD *)v17 - 1) = *((_QWORD *)v5 - 1);
              *(_OWORD *)(v17 - 24) = v18;
              v17 -= 24;
              v5 -= 24;
            }
            while (v5 != v10);
            v5 = *(char **)this;
          }
          v8 = v16 + 24;
          *(_QWORD *)this = v17;
          *((_QWORD *)this + 1) = v16 + 24;
          *((_QWORD *)this + 2) = &v15[24 * v14];
          if (v5)
            operator delete(v5);
        }
        *((_QWORD *)this + 1) = v8;
        v5 = v8;
      }
      v3 = (__int128 *)((char *)v3 + 24);
    }
    while (v3 != v6);
  }
}

void sub_18CC444C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E2521B80;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E2521B80;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

char *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E2521B80;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E2521B80;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  sqlite3 **v6;
  sqlite3_mutex *v7;
  std::runtime_error *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  unsigned int *v12;
  unsigned int *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  sqlite3_mutex *v17;
  uint64_t *v18;
  uint64_t *v19;
  sqlite3 **v20;
  std::runtime_error *v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::runtime_error *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::runtime_error v40;
  __int128 v41;
  unsigned int **v42;
  unsigned int *v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  std::runtime_error v47;
  __int128 v48;
  unsigned int **v49;
  unsigned int *v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  std::runtime_error v54;
  __int128 v55;
  unsigned int **v56;
  unsigned int *v57;
  uint64_t v58;
  __int128 v59;
  std::runtime_error v60;
  __int128 v61;
  pthread_t v62;
  unsigned int *v63;
  uint64_t v64;
  __int128 v65;
  char v66;
  std::runtime_error v67;
  __int128 v68;
  unsigned int **v69;
  unsigned int *v70;
  uint64_t v71;
  __int128 v72;
  unsigned __int8 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(sqlite3 ***)(v5 + 16);
  v7 = sqlite3_db_mutex(*v6);
  sqlite3_mutex_enter(v7);
  v40.__imp_.__imp_ = 0;
  *(_QWORD *)&v41 = 0;
  v40.__vftable = (std::runtime_error_vtbl *)&v40.__imp_;
  *((_QWORD *)&v61 + 1) = 0;
  AMSCore::SQLiteStatement::exec((uint64_t)&v67, v6 + 2, &v40, (uint64_t)&v60);
  v8 = (std::runtime_error *)*((_QWORD *)&v61 + 1);
  if (*((std::runtime_error **)&v61 + 1) == &v60)
  {
    v9 = 4;
    v8 = &v60;
  }
  else
  {
    if (!*((_QWORD *)&v61 + 1))
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))&v8->~runtime_error + v9))();
LABEL_6:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v40, (unsigned int *)v40.__imp_.__imp_);
  v10 = v73;
  if (v73)
  {
    v60.__vftable = (std::runtime_error_vtbl *)&off_1E2520840;
    v60.__imp_.__imp_ = (const char *)v6;
    *(_QWORD *)&v61 = v6;
    BYTE8(v61) = 1;
    v62 = pthread_self();
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E2520840;
    do
      v11 = (const char *)__ldaxr((unint64_t *)&v60.__imp_);
    while (__stlxr(0, (unint64_t *)&v60.__imp_));
    v47.__imp_.__imp_ = v11;
    *(_QWORD *)&v48 = v61;
    BYTE8(v48) = BYTE8(v61);
    *(_QWORD *)&v61 = 0;
    BYTE8(v61) = 0;
    v49 = (unsigned int **)v62;
    v53 = 1;
    AMSCore::SQLiteDatabase::Transaction::~Transaction((AMSCore::SQLiteDatabase::Transaction *)&v60);
    v6 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v60, &v67);
    v61 = v68;
    v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v62 = (pthread_t)v69;
    v63 = v70;
    v64 = v71;
    if (v71)
    {
      *((_QWORD *)v70 + 2) = &v63;
      v69 = &v70;
      v70 = 0;
      v71 = 0;
    }
    else
    {
      v62 = (pthread_t)&v63;
    }
    v65 = v72;
    v72 = 0uLL;
    v66 = 1;
    std::runtime_error::runtime_error(&v40, &v60);
    v41 = v61;
    v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v42 = (unsigned int **)v62;
    v43 = v63;
    v44 = v64;
    if (v64)
    {
      *((_QWORD *)v63 + 2) = &v43;
      v62 = (pthread_t)&v63;
      v63 = 0;
      v64 = 0;
    }
    else
    {
      v42 = &v43;
    }
    v45 = v65;
    v65 = 0uLL;
    std::runtime_error::runtime_error(&v54, &v40);
    v55 = v41;
    v54.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v12 = v43;
    v56 = v42;
    v57 = v43;
    v58 = v44;
    if (v44)
    {
      *((_QWORD *)v43 + 2) = &v57;
      v12 = 0;
      v42 = &v43;
      v43 = 0;
      v44 = 0;
    }
    else
    {
      v56 = &v57;
    }
    v59 = v45;
    v45 = 0uLL;
    v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v12);
    MEMORY[0x18D7898AC](&v40);
    std::runtime_error::runtime_error(&v47, &v54);
    v48 = v55;
    v47.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = v57;
    v49 = v56;
    v50 = v57;
    v51 = v58;
    if (v58)
    {
      *((_QWORD *)v57 + 2) = &v50;
      v13 = 0;
      v56 = &v57;
      v57 = 0;
      v58 = 0;
    }
    else
    {
      v49 = &v50;
    }
    v52 = v59;
    v59 = 0uLL;
    v53 = 0;
    v54.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v56, v13);
    MEMORY[0x18D7898AC](&v54);
    if (v66)
    {
      v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      if (*((_QWORD *)&v65 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, v63);
      MEMORY[0x18D7898AC](&v60);
    }
  }
  if (v73)
  {
    if (v10)
      goto LABEL_34;
  }
  else
  {
    ((void (*)(std::runtime_error *))v67.~runtime_error)(&v67);
    if (v10)
      goto LABEL_34;
  }
  v17 = sqlite3_db_mutex(*v6);
  sqlite3_mutex_leave(v17);
LABEL_34:
  if (v53)
  {
    v19 = *a2;
    v18 = a2[1];
    if (*a2 == v18)
    {
LABEL_80:
      AMSCore::SQLiteDatabase::Transaction::commit((AMSCore::SQLiteDatabase::Transaction *)&v47, a3);
      goto LABEL_96;
    }
    while (1)
    {
      AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::span<AMSCore::StructuredData::ColumnDesc const,18446744073709551615ul>,std::vector<AMSCore::Any>>((uint64_t)&v40, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 16), *(_QWORD *)(*(_QWORD *)(v5 + 8) + 24), *v19, v19[1]);
      if (v46)
      {
        LOBYTE(v60.__vftable) = 0;
        v66 = 0;
      }
      else
      {
        std::runtime_error::runtime_error(&v67, &v40);
        v68 = v41;
        v67.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v69 = v42;
        v70 = v43;
        v71 = v44;
        if (v44)
        {
          *((_QWORD *)v43 + 2) = &v70;
          v42 = &v43;
          v43 = 0;
          v44 = 0;
        }
        else
        {
          v69 = &v70;
        }
        v72 = v45;
        v45 = 0uLL;
        v73 = 0;
        std::runtime_error::runtime_error(&v60, &v67);
        v61 = v68;
        v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v62 = (pthread_t)v69;
        v63 = v70;
        v64 = v71;
        if (v71)
        {
          *((_QWORD *)v70 + 2) = &v63;
          v69 = &v70;
          v70 = 0;
          v71 = 0;
        }
        else
        {
          v62 = (pthread_t)&v63;
        }
        v65 = v72;
        v72 = 0uLL;
        v66 = 1;
        if (!v73)
          ((void (*)(AMSCore::Error *))v67.~runtime_error)((AMSCore::Error *)&v67);
        if (!v46)
        {
          ((void (*)(std::runtime_error *))v40.~runtime_error)(&v40);
          if (v66)
            goto LABEL_77;
          goto LABEL_49;
        }
      }
      if (v66)
      {
LABEL_77:
        std::runtime_error::runtime_error(&v67, &v60);
        v68 = v61;
        v67.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v69 = (unsigned int **)v62;
        v70 = v63;
        v71 = v64;
        if (v64)
        {
          *((_QWORD *)v63 + 2) = &v70;
          v62 = (pthread_t)&v63;
          v63 = 0;
          v64 = 0;
        }
        else
        {
          v69 = &v70;
        }
        v72 = v65;
        v65 = 0uLL;
        std::runtime_error::runtime_error(&v40, &v67);
        v41 = v68;
        v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v32 = v70;
        v42 = v69;
        v43 = v70;
        v44 = v71;
        if (v71)
        {
          *((_QWORD *)v70 + 2) = &v43;
          v32 = 0;
          v69 = &v70;
          v70 = 0;
          v71 = 0;
        }
        else
        {
          v42 = &v43;
        }
        v45 = v72;
        v72 = 0uLL;
        v67.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v69, v32);
        MEMORY[0x18D7898AC](&v67);
        std::runtime_error::runtime_error((std::runtime_error *)a3, &v40);
        *(_OWORD *)(a3 + 16) = v41;
        *(_QWORD *)a3 = off_1E2521330;
        v33 = v43;
        *(_QWORD *)(a3 + 32) = v42;
        *(_QWORD *)(a3 + 40) = v33;
        v34 = a3 + 40;
        v35 = v44;
        *(_QWORD *)(a3 + 48) = v44;
        if (v35)
        {
          *((_QWORD *)v33 + 2) = v34;
          v33 = 0;
          v42 = &v43;
          v43 = 0;
          v44 = 0;
        }
        else
        {
          *(_QWORD *)(a3 + 32) = v34;
        }
        *(_OWORD *)(a3 + 56) = v45;
        v45 = 0uLL;
        *(_BYTE *)(a3 + 72) = 0;
        v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v33);
        MEMORY[0x18D7898AC](&v40);
        if (!v66)
          goto LABEL_96;
        v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v36 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (*((_QWORD *)&v65 + 1))
        {
          v37 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, v63);
        v31 = &v60;
LABEL_95:
        MEMORY[0x18D7898AC](v31);
        goto LABEL_96;
      }
LABEL_49:
      v20 = *(sqlite3 ***)(a1 + 16);
      *((_QWORD *)&v68 + 1) = 0;
      AMSCore::SQLiteStatement::exec(a3, v20, &v60, (uint64_t)&v67);
      v21 = (std::runtime_error *)*((_QWORD *)&v68 + 1);
      if (*((std::runtime_error **)&v68 + 1) == &v67)
      {
        v21 = &v67;
        v22 = 4;
        goto LABEL_53;
      }
      if (*((_QWORD *)&v68 + 1))
      {
        v22 = 5;
LABEL_53:
        (*((void (**)(void))&v21->~runtime_error + v22))();
      }
      v23 = *(unsigned __int8 *)(a3 + 72);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v60, (unsigned int *)v60.__imp_.__imp_);
      if (!v23)
        goto LABEL_96;
      v19 += 3;
      if (v19 == v18)
      {
        if (!v53)
          __break(1u);
        goto LABEL_80;
      }
    }
  }
  std::runtime_error::runtime_error(&v67, &v47);
  v68 = v48;
  v67.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v69 = v49;
  v70 = v50;
  v71 = v51;
  if (v51)
  {
    *((_QWORD *)v50 + 2) = &v70;
    v49 = &v50;
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v69 = &v70;
  }
  v72 = v52;
  v52 = 0uLL;
  v73 = 1;
  std::runtime_error::runtime_error(&v60, &v67);
  v61 = v68;
  v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v62 = (pthread_t)v69;
  v63 = v70;
  v64 = v71;
  if (v71)
  {
    *((_QWORD *)v70 + 2) = &v63;
    v69 = &v70;
    v70 = 0;
    v71 = 0;
  }
  else
  {
    v62 = (pthread_t)&v63;
  }
  v65 = v72;
  v72 = 0uLL;
  std::runtime_error::runtime_error(&v40, &v60);
  v41 = v61;
  v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v24 = v63;
  v42 = (unsigned int **)v62;
  v43 = v63;
  v44 = v64;
  if (v64)
  {
    *((_QWORD *)v63 + 2) = &v43;
    v24 = 0;
    v62 = (pthread_t)&v63;
    v63 = 0;
    v64 = 0;
  }
  else
  {
    v42 = &v43;
  }
  v45 = v65;
  v65 = 0uLL;
  v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, v24);
  MEMORY[0x18D7898AC](&v60);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v40);
  *(_OWORD *)(a3 + 16) = v41;
  *(_QWORD *)a3 = off_1E2521330;
  v25 = v43;
  *(_QWORD *)(a3 + 32) = v42;
  *(_QWORD *)(a3 + 40) = v25;
  v26 = a3 + 40;
  v27 = v44;
  *(_QWORD *)(a3 + 48) = v44;
  if (v27)
  {
    *((_QWORD *)v25 + 2) = v26;
    v25 = 0;
    v42 = &v43;
    v43 = 0;
    v44 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = v26;
  }
  *(_OWORD *)(a3 + 56) = v45;
  v45 = 0uLL;
  *(_BYTE *)(a3 + 72) = 0;
  v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v25);
  MEMORY[0x18D7898AC](&v40);
  if (v73)
  {
    v67.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v69, v70);
    v31 = &v67;
    goto LABEL_95;
  }
LABEL_96:
  if (!v53)
    ((void (*)(AMSCore::Error *))v47.~runtime_error)((AMSCore::Error *)&v47);
  AMSCore::SQLiteDatabase::Transaction::~Transaction((AMSCore::SQLiteDatabase::Transaction *)&v47);
}

void sub_18CC452A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder18withMultipleInsertEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder18withMultipleInsertEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder18withMultipleInsertEvE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder18withMultipleInsertEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::target_type()
{
}

uint64_t AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::span<AMSCore::StructuredData::ColumnDesc const,18446744073709551615ul>,std::vector<AMSCore::Any>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::runtime_error v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = result;
  if (a3 == (a5 - a4) >> 5)
  {
    if (!a3 || a4 == a5)
    {
LABEL_14:
      *(_BYTE *)(result + 72) = 1;
      return result;
    }
    v6 = 24 * a3 - 24;
    v7 = (_DWORD *)(a2 + 20);
    v8 = a4 + 32;
    while (1)
    {
      if (*v7 != 2)
      {
        v9 = *(_DWORD *)(v8 - 8);
        if (v9 == -1)
          v10 = 0;
        else
          v10 = *(_DWORD *)(v8 - 8);
        if (*(v7 - 1) != v10)
          goto LABEL_15;
        if ((v9 + 1) <= 1)
          break;
      }
      if (v6)
      {
        v6 -= 24;
        v7 += 6;
        v11 = v8 == a5;
        v8 += 32;
        if (!v11)
          continue;
      }
      goto LABEL_14;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[41]>((uint64_t)&v15, 3u);
  }
  else
  {
LABEL_15:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40]>((uint64_t)&v15, 3u);
  }
  std::runtime_error::runtime_error((std::runtime_error *)v5, &v15);
  *(_OWORD *)(v5 + 16) = v16;
  *(_QWORD *)v5 = off_1E2521330;
  v12 = v18;
  *(_QWORD *)(v5 + 32) = v17;
  *(_QWORD *)(v5 + 40) = v12;
  v13 = v5 + 40;
  v14 = v19;
  *(_QWORD *)(v5 + 48) = v19;
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = v13;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 32) = v13;
  }
  *(_OWORD *)(v5 + 56) = v20;
  v20 = 0uLL;
  *(_BYTE *)(v5 + 72) = 0;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v12);
  return MEMORY[0x18D7898AC](&v15);
}

void AMSCore::StructuredData::`anonymous namespace'::buildBindings<std::span<AMSCore::StructuredData::ColumnDesc const,18446744073709551615ul>>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  size_t v13;
  _BYTE *v14;
  unint64_t v15;
  size_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string::size_type size;
  std::string *v27;
  std::string::size_type v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  std::string v35;
  _BYTE v36[24];
  std::string v37;

  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  v3 = *a3;
  if (a2[1])
    v4 = v3 == a3[1];
  else
    v4 = 1;
  if (!v4)
  {
    v6 = a1;
    v7 = 0;
    v8 = *a2;
    v9 = v3 + 32;
    while (1)
    {
      std::to_string(&v35, v7);
      v10 = std::string::insert(&v35, 0, ":", 1uLL);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      *(_QWORD *)&v36[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
      *(_OWORD *)v36 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = v36[23];
      if (v36[23] >= 0)
        v13 = 22;
      else
        v13 = (*(_QWORD *)&v36[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v36[23] < 0)
        v12 = *(_QWORD *)&v36[8];
      if (v13 == v12)
        break;
      v17 = v36;
      if (v36[23] < 0)
        v17 = *(_BYTE **)v36;
      v17[v12] = 95;
      v18 = v12 + 1;
      if ((v36[23] & 0x80000000) != 0)
        *(_QWORD *)&v36[8] = v18;
      else
        v36[23] = v18 & 0x7F;
      v17[v18] = 0;
      v20 = *(_QWORD *)v36;
      v21 = v36[23];
LABEL_38:
      v37.__r_.__value_.__l.__size_ = *(_QWORD *)&v36[8];
      *(std::string::size_type *)((char *)&v37.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v36[15];
      memset(v36, 0, sizeof(v36));
      v37.__r_.__value_.__r.__words[0] = v20;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = v21;
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        v21 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      v24 = *(_QWORD *)(v8 + 8);
      if ((v21 & 0x80u) == 0)
        v25 = 22;
      else
        v25 = (v37.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v21 & 0x80u) == 0)
        size = v21;
      else
        size = v37.__r_.__value_.__l.__size_;
      if (v25 - size >= v24)
      {
        if (v24)
        {
          if ((v21 & 0x80u) == 0)
            v27 = &v37;
          else
            v27 = (std::string *)v37.__r_.__value_.__r.__words[0];
          memmove((char *)v27 + size, *(const void **)v8, *(_QWORD *)(v8 + 8));
          v28 = size + v24;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            v37.__r_.__value_.__l.__size_ = size + v24;
          else
            *((_BYTE *)&v37.__r_.__value_.__s + 23) = v28 & 0x7F;
          v27->__r_.__value_.__s.__data_[v28] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v37, v25, size + v24 - v25, size, size, 0, *(_QWORD *)(v8 + 8), *(const std::string::value_type **)v8);
      }
      v29 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&v37);
      v30 = v29;
      v31 = *((unsigned int *)v29 + 20);
      v32 = *(unsigned int *)(v9 - 8);
      if ((_DWORD)v31 == -1)
      {
        if ((_DWORD)v32 != -1)
        {
LABEL_60:
          *(_QWORD *)v36 = v29 + 56;
          ((void (*)(_BYTE *))off_1E253D0D8[v32])(v36);
        }
      }
      else
      {
        if ((_DWORD)v32 != -1)
          goto LABEL_60;
        ((void (*)(_BYTE *, char *))off_1E253D240[v31])(v36, v29 + 56);
        *((_DWORD *)v30 + 20) = -1;
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v8 += 24;
      if (v8 != *a2 + 24 * a2[1])
      {
        ++v7;
        v4 = v9 == a3[1];
        v9 += 32;
        if (!v4)
          continue;
      }
      return;
    }
    if (v13 == 0x7FFFFFFFFFFFFFF6)
      std::string::__throw_length_error[abi:fe180100]();
    if (v36[23] >= 0)
      v14 = v36;
    else
      v14 = *(_BYTE **)v36;
    if (v13 > 0x3FFFFFFFFFFFFFF2)
    {
      v19 = 0x7FFFFFFFFFFFFFF6;
    }
    else
    {
      if (v13 + 1 > 2 * v13)
        v15 = v13 + 1;
      else
        v15 = 2 * v13;
      if (v15 < 0x17)
      {
        v16 = 23;
        goto LABEL_32;
      }
      v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      v19 = v15 | 7;
      if (v19 == 23)
        v19 = v22;
    }
    v16 = v19 + 1;
LABEL_32:
    v23 = operator new(v16);
    v20 = (std::string::size_type)v23;
    if (v13)
    {
      memmove(v23, v14, v13);
      *(_BYTE *)(v20 + v13) = 95;
      if (v13 == 22)
        goto LABEL_37;
    }
    else
    {
      *v23 = 95;
    }
    operator delete(v14);
LABEL_37:
    *(_QWORD *)v36 = v20;
    *(_QWORD *)&v36[8] = v13 + 1;
    *(_QWORD *)&v36[16] = v16 | 0x8000000000000000;
    *(_BYTE *)(v20 + v13 + 1) = 0;
    v21 = (v16 | 0x8000000000000000) >> 56;
    v6 = a1;
    goto LABEL_38;
  }
}

void sub_18CC45848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (v29 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a9, *(unsigned int **)(a9 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E25219C8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E25219C8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

char *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E25219C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E25219C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  sqlite3 **v14;
  std::runtime_error v15;
  __int128 v16;
  unsigned int **v17;
  unsigned int *v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  std::runtime_error v22;
  __int128 v23;
  unsigned int **v24;
  unsigned int *v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  std::runtime_error v29;
  __int128 v30;
  unsigned int **v31;
  unsigned int *v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::span<AMSCore::StructuredData::ColumnDesc const,18446744073709551615ul>,std::vector<AMSCore::Any>>((uint64_t)&v15, *(_QWORD *)(*(_QWORD *)(v6 + 8) + 16), *(_QWORD *)(*(_QWORD *)(v6 + 8) + 24), *a2, a2[1]);
  if (v21)
  {
    LOBYTE(v22.__vftable) = 0;
    v28 = 0;
    goto LABEL_11;
  }
  std::runtime_error::runtime_error(&v29, &v15);
  v30 = v16;
  v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v31 = v17;
  v32 = v18;
  v33 = v19;
  if (v19)
  {
    *((_QWORD *)v18 + 2) = &v32;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v31 = &v32;
  }
  v34 = v20;
  v20 = 0uLL;
  v35 = 0;
  std::runtime_error::runtime_error(&v22, &v29);
  v23 = v30;
  v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v24 = v31;
  v25 = v32;
  v26 = v33;
  if (v33)
  {
    *((_QWORD *)v32 + 2) = &v25;
    v31 = &v32;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v24 = &v25;
  }
  v27 = v34;
  v34 = 0uLL;
  v28 = 1;
  if (!v35)
    ((void (*)(AMSCore::Error *))v29.~runtime_error)((AMSCore::Error *)&v29);
  if (v21)
  {
LABEL_11:
    if (v28)
      goto LABEL_12;
LABEL_30:
    v14 = *(sqlite3 ***)(a1 + 16);
    *((_QWORD *)&v30 + 1) = 0;
    AMSCore::SQLiteStatement::exec(a3, v14, &v22, (uint64_t)&v29);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v22.__imp_.__imp_);
    return;
  }
  ((void (*)(std::runtime_error *))v15.~runtime_error)(&v15);
  if (!v28)
    goto LABEL_30;
LABEL_12:
  std::runtime_error::runtime_error(&v29, &v22);
  v30 = v23;
  v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v31 = v24;
  v32 = v25;
  v33 = v26;
  if (v26)
  {
    *((_QWORD *)v25 + 2) = &v32;
    v24 = &v25;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v31 = &v32;
  }
  v34 = v27;
  v27 = 0uLL;
  std::runtime_error::runtime_error(&v15, &v29);
  v16 = v30;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v7 = v32;
  v17 = v31;
  v18 = v32;
  v19 = v33;
  if (v33)
  {
    *((_QWORD *)v32 + 2) = &v18;
    v7 = 0;
    v31 = &v32;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v17 = &v18;
  }
  v20 = v34;
  v34 = 0uLL;
  v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, v7);
  MEMORY[0x18D7898AC](&v29);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v15);
  *(_OWORD *)(a3 + 16) = v16;
  *(_QWORD *)a3 = off_1E2521330;
  v8 = v18;
  *(_QWORD *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = v8;
  v9 = a3 + 40;
  v10 = v19;
  *(_QWORD *)(a3 + 48) = v19;
  if (v10)
  {
    *((_QWORD *)v8 + 2) = v9;
    v8 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = v9;
  }
  *(_OWORD *)(a3 + 56) = v20;
  v20 = 0uLL;
  *(_BYTE *)(a3 + 72) = 0;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v8);
  MEMORY[0x18D7898AC](&v15);
  if (v28)
  {
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v25);
    MEMORY[0x18D7898AC](&v22);
  }
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withInsertEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withInsertEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withInsertEvE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withInsertEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::target_type()
{
}

_QWORD *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E2521AD0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E2521AD0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

char *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E2521AD0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E2521AD0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  sqlite3 **v14;
  std::runtime_error v15;
  __int128 v16;
  unsigned int **v17;
  unsigned int *v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  std::runtime_error v22;
  __int128 v23;
  unsigned int **v24;
  unsigned int *v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  std::runtime_error v29;
  __int128 v30;
  unsigned int **v31;
  unsigned int *v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::span<AMSCore::StructuredData::ColumnDesc const,18446744073709551615ul>,std::vector<AMSCore::Any>>((uint64_t)&v15, *(_QWORD *)(*(_QWORD *)(v6 + 8) + 16), *(_QWORD *)(*(_QWORD *)(v6 + 8) + 24), *a2, a2[1]);
  if (v21)
  {
    LOBYTE(v22.__vftable) = 0;
    v28 = 0;
    goto LABEL_11;
  }
  std::runtime_error::runtime_error(&v29, &v15);
  v30 = v16;
  v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v31 = v17;
  v32 = v18;
  v33 = v19;
  if (v19)
  {
    *((_QWORD *)v18 + 2) = &v32;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v31 = &v32;
  }
  v34 = v20;
  v20 = 0uLL;
  v35 = 0;
  std::runtime_error::runtime_error(&v22, &v29);
  v23 = v30;
  v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v24 = v31;
  v25 = v32;
  v26 = v33;
  if (v33)
  {
    *((_QWORD *)v32 + 2) = &v25;
    v31 = &v32;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v24 = &v25;
  }
  v27 = v34;
  v34 = 0uLL;
  v28 = 1;
  if (!v35)
    ((void (*)(AMSCore::Error *))v29.~runtime_error)((AMSCore::Error *)&v29);
  if (v21)
  {
LABEL_11:
    if (v28)
      goto LABEL_12;
LABEL_30:
    v14 = *(sqlite3 ***)(a1 + 16);
    *((_QWORD *)&v30 + 1) = 0;
    AMSCore::SQLiteStatement::exec(a3, v14, &v22, (uint64_t)&v29);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v22.__imp_.__imp_);
    return;
  }
  ((void (*)(std::runtime_error *))v15.~runtime_error)(&v15);
  if (!v28)
    goto LABEL_30;
LABEL_12:
  std::runtime_error::runtime_error(&v29, &v22);
  v30 = v23;
  v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v31 = v24;
  v32 = v25;
  v33 = v26;
  if (v26)
  {
    *((_QWORD *)v25 + 2) = &v32;
    v24 = &v25;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v31 = &v32;
  }
  v34 = v27;
  v27 = 0uLL;
  std::runtime_error::runtime_error(&v15, &v29);
  v16 = v30;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v7 = v32;
  v17 = v31;
  v18 = v32;
  v19 = v33;
  if (v33)
  {
    *((_QWORD *)v32 + 2) = &v18;
    v7 = 0;
    v31 = &v32;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v17 = &v18;
  }
  v20 = v34;
  v34 = 0uLL;
  v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, v7);
  MEMORY[0x18D7898AC](&v29);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v15);
  *(_OWORD *)(a3 + 16) = v16;
  *(_QWORD *)a3 = off_1E2521330;
  v8 = v18;
  *(_QWORD *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = v8;
  v9 = a3 + 40;
  v10 = v19;
  *(_QWORD *)(a3 + 48) = v19;
  if (v10)
  {
    *((_QWORD *)v8 + 2) = v9;
    v8 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = v9;
  }
  *(_OWORD *)(a3 + 56) = v20;
  v20 = 0uLL;
  *(_BYTE *)(a3 + 72) = 0;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v8);
  MEMORY[0x18D7898AC](&v15);
  if (v28)
  {
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v25);
    MEMORY[0x18D7898AC](&v22);
  }
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder11withReplaceEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder11withReplaceEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder11withReplaceEvE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder11withReplaceEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::target_type()
{
}

void AMSCore::StructuredData::SQLiteStructuredDataProvider::~SQLiteStructuredDataProvider(AMSCore::StructuredData::SQLiteStructuredDataProvider *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E25208D0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E25208D0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::StructuredData::SQLiteStructuredDataProvider::beginImmediateTransaction(AMSCore::StructuredData::SQLiteStructuredDataProvider *this@<X0>, uint64_t a2@<X8>)
{
  sqlite3 **v3;
  sqlite3_mutex *v4;
  std::runtime_error *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  unsigned int *v9;
  unsigned int *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  sqlite3_mutex *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error v25;
  __int128 v26;
  unsigned int **v27;
  unsigned int *v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  std::runtime_error v32;
  __int128 v33;
  unsigned int **v34;
  unsigned int *v35;
  uint64_t v36;
  __int128 v37;
  std::runtime_error v38;
  __int128 v39;
  unsigned int **v40;
  unsigned int *v41;
  uint64_t v42;
  __int128 v43;
  unsigned __int8 v44;
  std::runtime_error v45;
  __int128 v46;
  unsigned int **v47;
  unsigned int *v48;
  uint64_t v49;
  __int128 v50;
  std::runtime_error v51;
  __int128 v52;
  pthread_t v53;
  unsigned int *v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = (sqlite3 **)*((_QWORD *)this + 1);
  v4 = sqlite3_db_mutex(*v3);
  sqlite3_mutex_enter(v4);
  v45.__imp_.__imp_ = 0;
  *(_QWORD *)&v46 = 0;
  v45.__vftable = (std::runtime_error_vtbl *)&v45.__imp_;
  *((_QWORD *)&v52 + 1) = 0;
  AMSCore::SQLiteStatement::exec((uint64_t)&v38, v3 + 9, &v45, (uint64_t)&v51);
  v5 = (std::runtime_error *)*((_QWORD *)&v52 + 1);
  if (*((std::runtime_error **)&v52 + 1) == &v51)
  {
    v6 = 4;
    v5 = &v51;
  }
  else
  {
    if (!*((_QWORD *)&v52 + 1))
      goto LABEL_6;
    v6 = 5;
  }
  (*((void (**)(void))&v5->~runtime_error + v6))();
LABEL_6:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v45, (unsigned int *)v45.__imp_.__imp_);
  v7 = v44;
  if (v44)
  {
    v51.__vftable = (std::runtime_error_vtbl *)&off_1E2520840;
    v51.__imp_.__imp_ = (const char *)v3;
    *(_QWORD *)&v52 = v3;
    BYTE8(v52) = 1;
    v53 = pthread_self();
    v25.__vftable = (std::runtime_error_vtbl *)&off_1E2520840;
    do
      v8 = (const char *)__ldaxr((unint64_t *)&v51.__imp_);
    while (__stlxr(0, (unint64_t *)&v51.__imp_));
    v25.__imp_.__imp_ = v8;
    *(_QWORD *)&v26 = v52;
    BYTE8(v26) = BYTE8(v52);
    *(_QWORD *)&v52 = 0;
    BYTE8(v52) = 0;
    v27 = (unsigned int **)v53;
    v31 = 1;
    AMSCore::SQLiteDatabase::Transaction::~Transaction((AMSCore::SQLiteDatabase::Transaction *)&v51);
    v3 = 0;
    if (v44)
      goto LABEL_10;
LABEL_32:
    ((void (*)(std::runtime_error *))v38.~runtime_error)(&v38);
    if (v7)
      goto LABEL_34;
    goto LABEL_33;
  }
  std::runtime_error::runtime_error(&v51, &v38);
  v52 = v39;
  v51.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v53 = (pthread_t)v40;
  v54 = v41;
  v55 = v42;
  if (v42)
  {
    *((_QWORD *)v41 + 2) = &v54;
    v40 = &v41;
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v53 = (pthread_t)&v54;
  }
  v56 = v43;
  v43 = 0uLL;
  v57 = 1;
  std::runtime_error::runtime_error(&v45, &v51);
  v46 = v52;
  v45.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v47 = (unsigned int **)v53;
  v48 = v54;
  v49 = v55;
  if (v55)
  {
    *((_QWORD *)v54 + 2) = &v48;
    v53 = (pthread_t)&v54;
    v54 = 0;
    v55 = 0;
  }
  else
  {
    v47 = &v48;
  }
  v50 = v56;
  v56 = 0uLL;
  std::runtime_error::runtime_error(&v32, &v45);
  v33 = v46;
  v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v9 = v48;
  v34 = v47;
  v35 = v48;
  v36 = v49;
  if (v49)
  {
    *((_QWORD *)v48 + 2) = &v35;
    v9 = 0;
    v47 = &v48;
    v48 = 0;
    v49 = 0;
  }
  else
  {
    v34 = &v35;
  }
  v37 = v50;
  v50 = 0uLL;
  v45.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v47, v9);
  MEMORY[0x18D7898AC](&v45);
  std::runtime_error::runtime_error(&v25, &v32);
  v26 = v33;
  v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v10 = v35;
  v27 = v34;
  v28 = v35;
  v29 = v36;
  if (v36)
  {
    *((_QWORD *)v35 + 2) = &v28;
    v10 = 0;
    v34 = &v35;
    v35 = 0;
    v36 = 0;
  }
  else
  {
    v27 = &v28;
  }
  v30 = v37;
  v37 = 0uLL;
  v31 = 0;
  v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v10);
  MEMORY[0x18D7898AC](&v32);
  if (v57)
  {
    v51.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    if (*((_QWORD *)&v56 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v53, v54);
    MEMORY[0x18D7898AC](&v51);
  }
  if (!v44)
    goto LABEL_32;
LABEL_10:
  if (v7)
    goto LABEL_34;
LABEL_33:
  v14 = sqlite3_db_mutex(*v3);
  sqlite3_mutex_leave(v14);
LABEL_34:
  if (v31)
  {
    v15 = operator new();
    *(_QWORD *)v15 = &off_1E2520840;
    do
      v16 = __ldaxr((unint64_t *)&v25.__imp_);
    while (__stlxr(0, (unint64_t *)&v25.__imp_));
    v17 = v26;
    *(_QWORD *)(v15 + 8) = v16;
    *(_QWORD *)(v15 + 16) = v17;
    *(_BYTE *)(v15 + 24) = BYTE8(v26);
    *(_QWORD *)&v26 = 0;
    BYTE8(v26) = 0;
    *(_QWORD *)(v15 + 32) = v27;
    *(_QWORD *)a2 = v15;
    *(_BYTE *)(a2 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v38, &v25);
    v39 = v26;
    v38.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v40 = v27;
    v41 = v28;
    v42 = v29;
    if (v29)
    {
      *((_QWORD *)v28 + 2) = &v41;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v40 = &v41;
    }
    v43 = v30;
    v30 = 0uLL;
    v44 = 1;
    std::runtime_error::runtime_error(&v51, &v38);
    v52 = v39;
    v51.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v53 = (pthread_t)v40;
    v54 = v41;
    v55 = v42;
    if (v42)
    {
      *((_QWORD *)v41 + 2) = &v54;
      v40 = &v41;
      v41 = 0;
      v42 = 0;
    }
    else
    {
      v53 = (pthread_t)&v54;
    }
    v56 = v43;
    v43 = 0uLL;
    std::runtime_error::runtime_error(&v45, &v51);
    v46 = v52;
    v18 = v54;
    v45.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v47 = (unsigned int **)v53;
    v48 = v54;
    v49 = v55;
    if (v55)
    {
      *((_QWORD *)v54 + 2) = &v48;
      v18 = 0;
      v53 = (pthread_t)&v54;
      v54 = 0;
      v55 = 0;
    }
    else
    {
      v47 = &v48;
    }
    v50 = v56;
    v56 = 0uLL;
    v51.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v53, v18);
    MEMORY[0x18D7898AC](&v51);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v45);
    *(_OWORD *)(a2 + 16) = v46;
    *(_QWORD *)a2 = off_1E2521330;
    v19 = v48;
    *(_QWORD *)(a2 + 32) = v47;
    *(_QWORD *)(a2 + 40) = v19;
    v20 = a2 + 40;
    v21 = v49;
    *(_QWORD *)(a2 + 48) = v49;
    if (v21)
    {
      *((_QWORD *)v19 + 2) = v20;
      v19 = 0;
      v47 = &v48;
      v48 = 0;
      v49 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v20;
    }
    *(_OWORD *)(a2 + 56) = v50;
    v50 = 0uLL;
    *(_BYTE *)(a2 + 72) = 0;
    v45.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v47, v19);
    MEMORY[0x18D7898AC](&v45);
    if (v44)
    {
      v38.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v40, v41);
      MEMORY[0x18D7898AC](&v38);
    }
  }
  if (!v31)
    ((void (*)(AMSCore::Error *))v25.~runtime_error)((AMSCore::Error *)&v25);
  AMSCore::SQLiteDatabase::Transaction::~Transaction((AMSCore::SQLiteDatabase::Transaction *)&v25);
}

void sub_18CC46CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**a9)(_QWORD), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a18)
  {
    (*a9)(&a9);
    _Unwind_Resume(a1);
  }
  AMSCore::SQLiteDatabase::Transaction::~Transaction((AMSCore::SQLiteDatabase::Transaction *)&a9);
  _Unwind_Resume(a1);
}

void sub_18CC46CE0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *AMSCore::StructuredData::SQLiteStructuredDataProvider::makeBuilder@<X0>(AMSCore::StructuredData::SQLiteStructuredDataProvider *this@<X0>, const AMSCore::StructuredData::TableDesc *a2@<X1>, uint64_t a3@<X8>)
{
  std::runtime_error_vtbl *v4;
  uint64_t v5;
  std::runtime_error_vtbl *v6;
  std::runtime_error_vtbl *v7;
  std::ios_base *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const char *imp;
  std::runtime_error_vtbl *v21;
  _QWORD *v22;
  size_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  std::runtime_error *v32;
  uint64_t v33;
  _QWORD *result;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned int *v39;
  std::runtime_error *v40;
  unsigned int *v41;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  sqlite3 **v49;
  std::runtime_error __p;
  std::runtime_error v51;
  unsigned int **v52;
  unsigned int *v53;
  std::runtime_error_vtbl *v54;
  __int128 v55;
  std::runtime_error v56;
  std::runtime_error v57;
  unsigned int **v58;
  uint64_t v59;
  std::runtime_error_vtbl *v60;
  __int128 v61;
  char v62;
  std::runtime_error v63;
  std::runtime_error v64;
  unsigned int **v65;
  unsigned int *v66;
  std::runtime_error_vtbl *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72[19];
  std::runtime_error v73;
  std::runtime_error v74;
  unsigned int **v75;
  unsigned int *v76;
  std::runtime_error_vtbl *v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v49 = (sqlite3 **)*((_QWORD *)this + 1);
  v4 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v72[0] = MEMORY[0x1E0DE4FE0] + 64;
  v63.__vftable = v6;
  *(std::runtime_error_vtbl **)((char *)&v63.__vftable + (unint64_t)v6[-1].~runtime_error) = v7;
  v8 = (std::ios_base *)((char *)&v63 + (unint64_t)v63.__vftable[-1].~runtime_error);
  std::ios_base::init(v8, &v63.__imp_);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v63.__vftable = v4 + 1;
  v72[0] = v5;
  std::streambuf::basic_streambuf();
  v63.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  v69 = 0u;
  v70 = 0u;
  v71 = 16;
  v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v63, (uint64_t)"CREATE TABLE IF NOT EXISTS \"", 28);
  v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"\" (\n", 4);
  if (*((_QWORD *)a2 + 3))
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *((_QWORD *)a2 + 2);
      v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v63, (uint64_t)" \"", 2);
      v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, *(_QWORD *)(v13 + v11), *(_QWORD *)(v13 + v11 + 8));
      v16 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)"\" ", 2);
      v17 = v13 + v11;
      v18 = 8 * *(int *)(v17 + 16) - 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, *(uint64_t *)((char *)off_1E253D128 + v18), *(_QWORD *)((char *)&unk_18CF57120 + v18));
      if (*(_DWORD *)(v17 + 20) != 2)
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v63, (uint64_t)" NOT NULL", 9);
      v19 = *((_QWORD *)a2 + 3);
      if (v12 != v19 - 1)
      {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v63, (uint64_t)", ", 2);
        v19 = *((_QWORD *)a2 + 3);
      }
      ++v12;
      v11 += 24;
    }
    while (v12 < v19);
  }
  else
  {
    v19 = 0;
  }
  AMSCore::StructuredData::TableDesc::keyColumns((AMSCore::StructuredData::TableDesc *)&v73, *((__int128 **)a2 + 2), v19);
  v21 = v73.__vftable;
  imp = v73.__imp_.__imp_;
  if (v73.__vftable != (std::runtime_error_vtbl *)v73.__imp_.__imp_)
  {
    v22 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v63, (uint64_t)", PRIMARY KEY (", 15);
    v23 = imp - (const char *)v21;
    v24 = 0xAAAAAAAAAAAAAAABLL * ((imp - (const char *)v21) >> 3);
    if (v24 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v25 = v22;
    v26 = (uint64_t *)operator new(v23);
    memcpy(v26, v21, v23);
    v27 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v27, (uint64_t)"\"", 1);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, *v26, v26[1]);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, (uint64_t)"\"", 1);
    if (v23 != 24)
    {
      v28 = &v26[3 * v24];
      v29 = v26 + 3;
      do
      {
        v30 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, (uint64_t)",", 1);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v30, (uint64_t)"\"", 1);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, *v29, v29[1]);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, (uint64_t)"\"", 1);
        v29 += 3;
      }
      while (v29 != v28);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, (uint64_t)")", 1);
    operator delete(v26);
  }
  if (v21)
    operator delete(v21);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v63, (uint64_t)")", 1);
  v31 = MEMORY[0x1E0DE4F60];
  std::stringbuf::str[abi:fe180100]((uint64_t)&v63.__imp_, (std::string *)&__p);
  v74.__imp_.__imp_ = 0;
  AMSCore::SQLiteDatabase::exec((uint64_t)&v56, v49, (uint64_t)&__p, &v73);
  v32 = (std::runtime_error *)v74.__imp_.__imp_;
  if ((std::runtime_error *)v74.__imp_.__imp_ == &v73)
  {
    v33 = 4;
    v32 = &v73;
  }
  else
  {
    if (!v74.__imp_.__imp_)
      goto LABEL_22;
    v33 = 5;
  }
  (*((void (**)(void))&v32->~runtime_error + v33))();
LABEL_22:
  if (SHIBYTE(v51.__vftable) < 0)
    operator delete(__p.__vftable);
  v63.__vftable = *(std::runtime_error_vtbl **)v31;
  *(std::runtime_error_vtbl **)((char *)&v63.__vftable + (unint64_t)v63.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v31 + 24);
  v63.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  if (SBYTE7(v70) < 0)
    operator delete((void *)v69);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v72);
  if (v62)
  {
    result = (_QWORD *)operator new();
    v36 = *((_QWORD *)this + 1);
    v35 = *((_QWORD *)this + 2);
    if (v35)
    {
      v37 = (unint64_t *)(v35 + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    *result = &off_1E2520868;
    result[1] = a2;
    result[2] = v36;
    result[3] = v35;
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v63, &v56);
    v64 = v57;
    v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v65 = v58;
    v66 = (unsigned int *)v59;
    v67 = v60;
    if (v60)
    {
      *(_QWORD *)(v59 + 16) = &v66;
      v58 = (unsigned int **)&v59;
      v59 = 0;
      v60 = 0;
    }
    else
    {
      v65 = &v66;
    }
    v68 = v61;
    v61 = 0uLL;
    LOBYTE(v69) = 1;
    std::runtime_error::runtime_error(&v73, &v63);
    v74 = v64;
    v73.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v75 = v65;
    v76 = v66;
    v77 = v67;
    if (v67)
    {
      *((_QWORD *)v66 + 2) = &v76;
      v65 = &v66;
      v66 = 0;
      v67 = 0;
    }
    else
    {
      v75 = &v76;
    }
    v78 = v68;
    v68 = 0uLL;
    std::runtime_error::runtime_error(&__p, &v73);
    v51 = v74;
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v39 = v76;
    v52 = v75;
    v53 = v76;
    v54 = v77;
    if (v77)
    {
      *((_QWORD *)v76 + 2) = &v53;
      v39 = 0;
      v75 = &v76;
      v76 = 0;
      v77 = 0;
    }
    else
    {
      v52 = &v53;
    }
    v55 = v78;
    v78 = 0uLL;
    v73.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v75, v39);
    MEMORY[0x18D7898AC](&v73);
    v40 = std::runtime_error::runtime_error((std::runtime_error *)a3, &__p);
    v40[1] = v51;
    v40->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v41 = v53;
    v40[2].__vftable = (std::runtime_error_vtbl *)v52;
    v40[2].__imp_.__imp_ = (const char *)v41;
    p_imp = (std::runtime_error_vtbl *)&v40[2].__imp_;
    v43 = v54;
    v40[3].__vftable = v54;
    if (v43)
    {
      *((_QWORD *)v41 + 2) = p_imp;
      v41 = 0;
      v52 = &v53;
      v53 = 0;
      v54 = 0;
    }
    else
    {
      v40[2].__vftable = p_imp;
    }
    *(_OWORD *)&v40[3].__imp_.__imp_ = v55;
    v55 = 0uLL;
    LOBYTE(v40[4].__imp_.__imp_) = 0;
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v52, v41);
    result = (_QWORD *)MEMORY[0x18D7898AC](&__p);
    if ((_BYTE)v69)
    {
      v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
      if (*((_QWORD *)&v68 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v65, v66);
      result = (_QWORD *)MEMORY[0x18D7898AC](&v63);
    }
  }
  if (!v62)
    return (_QWORD *)((uint64_t (*)(std::runtime_error *))v56.~runtime_error)(&v56);
  return result;
}

void sub_18CC47400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  uint64_t v37;

  operator delete(v36);
  if (*(_QWORD *)(v37 - 168))
    operator delete(*(void **)(v37 - 168));
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMSCore::StructuredData::SQLiteStructuredDataProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25228F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::StructuredData::SQLiteStructuredDataProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25228F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::StructuredData::SQLiteStructuredDataProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMSCore::SQLiteDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25228C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::SQLiteDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25228C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::SQLiteDatabase>::__on_zero_shared(uint64_t a1)
{
  AMSCore::SQLiteDatabase::~SQLiteDatabase((AMSCore::SQLiteDatabase *)(a1 + 24));
}

std::runtime_error *AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::runtime_error *v6;
  uint64_t v7;
  std::runtime_error *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *result;
  uint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22;
  uint64_t v23;
  __int128 v24;
  std::runtime_error v25;
  __int128 v26;
  unsigned int **v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  std::runtime_error v32;
  __int128 v33;
  unsigned int **v34;
  unsigned int *v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  std::runtime_error v39;
  __int128 v40;
  unsigned int **v41;
  unsigned int *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  (*(void (**)(std::runtime_error *__return_ptr))(*(_QWORD *)a1 + 48))(&v25);
  if (!v31)
  {
    std::runtime_error::runtime_error(&v32, &v25);
    v33 = v26;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v34 = v27;
    v35 = (unsigned int *)v28;
    v36 = v29;
    if (v29)
    {
      *(_QWORD *)(v28 + 16) = &v35;
      v27 = (unsigned int **)&v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = v30;
    v30 = 0uLL;
    v38 = 1;
    std::runtime_error::runtime_error(&v39, &v32);
    v40 = v33;
    v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v41 = v34;
    v42 = v35;
    v43 = v36;
    if (v36)
    {
      *((_QWORD *)v35 + 2) = &v42;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v41 = &v42;
    }
    v44 = v37;
    v37 = 0uLL;
    std::runtime_error::runtime_error(&v19, &v39);
    v20 = v40;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v10 = v42;
    v21 = v41;
    v22 = v42;
    v23 = v43;
    if (v43)
    {
      *((_QWORD *)v42 + 2) = &v22;
      v10 = 0;
      v41 = &v42;
      v42 = 0;
      v43 = 0;
    }
    else
    {
      v21 = &v22;
    }
    v24 = v44;
    v44 = 0uLL;
    v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v41, v10);
    MEMORY[0x18D7898AC](&v39);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v19);
    *(_OWORD *)(a2 + 16) = v20;
    *(_QWORD *)a2 = off_1E2521330;
    v11 = v22;
    *(_QWORD *)(a2 + 32) = v21;
    *(_QWORD *)(a2 + 40) = v11;
    v12 = a2 + 40;
    v13 = v23;
    *(_QWORD *)(a2 + 48) = v23;
    if (v13)
    {
      *((_QWORD *)v11 + 2) = v12;
      v11 = 0;
      v21 = &v22;
      v22 = 0;
      v23 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v12;
    }
    *(_OWORD *)(a2 + 56) = v24;
    v24 = 0uLL;
    *(_BYTE *)(a2 + 72) = 0;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v11);
    MEMORY[0x18D7898AC](&v19);
    if (v38)
    {
      v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (*((_QWORD *)&v37 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v35);
      MEMORY[0x18D7898AC](&v32);
    }
    goto LABEL_46;
  }
  if (*((_QWORD *)&v26 + 1))
  {
    if (*((std::runtime_error **)&v26 + 1) == &v25)
    {
      *((_QWORD *)&v40 + 1) = &v39;
      ((void (*)(std::runtime_error *, std::runtime_error *))v25.__vftable[1].~runtime_error)(&v25, &v39);
    }
    else
    {
      *((_QWORD *)&v40 + 1) = *((_QWORD *)&v26 + 1);
      *((_QWORD *)&v26 + 1) = 0;
    }
  }
  else
  {
    *((_QWORD *)&v40 + 1) = 0;
  }
  if (*((_QWORD *)&v40 + 1))
  {
    if (*((std::runtime_error **)&v40 + 1) == &v39)
    {
      *((_QWORD *)&v33 + 1) = &v32;
      ((void (*)(std::runtime_error *, std::runtime_error *))v39.__vftable[1].~runtime_error)(&v39, &v32);
    }
    else
    {
      *((_QWORD *)&v33 + 1) = *((_QWORD *)&v40 + 1);
      *((_QWORD *)&v40 + 1) = 0;
    }
  }
  else
  {
    *((_QWORD *)&v33 + 1) = 0;
  }
  *(_QWORD *)(a2 + 24) = 0;
  v3 = operator new(0x28uLL);
  v4 = v3;
  *v3 = &off_1E2521918;
  v5 = v3 + 1;
  if (*((_QWORD *)&v33 + 1))
  {
    if (*((std::runtime_error **)&v33 + 1) == &v32)
    {
      v3[4] = v5;
      ((void (*)(std::runtime_error *))v32.__vftable[1].~runtime_error)(&v32);
    }
    else
    {
      v3[4] = *((_QWORD *)&v33 + 1);
      *((_QWORD *)&v33 + 1) = 0;
    }
  }
  else
  {
    v3[4] = 0;
  }
  *(_QWORD *)(a2 + 24) = v4;
  v6 = (std::runtime_error *)*((_QWORD *)&v33 + 1);
  if (*((std::runtime_error **)&v33 + 1) == &v32)
  {
    v7 = 4;
    v6 = &v32;
    goto LABEL_23;
  }
  if (*((_QWORD *)&v33 + 1))
  {
    v7 = 5;
LABEL_23:
    (*((void (**)(void))&v6->~runtime_error + v7))();
  }
  *(_BYTE *)(a2 + 72) = 1;
  v8 = (std::runtime_error *)*((_QWORD *)&v40 + 1);
  if (*((std::runtime_error **)&v40 + 1) == &v39)
  {
    v9 = 4;
    v8 = &v39;
  }
  else
  {
    if (!*((_QWORD *)&v40 + 1))
      goto LABEL_46;
    v9 = 5;
  }
  (*((void (**)(void))&v8->~runtime_error + v9))();
LABEL_46:
  if (!v31)
    return (std::runtime_error *)((uint64_t (*)(std::runtime_error *, _QWORD *))v25.~runtime_error)(&v25, v5);
  result = (std::runtime_error *)*((_QWORD *)&v26 + 1);
  if (*((std::runtime_error **)&v26 + 1) == &v25)
  {
    v18 = 4;
    result = &v25;
  }
  else
  {
    if (!*((_QWORD *)&v26 + 1))
      return result;
    v18 = 5;
  }
  return (std::runtime_error *)(*((uint64_t (**)(void))&result->~runtime_error + v18))();
}

void sub_18CC479B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2521918;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E2521918;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E2521918;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_18CC47B84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E2521918;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::runtime_error_vtbl *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::runtime_error *v12;
  std::runtime_error v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  std::runtime_error v19[4];
  char v20;
  std::runtime_error v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v21 = (std::runtime_error)vdupq_n_s64(1uLL);
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(std::runtime_error *__return_ptr))(*(_QWORD *)v3 + 48))(v19);
  if (!v20)
  {
    AMSCore::Error::Error(&v21, v19);
    std::runtime_error::runtime_error(&v13, &v21);
    v14 = v22;
    v13.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v5 = (unsigned int *)v24;
    v15 = v23;
    v16 = v24;
    v17 = v25;
    if (v25)
    {
      *(_QWORD *)(v24 + 16) = &v16;
      v23 = &v24;
      v24 = 0;
      v25 = 0;
      v5 = 0;
    }
    else
    {
      v15 = &v16;
    }
    v18 = v26;
    v26 = 0uLL;
    v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, v5);
    MEMORY[0x18D7898AC](&v21);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v13);
    *(_OWORD *)(a2 + 16) = v14;
    *(_QWORD *)a2 = off_1E2521330;
    v9 = v16;
    *(_QWORD *)(a2 + 32) = v15;
    *(_QWORD *)(a2 + 40) = v9;
    v10 = a2 + 40;
    v11 = v17;
    *(_QWORD *)(a2 + 48) = v17;
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = v10;
      v9 = 0;
      v15 = &v16;
      v16 = 0;
      v17 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v10;
    }
    *(_OWORD *)(a2 + 56) = v18;
    v18 = 0uLL;
    *(_BYTE *)(a2 + 72) = 0;
    v13.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v9);
    v12 = &v13;
LABEL_17:
    MEMORY[0x18D7898AC](v12);
    if (!v20)
      goto LABEL_5;
    goto LABEL_18;
  }
  v4 = v19[0].__vftable;
  if (v19[0].__vftable == (std::runtime_error_vtbl *)v19[0].__imp_.__imp_)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[25]>((uint64_t)&v21, 7u, "The selection was empty.");
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v21);
    *(_OWORD *)(a2 + 16) = v22;
    *(_QWORD *)a2 = off_1E2521330;
    v6 = v24;
    *(_QWORD *)(a2 + 32) = v23;
    *(_QWORD *)(a2 + 40) = v6;
    v7 = a2 + 40;
    v8 = v25;
    *(_QWORD *)(a2 + 48) = v25;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      v23 = &v24;
      v24 = 0;
      v25 = 0;
      v6 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v7;
    }
    *(_OWORD *)(a2 + 56) = v26;
    v26 = 0uLL;
    *(_BYTE *)(a2 + 72) = 0;
    v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v6);
    v12 = &v21;
    goto LABEL_17;
  }
  *(_OWORD *)a2 = *(_OWORD *)&v19[0].~runtime_error;
  *(_QWORD *)(a2 + 16) = v4->what;
  v4->~runtime_error_0 = 0;
  v4->what = 0;
  v4->~runtime_error = 0;
  *(_BYTE *)(a2 + 72) = 1;
  if (!v20)
  {
LABEL_5:
    ((void (*)(std::runtime_error *))v19[0].~runtime_error)(v19);
    return;
  }
LABEL_18:
  v21.__vftable = (std::runtime_error_vtbl *)v19;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v21);
}

void sub_18CC47F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(_QWORD), uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a28)
  {
    (*a19)(&a19);
    _Unwind_Resume(a1);
  }
  a10 = (void **)&a19;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData23IStructuredDataProvider12TableBuilder13withSelectOneERKNSt3__16vectorIN"
                     "S0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData23IStructuredDataProvider12TableBuilder13withSelectOneERKNSt3_"
                                "_16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData23IStructuredDataProvider12TableBuilder13withSelectOneERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData23IStructuredDataProvider12TableBuilder13withSelectOneERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target_type()
{
}

void AMSCore::IBundleInfo::getBagProfile(char *a1@<X8>)
{
  strcpy(a1 + 23, "\a1");
  strcpy(a1, "AMSCore");
  a1[47] = 1;
}

void AMSCore::IBundleInfo::getIssuingBundleInfo(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AMSCore::IBundleInfo::getURLScheme(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void AMSCore::IBundleInfo::getUserAgentSuffix(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void AMSCore::IBundleInfo::getMappedAccountClientIdentifierBundleInfo(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AMSCore::IDeviceInfo::getCountryCode(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void AMSCore::IDeviceInfo::getScreenInfo(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void std::__shared_ptr_emplace<AMSCore::AppleDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::AppleDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::AppleDeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL AMSCore::IDeviceInfo::isAppleEmbeddedPlatform(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v18;
  uint64_t *v19;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = a1[1];
  switch(v1)
  {
    case 'C':
      if (v2 < 0)
        a1 = (uint64_t *)*a1;
      v18 = memcmp(a1, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.watchos", 0x43uLL) == 0;
      break;
    case '@':
      if (v2 >= 0)
        v19 = a1;
      else
        v19 = (uint64_t *)*a1;
      if (*v19 == 0x6C7070612E6D6F63
        && v19[1] == 0x4D656C7070412E65
        && v19[2] == 0x7672655361696465
        && v19[3] == 0x65726F4373656369
        && v19[4] == 0x656369766544492ELL
        && v19[5] == 0x616C702E6F666E49
        && v19[6] == 0x70612E6D726F6674
        && v19[7] == 0x736F76742E656C70)
      {
        return 1;
      }
      v27 = *v19;
      v28 = v19[1];
      v29 = v19[2];
      v30 = v19[3];
      v31 = v19[4];
      v32 = v19[5];
      v33 = v19[6];
      v34 = v19[7];
      v18 = v27 == 0x6C7070612E6D6F63
         && v28 == 0x4D656C7070412E65
         && v29 == 0x7672655361696465
         && v30 == 0x65726F4373656369
         && v31 == 0x656369766544492ELL
         && v32 == 0x616C702E6F666E49
         && v33 == 0x70612E6D726F6674
         && v34 == 0x736F72782E656C70;
      break;
    case '?':
      v3 = (uint64_t *)*a1;
      if (v2 >= 0)
        v3 = a1;
      v4 = *v3;
      v5 = v3[1];
      v6 = v3[2];
      v7 = v3[3];
      v8 = v3[4];
      v9 = v3[5];
      v10 = v3[6];
      v11 = *(uint64_t *)((char *)v3 + 55);
      v18 = v4 == 0x6C7070612E6D6F63
         && v5 == 0x4D656C7070412E65
         && v6 == 0x7672655361696465
         && v7 == 0x65726F4373656369
         && v8 == 0x656369766544492ELL
         && v9 == 0x616C702E6F666E49
         && v10 == 0x70612E6D726F6674
         && v11 == 0x736F692E656C7070;
      break;
    default:
      return 0;
  }
  return v18;
}

void AMSCore::toString(std::string *this, uint64_t a2)
{
  int v4;
  std::string::size_type v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v23;
  const void *v24;
  const std::string::value_type *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const std::string::value_type *v41;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v64;
  const std::string::value_type *v65;
  const std::string::value_type *v66;
  _BOOL4 v67;
  const std::string::value_type *v68;
  const std::string::value_type *v69;
  const std::string::value_type *v70;
  const std::string::value_type *v71;
  int v72;

  v4 = *(char *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  switch(v6)
  {
    case ';':
      v7 = *(const std::string::value_type **)a2;
      if (v4 >= 0)
        v7 = (const std::string::value_type *)a2;
      v8 = *(_QWORD *)v7;
      v9 = *((_QWORD *)v7 + 1);
      v10 = *((_QWORD *)v7 + 2);
      v11 = *((_QWORD *)v7 + 3);
      v12 = *((_QWORD *)v7 + 4);
      v13 = *((_QWORD *)v7 + 5);
      v14 = *((_QWORD *)v7 + 6);
      v15 = *(_QWORD *)(v7 + 51);
      if (v8 != 0x6C7070612E6D6F63
        || v9 != 0x4D656C7070412E65
        || v10 != 0x7672655361696465
        || v11 != 0x65726F4373656369
        || v12 != 0x656369766544492ELL
        || v13 != 0x616C702E6F666E49
        || v14 != 0x696C2E6D726F6674
        || v15 != 0x78756E696C2E6D72)
      {
        goto LABEL_141;
      }
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 5;
      strcpy((char *)this, "Linux");
      return;
    case '?':
      v25 = *(const std::string::value_type **)a2;
      if (v4 >= 0)
        v25 = (const std::string::value_type *)a2;
      v26 = *(_QWORD *)v25;
      v27 = *((_QWORD *)v25 + 1);
      v28 = *((_QWORD *)v25 + 2);
      v29 = *((_QWORD *)v25 + 3);
      v30 = *((_QWORD *)v25 + 4);
      v31 = *((_QWORD *)v25 + 5);
      v32 = *((_QWORD *)v25 + 6);
      v33 = *(_QWORD *)(v25 + 55);
      if (v26 != 0x6C7070612E6D6F63
        || v27 != 0x4D656C7070412E65
        || v28 != 0x7672655361696465
        || v29 != 0x65726F4373656369
        || v30 != 0x656369766544492ELL
        || v31 != 0x616C702E6F666E49
        || v32 != 0x70612E6D726F6674
        || v33 != 0x736F692E656C7070)
      {
        goto LABEL_141;
      }
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 3;
      LODWORD(this->__r_.__value_.__l.__data_) = 5459817;
      return;
    case '@':
      v41 = *(const std::string::value_type **)a2;
      if (v4 >= 0)
        v41 = (const std::string::value_type *)a2;
      if (*(_QWORD *)v41 == 0x6C7070612E6D6F63
        && *((_QWORD *)v41 + 1) == 0x4D656C7070412E65
        && *((_QWORD *)v41 + 2) == 0x7672655361696465
        && *((_QWORD *)v41 + 3) == 0x65726F4373656369
        && *((_QWORD *)v41 + 4) == 0x656369766544492ELL
        && *((_QWORD *)v41 + 5) == 0x616C702E6F666E49
        && *((_QWORD *)v41 + 6) == 0x70612E6D726F6674
        && *((_QWORD *)v41 + 7) == 0x736F76742E656C70)
      {
        *((_BYTE *)&this->__r_.__value_.__s + 23) = 4;
        v64 = 1397716596;
      }
      else
      {
        v49 = *(_QWORD *)v41;
        v50 = *((_QWORD *)v41 + 1);
        v51 = *((_QWORD *)v41 + 2);
        v52 = *((_QWORD *)v41 + 3);
        v53 = *((_QWORD *)v41 + 4);
        v54 = *((_QWORD *)v41 + 5);
        v55 = *((_QWORD *)v41 + 6);
        v56 = *((_QWORD *)v41 + 7);
        if (v49 != 0x6C7070612E6D6F63
          || v50 != 0x4D656C7070412E65
          || v51 != 0x7672655361696465
          || v52 != 0x65726F4373656369
          || v53 != 0x656369766544492ELL
          || v54 != 0x616C702E6F666E49
          || v55 != 0x70612E6D726F6674
          || v56 != 0x736F72782E656C70)
        {
          goto LABEL_141;
        }
        *((_BYTE *)&this->__r_.__value_.__s + 23) = 4;
        v64 = 1397715576;
      }
      LODWORD(this->__r_.__value_.__l.__data_) = v64;
      this->__r_.__value_.__s.__data_[4] = 0;
      return;
    case 'A':
      if (v4 >= 0)
        v65 = (const std::string::value_type *)a2;
      else
        v65 = *(const std::string::value_type **)a2;
      if (memcmp(v65, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.macos", 0x41uLL))
      {
        if (v4 >= 0)
          v66 = (const std::string::value_type *)a2;
        else
          v66 = *(const std::string::value_type **)a2;
        if (!memcmp(v66, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.windows.x64", 0x41uLL))
          goto LABEL_144;
        if (v6 != 67)
          goto LABEL_137;
        v67 = 1;
        goto LABEL_132;
      }
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 5;
      strcpy((char *)this, "macOS");
      return;
    case 'C':
      if (v4 >= 0)
        v68 = (const std::string::value_type *)a2;
      else
        v68 = *(const std::string::value_type **)a2;
      if (memcmp(v68, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.watchos", 0x43uLL))
      {
        v23 = v6 == 67;
        goto LABEL_127;
      }
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 7;
      LODWORD(this->__r_.__value_.__l.__data_) = 1668571511;
      v72 = 1397712995;
      goto LABEL_150;
    default:
      v23 = v6 == 67;
      if (v6 == 67)
      {
LABEL_127:
        if (v4 >= 0)
          v69 = (const std::string::value_type *)a2;
        else
          v69 = *(const std::string::value_type **)a2;
        if (!memcmp(v69, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.windows.arm64", 0x43uLL))
        {
LABEL_144:
          *((_BYTE *)&this->__r_.__value_.__s + 23) = 7;
          LODWORD(this->__r_.__value_.__l.__data_) = 1684957527;
          v72 = 1937207140;
LABEL_150:
          *(_DWORD *)((char *)this->__r_.__value_.__r.__words + 3) = v72;
          this->__r_.__value_.__s.__data_[7] = 0;
          return;
        }
        v67 = v6 == 65;
        if (v23)
        {
LABEL_132:
          if (v4 >= 0)
            v70 = (const std::string::value_type *)a2;
          else
            v70 = *(const std::string::value_type **)a2;
          if (!memcmp(v70, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.android.arm64", 0x43uLL))
            goto LABEL_145;
        }
        if (!v67)
          goto LABEL_141;
LABEL_137:
        if (v4 >= 0)
          v71 = (const std::string::value_type *)a2;
        else
          v71 = *(const std::string::value_type **)a2;
        if (memcmp(v71, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.android.x64", 0x41uLL))
          goto LABEL_141;
LABEL_145:
        *((_BYTE *)&this->__r_.__value_.__s + 23) = 7;
        LODWORD(this->__r_.__value_.__l.__data_) = 1919184449;
        v72 = 1684631410;
        goto LABEL_150;
      }
      if (v6 == 68)
      {
        v24 = v4 >= 0 ? (const void *)a2 : *(const void **)a2;
        if (!memcmp(v24, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.android.armv7a", 0x44uLL))
          goto LABEL_145;
      }
LABEL_141:
      if (v4 < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, v5);
      }
      else
      {
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        this->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      return;
  }
}

_QWORD *std::string::basic_string[abi:fe180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void AMSCore::StaticBundleInfoProvider::~StaticBundleInfoProvider(void **this)
{
  *this = off_1E2521118;
  if (*((char *)this + 79) < 0)
  {
    operator delete(this[7]);
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 31) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(this[1]);
      return;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_7;
}

{
  *this = off_1E2521118;
  if (*((char *)this + 79) < 0)
  {
    operator delete(this[7]);
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 31) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[4]);
  if ((*((char *)this + 31) & 0x80000000) == 0)
LABEL_8:
    JUMPOUT(0x18D789BDCLL);
LABEL_7:
  operator delete(this[1]);
  goto LABEL_8;
}

double AMSCore::StaticBundleInfoProvider::getAccountClientIdentifier@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_18CF51B40;
  strcpy(v3, "com.apple.AppleMediaServicesCore.IMediaAccount.appStore");
  return *(double *)".IMediaAccount.appStore";
}

void AMSCore::StaticBundleInfoProvider::getIdentifier(AMSCore::StaticBundleInfoProvider *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

void AMSCore::StaticBundleInfoProvider::getName(AMSCore::StaticBundleInfoProvider *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

void AMSCore::StaticBundleInfoProvider::getVersion(AMSCore::StaticBundleInfoProvider *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

__n128 AMSCore::StaticBundleInfoProvider::StaticBundleInfoProvider(uint64_t a1, __int128 *a2, __int128 *a3, __n128 *a4)
{
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a1 = off_1E2521118;
  v4 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v5 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v5;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  result = *a4;
  *(_QWORD *)(a1 + 72) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 56) = result;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  return result;
}

uint64_t std::construct_at[abi:fe180100]<AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink*>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v3 = a2[2];
    *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(result + 32) = v3;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *(_BYTE *)(result + 56) = 1;
  }
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v4 = a2[4];
    *(_QWORD *)(result + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(result + 64) = v4;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_BYTE *)(result + 88) = 1;
  }
  *(_DWORD *)(result + 96) = *((_DWORD *)a2 + 24);
  *(_QWORD *)(result + 104) = result + 104;
  *(_QWORD *)(result + 112) = result + 104;
  *(_QWORD *)(result + 120) = 0;
  if ((__int128 *)result == a2)
  {
    __break(1u);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 15);
    if (v5)
    {
      v7 = *((_QWORD *)a2 + 13);
      v6 = (uint64_t *)*((_QWORD *)a2 + 14);
      v8 = *v6;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
      **(_QWORD **)(v7 + 8) = v8;
      v9 = *(_QWORD *)(result + 104);
      *(_QWORD *)(v9 + 8) = v6;
      *v6 = v9;
      *(_QWORD *)(result + 104) = v7;
      *(_QWORD *)(v7 + 8) = result + 104;
      *(_QWORD *)(result + 120) = v5;
      *((_QWORD *)a2 + 15) = 0;
    }
    v10 = a2[8];
    *(_QWORD *)(result + 144) = *((_QWORD *)a2 + 18);
    *(_OWORD *)(result + 128) = v10;
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 16) = 0;
    *(_DWORD *)(result + 152) = *((_DWORD *)a2 + 38);
  }
  return result;
}

AMSCore::IMetricsProvider::Event *AMSCore::IMetricsProvider::Event::Event(AMSCore::IMetricsProvider::Event *this, const AMSCore::IMetricsProvider::Event *a2)
{
  AMSCore::IMetricsProvider::Event *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  const AMSCore::IMetricsProvider::Event *v7;
  std::string *v8;
  __int128 v9;
  const AMSCore::IMetricsProvider::Event *v10;
  const AMSCore::IMetricsProvider::Event *v11;
  BOOL v12;
  uint64_t **v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  int v20;
  const void *v21;
  size_t v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  uint64_t **v28;
  size_t v29;
  size_t v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  int v35;
  char *v36;
  uint64_t *v37;
  std::string *v38;
  __int128 v39;
  AMSCore::IMetricsProvider::Event *v40;
  uint64_t v41;
  char *v42;
  char *v43;

  v3 = this;
  *(_QWORD *)this = &off_1E2520A88;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    if (*((char *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    }
    else
    {
      v4 = *(_OWORD *)((char *)a2 + 8);
      *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
      *(_OWORD *)((char *)this + 8) = v4;
    }
    *((_BYTE *)v3 + 32) = 1;
  }
  *((_QWORD *)v3 + 5) = *((_QWORD *)a2 + 5);
  v5 = (std::string *)((char *)v3 + 48);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    *((_QWORD *)v3 + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_QWORD *)v3 + 10) = 0;
  *((_QWORD *)v3 + 9) = (char *)v3 + 80;
  *((_QWORD *)v3 + 11) = 0;
  v7 = (const AMSCore::IMetricsProvider::Event *)*((_QWORD *)a2 + 9);
  if (v7 != (const AMSCore::IMetricsProvider::Event *)((char *)a2 + 80))
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)v3 + 9, (uint64_t *)v3 + 10, (const void **)v7 + 4, (__int128 *)v7 + 2);
      v10 = (const AMSCore::IMetricsProvider::Event *)*((_QWORD *)v7 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(const AMSCore::IMetricsProvider::Event **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (const AMSCore::IMetricsProvider::Event *)*((_QWORD *)v7 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != (const AMSCore::IMetricsProvider::Event *)((char *)a2 + 80));
  }
  *((_BYTE *)v3 + 96) = *((_BYTE *)a2 + 96);
  v8 = (std::string *)((char *)v3 + 104);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 104);
    *((_QWORD *)v3 + 15) = *((_QWORD *)a2 + 15);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v3 + 17) = 0;
  *((_QWORD *)v3 + 18) = 0;
  v13 = (uint64_t **)((char *)v3 + 136);
  *((_QWORD *)v3 + 16) = (char *)v3 + 136;
  v14 = (_QWORD *)*((_QWORD *)a2 + 16);
  v43 = (char *)a2 + 136;
  if (v14 != (_QWORD *)((char *)a2 + 136))
  {
    while (1)
    {
      v16 = *((_QWORD *)v3 + 17);
      v17 = (uint64_t)v13;
      if (*((uint64_t ***)v3 + 16) == v13)
        break;
      v18 = *((_QWORD *)v3 + 17);
      v19 = v13;
      if (v16)
      {
        do
        {
          v17 = v18;
          v18 = *(_QWORD *)(v18 + 8);
        }
        while (v18);
      }
      else
      {
        do
        {
          v17 = (uint64_t)v19[2];
          v12 = *(_QWORD *)v17 == (_QWORD)v19;
          v19 = (uint64_t **)v17;
        }
        while (v12);
      }
      v20 = *(char *)(v17 + 55);
      if (v20 >= 0)
        v21 = (const void *)(v17 + 32);
      else
        v21 = *(const void **)(v17 + 32);
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v17 + 55);
      else
        v22 = *(_QWORD *)(v17 + 40);
      v23 = *((char *)v14 + 55);
      if (v23 >= 0)
        v24 = v14 + 4;
      else
        v24 = (const void *)v14[4];
      if (v23 >= 0)
        v25 = *((unsigned __int8 *)v14 + 55);
      else
        v25 = v14[5];
      if (v25 >= v22)
        v26 = v22;
      else
        v26 = v25;
      v27 = memcmp(v21, v24, v26);
      if (v27)
      {
        if (v27 < 0)
          break;
      }
      else if (v22 < v25)
      {
        break;
      }
      v17 = (uint64_t)v13;
      v28 = v13;
      if (v16)
      {
        v28 = v13;
        while (1)
        {
          v17 = v16;
          v29 = *(unsigned __int8 *)(v16 + 55);
          v30 = *(_QWORD *)(v16 + 40);
          if ((v29 & 0x80u) == 0)
            v31 = (const void *)(v16 + 32);
          else
            v31 = *(const void **)(v16 + 32);
          if ((v29 & 0x80u) == 0)
            v32 = v29;
          else
            v32 = v30;
          if (v32 >= v25)
            v33 = v25;
          else
            v33 = v32;
          v34 = memcmp(v24, v31, v33);
          if (v34)
          {
            if (v34 < 0)
              goto LABEL_47;
LABEL_61:
            v35 = memcmp(v31, v24, v33);
            if (v35)
            {
              if ((v35 & 0x80000000) == 0)
                break;
            }
            else if (v32 >= v25)
            {
              break;
            }
            v28 = (uint64_t **)(v17 + 8);
            v16 = *(_QWORD *)(v17 + 8);
            if (!v16)
              goto LABEL_74;
          }
          else
          {
            if (v25 >= v32)
              goto LABEL_61;
LABEL_47:
            v16 = *(_QWORD *)v17;
            v28 = (uint64_t **)v17;
            if (!*(_QWORD *)v17)
              goto LABEL_74;
          }
        }
      }
LABEL_71:
      if (*v28)
      {
        v36 = (char *)v14[1];
        if (!v36)
          goto LABEL_82;
      }
      else
      {
LABEL_74:
        v37 = (uint64_t *)operator new(0x40uLL);
        v38 = (std::string *)(v37 + 4);
        if (*((char *)v14 + 55) < 0)
        {
          v40 = this;
          std::string::__init_copy_ctor_external(v38, (const std::string::value_type *)v14[4], v14[5]);
        }
        else
        {
          v39 = *((_OWORD *)v14 + 2);
          v37[6] = v14[6];
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
          v40 = this;
        }
        v37[7] = v14[7];
        *v37 = 0;
        v37[1] = 0;
        v37[2] = v17;
        *v28 = v37;
        v41 = **((_QWORD **)v40 + 16);
        if (v41)
        {
          *((_QWORD *)v40 + 16) = v41;
          v37 = *v28;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v40 + 17), v37);
        ++*((_QWORD *)v40 + 18);
        v36 = (char *)v14[1];
        if (!v36)
        {
          do
          {
LABEL_82:
            v42 = (char *)v14[2];
            v12 = *(_QWORD *)v42 == (_QWORD)v14;
            v14 = v42;
          }
          while (!v12);
          goto LABEL_22;
        }
      }
      do
      {
        v42 = v36;
        v36 = *(char **)v36;
      }
      while (v36);
LABEL_22:
      v14 = v42;
      v3 = this;
      if (v42 == v43)
        return v3;
    }
    if (v16)
    {
      v28 = (uint64_t **)(v17 + 8);
    }
    else
    {
      v17 = (uint64_t)v13;
      v28 = v13;
    }
    goto LABEL_71;
  }
  return v3;
}

void sub_18CC48FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (*(_BYTE *)(v14 + 32))
  {
    if (*(char *)(a14 + 31) < 0)
      operator delete(*a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_18CC49018(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  operator delete(v14);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a14 + 136));
  if (*(char *)(a14 + 127) < 0)
    operator delete(*a9);
  JUMPOUT(0x18CC49058);
}

void AMSCore::IMetricsProvider::Event::~Event(AMSCore::IMetricsProvider::Event *this)
{
  *(_QWORD *)this = &off_1E2520A88;
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)this + 17));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 72, *((unsigned int **)this + 10));
  if (*((char *)this + 71) < 0)
  {
    operator delete(*((void **)this + 6));
    if (!*((_BYTE *)this + 32))
      return;
  }
  else if (!*((_BYTE *)this + 32))
  {
    return;
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  AMSCore::IMetricsProvider::Event::~Event(this);
  JUMPOUT(0x18D789BDCLL);
}

void **std::vector<AMSCore::DialogAction>::~vector[abi:fe180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void AMSCore::FinanceMetricsEvent::~FinanceMetricsEvent(AMSCore::FinanceMetricsEvent *this)
{
  AMSCore::IMetricsProvider::Event::~Event(this);
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::Log::fatal<char const(&)[41]>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v3);
  AMSCore::Logger::log<char [41]>(v3, 5, (uint64_t)"dialog", 6, "Failed to determine the selected action.");
  v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_18CC49228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *AMSCore::DialogAction::DialogAction(std::string *this, const AMSCore::DialogAction *a2)
{
  __int128 v4;
  __int128 v5;
  const AMSCore::DialogAction *v6;
  std::string *v7;
  __int128 v8;
  const AMSCore::DialogAction *v9;
  const AMSCore::DialogAction *v10;
  BOOL v11;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[6].__r_.__value_.__s.__data_[16] = 0;
  if (*((_BYTE *)a2 + 160))
  {
    AMSCore::URL::URL(this, a2);
    LODWORD(this[6].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 38);
    this[6].__r_.__value_.__s.__data_[16] = 1;
  }
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[8].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 48);
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 200);
    this[9].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 27);
    *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v5;
  }
  this[9].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__l.__size_ = (std::string::size_type)&this[9].__r_.__value_.__r.__words[2];
  this[10].__r_.__value_.__r.__words[0] = 0;
  v6 = (const AMSCore::DialogAction *)*((_QWORD *)a2 + 28);
  if (v6 != (const AMSCore::DialogAction *)((char *)a2 + 232))
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&this[9].__r_.__value_.__l.__size_, (uint64_t *)&this[9].__r_.__value_.__r.__words[2], (const void **)v6 + 4, (__int128 *)v6 + 2);
      v9 = (const AMSCore::DialogAction *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(const AMSCore::DialogAction **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (const AMSCore::DialogAction *)*((_QWORD *)v6 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != (const AMSCore::DialogAction *)((char *)a2 + 232));
  }
  v7 = (std::string *)((char *)this + 248);
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 248);
    this[11].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 33);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_18CC493AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;

  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v4, *(unsigned int **)(v1 + 232));
  if (*(char *)(v1 + 223) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      if (!*(_BYTE *)(v1 + 160))
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(v1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if (!*(_BYTE *)(v1 + 160))
LABEL_5:
    _Unwind_Resume(a1);
LABEL_4:
  AMSCore::URL::~URL((AMSCore::URL *)v1);
  goto LABEL_5;
}

void AMSCore::DialogAction::~DialogAction(AMSCore::DialogAction *this)
{
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 224, *((unsigned int **)this + 29));
  if (*((char *)this + 223) < 0)
  {
    operator delete(*((void **)this + 25));
    if ((*((char *)this + 191) & 0x80000000) == 0)
    {
LABEL_5:
      if (!*((_BYTE *)this + 160))
        return;
      goto LABEL_6;
    }
  }
  else if ((*((char *)this + 191) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)this + 21));
  if (!*((_BYTE *)this + 160))
    return;
LABEL_6:
  AMSCore::URL::~URL(this);
}

void std::__shared_ptr_emplace<AMSCore::DialogAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25227A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::DialogAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25227A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::DialogAction>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(a1 + 24);
}

uint64_t AMSCore::Logger::log<char [41]>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[8];
  void *__p[2];
  __int128 v26;
  int v27;
  uint64_t v28[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v9 = result;
    v10 = MEMORY[0x1E0DE4FE0];
    v11 = MEMORY[0x1E0DE4FE0] + 64;
    v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v28[0] = MEMORY[0x1E0DE4FE0] + 64;
    v23 = v13;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v13 - 24)) = v14;
    v15 = (std::ios_base *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24));
    std::ios_base::init(v15, v24);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v23 = v10 + 24;
    v28[0] = v11;
    std::streambuf::basic_streambuf();
    v16 = MEMORY[0x1E0DE4FB8];
    v24[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v26 = 0u;
    v27 = 16;
    v17 = *(_QWORD *)(v23 - 24);
    if ((v18 & 1) == 0
    {
    }
    v19 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v23, (uint64_t)a5, v19);
    v20 = v24[5];
    v21 = (char *)&v24[-1] + *(_QWORD *)(v23 - 24);
    if ((v21[32] & 5) != 0)
    {
      v22 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5) + 32))(&rep, *((_QWORD *)v21 + 5), 0, 1, 16);
      v22 = v33;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v30 = a2;
    v31 = v20;
    v32 = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v9 + 16) + 16))(*(_QWORD *)(v9 + 16), a3, a4, &rep);
    v23 = *v12;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24)) = v12[3];
    v24[0] = v16 + 16;
    if (SBYTE7(v26) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v28);
  }
  return result;
}

void sub_18CC49758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *AMSCore::DialogResult::DialogResult(_QWORD *a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  const void *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  char *v14;
  _OWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  std::ios_base *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::string v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  char v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  __int128 __p;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  _QWORD v75[8];
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = *((_BYTE *)a3 + 23);
    if (v8 >= 0)
      v9 = (const void *)*((unsigned __int8 *)a3 + 23);
    else
      v9 = a3[1];
    if (v8 >= 0)
      v10 = (unsigned __int8 *)a3;
    else
      v10 = (unsigned __int8 *)*a3;
    while (1)
    {
      v11 = *(unsigned __int8 *)(v6 + 191);
      if ((v11 & 0x80u) == 0)
        v12 = (const void *)*(unsigned __int8 *)(v6 + 191);
      else
        v12 = *(const void **)(v6 + 176);
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v6 + 168), v10, *(_QWORD *)(v6 + 176)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v6 + 191))
            break;
          v13 = 0;
          while (*(unsigned __int8 *)(v6 + v13 + 168) == v10[v13])
          {
            if (v11 == ++v13)
              goto LABEL_19;
          }
        }
      }
      v6 += 272;
      if (v6 == v7)
        goto LABEL_33;
    }
  }
LABEL_19:
  if (v6 == v7)
  {
LABEL_33:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v72);
    v26 = v72;
    if (*(int *)(v72 + 8) <= 4)
    {
      v27 = MEMORY[0x1E0DE4FE0];
      v28 = MEMORY[0x1E0DE4FE0] + 64;
      v29 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v30 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v31 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v79[0] = MEMORY[0x1E0DE4FE0] + 64;
      v74 = v30;
      *(_QWORD *)((char *)&v75[-1] + *(_QWORD *)(v30 - 24)) = v31;
      v32 = (std::ios_base *)((char *)&v75[-1] + *(_QWORD *)(v74 - 24));
      std::ios_base::init(v32, v75);
      v32[1].__vftable = 0;
      v32[1].__fmtflags_ = -1;
      v74 = v27 + 24;
      v79[0] = v28;
      std::streambuf::basic_streambuf();
      v33 = MEMORY[0x1E0DE4FB8];
      v75[0] = MEMORY[0x1E0DE4FB8] + 16;
      v76 = 0u;
      v77 = 0u;
      v78 = 16;
      v34 = *(_QWORD *)(v74 - 24);
      if ((v35 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Received an invalid action identifier. identifier = ", 52);
      v36 = *((char *)a3 + 23);
      if (v36 >= 0)
        v37 = (uint64_t)a3;
      else
        v37 = (uint64_t)*a3;
      if (v36 >= 0)
        v38 = *((unsigned __int8 *)a3 + 23);
      else
        v38 = (uint64_t)a3[1];
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v74, v37, v38);
      v39 = v75[5];
      v40 = (char *)&v75[-1] + *(_QWORD *)(v74 - 24);
      if ((v40[32] & 5) != 0)
      {
        v41 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v40 + 5) + 32))(&rep, *((_QWORD *)v40 + 5), 0, 1, 16);
        v41 = v84;
      }
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v81 = 4;
      v82 = v39;
      v83 = v41;
      (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v26 + 16) + 16))(*(_QWORD *)(v26 + 16), "dialog", 6, &rep);
      v74 = *v29;
      *(_QWORD *)((char *)&v75[-1] + *(_QWORD *)(v74 - 24)) = v29[3];
      v75[0] = v33 + 16;
      if (SBYTE7(v77) < 0)
        operator delete((void *)v76);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v79);
    }
    v43 = v73;
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v6 = *a2;
    v7 = a2[1];
    if (*a2 == v7)
    {
LABEL_64:
      AMSCore::Log::fatal<char const(&)[41]>();
      __break(1u);
    }
    while (*(_DWORD *)(v6 + 192))
    {
      v6 += 272;
      if (v6 == v7)
        goto LABEL_64;
    }
  }
  if (v6 == v7)
    goto LABEL_64;
  AMSCore::DialogAction::DialogAction(&v46, (const AMSCore::DialogAction *)v6);
  v14 = (char *)operator new(0x128uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_1E25227A8;
  v14[24] = 0;
  v15 = v14 + 24;
  v14[184] = 0;
  if (v61)
  {
    v14[24] = 0;
    v14[48] = 0;
    if (v47)
    {
      *v15 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
      *((_QWORD *)v14 + 5) = *((_QWORD *)&v46.__r_.__value_.__l + 2);
      memset(&v46, 0, sizeof(v46));
      v14[48] = 1;
    }
    v14[56] = 0;
    v14[80] = 0;
    if (v50)
    {
      *(_OWORD *)(v14 + 56) = v48;
      *((_QWORD *)v14 + 9) = v49;
      v49 = 0;
      v48 = 0uLL;
      v14[80] = 1;
    }
    v14[88] = 0;
    v14[112] = 0;
    if (v53)
    {
      *(_OWORD *)(v14 + 88) = v51;
      *((_QWORD *)v14 + 13) = v52;
      v52 = 0;
      v51 = 0uLL;
      v14[112] = 1;
    }
    *((_DWORD *)v14 + 30) = v54;
    *((_QWORD *)v14 + 16) = v14 + 128;
    *((_QWORD *)v14 + 17) = v14 + 128;
    *((_QWORD *)v14 + 18) = 0;
    v16 = v57;
    if (v57)
    {
      v18 = v55;
      v17 = v56;
      v19 = *v56;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v55 + 8);
      **(_QWORD **)(v18 + 8) = v19;
      v20 = *((_QWORD *)v14 + 16);
      *(_QWORD *)(v20 + 8) = v17;
      *v17 = v20;
      *((_QWORD *)v14 + 16) = v18;
      *(_QWORD *)(v18 + 8) = v14 + 128;
      *((_QWORD *)v14 + 18) = v16;
      v57 = 0;
    }
    *(_OWORD *)(v14 + 152) = v58;
    *((_QWORD *)v14 + 21) = v59;
    v59 = 0;
    v58 = 0uLL;
    *((_DWORD *)v14 + 44) = v60;
    v14[184] = 1;
  }
  *((_OWORD *)v14 + 12) = v62;
  *((_QWORD *)v14 + 26) = v63;
  v62 = 0uLL;
  *((_DWORD *)v14 + 54) = v64;
  *((_OWORD *)v14 + 14) = __p;
  v63 = 0;
  __p = 0uLL;
  v21 = v66;
  v22 = v67;
  v66 = 0;
  *((_QWORD *)v14 + 30) = v21;
  *((_QWORD *)v14 + 31) = v22;
  v23 = v14 + 256;
  v24 = v68;
  v25 = v69;
  *((_QWORD *)v14 + 32) = v68;
  *((_QWORD *)v14 + 33) = v25;
  if (v25)
  {
    *(_QWORD *)(v24 + 16) = v23;
    v67 = &v68;
    v68 = 0;
    v69 = 0;
    v24 = 0;
  }
  else
  {
    *((_QWORD *)v14 + 31) = v23;
  }
  *((_OWORD *)v14 + 17) = v70;
  *((_QWORD *)v14 + 36) = v71;
  v71 = 0;
  v70 = 0uLL;
  *a1 = v15;
  a1[1] = v14;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v67, (unsigned int *)v24);
  if ((SHIBYTE(v66) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v63) & 0x80000000) == 0)
      goto LABEL_46;
LABEL_50:
    operator delete((void *)v62);
    if (!v61)
      return a1;
    goto LABEL_47;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v63) < 0)
    goto LABEL_50;
LABEL_46:
  if (v61)
LABEL_47:
    AMSCore::URL::~URL((AMSCore::URL *)&v46);
  return a1;
}

void sub_18CC49D4C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::HandleDialogResultTask::perform(std::runtime_error *a1, uint64_t a2, uint64_t *a3)
{
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  std::string::size_type v13;
  std::system_error_vtbl *v14;
  uint64_t v15;
  std::system_error_vtbl *v16;
  std::system_error_vtbl *v17;
  std::ios_base *v18;
  uint64_t v19;
  void (__cdecl *v20)(std::system_error *__hidden);
  unsigned __int8 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  std::__shared_weak_count *size;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  std::string *v44;
  std::runtime_error *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  void (***v50)(uint64_t);
  std::string::size_type v51;
  std::system_error_vtbl *v52;
  uint64_t v53;
  std::system_error_vtbl *v54;
  std::system_error_vtbl *v55;
  std::ios_base *v56;
  void (__cdecl *v57)(std::system_error *__hidden);
  unsigned __int8 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  std::system_error_vtbl *v62;
  uint64_t v63;
  uint64_t v64;
  std::system_error_vtbl *v65;
  std::system_error_vtbl *v66;
  std::ios_base *v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _BYTE *result;
  __int128 v80;
  unint64_t *v82;
  unint64_t v83;
  std::string *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  AMSCore::URL *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  __int128 v109;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::string *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  std::runtime_error *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  std::runtime_error *v146;
  char *v147;
  _BYTE *v148;
  std::runtime_error *v149;
  uint64_t v150;
  std::runtime_error *v151;
  std::string __what_arg;
  std::system_error v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  void *__p[2];
  __int128 v159;
  int v160;
  _QWORD v161[20];
  std::runtime_error v162;
  std::error_code ec;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  std::error_code v170;

  v169 = *MEMORY[0x1E0C80C00];
  v6 = (char *)operator new(0x148uLL);
  v7 = (unint64_t)v6;
  *(_QWORD *)v6 = AMSCore::HandleDialogResultTask::perform;
  *((_QWORD *)v6 + 1) = AMSCore::HandleDialogResultTask::perform;
  v148 = v6 + 296;
  v149 = (std::runtime_error *)(v6 + 152);
  v8 = v6 + 264;
  v9 = v6 + 280;
  v150 = (uint64_t)(v6 + 16);
  v151 = (std::runtime_error *)(v6 + 248);
  *(_OWORD *)(v6 + 232) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *a3;
  v11 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  do
    v12 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v12 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  v146 = (std::runtime_error *)(v6 + 24);
  *((_QWORD *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v153, v150);
  *a1 = v153.std::runtime_error;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__what_arg);
  v13 = __what_arg.__r_.__value_.__r.__words[0];
  if (*(int *)(__what_arg.__r_.__value_.__r.__words[0] + 8) <= 2)
  {
    v144 = v10;
    v14 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v15 = MEMORY[0x1E0DE4FE0] + 64;
    v16 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v17 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v161[0] = MEMORY[0x1E0DE4FE0] + 64;
    v153.__vftable = v16;
    *(std::system_error_vtbl **)((char *)&v153.__vftable + (unint64_t)v16[-1].~system_error) = v17;
    v18 = (std::ios_base *)((char *)&v153 + (unint64_t)v153.__vftable[-1].~system_error);
    std::ios_base::init(v18, &v153.__imp_);
    v18[1].__vftable = 0;
    v18[1].__fmtflags_ = -1;
    v153.__vftable = v14 + 1;
    v161[0] = v15;
    std::streambuf::basic_streambuf();
    v19 = MEMORY[0x1E0DE4FB8];
    v153.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    *(_OWORD *)__p = 0u;
    v159 = 0u;
    v160 = 16;
    v20 = v153.__vftable[-1].~system_error;
    if ((v21 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v153, (uint64_t)"Handling dialog result. result = ", 33);
    LOBYTE(v162.__vftable) = 123;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v153, (uint64_t)&v162, 1);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v153, (uint64_t)"\"DialogResult\": ", 16);
    v22 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v153, (uint64_t)"{\"selectedActionIdentifier:\" ", 29);
    v23 = *(_QWORD *)(v7 + 232);
    v26 = *(_QWORD *)(v23 + 168);
    v24 = v23 + 168;
    v25 = v26;
    v27 = *(char *)(v24 + 23);
    if (v27 >= 0)
      v28 = v24;
    else
      v28 = v25;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(v24 + 23);
    else
      v29 = *(_QWORD *)(v24 + 8);
    v30 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v22, v28, v29);
    LOBYTE(v162.__vftable) = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v30, (uint64_t)&v162, 1);
    LOBYTE(v162.__vftable) = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v153, (uint64_t)&v162, 1);
    v31 = v156;
    v32 = (char *)&v153 + (unint64_t)v153.__vftable[-1].~system_error;
    if ((v32[32] & 5) != 0)
    {
      v33 = -1;
    }
    else
    {
      (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v32 + 5)
                                                                                                 + 32))(&v162, *((_QWORD *)v32 + 5), 0, 1, 16);
      v33 = v168;
    }
    v162.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v162.__imp_.__imp_) = 2;
    *(_QWORD *)&ec.__val_ = v31;
    ec.__cat_ = (const std::error_category *)v33;
    (*(void (**)(_QWORD, const char *, uint64_t, std::runtime_error *))(**(_QWORD **)(v13 + 16) + 16))(*(_QWORD *)(v13 + 16), "dialog", 6, &v162);
    v153.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E0DE4F60];
    *(std::system_error_vtbl **)((char *)&v153.__vftable + (unint64_t)v153.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
    v153.__imp_.__imp_ = (const char *)(v19 + 16);
    if (SBYTE7(v159) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v161);
    v10 = v144;
  }
  size = (std::__shared_weak_count *)__what_arg.__r_.__value_.__l.__size_;
  if (__what_arg.__r_.__value_.__l.__size_)
  {
    v35 = (unint64_t *)(__what_arg.__r_.__value_.__l.__size_ + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v38 = *(_QWORD *)(v7 + 232);
  v37 = *(_QWORD *)(v7 + 240);
  if (v37)
  {
    v39 = (unint64_t *)(v37 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_QWORD *)(v7 + 264) = v38;
  *(_QWORD *)(v7 + 272) = v37;
  *(_QWORD *)(v7 + 280) = v10;
  *(_QWORD *)(v7 + 288) = v11;
  v41 = (char *)operator new(0x1E0uLL);
  v42 = (unint64_t)v41;
  v43 = v41 + 408;
  v44 = (std::string *)(v41 + 152);
  v45 = (std::runtime_error *)(v41 + 312);
  v46 = v41 + 392;
  v47 = *(_QWORD *)(v7 + 264);
  *((_QWORD *)v41 + 55) = *(_QWORD *)(v7 + 272);
  *v8 = 0;
  v8[1] = 0;
  v48 = *(_QWORD *)(v7 + 288);
  v143 = *(_QWORD *)(v7 + 280);
  v145 = v41 + 424;
  *v9 = 0;
  v9[1] = 0;
  do
    v49 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v49 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v41[24] = 0;
  v50 = (void (***)(uint64_t))(v41 + 24);
  v41[104] = 0;
  *((_QWORD *)v41 + 14) = 0;
  *((_QWORD *)v41 + 18) = 0;
  v147 = v41 + 16;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v153, (uint64_t)(v41 + 16));
  *v151 = v153.std::runtime_error;
  if (!*(_BYTE *)(v47 + 160))
  {
    if (*(_BYTE *)(v42 + 104) && !*(_BYTE *)(v42 + 96))
      (**v50)(v42 + 24);
    *(_BYTE *)(v42 + 96) = 1;
    *(_BYTE *)(v42 + 104) = 1;
    goto LABEL_106;
  }
  AMSCore::ServiceProvider<AMSCore::IOpenURLProvider>::getDefault(v46);
  v142 = v45;
  if (*v46)
  {
    if (!*(_BYTE *)(v47 + 160))
      goto LABEL_151;
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__what_arg);
    v51 = __what_arg.__r_.__value_.__r.__words[0];
    if (*(int *)(__what_arg.__r_.__value_.__r.__words[0] + 8) <= 2)
    {
      v139 = v46;
      v140 = v48;
      v138 = v44;
      v52 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v53 = MEMORY[0x1E0DE4FE0] + 64;
      v54 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v55 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v161[0] = MEMORY[0x1E0DE4FE0] + 64;
      v153.__vftable = v54;
      *(std::system_error_vtbl **)((char *)&v153.__vftable + (unint64_t)v54[-1].~system_error) = v55;
      v56 = (std::ios_base *)((char *)&v153 + (unint64_t)v153.__vftable[-1].~system_error);
      std::ios_base::init(v56, &v153.__imp_);
      v56[1].__vftable = 0;
      v56[1].__fmtflags_ = -1;
      v153.__vftable = v52 + 1;
      v161[0] = v53;
      std::streambuf::basic_streambuf();
      v153.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      *(_OWORD *)__p = 0u;
      v159 = 0u;
      v160 = 16;
      v57 = v153.__vftable[-1].~system_error;
      v46 = v139;
      if ((v58 & 1) == 0
      {
        v46 = v139;
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v153, (uint64_t)"Opening a deep link. deepLink = ", 32);
      AMSCore::operator<<(&v153, v47);
      v59 = v156;
      v60 = (char *)&v153 + (unint64_t)v153.__vftable[-1].~system_error;
      if ((v60[32] & 5) != 0)
      {
        v61 = -1;
      }
      else
      {
        (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v60 + 5) + 32))(&v162, *((_QWORD *)v60 + 5), 0, 1, 16);
        v61 = v168;
      }
      v162.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v162.__imp_.__imp_) = 2;
      *(_QWORD *)&ec.__val_ = v59;
      ec.__cat_ = (const std::error_category *)v61;
      (*(void (**)(_QWORD, const char *, uint64_t, std::runtime_error *))(**(_QWORD **)(v51 + 16) + 16))(*(_QWORD *)(v51 + 16), "dialog", 6, &v162);
      v153.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E0DE4F60];
      *(std::system_error_vtbl **)((char *)&v153.__vftable + (unint64_t)v153.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
      v153.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      if (SBYTE7(v159) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v161);
      v48 = v140;
      v44 = v138;
    }
    v75 = (std::__shared_weak_count *)__what_arg.__r_.__value_.__l.__size_;
    v45 = v142;
    if (__what_arg.__r_.__value_.__l.__size_)
    {
      v76 = (unint64_t *)(__what_arg.__r_.__value_.__l.__size_ + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (!*(_BYTE *)(v47 + 160))
      goto LABEL_151;
    v78 = *v46;
    AMSCore::URL::URL(v44, (const AMSCore::URL *)v47);
    *(_DWORD *)(v42 + 304) = *(_DWORD *)(v47 + 152);
    *(_QWORD *)(v42 + 424) = v143;
    *(_QWORD *)(v42 + 432) = v48;
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, std::string *, char *))(*(_QWORD *)v78 + 16))(v78, v44, v145);
    v80 = *(_OWORD *)v43;
    *(_OWORD *)(v42 + 448) = *(_OWORD *)v43;
    *(_QWORD *)v43 = 0;
    *((_QWORD *)v43 + 1) = 0;
    if (!atomic_load((unint64_t *)(v80 + 96)))
    {
      v43[64] = 0;
      v82 = (unint64_t *)(*(_QWORD *)(v42 + 448) + 96);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v42, v82));
      if (!v83)
        goto LABEL_107;
    }
    v84 = v44;
    v85 = *(_QWORD *)(v42 + 448);
    if (!*(_BYTE *)(v85 + 88))
      goto LABEL_151;
    v86 = *(unsigned __int8 *)(v85 + 80);
    if (!*(_BYTE *)(v85 + 80))
    {
      std::runtime_error::runtime_error(v142, (const std::runtime_error *)(v85 + 8));
      *(_OWORD *)(v42 + 328) = *(_OWORD *)(v85 + 24);
      *(_QWORD *)(v42 + 312) = off_1E2521330;
      v87 = (_QWORD *)(v85 + 48);
      v88 = *(_QWORD *)(v85 + 48);
      v89 = v42 + 352;
      *(_QWORD *)(v42 + 344) = *(_QWORD *)(v85 + 40);
      *(_QWORD *)(v42 + 352) = v88;
      v90 = *(_QWORD *)(v85 + 56);
      *(_QWORD *)(v42 + 360) = v90;
      if (v90)
      {
        *(_QWORD *)(v88 + 16) = v89;
        *(_QWORD *)(v85 + 40) = v87;
        *v87 = 0;
        *(_QWORD *)(v85 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v42 + 344) = v89;
      }
      v91 = *(_QWORD *)(v42 + 448);
      *(_OWORD *)(v42 + 368) = *(_OWORD *)(v91 + 64);
      *(_QWORD *)(v91 + 64) = 0;
      *(_QWORD *)(v91 + 72) = 0;
    }
    *(_BYTE *)(v42 + 384) = v86;
    if (*(_BYTE *)(v42 + 104))
    {
      v92 = (AMSCore::URL *)v84;
      if (*(_BYTE *)(v42 + 96))
      {
        *(_BYTE *)(v42 + 104) = 0;
        if (v86)
        {
LABEL_77:
          *(_BYTE *)(v42 + 96) = v86;
          *(_BYTE *)(v42 + 104) = 1;
          goto LABEL_86;
        }
      }
      else
      {
        (**(void (***)(uint64_t))(v42 + 24))(v42 + 24);
        v86 = *(unsigned __int8 *)(v42 + 384);
        *(_BYTE *)(v42 + 104) = 0;
        if (v86)
          goto LABEL_77;
      }
    }
    else
    {
      v92 = (AMSCore::URL *)v84;
      if (v86)
        goto LABEL_77;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v42 + 24), v142);
    v93 = *(_QWORD *)(v42 + 352);
    *(_QWORD *)(v42 + 64) = v93;
    v94 = v42 + 64;
    *(_OWORD *)(v42 + 40) = *(_OWORD *)(v42 + 328);
    *(_QWORD *)(v42 + 24) = off_1E2521330;
    *(_QWORD *)(v42 + 56) = *(_QWORD *)(v42 + 344);
    v95 = *(_QWORD *)(v42 + 360);
    *(_QWORD *)(v42 + 72) = v95;
    if (v95)
    {
      *(_QWORD *)(v93 + 16) = v94;
      *(_QWORD *)(v42 + 344) = v42 + 352;
      *(_QWORD *)(v42 + 352) = 0;
      *(_QWORD *)(v42 + 360) = 0;
    }
    else
    {
      *(_QWORD *)(v42 + 56) = v94;
    }
    *(_OWORD *)(v42 + 80) = *(_OWORD *)(v42 + 368);
    *(_QWORD *)(v42 + 368) = 0;
    *(_QWORD *)(v42 + 376) = 0;
    v96 = *(unsigned __int8 *)(v42 + 384);
    *(_BYTE *)(v42 + 96) = 0;
    *(_BYTE *)(v42 + 104) = 1;
    if (!v96)
      ((void (*)(std::runtime_error *))v142->~runtime_error)(v142);
LABEL_86:
    v97 = *(_QWORD *)(v42 + 456);
    if (v97)
    {
      v98 = (unint64_t *)(v97 + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        v100 = *(std::__shared_weak_count **)(v42 + 456);
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v101 = *(std::__shared_weak_count **)(v42 + 416);
    if (v101)
    {
      p_shared_owners = (unint64_t *)&v101->__shared_owners_;
      do
        v103 = __ldaxr(p_shared_owners);
      while (__stlxr(v103 - 1, p_shared_owners));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = *(std::__shared_weak_count **)(v42 + 432);
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    AMSCore::URL::~URL(v92);
    v48 = 0;
    v74 = *(std::__shared_weak_count **)(v42 + 400);
    if (!v74)
      goto LABEL_106;
    goto LABEL_102;
  }
  v141 = v48;
  v62 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v63 = MEMORY[0x1E0DE4FE0] + 64;
  v64 = MEMORY[0x1E0DE4F60];
  v65 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v66 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v161[0] = MEMORY[0x1E0DE4FE0] + 64;
  v153.__vftable = v65;
  *(std::system_error_vtbl **)((char *)&v153.__vftable + (unint64_t)v65[-1].~system_error) = v66;
  v67 = (std::ios_base *)((char *)&v153 + (unint64_t)v153.__vftable[-1].~system_error);
  std::ios_base::init(v67, &v153.__imp_);
  v67[1].__vftable = 0;
  v67[1].__fmtflags_ = -1;
  v153.__vftable = v62 + 1;
  v161[0] = v63;
  std::streambuf::basic_streambuf();
  v68 = MEMORY[0x1E0DE4FB8];
  v153.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v159 = 0u;
  v160 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v153, (uint64_t)"Failed to open a URL. An IOpenURLProvider doesn't exist.", 56);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v153.__imp_, &__what_arg);
  v153.__vftable = *(std::system_error_vtbl **)v64;
  *(std::system_error_vtbl **)((char *)&v153.__vftable + (unint64_t)v153.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v64 + 24);
  v153.__imp_.__imp_ = (const char *)(v68 + 16);
  if (SBYTE7(v159) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v161);
  v170.__cat_ = (const std::error_category *)&AMSCore::Error::Category::dialog(void)::instance;
  *(_QWORD *)&v170.__val_ = 700;
  std::system_error::system_error(&v153, v170, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v155 = 0;
  v156 = 0;
  v153.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v154 = &v155;
  v157 = 0uLL;
  std::runtime_error::runtime_error(&v162, &v153);
  ec = v153.__ec_;
  v69 = (unsigned int *)v155;
  v162.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v164 = v154;
  v165 = v155;
  v166 = v156;
  if (v156)
  {
    *(_QWORD *)(v155 + 16) = &v165;
    v69 = 0;
    v154 = &v155;
    v155 = 0;
    v156 = 0;
  }
  else
  {
    v164 = &v165;
  }
  v167 = v157;
  v157 = 0uLL;
  v153.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v154, v69);
  MEMORY[0x18D7898AC](&v153);
  v48 = v141;
  if (*(_BYTE *)(v42 + 104))
  {
    if (!*(_BYTE *)(v42 + 96))
      (**v50)(v42 + 24);
    *(_BYTE *)(v42 + 104) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(v42 + 24), &v162);
  v71 = v164;
  v70 = v165;
  *(_QWORD *)(v42 + 64) = v165;
  v72 = v42 + 64;
  *(std::error_code *)(v42 + 40) = ec;
  *(_QWORD *)(v42 + 24) = off_1E2521330;
  *(_QWORD *)(v42 + 56) = v71;
  v73 = v166;
  *(_QWORD *)(v42 + 72) = v166;
  if (v73)
  {
    *(_QWORD *)(v70 + 16) = v72;
    v70 = 0;
    v164 = &v165;
    v165 = 0;
    v166 = 0;
  }
  else
  {
    *(_QWORD *)(v42 + 56) = v72;
  }
  *(_OWORD *)(v42 + 80) = v167;
  v167 = 0uLL;
  *(_BYTE *)(v42 + 96) = 0;
  *(_BYTE *)(v42 + 104) = 1;
  v162.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v164, (unsigned int *)v70);
  MEMORY[0x18D7898AC](&v162);
  v45 = v142;
  v74 = *(std::__shared_weak_count **)(v42 + 400);
  if (!v74)
    goto LABEL_106;
LABEL_102:
  v107 = (unint64_t *)&v74->__shared_owners_;
  do
    v108 = __ldaxr(v107);
  while (__stlxr(v108 - 1, v107));
  if (!v108)
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
LABEL_106:
  *(_QWORD *)(v42 + 464) = v48;
  *(_QWORD *)(v42 + 312) = v147;
  *(_QWORD *)v42 = 0;
  result = AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v45);
LABEL_107:
  v109 = *(_OWORD *)(v7 + 248);
  *(_OWORD *)v148 = v109;
  v151->__vftable = 0;
  v151->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v109 + 96)))
    goto LABEL_111;
  v148[24] = 0;
  v111 = (unint64_t *)(*(_QWORD *)(v7 + 296) + 96);
  do
    v112 = __ldaxr(v111);
  while (__stlxr(v7, v111));
  if (v112)
  {
LABEL_111:
    v113 = *(_QWORD *)v148;
    if (*(_BYTE *)(*(_QWORD *)v148 + 88))
    {
      v114 = *(unsigned __int8 *)(v113 + 80);
      if (!*(_BYTE *)(v113 + 80))
      {
        std::runtime_error::runtime_error(v149, (const std::runtime_error *)(v113 + 8));
        *(_OWORD *)(v7 + 168) = *(_OWORD *)(v113 + 24);
        v115 = (_QWORD *)(v113 + 48);
        v116 = *(_QWORD *)(v113 + 48);
        *(_QWORD *)(v7 + 192) = v116;
        v117 = v7 + 192;
        *(_QWORD *)(v7 + 152) = off_1E2521330;
        *(_QWORD *)(v7 + 184) = *(_QWORD *)(v113 + 40);
        v118 = *(_QWORD *)(v113 + 56);
        *(_QWORD *)(v7 + 200) = v118;
        if (v118)
        {
          *(_QWORD *)(v116 + 16) = v117;
          *(_QWORD *)(v113 + 40) = v115;
          *v115 = 0;
          *(_QWORD *)(v113 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 184) = v117;
        }
        v119 = *(_QWORD *)(v7 + 296);
        *(_OWORD *)(v7 + 208) = *(_OWORD *)(v119 + 64);
        *(_QWORD *)(v119 + 64) = 0;
        *(_QWORD *)(v119 + 72) = 0;
      }
      *(_BYTE *)(v7 + 224) = v114;
      if (*(_BYTE *)(v7 + 104))
      {
        if (!*(_BYTE *)(v7 + 96))
        {
          (**(void (***)(std::runtime_error *))(v7 + 24))(v146);
          v114 = *(unsigned __int8 *)(v7 + 224);
        }
        *(_BYTE *)(v7 + 104) = 0;
      }
      if (v114)
      {
        *(_BYTE *)(v7 + 96) = v114;
        *(_BYTE *)(v7 + 104) = 1;
      }
      else
      {
        std::runtime_error::runtime_error(v146, v149);
        v120 = (_QWORD *)(v7 + 192);
        v121 = *(_QWORD *)(v7 + 192);
        *(_QWORD *)(v7 + 64) = v121;
        v122 = v7 + 64;
        *(_OWORD *)(v7 + 40) = *(_OWORD *)(v7 + 168);
        *(_QWORD *)(v7 + 24) = off_1E2521330;
        *(_QWORD *)(v7 + 56) = *(_QWORD *)(v7 + 184);
        v123 = *(_QWORD *)(v7 + 200);
        *(_QWORD *)(v7 + 72) = v123;
        if (v123)
        {
          *(_QWORD *)(v121 + 16) = v122;
          *(_QWORD *)(v7 + 184) = v120;
          *v120 = 0;
          *(_QWORD *)(v7 + 200) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 56) = v122;
        }
        *(_OWORD *)(v7 + 80) = *(_OWORD *)(v7 + 208);
        *(_QWORD *)(v7 + 208) = 0;
        *(_QWORD *)(v7 + 216) = 0;
        v124 = *(unsigned __int8 *)(v7 + 224);
        *(_BYTE *)(v7 + 96) = 0;
        *(_BYTE *)(v7 + 104) = 1;
        if (!v124)
          ((void (*)(std::runtime_error *))v149->~runtime_error)(v149);
      }
      v125 = *(_QWORD *)(v7 + 304);
      if (v125)
      {
        v126 = (unint64_t *)(v125 + 8);
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          v128 = *(std::__shared_weak_count **)(v7 + 304);
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      v129 = *(std::__shared_weak_count **)(v7 + 256);
      if (!v129)
        goto LABEL_137;
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
        v132 = *(std::__shared_weak_count **)(v7 + 288);
        if (!v132)
          goto LABEL_141;
      }
      else
      {
LABEL_137:
        v132 = *(std::__shared_weak_count **)(v7 + 288);
        if (!v132)
          goto LABEL_141;
      }
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
        v135 = *(std::__shared_weak_count **)(v7 + 272);
        if (v135)
        {
LABEL_142:
          v136 = (unint64_t *)&v135->__shared_owners_;
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
LABEL_149:
        *(_QWORD *)(v7 + 312) = 0;
        *(_QWORD *)(v7 + 152) = v150;
        *(_QWORD *)v7 = 0;
        return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v149);
      }
LABEL_141:
      v135 = *(std::__shared_weak_count **)(v7 + 272);
      if (v135)
        goto LABEL_142;
      goto LABEL_149;
    }
LABEL_151:
    __break(1u);
  }
  return result;
}

void sub_18CC4ADB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_BYTE *AMSCore::HandleDialogResultTask::perform(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  std::runtime_error *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  v1 = *((_QWORD *)result + 37);
  if (*(_BYTE *)(v1 + 88))
  {
    v2 = result;
    v3 = (std::runtime_error *)(result + 152);
    v4 = *(unsigned __int8 *)(v1 + 80);
    if (!*(_BYTE *)(v1 + 80))
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 152), (const std::runtime_error *)(v1 + 8));
      *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
      v5 = (_QWORD *)(v1 + 48);
      v6 = *(_QWORD *)(v1 + 48);
      *((_QWORD *)v2 + 24) = v6;
      v7 = v2 + 192;
      *((_QWORD *)v2 + 19) = off_1E2521330;
      *((_QWORD *)v2 + 23) = *(_QWORD *)(v1 + 40);
      v8 = *(_QWORD *)(v1 + 56);
      *((_QWORD *)v2 + 25) = v8;
      if (v8)
      {
        *(_QWORD *)(v6 + 16) = v7;
        *(_QWORD *)(v1 + 40) = v5;
        *v5 = 0;
        *(_QWORD *)(v1 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 23) = v7;
      }
      v9 = *((_QWORD *)v2 + 37);
      *((_OWORD *)v2 + 13) = *(_OWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v9 + 72) = 0;
    }
    v2[224] = v4;
    if (v2[104])
    {
      if (!v2[96])
      {
        (**((void (***)(uint64_t))v2 + 3))((uint64_t)(v2 + 24));
        v4 = v2[224];
      }
      v2[104] = 0;
    }
    if (v4)
    {
      v2[96] = v4;
      v2[104] = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), v3);
      v10 = v2 + 192;
      v11 = *((_QWORD *)v2 + 24);
      *((_QWORD *)v2 + 8) = v11;
      v12 = v2 + 64;
      *(_OWORD *)(v2 + 40) = *(_OWORD *)(v2 + 168);
      *((_QWORD *)v2 + 3) = off_1E2521330;
      *((_QWORD *)v2 + 7) = *((_QWORD *)v2 + 23);
      v13 = *((_QWORD *)v2 + 25);
      *((_QWORD *)v2 + 9) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *((_QWORD *)v2 + 23) = v10;
        *v10 = 0;
        *((_QWORD *)v2 + 25) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 7) = v12;
      }
      *((_OWORD *)v2 + 5) = *((_OWORD *)v2 + 13);
      *((_QWORD *)v2 + 26) = 0;
      *((_QWORD *)v2 + 27) = 0;
      v14 = v2[224];
      v2[96] = 0;
      v2[104] = 1;
      if (!v14)
        ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
    }
    v15 = *((_QWORD *)v2 + 38);
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        v18 = (std::__shared_weak_count *)*((_QWORD *)v2 + 38);
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)v2 + 32);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)v2 + 36);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)v2 + 34);
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    *((_QWORD *)v2 + 39) = 0;
    *((_QWORD *)v2 + 19) = v2 + 16;
    *(_QWORD *)v2 = 0;
    return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::HandleDialogResultTask::perform(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  if (*__p)
  {
    v2 = __p[38];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[38];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[32];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[36];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[34];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      v12 = 0;
    }
  }
  else
  {
    v12 = (std::__shared_weak_count *)__p[39];
  }
  v15 = (_QWORD *)__p[18];
  if (v15 == __p + 15)
  {
    v16 = 4;
    v15 = __p + 15;
    goto LABEL_28;
  }
  if (v15)
  {
    v16 = 5;
LABEL_28:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  if (*((_BYTE *)__p + 104) && !*((_BYTE *)__p + 96))
    (*(void (**)(char *))__p[3])((char *)__p + 24);
  do
  {
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v18)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v21 = (std::__shared_weak_count *)__p[30];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(__p);
}

_BYTE *AMSCore::`anonymous namespace'::handleDeepLink(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  std::runtime_error *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;

  v1 = *((_QWORD *)result + 56);
  if (*(_BYTE *)(v1 + 88))
  {
    v2 = result;
    v3 = (std::runtime_error *)(result + 312);
    v4 = *(unsigned __int8 *)(v1 + 80);
    if (!*(_BYTE *)(v1 + 80))
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 312), (const std::runtime_error *)(v1 + 8));
      *(_OWORD *)(v2 + 328) = *(_OWORD *)(v1 + 24);
      *((_QWORD *)v2 + 39) = off_1E2521330;
      v5 = (_QWORD *)(v1 + 48);
      v6 = *(_QWORD *)(v1 + 48);
      v7 = v2 + 352;
      *((_QWORD *)v2 + 43) = *(_QWORD *)(v1 + 40);
      *((_QWORD *)v2 + 44) = v6;
      v8 = *(_QWORD *)(v1 + 56);
      *((_QWORD *)v2 + 45) = v8;
      if (v8)
      {
        *(_QWORD *)(v6 + 16) = v7;
        *(_QWORD *)(v1 + 40) = v5;
        *v5 = 0;
        *(_QWORD *)(v1 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 43) = v7;
      }
      v9 = *((_QWORD *)v2 + 56);
      *((_OWORD *)v2 + 23) = *(_OWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v9 + 72) = 0;
    }
    v2[384] = v4;
    if (v2[104])
    {
      if (!v2[96])
      {
        (**((void (***)(uint64_t))v2 + 3))((uint64_t)(v2 + 24));
        v4 = v2[384];
      }
      v2[104] = 0;
    }
    if (v4)
    {
      v2[96] = v4;
      v2[104] = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), v3);
      v10 = *((_QWORD *)v2 + 44);
      *((_QWORD *)v2 + 8) = v10;
      v11 = v2 + 64;
      *(_OWORD *)(v2 + 40) = *(_OWORD *)(v2 + 328);
      *((_QWORD *)v2 + 3) = off_1E2521330;
      *((_QWORD *)v2 + 7) = *((_QWORD *)v2 + 43);
      v12 = *((_QWORD *)v2 + 45);
      *((_QWORD *)v2 + 9) = v12;
      if (v12)
      {
        *(_QWORD *)(v10 + 16) = v11;
        *((_QWORD *)v2 + 43) = v2 + 352;
        *((_QWORD *)v2 + 44) = 0;
        *((_QWORD *)v2 + 45) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 7) = v11;
      }
      *((_OWORD *)v2 + 5) = *((_OWORD *)v2 + 23);
      *((_QWORD *)v2 + 46) = 0;
      *((_QWORD *)v2 + 47) = 0;
      v13 = v2[384];
      v2[96] = 0;
      v2[104] = 1;
      if (!v13)
        ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
    }
    v14 = *((_QWORD *)v2 + 57);
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        v17 = (std::__shared_weak_count *)*((_QWORD *)v2 + 57);
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)v2 + 52);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)v2 + 54);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    AMSCore::URL::~URL((AMSCore::URL *)(v2 + 152));
    v24 = (std::__shared_weak_count *)*((_QWORD *)v2 + 50);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *((_QWORD *)v2 + 58) = 0;
    *((_QWORD *)v2 + 39) = v2 + 16;
    *(_QWORD *)v2 = 0;
    return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  _BYTE *v1;
  AMSCore::URL *v2;
  AMSCore::URL ***v3;
  uint64_t v4;
  void (***v5)(uint64_t);
  char v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  AMSCore::URL *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  int v65;

  v1 = result;
  v2 = (AMSCore::URL *)(result + 840);
  v3 = (AMSCore::URL ***)(result + 1120);
  if (result[1168])
  {
    v4 = *((_QWORD *)result + 144);
    if (*(_BYTE *)(v4 + 88))
    {
      v5 = (void (***)(uint64_t))(result + 992);
      v6 = *(_BYTE *)(v4 + 80);
      if (!v6)
      {
        std::runtime_error::runtime_error((std::runtime_error *)result + 62, (const std::runtime_error *)(v4 + 8));
        *((_OWORD *)v1 + 63) = *(_OWORD *)(v4 + 24);
        *((_QWORD *)v1 + 124) = off_1E2521330;
        v7 = (_QWORD *)(v4 + 48);
        v8 = *(_QWORD *)(v4 + 48);
        *((_QWORD *)v1 + 128) = *(_QWORD *)(v4 + 40);
        v9 = v1 + 1032;
        *((_QWORD *)v1 + 129) = v8;
        v10 = *(_QWORD *)(v4 + 56);
        *((_QWORD *)v1 + 130) = v10;
        if (v10)
        {
          *(_QWORD *)(v8 + 16) = v9;
          *(_QWORD *)(v4 + 40) = v7;
          *v7 = 0;
          *(_QWORD *)(v4 + 56) = 0;
        }
        else
        {
          *((_QWORD *)v1 + 128) = v9;
        }
        v17 = *((_QWORD *)v1 + 144);
        *(_OWORD *)(v1 + 1048) = *(_OWORD *)(v17 + 64);
        *(_QWORD *)(v17 + 64) = 0;
        *(_QWORD *)(v17 + 72) = 0;
      }
      v1[1064] = v6;
      v18 = *((_QWORD *)v1 + 145);
      if (v18)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          v21 = (std::__shared_weak_count *)*((_QWORD *)v1 + 145);
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)v1 + 139);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      AMSCore::URL::~URL((AMSCore::URL *)(v1 + 688));
      if (!v1[1064])
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v44);
        AMSCore::Logger::log<char [39],AMSCore::Error>(v44, 4, (uint64_t)"networking", 10, "Failed to open a finance URL. error = ", (uint64_t)(v1 + 992));
        v25 = v45;
        if (v45)
        {
          v26 = (unint64_t *)&v45->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if (!v1[1064])
          (**v5)((uint64_t)(v1 + 992));
      }
      LOBYTE(v44) = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 1;
      if (v1[488])
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
        v1[488] = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v1 + 24), (uint64_t)&v44);
      v1[488] = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v44);
      AMSCore::URL::~URL(v2);
      v28 = (std::__shared_weak_count *)*((_QWORD *)v1 + 137);
      if (!v28)
        goto LABEL_61;
      goto LABEL_57;
    }
LABEL_64:
    __break(1u);
    return result;
  }
  v11 = *((_QWORD *)result + 142);
  if (!*(_BYTE *)(v11 + 88))
    goto LABEL_64;
  v12 = *(_BYTE *)(v11 + 80);
  if (!v12)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 840), (const std::runtime_error *)(v11 + 8));
    *(_OWORD *)(v1 + 856) = *(_OWORD *)(v11 + 24);
    *((_QWORD *)v1 + 105) = off_1E2521330;
    v13 = (_QWORD *)(v11 + 48);
    v14 = *(_QWORD *)(v11 + 48);
    *((_QWORD *)v1 + 109) = *(_QWORD *)(v11 + 40);
    v15 = v1 + 880;
    *((_QWORD *)v1 + 110) = v14;
    v16 = *(_QWORD *)(v11 + 56);
    *((_QWORD *)v1 + 111) = v16;
    if (v16)
    {
      *(_QWORD *)(v14 + 16) = v15;
      *(_QWORD *)(v11 + 40) = v13;
      *v13 = 0;
      *(_QWORD *)(v11 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v1 + 109) = v15;
    }
    v29 = *((_QWORD *)v1 + 142);
    *((_OWORD *)v1 + 56) = *(_OWORD *)(v29 + 64);
    *(_QWORD *)(v29 + 64) = 0;
    *(_QWORD *)(v29 + 72) = 0;
  }
  v1[912] = v12;
  v30 = *((_QWORD *)v1 + 143);
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = (std::__shared_weak_count *)*((_QWORD *)v1 + 143);
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)v1 + 125);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  AMSCore::URL::~URL((AMSCore::URL *)(v1 + 536));
  if (!v1[912])
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v44);
    AMSCore::Logger::log<char [47],AMSCore::Error>(v44, (uint64_t)v2);
    v37 = v45;
    if (v45)
    {
      v38 = (unint64_t *)&v45->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (!v1[912])
      (**(void (***)(AMSCore::URL *))v2)(v2);
  }
  LOBYTE(v44) = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  if (v1[488])
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
    v1[488] = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v1 + 24), (uint64_t)&v44);
  v1[488] = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v44);
  v28 = (std::__shared_weak_count *)*((_QWORD *)v1 + 137);
  if (!v28)
    goto LABEL_61;
LABEL_57:
  v40 = (unint64_t *)&v28->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_61:
  v42 = **v3;
  if (*((_BYTE *)v42 + 160))
  {
    AMSCore::URL::~URL(v42);
    *(_BYTE *)(v43 + 160) = 0;
  }
  *((_QWORD *)v1 + 105) = v1 + 16;
  *(_QWORD *)v1 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v2);
}

void AMSCore::`anonymous namespace'::handleDeepLink(AMSCore::URL *this)
{
  AMSCore::URL *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  AMSCore::URL *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;

  v2 = (AMSCore::URL *)((char *)this + 152);
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 57);
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    AMSCore::URL::~URL(v2);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      v13 = 0;
    }
  }
  else
  {
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  }
  v16 = (AMSCore::URL *)*((_QWORD *)this + 18);
  if (v16 == (AMSCore::URL *)((char *)this + 120))
  {
    v17 = 4;
    v16 = (AMSCore::URL *)((char *)this + 120);
    goto LABEL_28;
  }
  if (v16)
  {
    v17 = 5;
LABEL_28:
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  }
  if (*((_BYTE *)this + 104) && !*((_BYTE *)this + 96))
    (**((void (***)(char *))this + 3))((char *)this + 24);
  do
  {
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v19)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v22 = *((_QWORD *)this + 55);
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      v25 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(this);
}

void AMSCore::AccountsCategoryImpl::~AccountsCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x18D789BDCLL);
}

const char *AMSCore::AccountsCategoryImpl::name(AMSCore::AccountsCategoryImpl *this)
{
  return "ams.accounts";
}

__n128 AMSCore::AccountsCategoryImpl::message@<Q0>(int a1@<W1>, uint64_t a2@<X8>)
{
  __n128 *v4;
  __n128 result;
  char *v6;

  switch(a1)
  {
    case 'd':
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "noAccount");
      break;
    case 'e':
      *(_BYTE *)(a2 + 23) = 20;
      *(_DWORD *)(a2 + 16) = 1684368489;
      v4 = (__n128 *)"authenticationFailed";
      goto LABEL_10;
    case 'f':
      *(_BYTE *)(a2 + 23) = 17;
      result.n128_u64[0] = *(_QWORD *)"saveAccountFailed";
      strcpy((char *)a2, "saveAccountFailed");
      break;
    case 'g':
      v6 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v6;
      *(_OWORD *)(a2 + 8) = xmmword_18CF51B20;
      result.n128_u64[0] = *(_QWORD *)"fetchAccountImageFailed";
      strcpy(v6, "fetchAccountImageFailed");
      break;
    case 'h':
      *(_BYTE *)(a2 + 23) = 20;
      *(_DWORD *)(a2 + 16) = 1919906418;
      v4 = (__n128 *)"underlyingAppleError";
LABEL_10:
      result = *v4;
      *(__n128 *)a2 = *v4;
      *(_BYTE *)(a2 + 20) = 0;
      break;
    case 'j':
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "mismatchAccount");
      break;
    case 'l':
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"acceptPrivacyFailed";
      strcpy((char *)a2, "acceptPrivacyFailed");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "unknown");
      break;
  }
  return result;
}

void AMSCore::BagCategoryImpl::~BagCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x18D789BDCLL);
}

const char *AMSCore::BagCategoryImpl::name(AMSCore::BagCategoryImpl *this)
{
  return "ams.bag";
}

void AMSCore::BagCategoryImpl::message(int a1@<W1>, uint64_t a2@<X8>)
{
  const char *v4;
  char *v5;

  switch(a1)
  {
    case 200:
      *(_BYTE *)(a2 + 23) = 12;
      *(_DWORD *)(a2 + 8) = 1702194273;
      v4 = "invalidValue";
      goto LABEL_7;
    case 202:
      *(_BYTE *)(a2 + 23) = 20;
      strcpy((char *)a2, "keyValueTypeMismatch");
      break;
    case 203:
      *(_BYTE *)(a2 + 23) = 10;
      strcpy((char *)a2, "loadFailed");
      break;
    case 204:
      *(_BYTE *)(a2 + 23) = 12;
      *(_DWORD *)(a2 + 8) = 1735289203;
      v4 = "valueMissing";
LABEL_7:
      *(_QWORD *)a2 = *(_QWORD *)v4;
      *(_BYTE *)(a2 + 12) = 0;
      break;
    case 205:
      v5 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_18CF51B20;
      strcpy(v5, "createBagSnapshotFailed");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "unknown");
      break;
  }
}

void AMSCore::DataCategoryImpl::~DataCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x18D789BDCLL);
}

const char *AMSCore::DataCategoryImpl::name(AMSCore::DataCategoryImpl *this)
{
  return "data.error";
}

void AMSCore::DataCategoryImpl::message(int a1@<W1>, char *a2@<X8>)
{
  if (a1 == 902)
  {
    a2[23] = 16;
    strcpy(a2, "dataTypeMismatch");
  }
  else if (a1 == 901)
  {
    a2[23] = 14;
    strcpy(a2, "getValueFailed");
  }
  else
  {
    a2[23] = 15;
    strcpy(a2, "saveValueFailed");
  }
}

void AMSCore::DialogCategoryImpl::~DialogCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x18D789BDCLL);
}

const char *AMSCore::DialogCategoryImpl::name(AMSCore::DialogCategoryImpl *this)
{
  return "ams.dialog";
}

void AMSCore::DialogCategoryImpl::message(int a1@<W1>, char *a2@<X8>)
{
  if (a1 == 701)
  {
    a2[23] = 15;
    strcpy(a2, "noDefaultAction");
  }
  else if (a1 == 700)
  {
    a2[23] = 13;
    strcpy(a2, "noUrlProvider");
  }
  else
  {
    a2[23] = 7;
    strcpy(a2, "unknown");
  }
}

void AMSCore::Error::makeFromCurrentException(AMSCore::Error *this)
{
  std::exception_ptr v1;
  char v2;

  std::current_exception();
  v1.__ptr_ = &v2;
  std::rethrow_exception(v1);
  __break(1u);
}

void sub_18CC4BDA0(void *a1, std::exception_ptr a2, std::string *__what_arg, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t __what_arg_8, __int128 __what_arg_16, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__pa,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  int ptr;
  const std::runtime_error *v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type *v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::ios_base *v56;
  uint64_t v57;
  size_t v58;
  void *v59;
  std::exception_ptr v60;
  std::string v61;
  std::string v62[3];
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  std::error_code v67;
  std::error_code v68;

  ptr = (int)a2.__ptr_;
  std::exception_ptr::~exception_ptr(&v60);
  if (ptr != 3)
  {
    v49 = __cxa_begin_catch(a1);
    if (ptr == 2)
    {
      v50 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v49 + 16))(v49);
      v51 = MEMORY[0x1E0DE4FE0];
      v52 = MEMORY[0x1E0DE4FE0] + 64;
      v53 = (std::string::size_type *)MEMORY[0x1E0DE4F60];
      v54 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v55 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v66 = MEMORY[0x1E0DE4FE0] + 64;
      v62[0].__r_.__value_.__r.__words[0] = v54;
      *(std::string::size_type *)((char *)v62[0].__r_.__value_.__r.__words + *(_QWORD *)(v54 - 24)) = v55;
      v56 = (std::ios_base *)((char *)v62 + *(_QWORD *)(v62[0].__r_.__value_.__r.__words[0] - 24));
      std::ios_base::init(v56, &v62[0].__r_.__value_.__r.__words[1]);
      v56[1].__vftable = 0;
      v56[1].__fmtflags_ = -1;
      v62[0].__r_.__value_.__r.__words[0] = v51 + 24;
      v66 = v52;
      std::streambuf::basic_streambuf();
      v57 = MEMORY[0x1E0DE4FB8];
      v62[0].__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
      v63 = 0u;
      v64 = 0u;
      v65 = 16;
      v58 = strlen(v50);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v62, (uint64_t)v50, v58);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v62[0].__r_.__value_.__l.__size_, &v61);
      v62[0].__r_.__value_.__r.__words[0] = *v53;
      *(std::string::size_type *)((char *)v62[0].__r_.__value_.__r.__words
                                + *(_QWORD *)(v62[0].__r_.__value_.__r.__words[0] - 24)) = v53[3];
      v62[0].__r_.__value_.__l.__size_ = v57 + 16;
      if (SBYTE7(v64) < 0)
        operator delete((void *)v63);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](&v66);
      v67.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(_QWORD *)&v67.__val_ = 999;
      std::system_error::system_error((std::system_error *)v45, v67, &v61);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_11;
      v59 = (void *)v61.__r_.__value_.__r.__words[0];
    }
    else
    {
      AMSCore::StringUtils::join<char [31]>("An unknown exception occurred.", v62);
      v68.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(_QWORD *)&v68.__val_ = 999;
      std::system_error::system_error((std::system_error *)v45, v68, v62);
      if ((SHIBYTE(v62[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_11:
        *(_QWORD *)v45 = off_1E2521330;
        *(_QWORD *)(v45 + 48) = 0;
        *(_QWORD *)(v45 + 40) = 0;
        *(_QWORD *)(v45 + 32) = v45 + 40;
        *(_QWORD *)(v45 + 56) = 0;
        *(_QWORD *)(v45 + 64) = 0;
        goto LABEL_12;
      }
      v59 = (void *)v62[0].__r_.__value_.__r.__words[0];
    }
    operator delete(v59);
    goto LABEL_11;
  }
  v48 = (const std::runtime_error *)__cxa_begin_catch(a1);
  AMSCore::Error::Error((std::runtime_error *)v45, v48);
LABEL_12:
  __cxa_end_catch();
}

void sub_18CC4BF8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>(uint64_t a1, char *__s)
{
  uint64_t *v2;
  uint64_t *v3;
  size_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  int v18;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = strlen(__s);
  v6 = v2;
  do
  {
    while (1)
    {
      v7 = *((char *)v3 + 55);
      v8 = v7 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v9 = v7 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v10 = v5 >= v9 ? v9 : v5;
      v11 = memcmp(v8, __s, v10);
      if (v11)
        break;
      if (v9 >= v5)
        goto LABEL_17;
LABEL_3:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_18;
    }
    if (v11 < 0)
      goto LABEL_3;
LABEL_17:
    v6 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_18:
  if (v6 == v2)
    return v2;
  v12 = *((char *)v6 + 55);
  if (v12 >= 0)
    v13 = v6 + 4;
  else
    v13 = (const void *)v6[4];
  if (v12 >= 0)
    v14 = *((unsigned __int8 *)v6 + 55);
  else
    v14 = v6[5];
  v15 = strlen(__s);
  v16 = v15;
  if (v15 >= v14)
    v17 = v14;
  else
    v17 = v15;
  v18 = memcmp(v13, __s, v17);
  if (!v18)
  {
    if (v14 <= v16)
      return v6;
    return v2;
  }
  if ((v18 & 0x80000000) == 0)
    return v2;
  return v6;
}

void AMSCore::FairPlayCategoryImpl::~FairPlayCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x18D789BDCLL);
}

const char *AMSCore::FairPlayCategoryImpl::name(AMSCore::FairPlayCategoryImpl *this)
{
  return "ams.fairplay";
}

void AMSCore::FairPlayCategoryImpl::message(AMSCore::FairPlayCategoryImpl *this, int a2)
{
  __asm { BR              X10 }
}

void sub_18CC4C2C0()
{
  char *v0;

  v0[23] = 16;
  strcpy(v0, "mescalInitFailed");
}

void AMSCore::GenericCategoryImpl::~GenericCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x18D789BDCLL);
}

const char *AMSCore::GenericCategoryImpl::name(AMSCore::GenericCategoryImpl *this)
{
  return "ams.error";
}

void AMSCore::GenericCategoryImpl::message(int a1@<W1>, uint64_t a2@<X8>)
{
  int v3;
  const char *v4;
  const char *v5;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 2;
      strcpy((char *)a2, "ok");
      return;
    case 1:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "cancelled");
      return;
    case 2:
      *(_BYTE *)(a2 + 23) = 17;
      strcpy((char *)a2, "inconsistentState");
      return;
    case 3:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "invalidArgument");
      return;
    case 4:
      *(_BYTE *)(a2 + 23) = 11;
      *(_DWORD *)(a2 + 7) = 1701869908;
      v4 = "invalidType";
      goto LABEL_18;
    case 5:
      *(_BYTE *)(a2 + 23) = 5;
      strcpy((char *)a2, "noBag");
      return;
    case 6:
      *(_BYTE *)(a2 + 23) = 10;
      strcpy((char *)a2, "noProvider");
      return;
    case 7:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "notFound");
      return;
    case 8:
      *(_BYTE *)(a2 + 23) = 12;
      *(_DWORD *)(a2 + 8) = 1684370546;
      v5 = "notSupported";
      goto LABEL_16;
    case 9:
      *(_BYTE *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1701669236;
      v3 = 1953853285;
      goto LABEL_22;
    case 10:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "userCancelled");
      return;
    case 11:
      *(_BYTE *)(a2 + 23) = 19;
      strcpy((char *)a2, "failedToGetDeviceId");
      return;
    case 12:
      *(_BYTE *)(a2 + 23) = 12;
      *(_DWORD *)(a2 + 8) = 1735289203;
      v5 = "valueMissing";
LABEL_16:
      *(_QWORD *)a2 = *(_QWORD *)v5;
      *(_BYTE *)(a2 + 12) = 0;
      return;
    case 13:
      *(_BYTE *)(a2 + 23) = 11;
      *(_DWORD *)(a2 + 7) = 2037542765;
      v4 = "outOfMemory";
LABEL_18:
      *(_QWORD *)a2 = *(_QWORD *)v4;
      *(_BYTE *)(a2 + 11) = 0;
      return;
    case 14:
      *(_BYTE *)(a2 + 23) = 4;
      strcpy((char *)a2, "busy");
      return;
    case 15:
      *(_BYTE *)(a2 + 23) = 6;
      strcpy((char *)a2, "exists");
      return;
    case 16:
      *(_BYTE *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1917153129;
      v3 = 1919906418;
      goto LABEL_22;
    default:
      *(_BYTE *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1852534389;
      v3 = 1853321070;
LABEL_22:
      *(_DWORD *)(a2 + 3) = v3;
      *(_BYTE *)(a2 + 7) = 0;
      return;
  }
}

uint64_t AMSCore::make_error_code(uint64_t result)
{
  return result;
}

{
  return result;
}

void AMSCore::MetricsCategoryImpl::~MetricsCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x18D789BDCLL);
}

const char *AMSCore::MetricsCategoryImpl::name(AMSCore::MetricsCategoryImpl *this)
{
  return "ams.fairplay";
}

double AMSCore::MetricsCategoryImpl::message@<D0>(int a1@<W1>, uint64_t a2@<X8>)
{
  char *v4;
  double result;

  if (a1 == 1002)
  {
    v4 = (char *)operator new(0x20uLL);
    *(_QWORD *)a2 = v4;
    *(_OWORD *)(a2 + 8) = xmmword_18CF51B50;
    result = *(double *)"invalidMetricsIdentifier";
    strcpy(v4, "invalidMetricsIdentifier");
  }
  else if (a1 == 1001)
  {
    *(_BYTE *)(a2 + 23) = 14;
    strcpy((char *)a2, "metricsDbError");
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 18;
    result = *(double *)"enqueueEventFailed";
    strcpy((char *)a2, "enqueueEventFailed");
  }
  return result;
}

void AMSCore::NetworkCategoryImpl::~NetworkCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x18D789BDCLL);
}

const char *AMSCore::NetworkCategoryImpl::name(AMSCore::NetworkCategoryImpl *this)
{
  return "ams.network";
}

void AMSCore::NetworkCategoryImpl::message(AMSCore::NetworkCategoryImpl *this, int a2)
{
  __asm { BR              X10 }
}

void sub_18CC4CA54()
{
  char *v0;

  v0[23] = 14;
  strcpy(v0, "invalidRequest");
}

void AMSCore::EraseProvisioningTask::perform(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v2 = __p + 120;
  v3 = (char *)*((_QWORD *)__p + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[104])
    v5 = __p[96] == 0;
  else
    v5 = 0;
  if (v5)
    (**((void (***)(char *))__p + 3))(__p + 24);
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (__p[216])
  {
    if (__p[215] < 0)
      operator delete(*((void **)__p + 24));
    if (__p[176] && __p[175] < 0)
      operator delete(*((void **)__p + 19));
  }
  operator delete(__p);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[27]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [27]>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CC4CE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [34]>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[8];
  void *__p[2];
  __int128 v26;
  int v27;
  uint64_t v28[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v9 = result;
    v10 = MEMORY[0x1E0DE4FE0];
    v11 = MEMORY[0x1E0DE4FE0] + 64;
    v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v28[0] = MEMORY[0x1E0DE4FE0] + 64;
    v23 = v13;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v13 - 24)) = v14;
    v15 = (std::ios_base *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24));
    std::ios_base::init(v15, v24);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v23 = v10 + 24;
    v28[0] = v11;
    std::streambuf::basic_streambuf();
    v16 = MEMORY[0x1E0DE4FB8];
    v24[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v26 = 0u;
    v27 = 16;
    v17 = *(_QWORD *)(v23 - 24);
    if ((v18 & 1) == 0
    {
    }
    v19 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v23, (uint64_t)a5, v19);
    v20 = v24[5];
    v21 = (char *)&v24[-1] + *(_QWORD *)(v23 - 24);
    if ((v21[32] & 5) != 0)
    {
      v22 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5) + 32))(&rep, *((_QWORD *)v21 + 5), 0, 1, 16);
      v22 = v33;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v30 = a2;
    v31 = v20;
    v32 = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v9 + 16) + 16))(*(_QWORD *)(v9 + 16), a3, a4, &rep);
    v23 = *v12;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24)) = v12[3];
    v24[0] = v16 + 16;
    if (SBYTE7(v26) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v28);
  }
  return result;
}

void sub_18CC4D0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [27]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC4D254(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::ProvisionTask::perform(std::runtime_error *a1, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5, std::runtime_error **a6)
{
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  AMSCore::EncodeHTTPRequestTask::Options *v18;
  std::runtime_error *v19;
  unsigned int v20;
  std::runtime_error *v21;
  uint64_t v22;
  std::runtime_error_vtbl *v23;
  uint64_t v24;
  std::runtime_error_vtbl *v25;
  std::runtime_error_vtbl *v26;
  std::ios_base *v27;
  uint64_t v28;
  void (__cdecl *v29)(std::runtime_error *__hidden);
  unsigned __int8 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  AMSCore::EncodeHTTPRequestTask::Options *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  std::runtime_error *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  unsigned int v61;
  unsigned int *v62;
  uint64_t v63;
  std::system_error *v64;
  uint64_t v65;
  __int128 *v66;
  unint64_t v67;
  uint64_t v68;
  std::runtime_error *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::runtime_error v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unsigned int *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char **v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 v97;
  char *v98;
  std::string *v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int *v102;
  int v103;
  const void *v104;
  unint64_t v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int *v108;
  int v109;
  unsigned int *v110;
  unint64_t v111;
  size_t v112;
  int v113;
  int v114;
  uint64_t *v115;
  int v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  __int128 *v120;
  char *v121;
  void **v122;
  unsigned int *v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int *v127;
  int v128;
  unsigned int *v129;
  unint64_t v130;
  size_t v131;
  int v132;
  int v133;
  uint64_t *v134;
  int v135;
  std::__shared_weak_count *imp;
  unint64_t *v137;
  unint64_t v138;
  const char *v139;
  size_t v140;
  size_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  std::runtime_error v147;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  unsigned __int8 v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  __int128 v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  __int128 v191;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  const std::runtime_error *v196;
  char v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unsigned int *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  __int128 v224;
  unint64_t v225;
  void **v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  const std::runtime_error *v230;
  char v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  __int128 v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  char v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  char *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int *v272;
  uint64_t v273;
  __int128 *v274;
  unint64_t v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  std::runtime_error *v288;
  __int128 v289;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *p_shared_owners;
  unint64_t v314;
  std::runtime_error_vtbl *v315;
  uint64_t v316;
  unint64_t *v317;
  char *v318;
  __int128 *v319;
  __int128 *v320;
  char *v321;
  _BYTE *v322;
  void **v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  AMSCore::URL *v327;
  void **v328;
  void **__dst;
  _QWORD *v330;
  __int128 *v331;
  __int128 *v332;
  std::runtime_error *v333;
  _BYTE *v334;
  _QWORD **v335;
  char *v336;
  std::runtime_error *v337;
  std::runtime_error *v338;
  _QWORD *v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  _QWORD *v343;
  unsigned int **v344;
  std::runtime_error *v345;
  AMSCore::ExecuteHTTPRequestTask::Options *v346;
  std::runtime_error *v347;
  std::runtime_error *v348;
  char *v349;
  uint64_t v350;
  char *v351;
  AMSCore::ExecuteHTTPRequestTask::Options *v352;
  const std::runtime_error *v353;
  uint64_t v354;
  uint64_t **v355;
  AMSCore::EncodeHTTPRequestTask::Options *v356;
  AMSCore::EncodeHTTPRequestTask::Options *v357;
  std::runtime_error *v358;
  std::runtime_error *v359;
  uint64_t v360;
  char *v361;
  std::runtime_error v362;
  __int128 v363;
  __int128 *v364;
  __int128 v365;
  __int128 v366;
  _BYTE __what_arg[32];
  __int128 *v368;
  __int128 v369;
  __int128 v370;
  std::runtime_error v371;
  _BYTE v372[24];
  __int128 v373;
  __int128 v374;
  __int128 __p;
  __int128 v376;
  int v377;
  uint64_t v378[20];
  std::system_error v379;
  __int128 *v380;
  __int128 v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;
  std::error_code v385;
  std::error_code v386;

  v384 = *MEMORY[0x1E0C80C00];
  v12 = (char *)operator new(0x800uLL);
  v13 = (unint64_t)v12;
  *(_QWORD *)v12 = AMSCore::ProvisionTask::perform;
  *((_QWORD *)v12 + 1) = AMSCore::ProvisionTask::perform;
  v334 = v12 + 2044;
  *((_OWORD *)v12 + 112) = *(_OWORD *)a2;
  v336 = v12 + 1032;
  v358 = (std::runtime_error *)(v12 + 152);
  *((_QWORD *)v12 + 226) = *(_QWORD *)(a2 + 16);
  v347 = (std::runtime_error *)(v12 + 976);
  v348 = (std::runtime_error *)(v12 + 576);
  v346 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v12 + 1376);
  v352 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v12 + 1544);
  v353 = (const std::runtime_error *)(v12 + 1712);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v349 = v12 + 1792;
  v351 = v12 + 1816;
  *(_QWORD *)(a2 + 16) = 0;
  v339 = v12 + 1840;
  v341 = v12 + 1856;
  v343 = v12 + 1872;
  v331 = (__int128 *)(v12 + 1904);
  v332 = (__int128 *)(v12 + 1888);
  v14 = *a3;
  v354 = a3[1];
  v335 = (_QWORD **)(v12 + 1920);
  v333 = (std::runtime_error *)(v12 + 1952);
  v15 = v12 + 1968;
  *a3 = 0;
  a3[1] = 0;
  *((_DWORD *)v12 + 510) = a4;
  v17 = *a5;
  v16 = a5[1];
  *((_QWORD *)v12 + 248) = *a5;
  v360 = v16;
  *((_QWORD *)v12 + 249) = v16;
  *a5 = 0;
  a5[1] = 0;
  v19 = *a6;
  v18 = (AMSCore::EncodeHTTPRequestTask::Options *)a6[1];
  *((_QWORD *)v12 + 250) = *a6;
  *a6 = 0;
  a6[1] = 0;
  *((_QWORD *)v12 + 251) = v18;
  do
    v20 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v20 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v356 = v18;
  v12[24] = 0;
  v21 = (std::runtime_error *)(v12 + 24);
  v12[104] = 0;
  *((_QWORD *)v12 + 14) = 0;
  *((_QWORD *)v12 + 18) = 0;
  v359 = (std::runtime_error *)(v12 + 16);
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v371, (uint64_t)(v12 + 16));
  v337 = v19;
  *a1 = v371;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(__what_arg);
  v22 = *(_QWORD *)__what_arg;
  if (*(int *)(*(_QWORD *)__what_arg + 8) <= 2)
  {
    v330 = v15;
    v23 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v24 = MEMORY[0x1E0DE4FE0] + 64;
    v25 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v26 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v378[0] = MEMORY[0x1E0DE4FE0] + 64;
    v371.__vftable = v25;
    *(std::runtime_error_vtbl **)((char *)&v371.__vftable + (unint64_t)v25[-1].~runtime_error) = v26;
    v27 = (std::ios_base *)((char *)&v371 + (unint64_t)v371.__vftable[-1].~runtime_error);
    std::ios_base::init(v27, &v371.__imp_);
    v27[1].__vftable = 0;
    v27[1].__fmtflags_ = -1;
    v371.__vftable = v23 + 1;
    v378[0] = v24;
    std::streambuf::basic_streambuf();
    v28 = MEMORY[0x1E0DE4FB8];
    v371.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    __p = 0u;
    v376 = 0u;
    v377 = 16;
    v29 = v371.__vftable[-1].~runtime_error;
    if ((v30 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v371, (uint64_t)"Provisioning the device. type = ", 32);
    v31 = *(_DWORD *)(v13 + 2040);
    if (v31 == 2)
    {
      v32 = 11;
      *((_BYTE *)&v379.__ec_.__val_ + 7) = 11;
      strcpy((char *)&v379, "Version 1.5");
    }
    else if (v31 == 1)
    {
      v32 = 9;
      *((_BYTE *)&v379.__ec_.__val_ + 7) = 9;
      strcpy((char *)&v379, "Version 1");
    }
    else
    {
      v32 = 4;
      *((_BYTE *)&v379.__ec_.__val_ + 7) = 4;
      strcpy((char *)&v379, "None");
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v371, (uint64_t)&v379, v32);
    if (*((char *)&v379.__ec_.__val_ + 7) < 0)
      operator delete(v379.__vftable);
    v33 = v17;
    v34 = *((_QWORD *)&v373 + 1);
    v35 = (char *)&v371 + (unint64_t)v371.__vftable[-1].~runtime_error;
    v36 = v28;
    if ((v35[32] & 5) != 0)
    {
      v37 = -1;
    }
    else
    {
      (*(void (**)(std::system_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v35 + 5)
                                                                                                + 32))(&v379, *((_QWORD *)v35 + 5), 0, 1, 16);
      v37 = v383;
    }
    v379.__vftable = (std::system_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v379.__imp_.__imp_) = 2;
    *(_QWORD *)&v379.__ec_.__val_ = v34;
    v379.__ec_.__cat_ = (const std::error_category *)v37;
    (*(void (**)(_QWORD, const char *, uint64_t, std::system_error *))(**(_QWORD **)(v22 + 16) + 16))(*(_QWORD *)(v22 + 16), "networking", 10, &v379);
    v371.__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E0DE4F60];
    *(std::runtime_error_vtbl **)((char *)&v371.__vftable + (unint64_t)v371.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
    v371.__imp_.__imp_ = (const char *)(v36 + 16);
    if (SBYTE7(v376) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v378);
    v21 = (std::runtime_error *)(v13 + 24);
    v17 = v33;
    v15 = v330;
  }
  v38 = *(std::__shared_weak_count **)&__what_arg[8];
  v39 = v356;
  if (*(_QWORD *)&__what_arg[8])
  {
    v40 = (unint64_t *)(*(_QWORD *)&__what_arg[8] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v42 = *(unsigned __int8 *)(v13 + 1815);
  if ((v42 & 0x80u) != 0)
    v42 = *(_QWORD *)(v13 + 1800);
  if (!v42)
  {
    AMSCore::StringUtils::join<char [33]>((std::string *)__what_arg, "Expected a non-null data object.");
    v385.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v385.__val_ = 3;
    std::system_error::system_error((std::system_error *)&v371, v385, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    v373 = 0uLL;
    v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    *(_QWORD *)&v372[16] = &v373;
    v374 = 0uLL;
    std::runtime_error::runtime_error(&v379, &v371);
    v379.__ec_ = *(std::error_code *)v372;
    v379.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v43 = (unsigned int *)v373;
    v380 = *(__int128 **)&v372[16];
    v381 = v373;
    if (*((_QWORD *)&v373 + 1))
    {
      *(_QWORD *)(v373 + 16) = &v381;
      v43 = 0;
      *(_QWORD *)&v372[16] = &v373;
      v373 = 0uLL;
    }
    else
    {
      v380 = &v381;
    }
    v382 = v374;
    v374 = 0uLL;
    v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v372[16], v43);
    MEMORY[0x18D7898AC](&v371);
    if (*(_BYTE *)(v13 + 104))
    {
      if (!*(_BYTE *)(v13 + 96))
        ((void (*)(std::runtime_error *))v21->~runtime_error)(v21);
      *(_BYTE *)(v13 + 104) = 0;
    }
    std::runtime_error::runtime_error(v21, &v379);
    v66 = v380;
    v65 = v381;
    *(_QWORD *)(v13 + 64) = v381;
    v67 = v13 + 64;
    *(std::error_code *)(v13 + 40) = v379.__ec_;
    *(_QWORD *)(v13 + 24) = off_1E2521330;
    *(_QWORD *)(v13 + 56) = v66;
    v68 = *((_QWORD *)&v381 + 1);
    *(_QWORD *)(v13 + 72) = *((_QWORD *)&v381 + 1);
    if (v68)
    {
      *(_QWORD *)(v65 + 16) = v67;
      v65 = 0;
      v380 = &v381;
      v381 = 0uLL;
    }
    else
    {
      *(_QWORD *)(v13 + 56) = v67;
    }
    v44 = v358;
    v63 = v354;
    *(_OWORD *)(v13 + 80) = v382;
    v382 = 0uLL;
    *(_BYTE *)(v13 + 96) = 0;
    *(_BYTE *)(v13 + 104) = 1;
    v379.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v380, (unsigned int *)v65);
    v64 = &v379;
    goto LABEL_72;
  }
  if (!v14)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[29]>((uint64_t)&v371, 3u, "Expected a non-null account.");
    goto LABEL_34;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14))
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[30]>((uint64_t)&v371, 3u, "Expected a non-local account.");
LABEL_34:
    v44 = v358;
    if (*(_BYTE *)(v13 + 104))
    {
      if (!*(_BYTE *)(v13 + 96))
        ((void (*)(std::runtime_error *))v21->~runtime_error)(v21);
      *(_BYTE *)(v13 + 104) = 0;
    }
    std::runtime_error::runtime_error(v21, &v371);
    v45 = *(_OWORD *)v372;
    v47 = *(_QWORD *)&v372[16];
    v46 = v373;
    *(_QWORD *)(v13 + 64) = v373;
    v48 = v13 + 64;
    *(_OWORD *)(v13 + 40) = v45;
    *(_QWORD *)(v13 + 24) = off_1E2521330;
    *(_QWORD *)(v13 + 56) = v47;
    v49 = *((_QWORD *)&v373 + 1);
    *(_QWORD *)(v13 + 72) = *((_QWORD *)&v373 + 1);
    if (v49)
    {
      *(_QWORD *)(v46 + 16) = v48;
      *(_QWORD *)&v372[16] = &v373;
      v373 = 0uLL;
      v46 = 0;
    }
    else
    {
      *(_QWORD *)(v13 + 56) = v48;
    }
    v63 = v354;
    *(_OWORD *)(v13 + 80) = v374;
    *((_QWORD *)&v374 + 1) = 0;
    *(_BYTE *)(v13 + 96) = 0;
    *(_BYTE *)(v13 + 104) = 1;
    *(_QWORD *)&v374 = 0;
    v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v372[16], (unsigned int *)v46);
    v64 = (std::system_error *)&v371;
LABEL_72:
    MEMORY[0x18D7898AC](v64);
    goto LABEL_73;
  }
  AMSCore::ServiceProvider<AMSCore::IAnisetteProvider>::getDefault(v15);
  v50 = *v15;
  if (!*v15)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[27]>((uint64_t)&v371, 3u, "Anisette is not available.");
    v44 = v358;
    if (*(_BYTE *)(v13 + 104))
    {
      if (!*(_BYTE *)(v13 + 96))
        ((void (*)(std::runtime_error *))v21->~runtime_error)(v21);
      *(_BYTE *)(v13 + 104) = 0;
    }
    std::runtime_error::runtime_error(v21, &v371);
    v70 = *(_OWORD *)v372;
    v72 = *(_QWORD *)&v372[16];
    v71 = v373;
    *(_QWORD *)(v13 + 64) = v373;
    v73 = v13 + 64;
    *(_OWORD *)(v13 + 40) = v70;
    *(_QWORD *)(v13 + 24) = off_1E2521330;
    *(_QWORD *)(v13 + 56) = v72;
    v74 = *((_QWORD *)&v373 + 1);
    *(_QWORD *)(v13 + 72) = *((_QWORD *)&v373 + 1);
    if (v74)
    {
      *(_QWORD *)(v71 + 16) = v73;
      *(_QWORD *)&v372[16] = &v373;
      v373 = 0uLL;
      v71 = 0;
    }
    else
    {
      *(_QWORD *)(v13 + 56) = v73;
    }
    v63 = v354;
    *(_OWORD *)(v13 + 80) = v374;
    *((_QWORD *)&v374 + 1) = 0;
    *(_BYTE *)(v13 + 96) = 0;
    *(_BYTE *)(v13 + 104) = 1;
    *(_QWORD *)&v374 = 0;
    v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v372[16], (unsigned int *)v71);
    MEMORY[0x18D7898AC](&v371);
    goto LABEL_505;
  }
  v51 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  std::__optional_destruct_base<AMSCore::AccountIdentity,false>::__optional_destruct_base[abi:fe180100]<AMSCore::AccountIdentity const&>((std::string *)&v371, v51);
  (*(void (**)(uint64_t, char *, std::runtime_error *, _QWORD))(*(_QWORD *)v50 + 56))(v50, v349, &v371, *(unsigned int *)(v13 + 2040));
  if (BYTE8(v374))
  {
    if (SBYTE7(v374) < 0)
      operator delete((void *)v373);
    if (v372[8] && (v372[7] & 0x80000000) != 0)
      operator delete(v371.__vftable);
  }
  if (!*(_BYTE *)(v13 + 1784))
  {
    AMSCore::Error::Error(&v371, v353);
    std::runtime_error::runtime_error(&v379, &v371);
    v379.__ec_ = *(std::error_code *)v372;
    v379.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v75 = (unsigned int *)v373;
    v380 = *(__int128 **)&v372[16];
    v381 = v373;
    v44 = v358;
    if (*((_QWORD *)&v373 + 1))
    {
      *(_QWORD *)(v373 + 16) = &v381;
      *(_QWORD *)&v372[16] = &v373;
      v373 = 0uLL;
      v75 = 0;
    }
    else
    {
      v380 = &v381;
    }
    v382 = v374;
    v374 = 0uLL;
    v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v372[16], v75);
    MEMORY[0x18D7898AC](&v371);
    if (*(_BYTE *)(v13 + 104))
    {
      if (!*(_BYTE *)(v13 + 96))
        ((void (*)(std::runtime_error *))v21->~runtime_error)(v21);
      *(_BYTE *)(v13 + 104) = 0;
    }
    std::runtime_error::runtime_error(v21, &v379);
    v78 = v380;
    v77 = v381;
    *(_QWORD *)(v13 + 64) = v381;
    v79 = v13 + 64;
    *(std::error_code *)(v13 + 40) = v379.__ec_;
    *(_QWORD *)(v13 + 24) = off_1E2521330;
    *(_QWORD *)(v13 + 56) = v78;
    v80 = *((_QWORD *)&v381 + 1);
    *(_QWORD *)(v13 + 72) = *((_QWORD *)&v381 + 1);
    if (v80)
    {
      *(_QWORD *)(v77 + 16) = v79;
      v77 = 0;
      v380 = &v381;
      v381 = 0uLL;
    }
    else
    {
      *(_QWORD *)(v13 + 56) = v79;
    }
    v63 = v354;
    *(_OWORD *)(v13 + 80) = v382;
    v382 = 0uLL;
    *(_BYTE *)(v13 + 96) = 0;
    *(_BYTE *)(v13 + 104) = 1;
    v379.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v380, (unsigned int *)v77);
    MEMORY[0x18D7898AC](&v379);
    if (*(_BYTE *)(v13 + 1784))
    {
LABEL_503:
      if (*(char *)(v13 + 1735) < 0)
        operator delete(v353->__vftable);
      goto LABEL_505;
    }
LABEL_98:
    ((void (*)(const std::runtime_error *))v353->~runtime_error)(v353);
LABEL_505:
    v312 = *(std::__shared_weak_count **)(v13 + 1976);
    v69 = v359;
    if (!v312)
      goto LABEL_74;
    p_shared_owners = (unint64_t *)&v312->__shared_owners_;
    do
      v314 = __ldaxr(p_shared_owners);
    while (__stlxr(v314 - 1, p_shared_owners));
    if (v314)
      goto LABEL_74;
    ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
    std::__shared_weak_count::__release_weak(v312);
LABEL_73:
    v69 = v359;
LABEL_74:
    *(_QWORD *)(v13 + 2032) = v63;
    *(_QWORD *)(v13 + 2024) = v360;
    *(_QWORD *)(v13 + 2016) = v39;
    *(_QWORD *)(v13 + 152) = v69;
    *(_QWORD *)v13 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v44);
    return;
  }
  *(_QWORD *)(v13 + 1920) = v15;
  *(_QWORD *)(v13 + 1928) = v353;
  *(std::runtime_error *)v351 = *v353;
  *((_QWORD *)v351 + 2) = v353[1].__vftable;
  v353->__vftable = 0;
  v353->__imp_.__imp_ = 0;
  v353[1].__vftable = 0;
  *(_QWORD *)(v13 + 1840) = v14;
  *(_QWORD *)(v13 + 1848) = v354;
  v52 = *(_DWORD *)(v13 + 2040);
  *(_QWORD *)(v13 + 1856) = v17;
  *(_QWORD *)(v13 + 1864) = v360;
  if (v360)
  {
    v53 = (unint64_t *)(v360 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  *(_QWORD *)(v13 + 1872) = v337;
  *(_QWORD *)(v13 + 1880) = v356;
  v44 = v358;
  if (v356)
  {
    v55 = (unint64_t *)((char *)v356 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = (char *)operator new(0x8B0uLL);
  v58 = (unint64_t)v57;
  v59 = (uint64_t *)(v57 + 472);
  v322 = v57 + 2216;
  v323 = (void **)(v57 + 872);
  *((_OWORD *)v57 + 123) = *(_OWORD *)v351;
  v338 = (std::runtime_error *)(v57 + 1624);
  v327 = (AMSCore::URL *)(v57 + 1784);
  v328 = (void **)(v57 + 1248);
  *((_QWORD *)v57 + 248) = *((_QWORD *)v351 + 2);
  v60 = v57 + 1968;
  v355 = (uint64_t **)(v57 + 1992);
  __dst = (void **)(v57 + 2016);
  *(_QWORD *)v351 = 0;
  *((_QWORD *)v351 + 1) = 0;
  v320 = (__int128 *)(v57 + 2040);
  v321 = v57 + 2056;
  v319 = (__int128 *)(v57 + 2072);
  *((_QWORD *)v351 + 2) = 0;
  v317 = (unint64_t *)(v57 + 1936);
  v318 = v57 + 2104;
  v325 = v57 + 2088;
  v326 = *(_QWORD *)(v13 + 1840);
  *((_QWORD *)v57 + 265) = v326;
  v324 = *(_QWORD *)(v13 + 1848);
  *((_QWORD *)v57 + 266) = v324;
  *v339 = 0;
  v339[1] = 0;
  v340 = *(_QWORD *)(v13 + 1856);
  *((_QWORD *)v57 + 267) = v340;
  v350 = *(_QWORD *)(v13 + 1864);
  *((_QWORD *)v57 + 268) = v350;
  *v341 = 0;
  v341[1] = 0;
  *((_QWORD *)v57 + 269) = *(_QWORD *)(v13 + 1872);
  v342 = *(_QWORD *)(v13 + 1880);
  *((_QWORD *)v57 + 270) = v342;
  *v343 = 0;
  v343[1] = 0;
  do
    v61 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v61 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v57[24] = 0;
  v57[424] = 0;
  *((_QWORD *)v57 + 54) = 0;
  v357 = (AMSCore::EncodeHTTPRequestTask::Options *)(v57 + 24);
  *((_QWORD *)v57 + 58) = 0;
  v361 = v57 + 16;
  std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v371, (uint64_t)(v57 + 16));
  *v358 = v371;
  if ((v52 - 3) <= 0xFFFFFFFD)
  {
    AMSCore::StringUtils::join<char [35]>((std::string *)__what_arg, "Received an invalid Anisette type.");
    v386.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v386.__val_ = 3;
    std::system_error::system_error(&v379, v386, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    v381 = 0uLL;
    v379.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v380 = &v381;
    v382 = 0uLL;
    std::runtime_error::runtime_error(&v371, &v379);
    *(std::error_code *)v372 = v379.__ec_;
    v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v62 = (unsigned int *)v381;
    *(_QWORD *)&v372[16] = v380;
    v373 = v381;
    if (*((_QWORD *)&v381 + 1))
    {
      *(_QWORD *)(v381 + 16) = &v373;
      v62 = 0;
      v380 = &v381;
      v381 = 0uLL;
    }
    else
    {
      *(_QWORD *)&v372[16] = &v373;
    }
    v374 = v382;
    v382 = 0uLL;
    v379.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v380, v62);
    MEMORY[0x18D7898AC](&v379);
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v357, &v371);
    v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v88 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
    if (*((_QWORD *)&v374 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v87 = (unsigned int *)v373;
LABEL_123:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v372[16], v87);
    MEMORY[0x18D7898AC](&v371);
LABEL_124:
    v91 = v350;
    v92 = v342;
LABEL_358:
    *(_QWORD *)(v58 + 2208) = v91;
    *(_QWORD *)(v58 + 2200) = v92;
    *(_QWORD *)(v58 + 472) = v361;
    *(_QWORD *)v58 = 0;
    AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend(v59);
    goto LABEL_359;
  }
  if (*(char *)(v58 + 1991) < 0)
  {
    v76 = *(_QWORD *)(v58 + 1976);
    if (!v76)
      goto LABEL_110;
    v60 = (_QWORD *)*v60;
  }
  else
  {
    v76 = *(unsigned __int8 *)(v58 + 1991);
    if (!*(_BYTE *)(v58 + 1991))
    {
LABEL_110:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[27]>((uint64_t)&v371, 3u, "Received empty clientData.");
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v357, &v371);
      v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v84 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
      if (*((_QWORD *)&v374 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = (unsigned int *)v373;
      goto LABEL_123;
    }
  }
  AMSCore::Base64::encode((uint64_t)v60, v76, &v379);
  v372[7] = 10;
  strcpy((char *)&v371, "clientData");
  *(std::runtime_error *)&v372[8] = v379.std::runtime_error;
  *(_QWORD *)&v373 = *(_QWORD *)&v379.__ec_.__val_;
  memset(&v379, 0, 24);
  DWORD2(v373) = 5;
  *(_QWORD *)(v58 + 2008) = 0;
  *(_QWORD *)(v58 + 2000) = 0;
  *(_QWORD *)(v58 + 1992) = v58 + 2000;
  v344 = (unsigned int **)(v58 + 2000);
  v316 = (uint64_t)v59;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(v355, (uint64_t *)(v58 + 2000), (const void **)&v371.__vftable, (__int128 *)&v371);
  if (DWORD2(v373) != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E253D240[DWORD2(v373)])(__what_arg, &v372[8]);
  DWORD2(v373) = -1;
  if ((v372[7] & 0x80000000) == 0)
  {
    if ((*((char *)&v379.__ec_.__val_ + 7) & 0x80000000) == 0)
      goto LABEL_105;
LABEL_126:
    operator delete(v379.__vftable);
    if (v52 == 1)
      goto LABEL_106;
LABEL_127:
    v93 = &AMSCore::BagKeys::AnisetteAMDFinishProvisioning;
    goto LABEL_231;
  }
  operator delete(v371.__vftable);
  if (*((char *)&v379.__ec_.__val_ + 7) < 0)
    goto LABEL_126;
LABEL_105:
  if (v52 != 1)
    goto LABEL_127;
LABEL_106:
  AMSCore::ServiceProvider<AMSCore::IKeybagProvider>::getDefault(&v362);
  v315 = v362.__vftable;
  if (!v362.__vftable)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v371, 2u, "Keybag provider is not available.");
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v357, &v371);
    v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
    if (*((_QWORD *)&v374 + 1))
    {
      v95 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v372[16], (unsigned int *)v373);
    MEMORY[0x18D7898AC](&v371);
    goto LABEL_224;
  }
  v345 = v21;
  v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v326 + 72))(v326);
  v82 = v81;
  LOBYTE(v379.__vftable) = 0;
  LOBYTE(v379.__ec_.__cat_) = 0;
  if (*(_BYTE *)(v81 + 24))
  {
    if (*(char *)(v81 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v379, *(const std::string::value_type **)v81, *(_QWORD *)(v81 + 8));
    }
    else
    {
      v83 = *(std::runtime_error *)v81;
      *(_QWORD *)&v379.__ec_.__val_ = *(_QWORD *)(v81 + 16);
      v379.std::runtime_error = v83;
    }
    LOBYTE(v379.__ec_.__cat_) = 1;
  }
  v380 = *(__int128 **)(v82 + 32);
  if (*(char *)(v82 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v381, *(const std::string::value_type **)(v82 + 40), *(_QWORD *)(v82 + 48));
  }
  else
  {
    v97 = *(_OWORD *)(v82 + 40);
    *(_QWORD *)&v382 = *(_QWORD *)(v82 + 56);
    v381 = v97;
  }
  (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::system_error *))v362.~runtime_error
   + 3))(&v371, v362.__vftable, &v379);
  if (!(_BYTE)__p)
    goto LABEL_179;
  v98 = (char *)operator new(0x58uLL);
  strcpy(v98 + 32, "kbsync");
  v98[55] = 6;
  v99 = (std::string *)(v98 + 56);
  if ((v372[7] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v99, (const std::string::value_type *)v371.__vftable, (std::string::size_type)v371.__imp_.__imp_);
  }
  else
  {
    *(std::runtime_error *)&v99->__r_.__value_.__l.__data_ = v371;
    *((_QWORD *)v98 + 9) = *(_QWORD *)v372;
  }
  *((_DWORD *)v98 + 20) = 6;
  v100 = (unsigned int *)(v58 + 2000);
  v101 = *v344;
  v102 = (unsigned int *)(v58 + 2000);
  if (!*v344)
  {
LABEL_170:
    *(_QWORD *)v98 = 0;
    *((_QWORD *)v98 + 1) = 0;
    *((_QWORD *)v98 + 2) = v100;
    *(_QWORD *)v102 = v98;
    v115 = (uint64_t *)**v355;
    if (v115)
    {
      *v355 = v115;
      v98 = *(char **)v102;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v58 + 2000), (uint64_t *)v98);
    ++*(_QWORD *)(v58 + 2008);
    goto LABEL_176;
  }
  v103 = v98[55];
  if (v103 >= 0)
    v104 = v98 + 32;
  else
    v104 = (const void *)*((_QWORD *)v98 + 4);
  if (v103 >= 0)
    v105 = v98[55];
  else
    v105 = *((_QWORD *)v98 + 5);
  while (1)
  {
    while (1)
    {
      v100 = v101;
      v108 = (unsigned int *)*((_QWORD *)v101 + 4);
      v106 = v101 + 8;
      v107 = v108;
      v109 = *((char *)v106 + 23);
      v110 = v109 >= 0 ? v106 : v107;
      v111 = v109 >= 0 ? *((unsigned __int8 *)v106 + 23) : *((_QWORD *)v106 + 1);
      v112 = v111 >= v105 ? v105 : v111;
      v113 = memcmp(v104, v110, v112);
      if (v113)
        break;
      if (v105 >= v111)
        goto LABEL_164;
LABEL_150:
      v101 = *(unsigned int **)v100;
      v102 = v100;
      if (!*(_QWORD *)v100)
        goto LABEL_170;
    }
    if (v113 < 0)
      goto LABEL_150;
LABEL_164:
    v114 = memcmp(v110, v104, v112);
    if (!v114)
      break;
    if ((v114 & 0x80000000) == 0)
      goto LABEL_173;
LABEL_168:
    v101 = (unsigned int *)*((_QWORD *)v100 + 1);
    if (!v101)
    {
      v102 = v100 + 2;
      goto LABEL_170;
    }
  }
  if (v111 < v105)
    goto LABEL_168;
LABEL_173:
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)__what_arg, (uint64_t)(v98 + 56));
  v116 = v98[55];
  *((_DWORD *)v98 + 20) = -1;
  if (v116 < 0)
    operator delete(*((void **)v98 + 4));
  operator delete(v98);
LABEL_176:
  if ((_BYTE)__p)
  {
    if ((v372[7] & 0x80000000) != 0)
      operator delete(v371.__vftable);
    goto LABEL_180;
  }
LABEL_179:
  ((void (*)(std::runtime_error *))v371.~runtime_error)(&v371);
LABEL_180:
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(__what_arg);
  (*(void (**)(std::runtime_error *__return_ptr))(**(_QWORD **)__what_arg + 32))(&v371);
  v117 = *(std::__shared_weak_count **)&__what_arg[8];
  if (*(_QWORD *)&__what_arg[8])
  {
    v118 = (unint64_t *)(*(_QWORD *)&__what_arg[8] + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v372[8])
  {
    __what_arg[23] = 4;
    strcpy(__what_arg, "guid");
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::string,std::string>(v355, (const void **)__what_arg, (uint64_t)__what_arg, (uint64_t)&v371);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    if (v372[8] && (v372[7] & 0x80000000) != 0)
      operator delete(v371.__vftable);
  }
  v120 = v380;
  v121 = (char *)operator new(0x58uLL);
  *((_DWORD *)v121 + 8) = 1682535268;
  v122 = (void **)(v121 + 32);
  v121[55] = 4;
  v121[36] = 0;
  *((_QWORD *)v121 + 7) = v120;
  *((_DWORD *)v121 + 20) = 4;
  v123 = (unsigned int *)(v58 + 2000);
  v124 = *v344;
  v125 = (unsigned int *)(v58 + 2000);
  if (!*v344)
  {
LABEL_213:
    *(_QWORD *)v121 = 0;
    *((_QWORD *)v121 + 1) = 0;
    *((_QWORD *)v121 + 2) = v123;
    *(_QWORD *)v125 = v121;
    v134 = (uint64_t *)**v355;
    if (v134)
    {
      *v355 = v134;
      v121 = *(char **)v125;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v58 + 2000), (uint64_t *)v121);
    ++*(_QWORD *)(v58 + 2008);
    v44 = v358;
    v21 = v345;
    goto LABEL_219;
  }
  while (2)
  {
    while (2)
    {
      v123 = v124;
      v126 = v124 + 8;
      v127 = (unsigned int *)*((_QWORD *)v124 + 4);
      v128 = *((char *)v126 + 23);
      if (v128 >= 0)
        v129 = v126;
      else
        v129 = v127;
      if (v128 >= 0)
        v130 = *((unsigned __int8 *)v126 + 23);
      else
        v130 = *((_QWORD *)v126 + 1);
      if (v130 >= 4)
        v131 = 4;
      else
        v131 = v130;
      v132 = memcmp(v122, v129, v131);
      if (v132)
      {
        if (v132 < 0)
          goto LABEL_193;
      }
      else if (v130 > 4)
      {
LABEL_193:
        v124 = *(unsigned int **)v123;
        v125 = v123;
        if (!*(_QWORD *)v123)
          goto LABEL_213;
        continue;
      }
      break;
    }
    v133 = memcmp(v129, v122, v131);
    if (v133)
    {
      if ((v133 & 0x80000000) == 0)
        break;
      goto LABEL_211;
    }
    if (v130 < 4)
    {
LABEL_211:
      v124 = (unsigned int *)*((_QWORD *)v123 + 1);
      if (!v124)
      {
        v125 = v123 + 2;
        goto LABEL_213;
      }
      continue;
    }
    break;
  }
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(&v371, v121 + 56);
  v21 = v345;
  v135 = v121[55];
  *((_DWORD *)v121 + 20) = -1;
  v44 = v358;
  if (v135 < 0)
    operator delete(*v122);
  operator delete(v121);
LABEL_219:
  v59 = (uint64_t *)v316;
  if (SBYTE7(v382) < 0)
    operator delete((void *)v381);
  if (LOBYTE(v379.__ec_.__cat_) && *((char *)&v379.__ec_.__val_ + 7) < 0)
    operator delete(v379.__vftable);
LABEL_224:
  imp = (std::__shared_weak_count *)v362.__imp_.__imp_;
  if (v362.__imp_.__imp_)
  {
    v137 = (unint64_t *)(v362.__imp_.__imp_ + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  if (!v315)
  {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v355, *v344);
    goto LABEL_124;
  }
  v93 = AMSCore::BagKeys::AnisetteMDFinishProvisioning;
LABEL_231:
  v139 = *v93;
  v140 = strlen(*v93);
  if (v140 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  v141 = v140;
  if (v140 >= 0x17)
  {
    v143 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v140 | 7) != 0x17)
      v143 = v140 | 7;
    v144 = v143 + 1;
    v142 = operator new(v143 + 1);
    *(_QWORD *)(v58 + 2016) = v142;
    *(_QWORD *)(v58 + 2032) = v144 | 0x8000000000000000;
    *(_QWORD *)(v58 + 2024) = v141;
    v44 = v358;
    goto LABEL_238;
  }
  *(_BYTE *)(v58 + 2039) = v140;
  v142 = __dst;
  if (v140)
LABEL_238:
    memmove(v142, v139, v141);
  *((_BYTE *)v142 + v141) = 0;
  *(_QWORD *)(v58 + 2088) = v326;
  *(_QWORD *)(v58 + 2096) = v324;
  if (v324)
  {
    v145 = (unint64_t *)(v324 + 8);
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
  }
  v59 = (uint64_t *)v316;
  (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v340 + 96))(v340, __dst, v325);
  v147 = *(std::runtime_error *)v316;
  *(_OWORD *)(v316 + 1696) = *(_OWORD *)v316;
  *(_QWORD *)v316 = 0;
  *(_QWORD *)(v316 + 8) = 0;
  if (!atomic_load((unint64_t *)&v147.__vftable[7].~runtime_error_0))
  {
    *v322 = 0;
    v149 = (unint64_t *)(*(_QWORD *)(v58 + 2168) + 176);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v58, v149));
    if (!v150)
      goto LABEL_359;
  }
  v151 = *(_QWORD *)(v316 + 1696);
  if (!*(_BYTE *)(v151 + 168))
    goto LABEL_513;
  v152 = *(_BYTE *)(v151 + 160);
  std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>(v338, v152, (std::runtime_error *)(v151 + 8));
  *(_BYTE *)(v58 + 1776) = v152;
  v153 = *(_QWORD *)(v58 + 2176);
  if (v153)
  {
    v154 = (unint64_t *)(v153 + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      v156 = *(std::__shared_weak_count **)(v58 + 2176);
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v157 = *(std::__shared_weak_count **)(v58 + 480);
  if (v157)
  {
    v158 = (unint64_t *)&v157->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = *(std::__shared_weak_count **)(v58 + 2096);
  if (v160)
  {
    v161 = (unint64_t *)&v160->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  if (*(char *)(v58 + 2039) < 0)
    operator delete(*__dst);
  if (!*(_BYTE *)(v58 + 1776))
  {
    std::runtime_error::runtime_error(&v371, v338);
    *(_OWORD *)v372 = *(_OWORD *)(v58 + 1640);
    v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v186 = *(_QWORD *)(v58 + 1664);
    *(_QWORD *)&v372[16] = *(_QWORD *)(v58 + 1656);
    *(_QWORD *)&v373 = v186;
    *((_QWORD *)&v373 + 1) = *(_QWORD *)(v58 + 1672);
    if (*((_QWORD *)&v373 + 1))
    {
      *(_QWORD *)(v186 + 16) = &v373;
      *(_QWORD *)(v58 + 1656) = v58 + 1664;
      *(_QWORD *)(v58 + 1664) = 0;
      *(_QWORD *)(v58 + 1672) = 0;
    }
    else
    {
      *(_QWORD *)&v372[16] = &v373;
    }
    v374 = *(_OWORD *)(v58 + 1680);
    *(_QWORD *)(v58 + 1688) = 0;
    *(_QWORD *)(v58 + 1680) = 0;
    LOBYTE(__p) = 1;
    std::runtime_error::runtime_error(&v379, &v371);
    v379.__ec_ = *(std::error_code *)v372;
    v379.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v380 = *(__int128 **)&v372[16];
    v381 = v373;
    if (*((_QWORD *)&v373 + 1))
    {
      *(_QWORD *)(v373 + 16) = &v381;
      *(_QWORD *)&v372[16] = &v373;
      v373 = 0uLL;
    }
    else
    {
      v380 = &v381;
    }
    v382 = v374;
    v374 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v379);
    *(std::error_code *)&__what_arg[16] = v379.__ec_;
    *(_QWORD *)__what_arg = off_1E2521330;
    v205 = (unsigned int *)v381;
    v368 = v380;
    v369 = v381;
    if (*((_QWORD *)&v381 + 1))
    {
      *(_QWORD *)(v381 + 16) = &v369;
      v205 = 0;
      v380 = &v381;
      v381 = 0uLL;
    }
    else
    {
      v368 = &v369;
    }
    v44 = v358;
    v59 = (uint64_t *)v316;
    v370 = v382;
    v382 = 0uLL;
    v379.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v380, v205);
    MEMORY[0x18D7898AC](&v379);
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v357, (std::runtime_error *)__what_arg);
    *(_QWORD *)__what_arg = off_1E2521330;
    v206 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
    if (*((_QWORD *)&v370 + 1))
    {
      v207 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
      do
        v208 = __ldaxr(v207);
      while (__stlxr(v208 - 1, v207));
      if (!v208)
      {
        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
        std::__shared_weak_count::__release_weak(v206);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v368, (unsigned int *)v369);
    MEMORY[0x18D7898AC](__what_arg);
    if ((_BYTE)__p)
    {
      v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v209 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
      if (*((_QWORD *)&v374 + 1))
      {
        v210 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v372[16], (unsigned int *)v373);
      MEMORY[0x18D7898AC](&v371);
    }
    v92 = *(_QWORD *)(v58 + 2160);
    v91 = *(_QWORD *)(v58 + 2144);
LABEL_354:
    if (*(_BYTE *)(v58 + 1776))
      AMSCore::URL::~URL((AMSCore::URL *)v338);
    else
      ((void (*)(std::runtime_error *))v338->~runtime_error)(v338);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v355, *v344);
    goto LABEL_358;
  }
  *(_BYTE *)(v58 + 1784) = 0;
  *(_BYTE *)(v58 + 1808) = 0;
  if (*(_BYTE *)(v58 + 1648))
  {
    *(std::runtime_error *)v327 = *v338;
    *((_QWORD *)v327 + 2) = v338[1].__vftable;
    v338->__imp_.__imp_ = 0;
    v338[1].__vftable = 0;
    v338->__vftable = 0;
    *(_BYTE *)(v58 + 1808) = 1;
  }
  *(_BYTE *)(v58 + 1816) = 0;
  *(_BYTE *)(v58 + 1840) = 0;
  if (*(_BYTE *)(v58 + 1680))
  {
    *(_QWORD *)(v58 + 1832) = *(_QWORD *)(v58 + 1672);
    *(_OWORD *)(v58 + 1816) = *(_OWORD *)(v58 + 1656);
    *(_QWORD *)(v58 + 1672) = 0;
    *(_QWORD *)(v58 + 1656) = 0;
    *(_QWORD *)(v58 + 1664) = 0;
    *(_BYTE *)(v58 + 1840) = 1;
  }
  *(_BYTE *)(v58 + 1848) = 0;
  *(_BYTE *)(v58 + 1872) = 0;
  if (*(_BYTE *)(v58 + 1712))
  {
    *(_QWORD *)(v58 + 1864) = *(_QWORD *)(v58 + 1704);
    *(_OWORD *)(v58 + 1848) = *(_OWORD *)(v58 + 1688);
    *(_QWORD *)(v58 + 1704) = 0;
    *(_QWORD *)(v58 + 1688) = 0;
    *(_QWORD *)(v58 + 1696) = 0;
    *(_BYTE *)(v58 + 1872) = 1;
  }
  *(_DWORD *)(v58 + 1880) = *(_DWORD *)(v58 + 1720);
  *(_QWORD *)(v58 + 1888) = v58 + 1888;
  *(_QWORD *)(v58 + 1896) = v58 + 1888;
  *(_QWORD *)(v58 + 1904) = 0;
  v163 = *(_QWORD *)(v58 + 1744);
  if (v163)
  {
    v164 = *(uint64_t **)(v58 + 1736);
    v165 = *(_QWORD *)(v58 + 1728);
    v166 = *v164;
    *(_QWORD *)(v166 + 8) = *(_QWORD *)(v165 + 8);
    **(_QWORD **)(v165 + 8) = v166;
    v167 = *(_QWORD *)(v58 + 1888);
    *(_QWORD *)(v167 + 8) = v164;
    *v164 = v167;
    *(_QWORD *)(v58 + 1888) = v165;
    *(_QWORD *)(v165 + 8) = v58 + 1888;
    *(_QWORD *)(v58 + 1904) = v163;
    *(_QWORD *)(v58 + 1744) = 0;
  }
  *(_QWORD *)(v58 + 1928) = *(_QWORD *)(v58 + 1768);
  *(_OWORD *)(v58 + 1912) = *(_OWORD *)(v58 + 1752);
  *(_QWORD *)(v58 + 1768) = 0;
  *(_QWORD *)(v58 + 1752) = 0;
  *(_QWORD *)(v58 + 1760) = 0;
  *(_OWORD *)(v316 + 1600) = *(_OWORD *)(v316 + 1664);
  *(_OWORD *)(v316 + 1568) = *(_OWORD *)(v316 + 1680);
  AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v328, (__int128 *)v327, v319, v320);
  v168 = *(std::__shared_weak_count **)(v58 + 2048);
  if (v168)
  {
    v169 = (unint64_t *)&v168->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = *(std::__shared_weak_count **)(v58 + 2080);
  if (v171)
  {
    v172 = (unint64_t *)&v171->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = *(_QWORD *)(v58 + 2128);
  v175 = *(_QWORD *)(v58 + 2120);
  AMSCore::URL::~URL(v327);
  *(_QWORD *)(v58 + 2056) = v175;
  *(_QWORD *)(v58 + 2064) = v174;
  if (v174)
  {
    v176 = (unint64_t *)(*(_QWORD *)(v58 + 2128) + 8);
    do
      v177 = __ldxr(v176);
    while (__stxr(v177 + 1, v176));
  }
  v178 = *(_OWORD *)v321;
  *(_QWORD *)v321 = 0;
  *((_QWORD *)v321 + 1) = 0;
  v179 = *(std::__shared_weak_count **)(v58 + 1256);
  *(_OWORD *)(v58 + 1248) = v178;
  if (v179)
  {
    v180 = (unint64_t *)&v179->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  *(_DWORD *)(v58 + 1424) = 6;
  *(_QWORD *)(v58 + 1936) = *(_QWORD *)(v58 + 1992);
  v182 = v58 + 1944;
  v183 = *(_QWORD *)(v58 + 2000);
  *(_QWORD *)(v58 + 1944) = v183;
  v184 = *(_QWORD *)(v58 + 2008);
  *(_QWORD *)(v58 + 1952) = v184;
  if (v184)
  {
    *(_QWORD *)(v183 + 16) = v182;
    *v355 = (uint64_t *)v344;
    *v344 = 0;
    *(_QWORD *)(v58 + 2008) = 0;
    v185 = (uint64_t)v317;
  }
  else
  {
    v185 = (uint64_t)v317;
    *v317 = v182;
  }
  *(_DWORD *)(v58 + 1960) = 8;
  AMSCore::Any::operator=(v58 + 1304, v185);
  *(_DWORD *)(v58 + 1336) = 2;
  v187 = *(unsigned int *)(v58 + 1960);
  if ((_DWORD)v187 != -1)
    ((void (*)(std::runtime_error *, uint64_t))off_1E253D240[v187])(&v371, v185);
  *(_DWORD *)(v58 + 1960) = -1;
  v188 = *(std::__shared_weak_count **)(v58 + 2064);
  if (v188)
  {
    v189 = (unint64_t *)&v188->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v323, (uint64_t)v328);
  AMSCore::EncodeHTTPRequestTask::perform(v318, (uint64_t)v323);
  v191 = *(_OWORD *)(v316 + 1632);
  *(_OWORD *)(v316 + 1712) = v191;
  *(_QWORD *)v318 = 0;
  *((_QWORD *)v318 + 1) = 0;
  if (!atomic_load((unint64_t *)(v191 + 416)))
  {
    *v322 = 1;
    v193 = (unint64_t *)(*(_QWORD *)(v58 + 2184) + 416);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v58, v193));
    if (!v194)
    {
LABEL_359:
      v224 = *(_OWORD *)(v13 + 152);
      v44->__vftable = 0;
      v44->__imp_.__imp_ = 0;
      *(_OWORD *)v352 = v224;
      v225 = atomic_load((unint64_t *)(v224 + 416));
      v226 = (void **)&v347->__vftable;
      if (!v225)
      {
        *v334 = 0;
        v227 = (unint64_t *)(*(_QWORD *)(v13 + 1544) + 416);
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v13, v227));
        if (!v228)
          return;
      }
      v229 = *(_QWORD *)v352;
      if (!*(_BYTE *)(*(_QWORD *)v352 + 408))
        goto LABEL_513;
      v230 = (const std::runtime_error *)(v229 + 8);
      v231 = *(_BYTE *)(v229 + 400);
      if (v231)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v347, (uint64_t)v230);
        v232 = *(_QWORD *)(v229 + 384);
        v233 = (_QWORD *)(v229 + 392);
        v234 = (_QWORD *)(v229 + 384);
        *(_QWORD *)(v13 + 1352) = v232;
        v235 = (_QWORD *)(v13 + 1360);
      }
      else
      {
        std::runtime_error::runtime_error(v347, v230);
        *(_OWORD *)(v13 + 992) = *(_OWORD *)(v229 + 24);
        *(_QWORD *)(v13 + 976) = off_1E2521330;
        v236 = (_QWORD *)(v229 + 48);
        v237 = *(_QWORD *)(v229 + 48);
        *(_QWORD *)(v13 + 1008) = *(_QWORD *)(v229 + 40);
        v238 = v13 + 1016;
        *(_QWORD *)(v13 + 1016) = v237;
        v239 = *(_QWORD *)(v229 + 56);
        *(_QWORD *)(v13 + 1024) = v239;
        if (v239)
        {
          *(_QWORD *)(v237 + 16) = v238;
          *(_QWORD *)(v229 + 40) = v236;
          *v236 = 0;
          *(_QWORD *)(v229 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v13 + 1008) = v238;
        }
        v240 = *(_QWORD *)(v229 + 64);
        v234 = (_QWORD *)(v229 + 64);
        *(_QWORD *)(v13 + 1032) = v240;
        v235 = (_QWORD *)(v13 + 1040);
        v233 = v234 + 1;
      }
      *v235 = *v233;
      *v234 = 0;
      v234[1] = 0;
      *(_BYTE *)(v13 + 1368) = v231;
      v241 = *(std::__shared_weak_count **)(v13 + 1552);
      if (v241)
      {
        v242 = (unint64_t *)&v241->__shared_owners_;
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
      v244 = *(std::__shared_weak_count **)(v13 + 160);
      if (v244)
      {
        v245 = (unint64_t *)&v244->__shared_owners_;
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        if (!v246)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
      }
      v247 = *(std::__shared_weak_count **)(v13 + 1880);
      if (v247)
      {
        v248 = (unint64_t *)&v247->__shared_owners_;
        do
          v249 = __ldaxr(v248);
        while (__stlxr(v249 - 1, v248));
        if (!v249)
        {
          ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
          std::__shared_weak_count::__release_weak(v247);
        }
      }
      v250 = *(std::__shared_weak_count **)(v13 + 1864);
      if (v250)
      {
        v251 = (unint64_t *)&v250->__shared_owners_;
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 - 1, v251));
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
          std::__shared_weak_count::__release_weak(v250);
        }
      }
      v253 = *(std::__shared_weak_count **)(v13 + 1848);
      if (v253)
      {
        v254 = (unint64_t *)&v253->__shared_owners_;
        do
          v255 = __ldaxr(v254);
        while (__stlxr(v255 - 1, v254));
        if (!v255)
        {
          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
          std::__shared_weak_count::__release_weak(v253);
        }
      }
      if (*(char *)(v13 + 1839) < 0)
        operator delete(*(void **)v351);
      if (*(_BYTE *)(v13 + 1368))
      {
        v256 = *(_OWORD *)(v13 + 2000);
        *(_OWORD *)(v13 + 1888) = *(_OWORD *)(v13 + 1984);
        *(_OWORD *)(v13 + 1904) = v256;
        AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v352, v332, v331);
        v257 = *(std::__shared_weak_count **)(v13 + 1912);
        if (v257)
        {
          v258 = (unint64_t *)&v257->__shared_owners_;
          do
            v259 = __ldaxr(v258);
          while (__stlxr(v259 - 1, v258));
          if (!v259)
          {
            ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
            std::__shared_weak_count::__release_weak(v257);
          }
        }
        v260 = *(std::__shared_weak_count **)(v13 + 1896);
        if (v260)
        {
          v261 = (unint64_t *)&v260->__shared_owners_;
          do
            v262 = __ldaxr(v261);
          while (__stlxr(v262 - 1, v261));
          if (!v262)
          {
            ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
            std::__shared_weak_count::__release_weak(v260);
          }
        }
        v263 = *(_BYTE *)(v13 + 1368);
        if (v263)
        {
          AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v348, (uint64_t)v347);
          v264 = (_QWORD *)(v13 + 1352);
          *(_QWORD *)(v13 + 952) = *(_QWORD *)(v13 + 1352);
          v265 = (_QWORD *)(v13 + 960);
          v266 = (_QWORD *)(v13 + 1360);
          v267 = v336;
        }
        else
        {
          std::runtime_error::runtime_error(v348, v347);
          *(_OWORD *)(v13 + 592) = *(_OWORD *)(v13 + 992);
          *(_QWORD *)(v13 + 576) = off_1E2521330;
          *(_QWORD *)(v13 + 608) = *(_QWORD *)(v13 + 1008);
          v269 = v13 + 616;
          v270 = *(_QWORD *)(v13 + 1016);
          *(_QWORD *)(v13 + 616) = v270;
          v271 = *(_QWORD *)(v13 + 1024);
          *(_QWORD *)(v13 + 624) = v271;
          if (v271)
          {
            *(_QWORD *)(v270 + 16) = v269;
            *(_QWORD *)(v13 + 1008) = v13 + 1016;
            *(_QWORD *)(v13 + 1016) = 0;
            *(_QWORD *)(v13 + 1024) = 0;
          }
          else
          {
            *(_QWORD *)(v13 + 608) = v269;
          }
          v267 = v336;
          v264 = (_QWORD *)(v13 + 1032);
          *(_QWORD *)(v13 + 632) = *(_QWORD *)(v13 + 1032);
          v265 = (_QWORD *)(v13 + 640);
          v266 = (_QWORD *)(v13 + 1040);
        }
        *v265 = *v266;
        *v264 = 0;
        v264[1] = 0;
        *(_BYTE *)(v13 + 968) = v263;
        *(_QWORD *)(v13 + 1376) = *(_QWORD *)(v13 + 1544);
        v281 = v13 + 1384;
        v282 = *(_QWORD *)(v13 + 1552);
        *(_QWORD *)(v13 + 1384) = v282;
        v283 = *(_QWORD *)(v13 + 1560);
        *(_QWORD *)(v13 + 1392) = v283;
        if (v283)
        {
          *(_QWORD *)(v282 + 16) = v281;
          *(_QWORD *)v352 = v13 + 1552;
          *(_QWORD *)(v13 + 1552) = 0;
          *(_QWORD *)(v13 + 1560) = 0;
        }
        else
        {
          *(_QWORD *)v346 = v281;
        }
        v284 = *(_OWORD *)(v13 + 1568);
        *(_QWORD *)(v13 + 1576) = 0;
        *(_QWORD *)(v13 + 1568) = 0;
        v285 = *(_OWORD *)(v13 + 1584);
        *((_OWORD *)v267 + 23) = v284;
        *((_OWORD *)v267 + 24) = v285;
        *(_QWORD *)(v13 + 1584) = 0;
        *(_QWORD *)(v13 + 1592) = 0;
        *(_BYTE *)(v13 + 1432) = 0;
        *(_BYTE *)(v13 + 1456) = 0;
        if (*(_BYTE *)(v13 + 1624))
        {
          *(_OWORD *)(v13 + 1432) = *(_OWORD *)(v13 + 1600);
          *(_QWORD *)(v13 + 1448) = *(_QWORD *)(v13 + 1616);
          *(_QWORD *)(v13 + 1600) = 0;
          *(_QWORD *)(v13 + 1616) = 0;
          *(_QWORD *)(v13 + 1608) = 0;
          *(_BYTE *)(v13 + 1456) = 1;
        }
        *(_BYTE *)(v13 + 1464) = 0;
        *(_DWORD *)(v13 + 1480) = -1;
        v286 = *(unsigned int *)(v13 + 1648);
        if ((_DWORD)v286 != -1)
        {
          ((void (*)(std::runtime_error *, unint64_t, unint64_t))off_1E253CA98[v286])(&v371, v13 + 1464, v13 + 1632);
          *(_DWORD *)(v13 + 1480) = v286;
        }
        *(_DWORD *)(v13 + 1504) = *(_DWORD *)(v13 + 1672);
        *(_OWORD *)(v13 + 1488) = *(_OWORD *)(v13 + 1656);
        v287 = *(_QWORD *)(v13 + 1704);
        if (v287)
        {
          v288 = v333;
          if (v287 == v13 + 1680)
          {
            *(_QWORD *)(v13 + 1536) = v13 + 1512;
            (*(void (**)(uint64_t))(*(_QWORD *)v287 + 24))(v287);
          }
          else
          {
            *(_QWORD *)(v13 + 1536) = v287;
            *(_QWORD *)(v13 + 1704) = 0;
          }
        }
        else
        {
          v288 = v333;
          *(_QWORD *)(v13 + 1536) = 0;
        }
        AMSCore::ExecuteHTTPRequestTask::perform(v288, (uint64_t)v348, (uint64_t)v346);
        v289 = *(_OWORD *)(v13 + 1952);
        v288->__vftable = 0;
        v288->__imp_.__imp_ = 0;
        *(_OWORD *)(v13 + 1936) = v289;
        if (!atomic_load((unint64_t *)(v289 + 440)))
        {
          *v334 = 1;
          v291 = (unint64_t *)(*(_QWORD *)(v13 + 1936) + 440);
          do
            v292 = __ldaxr(v291);
          while (__stlxr(v13, v291));
          if (!v292)
            return;
        }
        AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::operator co_await(void) &&::CoAwaiter::await_resume(v44, *(_QWORD *)(v13 + 1936));
        v293 = *(std::__shared_weak_count **)(v13 + 1944);
        if (v293)
        {
          v294 = (unint64_t *)&v293->__shared_owners_;
          do
            v295 = __ldaxr(v294);
          while (__stlxr(v295 - 1, v294));
          if (!v295)
          {
            ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
            std::__shared_weak_count::__release_weak(v293);
          }
        }
        v296 = *(std::__shared_weak_count **)(v13 + 1960);
        if (v296)
        {
          v297 = (unint64_t *)&v296->__shared_owners_;
          do
            v298 = __ldaxr(v297);
          while (__stlxr(v298 - 1, v297));
          if (!v298)
          {
            ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
            std::__shared_weak_count::__release_weak(v296);
          }
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options(v346);
        if (*(_BYTE *)(v13 + 968))
        {
          v299 = *(std::__shared_weak_count **)(v13 + 960);
          if (v299)
          {
            v300 = (unint64_t *)&v299->__shared_owners_;
            do
              v301 = __ldaxr(v300);
            while (__stlxr(v301 - 1, v300));
            if (!v301)
            {
              ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
              std::__shared_weak_count::__release_weak(v299);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v348->__vftable);
        }
        else
        {
          ((void (*)(std::runtime_error *))v348->~runtime_error)(v348);
        }
        if (*(_BYTE *)(v13 + 568))
        {
          AMSCore::HTTPResponse::getDecodedObject(*(AMSCore::HTTPResponse **)(v13 + 336));
          if (*(_BYTE *)(v302 + 72))
          {
            if (!*(_BYTE *)(v13 + 1784))
              goto LABEL_513;
            (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v13 + 1968)
                                                                                              + 32))(&v371, *(_QWORD *)(v13 + 1968), *(unsigned int *)(v13 + 1736), v302);
            AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::expected<void,AMSCore::Error>>(v359, &v371);
            if (!(_BYTE)__p)
              ((void (*)(std::runtime_error *))v371.~runtime_error)(&v371);
            if (*(_BYTE *)(v13 + 568))
            {
              v303 = *(std::__shared_weak_count **)(v13 + 344);
              if (v303)
              {
                v304 = (unint64_t *)&v303->__shared_owners_;
                do
                  v305 = __ldaxr(v304);
                while (__stlxr(v305 - 1, v304));
                if (!v305)
                {
                  ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                  std::__shared_weak_count::__release_weak(v303);
                }
              }
              AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v13 + 168));
              v306 = *(std::__shared_weak_count **)(v13 + 160);
              if (v306)
              {
                v307 = (unint64_t *)&v306->__shared_owners_;
                do
                  v308 = __ldaxr(v307);
                while (__stlxr(v308 - 1, v307));
                if (!v308)
                {
                  ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                  std::__shared_weak_count::__release_weak(v306);
                }
              }
            }
            else
            {
              ((void (*)(std::runtime_error *))v44->~runtime_error)(v44);
            }
            AMSCore::ExecuteHTTPRequestTask::Options::~Options(v352);
            v39 = 0;
            v280 = 0;
LABEL_493:
            v360 = v280;
            if (*(_BYTE *)(v13 + 1368))
            {
              v309 = *(std::__shared_weak_count **)(v13 + 1360);
              if (v309)
              {
                v310 = (unint64_t *)&v309->__shared_owners_;
                do
                  v311 = __ldaxr(v310);
                while (__stlxr(v311 - 1, v310));
                if (!v311)
                {
                  ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                  std::__shared_weak_count::__release_weak(v309);
                }
              }
              AMSCore::EncodeHTTPRequestTask::Options::~Options(v226);
            }
            else
            {
              (*(void (**)(void **))*v226)(v226);
            }
            if (!*(_BYTE *)(*(_QWORD *)(v13 + 1928) + 72))
              goto LABEL_513;
            (*(void (**)(_QWORD))(*(_QWORD *)**v335 + 16))(**v335);
            v63 = 0;
            if (*(_BYTE *)(v13 + 1784))
              goto LABEL_503;
            goto LABEL_98;
          }
          AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError &>((uint64_t)&v371, (const std::runtime_error *)v302);
        }
        else
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError &>((uint64_t)&v371, v44);
        }
        AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>((uint64_t)v359, &v371);
        std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v371);
      }
      std::runtime_error::runtime_error(&v371, v347);
      *(_OWORD *)v372 = *(_OWORD *)(v13 + 992);
      v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v268 = *(_QWORD *)(v13 + 1016);
      *(_QWORD *)&v372[16] = *(_QWORD *)(v13 + 1008);
      *(_QWORD *)&v373 = v268;
      *((_QWORD *)&v373 + 1) = *(_QWORD *)(v13 + 1024);
      if (*((_QWORD *)&v373 + 1))
      {
        *(_QWORD *)(v268 + 16) = &v373;
        *(_QWORD *)(v13 + 1008) = v13 + 1016;
        *(_QWORD *)(v13 + 1016) = 0;
        *(_QWORD *)(v13 + 1024) = 0;
      }
      else
      {
        *(_QWORD *)&v372[16] = &v373;
      }
      v374 = *(_OWORD *)v336;
      *(_QWORD *)v336 = 0;
      *((_QWORD *)v336 + 1) = 0;
      LOBYTE(__p) = 1;
      std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v371);
      *(_OWORD *)&__what_arg[16] = *(_OWORD *)v372;
      *(_QWORD *)__what_arg = off_1E2521330;
      v368 = *(__int128 **)&v372[16];
      v369 = v373;
      if (*((_QWORD *)&v373 + 1))
      {
        *(_QWORD *)(v373 + 16) = &v369;
        *(_QWORD *)&v372[16] = &v373;
        v373 = 0uLL;
      }
      else
      {
        v368 = &v369;
      }
      v370 = v374;
      v374 = 0uLL;
      std::runtime_error::runtime_error(&v362, (const std::runtime_error *)__what_arg);
      v363 = *(_OWORD *)&__what_arg[16];
      v362.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v272 = (unsigned int *)v369;
      v364 = v368;
      v365 = v369;
      if (*((_QWORD *)&v369 + 1))
      {
        *(_QWORD *)(v369 + 16) = &v365;
        v272 = 0;
        v368 = &v369;
        v369 = 0uLL;
      }
      else
      {
        v364 = &v365;
      }
      v366 = v370;
      v370 = 0uLL;
      *(_QWORD *)__what_arg = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v368, v272);
      MEMORY[0x18D7898AC](__what_arg);
      v44 = v358;
      if (*(_BYTE *)(v13 + 104))
      {
        if (!*(_BYTE *)(v13 + 96))
          ((void (*)(std::runtime_error *))v21->~runtime_error)(v21);
        *(_BYTE *)(v13 + 104) = 0;
      }
      std::runtime_error::runtime_error(v21, &v362);
      v274 = v364;
      v273 = v365;
      *(_QWORD *)(v13 + 64) = v365;
      v275 = v13 + 64;
      *(_OWORD *)(v13 + 40) = v363;
      *(_QWORD *)(v13 + 24) = off_1E2521330;
      *(_QWORD *)(v13 + 56) = v274;
      v276 = *((_QWORD *)&v365 + 1);
      *(_QWORD *)(v13 + 72) = *((_QWORD *)&v365 + 1);
      if (v276)
      {
        *(_QWORD *)(v273 + 16) = v275;
        v273 = 0;
        v364 = &v365;
        v365 = 0uLL;
      }
      else
      {
        *(_QWORD *)(v13 + 56) = v275;
      }
      *(_OWORD *)(v13 + 80) = v366;
      v366 = 0uLL;
      *(_BYTE *)(v13 + 96) = 0;
      *(_BYTE *)(v13 + 104) = 1;
      v362.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v364, (unsigned int *)v273);
      MEMORY[0x18D7898AC](&v362);
      if ((_BYTE)__p)
      {
        v371.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v277 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
        if (*((_QWORD *)&v374 + 1))
        {
          v278 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
          do
            v279 = __ldaxr(v278);
          while (__stlxr(v279 - 1, v278));
          if (!v279)
          {
            ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
            std::__shared_weak_count::__release_weak(v277);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v372[16], (unsigned int *)v373);
        MEMORY[0x18D7898AC](&v371);
      }
      v39 = *(AMSCore::EncodeHTTPRequestTask::Options **)(v13 + 2008);
      v280 = *(_QWORD *)(v13 + 1992);
      v226 = (void **)&v347->__vftable;
      goto LABEL_493;
    }
  }
  v195 = *(_QWORD *)(v316 + 1712);
  if (*(_BYTE *)(v195 + 408))
  {
    v196 = (const std::runtime_error *)(v195 + 8);
    v197 = *(_BYTE *)(v195 + 400);
    if (v197)
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options(v316, (uint64_t)v196);
      v198 = (_QWORD *)(v195 + 384);
      *(_QWORD *)(v58 + 848) = *(_QWORD *)(v195 + 384);
      v199 = (_QWORD *)(v58 + 856);
      v200 = (_QWORD *)(v195 + 392);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)v316, v196);
      *(_OWORD *)(v58 + 488) = *(_OWORD *)(v195 + 24);
      *(_QWORD *)(v58 + 472) = off_1E2521330;
      v201 = (_QWORD *)(v195 + 48);
      v202 = *(_QWORD *)(v195 + 48);
      v203 = v58 + 512;
      *(_QWORD *)(v58 + 504) = *(_QWORD *)(v195 + 40);
      *(_QWORD *)(v58 + 512) = v202;
      v204 = *(_QWORD *)(v195 + 56);
      *(_QWORD *)(v58 + 520) = v204;
      if (v204)
      {
        *(_QWORD *)(v202 + 16) = v203;
        *(_QWORD *)(v195 + 40) = v201;
        *v201 = 0;
        *(_QWORD *)(v195 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v58 + 504) = v203;
      }
      v212 = *(_QWORD *)(v58 + 2184);
      v213 = *(_QWORD *)(v212 + 64);
      v198 = (_QWORD *)(v212 + 64);
      *(_QWORD *)(v58 + 528) = v213;
      v199 = (_QWORD *)(v58 + 536);
      v200 = v198 + 1;
    }
    *v199 = *v200;
    *v198 = 0;
    v198[1] = 0;
    *(_BYTE *)(v58 + 864) = v197;
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)v357, (std::runtime_error *)v316);
    if (*(_BYTE *)(v58 + 864))
    {
      v214 = *(std::__shared_weak_count **)(v58 + 856);
      if (v214)
      {
        v215 = (unint64_t *)&v214->__shared_owners_;
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v316);
    }
    else
    {
      (**(void (***)(uint64_t))v316)(v316);
    }
    v217 = *(_QWORD *)(v58 + 2192);
    if (v217)
    {
      v218 = (unint64_t *)(v217 + 8);
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        v220 = *(std::__shared_weak_count **)(v58 + 2192);
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
    }
    v221 = *(std::__shared_weak_count **)(v58 + 2112);
    if (v221)
    {
      v222 = (unint64_t *)&v221->__shared_owners_;
      do
        v223 = __ldaxr(v222);
      while (__stlxr(v223 - 1, v222));
      if (!v223)
      {
        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
        std::__shared_weak_count::__release_weak(v221);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v323);
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v328);
    v92 = 0;
    v91 = 0;
    goto LABEL_354;
  }
LABEL_513:
  __break(1u);
}

void sub_18CC4FAE0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMSCore::ProvisionTask::perform(unint64_t a1)
{
  std::runtime_error *v2;
  std::runtime_error *v3;
  std::runtime_error *v4;
  AMSCore::ExecuteHTTPRequestTask::Options *v5;
  AMSCore::ExecuteHTTPRequestTask::Options *v6;
  uint64_t v7;
  const std::runtime_error *v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::runtime_error *v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int **v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  unsigned int *v74;
  unsigned int **v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  __int128 *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int **v111;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  __int128 v129;
  unint64_t *v131;
  unint64_t v132;
  AMSCore::ExecuteHTTPRequestTask::Options *v133;
  void **v134;
  _QWORD **v135;
  unint64_t v136;
  std::runtime_error v137;
  __int128 v138;
  unsigned int **v139;
  unsigned int *v140;
  uint64_t v141;
  __int128 v142;
  std::runtime_error v143;
  __int128 v144;
  unsigned int **v145;
  unsigned int *v146;
  uint64_t v147;
  __int128 v148;
  unsigned __int8 v149;
  std::runtime_error v150;
  __int128 v151;
  unsigned int **v152;
  unsigned int *v153;
  uint64_t v154;
  __int128 v155;

  v2 = (std::runtime_error *)(a1 + 152);
  v3 = (std::runtime_error *)(a1 + 576);
  v4 = (std::runtime_error *)(a1 + 976);
  v5 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1376);
  v6 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1544);
  v134 = (void **)(a1 + 1712);
  v135 = (_QWORD **)(a1 + 1920);
  v136 = a1 + 16;
  if (*(_BYTE *)(a1 + 2044))
    goto LABEL_2;
  v14 = *(_QWORD *)v6;
  if (!*(_BYTE *)(*(_QWORD *)v6 + 408))
    goto LABEL_196;
  v15 = (const std::runtime_error *)(v14 + 8);
  v16 = *(_BYTE *)(v14 + 400);
  if (v16)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 976, (uint64_t)v15);
    v17 = *(_QWORD *)(v14 + 384);
    v18 = (_QWORD *)(v14 + 392);
    v19 = (_QWORD *)(v14 + 384);
    *(_QWORD *)(a1 + 1352) = v17;
    v20 = (_QWORD *)(a1 + 1360);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 976), v15);
    *(_OWORD *)(a1 + 992) = *(_OWORD *)(v14 + 24);
    *(_QWORD *)(a1 + 976) = off_1E2521330;
    v30 = (_QWORD *)(v14 + 48);
    v31 = *(_QWORD *)(v14 + 48);
    *(_QWORD *)(a1 + 1008) = *(_QWORD *)(v14 + 40);
    v32 = a1 + 1016;
    *(_QWORD *)(a1 + 1016) = v31;
    v33 = *(_QWORD *)(v14 + 56);
    *(_QWORD *)(a1 + 1024) = v33;
    if (v33)
    {
      *(_QWORD *)(v31 + 16) = v32;
      *(_QWORD *)(v14 + 40) = v30;
      *v30 = 0;
      *(_QWORD *)(v14 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 1008) = v32;
    }
    v78 = *(_QWORD *)(v14 + 64);
    v19 = (_QWORD *)(v14 + 64);
    *(_QWORD *)(a1 + 1032) = v78;
    v20 = (_QWORD *)(a1 + 1040);
    v18 = v19 + 1;
  }
  *v20 = *v18;
  *v19 = 0;
  v19[1] = 0;
  *(_BYTE *)(a1 + 1368) = v16;
  v79 = *(std::__shared_weak_count **)(a1 + 1552);
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *(std::__shared_weak_count **)(a1 + 160);
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *(std::__shared_weak_count **)(a1 + 1880);
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *(std::__shared_weak_count **)(a1 + 1864);
  if (!v88)
    goto LABEL_111;
  v89 = (unint64_t *)&v88->__shared_owners_;
  do
    v90 = __ldaxr(v89);
  while (__stlxr(v90 - 1, v89));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
    v91 = *(std::__shared_weak_count **)(a1 + 1848);
    if (!v91)
      goto LABEL_115;
  }
  else
  {
LABEL_111:
    v91 = *(std::__shared_weak_count **)(a1 + 1848);
    if (!v91)
      goto LABEL_115;
  }
  v92 = (unint64_t *)&v91->__shared_owners_;
  do
    v93 = __ldaxr(v92);
  while (__stlxr(v93 - 1, v92));
  if (v93)
  {
LABEL_115:
    if ((*(char *)(a1 + 1839) & 0x80000000) == 0)
      goto LABEL_117;
    goto LABEL_116;
  }
  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
  std::__shared_weak_count::__release_weak(v91);
  if (*(char *)(a1 + 1839) < 0)
LABEL_116:
    operator delete(*(void **)(a1 + 1816));
LABEL_117:
  v94 = (__int128 *)(a1 + 1032);
  if (!*(_BYTE *)(a1 + 1368))
  {
    std::runtime_error::runtime_error(&v143, v4);
    v144 = *(_OWORD *)(a1 + 992);
    v143.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v105 = *(_QWORD *)(a1 + 1016);
    v145 = *(unsigned int ***)(a1 + 1008);
    v146 = (unsigned int *)v105;
    v147 = *(_QWORD *)(a1 + 1024);
    if (v147)
    {
      *(_QWORD *)(v105 + 16) = &v146;
      *(_QWORD *)(a1 + 1008) = a1 + 1016;
      *(_QWORD *)(a1 + 1016) = 0;
      *(_QWORD *)(a1 + 1024) = 0;
    }
    else
    {
      v145 = &v146;
    }
    v148 = *v94;
    *(_QWORD *)v94 = 0;
    *(_QWORD *)(a1 + 1040) = 0;
    v149 = 1;
    std::runtime_error::runtime_error(&v150, &v143);
    v151 = v144;
    v150.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v152 = v145;
    v153 = v146;
    v154 = v147;
    if (v147)
    {
      *((_QWORD *)v146 + 2) = &v153;
      v145 = &v146;
      v146 = 0;
      v147 = 0;
    }
    else
    {
      v152 = &v153;
    }
    v155 = v148;
    v148 = 0uLL;
    std::runtime_error::runtime_error(&v137, &v150);
    v138 = v151;
    v137.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v109 = v153;
    v139 = v152;
    v140 = v153;
    v141 = v154;
    if (v154)
    {
      *((_QWORD *)v153 + 2) = &v140;
      v109 = 0;
      v152 = &v153;
      v153 = 0;
      v154 = 0;
    }
    else
    {
      v139 = &v140;
    }
    v142 = v155;
    v155 = 0uLL;
    v150.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v152, v109);
    MEMORY[0x18D7898AC](&v150);
    if (*(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a1 + 96))
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v137);
    v111 = v139;
    v110 = v140;
    *(_QWORD *)(a1 + 64) = v140;
    v112 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v138;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v111;
    v113 = v141;
    *(_QWORD *)(a1 + 72) = v141;
    if (v113)
    {
      *((_QWORD *)v110 + 2) = v112;
      v110 = 0;
      v139 = &v140;
      v140 = 0;
      v141 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v112;
    }
    *(_OWORD *)(a1 + 80) = v142;
    v142 = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v137.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v139, v110);
    MEMORY[0x18D7898AC](&v137);
    if (v149)
    {
      v143.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v114 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
      if (*((_QWORD *)&v148 + 1))
      {
        v115 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v145, v146);
      MEMORY[0x18D7898AC](&v143);
    }
    v68 = *(_QWORD *)(a1 + 2008);
    v69 = *(_QWORD *)(a1 + 1992);
    if (*(_BYTE *)(a1 + 1368))
      goto LABEL_82;
LABEL_161:
    ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
    goto LABEL_162;
  }
  *(_OWORD *)(a1 + 1888) = *(_OWORD *)(a1 + 1984);
  *(_OWORD *)(a1 + 1904) = *(_OWORD *)(a1 + 2000);
  AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v6, (__int128 *)(a1 + 1888), (__int128 *)(a1 + 1904));
  v95 = *(std::__shared_weak_count **)(a1 + 1912);
  if (!v95)
    goto LABEL_122;
  v96 = (unint64_t *)&v95->__shared_owners_;
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (!v97)
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
    v98 = *(std::__shared_weak_count **)(a1 + 1896);
    if (!v98)
      goto LABEL_126;
  }
  else
  {
LABEL_122:
    v98 = *(std::__shared_weak_count **)(a1 + 1896);
    if (!v98)
      goto LABEL_126;
  }
  v99 = (unint64_t *)&v98->__shared_owners_;
  do
    v100 = __ldaxr(v99);
  while (__stlxr(v100 - 1, v99));
  if (!v100)
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
    v101 = *(_BYTE *)(a1 + 1368);
    if (v101)
      goto LABEL_127;
    goto LABEL_137;
  }
LABEL_126:
  v101 = *(_BYTE *)(a1 + 1368);
  if (v101)
  {
LABEL_127:
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v4);
    v102 = (_QWORD *)(a1 + 1352);
    *(_QWORD *)(a1 + 952) = *(_QWORD *)(a1 + 1352);
    v103 = (_QWORD *)(a1 + 960);
    v104 = (_QWORD *)(a1 + 1360);
    goto LABEL_178;
  }
LABEL_137:
  std::runtime_error::runtime_error(v3, v4);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 992);
  *(_QWORD *)(a1 + 576) = off_1E2521330;
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a1 + 1008);
  v106 = a1 + 616;
  v107 = *(_QWORD *)(a1 + 1016);
  *(_QWORD *)(a1 + 616) = v107;
  v108 = *(_QWORD *)(a1 + 1024);
  *(_QWORD *)(a1 + 624) = v108;
  if (v108)
  {
    *(_QWORD *)(v107 + 16) = v106;
    *(_QWORD *)(a1 + 1008) = a1 + 1016;
    *(_QWORD *)(a1 + 1016) = 0;
    *(_QWORD *)(a1 + 1024) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 608) = v106;
  }
  v102 = (_QWORD *)(a1 + 1032);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a1 + 1032);
  v103 = (_QWORD *)(a1 + 640);
  v104 = (_QWORD *)(a1 + 1040);
LABEL_178:
  *v103 = *v104;
  *v102 = 0;
  v102[1] = 0;
  *(_BYTE *)(a1 + 968) = v101;
  *(_QWORD *)(a1 + 1376) = *(_QWORD *)(a1 + 1544);
  v121 = a1 + 1384;
  v122 = *(_QWORD *)(a1 + 1552);
  *(_QWORD *)(a1 + 1384) = v122;
  v123 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1392) = v123;
  if (v123)
  {
    *(_QWORD *)(v122 + 16) = v121;
    *(_QWORD *)v6 = a1 + 1552;
    *(_QWORD *)(a1 + 1552) = 0;
    *(_QWORD *)(a1 + 1560) = 0;
  }
  else
  {
    *(_QWORD *)v5 = v121;
  }
  v124 = *(_OWORD *)(a1 + 1568);
  *(_QWORD *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1568) = 0;
  v125 = *(_OWORD *)(a1 + 1584);
  *(_OWORD *)(a1 + 1400) = v124;
  *(_OWORD *)(a1 + 1416) = v125;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_QWORD *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 1432) = 0;
  *(_BYTE *)(a1 + 1456) = 0;
  if (*(_BYTE *)(a1 + 1624))
  {
    *(_OWORD *)(a1 + 1432) = *(_OWORD *)(a1 + 1600);
    *(_QWORD *)(a1 + 1448) = *(_QWORD *)(a1 + 1616);
    *(_QWORD *)(a1 + 1600) = 0;
    *(_QWORD *)(a1 + 1616) = 0;
    *(_QWORD *)(a1 + 1608) = 0;
    *(_BYTE *)(a1 + 1456) = 1;
  }
  *(_BYTE *)(a1 + 1464) = 0;
  *(_DWORD *)(a1 + 1480) = -1;
  v126 = *(unsigned int *)(a1 + 1648);
  if ((_DWORD)v126 != -1)
  {
    ((void (*)(std::runtime_error *, unint64_t, unint64_t))off_1E253CA98[v126])(&v143, a1 + 1464, a1 + 1632);
    *(_DWORD *)(a1 + 1480) = v126;
  }
  *(_DWORD *)(a1 + 1504) = *(_DWORD *)(a1 + 1672);
  *(_OWORD *)(a1 + 1488) = *(_OWORD *)(a1 + 1656);
  v127 = *(_QWORD *)(a1 + 1704);
  if (v127)
  {
    if (v127 == a1 + 1680)
    {
      *(_QWORD *)(a1 + 1536) = a1 + 1512;
      (*(void (**)(uint64_t))(*(_QWORD *)v127 + 24))(v127);
      goto LABEL_191;
    }
    v128 = (_QWORD *)(a1 + 1704);
    *(_QWORD *)(a1 + 1536) = v127;
  }
  else
  {
    v128 = (_QWORD *)(a1 + 1536);
  }
  *v128 = 0;
LABEL_191:
  AMSCore::ExecuteHTTPRequestTask::perform((std::runtime_error *)(a1 + 1952), (uint64_t)v3, (uint64_t)v5);
  v129 = *(_OWORD *)(a1 + 1952);
  *(_QWORD *)(a1 + 1952) = 0;
  *(_QWORD *)(a1 + 1960) = 0;
  *(_OWORD *)(a1 + 1936) = v129;
  if (!atomic_load((unint64_t *)(v129 + 440)))
  {
    *(_BYTE *)(a1 + 2044) = 1;
    v131 = (unint64_t *)(*(_QWORD *)(a1 + 1936) + 440);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(a1, v131));
    if (!v132)
      return;
  }
LABEL_2:
  v7 = *(_QWORD *)(a1 + 1936);
  if (!*(_BYTE *)(v7 + 432))
    goto LABEL_196;
  v8 = (const std::runtime_error *)(v7 + 8);
  v9 = *(_BYTE *)(v7 + 424);
  if (v9)
  {
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v7 + 8);
    v8->__vftable = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(v7 + 24);
    v10 = (_QWORD *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(a1 + 176) = v11;
    v12 = a1 + 176;
    v13 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(a1 + 184) = v13;
    if (v13)
    {
      *(_QWORD *)(v11 + 16) = v12;
      *(_QWORD *)(v7 + 24) = v10;
      *v10 = 0;
      *(_QWORD *)(v7 + 40) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 168) = v12;
    }
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(v7 + 48);
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = 0;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(v7 + 64);
    *(_QWORD *)(v7 + 64) = 0;
    *(_QWORD *)(v7 + 72) = 0;
    *(_BYTE *)(a1 + 224) = 0;
    *(_BYTE *)(a1 + 248) = 0;
    if (*(_BYTE *)(v7 + 104))
    {
      v25 = *(_OWORD *)(v7 + 80);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(v7 + 96);
      *(_OWORD *)(a1 + 224) = v25;
      *(_QWORD *)(v7 + 88) = 0;
      *(_QWORD *)(v7 + 96) = 0;
      *(_QWORD *)(v7 + 80) = 0;
      *(_BYTE *)(a1 + 248) = 1;
    }
    *(_BYTE *)(a1 + 256) = 0;
    *(_DWORD *)(a1 + 272) = -1;
    v26 = *(unsigned int *)(v7 + 128);
    if ((_DWORD)v26 != -1)
    {
      ((void (*)(std::runtime_error *, unint64_t, uint64_t))off_1E253CA98[v26])(&v143, a1 + 256, v7 + 112);
      *(_DWORD *)(a1 + 272) = v26;
    }
    v27 = *(_OWORD *)(v7 + 136);
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(v7 + 152);
    *(_OWORD *)(a1 + 280) = v27;
    v28 = (_QWORD *)(v7 + 184);
    v29 = *(_QWORD *)(v7 + 184);
    if (v29)
    {
      if (v29 == v7 + 160)
      {
        *(_QWORD *)(a1 + 328) = a1 + 304;
        (*(void (**)(_QWORD))(*(_QWORD *)*v28 + 24))(*v28);
        goto LABEL_24;
      }
      *(_QWORD *)(a1 + 328) = v29;
    }
    else
    {
      v28 = (_QWORD *)(a1 + 328);
    }
    *v28 = 0;
LABEL_24:
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(v7 + 192);
    *(_QWORD *)(v7 + 192) = 0;
    *(_QWORD *)(v7 + 200) = 0;
    goto LABEL_30;
  }
  std::runtime_error::runtime_error(v2, v8);
  *(_QWORD *)(a1 + 152) = MEMORY[0x1E0DE4F90] + 16;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(v7 + 24);
  *(_QWORD *)(a1 + 152) = off_1E2521330;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(v7 + 40);
  v21 = (_QWORD *)(v7 + 48);
  v22 = *(_QWORD *)(v7 + 48);
  *(_QWORD *)(a1 + 192) = v22;
  v23 = a1 + 192;
  v24 = *(_QWORD *)(v7 + 56);
  *(_QWORD *)(a1 + 200) = v24;
  if (v24)
  {
    *(_QWORD *)(v22 + 16) = v23;
    *(_QWORD *)(v7 + 40) = v21;
    *v21 = 0;
    *(_QWORD *)(v7 + 56) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 184) = v23;
  }
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(v7 + 64);
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 152) = &off_1E2521420;
  *(_BYTE *)(a1 + 248) = 0;
  if (*(_BYTE *)(v7 + 104))
  {
    v34 = *(_OWORD *)(v7 + 80);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(v7 + 96);
    *(_OWORD *)(a1 + 224) = v34;
    *(_QWORD *)(v7 + 88) = 0;
    *(_QWORD *)(v7 + 96) = 0;
    *(_QWORD *)(v7 + 80) = 0;
    *(_BYTE *)(a1 + 248) = 1;
  }
  v35 = *(_OWORD *)(v7 + 128);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(v7 + 112);
  *(_OWORD *)(a1 + 272) = v35;
  v36 = *(_OWORD *)(v7 + 144);
  v37 = *(_OWORD *)(v7 + 160);
  v38 = *(_OWORD *)(v7 + 176);
  *(_OWORD *)(a1 + 329) = *(_OWORD *)(v7 + 185);
  *(_OWORD *)(a1 + 304) = v37;
  *(_OWORD *)(a1 + 320) = v38;
  *(_OWORD *)(a1 + 288) = v36;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(v7 + 208);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(v7 + 224);
  *(_QWORD *)(v7 + 216) = 0;
  *(_QWORD *)(v7 + 224) = 0;
  *(_QWORD *)(v7 + 208) = 0;
  v39 = *(_OWORD *)(v7 + 248);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(v7 + 232);
  *(_OWORD *)(a1 + 392) = v39;
  v40 = *(_OWORD *)(v7 + 264);
  v41 = *(_OWORD *)(v7 + 280);
  v42 = *(_OWORD *)(v7 + 312);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(v7 + 296);
  *(_OWORD *)(a1 + 456) = v42;
  *(_OWORD *)(a1 + 408) = v40;
  *(_OWORD *)(a1 + 424) = v41;
  v43 = *(_OWORD *)(v7 + 328);
  v44 = *(_OWORD *)(v7 + 344);
  v45 = *(_OWORD *)(v7 + 360);
  *(_OWORD *)(a1 + 514) = *(_OWORD *)(v7 + 370);
  *(_OWORD *)(a1 + 488) = v44;
  *(_OWORD *)(a1 + 504) = v45;
  *(_OWORD *)(a1 + 472) = v43;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  if (*(_BYTE *)(v7 + 416))
  {
    v46 = *(_OWORD *)(v7 + 392);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(v7 + 408);
    *(_OWORD *)(a1 + 536) = v46;
    *(_QWORD *)(v7 + 400) = 0;
    *(_QWORD *)(v7 + 408) = 0;
    *(_QWORD *)(v7 + 392) = 0;
    *(_BYTE *)(a1 + 560) = 1;
  }
LABEL_30:
  *(_BYTE *)(a1 + 568) = v9;
  v47 = *(std::__shared_weak_count **)(a1 + 1944);
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *(std::__shared_weak_count **)(a1 + 1960);
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v5);
  if (*(_BYTE *)(a1 + 968))
  {
    v53 = *(std::__shared_weak_count **)(a1 + 960);
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
    if (*(_BYTE *)(a1 + 568))
      goto LABEL_47;
LABEL_56:
    v133 = v6;
    AMSCore::Error::Error(&v143, v2);
    goto LABEL_58;
  }
  ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  if (!*(_BYTE *)(a1 + 568))
    goto LABEL_56;
LABEL_47:
  AMSCore::HTTPResponse::getDecodedObject(*(AMSCore::HTTPResponse **)(a1 + 336));
  if (*(_BYTE *)(v56 + 72))
  {
    if (*(_BYTE *)(a1 + 1784))
    {
      (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 1968) + 32))(&v143, *(_QWORD *)(a1 + 1968), *(unsigned int *)(a1 + 1736), v56);
      if (*(_BYTE *)(a1 + 104))
      {
        if (!*(_BYTE *)(a1 + 96))
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        *(_BYTE *)(a1 + 104) = 0;
      }
      if (v149)
      {
        *(_BYTE *)(a1 + 96) = v149;
        *(_BYTE *)(a1 + 104) = 1;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v143);
        v73 = v144;
        v75 = v145;
        v74 = v146;
        *(_QWORD *)(a1 + 64) = v146;
        v76 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v73;
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = v75;
        v77 = v147;
        *(_QWORD *)(a1 + 72) = v147;
        if (v77)
        {
          *((_QWORD *)v74 + 2) = v76;
          v145 = &v146;
          v146 = 0;
          v147 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v76;
        }
        *(_OWORD *)(a1 + 80) = v148;
        v148 = 0uLL;
        v120 = v149;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        if (!v120)
          ((void (*)(std::runtime_error *))v143.~runtime_error)(&v143);
      }
      goto LABEL_69;
    }
LABEL_196:
    __break(1u);
    return;
  }
  v133 = v6;
  AMSCore::Error::Error(&v143, (const std::runtime_error *)v56);
LABEL_58:
  std::runtime_error::runtime_error(&v150, &v143);
  v151 = v144;
  v57 = v146;
  v150.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v152 = v145;
  v153 = v146;
  v154 = v147;
  if (v147)
  {
    *((_QWORD *)v146 + 2) = &v153;
    v145 = &v146;
    v146 = 0;
    v147 = 0;
    v57 = 0;
  }
  else
  {
    v152 = &v153;
  }
  v155 = v148;
  v148 = 0uLL;
  v143.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v145, v57);
  MEMORY[0x18D7898AC](&v143);
  if (*(_BYTE *)(a1 + 104))
  {
    if (!*(_BYTE *)(a1 + 96))
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    *(_BYTE *)(a1 + 104) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v150);
  v59 = v152;
  v58 = v153;
  *(_QWORD *)(a1 + 64) = v153;
  v60 = a1 + 64;
  *(_OWORD *)(a1 + 40) = v151;
  *(_QWORD *)(a1 + 24) = off_1E2521330;
  *(_QWORD *)(a1 + 56) = v59;
  v61 = v154;
  *(_QWORD *)(a1 + 72) = v154;
  if (v61)
  {
    *((_QWORD *)v58 + 2) = v60;
    v58 = 0;
    v152 = &v153;
    v153 = 0;
    v154 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v60;
  }
  *(_OWORD *)(a1 + 80) = v155;
  v155 = 0uLL;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  v150.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v152, v58);
  MEMORY[0x18D7898AC](&v150);
  v6 = v133;
LABEL_69:
  if (*(_BYTE *)(a1 + 568))
  {
    v62 = *(std::__shared_weak_count **)(a1 + 344);
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 168));
    v65 = *(std::__shared_weak_count **)(a1 + 160);
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v6);
  v68 = 0;
  v69 = 0;
  if (!*(_BYTE *)(a1 + 1368))
    goto LABEL_161;
LABEL_82:
  v70 = *(std::__shared_weak_count **)(a1 + 1360);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v4->__vftable);
LABEL_162:
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 1928) + 72))
    goto LABEL_196;
  (*(void (**)(_QWORD))(*(_QWORD *)**v135 + 16))(**v135);
  if (*(_BYTE *)(a1 + 1784))
  {
    if (*(char *)(a1 + 1735) < 0)
      operator delete(*v134);
  }
  else
  {
    (*(void (**)(void **))*v134)(v134);
  }
  v117 = *(std::__shared_weak_count **)(a1 + 1976);
  if (v117)
  {
    v118 = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  *(_QWORD *)(a1 + 2032) = 0;
  *(_QWORD *)(a1 + 2024) = v69;
  *(_QWORD *)(a1 + 2016) = v68;
  *(_QWORD *)(a1 + 152) = v136;
  *(_QWORD *)a1 = 0;
  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
}

void sub_18CC50D7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AMSCore::ExecuteHTTPRequestTask::Options *a10, uint64_t a11, _QWORD **a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  AMSCore::EncodeHTTPRequestTask::Options *v15;

  std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](v14);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(a10);
  std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](v15);
  _ZZN7AMSCore7finallyIZNS_13ProvisionTask7performENS_10DataBufferENSt3__110shared_ptrINS_13IMediaAccountEEENS_17IAnisetteProvider12AnisetteTypeENS4_INS_4IBagEEENS4_IKNS_11IBundleInfoEEEE3__0EEDaOT_EN7FinallyD1Ev(a12);
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](a11);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v13 + 1968);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC50DFC()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC50B58);
}

void AMSCore::ProvisionTask::perform(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;

  if (!*(_QWORD *)__p)
  {
    v11 = (std::__shared_weak_count *)*((_QWORD *)__p + 254);
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 253);
    v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 252);
    goto LABEL_70;
  }
  if (__p[2044])
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 243);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 245);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1376));
    if (__p[968])
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)__p + 120);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 72);
    }
    else
    {
      (**((void (***)(char *))__p + 72))(__p + 576);
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1544));
    if (__p[1368])
    {
      v29 = (std::__shared_weak_count *)*((_QWORD *)__p + 170);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 122);
    }
    else
    {
      (**((void (***)(char *))__p + 122))(__p + 976);
    }
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v14 = (std::__shared_weak_count *)*((_QWORD *)__p + 194);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)__p + 235);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 233);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 231);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (__p[1839] < 0)
      operator delete(*((void **)__p + 227));
    v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 251);
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 249);
  }
  if (*(_BYTE *)(*((_QWORD *)__p + 241) + 72))
  {
    (*(void (**)(_QWORD))(***((_QWORD ***)__p + 240) + 16))(**((_QWORD **)__p + 240));
    v32 = (void **)(__p + 1712);
    if (__p[1784])
    {
      if (__p[1735] < 0)
        operator delete(*v32);
    }
    else
    {
      (*(void (**)(void **))*v32)(v32);
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)__p + 247);
    if (v11)
    {
      v33 = (unint64_t *)&v11->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v11 = 0;
    }
LABEL_70:
    v35 = (char *)*((_QWORD *)__p + 18);
    if (v35 == __p + 120)
    {
      v36 = 4;
      v35 = __p + 120;
    }
    else
    {
      if (!v35)
      {
LABEL_75:
        if (__p[104] && !__p[96])
          (**((void (***)(char *))__p + 3))(__p + 24);
        do
        {
          v37 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
        if (!v38)
          MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
        if (v13)
        {
          v39 = (unint64_t *)&v13->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (v12)
        {
          v41 = (unint64_t *)&v12->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if (!v11)
          goto LABEL_95;
        v43 = (unint64_t *)&v11->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          if ((__p[1815] & 0x80000000) == 0)
            goto LABEL_97;
        }
        else
        {
LABEL_95:
          if ((__p[1815] & 0x80000000) == 0)
          {
LABEL_97:
            operator delete(__p);
            return;
          }
        }
        operator delete(*((void **)__p + 224));
        goto LABEL_97;
      }
      v36 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
    goto LABEL_75;
  }
  __break(1u);
}

std::string *std::__optional_destruct_base<AMSCore::AccountIdentity,false>::__optional_destruct_base[abi:fe180100]<AMSCore::AccountIdentity const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  this[1].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 4);
  v5 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__s.__data_[16] = 1;
  return this;
}

void sub_18CC51348(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::operator co_await(void) &&::CoAwaiter::await_resume(std::runtime_error *this, uint64_t a2)
{
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  std::runtime_error_vtbl *v8;
  std::runtime_error_vtbl *v9;
  _QWORD *v10;
  uint64_t v11;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  std::runtime_error v20;
  std::runtime_error v21;
  std::runtime_error v22;
  std::runtime_error v23;
  std::runtime_error v24;
  char v25;

  if (*(_BYTE *)(a2 + 432))
  {
    v3 = this;
    v4 = (const std::runtime_error *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 424);
    if (!v5)
    {
      this = std::runtime_error::runtime_error(this, v4);
      v10 = (_QWORD *)(a2 + 48);
      v11 = *(_QWORD *)(a2 + 48);
      v3[2].__imp_.__imp_ = (const char *)v11;
      p_imp = (std::runtime_error_vtbl *)&v3[2].__imp_;
      v3[1] = *(std::runtime_error *)(a2 + 24);
      v3[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 40);
      v13 = *(std::runtime_error_vtbl **)(a2 + 56);
      v3[3].__vftable = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = p_imp;
        *(_QWORD *)(a2 + 40) = v10;
        *v10 = 0;
        *(_QWORD *)(a2 + 56) = 0;
      }
      else
      {
        v3[2].__vftable = p_imp;
      }
      *(std::runtime_error *)((char *)v3 + 56) = *(std::runtime_error *)(a2 + 64);
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      v3->__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
      LOBYTE(v3[4].__imp_.__imp_) = 0;
      LOBYTE(v3[6].__vftable) = 0;
      if (*(_BYTE *)(a2 + 104))
      {
        *(std::runtime_error *)((char *)v3 + 72) = *(std::runtime_error *)(a2 + 80);
        v3[5].__imp_.__imp_ = *(const char **)(a2 + 96);
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
        *(_QWORD *)(a2 + 80) = 0;
        LOBYTE(v3[6].__vftable) = 1;
      }
      v18 = *(_OWORD *)(a2 + 160);
      *(std::runtime_error *)((char *)v3 + 136) = *(std::runtime_error *)(a2 + 144);
      *(_OWORD *)&v3[9].__imp_.__imp_ = v18;
      *(std::runtime_error *)((char *)v3 + 168) = *(std::runtime_error *)(a2 + 176);
      *(std::runtime_error *)((char *)v3 + 177) = *(std::runtime_error *)(a2 + 185);
      v19 = *(_OWORD *)(a2 + 128);
      *(std::runtime_error *)((char *)v3 + 104) = *(std::runtime_error *)(a2 + 112);
      *(_OWORD *)&v3[7].__imp_.__imp_ = v19;
      *(std::runtime_error *)((char *)v3 + 200) = *(std::runtime_error *)(a2 + 208);
      v3[13].__imp_.__imp_ = *(const char **)(a2 + 224);
      *(_QWORD *)(a2 + 208) = 0;
      *(_QWORD *)(a2 + 216) = 0;
      *(_QWORD *)(a2 + 224) = 0;
      v20 = *(std::runtime_error *)(a2 + 344);
      v21 = *(std::runtime_error *)(a2 + 360);
      v3[20] = *(std::runtime_error *)(a2 + 328);
      v3[21] = v20;
      v3[22] = v21;
      *(std::runtime_error *)((char *)v3 + 362) = *(std::runtime_error *)(a2 + 370);
      v22 = *(std::runtime_error *)(a2 + 280);
      v3[16] = *(std::runtime_error *)(a2 + 264);
      v3[17] = v22;
      v23 = *(std::runtime_error *)(a2 + 312);
      v3[18] = *(std::runtime_error *)(a2 + 296);
      v3[19] = v23;
      v24 = *(std::runtime_error *)(a2 + 248);
      v3[14] = *(std::runtime_error *)(a2 + 232);
      v3[15] = v24;
      LOBYTE(v3[24].__vftable) = 0;
      LOBYTE(v3[25].__imp_.__imp_) = 0;
      if (*(_BYTE *)(a2 + 416))
      {
        v3[25].__vftable = *(std::runtime_error_vtbl **)(a2 + 408);
        v3[24] = *(std::runtime_error *)(a2 + 392);
        *(_QWORD *)(a2 + 400) = 0;
        *(_QWORD *)(a2 + 408) = 0;
        *(_QWORD *)(a2 + 392) = 0;
        LOBYTE(v3[25].__imp_.__imp_) = 1;
      }
      goto LABEL_24;
    }
    v6 = (_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 32);
    *this = *(std::runtime_error *)(a2 + 8);
    v4->__vftable = 0;
    v4->__imp_.__imp_ = 0;
    this[1].__vftable = *(std::runtime_error_vtbl **)(a2 + 24);
    this[1].__imp_.__imp_ = (const char *)v7;
    v8 = (std::runtime_error_vtbl *)&this[1].__imp_;
    v9 = *(std::runtime_error_vtbl **)(a2 + 40);
    this[2].__vftable = v9;
    if (v9)
    {
      *(_QWORD *)(v7 + 16) = v8;
      *(_QWORD *)(a2 + 24) = v6;
      *v6 = 0;
      *(_QWORD *)(a2 + 40) = 0;
    }
    else
    {
      this[1].__vftable = v8;
    }
    LOBYTE(this[4].__imp_.__imp_) = 0;
    v14 = *(_OWORD *)(a2 + 48);
    v15 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_OWORD *)&this[2].__imp_.__imp_ = v14;
    *(_OWORD *)&this[3].__imp_.__imp_ = v15;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    LOBYTE(this[6].__vftable) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      *(std::runtime_error *)((char *)this + 72) = *(std::runtime_error *)(a2 + 80);
      this[5].__imp_.__imp_ = *(const char **)(a2 + 96);
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      LOBYTE(this[6].__vftable) = 1;
    }
    LOBYTE(this[6].__imp_.__imp_) = 0;
    LODWORD(this[7].__imp_.__imp_) = -1;
    v16 = *(unsigned int *)(a2 + 128);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *))off_1E253CA98[v16])(&v25);
      LODWORD(v3[7].__imp_.__imp_) = v16;
    }
    v17 = (_QWORD *)(a2 + 184);
    this = *(std::runtime_error **)(a2 + 184);
    v3[8] = *(std::runtime_error *)(a2 + 136);
    LODWORD(v3[9].__vftable) = *(_DWORD *)(a2 + 152);
    if (this)
    {
      if (this == (std::runtime_error *)(a2 + 160))
      {
        v3[11].__vftable = (std::runtime_error_vtbl *)&v3[9].__imp_;
        this = (std::runtime_error *)((uint64_t (*)(std::runtime_error *))this->__vftable[1].~runtime_error)(this);
        goto LABEL_18;
      }
      v3[11].__vftable = (std::runtime_error_vtbl *)this;
    }
    else
    {
      v17 = &v3[11].__vftable;
    }
    *v17 = 0;
LABEL_18:
    *(std::runtime_error *)((char *)v3 + 184) = *(std::runtime_error *)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
LABEL_24:
    LOBYTE(v3[26].__vftable) = v5;
    return this;
  }
  __break(1u);
  return this;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError &>(uint64_t a1, const std::runtime_error *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::runtime_error v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  AMSCore::Error::Error(&v7, a2);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v7);
  *(_OWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = off_1E2521330;
  v3 = v10;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v3;
  v4 = a1 + 40;
  v5 = v11;
  *(_QWORD *)(a1 + 48) = v11;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    v9 = &v10;
    v10 = 0;
    v11 = 0;
    v3 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v4;
  }
  *(_OWORD *)(a1 + 56) = v12;
  v12 = 0uLL;
  v7.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v3);
  return MEMORY[0x18D7898AC](&v7);
}

std::runtime_error *AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::expected<void,AMSCore::Error>>(std::runtime_error *result, std::runtime_error *a2)
{
  uint64_t v3;
  std::runtime_error *p_imp;
  char imp;
  std::runtime_error_vtbl *v6;
  const char *v7;
  uint64_t v8;
  std::runtime_error_vtbl *v9;

  v3 = (uint64_t)result;
  p_imp = (std::runtime_error *)&result->__imp_;
  if (LOBYTE(result[5].__imp_.__imp_))
  {
    if (!LOBYTE(result[5].__vftable))
      result = (std::runtime_error *)((uint64_t (*)(std::__libcpp_refstring *))p_imp->~runtime_error)(&result->__imp_);
    *(_BYTE *)(v3 + 88) = 0;
  }
  imp = (char)a2[4].__imp_.__imp_;
  if (!imp)
  {
    result = std::runtime_error::runtime_error(p_imp, a2);
    *(std::runtime_error *)(v3 + 24) = a2[1];
    v6 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v7 = a2[2].__imp_.__imp_;
    *(_QWORD *)(v3 + 48) = v7;
    v8 = v3 + 48;
    *(_QWORD *)(v3 + 8) = off_1E2521330;
    *(_QWORD *)(v3 + 40) = a2[2].__vftable;
    v9 = a2[3].__vftable;
    *(_QWORD *)(v3 + 56) = v9;
    if (v9)
    {
      *((_QWORD *)v7 + 2) = v8;
      a2[2].__vftable = v6;
      v6->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      *(_QWORD *)(v3 + 40) = v8;
    }
    *(std::runtime_error *)(v3 + 64) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
  }
  *(_BYTE *)(v3 + 80) = imp;
  *(_BYTE *)(v3 + 88) = 1;
  return result;
}

uint64_t std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 416))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 192);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 16));
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

_QWORD **_ZZN7AMSCore7finallyIZNS_13ProvisionTask7performENS_10DataBufferENSt3__110shared_ptrINS_13IMediaAccountEEENS_17IAnisetteProvider12AnisetteTypeENS4_INS_4IBagEEENS4_IKNS_11IBundleInfoEEEE3__0EEDaOT_EN7FinallyD1Ev(_QWORD **result)
{
  _QWORD **v1;

  if (*((_BYTE *)result[1] + 72))
  {
    v1 = result;
    (*(void (**)(_QWORD))(*(_QWORD *)**result + 16))(**result);
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

void AMSCore::`anonymous namespace'::encodeFinishProvisioningRequest(unint64_t a1)
{
  std::runtime_error *v2;
  void **v3;
  void **v4;
  std::runtime_error *v5;
  uint64_t v6;
  uint64_t v7;
  const std::runtime_error *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v75;
  unint64_t v76;
  unsigned int *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::runtime_error v85;
  __int128 v86;
  unsigned int **v87;
  unsigned int *v88;
  unsigned int *v89;
  __int128 v90;
  std::runtime_error v91;
  __int128 v92;
  unsigned int **v93;
  unsigned int *v94;
  unsigned int *v95;
  __int128 v96;
  char v97;
  std::runtime_error v98;
  __int128 v99;
  unsigned int **v100;
  unsigned int *v101[2];
  __int128 v102;

  v2 = (std::runtime_error *)(a1 + 472);
  v3 = (void **)(a1 + 872);
  v4 = (void **)(a1 + 1248);
  v5 = (std::runtime_error *)(a1 + 1624);
  v6 = a1 + 1992;
  if (*(_BYTE *)(a1 + 2216))
    goto LABEL_2;
  v13 = *(_QWORD *)(a1 + 2168);
  if (!*(_BYTE *)(v13 + 168))
    goto LABEL_114;
  v14 = *(_BYTE *)(v13 + 160);
  std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>((std::runtime_error *)(a1 + 1624), v14, (std::runtime_error *)(v13 + 8));
  *(_BYTE *)(a1 + 1776) = v14;
  v15 = *(_QWORD *)(a1 + 2176);
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      v18 = *(std::__shared_weak_count **)(a1 + 2176);
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v19 = *(std::__shared_weak_count **)(a1 + 480);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(std::__shared_weak_count **)(a1 + 2096);
  if (!v22)
    goto LABEL_20;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((*(char *)(a1 + 2039) & 0x80000000) == 0)
    {
LABEL_21:
      if (*(_BYTE *)(a1 + 1776))
        goto LABEL_22;
LABEL_79:
      std::runtime_error::runtime_error(&v91, v5);
      v92 = *(_OWORD *)(a1 + 1640);
      v91.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v68 = *(_QWORD *)(a1 + 1664);
      v93 = *(unsigned int ***)(a1 + 1656);
      v94 = (unsigned int *)v68;
      v95 = *(unsigned int **)(a1 + 1672);
      if (v95)
      {
        *(_QWORD *)(v68 + 16) = &v94;
        *(_QWORD *)(a1 + 1656) = a1 + 1664;
        *(_QWORD *)(a1 + 1664) = 0;
        *(_QWORD *)(a1 + 1672) = 0;
      }
      else
      {
        v93 = &v94;
      }
      v96 = *(_OWORD *)(a1 + 1680);
      *(_QWORD *)(a1 + 1688) = 0;
      *(_QWORD *)(a1 + 1680) = 0;
      v97 = 1;
      std::runtime_error::runtime_error(&v85, &v91);
      v86 = v92;
      v85.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v87 = v93;
      v88 = v94;
      v89 = v95;
      if (v95)
      {
        *((_QWORD *)v94 + 2) = &v88;
        v93 = &v94;
        v94 = 0;
        v95 = 0;
      }
      else
      {
        v87 = &v88;
      }
      v90 = v96;
      v96 = 0uLL;
      std::runtime_error::runtime_error(&v98, &v85);
      v99 = v86;
      v77 = v88;
      v98.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v100 = v87;
      v101[0] = v88;
      v101[1] = v89;
      if (v89)
      {
        *((_QWORD *)v88 + 2) = v101;
        v77 = 0;
        v87 = &v88;
        v88 = 0;
        v89 = 0;
      }
      else
      {
        v100 = v101;
      }
      v102 = v90;
      v90 = 0uLL;
      v85.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v87, v77);
      MEMORY[0x18D7898AC](&v85);
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 24), &v98);
      v98.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v78 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
      if (*((_QWORD *)&v102 + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v100, v101[0]);
      MEMORY[0x18D7898AC](&v98);
      if (v97)
      {
        v91.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v81 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
        if (*((_QWORD *)&v96 + 1))
        {
          v82 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v93, v94);
        MEMORY[0x18D7898AC](&v91);
      }
      v66 = *(_QWORD *)(a1 + 2160);
      v67 = *(_QWORD *)(a1 + 2144);
      goto LABEL_73;
    }
  }
  else
  {
LABEL_20:
    if ((*(char *)(a1 + 2039) & 0x80000000) == 0)
      goto LABEL_21;
  }
  operator delete(*(void **)(a1 + 2016));
  if (!*(_BYTE *)(a1 + 1776))
    goto LABEL_79;
LABEL_22:
  *(_BYTE *)(a1 + 1784) = 0;
  *(_BYTE *)(a1 + 1808) = 0;
  if (*(_BYTE *)(a1 + 1648))
  {
    *(std::runtime_error *)(a1 + 1784) = *v5;
    *(_QWORD *)(a1 + 1800) = v5[1].__vftable;
    v5->__imp_.__imp_ = 0;
    v5[1].__vftable = 0;
    v5->__vftable = 0;
    *(_BYTE *)(a1 + 1808) = 1;
  }
  *(_BYTE *)(a1 + 1816) = 0;
  *(_BYTE *)(a1 + 1840) = 0;
  if (*(_BYTE *)(a1 + 1680))
  {
    *(_QWORD *)(a1 + 1832) = *(_QWORD *)(a1 + 1672);
    *(_OWORD *)(a1 + 1816) = *(_OWORD *)(a1 + 1656);
    *(_QWORD *)(a1 + 1672) = 0;
    *(_QWORD *)(a1 + 1656) = 0;
    *(_QWORD *)(a1 + 1664) = 0;
    *(_BYTE *)(a1 + 1840) = 1;
  }
  *(_BYTE *)(a1 + 1848) = 0;
  *(_BYTE *)(a1 + 1872) = 0;
  if (*(_BYTE *)(a1 + 1712))
  {
    *(_QWORD *)(a1 + 1864) = *(_QWORD *)(a1 + 1704);
    *(_OWORD *)(a1 + 1848) = *(_OWORD *)(a1 + 1688);
    *(_QWORD *)(a1 + 1704) = 0;
    *(_QWORD *)(a1 + 1688) = 0;
    *(_QWORD *)(a1 + 1696) = 0;
    *(_BYTE *)(a1 + 1872) = 1;
  }
  *(_DWORD *)(a1 + 1880) = *(_DWORD *)(a1 + 1720);
  *(_QWORD *)(a1 + 1888) = a1 + 1888;
  *(_QWORD *)(a1 + 1896) = a1 + 1888;
  *(_QWORD *)(a1 + 1904) = 0;
  v25 = *(_QWORD *)(a1 + 1744);
  if (v25)
  {
    v26 = *(uint64_t **)(a1 + 1736);
    v27 = *(_QWORD *)(a1 + 1728);
    v28 = *v26;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v27 + 8);
    **(_QWORD **)(v27 + 8) = v28;
    v29 = *(_QWORD *)(a1 + 1888);
    *(_QWORD *)(v29 + 8) = v26;
    *v26 = v29;
    *(_QWORD *)(a1 + 1888) = v27;
    *(_QWORD *)(v27 + 8) = a1 + 1888;
    *(_QWORD *)(a1 + 1904) = v25;
    *(_QWORD *)(a1 + 1744) = 0;
  }
  *(_QWORD *)(a1 + 1928) = *(_QWORD *)(a1 + 1768);
  *(_OWORD *)(a1 + 1912) = *(_OWORD *)(a1 + 1752);
  *(_QWORD *)(a1 + 1768) = 0;
  *(_QWORD *)(a1 + 1752) = 0;
  *(_QWORD *)(a1 + 1760) = 0;
  v30 = *(_OWORD *)(a1 + 2152);
  *(_OWORD *)(a1 + 2072) = *(_OWORD *)(a1 + 2136);
  *(_OWORD *)(a1 + 2040) = v30;
  v84 = (uint64_t)v4;
  AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v4, (__int128 *)(a1 + 1784), (__int128 *)(a1 + 2072), (__int128 *)(a1 + 2040));
  v31 = *(std::__shared_weak_count **)(a1 + 2048);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (_QWORD *)v6;
  v35 = *(std::__shared_weak_count **)(a1 + 2080);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (__int128 *)(a1 + 2056);
  v39 = *(_QWORD *)(a1 + 2128);
  v40 = *(_QWORD *)(a1 + 2120);
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1784));
  *(_QWORD *)(a1 + 2056) = v40;
  *(_QWORD *)(a1 + 2064) = v39;
  if (v39)
  {
    v41 = (unint64_t *)(*(_QWORD *)(a1 + 2128) + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *v38;
  *(_QWORD *)v38 = 0;
  *(_QWORD *)(a1 + 2064) = 0;
  v44 = *(std::__shared_weak_count **)(a1 + 1256);
  *(_OWORD *)(a1 + 1248) = v43;
  v6 = (uint64_t)v34;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *(_DWORD *)(a1 + 1424) = 6;
  *(_QWORD *)(a1 + 1936) = *(_QWORD *)(a1 + 1992);
  v47 = a1 + 1944;
  v48 = *(_QWORD *)(a1 + 2000);
  *(_QWORD *)(a1 + 1944) = v48;
  v49 = *(_QWORD *)(a1 + 2008);
  *(_QWORD *)(a1 + 1952) = v49;
  if (v49)
  {
    *(_QWORD *)(v48 + 16) = v47;
    *v34 = a1 + 2000;
    *(_QWORD *)(a1 + 2000) = 0;
    *(_QWORD *)(a1 + 2008) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 1936) = v47;
  }
  *(_DWORD *)(a1 + 1960) = 8;
  AMSCore::Any::operator=(a1 + 1304, a1 + 1936);
  *(_DWORD *)(a1 + 1336) = 2;
  v69 = *(unsigned int *)(a1 + 1960);
  if ((_DWORD)v69 != -1)
    ((void (*)(std::runtime_error *, unint64_t))off_1E253D240[v69])(&v91, a1 + 1936);
  *(_DWORD *)(a1 + 1960) = -1;
  v70 = *(std::__shared_weak_count **)(a1 + 2064);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v4 = (void **)v84;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, v84);
  AMSCore::EncodeHTTPRequestTask::perform((_OWORD *)(a1 + 2104), (uint64_t)v3);
  v73 = *(_QWORD *)(a1 + 2104);
  *(_QWORD *)(a1 + 2184) = v73;
  *(_QWORD *)(a1 + 2192) = *(_QWORD *)(a1 + 2112);
  *(_QWORD *)(a1 + 2104) = 0;
  *(_QWORD *)(a1 + 2112) = 0;
  if (atomic_load((unint64_t *)(v73 + 416)))
    goto LABEL_2;
  *(_BYTE *)(a1 + 2216) = 1;
  v75 = (unint64_t *)(*(_QWORD *)(a1 + 2184) + 416);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(a1, v75));
  if (v76)
  {
LABEL_2:
    v7 = *(_QWORD *)(a1 + 2184);
    if (*(_BYTE *)(v7 + 408))
    {
      v8 = (const std::runtime_error *)(v7 + 8);
      v9 = *(_BYTE *)(v7 + 400);
      if (v9)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v2, (uint64_t)v8);
        v10 = (_QWORD *)(v7 + 384);
        *(_QWORD *)(a1 + 848) = *(_QWORD *)(v7 + 384);
        v11 = (_QWORD *)(a1 + 856);
        v12 = (_QWORD *)(v7 + 392);
      }
      else
      {
        std::runtime_error::runtime_error(v2, v8);
        *(_OWORD *)(a1 + 488) = *(_OWORD *)(v7 + 24);
        *(_QWORD *)(a1 + 472) = off_1E2521330;
        v50 = (_QWORD *)(v7 + 48);
        v51 = *(_QWORD *)(v7 + 48);
        v52 = a1 + 512;
        *(_QWORD *)(a1 + 504) = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(a1 + 512) = v51;
        v53 = *(_QWORD *)(v7 + 56);
        *(_QWORD *)(a1 + 520) = v53;
        if (v53)
        {
          *(_QWORD *)(v51 + 16) = v52;
          *(_QWORD *)(v7 + 40) = v50;
          *v50 = 0;
          *(_QWORD *)(v7 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 504) = v52;
        }
        v54 = *(_QWORD *)(a1 + 2184);
        v55 = *(_QWORD *)(v54 + 64);
        v10 = (_QWORD *)(v54 + 64);
        *(_QWORD *)(a1 + 528) = v55;
        v11 = (_QWORD *)(a1 + 536);
        v12 = v10 + 1;
      }
      *v11 = *v12;
      *v10 = 0;
      v10[1] = 0;
      *(_BYTE *)(a1 + 864) = v9;
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), v2);
      if (*(_BYTE *)(a1 + 864))
      {
        v56 = *(std::__shared_weak_count **)(a1 + 856);
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v2->__vftable);
        v59 = *(_QWORD *)(a1 + 2192);
        if (!v59)
          goto LABEL_67;
      }
      else
      {
        ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
        v59 = *(_QWORD *)(a1 + 2192);
        if (!v59)
        {
LABEL_67:
          v63 = *(std::__shared_weak_count **)(a1 + 2112);
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v3);
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
          v66 = 0;
          v67 = 0;
LABEL_73:
          if (*(_BYTE *)(a1 + 1776))
            AMSCore::URL::~URL((AMSCore::URL *)v5);
          else
            ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v6, *(unsigned int **)(a1 + 2000));
          *(_QWORD *)(a1 + 2208) = v67;
          *(_QWORD *)(a1 + 2200) = v66;
          *(_QWORD *)(a1 + 472) = a1 + 16;
          *(_QWORD *)a1 = 0;
          AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v2);
          return;
        }
      }
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        v62 = *(std::__shared_weak_count **)(a1 + 2192);
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
      goto LABEL_67;
    }
LABEL_114:
    __break(1u);
  }
}

void AMSCore::`anonymous namespace'::encodeFinishProvisioningRequest(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;

  if (*(_QWORD *)__p)
  {
    if (__p[2216])
    {
      v2 = *((_QWORD *)__p + 274);
      if (v2)
      {
        v3 = (unint64_t *)(v2 + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 - 1, v3));
        if (!v4)
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 274);
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 264);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 109);
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 156);
      if (__p[1776])
        AMSCore::URL::~URL((AMSCore::URL *)(__p + 1624));
      else
        (**((void (***)(char *))__p + 203))(__p + 1624);
      v10 = 0;
      v9 = 0;
    }
    else
    {
      v11 = *((_QWORD *)__p + 272);
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          v14 = (std::__shared_weak_count *)*((_QWORD *)__p + 272);
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 60);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)__p + 262);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p[2039] < 0)
        operator delete(*((void **)__p + 252));
      v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 270);
      v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 268);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(__p + 1992), *((unsigned int **)__p + 250));
  }
  else
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 276);
    v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 275);
  }
  v21 = (char *)*((_QWORD *)__p + 58);
  if (v21 == __p + 440)
  {
    v22 = 4;
    v21 = __p + 440;
  }
  else
  {
    if (!v21)
      goto LABEL_42;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_42:
  if (__p[424])
  {
    if (__p[416])
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 51);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 3);
    }
    else
    {
      (**((void (***)(char *))__p + 3))(__p + 24);
    }
  }
  do
  {
    v26 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v27)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v10)
  {
    v28 = (unint64_t *)&v10->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v9)
  {
    v30 = (unint64_t *)&v9->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v32 = *((_QWORD *)__p + 266);
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      v35 = (std::__shared_weak_count *)*((_QWORD *)__p + 266);
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      if ((__p[1991] & 0x80000000) == 0)
        goto LABEL_70;
      goto LABEL_69;
    }
  }
  if (__p[1991] < 0)
LABEL_69:
    operator delete(*((void **)__p + 246));
LABEL_70:
  operator delete(__p);
}

void AMSCore::SyncMachineTask::internal::performImpl(_OWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  char *v13;
  unint64_t v14;
  char *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  char *v32;
  char *v33;
  void **v34;
  char *v35;
  char **v36;
  char **v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  _QWORD *v41;
  unint64_t v42;
  size_t v43;
  int v44;
  int v45;
  char *v46;
  char *v47;
  void **v48;
  char *v49;
  char **v50;
  char **v51;
  _QWORD *v52;
  const void *v53;
  int v54;
  const void *v55;
  unint64_t v56;
  size_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  std::ios_base *v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  char *v74;
  void **v75;
  char *v76;
  char **v77;
  char **v78;
  _QWORD *v79;
  const void *v80;
  int v81;
  const void *v82;
  unint64_t v83;
  size_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  std::runtime_error_vtbl *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  __int128 v94;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  const std::runtime_error *v100;
  char v101;
  std::runtime_error_vtbl *v102;
  char *v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *p_shared_owners;
  unint64_t v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::runtime_error_vtbl *v156;
  _QWORD *v157;
  std::runtime_error_vtbl *v158;
  uint64_t v159;
  __int128 v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  __int128 v171;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  const std::runtime_error *v176;
  char v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  __int128 *v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  uint64_t v187;
  uint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  std::runtime_error *v216;
  __int128 v217;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  unsigned __int16 *v230;
  const std::error_category *v231;
  uint64_t v232;
  std::runtime_error v233;
  _QWORD *v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  uint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  unsigned int *v241;
  uint64_t v242;
  uint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  unsigned int *v255;
  uint64_t v256;
  uint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  std::__shared_weak_count *imp;
  unint64_t *v261;
  unint64_t v262;
  int v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  std::error_code v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __int128 *v282;
  char *v283;
  __int128 *v284;
  unint64_t *v285;
  std::runtime_error_vtbl **v286;
  __int128 *v287;
  __int128 *v288;
  AMSCore::ExecuteHTTPRequestTask::Options *v289;
  _BYTE *v290;
  AMSCore::ExecuteHTTPRequestTask::Options *v291;
  void **v292;
  char *v293;
  void **v294;
  uint64_t v295;
  void **v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  std::runtime_error *v300;
  uint64_t v301;
  std::runtime_error *v302;
  std::runtime_error *v303;
  char *v304;
  std::runtime_error *v305;
  std::runtime_error *v306;
  std::runtime_error *v308;
  _BYTE v309[32];
  uint64_t *p_p;
  __int128 __p;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  _OWORD v315[4];
  _OWORD v316[3];
  uint64_t v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  _OWORD v326[2];
  __int128 v327;
  uint64_t v328;
  char v329;
  char v330;
  uint64_t *v331;
  __int128 v332;
  unsigned int v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t *v337;
  __int128 v338;
  std::string __what_arg;
  std::system_error v340;
  uint64_t *v341;
  __int128 v342;
  __int128 v343;
  unsigned __int8 v344;
  std::runtime_error v345;
  std::error_code ec;
  uint64_t *v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;
  std::error_code v351;

  v350 = *MEMORY[0x1E0C80C00];
  v13 = (char *)operator new(0xCD0uLL);
  v14 = (unint64_t)v13;
  *(_QWORD *)v13 = AMSCore::SyncMachineTask::internal::performImpl;
  *((_QWORD *)v13 + 1) = AMSCore::SyncMachineTask::internal::performImpl;
  v292 = (void **)(v13 + 976);
  v294 = (void **)(v13 + 1744);
  v15 = v13 + 2928;
  v287 = (__int128 *)(v13 + 3088);
  v288 = (__int128 *)(v13 + 3072);
  v284 = (__int128 *)(v13 + 3104);
  v282 = (__int128 *)(v13 + 3120);
  *((_OWORD *)v13 + 189) = *(_OWORD *)a2;
  *((_QWORD *)v13 + 380) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13[2928] = 0;
  v13[2952] = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    *(_OWORD *)v15 = *(_OWORD *)a3;
    *((_QWORD *)v13 + 368) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v13[2952] = 1;
  }
  *((_QWORD *)v13 + 370) = *(_QWORD *)(a3 + 32);
  v283 = v13 + 632;
  v306 = (std::runtime_error *)(v13 + 152);
  v16 = (__int128 *)(v13 + 2968);
  *(_OWORD *)(v13 + 2968) = *(_OWORD *)(a3 + 40);
  v302 = (std::runtime_error *)(v13 + 576);
  v289 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v13 + 2120);
  v290 = v13 + 3272;
  v291 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v13 + 2288);
  v304 = v13 + 1368;
  v305 = (std::runtime_error *)(v13 + 2456);
  *((_QWORD *)v13 + 373) = *(_QWORD *)(a3 + 56);
  v293 = v13 + 2616;
  v308 = (std::runtime_error *)(v13 + 2768);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v285 = (unint64_t *)(v13 + 2992);
  v286 = (std::runtime_error_vtbl **)(v13 + 3136);
  v17 = a5[1];
  v299 = *a5;
  v300 = (std::runtime_error *)(v13 + 2848);
  *((_QWORD *)v13 + 398) = *a5;
  v298 = v17;
  *((_QWORD *)v13 + 399) = v17;
  *a5 = 0;
  a5[1] = 0;
  v18 = a6[1];
  v295 = *a6;
  v296 = (void **)(v13 + 3048);
  *((_QWORD *)v13 + 400) = *a6;
  *a6 = 0;
  a6[1] = 0;
  v19 = *a7;
  *a7 = 0;
  *((_QWORD *)v13 + 401) = v18;
  do
    v20 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v20 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v13[24] = 0;
  v13[104] = 0;
  *((_QWORD *)v13 + 14) = 0;
  v303 = (std::runtime_error *)(v13 + 24);
  *((_QWORD *)v13 + 18) = 0;
  v301 = (uint64_t)(v13 + 16);
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v309, (uint64_t)(v13 + 16));
  *a1 = *(_OWORD *)v309;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v309);
  AMSCore::Logger::log<char [38]>(*(uint64_t *)v309);
  v21 = *(std::__shared_weak_count **)&v309[8];
  if (*(_QWORD *)&v309[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&v309[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v309[0] = 0;
  v309[24] = 0;
  if (*(_BYTE *)(v14 + 2952))
  {
    if (*(char *)(v14 + 2951) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v309, *(const std::string::value_type **)(v14 + 2928), *(_QWORD *)(v14 + 2936));
    }
    else
    {
      *(_OWORD *)v309 = *(_OWORD *)v15;
      *(_QWORD *)&v309[16] = *((_QWORD *)v15 + 2);
    }
    v309[24] = 1;
  }
  p_p = *(uint64_t **)(v14 + 2960);
  if (*(char *)(v14 + 2991) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)(v14 + 2968), *(_QWORD *)(v14 + 2976));
  }
  else
  {
    __p = *v16;
    *(_QWORD *)&v312 = *(_QWORD *)(v14 + 2984);
  }
  BYTE8(v312) = 1;
  if (a4 == 2)
    v24 = -1;
  else
    v24 = (uint64_t)p_p;
  if (SBYTE7(v312) < 0)
    operator delete((void *)__p);
  if (v309[24] && (v309[23] & 0x80000000) != 0)
    operator delete(*(void **)v309);
  v25 = *(char *)(v14 + 3047);
  if (v25 >= 0)
    v26 = v14 + 3024;
  else
    v26 = *(_QWORD *)(v14 + 3024);
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(v14 + 3047);
  else
    v27 = *(_QWORD *)(v14 + 3032);
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v309);
  AMSCore::Logger::log<char [38]>(*(uint64_t *)v309);
  v28 = *(std::__shared_weak_count **)&v309[8];
  if (*(_QWORD *)&v309[8])
  {
    v29 = (unint64_t *)(*(_QWORD *)&v309[8] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v336 = 0;
  v335 = 0;
  v334 = 0;
  v333 = 0;
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t *, unsigned int *, uint64_t *, unsigned int *))(*(_QWORD *)v19 + 16))(v19, v24, v26, v27, &v336, &v335, &v334, &v333);
  v297 = v18;
  if (v31)
  {
    *((_BYTE *)&ec.__val_ + 7) = 5;
    strcpy((char *)&v345, "CCode");
    ec.__cat_ = (const std::error_category *)v31;
    DWORD2(v348) = 3;
    v332 = 0uLL;
    v331 = (uint64_t *)&v332;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(&v331, (uint64_t *)&v332, (const void **)&v345.__vftable, (__int128 *)&v345);
    v337 = v331;
    v338 = v332;
    if (*((_QWORD *)&v332 + 1))
    {
      *(_QWORD *)(v332 + 16) = &v338;
      v331 = (uint64_t *)&v332;
      v332 = 0uLL;
    }
    else
    {
      v337 = (uint64_t *)&v338;
    }
    v60 = MEMORY[0x1E0DE4FE0];
    v61 = MEMORY[0x1E0DE4FE0] + 64;
    v62 = (_QWORD *)MEMORY[0x1E0DE4F60];
    v63 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v64 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    *((_QWORD *)&v315[0] + 1) = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)v309 = v63;
    *(_QWORD *)&v309[*(_QWORD *)(v63 - 24)] = v64;
    v65 = (std::ios_base *)&v309[*(_QWORD *)(*(_QWORD *)v309 - 24)];
    std::ios_base::init(v65, &v309[8]);
    v65[1].__vftable = 0;
    v65[1].__fmtflags_ = -1;
    *(_QWORD *)v309 = v60 + 24;
    *((_QWORD *)&v315[0] + 1) = v61;
    std::streambuf::basic_streambuf();
    v66 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v309[8] = MEMORY[0x1E0DE4FB8] + 16;
    v313 = 0u;
    v314 = 0u;
    LODWORD(v315[0]) = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v309, (uint64_t)"Anisette Sync failed with code: ", 32);
    std::ostream::operator<<();
    std::stringbuf::str[abi:fe180100]((uint64_t)&v309[8], &__what_arg);
    *(_QWORD *)v309 = *v62;
    *(_QWORD *)&v309[*(_QWORD *)(*(_QWORD *)v309 - 24)] = v62[3];
    *(_QWORD *)&v309[8] = v66 + 16;
    if (SBYTE7(v314) < 0)
      operator delete((void *)v313);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58]((char *)v315 + 8);
    v351.__cat_ = (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance;
    *(_QWORD *)&v351.__val_ = 651;
    std::system_error::system_error(&v340, v351, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v341 = v337;
    v342 = v338;
    if (*((_QWORD *)&v338 + 1))
    {
      *(_QWORD *)(v338 + 16) = &v342;
      v337 = (uint64_t *)&v338;
      v338 = 0uLL;
    }
    else
    {
      v341 = (uint64_t *)&v342;
    }
    v343 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)v309, &v340);
    *(std::error_code *)&v309[16] = v340.__ec_;
    *(_QWORD *)v309 = off_1E2521330;
    v67 = (unsigned int *)v342;
    p_p = v341;
    __p = v342;
    if (*((_QWORD *)&v342 + 1))
    {
      *(_QWORD *)(v342 + 16) = &__p;
      v67 = 0;
      v341 = (uint64_t *)&v342;
      v342 = 0uLL;
    }
    else
    {
      p_p = (uint64_t *)&__p;
    }
    v312 = v343;
    v343 = 0uLL;
    v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v341, v67);
    MEMORY[0x18D7898AC](&v340);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v337, (unsigned int *)v338);
    std::runtime_error::runtime_error(v308, (const std::runtime_error *)v309);
    *(_OWORD *)(v14 + 2784) = *(_OWORD *)&v309[16];
    *(_QWORD *)(v14 + 2768) = off_1E2521330;
    v68 = __p;
    *(_QWORD *)(v14 + 2800) = p_p;
    v69 = v14 + 2808;
    *(_QWORD *)(v14 + 2808) = v68;
    v70 = *((_QWORD *)&__p + 1);
    *(_QWORD *)(v14 + 2816) = *((_QWORD *)&__p + 1);
    if (v70)
    {
      *(_QWORD *)(v68 + 16) = v69;
      v68 = 0;
      p_p = (uint64_t *)&__p;
      __p = 0uLL;
    }
    else
    {
      *(_QWORD *)(v14 + 2800) = v69;
    }
    v71 = (uint64_t)v304;
    *((_OWORD *)v304 + 91) = v312;
    v312 = 0uLL;
    *(_BYTE *)(v14 + 2840) = 0;
    *(_QWORD *)v309 = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&p_p, (unsigned int *)v68);
    MEMORY[0x18D7898AC](v309);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v331, (unsigned int *)v332);
    if (DWORD2(v348) != -1)
      ((void (*)(std::system_error *, const std::error_category **))off_1E253D240[DWORD2(v348)])(&v340, &ec.__cat_);
    DWORD2(v348) = -1;
    if (*((char *)&ec.__val_ + 7) < 0)
      operator delete(v345.__vftable);
    goto LABEL_151;
  }
  *(_OWORD *)&v309[8] = 0uLL;
  *(_QWORD *)v309 = &v309[8];
  AMSCore::Base64::encode(v334, v333, &v340);
  v32 = (char *)operator new(0x58uLL);
  v33 = v32;
  v281 = v24;
  *((_QWORD *)v32 + 4) = *(_QWORD *)"clientData";
  v34 = (void **)(v32 + 32);
  v32[55] = 10;
  strcpy(v32 + 40, "ta");
  *(std::runtime_error *)(v32 + 56) = v340.std::runtime_error;
  *((_QWORD *)v32 + 9) = *(_QWORD *)&v340.__ec_.__val_;
  memset(&v340, 0, 24);
  *((_DWORD *)v32 + 20) = 5;
  v35 = *(char **)&v309[8];
  v36 = (char **)&v309[8];
  v37 = (char **)&v309[8];
  if (!*(_QWORD *)&v309[8])
  {
LABEL_62:
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = 0;
    *((_QWORD *)v33 + 2) = v37;
    *v36 = v33;
    if (**(_QWORD **)v309)
    {
      *(_QWORD *)v309 = **(_QWORD **)v309;
      v33 = *v36;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v309[8], (uint64_t *)v33);
    ++*(_QWORD *)&v309[16];
    if (*((char *)&v340.__ec_.__val_ + 7) < 0)
      goto LABEL_65;
    goto LABEL_66;
  }
  v279 = (uint64_t)(v32 + 56);
  while (1)
  {
    while (1)
    {
      v37 = (char **)v35;
      v38 = v35 + 32;
      v39 = (_QWORD *)*((_QWORD *)v35 + 4);
      v40 = *((char *)v38 + 23);
      v41 = v40 >= 0 ? v38 : v39;
      v42 = v40 >= 0 ? *((unsigned __int8 *)v38 + 23) : v38[1];
      v43 = v42 >= 0xA ? 10 : v42;
      v44 = memcmp(v34, v41, v43);
      if (v44)
        break;
      if (v42 <= 0xA)
        goto LABEL_56;
LABEL_42:
      v35 = *v37;
      v36 = v37;
      if (!*v37)
        goto LABEL_62;
    }
    if (v44 < 0)
      goto LABEL_42;
LABEL_56:
    v45 = memcmp(v41, v34, v43);
    if (!v45)
      break;
    if ((v45 & 0x80000000) == 0)
      goto LABEL_109;
LABEL_60:
    v35 = v37[1];
    if (!v35)
    {
      v36 = v37 + 1;
      goto LABEL_62;
    }
  }
  if (v42 < 0xA)
    goto LABEL_60;
LABEL_109:
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)&v345, v279);
  v72 = v33[55];
  *((_DWORD *)v33 + 20) = -1;
  if (v72 < 0)
    operator delete(*v34);
  operator delete(v33);
  if (*((char *)&v340.__ec_.__val_ + 7) < 0)
LABEL_65:
    operator delete(v340.__vftable);
LABEL_66:
  AMSCore::Base64::encode(v336, v335, &v340);
  v46 = (char *)operator new(0x58uLL);
  v47 = v46;
  *((_QWORD *)v46 + 4) = *(_QWORD *)"machineId";
  v48 = (void **)(v46 + 32);
  v46[55] = 9;
  *((_WORD *)v46 + 20) = 100;
  *(std::runtime_error *)(v46 + 56) = v340.std::runtime_error;
  *((_QWORD *)v46 + 9) = *(_QWORD *)&v340.__ec_.__val_;
  memset(&v340, 0, 24);
  *((_DWORD *)v46 + 20) = 5;
  v49 = *(char **)&v309[8];
  v50 = (char **)&v309[8];
  v51 = (char **)&v309[8];
  if (!*(_QWORD *)&v309[8])
  {
LABEL_88:
    *(_QWORD *)v47 = 0;
    *((_QWORD *)v47 + 1) = 0;
    *((_QWORD *)v47 + 2) = v51;
    *v50 = v47;
    if (**(_QWORD **)v309)
    {
      *(_QWORD *)v309 = **(_QWORD **)v309;
      v47 = *v50;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v309[8], (uint64_t *)v47);
    ++*(_QWORD *)&v309[16];
    goto LABEL_116;
  }
  v280 = (uint64_t)(v46 + 56);
  while (2)
  {
    while (2)
    {
      v51 = (char **)v49;
      v52 = v49 + 32;
      v53 = (const void *)*((_QWORD *)v49 + 4);
      v54 = *((char *)v52 + 23);
      if (v54 >= 0)
        v55 = v52;
      else
        v55 = v53;
      if (v54 >= 0)
        v56 = *((unsigned __int8 *)v52 + 23);
      else
        v56 = v52[1];
      if (v56 >= 9)
        v57 = 9;
      else
        v57 = v56;
      v58 = memcmp(v48, v55, v57);
      if (v58)
      {
        if (v58 < 0)
          goto LABEL_68;
      }
      else if (v56 > 9)
      {
LABEL_68:
        v49 = *v51;
        v50 = v51;
        if (!*v51)
          goto LABEL_88;
        continue;
      }
      break;
    }
    v59 = memcmp(v55, v48, v57);
    if (v59)
    {
      if ((v59 & 0x80000000) == 0)
        break;
      goto LABEL_86;
    }
    if (v56 < 9)
    {
LABEL_86:
      v49 = v51[1];
      if (!v49)
      {
        v50 = v51 + 1;
        goto LABEL_88;
      }
      continue;
    }
    break;
  }
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)&v345, v280);
  v73 = v47[55];
  *((_DWORD *)v47 + 20) = -1;
  if (v73 < 0)
    operator delete(*v48);
  operator delete(v47);
LABEL_116:
  v71 = (uint64_t)v304;
  if (*((char *)&v340.__ec_.__val_ + 7) < 0)
    operator delete(v340.__vftable);
  if (a4 != 2)
  {
    v74 = (char *)operator new(0x58uLL);
    *((_DWORD *)v74 + 8) = 1682535268;
    v75 = (void **)(v74 + 32);
    v74[55] = 4;
    v74[36] = 0;
    *((_QWORD *)v74 + 7) = v281;
    *((_DWORD *)v74 + 20) = 4;
    v76 = *(char **)&v309[8];
    v77 = (char **)&v309[8];
    v78 = (char **)&v309[8];
    if (!*(_QWORD *)&v309[8])
    {
LABEL_141:
      *(_QWORD *)v74 = 0;
      *((_QWORD *)v74 + 1) = 0;
      *((_QWORD *)v74 + 2) = v78;
      *v77 = v74;
      v71 = (uint64_t)v304;
      if (**(_QWORD **)v309)
      {
        *(_QWORD *)v309 = **(_QWORD **)v309;
        v74 = *v77;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v309[8], (uint64_t *)v74);
      ++*(_QWORD *)&v309[16];
      goto LABEL_147;
    }
    while (1)
    {
      v78 = (char **)v76;
      v79 = v76 + 32;
      v80 = (const void *)*((_QWORD *)v76 + 4);
      v81 = *((char *)v79 + 23);
      if (v81 >= 0)
        v82 = v79;
      else
        v82 = v80;
      if (v81 >= 0)
        v83 = *((unsigned __int8 *)v79 + 23);
      else
        v83 = v79[1];
      if (v83 >= 4)
        v84 = 4;
      else
        v84 = v83;
      v85 = memcmp(v75, v82, v84);
      if (v85)
      {
        if (v85 < 0)
          goto LABEL_121;
      }
      else if (v83 > 4)
      {
LABEL_121:
        v76 = *v78;
        v77 = v78;
        if (!*v78)
          goto LABEL_141;
        continue;
      }
      v86 = memcmp(v82, v75, v84);
      if (v86)
      {
        if ((v86 & 0x80000000) == 0)
          goto LABEL_144;
      }
      else if (v83 >= 4)
      {
LABEL_144:
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(&v340, v74 + 56);
        v87 = v74[55];
        *((_DWORD *)v74 + 20) = -1;
        if (v87 < 0)
          operator delete(*v75);
        operator delete(v74);
        v71 = (uint64_t)v304;
        break;
      }
      v76 = v78[1];
      if (!v76)
      {
        v77 = v78 + 1;
        goto LABEL_141;
      }
    }
  }
LABEL_147:
  v88 = *(_QWORD *)&v309[8];
  *(_QWORD *)(v14 + 2768) = *(_QWORD *)v309;
  v89 = (std::runtime_error_vtbl *)(v14 + 2776);
  *(_QWORD *)(v14 + 2776) = v88;
  v90 = *(_QWORD *)&v309[16];
  *(_QWORD *)(v14 + 2784) = *(_QWORD *)&v309[16];
  if (v90)
  {
    *(_QWORD *)(v88 + 16) = v89;
    *(_QWORD *)v309 = &v309[8];
    *(_OWORD *)&v309[8] = 0uLL;
    v88 = 0;
  }
  else
  {
    v308->__vftable = v89;
  }
  *(_BYTE *)(v14 + 2840) = 1;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v309, (unsigned int *)v88);
LABEL_151:
  if (v336)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  if (v334)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (!*(_BYTE *)(v14 + 2840))
  {
    std::runtime_error::runtime_error((std::runtime_error *)v309, v308);
    *(_OWORD *)&v309[16] = *(_OWORD *)(v14 + 2784);
    *(_QWORD *)v309 = off_1E2521330;
    v91 = *(_QWORD *)(v14 + 2808);
    p_p = *(uint64_t **)(v14 + 2800);
    *(_QWORD *)&__p = v91;
    *((_QWORD *)&__p + 1) = *(_QWORD *)(v14 + 2816);
    if (*((_QWORD *)&__p + 1))
    {
      *(_QWORD *)(v91 + 16) = &__p;
      *(_QWORD *)(v14 + 2800) = v14 + 2808;
      *(_QWORD *)(v14 + 2808) = 0;
      *(_QWORD *)(v14 + 2816) = 0;
    }
    else
    {
      p_p = (uint64_t *)&__p;
    }
    v312 = *(_OWORD *)(v71 + 1456);
    *(_OWORD *)(v71 + 1456) = 0u;
    LOBYTE(v313) = 1;
    std::runtime_error::runtime_error(&v340, (const std::runtime_error *)v309);
    v340.__ec_ = *(std::error_code *)&v309[16];
    v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v341 = p_p;
    v342 = __p;
    if (*((_QWORD *)&__p + 1))
    {
      *(_QWORD *)(__p + 16) = &v342;
      p_p = (uint64_t *)&__p;
      __p = 0uLL;
    }
    else
    {
      v341 = (uint64_t *)&v342;
    }
    v343 = v312;
    v312 = 0uLL;
    std::runtime_error::runtime_error(&v345, &v340);
    ec = v340.__ec_;
    v345.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v105 = (unsigned int *)v342;
    v347 = v341;
    v348 = v342;
    if (*((_QWORD *)&v342 + 1))
    {
      *(_QWORD *)(v342 + 16) = &v348;
      v105 = 0;
      v341 = (uint64_t *)&v342;
      v342 = 0uLL;
    }
    else
    {
      v347 = (uint64_t *)&v348;
    }
    v349 = v343;
    v343 = 0uLL;
    v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v341, v105);
    MEMORY[0x18D7898AC](&v340);
    if (*(_BYTE *)(v14 + 104))
    {
      if (!*(_BYTE *)(v14 + 96))
        ((void (*)(std::runtime_error *))v303->~runtime_error)(v303);
      *(_BYTE *)(v14 + 104) = 0;
    }
    std::runtime_error::runtime_error(v303, &v345);
    v107 = v347;
    v106 = v348;
    *(_QWORD *)(v14 + 64) = v348;
    v108 = v14 + 64;
    *(std::error_code *)(v14 + 40) = ec;
    *(_QWORD *)(v14 + 24) = off_1E2521330;
    *(_QWORD *)(v14 + 56) = v107;
    v109 = *((_QWORD *)&v348 + 1);
    *(_QWORD *)(v14 + 72) = *((_QWORD *)&v348 + 1);
    if (v109)
    {
      *(_QWORD *)(v106 + 16) = v108;
      v106 = 0;
      v347 = (uint64_t *)&v348;
      v348 = 0uLL;
    }
    else
    {
      *(_QWORD *)(v14 + 56) = v108;
    }
    *(_OWORD *)(v14 + 80) = v349;
    v349 = 0uLL;
    *(_BYTE *)(v14 + 96) = 0;
    *(_BYTE *)(v14 + 104) = 1;
    v345.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v347, (unsigned int *)v106);
    MEMORY[0x18D7898AC](&v345);
    if ((_BYTE)v313)
    {
      *(_QWORD *)v309 = off_1E2521330;
      v110 = (std::__shared_weak_count *)*((_QWORD *)&v312 + 1);
      if (*((_QWORD *)&v312 + 1))
      {
        v111 = (unint64_t *)(*((_QWORD *)&v312 + 1) + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&p_p, (unsigned int *)__p);
      MEMORY[0x18D7898AC](v309);
    }
    v113 = v297;
    v114 = v298;
    if (!*(_BYTE *)(v14 + 2840))
      goto LABEL_483;
    goto LABEL_195;
  }
  if (a4 == 2)
  {
    v309[23] = 16;
    strcpy(v309, "amd-sync-machine");
  }
  else
  {
    v309[23] = 15;
    strcpy(v309, "md-sync-machine");
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v299 + 80))(v299, v309);
  v92 = &v300->__vftable;
  if ((v309[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v309);
    if (*(_BYTE *)(v14 + 2608))
      goto LABEL_163;
    goto LABEL_171;
  }
  if (!*(_BYTE *)(v14 + 2608))
  {
LABEL_171:
    std::runtime_error::runtime_error((std::runtime_error *)v309, v305);
    *(_OWORD *)&v309[16] = *(_OWORD *)(v14 + 2472);
    *(_QWORD *)v309 = off_1E2521330;
    v104 = *(_QWORD *)(v14 + 2496);
    p_p = *(uint64_t **)(v14 + 2488);
    *(_QWORD *)&__p = v104;
    *((_QWORD *)&__p + 1) = *(_QWORD *)(v14 + 2504);
    if (*((_QWORD *)&__p + 1))
    {
      *(_QWORD *)(v104 + 16) = &__p;
      *(_QWORD *)(v14 + 2488) = v14 + 2496;
      *(_QWORD *)(v14 + 2496) = 0;
      *(_QWORD *)(v14 + 2504) = 0;
    }
    else
    {
      p_p = (uint64_t *)&__p;
    }
    v312 = *(_OWORD *)(v14 + 2512);
    *(_QWORD *)(v14 + 2520) = 0;
    *(_QWORD *)(v14 + 2512) = 0;
    LOBYTE(v313) = 1;
    std::runtime_error::runtime_error(&v340, (const std::runtime_error *)v309);
    v340.__ec_ = *(std::error_code *)&v309[16];
    v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v341 = p_p;
    v342 = __p;
    if (*((_QWORD *)&__p + 1))
    {
      *(_QWORD *)(__p + 16) = &v342;
      p_p = (uint64_t *)&__p;
      __p = 0uLL;
    }
    else
    {
      v341 = (uint64_t *)&v342;
    }
    v343 = v312;
    v312 = 0uLL;
    std::runtime_error::runtime_error(&v345, &v340);
    ec = v340.__ec_;
    v345.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v119 = (unsigned int *)v342;
    v347 = v341;
    v348 = v342;
    if (*((_QWORD *)&v342 + 1))
    {
      *(_QWORD *)(v342 + 16) = &v348;
      v119 = 0;
      v341 = (uint64_t *)&v342;
      v342 = 0uLL;
    }
    else
    {
      v347 = (uint64_t *)&v348;
    }
    v349 = v343;
    v343 = 0uLL;
    v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v341, v119);
    MEMORY[0x18D7898AC](&v340);
    if (*(_BYTE *)(v14 + 104))
    {
      if (!*(_BYTE *)(v14 + 96))
        ((void (*)(std::runtime_error *))v303->~runtime_error)(v303);
      *(_BYTE *)(v14 + 104) = 0;
    }
    std::runtime_error::runtime_error(v303, &v345);
    v121 = v347;
    v120 = v348;
    *(_QWORD *)(v14 + 64) = v348;
    v122 = v14 + 64;
    *(std::error_code *)(v14 + 40) = ec;
    *(_QWORD *)(v14 + 24) = off_1E2521330;
    *(_QWORD *)(v14 + 56) = v121;
    v123 = *((_QWORD *)&v348 + 1);
    *(_QWORD *)(v14 + 72) = *((_QWORD *)&v348 + 1);
    if (v123)
    {
      *(_QWORD *)(v120 + 16) = v122;
      v120 = 0;
      v347 = (uint64_t *)&v348;
      v348 = 0uLL;
    }
    else
    {
      *(_QWORD *)(v14 + 56) = v122;
    }
    *(_OWORD *)(v14 + 80) = v349;
    v349 = 0uLL;
    *(_BYTE *)(v14 + 96) = 0;
    *(_BYTE *)(v14 + 104) = 1;
    v345.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v347, (unsigned int *)v120);
    MEMORY[0x18D7898AC](&v345);
    if ((_BYTE)v313)
    {
      *(_QWORD *)v309 = off_1E2521330;
      v124 = (std::__shared_weak_count *)*((_QWORD *)&v312 + 1);
      if (*((_QWORD *)&v312 + 1))
      {
        v125 = (unint64_t *)(*((_QWORD *)&v312 + 1) + 8);
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&p_p, (unsigned int *)__p);
      MEMORY[0x18D7898AC](v309);
    }
    v113 = v297;
    v114 = v298;
    if (!*(_BYTE *)(v14 + 2608))
      goto LABEL_220;
LABEL_482:
    AMSCore::URL::~URL((AMSCore::URL *)v305);
    if (*(_BYTE *)(v14 + 2840))
      goto LABEL_195;
LABEL_483:
    ((void (*)(std::runtime_error *))v308->~runtime_error)(v308);
    goto LABEL_484;
  }
LABEL_163:
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(v306);
  v93 = *(_QWORD *)(v14 + 152);
  (*(void (**)(uint64_t))(*(_QWORD *)v295 + 16))(v295);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 48))(v93, v296);
  v94 = *(_OWORD *)(v14 + 576);
  *(_OWORD *)(v14 + 3216) = v94;
  v302->__vftable = 0;
  v302->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v94 + 96)))
  {
    *v290 = 0;
    v96 = (unint64_t *)(*(_QWORD *)(v14 + 3216) + 96);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v14, v96));
    if (!v97)
      return;
  }
  v98 = *(_QWORD *)(v14 + 3216);
  v99 = *(unsigned __int8 *)(v98 + 88);
  if (!*(_BYTE *)(v98 + 88))
    goto LABEL_491;
  v100 = (const std::runtime_error *)(v98 + 8);
  v101 = *(_BYTE *)(v98 + 80);
  if (v101)
  {
    v102 = v100->__vftable;
    v100->__vftable = 0;
    v300->__vftable = v102;
    v103 = v293;
  }
  else
  {
    std::runtime_error::runtime_error(v300, v100);
    *(_OWORD *)(v14 + 2864) = *(_OWORD *)(v98 + 24);
    *(_QWORD *)(v14 + 2848) = off_1E2521330;
    v115 = (_QWORD *)(v98 + 48);
    v116 = *(_QWORD *)(v98 + 48);
    *(_QWORD *)(v14 + 2880) = *(_QWORD *)(v98 + 40);
    v117 = v14 + 2888;
    *(_QWORD *)(v14 + 2888) = v116;
    v118 = *(_QWORD *)(v98 + 56);
    *(_QWORD *)(v14 + 2896) = v118;
    if (v118)
    {
      *(_QWORD *)(v116 + 16) = v117;
      *(_QWORD *)(v98 + 40) = v115;
      *v115 = 0;
      *(_QWORD *)(v98 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v14 + 2880) = v117;
    }
    v103 = v293;
    v127 = *(_QWORD *)(v14 + 3216);
    *(_OWORD *)(v71 + 1536) = *(_OWORD *)(v127 + 64);
    *(_QWORD *)(v127 + 64) = 0;
    *(_QWORD *)(v127 + 72) = 0;
  }
  *(_BYTE *)(v14 + 2920) = v101;
  v128 = *(_QWORD *)(v14 + 3224);
  if (v128)
  {
    v129 = (unint64_t *)(v128 + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      v135 = *(std::__shared_weak_count **)(v14 + 3224);
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
      v131 = *(std::__shared_weak_count **)(v14 + 584);
      if (v131)
        goto LABEL_229;
      goto LABEL_232;
    }
  }
  v131 = *(std::__shared_weak_count **)(v14 + 584);
  if (!v131)
    goto LABEL_232;
LABEL_229:
  p_shared_owners = (unint64_t *)&v131->__shared_owners_;
  do
    v133 = __ldaxr(p_shared_owners);
  while (__stlxr(v133 - 1, p_shared_owners));
  if (!v133)
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
    if (*(char *)(v14 + 3071) < 0)
      goto LABEL_238;
LABEL_233:
    v134 = *(std::__shared_weak_count **)(v14 + 160);
    if (!v134)
      goto LABEL_242;
LABEL_239:
    v136 = (unint64_t *)&v134->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (v137)
      goto LABEL_242;
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
    if (!*(_BYTE *)(v14 + 2920))
      goto LABEL_272;
LABEL_243:
    v99 = *(unsigned __int8 *)(v14 + 2608);
    if (*(_BYTE *)(v14 + 2608))
    {
      *(_BYTE *)(v14 + 2616) = 0;
      *(_BYTE *)(v14 + 2640) = 0;
      if (*(_BYTE *)(v14 + 2480))
      {
        *(std::runtime_error *)v103 = *v305;
        *((_QWORD *)v103 + 2) = v305[1].__vftable;
        v305->__imp_.__imp_ = 0;
        v305[1].__vftable = 0;
        v305->__vftable = 0;
        *(_BYTE *)(v14 + 2640) = 1;
      }
      *(_BYTE *)(v14 + 2648) = 0;
      *(_BYTE *)(v14 + 2672) = 0;
      if (*(_BYTE *)(v14 + 2512))
      {
        *(_QWORD *)(v14 + 2664) = *(_QWORD *)(v14 + 2504);
        *(_OWORD *)(v14 + 2648) = *(_OWORD *)(v14 + 2488);
        *(_QWORD *)(v14 + 2504) = 0;
        *(_QWORD *)(v14 + 2488) = 0;
        *(_QWORD *)(v14 + 2496) = 0;
        *(_BYTE *)(v14 + 2672) = 1;
      }
      *(_BYTE *)(v14 + 2680) = 0;
      *(_BYTE *)(v14 + 2704) = 0;
      if (*(_BYTE *)(v14 + 2544))
      {
        *(_QWORD *)(v14 + 2696) = *(_QWORD *)(v14 + 2536);
        *(_OWORD *)(v14 + 2680) = *(_OWORD *)(v14 + 2520);
        *(_QWORD *)(v14 + 2536) = 0;
        *(_QWORD *)(v14 + 2520) = 0;
        *(_QWORD *)(v14 + 2528) = 0;
        *(_BYTE *)(v14 + 2704) = 1;
      }
      *(_DWORD *)(v14 + 2712) = *(_DWORD *)(v14 + 2552);
      *(_QWORD *)(v14 + 2720) = v14 + 2720;
      *(_QWORD *)(v14 + 2728) = v14 + 2720;
      *(_QWORD *)(v14 + 2736) = 0;
      v138 = *(_QWORD *)(v14 + 2576);
      if (v138)
      {
        v139 = *(uint64_t **)(v14 + 2568);
        v140 = *(_QWORD *)(v14 + 2560);
        v141 = *v139;
        *(_QWORD *)(v141 + 8) = *(_QWORD *)(v140 + 8);
        **(_QWORD **)(v140 + 8) = v141;
        v142 = *(_QWORD *)(v14 + 2720);
        *(_QWORD *)(v142 + 8) = v139;
        *v139 = v142;
        *(_QWORD *)(v14 + 2720) = v140;
        *(_QWORD *)(v140 + 8) = v14 + 2720;
        *(_QWORD *)(v14 + 2736) = v138;
        *(_QWORD *)(v14 + 2576) = 0;
      }
      v143 = *(_QWORD *)(v14 + 3192);
      v144 = *(_QWORD *)(v14 + 3184);
      *(_QWORD *)(v14 + 2760) = *(_QWORD *)(v14 + 2600);
      *(_OWORD *)(v14 + 2744) = *(_OWORD *)(v14 + 2584);
      *(_QWORD *)(v14 + 2600) = 0;
      *(_QWORD *)(v14 + 2592) = 0;
      *(_QWORD *)(v14 + 2584) = 0;
      *(_QWORD *)(v14 + 3088) = v144;
      *(_QWORD *)(v14 + 3096) = v143;
      if (v143)
      {
        v145 = (unint64_t *)(v143 + 8);
        do
          v146 = __ldxr(v145);
        while (__stxr(v146 + 1, v145));
      }
      v147 = *(_QWORD *)(v14 + 3208);
      *(_QWORD *)(v14 + 3072) = *(_QWORD *)(v14 + 3200);
      *(_QWORD *)(v14 + 3080) = v147;
      if (v147)
      {
        v148 = (unint64_t *)(v147 + 8);
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
      }
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder(v71, (__int128 *)v103, v287, v288);
      v150 = *(std::__shared_weak_count **)(v14 + 3080);
      if (v150)
      {
        v151 = (unint64_t *)&v150->__shared_owners_;
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      v153 = *(std::__shared_weak_count **)(v14 + 3096);
      if (v153)
      {
        v154 = (unint64_t *)&v153->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      AMSCore::URL::~URL((AMSCore::URL *)v103);
      v99 = *(unsigned __int8 *)(v14 + 2920);
      if (*(_BYTE *)(v14 + 2920))
      {
        v156 = v300->__vftable;
        *v286 = v300->__vftable;
        if (v156)
        {
          v157 = (_QWORD *)operator new();
          v158 = v300->__vftable;
          *v157 = &off_1E2523180;
          v157[1] = 0;
          v157[2] = 0;
          v157[3] = v158;
        }
        else
        {
          v157 = 0;
        }
        *(_QWORD *)(v14 + 3144) = v157;
        *(_QWORD *)(v14 + 2848) = 0;
        v160 = *(_OWORD *)(v14 + 3136);
        *v286 = 0;
        v286[1] = 0;
        v161 = *(std::__shared_weak_count **)(v14 + 1376);
        *(_OWORD *)v71 = v160;
        if (v161)
        {
          v162 = (unint64_t *)&v161->__shared_owners_;
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
        }
        v99 = *(unsigned __int8 *)(v14 + 2840);
        if (*(_BYTE *)(v14 + 2840))
        {
          *(_QWORD *)(v14 + 2992) = *(_QWORD *)(v14 + 2768);
          v164 = v14 + 3000;
          v165 = *(_QWORD *)(v14 + 2776);
          *(_QWORD *)(v14 + 3000) = v165;
          v166 = *(_QWORD *)(v14 + 2784);
          *(_QWORD *)(v14 + 3008) = v166;
          if (v166)
          {
            *(_QWORD *)(v165 + 16) = v164;
            v308->__vftable = (std::runtime_error_vtbl *)(v14 + 2776);
            *(_QWORD *)(v14 + 2776) = 0;
            *(_QWORD *)(v14 + 2784) = 0;
          }
          else
          {
            *v285 = v164;
          }
          *(_DWORD *)(v14 + 3016) = 8;
          AMSCore::Any::operator=(v14 + 1424, (uint64_t)v285);
          *(_DWORD *)(v14 + 1456) = 2;
          *(_DWORD *)(v14 + 1544) = 6;
          v167 = *(unsigned int *)(v14 + 3016);
          if ((_DWORD)v167 != -1)
            ((void (*)(_BYTE *, unint64_t *))off_1E253D240[v167])(v309, v285);
          *(_DWORD *)(v14 + 3016) = -1;
          v168 = *(std::__shared_weak_count **)(v14 + 3144);
          if (v168)
          {
            v169 = (unint64_t *)&v168->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v294, v71);
          AMSCore::EncodeHTTPRequestTask::perform(v306, (uint64_t)v294);
          v171 = *(_OWORD *)(v14 + 152);
          *(_OWORD *)(v14 + 3232) = v171;
          v306->__vftable = 0;
          v306->__imp_.__imp_ = 0;
          if (!atomic_load((unint64_t *)(v171 + 416)))
          {
            *v290 = 1;
            v173 = (unint64_t *)(*(_QWORD *)(v14 + 3232) + 416);
            do
              v174 = __ldaxr(v173);
            while (__stlxr(v14, v173));
            if (!v174)
              return;
          }
          v175 = *(_QWORD *)(v14 + 3232);
          v99 = *(unsigned __int8 *)(v175 + 408);
          if (*(_BYTE *)(v175 + 408))
          {
            v176 = (const std::runtime_error *)(v175 + 8);
            v177 = *(_BYTE *)(v175 + 400);
            if (v177)
            {
              AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v302, (uint64_t)v176);
              v178 = (_QWORD *)(v175 + 384);
              *(_QWORD *)(v14 + 952) = *(_QWORD *)(v175 + 384);
              v179 = (_QWORD *)(v14 + 960);
              v180 = (_QWORD *)(v175 + 392);
              v181 = v284;
            }
            else
            {
              std::runtime_error::runtime_error(v302, v176);
              *(_OWORD *)(v14 + 592) = *(_OWORD *)(v175 + 24);
              *(_QWORD *)(v14 + 576) = off_1E2521330;
              v182 = (_QWORD *)(v175 + 48);
              v183 = *(_QWORD *)(v175 + 48);
              *(_QWORD *)(v14 + 608) = *(_QWORD *)(v175 + 40);
              v184 = v14 + 616;
              *(_QWORD *)(v14 + 616) = v183;
              v185 = *(_QWORD *)(v175 + 56);
              *(_QWORD *)(v14 + 624) = v185;
              if (v185)
              {
                *(_QWORD *)(v183 + 16) = v184;
                *(_QWORD *)(v175 + 40) = v182;
                *v182 = 0;
                *(_QWORD *)(v175 + 56) = 0;
              }
              else
              {
                *(_QWORD *)(v14 + 608) = v184;
              }
              v181 = v284;
              v194 = *(_QWORD *)(v14 + 3232);
              v195 = *(_QWORD *)(v194 + 64);
              v178 = (_QWORD *)(v194 + 64);
              *(_QWORD *)(v14 + 632) = v195;
              v179 = (_QWORD *)(v14 + 640);
              v180 = v178 + 1;
            }
            *v179 = *v180;
            *v178 = 0;
            v178[1] = 0;
            *(_BYTE *)(v14 + 968) = v177;
            v196 = *(_QWORD *)(v14 + 3240);
            if (v196)
            {
              v197 = (unint64_t *)(v196 + 8);
              do
                v198 = __ldaxr(v197);
              while (__stlxr(v198 - 1, v197));
              if (!v198)
              {
                v199 = *(std::__shared_weak_count **)(v14 + 3240);
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
            v200 = *(std::__shared_weak_count **)(v14 + 160);
            if (v200)
            {
              v201 = (unint64_t *)&v200->__shared_owners_;
              do
                v202 = __ldaxr(v201);
              while (__stlxr(v202 - 1, v201));
              if (!v202)
              {
                ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                std::__shared_weak_count::__release_weak(v200);
              }
            }
            AMSCore::EncodeHTTPRequestTask::Options::~Options(v294);
            if (!*(_BYTE *)(v14 + 968))
            {
              std::runtime_error::runtime_error((std::runtime_error *)v309, v302);
              *(_OWORD *)&v309[16] = *(_OWORD *)(v14 + 592);
              *(_QWORD *)v309 = off_1E2521330;
              v212 = *(_QWORD *)(v14 + 616);
              p_p = *(uint64_t **)(v14 + 608);
              *(_QWORD *)&__p = v212;
              *((_QWORD *)&__p + 1) = *(_QWORD *)(v14 + 624);
              if (*((_QWORD *)&__p + 1))
              {
                *(_QWORD *)(v212 + 16) = &__p;
                *(_QWORD *)(v14 + 608) = v14 + 616;
                *(_QWORD *)(v14 + 616) = 0;
                *(_QWORD *)(v14 + 624) = 0;
              }
              else
              {
                p_p = (uint64_t *)&__p;
              }
              v312 = *(_OWORD *)v283;
              *(_QWORD *)v283 = 0;
              *((_QWORD *)v283 + 1) = 0;
              LOBYTE(v313) = 1;
              std::runtime_error::runtime_error(&v340, (const std::runtime_error *)v309);
              v340.__ec_ = *(std::error_code *)&v309[16];
              v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
              v341 = p_p;
              v342 = __p;
              if (*((_QWORD *)&__p + 1))
              {
                *(_QWORD *)(__p + 16) = &v342;
                p_p = (uint64_t *)&__p;
                __p = 0uLL;
              }
              else
              {
                v341 = (uint64_t *)&v342;
              }
              v343 = v312;
              v312 = 0uLL;
              std::runtime_error::runtime_error(&v345, &v340);
              ec = v340.__ec_;
              v345.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v241 = (unsigned int *)v342;
              v347 = v341;
              v348 = v342;
              if (*((_QWORD *)&v342 + 1))
              {
                *(_QWORD *)(v342 + 16) = &v348;
                v241 = 0;
                v341 = (uint64_t *)&v342;
                v342 = 0uLL;
              }
              else
              {
                v347 = (uint64_t *)&v348;
              }
              v349 = v343;
              v343 = 0uLL;
              v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v341, v241);
              MEMORY[0x18D7898AC](&v340);
              v92 = &v300->__vftable;
              if (*(_BYTE *)(v14 + 104))
              {
                if (!*(_BYTE *)(v14 + 96))
                  ((void (*)(std::runtime_error *))v303->~runtime_error)(v303);
                *(_BYTE *)(v14 + 104) = 0;
              }
              std::runtime_error::runtime_error(v303, &v345);
              v243 = v347;
              v242 = v348;
              *(_QWORD *)(v14 + 64) = v348;
              v244 = v14 + 64;
              *(std::error_code *)(v14 + 40) = ec;
              *(_QWORD *)(v14 + 24) = off_1E2521330;
              *(_QWORD *)(v14 + 56) = v243;
              v245 = *((_QWORD *)&v348 + 1);
              *(_QWORD *)(v14 + 72) = *((_QWORD *)&v348 + 1);
              if (v245)
              {
                *(_QWORD *)(v242 + 16) = v244;
                v242 = 0;
                v347 = (uint64_t *)&v348;
                v348 = 0uLL;
              }
              else
              {
                *(_QWORD *)(v14 + 56) = v244;
              }
              v71 = (uint64_t)v304;
              *(_OWORD *)(v14 + 80) = v349;
              v349 = 0uLL;
              *(_BYTE *)(v14 + 96) = 0;
              *(_BYTE *)(v14 + 104) = 1;
              v345.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v347, (unsigned int *)v242);
              MEMORY[0x18D7898AC](&v345);
              if ((_BYTE)v313)
              {
                *(_QWORD *)v309 = off_1E2521330;
                v246 = (std::__shared_weak_count *)*((_QWORD *)&v312 + 1);
                if (*((_QWORD *)&v312 + 1))
                {
                  v247 = (unint64_t *)(*((_QWORD *)&v312 + 1) + 8);
                  do
                    v248 = __ldaxr(v247);
                  while (__stlxr(v248 - 1, v247));
                  if (!v248)
                  {
                    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                    std::__shared_weak_count::__release_weak(v246);
                  }
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&p_p, (unsigned int *)__p);
                MEMORY[0x18D7898AC](v309);
              }
              v113 = *(_QWORD *)(v14 + 3208);
              v114 = *(_QWORD *)(v14 + 3192);
              if (*(_BYTE *)(v14 + 968))
                goto LABEL_471;
              goto LABEL_415;
            }
            *(_OWORD *)(v14 + 3104) = *(_OWORD *)(v14 + 3184);
            *(_OWORD *)(v14 + 3120) = *(_OWORD *)(v14 + 3200);
            AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v291, v181, v282);
            v203 = *(std::__shared_weak_count **)(v14 + 3128);
            if (v203)
            {
              v204 = (unint64_t *)&v203->__shared_owners_;
              do
                v205 = __ldaxr(v204);
              while (__stlxr(v205 - 1, v204));
              if (!v205)
              {
                ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                std::__shared_weak_count::__release_weak(v203);
              }
            }
            v206 = *(std::__shared_weak_count **)(v14 + 3112);
            if (v206)
            {
              v207 = (unint64_t *)&v206->__shared_owners_;
              do
                v208 = __ldaxr(v207);
              while (__stlxr(v208 - 1, v207));
              if (!v208)
              {
                ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                std::__shared_weak_count::__release_weak(v206);
              }
            }
            v99 = *(unsigned __int8 *)(v14 + 968);
            if (*(_BYTE *)(v14 + 968))
            {
              AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v292, (uint64_t)v302);
              *((_OWORD *)v283 + 45) = *((_OWORD *)v283 + 20);
              *((_QWORD *)v283 + 40) = 0;
              *((_QWORD *)v283 + 41) = 0;
              *(_QWORD *)(v14 + 2120) = *(_QWORD *)(v14 + 2288);
              v209 = v14 + 2128;
              v210 = *(_QWORD *)(v14 + 2296);
              *(_QWORD *)(v14 + 2128) = v210;
              v211 = *(_QWORD *)(v14 + 2304);
              *(_QWORD *)(v14 + 2136) = v211;
              if (v211)
              {
                *(_QWORD *)(v210 + 16) = v209;
                *(_QWORD *)v291 = v14 + 2296;
                *(_QWORD *)(v14 + 2296) = 0;
                *(_QWORD *)(v14 + 2304) = 0;
              }
              else
              {
                *(_QWORD *)v289 = v209;
              }
              v213 = *(_OWORD *)(v71 + 960);
              *(_OWORD *)(v14 + 2144) = *(_OWORD *)(v71 + 944);
              *(_OWORD *)(v14 + 2160) = v213;
              *(_OWORD *)(v71 + 944) = 0u;
              *(_OWORD *)(v71 + 960) = 0u;
              *(_BYTE *)(v14 + 2176) = 0;
              *(_BYTE *)(v14 + 2200) = 0;
              if (*(_BYTE *)(v14 + 2368))
              {
                *(_QWORD *)(v14 + 2192) = *(_QWORD *)(v14 + 2360);
                *(_OWORD *)(v14 + 2176) = *(_OWORD *)(v14 + 2344);
                *(_QWORD *)(v14 + 2360) = 0;
                *(_QWORD *)(v14 + 2344) = 0;
                *(_QWORD *)(v14 + 2352) = 0;
                *(_BYTE *)(v14 + 2200) = 1;
              }
              *(_BYTE *)(v14 + 2208) = 0;
              *(_DWORD *)(v14 + 2224) = -1;
              v214 = *(unsigned int *)(v14 + 2392);
              if ((_DWORD)v214 != -1)
              {
                ((void (*)(_BYTE *, unint64_t, unint64_t))off_1E253CA98[v214])(v309, v14 + 2208, v14 + 2376);
                *(_DWORD *)(v14 + 2224) = v214;
              }
              *(_OWORD *)(v14 + 2232) = *(_OWORD *)(v14 + 2400);
              *(_DWORD *)(v14 + 2248) = *(_DWORD *)(v14 + 2416);
              v215 = *(_QWORD *)(v14 + 2448);
              if (v215)
              {
                v216 = (std::runtime_error *)(v14 + 3168);
                if (v215 == v14 + 2424)
                {
                  *(_QWORD *)(v14 + 2280) = v14 + 2256;
                  (*(void (**)(uint64_t))(*(_QWORD *)v215 + 24))(v215);
                }
                else
                {
                  *(_QWORD *)(v14 + 2280) = v215;
                  *(_QWORD *)(v14 + 2448) = 0;
                }
              }
              else
              {
                v216 = (std::runtime_error *)(v14 + 3168);
                *(_QWORD *)(v14 + 2280) = 0;
              }
              AMSCore::ExecuteHTTPRequestTask::perform(v216, (uint64_t)v292, (uint64_t)v289);
              v217 = *(_OWORD *)(v14 + 3168);
              v216->__vftable = 0;
              v216->__imp_.__imp_ = 0;
              *(_OWORD *)(v14 + 3152) = v217;
              if (!atomic_load((unint64_t *)(v217 + 440)))
              {
                *v290 = 2;
                v219 = (unint64_t *)(*(_QWORD *)(v14 + 3152) + 440);
                do
                  v220 = __ldaxr(v219);
                while (__stlxr(v14, v219));
                if (!v220)
                  return;
              }
              AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::operator co_await(void) &&::CoAwaiter::await_resume(v306, *(_QWORD *)(v14 + 3152));
              v221 = *(std::__shared_weak_count **)(v14 + 3160);
              if (v221)
              {
                v222 = (unint64_t *)&v221->__shared_owners_;
                do
                  v223 = __ldaxr(v222);
                while (__stlxr(v223 - 1, v222));
                if (!v223)
                {
                  ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                  std::__shared_weak_count::__release_weak(v221);
                }
              }
              v224 = *(std::__shared_weak_count **)(v14 + 3176);
              if (v224)
              {
                v225 = (unint64_t *)&v224->__shared_owners_;
                do
                  v226 = __ldaxr(v225);
                while (__stlxr(v226 - 1, v225));
                if (!v226)
                {
                  ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                  std::__shared_weak_count::__release_weak(v224);
                }
              }
              AMSCore::ExecuteHTTPRequestTask::Options::~Options(v289);
              v227 = *(std::__shared_weak_count **)(v14 + 1360);
              if (v227)
              {
                v228 = (unint64_t *)&v227->__shared_owners_;
                do
                  v229 = __ldaxr(v228);
                while (__stlxr(v229 - 1, v228));
                if (!v229)
                {
                  ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                  std::__shared_weak_count::__release_weak(v227);
                }
              }
              AMSCore::EncodeHTTPRequestTask::Options::~Options(v292);
              if (*(_BYTE *)(v14 + 568))
              {
                v230 = *(unsigned __int16 **)(v14 + 336);
                v231 = (const std::error_category *)v230[76];
                if (((_DWORD)v231 - 200) < 0x64)
                {
                  AMSCore::HTTPResponse::getDecodedObject((AMSCore::HTTPResponse *)v230);
                  if (!*(_BYTE *)(v232 + 72))
                  {
                    AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[32],AMSCore::Error const&>((uint64_t)v309, 0x137u, v232);
                    AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>(v301, (std::runtime_error *)v309);
                    std::unexpected<AMSCore::Error>::~unexpected((uint64_t)v309);
                  }
                  AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)v309, (uint64_t *)v232, "syncState", 9uLL);
                  if ((_BYTE)v313)
                  {
                    if (*(char *)(*(_QWORD *)v309 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)&v340, **(const std::string::value_type ***)v309, *(_QWORD *)(*(_QWORD *)v309 + 8));
                    }
                    else
                    {
                      v233 = **(std::runtime_error **)v309;
                      *(_QWORD *)&v340.__ec_.__val_ = *(_QWORD *)(*(_QWORD *)v309 + 16);
                      v340.std::runtime_error = v233;
                    }
                  }
                  else
                  {
                    std::string::basic_string[abi:fe180100]<0>(&v340, "None");
                  }
                  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v345);
                  AMSCore::Logger::log<char [32],std::string>((uint64_t)v345.__vftable, 2, (uint64_t)"fairplay", 8, "Sync with server: syncState == ", (uint64_t)&v340);
                  imp = (std::__shared_weak_count *)v345.__imp_.__imp_;
                  if (v345.__imp_.__imp_)
                  {
                    v261 = (unint64_t *)(v345.__imp_.__imp_ + 8);
                    do
                      v262 = __ldaxr(v261);
                    while (__stlxr(v262 - 1, v261));
                    if (!v262)
                    {
                      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
                      std::__shared_weak_count::__release_weak(imp);
                    }
                  }
                  if (*((char *)&v340.__ec_.__val_ + 7) < 0)
                    operator delete(v340.__vftable);
                  v344 = 1;
                  if (!*(_BYTE *)(v14 + 104))
                    goto LABEL_454;
                  if (*(_BYTE *)(v14 + 96))
                  {
                    *(_BYTE *)(v14 + 104) = 0;
LABEL_454:
                    LOBYTE(v263) = 1;
LABEL_455:
                    *(_BYTE *)(v14 + 96) = v263;
                    *(_BYTE *)(v14 + 104) = 1;
LABEL_456:
                    if (!(_BYTE)v313)
                      (**(void (***)(_BYTE *))v309)(v309);
                    goto LABEL_458;
                  }
                  (**(void (***)(std::runtime_error *))(v14 + 24))(v303);
                  v263 = v344;
                  *(_BYTE *)(v14 + 104) = 0;
                  if (v263)
                    goto LABEL_455;
                  std::runtime_error::runtime_error(v303, &v340);
                  v274 = v340.__ec_;
                  v276 = v341;
                  v275 = v342;
                  *(_QWORD *)(v14 + 64) = v342;
                  v99 = v14 + 64;
                  *(std::error_code *)(v14 + 40) = v274;
                  *(_QWORD *)(v14 + 24) = off_1E2521330;
                  *(_QWORD *)(v14 + 56) = v276;
                  v277 = *((_QWORD *)&v342 + 1);
                  *(_QWORD *)(v14 + 72) = *((_QWORD *)&v342 + 1);
                  if (v277)
                  {
                    *(_QWORD *)(v275 + 16) = v99;
                    v341 = (uint64_t *)&v342;
                    v342 = 0uLL;
                    goto LABEL_493;
                  }
LABEL_492:
                  *(_QWORD *)(v14 + 56) = v99;
LABEL_493:
                  *(_OWORD *)(v14 + 80) = v343;
                  v343 = 0uLL;
                  v278 = v344;
                  *(_BYTE *)(v14 + 96) = 0;
                  *(_BYTE *)(v14 + 104) = 1;
                  if (!v278)
                    ((void (*)(std::system_error *))v340.~system_error)(&v340);
                  goto LABEL_456;
                }
                *((_BYTE *)&v340.__ec_.__val_ + 7) = 8;
                strcpy((char *)&v340, "httpCode");
                v340.__ec_.__cat_ = v231;
                DWORD2(v342) = 3;
                v345.__imp_.__imp_ = 0;
                *(_QWORD *)&ec.__val_ = 0;
                v345.__vftable = (std::runtime_error_vtbl *)&v345.__imp_;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v345, (uint64_t *)&v345.__imp_, (const void **)&v340.__vftable, (__int128 *)&v340);
                AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,std::map<std::string,AMSCore::Any>,char const(&)[16]>((uint64_t)v309, 0x12Du, &v345);
                if (*(_BYTE *)(v14 + 104))
                {
                  if (!*(_BYTE *)(v14 + 96))
                    ((void (*)(std::runtime_error *))v303->~runtime_error)(v303);
                  *(_BYTE *)(v14 + 104) = 0;
                }
                std::runtime_error::runtime_error(v303, (const std::runtime_error *)v309);
                v236 = *(_OWORD *)&v309[16];
                v238 = p_p;
                v237 = __p;
                *(_QWORD *)(v14 + 64) = __p;
                v239 = v14 + 64;
                *(_OWORD *)(v14 + 40) = v236;
                *(_QWORD *)(v14 + 24) = off_1E2521330;
                *(_QWORD *)(v14 + 56) = v238;
                v240 = *((_QWORD *)&__p + 1);
                *(_QWORD *)(v14 + 72) = *((_QWORD *)&__p + 1);
                if (v240)
                {
                  *(_QWORD *)(v237 + 16) = v239;
                  p_p = (uint64_t *)&__p;
                  __p = 0uLL;
                  v237 = 0;
                }
                else
                {
                  *(_QWORD *)(v14 + 56) = v239;
                }
                *(_OWORD *)(v14 + 80) = v312;
                v312 = 0uLL;
                *(_BYTE *)(v14 + 96) = 0;
                *(_BYTE *)(v14 + 104) = 1;
                *(_QWORD *)v309 = off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&p_p, (unsigned int *)v237);
                MEMORY[0x18D7898AC](v309);
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v345, (unsigned int *)v345.__imp_.__imp_);
                if (DWORD2(v342) != -1)
                  ((void (*)(std::string *, const std::error_category **))off_1E253D240[DWORD2(v342)])(&__what_arg, &v340.__ec_.__cat_);
                DWORD2(v342) = -1;
                if (*((char *)&v340.__ec_.__val_ + 7) < 0)
                  operator delete(v340.__vftable);
              }
              else
              {
                std::runtime_error::runtime_error((std::runtime_error *)v309, v306);
                v234 = (_QWORD *)(v14 + 192);
                v235 = *(_QWORD *)(v14 + 192);
                *(_OWORD *)&v309[16] = *(_OWORD *)(v14 + 168);
                p_p = *(uint64_t **)(v14 + 184);
                *(_QWORD *)&__p = v235;
                *((_QWORD *)&__p + 1) = *(_QWORD *)(v14 + 200);
                if (*((_QWORD *)&__p + 1))
                {
                  *(_QWORD *)(v235 + 16) = &__p;
                  *(_QWORD *)(v14 + 184) = v234;
                  *v234 = 0;
                  *(_QWORD *)(v14 + 200) = 0;
                }
                else
                {
                  p_p = (uint64_t *)&__p;
                }
                v312 = *(_OWORD *)(v14 + 208);
                *(_QWORD *)(v14 + 208) = 0;
                *(_QWORD *)(v14 + 216) = 0;
                *(_QWORD *)v309 = &off_1E2521420;
                LOBYTE(v313) = 0;
                BYTE8(v314) = 0;
                if (*(_BYTE *)(v14 + 248))
                {
                  v313 = *(_OWORD *)(v14 + 224);
                  *(_QWORD *)&v314 = *(_QWORD *)(v14 + 240);
                  *(_QWORD *)(v14 + 232) = 0;
                  *(_QWORD *)(v14 + 240) = 0;
                  *(_QWORD *)(v14 + 224) = 0;
                  BYTE8(v314) = 1;
                }
                v249 = *(_OWORD *)(v14 + 304);
                v315[2] = *(_OWORD *)(v14 + 288);
                v315[3] = v249;
                v316[0] = *(_OWORD *)(v14 + 320);
                v250 = *(_OWORD *)(v14 + 272);
                v315[0] = *(_OWORD *)(v14 + 256);
                v315[1] = v250;
                *(_OWORD *)((char *)v316 + 9) = *(_OWORD *)(v14 + 329);
                v316[2] = *(_OWORD *)(v14 + 352);
                v317 = *(_QWORD *)(v14 + 368);
                *(_QWORD *)(v14 + 352) = 0;
                *(_QWORD *)(v14 + 360) = 0;
                *(_QWORD *)(v14 + 368) = 0;
                *(_OWORD *)((char *)v326 + 10) = *(_OWORD *)(v14 + 514);
                v251 = *(_OWORD *)(v14 + 488);
                v324 = *(_OWORD *)(v14 + 472);
                v325 = v251;
                v326[0] = *(_OWORD *)(v14 + 504);
                v252 = *(_OWORD *)(v14 + 424);
                v320 = *(_OWORD *)(v14 + 408);
                v321 = v252;
                v253 = *(_OWORD *)(v14 + 456);
                v322 = *(_OWORD *)(v14 + 440);
                v323 = v253;
                v254 = *(_OWORD *)(v14 + 392);
                v318 = *(_OWORD *)(v14 + 376);
                v319 = v254;
                LOBYTE(v327) = 0;
                v329 = 0;
                if (*(_BYTE *)(v14 + 560))
                {
                  v328 = *(_QWORD *)(v14 + 552);
                  v327 = *(_OWORD *)(v14 + 536);
                  *(_QWORD *)(v14 + 552) = 0;
                  *(_QWORD *)(v14 + 536) = 0;
                  *(_QWORD *)(v14 + 544) = 0;
                  v329 = 1;
                }
                v330 = 1;
                std::runtime_error::runtime_error(&v340, (const std::runtime_error *)v309);
                v340.__ec_ = *(std::error_code *)&v309[16];
                v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
                v341 = p_p;
                v342 = __p;
                if (*((_QWORD *)&__p + 1))
                {
                  *(_QWORD *)(__p + 16) = &v342;
                  p_p = (uint64_t *)&__p;
                  __p = 0uLL;
                }
                else
                {
                  v341 = (uint64_t *)&v342;
                }
                v343 = v312;
                v312 = 0uLL;
                std::runtime_error::runtime_error(&v345, &v340);
                ec = v340.__ec_;
                v345.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v255 = (unsigned int *)v342;
                v347 = v341;
                v348 = v342;
                if (*((_QWORD *)&v342 + 1))
                {
                  *(_QWORD *)(v342 + 16) = &v348;
                  v255 = 0;
                  v341 = (uint64_t *)&v342;
                  v342 = 0uLL;
                }
                else
                {
                  v347 = (uint64_t *)&v348;
                }
                v349 = v343;
                v343 = 0uLL;
                v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v341, v255);
                MEMORY[0x18D7898AC](&v340);
                v71 = (uint64_t)v304;
                if (*(_BYTE *)(v14 + 104))
                {
                  if (!*(_BYTE *)(v14 + 96))
                    ((void (*)(std::runtime_error *))v303->~runtime_error)(v303);
                  *(_BYTE *)(v14 + 104) = 0;
                }
                std::runtime_error::runtime_error(v303, &v345);
                v257 = v347;
                v256 = v348;
                *(_QWORD *)(v14 + 64) = v348;
                v258 = v14 + 64;
                *(std::error_code *)(v14 + 40) = ec;
                *(_QWORD *)(v14 + 24) = off_1E2521330;
                *(_QWORD *)(v14 + 56) = v257;
                v259 = *((_QWORD *)&v348 + 1);
                *(_QWORD *)(v14 + 72) = *((_QWORD *)&v348 + 1);
                if (v259)
                {
                  *(_QWORD *)(v256 + 16) = v258;
                  v256 = 0;
                  v347 = (uint64_t *)&v348;
                  v348 = 0uLL;
                }
                else
                {
                  *(_QWORD *)(v14 + 56) = v258;
                }
                v92 = &v300->__vftable;
                *(_OWORD *)(v14 + 80) = v349;
                v349 = 0uLL;
                *(_BYTE *)(v14 + 96) = 0;
                *(_BYTE *)(v14 + 104) = 1;
                v345.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v347, (unsigned int *)v256);
                MEMORY[0x18D7898AC](&v345);
                if (v330)
                  AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)v309);
              }
LABEL_458:
              if (*(_BYTE *)(v14 + 568))
              {
                v264 = *(std::__shared_weak_count **)(v14 + 344);
                if (v264)
                {
                  v265 = (unint64_t *)&v264->__shared_owners_;
                  do
                    v266 = __ldaxr(v265);
                  while (__stlxr(v266 - 1, v265));
                  if (!v266)
                  {
                    ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                    std::__shared_weak_count::__release_weak(v264);
                  }
                }
                AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v14 + 168));
                v267 = *(std::__shared_weak_count **)(v14 + 160);
                if (v267)
                {
                  v268 = (unint64_t *)&v267->__shared_owners_;
                  do
                    v269 = __ldaxr(v268);
                  while (__stlxr(v269 - 1, v268));
                  if (!v269)
                  {
                    ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                    std::__shared_weak_count::__release_weak(v267);
                  }
                }
              }
              else
              {
                ((void (*)(std::runtime_error *))v306->~runtime_error)(v306);
              }
              AMSCore::ExecuteHTTPRequestTask::Options::~Options(v291);
              v113 = 0;
              v114 = 0;
              if (*(_BYTE *)(v14 + 968))
              {
LABEL_471:
                v270 = *(std::__shared_weak_count **)(v14 + 960);
                if (v270)
                {
                  v271 = (unint64_t *)&v270->__shared_owners_;
                  do
                    v272 = __ldaxr(v271);
                  while (__stlxr(v272 - 1, v271));
                  if (!v272)
                  {
                    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                    std::__shared_weak_count::__release_weak(v270);
                  }
                }
                AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v302->__vftable);
                goto LABEL_477;
              }
LABEL_415:
              ((void (*)(std::runtime_error *))v302->~runtime_error)(v302);
LABEL_477:
              AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v71);
              goto LABEL_478;
            }
          }
        }
      }
    }
LABEL_491:
    __break(1u);
    goto LABEL_492;
  }
LABEL_232:
  if ((*(char *)(v14 + 3071) & 0x80000000) == 0)
    goto LABEL_233;
LABEL_238:
  operator delete(*v296);
  v134 = *(std::__shared_weak_count **)(v14 + 160);
  if (v134)
    goto LABEL_239;
LABEL_242:
  if (*(_BYTE *)(v14 + 2920))
    goto LABEL_243;
LABEL_272:
  std::runtime_error::runtime_error((std::runtime_error *)v309, v300);
  *(_OWORD *)&v309[16] = *(_OWORD *)(v14 + 2864);
  *(_QWORD *)v309 = off_1E2521330;
  v159 = *(_QWORD *)(v14 + 2888);
  p_p = *(uint64_t **)(v14 + 2880);
  *(_QWORD *)&__p = v159;
  *((_QWORD *)&__p + 1) = *(_QWORD *)(v14 + 2896);
  if (*((_QWORD *)&__p + 1))
  {
    *(_QWORD *)(v159 + 16) = &__p;
    *(_QWORD *)(v14 + 2880) = v14 + 2888;
    *(_QWORD *)(v14 + 2888) = 0;
    *(_QWORD *)(v14 + 2896) = 0;
  }
  else
  {
    p_p = (uint64_t *)&__p;
  }
  v312 = *(_OWORD *)(v71 + 1536);
  *(_OWORD *)(v71 + 1536) = 0u;
  LOBYTE(v313) = 1;
  std::runtime_error::runtime_error(&v340, (const std::runtime_error *)v309);
  v340.__ec_ = *(std::error_code *)&v309[16];
  v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v341 = p_p;
  v342 = __p;
  if (*((_QWORD *)&__p + 1))
  {
    *(_QWORD *)(__p + 16) = &v342;
    p_p = (uint64_t *)&__p;
    __p = 0uLL;
  }
  else
  {
    v341 = (uint64_t *)&v342;
  }
  v343 = v312;
  v312 = 0uLL;
  std::runtime_error::runtime_error(&v345, &v340);
  ec = v340.__ec_;
  v345.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v186 = (unsigned int *)v342;
  v347 = v341;
  v348 = v342;
  if (*((_QWORD *)&v342 + 1))
  {
    *(_QWORD *)(v342 + 16) = &v348;
    v186 = 0;
    v341 = (uint64_t *)&v342;
    v342 = 0uLL;
  }
  else
  {
    v347 = (uint64_t *)&v348;
  }
  v349 = v343;
  v343 = 0uLL;
  v340.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v341, v186);
  MEMORY[0x18D7898AC](&v340);
  v92 = &v300->__vftable;
  if (*(_BYTE *)(v14 + 104))
  {
    if (!*(_BYTE *)(v14 + 96))
      ((void (*)(std::runtime_error *))v303->~runtime_error)(v303);
    *(_BYTE *)(v14 + 104) = 0;
  }
  std::runtime_error::runtime_error(v303, &v345);
  v188 = v347;
  v187 = v348;
  *(_QWORD *)(v14 + 64) = v348;
  v189 = v14 + 64;
  *(std::error_code *)(v14 + 40) = ec;
  *(_QWORD *)(v14 + 24) = off_1E2521330;
  *(_QWORD *)(v14 + 56) = v188;
  v190 = *((_QWORD *)&v348 + 1);
  *(_QWORD *)(v14 + 72) = *((_QWORD *)&v348 + 1);
  if (v190)
  {
    *(_QWORD *)(v187 + 16) = v189;
    v187 = 0;
    v347 = (uint64_t *)&v348;
    v348 = 0uLL;
  }
  else
  {
    *(_QWORD *)(v14 + 56) = v189;
  }
  *(_OWORD *)(v14 + 80) = v349;
  v349 = 0uLL;
  *(_BYTE *)(v14 + 96) = 0;
  *(_BYTE *)(v14 + 104) = 1;
  v345.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v347, (unsigned int *)v187);
  MEMORY[0x18D7898AC](&v345);
  if ((_BYTE)v313)
  {
    *(_QWORD *)v309 = off_1E2521330;
    v191 = (std::__shared_weak_count *)*((_QWORD *)&v312 + 1);
    if (*((_QWORD *)&v312 + 1))
    {
      v192 = (unint64_t *)(*((_QWORD *)&v312 + 1) + 8);
      do
        v193 = __ldaxr(v192);
      while (__stlxr(v193 - 1, v192));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&p_p, (unsigned int *)__p);
    MEMORY[0x18D7898AC](v309);
  }
  v113 = *(_QWORD *)(v14 + 3208);
  v114 = *(_QWORD *)(v14 + 3192);
LABEL_478:
  v273 = *(_QWORD *)(v14 + 2848);
  if (*(_BYTE *)(v14 + 2920))
  {
    *v92 = 0;
    if (v273)
      (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
    if (*(_BYTE *)(v14 + 2608))
      goto LABEL_482;
  }
  else
  {
    (*(void (**)(_QWORD *))v273)(v92);
    if (*(_BYTE *)(v14 + 2608))
      goto LABEL_482;
  }
LABEL_220:
  ((void (*)(std::runtime_error *))v305->~runtime_error)(v305);
  if (!*(_BYTE *)(v14 + 2840))
    goto LABEL_483;
LABEL_195:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v308, *(unsigned int **)(v14 + 2776));
LABEL_484:
  *(_QWORD *)(v14 + 3264) = v114;
  *(_QWORD *)(v14 + 3256) = v113;
  *(_QWORD *)(v14 + 3248) = 0;
  *(_QWORD *)(v14 + 152) = v301;
  *(_QWORD *)v14 = 0;
  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v306);
}

void sub_18CC54E5C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, AMSCore::ExecuteHTTPRequestTask::Options *a19, uint64_t a20,AMSCore::ExecuteHTTPRequestTask::Options *a21,AMSCore::EncodeHTTPRequestTask::Result *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,AMSCore::EncodeHTTPRequestTask::Options *a32,uint64_t a33,void **a34,AMSCore::URL *a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v40;

  if (a2)
  {
    std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](a36);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(a21);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](a32);
    AMSCore::EncodeHTTPRequestTask::Options::~Options(a34);
    v40 = *(_QWORD *)(v38 + 2848);
    if (*(_BYTE *)(v38 + 2920))
    {
      *a30 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
    else
    {
      (*(void (**)(_QWORD *))v40)(a30);
    }
    if (*(_BYTE *)(v38 + 2608))
      AMSCore::URL::~URL(a35);
    else
      (**(void (***)(AMSCore::URL *))a35)(a35);
    std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](a38);
    __cxa_begin_catch(a1);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(a1);
}

void AMSCore::SyncMachineTask::internal::performImpl(unint64_t a1)
{
  std::runtime_error *v2;
  void **v3;
  AMSCore::URL *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  std::runtime_error_vtbl **v8;
  uint64_t v9;
  const std::runtime_error *v10;
  char v11;
  std::runtime_error_vtbl *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::runtime_error_vtbl *v46;
  _QWORD *v47;
  std::runtime_error_vtbl *v48;
  uint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  const std::runtime_error *v66;
  char v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  const std::runtime_error *v103;
  char v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  _QWORD *v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unsigned __int16 *v140;
  uint64_t v141;
  uint64_t v142;
  std::runtime_error v143;
  _QWORD *v144;
  uint64_t v145;
  __int128 v146;
  unsigned int *v147;
  unsigned int **v148;
  unint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  unsigned int *v157;
  unsigned int *v158;
  unsigned int **v159;
  unint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int *v163;
  unsigned int **v164;
  unint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  unsigned int *v173;
  unsigned int **v174;
  unint64_t v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int *v178;
  unsigned int **v179;
  unint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *imp;
  unint64_t *v186;
  unint64_t v187;
  int v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  __int128 v199;
  unsigned int *v200;
  unsigned int **v201;
  unint64_t v202;
  uint64_t v203;
  int v204;
  unint64_t *v205;
  _BYTE *v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  AMSCore::ExecuteHTTPRequestTask::Options *v211;
  AMSCore::ExecuteHTTPRequestTask::Options *v212;
  std::runtime_error *v213;
  std::runtime_error *v214;
  AMSCore::EncodeHTTPRequestTask::Options *v215;
  char v216;
  std::runtime_error v217;
  __int128 v218;
  unsigned int **v219;
  unsigned int *v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  char v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  _OWORD v230[3];
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  _OWORD v240[2];
  __int128 v241;
  uint64_t v242;
  char v243;
  char v244;
  std::runtime_error v245;
  __int128 v246;
  unsigned int **v247;
  unsigned int *v248;
  uint64_t v249;
  __int128 v250;
  std::runtime_error v251;
  __int128 v252;
  unsigned int **v253;
  unsigned int *v254;
  uint64_t v255;
  __int128 v256;
  char v257;
  uint64_t v258;

  v258 = *MEMORY[0x1E0C80C00];
  v2 = (std::runtime_error *)(a1 + 152);
  v214 = (std::runtime_error *)(a1 + 576);
  v215 = (AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 1368);
  v3 = (void **)(a1 + 976);
  v211 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2120);
  v212 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2288);
  v4 = (AMSCore::URL *)(a1 + 2456);
  v5 = (_QWORD *)(a1 + 2768);
  v213 = (std::runtime_error *)(a1 + 2848);
  v6 = a1 + 16;
  v7 = *(unsigned __int8 *)(a1 + 3272);
  if (v7 == 2)
    goto LABEL_127;
  v206 = (_BYTE *)(a1 + 3272);
  if (v7 != 1)
  {
    v207 = (_QWORD *)(a1 + 2768);
    v208 = a1 + 152;
    v205 = (unint64_t *)(a1 + 2992);
    v8 = (std::runtime_error_vtbl **)(a1 + 3136);
    v9 = *(_QWORD *)(a1 + 3216);
    if (!*(_BYTE *)(v9 + 88))
      goto LABEL_311;
    v209 = a1 + 16;
    v10 = (const std::runtime_error *)(v9 + 8);
    v11 = *(_BYTE *)(v9 + 80);
    if (v11)
    {
      v12 = v10->__vftable;
      v10->__vftable = 0;
      v213->__vftable = v12;
      v5 = (_QWORD *)(a1 + 2768);
    }
    else
    {
      std::runtime_error::runtime_error(v213, v10);
      *(_OWORD *)(a1 + 2864) = *(_OWORD *)(v9 + 24);
      *(_QWORD *)(a1 + 2848) = off_1E2521330;
      v13 = (_QWORD *)(v9 + 48);
      v14 = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(a1 + 2880) = *(_QWORD *)(v9 + 40);
      v15 = a1 + 2888;
      *(_QWORD *)(a1 + 2888) = v14;
      v16 = *(_QWORD *)(v9 + 56);
      *(_QWORD *)(a1 + 2896) = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 16) = v15;
        *(_QWORD *)(v9 + 40) = v13;
        *v13 = 0;
        *(_QWORD *)(v9 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 2880) = v15;
      }
      v5 = v207;
      v17 = *(_QWORD *)(a1 + 3216);
      *((_OWORD *)v215 + 96) = *(_OWORD *)(v17 + 64);
      *(_QWORD *)(v17 + 64) = 0;
      *(_QWORD *)(v17 + 72) = 0;
    }
    *(_BYTE *)(a1 + 2920) = v11;
    v18 = *(_QWORD *)(a1 + 3224);
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        v21 = *(std::__shared_weak_count **)(a1 + 3224);
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v22 = *(std::__shared_weak_count **)(a1 + 584);
    if (!v22)
      goto LABEL_19;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if ((*(char *)(a1 + 3071) & 0x80000000) == 0)
        goto LABEL_21;
    }
    else
    {
LABEL_19:
      if ((*(char *)(a1 + 3071) & 0x80000000) == 0)
      {
LABEL_21:
        v25 = *(std::__shared_weak_count **)(a1 + 160);
        if (!v25)
          goto LABEL_314;
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          if (*(_BYTE *)(a1 + 2920))
            goto LABEL_26;
        }
        else
        {
LABEL_314:
          if (*(_BYTE *)(a1 + 2920))
          {
LABEL_26:
            v6 = v209;
            if (!*(_BYTE *)(a1 + 2608))
              goto LABEL_311;
            *(_BYTE *)(a1 + 2616) = 0;
            *(_BYTE *)(a1 + 2640) = 0;
            if (*(_BYTE *)(a1 + 2480))
            {
              *(_OWORD *)(a1 + 2616) = *(_OWORD *)v4;
              *(_QWORD *)(a1 + 2632) = *((_QWORD *)v4 + 2);
              *((_QWORD *)v4 + 1) = 0;
              *((_QWORD *)v4 + 2) = 0;
              *(_QWORD *)v4 = 0;
              *(_BYTE *)(a1 + 2640) = 1;
            }
            *(_BYTE *)(a1 + 2648) = 0;
            *(_BYTE *)(a1 + 2672) = 0;
            if (*(_BYTE *)(a1 + 2512))
            {
              *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2504);
              *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a1 + 2488);
              *(_QWORD *)(a1 + 2504) = 0;
              *(_QWORD *)(a1 + 2488) = 0;
              *(_QWORD *)(a1 + 2496) = 0;
              *(_BYTE *)(a1 + 2672) = 1;
            }
            *(_BYTE *)(a1 + 2680) = 0;
            *(_BYTE *)(a1 + 2704) = 0;
            if (*(_BYTE *)(a1 + 2544))
            {
              *(_QWORD *)(a1 + 2696) = *(_QWORD *)(a1 + 2536);
              *(_OWORD *)(a1 + 2680) = *(_OWORD *)(a1 + 2520);
              *(_QWORD *)(a1 + 2536) = 0;
              *(_QWORD *)(a1 + 2520) = 0;
              *(_QWORD *)(a1 + 2528) = 0;
              *(_BYTE *)(a1 + 2704) = 1;
            }
            *(_DWORD *)(a1 + 2712) = *(_DWORD *)(a1 + 2552);
            *(_QWORD *)(a1 + 2720) = a1 + 2720;
            *(_QWORD *)(a1 + 2728) = a1 + 2720;
            *(_QWORD *)(a1 + 2736) = 0;
            v28 = *(_QWORD *)(a1 + 2576);
            if (v28)
            {
              v29 = *(uint64_t **)(a1 + 2568);
              v30 = *(_QWORD *)(a1 + 2560);
              v31 = *v29;
              *(_QWORD *)(v31 + 8) = *(_QWORD *)(v30 + 8);
              **(_QWORD **)(v30 + 8) = v31;
              v32 = *(_QWORD *)(a1 + 2720);
              *(_QWORD *)(v32 + 8) = v29;
              *v29 = v32;
              *(_QWORD *)(a1 + 2720) = v30;
              *(_QWORD *)(v30 + 8) = a1 + 2720;
              *(_QWORD *)(a1 + 2736) = v28;
              *(_QWORD *)(a1 + 2576) = 0;
            }
            v33 = *(_QWORD *)(a1 + 3192);
            v34 = *(_QWORD *)(a1 + 3184);
            *(_QWORD *)(a1 + 2760) = *(_QWORD *)(a1 + 2600);
            *(_OWORD *)(a1 + 2744) = *(_OWORD *)(a1 + 2584);
            *(_QWORD *)(a1 + 2600) = 0;
            *(_QWORD *)(a1 + 2592) = 0;
            *(_QWORD *)(a1 + 2584) = 0;
            *(_QWORD *)(a1 + 3088) = v34;
            *(_QWORD *)(a1 + 3096) = v33;
            if (v33)
            {
              v35 = (unint64_t *)(v33 + 8);
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            v37 = *(_QWORD *)(a1 + 3208);
            *(_QWORD *)(a1 + 3072) = *(_QWORD *)(a1 + 3200);
            *(_QWORD *)(a1 + 3080) = v37;
            if (v37)
            {
              v38 = (unint64_t *)(v37 + 8);
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
            AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v215, (__int128 *)(a1 + 2616), (__int128 *)(a1 + 3088), (__int128 *)(a1 + 3072));
            v40 = *(std::__shared_weak_count **)(a1 + 3080);
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v43 = *(std::__shared_weak_count **)(a1 + 3096);
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            AMSCore::URL::~URL((AMSCore::URL *)(a1 + 2616));
            if (!*(_BYTE *)(a1 + 2920))
              goto LABEL_311;
            v46 = v213->__vftable;
            *v8 = v213->__vftable;
            v2 = (std::runtime_error *)v208;
            if (v46)
            {
              v47 = (_QWORD *)operator new();
              v48 = v213->__vftable;
              *v47 = &off_1E2523180;
              v47[1] = 0;
              v47[2] = 0;
              v47[3] = v48;
            }
            else
            {
              v47 = 0;
            }
            *(_QWORD *)(a1 + 3144) = v47;
            *(_QWORD *)(a1 + 2848) = 0;
            v50 = *(_OWORD *)(a1 + 3136);
            *v8 = 0;
            *(_QWORD *)(a1 + 3144) = 0;
            v51 = *(std::__shared_weak_count **)(a1 + 1376);
            *(_OWORD *)v215 = v50;
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            if (!*(_BYTE *)(a1 + 2840))
              goto LABEL_311;
            *(_QWORD *)(a1 + 2992) = *(_QWORD *)(a1 + 2768);
            v54 = a1 + 3000;
            v55 = *(_QWORD *)(a1 + 2776);
            *(_QWORD *)(a1 + 3000) = v55;
            v56 = *(_QWORD *)(a1 + 2784);
            *(_QWORD *)(a1 + 3008) = v56;
            if (v56)
            {
              *(_QWORD *)(v55 + 16) = v54;
              *v5 = a1 + 2776;
              *(_QWORD *)(a1 + 2776) = 0;
              *(_QWORD *)(a1 + 2784) = 0;
            }
            else
            {
              *v205 = v54;
            }
            *(_DWORD *)(a1 + 3016) = 8;
            AMSCore::Any::operator=(a1 + 1424, (uint64_t)v205);
            *(_DWORD *)(a1 + 1456) = 2;
            *(_DWORD *)(a1 + 1544) = 6;
            v57 = *(unsigned int *)(a1 + 3016);
            if ((_DWORD)v57 != -1)
              ((void (*)(std::runtime_error *, unint64_t *))off_1E253D240[v57])(&v217, v205);
            *(_DWORD *)(a1 + 3016) = -1;
            v58 = *(std::__shared_weak_count **)(a1 + 3144);
            if (v58)
            {
              v59 = (unint64_t *)&v58->__shared_owners_;
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 1744, (uint64_t)v215);
            AMSCore::EncodeHTTPRequestTask::perform((_OWORD *)v208, a1 + 1744);
            v61 = *(_OWORD *)(a1 + 152);
            *(_OWORD *)(a1 + 3232) = v61;
            *(_QWORD *)v208 = 0;
            *(_QWORD *)(v208 + 8) = 0;
            if (!atomic_load((unint64_t *)(v61 + 416)))
            {
              *v206 = 1;
              v63 = (unint64_t *)(*(_QWORD *)(a1 + 3232) + 416);
              do
                v64 = __ldaxr(v63);
              while (__stlxr(a1, v63));
              if (!v64)
                return;
            }
            goto LABEL_80;
          }
        }
        std::runtime_error::runtime_error(&v217, v213);
        v218 = *(_OWORD *)(a1 + 2864);
        v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v49 = *(_QWORD *)(a1 + 2888);
        v219 = *(unsigned int ***)(a1 + 2880);
        v220 = (unsigned int *)v49;
        v221 = *(_QWORD *)(a1 + 2896);
        if (v221)
        {
          *(_QWORD *)(v49 + 16) = &v220;
          *(_QWORD *)(a1 + 2880) = a1 + 2888;
          *(_QWORD *)(a1 + 2888) = 0;
          *(_QWORD *)(a1 + 2896) = 0;
        }
        else
        {
          v219 = &v220;
        }
        v222 = *((_OWORD *)v215 + 96);
        *((_OWORD *)v215 + 96) = 0u;
        LOBYTE(v223) = 1;
        std::runtime_error::runtime_error(&v245, &v217);
        v246 = v218;
        v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v247 = v219;
        v248 = v220;
        v249 = v221;
        if (v221)
        {
          *((_QWORD *)v220 + 2) = &v248;
          v219 = &v220;
          v220 = 0;
          v221 = 0;
        }
        else
        {
          v247 = &v248;
        }
        v250 = v222;
        v222 = 0uLL;
        std::runtime_error::runtime_error(&v251, &v245);
        v252 = v246;
        v251.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v177 = v248;
        v253 = v247;
        v254 = v248;
        v255 = v249;
        if (v249)
        {
          *((_QWORD *)v248 + 2) = &v254;
          v177 = 0;
          v247 = &v248;
          v248 = 0;
          v249 = 0;
        }
        else
        {
          v253 = &v254;
        }
        v256 = v250;
        v250 = 0uLL;
        v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v247, v177);
        MEMORY[0x18D7898AC](&v245);
        v5 = v207;
        v2 = (std::runtime_error *)v208;
        if (*(_BYTE *)(a1 + 104))
        {
          if (!*(_BYTE *)(a1 + 96))
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v251);
        v179 = v253;
        v178 = v254;
        *(_QWORD *)(a1 + 64) = v254;
        v180 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v252;
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = v179;
        v181 = v255;
        *(_QWORD *)(a1 + 72) = v255;
        if (v181)
        {
          *((_QWORD *)v178 + 2) = v180;
          v178 = 0;
          v253 = &v254;
          v254 = 0;
          v255 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v180;
        }
        v6 = v209;
        *(_OWORD *)(a1 + 80) = v256;
        v256 = 0uLL;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v251.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v253, v178);
        MEMORY[0x18D7898AC](&v251);
        if ((_BYTE)v223)
        {
          v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v182 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
          if (*((_QWORD *)&v222 + 1))
          {
            v183 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
            do
              v184 = __ldaxr(v183);
            while (__stlxr(v184 - 1, v183));
            if (!v184)
            {
              ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
              std::__shared_weak_count::__release_weak(v182);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v219, v220);
          MEMORY[0x18D7898AC](&v217);
        }
        v170 = *(_QWORD *)(a1 + 3208);
        v171 = *(_QWORD *)(a1 + 3192);
LABEL_295:
        v198 = *(_QWORD *)(a1 + 2848);
        if (*(_BYTE *)(a1 + 2920))
        {
          v213->__vftable = 0;
          if (v198)
            (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
          if (*(_BYTE *)(a1 + 2608))
          {
LABEL_299:
            AMSCore::URL::~URL(v4);
            if (*(_BYTE *)(a1 + 2840))
            {
LABEL_300:
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v5, *(unsigned int **)(a1 + 2776));
LABEL_304:
              *(_QWORD *)(a1 + 3264) = v171;
              *(_QWORD *)(a1 + 3256) = v170;
              *(_QWORD *)(a1 + 3248) = 0;
              *(_QWORD *)(a1 + 152) = v6;
              *(_QWORD *)a1 = 0;
              AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
              return;
            }
LABEL_303:
            (*(void (**)(_QWORD *))*v5)(v5);
            goto LABEL_304;
          }
        }
        else
        {
          (*(void (**)(std::runtime_error *))v198)(v213);
          if (*(_BYTE *)(a1 + 2608))
            goto LABEL_299;
        }
        (**(void (***)(AMSCore::URL *))v4)(v4);
        if (*(_BYTE *)(a1 + 2840))
          goto LABEL_300;
        goto LABEL_303;
      }
    }
    operator delete(*(void **)(a1 + 3048));
    goto LABEL_21;
  }
LABEL_80:
  v65 = *(_QWORD *)(a1 + 3232);
  if (!*(_BYTE *)(v65 + 408))
    goto LABEL_311;
  v66 = (const std::runtime_error *)(v65 + 8);
  v67 = *(_BYTE *)(v65 + 400);
  if (v67)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v214, (uint64_t)v66);
    v68 = (_QWORD *)(v65 + 384);
    *(_QWORD *)(a1 + 952) = *(_QWORD *)(v65 + 384);
    v69 = (_QWORD *)(a1 + 960);
    v70 = (_QWORD *)(v65 + 392);
  }
  else
  {
    std::runtime_error::runtime_error(v214, v66);
    *(_OWORD *)(a1 + 592) = *(_OWORD *)(v65 + 24);
    *(_QWORD *)(a1 + 576) = off_1E2521330;
    v71 = (_QWORD *)(v65 + 48);
    v72 = *(_QWORD *)(v65 + 48);
    *(_QWORD *)(a1 + 608) = *(_QWORD *)(v65 + 40);
    v73 = a1 + 616;
    *(_QWORD *)(a1 + 616) = v72;
    v74 = *(_QWORD *)(v65 + 56);
    *(_QWORD *)(a1 + 624) = v74;
    if (v74)
    {
      *(_QWORD *)(v72 + 16) = v73;
      *(_QWORD *)(v65 + 40) = v71;
      *v71 = 0;
      *(_QWORD *)(v65 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 608) = v73;
    }
    v75 = *(_QWORD *)(a1 + 3232);
    v76 = *(_QWORD *)(v75 + 64);
    v68 = (_QWORD *)(v75 + 64);
    *(_QWORD *)(a1 + 632) = v76;
    v69 = (_QWORD *)(a1 + 640);
    v70 = v68 + 1;
  }
  *v69 = *v70;
  *v68 = 0;
  v68[1] = 0;
  *(_BYTE *)(a1 + 968) = v67;
  v77 = *(_QWORD *)(a1 + 3240);
  if (v77)
  {
    v78 = (unint64_t *)(v77 + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      v80 = *(std::__shared_weak_count **)(a1 + 3240);
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v81 = *(std::__shared_weak_count **)(a1 + 160);
  if (v81)
  {
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 1744));
  if (!*(_BYTE *)(a1 + 968))
  {
    v210 = v6;
    v93 = (__int128 *)(a1 + 632);
    std::runtime_error::runtime_error(&v217, v214);
    v218 = *(_OWORD *)(a1 + 592);
    v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v94 = *(_QWORD *)(a1 + 616);
    v219 = *(unsigned int ***)(a1 + 608);
    v220 = (unsigned int *)v94;
    v221 = *(_QWORD *)(a1 + 624);
    if (v221)
    {
      *(_QWORD *)(v94 + 16) = &v220;
      *(_QWORD *)(a1 + 608) = a1 + 616;
      *(_QWORD *)(a1 + 616) = 0;
      *(_QWORD *)(a1 + 624) = 0;
    }
    else
    {
      v219 = &v220;
    }
    v222 = *v93;
    *(_QWORD *)v93 = 0;
    *(_QWORD *)(a1 + 640) = 0;
    LOBYTE(v223) = 1;
    std::runtime_error::runtime_error(&v251, &v217);
    v252 = v218;
    v251.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v253 = v219;
    v254 = v220;
    v255 = v221;
    if (v221)
    {
      *((_QWORD *)v220 + 2) = &v254;
      v219 = &v220;
      v220 = 0;
      v221 = 0;
    }
    else
    {
      v253 = &v254;
    }
    v256 = v222;
    v222 = 0uLL;
    std::runtime_error::runtime_error(&v245, &v251);
    v246 = v252;
    v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v162 = v254;
    v247 = v253;
    v248 = v254;
    v249 = v255;
    if (v255)
    {
      *((_QWORD *)v254 + 2) = &v248;
      v162 = 0;
      v253 = &v254;
      v254 = 0;
      v255 = 0;
    }
    else
    {
      v247 = &v248;
    }
    v250 = v256;
    v256 = 0uLL;
    v251.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v253, v162);
    MEMORY[0x18D7898AC](&v251);
    if (*(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a1 + 96))
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v245);
    v164 = v247;
    v163 = v248;
    *(_QWORD *)(a1 + 64) = v248;
    v165 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v246;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v164;
    v166 = v249;
    *(_QWORD *)(a1 + 72) = v249;
    if (v166)
    {
      *((_QWORD *)v163 + 2) = v165;
      v163 = 0;
      v247 = &v248;
      v248 = 0;
      v249 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v165;
    }
    v6 = v210;
    *(_OWORD *)(a1 + 80) = v250;
    v250 = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v247, v163);
    MEMORY[0x18D7898AC](&v245);
    if ((_BYTE)v223)
    {
      v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v167 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
      if (*((_QWORD *)&v222 + 1))
      {
        v168 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v219, v220);
      MEMORY[0x18D7898AC](&v217);
    }
    v170 = *(_QWORD *)(a1 + 3208);
    v171 = *(_QWORD *)(a1 + 3192);
    if (*(_BYTE *)(a1 + 968))
      goto LABEL_288;
    goto LABEL_222;
  }
  *(_OWORD *)(a1 + 3104) = *(_OWORD *)(a1 + 3184);
  *(_OWORD *)(a1 + 3120) = *(_OWORD *)(a1 + 3200);
  AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v212, (__int128 *)(a1 + 3104), (__int128 *)(a1 + 3120));
  v84 = *(std::__shared_weak_count **)(a1 + 3128);
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *(std::__shared_weak_count **)(a1 + 3112);
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (!*(_BYTE *)(a1 + 968))
    goto LABEL_311;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v214);
  *(_QWORD *)(a1 + 1352) = *(_QWORD *)(a1 + 952);
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a1 + 960);
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 2120) = *(_QWORD *)(a1 + 2288);
  v90 = a1 + 2128;
  v91 = *(_QWORD *)(a1 + 2296);
  *(_QWORD *)(a1 + 2128) = v91;
  v92 = *(_QWORD *)(a1 + 2304);
  *(_QWORD *)(a1 + 2136) = v92;
  if (v92)
  {
    *(_QWORD *)(v91 + 16) = v90;
    *(_QWORD *)v212 = a1 + 2296;
    *(_QWORD *)(a1 + 2296) = 0;
    *(_QWORD *)(a1 + 2304) = 0;
  }
  else
  {
    *(_QWORD *)v211 = v90;
  }
  v95 = *((_OWORD *)v215 + 60);
  *(_OWORD *)(a1 + 2144) = *((_OWORD *)v215 + 59);
  *(_OWORD *)(a1 + 2160) = v95;
  *((_OWORD *)v215 + 59) = 0u;
  *((_OWORD *)v215 + 60) = 0u;
  *(_BYTE *)(a1 + 2176) = 0;
  *(_BYTE *)(a1 + 2200) = 0;
  if (*(_BYTE *)(a1 + 2368))
  {
    *(_QWORD *)(a1 + 2192) = *(_QWORD *)(a1 + 2360);
    *(_OWORD *)(a1 + 2176) = *(_OWORD *)(a1 + 2344);
    *(_QWORD *)(a1 + 2360) = 0;
    *(_QWORD *)(a1 + 2344) = 0;
    *(_QWORD *)(a1 + 2352) = 0;
    *(_BYTE *)(a1 + 2200) = 1;
  }
  *(_BYTE *)(a1 + 2208) = 0;
  *(_DWORD *)(a1 + 2224) = -1;
  v96 = *(unsigned int *)(a1 + 2392);
  if ((_DWORD)v96 != -1)
  {
    ((void (*)(std::runtime_error *, unint64_t, unint64_t))off_1E253CA98[v96])(&v217, a1 + 2208, a1 + 2376);
    *(_DWORD *)(a1 + 2224) = v96;
  }
  *(_OWORD *)(a1 + 2232) = *(_OWORD *)(a1 + 2400);
  *(_DWORD *)(a1 + 2248) = *(_DWORD *)(a1 + 2416);
  v97 = *(_QWORD *)(a1 + 2448);
  if (v97)
  {
    if (v97 == a1 + 2424)
    {
      *(_QWORD *)(a1 + 2280) = a1 + 2256;
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97);
    }
    else
    {
      *(_QWORD *)(a1 + 2280) = v97;
      *(_QWORD *)(a1 + 2448) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2280) = 0;
  }
  AMSCore::ExecuteHTTPRequestTask::perform((std::runtime_error *)(a1 + 3168), (uint64_t)v3, (uint64_t)v211);
  v98 = *(_OWORD *)(a1 + 3168);
  *(_QWORD *)(a1 + 3168) = 0;
  *(_QWORD *)(a1 + 3176) = 0;
  *(_OWORD *)(a1 + 3152) = v98;
  if (atomic_load((unint64_t *)(v98 + 440)))
    goto LABEL_127;
  *v206 = 2;
  v100 = (unint64_t *)(*(_QWORD *)(a1 + 3152) + 440);
  do
    v101 = __ldaxr(v100);
  while (__stlxr(a1, v100));
  if (v101)
  {
LABEL_127:
    v102 = *(_QWORD *)(a1 + 3152);
    if (*(_BYTE *)(v102 + 432))
    {
      v103 = (const std::runtime_error *)(v102 + 8);
      v104 = *(_BYTE *)(v102 + 424);
      if (v104)
      {
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(v102 + 8);
        v103->__vftable = 0;
        *(_QWORD *)(v102 + 16) = 0;
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(v102 + 24);
        v105 = (_QWORD *)(v102 + 32);
        v106 = *(_QWORD *)(v102 + 32);
        *(_QWORD *)(a1 + 176) = v106;
        v107 = a1 + 176;
        v108 = *(_QWORD *)(v102 + 40);
        *(_QWORD *)(a1 + 184) = v108;
        if (v108)
        {
          *(_QWORD *)(v106 + 16) = v107;
          *(_QWORD *)(v102 + 24) = v105;
          *v105 = 0;
          *(_QWORD *)(v102 + 40) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 168) = v107;
        }
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(v102 + 48);
        *(_QWORD *)(v102 + 48) = 0;
        *(_QWORD *)(v102 + 56) = 0;
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v102 + 64);
        *(_QWORD *)(v102 + 64) = 0;
        *(_QWORD *)(v102 + 72) = 0;
        *(_BYTE *)(a1 + 224) = 0;
        *(_BYTE *)(a1 + 248) = 0;
        if (*(_BYTE *)(v102 + 104))
        {
          v113 = *(_OWORD *)(v102 + 80);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(v102 + 96);
          *(_OWORD *)(a1 + 224) = v113;
          *(_QWORD *)(v102 + 88) = 0;
          *(_QWORD *)(v102 + 96) = 0;
          *(_QWORD *)(v102 + 80) = 0;
          *(_BYTE *)(a1 + 248) = 1;
        }
        *(_BYTE *)(a1 + 256) = 0;
        *(_DWORD *)(a1 + 272) = -1;
        v114 = *(unsigned int *)(v102 + 128);
        if ((_DWORD)v114 != -1)
        {
          ((void (*)(std::runtime_error *, unint64_t, uint64_t))off_1E253CA98[v114])(&v217, a1 + 256, v102 + 112);
          *(_DWORD *)(a1 + 272) = v114;
        }
        v115 = *(_OWORD *)(v102 + 136);
        *(_DWORD *)(a1 + 296) = *(_DWORD *)(v102 + 152);
        *(_OWORD *)(a1 + 280) = v115;
        v116 = (_QWORD *)(v102 + 184);
        v117 = *(_QWORD *)(v102 + 184);
        if (v117)
        {
          if (v117 == v102 + 160)
          {
            *(_QWORD *)(a1 + 328) = a1 + 304;
            (*(void (**)(_QWORD))(*(_QWORD *)*v116 + 24))(*v116);
          }
          else
          {
            *(_QWORD *)(a1 + 328) = v117;
            *v116 = 0;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 328) = 0;
        }
        *(_OWORD *)(a1 + 336) = *(_OWORD *)(v102 + 192);
        *(_QWORD *)(v102 + 192) = 0;
        *(_QWORD *)(v102 + 200) = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v2, v103);
        *(_QWORD *)(a1 + 152) = MEMORY[0x1E0DE4F90] + 16;
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(v102 + 24);
        *(_QWORD *)(a1 + 152) = off_1E2521330;
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(v102 + 40);
        v109 = (_QWORD *)(v102 + 48);
        v110 = *(_QWORD *)(v102 + 48);
        *(_QWORD *)(a1 + 192) = v110;
        v111 = a1 + 192;
        v112 = *(_QWORD *)(v102 + 56);
        *(_QWORD *)(a1 + 200) = v112;
        if (v112)
        {
          *(_QWORD *)(v110 + 16) = v111;
          *(_QWORD *)(v102 + 40) = v109;
          *v109 = 0;
          *(_QWORD *)(v102 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 184) = v111;
        }
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v102 + 64);
        *(_QWORD *)(v102 + 64) = 0;
        *(_QWORD *)(v102 + 72) = 0;
        *(_BYTE *)(a1 + 224) = 0;
        *(_QWORD *)(a1 + 152) = &off_1E2521420;
        *(_BYTE *)(a1 + 248) = 0;
        if (*(_BYTE *)(v102 + 104))
        {
          v118 = *(_OWORD *)(v102 + 80);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(v102 + 96);
          *(_OWORD *)(a1 + 224) = v118;
          *(_QWORD *)(v102 + 88) = 0;
          *(_QWORD *)(v102 + 96) = 0;
          *(_QWORD *)(v102 + 80) = 0;
          *(_BYTE *)(a1 + 248) = 1;
        }
        v119 = *(_OWORD *)(v102 + 128);
        *(_OWORD *)(a1 + 256) = *(_OWORD *)(v102 + 112);
        *(_OWORD *)(a1 + 272) = v119;
        v120 = *(_OWORD *)(v102 + 144);
        v121 = *(_OWORD *)(v102 + 160);
        v122 = *(_OWORD *)(v102 + 176);
        *(_OWORD *)(a1 + 329) = *(_OWORD *)(v102 + 185);
        *(_OWORD *)(a1 + 304) = v121;
        *(_OWORD *)(a1 + 320) = v122;
        *(_OWORD *)(a1 + 288) = v120;
        *(_QWORD *)(a1 + 360) = 0;
        *(_QWORD *)(a1 + 368) = 0;
        *(_QWORD *)(a1 + 352) = 0;
        *(_OWORD *)(a1 + 352) = *(_OWORD *)(v102 + 208);
        *(_QWORD *)(a1 + 368) = *(_QWORD *)(v102 + 224);
        *(_QWORD *)(v102 + 216) = 0;
        *(_QWORD *)(v102 + 224) = 0;
        *(_QWORD *)(v102 + 208) = 0;
        v123 = *(_OWORD *)(v102 + 248);
        *(_OWORD *)(a1 + 376) = *(_OWORD *)(v102 + 232);
        *(_OWORD *)(a1 + 392) = v123;
        v124 = *(_OWORD *)(v102 + 264);
        v125 = *(_OWORD *)(v102 + 280);
        v126 = *(_OWORD *)(v102 + 312);
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(v102 + 296);
        *(_OWORD *)(a1 + 456) = v126;
        *(_OWORD *)(a1 + 408) = v124;
        *(_OWORD *)(a1 + 424) = v125;
        v127 = *(_OWORD *)(v102 + 328);
        v128 = *(_OWORD *)(v102 + 344);
        v129 = *(_OWORD *)(v102 + 360);
        *(_OWORD *)(a1 + 514) = *(_OWORD *)(v102 + 370);
        *(_OWORD *)(a1 + 488) = v128;
        *(_OWORD *)(a1 + 504) = v129;
        *(_OWORD *)(a1 + 472) = v127;
        *(_BYTE *)(a1 + 536) = 0;
        *(_BYTE *)(a1 + 560) = 0;
        if (*(_BYTE *)(v102 + 416))
        {
          v130 = *(_OWORD *)(v102 + 392);
          *(_QWORD *)(a1 + 552) = *(_QWORD *)(v102 + 408);
          *(_OWORD *)(a1 + 536) = v130;
          *(_QWORD *)(v102 + 400) = 0;
          *(_QWORD *)(v102 + 408) = 0;
          *(_QWORD *)(v102 + 392) = 0;
          *(_BYTE *)(a1 + 560) = 1;
        }
      }
      *(_BYTE *)(a1 + 568) = v104;
      v131 = *(std::__shared_weak_count **)(a1 + 3160);
      if (v131)
      {
        v132 = (unint64_t *)&v131->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      v134 = *(std::__shared_weak_count **)(a1 + 3176);
      if (v134)
      {
        v135 = (unint64_t *)&v134->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v211);
      v137 = *(std::__shared_weak_count **)(a1 + 1360);
      if (v137)
      {
        v138 = (unint64_t *)&v137->__shared_owners_;
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v3);
      if (!*(_BYTE *)(a1 + 568))
      {
        std::runtime_error::runtime_error(&v217, v2);
        v144 = (_QWORD *)(a1 + 192);
        v145 = *(_QWORD *)(a1 + 192);
        v218 = *(_OWORD *)(a1 + 168);
        v219 = *(unsigned int ***)(a1 + 184);
        v220 = (unsigned int *)v145;
        v221 = *(_QWORD *)(a1 + 200);
        if (v221)
        {
          *(_QWORD *)(v145 + 16) = &v220;
          *(_QWORD *)(a1 + 184) = v144;
          *v144 = 0;
          *(_QWORD *)(a1 + 200) = 0;
        }
        else
        {
          v219 = &v220;
        }
        v222 = *(_OWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        v217.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
        LOBYTE(v223) = 0;
        v225 = 0;
        if (*(_BYTE *)(a1 + 248))
        {
          v223 = *(_OWORD *)(a1 + 224);
          v224 = *(_QWORD *)(a1 + 240);
          *(_QWORD *)(a1 + 232) = 0;
          *(_QWORD *)(a1 + 240) = 0;
          *(_QWORD *)(a1 + 224) = 0;
          v225 = 1;
        }
        v151 = *(_OWORD *)(a1 + 304);
        v228 = *(_OWORD *)(a1 + 288);
        v229 = v151;
        v230[0] = *(_OWORD *)(a1 + 320);
        v152 = *(_OWORD *)(a1 + 272);
        v226 = *(_OWORD *)(a1 + 256);
        v227 = v152;
        *(_OWORD *)((char *)v230 + 9) = *(_OWORD *)(a1 + 329);
        v230[2] = *(_OWORD *)(a1 + 352);
        v231 = *(_QWORD *)(a1 + 368);
        *(_QWORD *)(a1 + 352) = 0;
        *(_QWORD *)(a1 + 360) = 0;
        *(_QWORD *)(a1 + 368) = 0;
        *(_OWORD *)((char *)v240 + 10) = *(_OWORD *)(a1 + 514);
        v153 = *(_OWORD *)(a1 + 488);
        v238 = *(_OWORD *)(a1 + 472);
        v239 = v153;
        v240[0] = *(_OWORD *)(a1 + 504);
        v154 = *(_OWORD *)(a1 + 424);
        v234 = *(_OWORD *)(a1 + 408);
        v235 = v154;
        v155 = *(_OWORD *)(a1 + 456);
        v236 = *(_OWORD *)(a1 + 440);
        v237 = v155;
        v156 = *(_OWORD *)(a1 + 392);
        v232 = *(_OWORD *)(a1 + 376);
        v233 = v156;
        LOBYTE(v241) = 0;
        v243 = 0;
        if (*(_BYTE *)(a1 + 560))
        {
          v242 = *(_QWORD *)(a1 + 552);
          v241 = *(_OWORD *)(a1 + 536);
          *(_QWORD *)(a1 + 552) = 0;
          *(_QWORD *)(a1 + 536) = 0;
          *(_QWORD *)(a1 + 544) = 0;
          v243 = 1;
        }
        v244 = 1;
        std::runtime_error::runtime_error(&v251, &v217);
        v252 = v218;
        v251.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v253 = v219;
        v254 = v220;
        v255 = v221;
        if (v221)
        {
          *((_QWORD *)v220 + 2) = &v254;
          v219 = &v220;
          v220 = 0;
          v221 = 0;
        }
        else
        {
          v253 = &v254;
        }
        v256 = v222;
        v222 = 0uLL;
        std::runtime_error::runtime_error(&v245, &v251);
        v246 = v252;
        v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v157 = v254;
        v247 = v253;
        v248 = v254;
        v249 = v255;
        if (v255)
        {
          *((_QWORD *)v254 + 2) = &v248;
          v157 = 0;
          v253 = &v254;
          v254 = 0;
          v255 = 0;
        }
        else
        {
          v247 = &v248;
        }
        v250 = v256;
        v256 = 0uLL;
        v251.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v253, v157);
        MEMORY[0x18D7898AC](&v251);
        if (*(_BYTE *)(a1 + 104))
        {
          if (!*(_BYTE *)(a1 + 96))
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v245);
        v159 = v247;
        v158 = v248;
        *(_QWORD *)(a1 + 64) = v248;
        v160 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v246;
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = v159;
        v161 = v249;
        *(_QWORD *)(a1 + 72) = v249;
        if (v161)
        {
          *((_QWORD *)v158 + 2) = v160;
          v158 = 0;
          v247 = &v248;
          v248 = 0;
          v249 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v160;
        }
        *(_OWORD *)(a1 + 80) = v250;
        v250 = 0uLL;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v247, v158);
        MEMORY[0x18D7898AC](&v245);
        if (v244)
          AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v217);
        if (*(_BYTE *)(a1 + 568))
          goto LABEL_274;
        goto LABEL_286;
      }
      v140 = *(unsigned __int16 **)(a1 + 336);
      v141 = v140[76];
      if ((v141 - 200) >= 0x64)
      {
        BYTE7(v252) = 8;
        strcpy((char *)&v251, "httpCode");
        *((_QWORD *)&v252 + 1) = v141;
        LODWORD(v255) = 3;
        v245.__imp_.__imp_ = 0;
        *(_QWORD *)&v246 = 0;
        v245.__vftable = (std::runtime_error_vtbl *)&v245.__imp_;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v245, (uint64_t *)&v245.__imp_, (const void **)&v251.__vftable, (__int128 *)&v251);
        AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,std::map<std::string,AMSCore::Any>,char const(&)[16]>((uint64_t)&v217, 0x12Du, &v245);
        if (*(_BYTE *)(a1 + 104))
        {
          if (!*(_BYTE *)(a1 + 96))
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v217);
        v146 = v218;
        v148 = v219;
        v147 = v220;
        *(_QWORD *)(a1 + 64) = v220;
        v149 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v146;
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = v148;
        v150 = v221;
        *(_QWORD *)(a1 + 72) = v221;
        if (v150)
        {
          *((_QWORD *)v147 + 2) = v149;
          v219 = &v220;
          v220 = 0;
          v221 = 0;
          v147 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v149;
        }
        *(_OWORD *)(a1 + 80) = v222;
        v222 = 0uLL;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v219, v147);
        MEMORY[0x18D7898AC](&v217);
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v245, (unsigned int *)v245.__imp_.__imp_);
        if ((_DWORD)v255 != -1)
          ((void (*)(char *, char *))off_1E253D240[v255])(&v216, (char *)&v252 + 8);
        LODWORD(v255) = -1;
        if (SBYTE7(v252) < 0)
        {
          operator delete(v251.__vftable);
          if (*(_BYTE *)(a1 + 568))
            goto LABEL_274;
          goto LABEL_286;
        }
      }
      else
      {
        AMSCore::HTTPResponse::getDecodedObject((AMSCore::HTTPResponse *)v140);
        if (!*(_BYTE *)(v142 + 72))
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[32],AMSCore::Error const&>((uint64_t)&v217, 0x137u, v142);
          if (*(_BYTE *)(a1 + 104))
          {
            if (!*(_BYTE *)(a1 + 96))
              (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
            *(_BYTE *)(a1 + 104) = 0;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v217);
          v172 = v218;
          v174 = v219;
          v173 = v220;
          *(_QWORD *)(a1 + 64) = v220;
          v175 = a1 + 64;
          *(_OWORD *)(a1 + 40) = v172;
          *(_QWORD *)(a1 + 24) = off_1E2521330;
          *(_QWORD *)(a1 + 56) = v174;
          v176 = v221;
          *(_QWORD *)(a1 + 72) = v221;
          if (v176)
          {
            *((_QWORD *)v173 + 2) = v175;
            v219 = &v220;
            v220 = 0;
            v221 = 0;
            v173 = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 56) = v175;
          }
          *(_OWORD *)(a1 + 80) = v222;
          v222 = 0uLL;
          *(_BYTE *)(a1 + 96) = 0;
          *(_BYTE *)(a1 + 104) = 1;
          v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v219, v173);
          MEMORY[0x18D7898AC](&v217);
          if (*(_BYTE *)(a1 + 568))
            goto LABEL_274;
          goto LABEL_286;
        }
        AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)&v251, (uint64_t *)v142, "syncState", 9uLL);
        if (v257)
        {
          if (SHIBYTE(v251.what) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v217, (const std::string::value_type *)v251.~runtime_error, (std::string::size_type)v251.~runtime_error_0);
          }
          else
          {
            v143 = *(std::runtime_error *)&v251.~runtime_error;
            *(_QWORD *)&v218 = v251.what;
            v217 = v143;
          }
        }
        else
        {
          BYTE7(v218) = 4;
          strcpy((char *)&v217, "None");
        }
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v245);
        AMSCore::Logger::log<char [32],std::string>((uint64_t)v245.__vftable, 2, (uint64_t)"fairplay", 8, "Sync with server: syncState == ", (uint64_t)&v217);
        imp = (std::__shared_weak_count *)v245.__imp_.__imp_;
        if (v245.__imp_.__imp_)
        {
          v186 = (unint64_t *)(v245.__imp_.__imp_ + 8);
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 - 1, v186));
          if (!v187)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
        if (SBYTE7(v218) < 0)
          operator delete(v217.__vftable);
        LOBYTE(v188) = 1;
        LOBYTE(v223) = 1;
        if (*(_BYTE *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96)
            || ((**(void (***)(uint64_t))(a1 + 24))(a1 + 24),
                v188 = v223,
                *(_BYTE *)(a1 + 104) = 0,
                v188))
          {
            *(_BYTE *)(a1 + 96) = v188;
            *(_BYTE *)(a1 + 104) = 1;
          }
          else
          {
            std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v217);
            v199 = v218;
            v201 = v219;
            v200 = v220;
            *(_QWORD *)(a1 + 64) = v220;
            v202 = a1 + 64;
            *(_OWORD *)(a1 + 40) = v199;
            *(_QWORD *)(a1 + 24) = off_1E2521330;
            *(_QWORD *)(a1 + 56) = v201;
            v203 = v221;
            *(_QWORD *)(a1 + 72) = v221;
            if (v203)
            {
              *((_QWORD *)v200 + 2) = v202;
              v219 = &v220;
              v220 = 0;
              v221 = 0;
            }
            else
            {
              *(_QWORD *)(a1 + 56) = v202;
            }
            *(_OWORD *)(a1 + 80) = v222;
            v222 = 0uLL;
            v204 = v223;
            *(_BYTE *)(a1 + 96) = 0;
            *(_BYTE *)(a1 + 104) = 1;
            if (!v204)
              ((void (*)(std::runtime_error *))v217.~runtime_error)(&v217);
          }
        }
        else
        {
          *(_BYTE *)(a1 + 96) = 1;
          *(_BYTE *)(a1 + 104) = 1;
        }
        if (!v257)
          ((void (*)(std::runtime_error *))v251.~runtime_error)(&v251);
      }
      if (*(_BYTE *)(a1 + 568))
      {
LABEL_274:
        v189 = *(std::__shared_weak_count **)(a1 + 344);
        if (v189)
        {
          v190 = (unint64_t *)&v189->__shared_owners_;
          do
            v191 = __ldaxr(v190);
          while (__stlxr(v191 - 1, v190));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
            std::__shared_weak_count::__release_weak(v189);
          }
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 168));
        v192 = *(std::__shared_weak_count **)(a1 + 160);
        if (v192)
        {
          v193 = (unint64_t *)&v192->__shared_owners_;
          do
            v194 = __ldaxr(v193);
          while (__stlxr(v194 - 1, v193));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
            std::__shared_weak_count::__release_weak(v192);
          }
        }
LABEL_287:
        AMSCore::ExecuteHTTPRequestTask::Options::~Options(v212);
        v170 = 0;
        v171 = 0;
        if (*(_BYTE *)(a1 + 968))
        {
LABEL_288:
          v195 = *(std::__shared_weak_count **)(a1 + 960);
          if (v195)
          {
            v196 = (unint64_t *)&v195->__shared_owners_;
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v214->__vftable);
          goto LABEL_294;
        }
LABEL_222:
        ((void (*)(std::runtime_error *))v214->~runtime_error)(v214);
LABEL_294:
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v215);
        goto LABEL_295;
      }
LABEL_286:
      ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
      goto LABEL_287;
    }
LABEL_311:
    __break(1u);
  }
}

void sub_18CC56C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, AMSCore::ExecuteHTTPRequestTask::Options *a15, AMSCore::ExecuteHTTPRequestTask::Options *a16, _QWORD *a17, AMSCore::EncodeHTTPRequestTask::Options *a18, void **a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  AMSCore::URL *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  if (a2)
  {
    if (!*(_BYTE *)(v30 - 112))
      (**(void (***)(uint64_t))(v30 - 184))(v30 - 184);
    std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](v28);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(a16);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](a18);
    AMSCore::EncodeHTTPRequestTask::Options::~Options(a19);
    v32 = *(_QWORD *)(v26 + 2848);
    if (*(_BYTE *)(v26 + 2920))
    {
      *a17 = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    }
    else
    {
      (*(void (**)(_QWORD *))v32)(a17);
    }
    if (*(_BYTE *)(v26 + 2608))
      AMSCore::URL::~URL(v27);
    else
      (**(void (***)(AMSCore::URL *))v27)(v27);
    std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](v29);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

void sub_18CC56E48()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC56B78);
}

void sub_18CC56E54(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18CC56E5CLL);
  JUMPOUT(0x18CC56D68);
}

void AMSCore::SyncMachineTask::internal::performImpl(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  AMSCore::URL *v35;
  void (***v36)(_QWORD);
  char *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;

  if (*(_QWORD *)__p)
  {
    if (__p[3272])
    {
      if (__p[3272] == 1)
      {
        v2 = *((_QWORD *)__p + 405);
        if (v2)
        {
          v3 = (unint64_t *)(v2 + 8);
          do
            v4 = __ldaxr(v3);
          while (__stlxr(v4 - 1, v3));
          if (!v4)
          {
            v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 405);
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 218);
        v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 401);
        v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 399);
      }
      else
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)__p + 395);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v25 = (std::__shared_weak_count *)*((_QWORD *)__p + 397);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2120));
        v28 = (std::__shared_weak_count *)*((_QWORD *)__p + 170);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 122);
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2288));
        if (__p[968])
        {
          v31 = (std::__shared_weak_count *)*((_QWORD *)__p + 120);
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 72);
        }
        else
        {
          (**((void (***)(char *))__p + 72))(__p + 576);
        }
        v9 = 0;
        v10 = 0;
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 171);
      v34 = *((_QWORD *)__p + 356);
      if (__p[2920])
      {
        *((_QWORD *)__p + 356) = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
      else
      {
        (*(void (**)(char *))v34)(__p + 2848);
      }
    }
    else
    {
      v12 = *((_QWORD *)__p + 403);
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 403);
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)__p + 73);
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (__p[3071] < 0)
        operator delete(*((void **)__p + 381));
      v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 401);
      v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 399);
    }
    v35 = (AMSCore::URL *)(__p + 2456);
    if (__p[2608])
      AMSCore::URL::~URL(v35);
    else
      (**(void (***)(AMSCore::URL *))v35)(v35);
    v36 = (void (***)(_QWORD))(__p + 2768);
    if (__p[2840])
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v36, *((unsigned int **)__p + 347));
    else
      (**v36)(v36);
    v11 = 0;
  }
  else
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 408);
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 407);
    v11 = *((_QWORD *)__p + 406);
  }
  v37 = (char *)*((_QWORD *)__p + 18);
  if (v37 == __p + 120)
  {
    v38 = 4;
    v37 = __p + 120;
    goto LABEL_73;
  }
  if (v37)
  {
    v38 = 5;
LABEL_73:
    (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  do
  {
    v39 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v40)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v9)
  {
    v41 = (unint64_t *)&v9->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v10)
  {
    v43 = (unint64_t *)&v10->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((__p[2991] & 0x80000000) == 0)
        goto LABEL_93;
      goto LABEL_92;
    }
  }
  if (__p[2991] < 0)
LABEL_92:
    operator delete(*((void **)__p + 371));
LABEL_93:
  if (__p[2952] && __p[2951] < 0)
    operator delete(*((void **)__p + 366));
  if (__p[3047] < 0)
    operator delete(*((void **)__p + 378));
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [38]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"running Anisette Sync Machine task...", 37);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 2;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "fairplay", 8, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CC57548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,std::map<std::string,AMSCore::Any>,char const(&)[16]>(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int **v17;
  unsigned int *v18;
  uint64_t v19;
  std::system_error v20;
  unsigned int **v21;
  unsigned int *v22;
  uint64_t v23;
  __int128 v24;
  std::string __what_arg;
  uint64_t v26;
  _QWORD v27[8];
  __int128 __p;
  __int128 v29;
  int v30;
  uint64_t v31[19];
  std::error_code v32;

  v5 = a3 + 1;
  v6 = a3[1];
  v17 = (unsigned int **)*a3;
  v18 = (unsigned int *)v6;
  v19 = a3[2];
  if (v19)
  {
    *(_QWORD *)(v6 + 16) = &v18;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v17 = &v18;
  }
  v7 = MEMORY[0x1E0DE4FE0];
  v8 = MEMORY[0x1E0DE4FE0] + 64;
  v9 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31[0] = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v10;
  *(_QWORD *)((char *)&v27[-1] + *(_QWORD *)(v10 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v12, v27);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v26 = v7 + 24;
  v31[0] = v8;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v29 = 0u;
  v30 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Request failed!", 15);
  std::stringbuf::str[abi:fe180100]((uint64_t)v27, &__what_arg);
  v26 = *v9;
  *(_QWORD *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24)) = v9[3];
  v27[0] = v13 + 16;
  if (SBYTE7(v29) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v31);
  *(_QWORD *)&v32.__val_ = a2;
  v32.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v20, v32, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v20.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v21 = v17;
  v22 = v18;
  v23 = v19;
  if (v19)
  {
    *((_QWORD *)v18 + 2) = &v22;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v21 = &v22;
  }
  v24 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v20);
  *(std::error_code *)(a1 + 16) = v20.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v14 = v22;
  *(_QWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v14;
  v15 = a1 + 40;
  v16 = v23;
  *(_QWORD *)(a1 + 48) = v23;
  if (v16)
  {
    *((_QWORD *)v14 + 2) = v15;
    v14 = 0;
    v21 = &v22;
    v22 = 0;
    v23 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v15;
  }
  *(_OWORD *)(a1 + 56) = v24;
  v24 = 0uLL;
  v20.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v14);
  MEMORY[0x18D7898AC](&v20);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v18);
}

void sub_18CC5780C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_18CC57834(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[32],AMSCore::Error const&>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::system_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::system_error_vtbl *v9;
  std::system_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v17;
  std::system_error v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *__p[2];
  __int128 v24;
  int v25;
  uint64_t v26[19];
  std::error_code v27;

  v6 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = MEMORY[0x1E0DE4F60];
  v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v26[0] = MEMORY[0x1E0DE4FE0] + 64;
  v18.__vftable = v9;
  *(std::system_error_vtbl **)((char *)&v18.__vftable + (unint64_t)v9[-1].~system_error) = v10;
  v11 = (std::ios_base *)((char *)&v18 + (unint64_t)v18.__vftable[-1].~system_error);
  std::ios_base::init(v11, &v18.__imp_);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v18.__vftable = v6 + 1;
  v26[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v18.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v24 = 0u;
  v25 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Server response was unexpected!", 31);
  AMSCore::operator<<(&v18, a3);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v18.__imp_, &v17);
  v18.__vftable = *(std::system_error_vtbl **)v8;
  *(std::system_error_vtbl **)((char *)&v18.__vftable + (unint64_t)v18.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v8 + 24);
  v18.__imp_.__imp_ = (const char *)(v12 + 16);
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v26);
  *(_QWORD *)&v27.__val_ = a2;
  v27.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v18, v27, &v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v20 = 0;
  v21 = 0;
  v18.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v19 = &v20;
  v22 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v18);
  *(std::error_code *)(a1 + 16) = v18.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v13 = v20;
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v13;
  v14 = a1 + 40;
  v15 = v21;
  *(_QWORD *)(a1 + 48) = v21;
  if (v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
    v13 = 0;
    v19 = &v20;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v14;
  }
  *(_OWORD *)(a1 + 56) = v22;
  v22 = 0uLL;
  v18.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, (unsigned int *)v13);
  return MEMORY[0x18D7898AC](&v18);
}

void sub_18CC57A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC57A90(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1, *(unsigned int **)(a1 + 8));
  else
    (**(void (***)(uint64_t))a1)(a1);
  return a1;
}

uint64_t AMSCore::Logger::log<char [32],std::string>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  void *__p[2];
  __int128 v30;
  int v31;
  uint64_t v32[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v11 = result;
    v12 = MEMORY[0x1E0DE4FE0];
    v13 = MEMORY[0x1E0DE4FE0] + 64;
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v32[0] = MEMORY[0x1E0DE4FE0] + 64;
    v27 = v14;
    *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v14 - 24)) = v15;
    v16 = (std::ios_base *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24));
    std::ios_base::init(v16, v28);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    v27 = v12 + 24;
    v32[0] = v13;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8];
    v28[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    v31 = 16;
    v18 = *(_QWORD *)(v27 - 24);
    if ((v19 & 1) == 0
    {
    }
    v20 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, (uint64_t)a5, v20);
    v21 = *(char *)(a6 + 23);
    if (v21 >= 0)
      v22 = a6;
    else
      v22 = *(_QWORD *)a6;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a6 + 23);
    else
      v23 = *(_QWORD *)(a6 + 8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, v22, v23);
    v24 = v28[5];
    v25 = (char *)&v28[-1] + *(_QWORD *)(v27 - 24);
    if ((v25[32] & 5) != 0)
    {
      v26 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v25 + 5) + 32))(&rep, *((_QWORD *)v25 + 5), 0, 1, 16);
      v26 = v37;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v34 = a2;
    v35 = v24;
    v36 = v26;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), a3, a4, &rep);
    v27 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v28[0] = v17 + 16;
    if (SBYTE7(v30) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v32);
  }
  return result;
}

void sub_18CC57D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_BYTE *AMSCore::SyncMachineTask::perform(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _BYTE *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int **v27;
  _BYTE *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error v33;
  __int128 v34;
  unsigned int **v35;
  unsigned int *v36;
  uint64_t v37;
  __int128 v38;
  std::runtime_error v39;
  __int128 v40;
  unsigned int **v41;
  unsigned int *v42;
  uint64_t v43;
  __int128 v44;
  char v45;
  std::runtime_error v46;
  __int128 v47;
  unsigned int **v48;
  unsigned int *v49;
  uint64_t v50;
  __int128 v51;

  v1 = *((_QWORD *)result + 54);
  if (!*(_BYTE *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = result + 152;
  v4 = *(_BYTE *)(v1 + 80);
  if (!v4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 152), (const std::runtime_error *)(v1 + 8));
    *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
    v5 = (_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)v2 + 24) = v6;
    v7 = v2 + 192;
    *((_QWORD *)v2 + 19) = off_1E2521330;
    *((_QWORD *)v2 + 23) = *(_QWORD *)(v1 + 40);
    v8 = *(_QWORD *)(v1 + 56);
    *((_QWORD *)v2 + 25) = v8;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v1 + 40) = v5;
      *v5 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v2 + 23) = v7;
    }
    v9 = *((_QWORD *)v2 + 54);
    *((_OWORD *)v2 + 13) = *(_OWORD *)(v9 + 64);
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = 0;
  }
  v2[224] = v4;
  v10 = *((_QWORD *)v2 + 55);
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)v2 + 55);
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 45);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *((_QWORD *)v2 + 52);
  *((_QWORD *)v2 + 52) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)v2 + 41);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)v2 + 43);
  if (!v21)
    goto LABEL_28;
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_28:
    if (((char)v2[295] & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if ((char)v2[295] < 0)
LABEL_29:
    operator delete(*((void **)v2 + 34));
LABEL_30:
  if (v2[256] && (char)v2[255] < 0)
    operator delete(*((void **)v2 + 29));
  v24 = v2 + 16;
  if ((char)v2[319] < 0)
    operator delete(*((void **)v2 + 37));
  AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v39, (uint64_t)v3, 652, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (v45)
  {
    std::runtime_error::runtime_error(&v33, &v39);
    v34 = v40;
    v33.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v35 = v41;
    v36 = v42;
    v37 = v43;
    if (v43)
    {
      *((_QWORD *)v42 + 2) = &v36;
      v41 = &v42;
      v42 = 0;
      v43 = 0;
    }
    else
    {
      v35 = &v36;
    }
    v38 = v44;
    v44 = 0uLL;
    std::runtime_error::runtime_error(&v46, &v33);
    v47 = v34;
    v25 = v36;
    v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v48 = v35;
    v49 = v36;
    v50 = v37;
    if (v37)
    {
      *((_QWORD *)v36 + 2) = &v49;
      v25 = 0;
      v35 = &v36;
      v36 = 0;
      v37 = 0;
    }
    else
    {
      v48 = &v49;
    }
    v51 = v38;
    v38 = 0uLL;
    v33.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v35, v25);
    MEMORY[0x18D7898AC](&v33);
    if (v2[104])
    {
      if (!v2[96])
        (**((void (***)(uint64_t))v2 + 3))((uint64_t)(v2 + 24));
      v2[104] = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), &v46);
    v27 = v48;
    v26 = v49;
    *((_QWORD *)v2 + 8) = v49;
    v28 = v2 + 64;
    *(_OWORD *)(v2 + 40) = v47;
    *((_QWORD *)v2 + 3) = off_1E2521330;
    *((_QWORD *)v2 + 7) = v27;
    v29 = v50;
    *((_QWORD *)v2 + 9) = v50;
    if (v29)
    {
      *((_QWORD *)v26 + 2) = v28;
      v26 = 0;
      v48 = &v49;
      v49 = 0;
      v50 = 0;
    }
    else
    {
      *((_QWORD *)v2 + 7) = v28;
    }
    v24 = v2 + 16;
    *((_OWORD *)v2 + 5) = v51;
    v51 = 0uLL;
    v2[96] = 0;
    v2[104] = 1;
    v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v48, v26);
    MEMORY[0x18D7898AC](&v46);
    if (v45)
    {
      v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v41, v42);
      MEMORY[0x18D7898AC](&v39);
    }
  }
  else
  {
    if (v2[104] && !v2[96])
      (**((void (***)(uint64_t))v2 + 3))((uint64_t)(v2 + 24));
    v2[96] = 1;
    v2[104] = 1;
  }
  if (!v2[224])
    (**(void (***)(_BYTE *))v3)(v3);
  *((_QWORD *)v2 + 19) = v24;
  *(_QWORD *)v2 = 0;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CC58268(void *a1)
{
  uint64_t v1;
  void (***v2)(_QWORD);

  if (!*(_BYTE *)(v1 + 224))
    (**v2)(v2);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC58294()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC58234);
}

void AMSCore::SyncMachineTask::perform(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;

  if (!*(_QWORD *)__p)
    goto LABEL_30;
  v2 = *((_QWORD *)__p + 55);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 55);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 45);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *((_QWORD *)__p + 52);
  *((_QWORD *)__p + 52) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 41);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 43);
  if (!v13)
    goto LABEL_23;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_23:
    if ((__p[295] & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (__p[295] < 0)
LABEL_24:
    operator delete(*((void **)__p + 34));
LABEL_25:
  if (__p[256] && __p[255] < 0)
    operator delete(*((void **)__p + 29));
  if (__p[319] < 0)
    operator delete(*((void **)__p + 37));
LABEL_30:
  v16 = (char *)*((_QWORD *)__p + 18);
  if (v16 == __p + 120)
  {
    v17 = 4;
    v16 = __p + 120;
    goto LABEL_34;
  }
  if (v16)
  {
    v17 = 5;
LABEL_34:
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  v18 = __p[415];
  v19 = __p[399];
  do
  {
    v20 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v21)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v19 && v18 < 0)
    operator delete(*((void **)__p + 53));
  operator delete(__p);
}

void AMSCore::SyncMachineTask::perform(AMSCore::DataBuffer,AMSCore::AccountIdentity,AMSCore::IAnisetteProvider::AnisetteType,std::shared_ptr<AMSCore::IBag>,std::shared_ptr<AMSCore::IBundleInfo const>)::ADIInterface::~ADIInterface()
{
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::SyncMachineTask::perform(AMSCore::DataBuffer,AMSCore::AccountIdentity,AMSCore::IAnisetteProvider::AnisetteType,std::shared_ptr<AMSCore::IBag>,std::shared_ptr<AMSCore::IBundleInfo const>)::ADIInterface::Synchronize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  tn46gtiuhw(a2, a3, a4, a5, a6, a7, a8);
}

void AMSCore::SyncMachineTask::perform(AMSCore::DataBuffer,AMSCore::AccountIdentity,AMSCore::IAnisetteProvider::AnisetteType,std::shared_ptr<AMSCore::IBag>,std::shared_ptr<AMSCore::IBundleInfo const>)::ADIInterface::StorageDispose(uint64_t a1, uint64_t a2)
{
  jk24uiwqrg(a2);
}

void AMSCore::IAnisetteProvider::finishProvisioning(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  size_t v13;
  int v14;
  int v15;
  const void *v16;
  unint64_t v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  const void *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  const void *v30;
  unint64_t v31;
  size_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  const void *v37;
  unint64_t v38;
  size_t v39;
  int v40;
  int v41;
  const void *v42;
  unint64_t v43;
  size_t v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  std::__shared_weak_count *imp;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  void *v68;
  const char *v69;
  void *v70;
  const char *v71;
  std::runtime_error v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  std::string v79;
  std::runtime_error v80;
  __int128 v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  char v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::runtime_error v89;
  __int128 v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;

  v6 = (uint64_t *)(a3 + 8);
  v7 = *(uint64_t **)(a3 + 8);
  if (!v7)
  {
    v20 = &AMSCore::Any::Null(void)::null;
    v21 = &AMSCore::Any::Null(void)::null;
    goto LABEL_65;
  }
  v8 = (uint64_t *)(a3 + 8);
  v9 = *(uint64_t **)(a3 + 8);
  do
  {
    while (1)
    {
      v10 = *((char *)v9 + 55);
      v11 = v10 >= 0 ? v9 + 4 : (uint64_t *)v9[4];
      v12 = v10 >= 0 ? *((unsigned __int8 *)v9 + 55) : v9[5];
      v13 = v12 >= 0xB ? 11 : v12;
      v14 = memcmp("settingInfo", v11, v13);
      if (v14)
        break;
      if (v12 >= 0xB)
        goto LABEL_17;
LABEL_3:
      v9 = (uint64_t *)v9[1];
      if (!v9)
        goto LABEL_18;
    }
    if ((v14 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v8 = v9;
    v9 = (uint64_t *)*v9;
  }
  while (v9);
LABEL_18:
  if (v8 == v6)
    goto LABEL_33;
  v15 = *((char *)v8 + 55);
  if (v15 >= 0)
    v16 = v8 + 4;
  else
    v16 = (const void *)v8[4];
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)v8 + 55);
  else
    v17 = v8[5];
  if (v17 >= 0xB)
    v18 = 11;
  else
    v18 = v17;
  v19 = memcmp("settingInfo", v16, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0)
      goto LABEL_30;
LABEL_33:
    v20 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v17 > 0xB)
      goto LABEL_33;
LABEL_30:
    v20 = v8 + 7;
  }
  v22 = v6;
  v23 = v7;
  while (2)
  {
    while (2)
    {
      v24 = *((char *)v23 + 55);
      if (v24 >= 0)
        v25 = v23 + 4;
      else
        v25 = (const void *)v23[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v23 + 55);
      else
        v26 = v23[5];
      if (v26 >= 0xC)
        v27 = 12;
      else
        v27 = v26;
      v28 = memcmp("transportKey", v25, v27);
      if (v28)
      {
        if (v28 < 0)
          break;
        goto LABEL_35;
      }
      if (v26 < 0xC)
      {
LABEL_35:
        v23 = (uint64_t *)v23[1];
        if (!v23)
          goto LABEL_50;
        continue;
      }
      break;
    }
    v22 = v23;
    v23 = (uint64_t *)*v23;
    if (v23)
      continue;
    break;
  }
LABEL_50:
  if (v22 == v6)
    goto LABEL_64;
  v29 = *((char *)v22 + 55);
  if (v29 >= 0)
    v30 = v22 + 4;
  else
    v30 = (const void *)v22[4];
  if (v29 >= 0)
    v31 = *((unsigned __int8 *)v22 + 55);
  else
    v31 = v22[5];
  if (v31 >= 0xC)
    v32 = 12;
  else
    v32 = v31;
  v33 = memcmp("transportKey", v30, v32);
  if (v33)
  {
    if ((v33 & 0x80000000) == 0)
      goto LABEL_62;
LABEL_64:
    v21 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v31 > 0xC)
      goto LABEL_64;
LABEL_62:
    v21 = v22 + 7;
  }
LABEL_65:
  if (*((_DWORD *)v20 + 6) != 5 || *((_DWORD *)v21 + 6) != 5)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[58]>((uint64_t)&v80, 3u, "The response was missing settingInfo and/or transportKey.");
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v80);
    *(_OWORD *)(a4 + 16) = v81;
    *(_QWORD *)a4 = off_1E2521330;
    v47 = v83;
    *(_QWORD *)(a4 + 32) = v82;
    *(_QWORD *)(a4 + 40) = v47;
    v48 = a4 + 40;
    v49 = v84;
    *(_QWORD *)(a4 + 48) = v84;
    if (v49)
    {
      *(_QWORD *)(v47 + 16) = v48;
      v82 = &v83;
      v83 = 0;
      v84 = 0;
      v47 = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v48;
    }
    *(_OWORD *)(a4 + 56) = v85;
    v85 = 0uLL;
    *(_BYTE *)(a4 + 72) = 0;
    v80.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v82, (unsigned int *)v47);
    MEMORY[0x18D7898AC](&v80);
    return;
  }
  if (!v7)
  {
    v46 = &AMSCore::Any::Null(void)::null;
    goto LABEL_106;
  }
  v34 = a2;
  v35 = v6;
  while (2)
  {
    while (2)
    {
      v36 = *((char *)v7 + 55);
      if (v36 >= 0)
        v37 = v7 + 4;
      else
        v37 = (const void *)v7[4];
      if (v36 >= 0)
        v38 = *((unsigned __int8 *)v7 + 55);
      else
        v38 = v7[5];
      if (v38 >= 6)
        v39 = 6;
      else
        v39 = v38;
      v40 = memcmp("keybag", v37, v39);
      if (v40)
      {
        if (v40 < 0)
          break;
        goto LABEL_69;
      }
      if (v38 < 6)
      {
LABEL_69:
        v7 = (uint64_t *)v7[1];
        if (!v7)
          goto LABEL_84;
        continue;
      }
      break;
    }
    v35 = v7;
    v7 = (uint64_t *)*v7;
    if (v7)
      continue;
    break;
  }
LABEL_84:
  if (v35 == v6)
  {
    v46 = &AMSCore::Any::Null(void)::null;
    a2 = v34;
  }
  else
  {
    v41 = *((char *)v35 + 55);
    if (v41 >= 0)
      v42 = v35 + 4;
    else
      v42 = (const void *)v35[4];
    if (v41 >= 0)
      v43 = *((unsigned __int8 *)v35 + 55);
    else
      v43 = v35[5];
    if (v43 >= 6)
      v44 = 6;
    else
      v44 = v43;
    v45 = memcmp("keybag", v42, v44);
    if (v45)
    {
      a2 = v34;
      if ((v45 & 0x80000000) == 0)
        goto LABEL_96;
LABEL_105:
      v46 = &AMSCore::Any::Null(void)::null;
    }
    else
    {
      a2 = v34;
      if (v43 > 6)
        goto LABEL_105;
LABEL_96:
      v46 = v35 + 7;
    }
  }
LABEL_106:
  if (*((_DWORD *)v46 + 6) != 6)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v80);
    AMSCore::Logger::log<char [51]>((uint64_t)v80.__vftable, 2, (uint64_t)"fairplay", 8, "Anisette provisioning did not provide keybag data.");
    imp = (std::__shared_weak_count *)v80.__imp_.__imp_;
    if (v80.__imp_.__imp_)
    {
      v53 = (unint64_t *)(v80.__imp_.__imp_ + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    goto LABEL_142;
  }
  AMSCore::ServiceProvider<AMSCore::IKeybagProvider>::getDefault(&v87);
  v50 = v87;
  if (!v87)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v80, 2u, "Keybag provider is not available.");
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v80);
    *(_OWORD *)(a4 + 16) = v81;
    *(_QWORD *)a4 = off_1E2521330;
    v55 = v83;
    *(_QWORD *)(a4 + 32) = v82;
    *(_QWORD *)(a4 + 40) = v55;
    v56 = a4 + 40;
    v57 = v84;
    *(_QWORD *)(a4 + 48) = v84;
    if (v57)
    {
      *(_QWORD *)(v55 + 16) = v56;
      v82 = &v83;
      v83 = 0;
      v84 = 0;
      v55 = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v56;
    }
    *(_OWORD *)(a4 + 56) = v85;
    v85 = 0uLL;
    *(_BYTE *)(a4 + 72) = 0;
    v80.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v82, (unsigned int *)v55);
    MEMORY[0x18D7898AC](&v80);
LABEL_135:
    v58 = 1;
    goto LABEL_136;
  }
  if (*((_DWORD *)v46 + 6) == 6)
    v51 = v46;
  else
    v51 = 0;
  if (*((char *)v51 + 23) < 0)
    std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)*v51, v51[1]);
  else
    v79 = *(std::string *)v51;
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v50 + 16))(&v80, v50, &v79);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (!v86)
  {
    AMSCore::Error::Error(&v89, &v80);
    std::runtime_error::runtime_error(&v73, &v89);
    v74 = v90;
    v73.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v59 = (unsigned int *)v92;
    v75 = v91;
    v76 = v92;
    v77 = v93;
    if (v93)
    {
      *(_QWORD *)(v92 + 16) = &v76;
      v91 = &v92;
      v92 = 0;
      v93 = 0;
      v59 = 0;
    }
    else
    {
      v75 = &v76;
    }
    v78 = v94;
    v94 = 0uLL;
    v89.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v91, v59);
    MEMORY[0x18D7898AC](&v89);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v73);
    *(_OWORD *)(a4 + 16) = v74;
    *(_QWORD *)a4 = off_1E2521330;
    v60 = v76;
    *(_QWORD *)(a4 + 32) = v75;
    *(_QWORD *)(a4 + 40) = v60;
    v61 = a4 + 40;
    v62 = v77;
    *(_QWORD *)(a4 + 48) = v77;
    if (v62)
    {
      *(_QWORD *)(v60 + 16) = v61;
      v60 = 0;
      v75 = &v76;
      v76 = 0;
      v77 = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v61;
    }
    *(_OWORD *)(a4 + 56) = v78;
    v78 = 0uLL;
    *(_BYTE *)(a4 + 72) = 0;
    v73.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v75, (unsigned int *)v60);
    MEMORY[0x18D7898AC](&v73);
    if (!v86)
      ((void (*)(std::runtime_error *))v80.~runtime_error)(&v80);
    goto LABEL_135;
  }
  v58 = 0;
LABEL_136:
  v63 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (!v58)
  {
LABEL_142:
    if (*((_DWORD *)v20 + 6) == 5)
      v66 = v20;
    else
      v66 = 0;
    AMSCore::Base64::decode(v66, &v80);
    if (*((_DWORD *)v21 + 6) == 5)
      v67 = v21;
    else
      v67 = 0;
    AMSCore::Base64::decode(v67, &v89);
    if ((SBYTE7(v81) & 0x80u) == 0)
      v68 = &v80;
    else
      v68 = v80.__vftable;
    if ((SBYTE7(v81) & 0x80u) == 0)
      v69 = (const char *)BYTE7(v81);
    else
      v69 = v80.__imp_.__imp_;
    if ((SBYTE7(v90) & 0x80u) == 0)
      v70 = &v89;
    else
      v70 = v89.__vftable;
    if ((SBYTE7(v90) & 0x80u) == 0)
      v71 = (const char *)BYTE7(v90);
    else
      v71 = v89.__imp_.__imp_;
    (*(void (**)(uint64_t, uint64_t, void *, const char *, void *, const char *))(*(_QWORD *)a1 + 40))(a1, a2, v68, v69, v70, v71);
    if (SBYTE7(v90) < 0)
      operator delete(v89.__vftable);
    if (SBYTE7(v81) < 0)
      operator delete(v80.__vftable);
  }
}

void sub_18CC58C64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)va);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AMSCore::BuiltInAnisetteProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::BuiltInAnisetteProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::BuiltInAnisetteProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_BYTE *AMSCore::AnisetteUtils::addHeaders(std::runtime_error *a1, std::runtime_error *a2, void (**a3)(AMSCore::Error *__hidden this), int a4, uint64_t a5)
{
  char *v10;
  _OWORD *v11;
  std::runtime_error_vtbl *v12;
  uint64_t v13;
  std::runtime_error *v14;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  char *v20;
  __int128 v21;
  unsigned int *v22;
  unsigned int **v23;
  char *v24;
  uint64_t v25;
  unsigned int *v26;
  std::__shared_weak_count *v27;
  char *v28;
  int what_low;
  int v30;
  __int128 v31;
  unsigned int *v32;
  unsigned int **v33;
  char *v34;
  uint64_t v35;
  char *v36;
  std::string::size_type v37;
  const char *imp;
  std::runtime_error_vtbl *v39;
  std::runtime_error_vtbl *v40;
  int v41;
  int v42;
  char *v43;
  int v44;
  unint64_t v45;
  char *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::ios_base *v51;
  void (__cdecl *v52)(std::runtime_error *__hidden);
  unsigned __int8 v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t *v57;
  unsigned int v58;
  const char *v59;
  char *v60;
  size_t v61;
  std::runtime_error_vtbl *p_dst;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  size_t v67;
  size_t v68;
  BOOL v69;
  size_t v70;
  char *v71;
  std::runtime_error_vtbl *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  char v77;
  int v78;
  std::runtime_error_vtbl *v79;
  uint64_t v80;
  std::runtime_error_vtbl *v81;
  std::runtime_error_vtbl *v82;
  std::ios_base *v83;
  unsigned __int8 v84;
  int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int **v89;
  char *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  std::runtime_error_vtbl *v101;
  const char *v102;
  std::runtime_error_vtbl *v103;
  std::runtime_error_vtbl *v104;
  uint64_t v105;
  __int128 *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  int v113;
  char *v114;
  uint64_t v115;
  const std::locale *v116;
  const std::locale::facet *v117;
  const std::locale::facet *v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int **v121;
  char *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::runtime_error_vtbl *v130;
  std::runtime_error_vtbl *v131;
  const char *v132;
  std::runtime_error_vtbl *v133;
  uint64_t v134;
  std::runtime_error_vtbl *v135;
  int v136;
  std::runtime_error_vtbl *v137;
  int v138;
  std::runtime_error *v139;
  std::runtime_error *v140;
  char *v141;
  _BYTE v142[32];
  unsigned int **v143;
  unsigned int *v144;
  uint64_t v145;
  __int128 v146;
  void *v147;
  std::__shared_weak_count *v148;
  unsigned __int8 v149;
  std::runtime_error v150;
  __int128 v151;
  unsigned int **v152;
  unsigned int *v153;
  uint64_t v154;
  __int128 v155;
  char v156;
  std::runtime_error v157;
  __int128 v158;
  unsigned int **v159;
  unsigned int *v160;
  uint64_t v161;
  __int128 v162;
  char v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  std::runtime_error v168;
  __int128 v169;
  unsigned int **v170;
  unsigned int *v171;
  uint64_t v172;
  __int128 v173;
  __int128 __p;
  __int128 v175;
  int v176;
  _QWORD v177[20];
  std::runtime_error __dst;
  __int128 v179;
  unsigned int **v180;
  unsigned int *v181;
  uint64_t v182;
  __int128 v183;
  char v184;
  uint64_t v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v10 = (char *)operator new(0x100uLL);
  *(_QWORD *)v10 = AMSCore::AnisetteUtils::addHeaders;
  *((_QWORD *)v10 + 1) = AMSCore::AnisetteUtils::addHeaders;
  v10[152] = 0;
  v11 = v10 + 152;
  v12 = a2->__vftable;
  *((_QWORD *)v10 + 29) = a2->__imp_.__imp_;
  a2->__vftable = 0;
  a2->__imp_.__imp_ = 0;
  v10[216] = 0;
  v13 = *((unsigned __int8 *)a3 + 64);
  if (*((_BYTE *)a3 + 64))
  {
    v10[176] = 0;
    if (*((_BYTE *)a3 + 24))
    {
      *v11 = *(_OWORD *)a3;
      *((_QWORD *)v10 + 21) = a3[2];
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v10[176] = 1;
    }
    *((_QWORD *)v10 + 23) = a3[4];
    *((_OWORD *)v10 + 12) = *(_OWORD *)(a3 + 5);
    *((_QWORD *)v10 + 26) = a3[7];
    a3[5] = 0;
    a3[6] = 0;
    a3[7] = 0;
    v13 = 1;
    v10[216] = 1;
  }
  v137 = v12;
  v14 = (std::runtime_error *)(v10 + 16);
  *((_DWORD *)v10 + 62) = a4;
  v15 = *(unsigned __int8 *)(a5 + 16);
  v141 = v10;
  v10[253] = v15;
  if (v15)
  {
    v16 = *(_QWORD **)a5;
    v13 = *(_QWORD *)(a5 + 8);
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
  else
  {
    v16 = 0;
  }
  *((_QWORD *)v10 + 30) = v13;
  do
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v17 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v10[24] = 0;
  v10[104] = 0;
  *((_QWORD *)v10 + 14) = 0;
  v139 = (std::runtime_error *)(v10 + 24);
  *((_QWORD *)v10 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v168, (uint64_t)v14);
  *a1 = v168;
  AMSCore::ServiceProvider<AMSCore::IAnisetteProvider>::getDefault(&v164);
  v18 = v164;
  v140 = v14;
  if (!v164)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[27]>((uint64_t)&v168, 8u, "Anisette is not available.");
    v20 = v141;
    if (v141[104])
    {
      if (!v141[96])
        ((void (*)(std::runtime_error *))v139->~runtime_error)(v139);
      v141[104] = 0;
    }
    std::runtime_error::runtime_error(v139, &v168);
    v21 = v169;
    v23 = v170;
    v22 = v171;
    *((_QWORD *)v141 + 8) = v171;
    v24 = v141 + 64;
    *(_OWORD *)(v141 + 40) = v21;
    *((_QWORD *)v141 + 3) = off_1E2521330;
    *((_QWORD *)v141 + 7) = v23;
    v25 = v172;
    *((_QWORD *)v141 + 9) = v172;
    if (v25)
    {
      *((_QWORD *)v22 + 2) = v24;
      v170 = &v171;
      v171 = 0;
      v172 = 0;
      v22 = 0;
    }
    else
    {
      *((_QWORD *)v141 + 7) = v24;
    }
    *((_OWORD *)v141 + 5) = v173;
    v173 = 0uLL;
    v141[96] = 0;
    v141[104] = 1;
    v168.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v170, v22);
    MEMORY[0x18D7898AC](&v168);
    v27 = v165;
    if (v165)
      goto LABEL_262;
    goto LABEL_266;
  }
  v19 = *((_DWORD *)v141 + 62);
  if (v19 == 2)
  {
    BYTE7(v158) = 11;
    strcpy((char *)&v157, "amd-domains");
    goto LABEL_21;
  }
  if (v19 == 1)
  {
    BYTE7(v158) = 10;
    strcpy((char *)&v157, "md-domains");
LABEL_21:
    v163 = 1;
    goto LABEL_29;
  }
  v14 = &v168;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[23]>((uint64_t)&v168, 8u, "Unknown Anisette type.");
  std::runtime_error::runtime_error(&v157, &v168);
  v158 = v169;
  a3 = off_1E2521330;
  v157.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v26 = v171;
  v159 = v170;
  v160 = v171;
  v161 = v172;
  if (v172)
  {
    *((_QWORD *)v171 + 2) = &v160;
    v170 = &v171;
    v171 = 0;
    v172 = 0;
    v26 = 0;
  }
  else
  {
    v159 = &v160;
  }
  v162 = v173;
  v173 = 0uLL;
  v163 = 0;
  v168.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v170, v26);
  a2 = &v168;
  MEMORY[0x18D7898AC](&v168);
  if (!v163)
  {
    std::runtime_error::runtime_error(&v168, &v157);
    v169 = v158;
    v168.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v170 = v159;
    v171 = v160;
    v172 = v161;
    if (v161)
    {
      *((_QWORD *)v160 + 2) = &v171;
      v159 = &v160;
      v160 = 0;
      v161 = 0;
    }
    else
    {
      v170 = &v171;
    }
    v173 = v162;
    v162 = 0uLL;
    LOBYTE(__p) = 1;
    std::runtime_error::runtime_error(&__dst, &v168);
    v179 = v169;
    __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v180 = v170;
    v181 = v171;
    v182 = v172;
    if (v172)
    {
      *((_QWORD *)v171 + 2) = &v181;
      v170 = &v171;
      v171 = 0;
      v172 = 0;
    }
    else
    {
      v180 = &v181;
    }
    v183 = v173;
    v173 = 0uLL;
    std::runtime_error::runtime_error(&v150, &__dst);
    v151 = v179;
    v150.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v87 = v181;
    v152 = v180;
    v153 = v181;
    v154 = v182;
    if (v182)
    {
      *((_QWORD *)v181 + 2) = &v153;
      v87 = 0;
      v180 = &v181;
      v181 = 0;
      v182 = 0;
    }
    else
    {
      v152 = &v153;
    }
    v155 = v183;
    v183 = 0uLL;
    __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v180, v87);
    MEMORY[0x18D7898AC](&__dst);
    if (v141[104])
    {
      if (!v141[96])
        ((void (*)(std::runtime_error *))v139->~runtime_error)(v139);
      v141[104] = 0;
    }
    std::runtime_error::runtime_error(v139, &v150);
    v89 = v152;
    v88 = v153;
    *((_QWORD *)v141 + 8) = v153;
    v90 = v141 + 64;
    *(_OWORD *)(v141 + 40) = v151;
    *((_QWORD *)v141 + 3) = off_1E2521330;
    *((_QWORD *)v141 + 7) = v89;
    v91 = v154;
    *((_QWORD *)v141 + 9) = v154;
    if (v91)
    {
      *((_QWORD *)v88 + 2) = v90;
      v88 = 0;
      v152 = &v153;
      v153 = 0;
      v154 = 0;
    }
    else
    {
      *((_QWORD *)v141 + 7) = v90;
    }
    *((_OWORD *)v141 + 5) = v155;
    v155 = 0uLL;
    v141[96] = 0;
    v141[104] = 1;
    v150.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v152, v88);
    MEMORY[0x18D7898AC](&v150);
    if ((_BYTE)__p)
    {
      v168.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v92 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
      if (*((_QWORD *)&v173 + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v170, v171);
      MEMORY[0x18D7898AC](&v168);
    }
    goto LABEL_257;
  }
LABEL_29:
  if (!v15)
  {
    v28 = (char *)v137;
    goto LABEL_208;
  }
  (*(void (**)(std::runtime_error *__return_ptr, _QWORD *, std::runtime_error *))(*v16 + 72))(&v150, v16, &v157);
  if (!v156)
  {
    v30 = 0;
    v28 = (char *)v137;
    goto LABEL_193;
  }
  v142[0] = 0;
  v142[24] = 0;
  v28 = (char *)v137;
  what_low = LOBYTE(v137[5].what);
  if (!LOBYTE(v137[5].what))
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[27]>((uint64_t)&v168, 3u, "The URL is missing a host.");
    if (v141[104])
    {
      if (!v141[96])
        ((void (*)(std::runtime_error *))v139->~runtime_error)(v139);
      v141[104] = 0;
    }
    std::runtime_error::runtime_error(v139, &v168);
    v31 = v169;
    v33 = v170;
    v32 = v171;
    *((_QWORD *)v141 + 8) = v171;
    v34 = v141 + 64;
    *(_OWORD *)(v141 + 40) = v31;
    *((_QWORD *)v141 + 3) = off_1E2521330;
    *((_QWORD *)v141 + 7) = v33;
    v35 = v172;
    *((_QWORD *)v141 + 9) = v172;
    if (v35)
    {
      *((_QWORD *)v32 + 2) = v34;
      v170 = &v171;
      v171 = 0;
      v172 = 0;
      v32 = 0;
    }
    else
    {
      *((_QWORD *)v141 + 7) = v34;
    }
    *((_OWORD *)v141 + 5) = v173;
    v173 = 0uLL;
    v141[96] = 0;
    v141[104] = 1;
    v168.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v170, v32);
    MEMORY[0x18D7898AC](&v168);
    v30 = 0;
    v78 = 3;
    if (!v142[24])
      goto LABEL_192;
    goto LABEL_190;
  }
  if (SHIBYTE(v137[5].~runtime_error_0) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v142, (const std::string::value_type *)v137[4].what, (std::string::size_type)v137[5].~runtime_error);
  }
  else
  {
    *(_OWORD *)v142 = *(_OWORD *)&v137[4].what;
    *(_QWORD *)&v142[16] = v137[5].~runtime_error_0;
  }
  v142[24] = 1;
  if (v142[23] >= 0)
    v36 = v142;
  else
    v36 = *(char **)v142;
  if (v142[23] >= 0)
    v37 = v142[23];
  else
    v37 = *(_QWORD *)&v142[8];
  AMSCore::StringUtils::lowercase((uint64_t)&v147, v36, v37);
  v136 = what_low;
  if (!v156)
  {
    __break(1u);
LABEL_272:
    {
    }
LABEL_147:
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v168, (uint64_t)"The request does not support the Anisette type. type = ", 55);
    v85 = *((_DWORD *)v141 + 62);
    if (v85 == 2)
    {
      v86 = 11;
      BYTE7(v179) = 11;
      strcpy((char *)&__dst, "Version 1.5");
    }
    else if (v85 == 1)
    {
      v86 = 9;
      BYTE7(v179) = 9;
      strcpy((char *)&__dst, "Version 1");
    }
    else
    {
      v86 = 4;
      BYTE7(v179) = 4;
      strcpy((char *)&__dst, "None");
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v168, (uint64_t)&__dst, v86);
    if (SBYTE7(v179) < 0)
      operator delete(__dst.__vftable);
    v95 = v172;
    v96 = (char *)&v168 + (unint64_t)v168.__vftable[-1].~runtime_error;
    if ((v96[32] & 5) != 0)
    {
      v97 = -1;
    }
    else
    {
      (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v96 + 5)
                                                                                                 + 32))(&__dst, *((_QWORD *)v96 + 5), 0, 1, 16);
      v97 = v185;
    }
    __dst.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(__dst.__imp_.__imp_) = 2;
    *(_QWORD *)&v179 = v95;
    *((_QWORD *)&v179 + 1) = v97;
    (*(void (**)(_QWORD, const char *, uint64_t, std::runtime_error *))(**((_QWORD **)v28 + 2) + 16))(*((_QWORD *)v28 + 2), "networking", 10, &__dst);
    v168.__vftable = (std::runtime_error_vtbl *)*a3;
    *(std::runtime_error_vtbl **)((char *)&v168.__vftable + (unint64_t)v168.__vftable[-1].~runtime_error) = (std::runtime_error_vtbl *)a3[3];
    v168.__imp_.__imp_ = (const char *)&a2[1];
    if (SBYTE7(v175) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v16);
    what_low = v136;
LABEL_184:
    v98 = v148;
    v28 = (char *)v137;
    if (v148)
    {
      p_shared_owners = (unint64_t *)&v148->__shared_owners_;
      do
        v100 = __ldaxr(p_shared_owners);
      while (__stlxr(v100 - 1, p_shared_owners));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v30 = 0;
    v78 = 0;
    if (!v142[24])
      goto LABEL_192;
    goto LABEL_190;
  }
  v39 = v150.__vftable;
  imp = v150.__imp_.__imp_;
  if (v150.__vftable == (std::runtime_error_vtbl *)v150.__imp_.__imp_)
  {
LABEL_138:
    v77 = 0;
    goto LABEL_140;
  }
  v135 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v131 = (std::runtime_error_vtbl *)*MEMORY[0x1E0DE4F60];
  v134 = MEMORY[0x1E0DE4FE0] + 64;
  v133 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v130 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
  v132 = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  while (1)
  {
    v42 = (int)v39[1].~runtime_error;
    if ((v42 - 1) < 0xFFFFFFFE)
      break;
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v168);
    AMSCore::Logger::log<char [34]>((uint64_t)v168.__vftable, 4, (uint64_t)"networking", 10, "Encountered an invalid bag value.");
    v47 = (std::__shared_weak_count *)v168.__imp_.__imp_;
    if (v168.__imp_.__imp_)
    {
      v48 = (unint64_t *)(v168.__imp_.__imp_ + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
LABEL_86:
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
LABEL_55:
    v39 = (std::runtime_error_vtbl *)((char *)v39 + 32);
    if (v39 == (std::runtime_error_vtbl *)imp)
      goto LABEL_138;
  }
  if (v42 == 5)
    v43 = (char *)v39;
  else
    v43 = 0;
  if (v42 != 5)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v166);
    v50 = v166;
    if (*(int *)(v166 + 8) <= 4)
    {
      v177[0] = v134;
      v168.__vftable = v135;
      *(std::runtime_error_vtbl **)((char *)&v168.__vftable + (unint64_t)v135[-1].~runtime_error) = v133;
      v51 = (std::ios_base *)((char *)&v168 + (unint64_t)v168.__vftable[-1].~runtime_error);
      std::ios_base::init(v51, &v168.__imp_);
      v51[1].__vftable = 0;
      v51[1].__fmtflags_ = -1;
      v168.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4FE0] + 24);
      v177[0] = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      v168.__imp_.__imp_ = v132;
      __p = 0u;
      v175 = 0u;
      v176 = 16;
      v52 = v168.__vftable[-1].~runtime_error;
      if ((v53 & 1) == 0
      {
        v28 = (char *)v137;
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v168, (uint64_t)"Encountered an invalid bag value type.", 38);
      v54 = v172;
      v55 = (char *)&v168 + (unint64_t)v168.__vftable[-1].~runtime_error;
      if ((v55[32] & 5) != 0)
      {
        v56 = -1;
      }
      else
      {
        (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v55 + 5) + 32))(&__dst, *((_QWORD *)v55 + 5), 0, 1, 16);
        v56 = v185;
      }
      __dst.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(__dst.__imp_.__imp_) = 4;
      *(_QWORD *)&v179 = v54;
      *((_QWORD *)&v179 + 1) = v56;
      (*(void (**)(_QWORD, const char *, uint64_t, std::runtime_error *))(**(_QWORD **)(v50 + 16) + 16))(*(_QWORD *)(v50 + 16), "networking", 10, &__dst);
      v168.__vftable = v131;
      *(std::runtime_error_vtbl **)((char *)&v168.__vftable + (unint64_t)v131[-1].~runtime_error) = v130;
      v168.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      if (SBYTE7(v175) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v177);
    }
    v47 = v167;
    if (!v167)
      goto LABEL_55;
    v57 = (unint64_t *)&v167->__shared_owners_;
    do
      v49 = __ldaxr(v57);
    while (__stlxr(v49 - 1, v57));
    goto LABEL_86;
  }
  v44 = v43[23];
  if (v44 < 0)
  {
    v45 = *((_QWORD *)v43 + 1);
    if (!v45)
      goto LABEL_89;
    v46 = *(char **)v43;
    if (**(_BYTE **)v43 != 46)
      goto LABEL_89;
  }
  else
  {
    if (!v43[23] || *v43 != 46)
    {
LABEL_78:
      v45 = v44;
      goto LABEL_90;
    }
    v45 = v43[23];
    v46 = v43;
  }
  if (AMSCore::URL::isInDomain((uint64_t)&v137[3].~runtime_error_0, v46, v45))
    goto LABEL_269;
  v44 = v43[23];
  if ((v44 & 0x80000000) == 0)
    goto LABEL_78;
  v45 = *((_QWORD *)v43 + 1);
LABEL_89:
  v43 = *(char **)v43;
LABEL_90:
  AMSCore::StringUtils::lowercase((uint64_t)&v168, v43, v45);
  v58 = BYTE7(v169);
  if (SBYTE7(v169) < 0)
  {
    v59 = v168.__imp_.__imp_;
    if (v168.__imp_.__imp_ < (const char *)2 || LOBYTE(v168.~runtime_error) != 42)
      goto LABEL_119;
    v60 = (char *)&v168.~runtime_error + 1;
  }
  else
  {
    if (BYTE7(v169) < 2u || LOBYTE(v168.__vftable) != 42)
      goto LABEL_119;
    v59 = (const char *)BYTE7(v169);
    v60 = (char *)&v168.__vftable + 1;
  }
  v61 = (size_t)(v59 - 1);
  if ((unint64_t)(v59 - 1) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  if (v61 >= 0x17)
  {
    v63 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v63 = v61 | 7;
    v64 = v63 + 1;
    p_dst = (std::runtime_error_vtbl *)operator new(v63 + 1);
    __dst.__imp_.__imp_ = (const char *)v61;
    *(_QWORD *)&v179 = v64 | 0x8000000000000000;
    __dst.__vftable = p_dst;
    v28 = (char *)v137;
  }
  else
  {
    BYTE7(v179) = (_BYTE)v59 - 1;
    p_dst = (std::runtime_error_vtbl *)&__dst;
  }
  memmove(p_dst, v60, v61);
  v65 = 0;
  *((_BYTE *)&p_dst->~runtime_error + v61) = 0;
  v66 = SBYTE7(v179);
  if ((SBYTE7(v179) & 0x80u) == 0)
    v67 = BYTE7(v179);
  else
    v67 = (size_t)__dst.__imp_.__imp_;
  v68 = v149;
  if ((v149 & 0x80u) != 0)
    v68 = (size_t)v148;
  v69 = v68 >= v67;
  v70 = v68 - v67;
  if (v69)
  {
    v71 = (char *)&v147;
    if ((v149 & 0x80u) != 0)
      v71 = (char *)v147;
    if ((SBYTE7(v179) & 0x80u) == 0)
      v72 = (std::runtime_error_vtbl *)&__dst;
    else
      v72 = __dst.__vftable;
    v65 = memcmp(&v71[v70], v72, v67) == 0;
    if ((v66 & 0x80000000) == 0)
    {
LABEL_110:
      if (v65)
        goto LABEL_267;
      goto LABEL_119;
    }
  }
  else if ((SBYTE7(v179) & 0x80000000) == 0)
  {
    goto LABEL_110;
  }
  operator delete(__dst.__vftable);
  v58 = BYTE7(v169);
  if (!v65)
  {
LABEL_119:
    if ((v58 & 0x80u) == 0)
      v73 = (std::__shared_weak_count *)v58;
    else
      v73 = (std::__shared_weak_count *)v168.__imp_.__imp_;
    v74 = (std::__shared_weak_count *)v149;
    if ((v149 & 0x80u) != 0)
      v74 = v148;
    if (v73 != v74)
      goto LABEL_134;
    if ((v149 & 0x80u) == 0)
      v75 = (unsigned __int8 *)&v147;
    else
      v75 = (unsigned __int8 *)v147;
    if ((v58 & 0x80) == 0)
    {
      if (!v58)
      {
LABEL_139:
        v77 = 1;
        goto LABEL_140;
      }
      v76 = 0;
      while (*((unsigned __int8 *)&v168.__vftable + v76) == v75[v76])
      {
        if (v58 == ++v76)
          goto LABEL_139;
      }
LABEL_134:
      if ((v58 & 0x80) != 0)
        operator delete(v168.__vftable);
      goto LABEL_55;
    }
    v40 = v168.__vftable;
    v41 = memcmp(v168.__vftable, v75, (size_t)v168.__imp_.__imp_);
    operator delete(v40);
    if (!v41)
      goto LABEL_139;
    goto LABEL_55;
  }
LABEL_267:
  if ((v58 & 0x80) != 0)
    operator delete(v168.__vftable);
LABEL_269:
  v77 = 1;
LABEL_140:
  what_low = v136;
  if (((char)v149 & 0x80000000) == 0)
  {
    if ((v77 & 1) != 0)
      goto LABEL_142;
LABEL_145:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v147);
    v28 = (char *)v147;
    if (*((int *)v147 + 2) <= 2)
    {
      v16 = v177;
      v79 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v80 = MEMORY[0x1E0DE4FE0] + 64;
      a3 = (void (**)(AMSCore::Error *__hidden))MEMORY[0x1E0DE4F60];
      v81 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v82 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v177[0] = MEMORY[0x1E0DE4FE0] + 64;
      v168.__vftable = v81;
      *(std::runtime_error_vtbl **)((char *)&v168.__vftable + (unint64_t)v81[-1].~runtime_error) = v82;
      v83 = (std::ios_base *)((char *)&v168 + (unint64_t)v168.__vftable[-1].~runtime_error);
      std::ios_base::init(v83, &v168.__imp_);
      v83[1].__vftable = 0;
      v83[1].__fmtflags_ = -1;
      v168.__vftable = v79 + 1;
      v177[0] = v80;
      std::streambuf::basic_streambuf();
      a2 = (std::runtime_error *)MEMORY[0x1E0DE4FB8];
      v168.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      __p = 0u;
      v175 = 0u;
      v176 = 16;
      v14 = (std::runtime_error *)v168.__vftable[-1].~runtime_error;
      if ((v84 & 1) != 0)
        goto LABEL_147;
      goto LABEL_272;
    }
    goto LABEL_184;
  }
  operator delete(v147);
  if ((v77 & 1) == 0)
    goto LABEL_145;
LABEL_142:
  v78 = 0;
  v30 = 1;
  if (v142[24])
  {
LABEL_190:
    if ((v142[23] & 0x80000000) != 0)
      operator delete(*(void **)v142);
  }
LABEL_192:
  if (what_low)
LABEL_193:
    v78 = 0;
  v101 = v150.__vftable;
  if (!v156)
  {
    ((void (*)(std::runtime_error *))v150.~runtime_error)(&v150);
LABEL_202:
    if (!v78)
      goto LABEL_206;
    goto LABEL_257;
  }
  if (!v150.__vftable)
    goto LABEL_202;
  v102 = v150.__imp_.__imp_;
  v103 = v150.__vftable;
  if (v150.__imp_.__imp_ != (const char *)v150.__vftable)
  {
    do
    {
      v104 = (std::runtime_error_vtbl *)(v102 - 32);
      v105 = *((unsigned int *)v102 - 2);
      if ((_DWORD)v105 != -1)
        ((void (*)(std::runtime_error *, const char *))off_1E253D240[v105])(&v168, v102 - 32);
      *((_DWORD *)v102 - 2) = -1;
      v102 -= 32;
    }
    while (v104 != v101);
    v103 = v150.__vftable;
    v28 = (char *)v137;
  }
  v150.__imp_.__imp_ = (const char *)v101;
  operator delete(v103);
  if (!v78)
  {
LABEL_206:
    if (!v30)
      goto LABEL_276;
    v18 = v164;
LABEL_208:
    (*(void (**)(std::runtime_error *__return_ptr, uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v18 + 48))(&v168, v18, v11, *((unsigned int *)v141 + 62));
    v138 = __p;
    if ((_BYTE)__p)
    {
      v106 = &v169;
      while (1)
      {
        v106 = *(__int128 **)v106;
        if (!v106)
          break;
        v108 = (char *)operator new(0x40uLL);
        v109 = (uint64_t)v108;
        __dst.__vftable = (std::runtime_error_vtbl *)v108;
        __dst.__imp_.__imp_ = v28 + 256;
        LOBYTE(v179) = 0;
        v110 = v108 + 16;
        *(_QWORD *)v108 = 0;
        *((_QWORD *)v108 + 1) = 0;
        if (*((char *)v106 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v108 + 16), *((const std::string::value_type **)v106 + 2), *((_QWORD *)v106 + 3));
        }
        else
        {
          v111 = v106[1];
          *((_QWORD *)v108 + 4) = *((_QWORD *)v106 + 4);
          *(_OWORD *)v110 = v111;
        }
        if (*((char *)v106 + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v109 + 40), *((const std::string::value_type **)v106 + 5), *((_QWORD *)v106 + 6));
        }
        else
        {
          v112 = *(__int128 *)((char *)v106 + 40);
          *(_QWORD *)(v109 + 56) = *((_QWORD *)v106 + 7);
          *(_OWORD *)(v109 + 40) = v112;
        }
        LOBYTE(v179) = 1;
        v113 = *(char *)(v109 + 39);
        if (v113 >= 0)
          v114 = v110;
        else
          v114 = *(char **)(v109 + 16);
        if (v113 >= 0)
          v115 = *(unsigned __int8 *)(v109 + 39);
        else
          v115 = *(_QWORD *)(v109 + 24);
        v116 = std::locale::classic();
        v117 = std::locale::use_facet(v116, MEMORY[0x1E0DE4A90]);
        if (v115)
        {
          v118 = v117;
          v107 = 0;
          do
          {
            v107 ^= 2
                  * ((int (*)(const std::locale::facet *, _QWORD))v118->__vftable[1].__on_zero_shared)(v118, *v114++);
            --v115;
          }
          while (v115);
        }
        else
        {
          v107 = 0;
        }
        *(_QWORD *)(v109 + 8) = v107;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi((_QWORD *)v28 + 30, v109);
      }
    }
    else
    {
      std::runtime_error::runtime_error(&__dst, &v168);
      v179 = v169;
      __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v180 = v170;
      v181 = v171;
      v182 = v172;
      if (v172)
      {
        *((_QWORD *)v171 + 2) = &v181;
        v170 = &v171;
        v171 = 0;
        v172 = 0;
      }
      else
      {
        v180 = &v181;
      }
      v183 = v173;
      v173 = 0uLL;
      v184 = 1;
      std::runtime_error::runtime_error(&v150, &__dst);
      v151 = v179;
      v150.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v152 = v180;
      v153 = v181;
      v154 = v182;
      if (v182)
      {
        *((_QWORD *)v181 + 2) = &v153;
        v180 = &v181;
        v181 = 0;
        v182 = 0;
      }
      else
      {
        v152 = &v153;
      }
      v155 = v183;
      v183 = 0uLL;
      std::runtime_error::runtime_error((std::runtime_error *)v142, &v150);
      *(_OWORD *)&v142[16] = v151;
      *(_QWORD *)v142 = off_1E2521330;
      v119 = v153;
      v143 = v152;
      v144 = v153;
      v145 = v154;
      if (v154)
      {
        *((_QWORD *)v153 + 2) = &v144;
        v119 = 0;
        v152 = &v153;
        v153 = 0;
        v154 = 0;
      }
      else
      {
        v143 = &v144;
      }
      v146 = v155;
      v155 = 0uLL;
      v150.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v152, v119);
      MEMORY[0x18D7898AC](&v150);
      if (v141[104])
      {
        if (!v141[96])
          ((void (*)(std::runtime_error *))v139->~runtime_error)(v139);
        v141[104] = 0;
      }
      std::runtime_error::runtime_error(v139, (const std::runtime_error *)v142);
      v121 = v143;
      v120 = v144;
      *((_QWORD *)v141 + 8) = v144;
      v122 = v141 + 64;
      *(_OWORD *)(v141 + 40) = *(_OWORD *)&v142[16];
      *((_QWORD *)v141 + 3) = off_1E2521330;
      *((_QWORD *)v141 + 7) = v121;
      v123 = v145;
      *((_QWORD *)v141 + 9) = v145;
      if (v123)
      {
        *((_QWORD *)v120 + 2) = v122;
        v120 = 0;
        v143 = &v144;
        v144 = 0;
        v145 = 0;
      }
      else
      {
        *((_QWORD *)v141 + 7) = v122;
      }
      *((_OWORD *)v141 + 5) = v146;
      v146 = 0uLL;
      v141[96] = 0;
      v141[104] = 1;
      *(_QWORD *)v142 = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v143, v120);
      MEMORY[0x18D7898AC](v142);
      if (v184)
      {
        __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v124 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
        if (*((_QWORD *)&v183 + 1))
        {
          v125 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v180, v181);
        MEMORY[0x18D7898AC](&__dst);
      }
    }
    std::__expected_base<AMSCore::IHTTPHeaderMap,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)&v168);
    if (v138)
    {
LABEL_276:
      if (v141[104] && !v141[96])
        ((void (*)(std::runtime_error *))v139->~runtime_error)(v139);
      v141[96] = 1;
      v141[104] = 1;
    }
  }
LABEL_257:
  if (v163)
  {
    if (SBYTE7(v158) < 0)
      operator delete(v157.__vftable);
  }
  else
  {
    ((void (*)(std::runtime_error *))v157.~runtime_error)(&v157);
  }
  v20 = v141;
  v27 = v165;
  if (v165)
  {
LABEL_262:
    v127 = (unint64_t *)&v27->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_266:
  *((_QWORD *)v20 + 28) = v140;
  *(_QWORD *)v20 = 0;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v20 + 224);
}

void sub_18CC5A1E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMSCore::AnisetteUtils::addHeaders(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;

  v2 = __p + 120;
  v3 = (char *)*((_QWORD *)__p + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[104])
    v5 = __p[96] == 0;
  else
    v5 = 0;
  if (v5)
    (**((void (***)(char *))__p + 3))(__p + 24);
  v6 = *((_QWORD *)__p + 30);
  v7 = __p[253];
  do
  {
    v8 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v9)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v7)
  {
    if (v6)
    {
      v10 = (unint64_t *)(*((_QWORD *)__p + 30) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 30);
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if (__p[216])
  {
    if (__p[215] < 0)
      operator delete(*((void **)__p + 24));
    if (__p[176] && __p[175] < 0)
      operator delete(*((void **)__p + 19));
  }
  v13 = *((_QWORD *)__p + 29);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)__p + 29);
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(__p);
}

void AMSCore::AnisetteUtils::handleActions(_OWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  char *v9;
  unint64_t v10;
  void **v11;
  std::string *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  char *v19;
  size_t v20;
  _QWORD *v21;
  const char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::runtime_error v34;
  unint64_t *v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v58;
  std::__libcpp_refstring *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  std::string *v65;
  __int128 v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  int v86;

  v9 = (char *)operator new(0x4E0uLL);
  v10 = (unint64_t)v9;
  *(_QWORD *)v9 = AMSCore::AnisetteUtils::handleActions;
  *((_QWORD *)v9 + 1) = AMSCore::AnisetteUtils::handleActions;
  v11 = (void **)(v9 + 1080);
  v12 = (std::string *)(v9 + 536);
  v13 = v9 + 1056;
  v61 = (uint64_t)(v9 + 1104);
  v60 = (uint64_t *)(v9 + 1120);
  v59 = (std::__libcpp_refstring *)(v9 + 1136);
  v64 = v9 + 1232;
  v65 = (std::string *)(v9 + 1000);
  v58 = (uint64_t)(v9 + 16);
  *((_OWORD *)v9 + 72) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = a3[1];
  v62 = *a3;
  v63 = (uint64_t *)(v9 + 1032);
  *a3 = 0;
  a3[1] = 0;
  *((_OWORD *)v9 + 73) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *((_OWORD *)v9 + 74) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  do
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v15 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v9[24] = 0;
  v9[488] = 0;
  *((_QWORD *)v9 + 62) = 0;
  *((_QWORD *)v9 + 66) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v66, v58);
  v16 = 0;
  *a1 = v66;
  *(_QWORD *)(v10 + 1232) = 0x200000001;
  while (1)
  {
    *(_QWORD *)(v10 + 1200) = v16;
    v17 = *(_DWORD *)&v64[4 * v16];
    if (!v17)
    {
      *(_BYTE *)(v10 + 1000) = 0;
      *(_BYTE *)(v10 + 1024) = 0;
      goto LABEL_81;
    }
    v18 = (_QWORD *)(*(_QWORD *)(v10 + 1152) + 160);
    v19 = v17 == 1 ? "X-Apple-MD-Action" : "X-Apple-AMD-Action";
    v20 = v17 == 1 ? 17 : 18;
    *(_BYTE *)(v10 + 559) = v20;
    memcpy(v12, v19, v20);
    v12->__r_.__value_.__s.__data_[v20] = 0;
    AMSCore::IHTTPHeaderMap::getSingleValueOrNone(v65, v18, (char *)v12);
    if (*(char *)(v10 + 559) < 0)
      break;
    if (*(_BYTE *)(v10 + 1024))
      goto LABEL_16;
LABEL_81:
    v56 = 0;
LABEL_82:
    *(_QWORD *)(v10 + 1224) = v14;
    if (*(_BYTE *)(v10 + 1024) && *(char *)(v10 + 1023) < 0)
      operator delete(v65->__r_.__value_.__l.__data_);
    if (v56)
      goto LABEL_94;
    v16 = *(_QWORD *)(v10 + 1200) + 1;
    if (*(_QWORD *)(v10 + 1200) == 1)
    {
      LOBYTE(v66) = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v86 = 1;
      if (*(_BYTE *)(v10 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v10 + 24));
        *(_BYTE *)(v10 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v10 + 24, (uint64_t)&v66);
      *(_BYTE *)(v10 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v66);
LABEL_94:
      *(_QWORD *)(v10 + 536) = v58;
      *(_QWORD *)v10 = 0;
      AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v12);
      return;
    }
  }
  operator delete(v12->__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 1024))
    goto LABEL_81;
LABEL_16:
  v21 = (_QWORD *)(*(_QWORD *)(v10 + 1152) + 160);
  if (v17 == 1)
    v22 = "X-Apple-MD-Data";
  else
    v22 = "X-Apple-AMD-Data";
  if (v17 == 1)
    v23 = 15;
  else
    v23 = 16;
  *(_BYTE *)(v10 + 1103) = v23;
  memcpy(v11, v22, v23);
  *((_BYTE *)v11 + v23) = 0;
  AMSCore::IHTTPHeaderMap::getSingleValueOrNone(v12, v21, (char *)v11);
  if (*(char *)(v10 + 1103) < 0)
  {
    operator delete(*v11);
    if (!*(_BYTE *)(v10 + 560))
      goto LABEL_28;
LABEL_24:
    AMSCore::Base64::decode((uint64_t *)v12, v13);
    if (*(_BYTE *)(v10 + 560) && *(char *)(v10 + 559) < 0)
      operator delete(v12->__r_.__value_.__l.__data_);
  }
  else
  {
    if (*(_BYTE *)(v10 + 560))
      goto LABEL_24;
LABEL_28:
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
  }
  if (*(_BYTE *)(v10 + 1024))
  {
    v24 = *(_QWORD *)(v10 + 1176);
    v25 = *(_QWORD *)(v10 + 1168);
    v26 = *(_BYTE *)(v10 + 1023);
    if (v26 >= 0)
      v27 = (uint64_t)v65;
    else
      v27 = *(_QWORD *)(v10 + 1000);
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(v10 + 1023);
    else
      v28 = *(_QWORD *)(v10 + 1008);
    *(_OWORD *)v63 = *(_OWORD *)v13;
    v63[2] = v13[2];
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_QWORD *)(v10 + 1104) = v62;
    *(_QWORD *)(v10 + 1112) = v14;
    *(_QWORD *)(v10 + 1120) = v25;
    *(_QWORD *)(v10 + 1128) = v24;
    if (v24)
    {
      v29 = (unint64_t *)(v24 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *(_QWORD *)(v10 + 1192);
    *(_QWORD *)(v10 + 1136) = *(_QWORD *)(v10 + 1184);
    *(_QWORD *)(v10 + 1144) = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = *(std::runtime_error *)v11;
    *((_OWORD *)v11 + 8) = *(_OWORD *)v11;
    *v11 = 0;
    v11[1] = 0;
    if (!atomic_load((unint64_t *)&v34.__vftable[20]))
    {
      *((_BYTE *)v11 + 160) = 0;
      v36 = (unint64_t *)((char *)v11[16] + 480);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v10, v36));
      if (!v37)
        return;
    }
    v38 = v11[16];
    if (v38[472])
    {
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v12, (uint64_t)(v38 + 8));
      v39 = *(_QWORD *)(v10 + 1216);
      if (!v39)
        goto LABEL_51;
      v40 = (unint64_t *)(v39 + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        v45 = *(std::__shared_weak_count **)(v10 + 1216);
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
        v42 = *(std::__shared_weak_count **)(v10 + 1088);
        if (v42)
        {
LABEL_52:
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
      else
      {
LABEL_51:
        v42 = *(std::__shared_weak_count **)(v10 + 1088);
        if (v42)
          goto LABEL_52;
      }
      v46 = *(std::__shared_weak_count **)(v10 + 1144);
      if (!v46)
        goto LABEL_61;
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        v49 = *(std::__shared_weak_count **)(v10 + 1128);
        if (v49)
        {
LABEL_62:
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      else
      {
LABEL_61:
        v49 = *(std::__shared_weak_count **)(v10 + 1128);
        if (v49)
          goto LABEL_62;
      }
      v52 = *(std::__shared_weak_count **)(v10 + 1112);
      if (!v52)
        goto LABEL_71;
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
        if (*(char *)(v10 + 1055) < 0)
LABEL_72:
          operator delete((void *)*v63);
      }
      else
      {
LABEL_71:
        if (*(char *)(v10 + 1055) < 0)
          goto LABEL_72;
      }
      v55 = *(_DWORD *)(v10 + 992);
      if (v55 == 1)
      {
        v56 = 0;
      }
      else
      {
        if (*(_BYTE *)(v10 + 488))
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v10 + 24));
          *(_BYTE *)(v10 + 488) = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction(v10 + 24, (uint64_t)v12);
        *(_BYTE *)(v10 + 488) = 1;
        v56 = 3;
      }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v12);
      if (*(char *)(v10 + 1079) < 0)
        operator delete((void *)*v13);
      v14 = 0;
      v62 = 0;
      if (v55 != 1)
        goto LABEL_82;
      goto LABEL_81;
    }
  }
  __break(1u);
}

void sub_18CC5ACAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, void **a18)
{
  char *v18;
  void **v19;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a12);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a13);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a14);
  if (v18[1055] < 0)
    operator delete(*a16);
  if (v18[1079] < 0)
    operator delete(*v19);
  if (v18[1024])
  {
    if (v18[1023] < 0)
      operator delete(*a18);
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_18CC5AD28()
{
  uint64_t v0;

  if ((*(char *)(v0 + 559) & 0x80000000) == 0)
    JUMPOUT(0x18CC5AD1CLL);
  JUMPOUT(0x18CC5AD14);
}

void AMSCore::AnisetteUtils::handleActions(unint64_t a1)
{
  _BYTE *v1;
  void **v3;
  AMSCore::HTTPResponseAction *v4;
  std::string *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  const char *v31;
  size_t v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::runtime_error v46;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  AMSCore::HTTPResponseAction *v52;
  std::__libcpp_refstring *v53;
  uint64_t *v54;
  unint64_t v55;
  _BYTE v56[456];
  int v57;

  v1 = *(_BYTE **)(a1 + 1208);
  if (v1[472])
  {
    v3 = (void **)(a1 + 1080);
    v4 = (AMSCore::HTTPResponseAction *)(a1 + 536);
    v5 = (std::string *)(a1 + 1000);
    v6 = a1 + 1032;
    v7 = a1 + 1056;
    v8 = (_QWORD *)(a1 + 1104);
    v53 = (std::__libcpp_refstring *)(a1 + 1136);
    v54 = (uint64_t *)(a1 + 1120);
    v55 = a1 + 1232;
    v51 = a1 + 16;
    v52 = (AMSCore::HTTPResponseAction *)(a1 + 24);
    do
    {
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v4, (uint64_t)(v1 + 8));
      v9 = *(_QWORD *)(a1 + 1216);
      if (!v9)
        goto LABEL_8;
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        v15 = *(std::__shared_weak_count **)(a1 + 1216);
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        v12 = *(std::__shared_weak_count **)(a1 + 1088);
        if (!v12)
          goto LABEL_14;
      }
      else
      {
LABEL_8:
        v12 = *(std::__shared_weak_count **)(a1 + 1088);
        if (!v12)
          goto LABEL_14;
      }
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_14:
      v16 = *(std::__shared_weak_count **)(a1 + 1144);
      if (!v16)
        goto LABEL_18;
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        v19 = *(std::__shared_weak_count **)(a1 + 1128);
        if (!v19)
          goto LABEL_24;
      }
      else
      {
LABEL_18:
        v19 = *(std::__shared_weak_count **)(a1 + 1128);
        if (!v19)
          goto LABEL_24;
      }
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
LABEL_24:
      v22 = *(std::__shared_weak_count **)(a1 + 1112);
      if (!v22)
        goto LABEL_28;
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
      {
LABEL_28:
        if ((*(char *)(a1 + 1055) & 0x80000000) == 0)
          goto LABEL_30;
LABEL_29:
        operator delete(*(void **)v6);
        goto LABEL_30;
      }
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (*(char *)(a1 + 1055) < 0)
        goto LABEL_29;
LABEL_30:
      v25 = *(_DWORD *)(a1 + 992);
      if (v25 == 1)
      {
        v26 = 0;
      }
      else
      {
        v27 = (uint64_t)v52;
        if (*(_BYTE *)(a1 + 488))
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction(v52);
          *(_BYTE *)(a1 + 488) = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction(v27, (uint64_t)v4);
        *(_BYTE *)(a1 + 488) = 1;
        v26 = 3;
      }
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v4);
      if (*(char *)(a1 + 1079) < 0)
        operator delete(*(void **)v7);
      if (v25 == 1)
LABEL_53:
        v26 = 0;
      *(_QWORD *)(a1 + 1224) = 0;
      if (*(_BYTE *)(a1 + 1024) && *(char *)(a1 + 1023) < 0)
        operator delete(v5->__r_.__value_.__l.__data_);
      if (v26)
      {
LABEL_94:
        *(_QWORD *)(a1 + 536) = v51;
        *(_QWORD *)a1 = 0;
        AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v4);
        return;
      }
      v28 = *(_QWORD *)(a1 + 1200) + 1;
      if (*(_QWORD *)(a1 + 1200) == 1)
      {
        v56[0] = 0;
        v56[24] = 0;
        v56[32] = 0;
        v56[48] = 0;
        v56[56] = 0;
        v56[128] = 0;
        v56[136] = 0;
        v56[288] = 0;
        v56[296] = 0;
        v56[300] = 0;
        v56[304] = 0;
        v56[336] = 0;
        v56[344] = 0;
        v56[348] = 0;
        v56[352] = 0;
        v56[376] = 0;
        v56[384] = 0;
        v56[408] = 0;
        v56[416] = 0;
        v56[448] = 0;
        v57 = 1;
        v50 = (uint64_t)v52;
        if (*(_BYTE *)(a1 + 488))
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction(v52);
          *(_BYTE *)(a1 + 488) = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction(v50, (uint64_t)v56);
        *(_BYTE *)(a1 + 488) = 1;
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v56);
        goto LABEL_94;
      }
      *(_QWORD *)(a1 + 1200) = v28;
      v29 = *(_DWORD *)(v55 + 4 * v28);
      if (!v29)
      {
        *(_BYTE *)(a1 + 1000) = 0;
        *(_BYTE *)(a1 + 1024) = 0;
        goto LABEL_53;
      }
      v30 = (_QWORD *)(*(_QWORD *)(a1 + 1152) + 160);
      if (v29 == 1)
        v31 = "X-Apple-MD-Action";
      else
        v31 = "X-Apple-AMD-Action";
      if (v29 == 1)
        v32 = 17;
      else
        v32 = 18;
      *(_BYTE *)(a1 + 559) = v32;
      memcpy(v4, v31, v32);
      *((_BYTE *)v4 + v32) = 0;
      AMSCore::IHTTPHeaderMap::getSingleValueOrNone(v5, v30, (char *)v4);
      if (*(char *)(a1 + 559) < 0)
      {
        operator delete(*(void **)v4);
        if (!*(_BYTE *)(a1 + 1024))
          goto LABEL_53;
      }
      else if (!*(_BYTE *)(a1 + 1024))
      {
        goto LABEL_53;
      }
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 1152) + 160);
      if (v29 == 1)
        v34 = "X-Apple-MD-Data";
      else
        v34 = "X-Apple-AMD-Data";
      if (v29 == 1)
        v35 = 15;
      else
        v35 = 16;
      *(_BYTE *)(a1 + 1103) = v35;
      memcpy(v3, v34, v35);
      *((_BYTE *)v3 + v35) = 0;
      AMSCore::IHTTPHeaderMap::getSingleValueOrNone((std::string *)v4, v33, (char *)v3);
      if (*(char *)(a1 + 1103) < 0)
      {
        operator delete(*v3);
        if (!*(_BYTE *)(a1 + 560))
        {
LABEL_72:
          *(_QWORD *)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          goto LABEL_73;
        }
      }
      else if (!*(_BYTE *)(a1 + 560))
      {
        goto LABEL_72;
      }
      AMSCore::Base64::decode((uint64_t *)v4, (_QWORD *)v7);
      if (*(_BYTE *)(a1 + 560) && *(char *)(a1 + 559) < 0)
        operator delete(*(void **)v4);
LABEL_73:
      if (!*(_BYTE *)(a1 + 1024))
        break;
      v36 = *(_QWORD *)(a1 + 1176);
      v37 = *(_QWORD *)(a1 + 1168);
      v38 = *(char *)(a1 + 1023);
      if (v38 >= 0)
        v39 = (uint64_t)v5;
      else
        v39 = *(_QWORD *)(a1 + 1000);
      if (v38 >= 0)
        v40 = *(unsigned __int8 *)(a1 + 1023);
      else
        v40 = *(_QWORD *)(a1 + 1008);
      *(_OWORD *)v6 = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *v8 = 0;
      v8[1] = 0;
      *(_QWORD *)(a1 + 1120) = v37;
      *(_QWORD *)(a1 + 1128) = v36;
      if (v36)
      {
        v41 = (unint64_t *)(v36 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = *(_QWORD *)(a1 + 1192);
      *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a1 + 1184);
      *(_QWORD *)(a1 + 1144) = v43;
      if (v43)
      {
        v44 = (unint64_t *)(v43 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v46 = *(std::runtime_error *)v3;
      *((_OWORD *)v3 + 8) = *(_OWORD *)v3;
      *v3 = 0;
      v3[1] = 0;
      if (!atomic_load((unint64_t *)&v46.__vftable[20]))
      {
        *((_BYTE *)v3 + 160) = 0;
        v48 = (unint64_t *)((char *)v3[16] + 480);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(a1, v48));
        if (!v49)
          return;
      }
      v1 = v3[16];
    }
    while (v1[472]);
  }
  __break(1u);
}

void sub_18CC5B3F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  uint64_t v16;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a11);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a12);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v16);
  if (v12[1055] < 0)
    operator delete(*v15);
  if (v12[1079] < 0)
    operator delete(*v14);
  if (v12[1024])
  {
    if (v12[1023] < 0)
      operator delete(*v13);
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_18CC5B470()
{
  uint64_t v0;

  if ((*(char *)(v0 + 559) & 0x80000000) == 0)
    JUMPOUT(0x18CC5B464);
  JUMPOUT(0x18CC5B45CLL);
}

void AMSCore::AnisetteUtils::handleActions(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;

  if (!*(_QWORD *)__p)
    goto LABEL_31;
  v2 = *((_QWORD *)__p + 152);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 152);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 136);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 143);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 141);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 139);
  if (!v15)
    goto LABEL_26;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_26:
    if ((__p[1055] & 0x80000000) == 0)
      goto LABEL_27;
LABEL_64:
    operator delete(*((void **)__p + 129));
    if ((__p[1079] & 0x80000000) == 0)
      goto LABEL_28;
LABEL_65:
    operator delete(*((void **)__p + 132));
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (__p[1055] < 0)
    goto LABEL_64;
LABEL_27:
  if (__p[1079] < 0)
    goto LABEL_65;
LABEL_28:
  *((_QWORD *)__p + 153) = 0;
  if (__p[1024] && __p[1023] < 0)
    operator delete(*((void **)__p + 125));
LABEL_31:
  v18 = (char *)*((_QWORD *)__p + 66);
  if (v18 == __p + 504)
  {
    v19 = 4;
    v18 = __p + 504;
  }
  else
  {
    if (!v18)
      goto LABEL_36;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_36:
  if (__p[488])
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  v20 = *((_QWORD *)__p + 149);
  do
  {
    v21 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v22)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v20)
  {
    v23 = (unint64_t *)(*((_QWORD *)__p + 149) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      v25 = (std::__shared_weak_count *)*((_QWORD *)__p + 149);
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v26 = *((_QWORD *)__p + 147);
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      v29 = (std::__shared_weak_count *)*((_QWORD *)__p + 147);
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v30 = *((_QWORD *)__p + 153);
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = (std::__shared_weak_count *)*((_QWORD *)__p + 153);
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v34 = *((_QWORD *)__p + 145);
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      v37 = (std::__shared_weak_count *)*((_QWORD *)__p + 145);
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  operator delete(__p);
}

_QWORD *std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E25234C8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CC5B7C8(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 480);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CC5B7FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMSCore::AnisetteUtils::`anonymous namespace'::handleAction(std::runtime_error *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, uint64_t *a7, std::__libcpp_refstring *p_imp)
{
  char *v16;
  unint64_t v17;
  uint64_t v18;
  std::runtime_error *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  unsigned int v24;
  AMSCore::HTTPResponseAction *v25;
  std::system_error_vtbl *v26;
  std::runtime_error_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  std::runtime_error_vtbl *v30;
  std::runtime_error_vtbl *v31;
  std::ios_base *v32;
  uint64_t v33;
  void (__cdecl *v34)(std::runtime_error *__hidden);
  unsigned __int8 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _WORD *v44;
  std::system_error_vtbl *v45;
  uint64_t v46;
  std::runtime_error_vtbl *v47;
  uint64_t v48;
  uint64_t v49;
  std::runtime_error_vtbl *v50;
  std::runtime_error_vtbl *v51;
  std::ios_base *v52;
  uint64_t v53;
  void (__cdecl *v54)(std::runtime_error *__hidden);
  unsigned __int8 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  AMSCore::HTTPResponseAction *v59;
  std::__shared_weak_count *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::system_error *p_p;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  char *v71;
  unint64_t v72;
  std::runtime_error *v73;
  std::runtime_error *v74;
  std::string *v75;
  _DWORD *v76;
  unsigned int *v77;
  __int128 v78;
  __int128 v79;
  unsigned int v80;
  unsigned int v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  std::string::size_type v86;
  const std::string::value_type *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::runtime_error v97;
  unint64_t *v99;
  unint64_t v100;
  std::runtime_error_vtbl *v101;
  char v102;
  std::runtime_error_vtbl *v103;
  void (__cdecl *v104)(std::runtime_error *__hidden);
  void (__cdecl *v105)(std::runtime_error *__hidden);
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::system_error_vtbl *v129;
  uint64_t v130;
  uint64_t v131;
  std::system_error_vtbl *v132;
  std::system_error_vtbl *v133;
  std::ios_base *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  char v140;
  unint64_t *p_shared_owners;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  char *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::string *v157;
  uint64_t v158;
  std::runtime_error v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  __int128 v180;
  char *v181;
  unint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  unsigned int v189;
  char *v190;
  std::runtime_error *v191;
  char *v192;
  _OWORD *v193;
  _OWORD *v194;
  uint64_t v195;
  unsigned int v196;
  void (***v197)(uint64_t);
  uint64_t v198;
  std::system_error_vtbl *v199;
  uint64_t v200;
  std::system_error_vtbl *v201;
  std::system_error_vtbl *v202;
  std::ios_base *v203;
  uint64_t v204;
  void (__cdecl *v205)(std::system_error *__hidden);
  unsigned __int8 v206;
  std::string *v207;
  std::string::size_type size;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  BOOL v218;
  std::error_code v219;
  unsigned int *v220;
  unsigned int **v221;
  char *v222;
  uint64_t v223;
  unsigned int *v224;
  __int128 v225;
  int v226;
  char *v227;
  unint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  int v232;
  uint64_t v233;
  char v234;
  unsigned int v235;
  char *v236;
  unint64_t v237;
  uint64_t *v238;
  _QWORD *v239;
  uint64_t *v240;
  int v241;
  uint64_t v242;
  _QWORD *v243;
  unsigned int v244;
  std::runtime_error *v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  _QWORD *v249;
  __int128 v250;
  unint64_t v251;
  AMSCore::HTTPResponseAction *v252;
  char *v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  char v257;
  std::string *v258;
  _QWORD *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unsigned int *v263;
  unsigned int **v264;
  char *v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::runtime_error v270;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  char v275;
  _QWORD *v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  char *v288;
  char *v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::runtime_error v296;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  unsigned int *v323;
  unsigned int *v324;
  unsigned int **v325;
  unint64_t v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::runtime_error v331;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  char v336;
  _QWORD *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  char *v355;
  char *v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  __int128 v363;
  unint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  unint64_t *v381;
  __int128 *v382;
  char v383;
  char *v384;
  char *v385;
  AMSCore::HTTPResponseAction *v386;
  std::runtime_error *v387;
  __int128 v388;
  char v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  void **v396;
  int v397;
  char *v398;
  __int128 *v399;
  uint64_t v400;
  char *v401;
  char *v402;
  std::runtime_error v403;
  char v404;
  char *v405;
  char *v406;
  char *v407;
  char *v408;
  char *v409;
  __int128 *v410;
  void **v411;
  char *v412;
  char *v413;
  __int128 v414;
  void **v415;
  std::string *v416;
  std::string *v417;
  std::string *v418;
  char *v419;
  char *v420;
  char *v421;
  AMSCore::HTTPResponseAction *imp;
  AMSCore::HTTPResponseAction *v423;
  AMSCore::HTTPResponseAction *v424;
  AMSCore::HTTPResponseAction *v425;
  void **v426;
  std::string *v427;
  std::string *v428;
  std::string *v429;
  std::string *v430;
  std::runtime_error *v431;
  std::runtime_error *v432;
  std::runtime_error *v433;
  std::runtime_error *v434;
  std::runtime_error *v435;
  std::runtime_error *v436;
  std::runtime_error *v437;
  char v438;
  uint64_t *v439;
  AMSCore::HTTPResponseAction *v440;
  AMSCore::HTTPResponseAction *v441;
  AMSCore::HTTPResponseAction *v442;
  char *v443;
  uint64_t v444;
  std::runtime_error **v445;
  void **v446;
  std::runtime_error *v447;
  const char *v448;
  uint64_t *v449;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t *v454;
  std::runtime_error *v455;
  char *v456;
  std::runtime_error v457;
  char v458;
  std::runtime_error *v459;
  std::runtime_error *v460;
  std::runtime_error *v461;
  char *v462;
  AMSCore::HTTPResponseAction *v463;
  std::string v464;
  uint64_t v465;
  std::__shared_weak_count *v466;
  std::runtime_error v467;
  std::error_code v468;
  unsigned int **v469;
  unsigned int *v470;
  uint64_t v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  int v475;
  _QWORD v476[2];
  char v477;
  char v478;
  char v479;
  char v480;
  char v481;
  char v482;
  char v483;
  char v484;
  char v485;
  __int128 v486;
  uint64_t v487;
  char v488;
  __int128 v489;
  std::string::size_type v490;
  char v491;
  _BYTE v492[32];
  char v493;
  int v494;
  std::system_error __what_arg;
  unsigned int **v496;
  unsigned int *v497;
  uint64_t v498;
  __int128 v499;
  uint64_t v500;
  std::system_error __p;
  unsigned int **v502;
  unsigned int *v503;
  uint64_t v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  int v508;
  _QWORD v509[2];
  uint64_t v510;
  uint64_t v511;
  std::error_code v512;
  std::error_code v513;

  v511 = *MEMORY[0x1E0C80C00];
  v16 = (char *)operator new(0x5A0uLL);
  v17 = (unint64_t)v16;
  *((_QWORD *)v16 + 161) = a2;
  v443 = v16 + 1176;
  v463 = (AMSCore::HTTPResponseAction *)(v16 + 536);
  *((_QWORD *)v16 + 162) = a3;
  v427 = (std::string *)(v16 + 1000);
  v416 = (std::string *)(v16 + 1064);
  v419 = v16 + 1152;
  v18 = a4[1];
  v19 = (std::runtime_error *)(v16 + 1192);
  v453 = *a4;
  *((_QWORD *)v16 + 165) = *a4;
  v409 = v16 + 1224;
  v412 = v16 + 1208;
  v405 = v16 + 1128;
  v407 = v16 + 1240;
  *((_QWORD *)v16 + 163) = v18;
  v398 = v16 + 1256;
  v401 = v16 + 1272;
  v20 = v16 + 1304;
  *(_QWORD *)(v16 + 1311) = *(uint64_t *)((char *)a4 + 15);
  v458 = *((_BYTE *)a4 + 23);
  v16[1436] = v458;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v431 = *(std::runtime_error **)a5;
  v444 = *(_QWORD *)(a5 + 8);
  *((_QWORD *)v16 + 166) = v444;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *((_DWORD *)v16 + 358) = a6;
  v21 = *a7;
  v22 = a7[1];
  *((_QWORD *)v16 + 167) = v22;
  *a7 = 0;
  a7[1] = 0;
  imp = (AMSCore::HTTPResponseAction *)p_imp->__imp_;
  v23 = p_imp[1].__imp_;
  p_imp->__imp_ = 0;
  p_imp[1].__imp_ = 0;
  v448 = v23;
  *((_QWORD *)v16 + 168) = v23;
  do
    v24 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v24 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v16[24] = 0;
  v25 = (AMSCore::HTTPResponseAction *)(v16 + 24);
  v16[488] = 0;
  *((_QWORD *)v16 + 62) = 0;
  *((_QWORD *)v16 + 66) = 0;
  v462 = v16 + 16;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v467, (uint64_t)(v16 + 16));
  *a1 = v467;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__what_arg);
  v26 = __what_arg.__vftable;
  v434 = v19;
  if (SLODWORD(__what_arg.~system_error_0) <= 2)
  {
    v393 = v21;
    v395 = v22;
    v27 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v28 = MEMORY[0x1E0DE4FE0] + 64;
    p_imp = &v467.__imp_;
    v29 = MEMORY[0x1E0DE4F60];
    v30 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v31 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v476[0] = MEMORY[0x1E0DE4FE0] + 64;
    v467.__vftable = v30;
    *(std::runtime_error_vtbl **)((char *)&v467.__vftable + (unint64_t)v30[-1].~runtime_error) = v31;
    v32 = (std::ios_base *)((char *)&v467 + (unint64_t)v467.__vftable[-1].~runtime_error);
    std::ios_base::init(v32, &v467.__imp_);
    v32[1].__vftable = 0;
    v32[1].__fmtflags_ = -1;
    v467.__vftable = v27 + 1;
    v476[0] = v28;
    std::streambuf::basic_streambuf();
    v33 = MEMORY[0x1E0DE4FB8];
    v467.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    v473 = 0u;
    v474 = 0u;
    v475 = 16;
    v34 = v467.__vftable[-1].~runtime_error;
    if ((v35 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v467, (uint64_t)"Handing Anisette action.", 24);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v467, (uint64_t)" action = ", 10);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v467, *(_QWORD *)(v17 + 1288), *(_QWORD *)(v17 + 1296));
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v467, (uint64_t)" | type = ", 10);
    v36 = *(_DWORD *)(v17 + 1432);
    if (v36 == 2)
    {
      v37 = 11;
      *((_BYTE *)&__p.__ec_.__val_ + 7) = 11;
      strcpy((char *)&__p, "Version 1.5");
    }
    else if (v36 == 1)
    {
      v37 = 9;
      *((_BYTE *)&__p.__ec_.__val_ + 7) = 9;
      strcpy((char *)&__p, "Version 1");
    }
    else
    {
      v37 = 4;
      *((_BYTE *)&__p.__ec_.__val_ + 7) = 4;
      strcpy((char *)&__p, "None");
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v467, (uint64_t)&__p, v37);
    if (*((char *)&__p.__ec_.__val_ + 7) < 0)
      operator delete(__p.__vftable);
    v38 = v471;
    v39 = (char *)&v467 + (unint64_t)v467.__vftable[-1].~runtime_error;
    if ((v39[32] & 5) != 0)
    {
      v40 = -1;
    }
    else
    {
      (*(void (**)(std::system_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v39 + 5)
                                                                                                + 32))(&__p, *((_QWORD *)v39 + 5), 0, 1, 16);
      v40 = v510;
    }
    __p.__vftable = (std::system_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(__p.__imp_.__imp_) = 2;
    *(_QWORD *)&__p.__ec_.__val_ = v38;
    __p.__ec_.__cat_ = (const std::error_category *)v40;
    (*(void (**)(const char *(__cdecl *)(const std::runtime_error *__hidden), const char *, uint64_t, std::system_error *))(*(_QWORD *)v26->what + 16))(v26->what, "networking", 10, &__p);
    v467.__vftable = *(std::runtime_error_vtbl **)v29;
    *(std::runtime_error_vtbl **)((char *)&v467.__vftable + (unint64_t)v467.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v29 + 24);
    v467.__imp_.__imp_ = (const char *)(v33 + 16);
    if (SBYTE7(v474) < 0)
      operator delete((void *)v473);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v476);
    v19 = v434;
    v25 = (AMSCore::HTTPResponseAction *)(v17 + 24);
    v21 = v393;
    v22 = v395;
  }
  v41 = (std::__shared_weak_count *)__what_arg.__imp_.__imp_;
  if (__what_arg.__imp_.__imp_)
  {
    v42 = (unint64_t *)(__what_arg.__imp_.__imp_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  AMSCore::ServiceProvider<AMSCore::IAnisetteProvider>::getDefault(v19);
  if (!v19->__vftable)
  {
    AMSCore::StringUtils::join<char [27]>((std::string *)&__what_arg, "Anisette is not available.");
    v512.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v512.__val_ = 8;
    std::system_error::system_error(&__p, v512, (const std::string *)&__what_arg);
    v59 = v463;
    if (*((char *)&__what_arg.__ec_.__val_ + 7) < 0)
      operator delete(__what_arg.__vftable);
    v504 = 0;
    v503 = 0;
    __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v502 = &v503;
    v505 = 0uLL;
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v467, &__p);
    if (*(_BYTE *)(v17 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v25);
      *(_BYTE *)(v17 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v25, (uint64_t)&v467);
    *(_BYTE *)(v17 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v467);
    __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v505 + 1);
    v62 = v444;
    v61 = v448;
    v63 = v453;
    if (*((_QWORD *)&v505 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v505 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v502, v503);
    p_p = &__p;
    goto LABEL_134;
  }
  if (*(_QWORD *)(v17 + 1296) != 2)
  {
LABEL_28:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__what_arg);
    v45 = __what_arg.__vftable;
    if (SLODWORD(__what_arg.~system_error_0) <= 4)
    {
      v46 = v22;
      v47 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v48 = MEMORY[0x1E0DE4FE0] + 64;
      v49 = MEMORY[0x1E0DE4F60];
      v50 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v51 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v476[0] = MEMORY[0x1E0DE4FE0] + 64;
      v467.__vftable = v50;
      *(std::runtime_error_vtbl **)((char *)&v467.__vftable + (unint64_t)v50[-1].~runtime_error) = v51;
      v52 = (std::ios_base *)((char *)&v467 + (unint64_t)v467.__vftable[-1].~runtime_error);
      std::ios_base::init(v52, &v467.__imp_);
      v52[1].__vftable = 0;
      v52[1].__fmtflags_ = -1;
      v467.__vftable = v47 + 1;
      v476[0] = v48;
      std::streambuf::basic_streambuf();
      v53 = MEMORY[0x1E0DE4FB8];
      v467.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      v473 = 0u;
      v474 = 0u;
      v475 = 16;
      v54 = v467.__vftable[-1].~runtime_error;
      if ((v55 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v467, (uint64_t)"Encountered an unrecognized Anisette action.", 44);
      v56 = v471;
      v57 = (char *)&v467 + (unint64_t)v467.__vftable[-1].~runtime_error;
      if ((v57[32] & 5) != 0)
      {
        v58 = -1;
      }
      else
      {
        (*(void (**)(std::system_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v57 + 5)
                                                                                                  + 32))(&__p, *((_QWORD *)v57 + 5), 0, 1, 16);
        v58 = v510;
      }
      __p.__vftable = (std::system_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(__p.__imp_.__imp_) = 4;
      *(_QWORD *)&__p.__ec_.__val_ = v56;
      __p.__ec_.__cat_ = (const std::error_category *)v58;
      (*(void (**)(const char *(__cdecl *)(const std::runtime_error *__hidden), const char *, uint64_t, std::system_error *))(*(_QWORD *)v45->what + 16))(v45->what, "networking", 10, &__p);
      v467.__vftable = *(std::runtime_error_vtbl **)v49;
      *(std::runtime_error_vtbl **)((char *)&v467.__vftable + (unint64_t)v467.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v49 + 24);
      v467.__imp_.__imp_ = (const char *)(v53 + 16);
      if (SBYTE7(v474) < 0)
        operator delete((void *)v473);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v476);
      v22 = v46;
    }
    v126 = (std::__shared_weak_count *)__what_arg.__imp_.__imp_;
    if (__what_arg.__imp_.__imp_)
    {
      v127 = (unint64_t *)(__what_arg.__imp_.__imp_ + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v129 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v130 = MEMORY[0x1E0DE4FE0] + 64;
    v131 = MEMORY[0x1E0DE4F60];
    v132 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v133 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v509[0] = MEMORY[0x1E0DE4FE0] + 64;
    __p.__vftable = v132;
    *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)v132[-1].~system_error) = v133;
    v134 = (std::ios_base *)((char *)&__p + (unint64_t)__p.__vftable[-1].~system_error);
    std::ios_base::init(v134, &__p.__imp_);
    v134[1].__vftable = 0;
    v134[1].__fmtflags_ = -1;
    __p.__vftable = v129 + 1;
    v509[0] = v130;
    std::streambuf::basic_streambuf();
    v135 = MEMORY[0x1E0DE4FB8];
    __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    v506 = 0u;
    v507 = 0u;
    v508 = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encountered an unrecognized Anisette action. action = ", 54);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, *(_QWORD *)(v17 + 1288), *(_QWORD *)(v17 + 1296));
    std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, &v464);
    __p.__vftable = *(std::system_error_vtbl **)v131;
    *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)__p.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v131 + 24);
    __p.__imp_.__imp_ = (const char *)(v135 + 16);
    if (SBYTE7(v507) < 0)
      operator delete((void *)v506);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v509);
    v513.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v513.__val_ = 3;
    std::system_error::system_error(&__what_arg, v513, &v464);
    v59 = v463;
    if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v464.__r_.__value_.__l.__data_);
    v498 = 0;
    v497 = 0;
    __what_arg.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v496 = &v497;
    v499 = 0uLL;
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v467, &__what_arg);
    if (*(_BYTE *)(v17 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v25);
      *(_BYTE *)(v17 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v25, (uint64_t)&v467);
    *(_BYTE *)(v17 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v467);
    __what_arg.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v136 = (std::__shared_weak_count *)*((_QWORD *)&v499 + 1);
    v62 = v444;
    v61 = v448;
    v63 = v453;
    if (*((_QWORD *)&v499 + 1))
    {
      v137 = (unint64_t *)(*((_QWORD *)&v499 + 1) + 8);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v496, v497);
    p_p = &__what_arg;
LABEL_134:
    MEMORY[0x18D7898AC](p_p);
    v139 = *(std::__shared_weak_count **)(v17 + 1200);
    v140 = v458;
    if (!v139)
      goto LABEL_545;
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v142 = __ldaxr(p_shared_owners);
    while (__stlxr(v142 - 1, p_shared_owners));
    goto LABEL_543;
  }
  v44 = *(_WORD **)(v17 + 1288);
  if (*v44 == 20562)
  {
    v67 = ((uint64_t (*)(std::runtime_error *))v431->__vftable[3].~runtime_error)(v431);
    v68 = v67;
    *(_BYTE *)(v17 + 1000) = 0;
    *(_BYTE *)(v17 + 1024) = 0;
    if (*(_BYTE *)(v67 + 24))
    {
      if (*(char *)(v67 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v427, *(const std::string::value_type **)v67, *(_QWORD *)(v67 + 8));
      }
      else
      {
        v69 = *(_OWORD *)v67;
        v427->__r_.__value_.__r.__words[2] = *(_QWORD *)(v67 + 16);
        *(_OWORD *)&v427->__r_.__value_.__l.__data_ = v69;
      }
      *(_BYTE *)(v17 + 1024) = 1;
    }
    *(_QWORD *)(v17 + 1032) = *(_QWORD *)(v68 + 32);
    if (*(char *)(v68 + 63) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v17 + 1040), *(const std::string::value_type **)(v68 + 40), *(_QWORD *)(v68 + 48));
    }
    else
    {
      v180 = *(_OWORD *)(v68 + 40);
      *(_QWORD *)(v17 + 1056) = *(_QWORD *)(v68 + 56);
      *(_OWORD *)(v17 + 1040) = v180;
    }
    v446 = (void **)(v17 + 1040);
    v450 = *(_DWORD *)(v17 + 1432);
    v181 = (char *)operator new(0x358uLL);
    v182 = (unint64_t)v181;
    v410 = (__int128 *)(v181 + 688);
    v183 = v181 + 792;
    v184 = v181 + 808;
    v459 = (std::runtime_error *)(v181 + 16);
    v185 = *(unsigned __int8 *)(v17 + 1024);
    v181[823] = v185;
    v441 = v25;
    if (v185)
    {
      v186 = *(_QWORD *)(v17 + 1000);
      *v183 = *(_QWORD *)(v17 + 1008);
      *(_QWORD *)(v181 + 799) = *(_QWORD *)(v17 + 1015);
      LOBYTE(p_imp) = *(_BYTE *)(v17 + 1023);
      v427->__r_.__value_.__l.__size_ = 0;
      v427->__r_.__value_.__r.__words[2] = 0;
      v427->__r_.__value_.__r.__words[0] = 0;
    }
    else
    {
      v186 = 0;
    }
    v455 = (std::runtime_error *)(v181 + 776);
    v413 = v181 + 616;
    v418 = (std::string *)(v181 + 728);
    v420 = v181 + 752;
    v432 = (std::runtime_error *)(v181 + 536);
    v436 = *(std::runtime_error **)(v17 + 1032);
    v187 = *(_QWORD *)(v17 + 1040);
    *v184 = *(_QWORD *)(v17 + 1048);
    *(_QWORD *)(v181 + 815) = *(_QWORD *)(v17 + 1055);
    v188 = *(_BYTE *)(v17 + 1063);
    *v446 = 0;
    *(_QWORD *)(v17 + 1048) = 0;
    *(_QWORD *)(v17 + 1056) = 0;
    do
      v189 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    while (__stlxr(v189 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
    v181[24] = 0;
    v181[488] = 0;
    *((_QWORD *)v181 + 62) = 0;
    v424 = (AMSCore::HTTPResponseAction *)(v181 + 24);
    *((_QWORD *)v181 + 66) = 0;
    std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v467, (uint64_t)v459);
    *(std::runtime_error *)v443 = v467;
    *(_BYTE *)(v182 + 616) = 0;
    *(_BYTE *)(v182 + 640) = 0;
    if (v185)
    {
      *(_QWORD *)(v182 + 616) = v186;
      *(_QWORD *)(v182 + 624) = *v183;
      *(_QWORD *)(v182 + 631) = *(_QWORD *)((char *)v183 + 7);
      *(_BYTE *)(v182 + 639) = (_BYTE)p_imp;
      *v183 = 0;
      *(_QWORD *)((char *)v183 + 7) = 0;
      *(_BYTE *)(v182 + 640) = 1;
      v186 = 0;
      LOBYTE(p_imp) = 0;
    }
    v59 = v463;
    *(_BYTE *)(v182 + 848) = (_BYTE)p_imp;
    *(_QWORD *)(v182 + 824) = v186;
    *(_QWORD *)(v182 + 648) = v436;
    *(_QWORD *)(v182 + 656) = v187;
    *(_QWORD *)(v182 + 664) = *v184;
    *(_QWORD *)(v182 + 671) = *(_QWORD *)((char *)v184 + 7);
    *(_BYTE *)(v182 + 679) = v188;
    *v184 = 0;
    *(_QWORD *)((char *)v184 + 7) = 0;
    *(_BYTE *)(v182 + 680) = 1;
    v190 = (char *)operator new(0xF0uLL);
    v191 = v455;
    v192 = v190;
    v193 = (_OWORD *)(v182 + 656);
    *(_QWORD *)v190 = AMSCore::EraseProvisioningTask::perform;
    *((_QWORD *)v190 + 1) = AMSCore::EraseProvisioningTask::perform;
    v190[152] = 0;
    v194 = v190 + 152;
    v195 = (uint64_t)(v190 + 16);
    v190[216] = 0;
    if (*(_BYTE *)(v182 + 680))
    {
      v190[176] = 0;
      if (*(_BYTE *)(v182 + 640))
      {
        *v194 = *(_OWORD *)v413;
        *((_QWORD *)v190 + 21) = *((_QWORD *)v413 + 2);
        *((_QWORD *)v413 + 1) = 0;
        *((_QWORD *)v413 + 2) = 0;
        *(_QWORD *)v413 = 0;
        v190[176] = 1;
      }
      *((_QWORD *)v190 + 23) = *(_QWORD *)(v182 + 648);
      *((_OWORD *)v190 + 12) = *v193;
      *((_QWORD *)v190 + 26) = *(_QWORD *)(v182 + 672);
      *(_QWORD *)v193 = 0;
      *(_QWORD *)(v182 + 664) = 0;
      *(_QWORD *)(v182 + 672) = 0;
      v190[216] = 1;
    }
    do
      v196 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    while (__stlxr(v196 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
    v190[24] = 0;
    v197 = (void (***)(uint64_t))(v190 + 24);
    v190[104] = 0;
    *((_QWORD *)v190 + 14) = 0;
    *((_QWORD *)v190 + 18) = 0;
    std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v467, v195);
    *v455 = v467;
    v437 = (std::runtime_error *)v195;
    if (v450 == 2)
    {
      *((_BYTE *)&v464.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&v464, "Version 1.5");
    }
    else if (v450 == 1)
    {
      *((_BYTE *)&v464.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&v464, "Version 1");
    }
    else
    {
      *((_BYTE *)&v464.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v464, "None");
    }
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v465);
    v198 = v465;
    if (*(int *)(v465 + 8) <= 2)
    {
      v199 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v200 = MEMORY[0x1E0DE4FE0] + 64;
      v201 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v202 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v509[0] = MEMORY[0x1E0DE4FE0] + 64;
      __p.__vftable = v201;
      *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)v201[-1].~system_error) = v202;
      v203 = (std::ios_base *)((char *)&__p + (unint64_t)__p.__vftable[-1].~system_error);
      std::ios_base::init(v203, &__p.__imp_);
      v203[1].__vftable = 0;
      v203[1].__fmtflags_ = -1;
      __p.__vftable = v199 + 1;
      v509[0] = v200;
      std::streambuf::basic_streambuf();
      v204 = MEMORY[0x1E0DE4FB8];
      __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      v506 = 0u;
      v507 = 0u;
      v508 = 16;
      v205 = __p.__vftable[-1].~system_error;
      if ((v206 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Erasing provisioning. type = ", 29);
      if ((v464.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v207 = &v464;
      else
        v207 = (std::string *)v464.__r_.__value_.__r.__words[0];
      if ((v464.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v464.__r_.__value_.__r.__words[2]);
      else
        size = v464.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)v207, size);
      v209 = v504;
      v210 = (char *)&__p + (unint64_t)__p.__vftable[-1].~system_error;
      if ((v210[32] & 5) != 0)
      {
        v211 = -1;
      }
      else
      {
        (*(void (**)(std::system_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v210 + 5)
                                                                                                  + 32))(&__what_arg, *((_QWORD *)v210 + 5), 0, 1, 16);
        v211 = v500;
      }
      v467.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v467.__imp_.__imp_) = 2;
      *(_QWORD *)&v468.__val_ = v209;
      v468.__cat_ = (const std::error_category *)v211;
      (*(void (**)(_QWORD, const char *, uint64_t, std::runtime_error *))(**(_QWORD **)(v198 + 16) + 16))(*(_QWORD *)(v198 + 16), "networking", 10, &v467);
      __p.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E0DE4F60];
      *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)__p.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
      __p.__imp_.__imp_ = (const char *)(v204 + 16);
      if (SBYTE7(v507) < 0)
        operator delete((void *)v506);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v509);
      v59 = v463;
      v191 = v455;
    }
    v212 = v466;
    if (v466)
    {
      v213 = (unint64_t *)&v466->__shared_owners_;
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v464.__r_.__value_.__l.__data_);
    AMSCore::ServiceProvider<AMSCore::IAnisetteProvider>::getDefault(&v464);
    if (v464.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(std::runtime_error *__return_ptr, std::string::size_type, _OWORD *, _QWORD))(*(_QWORD *)v464.__r_.__value_.__l.__data_ + 24))(&v467, v464.__r_.__value_.__r.__words[0], v194, v450);
      if ((_BYTE)v473)
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__p);
        AMSCore::Logger::log<char [34]>((uint64_t)__p.__vftable, 2, (uint64_t)"networking", 10, "Successfully erased provisioning.");
        v215 = (std::__shared_weak_count *)__p.__imp_.__imp_;
        if (__p.__imp_.__imp_)
        {
          v216 = (unint64_t *)(__p.__imp_.__imp_ + 8);
          do
            v217 = __ldaxr(v216);
          while (__stlxr(v217 - 1, v216));
          if (!v217)
          {
            ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
            std::__shared_weak_count::__release_weak(v215);
          }
        }
        if (v192[104])
          v218 = v192[96] == 0;
        else
          v218 = 0;
        if (v218)
          (**v197)((uint64_t)(v192 + 24));
        v192[96] = 1;
        v192[104] = 1;
        if (!(_BYTE)v473)
LABEL_311:
          ((void (*)(std::runtime_error *))v467.~runtime_error)(&v467);
      }
      else
      {
        AMSCore::Error::Error(&__p, &v467);
        std::runtime_error::runtime_error(&__what_arg, &__p);
        __what_arg.__ec_ = __p.__ec_;
        __what_arg.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v224 = v503;
        v496 = v502;
        v497 = v503;
        v498 = v504;
        if (v504)
        {
          *((_QWORD *)v503 + 2) = &v497;
          v502 = &v503;
          v503 = 0;
          v504 = 0;
          v224 = 0;
        }
        else
        {
          v496 = &v497;
        }
        v499 = v505;
        v505 = 0uLL;
        __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v502, v224);
        MEMORY[0x18D7898AC](&__p);
        if (v192[104])
        {
          if (!v192[96])
            (**v197)((uint64_t)(v192 + 24));
          v192[104] = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(v192 + 24), &__what_arg);
        v263 = v497;
        v264 = v496;
        *((_QWORD *)v192 + 8) = v497;
        v265 = v192 + 64;
        *(std::error_code *)(v192 + 40) = __what_arg.__ec_;
        *((_QWORD *)v192 + 3) = off_1E2521330;
        *((_QWORD *)v192 + 7) = v264;
        v266 = v498;
        *((_QWORD *)v192 + 9) = v498;
        if (v266)
        {
          *((_QWORD *)v263 + 2) = v265;
          v263 = 0;
          v496 = &v497;
          v497 = 0;
          v498 = 0;
        }
        else
        {
          *((_QWORD *)v192 + 7) = v265;
        }
        v59 = v463;
        *((_OWORD *)v192 + 5) = v499;
        v499 = 0uLL;
        v192[96] = 0;
        v192[104] = 1;
        __what_arg.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v496, v263);
        MEMORY[0x18D7898AC](&__what_arg);
        v191 = v455;
        if (!(_BYTE)v473)
          goto LABEL_311;
      }
    }
    else
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[27]>((uint64_t)&v467, 3u, "Anisette is not available.");
      if (v192[104])
      {
        if (!v192[96])
          (**v197)((uint64_t)(v192 + 24));
        v192[104] = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(v192 + 24), &v467);
      v219 = v468;
      v221 = v469;
      v220 = v470;
      *((_QWORD *)v192 + 8) = v470;
      v222 = v192 + 64;
      *(std::error_code *)(v192 + 40) = v219;
      *((_QWORD *)v192 + 3) = off_1E2521330;
      *((_QWORD *)v192 + 7) = v221;
      v223 = v471;
      *((_QWORD *)v192 + 9) = v471;
      if (v223)
      {
        *((_QWORD *)v220 + 2) = v222;
        v469 = &v470;
        v470 = 0;
        v471 = 0;
        v220 = 0;
      }
      else
      {
        *((_QWORD *)v192 + 7) = v222;
      }
      *((_OWORD *)v192 + 5) = v472;
      v472 = 0uLL;
      v192[96] = 0;
      v192[104] = 1;
      v467.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v469, v220);
      MEMORY[0x18D7898AC](&v467);
    }
    v267 = (std::__shared_weak_count *)v464.__r_.__value_.__l.__size_;
    if (v464.__r_.__value_.__l.__size_)
    {
      v268 = (unint64_t *)(v464.__r_.__value_.__l.__size_ + 8);
      do
        v269 = __ldaxr(v268);
      while (__stlxr(v269 - 1, v268));
      if (!v269)
      {
        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
        std::__shared_weak_count::__release_weak(v267);
      }
    }
    *((_QWORD *)v192 + 28) = v437;
    *(_QWORD *)v192 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v192 + 224);
    v270 = *v191;
    *(std::runtime_error *)(v182 + 832) = *v191;
    v191->__vftable = 0;
    v191->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)&v270.__vftable[4]))
    {
      HIBYTE(v191[1].__imp_.__imp_) = 0;
      v272 = (unint64_t *)(*(_QWORD *)(v182 + 832) + 96);
      do
        v273 = __ldaxr(v272);
      while (__stlxr(v182, v272));
      if (!v273)
      {
LABEL_368:
        v296 = *(std::runtime_error *)v443;
        *((_OWORD *)v443 + 11) = *(_OWORD *)v443;
        *(_QWORD *)v443 = 0;
        *((_QWORD *)v443 + 1) = 0;
        if (atomic_load((unint64_t *)&v296.__vftable[20]))
          goto LABEL_372;
        v443[143] = 0;
        v298 = (unint64_t *)(*(_QWORD *)(v17 + 1352) + 480);
        do
          v299 = __ldaxr(v298);
        while (__stlxr(v17, v298));
        if (v299)
        {
LABEL_372:
          v300 = *((_QWORD *)v443 + 22);
          if (!*(_BYTE *)(v300 + 472))
            goto LABEL_554;
          AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v59, v300 + 8);
          if (*(_BYTE *)(v17 + 488))
          {
            AMSCore::HTTPResponseAction::~HTTPResponseAction(v441);
            *(_BYTE *)(v17 + 488) = 0;
          }
          AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v441, (uint64_t)v59);
          *(_BYTE *)(v17 + 488) = 1;
          AMSCore::HTTPResponseAction::~HTTPResponseAction(v59);
          v301 = *(_QWORD *)(v17 + 1360);
          if (v301)
          {
            v302 = (unint64_t *)(v301 + 8);
            do
              v303 = __ldaxr(v302);
            while (__stlxr(v303 - 1, v302));
            if (!v303)
            {
              v304 = *(std::__shared_weak_count **)(v17 + 1360);
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
            }
          }
          v305 = *(std::__shared_weak_count **)(v17 + 1184);
          if (v305)
          {
            v306 = (unint64_t *)&v305->__shared_owners_;
            do
              v307 = __ldaxr(v306);
            while (__stlxr(v307 - 1, v306));
            if (!v307)
            {
              ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
              std::__shared_weak_count::__release_weak(v305);
            }
          }
          if (*(char *)(v17 + 1063) < 0)
            operator delete(*v446);
          if (*(_BYTE *)(v17 + 1024) && *(char *)(v17 + 1023) < 0)
            operator delete(v427->__r_.__value_.__l.__data_);
          v61 = *(const char **)(v17 + 1344);
          v22 = *(_QWORD *)(v17 + 1336);
          v62 = *(_QWORD *)(v17 + 1328);
          v140 = *(_BYTE *)(v17 + 1436);
          v63 = *(_QWORD *)(v17 + 1320);
          v139 = *(std::__shared_weak_count **)(v17 + 1200);
          if (v139)
            goto LABEL_541;
LABEL_545:
          *(_QWORD *)(v17 + 1424) = v63;
          *(_BYTE *)(v17 + 1437) = v140;
          *(_QWORD *)(v17 + 1416) = v61;
          *(_QWORD *)(v17 + 1408) = v22;
          *(_QWORD *)(v17 + 1400) = v62;
          *(_QWORD *)(v17 + 536) = v462;
          *(_QWORD *)v17 = 0;
          AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v59);
        }
        return;
      }
    }
    v274 = *(_QWORD *)(v182 + 832);
    if (!*(_BYTE *)(v274 + 88))
      goto LABEL_554;
    v275 = *(_BYTE *)(v274 + 80);
    if (!v275)
    {
      std::runtime_error::runtime_error(v432, (const std::runtime_error *)(v274 + 8));
      *(_OWORD *)(v182 + 552) = *(_OWORD *)(v274 + 24);
      *(_QWORD *)(v182 + 536) = off_1E2521330;
      v276 = (_QWORD *)(v274 + 48);
      v277 = *(_QWORD *)(v274 + 48);
      *(_QWORD *)(v182 + 568) = *(_QWORD *)(v274 + 40);
      v278 = v182 + 576;
      *(_QWORD *)(v182 + 576) = v277;
      v279 = *(_QWORD *)(v274 + 56);
      *(_QWORD *)(v182 + 584) = v279;
      if (v279)
      {
        *(_QWORD *)(v277 + 16) = v278;
        *(_QWORD *)(v274 + 40) = v276;
        *v276 = 0;
        *(_QWORD *)(v274 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v182 + 568) = v278;
      }
      v280 = *(_QWORD *)(v182 + 832);
      *(_OWORD *)(v182 + 592) = *(_OWORD *)(v280 + 64);
      *(_QWORD *)(v280 + 64) = 0;
      *(_QWORD *)(v280 + 72) = 0;
    }
    *(_BYTE *)(v182 + 608) = v275;
    v281 = *(_QWORD *)(v182 + 840);
    if (v281)
    {
      v282 = (unint64_t *)(v281 + 8);
      do
        v283 = __ldaxr(v282);
      while (__stlxr(v283 - 1, v282));
      if (!v283)
      {
        v284 = *(std::__shared_weak_count **)(v182 + 840);
        ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
        std::__shared_weak_count::__release_weak(v284);
      }
    }
    v285 = *(std::__shared_weak_count **)(v182 + 784);
    if (v285)
    {
      v286 = (unint64_t *)&v285->__shared_owners_;
      do
        v287 = __ldaxr(v286);
      while (__stlxr(v287 - 1, v286));
      if (!v287)
      {
        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
        std::__shared_weak_count::__release_weak(v285);
      }
    }
    if (*(_BYTE *)(v182 + 680))
    {
      if (*(char *)(v182 + 679) < 0)
        operator delete(*(void **)(v182 + 656));
      if (*(_BYTE *)(v182 + 640) && *(char *)(v182 + 639) < 0)
        operator delete(*(void **)v413);
    }
    if (!*(_BYTE *)(v182 + 608))
    {
      (**(void (***)(std::runtime_error *))(v182 + 536))(v432);
      LOBYTE(v467.__vftable) = 0;
      LOBYTE(v468.__cat_) = 0;
      LOBYTE(v469) = 0;
      LOBYTE(v471) = 0;
      LOBYTE(v472) = 0;
      v477 = 0;
      v478 = 0;
      v479 = 0;
      v480 = 0;
      v481 = 0;
      v482 = 0;
      v483 = 0;
      v484 = 0;
      v485 = 0;
      LOBYTE(v486) = 0;
      v488 = 0;
      LOBYTE(v489) = 0;
      v491 = 0;
      v492[0] = 0;
      v493 = 0;
      v494 = 1;
      if (*(_BYTE *)(v182 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v424);
        *(_BYTE *)(v182 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v424, (uint64_t)&v467);
      *(_BYTE *)(v182 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v467);
      goto LABEL_367;
    }
    v288 = (char *)operator new(0x48uLL);
    *(_QWORD *)(v182 + 752) = v288;
    *(_QWORD *)(v182 + 768) = 0x8000000000000048;
    *(_QWORD *)(v182 + 760) = 64;
    strcpy(v288, "com.apple.AppleMediaServicesCore.AnisetteUtils.eraseProvisioning");
    v289 = (char *)operator new(0x20uLL);
    *(_QWORD *)(v182 + 728) = v289;
    *(_OWORD *)(v182 + 736) = xmmword_18CF51BA0;
    strcpy(v289, "Anisette (Erase Provisioning)");
    *(_BYTE *)(v182 + 688) = 0;
    *(_BYTE *)(v182 + 720) = 0;
    LOBYTE(v467.__vftable) = 0;
    LOBYTE(v468.__cat_) = 0;
    LOBYTE(v469) = 0;
    LOBYTE(v471) = 0;
    LOBYTE(v472) = 0;
    v477 = 0;
    v478 = 0;
    v479 = 0;
    v480 = 0;
    v481 = 0;
    v482 = 0;
    v483 = 0;
    v484 = 0;
    v485 = 0;
    v492[0] = 0;
    v493 = 0;
    v494 = 3;
    v486 = *(_OWORD *)v420;
    v487 = *((_QWORD *)v420 + 2);
    *(_QWORD *)v420 = 0;
    *((_QWORD *)v420 + 1) = 0;
    *((_QWORD *)v420 + 2) = 0;
    v488 = 1;
    v489 = *(_OWORD *)&v418->__r_.__value_.__l.__data_;
    v490 = v418->__r_.__value_.__r.__words[2];
    v418->__r_.__value_.__l.__size_ = 0;
    v418->__r_.__value_.__r.__words[2] = 0;
    v418->__r_.__value_.__r.__words[0] = 0;
    v491 = 1;
    std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v492, v410);
    if (*(_BYTE *)(v182 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v424);
      *(_BYTE *)(v182 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v424, (uint64_t)&v467);
    *(_BYTE *)(v182 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v467);
    if (*(_BYTE *)(v182 + 720))
    {
      v290 = *(std::__shared_weak_count **)(v182 + 712);
      if (v290)
      {
        v291 = (unint64_t *)&v290->__shared_owners_;
        do
          v292 = __ldaxr(v291);
        while (__stlxr(v292 - 1, v291));
        if (!v292)
        {
          ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
          std::__shared_weak_count::__release_weak(v290);
        }
      }
      v293 = *(std::__shared_weak_count **)(v182 + 696);
      if (v293)
      {
        v294 = (unint64_t *)&v293->__shared_owners_;
        do
          v295 = __ldaxr(v294);
        while (__stlxr(v295 - 1, v294));
        if (!v295)
        {
          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
          std::__shared_weak_count::__release_weak(v293);
        }
      }
    }
    if (*(char *)(v182 + 751) < 0)
    {
      operator delete(v418->__r_.__value_.__l.__data_);
      if ((*(char *)(v182 + 775) & 0x80000000) == 0)
      {
LABEL_359:
        if (!*(_BYTE *)(v182 + 608))
          goto LABEL_366;
        goto LABEL_367;
      }
    }
    else if ((*(char *)(v182 + 775) & 0x80000000) == 0)
    {
      goto LABEL_359;
    }
    operator delete(*(void **)v420);
    if (!*(_BYTE *)(v182 + 608))
LABEL_366:
      ((void (*)(std::runtime_error *))v432->~runtime_error)(v432);
LABEL_367:
    *(_QWORD *)(v182 + 536) = v459;
    *(_QWORD *)v182 = 0;
    AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v432);
    goto LABEL_368;
  }
  if (*v44 != 20563)
  {
    if (*v44 != 19795)
      goto LABEL_28;
    *(_QWORD *)(v17 + 1128) = v453;
    *(_QWORD *)(v17 + 1136) = *v20;
    *(_QWORD *)(v17 + 1143) = *(_QWORD *)((char *)v20 + 7);
    *(_BYTE *)(v17 + 1151) = v458;
    *v20 = 0;
    *(_QWORD *)((char *)v20 + 7) = 0;
    v143 = ((uint64_t (*)(std::runtime_error *))v431->__vftable[3].~runtime_error)(v431);
    v144 = v143;
    *(_BYTE *)(v17 + 1064) = 0;
    *(_BYTE *)(v17 + 1088) = 0;
    if (*(_BYTE *)(v143 + 24))
    {
      if (*(char *)(v143 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v416, *(const std::string::value_type **)v143, *(_QWORD *)(v143 + 8));
      }
      else
      {
        v145 = *(_OWORD *)v143;
        v416->__r_.__value_.__r.__words[2] = *(_QWORD *)(v143 + 16);
        *(_OWORD *)&v416->__r_.__value_.__l.__data_ = v145;
      }
      *(_BYTE *)(v17 + 1088) = 1;
    }
    *(_QWORD *)(v17 + 1096) = *(_QWORD *)(v144 + 32);
    if (*(char *)(v144 + 63) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v17 + 1104), *(const std::string::value_type **)(v144 + 40), *(_QWORD *)(v144 + 48));
    }
    else
    {
      v225 = *(_OWORD *)(v144 + 40);
      *(_QWORD *)(v17 + 1120) = *(_QWORD *)(v144 + 56);
      *(_OWORD *)(v17 + 1104) = v225;
    }
    v411 = (void **)(v17 + 1104);
    v226 = *(_DWORD *)(v17 + 1432);
    *(_QWORD *)(v17 + 1272) = v21;
    *(_QWORD *)(v17 + 1280) = v22;
    *(_QWORD *)(v17 + 1256) = imp;
    *(_QWORD *)(v17 + 1264) = v448;
    v227 = (char *)operator new(0x390uLL);
    v228 = (unint64_t)v227;
    v442 = v25;
    v451 = *(_QWORD *)(v17 + 1128);
    v229 = v227 + 840;
    v230 = v227 + 856;
    v231 = v227 + 872;
    v433 = (std::runtime_error *)(v227 + 16);
    *((_QWORD *)v227 + 105) = *(_QWORD *)(v17 + 1136);
    *(_QWORD *)(v227 + 847) = *(_QWORD *)(v17 + 1143);
    v438 = *(_BYTE *)(v17 + 1151);
    *((_QWORD *)v405 + 1) = 0;
    *((_QWORD *)v405 + 2) = 0;
    *(_QWORD *)v405 = 0;
    v232 = *(unsigned __int8 *)(v17 + 1088);
    v227[871] = v232;
    v382 = (__int128 *)(v227 + 680);
    v397 = v226;
    if (v232)
    {
      v233 = *(_QWORD *)(v17 + 1064);
      *v231 = *(_QWORD *)(v17 + 1072);
      *(_QWORD *)(v227 + 879) = *(_QWORD *)(v17 + 1079);
      LOBYTE(v25) = *(_BYTE *)(v17 + 1087);
      v416->__r_.__value_.__l.__size_ = 0;
      v416->__r_.__value_.__r.__words[2] = 0;
      v416->__r_.__value_.__r.__words[0] = 0;
    }
    else
    {
      v233 = 0;
    }
    v447 = (std::runtime_error *)(v227 + 792);
    v387 = (std::runtime_error *)(v227 + 536);
    v408 = v227 + 616;
    v425 = *(AMSCore::HTTPResponseAction **)(v17 + 1104);
    v429 = *(std::string **)(v17 + 1096);
    v384 = v227 + 720;
    v385 = v227 + 744;
    v421 = v227 + 768;
    v456 = v227 + 808;
    *v230 = *(_QWORD *)(v17 + 1112);
    v460 = (std::runtime_error *)(v227 + 824);
    *(_QWORD *)(v227 + 863) = *(_QWORD *)(v17 + 1119);
    v234 = *(_BYTE *)(v17 + 1127);
    *v411 = 0;
    *(_QWORD *)(v17 + 1112) = 0;
    *(_QWORD *)(v17 + 1120) = 0;
    v414 = *(_OWORD *)v401;
    *(_QWORD *)v401 = 0;
    *((_QWORD *)v401 + 1) = 0;
    v403 = *(std::runtime_error *)v398;
    *(_QWORD *)v398 = 0;
    *((_QWORD *)v398 + 1) = 0;
    do
      v235 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    while (__stlxr(v235 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
    v227[24] = 0;
    v227[488] = 0;
    *((_QWORD *)v227 + 62) = 0;
    v386 = (AMSCore::HTTPResponseAction *)(v227 + 24);
    *((_QWORD *)v227 + 66) = 0;
    std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v467, (uint64_t)v433);
    *(std::runtime_error *)v443 = v467;
    *(_QWORD *)(v228 + 768) = v451;
    *(_QWORD *)(v228 + 776) = *v229;
    *(_QWORD *)(v228 + 783) = *(_QWORD *)((char *)v229 + 7);
    *(_BYTE *)(v228 + 791) = v438;
    *v229 = 0;
    *(_QWORD *)((char *)v229 + 7) = 0;
    *(_BYTE *)(v228 + 616) = 0;
    *(_BYTE *)(v228 + 640) = 0;
    if (v232)
    {
      *(_QWORD *)(v228 + 616) = v233;
      *(_QWORD *)(v228 + 624) = *v231;
      *(_QWORD *)(v228 + 631) = *(_QWORD *)((char *)v231 + 7);
      *(_BYTE *)(v228 + 639) = (_BYTE)v25;
      *v231 = 0;
      *(_QWORD *)((char *)v231 + 7) = 0;
      *(_BYTE *)(v228 + 640) = 1;
      v233 = 0;
      LOBYTE(v25) = 0;
    }
    *(_BYTE *)(v228 + 887) = (_BYTE)v25;
    *(_QWORD *)(v228 + 888) = v233;
    *(_QWORD *)(v228 + 648) = v429;
    *(_QWORD *)(v228 + 656) = v425;
    *(_QWORD *)(v228 + 664) = *v230;
    *(_QWORD *)(v228 + 671) = *(_QWORD *)((char *)v230 + 7);
    *(_BYTE *)(v228 + 679) = v234;
    *v230 = 0;
    *(_QWORD *)((char *)v230 + 7) = 0;
    *(_OWORD *)v456 = v414;
    *v460 = v403;
    v236 = (char *)operator new(0x1C0uLL);
    v237 = (unint64_t)v236;
    *(_QWORD *)v236 = AMSCore::SyncMachineTask::perform;
    *((_QWORD *)v236 + 1) = AMSCore::SyncMachineTask::perform;
    v400 = *(_QWORD *)(v228 + 768);
    v415 = (void **)(v228 + 656);
    v392 = (uint64_t *)(v236 + 320);
    v394 = (uint64_t *)(v236 + 336);
    v238 = (uint64_t *)(v236 + 368);
    v239 = v236 + 384;
    v240 = (uint64_t *)(v236 + 400);
    v452 = (uint64_t)(v236 + 16);
    *((_QWORD *)v236 + 46) = *(_QWORD *)(v228 + 776);
    *(_QWORD *)(v236 + 375) = *(_QWORD *)(v228 + 783);
    v404 = *(_BYTE *)(v228 + 791);
    *((_QWORD *)v421 + 1) = 0;
    *((_QWORD *)v421 + 2) = 0;
    *(_QWORD *)v421 = 0;
    v241 = *(unsigned __int8 *)(v228 + 640);
    v236[399] = v241;
    if (v241)
    {
      v242 = *(_QWORD *)(v228 + 616);
      *v240 = *(_QWORD *)(v228 + 624);
      *(_QWORD *)(v236 + 407) = *(_QWORD *)(v228 + 631);
      v383 = *(_BYTE *)(v228 + 639);
      *((_QWORD *)v408 + 1) = 0;
      *((_QWORD *)v408 + 2) = 0;
      *(_QWORD *)v408 = 0;
    }
    else
    {
      v242 = 0;
    }
    v396 = (void **)(v236 + 232);
    v426 = (void **)(v236 + 296);
    v430 = (std::string *)(v236 + 152);
    v390 = *(_QWORD *)(v228 + 656);
    v391 = *(_QWORD *)(v228 + 648);
    v243 = v236 + 352;
    v439 = (uint64_t *)(v236 + 416);
    *v239 = *(_QWORD *)(v228 + 664);
    *(_QWORD *)(v236 + 391) = *(_QWORD *)(v228 + 671);
    v389 = *(_BYTE *)(v228 + 679);
    *(_QWORD *)(v228 + 664) = 0;
    *(_QWORD *)(v228 + 672) = 0;
    *v415 = 0;
    v388 = *(_OWORD *)v456;
    *(_QWORD *)v456 = 0;
    *((_QWORD *)v456 + 1) = 0;
    v457 = *v460;
    v460->__vftable = 0;
    v460->__imp_.__imp_ = 0;
    do
      v244 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    while (__stlxr(v244 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
    v236[24] = 0;
    v236[104] = 0;
    *((_QWORD *)v236 + 14) = 0;
    v461 = (std::runtime_error *)(v236 + 24);
    *((_QWORD *)v236 + 18) = 0;
    std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v467, v452);
    v245 = v447;
    *v447 = v467;
    v246 = *v238;
    *(_QWORD *)(v237 + 296) = v400;
    *(_QWORD *)(v237 + 304) = v246;
    *(_QWORD *)(v237 + 311) = *(uint64_t *)((char *)v238 + 7);
    *(_BYTE *)(v237 + 319) = v404;
    *v238 = 0;
    *(uint64_t *)((char *)v238 + 7) = 0;
    *(_BYTE *)(v237 + 232) = 0;
    *(_BYTE *)(v237 + 256) = 0;
    if (v241)
    {
      v247 = *v240;
      *(_QWORD *)(v237 + 232) = v242;
      *(_QWORD *)(v237 + 240) = v247;
      *(_QWORD *)(v237 + 247) = *(uint64_t *)((char *)v240 + 7);
      *(_BYTE *)(v237 + 255) = v383;
      *v240 = 0;
      *(uint64_t *)((char *)v240 + 7) = 0;
      *(_BYTE *)(v237 + 256) = 1;
      v248 = 0;
      v242 = 0;
      v59 = v463;
    }
    else
    {
      v59 = v463;
      v248 = v383;
    }
    *(_QWORD *)(v237 + 424) = v242;
    *(_BYTE *)(v237 + 415) = v248;
    *(_QWORD *)(v237 + 264) = v391;
    *(_QWORD *)(v237 + 272) = v390;
    *(_QWORD *)(v237 + 280) = *v239;
    *(_QWORD *)(v237 + 287) = *(_QWORD *)((char *)v239 + 7);
    *(_BYTE *)(v237 + 295) = v389;
    *v239 = 0;
    *(_QWORD *)((char *)v239 + 7) = 0;
    *(std::runtime_error *)(v237 + 320) = v457;
    *(_OWORD *)(v237 + 336) = v388;
    v249 = (_QWORD *)operator new();
    *v249 = &off_1E2523CB8;
    *(_QWORD *)(v237 + 416) = v249;
    AMSCore::SyncMachineTask::internal::performImpl((_OWORD *)(v237 + 352), (uint64_t)v426, (uint64_t)v396, v397, v394, v392, v439);
    v250 = *(_OWORD *)(v237 + 352);
    *(_OWORD *)(v237 + 432) = v250;
    *v243 = 0;
    *(_QWORD *)(v237 + 360) = 0;
    v251 = atomic_load((unint64_t *)(v250 + 96));
    v252 = v442;
    v253 = v443;
    if (v251)
      goto LABEL_298;
    *(_BYTE *)(v237 + 383) = 0;
    v254 = (unint64_t *)(*(_QWORD *)(v237 + 432) + 96);
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v237, v254));
    if (v255)
    {
LABEL_298:
      v256 = *(_QWORD *)(v237 + 432);
      if (!*(_BYTE *)(v256 + 88))
        goto LABEL_554;
      v257 = *(_BYTE *)(v256 + 80);
      v258 = v430;
      if (!v257)
      {
        std::runtime_error::runtime_error((std::runtime_error *)v430, (const std::runtime_error *)(v256 + 8));
        *(_OWORD *)(v237 + 168) = *(_OWORD *)(v256 + 24);
        v259 = (_QWORD *)(v256 + 48);
        v260 = *(_QWORD *)(v256 + 48);
        *(_QWORD *)(v237 + 192) = v260;
        v261 = v237 + 192;
        *(_QWORD *)(v237 + 152) = off_1E2521330;
        *(_QWORD *)(v237 + 184) = *(_QWORD *)(v256 + 40);
        v262 = *(_QWORD *)(v256 + 56);
        *(_QWORD *)(v237 + 200) = v262;
        if (v262)
        {
          *(_QWORD *)(v260 + 16) = v261;
          *(_QWORD *)(v256 + 40) = v259;
          *v259 = 0;
          *(_QWORD *)(v256 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v237 + 184) = v261;
        }
        v308 = *(_QWORD *)(v237 + 432);
        *(_OWORD *)(v237 + 208) = *(_OWORD *)(v308 + 64);
        *(_QWORD *)(v308 + 64) = 0;
        *(_QWORD *)(v308 + 72) = 0;
      }
      *(_BYTE *)(v237 + 224) = v257;
      v309 = *(_QWORD *)(v237 + 440);
      if (v309)
      {
        v310 = (unint64_t *)(v309 + 8);
        do
          v311 = __ldaxr(v310);
        while (__stlxr(v311 - 1, v310));
        if (!v311)
        {
          v312 = *(std::__shared_weak_count **)(v237 + 440);
          ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
          std::__shared_weak_count::__release_weak(v312);
        }
      }
      v313 = *(std::__shared_weak_count **)(v237 + 360);
      if (v313)
      {
        v314 = (unint64_t *)&v313->__shared_owners_;
        do
          v315 = __ldaxr(v314);
        while (__stlxr(v315 - 1, v314));
        if (!v315)
        {
          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
          std::__shared_weak_count::__release_weak(v313);
        }
      }
      v316 = *v439;
      *v439 = 0;
      if (v316)
        (*(void (**)(uint64_t))(*(_QWORD *)v316 + 8))(v316);
      v317 = *(std::__shared_weak_count **)(v237 + 328);
      if (v317)
      {
        v318 = (unint64_t *)&v317->__shared_owners_;
        do
          v319 = __ldaxr(v318);
        while (__stlxr(v319 - 1, v318));
        if (!v319)
        {
          ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
          std::__shared_weak_count::__release_weak(v317);
        }
      }
      v320 = *(std::__shared_weak_count **)(v237 + 344);
      if (v320)
      {
        v321 = (unint64_t *)&v320->__shared_owners_;
        do
          v322 = __ldaxr(v321);
        while (__stlxr(v322 - 1, v321));
        if (!v322)
        {
          ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
          std::__shared_weak_count::__release_weak(v320);
        }
      }
      if (*(char *)(v237 + 295) < 0)
        operator delete(*(void **)(v237 + 272));
      if (*(_BYTE *)(v237 + 256) && *(char *)(v237 + 255) < 0)
        operator delete(*v396);
      if (*(char *)(v237 + 319) < 0)
        operator delete(*v426);
      AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v467, (uint64_t)v430, 652, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
      if ((_BYTE)v473)
      {
        std::runtime_error::runtime_error(&__p, &v467);
        __p.__ec_ = v468;
        __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v502 = v469;
        v503 = v470;
        v504 = v471;
        if (v471)
        {
          *((_QWORD *)v470 + 2) = &v503;
          v469 = &v470;
          v470 = 0;
          v471 = 0;
        }
        else
        {
          v502 = &v503;
        }
        v505 = v472;
        v472 = 0uLL;
        std::runtime_error::runtime_error(&__what_arg, &__p);
        __what_arg.__ec_ = __p.__ec_;
        __what_arg.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v323 = v503;
        v496 = v502;
        v497 = v503;
        v498 = v504;
        if (v504)
        {
          *((_QWORD *)v503 + 2) = &v497;
          v323 = 0;
          v502 = &v503;
          v503 = 0;
          v504 = 0;
        }
        else
        {
          v496 = &v497;
        }
        v499 = v505;
        v505 = 0uLL;
        __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v502, v323);
        MEMORY[0x18D7898AC](&__p);
        if (*(_BYTE *)(v237 + 104))
        {
          if (!*(_BYTE *)(v237 + 96))
            ((void (*)(std::runtime_error *))v461->~runtime_error)(v461);
          *(_BYTE *)(v237 + 104) = 0;
        }
        std::runtime_error::runtime_error(v461, &__what_arg);
        v324 = v497;
        v325 = v496;
        *(_QWORD *)(v237 + 64) = v497;
        v326 = v237 + 64;
        *(std::error_code *)(v237 + 40) = __what_arg.__ec_;
        *(_QWORD *)(v237 + 24) = off_1E2521330;
        *(_QWORD *)(v237 + 56) = v325;
        v327 = v498;
        *(_QWORD *)(v237 + 72) = v498;
        if (v327)
        {
          *((_QWORD *)v324 + 2) = v326;
          v324 = 0;
          v496 = &v497;
          v497 = 0;
          v498 = 0;
        }
        else
        {
          *(_QWORD *)(v237 + 56) = v326;
        }
        v258 = v430;
        *(_OWORD *)(v237 + 80) = v499;
        v499 = 0uLL;
        *(_BYTE *)(v237 + 96) = 0;
        *(_BYTE *)(v237 + 104) = 1;
        __what_arg.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v496, v324);
        MEMORY[0x18D7898AC](&__what_arg);
        if ((_BYTE)v473)
        {
          v467.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v328 = (std::__shared_weak_count *)*((_QWORD *)&v472 + 1);
          if (*((_QWORD *)&v472 + 1))
          {
            v329 = (unint64_t *)(*((_QWORD *)&v472 + 1) + 8);
            do
              v330 = __ldaxr(v329);
            while (__stlxr(v330 - 1, v329));
            if (!v330)
            {
              ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
              std::__shared_weak_count::__release_weak(v328);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v469, v470);
          MEMORY[0x18D7898AC](&v467);
        }
      }
      else
      {
        if (*(_BYTE *)(v237 + 104) && !*(_BYTE *)(v237 + 96))
          ((void (*)(std::runtime_error *))v461->~runtime_error)(v461);
        *(_BYTE *)(v237 + 96) = 1;
        *(_BYTE *)(v237 + 104) = 1;
      }
      v253 = v443;
      if (!*(_BYTE *)(v237 + 224))
        (*(void (**)(std::string *))v258->__r_.__value_.__l.__data_)(v258);
      *(_QWORD *)(v237 + 152) = v452;
      *(_QWORD *)v237 = 0;
      AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v258);
      v59 = v463;
      v252 = v442;
      v245 = v447;
    }
    v331 = *v245;
    *(std::runtime_error *)(v228 + 896) = *v245;
    v245->__vftable = 0;
    v245->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)&v331.__vftable[4]))
    {
      HIBYTE(v245[3].__imp_.__imp_) = 0;
      v333 = (unint64_t *)(*(_QWORD *)(v228 + 896) + 96);
      do
        v334 = __ldaxr(v333);
      while (__stlxr(v228, v333));
      if (!v334)
      {
LABEL_506:
        v363 = *(_OWORD *)v253;
        *((_OWORD *)v253 + 13) = *(_OWORD *)v253;
        *(_QWORD *)v253 = 0;
        *((_QWORD *)v253 + 1) = 0;
        if (atomic_load((unint64_t *)(v363 + 480)))
          goto LABEL_510;
        v253[143] = 2;
        v365 = (unint64_t *)(*(_QWORD *)(v17 + 1384) + 480);
        do
          v366 = __ldaxr(v365);
        while (__stlxr(v17, v365));
        if (v366)
        {
LABEL_510:
          v367 = *((_QWORD *)v253 + 26);
          if (*(_BYTE *)(v367 + 472))
          {
            AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v59, v367 + 8);
            if (*(_BYTE *)(v17 + 488))
            {
              AMSCore::HTTPResponseAction::~HTTPResponseAction(v252);
              *(_BYTE *)(v17 + 488) = 0;
            }
            AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v252, (uint64_t)v59);
            *(_BYTE *)(v17 + 488) = 1;
            AMSCore::HTTPResponseAction::~HTTPResponseAction(v59);
            v368 = *(_QWORD *)(v17 + 1392);
            if (v368)
            {
              v369 = (unint64_t *)(v368 + 8);
              do
                v370 = __ldaxr(v369);
              while (__stlxr(v370 - 1, v369));
              if (!v370)
              {
                v371 = *(std::__shared_weak_count **)(v17 + 1392);
                ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                std::__shared_weak_count::__release_weak(v371);
              }
            }
            v372 = *(std::__shared_weak_count **)(v17 + 1184);
            if (v372)
            {
              v373 = (unint64_t *)&v372->__shared_owners_;
              do
                v374 = __ldaxr(v373);
              while (__stlxr(v374 - 1, v373));
              if (!v374)
              {
                ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                std::__shared_weak_count::__release_weak(v372);
              }
            }
            v375 = *(std::__shared_weak_count **)(v17 + 1264);
            if (v375)
            {
              v376 = (unint64_t *)&v375->__shared_owners_;
              do
                v377 = __ldaxr(v376);
              while (__stlxr(v377 - 1, v376));
              if (!v377)
              {
                ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                std::__shared_weak_count::__release_weak(v375);
              }
            }
            v378 = *(std::__shared_weak_count **)(v17 + 1280);
            if (v378)
            {
              v379 = (unint64_t *)&v378->__shared_owners_;
              do
                v380 = __ldaxr(v379);
              while (__stlxr(v380 - 1, v379));
              if (!v380)
              {
                ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                std::__shared_weak_count::__release_weak(v378);
              }
            }
            if (*(char *)(v17 + 1127) < 0)
              operator delete(*v411);
            if (*(_BYTE *)(v17 + 1088) && *(char *)(v17 + 1087) < 0)
              operator delete(v416->__r_.__value_.__l.__data_);
            if (*(char *)(v17 + 1151) < 0)
              operator delete(*(void **)v405);
            v22 = 0;
            v61 = 0;
            v140 = 0;
            v63 = 0;
            v62 = *(_QWORD *)(v17 + 1328);
            v139 = *(std::__shared_weak_count **)(v17 + 1200);
            if (!v139)
              goto LABEL_545;
            goto LABEL_541;
          }
          goto LABEL_554;
        }
        return;
      }
    }
    v335 = *(_QWORD *)(v228 + 896);
    if (!*(_BYTE *)(v335 + 88))
      goto LABEL_554;
    v336 = *(_BYTE *)(v335 + 80);
    if (!v336)
    {
      std::runtime_error::runtime_error(v387, (const std::runtime_error *)(v335 + 8));
      *(_OWORD *)(v228 + 552) = *(_OWORD *)(v335 + 24);
      *(_QWORD *)(v228 + 536) = off_1E2521330;
      v337 = (_QWORD *)(v335 + 48);
      v338 = *(_QWORD *)(v335 + 48);
      *(_QWORD *)(v228 + 568) = *(_QWORD *)(v335 + 40);
      v339 = v228 + 576;
      *(_QWORD *)(v228 + 576) = v338;
      v340 = *(_QWORD *)(v335 + 56);
      *(_QWORD *)(v228 + 584) = v340;
      if (v340)
      {
        *(_QWORD *)(v338 + 16) = v339;
        *(_QWORD *)(v335 + 40) = v337;
        *v337 = 0;
        *(_QWORD *)(v335 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v228 + 568) = v339;
      }
      v341 = *(_QWORD *)(v228 + 896);
      *(_OWORD *)(v228 + 592) = *(_OWORD *)(v341 + 64);
      *(_QWORD *)(v341 + 64) = 0;
      *(_QWORD *)(v341 + 72) = 0;
    }
    *(_BYTE *)(v228 + 608) = v336;
    v342 = *(_QWORD *)(v228 + 904);
    if (v342)
    {
      v343 = (unint64_t *)(v342 + 8);
      do
        v344 = __ldaxr(v343);
      while (__stlxr(v344 - 1, v343));
      if (!v344)
      {
        v345 = *(std::__shared_weak_count **)(v228 + 904);
        ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
        std::__shared_weak_count::__release_weak(v345);
      }
    }
    v346 = *(std::__shared_weak_count **)(v228 + 800);
    if (v346)
    {
      v347 = (unint64_t *)&v346->__shared_owners_;
      do
        v348 = __ldaxr(v347);
      while (__stlxr(v348 - 1, v347));
      if (!v348)
      {
        ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
        std::__shared_weak_count::__release_weak(v346);
      }
    }
    v349 = *(std::__shared_weak_count **)(v228 + 832);
    if (v349)
    {
      v350 = (unint64_t *)&v349->__shared_owners_;
      do
        v351 = __ldaxr(v350);
      while (__stlxr(v351 - 1, v350));
      if (!v351)
      {
        ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
        std::__shared_weak_count::__release_weak(v349);
      }
    }
    v352 = *(std::__shared_weak_count **)(v228 + 816);
    if (v352)
    {
      v353 = (unint64_t *)&v352->__shared_owners_;
      do
        v354 = __ldaxr(v353);
      while (__stlxr(v354 - 1, v353));
      if (!v354)
      {
        ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
        std::__shared_weak_count::__release_weak(v352);
      }
    }
    if (*(char *)(v228 + 679) < 0)
      operator delete(*v415);
    if (*(_BYTE *)(v228 + 640) && *(char *)(v228 + 639) < 0)
      operator delete(*(void **)v408);
    if (*(char *)(v228 + 791) < 0)
      operator delete(*(void **)v421);
    if (!*(_BYTE *)(v228 + 608))
    {
      AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v467, v387);
      if (*(_BYTE *)(v228 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v386);
        *(_BYTE *)(v228 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v386, (uint64_t)&v467);
      *(_BYTE *)(v228 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v467);
      if (*(_BYTE *)(v228 + 608))
        goto LABEL_505;
      goto LABEL_550;
    }
    v355 = (char *)operator new(0x40uLL);
    *(_QWORD *)(v228 + 744) = v355;
    *(_OWORD *)(v228 + 752) = xmmword_18CF51B90;
    strcpy(v355, "com.apple.AppleMediaServicesCore.AnisetteUtils.syncMachine");
    v356 = (char *)operator new(0x19uLL);
    *(_QWORD *)(v228 + 720) = v356;
    *(_QWORD *)(v228 + 736) = 0x8000000000000019;
    *(_QWORD *)(v228 + 728) = 23;
    strcpy(v356, "Anisette (Sync Machine)");
    *(_BYTE *)(v228 + 680) = 0;
    *(_BYTE *)(v228 + 712) = 0;
    LOBYTE(v467.__vftable) = 0;
    LOBYTE(v468.__cat_) = 0;
    LOBYTE(v469) = 0;
    LOBYTE(v471) = 0;
    LOBYTE(v472) = 0;
    v477 = 0;
    v478 = 0;
    v479 = 0;
    v480 = 0;
    v481 = 0;
    v482 = 0;
    v483 = 0;
    v484 = 0;
    v485 = 0;
    v492[0] = 0;
    v493 = 0;
    v494 = 3;
    v486 = *(_OWORD *)v385;
    v487 = *((_QWORD *)v385 + 2);
    *(_QWORD *)v385 = 0;
    *((_QWORD *)v385 + 1) = 0;
    *((_QWORD *)v385 + 2) = 0;
    v488 = 1;
    v489 = *(_OWORD *)v384;
    v490 = *((_QWORD *)v384 + 2);
    *((_QWORD *)v384 + 1) = 0;
    *((_QWORD *)v384 + 2) = 0;
    *(_QWORD *)v384 = 0;
    v491 = 1;
    std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v492, v382);
    if (*(_BYTE *)(v228 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v386);
      *(_BYTE *)(v228 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v386, (uint64_t)&v467);
    *(_BYTE *)(v228 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v467);
    if (*(_BYTE *)(v228 + 712))
    {
      v357 = *(std::__shared_weak_count **)(v228 + 704);
      if (v357)
      {
        v358 = (unint64_t *)&v357->__shared_owners_;
        do
          v359 = __ldaxr(v358);
        while (__stlxr(v359 - 1, v358));
        if (!v359)
        {
          ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
          std::__shared_weak_count::__release_weak(v357);
        }
      }
      v360 = *(std::__shared_weak_count **)(v228 + 688);
      if (v360)
      {
        v361 = (unint64_t *)&v360->__shared_owners_;
        do
          v362 = __ldaxr(v361);
        while (__stlxr(v362 - 1, v361));
        if (!v362)
        {
          ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
          std::__shared_weak_count::__release_weak(v360);
        }
      }
    }
    if (*(char *)(v228 + 743) < 0)
    {
      operator delete(*(void **)v384);
      if ((*(char *)(v228 + 767) & 0x80000000) == 0)
      {
LABEL_504:
        if (*(_BYTE *)(v228 + 608))
        {
LABEL_505:
          *(_QWORD *)(v228 + 536) = v433;
          *(_QWORD *)v228 = 0;
          AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v387);
          goto LABEL_506;
        }
LABEL_550:
        ((void (*)(std::runtime_error *))v387->~runtime_error)(v387);
        goto LABEL_505;
      }
    }
    else if ((*(char *)(v228 + 767) & 0x80000000) == 0)
    {
      goto LABEL_504;
    }
    operator delete(*(void **)v385);
    if (*(_BYTE *)(v228 + 608))
      goto LABEL_505;
    goto LABEL_550;
  }
  v440 = v25;
  *(_QWORD *)(v17 + 1152) = v453;
  *(_QWORD *)(v17 + 1160) = *v20;
  *(_QWORD *)(v17 + 1167) = *(_QWORD *)((char *)v20 + 7);
  *(_BYTE *)(v17 + 1175) = v458;
  *v20 = 0;
  *(_QWORD *)((char *)v20 + 7) = 0;
  *(_QWORD *)(v17 + 1208) = v431;
  *(_QWORD *)(v17 + 1216) = v444;
  v70 = *(_DWORD *)(v17 + 1432);
  *(_QWORD *)(v17 + 1224) = v21;
  *(_QWORD *)(v17 + 1232) = v22;
  *(_QWORD *)(v17 + 1240) = imp;
  *(_QWORD *)(v17 + 1248) = v448;
  v71 = (char *)operator new(0x3D0uLL);
  v72 = (unint64_t)v71;
  v73 = (std::runtime_error *)(v71 + 808);
  *((_DWORD *)v71 + 242) = v70;
  v435 = (std::runtime_error *)(v71 + 536);
  v74 = (std::runtime_error *)(v71 + 616);
  v75 = (std::string *)(v71 + 736);
  *((_QWORD *)v71 + 109) = *(_QWORD *)(v17 + 1152);
  v406 = v71 + 760;
  v399 = (__int128 *)(v71 + 696);
  v402 = v71 + 784;
  v449 = (uint64_t *)(v71 + 840);
  v454 = (uint64_t *)(v71 + 824);
  *((_QWORD *)v71 + 110) = *(_QWORD *)(v17 + 1160);
  v445 = (std::runtime_error **)(v71 + 856);
  v76 = v71 + 952;
  v77 = (unsigned int *)(v71 + 964);
  *((_DWORD *)v71 + 238) = *(_DWORD *)(v17 + 1168);
  *(_DWORD *)(v71 + 955) = *(_DWORD *)(v17 + 1171);
  v71[972] = *(_BYTE *)(v17 + 1175);
  *(_QWORD *)v419 = 0;
  *((_QWORD *)v419 + 1) = 0;
  *((_QWORD *)v419 + 2) = 0;
  v78 = *(_OWORD *)v412;
  *(_QWORD *)v412 = 0;
  *((_QWORD *)v412 + 1) = 0;
  v79 = *(_OWORD *)v409;
  *(_OWORD *)(v71 + 888) = v78;
  *(_OWORD *)(v71 + 904) = v79;
  *(_QWORD *)v409 = 0;
  *((_QWORD *)v409 + 1) = 0;
  *(_OWORD *)(v71 + 920) = *(_OWORD *)v407;
  *(_QWORD *)v407 = 0;
  *((_QWORD *)v407 + 1) = 0;
  do
    v80 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v80 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v71[24] = 0;
  v71[488] = 0;
  *((_QWORD *)v71 + 62) = 0;
  v423 = (AMSCore::HTTPResponseAction *)(v71 + 24);
  *((_QWORD *)v71 + 66) = 0;
  v417 = (std::string *)(v71 + 16);
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v467, (uint64_t)(v71 + 16));
  *(std::runtime_error *)v443 = v467;
  *(_BYTE *)(v72 + 608) = 1;
  *(_QWORD *)(v72 + 960) = 0x100000005;
  v428 = (std::string *)(v72 + 656);
  do
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v74);
    AMSCore::Logger::log<char [33],unsigned int,char [5],unsigned int>((uint64_t)v74->__vftable);
    v82 = *(std::__shared_weak_count **)(v72 + 624);
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = *(char *)(v72 + 972);
    v86 = *(_QWORD *)(v72 + 880);
    v87 = *(const std::string::value_type **)(v72 + 872);
    if (v85 < 0)
    {
      std::string::__init_copy_ctor_external(v75, v87, v86);
    }
    else
    {
      *(_QWORD *)(v72 + 736) = v87;
      *(_QWORD *)(v72 + 744) = v86;
      *(_DWORD *)(v72 + 752) = *v76;
      *(_DWORD *)(v72 + 755) = *(_DWORD *)((char *)v76 + 3);
      *(_BYTE *)(v72 + 759) = v85;
    }
    v88 = *(_QWORD *)(v72 + 896);
    *(_QWORD *)(v72 + 824) = *(_QWORD *)(v72 + 888);
    *(_QWORD *)(v72 + 832) = v88;
    if (v88)
    {
      v89 = (unint64_t *)(v88 + 8);
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v91 = *(_QWORD *)(v72 + 912);
    *(_QWORD *)(v72 + 840) = *(_QWORD *)(v72 + 904);
    *(_QWORD *)(v72 + 848) = v91;
    if (v91)
    {
      v92 = (unint64_t *)(v91 + 8);
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    v94 = *(_QWORD *)(v72 + 928);
    *(_QWORD *)(v72 + 856) = *(_QWORD *)(v72 + 920);
    *(_QWORD *)(v72 + 864) = v94;
    if (v94)
    {
      v95 = (unint64_t *)(v94 + 8);
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    AMSCore::ProvisionTask::perform(v73, (uint64_t)v75, v454, *(_DWORD *)(v72 + 968), v449, v445);
    v97 = *v73;
    v73[8] = *v73;
    v73->__vftable = 0;
    v73->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)&v97.__vftable[4]))
    {
      HIBYTE(v73[9].__vftable) = 0;
      v99 = (unint64_t *)&v73[8].__vftable[4];
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v72, v99));
      if (!v100)
        goto LABEL_170;
    }
    v101 = v73[8].__vftable;
    if (!LOBYTE(v101[3].what))
      goto LABEL_554;
    v102 = (char)v101[3].~runtime_error_0;
    if (!v102)
    {
      std::runtime_error::runtime_error(v74, (const std::runtime_error *)&v101->~runtime_error_0);
      *(_OWORD *)(v72 + 632) = *(_OWORD *)&v101[1].~runtime_error;
      *(_QWORD *)(v72 + 616) = off_1E2521330;
      v103 = v101 + 2;
      v104 = v101[2].~runtime_error;
      *(_QWORD *)(v72 + 648) = v101[1].what;
      *(_QWORD *)(v72 + 656) = v104;
      v105 = v101[2].~runtime_error_0;
      *(_QWORD *)(v72 + 664) = v105;
      if (v105)
      {
        *((_QWORD *)v104 + 2) = v428;
        v101[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v103;
        v103->~runtime_error = 0;
        v101[2].~runtime_error_0 = 0;
      }
      else
      {
        *(_QWORD *)(v72 + 648) = v428;
      }
      v106 = *(_QWORD *)(v72 + 936);
      *(_OWORD *)(v72 + 672) = *(_OWORD *)(v106 + 64);
      *(_QWORD *)(v106 + 64) = 0;
      *(_QWORD *)(v106 + 72) = 0;
    }
    *(_BYTE *)(v72 + 688) = v102;
    std::expected<void,AMSCore::Error>::operator=[abi:fe180100](v435, v74);
    if (!*(_BYTE *)(v72 + 688))
      ((void (*)(std::runtime_error *))v74->~runtime_error)(v74);
    v107 = *(_QWORD *)(v72 + 944);
    if (v107)
    {
      v108 = (unint64_t *)(v107 + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        v110 = *(std::__shared_weak_count **)(v72 + 944);
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    v111 = *(std::__shared_weak_count **)(v72 + 816);
    if (v111)
    {
      v112 = (unint64_t *)&v111->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    v114 = *(std::__shared_weak_count **)(v72 + 864);
    if (v114)
    {
      v115 = (unint64_t *)&v114->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v117 = *(std::__shared_weak_count **)(v72 + 848);
    if (!v117)
      goto LABEL_97;
    v118 = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
      v120 = *(std::__shared_weak_count **)(v72 + 832);
      if (!v120)
        goto LABEL_101;
    }
    else
    {
LABEL_97:
      v120 = *(std::__shared_weak_count **)(v72 + 832);
      if (!v120)
        goto LABEL_101;
    }
    v121 = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (v122)
    {
LABEL_101:
      if ((*(char *)(v72 + 759) & 0x80000000) == 0)
        goto LABEL_103;
LABEL_102:
      operator delete(v75->__r_.__value_.__l.__data_);
      goto LABEL_103;
    }
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
    if (*(char *)(v72 + 759) < 0)
      goto LABEL_102;
LABEL_103:
    if (*(_BYTE *)(v72 + 608))
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v467);
      AMSCore::Logger::log<char [34]>((uint64_t)v467.__vftable, 2, (uint64_t)"networking", 10, "Machine provisioned successfully.");
      v146 = (std::__shared_weak_count *)v467.__imp_.__imp_;
      if (v467.__imp_.__imp_)
      {
        v147 = (unint64_t *)(v467.__imp_.__imp_ + 8);
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      v149 = (char *)operator new(0x40uLL);
      *(_QWORD *)(v72 + 784) = v149;
      *(_QWORD *)(v72 + 800) = 0x8000000000000040;
      *(_QWORD *)(v72 + 792) = 63;
      strcpy(v149, "com.apple.AppleMediaServicesCore.AnisetteUtils.provisionMachine");
      v150 = (char *)operator new(0x20uLL);
      *(_QWORD *)(v72 + 760) = v150;
      *(_OWORD *)(v72 + 768) = xmmword_18CF51B60;
      strcpy(v150, "Anisette (Provision Machine)");
      *(_BYTE *)(v72 + 696) = 0;
      *(_BYTE *)(v72 + 728) = 0;
      LOBYTE(v467.__vftable) = 0;
      LOBYTE(v468.__cat_) = 0;
      LOBYTE(v469) = 0;
      LOBYTE(v471) = 0;
      LOBYTE(v472) = 0;
      v477 = 0;
      v478 = 0;
      v479 = 0;
      v480 = 0;
      v481 = 0;
      v482 = 0;
      v483 = 0;
      v484 = 0;
      v485 = 0;
      v492[0] = 0;
      v493 = 0;
      v494 = 3;
      v486 = *(_OWORD *)v402;
      v487 = *((_QWORD *)v402 + 2);
      *(_QWORD *)v402 = 0;
      *((_QWORD *)v402 + 1) = 0;
      *((_QWORD *)v402 + 2) = 0;
      v488 = 1;
      v489 = *(_OWORD *)v406;
      v490 = *((_QWORD *)v406 + 2);
      *((_QWORD *)v406 + 1) = 0;
      *((_QWORD *)v406 + 2) = 0;
      *(_QWORD *)v406 = 0;
      v491 = 1;
      std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v492, v399);
      if (*(_BYTE *)(v72 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v423);
        *(_BYTE *)(v72 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v423, (uint64_t)&v467);
      *(_BYTE *)(v72 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v467);
      if (*(_BYTE *)(v72 + 728))
      {
        v151 = *(std::__shared_weak_count **)(v72 + 720);
        if (v151)
        {
          v152 = (unint64_t *)&v151->__shared_owners_;
          do
            v153 = __ldaxr(v152);
          while (__stlxr(v153 - 1, v152));
          if (!v153)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
          }
        }
        v154 = *(std::__shared_weak_count **)(v72 + 704);
        if (v154)
        {
          v155 = (unint64_t *)&v154->__shared_owners_;
          do
            v156 = __ldaxr(v155);
          while (__stlxr(v156 - 1, v155));
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
        }
      }
      if (*(char *)(v72 + 783) < 0)
        operator delete(*(void **)v406);
      v157 = v417;
      if (*(char *)(v72 + 807) < 0)
        operator delete(*(void **)v402);
      goto LABEL_167;
    }
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v74);
    AMSCore::Logger::log<char [38],AMSCore::Error>((uint64_t)v74->__vftable, (uint64_t)v435);
    v123 = *(std::__shared_weak_count **)(v72 + 624);
    if (v123)
    {
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v81 = *v77 + 1;
    *v77 = v81;
  }
  while (v81 < 6);
  if (*(_BYTE *)(v72 + 608))
    goto LABEL_554;
  AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v467, v435);
  v157 = v417;
  v158 = (uint64_t)v423;
  if (*(_BYTE *)(v72 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v423);
    *(_BYTE *)(v72 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(v158, (uint64_t)&v467);
  *(_BYTE *)(v72 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v467);
LABEL_167:
  if (!*(_BYTE *)(v72 + 608))
    ((void (*)(std::runtime_error *))v435->~runtime_error)(v435);
  *(_QWORD *)(v72 + 536) = v157;
  *(_QWORD *)v72 = 0;
  AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v435);
LABEL_170:
  v159 = *(std::runtime_error *)v443;
  *((_OWORD *)v443 + 12) = *(_OWORD *)v443;
  *(_QWORD *)v443 = 0;
  *((_QWORD *)v443 + 1) = 0;
  v160 = atomic_load((unint64_t *)&v159.__vftable[20]);
  v59 = v463;
  if (v160)
    goto LABEL_174;
  v443[143] = 1;
  v161 = (unint64_t *)(*(_QWORD *)(v17 + 1368) + 480);
  do
    v162 = __ldaxr(v161);
  while (__stlxr(v17, v161));
  if (v162)
  {
LABEL_174:
    v163 = *((_QWORD *)v443 + 24);
    if (*(_BYTE *)(v163 + 472))
    {
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v463, v163 + 8);
      if (*(_BYTE *)(v17 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v440);
        *(_BYTE *)(v17 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v440, (uint64_t)v463);
      *(_BYTE *)(v17 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v463);
      v164 = *(_QWORD *)(v17 + 1376);
      if (v164)
      {
        v165 = (unint64_t *)(v164 + 8);
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          v167 = *(std::__shared_weak_count **)(v17 + 1376);
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      v168 = *(std::__shared_weak_count **)(v17 + 1184);
      if (v168)
      {
        v169 = (unint64_t *)&v168->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      v171 = *(std::__shared_weak_count **)(v17 + 1248);
      if (v171)
      {
        v172 = (unint64_t *)&v171->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      v174 = *(std::__shared_weak_count **)(v17 + 1232);
      if (v174)
      {
        v175 = (unint64_t *)&v174->__shared_owners_;
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v177 = *(std::__shared_weak_count **)(v17 + 1216);
      if (v177)
      {
        v178 = (unint64_t *)&v177->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      if (*(char *)(v17 + 1175) < 0)
        operator delete(*(void **)v419);
      v62 = 0;
      v22 = 0;
      v61 = 0;
      v140 = 0;
      v63 = 0;
      v139 = *(std::__shared_weak_count **)(v17 + 1200);
      if (!v139)
        goto LABEL_545;
LABEL_541:
      v381 = (unint64_t *)&v139->__shared_owners_;
      do
        v142 = __ldaxr(v381);
      while (__stlxr(v142 - 1, v381));
LABEL_543:
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
      goto LABEL_545;
    }
LABEL_554:
    __break(1u);
  }
}

void sub_18CC5EBDC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::HTTPResponseAction::HTTPResponseAction(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::runtime_error *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v18;
  char v19;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = (_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a1 + 8;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    if (v7)
    {
      *(_QWORD *)(v5 + 16) = v6;
      *(_QWORD *)a2 = v4;
      *v4 = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    else
    {
      *(_QWORD *)a1 = v6;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_BYTE *)(a1 + 56) = 0;
  v8 = (std::runtime_error *)(a1 + 56);
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    std::runtime_error::runtime_error(v8, (const std::runtime_error *)(a2 + 56));
    *(_QWORD *)(a1 + 56) = MEMORY[0x1E0DE4F90] + 16;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 56) = off_1E2521330;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v9 = (_QWORD *)(a2 + 96);
    v10 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v10;
    v11 = a1 + 96;
    v12 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v12;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      *(_QWORD *)(a2 + 88) = v9;
      *v9 = 0;
      *(_QWORD *)(a2 + 104) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 88) = v11;
    }
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(a1 + 136, (__int128 *)(a2 + 136));
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  if (*(_BYTE *)(a2 + 336))
  {
    *(_DWORD *)(a1 + 328) = -1;
    v13 = *(unsigned int *)(a2 + 328);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E253CAE8[v13])(&v18, a1 + 304, a2 + 304);
      *(_DWORD *)(a1 + 328) = v13;
      v14 = *(unsigned int *)(a2 + 328);
      if ((_DWORD)v14 != -1)
      {
        if (!(_DWORD)v14)
        {
LABEL_19:
          *(_BYTE *)(a1 + 336) = 1;
          goto LABEL_20;
        }
        ((void (*)(char *, uint64_t))off_1E253D240[v14])(&v19, a2 + 304);
      }
    }
    *(_DWORD *)(a2 + 328) = 0;
    goto LABEL_19;
  }
LABEL_20:
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  if (*(_BYTE *)(a2 + 376))
  {
    v15 = *(_OWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = v15;
    *(_QWORD *)(a2 + 360) = 0;
    *(_QWORD *)(a2 + 368) = 0;
    *(_QWORD *)(a2 + 352) = 0;
    *(_BYTE *)(a1 + 376) = 1;
  }
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  if (*(_BYTE *)(a2 + 408))
  {
    v16 = *(_OWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = v16;
    *(_QWORD *)(a2 + 392) = 0;
    *(_QWORD *)(a2 + 400) = 0;
    *(_QWORD *)(a2 + 384) = 0;
    *(_BYTE *)(a1 + 408) = 1;
  }
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  if (*(_BYTE *)(a2 + 448))
  {
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_QWORD *)(a2 + 416) = 0;
    *(_QWORD *)(a2 + 424) = 0;
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_QWORD *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0;
    *(_BYTE *)(a1 + 448) = 1;
  }
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  return a1;
}

void AMSCore::HTTPResponseAction::~HTTPResponseAction(AMSCore::HTTPResponseAction *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;

  if (*((_BYTE *)this + 448))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*((_BYTE *)this + 408) && *((char *)this + 407) < 0)
    operator delete(*((void **)this + 48));
  if (*((_BYTE *)this + 376) && *((char *)this + 375) < 0)
  {
    operator delete(*((void **)this + 44));
    if (!*((_BYTE *)this + 336))
      goto LABEL_21;
  }
  else if (!*((_BYTE *)this + 336))
  {
    goto LABEL_21;
  }
  v8 = *((unsigned int *)this + 82);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))off_1E253D240[v8])(&v15, (char *)this + 304);
  *((_DWORD *)this + 82) = -1;
LABEL_21:
  if (*((_BYTE *)this + 288))
    AMSCore::URL::~URL((AMSCore::HTTPResponseAction *)((char *)this + 136));
  if (*((_BYTE *)this + 128))
  {
    *((_QWORD *)this + 7) = off_1E2521330;
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 88, *((unsigned int **)this + 12));
    MEMORY[0x18D7898AC]((char *)this + 56);
  }
  if (*((_BYTE *)this + 48))
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if (*((_BYTE *)this + 24))
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this, *((unsigned int **)this + 1));
}

_BYTE *AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[464];
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v1 = result;
  v9 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 480);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = *(_QWORD *)result;
    result = *(_BYTE **)(*(_QWORD *)result + 512);
    if (result)
    {
      if (result == (_BYTE *)(v4 + 488))
      {
        v8 = v7;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v7);
      }
      else
      {
        v8 = result;
        *(_QWORD *)(v4 + 512) = 0;
      }
    }
    else
    {
      v8 = 0;
    }
    if (v8)
    {
      if (!*(_BYTE *)(*(_QWORD *)v1 + 472))
      {
        __break(1u);
        return result;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v6, *(_QWORD *)v1 + 8);
      if (!v8)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v6);
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v6);
    }
    else
    {
      (*v3)(v3);
    }
    result = v8;
    if (v8 == v7)
    {
      v5 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v5 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v5))();
  }
  return result;
}

void sub_18CC5F620(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (*((_BYTE *)a2 + 152))
  {
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 24) = 0;
    if (*((_BYTE *)a2 + 24))
    {
      v2 = *a2;
      *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)result = v2;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(result + 24) = 1;
    }
    *(_BYTE *)(result + 32) = 0;
    *(_BYTE *)(result + 56) = 0;
    if (*((_BYTE *)a2 + 56))
    {
      v3 = a2[2];
      *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(result + 32) = v3;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *(_BYTE *)(result + 56) = 1;
    }
    *(_BYTE *)(result + 64) = 0;
    *(_BYTE *)(result + 88) = 0;
    if (*((_BYTE *)a2 + 88))
    {
      v4 = a2[4];
      *(_QWORD *)(result + 80) = *((_QWORD *)a2 + 10);
      *(_OWORD *)(result + 64) = v4;
      *((_QWORD *)a2 + 9) = 0;
      *((_QWORD *)a2 + 10) = 0;
      *((_QWORD *)a2 + 8) = 0;
      *(_BYTE *)(result + 88) = 1;
    }
    *(_DWORD *)(result + 96) = *((_DWORD *)a2 + 24);
    *(_QWORD *)(result + 104) = result + 104;
    *(_QWORD *)(result + 112) = result + 104;
    *(_QWORD *)(result + 120) = 0;
    if ((__int128 *)result == a2)
    {
      __break(1u);
    }
    else
    {
      v5 = *((_QWORD *)a2 + 15);
      if (v5)
      {
        v7 = *((_QWORD *)a2 + 13);
        v6 = (uint64_t *)*((_QWORD *)a2 + 14);
        v8 = *v6;
        *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
        **(_QWORD **)(v7 + 8) = v8;
        v9 = *(_QWORD *)(result + 104);
        *(_QWORD *)(v9 + 8) = v6;
        *v6 = v9;
        *(_QWORD *)(result + 104) = v7;
        *(_QWORD *)(v7 + 8) = result + 104;
        *(_QWORD *)(result + 120) = v5;
        *((_QWORD *)a2 + 15) = 0;
      }
      v10 = a2[8];
      *(_QWORD *)(result + 144) = *((_QWORD *)a2 + 18);
      *(_OWORD *)(result + 128) = v10;
      *((_QWORD *)a2 + 17) = 0;
      *((_QWORD *)a2 + 18) = 0;
      *((_QWORD *)a2 + 16) = 0;
      *(_BYTE *)(result + 152) = 1;
    }
  }
  return result;
}

_BYTE *AMSCore::AnisetteUtils::`anonymous namespace'::handleAction(_BYTE *result)
{
  _BYTE *v1;
  AMSCore::HTTPResponseAction *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;

  v1 = result;
  v2 = (AMSCore::HTTPResponseAction *)(result + 536);
  v3 = result[1319];
  if (v3 == 2)
  {
    v25 = *((_QWORD *)result + 173);
    if (!*(_BYTE *)(v25 + 472))
      goto LABEL_92;
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(result + 536), v25 + 8);
    if (v1[488])
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
      v1[488] = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v1 + 24), (uint64_t)v2);
    v1[488] = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v2);
    v26 = *((_QWORD *)v1 + 174);
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        v29 = (std::__shared_weak_count *)*((_QWORD *)v1 + 174);
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)v1 + 148);
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)v1 + 158);
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)v1 + 160);
    if (!v36)
      goto LABEL_56;
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      if (((char)v1[1127] & 0x80000000) == 0)
      {
LABEL_58:
        if (v1[1088] && (char)v1[1087] < 0)
          operator delete(*((void **)v1 + 133));
        if ((char)v1[1151] < 0)
          operator delete(*((void **)v1 + 141));
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_QWORD *)&v21 = *((_QWORD *)v1 + 166);
        goto LABEL_82;
      }
    }
    else
    {
LABEL_56:
      if (((char)v1[1127] & 0x80000000) == 0)
        goto LABEL_58;
    }
    operator delete(*((void **)v1 + 138));
    goto LABEL_58;
  }
  if (v3 != 1)
  {
    v39 = *((_QWORD *)result + 169);
    if (!*(_BYTE *)(v39 + 472))
      goto LABEL_92;
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(result + 536), v39 + 8);
    if (v1[488])
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
      v1[488] = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v1 + 24), (uint64_t)v2);
    v1[488] = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v2);
    v40 = *((_QWORD *)v1 + 170);
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        v43 = (std::__shared_weak_count *)*((_QWORD *)v1 + 170);
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)v1 + 148);
    if (!v44)
      goto LABEL_76;
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      if (((char)v1[1063] & 0x80000000) == 0)
      {
LABEL_78:
        if (v1[1024] && (char)v1[1023] < 0)
          operator delete(*((void **)v1 + 125));
        v22 = *((_QWORD *)v1 + 168);
        v21 = *((_OWORD *)v1 + 83);
        v23 = v1[1436];
        v24 = *((_QWORD *)v1 + 165);
        goto LABEL_82;
      }
    }
    else
    {
LABEL_76:
      if (((char)v1[1063] & 0x80000000) == 0)
        goto LABEL_78;
    }
    operator delete(*((void **)v1 + 130));
    goto LABEL_78;
  }
  v4 = *((_QWORD *)result + 171);
  if (!*(_BYTE *)(v4 + 472))
  {
LABEL_92:
    __break(1u);
    return result;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(result + 536), v4 + 8);
  if (v1[488])
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
    v1[488] = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v1 + 24), (uint64_t)v2);
  v1[488] = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v2);
  v5 = *((_QWORD *)v1 + 172);
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v1 + 172);
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)v1 + 148);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)v1 + 156);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)v1 + 154);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)v1 + 152);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = 0uLL;
  if ((char)v1[1175] < 0)
  {
    operator delete(*((void **)v1 + 144));
    v21 = 0uLL;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
LABEL_82:
  v47 = (std::__shared_weak_count *)*((_QWORD *)v1 + 150);
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      v50 = v21;
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      v21 = v50;
    }
  }
  *((_QWORD *)v1 + 178) = v24;
  v1[1437] = v23;
  *((_QWORD *)v1 + 177) = v22;
  *(_OWORD *)(v1 + 1400) = v21;
  *((_QWORD *)v1 + 67) = v1 + 16;
  *(_QWORD *)v1 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v2);
}

void AMSCore::AnisetteUtils::`anonymous namespace'::handleAction(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  char v21;
  void *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;

  if (!*(_QWORD *)__p)
  {
    v22 = (void *)*((_QWORD *)__p + 178);
    v21 = __p[1437];
    v20 = (std::__shared_weak_count *)*((_QWORD *)__p + 177);
    v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 176);
    v18 = (std::__shared_weak_count *)*((_QWORD *)__p + 175);
    goto LABEL_83;
  }
  if (__p[1319])
  {
    if (__p[1319] == 1)
    {
      v2 = *((_QWORD *)__p + 172);
      if (v2)
      {
        v3 = (unint64_t *)(v2 + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 - 1, v3));
        if (!v4)
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 172);
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 148);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 156);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 154);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 152);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (__p[1175] < 0)
        operator delete(*((void **)__p + 144));
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 150);
      if (!v23)
        goto LABEL_83;
LABEL_79:
      v44 = (unint64_t *)&v23->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      goto LABEL_83;
    }
    v31 = *((_QWORD *)__p + 174);
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        v34 = (std::__shared_weak_count *)*((_QWORD *)__p + 174);
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)__p + 148);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)__p + 158);
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)__p + 160);
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (__p[1127] < 0)
      operator delete(*((void **)__p + 138));
    if (__p[1088] && __p[1087] < 0)
      operator delete(*((void **)__p + 133));
    if (__p[1151] < 0)
      operator delete(*((void **)__p + 141));
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v18 = (std::__shared_weak_count *)*((_QWORD *)__p + 166);
    v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 150);
    if (v23)
      goto LABEL_79;
  }
  else
  {
    v24 = *((_QWORD *)__p + 170);
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)__p + 170);
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v28 = (std::__shared_weak_count *)*((_QWORD *)__p + 148);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (__p[1063] < 0)
      operator delete(*((void **)__p + 130));
    if (__p[1024] && __p[1023] < 0)
      operator delete(*((void **)__p + 125));
    v20 = (std::__shared_weak_count *)*((_QWORD *)__p + 168);
    v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 167);
    v18 = (std::__shared_weak_count *)*((_QWORD *)__p + 166);
    v21 = __p[1436];
    v22 = (void *)*((_QWORD *)__p + 165);
    v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 150);
    if (v23)
      goto LABEL_79;
  }
LABEL_83:
  v46 = (char *)*((_QWORD *)__p + 66);
  if (v46 == __p + 504)
  {
    v47 = 4;
    v46 = __p + 504;
  }
  else
  {
    if (!v46)
      goto LABEL_88;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_88:
  if (__p[488])
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  do
  {
    v48 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v49 = v48 - 1;
  }
  while (__stlxr(v49, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v49)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v20)
  {
    v50 = (unint64_t *)&v20->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v19)
  {
    v52 = (unint64_t *)&v19->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v18)
  {
    v54 = (unint64_t *)&v18->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if ((v21 & 0x80) == 0)
        goto LABEL_109;
      goto LABEL_108;
    }
  }
  if (v21 < 0)
LABEL_108:
    operator delete(v22);
LABEL_109:
  operator delete(__p);
}

_BYTE *AMSCore::AnisetteUtils::`anonymous namespace'::handleSyncMachineAction(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  std::runtime_error *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BYTE v31[352];
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  _BYTE v38[40];
  int v39;

  v1 = *((_QWORD *)result + 112);
  if (*(_BYTE *)(v1 + 88))
  {
    v2 = result;
    v3 = (std::runtime_error *)(result + 536);
    v4 = *(_BYTE *)(v1 + 80);
    if (!v4)
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 536), (const std::runtime_error *)(v1 + 8));
      *(_OWORD *)(v2 + 552) = *(_OWORD *)(v1 + 24);
      *((_QWORD *)v2 + 67) = off_1E2521330;
      v5 = (_QWORD *)(v1 + 48);
      v6 = *(_QWORD *)(v1 + 48);
      *((_QWORD *)v2 + 71) = *(_QWORD *)(v1 + 40);
      v7 = v2 + 576;
      *((_QWORD *)v2 + 72) = v6;
      v8 = *(_QWORD *)(v1 + 56);
      *((_QWORD *)v2 + 73) = v8;
      if (v8)
      {
        *(_QWORD *)(v6 + 16) = v7;
        *(_QWORD *)(v1 + 40) = v5;
        *v5 = 0;
        *(_QWORD *)(v1 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 71) = v7;
      }
      v9 = *((_QWORD *)v2 + 112);
      *((_OWORD *)v2 + 37) = *(_OWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v9 + 72) = 0;
    }
    v2[608] = v4;
    v10 = *((_QWORD *)v2 + 113);
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v2 + 113);
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 100);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)v2 + 104);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)v2 + 102);
    if (!v20)
      goto LABEL_26;
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (((char)v2[679] & 0x80000000) == 0)
        goto LABEL_28;
    }
    else
    {
LABEL_26:
      if (((char)v2[679] & 0x80000000) == 0)
      {
LABEL_28:
        if (v2[640] && (char)v2[639] < 0)
          operator delete(*((void **)v2 + 77));
        if ((char)v2[791] < 0)
        {
          operator delete(*((void **)v2 + 96));
          if (v2[608])
          {
LABEL_33:
            v23 = (char *)operator new(0x40uLL);
            *((_QWORD *)v2 + 93) = v23;
            *((_OWORD *)v2 + 47) = xmmword_18CF51B90;
            strcpy(v23, "com.apple.AppleMediaServicesCore.AnisetteUtils.syncMachine");
            v24 = (char *)operator new(0x19uLL);
            *((_QWORD *)v2 + 90) = v24;
            *((_QWORD *)v2 + 92) = 0x8000000000000019;
            *((_QWORD *)v2 + 91) = 23;
            strcpy(v24, "Anisette (Sync Machine)");
            v2[680] = 0;
            v2[712] = 0;
            v31[0] = 0;
            v31[24] = 0;
            v31[32] = 0;
            v31[48] = 0;
            v31[56] = 0;
            v31[128] = 0;
            v31[136] = 0;
            v31[288] = 0;
            v31[296] = 0;
            v31[300] = 0;
            v31[304] = 0;
            v31[336] = 0;
            v31[344] = 0;
            v31[348] = 0;
            v38[0] = 0;
            v38[32] = 0;
            v39 = 3;
            v32 = *(_OWORD *)(v2 + 744);
            v33 = *((_QWORD *)v2 + 95);
            *((_QWORD *)v2 + 93) = 0;
            *((_QWORD *)v2 + 94) = 0;
            *((_QWORD *)v2 + 95) = 0;
            v34 = 1;
            v35 = *((_OWORD *)v2 + 45);
            v36 = *((_QWORD *)v2 + 92);
            *((_QWORD *)v2 + 91) = 0;
            *((_QWORD *)v2 + 92) = 0;
            *((_QWORD *)v2 + 90) = 0;
            v37 = 1;
            std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v38, (__int128 *)(v2 + 680));
            if (v2[488])
            {
              AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
              v2[488] = 0;
            }
            AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)v31);
            v2[488] = 1;
            AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v31);
            if (!v2[712])
              goto LABEL_45;
            v25 = (std::__shared_weak_count *)*((_QWORD *)v2 + 88);
            if (v25)
            {
              v26 = (unint64_t *)&v25->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            v28 = (std::__shared_weak_count *)*((_QWORD *)v2 + 86);
            if (!v28)
              goto LABEL_45;
            v29 = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
              if (((char)v2[743] & 0x80000000) == 0)
              {
LABEL_46:
                if (((char)v2[767] & 0x80000000) == 0)
                  goto LABEL_47;
                goto LABEL_58;
              }
            }
            else
            {
LABEL_45:
              if (((char)v2[743] & 0x80000000) == 0)
                goto LABEL_46;
            }
            operator delete(*((void **)v2 + 90));
            if (((char)v2[767] & 0x80000000) == 0)
            {
LABEL_47:
              if (v2[608])
              {
LABEL_48:
                *((_QWORD *)v2 + 67) = v2 + 16;
                *(_QWORD *)v2 = 0;
                return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v3);
              }
LABEL_53:
              ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
              goto LABEL_48;
            }
LABEL_58:
            operator delete(*((void **)v2 + 93));
            if (v2[608])
              goto LABEL_48;
            goto LABEL_53;
          }
        }
        else if (v2[608])
        {
          goto LABEL_33;
        }
        AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v31, v3);
        if (v2[488])
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
          v2[488] = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)v31);
        v2[488] = 1;
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v31);
        if (v2[608])
          goto LABEL_48;
        goto LABEL_53;
      }
    }
    operator delete(*((void **)v2 + 82));
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

void sub_18CC60588(void *a1)
{
  void (***v1)(_QWORD);
  uint64_t v2;

  if (!*(_BYTE *)(v2 + 608))
    (**v1)(v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::AnisetteUtils::`anonymous namespace'::handleSyncMachineAction(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  if (!*(_QWORD *)__p)
    goto LABEL_28;
  v2 = *((_QWORD *)__p + 113);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 113);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 100);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 104);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 102);
  if (!v12)
    goto LABEL_21;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_21:
    if ((__p[679] & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (__p[679] < 0)
LABEL_22:
    operator delete(*((void **)__p + 82));
LABEL_23:
  if (__p[640] && __p[639] < 0)
    operator delete(*((void **)__p + 77));
  if (__p[791] < 0)
    operator delete(*((void **)__p + 96));
LABEL_28:
  v15 = (char *)*((_QWORD *)__p + 66);
  if (v15 == __p + 504)
  {
    v16 = 4;
    v15 = __p + 504;
  }
  else
  {
    if (!v15)
      goto LABEL_33;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_33:
  if (__p[488])
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  v17 = __p[887];
  v18 = __p[871];
  do
  {
    v19 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v20)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v18 && v17 < 0)
    operator delete(*((void **)__p + 111));
  operator delete(__p);
}

uint64_t std::optional<AMSCore::AuthenticateResult>::~optional(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return a1;
}

void AMSCore::AnisetteUtils::`anonymous namespace'::handleProvisionAction(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  std::runtime_error *v4;
  std::runtime_error *v5;
  std::string *v6;
  _DWORD *v7;
  unsigned int *v8;
  _DWORD *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::string::size_type v39;
  const std::string::value_type *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error v50;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  __int128 *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _OWORD *v70;
  unint64_t v71;
  std::runtime_error **v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  __int128 v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  _BYTE v96[40];
  int v97;

  v1 = *(_QWORD *)(a1 + 936);
  if (!*(_BYTE *)(v1 + 88))
  {
LABEL_98:
    __break(1u);
    return;
  }
  v3 = a1 + 808;
  v4 = (std::runtime_error *)(a1 + 536);
  v5 = (std::runtime_error *)(a1 + 616);
  v6 = (std::string *)(a1 + 736);
  v66 = (__int128 *)(a1 + 696);
  v67 = a1 + 784;
  v73 = (uint64_t *)(a1 + 840);
  v74 = (uint64_t *)(a1 + 824);
  v7 = (_DWORD *)(a1 + 952);
  v8 = (unsigned int *)(a1 + 964);
  v68 = a1 + 760;
  v69 = a1 + 16;
  v71 = a1 + 656;
  v72 = (std::runtime_error **)(a1 + 856);
  v70 = (_OWORD *)(a1 + 632);
  v9 = (_DWORD *)(a1 + 752);
  while (1)
  {
    v10 = *(_BYTE *)(v1 + 80);
    if (!v10)
    {
      std::runtime_error::runtime_error(v5, (const std::runtime_error *)(v1 + 8));
      *v70 = *(_OWORD *)(v1 + 24);
      *(_QWORD *)(a1 + 616) = off_1E2521330;
      v11 = (_QWORD *)(v1 + 48);
      v12 = *(_QWORD *)(v1 + 48);
      *(_QWORD *)(a1 + 648) = *(_QWORD *)(v1 + 40);
      *(_QWORD *)(a1 + 656) = v12;
      v13 = *(_QWORD *)(v1 + 56);
      *(_QWORD *)(a1 + 664) = v13;
      if (v13)
      {
        *(_QWORD *)(v12 + 16) = v71;
        *(_QWORD *)(v1 + 40) = v11;
        *v11 = 0;
        *(_QWORD *)(v1 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 648) = v71;
      }
      v14 = *(_QWORD *)(a1 + 936);
      *(_OWORD *)(a1 + 672) = *(_OWORD *)(v14 + 64);
      *(_QWORD *)(v14 + 64) = 0;
      *(_QWORD *)(v14 + 72) = 0;
    }
    *(_BYTE *)(a1 + 688) = v10;
    std::expected<void,AMSCore::Error>::operator=[abi:fe180100](v4, v5);
    if (*(_BYTE *)(a1 + 688))
    {
      v15 = *(_QWORD *)(a1 + 944);
      if (!v15)
        goto LABEL_16;
    }
    else
    {
      ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
      v15 = *(_QWORD *)(a1 + 944);
      if (!v15)
        goto LABEL_16;
    }
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (v17)
    {
LABEL_16:
      v18 = *(std::__shared_weak_count **)(a1 + 816);
      if (!v18)
        goto LABEL_22;
      goto LABEL_17;
    }
    v21 = *(std::__shared_weak_count **)(a1 + 944);
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v18 = *(std::__shared_weak_count **)(a1 + 816);
    if (!v18)
      goto LABEL_22;
LABEL_17:
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    v22 = *(std::__shared_weak_count **)(a1 + 864);
    if (!v22)
      goto LABEL_26;
LABEL_22:
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v25 = *(std::__shared_weak_count **)(a1 + 848);
      if (!v25)
        goto LABEL_32;
    }
    else
    {
LABEL_26:
      v25 = *(std::__shared_weak_count **)(a1 + 848);
      if (!v25)
        goto LABEL_32;
    }
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
LABEL_32:
    v28 = *(std::__shared_weak_count **)(a1 + 832);
    if (!v28)
      goto LABEL_36;
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (v30)
    {
LABEL_36:
      if ((*(char *)(a1 + 759) & 0x80000000) == 0)
        goto LABEL_38;
LABEL_37:
      operator delete(v6->__r_.__value_.__l.__data_);
      goto LABEL_38;
    }
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (*(char *)(a1 + 759) < 0)
      goto LABEL_37;
LABEL_38:
    if (*(_BYTE *)(a1 + 608))
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v75);
      AMSCore::Logger::log<char [34]>(v75, 2, (uint64_t)"networking", 10, "Machine provisioned successfully.");
      v54 = v76;
      if (v76)
      {
        v55 = (unint64_t *)&v76->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (char *)operator new(0x40uLL);
      *(_QWORD *)(a1 + 784) = v57;
      *(_QWORD *)(a1 + 800) = 0x8000000000000040;
      *(_QWORD *)(a1 + 792) = 63;
      strcpy(v57, "com.apple.AppleMediaServicesCore.AnisetteUtils.provisionMachine");
      v58 = (char *)operator new(0x20uLL);
      *(_QWORD *)(a1 + 760) = v58;
      *(_OWORD *)(a1 + 768) = xmmword_18CF51B60;
      strcpy(v58, "Anisette (Provision Machine)");
      *(_BYTE *)(a1 + 696) = 0;
      *(_BYTE *)(a1 + 728) = 0;
      LOBYTE(v75) = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v96[0] = 0;
      v96[32] = 0;
      v97 = 3;
      v90 = *(_OWORD *)v67;
      v91 = *(_QWORD *)(v67 + 16);
      *(_QWORD *)v67 = 0;
      *(_QWORD *)(v67 + 8) = 0;
      *(_QWORD *)(v67 + 16) = 0;
      v92 = 1;
      v93 = *(_OWORD *)v68;
      v94 = *(_QWORD *)(v68 + 16);
      *(_QWORD *)(v68 + 8) = 0;
      *(_QWORD *)(v68 + 16) = 0;
      *(_QWORD *)v68 = 0;
      v95 = 1;
      std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v96, v66);
      if (*(_BYTE *)(a1 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
        *(_BYTE *)(a1 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 24, (uint64_t)&v75);
      *(_BYTE *)(a1 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v75);
      if (*(_BYTE *)(a1 + 728))
      {
        v59 = *(std::__shared_weak_count **)(a1 + 720);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v62 = *(std::__shared_weak_count **)(a1 + 704);
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
      }
      if (*(char *)(a1 + 783) < 0)
        operator delete(*(void **)v68);
      v65 = v69;
      if (*(char *)(a1 + 807) < 0)
        operator delete(*(void **)v67);
      goto LABEL_95;
    }
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v5);
    AMSCore::Logger::log<char [38],AMSCore::Error>((uint64_t)v5->__vftable, (uint64_t)v4);
    v31 = *(std::__shared_weak_count **)(a1 + 624);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = *v8 + 1;
    *v8 = v34;
    if (v34 >= 6)
      break;
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v5);
    AMSCore::Logger::log<char [33],unsigned int,char [5],unsigned int>((uint64_t)v5->__vftable);
    v35 = *(std::__shared_weak_count **)(a1 + 624);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = *(char *)(a1 + 972);
    v39 = *(_QWORD *)(a1 + 880);
    v40 = *(const std::string::value_type **)(a1 + 872);
    if (v38 < 0)
    {
      std::string::__init_copy_ctor_external(v6, v40, v39);
    }
    else
    {
      *(_QWORD *)(a1 + 736) = v40;
      *(_QWORD *)(a1 + 744) = v39;
      *v9 = *v7;
      *(_DWORD *)((char *)v9 + 3) = *(_DWORD *)((char *)v7 + 3);
      *(_BYTE *)(a1 + 759) = v38;
    }
    v41 = *(_QWORD *)(a1 + 896);
    *(_QWORD *)(a1 + 824) = *(_QWORD *)(a1 + 888);
    *(_QWORD *)(a1 + 832) = v41;
    if (v41)
    {
      v42 = (unint64_t *)(v41 + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = *(_QWORD *)(a1 + 912);
    *(_QWORD *)(a1 + 840) = *(_QWORD *)(a1 + 904);
    *(_QWORD *)(a1 + 848) = v44;
    if (v44)
    {
      v45 = (unint64_t *)(v44 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = *(_QWORD *)(a1 + 928);
    *(_QWORD *)(a1 + 856) = *(_QWORD *)(a1 + 920);
    *(_QWORD *)(a1 + 864) = v47;
    if (v47)
    {
      v48 = (unint64_t *)(v47 + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    AMSCore::ProvisionTask::perform((std::runtime_error *)v3, (uint64_t)v6, v74, *(_DWORD *)(a1 + 968), v73, v72);
    v50 = *(std::runtime_error *)v3;
    *(_OWORD *)(v3 + 128) = *(_OWORD *)v3;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if (!atomic_load((unint64_t *)&v50.__vftable[4]))
    {
      *(_BYTE *)(v3 + 151) = 0;
      v52 = (unint64_t *)(*(_QWORD *)(v3 + 128) + 96);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(a1, v52));
      if (!v53)
        return;
    }
    v1 = *(_QWORD *)(v3 + 128);
    if (!*(_BYTE *)(v1 + 88))
      goto LABEL_98;
  }
  if (*(_BYTE *)(a1 + 608))
    goto LABEL_98;
  AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v75, v4);
  v65 = v69;
  if (*(_BYTE *)(a1 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
    *(_BYTE *)(a1 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 24, (uint64_t)&v75);
  *(_BYTE *)(a1 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v75);
LABEL_95:
  if (!*(_BYTE *)(a1 + 608))
    ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
  *(_QWORD *)(a1 + 536) = v65;
  *(_QWORD *)a1 = 0;
  AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v4);
}

void sub_18CC60F78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void (***v20)(_QWORD);
  uint64_t v21;

  if (!*(_BYTE *)(v21 + 608))
    (**v20)(v20);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::AnisetteUtils::`anonymous namespace'::handleProvisionAction(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;

  if (*(_QWORD *)__p)
  {
    v2 = *((_QWORD *)__p + 118);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 118);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 102);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 108);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 106);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 104);
    if (!v15)
      goto LABEL_26;
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((__p[759] & 0x80000000) == 0)
      {
LABEL_27:
        if (__p[608])
          goto LABEL_28;
LABEL_60:
        (**((void (***)(char *))__p + 67))(__p + 536);
        goto LABEL_28;
      }
    }
    else
    {
LABEL_26:
      if ((__p[759] & 0x80000000) == 0)
        goto LABEL_27;
    }
    operator delete(*((void **)__p + 92));
    if (__p[608])
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_28:
  v18 = (char *)*((_QWORD *)__p + 66);
  if (v18 == __p + 504)
  {
    v19 = 4;
    v18 = __p + 504;
  }
  else
  {
    if (!v18)
      goto LABEL_33;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_33:
  if (__p[488])
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  v20 = *((_QWORD *)__p + 116);
  do
  {
    v21 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v22)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v20)
  {
    v23 = (unint64_t *)(*((_QWORD *)__p + 116) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      v25 = (std::__shared_weak_count *)*((_QWORD *)__p + 116);
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v26 = *((_QWORD *)__p + 114);
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      v29 = (std::__shared_weak_count *)*((_QWORD *)__p + 114);
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v30 = *((_QWORD *)__p + 112);
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = (std::__shared_weak_count *)*((_QWORD *)__p + 112);
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      if ((__p[972] & 0x80000000) == 0)
        goto LABEL_55;
      goto LABEL_54;
    }
  }
  if (__p[972] < 0)
LABEL_54:
    operator delete(*((void **)__p + 109));
LABEL_55:
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [33],unsigned int,char [5],unsigned int>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Provisioning machine. attempt = ", 32);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)" of ", 4);
    std::ostream::operator<<();
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 2;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "networking", 10, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CC61518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [38],AMSCore::Error>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21[0] = MEMORY[0x1E0DE4FE0] + 64;
    v16 = v7;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
    std::ios_base::init(v9, v17);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v16 = v4 + 24;
    v21[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = 16;
    v11 = *(_QWORD *)(v16 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Machine provisioning failed. error = ", 37);
    AMSCore::operator<<(&v16, a2);
    v13 = v17[5];
    v14 = (char *)&v17[-1] + *(_QWORD *)(v16 - 24);
    if ((v14[32] & 5) != 0)
    {
      v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 5) + 32))(&rep, *((_QWORD *)v14 + 5), 0, 1, 16);
      v15 = v26;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v23 = 4;
    v24 = v13;
    v25 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "networking", 10, &rep);
    v16 = *v6;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
    v17[0] = v10 + 16;
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v21);
  }
  return result;
}

void sub_18CC617C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_BYTE *AMSCore::AnisetteUtils::`anonymous namespace'::handleEraseProvisioningAction(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _BYTE v25[24];
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  char v45[32];
  char v46;
  int v47;

  v1 = *((_QWORD *)result + 104);
  if (*(_BYTE *)(v1 + 88))
  {
    v2 = result;
    v3 = result + 536;
    v4 = *(_BYTE *)(v1 + 80);
    if (!v4)
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 536), (const std::runtime_error *)(v1 + 8));
      *(_OWORD *)(v2 + 552) = *(_OWORD *)(v1 + 24);
      *((_QWORD *)v2 + 67) = off_1E2521330;
      v5 = (_QWORD *)(v1 + 48);
      v6 = *(_QWORD *)(v1 + 48);
      *((_QWORD *)v2 + 71) = *(_QWORD *)(v1 + 40);
      v7 = v2 + 576;
      *((_QWORD *)v2 + 72) = v6;
      v8 = *(_QWORD *)(v1 + 56);
      *((_QWORD *)v2 + 73) = v8;
      if (v8)
      {
        *(_QWORD *)(v6 + 16) = v7;
        *(_QWORD *)(v1 + 40) = v5;
        *v5 = 0;
        *(_QWORD *)(v1 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 71) = v7;
      }
      v9 = *((_QWORD *)v2 + 104);
      *((_OWORD *)v2 + 37) = *(_OWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v9 + 72) = 0;
    }
    v2[608] = v4;
    v10 = *((_QWORD *)v2 + 105);
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v2 + 105);
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 98);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v2[680])
    {
      if ((char)v2[679] < 0)
        operator delete(*((void **)v2 + 82));
      if (v2[640] && (char)v2[639] < 0)
        operator delete(*((void **)v2 + 77));
    }
    if (!v2[608])
    {
      (**((void (***)(_BYTE *))v2 + 67))(v3);
      v25[0] = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      LOBYTE(v39) = 0;
      v41 = 0;
      LOBYTE(v42) = 0;
      v44 = 0;
      v45[0] = 0;
      v46 = 0;
      v47 = 1;
      if (v2[488])
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
        v2[488] = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)v25);
      v2[488] = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v25);
      goto LABEL_47;
    }
    v17 = (char *)operator new(0x48uLL);
    *((_QWORD *)v2 + 94) = v17;
    *((_QWORD *)v2 + 96) = 0x8000000000000048;
    *((_QWORD *)v2 + 95) = 64;
    strcpy(v17, "com.apple.AppleMediaServicesCore.AnisetteUtils.eraseProvisioning");
    v18 = (char *)operator new(0x20uLL);
    *((_QWORD *)v2 + 91) = v18;
    *((_OWORD *)v2 + 46) = xmmword_18CF51BA0;
    strcpy(v18, "Anisette (Erase Provisioning)");
    v2[688] = 0;
    v2[720] = 0;
    v25[0] = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v45[0] = 0;
    v46 = 0;
    v47 = 3;
    v39 = *((_OWORD *)v2 + 47);
    v40 = *((_QWORD *)v2 + 96);
    *((_QWORD *)v2 + 94) = 0;
    *((_QWORD *)v2 + 95) = 0;
    *((_QWORD *)v2 + 96) = 0;
    v41 = 1;
    v42 = *(_OWORD *)(v2 + 728);
    v43 = *((_QWORD *)v2 + 93);
    *((_QWORD *)v2 + 92) = 0;
    *((_QWORD *)v2 + 93) = 0;
    *((_QWORD *)v2 + 91) = 0;
    v44 = 1;
    std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v45, (__int128 *)v2 + 43);
    if (v2[488])
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      v2[488] = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)v25);
    v2[488] = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v25);
    if (!v2[720])
      goto LABEL_36;
    v19 = (std::__shared_weak_count *)*((_QWORD *)v2 + 89);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)v2 + 87);
    if (!v22)
      goto LABEL_36;
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (((char)v2[751] & 0x80000000) == 0)
      {
LABEL_37:
        if (((char)v2[775] & 0x80000000) == 0)
          goto LABEL_38;
        goto LABEL_45;
      }
    }
    else
    {
LABEL_36:
      if (((char)v2[751] & 0x80000000) == 0)
        goto LABEL_37;
    }
    operator delete(*((void **)v2 + 91));
    if (((char)v2[775] & 0x80000000) == 0)
    {
LABEL_38:
      if (!v2[608])
        goto LABEL_46;
      goto LABEL_47;
    }
LABEL_45:
    operator delete(*((void **)v2 + 94));
    if (!v2[608])
LABEL_46:
      (**(void (***)(_BYTE *))v3)(v3);
LABEL_47:
    *((_QWORD *)v2 + 67) = v2 + 16;
    *(_QWORD *)v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v3);
  }
  __break(1u);
  return result;
}

void sub_18CC61C40(void *a1)
{
  void (***v1)(_QWORD);
  uint64_t v2;
  void *v3;

  operator delete(v3);
  if (!*(_BYTE *)(v2 + 608))
    (**v1)(v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::AnisetteUtils::`anonymous namespace'::handleEraseProvisioningAction(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  if (*(_QWORD *)__p)
  {
    v2 = *((_QWORD *)__p + 105);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 105);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 98);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (__p[680])
    {
      if (__p[679] < 0)
        operator delete(*((void **)__p + 82));
      if (__p[640] && __p[639] < 0)
        operator delete(*((void **)__p + 77));
    }
  }
  v9 = (char *)*((_QWORD *)__p + 66);
  if (v9 == __p + 504)
  {
    v10 = 4;
    v9 = __p + 504;
  }
  else
  {
    if (!v9)
      goto LABEL_23;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_23:
  if (__p[488])
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  v11 = __p[848];
  v12 = __p[823];
  do
  {
    v13 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v14)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v12 && v11 < 0)
    operator delete(*((void **)__p + 103));
  operator delete(__p);
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise *,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise *,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 480);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise *,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_18HTTPResponseActionEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_18HTTPResponseActionEvE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_18HTTPResponseActionEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_18HTTPResponseActionEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::ErrorKeybagProvider::~ErrorKeybagProvider(AMSCore::ErrorKeybagProvider *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E2520BD8;
  *((_QWORD *)this + 1) = off_1E2521330;
  v2 = (char *)this + 8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 40, *((unsigned int **)this + 6));
  MEMORY[0x18D7898AC](v2);
}

{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E2520BD8;
  *((_QWORD *)this + 1) = off_1E2521330;
  v2 = (char *)this + 8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 40, *((unsigned int **)this + 6));
  MEMORY[0x18D7898AC](v2);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t AMSCore::ErrorKeybagProvider::import@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::runtime_error v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  AMSCore::Error::Error(&v14, (const std::runtime_error *)(a1 + 8));
  std::runtime_error::runtime_error(&v8, &v14);
  v9 = v15;
  v8.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v3 = (unsigned int *)v17;
  v10 = v16;
  v11 = v17;
  v12 = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = &v11;
    v16 = &v17;
    v17 = 0;
    v18 = 0;
    v3 = 0;
  }
  else
  {
    v10 = &v11;
  }
  v13 = v19;
  v19 = 0uLL;
  v14.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, v3);
  MEMORY[0x18D7898AC](&v14);
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v8);
  *(_OWORD *)(a2 + 16) = v9;
  *(_QWORD *)a2 = off_1E2521330;
  v4 = v11;
  *(_QWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 40) = v4;
  v5 = a2 + 40;
  v6 = v12;
  *(_QWORD *)(a2 + 48) = v12;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    v4 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v5;
  }
  *(_OWORD *)(a2 + 56) = v13;
  v13 = 0uLL;
  *(_BYTE *)(a2 + 72) = 0;
  v8.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v4);
  return MEMORY[0x18D7898AC](&v8);
}

uint64_t AMSCore::ErrorKeybagProvider::getSyncData@<X0>(AMSCore::ErrorKeybagProvider *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::runtime_error v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::runtime_error v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  AMSCore::Error::Error(&v15, (const std::runtime_error *)((char *)this + 8));
  std::runtime_error::runtime_error(&v9, &v15);
  v10 = v16;
  v9.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v4 = (unsigned int *)v18;
  v11 = v17;
  v12 = v18;
  v13 = v19;
  if (v19)
  {
    *(_QWORD *)(v18 + 16) = &v12;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
    v4 = 0;
  }
  else
  {
    v11 = &v12;
  }
  v14 = v20;
  v20 = 0uLL;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v4);
  MEMORY[0x18D7898AC](&v15);
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v9);
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)a2 = off_1E2521330;
  v5 = v12;
  *(_QWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v5;
  v6 = a2 + 40;
  v7 = v13;
  *(_QWORD *)(a2 + 48) = v13;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v11 = &v12;
    v12 = 0;
    v13 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v6;
  }
  *(_OWORD *)(a2 + 56) = v14;
  v14 = 0uLL;
  *(_BYTE *)(a2 + 72) = 0;
  v9.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v11, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void std::__shared_ptr_emplace<AMSCore::ErrorKeybagProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::ErrorKeybagProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::ErrorKeybagProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMSCore::BuiltInKeybagProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::BuiltInKeybagProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::BuiltInKeybagProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t AMSCore::Logger::log<char [41],AMSCore::Error>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[8];
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v11 = result;
    v12 = MEMORY[0x1E0DE4FE0];
    v13 = MEMORY[0x1E0DE4FE0] + 64;
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v29[0] = MEMORY[0x1E0DE4FE0] + 64;
    v24 = v14;
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v14 - 24)) = v15;
    v16 = (std::ios_base *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24));
    std::ios_base::init(v16, v25);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    v24 = v12 + 24;
    v29[0] = v13;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8];
    v25[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v27 = 0u;
    v28 = 16;
    v18 = *(_QWORD *)(v24 - 24);
    if ((v19 & 1) == 0
    {
    }
    v20 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)a5, v20);
    AMSCore::operator<<(&v24, a6);
    v21 = v25[5];
    v22 = (char *)&v25[-1] + *(_QWORD *)(v24 - 24);
    if ((v22[32] & 5) != 0)
    {
      v23 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v22 + 5) + 32))(&rep, *((_QWORD *)v22 + 5), 0, 1, 16);
      v23 = v34;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v31 = a2;
    v32 = v21;
    v33 = v23;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), a3, a4, &rep);
    v24 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v25[0] = v17 + 16;
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v29);
  }
  return result;
}

void sub_18CC62550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::setCacheValues(const void *a1, size_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[3];
  int v34;
  char v35;
  __n128 v36;
  int v37;
  char v38;
  _QWORD v39[9];
  char v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __n128 v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  __int128 __p;
  __int128 v50;
  int v51;
  uint64_t v52[20];
  __n128 __dst;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v41);
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  v6 = v41;
  if (a2 >= 0x17)
  {
    v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v8 = a2 | 7;
    v9 = v8 + 1;
    p_dst = (__n128 *)operator new(v8 + 1);
    __dst.n128_u64[1] = a2;
    v54 = v9 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v54) = a2;
  p_dst = &__dst;
  if (a2)
LABEL_8:
    memmove(p_dst, a1, a2);
  p_dst->n128_u8[a2] = 0;
  v45 = __dst;
  v46 = v54;
  v47 = 6;
  v36.n128_u8[0] = 0;
  v10 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_((uint64_t)&__dst, &v36, &v45);
  v37 = 6;
  if (v47 != -1)
  {
    if (!v47)
      goto LABEL_13;
    ((void (*)(__n128 *, __n128 *, __n128))off_1E253D240[v47])(&__dst, &v45, v10);
  }
  v47 = 0;
LABEL_13:
  v38 = 1;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, const char *, uint64_t, __n128 *, __n128))(*(_QWORD *)v6 + 48))(v39, v6, "mescal-certificate", 18, &v36, v10);
  if (v38)
  {
    if (v37 != -1)
      ((void (*)(__n128 *, __n128 *))off_1E253D240[v37])(&__dst, &v36);
    v37 = -1;
  }
  if (v47 != -1)
    ((void (*)(__n128 *, __n128 *))off_1E253D240[v47])(&__dst, &v45);
  if (!v40)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v43);
    v11 = v43;
    if (*(int *)(v43 + 8) <= 3)
    {
      v12 = MEMORY[0x1E0DE4FE0];
      v13 = MEMORY[0x1E0DE4FE0] + 64;
      v14 = (unint64_t *)MEMORY[0x1E0DE4F60];
      v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v16 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v52[0] = MEMORY[0x1E0DE4FE0] + 64;
      v45.n128_u64[0] = v15;
      *(unint64_t *)((char *)v45.n128_u64 + *(_QWORD *)(v15 - 24)) = v16;
      v17 = (std::ios_base *)((char *)&v45 + *(_QWORD *)(v45.n128_u64[0] - 24));
      std::ios_base::init(v17, &v45.n128_i8[8]);
      v17[1].__vftable = 0;
      v17[1].__fmtflags_ = -1;
      v45.n128_u64[0] = v12 + 24;
      v52[0] = v13;
      std::streambuf::basic_streambuf();
      v18 = MEMORY[0x1E0DE4FB8];
      v45.n128_u64[1] = MEMORY[0x1E0DE4FB8] + 16;
      __p = 0u;
      v50 = 0u;
      v51 = 16;
      v19 = *(_QWORD *)(v45.n128_u64[0] - 24);
      if ((v20 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Failed to set certificate: ", 27);
      AMSCore::operator<<(&v45, (uint64_t)v39);
      v21 = v48;
      v22 = (char *)&v45 + *(_QWORD *)(v45.n128_u64[0] - 24);
      if ((v22[32] & 5) != 0)
      {
        v23 = -1;
      }
      else
      {
        (*(void (**)(__n128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v22 + 5) + 32))(&__dst, *((_QWORD *)v22 + 5), 0, 1, 16);
        v23 = v56;
      }
      __dst.n128_u64[0] = std::chrono::system_clock::now().__d_.__rep_;
      __dst.n128_u32[2] = 3;
      v54 = v21;
      v55 = v23;
      (*(void (**)(_QWORD, const char *, uint64_t, __n128 *))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), "fairplay", 8, &__dst);
      v45.n128_u64[0] = *v14;
      *(unint64_t *)((char *)v45.n128_u64 + *(_QWORD *)(v45.n128_u64[0] - 24)) = v14[3];
      v45.n128_u64[1] = v18 + 16;
      if (SBYTE7(v50) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v52);
    }
    v24 = v44;
    if (!v44)
      goto LABEL_32;
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (v26)
    {
LABEL_32:
      if (v40)
        goto LABEL_34;
      goto LABEL_33;
    }
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v40)
LABEL_33:
      (*(void (**)(_QWORD *))v39[0])(v39);
  }
LABEL_34:
  v33[0] = a3;
  v34 = 7;
  v35 = 1;
  (*(void (**)(__n128 *__return_ptr, uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)v41 + 48))(&v45, v41, "mescal-certificate-expiration", 29, v33);
  if (v35)
  {
    if (v34 != -1)
      ((void (*)(__n128 *, _QWORD *))off_1E253D240[v34])(&__dst, v33);
    v34 = -1;
  }
  if (!(_BYTE)__p)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__dst);
    AMSCore::Logger::log<char [39],AMSCore::Error>(__dst.n128_i64[0], 3, (uint64_t)"fairplay", 8, "Failed to set certificate expiration: ", (uint64_t)&v45);
    v27 = (std::__shared_weak_count *)__dst.n128_u64[1];
    if (!__dst.n128_u64[1])
      goto LABEL_43;
    v28 = (unint64_t *)(__dst.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (v29)
    {
LABEL_43:
      if ((_BYTE)__p)
        goto LABEL_45;
      goto LABEL_44;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!(_BYTE)__p)
LABEL_44:
      (*(void (**)(__n128 *))v45.n128_u64[0])(&v45);
  }
LABEL_45:
  v30 = v42;
  if (v42)
  {
    v31 = (unint64_t *)&v42->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_18CC62B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::Logger::log<char [39],AMSCore::Error>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[8];
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v11 = result;
    v12 = MEMORY[0x1E0DE4FE0];
    v13 = MEMORY[0x1E0DE4FE0] + 64;
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v29[0] = MEMORY[0x1E0DE4FE0] + 64;
    v24 = v14;
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v14 - 24)) = v15;
    v16 = (std::ios_base *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24));
    std::ios_base::init(v16, v25);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    v24 = v12 + 24;
    v29[0] = v13;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8];
    v25[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v27 = 0u;
    v28 = 16;
    v18 = *(_QWORD *)(v24 - 24);
    if ((v19 & 1) == 0
    {
    }
    v20 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)a5, v20);
    AMSCore::operator<<(&v24, a6);
    v21 = v25[5];
    v22 = (char *)&v25[-1] + *(_QWORD *)(v24 - 24);
    if ((v22[32] & 5) != 0)
    {
      v23 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v22 + 5) + 32))(&rep, *((_QWORD *)v22 + 5), 0, 1, 16);
      v23 = v34;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v31 = a2;
    v32 = v21;
    v33 = v23;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), a3, a4, &rep);
    v24 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v25[0] = v17 + 16;
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v29);
  }
  return result;
}

void sub_18CC62E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [27]>(uint64_t result, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[8];
  void *__p[2];
  __int128 v24;
  int v25;
  uint64_t v26[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v7 = result;
    v8 = MEMORY[0x1E0DE4FE0];
    v9 = MEMORY[0x1E0DE4FE0] + 64;
    v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v26[0] = MEMORY[0x1E0DE4FE0] + 64;
    v21 = v11;
    *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v11 - 24)) = v12;
    v13 = (std::ios_base *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24));
    std::ios_base::init(v13, v22);
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    v21 = v8 + 24;
    v26[0] = v9;
    std::streambuf::basic_streambuf();
    v14 = MEMORY[0x1E0DE4FB8];
    v22[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v24 = 0u;
    v25 = 16;
    v15 = *(_QWORD *)(v21 - 24);
    if ((v16 & 1) == 0
    {
    }
    v17 = strlen(a4);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, (uint64_t)a4, v17);
    v18 = v22[5];
    v19 = (char *)&v22[-1] + *(_QWORD *)(v21 - 24);
    if ((v19[32] & 5) != 0)
    {
      v20 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v19 + 5) + 32))(&rep, *((_QWORD *)v19 + 5), 0, 1, 16);
      v20 = v31;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v28 = 2;
    v29 = v18;
    v30 = v20;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v7 + 16) + 16))(*(_QWORD *)(v7 + 16), a2, a3, &rep);
    v21 = *v10;
    *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24)) = v10[3];
    v22[0] = v14 + 16;
    if (SBYTE7(v24) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v26);
  }
  return result;
}

void sub_18CC630BC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::fetchCertificate(unint64_t a1)
{
  void **v2;
  std::runtime_error *v3;
  void **v4;
  AMSCore::URL *v5;
  uint64_t *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  const std::runtime_error *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  const std::runtime_error *v18;
  char v19;
  std::runtime_error_vtbl *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  void **v42;
  unsigned int *v43;
  unsigned int **v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int **v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  __int128 v109;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  const std::runtime_error *v119;
  char v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  _QWORD *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  std::__shared_weak_count *v147;
  unint64_t *p_shared_owners;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void **v158;
  unsigned int *v159;
  void **v160;
  unsigned int *v161;
  unsigned int **v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  __int128 v168;
  unsigned int *v169;
  unsigned int **v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  std::chrono::system_clock::time_point v174;
  unsigned int *v175;
  void **v176;
  unsigned int *v177;
  unsigned int **v178;
  unint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  std::runtime_error v194;
  void **v195;
  __int128 *v196;
  __int128 *v197;
  AMSCore::URL *v198;
  _BYTE *v199;
  std::runtime_error *v200;
  AMSCore::ExecuteHTTPRequestTask::Options *v201;
  std::runtime_error *v202;
  AMSCore::ExecuteHTTPRequestTask::Options *v203;
  void **v204;
  std::runtime_error *v205;
  std::runtime_error v206;
  __int128 v207;
  unsigned int **v208;
  unsigned int *v209;
  uint64_t v210;
  __int128 v211;
  char v212;
  std::runtime_error v213;
  __int128 v214;
  unsigned int **v215;
  unsigned int *v216;
  uint64_t v217;
  __int128 v218;
  std::runtime_error v219;
  __int128 v220;
  unsigned int **v221;
  unsigned int *v222;
  uint64_t v223;
  __int128 v224;
  std::runtime_error v225;
  __int128 v226;
  unsigned int **v227;
  unsigned int *v228;
  uint64_t v229;
  __int128 v230;
  char v231;

  v2 = (void **)(a1 + 1368);
  v3 = (std::runtime_error *)(a1 + 152);
  v204 = (void **)(a1 + 1368);
  v205 = (std::runtime_error *)(a1 + 576);
  v4 = (void **)(a1 + 976);
  v202 = (std::runtime_error *)(a1 + 152);
  v203 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2120);
  v201 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2288);
  v5 = (AMSCore::URL *)(a1 + 2456);
  v6 = (uint64_t *)(a1 + 2768);
  v7 = a1 + 16;
  v8 = *(unsigned __int8 *)(a1 + 3064);
  if (v8 == 2)
  {
LABEL_166:
    v118 = *(_QWORD *)(a1 + 2952);
    if (!*(_BYTE *)(v118 + 432))
      goto LABEL_311;
    v119 = (const std::runtime_error *)(v118 + 8);
    v120 = *(_BYTE *)(v118 + 424);
    if (!v120)
    {
      std::runtime_error::runtime_error(v3, v119);
      *(_QWORD *)(a1 + 152) = MEMORY[0x1E0DE4F90] + 16;
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v118 + 24);
      *(_QWORD *)(a1 + 152) = off_1E2521330;
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(v118 + 40);
      v125 = (_QWORD *)(v118 + 48);
      v126 = *(_QWORD *)(v118 + 48);
      *(_QWORD *)(a1 + 192) = v126;
      v127 = a1 + 192;
      v128 = *(_QWORD *)(v118 + 56);
      *(_QWORD *)(a1 + 200) = v128;
      if (v128)
      {
        *(_QWORD *)(v126 + 16) = v127;
        *(_QWORD *)(v118 + 40) = v125;
        *v125 = 0;
        *(_QWORD *)(v118 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 184) = v127;
      }
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(v118 + 64);
      *(_QWORD *)(v118 + 64) = 0;
      *(_QWORD *)(v118 + 72) = 0;
      *(_BYTE *)(a1 + 224) = 0;
      *(_QWORD *)(a1 + 152) = &off_1E2521420;
      *(_BYTE *)(a1 + 248) = 0;
      if (*(_BYTE *)(v118 + 104))
      {
        v134 = *(_OWORD *)(v118 + 80);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(v118 + 96);
        *(_OWORD *)(a1 + 224) = v134;
        *(_QWORD *)(v118 + 88) = 0;
        *(_QWORD *)(v118 + 96) = 0;
        *(_QWORD *)(v118 + 80) = 0;
        *(_BYTE *)(a1 + 248) = 1;
      }
      v135 = *(_OWORD *)(v118 + 128);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(v118 + 112);
      *(_OWORD *)(a1 + 272) = v135;
      v136 = *(_OWORD *)(v118 + 144);
      v137 = *(_OWORD *)(v118 + 160);
      v138 = *(_OWORD *)(v118 + 176);
      *(_OWORD *)(a1 + 329) = *(_OWORD *)(v118 + 185);
      *(_OWORD *)(a1 + 304) = v137;
      *(_OWORD *)(a1 + 320) = v138;
      *(_OWORD *)(a1 + 288) = v136;
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
      *(_QWORD *)(a1 + 352) = 0;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(v118 + 208);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(v118 + 224);
      *(_QWORD *)(v118 + 216) = 0;
      *(_QWORD *)(v118 + 224) = 0;
      *(_QWORD *)(v118 + 208) = 0;
      v139 = *(_OWORD *)(v118 + 248);
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(v118 + 232);
      *(_OWORD *)(a1 + 392) = v139;
      v140 = *(_OWORD *)(v118 + 264);
      v141 = *(_OWORD *)(v118 + 280);
      v142 = *(_OWORD *)(v118 + 312);
      *(_OWORD *)(a1 + 440) = *(_OWORD *)(v118 + 296);
      *(_OWORD *)(a1 + 456) = v142;
      *(_OWORD *)(a1 + 408) = v140;
      *(_OWORD *)(a1 + 424) = v141;
      v143 = *(_OWORD *)(v118 + 328);
      v144 = *(_OWORD *)(v118 + 344);
      v145 = *(_OWORD *)(v118 + 360);
      *(_OWORD *)(a1 + 514) = *(_OWORD *)(v118 + 370);
      *(_OWORD *)(a1 + 488) = v144;
      *(_OWORD *)(a1 + 504) = v145;
      *(_OWORD *)(a1 + 472) = v143;
      *(_BYTE *)(a1 + 536) = 0;
      *(_BYTE *)(a1 + 560) = 0;
      if (*(_BYTE *)(v118 + 416))
      {
        v146 = *(_OWORD *)(v118 + 392);
        *(_QWORD *)(a1 + 552) = *(_QWORD *)(v118 + 408);
        *(_OWORD *)(a1 + 536) = v146;
        *(_QWORD *)(v118 + 400) = 0;
        *(_QWORD *)(v118 + 408) = 0;
        *(_QWORD *)(v118 + 392) = 0;
        *(_BYTE *)(a1 + 560) = 1;
      }
LABEL_189:
      *(_BYTE *)(a1 + 568) = v120;
      v147 = *(std::__shared_weak_count **)(a1 + 2960);
      if (v147)
      {
        p_shared_owners = (unint64_t *)&v147->__shared_owners_;
        do
          v149 = __ldaxr(p_shared_owners);
        while (__stlxr(v149 - 1, p_shared_owners));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
      v150 = *(std::__shared_weak_count **)(a1 + 2976);
      if (v150)
      {
        v151 = (unint64_t *)&v150->__shared_owners_;
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v201);
      v153 = *(std::__shared_weak_count **)(a1 + 1360);
      if (v153)
      {
        v154 = (unint64_t *)&v153->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
      if (!*(_BYTE *)(a1 + 568))
      {
        LODWORD(v206.__vftable) = 606;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError,AMSCore::FairPlayErrorCode>((uint64_t)&v225, (uint64_t)v3, (unsigned int *)&v206);
        v158 = (void **)(a1 + 24);
        if (*(_BYTE *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
          {
            if (*(char *)(a1 + 47) < 0)
              operator delete(*v158);
          }
          else
          {
            (*(void (**)(unint64_t))*v158)(a1 + 24);
          }
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v225);
        v168 = v226;
        v170 = v227;
        v169 = v228;
        *(_QWORD *)(a1 + 64) = v228;
        v171 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v168;
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = v170;
        v172 = v229;
        *(_QWORD *)(a1 + 72) = v229;
        if (v172)
        {
          *((_QWORD *)v169 + 2) = v171;
          v227 = &v228;
          v228 = 0;
          v229 = 0;
          v169 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v171;
        }
        *(_OWORD *)(a1 + 80) = v230;
        v230 = 0uLL;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v225.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v227, v169);
        MEMORY[0x18D7898AC](&v225);
        goto LABEL_268;
      }
      AMSCore::HTTPResponse::getDecodedObject(*(AMSCore::HTTPResponse **)(a1 + 336));
      v157 = v156;
      AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error> const&>(&v225, v156, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
      if (v231)
      {
        std::runtime_error::runtime_error(&v206, &v225);
        v207 = v226;
        v206.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v208 = v227;
        v209 = v228;
        v210 = v229;
        if (v229)
        {
          *((_QWORD *)v228 + 2) = &v209;
          v227 = &v228;
          v228 = 0;
          v229 = 0;
        }
        else
        {
          v208 = &v209;
        }
        v211 = v230;
        v230 = 0uLL;
        std::runtime_error::runtime_error(&v219, &v206);
        v220 = v207;
        v159 = v209;
        v219.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v221 = v208;
        v222 = v209;
        v223 = v210;
        if (v210)
        {
          *((_QWORD *)v209 + 2) = &v222;
          v159 = 0;
          v208 = &v209;
          v209 = 0;
          v210 = 0;
        }
        else
        {
          v221 = &v222;
        }
        v224 = v211;
        v211 = 0uLL;
        v206.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v208, v159);
        MEMORY[0x18D7898AC](&v206);
        v160 = (void **)(a1 + 24);
        if (*(_BYTE *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
          {
            if (*(char *)(a1 + 47) < 0)
              operator delete(*v160);
          }
          else
          {
            (*(void (**)(unint64_t))*v160)(a1 + 24);
          }
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v219);
        v162 = v221;
        v161 = v222;
        *(_QWORD *)(a1 + 64) = v222;
        v163 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v220;
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = v162;
        v164 = v223;
        *(_QWORD *)(a1 + 72) = v223;
        if (v164)
        {
          *((_QWORD *)v161 + 2) = v163;
          v161 = 0;
          v221 = &v222;
          v222 = 0;
          v223 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v163;
        }
        v2 = v204;
        *(_OWORD *)(a1 + 80) = v224;
        v224 = 0uLL;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v219.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v221, v161);
        MEMORY[0x18D7898AC](&v219);
        if (v231)
        {
          v225.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v165 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
          if (*((_QWORD *)&v230 + 1))
          {
            v166 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v227, v228);
          MEMORY[0x18D7898AC](&v225);
        }
        v3 = v202;
        goto LABEL_268;
      }
      if (*(_BYTE *)(v157 + 72))
      {
        AMSCore::getValueByKey<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any> const>((uint64_t)&v206, (uint64_t *)v157);
        AMSCore::nestedError<std::expected<std::reference_wrapper<AMSCore::DataBuffer const>,AMSCore::Error> &>(&v225, (uint64_t)&v206, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
        if (v231)
        {
          std::runtime_error::runtime_error(&v219, &v225);
          v220 = v226;
          v219.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v221 = v227;
          v222 = v228;
          v223 = v229;
          if (v229)
          {
            *((_QWORD *)v228 + 2) = &v222;
            v227 = &v228;
            v228 = 0;
            v229 = 0;
          }
          else
          {
            v221 = &v222;
          }
          v224 = v230;
          v230 = 0uLL;
          std::runtime_error::runtime_error(&v213, &v219);
          v214 = v220;
          v213.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v175 = v222;
          v215 = v221;
          v216 = v222;
          v217 = v223;
          if (v223)
          {
            *((_QWORD *)v222 + 2) = &v216;
            v175 = 0;
            v221 = &v222;
            v222 = 0;
            v223 = 0;
          }
          else
          {
            v215 = &v216;
          }
          v218 = v224;
          v224 = 0uLL;
          v219.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v221, v175);
          MEMORY[0x18D7898AC](&v219);
          v176 = (void **)(a1 + 24);
          if (*(_BYTE *)(a1 + 104))
          {
            if (*(_BYTE *)(a1 + 96))
            {
              if (*(char *)(a1 + 47) < 0)
                operator delete(*v176);
            }
            else
            {
              (*(void (**)(unint64_t))*v176)(a1 + 24);
            }
            *(_BYTE *)(a1 + 104) = 0;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v213);
          v178 = v215;
          v177 = v216;
          *(_QWORD *)(a1 + 64) = v216;
          v179 = a1 + 64;
          *(_OWORD *)(a1 + 40) = v214;
          *(_QWORD *)(a1 + 24) = off_1E2521330;
          *(_QWORD *)(a1 + 56) = v178;
          v180 = v217;
          *(_QWORD *)(a1 + 72) = v217;
          if (v180)
          {
            *((_QWORD *)v177 + 2) = v179;
            v177 = 0;
            v215 = &v216;
            v216 = 0;
            v217 = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 56) = v179;
          }
          v2 = v204;
          *(_OWORD *)(a1 + 80) = v218;
          v218 = 0uLL;
          *(_BYTE *)(a1 + 96) = 0;
          *(_BYTE *)(a1 + 104) = 1;
          v213.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v215, v177);
          MEMORY[0x18D7898AC](&v213);
          if (v231)
          {
            v225.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v181 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
            if (*((_QWORD *)&v230 + 1))
            {
              v182 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
              do
                v183 = __ldaxr(v182);
              while (__stlxr(v183 - 1, v182));
              if (!v183)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v227, v228);
            MEMORY[0x18D7898AC](&v225);
          }
          v3 = v202;
          if (!v212)
LABEL_267:
            ((void (*)(std::runtime_error *))v206.~runtime_error)(&v206);
LABEL_268:
          if (*(_BYTE *)(a1 + 568))
          {
            v184 = *(std::__shared_weak_count **)(a1 + 344);
            if (v184)
            {
              v185 = (unint64_t *)&v184->__shared_owners_;
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              if (!v186)
              {
                ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                std::__shared_weak_count::__release_weak(v184);
              }
            }
            AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 168));
            v187 = *(std::__shared_weak_count **)(a1 + 160);
            if (v187)
            {
              v188 = (unint64_t *)&v187->__shared_owners_;
              do
                v189 = __ldaxr(v188);
              while (__stlxr(v189 - 1, v188));
              if (!v189)
              {
                ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                std::__shared_weak_count::__release_weak(v187);
              }
            }
            if (!*(_BYTE *)(a1 + 968))
              goto LABEL_287;
          }
          else
          {
            ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
            if (!*(_BYTE *)(a1 + 968))
            {
LABEL_287:
              ((void (*)(std::runtime_error *))v205->~runtime_error)(v205);
LABEL_288:
              AMSCore::EncodeHTTPRequestTask::Options::~Options(v2);
              AMSCore::ExecuteHTTPRequestTask::Options::~Options(v203);
              v100 = 0;
              v101 = 0;
              goto LABEL_289;
            }
          }
LABEL_280:
          v190 = *(std::__shared_weak_count **)(a1 + 960);
          if (v190)
          {
            v191 = (unint64_t *)&v190->__shared_owners_;
            do
              v192 = __ldaxr(v191);
            while (__stlxr(v192 - 1, v191));
            if (!v192)
            {
              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
              std::__shared_weak_count::__release_weak(v190);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v205->__vftable);
          goto LABEL_288;
        }
        if (*(_BYTE *)(a1 + 568))
        {
          v173 = *(_QWORD *)(a1 + 336);
          v174.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          AMSCore::HTTPResponse::getCacheControlTimePointIfDefined((uint64_t)&v225, v173, v174.__d_.__rep_, 1);
          if (v231)
            v174.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v225.__vftable;
          else
            ((void (*)(std::runtime_error *))v225.~runtime_error)(&v225);
          if (v212)
          {
            if (SHIBYTE(v206.what) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v225, (const std::string::value_type *)v206.~runtime_error, (std::string::size_type)v206.~runtime_error_0);
            }
            else
            {
              v194 = *(std::runtime_error *)&v206.~runtime_error;
              *(_QWORD *)&v226 = v206.what;
              v225 = v194;
            }
            *((std::chrono::system_clock::time_point *)&v226 + 1) = v174;
            v195 = (void **)(a1 + 24);
            if (*(_BYTE *)(a1 + 104))
            {
              if (*(_BYTE *)(a1 + 96))
              {
                if (*(char *)(a1 + 47) < 0)
                  operator delete(*v195);
              }
              else
              {
                (*(void (**)(unint64_t))*v195)(a1 + 24);
              }
              v174.__d_.__rep_ = *((_QWORD *)&v226 + 1);
            }
            *(std::runtime_error *)v195 = v225;
            *(_QWORD *)(a1 + 40) = v226;
            *(std::chrono::system_clock::time_point *)(a1 + 48) = v174;
            *(_BYTE *)(a1 + 96) = 1;
            *(_BYTE *)(a1 + 104) = 1;
            if (!v212)
              goto LABEL_267;
            goto LABEL_268;
          }
        }
      }
LABEL_311:
      __break(1u);
      return;
    }
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v118 + 8);
    v119->__vftable = 0;
    *(_QWORD *)(v118 + 16) = 0;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(v118 + 24);
    v121 = (_QWORD *)(v118 + 32);
    v122 = *(_QWORD *)(v118 + 32);
    *(_QWORD *)(a1 + 176) = v122;
    v123 = a1 + 176;
    v124 = *(_QWORD *)(v118 + 40);
    *(_QWORD *)(a1 + 184) = v124;
    if (v124)
    {
      *(_QWORD *)(v122 + 16) = v123;
      *(_QWORD *)(v118 + 24) = v121;
      *v121 = 0;
      *(_QWORD *)(v118 + 40) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 168) = v123;
    }
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(v118 + 48);
    *(_QWORD *)(v118 + 48) = 0;
    *(_QWORD *)(v118 + 56) = 0;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(v118 + 64);
    *(_QWORD *)(v118 + 64) = 0;
    *(_QWORD *)(v118 + 72) = 0;
    *(_BYTE *)(a1 + 224) = 0;
    *(_BYTE *)(a1 + 248) = 0;
    if (*(_BYTE *)(v118 + 104))
    {
      v129 = *(_OWORD *)(v118 + 80);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(v118 + 96);
      *(_OWORD *)(a1 + 224) = v129;
      *(_QWORD *)(v118 + 88) = 0;
      *(_QWORD *)(v118 + 96) = 0;
      *(_QWORD *)(v118 + 80) = 0;
      *(_BYTE *)(a1 + 248) = 1;
    }
    *(_BYTE *)(a1 + 256) = 0;
    *(_DWORD *)(a1 + 272) = -1;
    v130 = *(unsigned int *)(v118 + 128);
    if ((_DWORD)v130 != -1)
    {
      ((void (*)(std::runtime_error *, unint64_t, uint64_t))off_1E253CA98[v130])(&v225, a1 + 256, v118 + 112);
      *(_DWORD *)(a1 + 272) = v130;
    }
    v131 = *(_OWORD *)(v118 + 136);
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(v118 + 152);
    *(_OWORD *)(a1 + 280) = v131;
    v132 = (_QWORD *)(v118 + 184);
    v133 = *(_QWORD *)(v118 + 184);
    if (v133)
    {
      if (v133 == v118 + 160)
      {
        *(_QWORD *)(a1 + 328) = a1 + 304;
        (*(void (**)(_QWORD))(*(_QWORD *)*v132 + 24))(*v132);
        goto LABEL_183;
      }
      *(_QWORD *)(a1 + 328) = v133;
    }
    else
    {
      v132 = (_QWORD *)(a1 + 328);
    }
    *v132 = 0;
LABEL_183:
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(v118 + 192);
    *(_QWORD *)(v118 + 192) = 0;
    *(_QWORD *)(v118 + 200) = 0;
    goto LABEL_189;
  }
  v199 = (_BYTE *)(a1 + 3064);
  if (v8 == 1)
    goto LABEL_3;
  v200 = (std::runtime_error *)(a1 + 2768);
  v198 = (AMSCore::URL *)(a1 + 2456);
  v16 = (uint64_t *)(a1 + 2888);
  v17 = *(_QWORD *)(a1 + 3016);
  if (!*(_BYTE *)(v17 + 88))
    goto LABEL_311;
  v196 = (__int128 *)(a1 + 2904);
  v197 = (__int128 *)(a1 + 2872);
  v18 = (const std::runtime_error *)(v17 + 8);
  v19 = *(_BYTE *)(v17 + 80);
  if (v19)
  {
    v20 = v18->__vftable;
    v18->__vftable = 0;
    v6 = (uint64_t *)(a1 + 2768);
    v200->__vftable = v20;
  }
  else
  {
    std::runtime_error::runtime_error(v200, v18);
    *(_OWORD *)(a1 + 2784) = *(_OWORD *)(v17 + 24);
    *(_QWORD *)(a1 + 2768) = off_1E2521330;
    v25 = (_QWORD *)(v17 + 48);
    v26 = *(_QWORD *)(v17 + 48);
    *(_QWORD *)(a1 + 2800) = *(_QWORD *)(v17 + 40);
    v27 = a1 + 2808;
    *(_QWORD *)(a1 + 2808) = v26;
    v28 = *(_QWORD *)(v17 + 56);
    *(_QWORD *)(a1 + 2816) = v28;
    if (v28)
    {
      *(_QWORD *)(v26 + 16) = v27;
      *(_QWORD *)(v17 + 40) = v25;
      *v25 = 0;
      *(_QWORD *)(v17 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 2800) = v27;
    }
    v55 = *(_QWORD *)(a1 + 3016);
    *((_OWORD *)v204 + 91) = *(_OWORD *)(v55 + 64);
    *(_QWORD *)(v55 + 64) = 0;
    *(_QWORD *)(v55 + 72) = 0;
    v6 = (uint64_t *)v200;
  }
  *(_BYTE *)(a1 + 2840) = v19;
  v56 = *(_QWORD *)(a1 + 3024);
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      v59 = *(std::__shared_weak_count **)(a1 + 3024);
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v60 = *(std::__shared_weak_count **)(a1 + 584);
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      if ((*(char *)(a1 + 2871) & 0x80000000) == 0)
        goto LABEL_76;
      goto LABEL_75;
    }
  }
  if (*(char *)(a1 + 2871) < 0)
LABEL_75:
    operator delete(*(void **)(a1 + 2848));
LABEL_76:
  v63 = *(std::__shared_weak_count **)(a1 + 160);
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  AMSCore::nestedError<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error> &>(&v225, (uint64_t)v6, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (v231)
  {
    std::runtime_error::runtime_error(&v219, &v225);
    v220 = v226;
    v219.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v221 = v227;
    v222 = v228;
    v223 = v229;
    if (v229)
    {
      *((_QWORD *)v228 + 2) = &v222;
      v227 = &v228;
      v228 = 0;
      v229 = 0;
    }
    else
    {
      v221 = &v222;
    }
    v224 = v230;
    v230 = 0uLL;
    std::runtime_error::runtime_error(&v206, &v219);
    v207 = v220;
    v206.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v92 = v222;
    v208 = v221;
    v209 = v222;
    v210 = v223;
    if (v223)
    {
      *((_QWORD *)v222 + 2) = &v209;
      v92 = 0;
      v221 = &v222;
      v222 = 0;
      v223 = 0;
    }
    else
    {
      v208 = &v209;
    }
    v211 = v224;
    v224 = 0uLL;
    v219.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v221, v92);
    MEMORY[0x18D7898AC](&v219);
    v5 = v198;
    if (*(_BYTE *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (*(char *)(a1 + 47) < 0)
          operator delete(*(void **)(a1 + 24));
      }
      else
      {
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      }
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v206);
    v94 = v208;
    v93 = v209;
    *(_QWORD *)(a1 + 64) = v209;
    v95 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v207;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v94;
    v96 = v210;
    *(_QWORD *)(a1 + 72) = v210;
    if (v96)
    {
      *((_QWORD *)v93 + 2) = v95;
      v93 = 0;
      v208 = &v209;
      v209 = 0;
      v210 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v95;
    }
    *(_OWORD *)(a1 + 80) = v211;
    v211 = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v206.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v208, v93);
    MEMORY[0x18D7898AC](&v206);
    v6 = (uint64_t *)v200;
    if (v231)
    {
      v225.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v97 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
      if (*((_QWORD *)&v230 + 1))
      {
        v98 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v227, v228);
      MEMORY[0x18D7898AC](&v225);
    }
    v100 = *(_QWORD *)(a1 + 3008);
    v101 = *(_QWORD *)(a1 + 2992);
    v3 = v202;
LABEL_289:
    v193 = *(_QWORD *)(a1 + 2768);
    if (*(_BYTE *)(a1 + 2840))
    {
      *v6 = 0;
      if (v193)
        (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
      if (*(_BYTE *)(a1 + 2608))
        goto LABEL_293;
    }
    else
    {
      (*(void (**)(uint64_t *))v193)(v6);
      if (*(_BYTE *)(a1 + 2608))
      {
LABEL_293:
        AMSCore::URL::~URL(v5);
LABEL_296:
        *(_QWORD *)(a1 + 3056) = v101;
        *(_QWORD *)(a1 + 3048) = v100;
        *(_QWORD *)(a1 + 152) = v7;
        *(_QWORD *)a1 = 0;
        AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
        return;
      }
    }
    (**(void (***)(AMSCore::URL *))v5)(v5);
    goto LABEL_296;
  }
  v66 = *(_QWORD *)(a1 + 2992);
  *(_QWORD *)(a1 + 2936) = *(_QWORD *)(a1 + 2984);
  *(_QWORD *)(a1 + 2944) = v66;
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v69 = *(_QWORD *)(a1 + 3008);
  *(_QWORD *)(a1 + 2920) = *(_QWORD *)(a1 + 3000);
  *(_QWORD *)(a1 + 2928) = v69;
  v3 = v202;
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v203, (__int128 *)(a1 + 2936), (__int128 *)(a1 + 2920));
  v72 = *(std::__shared_weak_count **)(a1 + 2928);
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *(std::__shared_weak_count **)(a1 + 2944);
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (!*(_BYTE *)(a1 + 2608))
    goto LABEL_311;
  *(_BYTE *)(a1 + 2616) = 0;
  *(_BYTE *)(a1 + 2640) = 0;
  if (*(_BYTE *)(a1 + 2480))
  {
    *(_OWORD *)(a1 + 2616) = *(_OWORD *)v198;
    *(_QWORD *)(a1 + 2632) = *((_QWORD *)v198 + 2);
    *((_QWORD *)v198 + 1) = 0;
    *((_QWORD *)v198 + 2) = 0;
    *(_QWORD *)v198 = 0;
    *(_BYTE *)(a1 + 2640) = 1;
  }
  *(_BYTE *)(a1 + 2648) = 0;
  *(_BYTE *)(a1 + 2672) = 0;
  if (*(_BYTE *)(a1 + 2512))
  {
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2504);
    *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2504) = 0;
    *(_QWORD *)(a1 + 2488) = 0;
    *(_QWORD *)(a1 + 2496) = 0;
    *(_BYTE *)(a1 + 2672) = 1;
  }
  *(_BYTE *)(a1 + 2680) = 0;
  *(_BYTE *)(a1 + 2704) = 0;
  if (*(_BYTE *)(a1 + 2544))
  {
    *(_QWORD *)(a1 + 2696) = *(_QWORD *)(a1 + 2536);
    *(_OWORD *)(a1 + 2680) = *(_OWORD *)(a1 + 2520);
    *(_QWORD *)(a1 + 2536) = 0;
    *(_QWORD *)(a1 + 2520) = 0;
    *(_QWORD *)(a1 + 2528) = 0;
    *(_BYTE *)(a1 + 2704) = 1;
  }
  *(_DWORD *)(a1 + 2712) = *(_DWORD *)(a1 + 2552);
  *(_QWORD *)(a1 + 2720) = a1 + 2720;
  *(_QWORD *)(a1 + 2728) = a1 + 2720;
  *(_QWORD *)(a1 + 2736) = 0;
  v78 = *(_QWORD *)(a1 + 2576);
  if (v78)
  {
    v79 = *(uint64_t **)(a1 + 2568);
    v80 = *(_QWORD *)(a1 + 2560);
    v81 = *v79;
    *(_QWORD *)(v81 + 8) = *(_QWORD *)(v80 + 8);
    **(_QWORD **)(v80 + 8) = v81;
    v82 = *(_QWORD *)(a1 + 2720);
    *(_QWORD *)(v82 + 8) = v79;
    *v79 = v82;
    *(_QWORD *)(a1 + 2720) = v80;
    *(_QWORD *)(v80 + 8) = a1 + 2720;
    *(_QWORD *)(a1 + 2736) = v78;
    *(_QWORD *)(a1 + 2576) = 0;
  }
  *(_QWORD *)(a1 + 2760) = *(_QWORD *)(a1 + 2600);
  *(_OWORD *)(a1 + 2744) = *(_OWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2600) = 0;
  *(_QWORD *)(a1 + 2584) = 0;
  *(_QWORD *)(a1 + 2592) = 0;
  *((_OWORD *)v204 + 96) = *((_OWORD *)v204 + 101);
  *((_OWORD *)v204 + 94) = *((_OWORD *)v204 + 102);
  AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v204, (__int128 *)(a1 + 2616), v196, v197);
  v83 = *(std::__shared_weak_count **)(a1 + 2880);
  if (v83)
  {
    v84 = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = *(std::__shared_weak_count **)(a1 + 2912);
  if (v86)
  {
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 2616));
  if (!*(_BYTE *)(a1 + 2840))
    goto LABEL_311;
  v89 = *v6;
  *v16 = *v6;
  if (v89)
  {
    v90 = (_QWORD *)operator new();
    v91 = *v6;
    *v90 = &off_1E2523180;
    v90[1] = 0;
    v90[2] = 0;
    v90[3] = v91;
  }
  else
  {
    v90 = 0;
  }
  *(_QWORD *)(a1 + 2896) = v90;
  *(_QWORD *)(a1 + 2768) = 0;
  v102 = *((_OWORD *)v204 + 95);
  *v16 = 0;
  *(_QWORD *)(a1 + 2896) = 0;
  v103 = *(std::__shared_weak_count **)(a1 + 1376);
  *(_OWORD *)v204 = v102;
  v5 = v198;
  if (v103)
  {
    v104 = (unint64_t *)&v103->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = *(std::__shared_weak_count **)(a1 + 2896);
  if (v106)
  {
    v107 = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 1744, (uint64_t)v204);
  AMSCore::EncodeHTTPRequestTask::perform(v202, a1 + 1744);
  v109 = *(_OWORD *)(a1 + 152);
  *((_OWORD *)v204 + 104) = v109;
  v202->__vftable = 0;
  v202->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v109 + 416)))
  {
    *v199 = 1;
    v111 = (unint64_t *)(*(_QWORD *)(a1 + 3032) + 416);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(a1, v111));
    if (!v112)
      return;
  }
LABEL_3:
  v9 = *(_QWORD *)(a1 + 3032);
  if (!*(_BYTE *)(v9 + 408))
    goto LABEL_311;
  v10 = (const std::runtime_error *)(v9 + 8);
  v11 = *(_BYTE *)(v9 + 400);
  if (v11)
  {
    v12 = (uint64_t)v205;
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v205, (uint64_t)v10);
    v13 = (_QWORD *)(v9 + 384);
    *(_QWORD *)(a1 + 952) = *(_QWORD *)(v9 + 384);
    v14 = (_QWORD *)(a1 + 960);
    v15 = (_QWORD *)(v9 + 392);
  }
  else
  {
    v12 = (uint64_t)v205;
    std::runtime_error::runtime_error(v205, v10);
    *(_OWORD *)(a1 + 592) = *(_OWORD *)(v9 + 24);
    *(_QWORD *)(a1 + 576) = off_1E2521330;
    v21 = (_QWORD *)(v9 + 48);
    v22 = *(_QWORD *)(v9 + 48);
    *(_QWORD *)(a1 + 608) = *(_QWORD *)(v9 + 40);
    v23 = a1 + 616;
    *(_QWORD *)(a1 + 616) = v22;
    v24 = *(_QWORD *)(v9 + 56);
    *(_QWORD *)(a1 + 624) = v24;
    if (v24)
    {
      *(_QWORD *)(v22 + 16) = v23;
      *(_QWORD *)(v9 + 40) = v21;
      *v21 = 0;
      *(_QWORD *)(v9 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 608) = v23;
    }
    v29 = *(_QWORD *)(a1 + 3032);
    v30 = *(_QWORD *)(v29 + 64);
    v13 = (_QWORD *)(v29 + 64);
    *(_QWORD *)(a1 + 632) = v30;
    v14 = (_QWORD *)(a1 + 640);
    v15 = v13 + 1;
  }
  *v14 = *v15;
  *v13 = 0;
  v13[1] = 0;
  *(_BYTE *)(a1 + 968) = v11;
  v31 = *(_QWORD *)(a1 + 3040);
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      v34 = *(std::__shared_weak_count **)(a1 + 3040);
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v35 = *(std::__shared_weak_count **)(a1 + 160);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 1744));
  AMSCore::nestedError<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error> &>(&v225, v12, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (v231)
  {
    std::runtime_error::runtime_error(&v206, &v225);
    v207 = v226;
    v206.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v208 = v227;
    v209 = v228;
    v210 = v229;
    if (v229)
    {
      *((_QWORD *)v228 + 2) = &v209;
      v227 = &v228;
      v228 = 0;
      v229 = 0;
    }
    else
    {
      v208 = &v209;
    }
    v211 = v230;
    v230 = 0uLL;
    std::runtime_error::runtime_error(&v219, &v206);
    v220 = v207;
    v41 = v209;
    v219.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v221 = v208;
    v222 = v209;
    v223 = v210;
    if (v210)
    {
      *((_QWORD *)v209 + 2) = &v222;
      v41 = 0;
      v208 = &v209;
      v209 = 0;
      v210 = 0;
    }
    else
    {
      v221 = &v222;
    }
    v224 = v211;
    v211 = 0uLL;
    v206.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v208, v41);
    MEMORY[0x18D7898AC](&v206);
    v42 = (void **)(a1 + 24);
    if (*(_BYTE *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (*(char *)(a1 + 47) < 0)
          operator delete(*v42);
      }
      else
      {
        (*(void (**)(unint64_t))*v42)(a1 + 24);
      }
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v219);
    v44 = v221;
    v43 = v222;
    *(_QWORD *)(a1 + 64) = v222;
    v45 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v220;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v44;
    v46 = v223;
    *(_QWORD *)(a1 + 72) = v223;
    if (v46)
    {
      *((_QWORD *)v43 + 2) = v45;
      v43 = 0;
      v221 = &v222;
      v222 = 0;
      v223 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v45;
    }
    v2 = v204;
    *(_OWORD *)(a1 + 80) = v224;
    v224 = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v219.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v221, v43);
    MEMORY[0x18D7898AC](&v219);
    if (v231)
    {
      v225.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
      if (*((_QWORD *)&v230 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v227, v228);
      MEMORY[0x18D7898AC](&v225);
    }
    v3 = v202;
    if (!*(_BYTE *)(a1 + 968))
      goto LABEL_287;
    goto LABEL_280;
  }
  if (!*(_BYTE *)(a1 + 968))
    goto LABEL_311;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v4, v12);
  *(_QWORD *)(a1 + 1352) = *(_QWORD *)(a1 + 952);
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a1 + 960);
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 2288) = *(_QWORD *)(a1 + 2120);
  v38 = a1 + 2296;
  v39 = *(_QWORD *)(a1 + 2128);
  *(_QWORD *)(a1 + 2296) = v39;
  v40 = *(_QWORD *)(a1 + 2136);
  *(_QWORD *)(a1 + 2304) = v40;
  v2 = v204;
  if (v40)
  {
    *(_QWORD *)(v39 + 16) = v38;
    *(_QWORD *)v203 = a1 + 2128;
    *(_QWORD *)(a1 + 2128) = 0;
    *(_QWORD *)(a1 + 2136) = 0;
  }
  else
  {
    *(_QWORD *)v201 = v38;
  }
  v50 = *(_OWORD *)(a1 + 2144);
  *(_QWORD *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 2144) = 0;
  v51 = *(_OWORD *)(a1 + 2160);
  *((_OWORD *)v204 + 59) = v50;
  *((_OWORD *)v204 + 60) = v51;
  *(_QWORD *)(a1 + 2160) = 0;
  *(_QWORD *)(a1 + 2168) = 0;
  *(_BYTE *)(a1 + 2344) = 0;
  *(_BYTE *)(a1 + 2368) = 0;
  if (*(_BYTE *)(a1 + 2200))
  {
    *(_OWORD *)(a1 + 2344) = *(_OWORD *)(a1 + 2176);
    *(_QWORD *)(a1 + 2360) = *(_QWORD *)(a1 + 2192);
    *(_QWORD *)(a1 + 2176) = 0;
    *(_QWORD *)(a1 + 2192) = 0;
    *(_QWORD *)(a1 + 2184) = 0;
    *(_BYTE *)(a1 + 2368) = 1;
  }
  *(_BYTE *)(a1 + 2376) = 0;
  *(_DWORD *)(a1 + 2392) = -1;
  v52 = *(unsigned int *)(a1 + 2224);
  if ((_DWORD)v52 != -1)
  {
    ((void (*)(std::runtime_error *, unint64_t, unint64_t))off_1E253CA98[v52])(&v225, a1 + 2376, a1 + 2208);
    *(_DWORD *)(a1 + 2392) = v52;
  }
  *(_DWORD *)(a1 + 2416) = *(_DWORD *)(a1 + 2248);
  *(_OWORD *)(a1 + 2400) = *(_OWORD *)(a1 + 2232);
  v53 = *(_QWORD *)(a1 + 2280);
  if (v53)
  {
    if (v53 == a1 + 2256)
    {
      *(_QWORD *)(a1 + 2448) = a1 + 2424;
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
      goto LABEL_162;
    }
    v54 = (_QWORD *)(a1 + 2280);
    *(_QWORD *)(a1 + 2448) = v53;
  }
  else
  {
    v54 = (_QWORD *)(a1 + 2448);
  }
  *v54 = 0;
LABEL_162:
  AMSCore::ExecuteHTTPRequestTask::perform((std::runtime_error *)(a1 + 2968), (uint64_t)v4, (uint64_t)v201);
  v113 = *(_QWORD *)(a1 + 2968);
  v114 = *(_QWORD *)(a1 + 2976);
  *(_QWORD *)(a1 + 2968) = 0;
  *(_QWORD *)(a1 + 2976) = 0;
  *(_QWORD *)(a1 + 2952) = v113;
  *(_QWORD *)(a1 + 2960) = v114;
  if (atomic_load((unint64_t *)(v113 + 440)))
    goto LABEL_166;
  *v199 = 2;
  v116 = (unint64_t *)(*(_QWORD *)(a1 + 2952) + 440);
  do
    v117 = __ldaxr(v116);
  while (__stlxr(a1, v116));
  if (v117)
    goto LABEL_166;
}

void sub_18CC649F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, AMSCore::URL *a11, uint64_t a12, uint64_t a13, AMSCore::ExecuteHTTPRequestTask::Options *a14, uint64_t a15, AMSCore::ExecuteHTTPRequestTask::Options *a16, void **a17, AMSCore::EncodeHTTPRequestTask::Options *a18, void (**a19)(_QWORD), uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  AMSCore::URL *v29;
  _QWORD *v30;
  uint64_t v32;

  if (!a28)
    (*a19)(&a19);
  std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](a15);
  std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](a18);
  AMSCore::EncodeHTTPRequestTask::Options::~Options(a17);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(a16);
  v32 = *(_QWORD *)(v28 + 2768);
  if (*(_BYTE *)(v28 + 2840))
  {
    *v30 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  else
  {
    (*(void (**)(_QWORD *))v32)(v30);
  }
  if (*(_BYTE *)(v28 + 2608))
    AMSCore::URL::~URL(v29);
  else
    (**(void (***)(AMSCore::URL *))v29)(v29);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC64B34()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC64908);
}

void AMSCore::fetchCertificate(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  AMSCore::URL *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;

  if (*(_QWORD *)__p)
  {
    if (__p[3064])
    {
      if (__p[3064] == 1)
      {
        v2 = *((_QWORD *)__p + 380);
        if (v2)
        {
          v3 = (unint64_t *)(v2 + 8);
          do
            v4 = __ldaxr(v3);
          while (__stlxr(v4 - 1, v3));
          if (!v4)
          {
            v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 380);
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 218);
      }
      else
      {
        v21 = (std::__shared_weak_count *)*((_QWORD *)__p + 370);
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v24 = (std::__shared_weak_count *)*((_QWORD *)__p + 372);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2288));
        v27 = (std::__shared_weak_count *)*((_QWORD *)__p + 170);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 122);
        if (__p[968])
        {
          v30 = (std::__shared_weak_count *)*((_QWORD *)__p + 120);
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 72);
        }
        else
        {
          (**((void (***)(char *))__p + 72))(__p + 576);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 171);
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2120));
      v33 = *((_QWORD *)__p + 346);
      if (__p[2840])
      {
        *((_QWORD *)__p + 346) = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
      else
      {
        (*(void (**)(char *))v33)(__p + 2768);
      }
      v10 = 0;
      v9 = 0;
    }
    else
    {
      v11 = *((_QWORD *)__p + 378);
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          v14 = (std::__shared_weak_count *)*((_QWORD *)__p + 378);
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 73);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (__p[2871] < 0)
        operator delete(*((void **)__p + 356));
      v18 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 376);
      v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 374);
    }
    v34 = (AMSCore::URL *)(__p + 2456);
    if (__p[2608])
      AMSCore::URL::~URL(v34);
    else
      (**(void (***)(AMSCore::URL *))v34)(v34);
  }
  else
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 382);
    v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 381);
  }
  v35 = (char *)*((_QWORD *)__p + 18);
  if (v35 == __p + 120)
  {
    v36 = 4;
    v35 = __p + 120;
  }
  else
  {
    if (!v35)
      goto LABEL_70;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_70:
  if (__p[104])
  {
    if (__p[96])
    {
      if (__p[47] < 0)
        operator delete(*((void **)__p + 3));
    }
    else
    {
      (**((void (***)(char *))__p + 3))(__p + 24);
    }
  }
  do
  {
    v37 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v38)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v10)
  {
    v39 = (unint64_t *)&v10->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v9)
  {
    v41 = (unint64_t *)&v9->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

_QWORD *std::shared_ptr<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2523458;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CC64FC4(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CC64FF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::nestedError<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error> &>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22[2];
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::runtime_error v30;
  __int128 v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  __int128 v35;
  char v36;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v30, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v31 = *(_OWORD *)(a2 + 16);
    v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v32 = *(unsigned int ***)(a2 + 32);
    v33 = (unsigned int *)v9;
    v34 = *(unsigned int **)(a2 + 48);
    if (v34)
    {
      *(_QWORD *)(v9 + 16) = &v33;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v32 = &v33;
    }
    v35 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v36 = 1;
    std::runtime_error::runtime_error(&v19, &v30);
    v20 = v31;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v21 = v32;
    v22[0] = v33;
    v22[1] = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = v22;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v21 = v22;
    }
    v23 = v35;
    v35 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v24, (uint64_t)&v19, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v24);
    *((_OWORD *)v4 + 1) = v25;
    *(_QWORD *)v4 = off_1E2521330;
    v10 = v27;
    *((_QWORD *)v4 + 4) = v26;
    *((_QWORD *)v4 + 5) = v10;
    v11 = v4 + 40;
    v12 = v28;
    *((_QWORD *)v4 + 6) = v28;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v10 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11;
    }
    *(_OWORD *)(v4 + 56) = v29;
    v29 = 0uLL;
    v4[72] = 1;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v24);
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v19);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      return (_BYTE *)MEMORY[0x18D7898AC](&v30);
    }
  }
  return result;
}

void sub_18CC6527C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC65288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

_BYTE *AMSCore::nestedError<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error> &>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22[2];
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::runtime_error v30;
  __int128 v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  __int128 v35;
  char v36;

  v4 = result;
  if (*(_BYTE *)(a2 + 392))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v30, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v31 = *(_OWORD *)(a2 + 16);
    v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v32 = *(unsigned int ***)(a2 + 32);
    v33 = (unsigned int *)v9;
    v34 = *(unsigned int **)(a2 + 48);
    if (v34)
    {
      *(_QWORD *)(v9 + 16) = &v33;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v32 = &v33;
    }
    v35 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v36 = 1;
    std::runtime_error::runtime_error(&v19, &v30);
    v20 = v31;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v21 = v32;
    v22[0] = v33;
    v22[1] = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = v22;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v21 = v22;
    }
    v23 = v35;
    v35 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v24, (uint64_t)&v19, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v24);
    *((_OWORD *)v4 + 1) = v25;
    *(_QWORD *)v4 = off_1E2521330;
    v10 = v27;
    *((_QWORD *)v4 + 4) = v26;
    *((_QWORD *)v4 + 5) = v10;
    v11 = v4 + 40;
    v12 = v28;
    *((_QWORD *)v4 + 6) = v28;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v10 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11;
    }
    *(_OWORD *)(v4 + 56) = v29;
    v29 = 0uLL;
    v4[72] = 1;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v24);
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v19);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      return (_BYTE *)MEMORY[0x18D7898AC](&v30);
    }
  }
  return result;
}

void sub_18CC65508(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC65514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

__n128 AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>(uint64_t a1, std::runtime_error *a2)
{
  std::runtime_error *v4;
  std::runtime_error_vtbl *p_imp;
  const char *imp;
  uint64_t v7;
  std::runtime_error_vtbl *v8;
  __n128 result;

  v4 = (std::runtime_error *)(a1 + 8);
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      if (*(char *)(a1 + 31) < 0)
        operator delete(v4->__vftable);
    }
    else
    {
      ((void (*)(uint64_t))v4->~runtime_error)(a1 + 8);
    }
    *(_BYTE *)(a1 + 88) = 0;
  }
  std::runtime_error::runtime_error(v4, a2);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4F90] + 16;
  *(std::runtime_error *)(a1 + 24) = a2[1];
  *(_QWORD *)(a1 + 8) = off_1E2521330;
  *(_QWORD *)(a1 + 40) = a2[2].__vftable;
  p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  imp = a2[2].__imp_.__imp_;
  *(_QWORD *)(a1 + 48) = imp;
  v7 = a1 + 48;
  v8 = a2[3].__vftable;
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
  {
    *((_QWORD *)imp + 2) = v7;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = v7;
  }
  result = *(__n128 *)&a2[3].__imp_.__imp_;
  *(__n128 *)(a1 + 64) = result;
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  return result;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError,AMSCore::FairPlayErrorCode>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error v15[2];
  unsigned int **v16;
  unsigned int *v17;
  __int128 v19;
  std::runtime_error v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  std::runtime_error::runtime_error(v15, (const std::runtime_error *)a2);
  v6 = (_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 40);
  v15[1] = *(std::runtime_error *)(a2 + 16);
  v15[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v16 = *(unsigned int ***)(a2 + 32);
  v17 = (unsigned int *)v7;
  if (*(_QWORD *)(a2 + 48))
  {
    *(_QWORD *)(v7 + 16) = &v17;
    *(_QWORD *)(a2 + 32) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v16 = &v17;
  }
  v19 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  AMSCore::Error::Error<>((uint64_t)&v20, (uint64_t)v15, *a3, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v20);
  *(_OWORD *)(a1 + 16) = v21;
  *(_QWORD *)a1 = off_1E2521330;
  v8 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = a1 + 40;
  v10 = v24;
  *(_QWORD *)(a1 + 48) = v24;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    v22 = &v23;
    v23 = 0;
    v24 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v9;
  }
  *(_OWORD *)(a1 + 56) = v25;
  v25 = 0uLL;
  v20.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v8);
  MEMORY[0x18D7898AC](&v20);
  v15[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, v17);
  return MEMORY[0x18D7898AC](v15);
}

void sub_18CC65784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CC65790()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

_BYTE *AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error> const&>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error v16[2];
  unsigned int **v17;
  unsigned int *v18[2];
  __int128 v19;
  std::runtime_error v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  std::runtime_error v26;
  std::runtime_error v27;
  unsigned int **v28;
  unsigned int *v29;
  unsigned int *v30;
  __int128 v31;
  char v32;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    AMSCore::Error::Error(&v26, (const std::runtime_error *)a2);
    v32 = 1;
    std::runtime_error::runtime_error(v16, &v26);
    v16[1] = v27;
    v16[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v17 = v28;
    v18[0] = v29;
    v18[1] = v30;
    if (v30)
    {
      *((_QWORD *)v29 + 2) = v18;
      v28 = &v29;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v17 = v18;
    }
    v19 = v31;
    v31 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v20, (uint64_t)v16, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v20);
    *((_OWORD *)v4 + 1) = v21;
    *(_QWORD *)v4 = off_1E2521330;
    v7 = v23;
    *((_QWORD *)v4 + 4) = v22;
    *((_QWORD *)v4 + 5) = v7;
    v8 = v4 + 40;
    v9 = v24;
    *((_QWORD *)v4 + 6) = v24;
    if (v9)
    {
      *(_QWORD *)(v7 + 16) = v8;
      v22 = &v23;
      v23 = 0;
      v24 = 0;
      v7 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v8;
    }
    *(_OWORD *)(v4 + 56) = v25;
    v25 = 0uLL;
    v4[72] = 1;
    v20.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v7);
    MEMORY[0x18D7898AC](&v20);
    v16[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v18[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](v16);
    if (v32)
    {
      v26.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, v29);
      return (_BYTE *)MEMORY[0x18D7898AC](&v26);
    }
  }
  return result;
}

void sub_18CC659B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CC659BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Exception *v27;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a27);
  _Unwind_Resume(v27);
}

void AMSCore::getValueByKey<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any> const>(uint64_t a1, uint64_t *a2)
{
  std::runtime_error_vtbl *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::runtime_error v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  std::runtime_error v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  uint64_t v36[2];
  std::runtime_error v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;

  v36[0] = (uint64_t)"sign-sap-setup-cert";
  v36[1] = 19;
  AMSCore::getValueByKey((uint64_t)&v29, a2, "sign-sap-setup-cert", 0x13uLL);
  if (!v35)
  {
    std::runtime_error::runtime_error(&v22, &v29);
    v23 = v30;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v24 = v31;
    v25 = v32;
    v26 = v33;
    if (v33)
    {
      *(_QWORD *)(v32 + 16) = &v25;
      v31 = &v32;
      v32 = 0;
      v33 = 0;
    }
    else
    {
      v24 = &v25;
    }
    v27 = v34;
    v34 = 0uLL;
    v28 = 1;
    std::runtime_error::runtime_error(&v37, &v22);
    v38 = v23;
    v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v39 = v24;
    v40 = v25;
    v41 = v26;
    if (v26)
    {
      *(_QWORD *)(v25 + 16) = &v40;
      v24 = &v25;
      v25 = 0;
      v26 = 0;
    }
    else
    {
      v39 = &v40;
    }
    v42 = v27;
    v27 = 0uLL;
    std::runtime_error::runtime_error(&v16, &v37);
    v17 = v38;
    v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v9 = (unsigned int *)v40;
    v18 = v39;
    v19 = v40;
    v20 = v41;
    if (v41)
    {
      *(_QWORD *)(v40 + 16) = &v19;
      v9 = 0;
      v39 = &v40;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v18 = &v19;
    }
    v21 = v42;
    v42 = 0uLL;
    v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v9);
    MEMORY[0x18D7898AC](&v37);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
    *(_OWORD *)(a1 + 16) = v17;
    *(_QWORD *)a1 = off_1E2521330;
    v10 = v19;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = v10;
    v11 = a1 + 40;
    v12 = v20;
    *(_QWORD *)(a1 + 48) = v20;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v10 = 0;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v11;
    }
    *(_OWORD *)(a1 + 56) = v21;
    v21 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v16);
    if (!v28)
      goto LABEL_33;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v6 = v25;
LABEL_32:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v6);
    MEMORY[0x18D7898AC](&v22);
    goto LABEL_33;
  }
  v3 = v29.__vftable;
  v4 = (int)v29.__vftable[1].~runtime_error;
  if (v4 == -1)
    v5 = 0;
  else
    v5 = (int)v29.__vftable[1].~runtime_error;
  if ((v5 - 5) > 1)
  {
    LOBYTE(v37.__vftable) = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v22, 0xCu, "unable to find value with key \"", v36, &v37);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v22);
    *(_OWORD *)(a1 + 16) = v23;
    *(_QWORD *)a1 = off_1E2521330;
    v6 = v25;
    *(_QWORD *)(a1 + 32) = v24;
    *(_QWORD *)(a1 + 40) = v6;
    v7 = a1 + 40;
    v8 = v26;
    *(_QWORD *)(a1 + 48) = v26;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      v24 = &v25;
      v25 = 0;
      v26 = 0;
      v6 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v27;
    v27 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    goto LABEL_32;
  }
  if (v4 != v5)
    v3 = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 72) = 1;
LABEL_33:
  if (!v35)
    ((void (*)(std::runtime_error *))v29.~runtime_error)(&v29);
}

void sub_18CC65D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void (**a29)(_QWORD),uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (!a38)
    (*a29)(&a29);
  _Unwind_Resume(exception_object);
}

_BYTE *AMSCore::nestedError<std::expected<std::reference_wrapper<AMSCore::DataBuffer const>,AMSCore::Error> &>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22[2];
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::runtime_error v30;
  __int128 v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  __int128 v35;
  char v36;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v30, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v31 = *(_OWORD *)(a2 + 16);
    v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v32 = *(unsigned int ***)(a2 + 32);
    v33 = (unsigned int *)v9;
    v34 = *(unsigned int **)(a2 + 48);
    if (v34)
    {
      *(_QWORD *)(v9 + 16) = &v33;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v32 = &v33;
    }
    v35 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v36 = 1;
    std::runtime_error::runtime_error(&v19, &v30);
    v20 = v31;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v21 = v32;
    v22[0] = v33;
    v22[1] = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = v22;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v21 = v22;
    }
    v23 = v35;
    v35 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v24, (uint64_t)&v19, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v24);
    *((_OWORD *)v4 + 1) = v25;
    *(_QWORD *)v4 = off_1E2521330;
    v10 = v27;
    *((_QWORD *)v4 + 4) = v26;
    *((_QWORD *)v4 + 5) = v10;
    v11 = v4 + 40;
    v12 = v28;
    *((_QWORD *)v4 + 6) = v28;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v10 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11;
    }
    *(_OWORD *)(v4 + 56) = v29;
    v29 = 0uLL;
    v4[72] = 1;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v24);
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v19);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      return (_BYTE *)MEMORY[0x18D7898AC](&v30);
    }
  }
  return result;
}

void sub_18CC65FD4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC65FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

__n128 AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::return_value<AMSCore::CachedCertificate>(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  __n128 result;

  v4 = a1 + 8;
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)v4);
    }
    else
    {
      (**(void (***)(uint64_t))v4)(a1 + 8);
    }
    *(_BYTE *)(a1 + 88) = 0;
  }
  result = *a2;
  *(_QWORD *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *(_QWORD *)(a1 + 32) = a2[1].n128_u64[1];
  *(_BYTE *)(a1 + 80) = 1;
  *(_BYTE *)(a1 + 88) = 1;
  return result;
}

void AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  std::runtime_error v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v17;
  char v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v1 = result;
  v21 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v20 = v19;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v19);
      }
      else
      {
        v20 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v20 = 0;
    }
    if (v20)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(v5 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v8 = *v6;
        *(_QWORD *)&v13 = *(_QWORD *)(v5 + 24);
        *(std::runtime_error *)__p = v8;
        v6->__vftable = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        *((_QWORD *)&v13 + 1) = *(_QWORD *)(v5 + 32);
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)__p, v6);
        v9 = (_QWORD *)(v5 + 48);
        v10 = *(_QWORD *)(v5 + 48);
        v13 = *(_OWORD *)(v5 + 24);
        __p[0] = off_1E2521330;
        v14 = *(uint64_t **)(v5 + 40);
        v15 = v10;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v10 + 16) = &v15;
          *(_QWORD *)(v5 + 40) = v9;
          *v9 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v14 = &v15;
        }
        v17 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v18 = v7;
      if (!v20)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, void **))(*(_QWORD *)v20 + 48))(v20, __p);
      if (v18)
      {
        if (SBYTE7(v13) < 0)
          operator delete(__p[0]);
      }
      else
      {
        (*(void (**)(void **))__p[0])(__p);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v20;
    if (v20 == v19)
    {
      v11 = 4;
      result = v19;
    }
    else
    {
      if (!v20)
        return result;
      v11 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
  }
  return result;
}

void sub_18CC664E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_17CachedCertificateENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_17CachedCertificateENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_17CachedCertificateENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_17CachedCertificateENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::signPayload(_OWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  AMSCore::URL *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  const std::runtime_error *v31;
  char v32;
  std::runtime_error_vtbl *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::runtime_error_vtbl *v79;
  _QWORD *v80;
  std::runtime_error_vtbl *v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  const char *imp;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  __int128 v109;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  const std::runtime_error *v114;
  char v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  std::runtime_error *v145;
  __int128 v146;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  const void ***v161;
  const void **v162;
  const void **v163;
  const void ***v164;
  BOOL v165;
  __n128 v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  std::runtime_error *v177;
  AMSCore::ExecuteHTTPRequestTask::Options *v178;
  void **v179;
  __int128 *v180;
  __int128 *v181;
  unint64_t *v182;
  __int128 *v183;
  __int128 *v184;
  _BYTE *v185;
  void **v186;
  char *v187;
  std::runtime_error_vtbl **v188;
  AMSCore::ExecuteHTTPRequestTask::Options *v189;
  void **v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  std::runtime_error *v195;
  std::runtime_error *v196;
  std::runtime_error *v197;
  std::runtime_error *v198;
  uint64_t v199;
  std::runtime_error v200;
  std::runtime_error v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  char v206;
  std::runtime_error v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  char v212;
  _BYTE v213[32];
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  char v217;
  uint64_t v218;

  v218 = *MEMORY[0x1E0C80C00];
  v8 = (char *)operator new(0xC40uLL);
  v9 = (unint64_t)v8;
  *(_QWORD *)v8 = AMSCore::signPayload;
  *((_QWORD *)v8 + 1) = AMSCore::signPayload;
  v187 = v8 + 952;
  v10 = a2[1];
  v198 = (std::runtime_error *)(v8 + 152);
  v195 = (std::runtime_error *)(v8 + 576);
  v193 = *a2;
  *((_QWORD *)v8 + 379) = *a2;
  v185 = v8 + 3031;
  v186 = (void **)(v8 + 1368);
  *((_QWORD *)v8 + 377) = v10;
  v189 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v8 + 2120);
  v190 = (void **)(v8 + 1744);
  v178 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v8 + 2288);
  v179 = (void **)(v8 + 976);
  v11 = v8 + 3016;
  *(_QWORD *)(v8 + 3023) = *(uint64_t *)((char *)a2 + 15);
  v199 = (uint64_t)(v8 + 2456);
  v12 = v8 + 2616;
  v197 = (std::runtime_error *)(v8 + 2768);
  v192 = *((_BYTE *)a2 + 23);
  v8[3128] = v192;
  v13 = (void **)(v8 + 2880);
  v188 = (std::runtime_error_vtbl **)(v8 + 2904);
  a2[1] = 0;
  a2[2] = 0;
  v181 = (__int128 *)(v8 + 2920);
  v182 = (unint64_t *)(v8 + 2848);
  v183 = (__int128 *)(v8 + 2952);
  v184 = (__int128 *)(v8 + 2936);
  v177 = (std::runtime_error *)(v8 + 2984);
  *a2 = 0;
  v180 = (__int128 *)(v8 + 3000);
  v14 = v8 + 16;
  v16 = *a3;
  v15 = a3[1];
  *((_QWORD *)v8 + 380) = *a3;
  v191 = v15;
  *((_QWORD *)v8 + 381) = v15;
  *a3 = 0;
  a3[1] = 0;
  v18 = *a4;
  v17 = a4[1];
  *((_QWORD *)v8 + 382) = *a4;
  *a4 = 0;
  a4[1] = 0;
  v194 = v17;
  *((_QWORD *)v8 + 383) = v17;
  do
    v19 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v19 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v8[24] = 0;
  v8[104] = 0;
  *((_QWORD *)v8 + 14) = 0;
  v196 = (std::runtime_error *)(v8 + 24);
  *((_QWORD *)v8 + 18) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v213, (uint64_t)v14);
  *a1 = *(_OWORD *)v213;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v213);
  AMSCore::Logger::log<char [24]>(*(uint64_t *)v213, (uint64_t)"fairplay", 8, "Signing Mescal payload.");
  v20 = (AMSCore::URL *)v199;
  v21 = *(std::__shared_weak_count **)&v213[8];
  if (*(_QWORD *)&v213[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&v213[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v213[23] = 14;
  strcpy(v213, "sign-sap-setup");
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 80))(v16, v213);
  if ((v213[23] & 0x80000000) != 0)
    operator delete(*(void **)v213);
  AMSCore::nestedError<std::expected<AMSCore::URL,AMSCore::Error> &>(v213, v199, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (v217)
  {
    std::runtime_error::runtime_error(&v201, (const std::runtime_error *)v213);
    v202 = *(_OWORD *)&v213[16];
    v201.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v203 = v214;
    v204 = v215;
    if (v215)
    {
      *(_QWORD *)(*((_QWORD *)&v214 + 1) + 16) = (char *)&v203 + 8;
      *(_QWORD *)&v214 = (char *)&v214 + 8;
      *((_QWORD *)&v214 + 1) = 0;
      v215 = 0;
    }
    else
    {
      *(_QWORD *)&v203 = (char *)&v203 + 8;
    }
    v205 = v216;
    v216 = 0uLL;
    std::runtime_error::runtime_error(&v207, &v201);
    v208 = v202;
    v34 = (unsigned int *)*((_QWORD *)&v203 + 1);
    v207.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v209 = v203;
    v210 = v204;
    if (v204)
    {
      *(_QWORD *)(*((_QWORD *)&v203 + 1) + 16) = (char *)&v209 + 8;
      v34 = 0;
      *(_QWORD *)&v203 = (char *)&v203 + 8;
      *((_QWORD *)&v203 + 1) = 0;
      v204 = 0;
    }
    else
    {
      *(_QWORD *)&v209 = (char *)&v209 + 8;
    }
    v211 = v205;
    v205 = 0uLL;
    v201.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v203, v34);
    MEMORY[0x18D7898AC](&v201);
    if (*(_BYTE *)(v9 + 104))
    {
      if (*(_BYTE *)(v9 + 96))
      {
        if (*(char *)(v9 + 47) < 0)
          operator delete(v196->__vftable);
      }
      else
      {
        ((void (*)(std::runtime_error *))v196->~runtime_error)(v196);
      }
      *(_BYTE *)(v9 + 104) = 0;
    }
    std::runtime_error::runtime_error(v196, &v207);
    v35 = *((_QWORD *)&v209 + 1);
    v36 = v209;
    *(_QWORD *)(v9 + 64) = *((_QWORD *)&v209 + 1);
    v37 = v9 + 64;
    *(_OWORD *)(v9 + 40) = v208;
    *(_QWORD *)(v9 + 24) = off_1E2521330;
    *(_QWORD *)(v9 + 56) = v36;
    v38 = v210;
    *(_QWORD *)(v9 + 72) = v210;
    if (v38)
    {
      *(_QWORD *)(v35 + 16) = v37;
      v35 = 0;
      *(_QWORD *)&v209 = (char *)&v209 + 8;
      *((_QWORD *)&v209 + 1) = 0;
      v210 = 0;
    }
    else
    {
      *(_QWORD *)(v9 + 56) = v37;
    }
    v24 = v198;
    v20 = (AMSCore::URL *)v199;
    v39 = v192;
    *(_OWORD *)(v9 + 80) = v211;
    v211 = 0uLL;
    *(_BYTE *)(v9 + 96) = 0;
    *(_BYTE *)(v9 + 104) = 1;
    v207.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v209, (unsigned int *)v35);
    MEMORY[0x18D7898AC](&v207);
    if (v217)
    {
      *(_QWORD *)v213 = off_1E2521330;
      v40 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
      if (*((_QWORD *)&v216 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v214, *((unsigned int **)&v214 + 1));
      MEMORY[0x18D7898AC](v213);
    }
    v44 = v193;
    v43 = v194;
    v45 = v191;
LABEL_41:
    if (*(_BYTE *)(v9 + 2608))
      AMSCore::URL::~URL(v20);
    else
      (**(void (***)(AMSCore::URL *))v20)(v20);
    *(_QWORD *)(v9 + 3120) = v44;
    *(_BYTE *)(v9 + 3129) = v39;
    *(_QWORD *)(v9 + 3112) = v45;
    *(_QWORD *)(v9 + 3104) = v43;
    *(_QWORD *)(v9 + 152) = v14;
    *(_QWORD *)v9 = 0;
    AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::Awaiter::await_suspend(v24);
    return;
  }
  v24 = v198;
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(v198);
  v25 = *(_QWORD *)(v9 + 152);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 48))(v25, v13);
  v26 = *(_OWORD *)(v9 + 576);
  *(_OWORD *)(v9 + 3072) = v26;
  v195->__vftable = 0;
  v195->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v26 + 96)))
  {
    *v185 = 0;
    v28 = (unint64_t *)(*(_QWORD *)(v9 + 3072) + 96);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v9, v28));
    if (!v29)
      return;
  }
  v30 = *(_QWORD *)(v9 + 3072);
  if (!*(_BYTE *)(v30 + 88))
    goto LABEL_275;
  v31 = (const std::runtime_error *)(v30 + 8);
  v32 = *(_BYTE *)(v30 + 80);
  if (v32)
  {
    v33 = v31->__vftable;
    v31->__vftable = 0;
    v197->__vftable = v33;
  }
  else
  {
    std::runtime_error::runtime_error(v197, v31);
    *(_OWORD *)(v9 + 2784) = *(_OWORD *)(v30 + 24);
    *(_QWORD *)(v9 + 2768) = off_1E2521330;
    v46 = (_QWORD *)(v30 + 48);
    v47 = *(_QWORD *)(v30 + 48);
    *(_QWORD *)(v9 + 2800) = *(_QWORD *)(v30 + 40);
    v48 = v9 + 2808;
    *(_QWORD *)(v9 + 2808) = v47;
    v49 = *(_QWORD *)(v30 + 56);
    *(_QWORD *)(v9 + 2816) = v49;
    if (v49)
    {
      *(_QWORD *)(v47 + 16) = v48;
      *(_QWORD *)(v30 + 40) = v46;
      *v46 = 0;
      *(_QWORD *)(v30 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v9 + 2800) = v48;
    }
    v50 = *(_QWORD *)(v9 + 3072);
    *((_OWORD *)v187 + 117) = *(_OWORD *)(v50 + 64);
    *(_QWORD *)(v50 + 64) = 0;
    *(_QWORD *)(v50 + 72) = 0;
  }
  *(_BYTE *)(v9 + 2840) = v32;
  v51 = *(_QWORD *)(v9 + 3080);
  if (v51)
  {
    v52 = (unint64_t *)(v51 + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      v54 = *(std::__shared_weak_count **)(v9 + 3080);
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v55 = *(std::__shared_weak_count **)(v9 + 584);
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
      if ((*(char *)(v9 + 2903) & 0x80000000) == 0)
        goto LABEL_61;
      goto LABEL_60;
    }
  }
  if (*(char *)(v9 + 2903) < 0)
LABEL_60:
    operator delete(*v13);
LABEL_61:
  v58 = *(std::__shared_weak_count **)(v9 + 160);
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  AMSCore::nestedError<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error> &>(v213, (uint64_t)v197, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (v217)
  {
    std::runtime_error::runtime_error(&v201, (const std::runtime_error *)v213);
    v202 = *(_OWORD *)&v213[16];
    v201.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v203 = v214;
    v204 = v215;
    if (v215)
    {
      *(_QWORD *)(*((_QWORD *)&v214 + 1) + 16) = (char *)&v203 + 8;
      *(_QWORD *)&v214 = (char *)&v214 + 8;
      *((_QWORD *)&v214 + 1) = 0;
      v215 = 0;
    }
    else
    {
      *(_QWORD *)&v203 = (char *)&v203 + 8;
    }
    v205 = v216;
    v216 = 0uLL;
    std::runtime_error::runtime_error(&v207, &v201);
    v208 = v202;
    v82 = (unsigned int *)*((_QWORD *)&v203 + 1);
    v207.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v209 = v203;
    v210 = v204;
    if (v204)
    {
      *(_QWORD *)(*((_QWORD *)&v203 + 1) + 16) = (char *)&v209 + 8;
      v82 = 0;
      *(_QWORD *)&v203 = (char *)&v203 + 8;
      *((_QWORD *)&v203 + 1) = 0;
      v204 = 0;
    }
    else
    {
      *(_QWORD *)&v209 = (char *)&v209 + 8;
    }
    v211 = v205;
    v205 = 0uLL;
    v201.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v203, v82);
    MEMORY[0x18D7898AC](&v201);
    if (*(_BYTE *)(v9 + 104))
    {
      if (*(_BYTE *)(v9 + 96))
      {
        if (*(char *)(v9 + 47) < 0)
          operator delete(v196->__vftable);
      }
      else
      {
        ((void (*)(std::runtime_error *))v196->~runtime_error)(v196);
      }
      *(_BYTE *)(v9 + 104) = 0;
    }
    std::runtime_error::runtime_error(v196, &v207);
    v83 = *((_QWORD *)&v209 + 1);
    v84 = v209;
    *(_QWORD *)(v9 + 64) = *((_QWORD *)&v209 + 1);
    v85 = v9 + 64;
    *(_OWORD *)(v9 + 40) = v208;
    *(_QWORD *)(v9 + 24) = off_1E2521330;
    *(_QWORD *)(v9 + 56) = v84;
    v86 = v210;
    *(_QWORD *)(v9 + 72) = v210;
    if (v86)
    {
      *(_QWORD *)(v83 + 16) = v85;
      v83 = 0;
      *(_QWORD *)&v209 = (char *)&v209 + 8;
      *((_QWORD *)&v209 + 1) = 0;
      v210 = 0;
    }
    else
    {
      *(_QWORD *)(v9 + 56) = v85;
    }
    v24 = v198;
    v20 = (AMSCore::URL *)v199;
    *(_OWORD *)(v9 + 80) = v211;
    v211 = 0uLL;
    *(_BYTE *)(v9 + 96) = 0;
    *(_BYTE *)(v9 + 104) = 1;
    v207.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v209, (unsigned int *)v83);
    MEMORY[0x18D7898AC](&v207);
    if (v217)
    {
      *(_QWORD *)v213 = off_1E2521330;
      v87 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
      if (*((_QWORD *)&v216 + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v214, *((unsigned int **)&v214 + 1));
      MEMORY[0x18D7898AC](v213);
    }
    v43 = *(_QWORD *)(v9 + 3064);
    v45 = *(_QWORD *)(v9 + 3048);
    v39 = *(_BYTE *)(v9 + 3128);
    v44 = *(_QWORD *)(v9 + 3032);
LABEL_271:
    v176 = *(_QWORD *)(v9 + 2768);
    if (*(_BYTE *)(v9 + 2840))
    {
      v197->__vftable = 0;
      if (v176)
        (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
    }
    else
    {
      (*(void (**)(std::runtime_error *))v176)(v197);
    }
    goto LABEL_41;
  }
  if (!*(_BYTE *)(v9 + 2608))
    goto LABEL_275;
  *(_BYTE *)(v9 + 2616) = 0;
  *(_BYTE *)(v9 + 2640) = 0;
  if (*(_BYTE *)(v9 + 2480))
  {
    *(_OWORD *)v12 = *(_OWORD *)v199;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(v199 + 16);
    *(_QWORD *)(v199 + 8) = 0;
    *(_QWORD *)(v199 + 16) = 0;
    *(_QWORD *)v199 = 0;
    *(_BYTE *)(v9 + 2640) = 1;
  }
  *(_BYTE *)(v9 + 2648) = 0;
  *(_BYTE *)(v9 + 2672) = 0;
  if (*(_BYTE *)(v9 + 2512))
  {
    *(_QWORD *)(v9 + 2664) = *(_QWORD *)(v9 + 2504);
    *(_OWORD *)(v9 + 2648) = *(_OWORD *)(v9 + 2488);
    *(_QWORD *)(v9 + 2504) = 0;
    *(_QWORD *)(v9 + 2488) = 0;
    *(_QWORD *)(v9 + 2496) = 0;
    *(_BYTE *)(v9 + 2672) = 1;
  }
  *(_BYTE *)(v9 + 2680) = 0;
  *(_BYTE *)(v9 + 2704) = 0;
  if (*(_BYTE *)(v9 + 2544))
  {
    *(_QWORD *)(v9 + 2696) = *(_QWORD *)(v9 + 2536);
    *(_OWORD *)(v9 + 2680) = *(_OWORD *)(v9 + 2520);
    *(_QWORD *)(v9 + 2536) = 0;
    *(_QWORD *)(v9 + 2520) = 0;
    *(_QWORD *)(v9 + 2528) = 0;
    *(_BYTE *)(v9 + 2704) = 1;
  }
  *(_DWORD *)(v9 + 2712) = *(_DWORD *)(v9 + 2552);
  *(_QWORD *)(v9 + 2720) = v9 + 2720;
  *(_QWORD *)(v9 + 2728) = v9 + 2720;
  *(_QWORD *)(v9 + 2736) = 0;
  v61 = *(_QWORD *)(v9 + 2576);
  if (v61)
  {
    v62 = *(uint64_t **)(v9 + 2568);
    v63 = *(_QWORD *)(v9 + 2560);
    v64 = *v62;
    *(_QWORD *)(v64 + 8) = *(_QWORD *)(v63 + 8);
    **(_QWORD **)(v63 + 8) = v64;
    v65 = *(_QWORD *)(v9 + 2720);
    *(_QWORD *)(v65 + 8) = v62;
    *v62 = v65;
    *(_QWORD *)(v9 + 2720) = v63;
    *(_QWORD *)(v63 + 8) = v9 + 2720;
    *(_QWORD *)(v9 + 2736) = v61;
    *(_QWORD *)(v9 + 2576) = 0;
  }
  v66 = *(_QWORD *)(v9 + 3048);
  v67 = *(_QWORD *)(v9 + 3040);
  *(_QWORD *)(v9 + 2760) = *(_QWORD *)(v9 + 2600);
  *(_OWORD *)(v9 + 2744) = *(_OWORD *)(v9 + 2584);
  *(_QWORD *)(v9 + 2600) = 0;
  *(_QWORD *)(v9 + 2592) = 0;
  *(_QWORD *)(v9 + 2584) = 0;
  *(_QWORD *)(v9 + 2952) = v67;
  *(_QWORD *)(v9 + 2960) = v66;
  if (v66)
  {
    v68 = (unint64_t *)(v66 + 8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v70 = *(_QWORD *)(v9 + 3064);
  *(_QWORD *)(v9 + 2936) = *(_QWORD *)(v9 + 3056);
  *(_QWORD *)(v9 + 2944) = v70;
  if (v70)
  {
    v71 = (unint64_t *)(v70 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v190, (__int128 *)v12, v183, v184);
  v73 = *(std::__shared_weak_count **)(v9 + 2944);
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *(std::__shared_weak_count **)(v9 + 2960);
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  AMSCore::URL::~URL((AMSCore::URL *)v12);
  if (!*(_BYTE *)(v9 + 2840))
    goto LABEL_275;
  v79 = v197->__vftable;
  *v188 = v197->__vftable;
  if (v79)
  {
    v80 = (_QWORD *)operator new();
    v81 = v197->__vftable;
    *v80 = &off_1E2523180;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v81;
  }
  else
  {
    v80 = 0;
  }
  *(_QWORD *)(v9 + 2912) = v80;
  *(_QWORD *)(v9 + 2768) = 0;
  v90 = *(_OWORD *)v188;
  *v188 = 0;
  v188[1] = 0;
  v91 = *(std::__shared_weak_count **)(v9 + 1752);
  *(_OWORD *)(v9 + 1744) = v90;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = *(_BYTE *)(v9 + 3128);
  v95 = *(_QWORD *)(v9 + 3032);
  v207.__vftable = *(std::runtime_error_vtbl **)v11;
  *(std::runtime_error_vtbl **)((char *)&v207.__vftable + 7) = *(std::runtime_error_vtbl **)(v11 + 7);
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 7) = 0;
  v213[23] = 21;
  strcpy(v213, "sign-sap-setup-buffer");
  *(_QWORD *)((char *)&v214 + 7) = *(std::runtime_error_vtbl **)((char *)&v207.__vftable + 7);
  *(_QWORD *)&v213[24] = v95;
  *(_QWORD *)&v214 = v207.__vftable;
  HIBYTE(v214) = v94;
  v207.__vftable = 0;
  *(std::runtime_error_vtbl **)((char *)&v207.__vftable + 7) = 0;
  LODWORD(v215) = 6;
  v201.__imp_.__imp_ = 0;
  *(_QWORD *)&v202 = 0;
  v201.__vftable = (std::runtime_error_vtbl *)&v201.__imp_;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v201, (uint64_t *)&v201.__imp_, (const void **)v213, (__int128 *)v213);
  imp = v201.__imp_.__imp_;
  *(_QWORD *)(v9 + 2848) = v201.__vftable;
  v97 = v9 + 2856;
  *(_QWORD *)(v9 + 2856) = imp;
  v98 = v202;
  *(_QWORD *)(v9 + 2864) = v202;
  if (v98)
  {
    *((_QWORD *)imp + 2) = v97;
    v201.__vftable = (std::runtime_error_vtbl *)&v201.__imp_;
    v201.__imp_.__imp_ = 0;
    *(_QWORD *)&v202 = 0;
  }
  else
  {
    *v182 = v97;
  }
  *(_DWORD *)(v9 + 2872) = 8;
  AMSCore::Any::operator=(v9 + 1800, (uint64_t)v182);
  *(_DWORD *)(v9 + 1832) = 2;
  *(_DWORD *)(v9 + 1920) = 6;
  v99 = *(unsigned int *)(v9 + 2872);
  if ((_DWORD)v99 != -1)
    ((void (*)(std::runtime_error *, unint64_t *))off_1E253D240[v99])(&v200, v182);
  *(_DWORD *)(v9 + 2872) = -1;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v201, (unsigned int *)v201.__imp_.__imp_);
  if ((_DWORD)v215 != -1)
    ((void (*)(std::runtime_error *, _BYTE *))off_1E253D240[v215])(&v200, &v213[24]);
  LODWORD(v215) = -1;
  if ((v213[23] & 0x80000000) != 0)
    operator delete(*(void **)v213);
  v100 = *(std::__shared_weak_count **)(v9 + 2912);
  if (v100)
  {
    v101 = (unint64_t *)&v100->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  *v181 = *(_OWORD *)(v9 + 3040);
  *v180 = *(_OWORD *)(v9 + 3056);
  AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v189, v181, v180);
  v103 = *(std::__shared_weak_count **)(v9 + 3008);
  if (v103)
  {
    v104 = (unint64_t *)&v103->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = *(std::__shared_weak_count **)(v9 + 2928);
  if (v106)
  {
    v107 = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v186, (uint64_t)v190);
  AMSCore::EncodeHTTPRequestTask::perform(v198, (uint64_t)v186);
  v109 = *(_OWORD *)(v9 + 152);
  *(_OWORD *)(v9 + 3088) = v109;
  v198->__vftable = 0;
  v198->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v109 + 416)))
    goto LABEL_154;
  *v185 = 1;
  v111 = (unint64_t *)(*(_QWORD *)(v9 + 3088) + 416);
  do
    v112 = __ldaxr(v111);
  while (__stlxr(v9, v111));
  if (v112)
  {
LABEL_154:
    v113 = *(_QWORD *)(v9 + 3088);
    if (!*(_BYTE *)(v113 + 408))
      goto LABEL_275;
    v114 = (const std::runtime_error *)(v113 + 8);
    v115 = *(_BYTE *)(v113 + 400);
    if (v115)
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v195, (uint64_t)v114);
      v116 = (_QWORD *)(v113 + 384);
      *(_QWORD *)(v9 + 952) = *(_QWORD *)(v113 + 384);
      v117 = (_QWORD *)(v9 + 960);
      v118 = (_QWORD *)(v113 + 392);
    }
    else
    {
      std::runtime_error::runtime_error(v195, v114);
      *(_OWORD *)(v9 + 592) = *(_OWORD *)(v113 + 24);
      *(_QWORD *)(v9 + 576) = off_1E2521330;
      v119 = (_QWORD *)(v113 + 48);
      v120 = *(_QWORD *)(v113 + 48);
      *(_QWORD *)(v9 + 608) = *(_QWORD *)(v113 + 40);
      v121 = v9 + 616;
      *(_QWORD *)(v9 + 616) = v120;
      v122 = *(_QWORD *)(v113 + 56);
      *(_QWORD *)(v9 + 624) = v122;
      if (v122)
      {
        *(_QWORD *)(v120 + 16) = v121;
        *(_QWORD *)(v113 + 40) = v119;
        *v119 = 0;
        *(_QWORD *)(v113 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 608) = v121;
      }
      v123 = *(_QWORD *)(v9 + 3088);
      v124 = *(_QWORD *)(v123 + 64);
      v116 = (_QWORD *)(v123 + 64);
      *(_QWORD *)(v9 + 632) = v124;
      v117 = (_QWORD *)(v9 + 640);
      v118 = v116 + 1;
    }
    *v117 = *v118;
    *v116 = 0;
    v116[1] = 0;
    *(_BYTE *)(v9 + 968) = v115;
    v125 = *(_QWORD *)(v9 + 3096);
    if (v125)
    {
      v126 = (unint64_t *)(v125 + 8);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        v128 = *(std::__shared_weak_count **)(v9 + 3096);
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v129 = *(std::__shared_weak_count **)(v9 + 160);
    if (v129)
    {
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v186);
    AMSCore::nestedError<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error> &>(v213, (uint64_t)v195, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v217)
    {
      std::runtime_error::runtime_error(&v201, (const std::runtime_error *)v213);
      v202 = *(_OWORD *)&v213[16];
      v201.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v203 = v214;
      v204 = v215;
      if (v215)
      {
        *(_QWORD *)(*((_QWORD *)&v214 + 1) + 16) = (char *)&v203 + 8;
        *(_QWORD *)&v214 = (char *)&v214 + 8;
        *((_QWORD *)&v214 + 1) = 0;
        v215 = 0;
      }
      else
      {
        *(_QWORD *)&v203 = (char *)&v203 + 8;
      }
      v205 = v216;
      v216 = 0uLL;
      std::runtime_error::runtime_error(&v207, &v201);
      v208 = v202;
      v135 = (unsigned int *)*((_QWORD *)&v203 + 1);
      v207.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v209 = v203;
      v210 = v204;
      if (v204)
      {
        *(_QWORD *)(*((_QWORD *)&v203 + 1) + 16) = (char *)&v209 + 8;
        v135 = 0;
        *(_QWORD *)&v203 = (char *)&v203 + 8;
        *((_QWORD *)&v203 + 1) = 0;
        v204 = 0;
      }
      else
      {
        *(_QWORD *)&v209 = (char *)&v209 + 8;
      }
      v211 = v205;
      v205 = 0uLL;
      v201.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v203, v135);
      MEMORY[0x18D7898AC](&v201);
      if (*(_BYTE *)(v9 + 104))
      {
        if (*(_BYTE *)(v9 + 96))
        {
          if (*(char *)(v9 + 47) < 0)
            operator delete(v196->__vftable);
        }
        else
        {
          ((void (*)(std::runtime_error *))v196->~runtime_error)(v196);
        }
        *(_BYTE *)(v9 + 104) = 0;
      }
      std::runtime_error::runtime_error(v196, &v207);
      v136 = *((_QWORD *)&v209 + 1);
      v137 = v209;
      *(_QWORD *)(v9 + 64) = *((_QWORD *)&v209 + 1);
      v138 = v9 + 64;
      *(_OWORD *)(v9 + 40) = v208;
      *(_QWORD *)(v9 + 24) = off_1E2521330;
      *(_QWORD *)(v9 + 56) = v137;
      v139 = v210;
      *(_QWORD *)(v9 + 72) = v210;
      if (v139)
      {
        *(_QWORD *)(v136 + 16) = v138;
        v136 = 0;
        *(_QWORD *)&v209 = (char *)&v209 + 8;
        *((_QWORD *)&v209 + 1) = 0;
        v210 = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 56) = v138;
      }
      v24 = v198;
      v20 = (AMSCore::URL *)v199;
      *(_OWORD *)(v9 + 80) = v211;
      v211 = 0uLL;
      *(_BYTE *)(v9 + 96) = 0;
      *(_BYTE *)(v9 + 104) = 1;
      v207.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v209, (unsigned int *)v136);
      MEMORY[0x18D7898AC](&v207);
      if (v217)
      {
        *(_QWORD *)v213 = off_1E2521330;
        v140 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
        if (*((_QWORD *)&v216 + 1))
        {
          v141 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v214, *((unsigned int **)&v214 + 1));
        MEMORY[0x18D7898AC](v213);
      }
LABEL_262:
      if (*(_BYTE *)(v9 + 968))
      {
        v173 = *(std::__shared_weak_count **)(v9 + 960);
        if (v173)
        {
          v174 = (unint64_t *)&v173->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v195->__vftable);
      }
      else
      {
        ((void (*)(std::runtime_error *))v195->~runtime_error)(v195);
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v189);
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v190);
      v43 = 0;
      v45 = 0;
      v39 = 0;
      v44 = 0;
      goto LABEL_271;
    }
    if (!*(_BYTE *)(v9 + 968))
LABEL_275:
      __break(1u);
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v179, (uint64_t)v195);
    *((_OWORD *)v187 + 25) = *(_OWORD *)v187;
    *(_QWORD *)v187 = 0;
    *((_QWORD *)v187 + 1) = 0;
    *(_QWORD *)(v9 + 2288) = *(_QWORD *)(v9 + 2120);
    v132 = v9 + 2296;
    v133 = *(_QWORD *)(v9 + 2128);
    *(_QWORD *)(v9 + 2296) = v133;
    v134 = *(_QWORD *)(v9 + 2136);
    *(_QWORD *)(v9 + 2304) = v134;
    if (v134)
    {
      *(_QWORD *)(v133 + 16) = v132;
      *(_QWORD *)v189 = v9 + 2128;
      *(_QWORD *)(v9 + 2128) = 0;
      *(_QWORD *)(v9 + 2136) = 0;
    }
    else
    {
      *(_QWORD *)v178 = v132;
    }
    *((_OWORD *)v187 + 85) = *(_OWORD *)(v9 + 2144);
    *(_QWORD *)(v9 + 2152) = 0;
    *(_QWORD *)(v9 + 2144) = 0;
    *((_OWORD *)v187 + 86) = *(_OWORD *)(v9 + 2160);
    *(_QWORD *)(v9 + 2160) = 0;
    *(_QWORD *)(v9 + 2168) = 0;
    *(_BYTE *)(v9 + 2344) = 0;
    *(_BYTE *)(v9 + 2368) = 0;
    if (*(_BYTE *)(v9 + 2200))
    {
      *(_OWORD *)(v9 + 2344) = *(_OWORD *)(v9 + 2176);
      *(_QWORD *)(v9 + 2360) = *(_QWORD *)(v9 + 2192);
      *(_QWORD *)(v9 + 2176) = 0;
      *(_QWORD *)(v9 + 2192) = 0;
      *(_QWORD *)(v9 + 2184) = 0;
      *(_BYTE *)(v9 + 2368) = 1;
    }
    *(_BYTE *)(v9 + 2376) = 0;
    *(_DWORD *)(v9 + 2392) = -1;
    v143 = *(unsigned int *)(v9 + 2224);
    if ((_DWORD)v143 != -1)
    {
      ((void (*)(_BYTE *, unint64_t, unint64_t))off_1E253CA98[v143])(v213, v9 + 2376, v9 + 2208);
      *(_DWORD *)(v9 + 2392) = v143;
    }
    *(_DWORD *)(v9 + 2416) = *(_DWORD *)(v9 + 2248);
    *(_OWORD *)(v9 + 2400) = *(_OWORD *)(v9 + 2232);
    v144 = *(_QWORD *)(v9 + 2280);
    if (v144)
    {
      v145 = v177;
      if (v144 == v9 + 2256)
      {
        *(_QWORD *)(v9 + 2448) = v9 + 2424;
        (*(void (**)(uint64_t))(*(_QWORD *)v144 + 24))(v144);
      }
      else
      {
        *(_QWORD *)(v9 + 2448) = v144;
        *(_QWORD *)(v9 + 2280) = 0;
      }
    }
    else
    {
      v145 = v177;
      *(_QWORD *)(v9 + 2448) = 0;
    }
    AMSCore::ExecuteHTTPRequestTask::perform(v145, (uint64_t)v179, (uint64_t)v178);
    v146 = *((_OWORD *)v187 + 127);
    v145->__vftable = 0;
    v145->__imp_.__imp_ = 0;
    *((_OWORD *)v187 + 126) = v146;
    if (atomic_load((unint64_t *)(v146 + 440)))
      goto LABEL_211;
    *v185 = 2;
    v148 = (unint64_t *)(*(_QWORD *)(v9 + 2968) + 440);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v9, v148));
    if (v149)
    {
LABEL_211:
      AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::operator co_await(void) &&::CoAwaiter::await_resume(v198, *(_QWORD *)(v9 + 2968));
      v150 = *(std::__shared_weak_count **)(v9 + 2976);
      if (v150)
      {
        v151 = (unint64_t *)&v150->__shared_owners_;
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      v153 = *(std::__shared_weak_count **)(v9 + 2992);
      if (v153)
      {
        v154 = (unint64_t *)&v153->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v178);
      v156 = *(std::__shared_weak_count **)(v9 + 1360);
      if (v156)
      {
        v157 = (unint64_t *)&v156->__shared_owners_;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v179);
      if (!*(_BYTE *)(v9 + 568))
      {
        LODWORD(v201.__vftable) = 608;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError,AMSCore::FairPlayErrorCode>((uint64_t)v213, (uint64_t)v198, (unsigned int *)&v201);
        AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>((uint64_t)v14, (std::runtime_error *)v213);
        std::unexpected<AMSCore::Error>::~unexpected((uint64_t)v213);
      }
      AMSCore::HTTPResponse::getDecodedObject(*(AMSCore::HTTPResponse **)(v9 + 336));
      v160 = *(_BYTE *)(v159 + 72);
      if (v160)
      {
        *(_QWORD *)&v213[8] = 0;
        *(_QWORD *)&v213[16] = 0;
        *(_QWORD *)v213 = &v213[8];
        v161 = (const void ***)(v159 + 8);
        v162 = *(const void ***)v159;
        if (*(_QWORD *)v159 != v159 + 8)
        {
          do
          {
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)v213, (uint64_t *)&v213[8], v162 + 4, (__int128 *)v162 + 2);
            v163 = (const void **)v162[1];
            if (v163)
            {
              do
              {
                v164 = (const void ***)v163;
                v163 = (const void **)*v163;
              }
              while (v163);
            }
            else
            {
              do
              {
                v164 = (const void ***)v162[2];
                v165 = *v164 == v162;
                v162 = (const void **)v164;
              }
              while (!v165);
            }
            v162 = (const void **)v164;
          }
          while (v164 != v161);
        }
      }
      else
      {
        AMSCore::Error::Error((std::runtime_error *)v213, (const std::runtime_error *)v159);
      }
      v217 = v160;
      AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error> &>(&v201, (uint64_t)v213, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
      if (v206)
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v207, (uint64_t)&v201);
        AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>((uint64_t)v14, &v207);
        std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v207);
      }
      std::optional<AMSCore::Error>::~optional((uint64_t)&v201);
      if (v217)
      {
        AMSCore::getValueByKey<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>((uint64_t)&v201, (uint64_t *)v213);
        AMSCore::nestedError<std::expected<std::reference_wrapper<AMSCore::DataBuffer>,AMSCore::Error> &>(&v207, (uint64_t)&v201, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
        if (v212)
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v200, (uint64_t)&v207);
          AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>((uint64_t)v14, &v200);
          std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v200);
        }
        std::optional<AMSCore::Error>::~optional((uint64_t)&v207);
        if (v206)
        {
          v166 = AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::ValuePromise::return_value<AMSCore::DataBuffer>(v14, (__n128 *)v201.__vftable);
          if (!v206)
            ((void (*)(std::runtime_error *, __n128))v201.~runtime_error)(&v201, v166);
          if (v217)
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v213, *(unsigned int **)&v213[8]);
          else
            (**(void (***)(_BYTE *, __n128))v213)(v213, v166);
          if (*(_BYTE *)(v9 + 568))
          {
            v167 = *(std::__shared_weak_count **)(v9 + 344);
            if (v167)
            {
              v168 = (unint64_t *)&v167->__shared_owners_;
              do
                v169 = __ldaxr(v168);
              while (__stlxr(v169 - 1, v168));
              if (!v169)
              {
                ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                std::__shared_weak_count::__release_weak(v167);
              }
            }
            AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v9 + 168));
            v170 = *(std::__shared_weak_count **)(v9 + 160);
            if (v170)
            {
              v171 = (unint64_t *)&v170->__shared_owners_;
              do
                v172 = __ldaxr(v171);
              while (__stlxr(v172 - 1, v171));
              if (!v172)
              {
                ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                std::__shared_weak_count::__release_weak(v170);
              }
            }
          }
          else
          {
            ((void (*)(std::runtime_error *))v198->~runtime_error)(v198);
          }
          goto LABEL_262;
        }
      }
      goto LABEL_275;
    }
  }
}

void sub_18CC67D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AMSCore::ExecuteHTTPRequestTask::Options *a10, AMSCore::EncodeHTTPRequestTask::Result *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,AMSCore::ExecuteHTTPRequestTask::Options *a21,void **a22,uint64_t a23,int a24,int a25,uint64_t a26,uint64_t a27,AMSCore::EncodeHTTPRequestTask::Options *a28,uint64_t a29,_QWORD *a30,uint64_t a31,AMSCore::URL *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void (**a42)(_QWORD),uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;

  if (a2)
  {
    if (!a51)
      (*a42)(&a42);
    std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](v53 - 192);
    std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](v52);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](a28);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(a21);
    AMSCore::EncodeHTTPRequestTask::Options::~Options(a22);
    v55 = *(_QWORD *)(v51 + 2768);
    if (*(_BYTE *)(v51 + 2840))
    {
      *a30 = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    }
    else
    {
      (*(void (**)(_QWORD *))v55)(a30);
    }
    if (*(_BYTE *)(v51 + 2608))
      AMSCore::URL::~URL(a32);
    else
      (**(void (***)(AMSCore::URL *))a32)(a32);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::signPayload(unint64_t a1)
{
  std::runtime_error *v2;
  void **v3;
  AMSCore::ExecuteHTTPRequestTask::Options *v4;
  AMSCore::URL *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  const std::runtime_error *v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::runtime_error_vtbl **v14;
  std::runtime_error_vtbl **v15;
  uint64_t v16;
  const std::runtime_error *v17;
  char v18;
  std::runtime_error_vtbl *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::runtime_error_vtbl *v82;
  _QWORD *v83;
  std::runtime_error_vtbl *v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  const char *imp;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  const std::runtime_error *v126;
  char v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  _QWORD *v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  char v164;
  const void ***v165;
  const void **v166;
  const void **v167;
  const void ***v168;
  BOOL v169;
  void **v170;
  unsigned int *v171;
  void **v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  std::runtime_error_vtbl *v185;
  void **v186;
  unsigned int *v187;
  void **v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  __int128 v206;
  __int128 *v207;
  __int128 *v208;
  unint64_t v209;
  unint64_t v210;
  _BYTE *v211;
  _OWORD *v212;
  AMSCore::ExecuteHTTPRequestTask::Options *v213;
  void **v214;
  AMSCore::ExecuteHTTPRequestTask::Options *v215;
  AMSCore::URL *v216;
  uint64_t v217;
  std::runtime_error *v218;
  std::runtime_error *v219;
  std::runtime_error v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  __int128 v224;
  char v225;
  std::runtime_error v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  __int128 v230;
  std::runtime_error v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  std::runtime_error v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  __int128 v240;
  char v241;
  _BYTE v242[32];
  __int128 v243;
  uint64_t v244;
  __int128 v245;
  char v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  v2 = (std::runtime_error *)(a1 + 152);
  v3 = (void **)(a1 + 1744);
  v4 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2120);
  v213 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2288);
  v214 = (void **)(a1 + 976);
  v5 = (AMSCore::URL *)(a1 + 2456);
  v218 = (std::runtime_error *)(a1 + 576);
  v219 = (std::runtime_error *)(a1 + 2768);
  v6 = a1 + 16;
  v7 = *(unsigned __int8 *)(a1 + 3031);
  v216 = (AMSCore::URL *)(a1 + 2456);
  v217 = a1 + 1744;
  v215 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2120);
  if (v7 == 2)
    goto LABEL_174;
  v211 = (_BYTE *)(a1 + 3031);
  v212 = (_OWORD *)(a1 + 2312);
  if (v7 != 1)
  {
    v209 = a1 + 16;
    v210 = a1 + 152;
    v14 = (std::runtime_error_vtbl **)(a1 + 2904);
    v208 = (__int128 *)(a1 + 3000);
    v15 = (std::runtime_error_vtbl **)(a1 + 3016);
    v16 = *(_QWORD *)(a1 + 3072);
    if (!*(_BYTE *)(v16 + 88))
      goto LABEL_325;
    v207 = (__int128 *)(a1 + 2920);
    v17 = (const std::runtime_error *)(v16 + 8);
    v18 = *(_BYTE *)(v16 + 80);
    if (v18)
    {
      v19 = v17->__vftable;
      v17->__vftable = 0;
      v219->__vftable = v19;
      v5 = (AMSCore::URL *)(a1 + 2456);
    }
    else
    {
      std::runtime_error::runtime_error(v219, v17);
      *(_OWORD *)(a1 + 2784) = *(_OWORD *)(v16 + 24);
      *(_QWORD *)(a1 + 2768) = off_1E2521330;
      v24 = (_QWORD *)(v16 + 48);
      v25 = *(_QWORD *)(v16 + 48);
      *(_QWORD *)(a1 + 2800) = *(_QWORD *)(v16 + 40);
      v26 = a1 + 2808;
      *(_QWORD *)(a1 + 2808) = v25;
      v27 = *(_QWORD *)(v16 + 56);
      *(_QWORD *)(a1 + 2816) = v27;
      if (v27)
      {
        *(_QWORD *)(v25 + 16) = v26;
        *(_QWORD *)(v16 + 40) = v24;
        *v24 = 0;
        *(_QWORD *)(v16 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 2800) = v26;
      }
      v5 = v216;
      v53 = *(_QWORD *)(a1 + 3072);
      v212[32] = *(_OWORD *)(v53 + 64);
      *(_QWORD *)(v53 + 64) = 0;
      *(_QWORD *)(v53 + 72) = 0;
    }
    *(_BYTE *)(a1 + 2840) = v18;
    v54 = *(_QWORD *)(a1 + 3080);
    if (v54)
    {
      v55 = (unint64_t *)(v54 + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        v57 = *(std::__shared_weak_count **)(a1 + 3080);
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v58 = *(std::__shared_weak_count **)(a1 + 584);
    if (!v58)
      goto LABEL_73;
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      if ((*(char *)(a1 + 2903) & 0x80000000) == 0)
        goto LABEL_75;
    }
    else
    {
LABEL_73:
      if ((*(char *)(a1 + 2903) & 0x80000000) == 0)
      {
LABEL_75:
        v61 = *(std::__shared_weak_count **)(a1 + 160);
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        AMSCore::nestedError<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error> &>(v242, (uint64_t)v219, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
        if (v246)
        {
          std::runtime_error::runtime_error(&v236, (const std::runtime_error *)v242);
          v237 = *(_OWORD *)&v242[16];
          v236.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v238 = v243;
          v239 = v244;
          if (v244)
          {
            *(_QWORD *)(*((_QWORD *)&v243 + 1) + 16) = (char *)&v238 + 8;
            *(_QWORD *)&v243 = (char *)&v243 + 8;
            *((_QWORD *)&v243 + 1) = 0;
            v244 = 0;
          }
          else
          {
            *(_QWORD *)&v238 = (char *)&v238 + 8;
          }
          v240 = v245;
          v245 = 0uLL;
          std::runtime_error::runtime_error(&v220, &v236);
          v221 = v237;
          v220.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v85 = (unsigned int *)*((_QWORD *)&v238 + 1);
          v222 = v238;
          v223 = v239;
          if (v239)
          {
            *(_QWORD *)(*((_QWORD *)&v238 + 1) + 16) = (char *)&v222 + 8;
            v85 = 0;
            *(_QWORD *)&v238 = (char *)&v238 + 8;
            *((_QWORD *)&v238 + 1) = 0;
            v239 = 0;
          }
          else
          {
            *(_QWORD *)&v222 = (char *)&v222 + 8;
          }
          v224 = v240;
          v240 = 0uLL;
          v236.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v238, v85);
          MEMORY[0x18D7898AC](&v236);
          v6 = v209;
          if (*(_BYTE *)(a1 + 104))
          {
            if (*(_BYTE *)(a1 + 96))
            {
              if (*(char *)(a1 + 47) < 0)
                operator delete(*(void **)(a1 + 24));
            }
            else
            {
              (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
            }
            *(_BYTE *)(a1 + 104) = 0;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v220);
          v86 = *((_QWORD *)&v222 + 1);
          v87 = v222;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)&v222 + 1);
          v88 = a1 + 64;
          *(_OWORD *)(a1 + 40) = v221;
          *(_QWORD *)(a1 + 24) = off_1E2521330;
          *(_QWORD *)(a1 + 56) = v87;
          v89 = v223;
          *(_QWORD *)(a1 + 72) = v223;
          if (v89)
          {
            *(_QWORD *)(v86 + 16) = v88;
            v86 = 0;
            *(_QWORD *)&v222 = (char *)&v222 + 8;
            *((_QWORD *)&v222 + 1) = 0;
            v223 = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 56) = v88;
          }
          v2 = (std::runtime_error *)v210;
          *(_OWORD *)(a1 + 80) = v224;
          v224 = 0uLL;
          *(_BYTE *)(a1 + 96) = 0;
          *(_BYTE *)(a1 + 104) = 1;
          v220.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v222, (unsigned int *)v86);
          MEMORY[0x18D7898AC](&v220);
          if (v246)
          {
            *(_QWORD *)v242 = off_1E2521330;
            v90 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
            if (*((_QWORD *)&v245 + 1))
            {
              v91 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v243, *((unsigned int **)&v243 + 1));
            MEMORY[0x18D7898AC](v242);
          }
          v93 = *(_QWORD *)(a1 + 3064);
          v94 = *(_QWORD *)(a1 + 3048);
          v95 = *(_BYTE *)(a1 + 3128);
          v96 = *(_QWORD *)(a1 + 3032);
LABEL_312:
          v205 = *(_QWORD *)(a1 + 2768);
          if (*(_BYTE *)(a1 + 2840))
          {
            v219->__vftable = 0;
            if (v205)
              (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
            if (*(_BYTE *)(a1 + 2608))
              goto LABEL_316;
          }
          else
          {
            (*(void (**)(std::runtime_error *))v205)(v219);
            if (*(_BYTE *)(a1 + 2608))
            {
LABEL_316:
              AMSCore::URL::~URL(v5);
LABEL_319:
              *(_QWORD *)(a1 + 3120) = v96;
              *(_BYTE *)(a1 + 3129) = v95;
              *(_QWORD *)(a1 + 3112) = v94;
              *(_QWORD *)(a1 + 3104) = v93;
              *(_QWORD *)(a1 + 152) = v6;
              *(_QWORD *)a1 = 0;
              AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
              return;
            }
          }
          (**(void (***)(AMSCore::URL *))v5)(v5);
          goto LABEL_319;
        }
        if (!*(_BYTE *)(a1 + 2608))
          goto LABEL_325;
        *(_BYTE *)(a1 + 2616) = 0;
        *(_BYTE *)(a1 + 2640) = 0;
        if (*(_BYTE *)(a1 + 2480))
        {
          *(_OWORD *)(a1 + 2616) = *(_OWORD *)v5;
          *(_QWORD *)(a1 + 2632) = *((_QWORD *)v5 + 2);
          *((_QWORD *)v5 + 1) = 0;
          *((_QWORD *)v5 + 2) = 0;
          *(_QWORD *)v5 = 0;
          *(_BYTE *)(a1 + 2640) = 1;
        }
        *(_BYTE *)(a1 + 2648) = 0;
        *(_BYTE *)(a1 + 2672) = 0;
        if (*(_BYTE *)(a1 + 2512))
        {
          *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2504);
          *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a1 + 2488);
          *(_QWORD *)(a1 + 2504) = 0;
          *(_QWORD *)(a1 + 2488) = 0;
          *(_QWORD *)(a1 + 2496) = 0;
          *(_BYTE *)(a1 + 2672) = 1;
        }
        *(_BYTE *)(a1 + 2680) = 0;
        *(_BYTE *)(a1 + 2704) = 0;
        if (*(_BYTE *)(a1 + 2544))
        {
          *(_QWORD *)(a1 + 2696) = *(_QWORD *)(a1 + 2536);
          *(_OWORD *)(a1 + 2680) = *(_OWORD *)(a1 + 2520);
          *(_QWORD *)(a1 + 2536) = 0;
          *(_QWORD *)(a1 + 2520) = 0;
          *(_QWORD *)(a1 + 2528) = 0;
          *(_BYTE *)(a1 + 2704) = 1;
        }
        *(_DWORD *)(a1 + 2712) = *(_DWORD *)(a1 + 2552);
        *(_QWORD *)(a1 + 2720) = a1 + 2720;
        *(_QWORD *)(a1 + 2728) = a1 + 2720;
        *(_QWORD *)(a1 + 2736) = 0;
        v64 = *(_QWORD *)(a1 + 2576);
        if (v64)
        {
          v65 = *(uint64_t **)(a1 + 2568);
          v66 = *(_QWORD *)(a1 + 2560);
          v67 = *v65;
          *(_QWORD *)(v67 + 8) = *(_QWORD *)(v66 + 8);
          **(_QWORD **)(v66 + 8) = v67;
          v68 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(v68 + 8) = v65;
          *v65 = v68;
          *(_QWORD *)(a1 + 2720) = v66;
          *(_QWORD *)(v66 + 8) = a1 + 2720;
          *(_QWORD *)(a1 + 2736) = v64;
          *(_QWORD *)(a1 + 2576) = 0;
        }
        v69 = *(_QWORD *)(a1 + 3048);
        v70 = *(_QWORD *)(a1 + 3040);
        *(_QWORD *)(a1 + 2760) = *(_QWORD *)(a1 + 2600);
        *(_OWORD *)(a1 + 2744) = *(_OWORD *)(a1 + 2584);
        *(_QWORD *)(a1 + 2600) = 0;
        *(_QWORD *)(a1 + 2592) = 0;
        *(_QWORD *)(a1 + 2584) = 0;
        *(_QWORD *)(a1 + 2952) = v70;
        *(_QWORD *)(a1 + 2960) = v69;
        if (v69)
        {
          v71 = (unint64_t *)(v69 + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        v73 = *(_QWORD *)(a1 + 3064);
        *(_QWORD *)(a1 + 2936) = *(_QWORD *)(a1 + 3056);
        *(_QWORD *)(a1 + 2944) = v73;
        if (v73)
        {
          v74 = (unint64_t *)(v73 + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder(v217, (__int128 *)(a1 + 2616), (__int128 *)(a1 + 2952), (__int128 *)(a1 + 2936));
        v76 = *(std::__shared_weak_count **)(a1 + 2944);
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v79 = *(std::__shared_weak_count **)(a1 + 2960);
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 2616));
        if (!*(_BYTE *)(a1 + 2840))
          goto LABEL_325;
        v82 = v219->__vftable;
        *v14 = v219->__vftable;
        v2 = (std::runtime_error *)v210;
        if (v82)
        {
          v83 = (_QWORD *)operator new();
          v84 = v219->__vftable;
          *v83 = &off_1E2523180;
          v83[1] = 0;
          v83[2] = 0;
          v83[3] = v84;
        }
        else
        {
          v83 = 0;
        }
        *(_QWORD *)(a1 + 2912) = v83;
        *(_QWORD *)(a1 + 2768) = 0;
        v97 = *(_OWORD *)v14;
        *v14 = 0;
        *(_QWORD *)(a1 + 2912) = 0;
        v98 = *(std::__shared_weak_count **)(a1 + 1752);
        *(_OWORD *)(a1 + 1744) = v97;
        if (v98)
        {
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        v101 = *(_BYTE *)(a1 + 3128);
        v102 = *(_QWORD *)(a1 + 3032);
        v236.__vftable = *v15;
        *(std::runtime_error_vtbl **)((char *)&v236.__vftable + 7) = *(std::runtime_error_vtbl **)(a1 + 3023);
        *v15 = 0;
        *(_QWORD *)(a1 + 3023) = 0;
        v242[23] = 21;
        strcpy(v242, "sign-sap-setup-buffer");
        *(_QWORD *)((char *)&v243 + 7) = *(std::runtime_error_vtbl **)((char *)&v236.__vftable + 7);
        *(_QWORD *)&v242[24] = v102;
        *(_QWORD *)&v243 = v236.__vftable;
        HIBYTE(v243) = v101;
        v236.__vftable = 0;
        *(std::runtime_error_vtbl **)((char *)&v236.__vftable + 7) = 0;
        LODWORD(v244) = 6;
        v220.__imp_.__imp_ = 0;
        *(_QWORD *)&v221 = 0;
        v220.__vftable = (std::runtime_error_vtbl *)&v220.__imp_;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v220, (uint64_t *)&v220.__imp_, (const void **)v242, (__int128 *)v242);
        imp = v220.__imp_.__imp_;
        *(_QWORD *)(a1 + 2848) = v220.__vftable;
        v104 = a1 + 2856;
        *(_QWORD *)(a1 + 2856) = imp;
        v105 = v221;
        *(_QWORD *)(a1 + 2864) = v221;
        v6 = v209;
        if (v105)
        {
          *((_QWORD *)imp + 2) = v104;
          v220.__vftable = (std::runtime_error_vtbl *)&v220.__imp_;
          v220.__imp_.__imp_ = 0;
          *(_QWORD *)&v221 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 2848) = v104;
        }
        *(_DWORD *)(a1 + 2872) = 8;
        AMSCore::Any::operator=(a1 + 1800, a1 + 2848);
        *(_DWORD *)(a1 + 1832) = 2;
        *(_DWORD *)(a1 + 1920) = 6;
        v106 = *(unsigned int *)(a1 + 2872);
        if ((_DWORD)v106 != -1)
          ((void (*)(std::runtime_error *, unint64_t))off_1E253D240[v106])(&v231, a1 + 2848);
        *(_DWORD *)(a1 + 2872) = -1;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v220, (unsigned int *)v220.__imp_.__imp_);
        if ((_DWORD)v244 != -1)
          ((void (*)(std::runtime_error *, _BYTE *))off_1E253D240[v244])(&v231, &v242[24]);
        LODWORD(v244) = -1;
        if ((v242[23] & 0x80000000) != 0)
          operator delete(*(void **)v242);
        v107 = *(std::__shared_weak_count **)(a1 + 2912);
        v3 = (void **)v217;
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        *v207 = *(_OWORD *)(a1 + 3040);
        *v208 = *(_OWORD *)(a1 + 3056);
        AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v215, v207, v208);
        v110 = *(std::__shared_weak_count **)(a1 + 3008);
        if (v110)
        {
          v111 = (unint64_t *)&v110->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        v113 = *(std::__shared_weak_count **)(a1 + 2928);
        if (v113)
        {
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 1368, v217);
        AMSCore::EncodeHTTPRequestTask::perform((_OWORD *)v210, a1 + 1368);
        v116 = *(_OWORD *)(a1 + 152);
        *(_OWORD *)(a1 + 3088) = v116;
        *(_QWORD *)v210 = 0;
        *(_QWORD *)(v210 + 8) = 0;
        if (!atomic_load((unint64_t *)(v116 + 416)))
        {
          *v211 = 1;
          v118 = (unint64_t *)(*(_QWORD *)(a1 + 3088) + 416);
          do
            v119 = __ldaxr(v118);
          while (__stlxr(a1, v118));
          if (!v119)
            return;
        }
        goto LABEL_3;
      }
    }
    operator delete(*(void **)(a1 + 2880));
    goto LABEL_75;
  }
LABEL_3:
  v8 = *(_QWORD *)(a1 + 3088);
  if (!*(_BYTE *)(v8 + 408))
    goto LABEL_325;
  v9 = (const std::runtime_error *)(v8 + 8);
  v10 = *(_BYTE *)(v8 + 400);
  if (v10)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v218, (uint64_t)v9);
    v11 = (_QWORD *)(v8 + 384);
    *(_QWORD *)(a1 + 952) = *(_QWORD *)(v8 + 384);
    v12 = (_QWORD *)(a1 + 960);
    v13 = (_QWORD *)(v8 + 392);
  }
  else
  {
    std::runtime_error::runtime_error(v218, v9);
    *(_OWORD *)(a1 + 592) = *(_OWORD *)(v8 + 24);
    *(_QWORD *)(a1 + 576) = off_1E2521330;
    v20 = (_QWORD *)(v8 + 48);
    v21 = *(_QWORD *)(v8 + 48);
    *(_QWORD *)(a1 + 608) = *(_QWORD *)(v8 + 40);
    v22 = a1 + 616;
    *(_QWORD *)(a1 + 616) = v21;
    v23 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(a1 + 624) = v23;
    if (v23)
    {
      *(_QWORD *)(v21 + 16) = v22;
      *(_QWORD *)(v8 + 40) = v20;
      *v20 = 0;
      *(_QWORD *)(v8 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 608) = v22;
    }
    v28 = *(_QWORD *)(a1 + 3088);
    v29 = *(_QWORD *)(v28 + 64);
    v11 = (_QWORD *)(v28 + 64);
    *(_QWORD *)(a1 + 632) = v29;
    v12 = (_QWORD *)(a1 + 640);
    v13 = v11 + 1;
  }
  *v12 = *v13;
  *v11 = 0;
  v11[1] = 0;
  *(_BYTE *)(a1 + 968) = v10;
  v30 = *(_QWORD *)(a1 + 3096);
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = *(std::__shared_weak_count **)(a1 + 3096);
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v34 = *(std::__shared_weak_count **)(a1 + 160);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 1368));
  AMSCore::nestedError<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error> &>(v242, (uint64_t)v218, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (v246)
  {
    std::runtime_error::runtime_error(&v220, (const std::runtime_error *)v242);
    v221 = *(_OWORD *)&v242[16];
    v220.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v222 = v243;
    v223 = v244;
    if (v244)
    {
      *(_QWORD *)(*((_QWORD *)&v243 + 1) + 16) = (char *)&v222 + 8;
      *(_QWORD *)&v243 = (char *)&v243 + 8;
      *((_QWORD *)&v243 + 1) = 0;
      v244 = 0;
    }
    else
    {
      *(_QWORD *)&v222 = (char *)&v222 + 8;
    }
    v224 = v245;
    v245 = 0uLL;
    std::runtime_error::runtime_error(&v236, &v220);
    v237 = v221;
    v236.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v40 = (unsigned int *)*((_QWORD *)&v222 + 1);
    v238 = v222;
    v239 = v223;
    if (v223)
    {
      *(_QWORD *)(*((_QWORD *)&v222 + 1) + 16) = (char *)&v238 + 8;
      v40 = 0;
      *(_QWORD *)&v222 = (char *)&v222 + 8;
      *((_QWORD *)&v222 + 1) = 0;
      v223 = 0;
    }
    else
    {
      *(_QWORD *)&v238 = (char *)&v238 + 8;
    }
    v240 = v224;
    v224 = 0uLL;
    v220.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v222, v40);
    MEMORY[0x18D7898AC](&v220);
    v41 = (void **)(a1 + 24);
    if (*(_BYTE *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (*(char *)(a1 + 47) < 0)
          operator delete(*v41);
      }
      else
      {
        (*(void (**)(unint64_t))*v41)(a1 + 24);
      }
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v236);
    v42 = *((_QWORD *)&v238 + 1);
    v43 = v238;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)&v238 + 1);
    v44 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v237;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v43;
    v45 = v239;
    *(_QWORD *)(a1 + 72) = v239;
    if (v45)
    {
      *(_QWORD *)(v42 + 16) = v44;
      v42 = 0;
      *(_QWORD *)&v238 = (char *)&v238 + 8;
      *((_QWORD *)&v238 + 1) = 0;
      v239 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v44;
    }
    v4 = v215;
    *(_OWORD *)(a1 + 80) = v240;
    v240 = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v236.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v238, (unsigned int *)v42);
    MEMORY[0x18D7898AC](&v236);
    v5 = v216;
    if (v246)
    {
      *(_QWORD *)v242 = off_1E2521330;
      v46 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
      if (*((_QWORD *)&v245 + 1))
      {
        v47 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v243, *((unsigned int **)&v243 + 1));
      MEMORY[0x18D7898AC](v242);
    }
    v3 = (void **)v217;
    if (!*(_BYTE *)(a1 + 968))
      goto LABEL_310;
    goto LABEL_302;
  }
  if (!*(_BYTE *)(a1 + 968))
    goto LABEL_325;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v214, (uint64_t)v218);
  *(_QWORD *)(a1 + 1352) = *(_QWORD *)(a1 + 952);
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a1 + 960);
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 2288) = *(_QWORD *)(a1 + 2120);
  v37 = a1 + 2296;
  v38 = *(_QWORD *)(a1 + 2128);
  *(_QWORD *)(a1 + 2296) = v38;
  v39 = *(_QWORD *)(a1 + 2136);
  *(_QWORD *)(a1 + 2304) = v39;
  v4 = v215;
  if (v39)
  {
    *(_QWORD *)(v38 + 16) = v37;
    *(_QWORD *)v215 = a1 + 2128;
    *(_QWORD *)(a1 + 2128) = 0;
    *(_QWORD *)(a1 + 2136) = 0;
  }
  else
  {
    *(_QWORD *)v213 = v37;
  }
  v49 = *(_OWORD *)(a1 + 2144);
  *(_QWORD *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 2144) = 0;
  v50 = *(_OWORD *)(a1 + 2160);
  *v212 = v49;
  v212[1] = v50;
  *(_QWORD *)(a1 + 2160) = 0;
  *(_QWORD *)(a1 + 2168) = 0;
  *(_BYTE *)(a1 + 2344) = 0;
  *(_BYTE *)(a1 + 2368) = 0;
  if (*(_BYTE *)(a1 + 2200))
  {
    *(_OWORD *)(a1 + 2344) = *(_OWORD *)(a1 + 2176);
    *(_QWORD *)(a1 + 2360) = *(_QWORD *)(a1 + 2192);
    *(_QWORD *)(a1 + 2176) = 0;
    *(_QWORD *)(a1 + 2192) = 0;
    *(_QWORD *)(a1 + 2184) = 0;
    *(_BYTE *)(a1 + 2368) = 1;
  }
  *(_BYTE *)(a1 + 2376) = 0;
  *(_DWORD *)(a1 + 2392) = -1;
  v51 = *(unsigned int *)(a1 + 2224);
  if ((_DWORD)v51 != -1)
  {
    ((void (*)(_BYTE *, unint64_t, unint64_t))off_1E253CA98[v51])(v242, a1 + 2376, a1 + 2208);
    *(_DWORD *)(a1 + 2392) = v51;
  }
  *(_DWORD *)(a1 + 2416) = *(_DWORD *)(a1 + 2248);
  *(_OWORD *)(a1 + 2400) = *(_OWORD *)(a1 + 2232);
  v52 = *(_QWORD *)(a1 + 2280);
  if (v52)
  {
    if (v52 == a1 + 2256)
    {
      *(_QWORD *)(a1 + 2448) = a1 + 2424;
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
    }
    else
    {
      *(_QWORD *)(a1 + 2448) = v52;
      *(_QWORD *)(a1 + 2280) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2448) = 0;
  }
  AMSCore::ExecuteHTTPRequestTask::perform((std::runtime_error *)(a1 + 2984), (uint64_t)v214, (uint64_t)v213);
  v120 = *(_QWORD *)(a1 + 2984);
  v121 = *(_QWORD *)(a1 + 2992);
  *(_QWORD *)(a1 + 2984) = 0;
  *(_QWORD *)(a1 + 2992) = 0;
  *(_QWORD *)(a1 + 2968) = v120;
  *(_QWORD *)(a1 + 2976) = v121;
  if (atomic_load((unint64_t *)(v120 + 440)))
    goto LABEL_174;
  *v211 = 2;
  v123 = (unint64_t *)(*(_QWORD *)(a1 + 2968) + 440);
  do
    v124 = __ldaxr(v123);
  while (__stlxr(a1, v123));
  if (v124)
  {
LABEL_174:
    v125 = *(_QWORD *)(a1 + 2968);
    if (*(_BYTE *)(v125 + 432))
    {
      v126 = (const std::runtime_error *)(v125 + 8);
      v127 = *(_BYTE *)(v125 + 424);
      if (v127)
      {
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(v125 + 8);
        v126->__vftable = 0;
        *(_QWORD *)(v125 + 16) = 0;
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(v125 + 24);
        v128 = (_QWORD *)(v125 + 32);
        v129 = *(_QWORD *)(v125 + 32);
        *(_QWORD *)(a1 + 176) = v129;
        v130 = a1 + 176;
        v131 = *(_QWORD *)(v125 + 40);
        *(_QWORD *)(a1 + 184) = v131;
        if (v131)
        {
          *(_QWORD *)(v129 + 16) = v130;
          *(_QWORD *)(v125 + 24) = v128;
          *v128 = 0;
          *(_QWORD *)(v125 + 40) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 168) = v130;
        }
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(v125 + 48);
        *(_QWORD *)(v125 + 48) = 0;
        *(_QWORD *)(v125 + 56) = 0;
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v125 + 64);
        *(_QWORD *)(v125 + 64) = 0;
        *(_QWORD *)(v125 + 72) = 0;
        *(_BYTE *)(a1 + 224) = 0;
        *(_BYTE *)(a1 + 248) = 0;
        if (*(_BYTE *)(v125 + 104))
        {
          v136 = *(_OWORD *)(v125 + 80);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(v125 + 96);
          *(_OWORD *)(a1 + 224) = v136;
          *(_QWORD *)(v125 + 88) = 0;
          *(_QWORD *)(v125 + 96) = 0;
          *(_QWORD *)(v125 + 80) = 0;
          *(_BYTE *)(a1 + 248) = 1;
        }
        *(_BYTE *)(a1 + 256) = 0;
        *(_DWORD *)(a1 + 272) = -1;
        v137 = *(unsigned int *)(v125 + 128);
        if ((_DWORD)v137 != -1)
        {
          ((void (*)(_BYTE *, unint64_t, uint64_t))off_1E253CA98[v137])(v242, a1 + 256, v125 + 112);
          *(_DWORD *)(a1 + 272) = v137;
        }
        v138 = *(_OWORD *)(v125 + 136);
        *(_DWORD *)(a1 + 296) = *(_DWORD *)(v125 + 152);
        *(_OWORD *)(a1 + 280) = v138;
        v139 = (_QWORD *)(v125 + 184);
        v140 = *(_QWORD *)(v125 + 184);
        if (v140)
        {
          if (v140 == v125 + 160)
          {
            *(_QWORD *)(a1 + 328) = a1 + 304;
            (*(void (**)(_QWORD))(*(_QWORD *)*v139 + 24))(*v139);
          }
          else
          {
            *(_QWORD *)(a1 + 328) = v140;
            *v139 = 0;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 328) = 0;
        }
        *(_OWORD *)(a1 + 336) = *(_OWORD *)(v125 + 192);
        *(_QWORD *)(v125 + 192) = 0;
        *(_QWORD *)(v125 + 200) = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v2, v126);
        *(_QWORD *)(a1 + 152) = MEMORY[0x1E0DE4F90] + 16;
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(v125 + 24);
        *(_QWORD *)(a1 + 152) = off_1E2521330;
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(v125 + 40);
        v132 = (_QWORD *)(v125 + 48);
        v133 = *(_QWORD *)(v125 + 48);
        *(_QWORD *)(a1 + 192) = v133;
        v134 = a1 + 192;
        v135 = *(_QWORD *)(v125 + 56);
        *(_QWORD *)(a1 + 200) = v135;
        if (v135)
        {
          *(_QWORD *)(v133 + 16) = v134;
          *(_QWORD *)(v125 + 40) = v132;
          *v132 = 0;
          *(_QWORD *)(v125 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 184) = v134;
        }
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v125 + 64);
        *(_QWORD *)(v125 + 64) = 0;
        *(_QWORD *)(v125 + 72) = 0;
        *(_BYTE *)(a1 + 224) = 0;
        *(_QWORD *)(a1 + 152) = &off_1E2521420;
        *(_BYTE *)(a1 + 248) = 0;
        if (*(_BYTE *)(v125 + 104))
        {
          v141 = *(_OWORD *)(v125 + 80);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(v125 + 96);
          *(_OWORD *)(a1 + 224) = v141;
          *(_QWORD *)(v125 + 88) = 0;
          *(_QWORD *)(v125 + 96) = 0;
          *(_QWORD *)(v125 + 80) = 0;
          *(_BYTE *)(a1 + 248) = 1;
        }
        v142 = *(_OWORD *)(v125 + 128);
        *(_OWORD *)(a1 + 256) = *(_OWORD *)(v125 + 112);
        *(_OWORD *)(a1 + 272) = v142;
        v143 = *(_OWORD *)(v125 + 144);
        v144 = *(_OWORD *)(v125 + 160);
        v145 = *(_OWORD *)(v125 + 176);
        *(_OWORD *)(a1 + 329) = *(_OWORD *)(v125 + 185);
        *(_OWORD *)(a1 + 304) = v144;
        *(_OWORD *)(a1 + 320) = v145;
        *(_OWORD *)(a1 + 288) = v143;
        *(_QWORD *)(a1 + 360) = 0;
        *(_QWORD *)(a1 + 368) = 0;
        *(_QWORD *)(a1 + 352) = 0;
        *(_OWORD *)(a1 + 352) = *(_OWORD *)(v125 + 208);
        *(_QWORD *)(a1 + 368) = *(_QWORD *)(v125 + 224);
        *(_QWORD *)(v125 + 216) = 0;
        *(_QWORD *)(v125 + 224) = 0;
        *(_QWORD *)(v125 + 208) = 0;
        v146 = *(_OWORD *)(v125 + 248);
        *(_OWORD *)(a1 + 376) = *(_OWORD *)(v125 + 232);
        *(_OWORD *)(a1 + 392) = v146;
        v147 = *(_OWORD *)(v125 + 264);
        v148 = *(_OWORD *)(v125 + 280);
        v149 = *(_OWORD *)(v125 + 312);
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(v125 + 296);
        *(_OWORD *)(a1 + 456) = v149;
        *(_OWORD *)(a1 + 408) = v147;
        *(_OWORD *)(a1 + 424) = v148;
        v150 = *(_OWORD *)(v125 + 328);
        v151 = *(_OWORD *)(v125 + 344);
        v152 = *(_OWORD *)(v125 + 360);
        *(_OWORD *)(a1 + 514) = *(_OWORD *)(v125 + 370);
        *(_OWORD *)(a1 + 488) = v151;
        *(_OWORD *)(a1 + 504) = v152;
        *(_OWORD *)(a1 + 472) = v150;
        *(_BYTE *)(a1 + 536) = 0;
        *(_BYTE *)(a1 + 560) = 0;
        if (*(_BYTE *)(v125 + 416))
        {
          v153 = *(_OWORD *)(v125 + 392);
          *(_QWORD *)(a1 + 552) = *(_QWORD *)(v125 + 408);
          *(_OWORD *)(a1 + 536) = v153;
          *(_QWORD *)(v125 + 400) = 0;
          *(_QWORD *)(v125 + 408) = 0;
          *(_QWORD *)(v125 + 392) = 0;
          *(_BYTE *)(a1 + 560) = 1;
        }
      }
      *(_BYTE *)(a1 + 568) = v127;
      v154 = *(std::__shared_weak_count **)(a1 + 2976);
      if (v154)
      {
        v155 = (unint64_t *)&v154->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      v157 = *(std::__shared_weak_count **)(a1 + 2992);
      if (v157)
      {
        v158 = (unint64_t *)&v157->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v213);
      v160 = *(std::__shared_weak_count **)(a1 + 1360);
      if (v160)
      {
        v161 = (unint64_t *)&v160->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v214);
      if (!*(_BYTE *)(a1 + 568))
      {
        LODWORD(v220.__vftable) = 608;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError,AMSCore::FairPlayErrorCode>((uint64_t)v242, (uint64_t)v2, (unsigned int *)&v220);
        v170 = (void **)(a1 + 24);
        if (*(_BYTE *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
          {
            if (*(char *)(a1 + 47) < 0)
              operator delete(*v170);
          }
          else
          {
            (*(void (**)(unint64_t))*v170)(a1 + 24);
          }
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)v242);
        v180 = *(_OWORD *)&v242[16];
        v181 = *((_QWORD *)&v243 + 1);
        v182 = v243;
        *(_QWORD *)(a1 + 64) = *((_QWORD *)&v243 + 1);
        v183 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v180;
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = v182;
        v184 = v244;
        *(_QWORD *)(a1 + 72) = v244;
        if (v184)
        {
          *(_QWORD *)(v181 + 16) = v183;
          *(_QWORD *)&v243 = (char *)&v243 + 8;
          *((_QWORD *)&v243 + 1) = 0;
          v244 = 0;
          v181 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v183;
        }
        *(_OWORD *)(a1 + 80) = v245;
        v245 = 0uLL;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v242 = off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v243, (unsigned int *)v181);
        MEMORY[0x18D7898AC](v242);
        if (*(_BYTE *)(a1 + 568))
        {
LABEL_291:
          v196 = *(std::__shared_weak_count **)(a1 + 344);
          if (v196)
          {
            v197 = (unint64_t *)&v196->__shared_owners_;
            do
              v198 = __ldaxr(v197);
            while (__stlxr(v198 - 1, v197));
            if (!v198)
            {
              ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
              std::__shared_weak_count::__release_weak(v196);
            }
          }
          AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 168));
          v199 = *(std::__shared_weak_count **)(a1 + 160);
          if (v199)
          {
            v200 = (unint64_t *)&v199->__shared_owners_;
            do
              v201 = __ldaxr(v200);
            while (__stlxr(v201 - 1, v200));
            if (!v201)
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
            }
          }
          if (!*(_BYTE *)(a1 + 968))
            goto LABEL_310;
          goto LABEL_302;
        }
LABEL_309:
        ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
        if (!*(_BYTE *)(a1 + 968))
        {
LABEL_310:
          ((void (*)(std::runtime_error *))v218->~runtime_error)(v218);
LABEL_311:
          AMSCore::ExecuteHTTPRequestTask::Options::~Options(v4);
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v3);
          v93 = 0;
          v94 = 0;
          v95 = 0;
          v96 = 0;
          goto LABEL_312;
        }
LABEL_302:
        v202 = *(std::__shared_weak_count **)(a1 + 960);
        if (v202)
        {
          v203 = (unint64_t *)&v202->__shared_owners_;
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
            std::__shared_weak_count::__release_weak(v202);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v218->__vftable);
        goto LABEL_311;
      }
      AMSCore::HTTPResponse::getDecodedObject(*(AMSCore::HTTPResponse **)(a1 + 336));
      v164 = *(_BYTE *)(v163 + 72);
      if (v164)
      {
        v236.__imp_.__imp_ = 0;
        *(_QWORD *)&v237 = 0;
        v236.__vftable = (std::runtime_error_vtbl *)&v236.__imp_;
        v165 = (const void ***)(v163 + 8);
        v166 = *(const void ***)v163;
        if (*(_QWORD *)v163 != v163 + 8)
        {
          do
          {
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v236, (uint64_t *)&v236.__imp_, v166 + 4, (__int128 *)v166 + 2);
            v167 = (const void **)v166[1];
            if (v167)
            {
              do
              {
                v168 = (const void ***)v167;
                v167 = (const void **)*v167;
              }
              while (v167);
            }
            else
            {
              do
              {
                v168 = (const void ***)v166[2];
                v169 = *v168 == v166;
                v166 = (const void **)v168;
              }
              while (!v169);
            }
            v166 = (const void **)v168;
          }
          while (v168 != v165);
        }
      }
      else
      {
        AMSCore::Error::Error(&v236, (const std::runtime_error *)v163);
      }
      v241 = v164;
      AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error> &>(v242, (uint64_t)&v236, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
      if (v246)
      {
        std::runtime_error::runtime_error(&v220, (const std::runtime_error *)v242);
        v221 = *(_OWORD *)&v242[16];
        v220.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v222 = v243;
        v223 = v244;
        if (v244)
        {
          *(_QWORD *)(*((_QWORD *)&v243 + 1) + 16) = (char *)&v222 + 8;
          *(_QWORD *)&v243 = (char *)&v243 + 8;
          *((_QWORD *)&v243 + 1) = 0;
          v244 = 0;
        }
        else
        {
          *(_QWORD *)&v222 = (char *)&v222 + 8;
        }
        v224 = v245;
        v245 = 0uLL;
        std::runtime_error::runtime_error(&v231, &v220);
        v232 = v221;
        v171 = (unsigned int *)*((_QWORD *)&v222 + 1);
        v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v233 = v222;
        v234 = v223;
        if (v223)
        {
          *(_QWORD *)(*((_QWORD *)&v222 + 1) + 16) = (char *)&v233 + 8;
          v171 = 0;
          *(_QWORD *)&v222 = (char *)&v222 + 8;
          *((_QWORD *)&v222 + 1) = 0;
          v223 = 0;
        }
        else
        {
          *(_QWORD *)&v233 = (char *)&v233 + 8;
        }
        v235 = v224;
        v224 = 0uLL;
        v220.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v222, v171);
        MEMORY[0x18D7898AC](&v220);
        v172 = (void **)(a1 + 24);
        if (*(_BYTE *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
          {
            if (*(char *)(a1 + 47) < 0)
              operator delete(*v172);
          }
          else
          {
            (*(void (**)(unint64_t))*v172)(a1 + 24);
          }
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v231);
        v173 = *((_QWORD *)&v233 + 1);
        v174 = v233;
        *(_QWORD *)(a1 + 64) = *((_QWORD *)&v233 + 1);
        v175 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v232;
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = v174;
        v176 = v234;
        *(_QWORD *)(a1 + 72) = v234;
        if (v176)
        {
          *(_QWORD *)(v173 + 16) = v175;
          v173 = 0;
          *(_QWORD *)&v233 = (char *)&v233 + 8;
          *((_QWORD *)&v233 + 1) = 0;
          v234 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v175;
        }
        v4 = v215;
        *(_OWORD *)(a1 + 80) = v235;
        v235 = 0uLL;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v233, (unsigned int *)v173);
        MEMORY[0x18D7898AC](&v231);
        v5 = v216;
        if (v246)
        {
          *(_QWORD *)v242 = off_1E2521330;
          v177 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
          if (*((_QWORD *)&v245 + 1))
          {
            v178 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
            do
              v179 = __ldaxr(v178);
            while (__stlxr(v179 - 1, v178));
            if (!v179)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v243, *((unsigned int **)&v243 + 1));
          MEMORY[0x18D7898AC](v242);
        }
        v3 = (void **)v217;
        goto LABEL_289;
      }
      if (v241)
      {
        v3 = (void **)v217;
        AMSCore::getValueByKey<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>((uint64_t)&v220, (uint64_t *)&v236);
        AMSCore::nestedError<std::expected<std::reference_wrapper<AMSCore::DataBuffer>,AMSCore::Error> &>(v242, (uint64_t)&v220, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
        if (v246)
        {
          std::runtime_error::runtime_error(&v231, (const std::runtime_error *)v242);
          v232 = *(_OWORD *)&v242[16];
          v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v233 = v243;
          v234 = v244;
          if (v244)
          {
            *(_QWORD *)(*((_QWORD *)&v243 + 1) + 16) = (char *)&v233 + 8;
            *(_QWORD *)&v243 = (char *)&v243 + 8;
            *((_QWORD *)&v243 + 1) = 0;
            v244 = 0;
          }
          else
          {
            *(_QWORD *)&v233 = (char *)&v233 + 8;
          }
          v235 = v245;
          v245 = 0uLL;
          std::runtime_error::runtime_error(&v226, &v231);
          v227 = v232;
          v226.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v187 = (unsigned int *)*((_QWORD *)&v233 + 1);
          v228 = v233;
          v229 = v234;
          if (v234)
          {
            *(_QWORD *)(*((_QWORD *)&v233 + 1) + 16) = (char *)&v228 + 8;
            v187 = 0;
            *(_QWORD *)&v233 = (char *)&v233 + 8;
            *((_QWORD *)&v233 + 1) = 0;
            v234 = 0;
          }
          else
          {
            *(_QWORD *)&v228 = (char *)&v228 + 8;
          }
          v230 = v235;
          v235 = 0uLL;
          v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v233, v187);
          MEMORY[0x18D7898AC](&v231);
          v188 = (void **)(a1 + 24);
          if (*(_BYTE *)(a1 + 104))
          {
            if (*(_BYTE *)(a1 + 96))
            {
              if (*(char *)(a1 + 47) < 0)
                operator delete(*v188);
            }
            else
            {
              (*(void (**)(unint64_t))*v188)(a1 + 24);
            }
            *(_BYTE *)(a1 + 104) = 0;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v226);
          v189 = *((_QWORD *)&v228 + 1);
          v190 = v228;
          *(_QWORD *)(a1 + 64) = *((_QWORD *)&v228 + 1);
          v191 = a1 + 64;
          *(_OWORD *)(a1 + 40) = v227;
          *(_QWORD *)(a1 + 24) = off_1E2521330;
          *(_QWORD *)(a1 + 56) = v190;
          v192 = v229;
          *(_QWORD *)(a1 + 72) = v229;
          if (v192)
          {
            *(_QWORD *)(v189 + 16) = v191;
            v189 = 0;
            *(_QWORD *)&v228 = (char *)&v228 + 8;
            *((_QWORD *)&v228 + 1) = 0;
            v229 = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 56) = v191;
          }
          v4 = v215;
          *(_OWORD *)(a1 + 80) = v230;
          v230 = 0uLL;
          *(_BYTE *)(a1 + 96) = 0;
          *(_BYTE *)(a1 + 104) = 1;
          v226.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v228, (unsigned int *)v189);
          MEMORY[0x18D7898AC](&v226);
          v5 = v216;
          if (v246)
          {
            *(_QWORD *)v242 = off_1E2521330;
            v193 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
            if (*((_QWORD *)&v245 + 1))
            {
              v194 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
              do
                v195 = __ldaxr(v194);
              while (__stlxr(v195 - 1, v194));
              if (!v195)
              {
                ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                std::__shared_weak_count::__release_weak(v193);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v243, *((unsigned int **)&v243 + 1));
            MEMORY[0x18D7898AC](v242);
          }
          v3 = (void **)v217;
          if (!v225)
LABEL_288:
            ((void (*)(std::runtime_error *))v220.~runtime_error)(&v220);
LABEL_289:
          if (v241)
          {
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v236, (unsigned int *)v236.__imp_.__imp_);
            if (*(_BYTE *)(a1 + 568))
              goto LABEL_291;
          }
          else
          {
            ((void (*)(std::runtime_error *))v236.~runtime_error)(&v236);
            if (*(_BYTE *)(a1 + 568))
              goto LABEL_291;
          }
          goto LABEL_309;
        }
        if (v225)
        {
          v185 = v220.__vftable;
          v186 = (void **)(a1 + 24);
          if (*(_BYTE *)(a1 + 104))
          {
            if (*(_BYTE *)(a1 + 96))
            {
              if (*(char *)(a1 + 47) < 0)
                operator delete(*v186);
            }
            else
            {
              (*(void (**)(unint64_t))*v186)(a1 + 24);
            }
            *(_BYTE *)(a1 + 104) = 0;
          }
          v206 = *(_OWORD *)&v185->~runtime_error;
          *(_QWORD *)(a1 + 40) = v185->what;
          *(_OWORD *)v186 = v206;
          v185->~runtime_error_0 = 0;
          v185->what = 0;
          v185->~runtime_error = 0;
          *(_BYTE *)(a1 + 96) = 1;
          *(_BYTE *)(a1 + 104) = 1;
          if (!v225)
            goto LABEL_288;
          goto LABEL_289;
        }
      }
    }
LABEL_325:
    __break(1u);
  }
}

void sub_18CC69A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, AMSCore::ExecuteHTTPRequestTask::Options *a16, AMSCore::EncodeHTTPRequestTask::Result *a17, AMSCore::ExecuteHTTPRequestTask::Options *a18, AMSCore::URL *a19, AMSCore::EncodeHTTPRequestTask::Options *a20,AMSCore::EncodeHTTPRequestTask::Options *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::signPayload(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  char v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  AMSCore::URL *v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;

  if (*(_QWORD *)__p)
  {
    if (__p[3031])
    {
      if (__p[3031] == 1)
      {
        v2 = *((_QWORD *)__p + 387);
        if (v2)
        {
          v3 = (unint64_t *)(v2 + 8);
          do
            v4 = __ldaxr(v3);
          while (__stlxr(v4 - 1, v3));
          if (!v4)
          {
            v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 387);
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 171);
      }
      else
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 372);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 374);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2288));
        v29 = (std::__shared_weak_count *)*((_QWORD *)__p + 170);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 122);
        if (__p[968])
        {
          v32 = (std::__shared_weak_count *)*((_QWORD *)__p + 120);
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 72);
        }
        else
        {
          (**((void (***)(char *))__p + 72))(__p + 576);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2120));
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 218);
      v35 = *((_QWORD *)__p + 346);
      if (__p[2840])
      {
        *((_QWORD *)__p + 346) = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      }
      else
      {
        (*(void (**)(char *))v35)(__p + 2768);
      }
      v12 = 0;
      v11 = 0;
      v10 = 0;
      v9 = 0;
    }
    else
    {
      v13 = *((_QWORD *)__p + 385);
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          v16 = (std::__shared_weak_count *)*((_QWORD *)__p + 385);
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)__p + 73);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (__p[2903] < 0)
        operator delete(*((void **)__p + 360));
      v20 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 383);
      v11 = (std::__shared_weak_count *)*((_QWORD *)__p + 381);
      v10 = __p[3128];
      v9 = (void *)*((_QWORD *)__p + 379);
    }
    v36 = (AMSCore::URL *)(__p + 2456);
    if (__p[2608])
      AMSCore::URL::~URL(v36);
    else
      (**(void (***)(AMSCore::URL *))v36)(v36);
  }
  else
  {
    v9 = (void *)*((_QWORD *)__p + 390);
    v10 = __p[3129];
    v11 = (std::__shared_weak_count *)*((_QWORD *)__p + 389);
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 388);
  }
  v37 = (char *)*((_QWORD *)__p + 18);
  if (v37 == __p + 120)
  {
    v38 = 4;
    v37 = __p + 120;
  }
  else
  {
    if (!v37)
      goto LABEL_70;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_70:
  if (__p[104])
  {
    if (__p[96])
    {
      if (__p[47] < 0)
        operator delete(*((void **)__p + 3));
    }
    else
    {
      (**((void (***)(char *))__p + 3))(__p + 24);
    }
  }
  do
  {
    v39 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v40)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v12)
  {
    v41 = (unint64_t *)&v12->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v43 = (unint64_t *)&v11->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v10 & 0x80) == 0)
        goto LABEL_89;
      goto LABEL_88;
    }
  }
  if (v10 < 0)
LABEL_88:
    operator delete(v9);
LABEL_89:
  operator delete(__p);
}

_QWORD *std::shared_ptr<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2523378;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CC6A12C(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CC6A160(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Logger::log<char [24]>(uint64_t result, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[8];
  void *__p[2];
  __int128 v24;
  int v25;
  uint64_t v26[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v7 = result;
    v8 = MEMORY[0x1E0DE4FE0];
    v9 = MEMORY[0x1E0DE4FE0] + 64;
    v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v26[0] = MEMORY[0x1E0DE4FE0] + 64;
    v21 = v11;
    *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v11 - 24)) = v12;
    v13 = (std::ios_base *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24));
    std::ios_base::init(v13, v22);
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    v21 = v8 + 24;
    v26[0] = v9;
    std::streambuf::basic_streambuf();
    v14 = MEMORY[0x1E0DE4FB8];
    v22[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v24 = 0u;
    v25 = 16;
    v15 = *(_QWORD *)(v21 - 24);
    if ((v16 & 1) == 0
    {
    }
    v17 = strlen(a4);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, (uint64_t)a4, v17);
    v18 = v22[5];
    v19 = (char *)&v22[-1] + *(_QWORD *)(v21 - 24);
    if ((v19[32] & 5) != 0)
    {
      v20 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v19 + 5) + 32))(&rep, *((_QWORD *)v19 + 5), 0, 1, 16);
      v20 = v31;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v28 = 2;
    v29 = v18;
    v30 = v20;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v7 + 16) + 16))(*(_QWORD *)(v7 + 16), a2, a3, &rep);
    v21 = *v10;
    *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24)) = v10[3];
    v22[0] = v14 + 16;
    if (SBYTE7(v24) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v26);
  }
  return result;
}

void sub_18CC6A3CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_BYTE *AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error> &>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22[2];
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::runtime_error v30;
  __int128 v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  __int128 v35;
  char v36;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v30, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v31 = *(_OWORD *)(a2 + 16);
    v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v32 = *(unsigned int ***)(a2 + 32);
    v33 = (unsigned int *)v9;
    v34 = *(unsigned int **)(a2 + 48);
    if (v34)
    {
      *(_QWORD *)(v9 + 16) = &v33;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v32 = &v33;
    }
    v35 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v36 = 1;
    std::runtime_error::runtime_error(&v19, &v30);
    v20 = v31;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v21 = v32;
    v22[0] = v33;
    v22[1] = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = v22;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v21 = v22;
    }
    v23 = v35;
    v35 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v24, (uint64_t)&v19, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v24);
    *((_OWORD *)v4 + 1) = v25;
    *(_QWORD *)v4 = off_1E2521330;
    v10 = v27;
    *((_QWORD *)v4 + 4) = v26;
    *((_QWORD *)v4 + 5) = v10;
    v11 = v4 + 40;
    v12 = v28;
    *((_QWORD *)v4 + 6) = v28;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v10 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11;
    }
    *(_OWORD *)(v4 + 56) = v29;
    v29 = 0uLL;
    v4[72] = 1;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v24);
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v19);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      return (_BYTE *)MEMORY[0x18D7898AC](&v30);
    }
  }
  return result;
}

void sub_18CC6A68C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC6A698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

void AMSCore::getValueByKey<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>(uint64_t a1, uint64_t *a2)
{
  std::runtime_error_vtbl *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::runtime_error v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  std::runtime_error v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  uint64_t v36[2];
  std::runtime_error v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;

  v36[0] = (uint64_t)"sign-sap-setup-buffer";
  v36[1] = 21;
  AMSCore::getValueByKey((uint64_t)&v29, a2, "sign-sap-setup-buffer", 0x15uLL);
  if (!v35)
  {
    std::runtime_error::runtime_error(&v22, &v29);
    v23 = v30;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v24 = v31;
    v25 = v32;
    v26 = v33;
    if (v33)
    {
      *(_QWORD *)(v32 + 16) = &v25;
      v31 = &v32;
      v32 = 0;
      v33 = 0;
    }
    else
    {
      v24 = &v25;
    }
    v27 = v34;
    v34 = 0uLL;
    v28 = 1;
    std::runtime_error::runtime_error(&v37, &v22);
    v38 = v23;
    v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v39 = v24;
    v40 = v25;
    v41 = v26;
    if (v26)
    {
      *(_QWORD *)(v25 + 16) = &v40;
      v24 = &v25;
      v25 = 0;
      v26 = 0;
    }
    else
    {
      v39 = &v40;
    }
    v42 = v27;
    v27 = 0uLL;
    std::runtime_error::runtime_error(&v16, &v37);
    v17 = v38;
    v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v9 = (unsigned int *)v40;
    v18 = v39;
    v19 = v40;
    v20 = v41;
    if (v41)
    {
      *(_QWORD *)(v40 + 16) = &v19;
      v9 = 0;
      v39 = &v40;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v18 = &v19;
    }
    v21 = v42;
    v42 = 0uLL;
    v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v9);
    MEMORY[0x18D7898AC](&v37);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
    *(_OWORD *)(a1 + 16) = v17;
    *(_QWORD *)a1 = off_1E2521330;
    v10 = v19;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = v10;
    v11 = a1 + 40;
    v12 = v20;
    *(_QWORD *)(a1 + 48) = v20;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v10 = 0;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v11;
    }
    *(_OWORD *)(a1 + 56) = v21;
    v21 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v16);
    if (!v28)
      goto LABEL_33;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v6 = v25;
LABEL_32:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v6);
    MEMORY[0x18D7898AC](&v22);
    goto LABEL_33;
  }
  v3 = v29.__vftable;
  v4 = (int)v29.__vftable[1].~runtime_error;
  if (v4 == -1)
    v5 = 0;
  else
    v5 = (int)v29.__vftable[1].~runtime_error;
  if ((v5 - 5) > 1)
  {
    LOBYTE(v37.__vftable) = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v22, 0xCu, "unable to find value with key \"", v36, &v37);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v22);
    *(_OWORD *)(a1 + 16) = v23;
    *(_QWORD *)a1 = off_1E2521330;
    v6 = v25;
    *(_QWORD *)(a1 + 32) = v24;
    *(_QWORD *)(a1 + 40) = v6;
    v7 = a1 + 40;
    v8 = v26;
    *(_QWORD *)(a1 + 48) = v26;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      v24 = &v25;
      v25 = 0;
      v26 = 0;
      v6 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v27;
    v27 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    goto LABEL_32;
  }
  if (v4 != v5)
    v3 = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 72) = 1;
LABEL_33:
  if (!v35)
    ((void (*)(std::runtime_error *))v29.~runtime_error)(&v29);
}

void sub_18CC6AA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void (**a29)(_QWORD),uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (!a38)
    (*a29)(&a29);
  _Unwind_Resume(exception_object);
}

_BYTE *AMSCore::nestedError<std::expected<std::reference_wrapper<AMSCore::DataBuffer>,AMSCore::Error> &>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22[2];
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::runtime_error v30;
  __int128 v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  __int128 v35;
  char v36;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v30, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v31 = *(_OWORD *)(a2 + 16);
    v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v32 = *(unsigned int ***)(a2 + 32);
    v33 = (unsigned int *)v9;
    v34 = *(unsigned int **)(a2 + 48);
    if (v34)
    {
      *(_QWORD *)(v9 + 16) = &v33;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v32 = &v33;
    }
    v35 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v36 = 1;
    std::runtime_error::runtime_error(&v19, &v30);
    v20 = v31;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v21 = v32;
    v22[0] = v33;
    v22[1] = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = v22;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v21 = v22;
    }
    v23 = v35;
    v35 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v24, (uint64_t)&v19, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v24);
    *((_OWORD *)v4 + 1) = v25;
    *(_QWORD *)v4 = off_1E2521330;
    v10 = v27;
    *((_QWORD *)v4 + 4) = v26;
    *((_QWORD *)v4 + 5) = v10;
    v11 = v4 + 40;
    v12 = v28;
    *((_QWORD *)v4 + 6) = v28;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v10 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11;
    }
    *(_OWORD *)(v4 + 56) = v29;
    v29 = 0uLL;
    v4[72] = 1;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v24);
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v19);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      return (_BYTE *)MEMORY[0x18D7898AC](&v30);
    }
  }
  return result;
}

void sub_18CC6ACB0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC6ACBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

__n128 AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::ValuePromise::return_value<AMSCore::DataBuffer>(char *a1, __n128 *a2)
{
  char *v4;
  __n128 result;

  v4 = a1 + 8;
  if (a1[88])
  {
    if (a1[80])
    {
      if (a1[31] < 0)
        operator delete(*(void **)v4);
    }
    else
    {
      (**(void (***)(uint64_t))v4)((uint64_t)(a1 + 8));
    }
    a1[88] = 0;
  }
  result = *a2;
  *((_QWORD *)v4 + 2) = a2[1].n128_u64[0];
  *(__n128 *)v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[80] = 1;
  a1[88] = 1;
  return result;
}

_BYTE *AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  std::runtime_error v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v17;
  char v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v1 = result;
  v21 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v20 = v19;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v19);
      }
      else
      {
        v20 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v20 = 0;
    }
    if (v20)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v8 = *v6;
        *(_QWORD *)&v13 = *(_QWORD *)(v5 + 24);
        *(std::runtime_error *)__p = v8;
        v6->__vftable = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)__p, v6);
        v9 = (_QWORD *)(v5 + 48);
        v10 = *(_QWORD *)(v5 + 48);
        v13 = *(_OWORD *)(v5 + 24);
        __p[0] = off_1E2521330;
        v14 = *(uint64_t **)(v5 + 40);
        v15 = v10;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v10 + 16) = &v15;
          *(_QWORD *)(v5 + 40) = v9;
          *v9 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v14 = &v15;
        }
        v17 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v18 = v7;
      if (!v20)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, void **))(*(_QWORD *)v20 + 48))(v20, __p);
      if (v18)
      {
        if (SBYTE7(v13) < 0)
          operator delete(__p[0]);
      }
      else
      {
        (*(void (**)(void **))__p[0])(__p);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v20;
    if (v20 == v19)
    {
      v11 = 4;
      result = v19;
    }
    else
    {
      if (!v20)
        return result;
      v11 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
  }
  return result;
}

void sub_18CC6AF5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_10DataBufferENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_10DataBufferENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_10DataBufferENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_10DataBufferENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<AMSCore::BuiltInMescalProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::BuiltInMescalProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522B98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::BuiltInMescalProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(_QWORD *a1, char *a2)
{
  char v3;
  char *v4;
  uint64_t v5;
  const std::locale *v6;
  const std::locale::facet *v7;
  const std::locale::facet *v8;
  unint64_t v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char *v20;
  int8x8_t v21;
  uint64_t v22;
  const std::locale *v23;
  const std::locale::facet *v24;
  BOOL v25;
  char *v26;
  char *v27;
  const std::locale::facet *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;

  v3 = a2[23];
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *(char **)a2;
  if (v3 >= 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = std::locale::classic();
  v7 = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  if (v5)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      v9 ^= 2
          * ((int (*)(const std::locale::facet *, _QWORD))v8->__vftable[1].__on_zero_shared)(v8, *v4++);
      --v5;
    }
    while (v5);
    v10 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v10)
      return 0;
  }
  else
  {
    v9 = 0;
    v10 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v10)
      return 0;
  }
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  v37 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    v12 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v12 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v12 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v13 = *(uint64_t ***)(*a1 + 8 * v12);
  if (!v13)
    return 0;
  v14 = *v13;
  if (*v13)
  {
    v36 = v12;
    v34 = *(_QWORD *)&v10 - 1;
    do
    {
      v15 = v14[1];
      if (v9 == v15)
      {
        v38 = (char *)v14[2];
        v17 = *((char *)v14 + 39);
        if (v17 >= 0)
          v18 = *((unsigned __int8 *)v14 + 39);
        else
          v18 = v14[3];
        v19 = a2[23];
        v20 = *(char **)a2;
        v21 = v10;
        if (v19 >= 0)
          v22 = a2[23];
        else
          v22 = *((_QWORD *)a2 + 1);
        v23 = std::locale::classic();
        v24 = std::locale::use_facet(v23, MEMORY[0x1E0DE4A90]);
        v25 = v18 == v22;
        v10 = v21;
        if (v25)
        {
          if (v19 >= 0)
            v26 = a2;
          else
            v26 = v20;
          if (v17 >= 0)
            v27 = (char *)(v14 + 2);
          else
            v27 = v38;
          v35 = v26;
          v39 = v27;
          if (v18)
          {
            v28 = v24;
            v29 = v18 - 1;
            while (1)
            {
              v30 = v29;
              v31 = *v26;
              v32 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v28->__vftable[1].__on_zero_shared)(v28, *v27);
              if (v32 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v28->__vftable[1].__on_zero_shared)(v28, v31))break;
              ++v27;
              ++v26;
              v29 = v30 - 1;
              if (!v30)
                goto LABEL_42;
            }
          }
          else
          {
LABEL_42:
            if (v27 == &v39[v18] && v26 == &v35[v18])
              return v14;
          }
        }
      }
      else
      {
        if (v37 <= 1)
        {
          v15 &= v34;
          v16 = v36;
        }
        else
        {
          v16 = v36;
          if (v15 >= *(_QWORD *)&v10)
            v15 %= *(_QWORD *)&v10;
        }
        if (v15 != v16)
          return 0;
      }
      v14 = (uint64_t *)*v14;
    }
    while (v14);
  }
  return v14;
}

{
  char v3;
  char *v4;
  uint64_t v5;
  const std::locale *v6;
  const std::locale::facet *v7;
  const std::locale::facet *v8;
  unint64_t v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char *v20;
  int8x8_t v21;
  uint64_t v22;
  const std::locale *v23;
  const std::locale::facet *v24;
  BOOL v25;
  char *v26;
  char *v27;
  const std::locale::facet *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;

  v3 = a2[23];
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *(char **)a2;
  if (v3 >= 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = std::locale::classic();
  v7 = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  if (v5)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      v9 ^= 2
          * ((int (*)(const std::locale::facet *, _QWORD))v8->__vftable[1].__on_zero_shared)(v8, *v4++);
      --v5;
    }
    while (v5);
    v10 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v10)
      return 0;
  }
  else
  {
    v9 = 0;
    v10 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v10)
      return 0;
  }
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  v37 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    v12 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v12 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v12 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v13 = *(uint64_t ***)(*a1 + 8 * v12);
  if (!v13)
    return 0;
  v14 = *v13;
  if (*v13)
  {
    v36 = v12;
    v34 = *(_QWORD *)&v10 - 1;
    do
    {
      v15 = v14[1];
      if (v15 == v9)
      {
        v38 = (char *)v14[2];
        v17 = *((char *)v14 + 39);
        if (v17 >= 0)
          v18 = *((unsigned __int8 *)v14 + 39);
        else
          v18 = v14[3];
        v19 = a2[23];
        v20 = *(char **)a2;
        v21 = v10;
        if (v19 >= 0)
          v22 = a2[23];
        else
          v22 = *((_QWORD *)a2 + 1);
        v23 = std::locale::classic();
        v24 = std::locale::use_facet(v23, MEMORY[0x1E0DE4A90]);
        v25 = v18 == v22;
        v10 = v21;
        if (v25)
        {
          if (v19 >= 0)
            v26 = a2;
          else
            v26 = v20;
          if (v17 >= 0)
            v27 = (char *)(v14 + 2);
          else
            v27 = v38;
          v35 = v26;
          v39 = v27;
          if (v18)
          {
            v28 = v24;
            v29 = v18 - 1;
            while (1)
            {
              v30 = v29;
              v31 = *v26;
              v32 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v28->__vftable[1].__on_zero_shared)(v28, *v27);
              if (v32 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v28->__vftable[1].__on_zero_shared)(v28, v31))break;
              ++v27;
              ++v26;
              v29 = v30 - 1;
              if (!v30)
                goto LABEL_42;
            }
          }
          else
          {
LABEL_42:
            if (v27 == &v39[v18] && v26 == &v35[v18])
              return v14;
          }
        }
      }
      else
      {
        if (v37 <= 1)
        {
          v15 &= v34;
          v16 = v36;
        }
        else
        {
          v16 = v36;
          if (v15 >= *(_QWORD *)&v10)
            v15 %= *(_QWORD *)&v10;
        }
        if (v15 != v16)
          return 0;
      }
      v14 = (uint64_t *)*v14;
    }
    while (v14);
  }
  return v14;
}

void AMSCore::BuiltInMescalProvider::~BuiltInMescalProvider(AMSCore::BuiltInMescalProvider *this)
{
  uint64_t v2;
  AMSCore::BuiltInMescalProvider *v3;
  uint64_t v4;
  uint64_t v5;
  AMSCore::BuiltInMescalProvider *v6;

  *(_QWORD *)this = &off_1E2520E60;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((_QWORD *)this + 12))
  {
    v4 = *((_QWORD *)this + 10);
    v3 = (AMSCore::BuiltInMescalProvider *)*((_QWORD *)this + 11);
    v5 = *(_QWORD *)v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *((_QWORD *)this + 12) = 0;
    if (v3 != (AMSCore::BuiltInMescalProvider *)((char *)this + 80))
    {
      do
      {
        v6 = (AMSCore::BuiltInMescalProvider *)*((_QWORD *)v3 + 1);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != (AMSCore::BuiltInMescalProvider *)((char *)this + 80));
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  uint64_t v2;
  AMSCore::BuiltInMescalProvider *v3;
  uint64_t v4;
  uint64_t v5;
  AMSCore::BuiltInMescalProvider *v6;

  *(_QWORD *)this = &off_1E2520E60;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((_QWORD *)this + 12))
  {
    v4 = *((_QWORD *)this + 10);
    v3 = (AMSCore::BuiltInMescalProvider *)*((_QWORD *)this + 11);
    v5 = *(_QWORD *)v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *((_QWORD *)this + 12) = 0;
    if (v3 != (AMSCore::BuiltInMescalProvider *)((char *)this + 80))
    {
      do
      {
        v6 = (AMSCore::BuiltInMescalProvider *)*((_QWORD *)v3 + 1);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != (AMSCore::BuiltInMescalProvider *)((char *)this + 80));
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::BuiltInMescalProvider::sign(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, std::runtime_error *a6@<X8>)
{
  __int128 v10;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char *v12;
  unint64_t v13;
  char *v14;
  std::runtime_error *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  void **v20;
  unsigned __int8 *v21;
  unsigned __int8 v22;
  uint64_t v23;
  std::runtime_error *v24;
  __int128 v25;
  __int128 v26;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 v38;
  _QWORD *v39;
  std::mutex *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int **v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  std::runtime_error v68;
  __int128 v69;
  unsigned int **v70;
  unsigned int *v71;
  uint64_t v72;
  __int128 v73;
  std::runtime_error v74;
  __int128 v75;
  unsigned int **v76;
  unsigned int *v77;
  uint64_t v78;
  __int128 v79;
  char v80;
  std::runtime_error v81;
  __int128 v82;
  unsigned int **v83;
  unsigned int *v84;
  uint64_t v85;
  __int128 v86;

  v10 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v65 = *a5;
  v66 = v10;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v12 = (char *)operator new(0x180uLL);
  v13 = (unint64_t)v12;
  *(_QWORD *)v12 = AMSCore::BuiltInMescalProvider::sign;
  *((_QWORD *)v12 + 1) = AMSCore::BuiltInMescalProvider::sign;
  v14 = v12 + 264;
  v15 = (std::runtime_error *)(v12 + 152);
  *((_QWORD *)v12 + 37) = a2;
  *((_QWORD *)v12 + 38) = a3;
  v16 = v12 + 248;
  v17 = (uint64_t *)(v12 + 280);
  v18 = (uint64_t)(v12 + 16);
  *((_QWORD *)v12 + 39) = a1;
  *((_QWORD *)v12 + 40) = rep;
  *(_OWORD *)(v12 + 328) = v66;
  *(_OWORD *)(v12 + 344) = v65;
  do
    v19 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v19 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v12[24] = 0;
  v20 = (void **)(v12 + 24);
  v12[104] = 0;
  *((_QWORD *)v12 + 14) = 0;
  *((_QWORD *)v12 + 18) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v74, v18);
  *a6 = v74;
  v21 = (unsigned __int8 *)(a1 + 72);
  do
    v22 = __ldaxr(v21);
  while (__stxr(1u, v21));
  if ((v22 & 1) != 0)
  {
    v14[112] = 0;
    std::mutex::lock((std::mutex *)(*(_QWORD *)(v13 + 312) + 8));
    v36 = *(_QWORD *)(v13 + 312);
    if (*(_QWORD *)(v36 + 96))
      goto LABEL_19;
    v37 = (unsigned __int8 *)(v36 + 72);
    do
      v38 = __ldxr(v37);
    while (__stlxr(1u, v37));
    if ((v38 & 1) != 0)
    {
LABEL_19:
      v39 = operator new(0x18uLL);
      v40 = (std::mutex *)(*(_QWORD *)(v13 + 312) + 8);
      v39[1] = v36 + 80;
      v39[2] = v13;
      v41 = *(_QWORD *)(v36 + 80);
      *v39 = v41;
      *(_QWORD *)(v41 + 8) = v39;
      *(_QWORD *)(v36 + 80) = v39;
      ++*(_QWORD *)(v36 + 96);
      std::mutex::unlock(v40);
      return;
    }
    std::mutex::unlock((std::mutex *)(*(_QWORD *)(v13 + 312) + 8));
  }
  v67 = v18;
  v23 = *(_QWORD *)(v13 + 312);
  v24 = *(std::runtime_error **)(v13 + 320);
  *(_QWORD *)(v13 + 232) = v23 + 8;
  *(_BYTE *)(v13 + 240) = 1;
  v25 = *((_OWORD *)v14 + 5);
  *(_OWORD *)v14 = *((_OWORD *)v14 + 4);
  *((_OWORD *)v14 + 1) = v25;
  AMSCore::BuiltInMescalProvider::ensureSessionIsValid(v16, v23, (uint64_t *)v14, v17, v24);
  v26 = *(_OWORD *)(v13 + 248);
  *((_OWORD *)v14 + 6) = v26;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  if (atomic_load((unint64_t *)(v26 + 96)))
    goto LABEL_10;
  v14[112] = 1;
  v28 = (unint64_t *)(*(_QWORD *)(v13 + 360) + 96);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v13, v28));
  if (v29)
  {
LABEL_10:
    v30 = *((_QWORD *)v14 + 12);
    if (!*(_BYTE *)(v30 + 88))
    {
      __break(1u);
      return;
    }
    v31 = *(_BYTE *)(v30 + 80);
    if (!v31)
    {
      std::runtime_error::runtime_error(v15, (const std::runtime_error *)(v30 + 8));
      *(_OWORD *)(v13 + 168) = *(_OWORD *)(v30 + 24);
      v32 = (_QWORD *)(v30 + 48);
      v33 = *(_QWORD *)(v30 + 48);
      *(_QWORD *)(v13 + 192) = v33;
      v34 = v13 + 192;
      *(_QWORD *)(v13 + 152) = off_1E2521330;
      *(_QWORD *)(v13 + 184) = *(_QWORD *)(v30 + 40);
      v35 = *(_QWORD *)(v30 + 56);
      *(_QWORD *)(v13 + 200) = v35;
      if (v35)
      {
        *(_QWORD *)(v33 + 16) = v34;
        *(_QWORD *)(v30 + 40) = v32;
        *v32 = 0;
        *(_QWORD *)(v30 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v13 + 184) = v34;
      }
      v42 = *(_QWORD *)(v13 + 360);
      *(_OWORD *)(v13 + 208) = *(_OWORD *)(v42 + 64);
      *(_QWORD *)(v42 + 64) = 0;
      *(_QWORD *)(v42 + 72) = 0;
    }
    *(_BYTE *)(v13 + 224) = v31;
    v43 = *(_QWORD *)(v13 + 368);
    v44 = v67;
    if (v43)
    {
      v45 = (unint64_t *)(v43 + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        v47 = *(std::__shared_weak_count **)(v13 + 368);
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v48 = *(std::__shared_weak_count **)(v13 + 256);
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(p_shared_owners);
      while (__stlxr(v50 - 1, p_shared_owners));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = *(std::__shared_weak_count **)(v13 + 288);
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = *(std::__shared_weak_count **)(v13 + 272);
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v74, (uint64_t)v15, 603, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v80)
    {
      std::runtime_error::runtime_error(&v81, &v74);
      v82 = v75;
      v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v83 = v76;
      v84 = v77;
      v85 = v78;
      if (v78)
      {
        *((_QWORD *)v77 + 2) = &v84;
        v76 = &v77;
        v77 = 0;
        v78 = 0;
      }
      else
      {
        v83 = &v84;
      }
      v86 = v79;
      v79 = 0uLL;
      std::runtime_error::runtime_error(&v68, &v81);
      v69 = v82;
      v68.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v57 = v84;
      v70 = v83;
      v71 = v84;
      v72 = v85;
      if (v85)
      {
        *((_QWORD *)v84 + 2) = &v71;
        v57 = 0;
        v83 = &v84;
        v84 = 0;
        v85 = 0;
      }
      else
      {
        v70 = &v71;
      }
      v73 = v86;
      v86 = 0uLL;
      v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v83, v57);
      MEMORY[0x18D7898AC](&v81);
      if (*(_BYTE *)(v13 + 104))
      {
        if (*(_BYTE *)(v13 + 96))
        {
          if (*(char *)(v13 + 47) < 0)
            operator delete(*v20);
        }
        else
        {
          (*(void (**)(unint64_t))*v20)(v13 + 24);
        }
        *(_BYTE *)(v13 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(v13 + 24), &v68);
      v59 = v70;
      v58 = v71;
      *(_QWORD *)(v13 + 64) = v71;
      v60 = v13 + 64;
      *(_OWORD *)(v13 + 40) = v69;
      *(_QWORD *)(v13 + 24) = off_1E2521330;
      *(_QWORD *)(v13 + 56) = v59;
      v61 = v72;
      *(_QWORD *)(v13 + 72) = v72;
      if (v61)
      {
        *((_QWORD *)v58 + 2) = v60;
        v58 = 0;
        v70 = &v71;
        v71 = 0;
        v72 = 0;
      }
      else
      {
        *(_QWORD *)(v13 + 56) = v60;
      }
      *(_OWORD *)(v13 + 80) = v73;
      v73 = 0uLL;
      *(_BYTE *)(v13 + 96) = 0;
      *(_BYTE *)(v13 + 104) = 1;
      v68.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v70, v58);
      MEMORY[0x18D7898AC](&v68);
      v44 = v67;
      if (v80)
      {
        v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v62 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (*((_QWORD *)&v79 + 1))
        {
          v63 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v77);
        MEMORY[0x18D7898AC](&v74);
      }
    }
    else
    {
      (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 312) + 104)
                                                                                       + 32))(&v74, *(_QWORD *)(*(_QWORD *)(v13 + 312) + 104), *(_QWORD *)(v13 + 296), *(_QWORD *)(v13 + 304));
      std::optional<std::expected<AMSCore::DataBuffer,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::DataBuffer,AMSCore::Error>,void>((std::runtime_error *)(v13 + 24), &v74);
      if (!v80)
      {
        ((void (*)(std::runtime_error *))v74.~runtime_error)(&v74);
        if (*(_BYTE *)(v13 + 224))
        {
LABEL_70:
          if (!*(_BYTE *)(v13 + 240))
            goto LABEL_75;
          goto LABEL_74;
        }
LABEL_73:
        ((void (*)(std::runtime_error *))v15->~runtime_error)(v15);
        if (!*(_BYTE *)(v13 + 240))
        {
LABEL_75:
          *(_QWORD *)(v13 + 152) = v44;
          *(_QWORD *)v13 = 0;
          AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::Awaiter::await_suspend(v15);
          return;
        }
LABEL_74:
        AMSCore::AwaitableMutex::unlock(*(std::mutex **)(v13 + 232));
        goto LABEL_75;
      }
      if (SBYTE7(v75) < 0)
      {
        operator delete(v74.__vftable);
        if (*(_BYTE *)(v13 + 224))
          goto LABEL_70;
        goto LABEL_73;
      }
    }
    if (*(_BYTE *)(v13 + 224))
      goto LABEL_70;
    goto LABEL_73;
  }
}

void sub_18CC6BA6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void (***v12)(_QWORD);

  if (!*(_BYTE *)(v11 + 224))
    (**v12)(v12);
  if (*(_BYTE *)(v11 + 240))
    AMSCore::AwaitableMutex::unlock(*(std::mutex **)(v11 + 232));
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC6BAAC()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC6BA30);
}

uint64_t AMSCore::BuiltInMescalProvider::getDeviceType(AMSCore::BuiltInMescalProvider *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13));
}

void AMSCore::BuiltInMescalProvider::sign(unint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  std::runtime_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::mutex **v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int **v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::runtime_error v42;
  __int128 v43;
  unsigned int **v44;
  unsigned int *v45;
  uint64_t v46;
  __int128 v47;
  std::runtime_error v48;
  __int128 v49;
  unsigned int **v50;
  unsigned int *v51;
  uint64_t v52;
  __int128 v53;
  std::runtime_error v54;
  __int128 v55;
  unsigned int **v56;
  unsigned int *v57;
  uint64_t v58;
  __int128 v59;
  char v60;

  if (*(_BYTE *)(a1 + 376))
    goto LABEL_6;
  v2 = (_OWORD *)(a1 + 360);
  v3 = *(_QWORD *)(a1 + 352);
  v4 = *(std::runtime_error **)(a1 + 320);
  v5 = *(_QWORD *)(a1 + 328);
  v6 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 232) = v6 + 8;
  *(_BYTE *)(a1 + 240) = 1;
  *(_QWORD *)(a1 + 264) = v5;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 288) = v3;
  AMSCore::BuiltInMescalProvider::ensureSessionIsValid((_OWORD *)(a1 + 248), v6, (uint64_t *)(a1 + 264), (uint64_t *)(a1 + 280), v4);
  v7 = *(_OWORD *)(a1 + 248);
  *v2 = v7;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  if (atomic_load((unint64_t *)(v7 + 96)))
    goto LABEL_6;
  *(_BYTE *)(a1 + 376) = 1;
  v9 = (unint64_t *)(*(_QWORD *)(a1 + 360) + 96);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(a1, v9));
  if (v10)
  {
LABEL_6:
    v11 = *(_QWORD *)(a1 + 360);
    if (!*(_BYTE *)(v11 + 88))
    {
      __break(1u);
      return;
    }
    v12 = (_BYTE *)(a1 + 152);
    v13 = *(_BYTE *)(v11 + 80);
    if (!v13)
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), (const std::runtime_error *)(v11 + 8));
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v11 + 24);
      v14 = (_QWORD *)(v11 + 48);
      v15 = *(_QWORD *)(v11 + 48);
      *(_QWORD *)(a1 + 192) = v15;
      v16 = a1 + 192;
      *(_QWORD *)(a1 + 152) = off_1E2521330;
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(v11 + 40);
      v17 = *(_QWORD *)(v11 + 56);
      *(_QWORD *)(a1 + 200) = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 16) = v16;
        *(_QWORD *)(v11 + 40) = v14;
        *v14 = 0;
        *(_QWORD *)(v11 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 184) = v16;
      }
      v18 = *(_QWORD *)(a1 + 360);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(v18 + 64);
      *(_QWORD *)(v18 + 64) = 0;
      *(_QWORD *)(v18 + 72) = 0;
    }
    *(_BYTE *)(a1 + 224) = v13;
    v19 = *(_QWORD *)(a1 + 368);
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        v22 = *(std::__shared_weak_count **)(a1 + 368);
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v23 = *(std::__shared_weak_count **)(a1 + 256);
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = *(std::__shared_weak_count **)(a1 + 288);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = a1 + 16;
    v30 = *(std::__shared_weak_count **)(a1 + 272);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::mutex **)(a1 + 232);
    AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v54, a1 + 152, 603, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v60)
    {
      std::runtime_error::runtime_error(&v42, &v54);
      v43 = v55;
      v42.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v44 = v56;
      v45 = v57;
      v46 = v58;
      if (v58)
      {
        *((_QWORD *)v57 + 2) = &v45;
        v56 = &v57;
        v57 = 0;
        v58 = 0;
      }
      else
      {
        v44 = &v45;
      }
      v47 = v59;
      v59 = 0uLL;
      std::runtime_error::runtime_error(&v48, &v42);
      v49 = v43;
      v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v34 = v45;
      v50 = v44;
      v51 = v45;
      v52 = v46;
      if (v46)
      {
        *((_QWORD *)v45 + 2) = &v51;
        v34 = 0;
        v44 = &v45;
        v45 = 0;
        v46 = 0;
      }
      else
      {
        v50 = &v51;
      }
      v53 = v47;
      v47 = 0uLL;
      v42.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v44, v34);
      MEMORY[0x18D7898AC](&v42);
      if (*(_BYTE *)(a1 + 104))
      {
        if (*(_BYTE *)(a1 + 96))
        {
          if (*(char *)(a1 + 47) < 0)
            operator delete(*(void **)(a1 + 24));
        }
        else
        {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        }
        *(_BYTE *)(a1 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v48);
      v36 = v50;
      v35 = v51;
      *(_QWORD *)(a1 + 64) = v51;
      v37 = a1 + 64;
      *(_OWORD *)(a1 + 40) = v49;
      *(_QWORD *)(a1 + 24) = off_1E2521330;
      *(_QWORD *)(a1 + 56) = v36;
      v38 = v52;
      *(_QWORD *)(a1 + 72) = v52;
      if (v38)
      {
        *((_QWORD *)v35 + 2) = v37;
        v35 = 0;
        v50 = &v51;
        v51 = 0;
        v52 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 56) = v37;
      }
      v29 = a1 + 16;
      v33 = (std::mutex **)(a1 + 232);
      v12 = (_BYTE *)(a1 + 152);
      *(_OWORD *)(a1 + 80) = v53;
      v53 = 0uLL;
      *(_BYTE *)(a1 + 96) = 0;
      *(_BYTE *)(a1 + 104) = 1;
      v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, v35);
      MEMORY[0x18D7898AC](&v48);
      if (v60)
      {
        v54.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
        if (*((_QWORD *)&v59 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v56, v57);
        MEMORY[0x18D7898AC](&v54);
      }
    }
    else
    {
      (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 312) + 104)
                                                                                       + 32))(&v54, *(_QWORD *)(*(_QWORD *)(a1 + 312) + 104), *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 304));
      std::optional<std::expected<AMSCore::DataBuffer,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::DataBuffer,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v54);
      if (!v60)
      {
        ((void (*)(std::runtime_error *))v54.~runtime_error)(&v54);
        if (*(_BYTE *)(a1 + 224))
        {
LABEL_60:
          if (!*(_BYTE *)(a1 + 240))
            goto LABEL_65;
          goto LABEL_64;
        }
LABEL_63:
        (**(void (***)(_BYTE *))v12)(v12);
        if (!*(_BYTE *)(a1 + 240))
        {
LABEL_65:
          *(_QWORD *)(a1 + 152) = v29;
          *(_QWORD *)a1 = 0;
          AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::Awaiter::await_suspend(v12);
          return;
        }
LABEL_64:
        AMSCore::AwaitableMutex::unlock(*v33);
        goto LABEL_65;
      }
      if (SBYTE7(v55) < 0)
      {
        operator delete(v54.__vftable);
        if (*(_BYTE *)(a1 + 224))
          goto LABEL_60;
        goto LABEL_63;
      }
    }
    if (*(_BYTE *)(a1 + 224))
      goto LABEL_60;
    goto LABEL_63;
  }
}

void sub_18CC6C000(void *a1)
{
  uint64_t v1;
  void (***v2)(_QWORD);
  uint64_t v3;

  if (!*(_BYTE *)(v1 + 224))
    (**v2)(v2);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v3);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC6C038()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC6BFC4);
}

void AMSCore::BuiltInMescalProvider::sign(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  if (!*(_QWORD *)__p)
    goto LABEL_24;
  if (__p[376])
  {
    v2 = *((_QWORD *)__p + 46);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 46);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 32);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 36);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 34);
    if (!v12)
      goto LABEL_22;
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!__p[240])
        goto LABEL_24;
    }
    else
    {
LABEL_22:
      if (!__p[240])
      {
LABEL_24:
        v15 = 0;
        v16 = 0;
        goto LABEL_26;
      }
    }
    AMSCore::AwaitableMutex::unlock(*((std::mutex **)__p + 29));
    goto LABEL_24;
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 44);
  v16 = (std::__shared_weak_count *)*((_QWORD *)__p + 42);
LABEL_26:
  v17 = (char *)*((_QWORD *)__p + 18);
  if (v17 == __p + 120)
  {
    v18 = 4;
    v17 = __p + 120;
  }
  else
  {
    if (!v17)
      goto LABEL_31;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_31:
  if (__p[104])
  {
    if (__p[96])
    {
      if (__p[47] < 0)
        operator delete(*((void **)__p + 3));
    }
    else
    {
      (**((void (***)(char *))__p + 3))(__p + 24);
    }
  }
  do
  {
    v19 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v20)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v23 = (unint64_t *)&v16->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(__p);
}

void AMSCore::BuiltInMescalProvider::ensureSessionIsValid(_OWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, std::runtime_error *a5)
{
  char *v9;
  unint64_t v10;
  std::runtime_error *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int **v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  std::runtime_error *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  std::runtime_error_vtbl *v48;
  int v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _BYTE *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unsigned int ***imp;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int ***v71;
  unsigned int v72;
  unsigned int ***v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  AMSCore::URL *v81;
  uint64_t v82;
  const std::runtime_error *v83;
  char v84;
  std::runtime_error_vtbl *v85;
  unsigned int *v86;
  char *v87;
  char v88;
  unsigned int *v89;
  unsigned int **v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 v97;
  unint64_t *v99;
  unint64_t v100;
  const std::runtime_error *v101;
  char v102;
  std::runtime_error v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  int v125;
  std::runtime_error *v126;
  size_t v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int **v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::runtime_error_vtbl *v136;
  __int128 v137;
  unint64_t *v139;
  unint64_t v140;
  const std::runtime_error *v141;
  char v142;
  std::runtime_error v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  unsigned int *v165;
  unsigned int **v166;
  unint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  __int128 v172;
  __int128 v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  const std::runtime_error *v177;
  char v178;
  std::runtime_error v179;
  unsigned int *v180;
  unsigned int *v181;
  unsigned int **v182;
  unint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count *v197;
  unint64_t *p_shared_owners;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  std::runtime_error_vtbl *v224;
  _QWORD *v225;
  std::runtime_error_vtbl *v226;
  unsigned int *v227;
  unsigned int *v228;
  unsigned int **v229;
  unint64_t v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  __int128 v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  __int128 v242;
  unint64_t *v244;
  unint64_t v245;
  const std::runtime_error *v246;
  char v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int *v281;
  unsigned int *v282;
  unsigned int **v283;
  unint64_t v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CacheControlTimePoint;
  std::runtime_error v312;
  __n128 v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  char *v319;
  AMSCore::ExecuteHTTPRequestTask::Options *v320;
  void **v321;
  std::runtime_error_vtbl **v322;
  __int128 *v323;
  __int128 *v324;
  char *v325;
  _BYTE *v326;
  void **v327;
  AMSCore::ExecuteHTTPRequestTask::Options *v328;
  __int128 *v329;
  __int128 *v330;
  uint64_t v331;
  uint64_t v332;
  std::runtime_error *v333;
  std::runtime_error *v334;
  uint64_t v335;
  _QWORD *v336;
  _OWORD *v337;
  std::runtime_error *v338;
  AMSCore::URL *v339;
  AMSCore::URL *v340;
  _QWORD *v341;
  _QWORD *v342;
  std::runtime_error *v343;
  char *v344;
  std::runtime_error *v345;
  char *v346;
  uint64_t *v347;
  uint64_t *v348;
  unsigned int ***v349;
  uint64_t *v350;
  uint64_t v351;
  _QWORD *v352;
  _QWORD *v353;
  std::runtime_error *v354;
  std::runtime_error *v355;
  std::runtime_error *v356;
  uint64_t *v358;
  std::runtime_error *v359;
  uint64_t v360;
  uint64_t v361;
  std::runtime_error v362;
  __int128 v363;
  unsigned int **v364;
  unsigned int *v365;
  uint64_t v366;
  __int128 v367;
  std::runtime_error v368;
  __int128 v369;
  unsigned int **v370;
  unsigned int *v371;
  uint64_t v372;
  __int128 v373;
  unsigned __int8 v374;
  _BYTE v375[32];
  unsigned int **v376;
  unsigned int *v377;
  uint64_t v378;
  __int128 v379;
  unsigned __int8 v380;
  std::runtime_error v381;
  __int128 v382;
  unsigned int **v383;
  unsigned int *v384;
  uint64_t v385;
  __int128 v386;
  uint64_t v387;

  v387 = *MEMORY[0x1E0C80C00];
  v9 = (char *)operator new(0x258uLL);
  v10 = (unint64_t)v9;
  *(_QWORD *)v9 = AMSCore::BuiltInMescalProvider::ensureSessionIsValid;
  *((_QWORD *)v9 + 1) = AMSCore::BuiltInMescalProvider::ensureSessionIsValid;
  v11 = (std::runtime_error *)(v9 + 152);
  v350 = (uint64_t *)(v9 + 392);
  v351 = (uint64_t)(v9 + 312);
  v353 = v9 + 416;
  v354 = (std::runtime_error *)(v9 + 232);
  v348 = (uint64_t *)(v9 + 432);
  v349 = (unsigned int ***)(v9 + 448);
  v352 = v9 + 464;
  v347 = (uint64_t *)(v9 + 480);
  v358 = (uint64_t *)(v9 + 496);
  v13 = *a3;
  v12 = a3[1];
  *((_QWORD *)v9 + 63) = a2;
  *((_QWORD *)v9 + 64) = v13;
  v360 = v12;
  *((_QWORD *)v9 + 65) = v12;
  *a3 = 0;
  a3[1] = 0;
  v15 = *a4;
  v14 = a4[1];
  *((_QWORD *)v9 + 66) = *a4;
  *a4 = 0;
  a4[1] = 0;
  v361 = v14;
  *((_QWORD *)v9 + 67) = v14;
  do
    v16 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v16 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v9[24] = 0;
  v9[104] = 0;
  *((_QWORD *)v9 + 14) = 0;
  v356 = (std::runtime_error *)(v9 + 24);
  *((_QWORD *)v9 + 18) = 0;
  v359 = (std::runtime_error *)(v9 + 16);
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v375, (uint64_t)(v9 + 16));
  *a1 = *(_OWORD *)v375;
  v17 = *(unsigned __int8 *)(a2 + 120);
  if (*(_BYTE *)(a2 + 120) && *(_QWORD *)(a2 + 112) > (uint64_t)a5)
  {
    if (*(_BYTE *)(v10 + 104))
    {
      if (!*(_BYTE *)(v10 + 96))
        ((void (*)(std::runtime_error *))v356->~runtime_error)(v356);
    }
    *(_BYTE *)(v10 + 96) = 1;
    *(_BYTE *)(v10 + 104) = 1;
    goto LABEL_44;
  }
  *v358 = a2;
  v355 = v11;
  if (v17)
  {
    *(_BYTE *)(a2 + 120) = 0;
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v375);
    AMSCore::Logger::log<char [27]>(*(uint64_t *)v375, (uint64_t)"fairplay", 8, "Refreshing Mescal session.");
    v18 = *(std::__shared_weak_count **)&v375[8];
    if (*(_QWORD *)&v375[8])
    {
      v19 = (unint64_t *)(*(_QWORD *)&v375[8] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a2 + 104) + 40))(v375);
    AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v368, (uint64_t)v375, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    v21 = v374;
    if (v374)
    {
      std::runtime_error::runtime_error(&v381, &v368);
      v382 = v369;
      v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v383 = v370;
      v384 = v371;
      v385 = v372;
      if (v372)
      {
        *((_QWORD *)v371 + 2) = &v384;
        v370 = &v371;
        v371 = 0;
        v372 = 0;
      }
      else
      {
        v383 = &v384;
      }
      v386 = v373;
      v373 = 0uLL;
      std::runtime_error::runtime_error(&v362, &v381);
      v363 = v382;
      v362.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v25 = v384;
      v364 = v383;
      v365 = v384;
      v366 = v385;
      if (v385)
      {
        *((_QWORD *)v384 + 2) = &v365;
        v25 = 0;
        v383 = &v384;
        v384 = 0;
        v385 = 0;
      }
      else
      {
        v364 = &v365;
      }
      v367 = v386;
      v386 = 0uLL;
      v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v383, v25);
      MEMORY[0x18D7898AC](&v381);
      if (*(_BYTE *)(v10 + 104))
      {
        if (!*(_BYTE *)(v10 + 96))
          ((void (*)(std::runtime_error *))v356->~runtime_error)(v356);
        *(_BYTE *)(v10 + 104) = 0;
      }
      std::runtime_error::runtime_error(v356, &v362);
      v27 = v364;
      v26 = v365;
      *(_QWORD *)(v10 + 64) = v365;
      v28 = v10 + 64;
      *(_OWORD *)(v10 + 40) = v363;
      *(_QWORD *)(v10 + 24) = off_1E2521330;
      *(_QWORD *)(v10 + 56) = v27;
      v29 = v366;
      *(_QWORD *)(v10 + 72) = v366;
      if (v29)
      {
        *((_QWORD *)v26 + 2) = v28;
        v26 = 0;
        v364 = &v365;
        v365 = 0;
        v366 = 0;
      }
      else
      {
        *(_QWORD *)(v10 + 56) = v28;
      }
      *(_OWORD *)(v10 + 80) = v367;
      v367 = 0uLL;
      *(_BYTE *)(v10 + 96) = 0;
      *(_BYTE *)(v10 + 104) = 1;
      v362.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v364, v26);
      MEMORY[0x18D7898AC](&v362);
      if (v374)
      {
        v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
        if (*((_QWORD *)&v373 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v370, v371);
        MEMORY[0x18D7898AC](&v368);
      }
    }
    if (v380)
    {
      if (v21)
      {
LABEL_43:
        _ZZN7AMSCore7finallyIZNS_21BuiltInMescalProvider20ensureSessionIsValidENSt3__110shared_ptrINS_4IBagEEENS3_IKNS_11IBundleInfoEEENS2_6chrono10time_pointINS9_12system_clockENS9_8durationIxNS2_5ratioILl1ELl1000000EEEEEEEE3__0EEDaOT_EN7FinallyD1Ev(v358);
LABEL_44:
        v33 = v359;
        v34 = v360;
        v35 = v361;
        goto LABEL_287;
      }
    }
    else
    {
      (**(void (***)(_BYTE *))v375)(v375);
      if (v21)
        goto LABEL_43;
    }
  }
  else
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v375);
    AMSCore::Logger::log<char [25]>(*(uint64_t *)v375, 2, (uint64_t)"fairplay", 8, "Creating Mescal session.");
    v22 = *(std::__shared_weak_count **)&v375[8];
    if (*(_QWORD *)&v375[8])
    {
      v23 = (unint64_t *)(*(_QWORD *)&v375[8] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  *(_QWORD *)(v10 + 464) = v13;
  *(_QWORD *)(v10 + 472) = v360;
  if (v360)
  {
    v36 = (unint64_t *)(v360 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  *(_QWORD *)(v10 + 416) = v15;
  *(_QWORD *)(v10 + 424) = v361;
  if (v361)
  {
    v38 = (unint64_t *)(v361 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = (char *)operator new(0x150uLL);
  v41 = (unint64_t)v40;
  v345 = (std::runtime_error *)(v40 + 152);
  v346 = v40 + 264;
  v42 = *(_QWORD *)(v10 + 416);
  v43 = *(std::runtime_error **)(v10 + 424);
  *((_QWORD *)v40 + 29) = v42;
  v342 = v40 + 232;
  v45 = *(_QWORD *)(v10 + 464);
  v44 = *(_QWORD *)(v10 + 472);
  *((_QWORD *)v40 + 31) = v45;
  v341 = v40 + 248;
  v46 = v40 + 280;
  v339 = (AMSCore::URL *)(v40 + 296);
  *((_QWORD *)v40 + 32) = v44;
  *v352 = 0;
  v352[1] = 0;
  *((_QWORD *)v40 + 30) = v43;
  *v353 = 0;
  v353[1] = 0;
  do
    v47 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v47 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v40[24] = 0;
  v40[104] = 0;
  *((_QWORD *)v40 + 14) = 0;
  v343 = (std::runtime_error *)(v40 + 24);
  v344 = v40 + 16;
  *((_QWORD *)v40 + 18) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v375, (uint64_t)(v40 + 16));
  *v11 = *(std::runtime_error *)v375;
  if (v17)
    goto LABEL_93;
  v336 = v46;
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v368);
  v48 = v368.__vftable;
  (*((void (**)(_BYTE *__return_ptr, std::runtime_error_vtbl *, const char *, uint64_t))v368.~runtime_error + 4))(v375, v368.__vftable, "mescal-certificate-expiration", 29);
  v338 = v43;
  if (*(_DWORD *)&v375[24] == -1)
    v49 = 0;
  else
    v49 = *(_DWORD *)&v375[24];
  v50 = v42;
  if (v49 == 7)
  {
    v51 = 0;
    v52 = *(_QWORD *)v375;
  }
  else
  {
    if (v49 != 3)
    {
      LOBYTE(v52) = 0;
      v53 = 0;
      v51 = 1;
      if (*(_DWORD *)&v375[24] == -1)
        goto LABEL_66;
      goto LABEL_65;
    }
    v51 = 0;
    v52 = 1000 * *(_QWORD *)v375;
  }
  v53 = v52 & 0xFFFFFFFFFFFFFF00;
  if (*(_DWORD *)&v375[24] != -1)
LABEL_65:
    ((void (*)(std::runtime_error *, _BYTE *))off_1E253D240[*(unsigned int *)&v375[24]])(&v362, v375);
LABEL_66:
  v54 = v53 | v52;
  v335 = v54;
  if ((v51 & 1) != 0)
  {
    v55 = 0;
    v56 = 1;
    v42 = v50;
    v43 = v338;
    goto LABEL_86;
  }
  v42 = v50;
  if (v54 <= (uint64_t)a5)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v375);
    AMSCore::Logger::log<char [27]>(*(uint64_t *)v375, (uint64_t)"fairplay", 8, "Cached session is expired.");
    v43 = v338;
    v59 = *(std::__shared_weak_count **)&v375[8];
    if (*(_QWORD *)&v375[8])
    {
      v60 = (unint64_t *)(*(_QWORD *)&v375[8] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    goto LABEL_85;
  }
  (*((void (**)(_BYTE *__return_ptr, std::runtime_error_vtbl *, const char *, uint64_t))v48->~runtime_error + 4))(v375, v48, "mescal-certificate", 18);
  v43 = v338;
  if (*(_DWORD *)&v375[24] == -1)
    v57 = 0;
  else
    v57 = *(_DWORD *)&v375[24];
  if ((v57 - 5) > 1)
  {
    if (*(_DWORD *)&v375[24] != -1)
      ((void (*)(std::runtime_error *, _BYTE *))off_1E253D240[*(unsigned int *)&v375[24]])(&v362, v375);
LABEL_85:
    v55 = 0;
    v56 = 1;
    goto LABEL_86;
  }
  v58 = v375;
  if (*(_DWORD *)&v375[24] != v57)
    v58 = 0;
  v55 = *(_QWORD *)v58;
  v381.__vftable = (std::runtime_error_vtbl *)*((_QWORD *)v58 + 1);
  *(std::runtime_error_vtbl **)((char *)&v381.__vftable + 7) = *(std::runtime_error_vtbl **)(v58 + 15);
  LODWORD(a5) = v58[23];
  *((_QWORD *)v58 + 1) = 0;
  *((_QWORD *)v58 + 2) = 0;
  *(_QWORD *)v58 = 0;
  if (*(_DWORD *)&v375[24] != -1)
    ((void (*)(std::runtime_error *, _BYTE *))off_1E253D240[*(unsigned int *)&v375[24]])(&v362, v375);
  v56 = 0;
LABEL_86:
  imp = (unsigned int ***)v368.__imp_.__imp_;
  if (v368.__imp_.__imp_)
  {
    v63 = (unint64_t *)(v368.__imp_.__imp_ + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(unsigned int ***))(*imp)[2])(imp);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
    }
  }
  if ((v56 & 1) == 0)
  {
    v66 = (unint64_t)v345;
    v87 = v346;
    v88 = (char)a5;
    if (*(_BYTE *)(v41 + 104))
    {
      if (!*(_BYTE *)(v41 + 96))
      {
        ((void (*)(std::runtime_error *))v343->~runtime_error)(v343);
        goto LABEL_216;
      }
      if (*(char *)(v41 + 47) < 0)
      {
        operator delete(v343->__vftable);
LABEL_216:
        v88 = (char)a5;
      }
    }
    v136 = v381.__vftable;
    *(_QWORD *)(v41 + 24) = v55;
    *(_QWORD *)(v41 + 32) = v136;
    *(_QWORD *)(v41 + 39) = *(std::runtime_error_vtbl **)((char *)&v381.__vftable + 7);
    *(_BYTE *)(v41 + 47) = v88;
    *(_QWORD *)(v41 + 48) = v335;
    *(_BYTE *)(v41 + 96) = 1;
    *(_BYTE *)(v41 + 104) = 1;
    v11 = v355;
    goto LABEL_218;
  }
  v46 = v336;
LABEL_93:
  *(_QWORD *)(v41 + 280) = v45;
  *(_QWORD *)(v41 + 288) = v44;
  *v341 = 0;
  v341[1] = 0;
  *(_QWORD *)(v41 + 296) = v42;
  *(_QWORD *)(v41 + 304) = v43;
  *v342 = 0;
  v342[1] = 0;
  v65 = (char *)operator new(0xC00uLL);
  v66 = (unint64_t)v65;
  *(_QWORD *)v65 = AMSCore::fetchCertificate;
  *((_QWORD *)v65 + 1) = AMSCore::fetchCertificate;
  v337 = v65 + 1368;
  v67 = *(_QWORD *)(v41 + 280);
  a5 = (std::runtime_error *)(v65 + 152);
  v332 = *(_QWORD *)(v41 + 288);
  v333 = (std::runtime_error *)(v65 + 576);
  v321 = (void **)(v65 + 976);
  v326 = v65 + 3064;
  v327 = (void **)(v65 + 1744);
  v328 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v65 + 2120);
  v319 = v65 + 952;
  v320 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v65 + 2288);
  v68 = (uint64_t)(v65 + 2456);
  v338 = (std::runtime_error *)(v65 + 2768);
  v56 = (uint64_t)(v65 + 2848);
  v324 = (__int128 *)(v65 + 2872);
  v325 = v65 + 2616;
  *((_QWORD *)v65 + 373) = v67;
  *((_QWORD *)v65 + 374) = v332;
  *v46 = 0;
  v46[1] = 0;
  v70 = *(_QWORD *)(v41 + 296);
  v69 = *(_QWORD *)(v41 + 304);
  v322 = (std::runtime_error_vtbl **)(v65 + 2888);
  v323 = (__int128 *)(v65 + 2904);
  *((_QWORD *)v65 + 375) = v70;
  v329 = (__int128 *)(v65 + 2920);
  v330 = (__int128 *)(v65 + 2936);
  v71 = (unsigned int ***)(v65 + 2968);
  v331 = v69;
  *((_QWORD *)v65 + 376) = v69;
  *(_QWORD *)v339 = 0;
  *((_QWORD *)v339 + 1) = 0;
  do
    v72 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v72 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v65[24] = 0;
  v65[104] = 0;
  *((_QWORD *)v65 + 14) = 0;
  v334 = (std::runtime_error *)(v65 + 24);
  v335 = (uint64_t)(v65 + 16);
  *((_QWORD *)v65 + 18) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v375, (uint64_t)(v65 + 16));
  v73 = v71;
  *(_OWORD *)v346 = *(_OWORD *)v375;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v375);
  AMSCore::Logger::log<char [29]>(*(uint64_t *)v375, 2, (uint64_t)"fairplay", 8, "Fetching Mescal certificate.");
  v74 = *(std::__shared_weak_count **)&v375[8];
  if (*(_QWORD *)&v375[8])
  {
    v75 = (unint64_t *)(*(_QWORD *)&v375[8] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v375[23] = 19;
  strcpy(v375, "sign-sap-setup-cert");
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v67 + 80))(v67, v375);
  if ((v375[23] & 0x80000000) != 0)
    operator delete(*(void **)v375);
  v340 = (AMSCore::URL *)v68;
  AMSCore::nestedError<std::expected<AMSCore::URL,AMSCore::Error> &>(v375, v68, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (!v380)
  {
    AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(a5);
    imp = *(unsigned int ****)(v66 + 152);
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
    ((void (*)(unsigned int ***, uint64_t))(*imp)[6])(imp, v56);
    v77 = *(_OWORD *)(v66 + 576);
    v337[103] = v77;
    v333->__vftable = 0;
    v333->__imp_.__imp_ = 0;
    v78 = atomic_load((unint64_t *)(v77 + 96));
    v11 = v355;
    if (v78)
      goto LABEL_109;
    *v326 = 0;
    v79 = (unint64_t *)(*(_QWORD *)(v66 + 3016) + 96);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v66, v79));
    if (v80)
    {
LABEL_109:
      v81 = (AMSCore::URL *)*((_QWORD *)v337 + 206);
      v82 = *((unsigned __int8 *)v81 + 88);
      if (!*((_BYTE *)v81 + 88))
        goto LABEL_555;
      v83 = (const std::runtime_error *)((char *)v81 + 8);
      v84 = *((_BYTE *)v81 + 80);
      if (v84)
      {
        v85 = v83->__vftable;
        v83->__vftable = 0;
        v338->__vftable = v85;
      }
      else
      {
        std::runtime_error::runtime_error(v338, v83);
        *(_OWORD *)(v66 + 2784) = *(_OWORD *)((char *)v81 + 24);
        *(_QWORD *)(v66 + 2768) = off_1E2521330;
        v108 = (_QWORD *)((char *)v81 + 48);
        v109 = *((_QWORD *)v81 + 6);
        *(_QWORD *)(v66 + 2800) = *((_QWORD *)v81 + 5);
        v110 = v66 + 2808;
        *(_QWORD *)(v66 + 2808) = v109;
        v111 = *((_QWORD *)v81 + 7);
        *(_QWORD *)(v66 + 2816) = v111;
        if (v111)
        {
          *(_QWORD *)(v109 + 16) = v110;
          *((_QWORD *)v81 + 5) = v108;
          *v108 = 0;
          *((_QWORD *)v81 + 7) = 0;
        }
        else
        {
          *(_QWORD *)(v66 + 2800) = v110;
        }
        v192 = *(_QWORD *)(v66 + 3016);
        v337[91] = *(_OWORD *)(v192 + 64);
        *(_QWORD *)(v192 + 64) = 0;
        *(_QWORD *)(v192 + 72) = 0;
      }
      *(_BYTE *)(v66 + 2840) = v84;
      v193 = *(_QWORD *)(v66 + 3024);
      if (v193)
      {
        v194 = (unint64_t *)(v193 + 8);
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          v196 = *(std::__shared_weak_count **)(v66 + 3024);
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
      v197 = *(std::__shared_weak_count **)(v66 + 584);
      if (v197)
      {
        p_shared_owners = (unint64_t *)&v197->__shared_owners_;
        do
          v199 = __ldaxr(p_shared_owners);
        while (__stlxr(v199 - 1, p_shared_owners));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
          std::__shared_weak_count::__release_weak(v197);
        }
      }
      if (*(char *)(v66 + 2871) < 0)
        operator delete(*(void **)v56);
      v200 = *(std::__shared_weak_count **)(v66 + 160);
      if (v200)
      {
        v201 = (unint64_t *)&v200->__shared_owners_;
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
        }
      }
      AMSCore::nestedError<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error> &>(v375, (uint64_t)v338, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
      if (v380)
      {
        std::runtime_error::runtime_error(&v368, (const std::runtime_error *)v375);
        v369 = *(_OWORD *)&v375[16];
        v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v370 = v376;
        v371 = v377;
        v372 = v378;
        if (v378)
        {
          *((_QWORD *)v377 + 2) = &v371;
          v376 = &v377;
          v377 = 0;
          v378 = 0;
        }
        else
        {
          v370 = &v371;
        }
        v373 = v379;
        v379 = 0uLL;
        std::runtime_error::runtime_error(&v381, &v368);
        v382 = v369;
        v227 = v371;
        v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v383 = v370;
        v384 = v371;
        v385 = v372;
        if (v372)
        {
          *((_QWORD *)v371 + 2) = &v384;
          v227 = 0;
          v370 = &v371;
          v371 = 0;
          v372 = 0;
        }
        else
        {
          v383 = &v384;
        }
        imp = &v383;
        v386 = v373;
        v373 = 0uLL;
        v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v370, v227);
        MEMORY[0x18D7898AC](&v368);
        if (*(_BYTE *)(v66 + 104))
        {
          if (*(_BYTE *)(v66 + 96))
          {
            if (*(char *)(v66 + 47) < 0)
              operator delete(v334->__vftable);
          }
          else
          {
            ((void (*)(std::runtime_error *))v334->~runtime_error)(v334);
          }
          *(_BYTE *)(v66 + 104) = 0;
        }
        std::runtime_error::runtime_error(v334, &v381);
        v229 = v383;
        v228 = v384;
        *(_QWORD *)(v66 + 64) = v384;
        v230 = v66 + 64;
        *(_OWORD *)(v66 + 40) = v382;
        *(_QWORD *)(v66 + 24) = off_1E2521330;
        *(_QWORD *)(v66 + 56) = v229;
        v231 = v385;
        *(_QWORD *)(v66 + 72) = v385;
        if (v231)
        {
          *((_QWORD *)v228 + 2) = v230;
          v228 = 0;
          v383 = &v384;
          v384 = 0;
          v385 = 0;
        }
        else
        {
          *(_QWORD *)(v66 + 56) = v230;
        }
        *(_OWORD *)(v66 + 80) = v386;
        v386 = 0uLL;
        *(_BYTE *)(v66 + 96) = 0;
        *(_BYTE *)(v66 + 104) = 1;
        v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v383, v228);
        MEMORY[0x18D7898AC](&v381);
        if (v380)
        {
          imp = &v376;
          *(_QWORD *)v375 = off_1E2521330;
          v232 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
          if (*((_QWORD *)&v379 + 1))
          {
            v233 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
            do
              v234 = __ldaxr(v233);
            while (__stlxr(v234 - 1, v233));
            if (!v234)
            {
              ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
              std::__shared_weak_count::__release_weak(v232);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v376, v377);
          MEMORY[0x18D7898AC](v375);
        }
        v93 = *(_QWORD *)(v66 + 3008);
        v56 = *(_QWORD *)(v66 + 2992);
        v11 = v355;
        v81 = v340;
        goto LABEL_506;
      }
      v203 = *(_QWORD *)(v66 + 2992);
      *(_QWORD *)(v66 + 2936) = *(_QWORD *)(v66 + 2984);
      *(_QWORD *)(v66 + 2944) = v203;
      if (v203)
      {
        v204 = (unint64_t *)(v203 + 8);
        do
          v205 = __ldxr(v204);
        while (__stxr(v205 + 1, v204));
      }
      v206 = *(_QWORD *)(v66 + 3008);
      *(_QWORD *)(v66 + 2920) = *(_QWORD *)(v66 + 3000);
      *(_QWORD *)(v66 + 2928) = v206;
      v81 = v340;
      if (v206)
      {
        v207 = (unint64_t *)(v206 + 8);
        do
          v208 = __ldxr(v207);
        while (__stxr(v208 + 1, v207));
      }
      AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v328, v330, v329);
      v209 = *(std::__shared_weak_count **)(v66 + 2928);
      if (v209)
      {
        v210 = (unint64_t *)&v209->__shared_owners_;
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
      imp = *(unsigned int ****)(v66 + 2944);
      if (imp)
      {
        v212 = (unint64_t *)(imp + 1);
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(unsigned int ***))(*imp)[2])(imp);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
        }
      }
      v82 = *(unsigned __int8 *)(v66 + 2608);
      if (!*(_BYTE *)(v66 + 2608))
        goto LABEL_555;
      *(_BYTE *)(v66 + 2616) = 0;
      *(_BYTE *)(v66 + 2640) = 0;
      if (*(_BYTE *)(v66 + 2480))
      {
        *(_OWORD *)v325 = *(_OWORD *)v340;
        *((_QWORD *)v325 + 2) = *((_QWORD *)v340 + 2);
        *((_QWORD *)v340 + 1) = 0;
        *((_QWORD *)v340 + 2) = 0;
        *(_QWORD *)v340 = 0;
        *(_BYTE *)(v66 + 2640) = 1;
      }
      *(_BYTE *)(v66 + 2648) = 0;
      *(_BYTE *)(v66 + 2672) = 0;
      if (*(_BYTE *)(v66 + 2512))
      {
        *(_QWORD *)(v66 + 2664) = *(_QWORD *)(v66 + 2504);
        *(_OWORD *)(v66 + 2648) = *(_OWORD *)(v66 + 2488);
        *(_QWORD *)(v66 + 2504) = 0;
        *(_QWORD *)(v66 + 2488) = 0;
        *(_QWORD *)(v66 + 2496) = 0;
        *(_BYTE *)(v66 + 2672) = 1;
      }
      *(_BYTE *)(v66 + 2680) = 0;
      *(_BYTE *)(v66 + 2704) = 0;
      v81 = (AMSCore::URL *)v325;
      if (*(_BYTE *)(v66 + 2544))
      {
        *(_QWORD *)(v66 + 2696) = *(_QWORD *)(v66 + 2536);
        *(_OWORD *)(v66 + 2680) = *(_OWORD *)(v66 + 2520);
        *(_QWORD *)(v66 + 2536) = 0;
        *(_QWORD *)(v66 + 2520) = 0;
        *(_QWORD *)(v66 + 2528) = 0;
        *(_BYTE *)(v66 + 2704) = 1;
      }
      *(_DWORD *)(v66 + 2712) = *(_DWORD *)(v66 + 2552);
      *(_QWORD *)(v66 + 2720) = v66 + 2720;
      *(_QWORD *)(v66 + 2728) = v66 + 2720;
      *(_QWORD *)(v66 + 2736) = 0;
      v214 = *(_QWORD *)(v66 + 2576);
      if (v214)
      {
        v215 = *(uint64_t **)(v66 + 2568);
        v216 = *(_QWORD *)(v66 + 2560);
        v217 = *v215;
        *(_QWORD *)(v217 + 8) = *(_QWORD *)(v216 + 8);
        **(_QWORD **)(v216 + 8) = v217;
        v218 = *(_QWORD *)(v66 + 2720);
        *(_QWORD *)(v218 + 8) = v215;
        *v215 = v218;
        *(_QWORD *)(v66 + 2720) = v216;
        *(_QWORD *)(v216 + 8) = v66 + 2720;
        *(_QWORD *)(v66 + 2736) = v214;
        *(_QWORD *)(v66 + 2576) = 0;
      }
      *(_QWORD *)(v66 + 2760) = *(_QWORD *)(v66 + 2600);
      *(_OWORD *)(v66 + 2744) = *(_OWORD *)(v66 + 2584);
      *(_QWORD *)(v66 + 2600) = 0;
      *(_QWORD *)(v66 + 2584) = 0;
      *(_QWORD *)(v66 + 2592) = 0;
      v337[96] = v337[101];
      v337[94] = v337[102];
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v337, (__int128 *)v325, v323, v324);
      v219 = *(std::__shared_weak_count **)(v66 + 2880);
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      imp = *(unsigned int ****)(v66 + 2912);
      if (imp)
      {
        v222 = (unint64_t *)(imp + 1);
        do
          v223 = __ldaxr(v222);
        while (__stlxr(v223 - 1, v222));
        if (!v223)
        {
          ((void (*)(unsigned int ***))(*imp)[2])(imp);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
        }
      }
      AMSCore::URL::~URL((AMSCore::URL *)v325);
      v82 = *(unsigned __int8 *)(v66 + 2840);
      if (!*(_BYTE *)(v66 + 2840))
        goto LABEL_555;
      v224 = v338->__vftable;
      *v322 = v338->__vftable;
      if (v224)
      {
        v225 = (_QWORD *)operator new();
        v226 = v338->__vftable;
        *v225 = &off_1E2523180;
        v225[1] = 0;
        v225[2] = 0;
        v225[3] = v226;
      }
      else
      {
        v225 = 0;
      }
      *(_QWORD *)(v66 + 2896) = v225;
      *(_QWORD *)(v66 + 2768) = 0;
      v235 = v337[95];
      *v322 = 0;
      v322[1] = 0;
      v236 = *(std::__shared_weak_count **)(v66 + 1376);
      *v337 = v235;
      if (v236)
      {
        v237 = (unint64_t *)&v236->__shared_owners_;
        do
          v238 = __ldaxr(v237);
        while (__stlxr(v238 - 1, v237));
        if (!v238)
        {
          ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
          std::__shared_weak_count::__release_weak(v236);
        }
      }
      v239 = *(std::__shared_weak_count **)(v66 + 2896);
      if (v239)
      {
        v240 = (unint64_t *)&v239->__shared_owners_;
        do
          v241 = __ldaxr(v240);
        while (__stlxr(v241 - 1, v240));
        if (!v241)
        {
          ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
          std::__shared_weak_count::__release_weak(v239);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v327, (uint64_t)v337);
      imp = (unsigned int ***)a5;
      AMSCore::EncodeHTTPRequestTask::perform(a5, (uint64_t)v327);
      v242 = *(_OWORD *)(v66 + 152);
      v337[104] = v242;
      a5->__vftable = 0;
      a5->__imp_.__imp_ = 0;
      if (atomic_load((unint64_t *)(v242 + 416)))
        goto LABEL_416;
      *v326 = 1;
      v244 = (unint64_t *)(*(_QWORD *)(v66 + 3032) + 416);
      do
        v245 = __ldaxr(v244);
      while (__stlxr(v66, v244));
      if (v245)
      {
LABEL_416:
        v81 = (AMSCore::URL *)*((_QWORD *)v337 + 208);
        v82 = *((unsigned __int8 *)v81 + 408);
        if (!*((_BYTE *)v81 + 408))
          goto LABEL_555;
        v246 = (const std::runtime_error *)((char *)v81 + 8);
        v247 = *((_BYTE *)v81 + 400);
        if (v247)
        {
          AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v333, (uint64_t)v246);
          v248 = (_QWORD *)((char *)v81 + 384);
          *(_QWORD *)(v66 + 952) = *((_QWORD *)v81 + 48);
          v249 = (_QWORD *)(v66 + 960);
          v250 = (_QWORD *)((char *)v81 + 392);
          v81 = v340;
        }
        else
        {
          std::runtime_error::runtime_error(v333, v246);
          *(_OWORD *)(v66 + 592) = *(_OWORD *)((char *)v81 + 24);
          *(_QWORD *)(v66 + 576) = off_1E2521330;
          v251 = (_QWORD *)((char *)v81 + 48);
          v252 = *((_QWORD *)v81 + 6);
          *(_QWORD *)(v66 + 608) = *((_QWORD *)v81 + 5);
          v253 = v66 + 616;
          *(_QWORD *)(v66 + 616) = v252;
          v254 = *((_QWORD *)v81 + 7);
          *(_QWORD *)(v66 + 624) = v254;
          if (v254)
          {
            *(_QWORD *)(v252 + 16) = v253;
            *((_QWORD *)v81 + 5) = v251;
            *v251 = 0;
            *((_QWORD *)v81 + 7) = 0;
          }
          else
          {
            *(_QWORD *)(v66 + 608) = v253;
          }
          v81 = v340;
          v270 = *(_QWORD *)(v66 + 3032);
          v271 = *(_QWORD *)(v270 + 64);
          v248 = (_QWORD *)(v270 + 64);
          *(_QWORD *)(v66 + 632) = v271;
          v249 = (_QWORD *)(v66 + 640);
          v250 = v248 + 1;
        }
        *v249 = *v250;
        *v248 = 0;
        v248[1] = 0;
        *(_BYTE *)(v66 + 968) = v247;
        v272 = *(_QWORD *)(v66 + 3040);
        if (v272)
        {
          v273 = (unint64_t *)(v272 + 8);
          do
            v274 = __ldaxr(v273);
          while (__stlxr(v274 - 1, v273));
          if (!v274)
          {
            v275 = *(std::__shared_weak_count **)(v66 + 3040);
            ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
            std::__shared_weak_count::__release_weak(v275);
          }
        }
        imp = *(unsigned int ****)(v66 + 160);
        if (imp)
        {
          v276 = (unint64_t *)(imp + 1);
          do
            v277 = __ldaxr(v276);
          while (__stlxr(v277 - 1, v276));
          if (!v277)
          {
            ((void (*)(unsigned int ***))(*imp)[2])(imp);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options(v327);
        AMSCore::nestedError<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error> &>(v375, (uint64_t)v333, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
        if (v380)
        {
          std::runtime_error::runtime_error(&v368, (const std::runtime_error *)v375);
          v369 = *(_OWORD *)&v375[16];
          v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v370 = v376;
          v371 = v377;
          v372 = v378;
          if (v378)
          {
            *((_QWORD *)v377 + 2) = &v371;
            v376 = &v377;
            v377 = 0;
            v378 = 0;
          }
          else
          {
            v370 = &v371;
          }
          v373 = v379;
          v379 = 0uLL;
          std::runtime_error::runtime_error(&v381, &v368);
          v382 = v369;
          v281 = v371;
          v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v383 = v370;
          v384 = v371;
          v385 = v372;
          if (v372)
          {
            *((_QWORD *)v371 + 2) = &v384;
            v281 = 0;
            v370 = &v371;
            v371 = 0;
            v372 = 0;
          }
          else
          {
            v383 = &v384;
          }
          imp = &v383;
          v386 = v373;
          v373 = 0uLL;
          v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v370, v281);
          MEMORY[0x18D7898AC](&v368);
          if (*(_BYTE *)(v66 + 104))
          {
            if (*(_BYTE *)(v66 + 96))
            {
              if (*(char *)(v66 + 47) < 0)
                operator delete(v334->__vftable);
            }
            else
            {
              ((void (*)(std::runtime_error *))v334->~runtime_error)(v334);
            }
            *(_BYTE *)(v66 + 104) = 0;
          }
          std::runtime_error::runtime_error(v334, &v381);
          v283 = v383;
          v282 = v384;
          *(_QWORD *)(v66 + 64) = v384;
          v284 = v66 + 64;
          *(_OWORD *)(v66 + 40) = v382;
          *(_QWORD *)(v66 + 24) = off_1E2521330;
          *(_QWORD *)(v66 + 56) = v283;
          v285 = v385;
          *(_QWORD *)(v66 + 72) = v385;
          if (v285)
          {
            *((_QWORD *)v282 + 2) = v284;
            v282 = 0;
            v383 = &v384;
            v384 = 0;
            v385 = 0;
          }
          else
          {
            *(_QWORD *)(v66 + 56) = v284;
          }
          v56 = (uint64_t)v337;
          *(_OWORD *)(v66 + 80) = v386;
          v386 = 0uLL;
          *(_BYTE *)(v66 + 96) = 0;
          *(_BYTE *)(v66 + 104) = 1;
          v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v383, v282);
          MEMORY[0x18D7898AC](&v381);
          if (v380)
          {
            imp = &v376;
            *(_QWORD *)v375 = off_1E2521330;
            v286 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
            if (*((_QWORD *)&v379 + 1))
            {
              v287 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
              do
                v288 = __ldaxr(v287);
              while (__stlxr(v288 - 1, v287));
              if (!v288)
              {
                ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                std::__shared_weak_count::__release_weak(v286);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v376, v377);
            MEMORY[0x18D7898AC](v375);
          }
          v11 = v355;
          v81 = v340;
          goto LABEL_497;
        }
        v82 = *(unsigned __int8 *)(v66 + 968);
        if (!*(_BYTE *)(v66 + 968))
          goto LABEL_555;
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v321, (uint64_t)v333);
        *((_OWORD *)v319 + 25) = *(_OWORD *)v319;
        *(_QWORD *)v319 = 0;
        *((_QWORD *)v319 + 1) = 0;
        *(_QWORD *)(v66 + 2288) = *(_QWORD *)(v66 + 2120);
        v278 = v66 + 2296;
        v279 = *(_QWORD *)(v66 + 2128);
        *(_QWORD *)(v66 + 2296) = v279;
        v280 = *(_QWORD *)(v66 + 2136);
        *(_QWORD *)(v66 + 2304) = v280;
        v56 = (uint64_t)v337;
        if (v280)
        {
          *(_QWORD *)(v279 + 16) = v278;
          *(_QWORD *)v328 = v66 + 2128;
          *(_QWORD *)(v66 + 2128) = 0;
          *(_QWORD *)(v66 + 2136) = 0;
        }
        else
        {
          *(_QWORD *)v320 = v278;
        }
        v292 = *(_OWORD *)(v66 + 2144);
        *(_QWORD *)(v66 + 2152) = 0;
        *(_QWORD *)(v66 + 2144) = 0;
        v293 = *(_OWORD *)(v66 + 2160);
        v337[59] = v292;
        v337[60] = v293;
        *(_QWORD *)(v66 + 2160) = 0;
        *(_QWORD *)(v66 + 2168) = 0;
        *(_BYTE *)(v66 + 2344) = 0;
        *(_BYTE *)(v66 + 2368) = 0;
        if (*(_BYTE *)(v66 + 2200))
        {
          *(_OWORD *)(v66 + 2344) = *(_OWORD *)(v66 + 2176);
          *(_QWORD *)(v66 + 2360) = *(_QWORD *)(v66 + 2192);
          *(_QWORD *)(v66 + 2176) = 0;
          *(_QWORD *)(v66 + 2192) = 0;
          *(_QWORD *)(v66 + 2184) = 0;
          *(_BYTE *)(v66 + 2368) = 1;
        }
        *(_BYTE *)(v66 + 2376) = 0;
        *(_DWORD *)(v66 + 2392) = -1;
        v294 = *(unsigned int *)(v66 + 2224);
        if ((_DWORD)v294 != -1)
        {
          ((void (*)(_BYTE *, unint64_t, unint64_t))off_1E253CA98[v294])(v375, v66 + 2376, v66 + 2208);
          *(_DWORD *)(v66 + 2392) = v294;
        }
        *(_DWORD *)(v66 + 2416) = *(_DWORD *)(v66 + 2248);
        *(_OWORD *)(v66 + 2400) = *(_OWORD *)(v66 + 2232);
        v295 = *(_QWORD *)(v66 + 2280);
        if (v295)
        {
          imp = v73;
          if (v295 == v66 + 2256)
          {
            *(_QWORD *)(v66 + 2448) = v66 + 2424;
            (*(void (**)(uint64_t))(*(_QWORD *)v295 + 24))(v295);
          }
          else
          {
            *(_QWORD *)(v66 + 2448) = v295;
            *(_QWORD *)(v66 + 2280) = 0;
          }
        }
        else
        {
          imp = v73;
          *(_QWORD *)(v66 + 2448) = 0;
        }
        AMSCore::ExecuteHTTPRequestTask::perform((std::runtime_error *)imp, (uint64_t)v321, (uint64_t)v320);
        v296 = v337[100];
        *imp = 0;
        imp[1] = 0;
        v337[99] = v296;
        if (atomic_load((unint64_t *)(v296 + 440)))
          goto LABEL_524;
        *v326 = 2;
        v298 = (unint64_t *)(*(_QWORD *)(v66 + 2952) + 440);
        do
          v299 = __ldaxr(v298);
        while (__stlxr(v66, v298));
        if (v299)
        {
LABEL_524:
          AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::operator co_await(void) &&::CoAwaiter::await_resume(a5, *(_QWORD *)(v66 + 2952));
          v300 = *(std::__shared_weak_count **)(v66 + 2960);
          if (v300)
          {
            v301 = (unint64_t *)&v300->__shared_owners_;
            do
              v302 = __ldaxr(v301);
            while (__stlxr(v302 - 1, v301));
            if (!v302)
            {
              ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
              std::__shared_weak_count::__release_weak(v300);
            }
          }
          v303 = *(std::__shared_weak_count **)(v66 + 2976);
          if (v303)
          {
            v304 = (unint64_t *)&v303->__shared_owners_;
            do
              v305 = __ldaxr(v304);
            while (__stlxr(v305 - 1, v304));
            if (!v305)
            {
              ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
              std::__shared_weak_count::__release_weak(v303);
            }
          }
          AMSCore::ExecuteHTTPRequestTask::Options::~Options(v320);
          v306 = *(std::__shared_weak_count **)(v66 + 1360);
          if (v306)
          {
            v307 = (unint64_t *)&v306->__shared_owners_;
            do
              v308 = __ldaxr(v307);
            while (__stlxr(v308 - 1, v307));
            if (!v308)
            {
              ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
              std::__shared_weak_count::__release_weak(v306);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v321);
          if (!*(_BYTE *)(v66 + 568))
          {
            LODWORD(v368.__vftable) = 606;
            AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError,AMSCore::FairPlayErrorCode>((uint64_t)v375, (uint64_t)a5, (unsigned int *)&v368);
            AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>(v335, (std::runtime_error *)v375);
            std::unexpected<AMSCore::Error>::~unexpected((uint64_t)v375);
          }
          AMSCore::HTTPResponse::getDecodedObject(*(AMSCore::HTTPResponse **)(v66 + 336));
          imp = (unsigned int ***)v309;
          AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error> const&>(v375, v309, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
          if (v380)
          {
            AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v368, (uint64_t)v375);
            AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>(v335, &v368);
            std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v368);
          }
          v310 = std::optional<AMSCore::Error>::~optional((uint64_t)v375);
          v82 = *((unsigned __int8 *)imp + 72);
          if (*((_BYTE *)imp + 72))
          {
            AMSCore::getValueByKey<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any> const>(v310, (uint64_t *)imp);
            AMSCore::nestedError<std::expected<std::reference_wrapper<AMSCore::DataBuffer const>,AMSCore::Error> &>(&v368, (uint64_t)v375, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
            if (v374)
            {
              AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v381, (uint64_t)&v368);
              AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>(v335, &v381);
              std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v381);
            }
            std::optional<AMSCore::Error>::~optional((uint64_t)&v368);
            v82 = *(unsigned __int8 *)(v66 + 568);
            if (*(_BYTE *)(v66 + 568))
            {
              CacheControlTimePoint = AMSCore::HTTPResponse::getCacheControlTimePoint(*(AMSCore::HTTPResponse **)(v66 + 336));
              v82 = v380;
              if (v380)
              {
                imp = (unsigned int ***)CacheControlTimePoint;
                v82 = *(_QWORD *)v375;
                if ((*(char *)(*(_QWORD *)v375 + 23) & 0x80000000) == 0)
                {
                  v312 = **(std::runtime_error **)v375;
                  *(_QWORD *)&v369 = *(_QWORD *)(*(_QWORD *)v375 + 16);
                  v368 = v312;
                  goto LABEL_557;
                }
                goto LABEL_556;
              }
            }
          }
          goto LABEL_555;
        }
      }
    }
    goto LABEL_141;
  }
  std::runtime_error::runtime_error(&v368, (const std::runtime_error *)v375);
  v369 = *(_OWORD *)&v375[16];
  v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v370 = v376;
  v371 = v377;
  v372 = v378;
  if (v378)
  {
    *((_QWORD *)v377 + 2) = &v371;
    v376 = &v377;
    v377 = 0;
    v378 = 0;
  }
  else
  {
    v370 = &v371;
  }
  v373 = v379;
  v379 = 0uLL;
  std::runtime_error::runtime_error(&v381, &v368);
  v382 = v369;
  v86 = v371;
  v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v383 = v370;
  v384 = v371;
  v385 = v372;
  if (v372)
  {
    *((_QWORD *)v371 + 2) = &v384;
    v86 = 0;
    v370 = &v371;
    v371 = 0;
    v372 = 0;
  }
  else
  {
    v383 = &v384;
  }
  imp = &v383;
  v386 = v373;
  v373 = 0uLL;
  v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v370, v86);
  MEMORY[0x18D7898AC](&v368);
  if (*(_BYTE *)(v66 + 104))
  {
    if (*(_BYTE *)(v66 + 96))
    {
      if (*(char *)(v66 + 47) < 0)
        operator delete(v334->__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))v334->~runtime_error)(v334);
    }
    *(_BYTE *)(v66 + 104) = 0;
  }
  std::runtime_error::runtime_error(v334, &v381);
  v90 = v383;
  v89 = v384;
  *(_QWORD *)(v66 + 64) = v384;
  v91 = v66 + 64;
  *(_OWORD *)(v66 + 40) = v382;
  *(_QWORD *)(v66 + 24) = off_1E2521330;
  *(_QWORD *)(v66 + 56) = v90;
  v92 = v385;
  *(_QWORD *)(v66 + 72) = v385;
  if (v92)
  {
    *((_QWORD *)v89 + 2) = v91;
    v89 = 0;
    v383 = &v384;
    v384 = 0;
    v385 = 0;
  }
  else
  {
    *(_QWORD *)(v66 + 56) = v91;
  }
  v93 = v331;
  v56 = v332;
  *(_OWORD *)(v66 + 80) = v386;
  v386 = 0uLL;
  *(_BYTE *)(v66 + 96) = 0;
  *(_BYTE *)(v66 + 104) = 1;
  v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v383, v89);
  MEMORY[0x18D7898AC](&v381);
  if (v380)
  {
    imp = &v376;
    *(_QWORD *)v375 = off_1E2521330;
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
    if (*((_QWORD *)&v379 + 1))
    {
      v95 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v376, v377);
    MEMORY[0x18D7898AC](v375);
  }
  v11 = v355;
  v81 = v340;
  while (1)
  {
    if (*(_BYTE *)(v66 + 2608))
      AMSCore::URL::~URL(v81);
    else
      (**(void (***)(AMSCore::URL *))v81)(v81);
    *(_QWORD *)(v66 + 3056) = v56;
    *(_QWORD *)(v66 + 3048) = v93;
    *(_QWORD *)(v66 + 152) = v335;
    *(_QWORD *)v66 = 0;
    AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::Awaiter::await_suspend(a5);
LABEL_141:
    v66 = (unint64_t)v345;
    v87 = v346;
    v97 = *(_OWORD *)v346;
    *((_OWORD *)v346 + 3) = *(_OWORD *)v346;
    *(_QWORD *)v346 = 0;
    *((_QWORD *)v346 + 1) = 0;
    if (atomic_load((unint64_t *)(v97 + 96)))
      goto LABEL_145;
    v346[64] = 0;
    v99 = (unint64_t *)(*(_QWORD *)(v41 + 312) + 96);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v41, v99));
    if (v100)
    {
LABEL_145:
      v81 = (AMSCore::URL *)*((_QWORD *)v346 + 6);
      v82 = *((unsigned __int8 *)v81 + 88);
      if (!*((_BYTE *)v81 + 88))
        goto LABEL_555;
      v101 = (const std::runtime_error *)((char *)v81 + 8);
      v102 = *((_BYTE *)v81 + 80);
      if (v102)
      {
        v103 = *v101;
        v345[1].__vftable = (std::runtime_error_vtbl *)*((_QWORD *)v81 + 3);
        *v345 = v103;
        *((_QWORD *)v81 + 2) = 0;
        *((_QWORD *)v81 + 3) = 0;
        v101->__vftable = 0;
        *(_QWORD *)(v41 + 176) = *((_QWORD *)v81 + 4);
      }
      else
      {
        std::runtime_error::runtime_error(v345, v101);
        *(_OWORD *)(v41 + 168) = *(_OWORD *)((char *)v81 + 24);
        v104 = (_QWORD *)((char *)v81 + 48);
        v105 = *((_QWORD *)v81 + 6);
        *(_QWORD *)(v41 + 192) = v105;
        v106 = v41 + 192;
        *(_QWORD *)(v41 + 152) = off_1E2521330;
        *(_QWORD *)(v41 + 184) = *((_QWORD *)v81 + 5);
        v107 = *((_QWORD *)v81 + 7);
        *(_QWORD *)(v41 + 200) = v107;
        if (v107)
        {
          *(_QWORD *)(v105 + 16) = v106;
          *((_QWORD *)v81 + 5) = v104;
          *v104 = 0;
          *((_QWORD *)v81 + 7) = 0;
        }
        else
        {
          *(_QWORD *)(v41 + 184) = v106;
        }
        v112 = *(_QWORD *)(v41 + 312);
        *(_OWORD *)(v41 + 208) = *(_OWORD *)(v112 + 64);
        *(_QWORD *)(v112 + 64) = 0;
        *(_QWORD *)(v112 + 72) = 0;
      }
      *(_BYTE *)(v41 + 224) = v102;
      v113 = *(_QWORD *)(v41 + 320);
      if (v113)
      {
        v114 = (unint64_t *)(v113 + 8);
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          v116 = *(std::__shared_weak_count **)(v41 + 320);
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      v117 = *(std::__shared_weak_count **)(v41 + 272);
      if (v117)
      {
        v118 = (unint64_t *)&v117->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      v120 = *(std::__shared_weak_count **)(v41 + 304);
      if (v120)
      {
        v121 = (unint64_t *)&v120->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      imp = *(unsigned int ****)(v41 + 288);
      if (imp)
      {
        v123 = (unint64_t *)(imp + 1);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(unsigned int ***))(*imp)[2])(imp);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
        }
      }
      AMSCore::nestedError<std::expected<AMSCore::CachedCertificate,AMSCore::Error> &,char const(&)[20]>(v375, (uint64_t)v345, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
      if (v380)
      {
        v56 = (uint64_t)v375;
        std::runtime_error::runtime_error(&v368, (const std::runtime_error *)v375);
        v369 = *(_OWORD *)&v375[16];
        v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v370 = v376;
        v371 = v377;
        v372 = v378;
        if (v378)
        {
          *((_QWORD *)v377 + 2) = &v371;
          v376 = &v377;
          v377 = 0;
          v378 = 0;
        }
        else
        {
          v370 = &v371;
        }
        v373 = v379;
        v379 = 0uLL;
        std::runtime_error::runtime_error(&v381, &v368);
        v382 = v369;
        v128 = v371;
        v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v383 = v370;
        v384 = v371;
        v385 = v372;
        if (v372)
        {
          *((_QWORD *)v371 + 2) = &v384;
          v128 = 0;
          v370 = &v371;
          v371 = 0;
          v372 = 0;
        }
        else
        {
          v383 = &v384;
        }
        imp = &v383;
        v386 = v373;
        v373 = 0uLL;
        v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v370, v128);
        MEMORY[0x18D7898AC](&v368);
        if (*(_BYTE *)(v41 + 104))
        {
          if (*(_BYTE *)(v41 + 96))
          {
            if (*(char *)(v41 + 47) < 0)
              operator delete(v343->__vftable);
          }
          else
          {
            ((void (*)(std::runtime_error *))v343->~runtime_error)(v343);
          }
          *(_BYTE *)(v41 + 104) = 0;
        }
        std::runtime_error::runtime_error(v343, &v381);
        v130 = v383;
        v129 = v384;
        *(_QWORD *)(v41 + 64) = v384;
        v131 = v41 + 64;
        *(_OWORD *)(v41 + 40) = v382;
        *(_QWORD *)(v41 + 24) = off_1E2521330;
        *(_QWORD *)(v41 + 56) = v130;
        v132 = v385;
        *(_QWORD *)(v41 + 72) = v385;
        if (v132)
        {
          *((_QWORD *)v129 + 2) = v131;
          v129 = 0;
          v383 = &v384;
          v384 = 0;
          v385 = 0;
        }
        else
        {
          *(_QWORD *)(v41 + 56) = v131;
        }
        v66 = (unint64_t)v345;
        v87 = v346;
        *(_OWORD *)(v41 + 80) = v386;
        v386 = 0uLL;
        *(_BYTE *)(v41 + 96) = 0;
        *(_BYTE *)(v41 + 104) = 1;
        v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v383, v129);
        MEMORY[0x18D7898AC](&v381);
        if (v380)
        {
          imp = &v376;
          *(_QWORD *)v375 = off_1E2521330;
          v133 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
          if (*((_QWORD *)&v379 + 1))
          {
            v134 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v133);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v376, v377);
          MEMORY[0x18D7898AC](v375);
        }
        v11 = v355;
        if (*(_BYTE *)(v41 + 224))
        {
LABEL_210:
          if (*(char *)(v41 + 175) < 0)
            operator delete(*(void **)v66);
          goto LABEL_218;
        }
      }
      else
      {
        v82 = *(unsigned __int8 *)(v41 + 224);
        if (!*(_BYTE *)(v41 + 224))
          goto LABEL_555;
        v125 = *(char *)(v41 + 175);
        v126 = v125 >= 0 ? v345 : *(std::runtime_error **)(v41 + 152);
        v127 = v125 >= 0 ? *(unsigned __int8 *)(v41 + 175) : *(_QWORD *)(v41 + 160);
        AMSCore::setCacheValues(v126, v127, *(_QWORD *)(v41 + 176));
        v82 = *(unsigned __int8 *)(v41 + 224);
        v11 = v355;
        if (!*(_BYTE *)(v41 + 224))
          goto LABEL_555;
        if (*(_BYTE *)(v41 + 104))
        {
          if (*(_BYTE *)(v41 + 96))
          {
            if (*(char *)(v41 + 47) < 0)
              operator delete(v343->__vftable);
          }
          else
          {
            ((void (*)(std::runtime_error *))v343->~runtime_error)(v343);
          }
        }
        *v343 = *v345;
        v343[1].__vftable = v345[1].__vftable;
        v345->__imp_.__imp_ = 0;
        v345[1].__vftable = 0;
        v345->__vftable = 0;
        *(_QWORD *)(v41 + 48) = *(_QWORD *)(v41 + 176);
        *(_BYTE *)(v41 + 96) = 1;
        *(_BYTE *)(v41 + 104) = 1;
        if (*(_BYTE *)(v41 + 224))
          goto LABEL_210;
      }
      (**(void (***)(unint64_t))v66)(v66);
LABEL_218:
      *(_QWORD *)(v41 + 152) = v344;
      *(_QWORD *)v41 = 0;
      v87[64] = 1;
      AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)v66);
    }
    v137 = *(_OWORD *)(v10 + 152);
    *(_OWORD *)(v10 + 544) = v137;
    v11->__vftable = 0;
    v11->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)(v137 + 96)))
    {
      *(_BYTE *)(v10 + 592) = 0;
      v139 = (unint64_t *)(*(_QWORD *)(v10 + 544) + 96);
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v10, v139));
      if (!v140)
        return;
    }
    v81 = *(AMSCore::URL **)(v10 + 544);
    v82 = *((unsigned __int8 *)v81 + 88);
    if (*((_BYTE *)v81 + 88))
    {
      v141 = (const std::runtime_error *)((char *)v81 + 8);
      v142 = *((_BYTE *)v81 + 80);
      if (v142)
      {
        v143 = *v141;
        v56 = (uint64_t)v354;
        v354[1].__vftable = (std::runtime_error_vtbl *)*((_QWORD *)v81 + 3);
        *v354 = v143;
        *((_QWORD *)v81 + 2) = 0;
        *((_QWORD *)v81 + 3) = 0;
        v141->__vftable = 0;
        *(_QWORD *)(v10 + 256) = *((_QWORD *)v81 + 4);
      }
      else
      {
        v56 = (uint64_t)v354;
        std::runtime_error::runtime_error(v354, v141);
        *(_OWORD *)(v10 + 248) = *(_OWORD *)((char *)v81 + 24);
        *(_QWORD *)(v10 + 232) = off_1E2521330;
        v144 = (_QWORD *)((char *)v81 + 48);
        v145 = *((_QWORD *)v81 + 6);
        v146 = v10 + 272;
        *(_QWORD *)(v10 + 264) = *((_QWORD *)v81 + 5);
        *(_QWORD *)(v10 + 272) = v145;
        v147 = *((_QWORD *)v81 + 7);
        *(_QWORD *)(v10 + 280) = v147;
        if (v147)
        {
          *(_QWORD *)(v145 + 16) = v146;
          *((_QWORD *)v81 + 5) = v144;
          *v144 = 0;
          *((_QWORD *)v81 + 7) = 0;
        }
        else
        {
          *(_QWORD *)(v10 + 264) = v146;
        }
        v148 = *(_QWORD *)(v10 + 544);
        *(_OWORD *)(v10 + 288) = *(_OWORD *)(v148 + 64);
        *(_QWORD *)(v148 + 64) = 0;
        *(_QWORD *)(v148 + 72) = 0;
      }
      *(_BYTE *)(v10 + 304) = v142;
      v149 = *(_QWORD *)(v10 + 552);
      if (v149)
      {
        v150 = (unint64_t *)(v149 + 8);
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          v152 = *(std::__shared_weak_count **)(v10 + 552);
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
      v153 = *(std::__shared_weak_count **)(v10 + 160);
      if (v153)
      {
        v154 = (unint64_t *)&v153->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      v156 = *(std::__shared_weak_count **)(v10 + 424);
      if (v156)
      {
        v157 = (unint64_t *)&v156->__shared_owners_;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      imp = *(unsigned int ****)(v10 + 472);
      if (imp)
      {
        v159 = (unint64_t *)(imp + 1);
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(unsigned int ***))(*imp)[2])(imp);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
        }
      }
      AMSCore::nestedError<std::expected<AMSCore::CachedCertificate,AMSCore::Error> &>(v375, v56, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
      if (v380)
      {
        std::runtime_error::runtime_error(&v368, (const std::runtime_error *)v375);
        v369 = *(_OWORD *)&v375[16];
        v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v370 = v376;
        v371 = v377;
        v372 = v378;
        if (v378)
        {
          *((_QWORD *)v377 + 2) = &v371;
          v376 = &v377;
          v377 = 0;
          v378 = 0;
        }
        else
        {
          v370 = &v371;
        }
        v373 = v379;
        v379 = 0uLL;
        std::runtime_error::runtime_error(&v381, &v368);
        v382 = v369;
        v164 = v371;
        v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v383 = v370;
        v384 = v371;
        v385 = v372;
        if (v372)
        {
          *((_QWORD *)v371 + 2) = &v384;
          v164 = 0;
          v370 = &v371;
          v371 = 0;
          v372 = 0;
        }
        else
        {
          v383 = &v384;
        }
        v386 = v373;
        v373 = 0uLL;
        v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v370, v164);
        MEMORY[0x18D7898AC](&v368);
        if (*(_BYTE *)(v10 + 104))
        {
          if (!*(_BYTE *)(v10 + 96))
            ((void (*)(std::runtime_error *))v356->~runtime_error)(v356);
          *(_BYTE *)(v10 + 104) = 0;
        }
        std::runtime_error::runtime_error(v356, &v381);
        v166 = v383;
        v165 = v384;
        *(_QWORD *)(v10 + 64) = v384;
        v167 = v10 + 64;
        *(_OWORD *)(v10 + 40) = v382;
        *(_QWORD *)(v10 + 24) = off_1E2521330;
        *(_QWORD *)(v10 + 56) = v166;
        v168 = v385;
        *(_QWORD *)(v10 + 72) = v385;
        if (v168)
        {
          *((_QWORD *)v165 + 2) = v167;
          v165 = 0;
          v383 = &v384;
          v384 = 0;
          v385 = 0;
        }
        else
        {
          *(_QWORD *)(v10 + 56) = v167;
        }
        *(_OWORD *)(v10 + 80) = v386;
        v386 = 0uLL;
        *(_BYTE *)(v10 + 96) = 0;
        *(_BYTE *)(v10 + 104) = 1;
        v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v383, v165);
        MEMORY[0x18D7898AC](&v381);
        if (v380)
        {
          *(_QWORD *)v375 = off_1E2521330;
          v169 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
          if (*((_QWORD *)&v379 + 1))
          {
            v170 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v376, v377);
          MEMORY[0x18D7898AC](v375);
        }
        v35 = *(_QWORD *)(v10 + 536);
        v34 = *(_QWORD *)(v10 + 520);
        v11 = v355;
        goto LABEL_282;
      }
      v82 = *(unsigned __int8 *)(v10 + 304);
      if (*(_BYTE *)(v10 + 304))
      {
        v161 = *(char *)(v10 + 255);
        if (v161 >= 0)
          v162 = v56;
        else
          v162 = *(_QWORD *)(v10 + 232);
        if (v161 >= 0)
          v163 = *(unsigned __int8 *)(v10 + 255);
        else
          v163 = *(_QWORD *)(v10 + 240);
        imp = (unsigned int ***)v351;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v10 + 504) + 104) + 16))(*(_QWORD *)(*(_QWORD *)(v10 + 504) + 104), v162, v163);
        AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &>(v375, v351, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
        if (v380)
        {
          std::runtime_error::runtime_error(&v368, (const std::runtime_error *)v375);
          v369 = *(_OWORD *)&v375[16];
          v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v370 = v376;
          v371 = v377;
          v372 = v378;
          if (v378)
          {
            *((_QWORD *)v377 + 2) = &v371;
            v376 = &v377;
            v377 = 0;
            v378 = 0;
          }
          else
          {
            v370 = &v371;
          }
          v373 = v379;
          v379 = 0uLL;
          std::runtime_error::runtime_error(&v381, &v368);
          v382 = v369;
          v180 = v371;
          v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v383 = v370;
          v384 = v371;
          v385 = v372;
          if (v372)
          {
            *((_QWORD *)v371 + 2) = &v384;
            v180 = 0;
            v370 = &v371;
            v371 = 0;
            v372 = 0;
          }
          else
          {
            v383 = &v384;
          }
          v386 = v373;
          v373 = 0uLL;
          v368.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v370, v180);
          MEMORY[0x18D7898AC](&v368);
          if (*(_BYTE *)(v10 + 104))
          {
            if (!*(_BYTE *)(v10 + 96))
              ((void (*)(std::runtime_error *))v356->~runtime_error)(v356);
            *(_BYTE *)(v10 + 104) = 0;
          }
          std::runtime_error::runtime_error(v356, &v381);
          v182 = v383;
          v181 = v384;
          *(_QWORD *)(v10 + 64) = v384;
          v183 = v10 + 64;
          *(_OWORD *)(v10 + 40) = v382;
          *(_QWORD *)(v10 + 24) = off_1E2521330;
          *(_QWORD *)(v10 + 56) = v182;
          v184 = v385;
          *(_QWORD *)(v10 + 72) = v385;
          if (v184)
          {
            *((_QWORD *)v181 + 2) = v183;
            v181 = 0;
            v383 = &v384;
            v384 = 0;
            v385 = 0;
          }
          else
          {
            *(_QWORD *)(v10 + 56) = v183;
          }
          *(_OWORD *)(v10 + 80) = v386;
          v386 = 0uLL;
          *(_BYTE *)(v10 + 96) = 0;
          *(_BYTE *)(v10 + 104) = 1;
          v381.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v383, v181);
          MEMORY[0x18D7898AC](&v381);
          if (v380)
          {
            *(_QWORD *)v375 = off_1E2521330;
            v185 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
            if (*((_QWORD *)&v379 + 1))
            {
              v186 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
              do
                v187 = __ldaxr(v186);
              while (__stlxr(v187 - 1, v186));
              if (!v187)
              {
                ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                std::__shared_weak_count::__release_weak(v185);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v376, v377);
            MEMORY[0x18D7898AC](v375);
          }
          v35 = *(_QWORD *)(v10 + 536);
          v34 = *(_QWORD *)(v10 + 520);
          v11 = v355;
          if (!*(_BYTE *)(v10 + 384))
            goto LABEL_550;
          goto LABEL_316;
        }
        v82 = *(unsigned __int8 *)(v10 + 384);
        if (*(_BYTE *)(v10 + 384))
        {
          *(_OWORD *)v350 = *(_OWORD *)v351;
          v350[2] = *(_QWORD *)(v351 + 16);
          *(_QWORD *)(v351 + 8) = 0;
          *(_QWORD *)(v351 + 16) = 0;
          *(_QWORD *)v351 = 0;
          v172 = *(_OWORD *)(v10 + 528);
          *(_OWORD *)(v10 + 480) = *(_OWORD *)(v10 + 512);
          *(_OWORD *)(v10 + 432) = v172;
          imp = v349;
          AMSCore::signPayload(v349, v350, v347, v348);
          v173 = *(_OWORD *)(v10 + 448);
          *(_OWORD *)(v10 + 560) = v173;
          *v349 = 0;
          v349[1] = 0;
          v174 = atomic_load((unint64_t *)(v173 + 96));
          v11 = v355;
          if (!v174)
          {
            *(_BYTE *)(v10 + 592) = 1;
            v175 = (unint64_t *)(*(_QWORD *)(v10 + 560) + 96);
            do
              v176 = __ldaxr(v175);
            while (__stlxr(v10, v175));
            if (!v176)
              return;
          }
          v81 = *(AMSCore::URL **)(v10 + 560);
          v82 = *((unsigned __int8 *)v81 + 88);
          if (*((_BYTE *)v81 + 88))
          {
            v177 = (const std::runtime_error *)((char *)v81 + 8);
            v178 = *((_BYTE *)v81 + 80);
            if (v178)
            {
              v179 = *v177;
              v355[1].__vftable = (std::runtime_error_vtbl *)*((_QWORD *)v81 + 3);
              *v355 = v179;
              *((_QWORD *)v81 + 2) = 0;
              *((_QWORD *)v81 + 3) = 0;
              v177->__vftable = 0;
            }
            else
            {
              std::runtime_error::runtime_error(v355, v177);
              *(_OWORD *)(v10 + 168) = *(_OWORD *)((char *)v81 + 24);
              v188 = (_QWORD *)((char *)v81 + 48);
              v189 = *((_QWORD *)v81 + 6);
              *(_QWORD *)(v10 + 192) = v189;
              v190 = v10 + 192;
              *(_QWORD *)(v10 + 152) = off_1E2521330;
              *(_QWORD *)(v10 + 184) = *((_QWORD *)v81 + 5);
              v191 = *((_QWORD *)v81 + 7);
              *(_QWORD *)(v10 + 200) = v191;
              if (v191)
              {
                *(_QWORD *)(v189 + 16) = v190;
                *((_QWORD *)v81 + 5) = v188;
                *v188 = 0;
                *((_QWORD *)v81 + 7) = 0;
              }
              else
              {
                *(_QWORD *)(v10 + 184) = v190;
              }
              v255 = *(_QWORD *)(v10 + 560);
              *(_OWORD *)(v10 + 208) = *(_OWORD *)(v255 + 64);
              *(_QWORD *)(v255 + 64) = 0;
              *(_QWORD *)(v255 + 72) = 0;
            }
            *(_BYTE *)(v10 + 224) = v178;
            v256 = *(_QWORD *)(v10 + 568);
            if (v256)
            {
              v257 = (unint64_t *)(v256 + 8);
              do
                v258 = __ldaxr(v257);
              while (__stlxr(v258 - 1, v257));
              if (!v258)
              {
                v259 = *(std::__shared_weak_count **)(v10 + 568);
                ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                std::__shared_weak_count::__release_weak(v259);
              }
            }
            v260 = *(std::__shared_weak_count **)(v10 + 456);
            if (v260)
            {
              v261 = (unint64_t *)&v260->__shared_owners_;
              do
                v262 = __ldaxr(v261);
              while (__stlxr(v262 - 1, v261));
              if (!v262)
              {
                ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                std::__shared_weak_count::__release_weak(v260);
              }
            }
            v263 = *(std::__shared_weak_count **)(v10 + 440);
            if (v263)
            {
              v264 = (unint64_t *)&v263->__shared_owners_;
              do
                v265 = __ldaxr(v264);
              while (__stlxr(v265 - 1, v264));
              if (!v265)
              {
                ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                std::__shared_weak_count::__release_weak(v263);
              }
            }
            imp = *(unsigned int ****)(v10 + 488);
            if (imp)
            {
              v266 = (unint64_t *)(imp + 1);
              do
                v267 = __ldaxr(v266);
              while (__stlxr(v267 - 1, v266));
              if (!v267)
              {
                ((void (*)(unsigned int ***))(*imp)[2])(imp);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
              }
            }
            if (*(char *)(v10 + 415) < 0)
              operator delete((void *)*v350);
            AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &>(v375, (uint64_t)v355, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
            if (v380)
            {
              AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v368, (uint64_t)v375);
              AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>((uint64_t)v359, &v368);
              std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v368);
            }
            std::optional<AMSCore::Error>::~optional((uint64_t)v375);
            v82 = *(unsigned __int8 *)(v10 + 224);
            if (*(_BYTE *)(v10 + 224))
            {
              (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v10 + 504) + 104) + 24))(v375);
              AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v368, (uint64_t)v375, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
              if (v374)
              {
                AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v381, (uint64_t)&v368);
                AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>((uint64_t)v359, &v381);
                std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v381);
              }
              std::optional<AMSCore::Error>::~optional((uint64_t)&v368);
              v82 = *(unsigned __int8 *)(v10 + 304);
              if (*(_BYTE *)(v10 + 304))
                break;
            }
          }
        }
      }
    }
LABEL_555:
    __break(1u);
LABEL_556:
    std::string::__init_copy_ctor_external((std::string *)&v368, *(const std::string::value_type **)v82, *(_QWORD *)(v82 + 8));
LABEL_557:
    *((_QWORD *)&v369 + 1) = imp;
    v313 = AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::return_value<AMSCore::CachedCertificate>(v335, (__n128 *)&v368);
    if (SBYTE7(v369) < 0)
      operator delete(v368.__vftable);
    if (!v380)
      (**(void (***)(_BYTE *, __n128))v375)(v375, v313);
    if (*(_BYTE *)(v66 + 568))
    {
      v314 = *(std::__shared_weak_count **)(v66 + 344);
      if (v314)
      {
        v315 = (unint64_t *)&v314->__shared_owners_;
        do
          v316 = __ldaxr(v315);
        while (__stlxr(v316 - 1, v315));
        if (!v316)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v314->__on_zero_shared)(v314, v313);
          std::__shared_weak_count::__release_weak(v314);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v66 + 168));
      imp = *(unsigned int ****)(v66 + 160);
      if (imp)
      {
        v317 = (unint64_t *)(imp + 1);
        do
          v318 = __ldaxr(v317);
        while (__stlxr(v318 - 1, v317));
        if (!v318)
        {
          ((void (*)(unsigned int ***))(*imp)[2])(imp);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *, __n128))a5->~runtime_error)(a5, v313);
    }
LABEL_497:
    if (*(_BYTE *)(v66 + 968))
    {
      imp = *(unsigned int ****)(v66 + 960);
      if (imp)
      {
        v289 = (unint64_t *)(imp + 1);
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(unsigned int ***))(*imp)[2])(imp);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v333->__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))v333->~runtime_error)(v333);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v56);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(v328);
    v93 = 0;
    v56 = 0;
LABEL_506:
    v291 = *(_QWORD *)(v66 + 2768);
    if (*(_BYTE *)(v66 + 2840))
    {
      v338->__vftable = 0;
      if (v291)
        (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
    }
    else
    {
      (*(void (**)(std::runtime_error *))v291)(v338);
    }
  }
  v268 = *(_QWORD *)(v10 + 504);
  v269 = *(_QWORD *)(v10 + 256);
  if (!*(_BYTE *)(v268 + 120))
  {
    *(_BYTE *)(v268 + 120) = 1;
    v268 = *(_QWORD *)(v10 + 504);
  }
  *(_QWORD *)(v268 + 112) = v269;
  v374 = 1;
  AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::expected<void,AMSCore::Error>>(v359, &v368);
  if (v374)
  {
    if (v380)
      goto LABEL_455;
LABEL_547:
    (**(void (***)(_BYTE *))v375)(v375);
    if (!*(_BYTE *)(v10 + 224))
      goto LABEL_548;
LABEL_456:
    if (*(char *)(v10 + 175) < 0)
      operator delete(v355->__vftable);
  }
  else
  {
    ((void (*)(std::runtime_error *))v368.~runtime_error)(&v368);
    if (!v380)
      goto LABEL_547;
LABEL_455:
    if (*(_BYTE *)(v10 + 224))
      goto LABEL_456;
LABEL_548:
    ((void (*)(std::runtime_error *))v355->~runtime_error)(v355);
  }
  v35 = 0;
  v34 = 0;
  if (!*(_BYTE *)(v10 + 384))
  {
LABEL_550:
    (**(void (***)(uint64_t))v351)(v351);
    goto LABEL_282;
  }
LABEL_316:
  if (*(char *)(v10 + 335) < 0)
    operator delete(*(void **)v351);
LABEL_282:
  if (*(_BYTE *)(v10 + 304))
  {
    if (*(char *)(v10 + 255) < 0)
      operator delete(v354->__vftable);
  }
  else
  {
    ((void (*)(std::runtime_error *))v354->~runtime_error)(v354);
  }
  _ZZN7AMSCore7finallyIZNS_21BuiltInMescalProvider20ensureSessionIsValidENSt3__110shared_ptrINS_4IBagEEENS3_IKNS_11IBundleInfoEEENS2_6chrono10time_pointINS9_12system_clockENS9_8durationIxNS2_5ratioILl1ELl1000000EEEEEEEE3__0EEDaOT_EN7FinallyD1Ev(v358);
  v33 = v359;
LABEL_287:
  *(_QWORD *)(v10 + 584) = v34;
  *(_QWORD *)(v10 + 576) = v35;
  *(_QWORD *)(v10 + 152) = v33;
  *(_QWORD *)v10 = 0;
  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v11);
}

void sub_18CC6EF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AMSCore::ExecuteHTTPRequestTask::Options *a10, AMSCore::EncodeHTTPRequestTask::Result *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, AMSCore::ExecuteHTTPRequestTask::Options *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,AMSCore::EncodeHTTPRequestTask::Options *a23,uint64_t a24,uint64_t a25,void **a26,_QWORD *a27,AMSCore::URL *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;

  if (a2)
  {
    if (!*(_BYTE *)(v60 - 184))
      (**(void (***)(uint64_t))(v60 - 256))(v60 - 256);
    std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](a45);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](a23);
    AMSCore::EncodeHTTPRequestTask::Options::~Options(a26);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(a18);
    v62 = *(_QWORD *)(v59 + 2768);
    if (*(_BYTE *)(v59 + 2840))
    {
      *a27 = 0;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    }
    else
    {
      (*(void (**)(_QWORD *))v62)(a27);
    }
    if (*(_BYTE *)(v59 + 2608))
      AMSCore::URL::~URL(a28);
    else
      (**(void (***)(AMSCore::URL *))a28)(a28);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *std::optional<std::expected<AMSCore::DataBuffer,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::DataBuffer,AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  char imp;
  std::runtime_error v5;
  std::runtime_error_vtbl *p_imp;
  const char *v7;
  std::runtime_error_vtbl *v8;
  std::runtime_error_vtbl *v9;

  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      if (SHIBYTE(this[1].__vftable) < 0)
        operator delete(this->__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  imp = (char)a2[4].__imp_.__imp_;
  if (imp)
  {
    v5 = *a2;
    this[1].__vftable = a2[1].__vftable;
    *this = v5;
    a2->__imp_.__imp_ = 0;
    a2[1].__vftable = 0;
    a2->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v7 = a2[2].__imp_.__imp_;
    this[2].__vftable = a2[2].__vftable;
    this[2].__imp_.__imp_ = v7;
    v8 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v9 = a2[3].__vftable;
    this[3].__vftable = v9;
    if (v9)
    {
      *((_QWORD *)v7 + 2) = v8;
      a2[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v8;
    }
    *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
  }
  LOBYTE(this[4].__imp_.__imp_) = imp;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

void AMSCore::BuiltInMescalProvider::ensureSessionIsValid(unint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  const std::runtime_error *v9;
  char v10;
  std::runtime_error v11;
  uint64_t v12;
  const std::runtime_error *v13;
  char v14;
  std::runtime_error v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int **v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int **v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  void **v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int **v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  unint64_t *v86;
  unint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int **v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::runtime_error v96;
  __int128 v97;
  unsigned int **v98;
  unsigned int *v99;
  uint64_t v100;
  __int128 v101;
  char v102;
  std::runtime_error v103;
  __int128 v104;
  unsigned int **v105;
  unsigned int *v106;
  uint64_t v107;
  __int128 v108;
  char v109;
  std::runtime_error v110;
  __int128 v111;
  unsigned int **v112;
  unsigned int *v113;
  uint64_t v114;
  __int128 v115;
  std::runtime_error v116;
  __int128 v117;
  unsigned int **v118;
  unsigned int *v119;
  uint64_t v120;
  __int128 v121;

  v2 = a1 + 152;
  v3 = (void **)(a1 + 232);
  v4 = a1 + 312;
  v5 = (uint64_t *)(a1 + 392);
  v6 = (uint64_t *)(a1 + 496);
  v7 = a1 + 16;
  if (*(_BYTE *)(a1 + 592))
    goto LABEL_2;
  v12 = *(_QWORD *)(a1 + 544);
  if (!*(_BYTE *)(v12 + 88))
    goto LABEL_183;
  v13 = (const std::runtime_error *)(v12 + 8);
  v14 = *(_BYTE *)(v12 + 80);
  if (v14)
  {
    v15 = *v13;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(v12 + 24);
    *(std::runtime_error *)v3 = v15;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    v13->__vftable = 0;
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(v12 + 32);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 232), v13);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(v12 + 24);
    *(_QWORD *)(a1 + 232) = off_1E2521330;
    v20 = (_QWORD *)(v12 + 48);
    v21 = *(_QWORD *)(v12 + 48);
    v22 = a1 + 272;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(v12 + 40);
    *(_QWORD *)(a1 + 272) = v21;
    v23 = *(_QWORD *)(v12 + 56);
    *(_QWORD *)(a1 + 280) = v23;
    if (v23)
    {
      *(_QWORD *)(v21 + 16) = v22;
      *(_QWORD *)(v12 + 40) = v20;
      *v20 = 0;
      *(_QWORD *)(v12 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 264) = v22;
    }
    v58 = *(_QWORD *)(a1 + 544);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(v58 + 64);
    *(_QWORD *)(v58 + 64) = 0;
    *(_QWORD *)(v58 + 72) = 0;
  }
  *(_BYTE *)(a1 + 304) = v14;
  v59 = *(_QWORD *)(a1 + 552);
  if (v59)
  {
    v60 = (unint64_t *)(v59 + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      v62 = *(std::__shared_weak_count **)(a1 + 552);
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v63 = *(std::__shared_weak_count **)(a1 + 160);
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *(std::__shared_weak_count **)(a1 + 424);
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = *(std::__shared_weak_count **)(a1 + 472);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  AMSCore::nestedError<std::expected<AMSCore::CachedCertificate,AMSCore::Error> &>(&v103, (uint64_t)v3, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (v109)
  {
    std::runtime_error::runtime_error(&v116, &v103);
    v117 = v104;
    v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v118 = v105;
    v119 = v106;
    v120 = v107;
    if (v107)
    {
      *((_QWORD *)v106 + 2) = &v119;
      v105 = &v106;
      v106 = 0;
      v107 = 0;
    }
    else
    {
      v118 = &v119;
    }
    v121 = v108;
    v108 = 0uLL;
    std::runtime_error::runtime_error(&v96, &v116);
    v97 = v117;
    v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v75 = v119;
    v98 = v118;
    v99 = v119;
    v100 = v120;
    if (v120)
    {
      *((_QWORD *)v119 + 2) = &v99;
      v75 = 0;
      v118 = &v119;
      v119 = 0;
      v120 = 0;
    }
    else
    {
      v98 = &v99;
    }
    v101 = v121;
    v121 = 0uLL;
    v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v75);
    MEMORY[0x18D7898AC](&v116);
    if (*(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a1 + 96))
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v96);
    v77 = v98;
    v76 = v99;
    *(_QWORD *)(a1 + 64) = v99;
    v78 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v97;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v77;
    v79 = v100;
    *(_QWORD *)(a1 + 72) = v100;
    if (v79)
    {
      *((_QWORD *)v76 + 2) = v78;
      v76 = 0;
      v98 = &v99;
      v99 = 0;
      v100 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v78;
    }
    *(_OWORD *)(a1 + 80) = v101;
    v101 = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v98, v76);
    MEMORY[0x18D7898AC](&v96);
    if (v109)
    {
      v103.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
      if (*((_QWORD *)&v108 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v105, v106);
      MEMORY[0x18D7898AC](&v103);
    }
    v56 = *(_QWORD *)(a1 + 536);
    v57 = *(_QWORD *)(a1 + 520);
LABEL_152:
    if (*(_BYTE *)(a1 + 304))
      goto LABEL_153;
    goto LABEL_181;
  }
  if (!*(_BYTE *)(a1 + 304))
    goto LABEL_183;
  v72 = *(char *)(a1 + 255);
  if (v72 >= 0)
    v73 = v3;
  else
    v73 = *(void ***)(a1 + 232);
  if (v72 >= 0)
    v74 = *(unsigned __int8 *)(a1 + 255);
  else
    v74 = *(_QWORD *)(a1 + 240);
  (*(void (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 504) + 104) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 504) + 104), v73, v74);
  AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &>(&v103, v4, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (v109)
  {
    std::runtime_error::runtime_error(&v116, &v103);
    v117 = v104;
    v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v118 = v105;
    v119 = v106;
    v120 = v107;
    if (v107)
    {
      *((_QWORD *)v106 + 2) = &v119;
      v105 = &v106;
      v106 = 0;
      v107 = 0;
    }
    else
    {
      v118 = &v119;
    }
    v121 = v108;
    v108 = 0uLL;
    std::runtime_error::runtime_error(&v96, &v116);
    v97 = v117;
    v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v88 = v119;
    v98 = v118;
    v99 = v119;
    v100 = v120;
    if (v120)
    {
      *((_QWORD *)v119 + 2) = &v99;
      v88 = 0;
      v118 = &v119;
      v119 = 0;
      v120 = 0;
    }
    else
    {
      v98 = &v99;
    }
    v101 = v121;
    v121 = 0uLL;
    v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v88);
    MEMORY[0x18D7898AC](&v116);
    if (*(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a1 + 96))
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v96);
    v90 = v98;
    v89 = v99;
    *(_QWORD *)(a1 + 64) = v99;
    v91 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v97;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v90;
    v92 = v100;
    *(_QWORD *)(a1 + 72) = v100;
    if (v92)
    {
      *((_QWORD *)v89 + 2) = v91;
      v89 = 0;
      v98 = &v99;
      v99 = 0;
      v100 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v91;
    }
    *(_OWORD *)(a1 + 80) = v101;
    v101 = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v98, v89);
    MEMORY[0x18D7898AC](&v96);
    if (v109)
    {
      v103.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v93 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
      if (*((_QWORD *)&v108 + 1))
      {
        v94 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v105, v106);
      MEMORY[0x18D7898AC](&v103);
    }
    v56 = *(_QWORD *)(a1 + 536);
    v57 = *(_QWORD *)(a1 + 520);
    if (*(_BYTE *)(a1 + 384))
    {
LABEL_95:
      if (*(char *)(a1 + 335) < 0)
      {
        operator delete(*(void **)v4);
        if (!*(_BYTE *)(a1 + 304))
          goto LABEL_181;
LABEL_153:
        if (*(char *)(a1 + 255) < 0)
          operator delete(*v3);
        goto LABEL_182;
      }
      goto LABEL_152;
    }
LABEL_180:
    (**(void (***)(uint64_t))v4)(v4);
    if (*(_BYTE *)(a1 + 304))
      goto LABEL_153;
LABEL_181:
    (*(void (**)(void **))*v3)(v3);
LABEL_182:
    _ZZN7AMSCore7finallyIZNS_21BuiltInMescalProvider20ensureSessionIsValidENSt3__110shared_ptrINS_4IBagEEENS3_IKNS_11IBundleInfoEEENS2_6chrono10time_pointINS9_12system_clockENS9_8durationIxNS2_5ratioILl1ELl1000000EEEEEEEE3__0EEDaOT_EN7FinallyD1Ev(v6);
    *(_QWORD *)(a1 + 584) = v57;
    *(_QWORD *)(a1 + 576) = v56;
    *(_QWORD *)(a1 + 152) = v7;
    *(_QWORD *)a1 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)v2);
    return;
  }
  if (!*(_BYTE *)(a1 + 384))
    goto LABEL_183;
  *(_OWORD *)v5 = *(_OWORD *)v4;
  v5[2] = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  v83 = *(_OWORD *)(a1 + 528);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 512);
  *(_OWORD *)(a1 + 432) = v83;
  AMSCore::signPayload((_OWORD *)(a1 + 448), v5, (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 432));
  v84 = *(_OWORD *)(a1 + 448);
  *(_OWORD *)(a1 + 560) = v84;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  if (atomic_load((unint64_t *)(v84 + 96)))
    goto LABEL_2;
  *(_BYTE *)(a1 + 592) = 1;
  v86 = (unint64_t *)(*(_QWORD *)(a1 + 560) + 96);
  do
    v87 = __ldaxr(v86);
  while (__stlxr(a1, v86));
  if (v87)
  {
LABEL_2:
    v8 = *(_QWORD *)(a1 + 560);
    if (*(_BYTE *)(v8 + 88))
    {
      v9 = (const std::runtime_error *)(v8 + 8);
      v10 = *(_BYTE *)(v8 + 80);
      if (v10)
      {
        v11 = *v9;
        *(_QWORD *)(v2 + 16) = *(_QWORD *)(v8 + 24);
        *(std::runtime_error *)v2 = v11;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = 0;
        v9->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)v2, v9);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(v8 + 24);
        v16 = (_QWORD *)(v8 + 48);
        v17 = *(_QWORD *)(v8 + 48);
        *(_QWORD *)(a1 + 192) = v17;
        v18 = a1 + 192;
        *(_QWORD *)(a1 + 152) = off_1E2521330;
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(v8 + 40);
        v19 = *(_QWORD *)(v8 + 56);
        *(_QWORD *)(a1 + 200) = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 16) = v18;
          *(_QWORD *)(v8 + 40) = v16;
          *v16 = 0;
          *(_QWORD *)(v8 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 184) = v18;
        }
        v24 = *(_QWORD *)(a1 + 560);
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v24 + 64);
        *(_QWORD *)(v24 + 64) = 0;
        *(_QWORD *)(v24 + 72) = 0;
      }
      *(_BYTE *)(a1 + 224) = v10;
      v25 = *(_QWORD *)(a1 + 568);
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          v28 = *(std::__shared_weak_count **)(a1 + 568);
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v29 = *(std::__shared_weak_count **)(a1 + 456);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = *(std::__shared_weak_count **)(a1 + 440);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = *(std::__shared_weak_count **)(a1 + 488);
      if (!v35)
        goto LABEL_33;
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
        if ((*(char *)(a1 + 415) & 0x80000000) == 0)
        {
LABEL_35:
          AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &>(&v103, v2, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
          if (v109)
          {
            std::runtime_error::runtime_error(&v96, &v103);
            v97 = v104;
            v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v98 = v105;
            v99 = v106;
            v100 = v107;
            if (v107)
            {
              *((_QWORD *)v106 + 2) = &v99;
              v105 = &v106;
              v106 = 0;
              v107 = 0;
            }
            else
            {
              v98 = &v99;
            }
            v101 = v108;
            v108 = 0uLL;
            std::runtime_error::runtime_error(&v116, &v96);
            v117 = v97;
            v38 = v99;
            v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v118 = v98;
            v119 = v99;
            v120 = v100;
            if (v100)
            {
              *((_QWORD *)v99 + 2) = &v119;
              v38 = 0;
              v98 = &v99;
              v99 = 0;
              v100 = 0;
            }
            else
            {
              v118 = &v119;
            }
            v121 = v101;
            v101 = 0uLL;
            v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v98, v38);
            MEMORY[0x18D7898AC](&v96);
            if (*(_BYTE *)(a1 + 104))
            {
              if (!*(_BYTE *)(a1 + 96))
                (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
              *(_BYTE *)(a1 + 104) = 0;
            }
            std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v116);
            v40 = v118;
            v39 = v119;
            *(_QWORD *)(a1 + 64) = v119;
            v41 = a1 + 64;
            *(_OWORD *)(a1 + 40) = v117;
            *(_QWORD *)(a1 + 24) = off_1E2521330;
            *(_QWORD *)(a1 + 56) = v40;
            v42 = v120;
            *(_QWORD *)(a1 + 72) = v120;
            if (v42)
            {
              *((_QWORD *)v39 + 2) = v41;
              v39 = 0;
              v118 = &v119;
              v119 = 0;
              v120 = 0;
            }
            else
            {
              *(_QWORD *)(a1 + 56) = v41;
            }
            *(_OWORD *)(a1 + 80) = v121;
            v121 = 0uLL;
            *(_BYTE *)(a1 + 96) = 0;
            *(_BYTE *)(a1 + 104) = 1;
            v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v39);
            MEMORY[0x18D7898AC](&v116);
            if (v109)
            {
              v103.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v43 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              if (*((_QWORD *)&v108 + 1))
              {
                v44 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v105, v106);
              MEMORY[0x18D7898AC](&v103);
              if (!*(_BYTE *)(a1 + 224))
                goto LABEL_93;
LABEL_90:
              if (*(char *)(a1 + 175) < 0)
                operator delete(*(void **)v2);
LABEL_94:
              v56 = 0;
              v57 = 0;
              if (*(_BYTE *)(a1 + 384))
                goto LABEL_95;
              goto LABEL_180;
            }
            goto LABEL_89;
          }
          if (*(_BYTE *)(a1 + 224))
          {
            (*(void (**)(std::runtime_error *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 504) + 104)
                                                                     + 24))(&v96);
            AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v103, (uint64_t)&v96, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
            if (v109)
            {
              std::runtime_error::runtime_error(&v116, &v103);
              v117 = v104;
              v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v118 = v105;
              v119 = v106;
              v120 = v107;
              if (v107)
              {
                *((_QWORD *)v106 + 2) = &v119;
                v105 = &v106;
                v106 = 0;
                v107 = 0;
              }
              else
              {
                v118 = &v119;
              }
              v121 = v108;
              v108 = 0uLL;
              std::runtime_error::runtime_error(&v110, &v116);
              v111 = v117;
              v110.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v48 = v119;
              v112 = v118;
              v113 = v119;
              v114 = v120;
              if (v120)
              {
                *((_QWORD *)v119 + 2) = &v113;
                v48 = 0;
                v118 = &v119;
                v119 = 0;
                v120 = 0;
              }
              else
              {
                v112 = &v113;
              }
              v115 = v121;
              v121 = 0uLL;
              v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v48);
              MEMORY[0x18D7898AC](&v116);
              if (*(_BYTE *)(a1 + 104))
              {
                if (!*(_BYTE *)(a1 + 96))
                  (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
                *(_BYTE *)(a1 + 104) = 0;
              }
              std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v110);
              v50 = v112;
              v49 = v113;
              *(_QWORD *)(a1 + 64) = v113;
              v51 = a1 + 64;
              *(_OWORD *)(a1 + 40) = v111;
              *(_QWORD *)(a1 + 24) = off_1E2521330;
              *(_QWORD *)(a1 + 56) = v50;
              v52 = v114;
              *(_QWORD *)(a1 + 72) = v114;
              if (v52)
              {
                *((_QWORD *)v49 + 2) = v51;
                v49 = 0;
                v112 = &v113;
                v113 = 0;
                v114 = 0;
              }
              else
              {
                *(_QWORD *)(a1 + 56) = v51;
              }
              *(_OWORD *)(a1 + 80) = v115;
              v115 = 0uLL;
              *(_BYTE *)(a1 + 96) = 0;
              *(_BYTE *)(a1 + 104) = 1;
              v110.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v112, v49);
              MEMORY[0x18D7898AC](&v110);
              if (v109)
              {
                v103.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v53 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                if (*((_QWORD *)&v108 + 1))
                {
                  v54 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v105, v106);
                MEMORY[0x18D7898AC](&v103);
              }
              goto LABEL_88;
            }
            if (*(_BYTE *)(a1 + 304))
            {
              v46 = *(_QWORD *)(a1 + 504);
              v47 = *(_QWORD *)(a1 + 256);
              if (!*(_BYTE *)(v46 + 120))
              {
                *(_BYTE *)(v46 + 120) = 1;
                v46 = *(_QWORD *)(a1 + 504);
              }
              *(_QWORD *)(v46 + 112) = v47;
              if (*(_BYTE *)(a1 + 104) && !*(_BYTE *)(a1 + 96))
              {
                (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
                *(_BYTE *)(a1 + 104) = 0;
              }
              *(_BYTE *)(a1 + 96) = 1;
              *(_BYTE *)(a1 + 104) = 1;
LABEL_88:
              if (!v102)
              {
                ((void (*)(std::runtime_error *))v96.~runtime_error)(&v96);
                if (*(_BYTE *)(a1 + 224))
                  goto LABEL_90;
LABEL_93:
                (**(void (***)(uint64_t))v2)(v2);
                goto LABEL_94;
              }
LABEL_89:
              if (*(_BYTE *)(a1 + 224))
                goto LABEL_90;
              goto LABEL_93;
            }
          }
          goto LABEL_183;
        }
      }
      else
      {
LABEL_33:
        if ((*(char *)(a1 + 415) & 0x80000000) == 0)
          goto LABEL_35;
      }
      operator delete((void *)*v5);
      goto LABEL_35;
    }
LABEL_183:
    __break(1u);
  }
}

void sub_18CC70250(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](v1);
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](v3);
  _ZZN7AMSCore7finallyIZNS_21BuiltInMescalProvider20ensureSessionIsValidENSt3__110shared_ptrINS_4IBagEEENS3_IKNS_11IBundleInfoEEENS2_6chrono10time_pointINS9_12system_clockENS9_8durationIxNS2_5ratioILl1ELl1000000EEEEEEEE3__0EEDaOT_EN7FinallyD1Ev(v2);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC702E0()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC70214);
}

void AMSCore::BuiltInMescalProvider::ensureSessionIsValid(char *__p)
{
  void **v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void **v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;

  v2 = (void **)(__p + 232);
  if (!*(_QWORD *)__p)
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)__p + 73);
    v18 = (std::__shared_weak_count *)*((_QWORD *)__p + 72);
    goto LABEL_56;
  }
  if (!__p[592])
  {
    v19 = *((_QWORD *)__p + 69);
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)__p + 69);
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 53);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)__p + 59);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)__p + 67);
    v17 = (std::__shared_weak_count *)*((_QWORD *)__p + 65);
    goto LABEL_55;
  }
  v3 = *((_QWORD *)__p + 71);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 71);
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)__p + 57);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 55);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 61);
  if (!v13)
    goto LABEL_22;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_22:
    if ((__p[415] & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (__p[415] < 0)
LABEL_23:
    operator delete(*((void **)__p + 49));
LABEL_24:
  v16 = (void **)(__p + 312);
  if (__p[384])
  {
    if (__p[335] < 0)
      operator delete(*v16);
    if (__p[304])
      goto LABEL_28;
  }
  else
  {
    (*(void (**)(void **))*v16)(v16);
    if (__p[304])
    {
LABEL_28:
      if (__p[255] < 0)
        operator delete(*v2);
      goto LABEL_54;
    }
  }
  (*(void (**)(void **))*v2)(v2);
LABEL_54:
  v18 = 0;
  v17 = 0;
LABEL_55:
  _ZZN7AMSCore7finallyIZNS_21BuiltInMescalProvider20ensureSessionIsValidENSt3__110shared_ptrINS_4IBagEEENS3_IKNS_11IBundleInfoEEENS2_6chrono10time_pointINS9_12system_clockENS9_8durationIxNS2_5ratioILl1ELl1000000EEEEEEEE3__0EEDaOT_EN7FinallyD1Ev((uint64_t *)__p + 62);
LABEL_56:
  v32 = (char *)*((_QWORD *)__p + 18);
  if (v32 == __p + 120)
  {
    v33 = 4;
    v32 = __p + 120;
    goto LABEL_60;
  }
  if (v32)
  {
    v33 = 5;
LABEL_60:
    (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  do
  {
    v34 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v35)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v18)
  {
    v36 = (unint64_t *)&v18->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v17)
  {
    v38 = (unint64_t *)&v17->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [25]>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[8];
  void *__p[2];
  __int128 v26;
  int v27;
  uint64_t v28[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v9 = result;
    v10 = MEMORY[0x1E0DE4FE0];
    v11 = MEMORY[0x1E0DE4FE0] + 64;
    v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v28[0] = MEMORY[0x1E0DE4FE0] + 64;
    v23 = v13;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v13 - 24)) = v14;
    v15 = (std::ios_base *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24));
    std::ios_base::init(v15, v24);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v23 = v10 + 24;
    v28[0] = v11;
    std::streambuf::basic_streambuf();
    v16 = MEMORY[0x1E0DE4FB8];
    v24[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v26 = 0u;
    v27 = 16;
    v17 = *(_QWORD *)(v23 - 24);
    if ((v18 & 1) == 0
    {
    }
    v19 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v23, (uint64_t)a5, v19);
    v20 = v24[5];
    v21 = (char *)&v24[-1] + *(_QWORD *)(v23 - 24);
    if ((v21[32] & 5) != 0)
    {
      v22 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5) + 32))(&rep, *((_QWORD *)v21 + 5), 0, 1, 16);
      v22 = v33;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v30 = a2;
    v31 = v20;
    v32 = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v9 + 16) + 16))(*(_QWORD *)(v9 + 16), a3, a4, &rep);
    v23 = *v12;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24)) = v12[3];
    v24[0] = v16 + 16;
    if (SBYTE7(v26) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v28);
  }
  return result;
}

void sub_18CC708D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_BYTE *AMSCore::nestedError<std::expected<AMSCore::CachedCertificate,AMSCore::Error> &>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22[2];
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::runtime_error v30;
  __int128 v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  __int128 v35;
  char v36;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v30, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v31 = *(_OWORD *)(a2 + 16);
    v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v32 = *(unsigned int ***)(a2 + 32);
    v33 = (unsigned int *)v9;
    v34 = *(unsigned int **)(a2 + 48);
    if (v34)
    {
      *(_QWORD *)(v9 + 16) = &v33;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v32 = &v33;
    }
    v35 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v36 = 1;
    std::runtime_error::runtime_error(&v19, &v30);
    v20 = v31;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v21 = v32;
    v22[0] = v33;
    v22[1] = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = v22;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v21 = v22;
    }
    v23 = v35;
    v35 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v24, (uint64_t)&v19, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v24);
    *((_OWORD *)v4 + 1) = v25;
    *(_QWORD *)v4 = off_1E2521330;
    v10 = v27;
    *((_QWORD *)v4 + 4) = v26;
    *((_QWORD *)v4 + 5) = v10;
    v11 = v4 + 40;
    v12 = v28;
    *((_QWORD *)v4 + 6) = v28;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v10 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11;
    }
    *(_OWORD *)(v4 + 56) = v29;
    v29 = 0uLL;
    v4[72] = 1;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v24);
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v19);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      return (_BYTE *)MEMORY[0x18D7898AC](&v30);
    }
  }
  return result;
}

void sub_18CC70B94(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC70BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

_BYTE *AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22[2];
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::runtime_error v30;
  __int128 v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  __int128 v35;
  char v36;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v30, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v31 = *(_OWORD *)(a2 + 16);
    v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v32 = *(unsigned int ***)(a2 + 32);
    v33 = (unsigned int *)v9;
    v34 = *(unsigned int **)(a2 + 48);
    if (v34)
    {
      *(_QWORD *)(v9 + 16) = &v33;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v32 = &v33;
    }
    v35 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v36 = 1;
    std::runtime_error::runtime_error(&v19, &v30);
    v20 = v31;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v21 = v32;
    v22[0] = v33;
    v22[1] = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = v22;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v21 = v22;
    }
    v23 = v35;
    v35 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v24, (uint64_t)&v19, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v24);
    *((_OWORD *)v4 + 1) = v25;
    *(_QWORD *)v4 = off_1E2521330;
    v10 = v27;
    *((_QWORD *)v4 + 4) = v26;
    *((_QWORD *)v4 + 5) = v10;
    v11 = v4 + 40;
    v12 = v28;
    *((_QWORD *)v4 + 6) = v28;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v10 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11;
    }
    *(_OWORD *)(v4 + 56) = v29;
    v29 = 0uLL;
    v4[72] = 1;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v24);
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v19);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      return (_BYTE *)MEMORY[0x18D7898AC](&v30);
    }
  }
  return result;
}

void sub_18CC70E20(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC70E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

uint64_t *_ZZN7AMSCore7finallyIZNS_21BuiltInMescalProvider20ensureSessionIsValidENSt3__110shared_ptrINS_4IBagEEENS3_IKNS_11IBundleInfoEEENS2_6chrono10time_pointINS9_12system_clockENS9_8durationIxNS2_5ratioILl1ELl1000000EEEEEEEE3__0EEDaOT_EN7FinallyD1Ev(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  uint64_t v17;
  std::ios_base *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void (**v29)(_QWORD);
  std::__shared_weak_count *v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void (**v38)(_QWORD);
  _QWORD v39[8];
  __int128 __p;
  __int128 v41;
  int v42;
  uint64_t v43[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (!*(_BYTE *)(*a1 + 120))
  {
    AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v34);
    LOBYTE(rep) = 0;
    v48 = 0;
    (*(void (**)(void (***__return_ptr)(_QWORD), uint64_t, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(*(_QWORD *)v34 + 48))(&v38, v34, "mescal-certificate", 18, &rep);
    if (v48)
    {
      if ((_DWORD)v47 != -1)
        ((void (*)(void (***)(_QWORD), std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))off_1E253D240[v47])(&v29, &rep);
      LODWORD(v47) = -1;
    }
    if (!(_BYTE)__p)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v29);
      AMSCore::Logger::log<char [30],AMSCore::Error>((uint64_t)v29, 3, (uint64_t)"fairplay", 8, "Failed to clear certificate: ", (uint64_t)&v38);
      v3 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (!(_BYTE)__p)
        (*v38)(&v38);
    }
    LOBYTE(v29) = 0;
    v32 = 0;
    (*(void (**)(void (***__return_ptr)(_QWORD), uint64_t, const char *, uint64_t, void (***)(_QWORD)))(*(_QWORD *)v34 + 48))(&v38, v34, "mescal-certificate-expiration", 29, &v29);
    if (v32)
    {
      if (v31 != -1)
        ((void (*)(uint64_t *, void (***)(_QWORD)))off_1E253D240[v31])(&v36, &v29);
      v31 = -1;
    }
    if (!(_BYTE)__p)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v36);
      AMSCore::Logger::log<char [41],AMSCore::Error>(v36, 3, (uint64_t)"fairplay", 8, "Failed to clear certificate expiration: ", (uint64_t)&v38);
      v6 = v37;
      if (v37)
      {
        v7 = (unint64_t *)&v37->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (!(_BYTE)__p)
        (*v38)(&v38);
    }
    v9 = v35;
    if (v35)
    {
      v10 = (unint64_t *)&v35->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v2 + 104) + 40))(&v29);
    if (!v33)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v36);
      v12 = v36;
      if (*(int *)(v36 + 8) <= 4)
      {
        v13 = MEMORY[0x1E0DE4FE0];
        v14 = MEMORY[0x1E0DE4FE0] + 64;
        v15 = MEMORY[0x1E0DE4F60];
        v16 = *(void (***)(_QWORD))(MEMORY[0x1E0DE4F60] + 8);
        v17 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
        v43[0] = MEMORY[0x1E0DE4FE0] + 64;
        v38 = v16;
        *(_QWORD *)((char *)&v39[-1] + (_QWORD)*(v16 - 3)) = v17;
        v18 = (std::ios_base *)((char *)&v39[-1] + (_QWORD)*(v38 - 3));
        std::ios_base::init(v18, v39);
        v18[1].__vftable = 0;
        v18[1].__fmtflags_ = -1;
        v38 = (void (**)(_QWORD))(v13 + 24);
        v43[0] = v14;
        std::streambuf::basic_streambuf();
        v19 = MEMORY[0x1E0DE4FB8];
        v39[0] = MEMORY[0x1E0DE4FB8] + 16;
        __p = 0u;
        v41 = 0u;
        v42 = 16;
        v20 = (uint64_t)*(v38 - 3);
        if ((v21 & 1) == 0
        {
        }
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Failed to reset mescal state", 28);
        AMSCore::operator<<(&v38, (uint64_t)&v29);
        v22 = v39[5];
        v23 = (char *)&v39[-1] + (_QWORD)*(v38 - 3);
        if ((v23[32] & 5) != 0)
        {
          v24 = -1;
        }
        else
        {
          (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v23 + 5) + 32))(&rep, *((_QWORD *)v23 + 5), 0, 1, 16);
          v24 = v49;
        }
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v45 = 4;
        v46 = v22;
        v47 = v24;
        (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v12 + 16) + 16))(*(_QWORD *)(v12 + 16), "fairplay", 8, &rep);
        v38 = *(void (***)(_QWORD))v15;
        *(_QWORD *)((char *)&v39[-1] + (_QWORD)*(v38 - 3)) = *(_QWORD *)(v15 + 24);
        v39[0] = v19 + 16;
        if (SBYTE7(v41) < 0)
          operator delete((void *)__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D789B58](v43);
      }
      v25 = v37;
      if (v37)
      {
        v26 = (unint64_t *)&v37->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (!v33)
        (*v29)(&v29);
    }
  }
  return a1;
}

void sub_18CC71328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::`anonymous namespace'::loadSession(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  const std::runtime_error *v4;
  char v5;
  std::runtime_error v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  const void *v27;
  size_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int **v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::runtime_error v39;
  __int128 v40;
  unsigned int **v41;
  unsigned int *v42;
  uint64_t v43;
  __int128 v44;
  std::runtime_error v45;
  __int128 v46;
  unsigned int **v47;
  unsigned int *v48;
  uint64_t v49;
  __int128 v50;
  char v51;
  std::runtime_error v52;
  __int128 v53;
  unsigned int **v54;
  unsigned int *v55;
  uint64_t v56;
  __int128 v57;

  v1 = *(_QWORD *)(a1 + 312);
  if (*(_BYTE *)(v1 + 88))
  {
    v3 = a1 + 152;
    v4 = (const std::runtime_error *)(v1 + 8);
    v5 = *(_BYTE *)(v1 + 80);
    if (v5)
    {
      v6 = *v4;
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(v1 + 24);
      *(std::runtime_error *)v3 = v6;
      *(_QWORD *)(v1 + 16) = 0;
      *(_QWORD *)(v1 + 24) = 0;
      v4->__vftable = 0;
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(v1 + 32);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v4);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v1 + 24);
      v7 = (_QWORD *)(v1 + 48);
      v8 = *(_QWORD *)(v1 + 48);
      *(_QWORD *)(a1 + 192) = v8;
      v9 = a1 + 192;
      *(_QWORD *)(a1 + 152) = off_1E2521330;
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(v1 + 40);
      v10 = *(_QWORD *)(v1 + 56);
      *(_QWORD *)(a1 + 200) = v10;
      if (v10)
      {
        *(_QWORD *)(v8 + 16) = v9;
        *(_QWORD *)(v1 + 40) = v7;
        *v7 = 0;
        *(_QWORD *)(v1 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 184) = v9;
      }
      v11 = *(_QWORD *)(a1 + 312);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(v11 + 64);
      *(_QWORD *)(v11 + 64) = 0;
      *(_QWORD *)(v11 + 72) = 0;
    }
    *(_BYTE *)(a1 + 224) = v5;
    v12 = *(_QWORD *)(a1 + 320);
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        v15 = *(std::__shared_weak_count **)(a1 + 320);
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v16 = *(std::__shared_weak_count **)(a1 + 272);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(std::__shared_weak_count **)(a1 + 304);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = a1 + 16;
    v23 = *(std::__shared_weak_count **)(a1 + 288);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    AMSCore::nestedError<std::expected<AMSCore::CachedCertificate,AMSCore::Error> &,char const(&)[20]>(&v45, v3, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v51)
    {
      std::runtime_error::runtime_error(&v39, &v45);
      v40 = v46;
      v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v41 = v47;
      v42 = v48;
      v43 = v49;
      if (v49)
      {
        *((_QWORD *)v48 + 2) = &v42;
        v47 = &v48;
        v48 = 0;
        v49 = 0;
      }
      else
      {
        v41 = &v42;
      }
      v44 = v50;
      v50 = 0uLL;
      std::runtime_error::runtime_error(&v52, &v39);
      v53 = v40;
      v29 = v42;
      v52.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v54 = v41;
      v55 = v42;
      v56 = v43;
      if (v43)
      {
        *((_QWORD *)v42 + 2) = &v55;
        v29 = 0;
        v41 = &v42;
        v42 = 0;
        v43 = 0;
      }
      else
      {
        v54 = &v55;
      }
      v57 = v44;
      v44 = 0uLL;
      v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v41, v29);
      MEMORY[0x18D7898AC](&v39);
      if (*(_BYTE *)(a1 + 104))
      {
        if (*(_BYTE *)(a1 + 96))
        {
          if (*(char *)(a1 + 47) < 0)
            operator delete(*(void **)(a1 + 24));
        }
        else
        {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        }
        *(_BYTE *)(a1 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v52);
      v31 = v54;
      v30 = v55;
      *(_QWORD *)(a1 + 64) = v55;
      v32 = a1 + 64;
      *(_OWORD *)(a1 + 40) = v53;
      *(_QWORD *)(a1 + 24) = off_1E2521330;
      *(_QWORD *)(a1 + 56) = v31;
      v33 = v56;
      *(_QWORD *)(a1 + 72) = v56;
      if (v33)
      {
        *((_QWORD *)v30 + 2) = v32;
        v30 = 0;
        v54 = &v55;
        v55 = 0;
        v56 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 56) = v32;
      }
      v22 = a1 + 16;
      *(_OWORD *)(a1 + 80) = v57;
      v57 = 0uLL;
      *(_BYTE *)(a1 + 96) = 0;
      *(_BYTE *)(a1 + 104) = 1;
      v52.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v54, v30);
      MEMORY[0x18D7898AC](&v52);
      if (v51)
      {
        v45.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v34 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        if (*((_QWORD *)&v50 + 1))
        {
          v35 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v47, v48);
        MEMORY[0x18D7898AC](&v45);
      }
      if (*(_BYTE *)(a1 + 224))
      {
LABEL_64:
        if (*(char *)(a1 + 175) < 0)
          operator delete(*(void **)v3);
        goto LABEL_69;
      }
LABEL_68:
      (**(void (***)(uint64_t))v3)(v3);
LABEL_69:
      *(_QWORD *)(a1 + 152) = v22;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 328) = 1;
      AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)v3);
      return;
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v26 = *(char *)(a1 + 175);
      v27 = v26 >= 0 ? (const void *)v3 : *(const void **)(a1 + 152);
      v28 = v26 >= 0 ? *(unsigned __int8 *)(a1 + 175) : *(_QWORD *)(a1 + 160);
      AMSCore::setCacheValues(v27, v28, *(_QWORD *)(a1 + 176));
      if (*(_BYTE *)(a1 + 224))
      {
        if (*(_BYTE *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
          {
            if (*(char *)(a1 + 47) < 0)
              operator delete(*(void **)(a1 + 24));
          }
          else
          {
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          }
        }
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v3;
        v37 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 8) = 0;
        *(_QWORD *)(v3 + 16) = 0;
        *(_QWORD *)v3 = 0;
        v38 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 40) = v37;
        *(_QWORD *)(a1 + 48) = v38;
        *(_BYTE *)(a1 + 96) = 1;
        *(_BYTE *)(a1 + 104) = 1;
        if (*(_BYTE *)(a1 + 224))
          goto LABEL_64;
        goto LABEL_68;
      }
    }
  }
  __break(1u);
}

void sub_18CC718DC(void *a1)
{
  uint64_t v1;

  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC718F8()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC718A0);
}

void sub_18CC71900(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 328) = 1;
  _Unwind_Resume(a1);
}

void AMSCore::`anonymous namespace'::loadSession(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  if ((__p[328] & 1) == 0)
  {
    v2 = *((_QWORD *)__p + 40);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 40);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 34);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 38);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 36);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = (char *)*((_QWORD *)__p + 18);
  if (v15 == __p + 120)
  {
    v16 = 4;
    v15 = __p + 120;
  }
  else
  {
    if (!v15)
      goto LABEL_27;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_27:
  if (__p[104])
  {
    if (__p[96])
    {
      if (__p[47] < 0)
        operator delete(*((void **)__p + 3));
    }
    else
    {
      (**((void (***)(char *))__p + 3))(__p + 24);
    }
  }
  do
  {
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v18)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 30);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)__p + 32);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(__p);
}

_BYTE *AMSCore::nestedError<std::expected<AMSCore::CachedCertificate,AMSCore::Error> &,char const(&)[20]>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error *v11;
  unsigned int *v12;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error v25;
  std::runtime_error v26;
  unsigned int **v27;
  unsigned int *v28;
  std::runtime_error_vtbl *v29;
  __int128 v30;
  std::system_error v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::runtime_error v36;
  std::runtime_error v37;
  unsigned int **v38;
  unsigned int *v39;
  std::runtime_error_vtbl *v40;
  __int128 v41;
  char v42;
  std::string __what_arg;
  std::error_code v44;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v36, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v37 = *(std::runtime_error *)(a2 + 16);
    v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v38 = *(unsigned int ***)(a2 + 32);
    v39 = (unsigned int *)v9;
    v40 = *(std::runtime_error_vtbl **)(a2 + 48);
    if (v40)
    {
      *(_QWORD *)(v9 + 16) = &v39;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v38 = &v39;
    }
    v41 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v42 = 1;
    std::runtime_error::runtime_error(&v25, &v36);
    v26 = v37;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = v38;
    v28 = v39;
    v29 = v40;
    if (v40)
    {
      *((_QWORD *)v39 + 2) = &v28;
      v38 = &v39;
      v39 = 0;
      v40 = 0;
    }
    else
    {
      v27 = &v28;
    }
    v30 = v41;
    v41 = 0uLL;
    AMSCore::StringUtils::join<char [20]>(&__what_arg, "load session failed");
    *(_QWORD *)&v44.__val_ = a3;
    v44.__cat_ = a4;
    std::system_error::system_error(&v31, v44, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    v33 = 0;
    v34 = 0;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v32 = &v33;
    v10 = operator new();
    v11 = std::runtime_error::runtime_error((std::runtime_error *)v10, &v25);
    v11[1] = v26;
    v11->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v12 = v28;
    v11[2].__vftable = (std::runtime_error_vtbl *)v27;
    v11[2].__imp_.__imp_ = (const char *)v12;
    p_imp = &v11[2].__imp_;
    v14 = v29;
    v11[3].__vftable = v29;
    if (v14)
    {
      *((_QWORD *)v12 + 2) = p_imp;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      *(_QWORD *)(v10 + 32) = p_imp;
    }
    *(_OWORD *)(v10 + 56) = v30;
    v30 = 0uLL;
    *(_QWORD *)&v35 = v10;
    v15 = (_QWORD *)operator new();
    *v15 = &off_1E2523B58;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v10;
    *((_QWORD *)&v35 + 1) = v15;
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v31);
    *((_OWORD *)v4 + 1) = v31.__ec_;
    *(_QWORD *)v4 = off_1E2521330;
    v16 = v33;
    *((_QWORD *)v4 + 4) = v32;
    *((_QWORD *)v4 + 5) = v16;
    v17 = v4 + 40;
    v18 = v34;
    *((_QWORD *)v4 + 6) = v34;
    if (v18)
    {
      *(_QWORD *)(v16 + 16) = v17;
      v16 = 0;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v17;
    }
    *(_OWORD *)(v4 + 56) = v35;
    v35 = 0uLL;
    v4[72] = 1;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, (unsigned int *)v16);
    MEMORY[0x18D7898AC](&v31);
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v28);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v25);
    if (v42)
    {
      v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, v39);
      return (_BYTE *)MEMORY[0x18D7898AC](&v36);
    }
  }
  return result;
}

void sub_18CC71E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned int *a23)
{
  uint64_t v23;
  uint64_t v24;

  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v23, a23);
  MEMORY[0x18D7898AC](&a18);
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CC71EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Exception *v27;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a27);
  _Unwind_Resume(v27);
}

void sub_18CC71EB8()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x18CC71EA0);
}

uint64_t AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = (void **)(a1 + 8);
    if (*(_BYTE *)(a1 + 80))
    {
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v5);
    }
    else
    {
      (*(void (**)(void **))*v5)(v5);
    }
  }
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

uint64_t AMSCore::StringUtils::join<char [20]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC720C4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t std::optional<AMSCore::Error>::operator=[abi:fe180100]<AMSCore::Error,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v4 = (_QWORD *)(a2 + 40);
  if (*(_BYTE *)(a1 + 72))
  {
    std::runtime_error::operator=((std::runtime_error *)a1, (const std::runtime_error *)a2);
    v6 = a1 + 40;
    v5 = *(unsigned int **)(a1 + 40);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 32, v5);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v8;
    if (v8)
    {
      *(_QWORD *)(v7 + 16) = v6;
      *(_QWORD *)(a2 + 32) = v4;
      *v4 = 0;
      v4[1] = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v6;
    }
    v12 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v13 = *(std::__shared_weak_count **)(a1 + 64);
    *(_OWORD *)(a1 + 56) = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
    *(_QWORD *)a1 = MEMORY[0x1E0DE4F90] + 16;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)a1 = off_1E2521330;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v9;
    v10 = a1 + 40;
    v11 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v11;
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = v10;
      *(_QWORD *)(a2 + 32) = v4;
      *v4 = 0;
      v4[1] = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v10;
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

void AMSCore::`anonymous namespace'::BuiltInNativeMescal::~BuiltInNativeMescal(AMSCore::_anonymous_namespace_::BuiltInNativeMescal *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E2520700;
  if (*((_BYTE *)this + 88) || (IPaI1oem5iL(*((_QWORD *)this + 1)), *((_BYTE *)this + 88)))
  {
    *((_QWORD *)this + 2) = off_1E2521330;
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 48, *((unsigned int **)this + 7));
    MEMORY[0x18D7898AC]((char *)this + 16);
  }
}

{
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::`anonymous namespace'::BuiltInNativeMescal::prepareExchange(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v5;
  int v6;
  const void *v7;
  size_t v8;
  std::runtime_error_vtbl *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int **v19;
  unsigned int *v20[2];
  char v21;
  _DWORD __len[3];
  std::runtime_error __dst;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  _QWORD v30[3];
  std::runtime_error v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 88))
  {
    memset(__len, 0, sizeof(__len));
    memset(v30, 0, sizeof(v30));
    v21 = -1;
    Mib5yocT(200, (uint64_t)v30, *(_QWORD *)(a1 + 8), a2, a3, (uint64_t)&__len[1], (uint64_t)__len, (uint64_t)&v21);
    if (v6 || v21 == 255)
    {
      BYTE7(v32) = 5;
      strcpy((char *)&v31, "CCode");
      *((_QWORD *)&v32 + 1) = v21;
      LODWORD(v35) = 3;
      v20[0] = 0;
      v20[1] = 0;
      v19 = v20;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v19, (uint64_t *)v20, (const void **)&v31.__vftable, (__int128 *)&v31);
      AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&__dst, 0x259u, &v19);
      std::runtime_error::runtime_error((std::runtime_error *)a4, &__dst);
      *(_OWORD *)(a4 + 16) = v24;
      *(_QWORD *)a4 = off_1E2521330;
      v13 = v26;
      *(_QWORD *)(a4 + 32) = v25;
      *(_QWORD *)(a4 + 40) = v13;
      v14 = a4 + 40;
      v15 = v27;
      *(_QWORD *)(a4 + 48) = v27;
      if (v15)
      {
        *(_QWORD *)(v13 + 16) = v14;
        v25 = &v26;
        v26 = 0;
        v27 = 0;
        v13 = 0;
      }
      else
      {
        *(_QWORD *)(a4 + 32) = v14;
      }
      *(_OWORD *)(a4 + 56) = v28;
      v28 = 0uLL;
      *(_BYTE *)(a4 + 72) = 0;
      __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, (unsigned int *)v13);
      MEMORY[0x18D7898AC](&__dst);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, v20[0]);
      if ((_DWORD)v35 != -1)
        ((void (*)(char *, char *))off_1E253D240[v35])(&v29, (char *)&v32 + 8);
      LODWORD(v35) = -1;
      if (SBYTE7(v32) < 0)
      {
        operator delete(v31.__vftable);
        v18 = *(_QWORD *)&__len[1];
        if (!*(_QWORD *)&__len[1])
          return;
      }
      else
      {
        v18 = *(_QWORD *)&__len[1];
        if (!*(_QWORD *)&__len[1])
          return;
      }
      goto LABEL_27;
    }
    v7 = *(const void **)&__len[1];
    v8 = __len[0];
    if (__len[0] >= 0x17u)
    {
      v16 = (__len[0] & 0xFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v16 = __len[0] | 7;
      v17 = v16 + 1;
      p_dst = (std::runtime_error_vtbl *)operator new(v16 + 1);
      __dst.__imp_.__imp_ = (const char *)v8;
      *(_QWORD *)&v24 = v17 | 0x8000000000000000;
      __dst.__vftable = p_dst;
    }
    else
    {
      BYTE7(v24) = __len[0];
      p_dst = (std::runtime_error_vtbl *)&__dst;
      if (!__len[0])
      {
LABEL_20:
        *((_BYTE *)&p_dst->~runtime_error + v8) = 0;
        *(std::runtime_error *)a4 = __dst;
        *(_QWORD *)(a4 + 16) = v24;
        *(_BYTE *)(a4 + 72) = 1;
        v18 = *(_QWORD *)&__len[1];
        if (!*(_QWORD *)&__len[1])
          return;
LABEL_27:
        jEHf8Xzsv8K(v18);
        return;
      }
    }
    memmove(p_dst, v7, v8);
    goto LABEL_20;
  }
  AMSCore::Error::Error(&__dst, (const std::runtime_error *)(a1 + 16));
  std::runtime_error::runtime_error(&v31, &__dst);
  v32 = v24;
  v31.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v5 = (unsigned int *)v26;
  v33 = v25;
  v34 = v26;
  v35 = v27;
  if (v27)
  {
    *(_QWORD *)(v26 + 16) = &v34;
    v25 = &v26;
    v26 = 0;
    v27 = 0;
    v5 = 0;
  }
  else
  {
    v33 = &v34;
  }
  v36 = v28;
  v28 = 0uLL;
  __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, v5);
  MEMORY[0x18D7898AC](&__dst);
  std::runtime_error::runtime_error((std::runtime_error *)a4, &v31);
  *(_OWORD *)(a4 + 16) = v32;
  *(_QWORD *)a4 = off_1E2521330;
  v10 = v34;
  *(_QWORD *)(a4 + 32) = v33;
  *(_QWORD *)(a4 + 40) = v10;
  v11 = a4 + 40;
  v12 = v35;
  *(_QWORD *)(a4 + 48) = v35;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    v10 = 0;
    v33 = &v34;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    *(_QWORD *)(a4 + 32) = v11;
  }
  *(_OWORD *)(a4 + 56) = v36;
  v36 = 0uLL;
  *(_BYTE *)(a4 + 72) = 0;
  v31.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v33, (unsigned int *)v10);
  MEMORY[0x18D7898AC](&v31);
}

void sub_18CC7269C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::`anonymous namespace'::BuiltInNativeMescal::exchange(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15[2];
  char v16;
  int v17;
  uint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  _QWORD v26[3];
  std::runtime_error v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 88))
  {
    AMSCore::Error::Error(&v19, (const std::runtime_error *)(a1 + 16));
    std::runtime_error::runtime_error(&v27, &v19);
    v28 = v20;
    v27.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v5 = (unsigned int *)v22;
    v29 = v21;
    v30 = v22;
    v31 = v23;
    if (v23)
    {
      *(_QWORD *)(v22 + 16) = &v30;
      v21 = &v22;
      v22 = 0;
      v23 = 0;
      v5 = 0;
    }
    else
    {
      v29 = &v30;
    }
    v32 = v24;
    v24 = 0uLL;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v5);
    MEMORY[0x18D7898AC](&v19);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v27);
    *(_OWORD *)(a4 + 16) = v28;
    *(_QWORD *)a4 = off_1E2521330;
    v8 = v30;
    *(_QWORD *)(a4 + 32) = v29;
    *(_QWORD *)(a4 + 40) = v8;
    v9 = a4 + 40;
    v10 = v31;
    *(_QWORD *)(a4 + 48) = v31;
    if (v10)
    {
      *(_QWORD *)(v8 + 16) = v9;
      v8 = 0;
      v29 = &v30;
      v30 = 0;
      v31 = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v9;
    }
    *(_OWORD *)(a4 + 56) = v32;
    v32 = 0uLL;
    *(_BYTE *)(a4 + 72) = 0;
    v27.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v29, (unsigned int *)v8);
    MEMORY[0x18D7898AC](&v27);
  }
  else
  {
    v18 = 0;
    v17 = 0;
    memset(v26, 0, sizeof(v26));
    v16 = -1;
    Mib5yocT(200, (uint64_t)v26, *(_QWORD *)(a1 + 8), a2, a3, (uint64_t)&v18, (uint64_t)&v17, (uint64_t)&v16);
    if (v6 || v16 == 255)
    {
      BYTE7(v28) = 5;
      strcpy((char *)&v27, "CCode");
      *((_QWORD *)&v28 + 1) = v16;
      LODWORD(v31) = 3;
      v15[0] = 0;
      v15[1] = 0;
      v14 = v15;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v14, (uint64_t *)v15, (const void **)&v27.__vftable, (__int128 *)&v27);
      AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v19, 0x25Au, &v14);
      std::runtime_error::runtime_error((std::runtime_error *)a4, &v19);
      *(_OWORD *)(a4 + 16) = v20;
      *(_QWORD *)a4 = off_1E2521330;
      v11 = v22;
      *(_QWORD *)(a4 + 32) = v21;
      *(_QWORD *)(a4 + 40) = v11;
      v12 = a4 + 40;
      v13 = v23;
      *(_QWORD *)(a4 + 48) = v23;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        v21 = &v22;
        v22 = 0;
        v23 = 0;
        v11 = 0;
      }
      else
      {
        *(_QWORD *)(a4 + 32) = v12;
      }
      *(_OWORD *)(a4 + 56) = v24;
      v24 = 0uLL;
      *(_BYTE *)(a4 + 72) = 0;
      v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, (unsigned int *)v11);
      MEMORY[0x18D7898AC](&v19);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v15[0]);
      if ((_DWORD)v31 != -1)
        ((void (*)(char *, char *))off_1E253D240[v31])(&v25, (char *)&v28 + 8);
      LODWORD(v31) = -1;
      if (SBYTE7(v28) < 0)
      {
        operator delete(v27.__vftable);
        v7 = v18;
        if (!v18)
          return;
      }
      else
      {
        v7 = v18;
        if (!v18)
          return;
      }
    }
    else
    {
      *(_BYTE *)(a4 + 72) = 1;
      v7 = v18;
      if (!v18)
        return;
    }
    jEHf8Xzsv8K(v7);
  }
}

void sub_18CC729F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::`anonymous namespace'::BuiltInNativeMescal::sign(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  std::runtime_error_vtbl *p_dst;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int **v19;
  unsigned int *v20[2];
  _DWORD __len[3];
  std::runtime_error __dst;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  std::runtime_error v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 88))
  {
    AMSCore::Error::Error(&__dst, (const std::runtime_error *)(a1 + 16));
    std::runtime_error::runtime_error(&v29, &__dst);
    v30 = v23;
    v5 = (unsigned int *)v25;
    v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v31 = v24;
    v32 = v25;
    v33 = v26;
    if (v26)
    {
      *(_QWORD *)(v25 + 16) = &v32;
      v24 = &v25;
      v25 = 0;
      v26 = 0;
      v5 = 0;
    }
    else
    {
      v31 = &v32;
    }
    v34 = v27;
    v27 = 0uLL;
    __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v5);
    MEMORY[0x18D7898AC](&__dst);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v29);
    *(_OWORD *)(a4 + 16) = v30;
    *(_QWORD *)a4 = off_1E2521330;
    v10 = v32;
    *(_QWORD *)(a4 + 32) = v31;
    *(_QWORD *)(a4 + 40) = v10;
    v11 = a4 + 40;
    v12 = v33;
    *(_QWORD *)(a4 + 48) = v33;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v10 = 0;
      v31 = &v32;
      v32 = 0;
      v33 = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v11;
    }
    *(_OWORD *)(a4 + 56) = v34;
    v34 = 0uLL;
    *(_BYTE *)(a4 + 72) = 0;
    v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v29);
    return;
  }
  memset(__len, 0, sizeof(__len));
  Fc3vhtJDvr(*(_QWORD *)(a1 + 8), a2, a3, (uint64_t)&__len[1], (uint64_t)__len);
  if (!v6)
  {
    v13 = *(const void **)&__len[1];
    v14 = __len[0];
    if (__len[0] >= 0x17u)
    {
      v17 = (__len[0] & 0xFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v17 = __len[0] | 7;
      v18 = v17 + 1;
      p_dst = (std::runtime_error_vtbl *)operator new(v17 + 1);
      __dst.__imp_.__imp_ = (const char *)v14;
      *(_QWORD *)&v23 = v18 | 0x8000000000000000;
      __dst.__vftable = p_dst;
    }
    else
    {
      BYTE7(v23) = __len[0];
      p_dst = (std::runtime_error_vtbl *)&__dst;
      if (!__len[0])
      {
LABEL_26:
        *((_BYTE *)&p_dst->~runtime_error + v14) = 0;
        *(std::runtime_error *)a4 = __dst;
        *(_QWORD *)(a4 + 16) = v23;
        *(_BYTE *)(a4 + 72) = 1;
        v16 = *(_QWORD *)&__len[1];
        if (!*(_QWORD *)&__len[1])
          return;
        goto LABEL_27;
      }
    }
    memmove(p_dst, v13, v14);
    goto LABEL_26;
  }
  BYTE7(v30) = 5;
  strcpy((char *)&v29, "CCode");
  *((_QWORD *)&v30 + 1) = v6;
  LODWORD(v33) = 3;
  v20[0] = 0;
  v20[1] = 0;
  v19 = v20;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v19, (uint64_t *)v20, (const void **)&v29.__vftable, (__int128 *)&v29);
  AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&__dst, 0x25Bu, &v19);
  std::runtime_error::runtime_error((std::runtime_error *)a4, &__dst);
  *(_OWORD *)(a4 + 16) = v23;
  *(_QWORD *)a4 = off_1E2521330;
  v7 = v25;
  *(_QWORD *)(a4 + 32) = v24;
  *(_QWORD *)(a4 + 40) = v7;
  v8 = a4 + 40;
  v9 = v26;
  *(_QWORD *)(a4 + 48) = v26;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    v24 = &v25;
    v25 = 0;
    v26 = 0;
    v7 = 0;
  }
  else
  {
    *(_QWORD *)(a4 + 32) = v8;
  }
  *(_OWORD *)(a4 + 56) = v27;
  v27 = 0uLL;
  *(_BYTE *)(a4 + 72) = 0;
  __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v7);
  MEMORY[0x18D7898AC](&__dst);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, v20[0]);
  if ((_DWORD)v33 != -1)
    ((void (*)(char *, char *))off_1E253D240[v33])(&v28, (char *)&v30 + 8);
  LODWORD(v33) = -1;
  if (SBYTE7(v30) < 0)
    operator delete(v29.__vftable);
  v16 = *(_QWORD *)&__len[1];
  if (*(_QWORD *)&__len[1])
LABEL_27:
    jEHf8Xzsv8K(v16);
}

void sub_18CC72D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::`anonymous namespace'::BuiltInNativeMescal::reset(AMSCore::_anonymous_namespace_::BuiltInNativeMescal *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  std::runtime_error __p;
  std::error_code ec;
  unsigned int **v20;
  unsigned int *v21;
  uint64_t v22;
  __int128 v23;
  unsigned int **v24;
  unsigned int *v25;
  uint64_t v26;
  std::system_error v27;
  unsigned int **v28;
  unsigned int *v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[3];
  std::runtime_error v33;
  char v34;
  uint64_t v35;
  unsigned int *v36[2];
  int v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::error_code v40;

  v39 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 88))
    IPaI1oem5iL(*((_QWORD *)this + 1));
  memset(v32, 0, sizeof(v32));
  cp2g1b9ro((uint64_t)this + 8, (uint64_t)v32);
  if (v4)
  {
    v34 = 5;
    strcpy((char *)&v33, "CCode");
    v35 = v4;
    v37 = 3;
    v25 = 0;
    v26 = 0;
    v24 = &v25;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v24, (uint64_t *)&v25, (const void **)&v33.__vftable, (__int128 *)&v33);
    AMSCore::StringUtils::join<>((std::string *)&__p);
    v40.__cat_ = (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance;
    *(_QWORD *)&v40.__val_ = 600;
    std::system_error::system_error(&v27, v40, (const std::string *)&__p);
    if (*((char *)&ec.__val_ + 7) < 0)
      operator delete(__p.__vftable);
    v27.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v28 = v24;
    v29 = v25;
    v30 = v26;
    if (v26)
    {
      *((_QWORD *)v25 + 2) = &v29;
      v24 = &v25;
      v25 = 0;
      v26 = 0;
    }
    else
    {
      v28 = &v29;
    }
    v31 = 0uLL;
    std::optional<AMSCore::Error>::operator=[abi:fe180100]<AMSCore::Error,void>((uint64_t)this + 16, (uint64_t)&v27);
    v27.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, v29);
    MEMORY[0x18D7898AC](&v27);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v25);
    if (v37 != -1)
      ((void (*)(std::runtime_error *, uint64_t *))off_1E253D240[v37])(&__p, &v35);
    v37 = -1;
    if (v34 < 0)
      operator delete(v33.__vftable);
    if (!*((_BYTE *)this + 88))
      __break(1u);
    AMSCore::Error::Error(&v33, (const std::runtime_error *)this + 1);
    AMSCore::Error::Error<>((uint64_t)&v27, (uint64_t)&v33, 607, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    std::runtime_error::runtime_error(&__p, &v27);
    ec = v27.__ec_;
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v11 = v29;
    v20 = v28;
    v21 = v29;
    v22 = v30;
    if (v30)
    {
      *((_QWORD *)v29 + 2) = &v21;
      v28 = &v29;
      v29 = 0;
      v30 = 0;
      v11 = 0;
    }
    else
    {
      v20 = &v21;
    }
    v23 = v31;
    v31 = 0uLL;
    v27.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, v11);
    MEMORY[0x18D7898AC](&v27);
    v33.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v12 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v36, v36[1]);
    MEMORY[0x18D7898AC](&v33);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &__p);
    *(std::error_code *)(a2 + 16) = ec;
    *(_QWORD *)a2 = off_1E2521330;
    v15 = v21;
    *(_QWORD *)(a2 + 32) = v20;
    *(_QWORD *)(a2 + 40) = v15;
    v16 = a2 + 40;
    v17 = v22;
    *(_QWORD *)(a2 + 48) = v22;
    if (v17)
    {
      *((_QWORD *)v15 + 2) = v16;
      v15 = 0;
      v20 = &v21;
      v21 = 0;
      v22 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v16;
    }
    *(_OWORD *)(a2 + 56) = v23;
    v23 = 0uLL;
    *(_BYTE *)(a2 + 72) = 0;
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, v15);
    MEMORY[0x18D7898AC](&__p);
  }
  else
  {
    if (*((_BYTE *)this + 88))
    {
      *((_QWORD *)this + 2) = off_1E2521330;
      v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
      if (v5)
      {
        v6 = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 48, *((unsigned int **)this + 7));
      MEMORY[0x18D7898AC]((char *)this + 16);
      *((_BYTE *)this + 88) = 0;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
}

void sub_18CC731B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::`anonymous namespace'::BuiltInNativeMescal::getDeviceType(uint64_t a1@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int *v8[2];
  std::runtime_error v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __int128 v16;
  char v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (v3 != -1)
  {
    v9.__vftable = (std::runtime_error_vtbl *)&v7;
    *(_QWORD *)&v16 = &v9;
  }
  {
    v17 = 5;
    strcpy((char *)&v16, "CCode");
    v19 = 3;
    v8[0] = 0;
    v8[1] = 0;
    v7 = v8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v7, (uint64_t *)v8, (const void **)&v16, &v16);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v9, 0x28Fu, &v7);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)a1 = off_1E2521330;
    v4 = v12;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v4;
    v5 = a1 + 40;
    v6 = v13;
    *(_QWORD *)(a1 + 48) = v13;
    if (v6)
    {
      *(_QWORD *)(v4 + 16) = v5;
      v11 = &v12;
      v12 = 0;
      v13 = 0;
      v4 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v5;
    }
    *(_OWORD *)(a1 + 56) = v14;
    v14 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v9.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v11, (unsigned int *)v4);
    MEMORY[0x18D7898AC](&v9);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v7, v8[0]);
    if (v19 != -1)
      ((void (*)(char *, _QWORD *))off_1E253D240[v19])(&v15, v18);
    v19 = -1;
    if (v17 < 0)
      operator delete((void *)v16);
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 1;
  }
}

void sub_18CC733F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__call_once_proxy[abi:fe180100]<std::tuple<AMSCore::`anonymous namespace'::BuiltInNativeMescal::getDeviceType(void)::{lambda(void)#1} &&>>()
{
  int v0;
  int v1;

  v1 = 0;
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;
  uint64_t v12;
  std::system_error v13;
  unsigned int **v14;
  unsigned int *v15;
  uint64_t v16;
  __int128 v17;
  std::string __what_arg;
  std::error_code v19;

  v4 = a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v10 = (unsigned int **)*a3;
  v11 = (unsigned int *)v6;
  v12 = a3[2];
  if (v12)
  {
    *(_QWORD *)(v6 + 16) = &v11;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v10 = &v11;
  }
  AMSCore::StringUtils::join<>(&__what_arg);
  *(_QWORD *)&v19.__val_ = v4;
  v19.__cat_ = (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance;
  std::system_error::system_error(&v13, v19, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v13.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v14 = v10;
  v15 = v11;
  v16 = v12;
  if (v12)
  {
    *((_QWORD *)v11 + 2) = &v15;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v14 = &v15;
  }
  v17 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v13);
  *(std::error_code *)(a1 + 16) = v13.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v7 = v15;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a1 + 40;
  v9 = v16;
  *(_QWORD *)(a1 + 48) = v16;
  if (v9)
  {
    *((_QWORD *)v7 + 2) = v8;
    v7 = 0;
    v14 = &v15;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v8;
  }
  *(_OWORD *)(a1 + 56) = v17;
  v17 = 0uLL;
  v13.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v7);
  MEMORY[0x18D7898AC](&v13);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, v11);
}

void sub_18CC735C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned int *a11)
{
  uint64_t v11;

  if (*(char *)(v11 - 49) < 0)
    operator delete(*(void **)(v11 - 72));
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void AMSCore::BuiltInAnisetteProvider::~BuiltInAnisetteProvider(AMSCore::BuiltInAnisetteProvider *this)
{
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::BuiltInAnisetteProvider::dispose()
{
  fy34trz2st();
}

void AMSCore::BuiltInAnisetteProvider::eraseProvisioning(uint64_t a1@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int *v7[2];
  std::runtime_error v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  __int128 v15;
  char v16;
  _QWORD v17[3];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  p435tmhbla();
  if (v2)
  {
    v16 = 5;
    strcpy((char *)&v15, "CCode");
    v17[0] = v2;
    v18 = 3;
    v7[0] = 0;
    v7[1] = 0;
    v6 = v7;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v6, (uint64_t *)v7, (const void **)&v15, &v15);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v8, 0x28Du, &v6);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
    *(_OWORD *)(a1 + 16) = v9;
    *(_QWORD *)a1 = off_1E2521330;
    v3 = v11;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v3;
    v4 = a1 + 40;
    v5 = v12;
    *(_QWORD *)(a1 + 48) = v12;
    if (v5)
    {
      *(_QWORD *)(v3 + 16) = v4;
      v10 = &v11;
      v11 = 0;
      v12 = 0;
      v3 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v4;
    }
    *(_OWORD *)(a1 + 56) = v13;
    v13 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v8.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v3);
    MEMORY[0x18D7898AC](&v8);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v6, v7[0]);
    if (v18 != -1)
      ((void (*)(char *, _QWORD *))off_1E253D240[v18])(&v14, v17);
    v18 = -1;
    if (v16 < 0)
      operator delete((void *)v15);
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 1;
  }
}

void sub_18CC737C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::BuiltInAnisetteProvider::finishProvisioning(uint64_t a1@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int *v10[2];
  std::runtime_error v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  __int128 v18;
  char v19;
  _QWORD v20[3];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  uv5t6nhkui();
  if (v5)
  {
    v19 = 5;
    strcpy((char *)&v18, "CCode");
    v20[0] = v5;
    v21 = 3;
    v10[0] = 0;
    v10[1] = 0;
    v9 = v10;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v9, (uint64_t *)v10, (const void **)&v18, &v18);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v11, 0x28Eu, &v9);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v11);
    *(_OWORD *)(a1 + 16) = v12;
    *(_QWORD *)a1 = off_1E2521330;
    v6 = v14;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v6;
    v7 = a1 + 40;
    v8 = v15;
    *(_QWORD *)(a1 + 48) = v15;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      v13 = &v14;
      v14 = 0;
      v15 = 0;
      v6 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v16;
    v16 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v11.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v13, (unsigned int *)v6);
    MEMORY[0x18D7898AC](&v11);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, v10[0]);
    if (v21 != -1)
      ((void (*)(char *, _QWORD *))off_1E253D240[v21])(&v17, v20);
    v21 = -1;
    if (v19 < 0)
      operator delete((void *)v18);
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 1;
  }
}

void sub_18CC739A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::BuiltInAnisetteProvider::getAnisetteHeaders(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  std::runtime_error_vtbl *v13;
  const char *imp;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  std::runtime_error_vtbl *v19;
  unsigned int **v20;
  unsigned int *v21[2];
  std::runtime_error v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  char v34;
  uint64_t v35[3];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v30 = 0;
  v29 = 0;
  v28 = 0;
  if (a2 == 2)
  {
    v5 = -1;
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    v5 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v5 = 0;
  }
  qi864985u0(v5, (uint64_t)&v31, (uint64_t)&v30, (uint64_t)&v29, (uint64_t)&v28);
  if (v6)
  {
    v34 = 5;
    strcpy((char *)&v33, "CCode");
    v35[0] = v6;
    v36 = 3;
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v20, (uint64_t *)v21, (const void **)&v33, &v33);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v22, 0x290u, &v20);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v22);
    *(_OWORD *)(a3 + 16) = v23;
    *(_QWORD *)a3 = off_1E2521330;
    v7 = v25;
    *(_QWORD *)(a3 + 32) = v24;
    *(_QWORD *)(a3 + 40) = v7;
    v8 = a3 + 40;
    v9 = v26;
    *(_QWORD *)(a3 + 48) = v26;
    if (v9)
    {
      *(_QWORD *)(v7 + 16) = v8;
      v24 = (uint64_t)&v25;
      v25 = 0;
      v26 = 0;
      v7 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v8;
    }
    *(_OWORD *)(a3 + 56) = v27;
    v27 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v7);
    MEMORY[0x18D7898AC](&v22);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, v21[0]);
    if (v36 != -1)
      ((void (*)(char *, uint64_t *))off_1E253D240[v36])(&v32, v35);
    v36 = -1;
    if (v34 < 0)
      operator delete((void *)v33);
    return;
  }
  v22 = (std::runtime_error)0;
  v23 = 0u;
  v24 = 1065353216;
  if (v30
    && ((AMSCore::Base64::encode(v31, v30, &v33), a2 != 2) ? (v10 = "X-Apple-MD-M") : (v10 = "X-Apple-AMD-M"),
        std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<char const*&,std::string>(&v22, v10, (uint64_t)&v33), v34 < 0))
  {
    operator delete((void *)v33);
    v11 = v28;
    if (!v28)
      goto LABEL_26;
  }
  else
  {
    v11 = v28;
    if (!v28)
      goto LABEL_26;
  }
  AMSCore::Base64::encode(v29, v11, &v33);
  if (a2 == 2)
    v12 = "X-Apple-AMD";
  else
    v12 = "X-Apple-MD";
  std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<char const*&,std::string>(&v22, v12, (uint64_t)&v33);
  if (v34 < 0)
    operator delete((void *)v33);
LABEL_26:
  v13 = v22.__vftable;
  imp = v22.__imp_.__imp_;
  v22.__vftable = 0;
  v22.__imp_.__imp_ = 0;
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = imp;
  v15 = *((_QWORD *)&v23 + 1);
  v16 = (char *)v23;
  *(_QWORD *)(a3 + 16) = v23;
  *(_QWORD *)(a3 + 24) = v15;
  *(_DWORD *)(a3 + 32) = v24;
  if (v15)
  {
    v17 = *((_QWORD *)v16 + 1);
    if (((unint64_t)imp & (unint64_t)(imp - 1)) != 0)
    {
      if (v17 >= (unint64_t)imp)
        v17 %= (unint64_t)imp;
    }
    else
    {
      v17 &= (unint64_t)(imp - 1);
    }
    *((_QWORD *)&v13->~runtime_error + v17) = a3 + 16;
    v23 = 0uLL;
    *(_BYTE *)(a3 + 72) = 1;
    goto LABEL_40;
  }
  *(_BYTE *)(a3 + 72) = 1;
  if (v16)
  {
    do
    {
      v18 = *(char **)v16;
      if (v16[63] < 0)
      {
        operator delete(*((void **)v16 + 5));
        if (v16[39] < 0)
LABEL_36:
          operator delete(*((void **)v16 + 2));
      }
      else if (v16[39] < 0)
      {
        goto LABEL_36;
      }
      operator delete(v16);
      v16 = v18;
    }
    while (v18);
  }
LABEL_40:
  v19 = v22.__vftable;
  v22.__vftable = 0;
  if (v19)
    operator delete(v19);
  if (v31)
    jk24uiwqrg(v31);
  if (v29)
    jk24uiwqrg(v29);
}

void sub_18CC73D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::BuiltInAnisetteProvider::startProvisioning(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  std::runtime_error_vtbl *p_dst;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int **v18;
  unsigned int *v19[2];
  std::runtime_error __dst;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  size_t __len;
  void *__src;
  char v28;
  __int128 v29;
  char v30;
  _QWORD v31[3];
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a3 == 2)
  {
    v5 = -1;
  }
  else if (*(_BYTE *)(a2 + 64))
  {
    v5 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v5 = 0;
  }
  __len = 0;
  __src = 0;
  v6 = *(_DWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v7 = v6;
  }
  rsegvyrt87(v5, a1, v7, (uint64_t)&__src, (uint64_t)&__len + 4, (uint64_t)&__len);
  if (v8)
  {
    v30 = 5;
    strcpy((char *)&v29, "CCode");
    v31[0] = v8;
    v32 = 3;
    v19[0] = 0;
    v19[1] = 0;
    v18 = v19;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v18, (uint64_t *)v19, (const void **)&v29, &v29);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&__dst, 0x291u, &v18);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &__dst);
    *(_OWORD *)(a4 + 16) = v21;
    *(_QWORD *)a4 = off_1E2521330;
    v9 = v23;
    *(_QWORD *)(a4 + 32) = v22;
    *(_QWORD *)(a4 + 40) = v9;
    v10 = a4 + 40;
    v11 = v24;
    *(_QWORD *)(a4 + 48) = v24;
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = v10;
      v22 = &v23;
      v23 = 0;
      v24 = 0;
      v9 = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v10;
    }
    *(_OWORD *)(a4 + 56) = v25;
    v25 = 0uLL;
    *(_BYTE *)(a4 + 72) = 0;
    __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v9);
    MEMORY[0x18D7898AC](&__dst);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v19[0]);
    if (v32 != -1)
      ((void (*)(char *, _QWORD *))off_1E253D240[v32])(&v28, v31);
    v32 = -1;
    if (v30 < 0)
      operator delete((void *)v29);
    return;
  }
  v12 = __src;
  v13 = HIDWORD(__len);
  if (HIDWORD(__len) >= 0x17)
  {
    v15 = (HIDWORD(__len) & 0xFFFFFFF8) + 8;
    if ((HIDWORD(__len) | 7) != 0x17)
      v15 = HIDWORD(__len) | 7;
    v16 = v15 + 1;
    p_dst = (std::runtime_error_vtbl *)operator new(v15 + 1);
    __dst.__imp_.__imp_ = (const char *)v13;
    *(_QWORD *)&v21 = v16 | 0x8000000000000000;
    __dst.__vftable = p_dst;
    goto LABEL_23;
  }
  BYTE7(v21) = BYTE4(__len);
  p_dst = (std::runtime_error_vtbl *)&__dst;
  if (HIDWORD(__len))
LABEL_23:
    memmove(p_dst, v12, v13);
  *((_BYTE *)&p_dst->~runtime_error + v13) = 0;
  v17 = __len;
  *(std::runtime_error *)a4 = __dst;
  *(_QWORD *)(a4 + 16) = v21;
  *(_DWORD *)(a4 + 24) = v17;
  *(_BYTE *)(a4 + 72) = 1;
  if (__src)
    jk24uiwqrg((uint64_t)__src);
}

void sub_18CC73FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<char const*&,std::string>(_QWORD *a1, const char *a2, uint64_t a3)
{
  char *v6;
  void *v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  const std::locale *v15;
  const std::locale::facet *v16;
  const std::locale::facet *v17;
  uint64_t v18;

  v6 = (char *)operator new(0x40uLL);
  v7 = v6 + 16;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v8 = strlen(a2);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    v7 = operator new(v10 + 1);
    *((_QWORD *)v6 + 3) = v9;
    *((_QWORD *)v6 + 4) = v11 | 0x8000000000000000;
    *((_QWORD *)v6 + 2) = v7;
    goto LABEL_8;
  }
  v6[39] = v8;
  if (v8)
LABEL_8:
    memcpy(v7, a2, v9);
  *((_BYTE *)v7 + v9) = 0;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v12 = v6[39];
  if (v12 >= 0)
    v13 = v6 + 16;
  else
    v13 = (char *)*((_QWORD *)v6 + 2);
  if (v12 >= 0)
    v14 = v6[39];
  else
    v14 = *((_QWORD *)v6 + 3);
  v15 = std::locale::classic();
  v16 = std::locale::use_facet(v15, MEMORY[0x1E0DE4A90]);
  if (v14)
  {
    v17 = v16;
    v18 = 0;
    do
    {
      v18 ^= 2
           * ((int (*)(const std::locale::facet *, _QWORD))v17->__vftable[1].__on_zero_shared)(v17, *v13++);
      --v14;
    }
    while (v14);
  }
  else
  {
    v18 = 0;
  }
  *((_QWORD *)v6 + 1) = v18;
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, (uint64_t)v6);
}

void sub_18CC7419C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
  {
    if (*(char *)(v1 + 63) < 0)
      operator delete(*(void **)(v1 + 40));
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    operator delete((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18CC741D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void AMSCore::BuiltInKeybagProvider::~BuiltInKeybagProvider(AMSCore::BuiltInKeybagProvider *this)
{
  JUMPOUT(0x18D789BDCLL);
}

uint64_t AMSCore::BuiltInKeybagProvider::import@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13[2];
  std::runtime_error v14[4];
  char v15;
  std::runtime_error v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  std::runtime_error v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!v15)
  {
    AMSCore::Error::Error(&v16, v14);
    std::runtime_error::runtime_error(&v23, &v16);
    v24 = v17;
    v3 = (unsigned int *)v19;
    v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v25 = v18;
    v26 = v19;
    v27 = v20;
    if (v20)
    {
      *(_QWORD *)(v19 + 16) = &v26;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
      v3 = 0;
    }
    else
    {
      v25 = &v26;
    }
    v28 = v21;
    v21 = 0uLL;
    v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v3);
    MEMORY[0x18D7898AC](&v16);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v23);
    *(_OWORD *)(a2 + 16) = v24;
    *(_QWORD *)a2 = off_1E2521330;
    v9 = v26;
    *(_QWORD *)(a2 + 32) = v25;
    *(_QWORD *)(a2 + 40) = v9;
    v10 = a2 + 40;
    v11 = v27;
    *(_QWORD *)(a2 + 48) = v27;
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = v10;
      v9 = 0;
      v25 = &v26;
      v26 = 0;
      v27 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v10;
    }
    *(_OWORD *)(a2 + 56) = v28;
    v28 = 0uLL;
    *(_BYTE *)(a2 + 72) = 0;
    v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, (unsigned int *)v9);
    result = MEMORY[0x18D7898AC](&v23);
    if (v15)
      return result;
    return ((uint64_t (*)(std::runtime_error *))v14[0].~runtime_error)(v14);
  }
  lCUad();
  if (v4)
  {
    BYTE7(v24) = 5;
    strcpy((char *)&v23, "CCode");
    *((_QWORD *)&v24 + 1) = v4;
    LODWORD(v27) = 3;
    v13[0] = 0;
    v13[1] = 0;
    v12 = v13;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v12, (uint64_t *)v13, (const void **)&v23.__vftable, (__int128 *)&v23);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v16, 0x294u, &v12);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v16);
    *(_OWORD *)(a2 + 16) = v17;
    *(_QWORD *)a2 = off_1E2521330;
    v5 = v19;
    *(_QWORD *)(a2 + 32) = v18;
    *(_QWORD *)(a2 + 40) = v5;
    v6 = a2 + 40;
    v7 = v20;
    *(_QWORD *)(a2 + 48) = v20;
    if (v7)
    {
      *(_QWORD *)(v5 + 16) = v6;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
      v5 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v6;
    }
    *(_OWORD *)(a2 + 56) = v21;
    v21 = 0uLL;
    *(_BYTE *)(a2 + 72) = 0;
    v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, (unsigned int *)v5);
    MEMORY[0x18D7898AC](&v16);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, v13[0]);
    if ((_DWORD)v27 != -1)
      ((void (*)(char *, char *))off_1E253D240[v27])(&v22, (char *)&v24 + 8);
    LODWORD(v27) = -1;
    if (SBYTE7(v24) < 0)
      operator delete(v23.__vftable);
  }
  else
  {
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (!v15)
    __break(1u);
  result = LODWORD(v14[0].__vftable);
  if (LODWORD(v14[0].__vftable))
  {
    result = VLxCLgDpiF((int)v14[0].__vftable);
    if (!v15)
      return ((uint64_t (*)(std::runtime_error *))v14[0].~runtime_error)(v14);
  }
  return result;
}

void sub_18CC74528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::BuiltInKeybagProvider::getSyncData@<X0>(AMSCore::BuiltInKeybagProvider *this@<X0>, const AMSCore::AccountIdentity *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  const void *v6;
  size_t v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  std::runtime_error_vtbl *p_dst;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unsigned int **v21;
  unsigned int *v22[2];
  _DWORD __len[3];
  std::runtime_error v24[4];
  char v25;
  std::runtime_error __dst;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  std::runtime_error v33;
  __int128 v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!v25)
  {
    AMSCore::Error::Error(&__dst, v24);
    std::runtime_error::runtime_error(&v33, &__dst);
    v34 = v27;
    v13 = (unsigned int *)v29;
    v33.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v35 = v28;
    v36 = v29;
    v37 = v30;
    if (v30)
    {
      *(_QWORD *)(v29 + 16) = &v36;
      v28 = &v29;
      v29 = 0;
      v30 = 0;
      v13 = 0;
    }
    else
    {
      v35 = &v36;
    }
    v38 = v31;
    v31 = 0uLL;
    __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, v13);
    MEMORY[0x18D7898AC](&__dst);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v33);
    *(_OWORD *)(a3 + 16) = v34;
    *(_QWORD *)a3 = off_1E2521330;
    v17 = v36;
    *(_QWORD *)(a3 + 32) = v35;
    *(_QWORD *)(a3 + 40) = v17;
    v18 = a3 + 40;
    v19 = v37;
    *(_QWORD *)(a3 + 48) = v37;
    if (v19)
    {
      *(_QWORD *)(v17 + 16) = v18;
      v17 = 0;
      v35 = &v36;
      v36 = 0;
      v37 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v18;
    }
    *(_OWORD *)(a3 + 56) = v38;
    v38 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v33.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v35, (unsigned int *)v17);
    result = MEMORY[0x18D7898AC](&v33);
    goto LABEL_35;
  }
  memset(__len, 0, sizeof(__len));
  Mt76Vq80ux(LODWORD(v24[0].__vftable), *((_QWORD *)a2 + 4), 0, 1, (uint64_t)&__len[1], (uint64_t)__len);
  v6 = *(const void **)&__len[1];
  v7 = __len[0];
  if (v5)
    v8 = 1;
  else
    v8 = *(_QWORD *)&__len[1] == 0;
  if (v8 || __len[0] == 0)
  {
    BYTE7(v34) = 5;
    strcpy((char *)&v33, "CCode");
    *((_QWORD *)&v34 + 1) = v5;
    LODWORD(v37) = 3;
    v22[0] = 0;
    v22[1] = 0;
    v21 = v22;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v21, (uint64_t *)v22, (const void **)&v33.__vftable, (__int128 *)&v33);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&__dst, 0x295u, &v21);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &__dst);
    *(_OWORD *)(a3 + 16) = v27;
    *(_QWORD *)a3 = off_1E2521330;
    v10 = v29;
    *(_QWORD *)(a3 + 32) = v28;
    *(_QWORD *)(a3 + 40) = v10;
    v11 = a3 + 40;
    v12 = v30;
    *(_QWORD *)(a3 + 48) = v30;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v28 = &v29;
      v29 = 0;
      v30 = 0;
      v10 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v11;
    }
    *(_OWORD *)(a3 + 56) = v31;
    v31 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&__dst);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    if ((_DWORD)v37 != -1)
      ((void (*)(char *, char *))off_1E253D240[v37])(&v32, (char *)&v34 + 8);
    LODWORD(v37) = -1;
    if (SBYTE7(v34) < 0)
      operator delete(v33.__vftable);
    v6 = *(const void **)&__len[1];
    if (!*(_QWORD *)&__len[1])
      goto LABEL_32;
  }
  else
  {
    if (__len[0] >= 0x17u)
    {
      v15 = (__len[0] & 0xFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v15 = __len[0] | 7;
      v16 = v15 + 1;
      p_dst = (std::runtime_error_vtbl *)operator new(v15 + 1);
      __dst.__imp_.__imp_ = (const char *)v7;
      *(_QWORD *)&v27 = v16 | 0x8000000000000000;
      __dst.__vftable = p_dst;
    }
    else
    {
      BYTE7(v27) = __len[0];
      p_dst = (std::runtime_error_vtbl *)&__dst;
    }
    memmove(p_dst, v6, v7);
    *((_BYTE *)&p_dst->~runtime_error + v7) = 0;
    *(std::runtime_error *)a3 = __dst;
    *(_QWORD *)(a3 + 16) = v27;
    *(_BYTE *)(a3 + 72) = 1;
  }
  jEHf8Xzsv8K((uint64_t)v6);
LABEL_32:
  if (!v25)
    __break(1u);
  result = LODWORD(v24[0].__vftable);
  if (LODWORD(v24[0].__vftable))
    result = VLxCLgDpiF((int)v24[0].__vftable);
LABEL_35:
  if (!v25)
    return ((uint64_t (*)(std::runtime_error *))v24[0].~runtime_error)(v24);
  return result;
}

void sub_18CC74908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::`anonymous namespace'::createContext(AMSCore::_anonymous_namespace_ *this, const FairPlayHWInfo_ *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  std::system_error_vtbl *p_p;
  std::system_error *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  const char *(__cdecl **p_what)(const std::runtime_error *__hidden);
  unint64_t v14;
  __int128 v15;
  char v16;
  std::system_error_vtbl *v17;
  int v18;
  BOOL v19;
  std::system_error_vtbl *v20;
  uint64_t v21;
  uint64_t v22;
  std::system_error_vtbl *v23;
  std::system_error_vtbl *v24;
  std::ios_base *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  std::runtime_error v31;
  std::error_code ec;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  std::system_error __p;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49[19];
  std::error_code v50;

  v38 = 0;
  v39 = 0;
  v40 = 0;
  std::string::append[abi:fe180100]<char const*,0>((unint64_t)&v38, "/private/var/mobile/Media/iTunes_Control/iTunes", "");
  v37 = 0;
  if (SHIBYTE(v40) < 0)
  {
    v4 = v39;
    if (v39 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:fe180100]();
    v5 = (char *)v38;
  }
  else
  {
    v4 = HIBYTE(v40);
    v5 = (char *)&v38;
  }
  v6 = &v5[v4];
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    p_p = (std::system_error_vtbl *)operator new(v9 + 1);
    __p.__imp_.__imp_ = (const char *)v4;
    *(_QWORD *)&__p.__ec_.__val_ = v10 | 0x8000000000000000;
    __p.__vftable = p_p;
  }
  else
  {
    *((_BYTE *)&__p.__ec_.__val_ + 7) = v4;
    p_p = (std::system_error_vtbl *)&__p;
    if (!v4)
    {
      v8 = &__p;
      goto LABEL_20;
    }
  }
  if (v4 < 0x20)
  {
    v8 = (std::system_error *)p_p;
  }
  else if ((unint64_t)((char *)p_p - v5) < 0x20)
  {
    v8 = (std::system_error *)p_p;
  }
  else
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFE0;
    v8 = (std::system_error *)((char *)p_p + (v4 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(v5 + 16);
    p_what = &p_p->what;
    v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *((_OWORD *)p_what - 1) = *(v12 - 1);
      *(_OWORD *)p_what = v15;
      v12 += 2;
      p_what += 4;
      v14 -= 32;
    }
    while (v14);
    if (v4 == v11)
      goto LABEL_20;
    v5 += v11;
  }
  do
  {
    v16 = *v5++;
    LOBYTE(v8->__vftable) = v16;
    v8 = (std::system_error *)((char *)v8 + 1);
  }
  while (v5 != v6);
LABEL_20:
  LOBYTE(v8->__vftable) = 0;
  if (*((char *)&__p.__ec_.__val_ + 7) >= 0)
    v17 = (std::system_error_vtbl *)&__p;
  else
    v17 = __p.__vftable;
  v18 = XtCqEf5X(0, (uint64_t)a2, (uint64_t)v17, (uint64_t)&v37);
  if (*((char *)&__p.__ec_.__val_ + 7) < 0)
    operator delete(__p.__vftable);
  if (v18)
    v19 = 1;
  else
    v19 = v37 == 0;
  if (!v19)
  {
    *(_DWORD *)this = v37;
    *((_BYTE *)this + 72) = 1;
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      return;
    goto LABEL_37;
  }
  v20 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v21 = MEMORY[0x1E0DE4FE0] + 64;
  v22 = MEMORY[0x1E0DE4F60];
  v23 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v24 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v49[0] = MEMORY[0x1E0DE4FE0] + 64;
  __p.__vftable = v23;
  *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)v23[-1].~system_error) = v24;
  v25 = (std::ios_base *)((char *)&__p + (unint64_t)__p.__vftable[-1].~system_error);
  std::ios_base::init(v25, &__p.__imp_);
  v25[1].__vftable = 0;
  v25[1].__fmtflags_ = -1;
  __p.__vftable = v20 + 1;
  v49[0] = v21;
  std::streambuf::basic_streambuf();
  v26 = MEMORY[0x1E0DE4FB8];
  __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  v46 = 0u;
  v47 = 0u;
  v48 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to initialize FairPlay context: status = ", 48);
  std::ostream::operator<<();
  std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, (std::string *)&v31);
  __p.__vftable = *(std::system_error_vtbl **)v22;
  *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)__p.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v22 + 24);
  __p.__imp_.__imp_ = (const char *)(v26 + 16);
  if (SBYTE7(v47) < 0)
    operator delete((void *)v46);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v49);
  v50.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(_QWORD *)&v50.__val_ = 2;
  std::system_error::system_error(&__p, v50, (const std::string *)&v31);
  if (*((char *)&ec.__val_ + 7) < 0)
    operator delete(v31.__vftable);
  v43 = 0;
  v44 = 0;
  __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v42 = &v43;
  v45 = 0uLL;
  std::runtime_error::runtime_error(&v31, &__p);
  ec = __p.__ec_;
  v31.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v27 = (unsigned int *)v43;
  v33 = v42;
  v34 = v43;
  v35 = v44;
  if (v44)
  {
    *(_QWORD *)(v43 + 16) = &v34;
    v27 = 0;
    v42 = &v43;
    v43 = 0;
    v44 = 0;
  }
  else
  {
    v33 = &v34;
  }
  v36 = v45;
  v45 = 0uLL;
  __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v27);
  MEMORY[0x18D7898AC](&__p);
  std::runtime_error::runtime_error((std::runtime_error *)this, &v31);
  *((std::error_code *)this + 1) = ec;
  *(_QWORD *)this = off_1E2521330;
  v28 = v34;
  *((_QWORD *)this + 4) = v33;
  *((_QWORD *)this + 5) = v28;
  v29 = (char *)this + 40;
  v30 = v35;
  *((_QWORD *)this + 6) = v35;
  if (v30)
  {
    *(_QWORD *)(v28 + 16) = v29;
    v28 = 0;
    v33 = &v34;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    *((_QWORD *)this + 4) = v29;
  }
  *(_OWORD *)((char *)this + 56) = v36;
  v36 = 0uLL;
  *((_BYTE *)this + 72) = 0;
  v31.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v33, (unsigned int *)v28);
  MEMORY[0x18D7898AC](&v31);
  if (SHIBYTE(v40) < 0)
LABEL_37:
    operator delete(v38);
}

void sub_18CC74D58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void AMSCore::AppleHardwareInfo::make(AMSCore::AppleHardwareInfo *this)
{
  int v1;
  unsigned int *v2;
  std::runtime_error *v3;
  unsigned int *v4;
  std::runtime_error_vtbl *v5;
  unsigned int **v6;
  unsigned int *v7;
  std::runtime_error_vtbl *v8;
  _BYTE __what_arg[32];
  unsigned int **v10;
  unsigned int *v11;
  std::runtime_error_vtbl *v12;
  __int128 v13;
  unsigned int **v14;
  unsigned int *v15;
  std::runtime_error_vtbl *v16;
  std::system_error v17;
  unsigned int **v18;
  unsigned int *v19;
  std::runtime_error_vtbl *v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24[3];
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  std::error_code v29;

  v28 = *MEMORY[0x1E0C80C00];
  zxcm2Qme0x(0, 0, (uint64_t)&v26);
  if (v1)
  {
    v23 = 5;
    strcpy((char *)&v22, "CCode");
    v24[0] = v1;
    v25 = 3;
    v7 = 0;
    v8 = 0;
    v6 = &v7;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v6, (uint64_t *)&v7, (const void **)&v22, &v22);
    v14 = v6;
    v15 = v7;
    v16 = v8;
    if (v8)
    {
      *((_QWORD *)v7 + 2) = &v15;
      v6 = &v7;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v14 = &v15;
    }
    AMSCore::StringUtils::join<char [30]>("encountered a FairPlay error.", (std::string *)__what_arg);
    v29.__cat_ = (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance;
    *(_QWORD *)&v29.__val_ = 605;
    std::system_error::system_error(&v17, v29, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    v17.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v18 = v14;
    v19 = v15;
    v20 = v16;
    if (v16)
    {
      *((_QWORD *)v15 + 2) = &v19;
      v14 = &v15;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v18 = &v19;
    }
    v21 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v17);
    *(std::error_code *)&__what_arg[16] = v17.__ec_;
    *(_QWORD *)__what_arg = off_1E2521330;
    v2 = v19;
    v10 = v18;
    v11 = v19;
    v12 = v20;
    if (v20)
    {
      *((_QWORD *)v19 + 2) = &v11;
      v2 = 0;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v10 = &v11;
    }
    v13 = v21;
    v21 = 0uLL;
    v17.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v2);
    MEMORY[0x18D7898AC](&v17);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v15);
    v3 = std::runtime_error::runtime_error((std::runtime_error *)&AMSCore::AppleHardwareInfo::get(void)::hardware, (const std::runtime_error *)__what_arg);
    v3[1] = *(std::runtime_error *)&__what_arg[16];
    v3->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v4 = v11;
    v3[2].__vftable = (std::runtime_error_vtbl *)v10;
    v3[2].__imp_.__imp_ = (const char *)v4;
    v5 = v12;
    v3[3].__vftable = v12;
    if (v5)
    {
      *((_QWORD *)v4 + 2) = &unk_1ECEAB848;
      v4 = 0;
      v10 = &v11;
      v11 = 0;
      v12 = 0;
    }
    else
    {
      qword_1ECEAB840 = (uint64_t)&unk_1ECEAB848;
    }
    xmmword_1ECEAB858 = v13;
    v13 = 0uLL;
    byte_1ECEAB868 = 0;
    *(_QWORD *)__what_arg = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, v4);
    MEMORY[0x18D7898AC](__what_arg);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v6, v7);
    if (v25 != -1)
      ((void (*)(std::system_error *, uint64_t *))off_1E253D240[v25])(&v17, v24);
    v25 = -1;
    if (v23 < 0)
      operator delete((void *)v22);
  }
  else
  {
    AMSCore::AppleHardwareInfo::get(void)::hardware = v26;
    qword_1ECEAB830 = v27;
    byte_1ECEAB868 = 1;
  }
}

void sub_18CC750B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::CreditDisplayUpdateAction::~CreditDisplayUpdateAction(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x18D789BDCLL);
}

double AMSCore::CreditDisplayUpdateAction::clone@<D0>(AMSCore::CreditDisplayUpdateAction *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;
  std::string v6;

  v4 = operator new();
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v6 = *(std::string *)((char *)this + 8);
  *(_QWORD *)v4 = off_1E25211C8;
  result = *(double *)&v6.__r_.__value_.__l.__data_;
  *(std::string *)(v4 + 8) = v6;
  *a2 = v4;
  return result;
}

void sub_18CC75214(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D789BDC](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::CreditDisplayUpdateAction::perform@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, _OWORD *a5@<X8>)
{
  char *v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _BYTE *result;
  __int128 v27;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  std::runtime_error *v58;
  _QWORD *v59;
  __int128 v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  int v80;

  v10 = (char *)operator new(0x2F8uLL);
  v11 = (unint64_t)v10;
  v12 = v10 + 664;
  *(_QWORD *)v10 = AMSCore::CreditDisplayUpdateAction::perform;
  *((_QWORD *)v10 + 1) = AMSCore::CreditDisplayUpdateAction::perform;
  v13 = (std::string *)(v10 + 616);
  v58 = (std::runtime_error *)(v10 + 536);
  v59 = v10 + 648;
  v14 = v10 + 680;
  v15 = v10 + 696;
  *((_QWORD *)v10 + 89) = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v16 = *a3;
  *((_QWORD *)v10 + 90) = a3[1];
  *a3 = 0;
  a3[1] = 0;
  *((_QWORD *)v10 + 91) = a4[1];
  *a4 = 0;
  a4[1] = 0;
  do
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v17 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v10[24] = 0;
  v10[488] = 0;
  *((_QWORD *)v10 + 62) = 0;
  *((_QWORD *)v10 + 66) = 0;
  v57 = v10 + 16;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v60, (uint64_t)(v10 + 16));
  *a5 = v60;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v16 + 48))(&v60, v16);
  v18 = v60;
  *v59 = v60;
  if (v18)
  {
    v19 = (_QWORD *)operator new();
    v20 = v60;
    *v19 = &off_1E2523180;
    v19[1] = 0;
    v19[2] = 0;
    v19[3] = v20;
  }
  else
  {
    v19 = 0;
  }
  *(_QWORD *)(v11 + 656) = v19;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 112))(v18);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v13->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
  }
  *(_DWORD *)(v11 + 640) = 5;
  (*(void (**)(uint64_t, const char *, uint64_t, std::string *))(*(_QWORD *)v21 + 104))(v21, "accountCredits", 14, v13);
  v22 = *(unsigned int *)(v11 + 640);
  if ((_DWORD)v22 != -1)
    ((void (*)(__int128 *, std::string *))off_1E253D240[v22])(&v60, v13);
  *(_DWORD *)(v11 + 640) = -1;
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(v14);
  v23 = *(_QWORD *)(v11 + 680);
  *(_QWORD *)(v11 + 696) = v18;
  *(_QWORD *)(v11 + 704) = v19;
  if (v19)
  {
    v24 = v19 + 1;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  result = (_BYTE *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v23 + 88))(v23, v15);
  v27 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 736) = *(_OWORD *)v12;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  if (atomic_load((unint64_t *)(v27 + 96)))
    goto LABEL_18;
  v12[88] = 0;
  v29 = (unint64_t *)(*(_QWORD *)(v11 + 736) + 96);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v11, v29));
  if (v30)
  {
LABEL_18:
    v31 = *(_QWORD *)(v11 + 736);
    if (!*(_BYTE *)(v31 + 88))
    {
      __break(1u);
      return result;
    }
    v32 = *(_BYTE *)(v31 + 80);
    if (!v32)
    {
      std::runtime_error::runtime_error(v58, (const std::runtime_error *)(v31 + 8));
      *(_OWORD *)(v11 + 552) = *(_OWORD *)(v31 + 24);
      *(_QWORD *)(v11 + 536) = off_1E2521330;
      v33 = (_QWORD *)(v31 + 48);
      v34 = *(_QWORD *)(v31 + 48);
      *(_QWORD *)(v11 + 568) = *(_QWORD *)(v31 + 40);
      v35 = v11 + 576;
      *(_QWORD *)(v11 + 576) = v34;
      v36 = *(_QWORD *)(v31 + 56);
      *(_QWORD *)(v11 + 584) = v36;
      if (v36)
      {
        *(_QWORD *)(v34 + 16) = v35;
        *(_QWORD *)(v31 + 40) = v33;
        *v33 = 0;
        *(_QWORD *)(v31 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v11 + 568) = v35;
      }
      v37 = *(_QWORD *)(v11 + 736);
      *(_OWORD *)(v11 + 592) = *(_OWORD *)(v37 + 64);
      *(_QWORD *)(v37 + 64) = 0;
      *(_QWORD *)(v37 + 72) = 0;
    }
    *(_BYTE *)(v11 + 608) = v32;
    v38 = *(_QWORD *)(v11 + 744);
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        v41 = *(std::__shared_weak_count **)(v11 + 744);
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v42 = *(std::__shared_weak_count **)(v11 + 672);
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = *(std::__shared_weak_count **)(v11 + 704);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = *(std::__shared_weak_count **)(v11 + 688);
    if (!v48)
      goto LABEL_65;
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      if (*(_BYTE *)(v11 + 608))
        goto LABEL_53;
    }
    else
    {
LABEL_65:
      if (*(_BYTE *)(v11 + 608))
        goto LABEL_53;
    }
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v60);
    AMSCore::Logger::log<char [34],AMSCore::Error>(v60, (uint64_t)v58);
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    if (*((_QWORD *)&v60 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
        if (*(_BYTE *)(v11 + 608))
          goto LABEL_53;
        goto LABEL_49;
      }
    }
    if (!*(_BYTE *)(v11 + 608))
LABEL_49:
      ((void (*)(std::runtime_error *))v58->~runtime_error)(v58);
LABEL_53:
    LOBYTE(v60) = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 1;
    if (*(_BYTE *)(v11 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v11 + 24));
      *(_BYTE *)(v11 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v11 + 24, (uint64_t)&v60);
    *(_BYTE *)(v11 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v60);
    v54 = *(std::__shared_weak_count **)(v11 + 656);
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    *(_QWORD *)(v11 + 536) = v57;
    *(_QWORD *)v11 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v58);
  }
  return result;
}

void sub_18CC7575C(void *a1, uint64_t a2, uint64_t a3, void (***a4)(_QWORD), uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)va);
  if (!*(_BYTE *)(v5 + 608))
    (**a4)(a4);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a5);
  __cxa_begin_catch(a1);
  std::terminate();
}

_BYTE *AMSCore::CreditDisplayUpdateAction::perform(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  int v50;

  v1 = *((_QWORD *)result + 92);
  if (!*(_BYTE *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = result + 536;
  v4 = *(_BYTE *)(v1 + 80);
  if (!v4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 536), (const std::runtime_error *)(v1 + 8));
    *(_OWORD *)(v2 + 552) = *(_OWORD *)(v1 + 24);
    *((_QWORD *)v2 + 67) = off_1E2521330;
    v5 = (_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)v2 + 71) = *(_QWORD *)(v1 + 40);
    v7 = v2 + 576;
    *((_QWORD *)v2 + 72) = v6;
    v8 = *(_QWORD *)(v1 + 56);
    *((_QWORD *)v2 + 73) = v8;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v1 + 40) = v5;
      *v5 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v2 + 71) = v7;
    }
    v9 = *((_QWORD *)v2 + 92);
    *((_OWORD *)v2 + 37) = *(_OWORD *)(v9 + 64);
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = 0;
  }
  v2[608] = v4;
  v10 = *((_QWORD *)v2 + 93);
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)v2 + 93);
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 84);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)v2 + 88);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)v2 + 86);
  if (!v20)
    goto LABEL_47;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v2[608])
      goto LABEL_36;
  }
  else
  {
LABEL_47:
    if (v2[608])
      goto LABEL_36;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v29);
  AMSCore::Logger::log<char [34],AMSCore::Error>(v29, (uint64_t)v3);
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (v2[608])
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  if (!v2[608])
LABEL_32:
    (**(void (***)(_BYTE *))v3)(v3);
LABEL_36:
  LOBYTE(v29) = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  if (v2[488])
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
    v2[488] = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)&v29);
  v2[488] = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v29);
  v26 = (std::__shared_weak_count *)*((_QWORD *)v2 + 82);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *((_QWORD *)v2 + 67) = v2 + 16;
  *(_QWORD *)v2 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CC75AD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void (***v10)(_QWORD);

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(_BYTE *)(v9 + 608))
    (**v10)(v10);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v9 + 648);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::CreditDisplayUpdateAction::perform(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;

  if (*__p)
  {
    v2 = __p[93];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[93];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[84];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[88];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[86];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)__p[82];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v18 = (_QWORD *)__p[66];
  if (v18 == __p + 63)
  {
    v19 = 4;
    v18 = __p + 63;
  }
  else
  {
    if (!v18)
      goto LABEL_32;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_32:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v20 = __p[91];
  do
  {
    v21 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v22)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v20)
  {
    v23 = (unint64_t *)(__p[91] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      v25 = (std::__shared_weak_count *)__p[91];
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v26 = __p[90];
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      v29 = (std::__shared_weak_count *)__p[90];
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v30 = __p[89];
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = (std::__shared_weak_count *)__p[89];
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [34],AMSCore::Error>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21[0] = MEMORY[0x1E0DE4FE0] + 64;
    v16 = v7;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
    std::ios_base::init(v9, v17);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v16 = v4 + 24;
    v21[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = 16;
    v11 = *(_QWORD *)(v16 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Failed to update credit display: ", 33);
    AMSCore::operator<<(&v16, a2);
    v13 = v17[5];
    v14 = (char *)&v17[-1] + *(_QWORD *)(v16 - 24);
    if ((v14[32] & 5) != 0)
    {
      v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 5) + 32))(&rep, *((_QWORD *)v14 + 5), 0, 1, 16);
      v15 = v26;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v23 = 4;
    v24 = v13;
    v25 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "networking", 10, &rep);
    v16 = *v6;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
    v17[0] = v10 + 16;
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v21);
  }
  return result;
}

void sub_18CC75FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::FinanceDialogAction::getAction(uint64_t a1, unsigned int ***a2, char a3, const void **a4, int a5, uint64_t a6)
{
  unsigned int ***v8;
  int v9;
  const void *v10;
  size_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  const void *v23;
  unint64_t v24;
  size_t v25;
  int v26;
  int v27;
  const void *v28;
  unint64_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  std::string::value_type *v33;
  std::string::value_type *v34;
  int v35;
  char *v36;
  unsigned int ***v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t v41;
  int v42;
  const void *v43;
  unint64_t v44;
  size_t v45;
  int v46;
  int v47;
  const void *v48;
  unint64_t v49;
  size_t v50;
  int v51;
  std::system_error_vtbl *v52;
  uint64_t *v53;
  std::system_error_vtbl *v54;
  _OWORD *v55;
  std::system_error_vtbl *v56;
  uint64_t *v57;
  uint64_t *v58;
  char *v59;
  std::string *v60;
  std::system_error_vtbl *v61;
  uint64_t *v62;
  unsigned int v63;
  const char *imp;
  std::system_error_vtbl *p_out;
  int v66;
  int v67;
  std::system_error_vtbl *v69;
  int v70;
  int v71;
  _BOOL4 v73;
  unsigned int *v74;
  unsigned int v75;
  BOOL v76;
  int v77;
  int v78;
  std::system_error_vtbl *v79;
  uint64_t v80;
  unsigned int ***v81;
  uint64_t *v82;
  int v83;
  const void *v84;
  unint64_t v85;
  size_t v86;
  int v87;
  int v88;
  const void *v89;
  unint64_t v90;
  size_t v91;
  int v92;
  std::system_error_vtbl *v93;
  void (__cdecl *v94)(std::system_error *__hidden);
  uint64_t v95;
  _BOOL4 v97;
  uint64_t *v98;
  std::string::size_type size;
  std::string *v100;
  _OWORD *v101;
  uint64_t v102;
  std::system_error_vtbl *v103;
  uint64_t *v104;
  unint64_t v105;
  std::string::value_type **v106;
  unsigned int v108;
  unsigned int *v109;
  unsigned int *v110;
  std::string::size_type v111;
  std::system_error_vtbl *v112;
  uint64_t v113;
  uint64_t v114;
  std::system_error_vtbl *v115;
  std::system_error_vtbl *v116;
  std::ios_base *v117;
  uint64_t v118;
  void (__cdecl *v119)(std::system_error *__hidden);
  unsigned __int8 v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  _BYTE __what_arg[32];
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  char v157;
  std::string::value_type *__s[2];
  uint64_t v159;
  std::runtime_error v160;
  uint64_t v161;
  std::string v162;
  unsigned int **v163;
  unsigned int *v164[2];
  std::string v165;
  char v166;
  __int128 v167;
  uint64_t v168;
  char v169;
  __int128 v170;
  uint64_t v171;
  char v172;
  int v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  void *v179;
  __int128 v180;
  BOOL v181;
  _BYTE __p[32];
  __int128 v183;
  uint64_t v184;
  _BYTE v185[24];
  uint64_t v186;
  char v187;
  int v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  int v194;
  std::system_error out;
  __int128 v196;
  uint64_t v197;
  _BYTE v198[32];
  __int128 v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  int v205;
  char v206;
  uint64_t v207;
  std::error_code v208;

  v207 = *MEMORY[0x1E0C80C00];
  v164[0] = 0;
  v164[1] = 0;
  v163 = v164;
  if (a3)
    v8 = a2;
  else
    v8 = &v163;
  v9 = *((char *)a4 + 23);
  if (v9 >= 0)
    v10 = a4;
  else
    v10 = *a4;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a4 + 23);
  else
    v11 = (size_t)a4[1];
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v162 = *(std::string *)a6;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 160) = 0;
  out.__imp_.__imp_ = 0;
  out.__vftable = 0;
  uuid_generate_random((unsigned __int8 *)&out);
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 176) = xmmword_18CF51AF0;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(_QWORD *)(v12 + 31) = 0;
  uuid_unparse_lower((const unsigned __int8 *)&out, v12 + 1);
  *v12 = 123;
  v12[37] = 125;
  *(_DWORD *)(a1 + 192) = a5;
  v13 = (void *)(a1 + 200);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:fe180100]();
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    *(_QWORD *)(a1 + 208) = v11;
    *(_QWORD *)(a1 + 216) = v15 | 0x8000000000000000;
    *(_QWORD *)(a1 + 200) = v13;
  }
  else
  {
    *(_BYTE *)(a1 + 223) = v11;
    if (!v11)
      goto LABEL_21;
  }
  memmove(v13, v10, v11);
LABEL_21:
  *((_BYTE *)v13 + v11) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v16 = (uint64_t *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(std::string *)(a1 + 248) = v162;
  memset(&v162, 0, sizeof(v162));
  __what_arg[23] = 9;
  strcpy(__what_arg, "buyParams");
  AMSCore::Any::string((uint64_t)&v160, (uint64_t)v8, (const void **)__what_arg);
  v17 = (char *)operator new(0x20uLL);
  v18 = (uint64_t **)(a1 + 224);
  *(_QWORD *)__p = v17;
  *(_OWORD *)&__p[8] = xmmword_18CF51B70;
  strcpy(v17, "kActionUserInfoKeyBuyParams");
  v19 = *(_QWORD *)(a1 + 232);
  v20 = (uint64_t *)(a1 + 232);
  if (!v19)
    goto LABEL_54;
  v21 = a1 + 232;
  do
  {
    while (1)
    {
      v22 = *(char *)(v19 + 55);
      v23 = v22 >= 0 ? (const void *)(v19 + 32) : *(const void **)(v19 + 32);
      v24 = v22 >= 0 ? *(unsigned __int8 *)(v19 + 55) : *(_QWORD *)(v19 + 40);
      v25 = v24 >= 0x1B ? 27 : v24;
      v26 = memcmp(v23, v17, v25);
      if (v26)
        break;
      if (v24 >= 0x1B)
        goto LABEL_37;
LABEL_23:
      v19 = *(_QWORD *)(v19 + 8);
      if (!v19)
        goto LABEL_38;
    }
    if (v26 < 0)
      goto LABEL_23;
LABEL_37:
    v21 = v19;
    v19 = *(_QWORD *)v19;
  }
  while (v19);
LABEL_38:
  v20 = (uint64_t *)(a1 + 232);
  v18 = (uint64_t **)(a1 + 224);
  if ((uint64_t *)v21 != v16)
  {
    v27 = *(char *)(v21 + 55);
    if (v27 >= 0)
      v28 = (const void *)(v21 + 32);
    else
      v28 = *(const void **)(v21 + 32);
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(v21 + 55);
    else
      v29 = *(_QWORD *)(v21 + 40);
    if (v29 >= 0x1B)
      v30 = 27;
    else
      v30 = v29;
    v31 = memcmp(v17, v28, v30);
    if (v31)
    {
      if ((v31 & 0x80000000) == 0)
      {
LABEL_50:
        out.std::runtime_error = v160;
        *(_QWORD *)&out.__ec_.__val_ = v161;
        v160 = (std::runtime_error)0;
        v161 = 0;
        LODWORD(out.__ec_.__cat_) = 5;
        AMSCore::Any::operator=(v21 + 56, (uint64_t)&out);
        if (LODWORD(out.__ec_.__cat_) != -1)
          ((void (*)(std::string *, std::system_error *))off_1E253D240[LODWORD(out.__ec_.__cat_)])(&v165, &out);
LABEL_55:
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_56;
LABEL_100:
        operator delete(*(void **)__p);
        if (SHIBYTE(v161) < 0)
          goto LABEL_101;
LABEL_57:
        if ((__what_arg[23] & 0x80000000) == 0)
          goto LABEL_58;
LABEL_102:
        operator delete(*(void **)__what_arg);
        goto LABEL_58;
      }
    }
    else if (v29 <= 0x1B)
    {
      goto LABEL_50;
    }
    v20 = (uint64_t *)v21;
  }
LABEL_54:
  v32 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(v18, v20, (uint64_t **)&out, (uint64_t **)&v165, (const void **)__p);
  if (*v32)
    goto LABEL_55;
  v55 = operator new(0x58uLL);
  v55[2] = *(_OWORD *)__p;
  *((_QWORD *)v55 + 6) = *(_QWORD *)&__p[16];
  memset(__p, 0, 24);
  *(std::runtime_error *)((char *)v55 + 56) = v160;
  *((_QWORD *)v55 + 9) = v161;
  v160 = (std::runtime_error)0;
  v161 = 0;
  *((_DWORD *)v55 + 20) = 5;
  v56 = out.__vftable;
  *(_QWORD *)v55 = 0;
  *((_QWORD *)v55 + 1) = 0;
  *((_QWORD *)v55 + 2) = v56;
  *v32 = (uint64_t)v55;
  v57 = (uint64_t *)**v18;
  if (v57)
  {
    *v18 = v57;
    v55 = (_OWORD *)*v32;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 232), (uint64_t *)v55);
  ++*(_QWORD *)(a1 + 240);
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_100;
LABEL_56:
  if ((SHIBYTE(v161) & 0x80000000) == 0)
    goto LABEL_57;
LABEL_101:
  operator delete(v160.__vftable);
  if ((__what_arg[23] & 0x80000000) != 0)
    goto LABEL_102;
LABEL_58:
  __p[0] = AMSCore::Any::BOOLean((uint64_t)v8, "retry", 5uLL);
  out.__vftable = (std::system_error_vtbl *)operator new(0x20uLL);
  *(_OWORD *)&out.__imp_.__imp_ = xmmword_18CF51BA0;
  strcpy((char *)out.__vftable, "kActionUserInfoKeyShouldRetry");
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL &>(v18, (const void **)&out.__vftable, __p);
  if (*((char *)&out.__ec_.__val_ + 7) < 0)
    operator delete(out.__vftable);
  *((_BYTE *)&out.__ec_.__val_ + 7) = 9;
  strcpy((char *)&out, "subtarget");
  AMSCore::Any::string((uint64_t)__s, (uint64_t)v8, (const void **)&out.__vftable);
  v33 = __s[1];
  v34 = (std::string::value_type *)HIBYTE(v159);
  v35 = SHIBYTE(v159);
  if (v159 < 0)
    v34 = __s[1];
  if (v34)
  {
    v36 = (char *)operator new(0x20uLL);
    v152 = a1;
    v37 = v8;
    *(_QWORD *)__p = v36;
    *(_OWORD *)&__p[8] = xmmword_18CF51B70;
    strcpy(v36, "kActionUserInfoKeySubtarget");
    v38 = *v16;
    v39 = (uint64_t *)(a1 + 232);
    if (!*v16)
      goto LABEL_105;
    v40 = v18;
    v41 = (uint64_t)v16;
    while (1)
    {
      v42 = *(char *)(v38 + 55);
      if (v42 >= 0)
        v43 = (const void *)(v38 + 32);
      else
        v43 = *(const void **)(v38 + 32);
      if (v42 >= 0)
        v44 = *(unsigned __int8 *)(v38 + 55);
      else
        v44 = *(_QWORD *)(v38 + 40);
      if (v44 >= 0x1B)
        v45 = 27;
      else
        v45 = v44;
      v46 = memcmp(v43, v36, v45);
      if (v46)
      {
        if (v46 < 0)
          goto LABEL_65;
      }
      else if (v44 < 0x1B)
      {
LABEL_65:
        v38 = *(_QWORD *)(v38 + 8);
        if (!v38)
          goto LABEL_80;
        continue;
      }
      v41 = v38;
      v38 = *(_QWORD *)v38;
      if (!v38)
      {
LABEL_80:
        v39 = v16;
        if ((uint64_t *)v41 != v16)
        {
          v47 = *(char *)(v41 + 55);
          if (v47 >= 0)
            v48 = (const void *)(v41 + 32);
          else
            v48 = *(const void **)(v41 + 32);
          if (v47 >= 0)
            v49 = *(unsigned __int8 *)(v41 + 55);
          else
            v49 = *(_QWORD *)(v41 + 40);
          if (v49 >= 0x1B)
            v50 = 27;
          else
            v50 = v49;
          v51 = memcmp(v36, v48, v50);
          if (v51)
          {
            v8 = v37;
            if ((v51 & 0x80000000) == 0)
            {
LABEL_92:
              v18 = v40;
              if (v35 < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&out, __s[0], (std::string::size_type)v33);
              }
              else
              {
                out.std::runtime_error = *(std::runtime_error *)__s;
                *(_QWORD *)&out.__ec_.__val_ = v159;
              }
              a1 = v152;
              LODWORD(out.__ec_.__cat_) = 5;
              AMSCore::Any::operator=(v41 + 56, (uint64_t)&out);
              if (LODWORD(out.__ec_.__cat_) != -1)
                ((void (*)(_BYTE *, std::system_error *))off_1E253D240[LODWORD(out.__ec_.__cat_)])(__what_arg, &out);
              goto LABEL_115;
            }
          }
          else
          {
            v8 = v37;
            if (v49 <= 0x1B)
              goto LABEL_92;
          }
          v39 = (uint64_t *)v41;
          v18 = v40;
        }
LABEL_105:
        a1 = v152;
        v58 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(v18, v39, (uint64_t **)&out, (uint64_t **)__what_arg, (const void **)__p);
        v8 = v37;
        if (!*v58)
        {
          v59 = (char *)operator new(0x58uLL);
          *((_OWORD *)v59 + 2) = *(_OWORD *)__p;
          *((_QWORD *)v59 + 6) = *(_QWORD *)&__p[16];
          memset(__p, 0, 24);
          v60 = (std::string *)(v59 + 56);
          if (SHIBYTE(v159) < 0)
          {
            std::string::__init_copy_ctor_external(v60, __s[0], (std::string::size_type)__s[1]);
          }
          else
          {
            *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)__s;
            *((_QWORD *)v59 + 9) = v159;
          }
          *((_DWORD *)v59 + 20) = 5;
          v61 = out.__vftable;
          *(_QWORD *)v59 = 0;
          *((_QWORD *)v59 + 1) = 0;
          *((_QWORD *)v59 + 2) = v61;
          *v58 = (uint64_t)v59;
          v62 = (uint64_t *)**v18;
          if (v62)
          {
            *v18 = v62;
            v59 = (char *)*v58;
          }
          std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v152 + 232), (uint64_t *)v59);
          ++*(_QWORD *)(v152 + 240);
        }
LABEL_115:
        if ((__p[23] & 0x80000000) != 0)
        {
          v54 = *(std::system_error_vtbl **)__p;
          goto LABEL_117;
        }
        goto LABEL_118;
      }
    }
  }
  v52 = (std::system_error_vtbl *)operator new(0x20uLL);
  out.__vftable = v52;
  *(_OWORD *)&out.__imp_.__imp_ = xmmword_18CF51B70;
  strcpy((char *)v52, "kActionUserInfoKeySubtarget");
  v53 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)v18, (const void **)&out.__vftable);
  if (v16 != v53)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(v18, (uint64_t)v53);
  v54 = v52;
LABEL_117:
  operator delete(v54);
LABEL_118:
  __p[23] = 4;
  strcpy(__p, "kind");
  AMSCore::Any::string((uint64_t)&out, (uint64_t)v8, (const void **)__p);
  v63 = 0;
  imp = (const char *)*((unsigned __int8 *)&out.__ec_.__val_ + 7);
  if (*((char *)&out.__ec_.__val_ + 7) < 0)
    imp = out.__imp_.__imp_;
  switch((unint64_t)imp)
  {
    case 3uLL:
      p_out = out.__vftable;
      if (*((char *)&out.__ec_.__val_ + 7) >= 0)
        p_out = (std::system_error_vtbl *)&out;
      v66 = LOWORD(p_out->~system_error);
      v67 = BYTE2(p_out->~system_error);
      v63 = v66 == 30018 && v67 == 121;
      if (*((char *)&out.__ec_.__val_ + 7) < 0)
        goto LABEL_157;
      goto LABEL_158;
    case 4uLL:
      v74 = (unsigned int *)out.__vftable;
      if (*((char *)&out.__ec_.__val_ + 7) >= 0)
        v74 = (unsigned int *)&out;
      v75 = bswap32(*v74);
      v76 = v75 >= 0x476F746F;
      v77 = v75 > 0x476F746F;
      v78 = !v76;
      if (v77 == v78)
        v63 = 5;
      else
        v63 = 0;
      if (*((char *)&out.__ec_.__val_ + 7) < 0)
        goto LABEL_157;
      goto LABEL_158;
    case 7uLL:
      v69 = out.__vftable;
      if (*((char *)&out.__ec_.__val_ + 7) >= 0)
        v69 = (std::system_error_vtbl *)&out;
      v70 = (int)v69->~system_error;
      v71 = *(_DWORD *)((char *)&v69->~system_error + 3);
      v73 = v70 == 1852141647 && v71 == 1280464238;
      v63 = 2 * v73;
      if (*((char *)&out.__ec_.__val_ + 7) < 0)
        goto LABEL_157;
      goto LABEL_158;
    case 0xBuLL:
      v79 = out.__vftable;
      if (*((char *)&out.__ec_.__val_ + 7) >= 0)
        v79 = (std::system_error_vtbl *)&out;
      if ((uint64_t)v79->~system_error ^ 0x616E69466F746F47 | *(uint64_t *)((char *)&v79->~system_error + 3) ^ 0x65636E616E69466FLL)
        v63 = 0;
      else
        v63 = 3;
      goto LABEL_156;
    case 0xDuLL:
      v93 = out.__vftable;
      if (*((char *)&out.__ec_.__val_ + 7) >= 0)
        v93 = (std::system_error_vtbl *)&out;
      v94 = v93->~system_error;
      v95 = *(uint64_t *)((char *)&v93->~system_error + 5);
      v97 = v94 == (void (__cdecl *)(std::system_error *__hidden))0x616E69466F746F47 && v95 == 0x325665636E616E69;
      v63 = 4 * v97;
      if (*((char *)&out.__ec_.__val_ + 7) < 0)
        goto LABEL_157;
      goto LABEL_158;
    default:
LABEL_156:
      if (*((char *)&out.__ec_.__val_ + 7) < 0)
LABEL_157:
        operator delete(out.__vftable);
LABEL_158:
      strcpy(__p, "kActionUserInfoKeyType");
      __p[23] = 22;
      v80 = *v16;
      if (!*v16)
        goto LABEL_201;
      v81 = v8;
      v82 = v16;
      break;
  }
  while (2)
  {
    while (2)
    {
      v83 = *(char *)(v80 + 55);
      if (v83 >= 0)
        v84 = (const void *)(v80 + 32);
      else
        v84 = *(const void **)(v80 + 32);
      if (v83 >= 0)
        v85 = *(unsigned __int8 *)(v80 + 55);
      else
        v85 = *(_QWORD *)(v80 + 40);
      if (v85 >= 0x16)
        v86 = 22;
      else
        v86 = v85;
      v87 = memcmp(v84, __p, v86);
      if (v87)
      {
        if ((v87 & 0x80000000) == 0)
          break;
        goto LABEL_160;
      }
      if (v85 < 0x16)
      {
LABEL_160:
        v80 = *(_QWORD *)(v80 + 8);
        if (!v80)
          goto LABEL_175;
        continue;
      }
      break;
    }
    v82 = (uint64_t *)v80;
    v80 = *(_QWORD *)v80;
    if (v80)
      continue;
    break;
  }
LABEL_175:
  v8 = v81;
  if (v82 != v16)
  {
    v88 = *((char *)v82 + 55);
    if (v88 >= 0)
      v89 = v82 + 4;
    else
      v89 = (const void *)v82[4];
    if (v88 >= 0)
      v90 = *((unsigned __int8 *)v82 + 55);
    else
      v90 = v82[5];
    if (v90 >= 0x16)
      v91 = 22;
    else
      v91 = v90;
    v92 = memcmp(__p, v89, v91);
    if (v92)
    {
      if ((v92 & 0x80000000) == 0)
      {
LABEL_187:
        out.__vftable = (std::system_error_vtbl *)v63;
        LODWORD(out.__ec_.__cat_) = 4;
        AMSCore::Any::operator=((uint64_t)(v82 + 7), (uint64_t)&out);
        if (LODWORD(out.__ec_.__cat_) != -1)
          ((void (*)(_BYTE *, std::system_error *))off_1E253D240[LODWORD(out.__ec_.__cat_)])(__what_arg, &out);
LABEL_202:
        if ((__p[23] & 0x80000000) != 0)
          goto LABEL_203;
        goto LABEL_204;
      }
    }
    else if (v90 <= 0x16)
    {
      goto LABEL_187;
    }
    v16 = v82;
  }
LABEL_201:
  v98 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(v18, v16, (uint64_t **)&out, (uint64_t **)__what_arg, (const void **)__p);
  if (*v98)
    goto LABEL_202;
  v101 = operator new(0x58uLL);
  v101[2] = *(_OWORD *)__p;
  v102 = *(_QWORD *)&__p[16];
  memset(__p, 0, 24);
  *((_QWORD *)v101 + 6) = v102;
  *((_QWORD *)v101 + 7) = v63;
  *((_DWORD *)v101 + 20) = 4;
  v103 = out.__vftable;
  *(_QWORD *)v101 = 0;
  *((_QWORD *)v101 + 1) = 0;
  *((_QWORD *)v101 + 2) = v103;
  *v98 = (uint64_t)v101;
  v104 = (uint64_t *)**v18;
  if (v104)
  {
    *v18 = v104;
    v101 = (_OWORD *)*v98;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 232), (uint64_t *)v101);
  ++*(_QWORD *)(a1 + 240);
  if ((__p[23] & 0x80000000) != 0)
LABEL_203:
    operator delete(*(void **)__p);
LABEL_204:
  if (v63 - 2 > 3)
  {
LABEL_310:
    if (SHIBYTE(v159) < 0)
      goto LABEL_311;
    goto LABEL_312;
  }
  *((_BYTE *)&out.__ec_.__val_ + 7) = 3;
  strcpy((char *)&out, "url");
  AMSCore::Any::string((uint64_t)&v165, (uint64_t)v8, (const void **)&out.__vftable);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v165.__r_.__value_.__l.__size_;
    if (!v165.__r_.__value_.__l.__size_)
      goto LABEL_225;
    v100 = (std::string *)v165.__r_.__value_.__r.__words[0];
LABEL_214:
    AMSCore::URL::parse((uint64_t)v100, size, (uint64_t)__what_arg);
    if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_215;
LABEL_234:
    operator delete(v165.__r_.__value_.__l.__data_);
    if (!v157)
      goto LABEL_235;
LABEL_216:
    v105 = HIBYTE(v159);
    v106 = __s;
    if (v159 < 0)
    {
      v106 = (std::string::value_type **)__s[0];
      v105 = (unint64_t)__s[1];
    }
    if (v105 < 7)
      goto LABEL_224;
    if (*(_DWORD *)v106 == 1868784481 && *(_DWORD *)((char *)v106 + 3) == 1953396079)
    {
      v108 = 1;
    }
    else
    {
      if (v105 < 0xA)
      {
LABEL_224:
        v108 = 0;
        goto LABEL_247;
      }
      v124 = 0x6261636B67726F75;
      v125 = bswap64((unint64_t)*v106);
      if (v125 == 0x6261636B67726F75
        && (v125 = bswap32(*((unsigned __int16 *)v106 + 4)) >> 16, v124 = 28260, (_DWORD)v125 == 28260))
      {
        v126 = 0;
      }
      else if (v125 < v124)
      {
        v126 = -1;
      }
      else
      {
        v126 = 1;
      }
      v108 = 2 * (v126 == 0);
    }
LABEL_247:
    if (v63 - 3 < 3)
    {
      if (v108 > 1)
        goto LABEL_308;
      AMSCore::URL::URL(&v165, (const AMSCore::URL *)__what_arg);
      __p[0] = 0;
      __p[24] = 0;
      if (v166)
      {
        *(std::string *)__p = v165;
        memset(&v165, 0, sizeof(v165));
        __p[24] = 1;
      }
      LOBYTE(v183) = 0;
      v185[0] = 0;
      if (v169)
      {
        v183 = v167;
        v184 = v168;
        v168 = 0;
        v167 = 0uLL;
        v185[0] = 1;
      }
      v185[8] = 0;
      v187 = 0;
      if (v172)
      {
        *(_OWORD *)&v185[8] = v170;
        v186 = v171;
        v171 = 0;
        v170 = 0uLL;
        v187 = 1;
      }
      v188 = v173;
      v189 = (uint64_t)&v189;
      v190 = &v189;
      v191 = 0;
      v127 = v176;
      if (v176)
      {
        v129 = v174;
        v128 = v175;
        v130 = *v175;
        *(_QWORD *)(v130 + 8) = *(_QWORD *)(v174 + 8);
        **(_QWORD **)(v129 + 8) = v130;
        v131 = v189;
        *(_QWORD *)(v189 + 8) = v128;
        *v128 = v131;
        v189 = v129;
        *(_QWORD *)(v129 + 8) = &v189;
        v191 = v127;
        v176 = 0;
      }
      v192 = v177;
      v193 = v178;
      v178 = 0;
      v177 = 0uLL;
      v194 = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v165);
      LOBYTE(out.__vftable) = 0;
      LOBYTE(out.__ec_.__cat_) = 0;
      if (__p[24])
      {
        out.std::runtime_error = *(std::runtime_error *)__p;
        *(_QWORD *)&out.__ec_.__val_ = *(_QWORD *)&__p[16];
        memset(__p, 0, 24);
        LOBYTE(out.__ec_.__cat_) = 1;
      }
      LOBYTE(v196) = 0;
      v198[0] = 0;
      if (v185[0])
      {
        v196 = v183;
        v197 = v184;
        v184 = 0;
        v183 = 0uLL;
        v198[0] = 1;
      }
      v198[8] = 0;
      LOBYTE(v199) = 0;
      if (v187)
      {
        *(_OWORD *)&v198[8] = *(_OWORD *)&v185[8];
        *(_QWORD *)&v198[24] = v186;
        *(_QWORD *)&v185[16] = 0;
        v186 = 0;
        *(_QWORD *)&v185[8] = 0;
        LOBYTE(v199) = 1;
      }
      DWORD2(v199) = v188;
      v200 = (uint64_t)&v200;
      v201 = &v200;
      v202 = 0;
      v132 = v191;
      if (v191)
      {
        v133 = v190;
        v134 = v189;
        v135 = *v190;
        *(_QWORD *)(v135 + 8) = *(_QWORD *)(v189 + 8);
        **(_QWORD **)(v134 + 8) = v135;
        v136 = v200;
        *(_QWORD *)(v200 + 8) = v133;
        *v133 = v136;
        v200 = v134;
        *(_QWORD *)(v134 + 8) = &v200;
        v202 = v132;
        v191 = 0;
      }
      v203 = v192;
      v204 = v193;
      v193 = 0;
      v192 = 0uLL;
      v205 = v194;
      v206 = 1;
      if (*(_BYTE *)(a1 + 160))
      {
        AMSCore::URL::operator=(a1, (__int128 *)&out);
        *(_DWORD *)(a1 + 152) = v205;
        if (!v206)
        {
LABEL_268:
          v138 = v63 - 3 < 2 || v108 == 1;
          v181 = v138;
          v179 = operator new(0x20uLL);
          v180 = xmmword_18CF51BB0;
          strcpy((char *)v179, "kActionUserInfoKeyCommerceUIURL");
          std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL &>(v18, (const void **)&v179, &v181);
          if (SHIBYTE(v180) < 0)
            operator delete(v179);
          goto LABEL_296;
        }
      }
      else
      {
        std::construct_at[abi:fe180100]<AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink*>(a1, (__int128 *)&out);
        *(_BYTE *)(a1 + 160) = 1;
        if (!v206)
          goto LABEL_268;
      }
      AMSCore::URL::~URL((AMSCore::URL *)&out);
      goto LABEL_268;
    }
    if (v63 != 2)
      goto LABEL_308;
    AMSCore::URL::URL(&v165, (const AMSCore::URL *)__what_arg);
    __p[0] = 0;
    __p[24] = 0;
    if (v166)
    {
      *(std::string *)__p = v165;
      memset(&v165, 0, sizeof(v165));
      __p[24] = 1;
    }
    LOBYTE(v183) = 0;
    v185[0] = 0;
    if (v169)
    {
      v183 = v167;
      v184 = v168;
      v168 = 0;
      v167 = 0uLL;
      v185[0] = 1;
    }
    v185[8] = 0;
    v187 = 0;
    if (v172)
    {
      *(_OWORD *)&v185[8] = v170;
      v186 = v171;
      v171 = 0;
      v170 = 0uLL;
      v187 = 1;
    }
    v188 = v173;
    v189 = (uint64_t)&v189;
    v190 = &v189;
    v191 = 0;
    v139 = v176;
    if (v176)
    {
      v141 = v174;
      v140 = v175;
      v142 = *v175;
      *(_QWORD *)(v142 + 8) = *(_QWORD *)(v174 + 8);
      **(_QWORD **)(v141 + 8) = v142;
      v143 = v189;
      *(_QWORD *)(v189 + 8) = v140;
      *v140 = v143;
      v189 = v141;
      *(_QWORD *)(v141 + 8) = &v189;
      v191 = v139;
      v176 = 0;
    }
    v192 = v177;
    v193 = v178;
    v178 = 0;
    v177 = 0uLL;
    v194 = 0;
    AMSCore::URL::~URL((AMSCore::URL *)&v165);
    LOBYTE(out.__vftable) = 0;
    LOBYTE(out.__ec_.__cat_) = 0;
    if (__p[24])
    {
      out.std::runtime_error = *(std::runtime_error *)__p;
      *(_QWORD *)&out.__ec_.__val_ = *(_QWORD *)&__p[16];
      memset(__p, 0, 24);
      LOBYTE(out.__ec_.__cat_) = 1;
    }
    LOBYTE(v196) = 0;
    v198[0] = 0;
    if (v185[0])
    {
      v196 = v183;
      v197 = v184;
      v184 = 0;
      v183 = 0uLL;
      v198[0] = 1;
    }
    v198[8] = 0;
    LOBYTE(v199) = 0;
    if (v187)
    {
      *(_OWORD *)&v198[8] = *(_OWORD *)&v185[8];
      *(_QWORD *)&v198[24] = v186;
      *(_QWORD *)&v185[16] = 0;
      v186 = 0;
      *(_QWORD *)&v185[8] = 0;
      LOBYTE(v199) = 1;
    }
    DWORD2(v199) = v188;
    v200 = (uint64_t)&v200;
    v201 = &v200;
    v202 = 0;
    v144 = v191;
    if (v191)
    {
      v145 = v190;
      v146 = v189;
      v147 = *v190;
      *(_QWORD *)(v147 + 8) = *(_QWORD *)(v189 + 8);
      **(_QWORD **)(v146 + 8) = v147;
      v148 = v200;
      *(_QWORD *)(v200 + 8) = v145;
      *v145 = v148;
      v200 = v146;
      *(_QWORD *)(v146 + 8) = &v200;
      v202 = v144;
      v191 = 0;
    }
    v203 = v192;
    v204 = v193;
    v193 = 0;
    v192 = 0uLL;
    v205 = v194;
    v206 = 1;
    if (*(_BYTE *)(a1 + 160))
    {
      AMSCore::URL::operator=(a1, (__int128 *)&out);
      *(_DWORD *)(a1 + 152) = v205;
      if (!v206)
      {
LABEL_296:
        AMSCore::URL::~URL((AMSCore::URL *)__p);
        goto LABEL_308;
      }
    }
    else
    {
      std::construct_at[abi:fe180100]<AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink*>(a1, (__int128 *)&out);
      *(_BYTE *)(a1 + 160) = 1;
      if (!v206)
        goto LABEL_296;
    }
    AMSCore::URL::~URL((AMSCore::URL *)&out);
    goto LABEL_296;
  }
  size = HIBYTE(v165.__r_.__value_.__r.__words[2]);
  if (*((_BYTE *)&v165.__r_.__value_.__s + 23))
  {
    v100 = &v165;
    goto LABEL_214;
  }
LABEL_225:
  AMSCore::StringUtils::join<char [31]>("Action does not include a URL.", (std::string *)__what_arg);
  v208.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(_QWORD *)&v208.__val_ = 3;
  std::system_error::system_error(&out, v208, (const std::string *)__what_arg);
  if ((__what_arg[23] & 0x80000000) != 0)
    operator delete(*(void **)__what_arg);
  v197 = 0;
  out.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v196 = (unint64_t)&v196 + 8;
  *(_QWORD *)&v198[8] = 0;
  *(_QWORD *)v198 = 0;
  std::runtime_error::runtime_error((std::runtime_error *)__p, &out);
  *(std::error_code *)&__p[16] = out.__ec_;
  *(_QWORD *)__p = off_1E2521330;
  v109 = (unsigned int *)*((_QWORD *)&v196 + 1);
  v183 = v196;
  v184 = v197;
  if (v197)
  {
    *(_QWORD *)(*((_QWORD *)&v196 + 1) + 16) = (char *)&v183 + 8;
    v109 = 0;
    *(_QWORD *)&v196 = (char *)&v196 + 8;
    *((_QWORD *)&v196 + 1) = 0;
    v197 = 0;
  }
  else
  {
    *(_QWORD *)&v183 = (char *)&v183 + 8;
  }
  *(_OWORD *)v185 = *(_OWORD *)v198;
  *(_QWORD *)v198 = 0;
  *(_QWORD *)&v198[8] = 0;
  out.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v196, v109);
  MEMORY[0x18D7898AC](&out);
  std::runtime_error::runtime_error((std::runtime_error *)__what_arg, (const std::runtime_error *)__p);
  *(_OWORD *)&__what_arg[16] = *(_OWORD *)&__p[16];
  *(_QWORD *)__what_arg = off_1E2521330;
  v110 = (unsigned int *)*((_QWORD *)&v183 + 1);
  v154 = v183;
  v155 = v184;
  if (v184)
  {
    *(_QWORD *)(*((_QWORD *)&v183 + 1) + 16) = (char *)&v154 + 8;
    v110 = 0;
    *(_QWORD *)&v183 = (char *)&v183 + 8;
    *((_QWORD *)&v183 + 1) = 0;
    v184 = 0;
  }
  else
  {
    *(_QWORD *)&v154 = (char *)&v154 + 8;
  }
  v156 = *(_OWORD *)v185;
  *(_QWORD *)v185 = 0;
  *(_QWORD *)&v185[8] = 0;
  v157 = 0;
  *(_QWORD *)__p = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v183, v110);
  MEMORY[0x18D7898AC](__p);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_234;
LABEL_215:
  if (v157)
    goto LABEL_216;
LABEL_235:
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v165);
  v111 = v165.__r_.__value_.__r.__words[0];
  if (*(int *)(v165.__r_.__value_.__r.__words[0] + 8) <= 4)
  {
    v112 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v113 = MEMORY[0x1E0DE4FE0] + 64;
    v114 = MEMORY[0x1E0DE4F60];
    v115 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v116 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v201 = (uint64_t *)(MEMORY[0x1E0DE4FE0] + 64);
    out.__vftable = v115;
    *(std::system_error_vtbl **)((char *)&out.__vftable + (unint64_t)v115[-1].~system_error) = v116;
    v117 = (std::ios_base *)((char *)&out + (unint64_t)out.__vftable[-1].~system_error);
    std::ios_base::init(v117, &out.__imp_);
    v117[1].__vftable = 0;
    v117[1].__fmtflags_ = -1;
    out.__vftable = v112 + 1;
    v201 = (uint64_t *)v113;
    std::streambuf::basic_streambuf();
    v118 = MEMORY[0x1E0DE4FB8];
    out.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    *(_OWORD *)&v198[16] = 0u;
    v199 = 0u;
    LODWORD(v200) = 16;
    v119 = out.__vftable[-1].~system_error;
    if ((v120 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&out, (uint64_t)"A URL action was missing a URL. action = ", 41);
    v121 = v197;
    v122 = (char *)&out + (unint64_t)out.__vftable[-1].~system_error;
    if ((v122[32] & 5) != 0)
    {
      v123 = -1;
    }
    else
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v122 + 5) + 32))(__p, *((_QWORD *)v122 + 5), 0, 1, 16);
      v123 = v192;
    }
    *(std::chrono::system_clock::time_point *)__p = std::chrono::system_clock::now();
    *(_DWORD *)&__p[8] = 4;
    *(_QWORD *)&__p[16] = v121;
    *(_QWORD *)&__p[24] = v123;
    (*(void (**)(_QWORD, const char *, uint64_t, _BYTE *))(**(_QWORD **)(v111 + 16) + 16))(*(_QWORD *)(v111 + 16), "dialog", 6, __p);
    out.__vftable = *(std::system_error_vtbl **)v114;
    *(std::system_error_vtbl **)((char *)&out.__vftable + (unint64_t)out.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v114 + 24);
    out.__imp_.__imp_ = (const char *)(v118 + 16);
    if (SBYTE7(v199) < 0)
      operator delete(*(void **)&v198[16]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](&v201);
  }
  v149 = (std::__shared_weak_count *)v165.__r_.__value_.__l.__size_;
  if (v165.__r_.__value_.__l.__size_)
  {
    v150 = (unint64_t *)(v165.__r_.__value_.__l.__size_ + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
LABEL_308:
  if (v157)
  {
    AMSCore::URL::~URL((AMSCore::URL *)__what_arg);
    goto LABEL_310;
  }
  (**(void (***)(_BYTE *))__what_arg)(__what_arg);
  if (SHIBYTE(v159) < 0)
LABEL_311:
    operator delete(__s[0]);
LABEL_312:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v163, v164[0]);
}

void sub_18CC7765C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL &>(_QWORD **a1, const void **a2, _BYTE *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t **result;
  uint64_t **v23;
  _OWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28[3];
  int v29;
  uint64_t *v30;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_40;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 >= v10)
        goto LABEL_23;
LABEL_9:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_24;
    }
    if (v16 < 0)
      goto LABEL_9;
LABEL_23:
    v11 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_24:
  if (v11 != v6)
  {
    v17 = *((char *)v11 + 55);
    if (v17 >= 0)
      v18 = v11 + 4;
    else
      v18 = (_QWORD *)v11[4];
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)v11 + 55);
    else
      v19 = v11[5];
    if (v19 >= v10)
      v20 = v10;
    else
      v20 = v19;
    v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_36:
        LOBYTE(v28[0]) = *a3;
        v29 = 1;
        result = (uint64_t **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1)
          return (uint64_t **)((uint64_t (*)(uint64_t **, uint64_t **))off_1E253D240[v29])(&v30, v28);
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_36;
    }
    v6 = v11;
  }
LABEL_40:
  result = (uint64_t **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, a2);
  if (!*result)
  {
    v23 = result;
    v24 = operator new(0x58uLL);
    v24[2] = *(_OWORD *)a2;
    *((_QWORD *)v24 + 6) = a2[2];
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *((_BYTE *)v24 + 56) = *a3;
    *((_DWORD *)v24 + 20) = 1;
    v25 = v28[0];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v25;
    *v23 = (uint64_t *)v24;
    v26 = (_QWORD *)**a1;
    if (v26)
    {
      *a1 = v26;
      v27 = *v23;
    }
    else
    {
      v27 = (uint64_t *)v24;
    }
    result = (uint64_t **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<double>(_QWORD **a1, const std::string::value_type **a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const std::string::value_type *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  char **result;
  char **v23;
  char *v24;
  std::string *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28[3];
  int v29;
  uint64_t *v30;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_42;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 < v10)
        goto LABEL_11;
LABEL_9:
      v11 = v7;
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_26;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    v17 = *((char *)v11 + 55);
    if (v17 >= 0)
      v18 = v11 + 4;
    else
      v18 = (_QWORD *)v11[4];
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)v11 + 55);
    else
      v19 = v11[5];
    if (v19 >= v10)
      v20 = v10;
    else
      v20 = v19;
    v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        v28[0] = *a3;
        v29 = 2;
        result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1)
          return (char **)((uint64_t (*)(uint64_t **, uint64_t **))off_1E253D240[v29])(&v30, v28);
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    v6 = v11;
  }
LABEL_42:
  result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, (const void **)a2);
  if (!*result)
  {
    v23 = result;
    v24 = (char *)operator new(0x58uLL);
    v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v24 + 6) = a2[2];
    }
    *((_QWORD *)v24 + 7) = *a3;
    *((_DWORD *)v24 + 20) = 2;
    v26 = v28[0];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v26;
    *v23 = v24;
    v27 = (_QWORD *)**a1;
    if (v27)
    {
      *a1 = v27;
      v24 = *v23;
    }
    result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18CC77BE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>(_QWORD **a1, const std::string::value_type **a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const std::string::value_type *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  char **result;
  char **v23;
  char *v24;
  std::string *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28[3];
  int v29;
  uint64_t *v30;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_42;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 < v10)
        goto LABEL_11;
LABEL_9:
      v11 = v7;
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_26;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    v17 = *((char *)v11 + 55);
    if (v17 >= 0)
      v18 = v11 + 4;
    else
      v18 = (_QWORD *)v11[4];
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)v11 + 55);
    else
      v19 = v11[5];
    if (v19 >= v10)
      v20 = v10;
    else
      v20 = v19;
    v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        v28[0] = *a3;
        v29 = 4;
        result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1)
          return (char **)((uint64_t (*)(uint64_t **, uint64_t **))off_1E253D240[v29])(&v30, v28);
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    v6 = v11;
  }
LABEL_42:
  result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, (const void **)a2);
  if (!*result)
  {
    v23 = result;
    v24 = (char *)operator new(0x58uLL);
    v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v24 + 6) = a2[2];
    }
    *((_QWORD *)v24 + 7) = *a3;
    *((_DWORD *)v24 + 20) = 4;
    v26 = v28[0];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v26;
    *v23 = v24;
    v27 = (_QWORD *)**a1;
    if (v27)
    {
      *a1 = v27;
      v24 = *v23;
    }
    result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18CC77E08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>(_QWORD *a1, const void **a2)
{
  uint64_t *v2;
  _QWORD *v3;
  char v5;
  const void *v6;
  size_t v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  int v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;

  v3 = a1 + 1;
  v2 = (uint64_t *)a1[1];
  if (!v2)
    return;
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  v8 = a1 + 1;
  v9 = (uint64_t *)a1[1];
  do
  {
    while (1)
    {
      v10 = *((char *)v9 + 55);
      v11 = v10 >= 0 ? v9 + 4 : (uint64_t *)v9[4];
      v12 = v10 >= 0 ? *((unsigned __int8 *)v9 + 55) : v9[5];
      v13 = v7 >= v12 ? v12 : v7;
      v14 = memcmp(v11, v6, v13);
      if (v14)
        break;
      if (v12 >= v7)
        goto LABEL_23;
LABEL_9:
      v9 = (uint64_t *)v9[1];
      if (!v9)
        goto LABEL_24;
    }
    if (v14 < 0)
      goto LABEL_9;
LABEL_23:
    v8 = v9;
    v9 = (uint64_t *)*v9;
  }
  while (v9);
LABEL_24:
  if (v8 != v3)
  {
    v15 = *((char *)v8 + 55);
    if (v15 >= 0)
      v16 = v8 + 4;
    else
      v16 = (const void *)v8[4];
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)v8 + 55);
    else
      v17 = v8[5];
    if (v17 >= v7)
      v18 = v7;
    else
      v18 = v17;
    v19 = memcmp(v6, v16, v18);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        goto LABEL_36;
    }
    else if (v7 >= v17)
    {
LABEL_36:
      v20 = (_QWORD *)v8[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        v22 = v8;
        do
        {
          v21 = (_QWORD *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (!v23);
      }
      if ((_QWORD *)*a1 == v8)
        *a1 = v21;
      --a1[2];
      std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(v2, v8);
      if (*((char *)v8 + 55) < 0)
        operator delete((void *)v8[4]);
      operator delete(v8);
    }
  }
}

void AMSCore::FinanceDialogRequest::~FinanceDialogRequest(AMSCore::FinanceDialogRequest *this)
{
  JUMPOUT(0x18D789BDCLL);
}

uint64_t AMSCore::FinanceDialogRequest::clone@<X0>(AMSCore::FinanceDialogRequest *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = operator new();
  v5 = *((_QWORD *)this + 1);
  *(_QWORD *)result = &off_1E2520E00;
  *(_QWORD *)(result + 8) = v5;
  *(_BYTE *)(result + 16) = *((_BYTE *)this + 16);
  *a2 = result;
  return result;
}

void AMSCore::FinanceDialogRequest::perform(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, std::runtime_error *a5@<X8>)
{
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  AMSCore::HTTPResponse *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  size_t v32;
  int v33;
  int v34;
  const void *v35;
  unint64_t v36;
  size_t v37;
  int v38;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  int v45;
  const void *v46;
  unint64_t v47;
  size_t v48;
  int v49;
  int v50;
  const void *v51;
  unint64_t v52;
  size_t v53;
  int v54;
  uint64_t *v55;
  AMSCore::HTTPResponseAction *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  uint64_t *v61;
  __int128 v62;
  const std::string::value_type ***v63;
  const std::string::value_type **v64;
  const std::string::value_type **v65;
  uint64_t v66;
  const std::string::value_type *v67;
  const std::string::value_type ***v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  std::runtime_error_vtbl *v73;
  uint64_t v74;
  uint64_t v75;
  std::runtime_error_vtbl *v76;
  std::runtime_error_vtbl *v77;
  std::ios_base *v78;
  uint64_t v79;
  uint64_t v80;
  std::runtime_error *v81;
  unsigned int *v82;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v84;
  __int128 v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t **v88;
  int v89;
  const void *v90;
  unint64_t v91;
  size_t v92;
  int v93;
  int v94;
  uint64_t *v95;
  unint64_t v96;
  size_t v97;
  int v98;
  uint64_t *v99;
  char *v100;
  std::string *v101;
  std::runtime_error_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  char v106;
  _QWORD *v107;
  unsigned int *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unsigned int *v112;
  std::__shared_weak_count *imp;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  int v119;
  uint64_t *v120;
  int v121;
  const void **v122;
  const void **v123;
  uint64_t v124;
  const void *v125;
  const char *v126;
  uint64_t v127;
  const void **v128;
  const void **v129;
  int v130;
  const void *v131;
  size_t v132;
  size_t v133;
  int v134;
  std::runtime_error *v135;
  int v136;
  const void *v137;
  size_t v138;
  size_t v139;
  int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  std::runtime_error v145;
  __int128 v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  std::runtime_error_vtbl *v150;
  uint64_t *v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  const void **v156;
  const void **v157;
  int v158;
  const void *v159;
  unint64_t v160;
  size_t v161;
  int v162;
  int v163;
  const void *v164;
  unint64_t v165;
  size_t v166;
  int v167;
  uint64_t *v168;
  std::runtime_error *v169;
  int v170;
  unsigned int ***v171;
  const char *v172;
  _WORD *v173;
  int v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const void **v180;
  const void **v181;
  int v182;
  const void *v183;
  unint64_t v184;
  size_t v185;
  int v186;
  int v187;
  const void *v188;
  unint64_t v189;
  size_t v190;
  int v191;
  uint64_t *v192;
  int v193;
  unsigned int ***v194;
  const char *v195;
  unsigned __int16 *v196;
  int v197;
  int v198;
  BOOL v199;
  std::runtime_error v200;
  std::runtime_error v201;
  std::runtime_error v202;
  const char *v203;
  const char **v204;
  uint64_t v205;
  const char *v206;
  const char *v207;
  std::runtime_error v208;
  __int128 v209;
  __int128 v210;
  unsigned int *v211;
  std::__libcpp_refstring *v212;
  std::runtime_error_vtbl *v213;
  int v214;
  __int128 v215;
  uint64_t v216;
  const void **v217;
  const void **v218;
  int v219;
  const void *v220;
  unint64_t v221;
  size_t v222;
  int v223;
  int v224;
  const void *v225;
  unint64_t v226;
  size_t v227;
  int v228;
  uint64_t *v229;
  uint64_t v230;
  int v231;
  char v232;
  unsigned int ***v233;
  const char *v234;
  size_t v235;
  const char *v236;
  unsigned __int8 *v237;
  int v238;
  int v239;
  std::runtime_error v241;
  std::runtime_error v242;
  std::runtime_error v243;
  const char *v244;
  const char **v245;
  uint64_t v246;
  const char *v247;
  const char *v248;
  std::runtime_error v249;
  __int128 v250;
  __int128 v251;
  unsigned int *v252;
  std::__libcpp_refstring *v253;
  std::runtime_error_vtbl *v254;
  _BYTE *v255;
  int v256;
  __int128 v257;
  void *v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  size_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  unsigned __int8 *v269;
  std::string *v270;
  uint64_t v271;
  uint64_t v272;
  std::runtime_error_vtbl *v273;
  uint64_t v274;
  uint64_t v275;
  std::runtime_error_vtbl *v276;
  std::runtime_error_vtbl *v277;
  std::ios_base *v278;
  uint64_t v279;
  void (__cdecl *v280)(std::runtime_error *__hidden);
  unsigned __int8 v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  char *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  char *v295;
  _QWORD *v296;
  _OWORD *v297;
  __int128 v298;
  __int128 v299;
  char *v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  std::runtime_error_vtbl *v306;
  uint64_t v307;
  uint64_t v308;
  std::runtime_error_vtbl *v309;
  std::runtime_error_vtbl *v310;
  std::ios_base *v311;
  uint64_t v312;
  void (__cdecl *v313)(std::runtime_error *__hidden);
  unsigned __int8 v314;
  void *v315;
  char *v316;
  uint64_t v317;
  std::string::size_type v318;
  __int128 v319;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  const std::runtime_error *v324;
  char v325;
  const char **v326;
  std::__libcpp_refstring *v327;
  _BYTE *v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  __int128 v336;
  unint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  char *v357;
  uint64_t v358;
  __int128 *p_s;
  size_t v360;
  __int128 *v361;
  size_t v362;
  __int128 *v363;
  size_t v364;
  uint64_t v365;
  uint64_t v366;
  const std::runtime_error *v367;
  std::runtime_error_vtbl *v368;
  uint64_t v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t *v382;
  unint64_t v383;
  __int128 v384;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  __int128 v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  int v412;
  std::runtime_error v413;
  uint64_t v414;
  uint64_t v415;
  int64_t v416;
  unint64_t v417;
  char *v418;
  uint64_t v419;
  __int128 v420;
  void *v421;
  int v422;
  void **v423;
  uint64_t v424;
  uint64_t v425;
  void *v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  void *v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t *v440;
  unint64_t v441;
  void **v442;
  __int128 v443;
  __int128 v444;
  void **v445;
  void **v446;
  void **v447;
  __int128 v448;
  unint64_t *v450;
  unint64_t v451;
  uint64_t v452;
  const std::runtime_error *v453;
  char v454;
  std::runtime_error *v455;
  uint64_t v456;
  const char **v457;
  _QWORD *v458;
  uint64_t v459;
  char *v460;
  uint64_t v461;
  std::runtime_error *v462;
  std::runtime_error_vtbl *v463;
  uint64_t v464;
  unint64_t *v465;
  unint64_t v466;
  std::__shared_weak_count *v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  void *v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t *v481;
  unint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  void *v492;
  uint64_t v493;
  void *v494;
  unint64_t *v495;
  __n128 *v496;
  __int128 *v497;
  __int128 *v498;
  void **v499;
  void **v500;
  uint64_t **v501;
  std::string *v502;
  void **v504;
  _BYTE *v505;
  char *v506;
  char *v507;
  uint64_t v508;
  uint64_t v509;
  __int128 v510;
  __int128 v511;
  AMSCore::IMetricsProvider::Event *v512;
  _OWORD *v513;
  char *v514;
  _QWORD *v515;
  std::string *v516;
  uint64_t v517;
  _OWORD *v518;
  uint64_t v519;
  uint64_t *v520;
  std::runtime_error *v521;
  std::runtime_error *v522;
  uint64_t v523;
  AMSCore::IMetricsProvider::Event *v524;
  std::runtime_error *v525;
  AMSCore::HTTPResponseAction *v526;
  AMSCore::HTTPResponseAction *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t *v531;
  uint64_t v532;
  std::runtime_error v533;
  char *v534;
  AMSCore::HTTPResponseAction *v535;
  std::string *v536;
  std::string *v537;
  AMSCore::DialogRequest *v538;
  AMSCore::DialogRequest *v539;
  std::string v540;
  unsigned __int8 v541;
  unsigned int *v542;
  std::string v543;
  std::runtime_error v544;
  std::error_code ec;
  unsigned int **v546;
  uint64_t v547;
  std::string::size_type v548;
  __int128 v549;
  _BYTE __what_arg[32];
  unsigned int **v551;
  unsigned int *v552;
  void *v553;
  __int128 v554;
  char v555;
  _BYTE v556[32];
  unsigned int **v557;
  unsigned int *v558;
  std::runtime_error_vtbl *v559;
  __int128 v560;
  std::system_error __dst;
  unsigned int **v562;
  uint64_t v563;
  std::string::size_type v564;
  __int128 v565;
  std::string v566;
  std::runtime_error v567;
  __int128 v568;
  void *v569[3];
  _BYTE v570[32];
  __int128 v571;
  uint64_t v572;
  const char **v573;
  const char *v574;
  std::runtime_error v575;
  std::runtime_error_vtbl *v576;
  int v577;
  char v578;
  __int128 __s;
  int64_t v580;
  int v581;
  __int128 v582;
  const char *v583;
  unsigned int **v584;
  unsigned int *v585;
  std::runtime_error_vtbl *v586;
  __int128 v587;
  const char *v588;
  char v589;
  char v590;
  char v591;
  char v592;
  char v593;
  char v594;
  char v595;
  char v596;
  char v597;
  char v598;
  char v599;
  char v600;
  char v601;
  int v602;
  std::system_error v603;
  unsigned int **v604;
  unsigned int *v605;
  std::string v606;
  uint64_t **v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  char v611;
  uint64_t v612;
  std::error_code v613;
  std::error_code v614;
  std::error_code v615;

  v612 = *MEMORY[0x1E0C80C00];
  v9 = (char *)operator new(0x890uLL);
  v10 = (unint64_t)v9;
  *(_QWORD *)v9 = AMSCore::FinanceDialogRequest::perform;
  *((_QWORD *)v9 + 1) = AMSCore::FinanceDialogRequest::perform;
  v505 = v9 + 2168;
  v527 = (AMSCore::HTTPResponseAction *)(v9 + 536);
  v538 = (AMSCore::DialogRequest *)(v9 + 1000);
  v539 = (AMSCore::DialogRequest *)(v9 + 1296);
  v536 = (std::string *)(v9 + 1912);
  v516 = (std::string *)(v9 + 1944);
  v512 = (AMSCore::IMetricsProvider::Event *)(v9 + 1752);
  v514 = v9 + 1976;
  v521 = (std::runtime_error *)(v9 + 2000);
  v534 = v9 + 2024;
  v530 = (uint64_t)(v9 + 2048);
  v11 = (uint64_t)(v9 + 2072);
  v524 = (AMSCore::IMetricsProvider::Event *)(v9 + 1592);
  v525 = (std::runtime_error *)(v9 + 2096);
  v12 = *a2;
  *((_QWORD *)v9 + 268) = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v506 = v9 + 2128;
  v507 = v9 + 2112;
  v13 = (uint64_t)(v9 + 16);
  v517 = *a3;
  v519 = a3[1];
  *((_QWORD *)v9 + 269) = v519;
  *a3 = 0;
  a3[1] = 0;
  v528 = *a4;
  v14 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v508 = v14;
  *((_QWORD *)v9 + 270) = v14;
  do
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v15 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v9[24] = 0;
  v9[488] = 0;
  *((_QWORD *)v9 + 62) = 0;
  v526 = (AMSCore::HTTPResponseAction *)(v9 + 24);
  *((_QWORD *)v9 + 66) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v567, v13);
  *a5 = v567;
  v16 = *(AMSCore::HTTPResponse **)(v12 + 104);
  v17 = *(std::__shared_weak_count **)(v12 + 112);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    AMSCore::HTTPResponse::getDecodedObject(v16);
    if (!*(_BYTE *)(v20 + 72))
      goto LABEL_981;
    v21 = v20;
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    AMSCore::HTTPResponse::getDecodedObject(v16);
    v21 = v24;
    if (!*(_BYTE *)(v24 + 72))
      goto LABEL_981;
  }
  v523 = v13;
  v27 = *(uint64_t **)(v21 + 8);
  v25 = (_QWORD *)(v21 + 8);
  v26 = v27;
  if (!v27)
    goto LABEL_43;
  v28 = v25;
  do
  {
    while (1)
    {
      v29 = *((char *)v26 + 55);
      v30 = v29 >= 0 ? v26 + 4 : (uint64_t *)v26[4];
      v31 = v29 >= 0 ? *((unsigned __int8 *)v26 + 55) : v26[5];
      v32 = v31 >= 6 ? 6 : v31;
      v33 = memcmp("dialog", v30, v32);
      if (v33)
        break;
      if (v31 >= 6)
        goto LABEL_28;
LABEL_14:
      v26 = (uint64_t *)v26[1];
      if (!v26)
        goto LABEL_29;
    }
    if ((v33 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_28:
    v28 = v26;
    v26 = (uint64_t *)*v26;
  }
  while (v26);
LABEL_29:
  if (v28 == v25)
    goto LABEL_43;
  v34 = *((char *)v28 + 55);
  if (v34 >= 0)
    v35 = v28 + 4;
  else
    v35 = (const void *)v28[4];
  if (v34 >= 0)
    v36 = *((unsigned __int8 *)v28 + 55);
  else
    v36 = v28[5];
  if (v36 >= 6)
    v37 = 6;
  else
    v37 = v36;
  v38 = memcmp("dialog", v35, v37);
  if (v38)
  {
    if ((v38 & 0x80000000) == 0)
      goto LABEL_41;
LABEL_43:
    v39 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v36 > 6)
      goto LABEL_43;
LABEL_41:
    v39 = v28 + 7;
  }
  v40 = *((_DWORD *)v39 + 6);
  if (v40 == 8)
    v41 = v39;
  else
    v41 = 0;
  if (v40 != 8)
  {
    AMSCore::StringUtils::join<char [22]>((std::string *)__what_arg, "Dialog was not a map.");
    v613.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
    *(_QWORD *)&v613.__val_ = 311;
    std::system_error::system_error(&v603, v613, (const std::string *)__what_arg);
    v56 = v527;
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    memset(&v606, 0, sizeof(v606));
    v605 = 0;
    v603.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v604 = &v605;
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v567, &v603);
    if (*(_BYTE *)(v10 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v526);
      *(_BYTE *)(v10 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v526, (uint64_t)&v567);
    *(_BYTE *)(v10 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v567);
    v603.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v57 = (std::__shared_weak_count *)v606.__r_.__value_.__r.__words[2];
    if (v606.__r_.__value_.__r.__words[2])
    {
      v58 = (unint64_t *)(v606.__r_.__value_.__r.__words[2] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v604, v605);
    MEMORY[0x18D7898AC](&v603);
    goto LABEL_720;
  }
  BYTE7(v568) = 7;
  strcpy((char *)&v567, "message");
  AMSCore::Any::string(v11, (uint64_t)v41, (const void **)&v567.__vftable);
  BYTE7(v568) = 11;
  strcpy((char *)&v567, "explanation");
  AMSCore::Any::string(v530, (uint64_t)v41, (const void **)&v567.__vftable);
  v42 = *(_QWORD *)(v528 + 40);
  v43 = (uint64_t *)*v25;
  v531 = v41;
  if (!*v25)
    goto LABEL_91;
  v44 = v25;
  while (2)
  {
    while (2)
    {
      v45 = *((char *)v43 + 55);
      if (v45 >= 0)
        v46 = v43 + 4;
      else
        v46 = (const void *)v43[4];
      if (v45 >= 0)
        v47 = *((unsigned __int8 *)v43 + 55);
      else
        v47 = v43[5];
      if (v47 >= 7)
        v48 = 7;
      else
        v48 = v47;
      v49 = memcmp("metrics", v46, v48);
      if (v49)
      {
        if (v49 < 0)
          break;
        goto LABEL_51;
      }
      if (v47 < 7)
      {
LABEL_51:
        v43 = (uint64_t *)v43[1];
        if (!v43)
          goto LABEL_66;
        continue;
      }
      break;
    }
    v44 = v43;
    v43 = (uint64_t *)*v43;
    if (v43)
      continue;
    break;
  }
LABEL_66:
  if (v44 == v25)
  {
    v55 = &AMSCore::Any::Null(void)::null;
    v41 = v531;
  }
  else
  {
    v50 = *((char *)v44 + 55);
    if (v50 >= 0)
      v51 = v44 + 4;
    else
      v51 = (const void *)v44[4];
    if (v50 >= 0)
      v52 = *((unsigned __int8 *)v44 + 55);
    else
      v52 = v44[5];
    if (v52 >= 7)
      v53 = 7;
    else
      v53 = v52;
    v54 = memcmp("metrics", v51, v53);
    if (v54)
    {
      v41 = v531;
      if ((v54 & 0x80000000) == 0)
        goto LABEL_78;
LABEL_91:
      v55 = &AMSCore::Any::Null(void)::null;
    }
    else
    {
      v41 = v531;
      if (v52 > 7)
        goto LABEL_91;
LABEL_78:
      v55 = v44 + 7;
    }
  }
  v60 = *((_DWORD *)v55 + 6);
  if (v60 == 8)
    v61 = v55;
  else
    v61 = 0;
  v504 = (void **)v11;
  if (v60 == 8)
  {
    AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>((uint64_t)__what_arg, (uint64_t)v61, "topic", 5uLL);
    if (v555)
      goto LABEL_112;
    AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>((uint64_t)&v567, (uint64_t)v61, "mtTopic", 7uLL);
    if (v555)
    {
      if (v570[16])
      {
        *(_QWORD *)__what_arg = v567.__vftable;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v567);
        *(_OWORD *)&__what_arg[16] = v568;
        *(_QWORD *)__what_arg = off_1E2521330;
        v551 = (unsigned int **)v569[0];
        v552 = (unsigned int *)v569[1];
        v553 = v569[2];
        if (v569[2])
        {
          *((_QWORD *)v569[1] + 2) = &v552;
          v569[0] = &v569[1];
          v569[1] = 0;
          v569[2] = 0;
        }
        else
        {
          v551 = &v552;
        }
        v554 = *(_OWORD *)v570;
        *(_QWORD *)&v570[8] = 0;
        *(_QWORD *)v570 = 0;
        v555 = 0;
      }
    }
    else if (v570[16])
    {
      (**(void (***)(_BYTE *))__what_arg)(__what_arg);
      *(_QWORD *)__what_arg = v567.__vftable;
      v555 = 1;
    }
    else
    {
      std::runtime_error::operator=((std::runtime_error *)__what_arg, &v567);
      *(_OWORD *)&__what_arg[16] = v568;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v551, v552);
      v551 = (unsigned int **)v569[0];
      v552 = (unsigned int *)v569[1];
      v553 = v569[2];
      if (v569[2])
      {
        *((_QWORD *)v569[1] + 2) = &v552;
        v569[0] = &v569[1];
        v569[1] = 0;
        v569[2] = 0;
      }
      else
      {
        v551 = &v552;
      }
      v408 = *(_OWORD *)v570;
      *(_QWORD *)&v570[8] = 0;
      *(_QWORD *)v570 = 0;
      v409 = (std::__shared_weak_count *)*((_QWORD *)&v554 + 1);
      v554 = v408;
      if (v409)
      {
        v410 = (unint64_t *)&v409->__shared_owners_;
        do
          v411 = __ldaxr(v410);
        while (__stlxr(v411 - 1, v410));
        if (!v411)
        {
          ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
          std::__shared_weak_count::__release_weak(v409);
        }
      }
    }
    if (!v570[16])
      ((void (*)(std::runtime_error *))v567.~runtime_error)(&v567);
    if (v555)
    {
LABEL_112:
      if (*(char *)(*(_QWORD *)__what_arg + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v556, **(const std::string::value_type ***)__what_arg, *(_QWORD *)(*(_QWORD *)__what_arg + 8));
      }
      else
      {
        v62 = **(_OWORD **)__what_arg;
        *(_QWORD *)&v556[16] = *(_QWORD *)(*(_QWORD *)__what_arg + 16);
        *(_OWORD *)v556 = v62;
      }
      AMSCore::IMetricsProvider::Event::Event((uint64_t)&v567, (__int128 *)v556, v42);
      v567.__vftable = (std::runtime_error_vtbl *)&off_1E2520C08;
      if ((v556[23] & 0x80000000) != 0)
        operator delete(*(void **)v556);
      v65 = (const std::string::value_type **)*v61;
      v63 = (const std::string::value_type ***)(v61 + 1);
      v64 = v65;
      if (v65 != (const std::string::value_type **)v63)
      {
        do
        {
          LOBYTE(__dst.__vftable) = 0;
          LODWORD(__dst.__ec_.__cat_) = -1;
          v66 = *((unsigned int *)v64 + 20);
          if ((_DWORD)v66 != -1)
          {
            ((void (*)(std::string *, std::system_error *, const std::string::value_type **))off_1E253D1E0[v66])(&v566, &__dst, v64 + 7);
            LODWORD(__dst.__ec_.__cat_) = v66;
          }
          LOBYTE(v562) = 1;
          std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<AMSCore::Any>((_QWORD **)&v570[16], v64 + 4, (uint64_t)&__dst);
          if ((_BYTE)v562)
          {
            if (LODWORD(__dst.__ec_.__cat_) != -1)
              ((void (*)(std::runtime_error *, std::system_error *))off_1E253D240[LODWORD(__dst.__ec_.__cat_)])(&v544, &__dst);
            LODWORD(__dst.__ec_.__cat_) = -1;
          }
          v67 = v64[1];
          if (v67)
          {
            do
            {
              v68 = (const std::string::value_type ***)v67;
              v67 = *(const std::string::value_type **)v67;
            }
            while (v67);
          }
          else
          {
            do
            {
              v68 = (const std::string::value_type ***)v64[2];
              v199 = *v68 == v64;
              v64 = (const std::string::value_type **)v68;
            }
            while (!v199);
          }
          v64 = (const std::string::value_type **)v68;
        }
        while (v68 != v63);
      }
      AMSCore::IMetricsProvider::Event::Event((AMSCore::IMetricsProvider::Event *)&v603, (const AMSCore::IMetricsProvider::Event *)&v567);
      v603.__vftable = (std::system_error_vtbl *)&off_1E2520C08;
      v611 = 1;
      AMSCore::IMetricsProvider::Event::~Event((AMSCore::IMetricsProvider::Event *)&v567);
      if (v555)
        goto LABEL_133;
    }
    else
    {
      AMSCore::Error::Error((std::runtime_error *)v556, (const std::runtime_error *)__what_arg);
      v73 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v74 = MEMORY[0x1E0DE4FE0] + 64;
      v75 = MEMORY[0x1E0DE4F60];
      v76 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v77 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v573 = (const char **)(MEMORY[0x1E0DE4FE0] + 64);
      v567.__vftable = v76;
      *(std::runtime_error_vtbl **)((char *)&v567.__vftable + (unint64_t)v76[-1].~runtime_error) = v77;
      v78 = (std::ios_base *)((char *)&v567 + (unint64_t)v567.__vftable[-1].~runtime_error);
      std::ios_base::init(v78, &v567.__imp_);
      v78[1].__vftable = 0;
      v78[1].__fmtflags_ = -1;
      v567.__vftable = v73 + 1;
      v573 = (const char **)v74;
      std::streambuf::basic_streambuf();
      v79 = MEMORY[0x1E0DE4FB8];
      v567.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      *(_OWORD *)&v570[16] = 0u;
      v571 = 0u;
      LODWORD(v572) = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v567, (uint64_t)"metrics dictionary is missing a ", 32);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v567, (uint64_t)"topic", 5);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v567, (uint64_t)" and ", 5);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v567, (uint64_t)"mtTopic", 7);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v567.__imp_, &v566);
      v567.__vftable = *(std::runtime_error_vtbl **)v75;
      *(std::runtime_error_vtbl **)((char *)&v567.__vftable + (unint64_t)v567.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v75 + 24);
      v567.__imp_.__imp_ = (const char *)(v79 + 16);
      if (SBYTE7(v571) < 0)
        operator delete(*(void **)&v570[16]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](&v573);
      v614.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(_QWORD *)&v614.__val_ = 12;
      std::system_error::system_error(&__dst, v614, &v566);
      if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v566.__r_.__value_.__l.__data_);
      v564 = 0;
      v563 = 0;
      __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v562 = (unsigned int **)&v563;
      v80 = operator new();
      v81 = std::runtime_error::runtime_error((std::runtime_error *)v80, (const std::runtime_error *)v556);
      v81[1] = *(std::runtime_error *)&v556[16];
      v81->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v82 = v558;
      v81[2].__vftable = (std::runtime_error_vtbl *)v557;
      v81[2].__imp_.__imp_ = (const char *)v82;
      p_imp = &v81[2].__imp_;
      v84 = v559;
      v81[3].__vftable = v559;
      if (v84)
      {
        *((_QWORD *)v82 + 2) = p_imp;
        v557 = &v558;
        v558 = 0;
        v559 = 0;
      }
      else
      {
        *(_QWORD *)(v80 + 32) = p_imp;
      }
      *(_OWORD *)(v80 + 56) = v560;
      v560 = 0uLL;
      *(_QWORD *)&v565 = v80;
      v107 = (_QWORD *)operator new();
      *v107 = &off_1E2523B58;
      v107[1] = 0;
      v107[2] = 0;
      v107[3] = v80;
      *((_QWORD *)&v565 + 1) = v107;
      std::runtime_error::runtime_error(&v544, &__dst);
      ec = __dst.__ec_;
      v544.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v108 = (unsigned int *)v563;
      v546 = v562;
      v547 = v563;
      v548 = v564;
      if (v564)
      {
        *(_QWORD *)(v563 + 16) = &v547;
        v108 = 0;
        v562 = (unsigned int **)&v563;
        v563 = 0;
        v564 = 0;
      }
      else
      {
        v546 = (unsigned int **)&v547;
      }
      v549 = v565;
      v565 = 0uLL;
      __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v562, v108);
      MEMORY[0x18D7898AC](&__dst);
      *(_QWORD *)v556 = off_1E2521330;
      v109 = (std::__shared_weak_count *)*((_QWORD *)&v560 + 1);
      if (*((_QWORD *)&v560 + 1))
      {
        v110 = (unint64_t *)(*((_QWORD *)&v560 + 1) + 8);
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v557, v558);
      MEMORY[0x18D7898AC](v556);
      std::runtime_error::runtime_error(&v603, &v544);
      v603.__ec_ = ec;
      v603.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v112 = (unsigned int *)v547;
      v604 = v546;
      v605 = (unsigned int *)v547;
      v606.__r_.__value_.__r.__words[0] = v548;
      if (v548)
      {
        *(_QWORD *)(v547 + 16) = &v605;
        v112 = 0;
        v546 = (unsigned int **)&v547;
        v547 = 0;
        v548 = 0;
      }
      else
      {
        v604 = &v605;
      }
      *(_OWORD *)&v606.__r_.__value_.__r.__words[1] = v549;
      v549 = 0uLL;
      v611 = 0;
      v544.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v546, v112);
      MEMORY[0x18D7898AC](&v544);
      if (v555)
      {
LABEL_133:
        if (v611)
          goto LABEL_134;
        goto LABEL_239;
      }
    }
    (**(void (***)(_BYTE *))__what_arg)(__what_arg);
    if (v611)
    {
LABEL_134:
      if (v517)
      {
        v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v517 + 72))(v517);
        v70 = v69;
        v540.__r_.__value_.__s.__data_[0] = 0;
        v541 = 0;
        v71 = *(unsigned __int8 *)(v69 + 24);
        if (*(_BYTE *)(v69 + 24))
        {
          if (*(char *)(v69 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v540, *(const std::string::value_type **)v69, *(_QWORD *)(v69 + 8));
          }
          else
          {
            v72 = *(_OWORD *)v69;
            v540.__r_.__value_.__r.__words[2] = *(_QWORD *)(v69 + 16);
            *(_OWORD *)&v540.__r_.__value_.__l.__data_ = v72;
          }
          v71 = 1;
          v541 = 1;
        }
        v542 = *(unsigned int **)(v70 + 32);
        if (*(char *)(v70 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(&v543, *(const std::string::value_type **)(v70 + 40), *(_QWORD *)(v70 + 48));
          v71 = v541;
        }
        else
        {
          v85 = *(_OWORD *)(v70 + 40);
          v543.__r_.__value_.__r.__words[2] = *(_QWORD *)(v70 + 56);
          *(_OWORD *)&v543.__r_.__value_.__l.__data_ = v85;
        }
        if (v604 == v71)
        {
          if ((_BYTE)v604)
          {
            if (SHIBYTE(v603.__ec_.__cat_) < 0)
              operator delete((void *)v603.__imp_.__imp_);
            *(_OWORD *)&v603.__imp_.__imp_ = *(_OWORD *)&v540.__r_.__value_.__l.__data_;
            v603.__ec_.__cat_ = (const std::error_category *)v540.__r_.__value_.__r.__words[2];
            *((_BYTE *)&v540.__r_.__value_.__s + 23) = 0;
            v540.__r_.__value_.__s.__data_[0] = 0;
          }
        }
        else if ((_BYTE)v604)
        {
          if (SHIBYTE(v603.__ec_.__cat_) < 0)
            operator delete((void *)v603.__imp_.__imp_);
          LOBYTE(v604) = 0;
        }
        else
        {
          *(_OWORD *)&v603.__imp_.__imp_ = *(_OWORD *)&v540.__r_.__value_.__l.__data_;
          v603.__ec_.__cat_ = (const std::error_category *)v540.__r_.__value_.__r.__words[2];
          memset(&v540, 0, sizeof(v540));
          LOBYTE(v604) = 1;
        }
        v605 = v542;
        if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v606.__r_.__value_.__l.__data_);
        v606 = v543;
        *((_BYTE *)&v543.__r_.__value_.__s + 23) = 0;
        v543.__r_.__value_.__s.__data_[0] = 0;
        if (v541 && SHIBYTE(v540.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v540.__r_.__value_.__l.__data_);
        if (!v611)
          goto LABEL_981;
      }
      __what_arg[23] = 12;
      strcpy(__what_arg, "eventVersion");
      v86 = (uint64_t *)&v608;
      v87 = v608;
      if (!v608)
        goto LABEL_200;
      v88 = &v608;
      while (1)
      {
        v89 = *((char *)v87 + 55);
        if (v89 >= 0)
          v90 = v87 + 4;
        else
          v90 = (const void *)v87[4];
        if (v89 >= 0)
          v91 = *((unsigned __int8 *)v87 + 55);
        else
          v91 = v87[5];
        if (v91 >= 0xC)
          v92 = 12;
        else
          v92 = v91;
        v93 = memcmp(v90, __what_arg, v92);
        if (v93)
        {
          if (v93 < 0)
            goto LABEL_169;
LABEL_167:
          v88 = (uint64_t **)v87;
          v87 = (uint64_t *)*v87;
          if (!v87)
            goto LABEL_184;
        }
        else
        {
          if (v91 >= 0xC)
            goto LABEL_167;
LABEL_169:
          v87 = (uint64_t *)v87[1];
          if (!v87)
          {
LABEL_184:
            if (v88 != &v608)
            {
              v94 = *((char *)v88 + 55);
              if (v94 >= 0)
                v95 = (uint64_t *)(v88 + 4);
              else
                v95 = v88[4];
              if (v94 >= 0)
                v96 = *((unsigned __int8 *)v88 + 55);
              else
                v96 = (unint64_t)v88[5];
              if (v96 >= 0xC)
                v97 = 12;
              else
                v97 = v96;
              v98 = memcmp(__what_arg, v95, v97);
              if (v98)
              {
                if ((v98 & 0x80000000) == 0)
                {
LABEL_196:
                  v567.__vftable = (std::runtime_error_vtbl *)2;
                  DWORD2(v568) = 3;
                  AMSCore::Any::operator=((uint64_t)(v88 + 7), (uint64_t)&v567);
                  if (DWORD2(v568) != -1)
                    ((void (*)(std::system_error *, std::runtime_error *))off_1E253D240[DWORD2(v568)])(&__dst, &v567);
                  goto LABEL_207;
                }
              }
              else if (v96 <= 0xC)
              {
                goto LABEL_196;
              }
              v86 = (uint64_t *)v88;
            }
LABEL_200:
            v99 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>((uint64_t **)&v607, v86, (uint64_t **)&v567, (uint64_t **)&__dst, (const void **)__what_arg);
            if (!*v99)
            {
              v100 = (char *)operator new(0x58uLL);
              v101 = (std::string *)(v100 + 32);
              if ((__what_arg[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v101, *(const std::string::value_type **)__what_arg, *(std::string::size_type *)&__what_arg[8]);
              }
              else
              {
                *(_OWORD *)&v101->__r_.__value_.__l.__data_ = *(_OWORD *)__what_arg;
                *((_QWORD *)v100 + 6) = *(_QWORD *)&__what_arg[16];
              }
              *((_QWORD *)v100 + 7) = 2;
              *((_DWORD *)v100 + 20) = 3;
              v102 = v567.__vftable;
              *(_QWORD *)v100 = 0;
              *((_QWORD *)v100 + 1) = 0;
              *((_QWORD *)v100 + 2) = v102;
              *v99 = (uint64_t)v100;
              if (*v607)
              {
                v607 = (uint64_t **)*v607;
                v100 = (char *)*v99;
              }
              std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v608, (uint64_t *)v100);
              ++v609;
            }
LABEL_207:
            if ((__what_arg[23] & 0x80000000) != 0)
              operator delete(*(void **)__what_arg);
            AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(__what_arg);
            (*(void (**)(std::runtime_error *__return_ptr))(**(_QWORD **)__what_arg + 104))(&v567);
            v103 = *(std::__shared_weak_count **)&__what_arg[8];
            if (*(_QWORD *)&__what_arg[8])
            {
              v104 = (unint64_t *)(*(_QWORD *)&__what_arg[8] + 8);
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            if (BYTE8(v568))
            {
              __what_arg[23] = 10;
              strcpy(__what_arg, "pixelRatio");
              __dst.__vftable = (std::system_error_vtbl *)v567.__vftable;
              __dst.__imp_.__imp_ = (const char *)1;
              std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<double>(&v607, (const std::string::value_type **)__what_arg, (uint64_t **)&__dst);
              if ((__what_arg[23] & 0x80000000) != 0)
                operator delete(*(void **)__what_arg);
              __what_arg[23] = 11;
              strcpy(__what_arg, "screenWidth");
              if (!BYTE8(v568))
                goto LABEL_981;
              __dst.__vftable = (std::system_error_vtbl *)v568;
              __dst.__imp_.__imp_ = (const char *)1;
              std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>(&v607, (const std::string::value_type **)__what_arg, (uint64_t **)&__dst);
              if ((__what_arg[23] & 0x80000000) != 0)
                operator delete(*(void **)__what_arg);
              __what_arg[23] = 12;
              strcpy(__what_arg, "screenHeight");
              if (!BYTE8(v568))
                goto LABEL_981;
              __dst.__vftable = (std::system_error_vtbl *)v567.__imp_.__imp_;
              __dst.__imp_.__imp_ = (const char *)1;
              std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>(&v607, (const std::string::value_type **)__what_arg, (uint64_t **)&__dst);
              if ((__what_arg[23] & 0x80000000) != 0)
                operator delete(*(void **)__what_arg);
            }
            if (!v611)
              goto LABEL_981;
            AMSCore::IMetricsProvider::Event::Event(v524, (const AMSCore::IMetricsProvider::Event *)&v603);
            *(_QWORD *)v524 = &off_1E2520C08;
            v106 = 1;
LABEL_245:
            *(_BYTE *)(v10 + 1744) = v106;
            ((void (*)(AMSCore::Error *))v603.~system_error)((AMSCore::Error *)&v603);
          }
        }
      }
    }
LABEL_239:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v567);
    AMSCore::Logger::log<char [31],AMSCore::Error>((uint64_t)v567.__vftable, 4, (uint64_t)"metrics", 7, "Error malformed metrics plist ", (uint64_t)&v603);
    imp = (std::__shared_weak_count *)v567.__imp_.__imp_;
    if (v567.__imp_.__imp_)
    {
      v114 = (unint64_t *)(v567.__imp_.__imp_ + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    v106 = 0;
    *(_BYTE *)v524 = 0;
    goto LABEL_245;
  }
  *(_BYTE *)(v10 + 1592) = 0;
  *(_BYTE *)(v10 + 1744) = 0;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v567);
  AMSCore::Logger::log<char [41]>((uint64_t)v567.__vftable, 2, (uint64_t)"metrics", 7, "FinanceDialog metrics dictionary missing");
  v116 = (std::__shared_weak_count *)v567.__imp_.__imp_;
  if (v567.__imp_.__imp_)
  {
    v117 = (unint64_t *)(v567.__imp_.__imp_ + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = *(unsigned __int8 *)(v10 + 1744);
  *(_OWORD *)v534 = *(_OWORD *)v11;
  *((_QWORD *)v534 + 2) = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = 0;
  *(_OWORD *)v514 = *(_OWORD *)v530;
  *((_QWORD *)v514 + 2) = *(_QWORD *)(v530 + 16);
  *(_QWORD *)v530 = 0;
  *(_QWORD *)(v530 + 8) = 0;
  *(_QWORD *)(v530 + 16) = 0;
  *(_BYTE *)(v10 + 1752) = 0;
  *(_BYTE *)(v10 + 1904) = 0;
  if (v119)
  {
    AMSCore::IMetricsProvider::Event::Event(v512, v524);
    *(_QWORD *)(v10 + 1752) = &off_1E2520C08;
    *(_BYTE *)(v10 + 1904) = 1;
  }
  v499 = (void **)(v10 + 1320);
  *(_BYTE *)(v10 + 1344) = 0;
  *((_QWORD *)v539 + 1) = 0;
  *((_QWORD *)v539 + 2) = 0;
  *(_QWORD *)v539 = 0;
  *((_BYTE *)v539 + 24) = 0;
  *(_OWORD *)(v10 + 1352) = *(_OWORD *)v514;
  *(_QWORD *)(v10 + 1368) = *((_QWORD *)v514 + 2);
  *(_QWORD *)v514 = 0;
  *((_QWORD *)v514 + 1) = 0;
  *((_QWORD *)v514 + 2) = 0;
  *(_OWORD *)(v10 + 1376) = *(_OWORD *)v534;
  *(_QWORD *)(v10 + 1392) = *((_QWORD *)v534 + 2);
  *(_QWORD *)v534 = 0;
  *((_QWORD *)v534 + 1) = 0;
  *((_QWORD *)v534 + 2) = 0;
  v501 = (uint64_t **)(v10 + 1400);
  v120 = (uint64_t *)(v10 + 1408);
  *(_QWORD *)(v10 + 1416) = 0;
  *(_QWORD *)(v10 + 1408) = 0;
  *(_QWORD *)(v10 + 1400) = v10 + 1408;
  *(_BYTE *)(v10 + 1424) = 0;
  *(_BYTE *)(v10 + 1576) = 0;
  if (!v119)
  {
    *(_BYTE *)(v10 + 1584) = 0;
    if ((*(char *)(v10 + 1999) & 0x80000000) == 0)
      goto LABEL_257;
LABEL_304:
    operator delete(*(void **)v514);
    if (*(char *)(v10 + 2047) < 0)
      goto LABEL_305;
    goto LABEL_258;
  }
  AMSCore::IMetricsProvider::Event::Event((AMSCore::IMetricsProvider::Event *)(v10 + 1424), v512);
  *(_QWORD *)(v10 + 1424) = &off_1E2520C08;
  *(_BYTE *)(v10 + 1576) = 1;
  v121 = *(unsigned __int8 *)(v10 + 1904);
  *(_BYTE *)(v10 + 1584) = 0;
  if (v121)
    AMSCore::IMetricsProvider::Event::~Event(v512);
  if (*(char *)(v10 + 1999) < 0)
    goto LABEL_304;
LABEL_257:
  if ((*(char *)(v10 + 2047) & 0x80000000) == 0)
    goto LABEL_258;
LABEL_305:
  operator delete(*(void **)v534);
LABEL_258:
  *((_BYTE *)&v603.__ec_.__val_ + 7) = 13;
  strcpy((char *)&v603, "serverPayload");
  *(_OWORD *)&__what_arg[8] = 0uLL;
  *(_QWORD *)__what_arg = &__what_arg[8];
  v122 = (const void **)(v41 + 1);
  v123 = (const void **)*v41;
  if (v123 != v122)
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)__what_arg, (uint64_t *)&__what_arg[8], v123 + 4, (__int128 *)v123 + 2);
      v128 = (const void **)v123[1];
      if (v128)
      {
        do
        {
          v129 = v128;
          v128 = (const void **)*v128;
        }
        while (v128);
      }
      else
      {
        do
        {
          v129 = (const void **)v123[2];
          v199 = *v129 == v123;
          v123 = v129;
        }
        while (!v199);
      }
      v123 = v129;
    }
    while (v129 != v122);
  }
  v124 = *v120;
  if (!*v120)
  {
    v135 = v521;
    goto LABEL_309;
  }
  if (*((char *)&v603.__ec_.__val_ + 7) >= 0)
    v125 = &v603;
  else
    v125 = v603.__vftable;
  if (*((char *)&v603.__ec_.__val_ + 7) >= 0)
    v126 = (const char *)*((unsigned __int8 *)&v603.__ec_.__val_ + 7);
  else
    v126 = v603.__imp_.__imp_;
  v127 = v10 + 1408;
  while (2)
  {
    while (2)
    {
      v130 = *(char *)(v124 + 55);
      if (v130 >= 0)
        v131 = (const void *)(v124 + 32);
      else
        v131 = *(const void **)(v124 + 32);
      if (v130 >= 0)
        v132 = *(unsigned __int8 *)(v124 + 55);
      else
        v132 = *(_QWORD *)(v124 + 40);
      if ((unint64_t)v126 >= v132)
        v133 = v132;
      else
        v133 = (size_t)v126;
      v134 = memcmp(v131, v125, v133);
      if (v134)
      {
        if ((v134 & 0x80000000) == 0)
          break;
        goto LABEL_274;
      }
      if (v132 < (unint64_t)v126)
      {
LABEL_274:
        v124 = *(_QWORD *)(v124 + 8);
        if (!v124)
          goto LABEL_289;
        continue;
      }
      break;
    }
    v127 = v124;
    v124 = *(_QWORD *)v124;
    if (v124)
      continue;
    break;
  }
LABEL_289:
  v135 = v521;
  if ((uint64_t *)v127 != v120)
  {
    v136 = *(char *)(v127 + 55);
    if (v136 >= 0)
      v137 = (const void *)(v127 + 32);
    else
      v137 = *(const void **)(v127 + 32);
    if (v136 >= 0)
      v138 = *(unsigned __int8 *)(v127 + 55);
    else
      v138 = *(_QWORD *)(v127 + 40);
    if (v138 >= (unint64_t)v126)
      v139 = (size_t)v126;
    else
      v139 = v138;
    v140 = memcmp(v125, v137, v139);
    if (v140)
    {
      if ((v140 & 0x80000000) == 0)
      {
LABEL_301:
        v567 = *(std::runtime_error *)__what_arg;
        *(_QWORD *)&v568 = *(_QWORD *)&__what_arg[16];
        if (*(_QWORD *)&__what_arg[16])
        {
          *(_QWORD *)(*(_QWORD *)&__what_arg[8] + 16) = &v567.__imp_;
          *(_QWORD *)__what_arg = &__what_arg[8];
          *(_OWORD *)&__what_arg[8] = 0uLL;
        }
        else
        {
          v567.__vftable = (std::runtime_error_vtbl *)&v567.__imp_;
        }
        v141 = (uint64_t)v531;
        DWORD2(v568) = 8;
        AMSCore::Any::operator=(v127 + 56, (uint64_t)&v567);
        if (DWORD2(v568) != -1)
          ((void (*)(std::system_error *, std::runtime_error *))off_1E253D240[DWORD2(v568)])(&__dst, &v567);
        goto LABEL_319;
      }
    }
    else if ((unint64_t)v126 >= v138)
    {
      goto LABEL_301;
    }
    v120 = (uint64_t *)v127;
  }
LABEL_309:
  v141 = (uint64_t)v531;
  v142 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(v501, v120, (uint64_t **)&v567, (uint64_t **)&__dst, (const void **)&v603.__vftable);
  if (!*v142)
  {
    v143 = (uint64_t *)operator new(0x58uLL);
    v144 = v143;
    v145 = v603.std::runtime_error;
    v146 = *(_OWORD *)__what_arg;
    v143[8] = *(_QWORD *)&__what_arg[8];
    v147 = (char *)(v143 + 8);
    *((std::runtime_error *)v143 + 2) = v145;
    v148 = *(_QWORD *)&v603.__ec_.__val_;
    memset(&v603, 0, 24);
    v143[6] = v148;
    v143[7] = v146;
    v149 = *(_QWORD *)&__what_arg[16];
    v143[9] = *(_QWORD *)&__what_arg[16];
    if (v149)
    {
      *(_QWORD *)(*((_QWORD *)&v146 + 1) + 16) = v147;
      *(_QWORD *)__what_arg = &__what_arg[8];
      *(_OWORD *)&__what_arg[8] = 0uLL;
    }
    else
    {
      v143[7] = (uint64_t)v147;
    }
    *((_DWORD *)v143 + 20) = 8;
    v150 = v567.__vftable;
    *v143 = 0;
    v143[1] = 0;
    v143[2] = (uint64_t)v150;
    *v142 = (uint64_t)v143;
    v151 = (uint64_t *)**v501;
    if (v151)
    {
      *v501 = v151;
      v144 = (uint64_t *)*v142;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v10 + 1408), v144);
    ++*(_QWORD *)(v10 + 1416);
  }
LABEL_319:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)__what_arg, *(unsigned int **)&__what_arg[8]);
  if (*((char *)&v603.__ec_.__val_ + 7) < 0)
    operator delete(v603.__vftable);
  *(_BYTE *)(v10 + 1584) = AMSCore::Any::BOOLean(v141, "preventsCancelButtonStyle", 0x19uLL);
  *(_BYTE *)(v10 + 1944) = 0;
  *(_BYTE *)(v10 + 1968) = 0;
  v135->__imp_.__imp_ = 0;
  v135[1].__vftable = 0;
  v135->__vftable = 0;
  BYTE7(v568) = 13;
  strcpy((char *)&v567, "defaultButton");
  AMSCore::Any::string((uint64_t)&v603, v141, (const void **)&v567.__vftable);
  BYTE7(v568) = 14;
  strcpy((char *)&v567, "okButtonString");
  AMSCore::Any::string((uint64_t)__what_arg, v141, (const void **)&v567.__vftable);
  v152 = __what_arg[23];
  v153 = __what_arg[23];
  v154 = *(_QWORD *)&__what_arg[8];
  if (__what_arg[23] >= 0)
    v155 = __what_arg[23];
  else
    v155 = *(_QWORD *)&__what_arg[8];
  if (!v155)
  {
    *((_BYTE *)&__dst.__ec_.__val_ + 7) = 8;
    strcpy((char *)&__dst, "okButton");
    AMSCore::Any::string((uint64_t)&v567, v141, (const void **)&__dst.__vftable);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    *(std::runtime_error *)__what_arg = v567;
    *(_QWORD *)&__what_arg[16] = v568;
    BYTE7(v568) = 0;
    LOBYTE(v567.__vftable) = 0;
    if (*((char *)&__dst.__ec_.__val_ + 7) < 0)
      operator delete(__dst.__vftable);
    v152 = __what_arg[23];
    v154 = *(_QWORD *)&__what_arg[8];
    v153 = __what_arg[23];
  }
  if (v153 < 0)
    v152 = v154;
  if (!v152)
  {
    v169 = 0;
    goto LABEL_382;
  }
  v156 = (const void **)*v122;
  if (!*v122)
    goto LABEL_366;
  v157 = v122;
  while (2)
  {
    while (2)
    {
      v158 = *((char *)v156 + 55);
      if (v158 >= 0)
        v159 = v156 + 4;
      else
        v159 = v156[4];
      if (v158 >= 0)
        v160 = *((unsigned __int8 *)v156 + 55);
      else
        v160 = (unint64_t)v156[5];
      if (v160 >= 0xE)
        v161 = 14;
      else
        v161 = v160;
      v162 = memcmp("okButtonAction", v159, v161);
      if (v162)
      {
        if (v162 < 0)
          break;
        goto LABEL_335;
      }
      if (v160 < 0xE)
      {
LABEL_335:
        v156 = (const void **)v156[1];
        if (!v156)
          goto LABEL_350;
        continue;
      }
      break;
    }
    v157 = v156;
    v156 = (const void **)*v156;
    if (v156)
      continue;
    break;
  }
LABEL_350:
  if (v157 == v122)
  {
    v168 = &AMSCore::Any::Null(void)::null;
    v141 = (uint64_t)v531;
  }
  else
  {
    v163 = *((char *)v157 + 55);
    if (v163 >= 0)
      v164 = v157 + 4;
    else
      v164 = v157[4];
    if (v163 >= 0)
      v165 = *((unsigned __int8 *)v157 + 55);
    else
      v165 = (unint64_t)v157[5];
    if (v165 >= 0xE)
      v166 = 14;
    else
      v166 = v165;
    v167 = memcmp("okButtonAction", v164, v166);
    if (v167)
    {
      v141 = (uint64_t)v531;
      if ((v167 & 0x80000000) == 0)
        goto LABEL_362;
LABEL_366:
      v168 = &AMSCore::Any::Null(void)::null;
    }
    else
    {
      v141 = (uint64_t)v531;
      if (v165 > 0xE)
        goto LABEL_366;
LABEL_362:
      v168 = (uint64_t *)(v157 + 7);
    }
  }
  v170 = *((_DWORD *)v168 + 6);
  if (v170 == 8)
    v171 = (unsigned int ***)v168;
  else
    v171 = 0;
  *((_BYTE *)&__dst.__ec_.__val_ + 7) = 2;
  strcpy((char *)&__dst, "OK");
  AMSCore::FinanceDialogAction::getAction((uint64_t)&v567, v171, v170 == 8, (const void **)__what_arg, 2, (uint64_t)&__dst);
  v172 = (const char *)*((unsigned __int8 *)&v603.__ec_.__val_ + 7);
  if (*((char *)&v603.__ec_.__val_ + 7) < 0)
    v172 = v603.__imp_.__imp_;
  if (v172 == (const char *)2)
  {
    v173 = &v603;
    if (*((char *)&v603.__ec_.__val_ + 7) < 0)
      v173 = v603.__vftable;
    if (*v173 == 27503)
    {
      if (*(_BYTE *)(v10 + 1968))
      {
        if (*(char *)(v10 + 1967) < 0)
        {
          if (v580 >= 0)
            p_s = &__s;
          else
            p_s = (__int128 *)__s;
          if (v580 >= 0)
            v360 = HIBYTE(v580);
          else
            v360 = *((_QWORD *)&__s + 1);
          std::string::__assign_no_alias<false>((void **)&v516->__r_.__value_.__l.__data_, p_s, v360);
        }
        else if (v580 < 0)
        {
          std::string::__assign_no_alias<true>(v516, (void *)__s, *((size_t *)&__s + 1));
        }
        else
        {
          *(_OWORD *)&v516->__r_.__value_.__l.__data_ = __s;
          v516->__r_.__value_.__r.__words[2] = v580;
        }
      }
      else
      {
        if (SHIBYTE(v580) < 0)
        {
          std::string::__init_copy_ctor_external(v516, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          *(_OWORD *)&v516->__r_.__value_.__l.__data_ = __s;
          v516->__r_.__value_.__r.__words[2] = v580;
        }
        *(_BYTE *)(v10 + 1968) = 1;
      }
    }
  }
  v169 = (std::runtime_error *)std::vector<AMSCore::DialogAction>::__emplace_back_slow_path<AMSCore::DialogAction>((void **)&v135->__vftable, (uint64_t)&v567);
  v174 = SHIBYTE(v588);
  *(_QWORD *)(v10 + 2008) = v169;
  if (v174 < 0)
    operator delete((void *)v587);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v584, v585);
  if ((SHIBYTE(v583) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v580) & 0x80000000) == 0)
      goto LABEL_380;
LABEL_431:
    operator delete((void *)__s);
    if (!v578)
      goto LABEL_382;
LABEL_381:
    AMSCore::URL::~URL((AMSCore::URL *)&v567);
    goto LABEL_382;
  }
  operator delete((void *)v582);
  if (SHIBYTE(v580) < 0)
    goto LABEL_431;
LABEL_380:
  if (v578)
    goto LABEL_381;
LABEL_382:
  *((_BYTE *)&__dst.__ec_.__val_ + 7) = 18;
  strcpy((char *)&__dst, "cancelButtonString");
  AMSCore::Any::string((uint64_t)&v567, v141, (const void **)&__dst.__vftable);
  if ((__what_arg[23] & 0x80000000) != 0)
    operator delete(*(void **)__what_arg);
  *(std::runtime_error *)__what_arg = v567;
  *(_QWORD *)&__what_arg[16] = v568;
  BYTE7(v568) = 0;
  LOBYTE(v567.__vftable) = 0;
  if (*((char *)&__dst.__ec_.__val_ + 7) < 0)
    operator delete(__dst.__vftable);
  v175 = __what_arg[23];
  v176 = __what_arg[23];
  v177 = *(_QWORD *)&__what_arg[8];
  if (__what_arg[23] >= 0)
    v178 = __what_arg[23];
  else
    v178 = *(_QWORD *)&__what_arg[8];
  if (!v178)
  {
    *((_BYTE *)&__dst.__ec_.__val_ + 7) = 12;
    strcpy((char *)&__dst, "cancelButton");
    AMSCore::Any::string((uint64_t)&v567, v141, (const void **)&__dst.__vftable);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    *(std::runtime_error *)__what_arg = v567;
    *(_QWORD *)&__what_arg[16] = v568;
    BYTE7(v568) = 0;
    LOBYTE(v567.__vftable) = 0;
    if (*((char *)&__dst.__ec_.__val_ + 7) < 0)
      operator delete(__dst.__vftable);
    v175 = __what_arg[23];
    v177 = *(_QWORD *)&__what_arg[8];
    v176 = __what_arg[23];
  }
  if (v176 >= 0)
    v179 = v175;
  else
    v179 = v177;
  if (!v179)
    goto LABEL_477;
  v180 = (const void **)*v122;
  if (!*v122)
  {
LABEL_429:
    v192 = &AMSCore::Any::Null(void)::null;
    v141 = (uint64_t)v531;
    goto LABEL_439;
  }
  v181 = v122;
  while (2)
  {
    while (2)
    {
      v182 = *((char *)v180 + 55);
      if (v182 >= 0)
        v183 = v180 + 4;
      else
        v183 = v180[4];
      if (v182 >= 0)
        v184 = *((unsigned __int8 *)v180 + 55);
      else
        v184 = (unint64_t)v180[5];
      if (v184 >= 0x12)
        v185 = 18;
      else
        v185 = v184;
      v186 = memcmp("cancelButtonAction", v183, v185);
      if (v186)
      {
        if (v186 < 0)
          break;
        goto LABEL_401;
      }
      if (v184 < 0x12)
      {
LABEL_401:
        v180 = (const void **)v180[1];
        if (!v180)
          goto LABEL_416;
        continue;
      }
      break;
    }
    v181 = v180;
    v180 = (const void **)*v180;
    if (v180)
      continue;
    break;
  }
LABEL_416:
  v135 = v521;
  if (v181 == v122)
    goto LABEL_429;
  v187 = *((char *)v181 + 55);
  if (v187 >= 0)
    v188 = v181 + 4;
  else
    v188 = v181[4];
  if (v187 >= 0)
    v189 = *((unsigned __int8 *)v181 + 55);
  else
    v189 = (unint64_t)v181[5];
  if (v189 >= 0x12)
    v190 = 18;
  else
    v190 = v189;
  v191 = memcmp("cancelButtonAction", v188, v190);
  v141 = (uint64_t)v531;
  if (v191)
  {
    if ((v191 & 0x80000000) == 0)
      goto LABEL_428;
LABEL_438:
    v192 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v189 > 0x12)
      goto LABEL_438;
LABEL_428:
    v192 = (uint64_t *)(v181 + 7);
  }
LABEL_439:
  v193 = *((_DWORD *)v192 + 6);
  if (v193 == 8)
    v194 = (unsigned int ***)v192;
  else
    v194 = 0;
  *((_BYTE *)&__dst.__ec_.__val_ + 7) = 6;
  strcpy((char *)&__dst, "Cancel");
  AMSCore::FinanceDialogAction::getAction((uint64_t)&v567, v194, v193 == 8, (const void **)__what_arg, 0, (uint64_t)&__dst);
  v195 = (const char *)*((unsigned __int8 *)&v603.__ec_.__val_ + 7);
  if (*((char *)&v603.__ec_.__val_ + 7) < 0)
    v195 = v603.__imp_.__imp_;
  if (v195 == (const char *)6)
  {
    v196 = (unsigned __int16 *)&v603;
    if (*((char *)&v603.__ec_.__val_ + 7) < 0)
      v196 = (unsigned __int16 *)v603.__vftable;
    v197 = *(_DWORD *)v196;
    v198 = v196[2];
    v199 = v197 == 1668178275 && v198 == 27749;
    if (v199)
    {
      if (*(_BYTE *)(v10 + 1968))
      {
        if (*(char *)(v10 + 1967) < 0)
        {
          if (v580 >= 0)
            v361 = &__s;
          else
            v361 = (__int128 *)__s;
          if (v580 >= 0)
            v362 = HIBYTE(v580);
          else
            v362 = *((_QWORD *)&__s + 1);
          std::string::__assign_no_alias<false>((void **)&v516->__r_.__value_.__l.__data_, v361, v362);
        }
        else if (v580 < 0)
        {
          std::string::__assign_no_alias<true>(v516, (void *)__s, *((size_t *)&__s + 1));
        }
        else
        {
          *(_OWORD *)&v516->__r_.__value_.__l.__data_ = __s;
          v516->__r_.__value_.__r.__words[2] = v580;
        }
      }
      else
      {
        if (SHIBYTE(v580) < 0)
        {
          std::string::__init_copy_ctor_external(v516, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          *(_OWORD *)&v516->__r_.__value_.__l.__data_ = __s;
          v516->__r_.__value_.__r.__words[2] = v580;
        }
        *(_BYTE *)(v10 + 1968) = 1;
      }
    }
  }
  if ((unint64_t)v169 >= *(_QWORD *)(v10 + 2016))
  {
    v169 = (std::runtime_error *)std::vector<AMSCore::DialogAction>::__emplace_back_slow_path<AMSCore::DialogAction>((void **)&v135->__vftable, (uint64_t)&v567);
    v214 = SHIBYTE(v588);
    *(_QWORD *)(v10 + 2008) = v169;
    if (v214 < 0)
      operator delete((void *)v587);
  }
  else
  {
    LOBYTE(v169->__vftable) = 0;
    LOBYTE(v169[10].__vftable) = 0;
    if (v578)
    {
      LOBYTE(v169[1].__imp_.__imp_) = 0;
      if (BYTE8(v568))
      {
        v200 = v567;
        v169[1].__vftable = (std::runtime_error_vtbl *)v568;
        *v169 = v200;
        *(_QWORD *)&v568 = 0;
        v567.__imp_.__imp_ = 0;
        v567.__vftable = 0;
        LOBYTE(v169[1].__imp_.__imp_) = 1;
      }
      LOBYTE(v169[2].__vftable) = 0;
      LOBYTE(v169[3].__imp_.__imp_) = 0;
      if (v570[0])
      {
        v201 = *(std::runtime_error *)v569;
        v169[3].__vftable = (std::runtime_error_vtbl *)v569[2];
        v169[2] = v201;
        memset(v569, 0, sizeof(v569));
        LOBYTE(v169[3].__imp_.__imp_) = 1;
      }
      LOBYTE(v169[4].__vftable) = 0;
      LOBYTE(v169[5].__imp_.__imp_) = 0;
      if ((_BYTE)v571)
      {
        v202 = *(std::runtime_error *)&v570[8];
        v169[5].__vftable = *(std::runtime_error_vtbl **)&v570[24];
        v169[4] = v202;
        memset(&v570[8], 0, 24);
        LOBYTE(v169[5].__imp_.__imp_) = 1;
      }
      LODWORD(v169[6].__vftable) = DWORD2(v571);
      v169[6].__imp_.__imp_ = (const char *)&v169[6].__imp_;
      v169[7].__vftable = (std::runtime_error_vtbl *)&v169[6].__imp_;
      v169[7].__imp_.__imp_ = 0;
      if (v169 == &v567)
        goto LABEL_981;
      v203 = v574;
      if (v574)
      {
        v204 = v573;
        v205 = v572;
        v206 = *v573;
        *((_QWORD *)v206 + 1) = *(_QWORD *)(v572 + 8);
        **(_QWORD **)(v205 + 8) = v206;
        v207 = v169[6].__imp_.__imp_;
        *((_QWORD *)v207 + 1) = v204;
        *v204 = v207;
        v169[6].__imp_.__imp_ = (const char *)v205;
        *(_QWORD *)(v205 + 8) = (char *)v169 + 104;
        v169[7].__imp_.__imp_ = v203;
        v574 = 0;
      }
      v208 = v575;
      v169[9].__vftable = v576;
      v169[8] = v208;
      v576 = 0;
      v575 = (std::runtime_error)0;
      LODWORD(v169[9].__imp_.__imp_) = v577;
      LOBYTE(v169[10].__vftable) = 1;
    }
    v209 = __s;
    v169[11].__imp_.__imp_ = (const char *)v580;
    *(_OWORD *)&v169[10].__imp_.__imp_ = v209;
    __s = 0uLL;
    LODWORD(v169[12].__vftable) = v581;
    v210 = v582;
    v169[13].__imp_.__imp_ = v583;
    *(_OWORD *)&v169[12].__imp_.__imp_ = v210;
    v580 = 0;
    v582 = 0uLL;
    v583 = 0;
    v169[14].__vftable = (std::runtime_error_vtbl *)v584;
    v211 = v585;
    v169[14].__imp_.__imp_ = (const char *)v585;
    v212 = &v169[14].__imp_;
    v213 = v586;
    v169[15].__vftable = v586;
    if (v213)
    {
      *((_QWORD *)v211 + 2) = v212;
      v584 = &v585;
      v585 = 0;
      v586 = 0;
    }
    else
    {
      v169[14].__vftable = (std::runtime_error_vtbl *)v212;
    }
    v215 = v587;
    v169[16].__imp_.__imp_ = v588;
    *(_OWORD *)&v169[15].__imp_.__imp_ = v215;
    v588 = 0;
    v587 = 0uLL;
    v169 += 17;
    *(_QWORD *)(v10 + 2008) = v169;
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v584, v585);
  if ((SHIBYTE(v583) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v580) & 0x80000000) == 0)
      goto LABEL_475;
LABEL_517:
    operator delete((void *)__s);
    if (!v578)
      goto LABEL_477;
LABEL_476:
    AMSCore::URL::~URL((AMSCore::URL *)&v567);
    goto LABEL_477;
  }
  operator delete((void *)v582);
  if (SHIBYTE(v580) < 0)
    goto LABEL_517;
LABEL_475:
  if (v578)
    goto LABEL_476;
LABEL_477:
  *((_BYTE *)&__dst.__ec_.__val_ + 7) = 17;
  strcpy((char *)&__dst, "otherButtonString");
  AMSCore::Any::string((uint64_t)&v567, v141, (const void **)&__dst.__vftable);
  if ((__what_arg[23] & 0x80000000) != 0)
    operator delete(*(void **)__what_arg);
  *(std::runtime_error *)__what_arg = v567;
  *(_QWORD *)&__what_arg[16] = v568;
  BYTE7(v568) = 0;
  LOBYTE(v567.__vftable) = 0;
  if (*((char *)&__dst.__ec_.__val_ + 7) < 0)
    operator delete(__dst.__vftable);
  v216 = __what_arg[23];
  if (__what_arg[23] < 0)
    v216 = *(_QWORD *)&__what_arg[8];
  if (!v216)
  {
    v230 = v519;
    if ((__what_arg[23] & 0x80) != 0)
      goto LABEL_568;
    goto LABEL_569;
  }
  v217 = (const void **)*v122;
  if (!*v122)
    goto LABEL_520;
  v218 = v122;
  while (2)
  {
    while (2)
    {
      v219 = *((char *)v217 + 55);
      if (v219 >= 0)
        v220 = v217 + 4;
      else
        v220 = v217[4];
      if (v219 >= 0)
        v221 = *((unsigned __int8 *)v217 + 55);
      else
        v221 = (unint64_t)v217[5];
      if (v221 >= 0x11)
        v222 = 17;
      else
        v222 = v221;
      v223 = memcmp("otherButtonAction", v220, v222);
      if (v223)
      {
        if (v223 < 0)
          break;
        goto LABEL_486;
      }
      if (v221 < 0x11)
      {
LABEL_486:
        v217 = (const void **)v217[1];
        if (!v217)
          goto LABEL_501;
        continue;
      }
      break;
    }
    v218 = v217;
    v217 = (const void **)*v217;
    if (v217)
      continue;
    break;
  }
LABEL_501:
  v135 = v521;
  if (v218 == v122)
    goto LABEL_520;
  v224 = *((char *)v218 + 55);
  if (v224 >= 0)
    v225 = v218 + 4;
  else
    v225 = v218[4];
  if (v224 >= 0)
    v226 = *((unsigned __int8 *)v218 + 55);
  else
    v226 = (unint64_t)v218[5];
  if (v226 >= 0x11)
    v227 = 17;
  else
    v227 = v226;
  v228 = memcmp("otherButtonAction", v225, v227);
  if (v228)
  {
    if ((v228 & 0x80000000) == 0)
      goto LABEL_513;
LABEL_520:
    v229 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v226 > 0x11)
      goto LABEL_520;
LABEL_513:
    v229 = (uint64_t *)(v218 + 7);
  }
  v231 = *((_DWORD *)v229 + 6);
  v232 = v231 == 8;
  if (v231 == 8)
    v233 = (unsigned int ***)v229;
  else
    v233 = 0;
  if (v179)
    v234 = "Other";
  else
    v234 = "Cancel";
  if (v179)
    v235 = 5;
  else
    v235 = 6;
  *((_BYTE *)&__dst.__ec_.__val_ + 7) = v235;
  memcpy(&__dst, v234, v235);
  *(_BYTE *)((unint64_t)&__dst | v235) = 0;
  AMSCore::FinanceDialogAction::getAction((uint64_t)&v567, v233, v232, (const void **)__what_arg, 2 * (v179 != 0), (uint64_t)&__dst);
  if (*((char *)&__dst.__ec_.__val_ + 7) < 0)
    operator delete(__dst.__vftable);
  v236 = (const char *)*((unsigned __int8 *)&v603.__ec_.__val_ + 7);
  if (*((char *)&v603.__ec_.__val_ + 7) < 0)
    v236 = v603.__imp_.__imp_;
  v230 = v519;
  if (v236 == (const char *)5)
  {
    v237 = (unsigned __int8 *)&v603;
    if (*((char *)&v603.__ec_.__val_ + 7) < 0)
      v237 = (unsigned __int8 *)v603.__vftable;
    v238 = *(_DWORD *)v237;
    v239 = v237[4];
    if (v238 == 1701344367 && v239 == 114)
    {
      if (*(_BYTE *)(v10 + 1968))
      {
        if (*(char *)(v10 + 1967) < 0)
        {
          if (v580 >= 0)
            v363 = &__s;
          else
            v363 = (__int128 *)__s;
          if (v580 >= 0)
            v364 = HIBYTE(v580);
          else
            v364 = *((_QWORD *)&__s + 1);
          std::string::__assign_no_alias<false>((void **)&v516->__r_.__value_.__l.__data_, v363, v364);
        }
        else if (v580 < 0)
        {
          std::string::__assign_no_alias<true>(v516, (void *)__s, *((size_t *)&__s + 1));
        }
        else
        {
          *(_OWORD *)&v516->__r_.__value_.__l.__data_ = __s;
          v516->__r_.__value_.__r.__words[2] = v580;
        }
      }
      else
      {
        if (SHIBYTE(v580) < 0)
        {
          std::string::__init_copy_ctor_external(v516, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          *(_OWORD *)&v516->__r_.__value_.__l.__data_ = __s;
          v516->__r_.__value_.__r.__words[2] = v580;
        }
        *(_BYTE *)(v10 + 1968) = 1;
      }
    }
  }
  if ((unint64_t)v169 >= *(_QWORD *)(v10 + 2016))
  {
    v255 = std::vector<AMSCore::DialogAction>::__emplace_back_slow_path<AMSCore::DialogAction>((void **)&v135->__vftable, (uint64_t)&v567);
    v256 = SHIBYTE(v588);
    *(_QWORD *)(v10 + 2008) = v255;
    if (v256 < 0)
      operator delete((void *)v587);
    goto LABEL_563;
  }
  LOBYTE(v169->__vftable) = 0;
  LOBYTE(v169[10].__vftable) = 0;
  if (!v578)
    goto LABEL_553;
  LOBYTE(v169[1].__imp_.__imp_) = 0;
  if (BYTE8(v568))
  {
    v241 = v567;
    v169[1].__vftable = (std::runtime_error_vtbl *)v568;
    *v169 = v241;
    *(_QWORD *)&v568 = 0;
    v567.__imp_.__imp_ = 0;
    v567.__vftable = 0;
    LOBYTE(v169[1].__imp_.__imp_) = 1;
  }
  LOBYTE(v169[2].__vftable) = 0;
  LOBYTE(v169[3].__imp_.__imp_) = 0;
  if (v570[0])
  {
    v242 = *(std::runtime_error *)v569;
    v169[3].__vftable = (std::runtime_error_vtbl *)v569[2];
    v169[2] = v242;
    memset(v569, 0, sizeof(v569));
    LOBYTE(v169[3].__imp_.__imp_) = 1;
  }
  LOBYTE(v169[4].__vftable) = 0;
  LOBYTE(v169[5].__imp_.__imp_) = 0;
  if ((_BYTE)v571)
  {
    v243 = *(std::runtime_error *)&v570[8];
    v169[5].__vftable = *(std::runtime_error_vtbl **)&v570[24];
    v169[4] = v243;
    memset(&v570[8], 0, 24);
    LOBYTE(v169[5].__imp_.__imp_) = 1;
  }
  LODWORD(v169[6].__vftable) = DWORD2(v571);
  v169[6].__imp_.__imp_ = (const char *)&v169[6].__imp_;
  v169[7].__vftable = (std::runtime_error_vtbl *)&v169[6].__imp_;
  v169[7].__imp_.__imp_ = 0;
  if (v169 == &v567)
    goto LABEL_981;
  v244 = v574;
  if (v574)
  {
    v245 = v573;
    v246 = v572;
    v247 = *v573;
    *((_QWORD *)v247 + 1) = *(_QWORD *)(v572 + 8);
    **(_QWORD **)(v246 + 8) = v247;
    v248 = v169[6].__imp_.__imp_;
    *((_QWORD *)v248 + 1) = v245;
    *v245 = v248;
    v169[6].__imp_.__imp_ = (const char *)v246;
    *(_QWORD *)(v246 + 8) = (char *)v169 + 104;
    v169[7].__imp_.__imp_ = v244;
    v574 = 0;
  }
  v249 = v575;
  v169[9].__vftable = v576;
  v169[8] = v249;
  v576 = 0;
  v575 = (std::runtime_error)0;
  LODWORD(v169[9].__imp_.__imp_) = v577;
  LOBYTE(v169[10].__vftable) = 1;
LABEL_553:
  v250 = __s;
  v169[11].__imp_.__imp_ = (const char *)v580;
  *(_OWORD *)&v169[10].__imp_.__imp_ = v250;
  __s = 0uLL;
  LODWORD(v169[12].__vftable) = v581;
  v251 = v582;
  v169[13].__imp_.__imp_ = v583;
  *(_OWORD *)&v169[12].__imp_.__imp_ = v251;
  v580 = 0;
  v582 = 0uLL;
  v583 = 0;
  v169[14].__vftable = (std::runtime_error_vtbl *)v584;
  v252 = v585;
  v169[14].__imp_.__imp_ = (const char *)v585;
  v253 = &v169[14].__imp_;
  v254 = v586;
  v169[15].__vftable = v586;
  if (v254)
  {
    *((_QWORD *)v252 + 2) = v253;
    v584 = &v585;
    v585 = 0;
    v586 = 0;
  }
  else
  {
    v169[14].__vftable = (std::runtime_error_vtbl *)v253;
  }
  v257 = v587;
  v169[16].__imp_.__imp_ = v588;
  *(_OWORD *)&v169[15].__imp_.__imp_ = v257;
  v588 = 0;
  v587 = 0uLL;
  *(_QWORD *)(v10 + 2008) = v169 + 17;
LABEL_563:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v584, v585);
  if ((SHIBYTE(v583) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v580) & 0x80000000) == 0)
      goto LABEL_565;
LABEL_617:
    operator delete((void *)__s);
    if (!v578)
      goto LABEL_567;
LABEL_566:
    AMSCore::URL::~URL((AMSCore::URL *)&v567);
    goto LABEL_567;
  }
  operator delete((void *)v582);
  if (SHIBYTE(v580) < 0)
    goto LABEL_617;
LABEL_565:
  if (v578)
    goto LABEL_566;
LABEL_567:
  if ((__what_arg[23] & 0x80) != 0)
LABEL_568:
    operator delete(*(void **)__what_arg);
LABEL_569:
  if (*((char *)&v603.__ec_.__val_ + 7) < 0)
    operator delete(v603.__vftable);
  v258 = *(void **)v539;
  if (*(_QWORD *)v539)
  {
    v259 = *(_QWORD *)(v10 + 1304);
    v260 = *(void **)v539;
    if ((void *)v259 != v258)
    {
      do
      {
        v259 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v259);
      }
      while ((void *)v259 != v258);
      v260 = *(void **)v539;
    }
    *(_QWORD *)(v10 + 1304) = v258;
    operator delete(v260);
  }
  *(_OWORD *)(v10 + 1296) = *(_OWORD *)(v10 + 2000);
  *(_QWORD *)(v10 + 1312) = *(_QWORD *)(v10 + 2016);
  v135->__imp_.__imp_ = 0;
  v135[1].__vftable = 0;
  v135->__vftable = 0;
  *(_BYTE *)(v10 + 1912) = 0;
  *(_BYTE *)(v10 + 1936) = 0;
  if (*(_BYTE *)(v10 + 1968))
  {
    if (*(char *)(v10 + 1967) < 0)
    {
      std::string::__init_copy_ctor_external(v536, *(const std::string::value_type **)(v10 + 1944), *(_QWORD *)(v10 + 1952));
    }
    else
    {
      *(_OWORD *)&v536->__r_.__value_.__l.__data_ = *(_OWORD *)&v516->__r_.__value_.__l.__data_;
      v536->__r_.__value_.__r.__words[2] = v516->__r_.__value_.__r.__words[2];
    }
    *(_BYTE *)(v10 + 1936) = 1;
    v262 = *(_QWORD *)(v10 + 1296);
    v263 = *(_QWORD *)(v10 + 1304);
    if (v262 != v263)
    {
      v264 = *(unsigned __int8 *)(v10 + 1935);
      v265 = *(_QWORD *)(v10 + 1920);
      if ((v264 & 0x80u) == 0)
        v266 = *(unsigned __int8 *)(v10 + 1935);
      else
        v266 = *(_QWORD *)(v10 + 1920);
      while (1)
      {
        v267 = *(unsigned __int8 *)(v262 + 191);
        v268 = (char)v267;
        if ((v267 & 0x80u) != 0)
          v267 = *(_QWORD *)(v262 + 176);
        if (v266 == v267)
        {
          if (v268 >= 0)
            v269 = (unsigned __int8 *)(v262 + 168);
          else
            v269 = *(unsigned __int8 **)(v262 + 168);
          if ((v264 & 0x80) != 0)
          {
            if (!memcmp(v536->__r_.__value_.__l.__data_, v269, v265))
              break;
          }
          else
          {
            if (!(_DWORD)v264)
              break;
            v270 = v536;
            v271 = v264;
            while (v270->__r_.__value_.__s.__data_[0] == *v269)
            {
              v270 = (std::string *)((char *)v270 + 1);
              ++v269;
              if (!--v271)
                goto LABEL_601;
            }
          }
        }
        v262 += 272;
        if (v262 == v263)
          goto LABEL_606;
      }
    }
LABEL_601:
    if (v262 == v263)
    {
LABEL_606:
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(__what_arg);
      v272 = *(_QWORD *)__what_arg;
      if (*(int *)(*(_QWORD *)__what_arg + 8) <= 4)
      {
        v273 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
        v274 = MEMORY[0x1E0DE4FE0] + 64;
        v275 = MEMORY[0x1E0DE4F60];
        v276 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
        v277 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
        v573 = (const char **)(MEMORY[0x1E0DE4FE0] + 64);
        v567.__vftable = v276;
        *(std::runtime_error_vtbl **)((char *)&v567.__vftable + (unint64_t)v276[-1].~runtime_error) = v277;
        v278 = (std::ios_base *)((char *)&v567 + (unint64_t)v567.__vftable[-1].~runtime_error);
        std::ios_base::init(v278, &v567.__imp_);
        v278[1].__vftable = 0;
        v278[1].__fmtflags_ = -1;
        v567.__vftable = v273 + 1;
        v573 = (const char **)v274;
        std::streambuf::basic_streambuf();
        v279 = MEMORY[0x1E0DE4FB8];
        v567.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
        *(_OWORD *)&v570[16] = 0u;
        v571 = 0u;
        LODWORD(v572) = 16;
        v280 = v567.__vftable[-1].~runtime_error;
        if ((v281 & 1) == 0
        {
        }
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v567, (uint64_t)"Caller attempted to set an invalid default action. identifier = ", 64);
        v282 = *(_BYTE *)(v10 + 1935);
        if (v282 >= 0)
          v283 = (uint64_t)v536;
        else
          v283 = *(_QWORD *)(v10 + 1912);
        if (v282 >= 0)
          v284 = *(unsigned __int8 *)(v10 + 1935);
        else
          v284 = *(_QWORD *)(v10 + 1920);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v567, v283, v284);
        v285 = v569[2];
        v286 = (char *)&v567 + (unint64_t)v567.__vftable[-1].~runtime_error;
        if ((v286[32] & 5) != 0)
        {
          v287 = -1;
        }
        else
        {
          (*(void (**)(std::system_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v286 + 5) + 32))(&v603, *((_QWORD *)v286 + 5), 0, 1, 16);
          v287 = v610;
        }
        v603.__vftable = (std::system_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v603.__imp_.__imp_) = 4;
        *(_QWORD *)&v603.__ec_.__val_ = v285;
        v603.__ec_.__cat_ = (const std::error_category *)v287;
        (*(void (**)(_QWORD, const char *, uint64_t, std::system_error *))(**(_QWORD **)(v272 + 16) + 16))(*(_QWORD *)(v272 + 16), "dialog", 6, &v603);
        v567.__vftable = *(std::runtime_error_vtbl **)v275;
        *(std::runtime_error_vtbl **)((char *)&v567.__vftable + (unint64_t)v567.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v275 + 24);
        v567.__imp_.__imp_ = (const char *)(v279 + 16);
        if (SBYTE7(v571) < 0)
          operator delete(*(void **)&v570[16]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D789B58](&v573);
      }
      v288 = *(std::__shared_weak_count **)&__what_arg[8];
      v261 = v508;
      v230 = v519;
      if (*(_QWORD *)&__what_arg[8])
      {
        v289 = (unint64_t *)(*(_QWORD *)&__what_arg[8] + 8);
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
          std::__shared_weak_count::__release_weak(v288);
        }
      }
    }
    else if (*(_BYTE *)(v10 + 1344))
    {
      v261 = v508;
      v230 = v519;
      if (*(char *)(v10 + 1343) < 0)
        operator delete(*v499);
      *(_OWORD *)v499 = *(_OWORD *)&v536->__r_.__value_.__l.__data_;
      *(_QWORD *)(v10 + 1336) = *((_QWORD *)&v536->__r_.__value_.__l + 2);
      *(_BYTE *)(v10 + 1935) = 0;
      *(_BYTE *)(v10 + 1912) = 0;
    }
    else
    {
      *(_OWORD *)v499 = *(_OWORD *)&v536->__r_.__value_.__l.__data_;
      *(_QWORD *)(v10 + 1336) = *((_QWORD *)&v536->__r_.__value_.__l + 2);
      v536->__r_.__value_.__l.__size_ = 0;
      v536->__r_.__value_.__r.__words[2] = 0;
      v536->__r_.__value_.__r.__words[0] = 0;
      *(_BYTE *)(v10 + 1344) = 1;
      v261 = v508;
      v230 = v519;
    }
  }
  else
  {
    v261 = v508;
    if (*(_BYTE *)(v10 + 1344))
    {
      if (*(char *)(v10 + 1343) < 0)
        operator delete(*v499);
      *(_BYTE *)(v10 + 1344) = 0;
    }
  }
  if (*(_BYTE *)(v10 + 1936) && *(char *)(v10 + 1935) < 0)
    operator delete(v536->__r_.__value_.__l.__data_);
  AMSCore::DialogRequest::DialogRequest((uint64_t)v538, (uint64_t)v539);
  *(_QWORD *)(v10 + 2112) = v517;
  *(_QWORD *)(v10 + 2120) = v230;
  if (v230)
  {
    v291 = (unint64_t *)(v230 + 8);
    do
      v292 = __ldxr(v291);
    while (__stxr(v292 + 1, v291));
  }
  *(_QWORD *)(v10 + 2128) = v528;
  *(_QWORD *)(v10 + 2136) = v261;
  if (v261)
  {
    v293 = (unint64_t *)(v261 + 8);
    do
      v294 = __ldxr(v293);
    while (__stxr(v294 + 1, v293));
  }
  v295 = (char *)operator new(0x890uLL);
  *(_QWORD *)v295 = AMSCore::FinanceDialogRequest::perform;
  *((_QWORD *)v295 + 1) = AMSCore::FinanceDialogRequest::perform;
  v520 = (uint64_t *)(v295 + 1000);
  AMSCore::DialogRequest::DialogRequest((uint64_t)(v295 + 1000), (uint64_t)v538);
  v296 = v295 + 1960;
  v518 = v295 + 1592;
  v522 = (std::runtime_error *)(v295 + 1704);
  v297 = v295 + 1824;
  v500 = (void **)(v295 + 1888);
  v502 = (std::string *)(v295 + 1856);
  v497 = (__int128 *)(v295 + 1784);
  v498 = (__int128 *)(v295 + 1912);
  v535 = (AMSCore::HTTPResponseAction *)(v295 + 536);
  v537 = (std::string *)(v295 + 1936);
  v298 = *(_OWORD *)v507;
  *(_QWORD *)v507 = 0;
  *((_QWORD *)v507 + 1) = 0;
  v299 = *(_OWORD *)v506;
  v496 = (__n128 *)(v295 + 1984);
  v513 = v295 + 2008;
  v515 = v295 + 2024;
  v509 = v298;
  *(_OWORD *)(v295 + 2104) = v298;
  *(_OWORD *)(v295 + 2120) = v299;
  v532 = v299;
  v300 = v295 + 16;
  *(_QWORD *)v506 = 0;
  *((_QWORD *)v506 + 1) = 0;
  do
    v301 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v301 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v295[24] = 0;
  v295[488] = 0;
  *((_QWORD *)v295 + 62) = 0;
  *((_QWORD *)v295 + 66) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v567, (uint64_t)(v295 + 16));
  *v525 = v567;
  v302 = v295[1103];
  if ((v302 & 0x80u) != 0)
    v302 = *((_QWORD *)v295 + 136);
  if (!v302)
  {
    v303 = v295[1079];
    if ((v303 & 0x80u) != 0)
      v303 = *((_QWORD *)v295 + 133);
    if (!v303)
    {
      LOBYTE(v567.__vftable) = 0;
      BYTE8(v568) = 0;
      LOBYTE(v569[0]) = 0;
      LOBYTE(v569[2]) = 0;
      v570[0] = 0;
      LOBYTE(v575.__vftable) = 0;
      LOBYTE(v575.__imp_.__imp_) = 0;
      v589 = 0;
      v590 = 0;
      v591 = 0;
      v592 = 0;
      v593 = 0;
      v594 = 0;
      v595 = 0;
      v596 = 0;
      v597 = 0;
      v598 = 0;
      v599 = 0;
      v600 = 0;
      v601 = 0;
      v602 = 1;
      if (v295[488])
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v295 + 24));
        v295[488] = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v295 + 24), (uint64_t)&v567);
      v295[488] = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v567);
      v328 = v295 + 536;
      goto LABEL_685;
    }
  }
  v529 = (uint64_t)(v295 + 16);
  v295[1936] = 0;
  *((_DWORD *)v295 + 488) = -1;
  v304 = *(unsigned int *)(v532 + 104);
  if ((_DWORD)v304 == -1
    || (((void (*)(std::system_error *, std::string *, uint64_t))off_1E253D160[v304])(&v603, v537, v532 + 88),
        (*((_DWORD *)v295 + 488) = v304) != 0)
    || (v318 = v537->__r_.__value_.__r.__words[0]) == 0)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(__what_arg);
    v305 = *(_QWORD *)__what_arg;
    if (*(int *)(*(_QWORD *)__what_arg + 8) <= 4)
    {
      v306 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v307 = MEMORY[0x1E0DE4FE0] + 64;
      v308 = MEMORY[0x1E0DE4F60];
      v309 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v310 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v573 = (const char **)(MEMORY[0x1E0DE4FE0] + 64);
      v567.__vftable = v309;
      *(std::runtime_error_vtbl **)((char *)&v567.__vftable + (unint64_t)v309[-1].~runtime_error) = v310;
      v311 = (std::ios_base *)((char *)&v567 + (unint64_t)v567.__vftable[-1].~runtime_error);
      std::ios_base::init(v311, &v567.__imp_);
      v311[1].__vftable = 0;
      v311[1].__fmtflags_ = -1;
      v567.__vftable = v306 + 1;
      v573 = (const char **)v307;
      std::streambuf::basic_streambuf();
      v312 = MEMORY[0x1E0DE4FB8];
      v567.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      *(_OWORD *)&v570[16] = 0u;
      v571 = 0u;
      LODWORD(v572) = 16;
      v313 = v567.__vftable[-1].~runtime_error;
      if ((v314 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v567, (uint64_t)"Suppressing a dialog. No handler was provided.", 46);
      v315 = v569[2];
      v316 = (char *)&v567 + (unint64_t)v567.__vftable[-1].~runtime_error;
      if ((v316[32] & 5) != 0)
      {
        v317 = -1;
      }
      else
      {
        (*(void (**)(std::system_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v316 + 5)
                                                                                                  + 32))(&v603, *((_QWORD *)v316 + 5), 0, 1, 16);
        v317 = v610;
      }
      v603.__vftable = (std::system_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v603.__imp_.__imp_) = 4;
      *(_QWORD *)&v603.__ec_.__val_ = v315;
      v603.__ec_.__cat_ = (const std::error_category *)v317;
      (*(void (**)(_QWORD, const char *, uint64_t, std::system_error *))(**(_QWORD **)(v305 + 16) + 16))(*(_QWORD *)(v305 + 16), "networking", 10, &v603);
      v567.__vftable = *(std::runtime_error_vtbl **)v308;
      *(std::runtime_error_vtbl **)((char *)&v567.__vftable + (unint64_t)v567.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v308 + 24);
      v567.__imp_.__imp_ = (const char *)(v312 + 16);
      if (SBYTE7(v571) < 0)
        operator delete(*(void **)&v570[16]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](&v573);
    }
    v329 = *(std::__shared_weak_count **)&__what_arg[8];
    v328 = v295 + 536;
    if (*(_QWORD *)&__what_arg[8])
    {
      v330 = (unint64_t *)(*(_QWORD *)&__what_arg[8] + 8);
      do
        v331 = __ldaxr(v330);
      while (__stlxr(v331 - 1, v330));
      if (!v331)
      {
        ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
        std::__shared_weak_count::__release_weak(v329);
      }
    }
    AMSCore::StringUtils::join<char [25]>((std::string *)__what_arg, "No handler was provided.");
    v615.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v615.__val_ = 3;
    std::system_error::system_error(&v603, v615, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    memset(&v606, 0, sizeof(v606));
    v605 = 0;
    v603.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v604 = &v605;
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v567, &v603);
    if (v295[488])
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v295 + 24));
      v295[488] = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v295 + 24), (uint64_t)&v567);
    v295[488] = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v567);
    v603.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v332 = (std::__shared_weak_count *)v606.__r_.__value_.__r.__words[2];
    if (v606.__r_.__value_.__r.__words[2])
    {
      v333 = (unint64_t *)(v606.__r_.__value_.__r.__words[2] + 8);
      do
        v334 = __ldaxr(v333);
      while (__stlxr(v334 - 1, v333));
      if (!v334)
      {
        ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
        std::__shared_weak_count::__release_weak(v332);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v604, v605);
    MEMORY[0x18D7898AC](&v603);
    v300 = v295 + 16;
    goto LABEL_683;
  }
  if (*(_DWORD *)(a1 + 8) || !*(_BYTE *)(a1 + 16))
  {
    AMSCore::DialogRequest::DialogRequest((uint64_t)(v295 + 1296), (uint64_t)v520);
    (*(void (**)(std::string::size_type, char *))(*(_QWORD *)v318 + 24))(v318, v295 + 1296);
    v319 = *(_OWORD *)v535;
    *(_OWORD *)(v295 + 2152) = *(_OWORD *)v535;
    *(_QWORD *)v535 = 0;
    *((_QWORD *)v295 + 68) = 0;
    if (!atomic_load((unint64_t *)(v319 + 96)))
    {
      v295[2184] = 1;
      v321 = (unint64_t *)(*((_QWORD *)v295 + 269) + 96);
      do
        v322 = __ldaxr(v321);
      while (__stlxr((unint64_t)v295, v321));
      if (!v322)
        goto LABEL_686;
    }
    v323 = *((_QWORD *)v295 + 269);
    if (!*(_BYTE *)(v323 + 88))
      goto LABEL_981;
    v324 = (const std::runtime_error *)(v323 + 8);
    v325 = *(_BYTE *)(v323 + 80);
    if (v325)
    {
      *((_QWORD *)v295 + 213) = *(_QWORD *)(v323 + 8);
      v326 = (const char **)(v295 + 1712);
      v327 = (std::__libcpp_refstring *)(v323 + 16);
    }
    else
    {
      std::runtime_error::runtime_error(v522, v324);
      *(_OWORD *)(v295 + 1720) = *(_OWORD *)(v323 + 24);
      *((_QWORD *)v295 + 213) = off_1E2521330;
      v355 = (_QWORD *)(v323 + 48);
      v356 = *(_QWORD *)(v323 + 48);
      *((_QWORD *)v295 + 217) = *(_QWORD *)(v323 + 40);
      v357 = v295 + 1744;
      *((_QWORD *)v295 + 218) = v356;
      v358 = *(_QWORD *)(v323 + 56);
      *((_QWORD *)v295 + 219) = v358;
      if (v358)
      {
        *(_QWORD *)(v356 + 16) = v357;
        *(_QWORD *)(v323 + 40) = v355;
        *v355 = 0;
        *(_QWORD *)(v323 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v295 + 217) = v357;
      }
      v367 = (const std::runtime_error *)*((_QWORD *)v295 + 269);
      v368 = v367[4].__vftable;
      v324 = v367 + 4;
      *((_QWORD *)v295 + 220) = v368;
      v326 = (const char **)(v295 + 1768);
      v327 = &v324->__imp_;
    }
    *v326 = v327->__imp_;
    v324->__vftable = 0;
    v324->__imp_.__imp_ = 0;
    v295[1776] = v325;
    v369 = *((_QWORD *)v295 + 270);
    if (v369)
    {
      v370 = (unint64_t *)(v369 + 8);
      do
        v371 = __ldaxr(v370);
      while (__stlxr(v371 - 1, v370));
      if (!v371)
      {
        v372 = (std::__shared_weak_count *)*((_QWORD *)v295 + 270);
        ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
        std::__shared_weak_count::__release_weak(v372);
      }
    }
    v373 = (std::__shared_weak_count *)*((_QWORD *)v295 + 68);
    if (v373)
    {
      v374 = (unint64_t *)&v373->__shared_owners_;
      do
        v375 = __ldaxr(v374);
      while (__stlxr(v375 - 1, v374));
      if (!v375)
      {
        ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
        std::__shared_weak_count::__release_weak(v373);
      }
    }
    AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(v295 + 1296));
    if (v295[1776])
    {
      v376 = *((_QWORD *)v295 + 264);
      v377 = *((_QWORD *)v295 + 263);
      *(std::runtime_error *)(v295 + 2056) = *v522;
      v522->__vftable = 0;
      *((_QWORD *)v295 + 214) = 0;
      *((_QWORD *)v295 + 259) = v377;
      *((_QWORD *)v295 + 260) = v376;
      if (v376)
      {
        v378 = (unint64_t *)(v376 + 8);
        do
          v379 = __ldxr(v378);
        while (__stxr(v379 + 1, v378));
      }
      v380 = *((_QWORD *)v295 + 265);
      *((_QWORD *)v295 + 261) = *(_QWORD *)(v380 + 40);
      v381 = *(_QWORD *)(v380 + 48);
      *((_QWORD *)v295 + 262) = v381;
      if (v381)
      {
        v382 = (unint64_t *)(v381 + 8);
        do
          v383 = __ldxr(v382);
        while (__stxr(v383 + 1, v382));
      }
      v384 = *(_OWORD *)(v295 + 2008);
      *(_OWORD *)(v295 + 2168) = v384;
      *(_QWORD *)v513 = 0;
      *((_QWORD *)v295 + 252) = 0;
      if (!atomic_load((unint64_t *)(v384 + 480)))
      {
        v295[2184] = 2;
        v386 = (unint64_t *)(*((_QWORD *)v295 + 271) + 480);
        do
          v387 = __ldaxr(v386);
        while (__stlxr((unint64_t)v295, v386));
        if (!v387)
          goto LABEL_686;
      }
      v388 = *((_QWORD *)v295 + 271);
      if (!*(_BYTE *)(v388 + 472))
        goto LABEL_981;
      v328 = v295 + 536;
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v535, v388 + 8);
      v300 = v295 + 16;
      if (v295[488])
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v295 + 24));
        v295[488] = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v295 + 24), (uint64_t)v535);
      v295[488] = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v535);
      v389 = *((_QWORD *)v295 + 272);
      if (v389)
      {
        v390 = (unint64_t *)(v389 + 8);
        do
          v391 = __ldaxr(v390);
        while (__stlxr(v391 - 1, v390));
        if (!v391)
        {
          v392 = (std::__shared_weak_count *)*((_QWORD *)v295 + 272);
          ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
          std::__shared_weak_count::__release_weak(v392);
        }
      }
      v393 = (std::__shared_weak_count *)*((_QWORD *)v295 + 252);
      if (v393)
      {
        v394 = (unint64_t *)&v393->__shared_owners_;
        do
          v395 = __ldaxr(v394);
        while (__stlxr(v395 - 1, v394));
        if (!v395)
        {
          ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
          std::__shared_weak_count::__release_weak(v393);
        }
      }
      v396 = (std::__shared_weak_count *)*((_QWORD *)v295 + 262);
      if (v396)
      {
        v397 = (unint64_t *)&v396->__shared_owners_;
        do
          v398 = __ldaxr(v397);
        while (__stlxr(v398 - 1, v397));
        if (!v398)
        {
          ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
          std::__shared_weak_count::__release_weak(v396);
        }
      }
      v399 = (std::__shared_weak_count *)*((_QWORD *)v295 + 260);
      if (v399)
      {
        v400 = (unint64_t *)&v399->__shared_owners_;
        do
          v401 = __ldaxr(v400);
        while (__stlxr(v401 - 1, v400));
        if (!v401)
        {
          ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
          std::__shared_weak_count::__release_weak(v399);
        }
      }
      v402 = (std::__shared_weak_count *)*((_QWORD *)v295 + 258);
      if (v402)
      {
        v403 = (unint64_t *)&v402->__shared_owners_;
        do
          v404 = __ldaxr(v403);
        while (__stlxr(v404 - 1, v403));
        if (!v404)
        {
          ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
          std::__shared_weak_count::__release_weak(v402);
        }
      }
    }
    else
    {
      AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v567, v522);
      v300 = v295 + 16;
      v328 = v295 + 536;
      if (v295[488])
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v295 + 24));
        v295[488] = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v295 + 24), (uint64_t)&v567);
      v295[488] = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v567);
    }
    if (v295[1776])
    {
      v405 = (std::__shared_weak_count *)*((_QWORD *)v295 + 214);
      if (v405)
      {
        v406 = (unint64_t *)&v405->__shared_owners_;
        do
          v407 = __ldaxr(v406);
        while (__stlxr(v407 - 1, v406));
LABEL_974:
        if (!v407)
        {
          ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
          std::__shared_weak_count::__release_weak(v405);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v522->~runtime_error)(v522);
    }
LABEL_683:
    v335 = *((unsigned int *)v295 + 488);
    if ((_DWORD)v335 != -1)
      ((void (*)(std::runtime_error *, std::string *))off_1E253D230[v335])(&v567, v537);
LABEL_685:
    *((_QWORD *)v295 + 67) = v300;
    *(_QWORD *)v295 = 0;
    AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v328);
    goto LABEL_686;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v509 + 96))(v509) & 1) != 0)
  {
    v353 = 0;
    *v515 = 0;
    v354 = a1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v509 + 48))(__what_arg, v509);
    v365 = *(_QWORD *)__what_arg;
    *v515 = *(_QWORD *)__what_arg;
    v354 = a1;
    if (v365)
    {
      v353 = (_QWORD *)operator new();
      v366 = *(_QWORD *)__what_arg;
      *v353 = &off_1E2523180;
      v353[1] = 0;
      v353[2] = 0;
      v353[3] = v366;
    }
    else
    {
      v353 = 0;
    }
  }
  *((_QWORD *)v295 + 254) = v353;
  *(_QWORD *)__what_arg = 0;
  if (!*(_BYTE *)(v354 + 16))
    goto LABEL_981;
  v412 = *(_DWORD *)(v354 + 12);
  v413 = *(std::runtime_error *)(v295 + 2024);
  *v515 = 0;
  *((_QWORD *)v295 + 254) = 0;
  v533 = v413;
  v567 = v413;
  v570[8] = 0;
  v570[16] = 0;
  BYTE8(v571) = 0;
  v569[0] = 0;
  v568 = 0uLL;
  LOBYTE(v569[1]) = 0;
  LODWORD(v572) = v412;
  *((_QWORD *)v295 + 246) = 0;
  *((_QWORD *)v295 + 247) = 0;
  *v296 = 0;
  v414 = *((_QWORD *)v295 + 125);
  v415 = *((_QWORD *)v295 + 126);
  v603.__vftable = (std::system_error_vtbl *)(v295 + 1960);
  LOBYTE(v603.__imp_.__imp_) = 0;
  v416 = v415 - v414;
  if (v415 != v414)
  {
    v417 = 0xF0F0F0F0F0F0F0F1 * (v416 >> 4);
    if (v417 >= 0xF0F0F0F0F0F0F1)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v418 = (char *)operator new(v416);
    v419 = 0;
    *((_QWORD *)v295 + 245) = v418;
    *((_QWORD *)v295 + 246) = v418;
    *((_QWORD *)v295 + 247) = &v418[272 * v417];
    do
    {
      AMSCore::DialogAction::DialogAction((std::string *)&v418[v419], (const AMSCore::DialogAction *)(v414 + v419));
      v419 += 272;
    }
    while (v414 + v419 != v415);
    *((_QWORD *)v295 + 246) = &v418[v419];
  }
  v420 = *(_OWORD *)v296;
  v421 = (void *)*((_QWORD *)v295 + 247);
  v422 = v295[1079];
  v568 = *(_OWORD *)v296;
  v569[0] = v421;
  *((_QWORD *)v295 + 246) = 0;
  *((_QWORD *)v295 + 247) = 0;
  *v296 = 0;
  if (v422 < 0)
  {
    v510 = v420;
    std::string::__init_copy_ctor_external(v502, *((const std::string::value_type **)v295 + 132), *((_QWORD *)v295 + 133));
    v420 = v510;
  }
  else
  {
    *(_OWORD *)&v502->__r_.__value_.__l.__data_ = *((_OWORD *)v295 + 66);
    *((_QWORD *)v295 + 234) = *((_QWORD *)v295 + 134);
  }
  v295[1880] = 1;
  *(_OWORD *)&v569[1] = *(_OWORD *)&v502->__r_.__value_.__l.__data_;
  *(_QWORD *)v570 = *((_QWORD *)v295 + 234);
  v502->__r_.__value_.__r.__words[0] = 0;
  *((_QWORD *)v295 + 233) = 0;
  *((_QWORD *)v295 + 234) = 0;
  v570[8] = 1;
  if (v295[1103] < 0)
  {
    v511 = v420;
    std::string::__init_copy_ctor_external((std::string *)v295 + 76, *((const std::string::value_type **)v295 + 135), *((_QWORD *)v295 + 136));
    v420 = v511;
  }
  else
  {
    *v297 = *(_OWORD *)(v295 + 1080);
    *((_QWORD *)v295 + 230) = *((_QWORD *)v295 + 137);
  }
  v295[1848] = 1;
  *(_OWORD *)&v570[16] = *v297;
  *(_QWORD *)&v571 = *((_QWORD *)v295 + 230);
  *(_QWORD *)v297 = 0;
  *((_QWORD *)v295 + 229) = 0;
  *((_QWORD *)v295 + 230) = 0;
  BYTE8(v571) = 1;
  *(std::runtime_error *)v535 = v533;
  v567.__imp_.__imp_ = 0;
  v567.__vftable = 0;
  *(_OWORD *)(v295 + 552) = v420;
  v423 = (void **)(v295 + 552);
  *((_QWORD *)v295 + 71) = v421;
  v569[0] = 0;
  v568 = 0uLL;
  v295[576] = 0;
  v295[600] = 0;
  *((_OWORD *)v295 + 36) = *(_OWORD *)&v569[1];
  *((_QWORD *)v295 + 74) = *(_QWORD *)v570;
  v569[1] = 0;
  v569[2] = 0;
  *(_QWORD *)v570 = 0;
  v295[600] = 1;
  v295[608] = 0;
  v295[632] = 0;
  *((_OWORD *)v295 + 38) = *(_OWORD *)&v570[16];
  *((_QWORD *)v295 + 78) = v571;
  *(_QWORD *)&v570[16] = 0;
  *(_QWORD *)&v570[24] = 0;
  *(_QWORD *)&v571 = 0;
  v295[632] = 1;
  *((_DWORD *)v295 + 160) = v412;
  if (v295[1880] && v295[1879] < 0)
    operator delete(v502->__r_.__value_.__l.__data_);
  v424 = *v296;
  if (*v296)
  {
    v425 = *((_QWORD *)v295 + 246);
    if (v425 == v424)
    {
      v427 = 1;
      v426 = (void *)*v296;
    }
    else
    {
      do
      {
        v425 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v425);
      }
      while (v425 != v424);
      v426 = (void *)*v296;
      v427 = BYTE8(v571);
    }
    *((_QWORD *)v295 + 246) = v424;
    operator delete(v426);
  }
  else
  {
    v427 = 1;
  }
  if (v427 && SBYTE7(v571) < 0)
    operator delete(*(void **)&v570[16]);
  if (v570[8] && (v570[7] & 0x80000000) != 0)
    operator delete(v569[1]);
  v428 = v568;
  if ((_QWORD)v568)
  {
    v429 = *((_QWORD *)&v568 + 1);
    v430 = (void *)v568;
    if (*((_QWORD *)&v568 + 1) != (_QWORD)v568)
    {
      do
      {
        v429 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v429);
      }
      while (v429 != v428);
      v430 = (void *)v568;
    }
    *((_QWORD *)&v568 + 1) = v428;
    operator delete(v430);
  }
  v431 = (std::__shared_weak_count *)v567.__imp_.__imp_;
  if (v567.__imp_.__imp_)
  {
    v432 = (unint64_t *)(v567.__imp_.__imp_ + 8);
    do
      v433 = __ldaxr(v432);
    while (__stlxr(v433 - 1, v432));
    if (!v433)
    {
      ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
      std::__shared_weak_count::__release_weak(v431);
    }
  }
  v434 = (std::__shared_weak_count *)*((_QWORD *)v295 + 254);
  if (v434)
  {
    v435 = (unint64_t *)&v434->__shared_owners_;
    do
      v436 = __ldaxr(v435);
    while (__stlxr(v436 - 1, v435));
    if (!v436)
    {
      ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
      std::__shared_weak_count::__release_weak(v434);
    }
  }
  v437 = *(_QWORD *)__what_arg;
  *(_QWORD *)__what_arg = 0;
  if (v437)
    (*(void (**)(uint64_t))(*(_QWORD *)v437 + 8))(v437);
  v438 = *((_QWORD *)v295 + 242);
  *((_QWORD *)v295 + 251) = v438;
  v439 = *((_QWORD *)v295 + 243);
  *((_QWORD *)v295 + 252) = v439;
  if (v439)
  {
    v440 = (unint64_t *)(v439 + 8);
    do
      v441 = __ldxr(v440);
    while (__stxr(v441 + 1, v440));
  }
  v442 = (void **)(v295 + 576);
  v443 = *(_OWORD *)v535;
  v444 = *(_OWORD *)(v295 + 552);
  *(_QWORD *)v535 = 0;
  *((_QWORD *)v295 + 68) = 0;
  *v518 = v443;
  *(_OWORD *)(v295 + 1608) = v444;
  *((_QWORD *)v295 + 203) = *((_QWORD *)v295 + 71);
  *((_QWORD *)v295 + 70) = 0;
  *((_QWORD *)v295 + 71) = 0;
  *v423 = 0;
  v445 = (void **)(v295 + 1632);
  v295[1632] = 0;
  v295[1656] = 0;
  if (v295[600])
  {
    *(_OWORD *)v445 = *(_OWORD *)v442;
    *((_QWORD *)v295 + 206) = *((_QWORD *)v295 + 74);
    *((_QWORD *)v295 + 73) = 0;
    *((_QWORD *)v295 + 74) = 0;
    *v442 = 0;
    v295[1656] = 1;
  }
  v446 = (void **)(v295 + 608);
  v447 = (void **)(v295 + 1664);
  v295[1664] = 0;
  v295[1688] = 0;
  if (v295[632])
  {
    *(_OWORD *)v447 = *(_OWORD *)v446;
    *((_QWORD *)v295 + 210) = *((_QWORD *)v295 + 78);
    *((_QWORD *)v295 + 77) = 0;
    *((_QWORD *)v295 + 78) = 0;
    *v446 = 0;
    v295[1688] = 1;
  }
  *((_DWORD *)v295 + 424) = *((_DWORD *)v295 + 160);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v438 + 48))(v438, v518);
  v448 = *(_OWORD *)(v295 + 2040);
  *(_OWORD *)(v295 + 2136) = v448;
  *((_QWORD *)v295 + 255) = 0;
  *((_QWORD *)v295 + 256) = 0;
  if (!atomic_load((unint64_t *)(v448 + 96)))
  {
    v295[2184] = 0;
    v450 = (unint64_t *)(*((_QWORD *)v295 + 267) + 96);
    do
      v451 = __ldaxr(v450);
    while (__stlxr((unint64_t)v295, v450));
    if (!v451)
    {
LABEL_686:
      v336 = *(_OWORD *)(v10 + 2096);
      *(_OWORD *)v505 = v336;
      v525->__vftable = 0;
      v525->__imp_.__imp_ = 0;
      v337 = atomic_load((unint64_t *)(v336 + 480));
      v56 = v527;
      if (!v337)
      {
        v505[16] = 0;
        v338 = (unint64_t *)(*(_QWORD *)(v10 + 2168) + 480);
        do
          v339 = __ldaxr(v338);
        while (__stlxr(v10, v338));
        if (!v339)
          return;
      }
      if (!*(_BYTE *)(*(_QWORD *)v505 + 472))
        goto LABEL_981;
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v527, *(_QWORD *)v505 + 8);
      if (*(_BYTE *)(v10 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v526);
        *(_BYTE *)(v10 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v526, (uint64_t)v527);
      *(_BYTE *)(v10 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v527);
      v340 = *(_QWORD *)(v10 + 2176);
      if (v340)
      {
        v341 = (unint64_t *)(v340 + 8);
        do
          v342 = __ldaxr(v341);
        while (__stlxr(v342 - 1, v341));
        if (!v342)
        {
          v343 = *(std::__shared_weak_count **)(v10 + 2176);
          ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
          std::__shared_weak_count::__release_weak(v343);
        }
      }
      v344 = *(std::__shared_weak_count **)(v10 + 2104);
      if (v344)
      {
        v345 = (unint64_t *)&v344->__shared_owners_;
        do
          v346 = __ldaxr(v345);
        while (__stlxr(v346 - 1, v345));
        if (!v346)
        {
          ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
          std::__shared_weak_count::__release_weak(v344);
        }
      }
      v347 = *(std::__shared_weak_count **)(v10 + 2136);
      if (v347)
      {
        v348 = (unint64_t *)&v347->__shared_owners_;
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
          std::__shared_weak_count::__release_weak(v347);
        }
      }
      v350 = *(std::__shared_weak_count **)(v10 + 2120);
      if (v350)
      {
        v351 = (unint64_t *)&v350->__shared_owners_;
        do
          v352 = __ldaxr(v351);
        while (__stlxr(v352 - 1, v351));
        if (!v352)
        {
          ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
          std::__shared_weak_count::__release_weak(v350);
        }
      }
      AMSCore::DialogRequest::~DialogRequest(v538);
      if (*(_BYTE *)(v10 + 1968) && *(char *)(v10 + 1967) < 0)
        operator delete(v516->__r_.__value_.__l.__data_);
      AMSCore::DialogRequest::~DialogRequest(v539);
      if (*(_BYTE *)(v10 + 1744))
        AMSCore::IMetricsProvider::Event::~Event(v524);
      if (*(char *)(v10 + 2071) < 0)
      {
        operator delete(*(void **)v530);
        if ((*(char *)(v10 + 2095) & 0x80000000) == 0)
          goto LABEL_720;
      }
      else if ((*(char *)(v10 + 2095) & 0x80000000) == 0)
      {
LABEL_720:
        *(_QWORD *)(v10 + 536) = v523;
        *(_QWORD *)v10 = 0;
        AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v56);
        return;
      }
      operator delete(*v504);
      goto LABEL_720;
    }
  }
  v452 = *((_QWORD *)v295 + 267);
  if (!*(_BYTE *)(v452 + 88))
    goto LABEL_981;
  v453 = (const std::runtime_error *)(v452 + 8);
  v454 = *(_BYTE *)(v452 + 80);
  v328 = v295 + 536;
  if (v454)
  {
    v456 = *(_QWORD *)(v452 + 24);
    v455 = (std::runtime_error *)(v452 + 24);
    *v522 = v455[-1];
    v453->__vftable = 0;
    v453->__imp_.__imp_ = 0;
    *((_QWORD *)v295 + 215) = v456;
    v457 = (const char **)(v295 + 1728);
  }
  else
  {
    std::runtime_error::runtime_error(v522, v453);
    *(_OWORD *)(v295 + 1720) = *(_OWORD *)(v452 + 24);
    *((_QWORD *)v295 + 213) = off_1E2521330;
    v458 = (_QWORD *)(v452 + 48);
    v459 = *(_QWORD *)(v452 + 48);
    *((_QWORD *)v295 + 217) = *(_QWORD *)(v452 + 40);
    v460 = v295 + 1744;
    *((_QWORD *)v295 + 218) = v459;
    v461 = *(_QWORD *)(v452 + 56);
    *((_QWORD *)v295 + 219) = v461;
    if (v461)
    {
      *(_QWORD *)(v459 + 16) = v460;
      *(_QWORD *)(v452 + 40) = v458;
      *v458 = 0;
      *(_QWORD *)(v452 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v295 + 217) = v460;
    }
    v462 = (std::runtime_error *)*((_QWORD *)v295 + 267);
    v463 = v462[4].__vftable;
    v455 = v462 + 4;
    *((_QWORD *)v295 + 220) = v463;
    v457 = (const char **)(v295 + 1768);
  }
  *v457 = v455->__imp_.__imp_;
  v455->__vftable = 0;
  v455->__imp_.__imp_ = 0;
  v295[1776] = v454;
  v464 = *((_QWORD *)v295 + 268);
  if (v464)
  {
    v465 = (unint64_t *)(v464 + 8);
    do
      v466 = __ldaxr(v465);
    while (__stlxr(v466 - 1, v465));
    if (!v466)
    {
      v467 = (std::__shared_weak_count *)*((_QWORD *)v295 + 268);
      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
      std::__shared_weak_count::__release_weak(v467);
    }
  }
  v468 = (std::__shared_weak_count *)*((_QWORD *)v295 + 256);
  if (v468)
  {
    v469 = (unint64_t *)&v468->__shared_owners_;
    do
      v470 = __ldaxr(v469);
    while (__stlxr(v470 - 1, v469));
    if (!v470)
    {
      ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
      std::__shared_weak_count::__release_weak(v468);
    }
  }
  if (v295[1688] && v295[1687] < 0)
    operator delete(*v447);
  if (v295[1656] && v295[1655] < 0)
    operator delete(*v445);
  v471 = *((_QWORD *)v295 + 201);
  if (v471)
  {
    v472 = *((_QWORD *)v295 + 202);
    v473 = (void *)*((_QWORD *)v295 + 201);
    if (v472 != v471)
    {
      do
      {
        v472 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v472);
      }
      while (v472 != v471);
      v473 = (void *)*((_QWORD *)v295 + 201);
    }
    *((_QWORD *)v295 + 202) = v471;
    operator delete(v473);
  }
  v474 = (std::__shared_weak_count *)*((_QWORD *)v295 + 200);
  if (v474)
  {
    v475 = (unint64_t *)&v474->__shared_owners_;
    do
      v476 = __ldaxr(v475);
    while (__stlxr(v476 - 1, v475));
    if (!v476)
    {
      ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
      std::__shared_weak_count::__release_weak(v474);
    }
  }
  if (!v295[1776])
  {
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v567, v522);
    AMSCore::Task<AMSCore::HTTPResponseAction,void>::ValuePromise::return_value<AMSCore::HTTPResponseAction>(v529, (uint64_t)&v567);
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v567);
LABEL_943:
    if (v295[1776])
    {
      v483 = (std::__shared_weak_count *)*((_QWORD *)v295 + 216);
      if (v483)
      {
        v484 = (unint64_t *)&v483->__shared_owners_;
        do
          v485 = __ldaxr(v484);
        while (__stlxr(v485 - 1, v484));
        if (!v485)
        {
          ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
          std::__shared_weak_count::__release_weak(v483);
        }
      }
      v486 = (std::__shared_weak_count *)*((_QWORD *)v295 + 214);
      if (v486)
      {
        v487 = (unint64_t *)&v486->__shared_owners_;
        do
          v488 = __ldaxr(v487);
        while (__stlxr(v488 - 1, v487));
        if (!v488)
        {
          ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
          std::__shared_weak_count::__release_weak(v486);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v522->~runtime_error)(v522);
    }
    v489 = (std::__shared_weak_count *)*((_QWORD *)v295 + 252);
    if (v489)
    {
      v490 = (unint64_t *)&v489->__shared_owners_;
      do
        v491 = __ldaxr(v490);
      while (__stlxr(v491 - 1, v490));
      if (!v491)
      {
        ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
        std::__shared_weak_count::__release_weak(v489);
      }
    }
    if (v295[632] && v295[631] < 0)
      operator delete(*v446);
    if (v295[600] && v295[599] < 0)
      operator delete(*v442);
    v492 = *v423;
    if (*v423)
    {
      v493 = *((_QWORD *)v295 + 70);
      v494 = *v423;
      if ((void *)v493 != v492)
      {
        do
        {
          v493 -= 272;
          std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v493);
        }
        while ((void *)v493 != v492);
        v494 = *v423;
      }
      *((_QWORD *)v295 + 70) = v492;
      operator delete(v494);
    }
    v405 = (std::__shared_weak_count *)*((_QWORD *)v295 + 68);
    v300 = v295 + 16;
    if (!v405)
      goto LABEL_683;
    v495 = (unint64_t *)&v405->__shared_owners_;
    do
      v407 = __ldaxr(v495);
    while (__stlxr(v407 - 1, v495));
    goto LABEL_974;
  }
  std::optional<std::string>::optional[abi:fe180100]((std::string *)__what_arg, (__int128 *)v295 + 64);
  if (!__what_arg[24])
  {
    AMSCore::Error::Error<char [51]>((uint64_t)&v603, 701, (const std::error_category *)&AMSCore::Error::Category::dialog(void)::instance);
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v567, &v603);
    AMSCore::Task<AMSCore::HTTPResponseAction,void>::ValuePromise::return_value<AMSCore::HTTPResponseAction>(v529, (uint64_t)&v567);
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v567);
    AMSCore::Error::~Error((AMSCore::Error *)&v603);
  }
  std::string::basic_string[abi:fe180100]<0>(v498, "authenticate");
  std::string::basic_string[abi:fe180100]<0>(v500, "authentication");
  if (!v295[1776])
    goto LABEL_981;
  *((_QWORD *)v295 + 223) = *((_QWORD *)v295 + 213);
  v477 = *((_QWORD *)v295 + 214);
  *((_QWORD *)v295 + 224) = v477;
  if (v477)
  {
    v478 = (unint64_t *)(v477 + 8);
    do
      v479 = __ldxr(v478);
    while (__stxr(v479 + 1, v478));
  }
  *((_QWORD *)v295 + 225) = *((_QWORD *)v295 + 215);
  v480 = *((_QWORD *)v295 + 216);
  *((_QWORD *)v295 + 226) = v480;
  if (v480)
  {
    v481 = (unint64_t *)(v480 + 8);
    do
      v482 = __ldxr(v481);
    while (__stxr(v482 + 1, v481));
  }
  v295[1816] = 1;
  AMSCore::HTTPResponseAction::createRetryAction((uint64_t)&v567, v498, (uint64_t)v500, v497);
  std::optional<AMSCore::AuthenticateResult>::~optional((uint64_t)v497);
  if (v295[1911] < 0)
  {
    operator delete(*v500);
    if (v295[1935] < 0)
      goto LABEL_939;
LABEL_934:
    if (!__what_arg[24])
      goto LABEL_981;
LABEL_940:
    AMSCore::DialogResult::DialogResult(&v603, v520, (const void **)__what_arg);
    *((_OWORD *)v295 + 124) = v603.std::runtime_error;
    v603.__imp_.__imp_ = 0;
    v603.__vftable = 0;
    v295[2000] = 1;
    AMSCore::HTTPResponseAction::setDialogResult((__n128 *)&v567, v496);
    std::optional<AMSCore::DialogResult>::~optional((uint64_t)v496);
    std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&v603);
    AMSCore::Task<AMSCore::HTTPResponseAction,void>::ValuePromise::return_value<AMSCore::HTTPResponseAction>(v529, (uint64_t)&v567);
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v567);
    if (__what_arg[24] && (__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    goto LABEL_943;
  }
  if ((v295[1935] & 0x80000000) == 0)
    goto LABEL_934;
LABEL_939:
  operator delete(*(void **)v498);
  if (__what_arg[24])
    goto LABEL_940;
LABEL_981:
  __break(1u);
}

void sub_18CC7C02C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::FinanceDialogRequest::perform(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  AMSCore::HTTPResponseAction *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v1 = *((_QWORD *)result + 271);
  if (*(_BYTE *)(v1 + 472))
  {
    v2 = result;
    v3 = (AMSCore::HTTPResponseAction *)(result + 536);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(result + 536), v1 + 8);
    if (v2[488])
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      v2[488] = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)v3);
    v2[488] = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    v4 = *((_QWORD *)v2 + 272);
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v2 + 272);
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)v2 + 263);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)v2 + 267);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 265);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(v2 + 1000));
    if (v2[1968] && (char)v2[1967] < 0)
      operator delete(*((void **)v2 + 243));
    AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(v2 + 1296));
    if (v2[1744])
      AMSCore::IMetricsProvider::Event::~Event((AMSCore::IMetricsProvider::Event *)(v2 + 1592));
    if ((char)v2[2071] < 0)
    {
      operator delete(*((void **)v2 + 256));
      if (((char)v2[2095] & 0x80000000) == 0)
        goto LABEL_31;
    }
    else if (((char)v2[2095] & 0x80000000) == 0)
    {
LABEL_31:
      *((_QWORD *)v2 + 67) = v2 + 16;
      *(_QWORD *)v2 = 0;
      return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v3);
    }
    operator delete(*((void **)v2 + 259));
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

void AMSCore::FinanceDialogRequest::perform(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;

  if (*(_QWORD *)__p)
  {
    v2 = *((_QWORD *)__p + 272);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 272);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 263);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 267);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 265);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(__p + 1000));
    if (__p[1968] && __p[1967] < 0)
      operator delete(*((void **)__p + 243));
    AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(__p + 1296));
    if (__p[1744])
      AMSCore::IMetricsProvider::Event::~Event((AMSCore::IMetricsProvider::Event *)(__p + 1592));
    if (__p[2071] < 0)
    {
      operator delete(*((void **)__p + 256));
      if ((__p[2095] & 0x80000000) == 0)
        goto LABEL_29;
    }
    else if ((__p[2095] & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(*((void **)__p + 259));
  }
LABEL_29:
  v15 = (char *)*((_QWORD *)__p + 66);
  if (v15 == __p + 504)
  {
    v16 = 4;
    v15 = __p + 504;
  }
  else
  {
    if (!v15)
      goto LABEL_34;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_34:
  if (__p[488])
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  v17 = *((_QWORD *)__p + 270);
  do
  {
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v19)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v17)
  {
    v20 = (unint64_t *)(*((_QWORD *)__p + 270) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      v22 = (std::__shared_weak_count *)*((_QWORD *)__p + 270);
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v23 = *((_QWORD *)__p + 269);
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 269);
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v27 = *((_QWORD *)__p + 268);
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      v30 = (std::__shared_weak_count *)*((_QWORD *)__p + 268);
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::DialogRequest::DialogRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v5 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v7 = (_QWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = a1 + 112;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a2 + 104) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 120) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = v9;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    AMSCore::IMetricsProvider::Event::Event((AMSCore::IMetricsProvider::Event *)(a1 + 128), (const AMSCore::IMetricsProvider::Event *)(a2 + 128));
    *(_QWORD *)(a1 + 128) = &off_1E2520C08;
    *(_BYTE *)(a1 + 280) = 1;
  }
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  return a1;
}

void sub_18CC7CD68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  AMSCore::IMetricsProvider::Event *v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(_BYTE *)(v1 + 280))
    AMSCore::IMetricsProvider::Event::~Event(v3);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 112));
  if (*(char *)(v1 + 103) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 79) & 0x80000000) == 0)
    {
LABEL_5:
      if (!*(_BYTE *)(v1 + 48))
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*v5);
  if (!*(_BYTE *)(v1 + 48))
    goto LABEL_11;
LABEL_9:
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v4);
LABEL_11:
  std::vector<AMSCore::DialogAction>::~vector[abi:fe180100]((void **)v1);
  _Unwind_Resume(a1);
}

void AMSCore::DialogRequest::~DialogRequest(AMSCore::DialogRequest *this)
{
  void *v2;
  uint64_t v3;
  void *v4;

  if (*((_BYTE *)this + 280))
    AMSCore::IMetricsProvider::Event::~Event((AMSCore::DialogRequest *)((char *)this + 128));
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 104, *((unsigned int **)this + 14));
  if ((*((char *)this + 103) & 0x80000000) == 0)
  {
    if ((*((char *)this + 79) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_8:
    operator delete(*((void **)this + 7));
    if (!*((_BYTE *)this + 48))
      goto LABEL_10;
    goto LABEL_9;
  }
  operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    goto LABEL_8;
LABEL_5:
  if (!*((_BYTE *)this + 48))
  {
LABEL_10:
    v2 = *(void **)this;
    if (!*(_QWORD *)this)
      return;
    goto LABEL_11;
  }
LABEL_9:
  if ((*((char *)this + 47) & 0x80000000) == 0)
    goto LABEL_10;
  operator delete(*((void **)this + 3));
  v2 = *(void **)this;
  if (!*(_QWORD *)this)
    return;
LABEL_11:
  v3 = *((_QWORD *)this + 1);
  v4 = v2;
  if ((void *)v3 != v2)
  {
    do
    {
      v3 -= 272;
      std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v3);
    }
    while ((void *)v3 != v2);
    v4 = *(void **)this;
  }
  *((_QWORD *)this + 1) = v2;
  operator delete(v4);
}

void AMSCore::FinanceDialogRequest::perform(unint64_t a1, __n128 a2)
{
  __n128 *v2;
  _QWORD *v3;
  std::runtime_error *v5;
  AMSCore::HTTPResponseAction *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const std::runtime_error *v11;
  const char **v12;
  std::__libcpp_refstring *p_imp;
  void **v14;
  void **v15;
  const std::runtime_error *v16;
  unsigned __int8 v17;
  std::runtime_error *v18;
  unint64_t v19;
  const char **v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const std::runtime_error *v29;
  std::runtime_error_vtbl *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::runtime_error *v69;
  std::runtime_error_vtbl *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  AMSCore::HTTPResponseAction *v84;
  AMSCore::HTTPResponseAction *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *imp;
  unint64_t *v109;
  unint64_t v110;
  AMSCore::HTTPResponseAction *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  unint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  std::string v128;
  char v129;
  std::system_error v130;
  unsigned int **v131;
  unsigned int *v132[3];
  std::__shared_weak_count *v133;
  _BYTE v134[32];
  __n128 v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  __int128 v147;
  uint64_t v148;
  char v149;
  __int128 v150;
  uint64_t v151;
  char v152;
  _BYTE v153[40];
  int v154;
  std::string __what_arg;
  std::error_code v156;

  v5 = (std::runtime_error *)(a1 + 1704);
  v6 = (AMSCore::HTTPResponseAction *)(a1 + 536);
  v7 = a1 + 1936;
  v8 = *(unsigned __int8 *)(a1 + 2184);
  if (v8 == 2)
  {
LABEL_36:
    v10 = *(_QWORD *)(a1 + 2168);
    if (*(_BYTE *)(v10 + 472))
    {
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v6, v10 + 8);
      if (*(_BYTE *)(a1 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
        *(_BYTE *)(a1 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 24, (uint64_t)v6);
      *(_BYTE *)(a1 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v6);
      v50 = *(_QWORD *)(a1 + 2176);
      if (v50)
      {
        v51 = (unint64_t *)(v50 + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          v53 = *(std::__shared_weak_count **)(a1 + 2176);
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v54 = *(std::__shared_weak_count **)(a1 + 2016);
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(p_shared_owners);
        while (__stlxr(v56 - 1, p_shared_owners));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = *(std::__shared_weak_count **)(a1 + 2096);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = *(std::__shared_weak_count **)(a1 + 2080);
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = *(std::__shared_weak_count **)(a1 + 2064);
      if (!v63)
        goto LABEL_206;
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (v65)
      {
LABEL_206:
        if (*(_BYTE *)(a1 + 1776))
          goto LABEL_64;
LABEL_71:
        ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
        goto LABEL_201;
      }
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
      if (!*(_BYTE *)(a1 + 1776))
        goto LABEL_71;
LABEL_64:
      v66 = *(std::__shared_weak_count **)(a1 + 1712);
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
LABEL_199:
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
LABEL_201:
      v125 = *(unsigned int *)(a1 + 1952);
      if ((_DWORD)v125 != -1)
        ((void (*)(_BYTE *, unint64_t))off_1E253D230[v125])(v134, v7);
      *(_QWORD *)(a1 + 536) = a1 + 16;
      *(_QWORD *)a1 = 0;
      AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v6);
      return;
    }
    goto LABEL_149;
  }
  if (v8 != 1)
  {
    v127 = a1 + 1936;
    v14 = (void **)(a1 + 1888);
    v15 = (void **)(a1 + 1912);
    v3 = (_QWORD *)(a1 + 1984);
    v2 = *(__n128 **)(a1 + 2136);
    LOBYTE(v10) = v2[5].n128_u8[8];
    if (!(_BYTE)v10)
      goto LABEL_149;
    v126 = (uint64_t *)(a1 + 1000);
    v16 = (const std::runtime_error *)&v2->n128_i8[8];
    v17 = v2[5].n128_u8[0];
    if (v17)
    {
      v19 = v2[1].n128_u64[1];
      v18 = (std::runtime_error *)&v2[1].n128_i8[8];
      *v5 = v18[-1];
      v16->__vftable = 0;
      v16->__imp_.__imp_ = 0;
      *(_QWORD *)(a1 + 1720) = v19;
      v20 = (const char **)(a1 + 1728);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 1704), v16);
      *(__n128 *)(a1 + 1720) = *(__n128 *)((char *)v2 + 24);
      *(_QWORD *)(a1 + 1704) = off_1E2521330;
      v25 = v2 + 3;
      v26 = v2[3].n128_u64[0];
      *(_QWORD *)(a1 + 1736) = v2[2].n128_u64[1];
      v27 = a1 + 1744;
      *(_QWORD *)(a1 + 1744) = v26;
      v28 = v2[3].n128_u64[1];
      *(_QWORD *)(a1 + 1752) = v28;
      if (v28)
      {
        *(_QWORD *)(v26 + 16) = v27;
        v2[2].n128_u64[1] = (unint64_t)v25;
        v25->n128_u64[0] = 0;
        v2[3].n128_u64[1] = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 1736) = v27;
      }
      v69 = *(std::runtime_error **)(a1 + 2136);
      v70 = v69[4].__vftable;
      v18 = v69 + 4;
      *(_QWORD *)(a1 + 1760) = v70;
      v20 = (const char **)(a1 + 1768);
    }
    *v20 = v18->__imp_.__imp_;
    v18->__vftable = 0;
    v18->__imp_.__imp_ = 0;
    *(_BYTE *)(a1 + 1776) = v17;
    v71 = *(_QWORD *)(a1 + 2144);
    if (v71)
    {
      v72 = (unint64_t *)(v71 + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        v74 = *(std::__shared_weak_count **)(a1 + 2144);
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v75 = *(std::__shared_weak_count **)(a1 + 2048);
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (*(_BYTE *)(a1 + 1688) && *(char *)(a1 + 1687) < 0)
      operator delete(*(void **)(a1 + 1664));
    if (*(_BYTE *)(a1 + 1656) && *(char *)(a1 + 1655) < 0)
      operator delete(*(void **)(a1 + 1632));
    v78 = *(_QWORD *)(a1 + 1608);
    if (v78)
    {
      v79 = *(_QWORD *)(a1 + 1616);
      v80 = *(void **)(a1 + 1608);
      if (v79 != v78)
      {
        do
        {
          v79 -= 272;
          std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v79);
        }
        while (v79 != v78);
        v80 = *(void **)(a1 + 1608);
      }
      *(_QWORD *)(a1 + 1616) = v78;
      operator delete(v80);
    }
    v81 = *(std::__shared_weak_count **)(a1 + 1600);
    if (!v81)
      goto LABEL_207;
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
      if (*(_BYTE *)(a1 + 1776))
      {
LABEL_102:
        v128.__r_.__value_.__s.__data_[0] = 0;
        v129 = 0;
        if (!*(_BYTE *)(a1 + 1048))
        {
          AMSCore::StringUtils::join<char [51]>(&__what_arg, "Authenticate dialog did not have a default action.");
          v156.__cat_ = (const std::error_category *)&AMSCore::Error::Category::dialog(void)::instance;
          *(_QWORD *)&v156.__val_ = 701;
          std::system_error::system_error(&v130, v156, &__what_arg);
          v7 = v127;
          if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__what_arg.__r_.__value_.__l.__data_);
          memset(v132, 0, sizeof(v132));
          v130.__vftable = (std::system_error_vtbl *)off_1E2521330;
          v131 = v132;
          v133 = 0;
          AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v134, &v130);
          v85 = (AMSCore::HTTPResponseAction *)(a1 + 24);
          if (*(_BYTE *)(a1 + 488))
          {
            AMSCore::HTTPResponseAction::~HTTPResponseAction(v85);
            *(_BYTE *)(a1 + 488) = 0;
          }
          AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v85, (uint64_t)v134);
          *(_BYTE *)(a1 + 488) = 1;
          AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v134);
          v130.__vftable = (std::system_error_vtbl *)off_1E2521330;
          v86 = v133;
          if (v133)
          {
            v87 = (unint64_t *)&v133->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v131, v132[0]);
          MEMORY[0x18D7898AC](&v130);
          goto LABEL_165;
        }
        if (*(char *)(a1 + 1047) < 0)
        {
          std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)(a1 + 1024), *(_QWORD *)(a1 + 1032));
          v2 = (__n128 *)v134;
          LODWORD(v10) = *(unsigned __int8 *)(a1 + 1776);
        }
        else
        {
          a2 = *(__n128 *)(a1 + 1024);
          *(__n128 *)&v128.__r_.__value_.__l.__data_ = a2;
          v128.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1040);
          LODWORD(v10) = 1;
          v2 = (__n128 *)v134;
        }
        v129 = 1;
        *(_BYTE *)(a1 + 1935) = 12;
        strcpy((char *)(a1 + 1920), "cate");
        *v15 = *(void **)"authenticate";
        *(_BYTE *)(a1 + 1911) = 14;
        *v14 = *(void **)"authentication";
        strcpy((char *)(a1 + 1894), "tication");
        if (!(_DWORD)v10)
          goto LABEL_149;
        *(_QWORD *)(a1 + 1784) = *(_QWORD *)(a1 + 1704);
        v89 = *(_QWORD *)(a1 + 1712);
        *(_QWORD *)(a1 + 1792) = v89;
        if (v89)
        {
          v90 = (unint64_t *)(v89 + 8);
          do
            v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
        }
        *(_QWORD *)(a1 + 1800) = *(_QWORD *)(a1 + 1720);
        v92 = *(_QWORD *)(a1 + 1728);
        *(_QWORD *)(a1 + 1808) = v92;
        if (v92)
        {
          v93 = (unint64_t *)(v92 + 8);
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        *(_BYTE *)(a1 + 1816) = 1;
        v134[0] = 0;
        v134[24] = 0;
        v135.n128_u8[0] = 0;
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v153[0] = 0;
        v153[32] = 0;
        v154 = 3;
        v95 = *(_OWORD *)v15;
        v148 = *(_QWORD *)(a1 + 1928);
        v147 = v95;
        *v15 = 0;
        *(_QWORD *)(a1 + 1920) = 0;
        *(_QWORD *)(a1 + 1928) = 0;
        v149 = 1;
        v150 = *(_OWORD *)v14;
        v151 = *(_QWORD *)(a1 + 1904);
        *v14 = 0;
        *(_QWORD *)(a1 + 1896) = 0;
        *(_QWORD *)(a1 + 1904) = 0;
        v152 = 1;
        a2 = std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v153, (__int128 *)(a1 + 1784));
        if (*(_BYTE *)(a1 + 1816))
        {
          v96 = *(std::__shared_weak_count **)(a1 + 1808);
          if (v96)
          {
            v97 = (unint64_t *)&v96->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v96->__on_zero_shared)(v96, a2);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          v99 = *(std::__shared_weak_count **)(a1 + 1792);
          if (v99)
          {
            v100 = (unint64_t *)&v99->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v99->__on_zero_shared)(v99, a2);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
        }
        if (*(char *)(a1 + 1911) < 0)
        {
          operator delete(*v14);
          if ((*(char *)(a1 + 1935) & 0x80000000) == 0)
          {
LABEL_140:
            LOBYTE(v10) = v129;
            if (!v129)
              goto LABEL_149;
LABEL_141:
            AMSCore::DialogResult::DialogResult(&v130, v126, (const void **)&v128.__r_.__value_.__l.__data_);
            a2 = (__n128)v130.std::runtime_error;
            v130.__vftable = 0;
            v130.__imp_.__imp_ = 0;
            LOBYTE(v10) = 1;
            *(_BYTE *)(a1 + 2000) = 1;
            if (v136)
            {
              *v3 = 0;
              *(_QWORD *)(a1 + 1992) = 0;
              v102 = (std::__shared_weak_count *)v135.n128_u64[1];
              v135 = a2;
              v7 = v127;
              if (v102)
              {
                v103 = (unint64_t *)&v102->__shared_owners_;
                do
                  v104 = __ldaxr(v103);
                while (__stlxr(v104 - 1, v103));
                if (!v104)
                {
                  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                  std::__shared_weak_count::__release_weak(v102);
                }
              }
              goto LABEL_151;
            }
LABEL_150:
            v2[2] = a2;
            *v3 = 0;
            v3[1] = 0;
            v136 = v10;
            v7 = v127;
LABEL_151:
            if (*(_BYTE *)(a1 + 2000))
            {
              v105 = *(std::__shared_weak_count **)(a1 + 1992);
              if (v105)
              {
                v106 = (unint64_t *)&v105->__shared_owners_;
                do
                  v107 = __ldaxr(v106);
                while (__stlxr(v107 - 1, v106));
                if (!v107)
                {
                  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                  std::__shared_weak_count::__release_weak(v105);
                }
              }
            }
            imp = (std::__shared_weak_count *)v130.__imp_.__imp_;
            if (v130.__imp_.__imp_)
            {
              v109 = (unint64_t *)(v130.__imp_.__imp_ + 8);
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
                std::__shared_weak_count::__release_weak(imp);
              }
            }
            v111 = (AMSCore::HTTPResponseAction *)(a1 + 24);
            if (*(_BYTE *)(a1 + 488))
            {
              AMSCore::HTTPResponseAction::~HTTPResponseAction(v111);
              *(_BYTE *)(a1 + 488) = 0;
            }
            AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v111, (uint64_t)v134);
            *(_BYTE *)(a1 + 488) = 1;
            AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v134);
LABEL_165:
            if (v129 && SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v128.__r_.__value_.__l.__data_);
LABEL_168:
            if (*(_BYTE *)(a1 + 1776))
            {
              v112 = *(std::__shared_weak_count **)(a1 + 1728);
              if (v112)
              {
                v113 = (unint64_t *)&v112->__shared_owners_;
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                }
              }
              v115 = *(std::__shared_weak_count **)(a1 + 1712);
              if (v115)
              {
                v116 = (unint64_t *)&v115->__shared_owners_;
                do
                  v117 = __ldaxr(v116);
                while (__stlxr(v117 - 1, v116));
                if (!v117)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
              }
            }
            else
            {
              ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
            }
            v118 = *(std::__shared_weak_count **)(a1 + 2016);
            if (v118)
            {
              v119 = (unint64_t *)&v118->__shared_owners_;
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            if (*(_BYTE *)(a1 + 632) && *(char *)(a1 + 631) < 0)
              operator delete(*(void **)(a1 + 608));
            if (*(_BYTE *)(a1 + 600) && *(char *)(a1 + 599) < 0)
              operator delete(*(void **)(a1 + 576));
            v121 = *(_QWORD *)(a1 + 552);
            if (v121)
            {
              v122 = *(_QWORD *)(a1 + 560);
              v123 = *(void **)(a1 + 552);
              if (v122 != v121)
              {
                do
                {
                  v122 -= 272;
                  std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v122);
                }
                while (v122 != v121);
                v123 = *(void **)(a1 + 552);
              }
              *(_QWORD *)(a1 + 560) = v121;
              operator delete(v123);
            }
            v66 = *(std::__shared_weak_count **)(a1 + 544);
            if (!v66)
              goto LABEL_201;
            v124 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(v124);
            while (__stlxr(v68 - 1, v124));
            goto LABEL_199;
          }
        }
        else if ((*(char *)(a1 + 1935) & 0x80000000) == 0)
        {
          goto LABEL_140;
        }
        operator delete(*v15);
        LOBYTE(v10) = v129;
        if (!v129)
          goto LABEL_149;
        goto LABEL_141;
      }
    }
    else
    {
LABEL_207:
      if (*(_BYTE *)(a1 + 1776))
        goto LABEL_102;
    }
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v134, v5);
    v84 = (AMSCore::HTTPResponseAction *)(a1 + 24);
    v7 = v127;
    if (*(_BYTE *)(a1 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v84);
      *(_BYTE *)(a1 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v84, (uint64_t)v134);
    *(_BYTE *)(a1 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v134);
    goto LABEL_168;
  }
  v9 = *(_QWORD *)(a1 + 2152);
  LOBYTE(v10) = *(_BYTE *)(v9 + 88);
  if (!(_BYTE)v10)
  {
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  v11 = (const std::runtime_error *)(v9 + 8);
  v2 = (__n128 *)*(unsigned __int8 *)(v9 + 80);
  if (*(_BYTE *)(v9 + 80))
  {
    *(_QWORD *)(a1 + 1704) = *(_QWORD *)(v9 + 8);
    v12 = (const char **)(a1 + 1712);
    p_imp = (std::__libcpp_refstring *)(v9 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 1704), v11);
    *(_OWORD *)(a1 + 1720) = *(_OWORD *)(v9 + 24);
    *(_QWORD *)(a1 + 1704) = off_1E2521330;
    v21 = (_QWORD *)(v9 + 48);
    v22 = *(_QWORD *)(v9 + 48);
    *(_QWORD *)(a1 + 1736) = *(_QWORD *)(v9 + 40);
    v23 = a1 + 1744;
    *(_QWORD *)(a1 + 1744) = v22;
    v24 = *(_QWORD *)(v9 + 56);
    *(_QWORD *)(a1 + 1752) = v24;
    if (v24)
    {
      *(_QWORD *)(v22 + 16) = v23;
      *(_QWORD *)(v9 + 40) = v21;
      *v21 = 0;
      *(_QWORD *)(v9 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 1736) = v23;
    }
    v29 = *(const std::runtime_error **)(a1 + 2152);
    v30 = v29[4].__vftable;
    v11 = v29 + 4;
    *(_QWORD *)(a1 + 1760) = v30;
    v12 = (const char **)(a1 + 1768);
    p_imp = &v11->__imp_;
  }
  *v12 = p_imp->__imp_;
  v11->__vftable = 0;
  v11->__imp_.__imp_ = 0;
  *(_BYTE *)(a1 + 1776) = (_BYTE)v2;
  v31 = *(_QWORD *)(a1 + 2160);
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      v34 = *(std::__shared_weak_count **)(a1 + 2160);
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v35 = *(std::__shared_weak_count **)(a1 + 544);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(a1 + 1296));
  if (!*(_BYTE *)(a1 + 1776))
  {
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v134, v5);
    if (*(_BYTE *)(a1 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
      *(_BYTE *)(a1 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 24, (uint64_t)v134);
    *(_BYTE *)(a1 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v134);
    if (!*(_BYTE *)(a1 + 1776))
      goto LABEL_71;
    goto LABEL_64;
  }
  v38 = *(_QWORD *)(a1 + 2112);
  v39 = *(_QWORD *)(a1 + 2104);
  *(_OWORD *)(a1 + 2056) = *(_OWORD *)(a1 + 1704);
  v5->__vftable = 0;
  v5->__imp_.__imp_ = 0;
  *(_QWORD *)(a1 + 2072) = v39;
  *(_QWORD *)(a1 + 2080) = v38;
  if (v38)
  {
    v40 = (unint64_t *)(v38 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = *(_QWORD *)(a1 + 2120);
  *(_QWORD *)(a1 + 2088) = *(_QWORD *)(v42 + 40);
  v43 = *(_QWORD *)(v42 + 48);
  *(_QWORD *)(a1 + 2096) = v43;
  if (v43)
  {
    v44 = (unint64_t *)(v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = *(_QWORD *)(a1 + 2008);
  *(_QWORD *)(a1 + 2168) = v46;
  *(_QWORD *)(a1 + 2176) = *(_QWORD *)(a1 + 2016);
  *(_QWORD *)(a1 + 2008) = 0;
  *(_QWORD *)(a1 + 2016) = 0;
  if (atomic_load((unint64_t *)(v46 + 480)))
    goto LABEL_36;
  *(_BYTE *)(a1 + 2184) = 2;
  v48 = (unint64_t *)(*(_QWORD *)(a1 + 2168) + 480);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(a1, v48));
  if (v49)
    goto LABEL_36;
}

void sub_18CC7DB44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AMSCore::ExecuteHTTPRequestTask::HandlerType *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void **v30;
  uint64_t v31;
  uint64_t v32;

  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  std::expected<AMSCore::AuthenticateResult,AMSCore::Error>::~expected[abi:fe180100](v31);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v32);
  AMSCore::AuthenticateRequestBuilder::~AuthenticateRequestBuilder(v30);
  AMSCore::ExecuteHTTPRequestTask::HandlerType::~HandlerType(a10);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::FinanceDialogRequest::perform(char *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  char v61;

  if (!*(_QWORD *)a1)
    goto LABEL_96;
  if (!a1[2184])
  {
    v9 = *((_QWORD *)a1 + 268);
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 268);
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)a1 + 256);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (a1[1688] && a1[1687] < 0)
      operator delete(*((void **)a1 + 208));
    if (a1[1656] && a1[1655] < 0)
      operator delete(*((void **)a1 + 204));
    v16 = *((_QWORD *)a1 + 201);
    if (v16)
    {
      v17 = *((_QWORD *)a1 + 202);
      v18 = (void *)*((_QWORD *)a1 + 201);
      if (v17 != v16)
      {
        do
        {
          v17 -= 272;
          std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v17);
        }
        while (v17 != v16);
        v18 = (void *)*((_QWORD *)a1 + 201);
      }
      *((_QWORD *)a1 + 202) = v16;
      operator delete(v18);
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)a1 + 200);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)a1 + 252);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (a1[632] && a1[631] < 0)
      operator delete(*((void **)a1 + 76));
    if (a1[600] && a1[599] < 0)
      operator delete(*((void **)a1 + 72));
    v25 = *((_QWORD *)a1 + 69);
    if (v25)
    {
      v26 = *((_QWORD *)a1 + 70);
      v27 = (void *)*((_QWORD *)a1 + 69);
      if (v26 != v25)
      {
        do
        {
          v26 -= 272;
          std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v26);
        }
        while (v26 != v25);
        v27 = (void *)*((_QWORD *)a1 + 69);
      }
      *((_QWORD *)a1 + 70) = v25;
      operator delete(v27);
    }
    v28 = (std::__shared_weak_count *)*((_QWORD *)a1 + 68);
    if (!v28)
      goto LABEL_94;
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    goto LABEL_88;
  }
  if (a1[2184] == 1)
  {
    v2 = *((_QWORD *)a1 + 270);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 270);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 68);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(a1 + 1296));
    goto LABEL_94;
  }
  v31 = *((_QWORD *)a1 + 272);
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      v34 = (std::__shared_weak_count *)*((_QWORD *)a1 + 272);
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)a1 + 252);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)a1 + 262);
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)a1 + 260);
  if (!v41)
    goto LABEL_80;
  v42 = (unint64_t *)&v41->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v44 = (std::__shared_weak_count *)*((_QWORD *)a1 + 258);
    if (!v44)
      goto LABEL_84;
  }
  else
  {
LABEL_80:
    v44 = (std::__shared_weak_count *)*((_QWORD *)a1 + 258);
    if (!v44)
      goto LABEL_84;
  }
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (v46)
  {
LABEL_84:
    if (a1[1776])
      goto LABEL_85;
LABEL_93:
    (**((void (***)(uint64_t))a1 + 213))((uint64_t)(a1 + 1704));
    goto LABEL_94;
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  if (!a1[1776])
    goto LABEL_93;
LABEL_85:
  v28 = (std::__shared_weak_count *)*((_QWORD *)a1 + 214);
  if (v28)
  {
    v47 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v47);
    while (__stlxr(v30 - 1, v47));
LABEL_88:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_94:
  v48 = *((unsigned int *)a1 + 488);
  if ((_DWORD)v48 != -1)
    ((void (*)(char *, char *))off_1E253D230[v48])(&v61, a1 + 1936);
LABEL_96:
  v49 = (char *)*((_QWORD *)a1 + 66);
  if (v49 == a1 + 504)
  {
    v50 = 4;
    v49 = a1 + 504;
  }
  else
  {
    if (!v49)
      goto LABEL_101;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_101:
  if (a1[488])
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
  v51 = *((_QWORD *)a1 + 266);
  do
  {
    v52 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v53)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v51)
  {
    v54 = (unint64_t *)(*((_QWORD *)a1 + 266) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      v56 = (std::__shared_weak_count *)*((_QWORD *)a1 + 266);
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v57 = *((_QWORD *)a1 + 264);
  if (v57)
  {
    v58 = (unint64_t *)(v57 + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      v60 = (std::__shared_weak_count *)*((_QWORD *)a1 + 264);
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(a1 + 1000));
  operator delete(a1);
}

void AMSCore::AuthenticateRequestBuilder::~AuthenticateRequestBuilder(void **this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if (!*((_BYTE *)this + 64))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 64))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
LABEL_7:
  v2 = this[2];
  if (v2)
  {
    v3 = (uint64_t)this[3];
    v4 = this[2];
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v3);
      }
      while ((void *)v3 != v2);
      v4 = this[2];
    }
    this[3] = v2;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)this[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t AMSCore::Task<AMSCore::HTTPResponseAction,void>::ValuePromise::return_value<AMSCore::HTTPResponseAction>(uint64_t a1, uint64_t a2)
{
  AMSCore::HTTPResponseAction *v4;
  uint64_t result;

  v4 = (AMSCore::HTTPResponseAction *)(a1 + 8);
  if (*(_BYTE *)(a1 + 472))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v4);
    *(_BYTE *)(a1 + 472) = 0;
  }
  result = AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v4, a2);
  *(_BYTE *)(a1 + 472) = 1;
  return result;
}

std::string *std::optional<std::string>::optional[abi:fe180100](std::string *this, __int128 *a2)
{
  __int128 v3;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_18CC7E2C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Error::Error<char [51]>(uint64_t a1, uint64_t a2, const std::error_category *a3)
{
  std::string __what_arg;
  std::error_code v8;

  AMSCore::StringUtils::join<char [51]>(&__what_arg, "Authenticate dialog did not have a default action.");
  *(_QWORD *)&v8.__val_ = a2;
  v8.__cat_ = a3;
  std::system_error::system_error((std::system_error *)a1, v8, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1E2521330;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_18CC7E378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<AMSCore::DialogResult>::~optional(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  return a1;
}

uint64_t std::expected<AMSCore::AuthenticateResult,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

void AMSCore::`anonymous namespace'::handle(_OWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  std::string *v23;
  AMSCore::URL **v24;
  AMSCore::URL ***v25;
  uint64_t v26;
  unsigned int v27;
  const AMSCore::URL *v28;
  uint64_t v29;
  AMSCore::URL *v30;
  uint64_t *v31;
  int v32;
  unint64_t v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (**v38)(AMSCore::Error *__hidden);
  uint64_t v39;
  std::ios_base *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  AMSCore::URL ***v45;
  std::__shared_weak_count *v46;
  int v47;
  __int128 v48;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  __int128 v73;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  AMSCore::URL *v107;
  uint64_t v108;
  __int128 v109;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  __int128 v130;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  AMSCore::URL ***v166;
  char *v167;
  _QWORD *v168;
  std::string *v169;
  std::runtime_error *v170;
  _BYTE *v171;
  _QWORD *v172;
  _QWORD *v173;
  _OWORD *v174;
  AMSCore::HTTPResponseAction *v175;
  char *v176;
  uint64_t *v177;
  uint64_t v178;
  std::runtime_error *v179;
  uint64_t *v180;
  char *v181;
  AMSCore::HTTPResponseAction *v182;
  std::string *v183;
  std::system_error v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  char v190;
  int v191;
  _QWORD v192[2];
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  char v197;
  char v198[8];
  unsigned int *v199;
  char v200;
  char v201;
  std::__shared_weak_count *v202;
  char v203;
  std::string v204;
  char v205;
  __int128 v206;
  uint64_t v207;
  char v208;
  __int128 v209;
  uint64_t v210;
  char v211;
  int v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  char v218;
  char v219;
  char v220;
  char v221;
  char v222;
  char v223;
  char v224;
  char v225;
  char v226;
  char v227;
  char v228;
  char v229;
  char v230;
  int v231;
  std::string v232;
  void *v233;
  char v234;
  std::string v235;
  void *v236[2];
  char v237;
  std::string v238;
  void *v239[2];
  char v240;
  void *v241[2];
  char v242;
  std::string __what_arg;
  void (**v244)(AMSCore::Error *__hidden);
  _QWORD v245[3];
  unsigned int *v246[4];
  std::__shared_weak_count *v247;
  __int128 __p;
  __int128 v249;
  int v250;
  uint64_t v251;
  char v252;
  char v253;
  char v254;
  char v255;
  char v256;
  char v257;
  _QWORD v258[4];
  __int128 v259;
  std::error_code v260;

  v8 = (char *)operator new(0x4F0uLL);
  v9 = (unint64_t)v8;
  v10 = (uint64_t)(v8 + 1000);
  v182 = (AMSCore::HTTPResponseAction *)(v8 + 536);
  v173 = v8 + 1080;
  v174 = v8 + 568;
  v11 = v8 + 1104;
  v12 = v8 + 1120;
  v171 = v8 + 1256;
  v172 = v8 + 1136;
  v178 = (uint64_t)(v8 + 1168);
  v179 = (std::runtime_error *)(v8 + 1152);
  v177 = (uint64_t *)(v8 + 1184);
  *((_OWORD *)v8 + 71) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a3;
  v13 = a3[1];
  *((_QWORD *)v8 + 150) = v13;
  *a3 = 0;
  a3[1] = 0;
  *(_OWORD *)(v8 + 1208) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  do
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v15 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v8[24] = 0;
  v8[488] = 0;
  *((_QWORD *)v8 + 62) = 0;
  v175 = (AMSCore::HTTPResponseAction *)(v8 + 24);
  v176 = v8 + 16;
  *((_QWORD *)v8 + 66) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v196, (uint64_t)(v8 + 16));
  *a1 = v196;
  *(_QWORD *)(v9 + 1104) = *(_QWORD *)(v9 + 1136);
  v16 = *(_QWORD *)(v9 + 1144);
  *(_QWORD *)(v9 + 1112) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(v9 + 1120) = v14;
  *(_QWORD *)(v9 + 1128) = v13;
  if (v13)
  {
    v19 = (unint64_t *)(v13 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (char *)operator new(0x498uLL);
  v22 = (unint64_t)v21;
  v23 = (std::string *)(v21 + 536);
  v183 = (std::string *)(v21 + 840);
  v169 = (std::string *)(v21 + 688);
  v170 = (std::runtime_error *)(v21 + 992);
  v24 = (AMSCore::URL **)(v21 + 1072);
  v180 = (uint64_t *)(v21 + 1088);
  v167 = v21 + 1048;
  v168 = v21 + 1104;
  v25 = (AMSCore::URL ***)(v21 + 1120);
  *((_OWORD *)v21 + 67) = *(_OWORD *)(v9 + 1104);
  *v11 = 0;
  v11[1] = 0;
  v26 = *(_QWORD *)(v9 + 1120);
  *((_QWORD *)v21 + 141) = *(_QWORD *)(v9 + 1128);
  *v12 = 0;
  v12[1] = 0;
  do
    v27 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v27 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v21[24] = 0;
  v21[488] = 0;
  *((_QWORD *)v21 + 62) = 0;
  *((_QWORD *)v21 + 66) = 0;
  v181 = v21 + 16;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v196, (uint64_t)(v21 + 16));
  *(_OWORD *)v10 = v196;
  v28 = *v24;
  if (!*((_BYTE *)*v24 + 160))
  {
    LOBYTE(v196) = 0;
    v197 = 0;
    v198[0] = 0;
    v200 = 0;
    v201 = 0;
    LOBYTE(v207) = 0;
    v208 = 0;
    v218 = 0;
    v219 = 0;
    v220 = 0;
    v221 = 0;
    v222 = 0;
    v223 = 0;
    v224 = 0;
    v225 = 0;
    v226 = 0;
    v227 = 0;
    v228 = 0;
    v229 = 0;
    v230 = 0;
    v231 = 1;
    if (*(_BYTE *)(v22 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v22 + 24));
      *(_BYTE *)(v22 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v22 + 24, (uint64_t)&v196);
    *(_BYTE *)(v22 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v196);
    v34 = v183;
    goto LABEL_154;
  }
  v166 = v25;
  *v25 = v24;
  AMSCore::ServiceProvider<AMSCore::IOpenURLProvider>::getDefault(v180);
  v29 = *v180;
  if (!*v180)
  {
    if (!*((_BYTE *)v28 + 160))
      goto LABEL_238;
    v35 = MEMORY[0x1E0DE4FE0];
    v36 = MEMORY[0x1E0DE4FE0] + 64;
    v37 = MEMORY[0x1E0DE4F60];
    v38 = *(void (***)(AMSCore::Error *__hidden))(MEMORY[0x1E0DE4F60] + 8);
    v39 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v251 = MEMORY[0x1E0DE4FE0] + 64;
    v244 = v38;
    *(_QWORD *)((char *)&v245[-1] + (_QWORD)*(v38 - 3)) = v39;
    v40 = (std::ios_base *)((char *)&v245[-1] + (_QWORD)*(v244 - 3));
    std::ios_base::init(v40, v245);
    v40[1].__vftable = 0;
    v40[1].__fmtflags_ = -1;
    v244 = (void (**)(AMSCore::Error *__hidden))(v35 + 24);
    v251 = v36;
    std::streambuf::basic_streambuf();
    v41 = MEMORY[0x1E0DE4FB8];
    v245[0] = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v249 = 0u;
    v250 = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v244, (uint64_t)"No IOpenURLProvider found, unable to handle a deep link. deepLink = ", 68);
    v34 = v183;
    AMSCore::operator<<(&v244, (uint64_t)v28);
    std::stringbuf::str[abi:fe180100]((uint64_t)v245, &__what_arg);
    v244 = *(void (***)(AMSCore::Error *__hidden))v37;
    *(_QWORD *)((char *)&v245[-1] + (_QWORD)*(v244 - 3)) = *(_QWORD *)(v37 + 24);
    v245[0] = v41 + 16;
    if (SBYTE7(v249) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](&v251);
    v260.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v260.__val_ = 6;
    std::system_error::system_error(&v184, v260, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    *((_QWORD *)&v185 + 1) = 0;
    v186 = 0;
    v184.__vftable = (std::system_error_vtbl *)off_1E2521330;
    *(_QWORD *)&v185 = (char *)&v185 + 8;
    v187 = 0;
    *(_QWORD *)&v188 = 0;
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v196, &v184);
    if (*(_BYTE *)(v22 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v22 + 24));
      *(_BYTE *)(v22 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v22 + 24, (uint64_t)&v196);
    *(_BYTE *)(v22 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v196);
    v184.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v42 = (std::__shared_weak_count *)v188;
    if ((_QWORD)v188)
    {
      v43 = (unint64_t *)(v188 + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v185, *((unsigned int **)&v185 + 1));
    MEMORY[0x18D7898AC](&v184);
    v45 = v166;
    v46 = *(std::__shared_weak_count **)(v22 + 1096);
    if (!v46)
      goto LABEL_151;
LABEL_147:
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v106 = __ldaxr(p_shared_owners);
    while (__stlxr(v106 - 1, p_shared_owners));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
LABEL_151:
    v107 = **v45;
    LOBYTE(v196) = 0;
    LOBYTE(v210) = 0;
    if (*((_BYTE *)v107 + 160))
    {
      AMSCore::URL::~URL(v107);
      *(_BYTE *)(v108 + 160) = 0;
      if ((_BYTE)v210)
        AMSCore::URL::~URL((AMSCore::URL *)&v196);
    }
LABEL_154:
    *(_QWORD *)(v22 + 840) = v181;
    *(_QWORD *)v22 = 0;
    AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v34);
    goto LABEL_155;
  }
  v30 = *v24;
  v31 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>((uint64_t)*v24 + 224, "kActionUserInfoKeyType");
  if ((uint64_t *)((char *)v30 + 232) != v31)
  {
    v32 = *((_DWORD *)v31 + 20);
    if (v32 == -1)
      v32 = 0;
    switch(v32)
    {
      case 1:
        v47 = 0;
        LOBYTE(v33) = *((_BYTE *)v31 + 56);
        goto LABEL_38;
      case 2:
        v33 = (unint64_t)*((double *)v31 + 7);
        goto LABEL_37;
      case 3:
      case 4:
        v33 = v31[7];
LABEL_37:
        v47 = v33 & 0xFFFFFF00;
LABEL_38:
        if ((v47 & 0xFFFFFF00 | (unint64_t)v33) != 2)
          break;
        if (!*((_BYTE *)v28 + 160))
          goto LABEL_238;
        AMSCore::URL::URL(v23, v28);
        v34 = v183;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 24))(v29, v23);
        v48 = *(_OWORD *)(v22 + 992);
        *(_OWORD *)(v22 + 1136) = v48;
        v170->__vftable = 0;
        v170->__imp_.__imp_ = 0;
        if (!atomic_load((unint64_t *)(v48 + 96)))
        {
          v167[120] = 0;
          v50 = (unint64_t *)(*(_QWORD *)(v22 + 1136) + 96);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v22, v50));
          if (!v51)
            goto LABEL_155;
        }
        v52 = *(_QWORD *)(v22 + 1136);
        if (!*(_BYTE *)(v52 + 88))
          goto LABEL_238;
        v53 = *(_BYTE *)(v52 + 80);
        if (!v53)
        {
          std::runtime_error::runtime_error((std::runtime_error *)v183, (const std::runtime_error *)(v52 + 8));
          *(_OWORD *)(v22 + 856) = *(_OWORD *)(v52 + 24);
          *(_QWORD *)(v22 + 840) = off_1E2521330;
          v54 = (_QWORD *)(v52 + 48);
          v55 = *(_QWORD *)(v52 + 48);
          *(_QWORD *)(v22 + 872) = *(_QWORD *)(v52 + 40);
          v56 = v22 + 880;
          *(_QWORD *)(v22 + 880) = v55;
          v57 = *(_QWORD *)(v52 + 56);
          *(_QWORD *)(v22 + 888) = v57;
          if (v57)
          {
            *(_QWORD *)(v55 + 16) = v56;
            *(_QWORD *)(v52 + 40) = v54;
            *v54 = 0;
            *(_QWORD *)(v52 + 56) = 0;
          }
          else
          {
            *(_QWORD *)(v22 + 872) = v56;
          }
          v94 = *(_QWORD *)(v22 + 1136);
          *(_OWORD *)(v22 + 896) = *(_OWORD *)(v94 + 64);
          *(_QWORD *)(v94 + 64) = 0;
          *(_QWORD *)(v94 + 72) = 0;
        }
        *(_BYTE *)(v22 + 912) = v53;
        v95 = *(_QWORD *)(v22 + 1144);
        if (v95)
        {
          v96 = (unint64_t *)(v95 + 8);
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            v98 = *(std::__shared_weak_count **)(v22 + 1144);
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        v99 = *(std::__shared_weak_count **)(v22 + 1000);
        if (v99)
        {
          v100 = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        AMSCore::URL::~URL((AMSCore::URL *)v23);
        v45 = v166;
        if (!*(_BYTE *)(v22 + 912))
        {
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v196);
          AMSCore::Logger::log<char [47],AMSCore::Error>(v196, (uint64_t)v183);
          v102 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
          if (*((_QWORD *)&v196 + 1))
          {
            v103 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
            do
              v104 = __ldaxr(v103);
            while (__stlxr(v104 - 1, v103));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
          }
          if (!*(_BYTE *)(v22 + 912))
            (*(void (**)(std::string *))v183->__r_.__value_.__l.__data_)(v183);
        }
        LOBYTE(v196) = 0;
        v197 = 0;
        v198[0] = 0;
        v200 = 0;
        v201 = 0;
        LOBYTE(v207) = 0;
        v208 = 0;
        v218 = 0;
        v219 = 0;
        v220 = 0;
        v221 = 0;
        v222 = 0;
        v223 = 0;
        v224 = 0;
        v225 = 0;
        v226 = 0;
        v227 = 0;
        v228 = 0;
        v229 = 0;
        v230 = 0;
        v231 = 1;
        if (*(_BYTE *)(v22 + 488))
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v22 + 24));
          *(_BYTE *)(v22 + 488) = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction(v22 + 24, (uint64_t)&v196);
        *(_BYTE *)(v22 + 488) = 1;
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v196);
        v46 = *(std::__shared_weak_count **)(v22 + 1096);
        if (v46)
          goto LABEL_147;
        goto LABEL_151;
      default:
        break;
    }
  }
  if (!*((_BYTE *)v28 + 160))
    goto LABEL_238;
  AMSCore::URL::URL(v183, v28);
  v58 = AMSCore::Any::BOOLean((uint64_t)*v24 + 224, "kActionUserInfoKeyCommerceUIURL", 0x1FuLL);
  v34 = v183;
  if (v58)
  {
    LOBYTE(v244) = 0;
    LOBYTE(__p) = 0;
    BYTE8(__p) = 0;
    LOBYTE(v250) = 0;
    v254 = 0;
    v255 = 0;
    v256 = 0;
    v257 = 0;
    v258[0] = v258;
    v258[1] = v258;
    v258[2] = 0;
    v259 = 0u;
    v251 = 0;
    v252 = 0;
    v253 = 1;
    v258[3] = 1886680168;
    HIBYTE(v259) = 4;
    *((_BYTE *)&__what_arg.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&__what_arg, "action");
    v242 = 7;
    strcpy((char *)v241, "account");
    AMSCore::URLBuilder::withQueryParameter((uint64_t)&v244, (uint64_t)&__what_arg, (uint64_t)v241);
    v240 = 4;
    strcpy((char *)v239, "dsid");
    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
    std::to_string(&v238, *(_QWORD *)(v59 + 32));
    AMSCore::URLBuilder::withQueryParameter((uint64_t)&v244, (uint64_t)v239, (uint64_t)&v238);
    v237 = 8;
    strcpy((char *)v236, "username");
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
    if (*(char *)(v60 + 63) < 0)
      std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)(v60 + 40), *(_QWORD *)(v60 + 48));
    else
      v235 = *(std::string *)(v60 + 40);
    AMSCore::URLBuilder::withQueryParameter((uint64_t)&v244, (uint64_t)v236, (uint64_t)&v235);
    v234 = 3;
    LODWORD(v233) = 7107189;
    AMSCore::URL::getStringRepresentation((AMSCore::URL *)v183, &v232);
    AMSCore::URLBuilder::withQueryParameter((uint64_t)&v244, (uint64_t)&v233, (uint64_t)&v232);
    std::__optional_move_base<AMSCore::Error,false>::__optional_move_base[abi:fe180100]((AMSCore::Error *)&v196, (uint64_t)&v244);
    AMSCore::URL::URL(&v204, (const AMSCore::URL *)((char *)&__p + 8));
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v232.__r_.__value_.__l.__data_);
      if ((v234 & 0x80000000) == 0)
      {
LABEL_55:
        if ((SHIBYTE(v235.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_56;
        goto LABEL_94;
      }
    }
    else if ((v234 & 0x80000000) == 0)
    {
      goto LABEL_55;
    }
    operator delete(v233);
    if ((SHIBYTE(v235.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_56:
      if ((v237 & 0x80000000) == 0)
        goto LABEL_57;
      goto LABEL_95;
    }
LABEL_94:
    operator delete(v235.__r_.__value_.__l.__data_);
    if ((v237 & 0x80000000) == 0)
    {
LABEL_57:
      if ((SHIBYTE(v238.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      goto LABEL_96;
    }
LABEL_95:
    operator delete(v236[0]);
    if ((SHIBYTE(v238.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_58:
      if ((v240 & 0x80000000) == 0)
        goto LABEL_59;
      goto LABEL_97;
    }
LABEL_96:
    operator delete(v238.__r_.__value_.__l.__data_);
    if ((v240 & 0x80000000) == 0)
    {
LABEL_59:
      if ((v242 & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_98;
    }
LABEL_97:
    operator delete(v239[0]);
    if ((v242 & 0x80000000) == 0)
    {
LABEL_60:
      if ((SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_61:
        AMSCore::URL::~URL((AMSCore::URL *)((char *)&__p + 8));
        if ((_BYTE)__p)
        {
          v244 = off_1E2521330;
          v61 = v247;
          if (v247)
          {
            v62 = (unint64_t *)&v247->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v246, v246[1]);
          MEMORY[0x18D7898AC](&v244);
        }
        LOBYTE(v184.__vftable) = 0;
        LOBYTE(v184.__ec_.__cat_) = 0;
        if (v205)
        {
          v184.std::runtime_error = *(std::runtime_error *)&v204.__r_.__value_.__l.__data_;
          *(_QWORD *)&v184.__ec_.__val_ = *((_QWORD *)&v204.__r_.__value_.__l + 2);
          memset(&v204, 0, sizeof(v204));
          LOBYTE(v184.__ec_.__cat_) = 1;
        }
        LOBYTE(v185) = 0;
        LOBYTE(v187) = 0;
        if (v208)
        {
          v185 = v206;
          v186 = v207;
          v207 = 0;
          v206 = 0uLL;
          LOBYTE(v187) = 1;
        }
        LOBYTE(v188) = 0;
        v190 = 0;
        if (v211)
        {
          v188 = v209;
          v189 = v210;
          v210 = 0;
          v209 = 0uLL;
          v190 = 1;
        }
        v191 = v212;
        v192[0] = v192;
        v192[1] = v192;
        v193 = 0;
        v64 = v215;
        if (v215)
        {
          v66 = v213;
          v65 = v214;
          v67 = *v214;
          *(_QWORD *)(v67 + 8) = *(_QWORD *)(v213 + 8);
          **(_QWORD **)(v66 + 8) = v67;
          v68 = v192[0];
          *(_QWORD *)(v192[0] + 8) = v65;
          *v65 = v68;
          v192[0] = v66;
          *(_QWORD *)(v66 + 8) = v192;
          v193 = v64;
          v215 = 0;
        }
        v194 = v216;
        v195 = v217;
        v217 = 0;
        v216 = 0uLL;
        AMSCore::URL::~URL((AMSCore::URL *)&v204);
        if (v203)
        {
          *(_QWORD *)&v196 = off_1E2521330;
          v69 = v202;
          if (v202)
          {
            v70 = (unint64_t *)&v202->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v198, v199);
          MEMORY[0x18D7898AC](&v196);
        }
        AMSCore::URL::operator=((uint64_t)v183, (__int128 *)&v184);
        AMSCore::URL::~URL((AMSCore::URL *)&v184);
        goto LABEL_84;
      }
LABEL_99:
      operator delete(__what_arg.__r_.__value_.__l.__data_);
      goto LABEL_61;
    }
LABEL_98:
    operator delete(v241[0]);
    if ((SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_99;
  }
LABEL_84:
  v72 = *v180;
  AMSCore::URL::URL(v169, (const AMSCore::URL *)v183);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v72 + 24))(v72, v169);
  v73 = *(_OWORD *)(v22 + 1104);
  *(_OWORD *)(v22 + 1152) = v73;
  *v168 = 0;
  v168[1] = 0;
  if (atomic_load((unint64_t *)(v73 + 96)))
    goto LABEL_88;
  v167[120] = 1;
  v75 = (unint64_t *)(*(_QWORD *)(v22 + 1152) + 96);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v22, v75));
  if (v76)
  {
LABEL_88:
    v77 = *(_QWORD *)(v22 + 1152);
    if (!*(_BYTE *)(v77 + 88))
      goto LABEL_238;
    v78 = *(_BYTE *)(v77 + 80);
    if (!v78)
    {
      std::runtime_error::runtime_error(v170, (const std::runtime_error *)(v77 + 8));
      *(_OWORD *)(v22 + 1008) = *(_OWORD *)(v77 + 24);
      *(_QWORD *)(v22 + 992) = off_1E2521330;
      v79 = (_QWORD *)(v77 + 48);
      v80 = *(_QWORD *)(v77 + 48);
      *(_QWORD *)(v22 + 1024) = *(_QWORD *)(v77 + 40);
      v81 = v22 + 1032;
      *(_QWORD *)(v22 + 1032) = v80;
      v82 = *(_QWORD *)(v77 + 56);
      *(_QWORD *)(v22 + 1040) = v82;
      if (v82)
      {
        *(_QWORD *)(v80 + 16) = v81;
        *(_QWORD *)(v77 + 40) = v79;
        *v79 = 0;
        *(_QWORD *)(v77 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v22 + 1024) = v81;
      }
      v83 = *(_QWORD *)(v22 + 1152);
      *(_OWORD *)v167 = *(_OWORD *)(v83 + 64);
      *(_QWORD *)(v83 + 64) = 0;
      *(_QWORD *)(v83 + 72) = 0;
    }
    *(_BYTE *)(v22 + 1064) = v78;
    v84 = *(_QWORD *)(v22 + 1160);
    v45 = v166;
    if (v84)
    {
      v85 = (unint64_t *)(v84 + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        v87 = *(std::__shared_weak_count **)(v22 + 1160);
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v88 = *(std::__shared_weak_count **)(v22 + 1112);
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    AMSCore::URL::~URL((AMSCore::URL *)v169);
    if (!*(_BYTE *)(v22 + 1064))
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v196);
      AMSCore::Logger::log<char [39],AMSCore::Error>(v196, 4, (uint64_t)"networking", 10, "Failed to open a finance URL. error = ", (uint64_t)v170);
      v91 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
      if (*((_QWORD *)&v196 + 1))
      {
        v92 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      if (!*(_BYTE *)(v22 + 1064))
        ((void (*)(std::runtime_error *))v170->~runtime_error)(v170);
    }
    LOBYTE(v196) = 0;
    v197 = 0;
    v198[0] = 0;
    v200 = 0;
    v201 = 0;
    LOBYTE(v207) = 0;
    v208 = 0;
    v218 = 0;
    v219 = 0;
    v220 = 0;
    v221 = 0;
    v222 = 0;
    v223 = 0;
    v224 = 0;
    v225 = 0;
    v226 = 0;
    v227 = 0;
    v228 = 0;
    v229 = 0;
    v230 = 0;
    v231 = 1;
    if (*(_BYTE *)(v22 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v22 + 24));
      *(_BYTE *)(v22 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v22 + 24, (uint64_t)&v196);
    *(_BYTE *)(v22 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v196);
    AMSCore::URL::~URL((AMSCore::URL *)v183);
    v46 = *(std::__shared_weak_count **)(v22 + 1096);
    if (!v46)
      goto LABEL_151;
    goto LABEL_147;
  }
LABEL_155:
  v109 = *(_OWORD *)v10;
  *(_OWORD *)(v10 + 224) = *(_OWORD *)v10;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  if (!atomic_load((unint64_t *)(v109 + 480)))
  {
    *v171 = 0;
    v111 = (unint64_t *)(*(_QWORD *)(v9 + 1224) + 480);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v9, v111));
    if (!v112)
      return;
  }
  v113 = *(_QWORD *)(v10 + 224);
  if (!*(_BYTE *)(v113 + 472))
    goto LABEL_238;
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v182, v113 + 8);
  v114 = *(_QWORD *)(v9 + 1232);
  if (v114)
  {
    v115 = (unint64_t *)(v114 + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      v117 = *(std::__shared_weak_count **)(v9 + 1232);
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v118 = *(std::__shared_weak_count **)(v9 + 1008);
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = *(std::__shared_weak_count **)(v9 + 1128);
  if (v121)
  {
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = *(std::__shared_weak_count **)(v9 + 1112);
  if (v124)
  {
    v125 = (unint64_t *)&v124->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  *(_QWORD *)(v9 + 1168) = *(_QWORD *)(v9 + 1136);
  v127 = *(_QWORD *)(v9 + 1144);
  *(_QWORD *)(v9 + 1176) = v127;
  if (v127)
  {
    v128 = (unint64_t *)(v127 + 8);
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
  }
  *(_OWORD *)(v9 + 1184) = *(_OWORD *)(v10 + 208);
  AMSCore::HandleDialogResultTask::perform(v179, v178, v177);
  v130 = *(_OWORD *)(v9 + 1152);
  *(_OWORD *)(v10 + 240) = v130;
  v179->__vftable = 0;
  v179->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v130 + 96)))
    goto LABEL_187;
  *v171 = 1;
  v132 = (unint64_t *)(*(_QWORD *)(v9 + 1240) + 96);
  do
    v133 = __ldaxr(v132);
  while (__stlxr(v9, v132));
  if (v133)
  {
LABEL_187:
    v134 = *(_QWORD *)(v10 + 240);
    if (*(_BYTE *)(v134 + 88))
    {
      v135 = *(_BYTE *)(v134 + 80);
      if (!v135)
      {
        std::runtime_error::runtime_error((std::runtime_error *)v10, (const std::runtime_error *)(v134 + 8));
        *(_OWORD *)(v9 + 1016) = *(_OWORD *)(v134 + 24);
        *(_QWORD *)(v9 + 1000) = off_1E2521330;
        v136 = (_QWORD *)(v134 + 48);
        v137 = *(_QWORD *)(v134 + 48);
        *(_QWORD *)(v9 + 1032) = *(_QWORD *)(v134 + 40);
        v138 = v9 + 1040;
        *(_QWORD *)(v9 + 1040) = v137;
        v139 = *(_QWORD *)(v134 + 56);
        *(_QWORD *)(v9 + 1048) = v139;
        if (v139)
        {
          *(_QWORD *)(v137 + 16) = v138;
          *(_QWORD *)(v134 + 40) = v136;
          *v136 = 0;
          *(_QWORD *)(v134 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v9 + 1032) = v138;
        }
        v140 = *(_QWORD *)(v9 + 1240);
        *(_OWORD *)(v9 + 1056) = *(_OWORD *)(v140 + 64);
        *(_QWORD *)(v140 + 64) = 0;
        *(_QWORD *)(v140 + 72) = 0;
      }
      *(_BYTE *)(v9 + 1072) = v135;
      v141 = *(_QWORD *)(v9 + 1248);
      if (v141)
      {
        v142 = (unint64_t *)(v141 + 8);
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          v144 = *(std::__shared_weak_count **)(v9 + 1248);
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
      v145 = *(std::__shared_weak_count **)(v9 + 1160);
      if (v145)
      {
        v146 = (unint64_t *)&v145->__shared_owners_;
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      v148 = *(std::__shared_weak_count **)(v9 + 1192);
      if (v148)
      {
        v149 = (unint64_t *)&v148->__shared_owners_;
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
      v151 = *(std::__shared_weak_count **)(v9 + 1176);
      if (!v151)
        goto LABEL_241;
      v152 = (unint64_t *)&v151->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
        if (!*(_BYTE *)(v9 + 1072))
        {
LABEL_213:
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v196);
          AMSCore::Logger::log<char [41],AMSCore::Error>(v196, 4, (uint64_t)"dialog", 6, "Failed to handle dialog result. error = ", v10);
          v154 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
          if (*((_QWORD *)&v196 + 1))
          {
            v155 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
            do
              v156 = __ldaxr(v155);
            while (__stlxr(v156 - 1, v155));
            if (!v156)
            {
              ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
              std::__shared_weak_count::__release_weak(v154);
            }
          }
          if (!*(_BYTE *)(v9 + 1072))
            (**(void (***)(uint64_t))v10)(v10);
        }
      }
      else
      {
LABEL_241:
        if (!*(_BYTE *)(v9 + 1072))
          goto LABEL_213;
      }
      v157 = *(_OWORD *)(v9 + 1136);
      *v172 = 0;
      v172[1] = 0;
      *(_BYTE *)(v9 + 1096) = 1;
      if (*(_BYTE *)(v9 + 584))
      {
        *v173 = 0;
        v173[1] = 0;
        v158 = *(std::__shared_weak_count **)(v9 + 576);
        *v174 = v157;
        if (v158)
        {
          v159 = (unint64_t *)&v158->__shared_owners_;
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
      }
      else
      {
        *v174 = v157;
        *v173 = 0;
        v173[1] = 0;
        *(_BYTE *)(v9 + 584) = 1;
      }
      if (*(_BYTE *)(v9 + 1096))
      {
        v161 = *(std::__shared_weak_count **)(v9 + 1088);
        if (v161)
        {
          v162 = (unint64_t *)&v161->__shared_owners_;
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
        }
      }
      v164 = (uint64_t)v175;
      if (*(_BYTE *)(v9 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v175);
        *(_BYTE *)(v9 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v164, (uint64_t)v182);
      *(_BYTE *)(v9 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v182);
      *(_QWORD *)(v9 + 536) = v176;
      *(_QWORD *)v9 = 0;
      AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v165);
      return;
    }
LABEL_238:
    __break(1u);
  }
}

void sub_18CC7F8A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AMSCore::URL ***a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,AMSCore::HTTPResponseAction *a25,AMSCore::URL *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a47);
  if (!*(_BYTE *)(v47 + 912))
    (**(void (***)(AMSCore::URL *))a26)(a26);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a23);
  _ZZN7AMSCore7finallyIZNS_12_GLOBAL__N_114handleDeepLinkENSt3__110shared_ptrINS_12DialogActionEEENS3_IKNS_13IMediaAccountEEEE3__0EEDaOT_EN7FinallyD1Ev(a9);
  __cxa_begin_catch(a1);
  std::terminate();
}

_BYTE *AMSCore::`anonymous namespace'::handle(_BYTE *result)
{
  unint64_t v1;
  _OWORD *v2;
  AMSCore::HTTPResponseAction *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;

  v1 = (unint64_t)result;
  v2 = result + 568;
  v3 = (AMSCore::HTTPResponseAction *)(result + 536);
  if (result[1256])
    goto LABEL_30;
  v4 = *((_QWORD *)result + 153);
  if (!*(_BYTE *)(v4 + 472))
    goto LABEL_82;
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(result + 536), v4 + 8);
  v5 = *(_QWORD *)(v1 + 1232);
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      v8 = *(std::__shared_weak_count **)(v1 + 1232);
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v9 = *(std::__shared_weak_count **)(v1 + 1008);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(std::__shared_weak_count **)(v1 + 1128);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(std::__shared_weak_count **)(v1 + 1112);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(v1 + 1168) = *(_QWORD *)(v1 + 1136);
  v18 = *(_QWORD *)(v1 + 1144);
  *(_QWORD *)(v1 + 1176) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_OWORD *)(v1 + 1184) = v2[40];
  result = AMSCore::HandleDialogResultTask::perform((std::runtime_error *)(v1 + 1152), v1 + 1168, (uint64_t *)(v1 + 1184));
  v21 = *(_OWORD *)(v1 + 1152);
  v2[42] = v21;
  *(_QWORD *)(v1 + 1152) = 0;
  *(_QWORD *)(v1 + 1160) = 0;
  if (atomic_load((unint64_t *)(v21 + 96)))
    goto LABEL_30;
  *(_BYTE *)(v1 + 1256) = 1;
  v23 = (unint64_t *)(*(_QWORD *)(v1 + 1240) + 96);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v1, v23));
  if (v24)
  {
LABEL_30:
    v25 = *(_QWORD *)(v1 + 1240);
    if (*(_BYTE *)(v25 + 88))
    {
      v26 = *(_BYTE *)(v25 + 80);
      if (!v26)
      {
        std::runtime_error::runtime_error((std::runtime_error *)(v1 + 1000), (const std::runtime_error *)(v25 + 8));
        *(_OWORD *)(v1 + 1016) = *(_OWORD *)(v25 + 24);
        *(_QWORD *)(v1 + 1000) = off_1E2521330;
        v27 = (_QWORD *)(v25 + 48);
        v28 = *(_QWORD *)(v25 + 48);
        *(_QWORD *)(v1 + 1032) = *(_QWORD *)(v25 + 40);
        v29 = v1 + 1040;
        *(_QWORD *)(v1 + 1040) = v28;
        v30 = *(_QWORD *)(v25 + 56);
        *(_QWORD *)(v1 + 1048) = v30;
        if (v30)
        {
          *(_QWORD *)(v28 + 16) = v29;
          *(_QWORD *)(v25 + 40) = v27;
          *v27 = 0;
          *(_QWORD *)(v25 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v1 + 1032) = v29;
        }
        v31 = *(_QWORD *)(v1 + 1240);
        *(_OWORD *)(v1 + 1056) = *(_OWORD *)(v31 + 64);
        *(_QWORD *)(v31 + 64) = 0;
        *(_QWORD *)(v31 + 72) = 0;
      }
      *(_BYTE *)(v1 + 1072) = v26;
      v32 = *(_QWORD *)(v1 + 1248);
      if (v32)
      {
        v33 = (unint64_t *)(v32 + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          v35 = *(std::__shared_weak_count **)(v1 + 1248);
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v36 = *(std::__shared_weak_count **)(v1 + 1160);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = *(std::__shared_weak_count **)(v1 + 1192);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)(v1 + 1176);
      if (!v42)
        goto LABEL_85;
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        if (*(_BYTE *)(v1 + 1072))
          goto LABEL_65;
      }
      else
      {
LABEL_85:
        if (*(_BYTE *)(v1 + 1072))
          goto LABEL_65;
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v57);
      AMSCore::Logger::log<char [41],AMSCore::Error>(v57, 4, (uint64_t)"dialog", 6, "Failed to handle dialog result. error = ", v1 + 1000);
      v45 = v58;
      if (v58)
      {
        v46 = (unint64_t *)&v58->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
          if (*(_BYTE *)(v1 + 1072))
            goto LABEL_65;
          goto LABEL_61;
        }
      }
      if (!*(_BYTE *)(v1 + 1072))
LABEL_61:
        (**(void (***)(uint64_t))(v1 + 1000))(v1 + 1000);
LABEL_65:
      v48 = (_QWORD *)(v1 + 1080);
      v49 = *(_OWORD *)(v1 + 1136);
      *(_QWORD *)(v1 + 1136) = 0;
      *(_QWORD *)(v1 + 1144) = 0;
      *(_BYTE *)(v1 + 1096) = 1;
      if (*(_BYTE *)(v1 + 584))
      {
        *v48 = 0;
        *(_QWORD *)(v1 + 1088) = 0;
        v50 = *(std::__shared_weak_count **)(v1 + 576);
        *v2 = v49;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      else
      {
        *v2 = v49;
        *v48 = 0;
        *(_QWORD *)(v1 + 1088) = 0;
        *(_BYTE *)(v1 + 584) = 1;
      }
      if (*(_BYTE *)(v1 + 1096))
      {
        v53 = *(std::__shared_weak_count **)(v1 + 1088);
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
      }
      if (*(_BYTE *)(v1 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
        *(_BYTE *)(v1 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v1 + 24, (uint64_t)v3);
      *(_BYTE *)(v1 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
      *(_QWORD *)(v1 + 536) = v1 + 16;
      *(_QWORD *)v1 = 0;
      return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v56);
    }
LABEL_82:
    __break(1u);
  }
  return result;
}

void sub_18CC80014(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AMSCore::HTTPResponseAction *v9;
  uint64_t v10;
  void (***v11)(_QWORD);

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(_BYTE *)(v10 + 1072))
    (**v11)(v11);
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v9);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::`anonymous namespace'::handle(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;

  if (!*__p)
  {
LABEL_24:
    v15 = 0;
    goto LABEL_46;
  }
  if (*((_BYTE *)__p + 1256))
  {
    v2 = __p[156];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[156];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[145];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[149];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[147];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 67));
    goto LABEL_24;
  }
  v16 = __p[154];
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = (std::__shared_weak_count *)__p[154];
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v20 = (std::__shared_weak_count *)__p[126];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)__p[141];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)__p[139];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v15 = (std::__shared_weak_count *)__p[152];
LABEL_46:
  v29 = (_QWORD *)__p[66];
  if (v29 == __p + 63)
  {
    v30 = 4;
    v29 = __p + 63;
  }
  else
  {
    if (!v29)
      goto LABEL_51;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_51:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  do
  {
    v31 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v32)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v15)
  {
    v33 = (unint64_t *)&v15->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v35 = __p[150];
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      v38 = (std::__shared_weak_count *)__p[150];
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v39 = (std::__shared_weak_count *)__p[143];
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(__p);
}

void sub_18CC80844(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void (***v10)(_QWORD);
  AMSCore::URL ***v11;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(_BYTE *)(v9 + 912))
    (**v10)(v10);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v9 + 1088);
  _ZZN7AMSCore7finallyIZNS_12_GLOBAL__N_114handleDeepLinkENSt3__110shared_ptrINS_12DialogActionEEENS3_IKNS_13IMediaAccountEEEE3__0EEDaOT_EN7FinallyD1Ev(v11);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::`anonymous namespace'::handleDeepLink(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  AMSCore::URL *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  AMSCore::URL *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;

  if (*__p)
  {
    if (*((_BYTE *)__p + 1168))
    {
      v2 = __p[145];
      if (v2)
      {
        v3 = (unint64_t *)(v2 + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 - 1, v3));
        if (!v4)
        {
          v5 = (std::__shared_weak_count *)__p[145];
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v6 = (AMSCore::URL *)(__p + 105);
      v7 = (std::__shared_weak_count *)__p[139];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      AMSCore::URL::~URL((AMSCore::URL *)(__p + 86));
    }
    else
    {
      v6 = (AMSCore::URL *)(__p + 67);
      v26 = __p[143];
      if (v26)
      {
        v27 = (unint64_t *)(v26 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          v29 = (std::__shared_weak_count *)__p[143];
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v30 = (std::__shared_weak_count *)__p[125];
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    AMSCore::URL::~URL(v6);
    v10 = (std::__shared_weak_count *)__p[137];
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = *(AMSCore::URL **)__p[140];
    if (*((_BYTE *)v13 + 160))
    {
      AMSCore::URL::~URL(v13);
      *(_BYTE *)(v14 + 160) = 0;
    }
  }
  v15 = (_QWORD *)__p[66];
  if (v15 == __p + 63)
  {
    v16 = 4;
    v15 = __p + 63;
  }
  else
  {
    if (!v15)
      goto LABEL_26;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_26:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v17 = __p[141];
  do
  {
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v19)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v17)
  {
    v20 = (unint64_t *)(__p[141] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      v22 = (std::__shared_weak_count *)__p[141];
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v23 = (std::__shared_weak_count *)__p[135];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [47],AMSCore::Error>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21[0] = MEMORY[0x1E0DE4FE0] + 64;
    v16 = v7;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
    std::ios_base::init(v9, v17);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v16 = v4 + 24;
    v21[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = 16;
    v11 = *(_QWORD *)(v16 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Failed to open an external deep link. error = ", 46);
    AMSCore::operator<<(&v16, a2);
    v13 = v17[5];
    v14 = (char *)&v17[-1] + *(_QWORD *)(v16 - 24);
    if ((v14[32] & 5) != 0)
    {
      v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 5) + 32))(&rep, *((_QWORD *)v14 + 5), 0, 1, 16);
      v15 = v26;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v23 = 4;
    v24 = v13;
    v25 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "networking", 10, &rep);
    v16 = *v6;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
    v17[0] = v10 + 16;
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v21);
  }
  return result;
}

void sub_18CC80D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

AMSCore::URL ***_ZZN7AMSCore7finallyIZNS_12_GLOBAL__N_114handleDeepLinkENSt3__110shared_ptrINS_12DialogActionEEENS3_IKNS_13IMediaAccountEEEE3__0EEDaOT_EN7FinallyD1Ev(AMSCore::URL ***a1)
{
  AMSCore::URL *v2;
  uint64_t v3;

  v2 = **a1;
  if (*((_BYTE *)v2 + 160))
  {
    AMSCore::URL::~URL(v2);
    *(_BYTE *)(v3 + 160) = 0;
  }
  return a1;
}

void ***std::__exception_guard_exceptions<std::vector<AMSCore::DialogAction>::__destroy_vector>::~__exception_guard_exceptions[abi:fe180100](void ***a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **a1;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 272;
          std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v4);
        }
        while ((void *)v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

_BYTE *std::vector<AMSCore::DialogAction>::__emplace_back_slow_path<AMSCore::DialogAction>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v2 = 0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0xF0F0F0F0F0F0F0)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  if (0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x78787878787878)
    v6 = 0xF0F0F0F0F0F0F0;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xF0F0F0F0F0F0F0)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v7 = (char *)operator new(272 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[272 * v2];
  *v8 = 0;
  v8[160] = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    std::construct_at[abi:fe180100]<AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink*>((uint64_t)&v7[272 * v2], (__int128 *)a2);
    v8[160] = 1;
  }
  v9 = &v7[272 * v2];
  *(_OWORD *)(v9 + 168) = *(_OWORD *)(a2 + 168);
  *((_QWORD *)v9 + 23) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *((_DWORD *)v9 + 48) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(v9 + 200) = *(_OWORD *)(a2 + 200);
  v10 = *(_QWORD *)(a2 + 224);
  *((_QWORD *)v9 + 27) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *((_QWORD *)v9 + 28) = v10;
  v11 = (char **)(v9 + 224);
  v13 = *(_QWORD *)(a2 + 232);
  v14 = *(_QWORD *)(a2 + 240);
  v12 = (_QWORD *)(a2 + 232);
  *((_QWORD *)v9 + 29) = v13;
  *((_QWORD *)v9 + 30) = v14;
  v15 = v9 + 232;
  if (v14)
  {
    *(_QWORD *)(v13 + 16) = v15;
    *(_QWORD *)(a2 + 224) = v12;
    *v12 = 0;
    *(_QWORD *)(a2 + 240) = 0;
  }
  else
  {
    *v11 = v15;
  }
  v16 = &v7[272 * v6];
  v17 = &v7[272 * v2];
  *(_OWORD *)(v17 + 248) = *(_OWORD *)(a2 + 248);
  *((_QWORD *)v17 + 33) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  v18 = v8 + 272;
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v8;
    a1[1] = v18;
    a1[2] = v16;
    if (!v19)
      return v18;
    goto LABEL_27;
  }
  v21 = 0;
  do
  {
    v25 = &v8[v21];
    v26 = &v8[v21 - 272];
    v27 = (__int128 *)&v19[v21];
    *v26 = 0;
    v8[v21 - 112] = 0;
    if (v19[v21 - 112])
    {
      std::construct_at[abi:fe180100]<AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink*>((uint64_t)v26, v27 - 17);
      *(v25 - 112) = 1;
    }
    v28 = *(__int128 *)((char *)v27 - 104);
    *((_QWORD *)v25 - 11) = *((_QWORD *)v27 - 11);
    *(_OWORD *)(v25 - 104) = v28;
    *((_QWORD *)v27 - 12) = 0;
    *((_QWORD *)v27 - 11) = 0;
    *((_QWORD *)v27 - 13) = 0;
    *((_DWORD *)v25 - 20) = *((_DWORD *)v27 - 20);
    v29 = *(__int128 *)((char *)v27 - 72);
    *((_QWORD *)v25 - 7) = *((_QWORD *)v27 - 7);
    *(_OWORD *)(v25 - 72) = v29;
    *((_QWORD *)v27 - 8) = 0;
    *((_QWORD *)v27 - 7) = 0;
    *((_QWORD *)v27 - 9) = 0;
    *((_QWORD *)v25 - 6) = *((_QWORD *)v27 - 6);
    v30 = (char *)v27 - 40;
    v31 = *((_QWORD *)v27 - 5);
    *((_QWORD *)v25 - 5) = v31;
    v32 = v25 - 40;
    v33 = *((_QWORD *)v27 - 4);
    *((_QWORD *)v25 - 4) = v33;
    if (v33)
    {
      *(_QWORD *)(v31 + 16) = v32;
      *((_QWORD *)v27 - 6) = v30;
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v27 - 4) = 0;
    }
    else
    {
      *((_QWORD *)v25 - 6) = v32;
    }
    v22 = &v8[v21];
    v23 = &v19[v21];
    v24 = *(_OWORD *)&v19[v21 - 24];
    *((_QWORD *)v22 - 1) = *(_QWORD *)&v19[v21 - 8];
    *(_OWORD *)(v22 - 24) = v24;
    *((_QWORD *)v23 - 2) = 0;
    *((_QWORD *)v23 - 1) = 0;
    *((_QWORD *)v23 - 3) = 0;
    v21 -= 272;
  }
  while (&v19[v21] != v20);
  v34 = &v8[v21];
  v19 = (char *)*a1;
  v35 = (uint64_t)a1[1];
  *a1 = v34;
  a1[1] = v18;
  a1[2] = v16;
  while ((char *)v35 != v19)
  {
    v35 -= 272;
    std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v35);
  }
  if (v19)
LABEL_27:
    operator delete(v19);
  return v18;
}

uint64_t AMSCore::FinanceResponse::getAuthenticateRequestTypeForResponse(AMSCore::FinanceResponse *this, const AMSCore::HTTPResponse *a2)
{
  std::string *v3;
  std::string::size_type size;
  void *v5;
  std::string::size_type v6;
  _BOOL4 v7;
  _QWORD *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  const void *v20;
  unint64_t v21;
  size_t v22;
  int v23;
  int v24;
  const void *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  void *__p;
  __int128 v32;
  std::string v33;
  char v34;
  std::string v35;

  __p = operator new(0x20uLL);
  v32 = xmmword_18CF51B50;
  strcpy((char *)__p, "X-Apple-Allow-Auth-Types");
  AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v33, (_QWORD *)this + 20, (char *)&__p);
  if (v34)
  {
    v35 = v33;
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  *((_BYTE *)&v35.__r_.__value_.__s + 23) = 0;
  v35.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v32) < 0)
LABEL_3:
    operator delete(__p);
LABEL_4:
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v35;
  else
    v3 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    size = v35.__r_.__value_.__l.__size_;
  AMSCore::StringUtils::split(&v33.__r_.__value_.__l.__data_, (uint64_t)v3, size, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  v5 = (void *)v33.__r_.__value_.__r.__words[0];
  if (v33.__r_.__value_.__r.__words[0] == v33.__r_.__value_.__l.__size_)
  {
    v7 = 0;
    v8 = (_QWORD *)v33.__r_.__value_.__r.__words[0];
  }
  else
  {
    v6 = v33.__r_.__value_.__r.__words[0];
    while (*(_QWORD *)(v6 + 8) != 4 || **(_DWORD **)v6 != 1685417836)
    {
      v6 += 16;
      if (v6 == v33.__r_.__value_.__l.__size_)
      {
        v6 = v33.__r_.__value_.__l.__size_;
        break;
      }
    }
    v7 = v6 != v33.__r_.__value_.__l.__size_;
    v8 = (_QWORD *)v33.__r_.__value_.__r.__words[0];
    while (v8[1] != 6 || *(_DWORD *)*v8 != 1701603699 || *(_WORD *)(*v8 + 4) != 29806)
    {
      v8 += 2;
      if (v8 == (_QWORD *)v33.__r_.__value_.__l.__size_)
      {
        v8 = (_QWORD *)v33.__r_.__value_.__l.__size_;
        break;
      }
    }
  }
  if (*((_WORD *)this + 76) == 401)
  {
    v10 = 1;
    if (v8 == (_QWORD *)v33.__r_.__value_.__l.__size_)
    {
      v10 = 2;
      v11 = v7;
    }
    else
    {
      v11 = 1;
    }
    if (v11)
      v12 = 0x100000000;
    else
      v12 = 0;
    if (v7)
      v13 = v10;
    else
      v13 = 0;
    if (!v33.__r_.__value_.__r.__words[0])
      goto LABEL_42;
    goto LABEL_41;
  }
  if (v8 != (_QWORD *)v33.__r_.__value_.__l.__size_)
  {
    v13 = 0;
    v12 = 0x100000000;
    if (!v33.__r_.__value_.__r.__words[0])
      goto LABEL_42;
LABEL_41:
    operator delete(v5);
    goto LABEL_42;
  }
  AMSCore::HTTPResponse::getDecodedObject(this);
  if (*(_BYTE *)(v15 + 72))
  {
    v16 = (uint64_t *)(v15 + 8);
    v17 = *(uint64_t **)(v15 + 8);
    if (!v17)
      goto LABEL_80;
    v18 = (uint64_t *)(v15 + 8);
    while (1)
    {
      v19 = *((char *)v17 + 55);
      if (v19 >= 0)
        v20 = v17 + 4;
      else
        v20 = (const void *)v17[4];
      if (v19 >= 0)
        v21 = *((unsigned __int8 *)v17 + 55);
      else
        v21 = v17[5];
      if (v21 >= 0xB)
        v22 = 11;
      else
        v22 = v21;
      v23 = memcmp("failureType", v20, v22);
      if (v23)
      {
        if (v23 < 0)
          goto LABEL_65;
LABEL_51:
        v17 = (uint64_t *)v17[1];
        if (!v17)
          goto LABEL_66;
      }
      else
      {
        if (v21 < 0xB)
          goto LABEL_51;
LABEL_65:
        v18 = v17;
        v17 = (uint64_t *)*v17;
        if (!v17)
        {
LABEL_66:
          if (v18 == v16)
            goto LABEL_80;
          v24 = *((char *)v18 + 55);
          if (v24 >= 0)
            v25 = v18 + 4;
          else
            v25 = (const void *)v18[4];
          if (v24 >= 0)
            v26 = *((unsigned __int8 *)v18 + 55);
          else
            v26 = v18[5];
          if (v26 >= 0xB)
            v27 = 11;
          else
            v27 = v26;
          v28 = memcmp("failureType", v25, v27);
          if (v28)
          {
            if ((v28 & 0x80000000) == 0)
              goto LABEL_78;
LABEL_80:
            v29 = &AMSCore::Any::Null(void)::null;
          }
          else
          {
            if (v26 > 0xB)
              goto LABEL_80;
LABEL_78:
            v29 = v18 + 7;
          }
          LODWORD(v30) = *((_DWORD *)v29 + 6);
          if ((_DWORD)v30 == -1)
            v30 = 0;
          else
            v30 = v30;
          __asm { BR              X11 }
        }
      }
    }
  }
  v12 = 0x100000000;
  v13 = 2;
  if (v5)
    goto LABEL_41;
LABEL_42:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  return v13 | v12;
}

uint64_t *std::unique_ptr<AMSCore::CreditDisplayUpdateAction>::~unique_ptr[abi:fe180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    MEMORY[0x18D789BDC](v2, 0x1093C402D7449D9);
  }
  return a1;
}

__n128 std::__optional_storage_base<AMSCore::Error,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::Error,false>>(std::runtime_error *this, std::runtime_error *a2)
{
  unsigned int *imp;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v6;
  const char *v7;
  std::runtime_error_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __n128 result;
  std::runtime_error_vtbl *v13;
  const char *v14;
  std::runtime_error_vtbl *v15;
  std::runtime_error_vtbl *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (LOBYTE(this[4].__imp_.__imp_) == LOBYTE(a2[4].__imp_.__imp_))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      std::runtime_error::operator=(this, a2);
      p_imp = (std::runtime_error_vtbl *)&this[2].__imp_;
      imp = (unsigned int *)this[2].__imp_.__imp_;
      this[1] = a2[1];
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&this[2], imp);
      this[2].__vftable = a2[2].__vftable;
      v6 = (std::runtime_error_vtbl *)&a2[2].__imp_;
      v7 = a2[2].__imp_.__imp_;
      this[2].__imp_.__imp_ = v7;
      v8 = a2[3].__vftable;
      this[3].__vftable = v8;
      if (v8)
      {
        *((_QWORD *)v7 + 2) = p_imp;
        a2[2].__vftable = v6;
        v6->~runtime_error = 0;
        a2[3].__vftable = 0;
      }
      else
      {
        this[2].__vftable = p_imp;
      }
      result = *(__n128 *)&a2[3].__imp_.__imp_;
      a2[3].__imp_.__imp_ = 0;
      a2[4].__vftable = 0;
      v17 = (std::__shared_weak_count *)this[4].__vftable;
      *(__n128 *)((char *)this + 56) = result;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  else if (LOBYTE(this[4].__imp_.__imp_))
  {
    this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v9 = (std::__shared_weak_count *)this[4].__vftable;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&this[2], (unsigned int *)this[2].__imp_.__imp_);
    MEMORY[0x18D7898AC](this);
    LOBYTE(this[4].__imp_.__imp_) = 0;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    this[2].__vftable = a2[2].__vftable;
    v13 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v14 = a2[2].__imp_.__imp_;
    this[2].__imp_.__imp_ = v14;
    v15 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v16 = a2[3].__vftable;
    this[3].__vftable = v16;
    if (v16)
    {
      *((_QWORD *)v14 + 2) = v15;
      a2[2].__vftable = v13;
      v13->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v15;
    }
    result = *(__n128 *)&a2[3].__imp_.__imp_;
    *(__n128 *)((char *)this + 56) = result;
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  return result;
}

unint64_t AMSCore::`anonymous namespace'::getProtocolValue<std::map<std::string,AMSCore::Any>>(uint64_t a1, const void **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t *v9;

  v4 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>(a1, "protocol");
  if ((uint64_t *)(a1 + 8) == v4
    || (v5 = v4, *((_DWORD *)v4 + 20) != 8)
    || (v6 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)(v4 + 7), a2), v5 + 8 == v6)|| *((_DWORD *)v6 + 20) != 8)
  {
    v9 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1, a2);
    if ((uint64_t *)(a1 + 8) == v9)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v7 = (_BYTE)v9 + 56;
      v8 = (unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFF00;
      if (*((_DWORD *)v9 + 20) != 8)
      {
        v7 = 0;
        v8 = 0;
      }
    }
  }
  else
  {
    v7 = (_BYTE)v6 + 56;
    v8 = (unint64_t)(v6 + 7) & 0xFFFFFFFFFFFFFF00;
  }
  return v8 | v7;
}

void AMSCore::getValueByKey<std::map<std::string,AMSCore::Any>,std::map<std::string,AMSCore::Any> const>(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::runtime_error v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  std::runtime_error v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35[2];
  std::runtime_error v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  v35[0] = (uint64_t)a3;
  v35[1] = a4;
  AMSCore::getValueByKey((uint64_t)&v28, a2, a3, a4);
  if (v34)
  {
    if (LODWORD(v28.__vftable[1].~runtime_error) == 8)
    {
      *(_QWORD *)a1 = v28.__vftable;
      *(_BYTE *)(a1 + 72) = 1;
      goto LABEL_28;
    }
    LOBYTE(v36.__vftable) = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v21, 0xCu, "unable to find value with key \"", v35, &v36);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v21);
    *(_OWORD *)(a1 + 16) = v22;
    *(_QWORD *)a1 = off_1E2521330;
    v5 = v24;
    *(_QWORD *)(a1 + 32) = v23;
    *(_QWORD *)(a1 + 40) = v5;
    v6 = a1 + 40;
    v7 = v25;
    *(_QWORD *)(a1 + 48) = v25;
    if (v7)
    {
      *(_QWORD *)(v5 + 16) = v6;
      v23 = &v24;
      v24 = 0;
      v25 = 0;
      v5 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v6;
    }
    *(_OWORD *)(a1 + 56) = v26;
    v26 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    goto LABEL_27;
  }
  std::runtime_error::runtime_error(&v21, &v28);
  v22 = v29;
  v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v23 = v30;
  v24 = v31;
  v25 = v32;
  if (v32)
  {
    *(_QWORD *)(v31 + 16) = &v24;
    v30 = &v31;
    v31 = 0;
    v32 = 0;
  }
  else
  {
    v23 = &v24;
  }
  v26 = v33;
  v33 = 0uLL;
  v27 = 1;
  std::runtime_error::runtime_error(&v36, &v21);
  v37 = v22;
  v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v38 = v23;
  v39 = v24;
  v40 = v25;
  if (v25)
  {
    *(_QWORD *)(v24 + 16) = &v39;
    v23 = &v24;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v38 = &v39;
  }
  v41 = v26;
  v26 = 0uLL;
  std::runtime_error::runtime_error(&v15, &v36);
  v16 = v37;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v8 = (unsigned int *)v39;
  v17 = v38;
  v18 = v39;
  v19 = v40;
  if (v40)
  {
    *(_QWORD *)(v39 + 16) = &v18;
    v8 = 0;
    v38 = &v39;
    v39 = 0;
    v40 = 0;
  }
  else
  {
    v17 = &v18;
  }
  v20 = v41;
  v41 = 0uLL;
  v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, v8);
  MEMORY[0x18D7898AC](&v36);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v15);
  *(_OWORD *)(a1 + 16) = v16;
  *(_QWORD *)a1 = off_1E2521330;
  v9 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a1 + 40;
  v11 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    v9 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v10;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  *(_BYTE *)(a1 + 72) = 0;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v9);
  MEMORY[0x18D7898AC](&v15);
  if (v27)
  {
    v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v5 = v24;
LABEL_27:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v5);
    MEMORY[0x18D7898AC](&v21);
  }
LABEL_28:
  if (!v34)
    ((void (*)(std::runtime_error *))v28.~runtime_error)(&v28);
}

void sub_18CC81AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void (**a29)(_QWORD),uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (!a38)
    (*a29)(&a29);
  _Unwind_Resume(exception_object);
}

std::runtime_error *std::expected<std::reference_wrapper<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::operator=[abi:fe180100](std::runtime_error *this, std::runtime_error *a2)
{
  std::runtime_error_vtbl *p_imp;
  const char *imp;
  std::runtime_error_vtbl *v6;
  std::runtime_error_vtbl *v7;
  unsigned int *v8;
  std::runtime_error_vtbl *v9;
  std::runtime_error_vtbl *v10;
  const char *v11;
  std::runtime_error_vtbl *v12;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (LOBYTE(this[4].__imp_.__imp_))
  {
    if (LOBYTE(a2[4].__imp_.__imp_))
    {
      this->__vftable = a2->__vftable;
    }
    else
    {
      std::runtime_error::runtime_error(this, a2);
      this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
      this[1] = a2[1];
      this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      this[2].__vftable = a2[2].__vftable;
      p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
      imp = a2[2].__imp_.__imp_;
      this[2].__imp_.__imp_ = imp;
      v6 = (std::runtime_error_vtbl *)&this[2].__imp_;
      v7 = a2[3].__vftable;
      this[3].__vftable = v7;
      if (v7)
      {
        *((_QWORD *)imp + 2) = v6;
        a2[2].__vftable = p_imp;
        p_imp->~runtime_error = 0;
        a2[3].__vftable = 0;
      }
      else
      {
        this[2].__vftable = v6;
      }
      *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
      a2[3].__imp_.__imp_ = 0;
      a2[4].__vftable = 0;
      LOBYTE(this[4].__imp_.__imp_) = 0;
    }
  }
  else if (LOBYTE(a2[4].__imp_.__imp_))
  {
    ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    this->__vftable = a2->__vftable;
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  else
  {
    std::runtime_error::operator=(this, a2);
    v9 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v8 = (unsigned int *)this[2].__imp_.__imp_;
    this[1] = a2[1];
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&this[2], v8);
    this[2].__vftable = a2[2].__vftable;
    v10 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v11 = a2[2].__imp_.__imp_;
    this[2].__imp_.__imp_ = v11;
    v12 = a2[3].__vftable;
    this[3].__vftable = v12;
    if (v12)
    {
      *((_QWORD *)v11 + 2) = v9;
      a2[2].__vftable = v10;
      v10->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v9;
    }
    v14 = *(_OWORD *)&a2[3].__imp_.__imp_;
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
    v15 = (std::__shared_weak_count *)this[4].__vftable;
    *(_OWORD *)&this[3].__imp_.__imp_ = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  return this;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[28]>(uint64_t a1, unsigned int a2, const char *a3)
{
  std::system_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::system_error_vtbl *v9;
  std::system_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string v18;
  std::system_error v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  void *__p[2];
  __int128 v25;
  int v26;
  uint64_t v27[19];
  std::error_code v28;

  v6 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = MEMORY[0x1E0DE4F60];
  v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v27[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19.__vftable = v9;
  *(std::system_error_vtbl **)((char *)&v19.__vftable + (unint64_t)v9[-1].~system_error) = v10;
  v11 = (std::ios_base *)((char *)&v19 + (unint64_t)v19.__vftable[-1].~system_error);
  std::ios_base::init(v11, &v19.__imp_);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v19.__vftable = v6 + 1;
  v27[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v19.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  v26 = 16;
  v13 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)a3, v13);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v19.__imp_, &v18);
  v19.__vftable = *(std::system_error_vtbl **)v8;
  *(std::system_error_vtbl **)((char *)&v19.__vftable + (unint64_t)v19.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v8 + 24);
  v19.__imp_.__imp_ = (const char *)(v12 + 16);
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v27);
  *(_QWORD *)&v28.__val_ = a2;
  v28.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v19, v28, &v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v21 = 0;
  v22 = 0;
  v19.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v20 = &v21;
  v23 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v19);
  *(std::error_code *)(a1 + 16) = v19.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v14 = v21;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v14;
  v15 = a1 + 40;
  v16 = v22;
  *(_QWORD *)(a1 + 48) = v22;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    v14 = 0;
    v20 = &v21;
    v21 = 0;
    v22 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v15;
  }
  *(_OWORD *)(a1 + 56) = v23;
  v23 = 0uLL;
  v19.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, (unsigned int *)v14);
  return MEMORY[0x18D7898AC](&v19);
}

void sub_18CC81EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC81ED4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::FinanceResponse::~FinanceResponse(AMSCore::FinanceResponse *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*((_BYTE *)this + 96))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*((_BYTE *)this + 96))
      goto LABEL_12;
  }
  *((_QWORD *)this + 3) = off_1E2521330;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 56, *((unsigned int **)this + 8));
  MEMORY[0x18D7898AC]((char *)this + 24);
LABEL_12:
  v8 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 1);
    v10 = *(void **)this;
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      while (v9 != v8);
      v10 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v8;
    operator delete(v10);
  }
}

void std::__shared_ptr_emplace<AMSCore::FinanceResponse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::FinanceResponse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::FinanceResponse>::__on_zero_shared(uint64_t a1)
{
  AMSCore::FinanceResponse::~FinanceResponse((AMSCore::FinanceResponse *)(a1 + 24));
}

void AMSCore::FinanceRequestHandler::~FinanceRequestHandler(AMSCore::FinanceRequestHandler *this)
{
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::FinanceRequestHandler::handleCompletion(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, std::runtime_error *a5@<X8>)
{
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  AMSCore::HTTPResponse *v18;
  AMSCore::FinanceResponse *v19;
  const AMSCore::HTTPResponse *v20;
  uint64_t v21;
  unint64_t AuthenticateRequestTypeForResponse;
  _BOOL4 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  const void *v40;
  unint64_t v41;
  size_t v42;
  int v43;
  int v44;
  const void *v45;
  unint64_t v46;
  size_t v47;
  int v48;
  uint64_t *v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  const void *v54;
  unint64_t v55;
  size_t v56;
  int v57;
  const AMSCore::HTTPResponse *v58;
  int v59;
  const void *v60;
  unint64_t v61;
  size_t v62;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t *v70;
  int v71;
  const void *v72;
  unint64_t v73;
  size_t v74;
  int v75;
  int v76;
  const void *v77;
  unint64_t v78;
  size_t v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  const void *v90;
  unint64_t v91;
  size_t v92;
  int v93;
  int v94;
  const void *v95;
  unint64_t v96;
  size_t v97;
  int v98;
  _BOOL4 v99;
  uint64_t *v100;
  _BOOL4 v101;
  int v102;
  std::__shared_weak_count *imp;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  const char *v110;
  std::runtime_error_vtbl *v111;
  int64_t v112;
  int64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  std::runtime_error v132;
  char *v133;
  const char *v134;
  std::runtime_error_vtbl *v135;
  int64_t v136;
  int64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  std::runtime_error_vtbl *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  const void *v155;
  unint64_t v156;
  size_t v157;
  int v158;
  int v159;
  const void *v160;
  unint64_t v161;
  size_t v162;
  int v163;
  uint64_t *v164;
  uint64_t v165;
  __n128 v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t *v173;
  char v174;
  uint64_t *v175;
  std::system_error_vtbl *v176;
  BOOL v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  __int128 v183;
  unint64_t *v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  uint64_t v188;
  AMSCore::HTTPResponseAction *v189;
  __int128 *v190;
  char *v191;
  char *v192;
  char *v193;
  _QWORD *v194;
  unsigned int v195;
  AMSCore::HTTPResponse *v196;
  std::__shared_weak_count *v197;
  unint64_t *p_shared_owners;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::runtime_error_vtbl *v204;
  uint64_t v205;
  std::system_error_vtbl *v206;
  void *v207;
  uint64_t v208;
  std::system_error_vtbl *v209;
  std::system_error_vtbl *v210;
  std::ios_base *v211;
  uint64_t v212;
  void (__cdecl *v213)(std::system_error *__hidden);
  unsigned __int8 v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  __int128 v233;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  __int128 v260;
  __n128 v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  int v268;
  __int128 v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t *v273;
  char v274;
  uint64_t *v275;
  uint64_t v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unsigned int *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  AMSCore::HTTPResponseAction *v291;
  unint64_t v292;
  char *v293;
  AMSCore::HTTPResponseAction *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::string::size_type v305;
  std::system_error_vtbl *v306;
  void *v307;
  uint64_t v308;
  std::system_error_vtbl *v309;
  std::system_error_vtbl *v310;
  std::ios_base *v311;
  uint64_t v312;
  void (__cdecl *v313)(std::system_error *__hidden);
  unsigned __int8 v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  std::string::size_type v318;
  std::system_error_vtbl *v319;
  void *v320;
  uint64_t v321;
  std::system_error_vtbl *v322;
  std::system_error_vtbl *v323;
  std::ios_base *v324;
  uint64_t v325;
  void (__cdecl *v326)(std::system_error *__hidden);
  unsigned __int8 v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  std::system_error_vtbl *v331;
  void *v332;
  uint64_t v333;
  std::system_error_vtbl *v334;
  std::system_error_vtbl *v335;
  std::ios_base *v336;
  uint64_t v337;
  unsigned int *v338;
  unsigned int *v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  uint64_t v354;
  unsigned int *v355;
  std::__shared_weak_count *size;
  unint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  _BYTE *v360;
  __int128 v361;
  unint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  uint64_t v385;
  const char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  const char *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t *v393;
  AMSCore::URL *v394;
  _BOOL4 v395;
  _QWORD *v396;
  uint64_t v397;
  _OWORD *v398;
  __n128 *v399;
  __int128 *v400;
  char *v401;
  char *v402;
  char *v403;
  uint64_t v404;
  char *v405;
  uint64_t v406;
  unint64_t v407;
  char *v408;
  AMSCore::HTTPResponseAction *v409;
  AMSCore::HTTPResponseAction *v410;
  AMSCore::HTTPResponseAction *v411;
  AMSCore::HTTPResponseAction *v412;
  char *v413;
  __int128 v414;
  uint64_t v415;
  std::runtime_error *v416;
  AMSCore::HTTPResponseAction *v417[2];
  uint64_t v418;
  AMSCore::HTTPResponseAction *v419;
  AMSCore::FinanceResponse *v420[2];
  std::runtime_error v421;
  std::error_code v422;
  __int128 v423;
  uint64_t v424;
  __int128 v425;
  std::string __what_arg;
  char v427;
  std::string v428;
  std::system_error v429;
  __int128 v430;
  uint64_t v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  int v435;
  void *__p[2];
  char v437;
  uint64_t v438;
  char v439;
  char v440;
  char v441;
  char v442;
  char v443;
  char v444;
  char v445;
  char v446;
  char v447;
  char v448;
  char v449;
  char v450;
  char v451;
  int v452;
  std::runtime_error v453;
  std::error_code ec;
  _BYTE v455[24];
  _BYTE v456[24];
  __int128 v457;
  int v458;
  __int128 v459;
  uint64_t v460;
  __int128 v461;
  uint64_t v462;
  char v463;
  std::runtime_error v464;
  std::error_code v465;
  __int128 v466;
  uint64_t v467;
  __int128 v468;
  char v469;
  uint64_t v470;
  uint64_t v471;
  std::error_code v472;

  v471 = *MEMORY[0x1E0C80C00];
  v10 = (char *)operator new(0x4B0uLL);
  v11 = v10;
  v12 = (uint64_t)(v10 + 1000);
  *(_QWORD *)v10 = AMSCore::FinanceRequestHandler::handleCompletion;
  *((_QWORD *)v10 + 1) = AMSCore::FinanceRequestHandler::handleCompletion;
  v410 = (AMSCore::HTTPResponseAction *)(v10 + 536);
  v413 = v10 + 1080;
  v416 = (std::runtime_error *)(v10 + 1096);
  v402 = v10 + 1128;
  v403 = v10 + 1112;
  v401 = v10 + 1144;
  *(_OWORD *)v417 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *a3;
  v14 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v404 = *a4;
  v406 = v13;
  v411 = (AMSCore::HTTPResponseAction *)a4[1];
  *a4 = 0;
  a4[1] = 0;
  do
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v15 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v10[24] = 0;
  v10[488] = 0;
  *((_QWORD *)v10 + 62) = 0;
  v408 = v10 + 16;
  v409 = (AMSCore::HTTPResponseAction *)(v10 + 24);
  *((_QWORD *)v10 + 66) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v429, (uint64_t)(v10 + 16));
  *a5 = v429.std::runtime_error;
  *(_OWORD *)v413 = *(_OWORD *)v417;
  v415 = v12;
  if (!v417[0])
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[28]>((uint64_t)&v429, 3u, "The HTTP response was null.");
    std::runtime_error::runtime_error((std::runtime_error *)v12, &v429);
    *(std::error_code *)(v11 + 1016) = v429.__ec_;
    *((_QWORD *)v11 + 125) = off_1E2521330;
    v24 = *((_QWORD *)&v430 + 1);
    *((_QWORD *)v11 + 129) = v430;
    v25 = v11 + 1040;
    *((_QWORD *)v11 + 130) = v24;
    v26 = v431;
    *((_QWORD *)v11 + 131) = v431;
    if (v26)
    {
      *(_QWORD *)(v24 + 16) = v25;
      *(_QWORD *)&v430 = (char *)&v430 + 8;
      *((_QWORD *)&v430 + 1) = 0;
      v431 = 0;
      v24 = 0;
    }
    else
    {
      *((_QWORD *)v11 + 129) = v25;
    }
    *((_OWORD *)v11 + 66) = v432;
    v432 = 0uLL;
    v11[1072] = 0;
    v429.__vftable = (std::system_error_vtbl *)off_1E2521330;
    goto LABEL_31;
  }
  v16 = *(_QWORD *)(a1 + 8);
  AMSCore::HTTPResponse::getDecodedObject(v417[0]);
  if (!*(_BYTE *)(v17 + 72))
  {
    AMSCore::Error::Error(&v429, (const std::runtime_error *)v17);
    LOBYTE(v433) = 1;
    std::runtime_error::runtime_error(&v453, &v429);
    ec = v429.__ec_;
    v453.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    *(_OWORD *)v455 = v430;
    *(_QWORD *)&v455[16] = v431;
    if (v431)
    {
      *(_QWORD *)(*((_QWORD *)&v430 + 1) + 16) = &v455[8];
      *(_QWORD *)&v430 = (char *)&v430 + 8;
      *((_QWORD *)&v430 + 1) = 0;
      v431 = 0;
    }
    else
    {
      *(_QWORD *)v455 = &v455[8];
    }
    *(_OWORD *)v456 = v432;
    v432 = 0uLL;
    std::runtime_error::runtime_error(&v464, &v453);
    v465 = ec;
    v464.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = *(unsigned int **)&v455[8];
    v466 = *(_OWORD *)v455;
    v467 = *(_QWORD *)&v455[16];
    if (*(_QWORD *)&v455[16])
    {
      *(_QWORD *)(*(_QWORD *)&v455[8] + 16) = (char *)&v466 + 8;
      v27 = 0;
      *(_QWORD *)v455 = &v455[8];
      *(_QWORD *)&v455[8] = 0;
      *(_QWORD *)&v455[16] = 0;
    }
    else
    {
      *(_QWORD *)&v466 = (char *)&v466 + 8;
    }
    v468 = *(_OWORD *)v456;
    *(_QWORD *)v456 = 0;
    *(_QWORD *)&v456[8] = 0;
    v453.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v455, v27);
    MEMORY[0x18D7898AC](&v453);
    std::runtime_error::runtime_error((std::runtime_error *)v12, &v464);
    *(std::error_code *)(v11 + 1016) = v465;
    *((_QWORD *)v11 + 125) = off_1E2521330;
    v28 = *((_QWORD *)&v466 + 1);
    *((_QWORD *)v11 + 129) = v466;
    v29 = v11 + 1040;
    *((_QWORD *)v11 + 130) = v28;
    v30 = v467;
    *((_QWORD *)v11 + 131) = v467;
    if (v30)
    {
      *(_QWORD *)(v28 + 16) = v29;
      v28 = 0;
      *(_QWORD *)&v466 = (char *)&v466 + 8;
      *((_QWORD *)&v466 + 1) = 0;
      v467 = 0;
    }
    else
    {
      *((_QWORD *)v11 + 129) = v29;
    }
    *((_OWORD *)v11 + 66) = v468;
    v468 = 0uLL;
    v11[1072] = 0;
    v464.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v466, (unsigned int *)v28);
    MEMORY[0x18D7898AC](&v464);
    if (!(_BYTE)v433)
    {
LABEL_32:
      v34 = (std::__shared_weak_count *)*((_QWORD *)v11 + 136);
      if (v34)
        goto LABEL_316;
LABEL_319:
      if (!v11[1072])
        goto LABEL_331;
LABEL_320:
      *(_OWORD *)(v12 + 112) = *(_OWORD *)v12;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *((_QWORD *)v11 + 141) = v406;
      *((_QWORD *)v11 + 142) = v14;
      *((_QWORD *)v11 + 143) = v404;
      v407 = (unint64_t)v11;
      *((_QWORD *)v11 + 144) = v411;
      v186 = (char *)operator new(0x7C8uLL);
      v187 = (unint64_t)v186;
      v188 = (uint64_t)(v186 + 1752);
      v419 = (AMSCore::HTTPResponseAction *)(v186 + 536);
      v414 = *(_OWORD *)v403;
      *((_OWORD *)v186 + 119) = *(_OWORD *)v403;
      v189 = (AMSCore::HTTPResponseAction *)(v186 + 1000);
      v394 = (AMSCore::URL *)(v186 + 1464);
      v190 = (__int128 *)(v186 + 1712);
      v396 = v186 + 1792;
      v398 = v186 + 568;
      v399 = (__n128 *)(v186 + 1816);
      v191 = v186 + 1840;
      v192 = v186 + 1856;
      v193 = v186 + 1872;
      v194 = v186 + 1888;
      *(_QWORD *)v403 = 0;
      *((_QWORD *)v403 + 1) = 0;
      *((_OWORD *)v186 + 120) = *(_OWORD *)v402;
      *(_QWORD *)v402 = 0;
      *((_QWORD *)v402 + 1) = 0;
      *((_OWORD *)v186 + 121) = *(_OWORD *)v401;
      *(_QWORD *)v401 = 0;
      *((_QWORD *)v401 + 1) = 0;
      do
        v195 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
      while (__stlxr(v195 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
      v186[24] = 0;
      v186[488] = 0;
      *((_QWORD *)v186 + 62) = 0;
      v412 = (AMSCore::HTTPResponseAction *)(v186 + 24);
      *((_QWORD *)v186 + 66) = 0;
      v405 = v186 + 16;
      std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v429, (uint64_t)(v186 + 16));
      *v416 = v429.std::runtime_error;
      *(_BYTE *)(v187 + 536) = 0;
      *(_BYTE *)(v187 + 560) = 0;
      *(_BYTE *)(v187 + 568) = 0;
      *(_BYTE *)(v187 + 584) = 0;
      *(_BYTE *)(v187 + 592) = 0;
      *(_BYTE *)(v187 + 664) = 0;
      *(_BYTE *)(v187 + 672) = 0;
      *(_BYTE *)(v187 + 824) = 0;
      *(_BYTE *)(v187 + 832) = 0;
      *(_BYTE *)(v187 + 836) = 0;
      *(_BYTE *)(v187 + 840) = 0;
      *(_BYTE *)(v187 + 872) = 0;
      *(_BYTE *)(v187 + 880) = 0;
      *(_BYTE *)(v187 + 884) = 0;
      *(_BYTE *)(v187 + 888) = 0;
      *(_BYTE *)(v187 + 912) = 0;
      *(_BYTE *)(v187 + 920) = 0;
      *(_BYTE *)(v187 + 944) = 0;
      *(_BYTE *)(v187 + 952) = 0;
      *(_BYTE *)(v187 + 984) = 0;
      *(_DWORD *)(v187 + 992) = 1;
      v196 = *(AMSCore::HTTPResponse **)(v414 + 104);
      v197 = *(std::__shared_weak_count **)(v414 + 112);
      v400 = v190;
      if (v197)
      {
        p_shared_owners = (unint64_t *)&v197->__shared_owners_;
        do
          v199 = __ldxr(p_shared_owners);
        while (__stxr(v199 + 1, p_shared_owners));
        AMSCore::HTTPResponse::getDecodedObject(v196);
        if (!*(_BYTE *)(v200 + 72))
          goto LABEL_638;
        v201 = v200;
        v202 = (unint64_t *)&v197->__shared_owners_;
        do
          v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (!v203)
        {
          ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
          std::__shared_weak_count::__release_weak(v197);
        }
      }
      else
      {
        AMSCore::HTTPResponse::getDecodedObject(v196);
        v201 = v218;
        if (!*(_BYTE *)(v218 + 72))
          goto LABEL_638;
      }
      if (*(_BYTE *)(v414 + 120))
      {
        *(_BYTE *)(v187 + 1752) = 0;
        *(_BYTE *)(v187 + 1784) = 0;
        *(_BYTE *)(v187 + 1816) = 0;
        *(_BYTE *)(v187 + 1832) = 0;
        v219 = *(uint64_t **)v414;
        v220 = *(uint64_t **)(v414 + 8);
        *(_QWORD *)(v187 + 1952) = v220;
        if (v219 != v220)
        {
          do
          {
            *(_QWORD *)(v187 + 1960) = v219;
            v223 = *(_QWORD *)(v187 + 1912);
            v224 = *v219;
            *(_QWORD *)(v187 + 1872) = *(_QWORD *)(v187 + 1904);
            *(_QWORD *)(v187 + 1880) = v223;
            if (v223)
            {
              v225 = (unint64_t *)(v223 + 8);
              do
                v226 = __ldxr(v225);
              while (__stxr(v226 + 1, v225));
            }
            v227 = *(_QWORD *)(v187 + 1928);
            *(_QWORD *)(v187 + 1840) = *(_QWORD *)(v187 + 1920);
            *(_QWORD *)(v187 + 1848) = v227;
            if (v227)
            {
              v228 = (unint64_t *)(v227 + 8);
              do
                v229 = __ldxr(v228);
              while (__stxr(v229 + 1, v228));
            }
            v230 = *(_QWORD *)(v187 + 1944);
            *(_QWORD *)(v187 + 1856) = *(_QWORD *)(v187 + 1936);
            *(_QWORD *)(v187 + 1864) = v230;
            if (v230)
            {
              v231 = (unint64_t *)(v230 + 8);
              do
                v232 = __ldxr(v231);
              while (__stxr(v232 + 1, v231));
            }
            (*(void (**)(uint64_t, char *, char *, char *))(*(_QWORD *)v224 + 24))(v224, v193, v191, v192);
            v233 = *(_OWORD *)(v187 + 1888);
            *(_OWORD *)(v187 + 1968) = v233;
            *v194 = 0;
            v194[1] = 0;
            if (!atomic_load((unint64_t *)(v233 + 480)))
            {
              *(_BYTE *)(v188 + 232) = 0;
              v235 = (unint64_t *)(*(_QWORD *)(v187 + 1968) + 480);
              do
                v236 = __ldaxr(v235);
              while (__stlxr(v187, v235));
              if (!v236)
                goto LABEL_570;
            }
            v237 = *(_QWORD *)(v187 + 1968);
            if (!*(_BYTE *)(v237 + 472))
              goto LABEL_638;
            AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v189, v237 + 8);
            v238 = *(_QWORD *)(v187 + 1976);
            if (!v238)
              goto LABEL_358;
            v239 = (unint64_t *)(v238 + 8);
            do
              v240 = __ldaxr(v239);
            while (__stlxr(v240 - 1, v239));
            if (!v240)
            {
              v244 = *(std::__shared_weak_count **)(v187 + 1976);
              ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
              std::__shared_weak_count::__release_weak(v244);
              v241 = *(std::__shared_weak_count **)(v187 + 1896);
              if (!v241)
                goto LABEL_364;
            }
            else
            {
LABEL_358:
              v241 = *(std::__shared_weak_count **)(v187 + 1896);
              if (!v241)
                goto LABEL_364;
            }
            v242 = (unint64_t *)&v241->__shared_owners_;
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
              ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
              std::__shared_weak_count::__release_weak(v241);
            }
LABEL_364:
            v245 = *(std::__shared_weak_count **)(v187 + 1864);
            if (!v245)
              goto LABEL_368;
            v246 = (unint64_t *)&v245->__shared_owners_;
            do
              v247 = __ldaxr(v246);
            while (__stlxr(v247 - 1, v246));
            if (!v247)
            {
              ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
              std::__shared_weak_count::__release_weak(v245);
              v248 = *(std::__shared_weak_count **)(v187 + 1848);
              if (!v248)
                goto LABEL_374;
            }
            else
            {
LABEL_368:
              v248 = *(std::__shared_weak_count **)(v187 + 1848);
              if (!v248)
                goto LABEL_374;
            }
            v249 = (unint64_t *)&v248->__shared_owners_;
            do
              v250 = __ldaxr(v249);
            while (__stlxr(v250 - 1, v249));
            if (!v250)
            {
              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
              std::__shared_weak_count::__release_weak(v248);
            }
LABEL_374:
            v251 = *(std::__shared_weak_count **)(v187 + 1880);
            if (!v251)
              goto LABEL_641;
            v252 = (unint64_t *)&v251->__shared_owners_;
            do
              v253 = __ldaxr(v252);
            while (__stlxr(v253 - 1, v252));
            if (v253)
            {
LABEL_641:
              if (*(_BYTE *)(v187 + 1784))
                goto LABEL_381;
LABEL_379:
              std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::AuthenticateResult,false> const&>(v188, (uint64_t *)(v187 + 1416));
              goto LABEL_381;
            }
            ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
            std::__shared_weak_count::__release_weak(v251);
            if (!*(_BYTE *)(v187 + 1784))
              goto LABEL_379;
LABEL_381:
            if (!*(_BYTE *)(v187 + 1832) && *(_BYTE *)(v187 + 1048))
            {
              *(_QWORD *)(v187 + 1816) = *(_QWORD *)(v187 + 1032);
              v254 = *(_QWORD *)(v187 + 1040);
              *(_QWORD *)(v187 + 1824) = v254;
              if (v254)
              {
                v255 = (unint64_t *)(v254 + 8);
                do
                  v256 = __ldxr(v255);
                while (__stxr(v256 + 1, v255));
              }
              *(_BYTE *)(v187 + 1832) = 1;
            }
            if (*(_DWORD *)(v187 + 992) == 1 && *(_DWORD *)(v187 + 1456) != 1)
              AMSCore::HTTPResponseAction::operator=((uint64_t)v419, (uint64_t)v189);
            v221 = *(_QWORD *)(v187 + 1960);
            v222 = *(_QWORD *)(v187 + 1952);
            AMSCore::HTTPResponseAction::~HTTPResponseAction(v189);
            v219 = (uint64_t *)(v221 + 8);
          }
          while (v221 + 8 != v222);
        }
        if (*(_DWORD *)(v187 + 992) == 1)
        {
          std::__optional_move_base<AMSCore::Error,false>::__optional_move_base[abi:fe180100]((AMSCore::Error *)&v453, *(_QWORD *)(v187 + 1904) + 24);
          if (v456[16])
          {
            AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v429, &v453);
            AMSCore::HTTPResponseAction::operator=((uint64_t)v419, (uint64_t)&v429);
            AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v429);
            if (v456[16])
            {
              v453.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v257 = *(std::__shared_weak_count **)&v456[8];
              if (*(_QWORD *)&v456[8])
              {
                v258 = (unint64_t *)(*(_QWORD *)&v456[8] + 8);
                do
                  v259 = __ldaxr(v258);
                while (__stlxr(v259 - 1, v258));
                if (!v259)
                {
                  ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                  std::__shared_weak_count::__release_weak(v257);
                }
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v455, *(unsigned int **)&v455[8]);
              MEMORY[0x18D7898AC](&v453);
            }
          }
        }
        *(_BYTE *)(v187 + 1712) = 0;
        *(_BYTE *)(v187 + 1744) = 0;
        if (*(_BYTE *)(v187 + 1784))
        {
          v260 = *(_OWORD *)(v188 + 16);
          *(_OWORD *)(v187 + 1712) = *(_OWORD *)v188;
          *(_QWORD *)v188 = 0;
          *(_QWORD *)(v188 + 8) = 0;
          *(_OWORD *)(v187 + 1728) = v260;
          *(_QWORD *)(v188 + 16) = 0;
          *(_QWORD *)(v188 + 24) = 0;
          *(_BYTE *)(v187 + 1744) = 1;
        }
        v261 = std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(v187 + 952, v400);
        if (*(_BYTE *)(v187 + 1744))
        {
          v262 = *(std::__shared_weak_count **)(v187 + 1736);
          if (v262)
          {
            v263 = (unint64_t *)&v262->__shared_owners_;
            do
              v264 = __ldaxr(v263);
            while (__stlxr(v264 - 1, v263));
            if (!v264)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v262->__on_zero_shared)(v262, v261);
              std::__shared_weak_count::__release_weak(v262);
            }
          }
          v265 = *(std::__shared_weak_count **)(v187 + 1720);
          if (v265)
          {
            v266 = (unint64_t *)&v265->__shared_owners_;
            do
              v267 = __ldaxr(v266);
            while (__stlxr(v267 - 1, v266));
            if (!v267)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v265->__on_zero_shared)(v265, v261);
              std::__shared_weak_count::__release_weak(v265);
            }
          }
        }
        *(_BYTE *)(v187 + 1792) = 0;
        *(_BYTE *)(v187 + 1808) = 0;
        v268 = *(unsigned __int8 *)(v187 + 1832);
        if (*(_BYTE *)(v187 + 1832))
        {
          v261 = *v399;
          *(__n128 *)(v187 + 1792) = *v399;
          v399->n128_u64[0] = 0;
          v399->n128_u64[1] = 0;
          v268 = 1;
          *(_BYTE *)(v187 + 1808) = 1;
        }
        if (*(unsigned __int8 *)(v187 + 584) == v268)
        {
          if (!*(_BYTE *)(v187 + 584))
            goto LABEL_467;
          v269 = *(_OWORD *)(v187 + 1792);
          *v396 = 0;
          v396[1] = 0;
          v270 = *(std::__shared_weak_count **)(v187 + 576);
          *v398 = v269;
          if (v270)
          {
            v271 = (unint64_t *)&v270->__shared_owners_;
            do
              v272 = __ldaxr(v271);
            while (__stlxr(v272 - 1, v271));
            if (!v272)
            {
              ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
              std::__shared_weak_count::__release_weak(v270);
              if (!*(_BYTE *)(v187 + 1808))
                goto LABEL_467;
LABEL_439:
              v281 = *(std::__shared_weak_count **)(v187 + 1800);
              if (v281)
              {
                v282 = (unint64_t *)&v281->__shared_owners_;
                do
                  v283 = __ldaxr(v282);
                while (__stlxr(v283 - 1, v282));
                if (!v283)
                {
                  ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                  std::__shared_weak_count::__release_weak(v281);
                }
              }
              goto LABEL_467;
            }
          }
        }
        else
        {
          if (!*(_BYTE *)(v187 + 584))
          {
            *v398 = *(_OWORD *)(v187 + 1792);
            *v396 = 0;
            v396[1] = 0;
            *(_BYTE *)(v187 + 584) = 1;
            if (*(_BYTE *)(v187 + 1808))
              goto LABEL_439;
            goto LABEL_467;
          }
          v278 = *(std::__shared_weak_count **)(v187 + 576);
          if (v278)
          {
            v279 = (unint64_t *)&v278->__shared_owners_;
            do
              v280 = __ldaxr(v279);
            while (__stlxr(v280 - 1, v279));
            if (!v280)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v278->__on_zero_shared)(v278, v261);
              std::__shared_weak_count::__release_weak(v278);
            }
          }
          *(_BYTE *)(v187 + 584) = 0;
        }
        if (*(_BYTE *)(v187 + 1808))
          goto LABEL_439;
LABEL_467:
        v295 = (uint64_t)v412;
        if (*(_BYTE *)(v187 + 488))
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction(v412);
          *(_BYTE *)(v187 + 488) = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction(v295, (uint64_t)v419);
        *(_BYTE *)(v187 + 488) = 1;
        if (*(_BYTE *)(v187 + 1832))
        {
          v296 = *(std::__shared_weak_count **)(v187 + 1824);
          if (v296)
          {
            v297 = (unint64_t *)&v296->__shared_owners_;
            do
              v298 = __ldaxr(v297);
            while (__stlxr(v298 - 1, v297));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
            }
          }
        }
        if (*(_BYTE *)(v187 + 1784))
        {
          v299 = *(std::__shared_weak_count **)(v187 + 1776);
          if (v299)
          {
            v300 = (unint64_t *)&v299->__shared_owners_;
            do
              v301 = __ldaxr(v300);
            while (__stlxr(v301 - 1, v300));
            if (!v301)
            {
              ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
              std::__shared_weak_count::__release_weak(v299);
            }
          }
          v302 = *(std::__shared_weak_count **)(v187 + 1760);
          if (v302)
          {
            v303 = (unint64_t *)&v302->__shared_owners_;
            do
              v304 = __ldaxr(v303);
            while (__stlxr(v304 - 1, v303));
            if (!v304)
            {
              ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
              std::__shared_weak_count::__release_weak(v302);
            }
          }
        }
        goto LABEL_569;
      }
      *((_BYTE *)&v429.__ec_.__val_ + 7) = 13;
      strcpy((char *)&v429, "store-version");
      if (!v274)
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[51]>((uint64_t)&v429, 3u, "Finance response does not contain a store-version.");
        std::runtime_error::runtime_error(&v453, &v429);
        ec = v429.__ec_;
        v453.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v284 = (unsigned int *)*((_QWORD *)&v430 + 1);
        *(_OWORD *)v455 = v430;
        *(_QWORD *)&v455[16] = v431;
        if (v431)
        {
          *(_QWORD *)(*((_QWORD *)&v430 + 1) + 16) = &v455[8];
          *(_QWORD *)&v430 = (char *)&v430 + 8;
          *((_QWORD *)&v430 + 1) = 0;
          v431 = 0;
          v284 = 0;
        }
        else
        {
          *(_QWORD *)v455 = &v455[8];
        }
        *(_OWORD *)v456 = v432;
        v432 = 0uLL;
        v463 = 0;
        v429.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v430, v284);
        MEMORY[0x18D7898AC](&v429);
        if (!v463)
        {
LABEL_489:
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__what_arg);
          v305 = __what_arg.__r_.__value_.__r.__words[0];
          if (*(int *)(__what_arg.__r_.__value_.__r.__words[0] + 8) <= 4)
          {
            v306 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
            v307 = (void *)(MEMORY[0x1E0DE4FE0] + 64);
            v308 = MEMORY[0x1E0DE4F60];
            v309 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
            v310 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
            __p[0] = (void *)(MEMORY[0x1E0DE4FE0] + 64);
            v429.__vftable = v309;
            *(std::system_error_vtbl **)((char *)&v429.__vftable + (unint64_t)v309[-1].~system_error) = v310;
            v311 = (std::ios_base *)((char *)&v429 + (unint64_t)v429.__vftable[-1].~system_error);
            std::ios_base::init(v311, &v429.__imp_);
            v311[1].__vftable = 0;
            v311[1].__fmtflags_ = -1;
            v429.__vftable = v306 + 1;
            __p[0] = v307;
            std::streambuf::basic_streambuf();
            v312 = MEMORY[0x1E0DE4FB8];
            v429.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
            v433 = 0u;
            v434 = 0u;
            v435 = 16;
            v313 = v429.__vftable[-1].~system_error;
            if ((v314 & 1) == 0
            {
            }
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v429, (uint64_t)"Error parsing redirect URL.", 27);
            v315 = v431;
            v316 = (char *)&v429 + (unint64_t)v429.__vftable[-1].~system_error;
            if ((v316[32] & 5) != 0)
            {
              v317 = -1;
            }
            else
            {
              (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v316 + 5) + 32))(&v464, *((_QWORD *)v316 + 5), 0, 1, 16);
              v317 = v470;
            }
            v464.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
            LODWORD(v464.__imp_.__imp_) = 4;
            *(_QWORD *)&v465.__val_ = v315;
            v465.__cat_ = (const std::error_category *)v317;
            (*(void (**)(_QWORD, const char *, uint64_t, std::runtime_error *))(**(_QWORD **)(v305 + 16) + 16))(*(_QWORD *)(v305 + 16), "networking", 10, &v464);
            v429.__vftable = *(std::system_error_vtbl **)v308;
            *(std::system_error_vtbl **)((char *)&v429.__vftable + (unint64_t)v429.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v308 + 24);
            v429.__imp_.__imp_ = (const char *)(v312 + 16);
            if (SBYTE7(v434) < 0)
              operator delete((void *)v433);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x18D789B58](__p);
          }
          size = (std::__shared_weak_count *)__what_arg.__r_.__value_.__l.__size_;
          if (__what_arg.__r_.__value_.__l.__size_)
          {
            v357 = (unint64_t *)(__what_arg.__r_.__value_.__l.__size_ + 8);
            do
              v358 = __ldaxr(v357);
            while (__stlxr(v358 - 1, v357));
            if (!v358)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          if (v463)
            goto LABEL_638;
          AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v429, &v453);
          v359 = (uint64_t)v412;
          if (*(_BYTE *)(v187 + 488))
          {
            AMSCore::HTTPResponseAction::~HTTPResponseAction(v412);
            *(_BYTE *)(v187 + 488) = 0;
          }
          AMSCore::HTTPResponseAction::HTTPResponseAction(v359, (uint64_t)&v429);
          *(_BYTE *)(v187 + 488) = 1;
          AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v429);
          if (!v463)
            goto LABEL_568;
          goto LABEL_552;
        }
LABEL_498:
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__what_arg);
        v318 = __what_arg.__r_.__value_.__r.__words[0];
        if (*(int *)(__what_arg.__r_.__value_.__r.__words[0] + 8) <= 2)
        {
          v319 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
          v320 = (void *)(MEMORY[0x1E0DE4FE0] + 64);
          v321 = MEMORY[0x1E0DE4F60];
          v322 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
          v323 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
          __p[0] = (void *)(MEMORY[0x1E0DE4FE0] + 64);
          v429.__vftable = v322;
          *(std::system_error_vtbl **)((char *)&v429.__vftable + (unint64_t)v322[-1].~system_error) = v323;
          v324 = (std::ios_base *)((char *)&v429 + (unint64_t)v429.__vftable[-1].~system_error);
          std::ios_base::init(v324, &v429.__imp_);
          v324[1].__vftable = 0;
          v324[1].__fmtflags_ = -1;
          v429.__vftable = v319 + 1;
          __p[0] = v320;
          std::streambuf::basic_streambuf();
          v325 = MEMORY[0x1E0DE4FB8];
          v429.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
          v433 = 0u;
          v434 = 0u;
          v435 = 16;
          v326 = v429.__vftable[-1].~system_error;
          if ((v327 & 1) == 0
          {
          }
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v429, (uint64_t)"Encountered an unsupported protocol version. redirectURL = ", 59);
          AMSCore::operator<<(&v429, (uint64_t)&v453);
          v328 = v431;
          v329 = (char *)&v429 + (unint64_t)v429.__vftable[-1].~system_error;
          if ((v329[32] & 5) != 0)
          {
            v330 = -1;
          }
          else
          {
            (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v329 + 5) + 32))(&v464, *((_QWORD *)v329 + 5), 0, 1, 16);
            v330 = v470;
          }
          v464.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v464.__imp_.__imp_) = 2;
          *(_QWORD *)&v465.__val_ = v328;
          v465.__cat_ = (const std::error_category *)v330;
          (*(void (**)(_QWORD, const char *, uint64_t, std::runtime_error *))(**(_QWORD **)(v318 + 16) + 16))(*(_QWORD *)(v318 + 16), "networking", 10, &v464);
          v429.__vftable = *(std::system_error_vtbl **)v321;
          *(std::system_error_vtbl **)((char *)&v429.__vftable + (unint64_t)v429.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v321 + 24);
          v429.__imp_.__imp_ = (const char *)(v325 + 16);
          if (SBYTE7(v434) < 0)
            operator delete((void *)v433);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18D789B58](__p);
        }
        v340 = (std::__shared_weak_count *)__what_arg.__r_.__value_.__l.__size_;
        if (__what_arg.__r_.__value_.__l.__size_)
        {
          v341 = (unint64_t *)(__what_arg.__r_.__value_.__l.__size_ + 8);
          do
            v342 = __ldaxr(v341);
          while (__stlxr(v342 - 1, v341));
          if (!v342)
          {
            ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
            std::__shared_weak_count::__release_weak(v340);
          }
        }
        if (!v463)
          goto LABEL_638;
        *(_BYTE *)(v187 + 1464) = 0;
        *(_BYTE *)(v187 + 1488) = 0;
        if (LOBYTE(ec.__cat_))
        {
          *(std::runtime_error *)v394 = v453;
          *((_QWORD *)v394 + 2) = *(_QWORD *)&ec.__val_;
          *(_QWORD *)&ec.__val_ = 0;
          v453.__vftable = 0;
          v453.__imp_.__imp_ = 0;
          *(_BYTE *)(v187 + 1488) = 1;
        }
        *(_BYTE *)(v187 + 1496) = 0;
        *(_BYTE *)(v187 + 1520) = 0;
        if (v456[0])
        {
          *(_OWORD *)(v187 + 1496) = *(_OWORD *)v455;
          *(_QWORD *)(v187 + 1512) = *(_QWORD *)&v455[16];
          memset(v455, 0, sizeof(v455));
          *(_BYTE *)(v187 + 1520) = 1;
        }
        *(_BYTE *)(v187 + 1528) = 0;
        *(_BYTE *)(v187 + 1552) = 0;
        if (BYTE8(v457))
        {
          *(_OWORD *)(v187 + 1528) = *(_OWORD *)&v456[8];
          *(_QWORD *)(v187 + 1544) = v457;
          *(_QWORD *)&v457 = 0;
          *(_OWORD *)&v456[8] = 0uLL;
          *(_BYTE *)(v187 + 1552) = 1;
        }
        *(_DWORD *)(v187 + 1560) = v458;
        *(_QWORD *)(v187 + 1568) = v187 + 1568;
        *(_QWORD *)(v187 + 1576) = v187 + 1568;
        *(_QWORD *)(v187 + 1584) = 0;
        v343 = v460;
        if (v460)
        {
          v344 = (_QWORD *)*((_QWORD *)&v459 + 1);
          v345 = v459;
          v346 = **((_QWORD **)&v459 + 1);
          *(_QWORD *)(v346 + 8) = *(_QWORD *)(v459 + 8);
          **(_QWORD **)(v345 + 8) = v346;
          v347 = *(_QWORD *)(v187 + 1568);
          *(_QWORD *)(v347 + 8) = v344;
          *v344 = v347;
          *(_QWORD *)(v187 + 1568) = v345;
          *(_QWORD *)(v345 + 8) = v187 + 1568;
          *(_QWORD *)(v187 + 1584) = v343;
          v460 = 0;
        }
        *(_QWORD *)(v187 + 1608) = v462;
        *(_OWORD *)(v187 + 1592) = v461;
        v462 = 0;
        v461 = 0uLL;
        *(_BYTE *)(v187 + 1616) = 0;
        *(_BYTE *)(v187 + 1620) = 0;
        *(_BYTE *)(v187 + 1624) = 0;
        *(_BYTE *)(v187 + 1656) = 0;
        *(_BYTE *)(v187 + 1664) = 0;
        *(_BYTE *)(v187 + 1668) = 0;
        *(_BYTE *)(v187 + 1672) = 0;
        *(_BYTE *)(v187 + 1704) = 0;
        AMSCore::HTTPResponseAction::createRedirectAction((uint64_t)&v429, (uint64_t)v394);
        if (*(_BYTE *)(v187 + 488))
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction(v412);
          *(_BYTE *)(v187 + 488) = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v412, (uint64_t)&v429);
        *(_BYTE *)(v187 + 488) = 1;
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v429);
        if (*(_BYTE *)(v187 + 1704))
        {
          v348 = *(std::__shared_weak_count **)(v187 + 1696);
          if (v348)
          {
            v349 = (unint64_t *)&v348->__shared_owners_;
            do
              v350 = __ldaxr(v349);
            while (__stlxr(v350 - 1, v349));
            if (!v350)
            {
              ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
              std::__shared_weak_count::__release_weak(v348);
            }
          }
          v351 = *(std::__shared_weak_count **)(v187 + 1680);
          if (v351)
          {
            v352 = (unint64_t *)&v351->__shared_owners_;
            do
              v353 = __ldaxr(v352);
            while (__stlxr(v353 - 1, v352));
            if (!v353)
            {
              ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
              std::__shared_weak_count::__release_weak(v351);
            }
          }
        }
        if (*(_BYTE *)(v187 + 1656))
        {
          v354 = *(unsigned int *)(v187 + 1648);
          if ((_DWORD)v354 != -1)
            ((void (*)(std::runtime_error *, unint64_t))off_1E253D240[v354])(&v464, v187 + 1624);
          *(_DWORD *)(v187 + 1648) = -1;
        }
        AMSCore::URL::~URL(v394);
        if (!v463)
        {
LABEL_568:
          ((void (*)(std::runtime_error *))v453.~runtime_error)(&v453);
          goto LABEL_569;
        }
LABEL_552:
        AMSCore::URL::~URL((AMSCore::URL *)&v453);
LABEL_569:
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v419);
        *(_QWORD *)(v187 + 536) = v405;
        *(_QWORD *)v187 = 0;
        AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v360);
LABEL_570:
        v361 = *(_OWORD *)(v415 + 96);
        *(_OWORD *)(v415 + 160) = v361;
        v416->__vftable = 0;
        v416->__imp_.__imp_ = 0;
        v362 = atomic_load((unint64_t *)(v361 + 480));
        v11 = (char *)v407;
        v291 = v410;
        if (!v362)
        {
          *(_BYTE *)(v415 + 192) = 0;
          v363 = (unint64_t *)(*(_QWORD *)(v407 + 1160) + 480);
          do
            v364 = __ldaxr(v363);
          while (__stlxr(v407, v363));
          if (!v364)
            return;
        }
        v365 = *(_QWORD *)(v415 + 160);
        if (*(_BYTE *)(v365 + 472))
        {
          AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v410, v365 + 8);
          if (*(_BYTE *)(v407 + 488))
          {
            AMSCore::HTTPResponseAction::~HTTPResponseAction(v409);
            *(_BYTE *)(v407 + 488) = 0;
          }
          v366 = *(_QWORD *)(v407 + 1168);
          AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v409, (uint64_t)v410);
          *(_BYTE *)(v407 + 488) = 1;
          AMSCore::HTTPResponseAction::~HTTPResponseAction(v410);
          if (v366)
          {
            v367 = (unint64_t *)(*(_QWORD *)(v407 + 1168) + 8);
            do
              v368 = __ldaxr(v367);
            while (__stlxr(v368 - 1, v367));
            if (!v368)
            {
              v369 = *(std::__shared_weak_count **)(v407 + 1168);
              ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
              std::__shared_weak_count::__release_weak(v369);
            }
          }
          v370 = *(std::__shared_weak_count **)(v407 + 1104);
          if (v370)
          {
            v371 = (unint64_t *)&v370->__shared_owners_;
            do
              v372 = __ldaxr(v371);
            while (__stlxr(v372 - 1, v371));
            if (!v372)
            {
              ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
              std::__shared_weak_count::__release_weak(v370);
            }
          }
          v373 = *(std::__shared_weak_count **)(v407 + 1152);
          if (v373)
          {
            v374 = (unint64_t *)&v373->__shared_owners_;
            do
              v375 = __ldaxr(v374);
            while (__stlxr(v375 - 1, v374));
            if (!v375)
            {
              ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
              std::__shared_weak_count::__release_weak(v373);
            }
          }
          v376 = *(std::__shared_weak_count **)(v407 + 1136);
          if (!v376)
            goto LABEL_596;
          v377 = (unint64_t *)&v376->__shared_owners_;
          do
            v378 = __ldaxr(v377);
          while (__stlxr(v378 - 1, v377));
          if (!v378)
          {
            ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
            std::__shared_weak_count::__release_weak(v376);
            v379 = *(std::__shared_weak_count **)(v407 + 1120);
            if (!v379)
              goto LABEL_600;
          }
          else
          {
LABEL_596:
            v379 = *(std::__shared_weak_count **)(v407 + 1120);
            if (!v379)
              goto LABEL_600;
          }
          v380 = (unint64_t *)&v379->__shared_owners_;
          do
            v381 = __ldaxr(v380);
          while (__stlxr(v381 - 1, v380));
          if (!v381)
          {
            ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
            std::__shared_weak_count::__release_weak(v379);
            if (*(_BYTE *)(v407 + 1072))
              goto LABEL_601;
            goto LABEL_609;
          }
LABEL_600:
          if (*(_BYTE *)(v407 + 1072))
          {
LABEL_601:
            v382 = *(std::__shared_weak_count **)(v407 + 1008);
            if (v382)
            {
              v383 = (unint64_t *)&v382->__shared_owners_;
              do
                v384 = __ldaxr(v383);
              while (__stlxr(v384 - 1, v383));
              if (!v384)
              {
                ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                std::__shared_weak_count::__release_weak(v382);
              }
            }
            goto LABEL_610;
          }
LABEL_609:
          (**(void (***)(uint64_t))v415)(v415);
LABEL_610:
          v14 = 0;
          v294 = 0;
          v293 = v408;
          goto LABEL_611;
        }
LABEL_638:
        __break(1u);
        return;
      }
      v275 = v273;
      AMSCore::getValueByKey<std::map<std::string,AMSCore::Any>,std::map<std::string,AMSCore::Any> const>((uint64_t)&v464, v273, "1.0", 3uLL);
      if (!v469)
      {
        AMSCore::getValueByKey<std::map<std::string,AMSCore::Any>,std::map<std::string,AMSCore::Any> const>((uint64_t)&v429, v275, "*", 1uLL);
        std::expected<std::reference_wrapper<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::operator=[abi:fe180100](&v464, &v429);
        if (!(_BYTE)v433)
          ((void (*)(std::system_error *))v429.~system_error)(&v429);
        if (!v469)
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[58]>((uint64_t)&v429, 3u, "Finance response does not contain any store-version data.");
          std::runtime_error::runtime_error(&v453, &v429);
          ec = v429.__ec_;
          v453.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v355 = (unsigned int *)*((_QWORD *)&v430 + 1);
          *(_OWORD *)v455 = v430;
          *(_QWORD *)&v455[16] = v431;
          if (v431)
          {
            *(_QWORD *)(*((_QWORD *)&v430 + 1) + 16) = &v455[8];
            *(_QWORD *)&v430 = (char *)&v430 + 8;
            *((_QWORD *)&v430 + 1) = 0;
            v431 = 0;
            v355 = 0;
          }
          else
          {
            *(_QWORD *)v455 = &v455[8];
          }
          *(_OWORD *)v456 = v432;
          v432 = 0uLL;
          v463 = 0;
          v429.__vftable = (std::system_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v430, v355);
          MEMORY[0x18D7898AC](&v429);
          if (!v469)
          {
LABEL_514:
            ((void (*)(std::runtime_error *))v464.~runtime_error)(&v464);
            if (!v463)
              goto LABEL_489;
            goto LABEL_498;
          }
LABEL_497:
          if (!v463)
            goto LABEL_489;
          goto LABEL_498;
        }
      }
      AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)&__what_arg, (uint64_t *)v464.__vftable, "redirect-url", 0xCuLL);
      if (v427)
      {
        v276 = __what_arg.__r_.__value_.__r.__words[0];
        if (*(char *)(__what_arg.__r_.__value_.__r.__words[0] + 23) < 0)
        {
          v277 = *(_QWORD *)(__what_arg.__r_.__value_.__r.__words[0] + 8);
          if (!v277)
            goto LABEL_502;
          v276 = *(_QWORD *)__what_arg.__r_.__value_.__l.__data_;
        }
        else
        {
          v277 = *(unsigned __int8 *)(__what_arg.__r_.__value_.__r.__words[0] + 23);
          if (!*(_BYTE *)(__what_arg.__r_.__value_.__r.__words[0] + 23))
            goto LABEL_502;
        }
        AMSCore::URL::parse(v276, v277, (uint64_t)&v453);
        if (!v427)
          goto LABEL_513;
        goto LABEL_496;
      }
LABEL_502:
      v331 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v332 = (void *)(MEMORY[0x1E0DE4FE0] + 64);
      v333 = MEMORY[0x1E0DE4F60];
      v334 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v335 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      __p[0] = (void *)(MEMORY[0x1E0DE4FE0] + 64);
      v429.__vftable = v334;
      *(std::system_error_vtbl **)((char *)&v429.__vftable + (unint64_t)v334[-1].~system_error) = v335;
      v336 = (std::ios_base *)((char *)&v429 + (unint64_t)v429.__vftable[-1].~system_error);
      std::ios_base::init(v336, &v429.__imp_);
      v336[1].__vftable = 0;
      v336[1].__fmtflags_ = -1;
      v429.__vftable = v331 + 1;
      __p[0] = v332;
      std::streambuf::basic_streambuf();
      v337 = MEMORY[0x1E0DE4FB8];
      v429.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      v433 = 0u;
      v434 = 0u;
      v435 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v429, (uint64_t)"Finance response does not contain a valid store version rediect URL.", 68);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v429.__imp_, &v428);
      v429.__vftable = *(std::system_error_vtbl **)v333;
      *(std::system_error_vtbl **)((char *)&v429.__vftable + (unint64_t)v429.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v333 + 24);
      v429.__imp_.__imp_ = (const char *)(v337 + 16);
      if (SBYTE7(v434) < 0)
        operator delete((void *)v433);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](__p);
      v472.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(_QWORD *)&v472.__val_ = 3;
      std::system_error::system_error(&v429, v472, &v428);
      if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v428.__r_.__value_.__l.__data_);
      *((_QWORD *)&v430 + 1) = 0;
      v431 = 0;
      v429.__vftable = (std::system_error_vtbl *)off_1E2521330;
      *(_QWORD *)&v430 = (char *)&v430 + 8;
      v432 = 0uLL;
      std::runtime_error::runtime_error(&v421, &v429);
      v422 = v429.__ec_;
      v421.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v338 = (unsigned int *)*((_QWORD *)&v430 + 1);
      v423 = v430;
      v424 = v431;
      if (v431)
      {
        *(_QWORD *)(*((_QWORD *)&v430 + 1) + 16) = (char *)&v423 + 8;
        v338 = 0;
        *(_QWORD *)&v430 = (char *)&v430 + 8;
        *((_QWORD *)&v430 + 1) = 0;
        v431 = 0;
      }
      else
      {
        *(_QWORD *)&v423 = (char *)&v423 + 8;
      }
      v425 = v432;
      v432 = 0uLL;
      v429.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v430, v338);
      MEMORY[0x18D7898AC](&v429);
      std::runtime_error::runtime_error(&v453, &v421);
      ec = v422;
      v453.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v339 = (unsigned int *)*((_QWORD *)&v423 + 1);
      *(_OWORD *)v455 = v423;
      *(_QWORD *)&v455[16] = v424;
      if (v424)
      {
        *(_QWORD *)(*((_QWORD *)&v423 + 1) + 16) = &v455[8];
        v339 = 0;
        *(_QWORD *)&v423 = (char *)&v423 + 8;
        *((_QWORD *)&v423 + 1) = 0;
        v424 = 0;
      }
      else
      {
        *(_QWORD *)v455 = &v455[8];
      }
      *(_OWORD *)v456 = v425;
      v425 = 0uLL;
      v463 = 0;
      v421.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v423, v339);
      MEMORY[0x18D7898AC](&v421);
      if (!v427)
      {
LABEL_513:
        (*(void (**)(std::string *))__what_arg.__r_.__value_.__l.__data_)(&__what_arg);
        if (!v469)
          goto LABEL_514;
        goto LABEL_497;
      }
LABEL_496:
      if (!v469)
        goto LABEL_514;
      goto LABEL_497;
    }
    v429.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v432 + 1);
    if (*((_QWORD *)&v432 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v24 = *((_QWORD *)&v430 + 1);
LABEL_31:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v430, (unsigned int *)v24);
    MEMORY[0x18D7898AC](&v429);
    goto LABEL_32;
  }
  *(_OWORD *)v420 = *(_OWORD *)v413;
  v18 = *(AMSCore::HTTPResponse **)v413;
  *(_QWORD *)v413 = 0;
  *((_QWORD *)v413 + 1) = 0;
  LOBYTE(v458) = 0;
  v459 = 0uLL;
  *(_QWORD *)&ec.__val_ = 0;
  v453.__vftable = 0;
  v453.__imp_.__imp_ = 0;
  v19 = v18;
  LOBYTE(ec.__cat_) = 0;
  AMSCore::HTTPResponse::getDecodedObject(v18);
  v418 = v21;
  if (!*(_BYTE *)(v21 + 72))
    goto LABEL_638;
  AuthenticateRequestTypeForResponse = AMSCore::FinanceResponse::getAuthenticateRequestTypeForResponse(v19, v20);
  v23 = 0;
  if ((v16 & 0xFF00000000) != 0 && HIDWORD(AuthenticateRequestTypeForResponse))
  {
    if (v16 >= 2)
      v23 = v16 == 2;
    else
      v23 = (AuthenticateRequestTypeForResponse & 0xFFFFFFFE) == 0;
  }
  v395 = v23;
  v36 = (uint64_t *)(v418 + 8);
  v35 = *(_QWORD *)(v418 + 8);
  if (!v35)
    goto LABEL_218;
  v37 = v418 + 8;
  v38 = *(_QWORD *)(v418 + 8);
  do
  {
    while (1)
    {
      v39 = *(char *)(v38 + 55);
      v40 = v39 >= 0 ? (const void *)(v38 + 32) : *(const void **)(v38 + 32);
      v41 = v39 >= 0 ? *(unsigned __int8 *)(v38 + 55) : *(_QWORD *)(v38 + 40);
      v42 = v41 >= 6 ? 6 : v41;
      v43 = memcmp("dialog", v40, v42);
      if (v43)
        break;
      if (v41 >= 6)
        goto LABEL_50;
LABEL_36:
      v38 = *(_QWORD *)(v38 + 8);
      if (!v38)
        goto LABEL_51;
    }
    if ((v43 & 0x80000000) == 0)
      goto LABEL_36;
LABEL_50:
    v37 = v38;
    v38 = *(_QWORD *)v38;
  }
  while (v38);
LABEL_51:
  if ((uint64_t *)v37 == v36)
  {
    v49 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    v44 = *(char *)(v37 + 55);
    if (v44 >= 0)
      v45 = (const void *)(v37 + 32);
    else
      v45 = *(const void **)(v37 + 32);
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(v37 + 55);
    else
      v46 = *(_QWORD *)(v37 + 40);
    if (v46 >= 6)
      v47 = 6;
    else
      v47 = v46;
    v48 = memcmp("dialog", v45, v47);
    if (v48)
    {
      if ((v48 & 0x80000000) == 0)
        goto LABEL_63;
LABEL_66:
      v49 = &AMSCore::Any::Null(void)::null;
    }
    else
    {
      if (v46 > 6)
        goto LABEL_66;
LABEL_63:
      v49 = (uint64_t *)(v37 + 56);
    }
  }
  v50 = *((_DWORD *)v49 + 6);
  if (v50 == 8)
    v51 = v49;
  else
    v51 = 0;
  if (v50 != 8)
    goto LABEL_218;
  v52 = v418 + 8;
  while (2)
  {
    while (2)
    {
      v53 = *(char *)(v35 + 55);
      if (v53 >= 0)
        v54 = (const void *)(v35 + 32);
      else
        v54 = *(const void **)(v35 + 32);
      if (v53 >= 0)
        v55 = *(unsigned __int8 *)(v35 + 55);
      else
        v55 = *(_QWORD *)(v35 + 40);
      if (v55 >= 0xB)
        v56 = 11;
      else
        v56 = v55;
      v57 = memcmp("failureType", v54, v56);
      if (v57)
      {
        if (v57 < 0)
          break;
        goto LABEL_72;
      }
      if (v55 < 0xB)
      {
LABEL_72:
        v35 = *(_QWORD *)(v35 + 8);
        if (!v35)
          goto LABEL_87;
        continue;
      }
      break;
    }
    v52 = v35;
    v35 = *(_QWORD *)v35;
    if (v35)
      continue;
    break;
  }
LABEL_87:
  if ((uint64_t *)v52 == v36)
    goto LABEL_101;
  v59 = *(char *)(v52 + 55);
  if (v59 >= 0)
    v60 = (const void *)(v52 + 32);
  else
    v60 = *(const void **)(v52 + 32);
  if (v59 >= 0)
    v61 = *(unsigned __int8 *)(v52 + 55);
  else
    v61 = *(_QWORD *)(v52 + 40);
  if (v61 >= 0xB)
    v62 = 11;
  else
    v62 = v61;
  v63 = memcmp("failureType", v60, v62);
  if (v63)
  {
    if ((v63 & 0x80000000) == 0)
      goto LABEL_99;
LABEL_101:
    v64 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v61 > 0xB)
      goto LABEL_101;
LABEL_99:
    v64 = (uint64_t *)(v52 + 56);
  }
  v67 = v51[1];
  v65 = v51 + 1;
  v66 = (uint64_t *)v67;
  v397 = v14;
  v393 = v64;
  if (!v67)
  {
    v81 = &AMSCore::Any::Null(void)::null;
    goto LABEL_137;
  }
  v68 = v11;
  v69 = v65;
  v70 = v66;
  while (2)
  {
    while (2)
    {
      v71 = *((char *)v70 + 55);
      if (v71 >= 0)
        v72 = v70 + 4;
      else
        v72 = (const void *)v70[4];
      if (v71 >= 0)
        v73 = *((unsigned __int8 *)v70 + 55);
      else
        v73 = v70[5];
      if (v73 >= 4)
        v74 = 4;
      else
        v74 = v73;
      v75 = memcmp("kind", v72, v74);
      if (v75)
      {
        if (v75 < 0)
          break;
        goto LABEL_104;
      }
      if (v73 < 4)
      {
LABEL_104:
        v70 = (uint64_t *)v70[1];
        if (!v70)
          goto LABEL_119;
        continue;
      }
      break;
    }
    v69 = v70;
    v70 = (uint64_t *)*v70;
    if (v70)
      continue;
    break;
  }
LABEL_119:
  if (v69 == v65)
  {
    v81 = &AMSCore::Any::Null(void)::null;
    v11 = v68;
  }
  else
  {
    v76 = *((char *)v69 + 55);
    if (v76 >= 0)
      v77 = v69 + 4;
    else
      v77 = (const void *)v69[4];
    if (v76 >= 0)
      v78 = *((unsigned __int8 *)v69 + 55);
    else
      v78 = v69[5];
    if (v78 >= 4)
      v79 = 4;
    else
      v79 = v78;
    v80 = memcmp("kind", v77, v79);
    if (v80)
    {
      v11 = v68;
      if ((v80 & 0x80000000) == 0)
        goto LABEL_131;
LABEL_135:
      v81 = &AMSCore::Any::Null(void)::null;
    }
    else
    {
      v11 = v68;
      if (v78 > 4)
        goto LABEL_135;
LABEL_131:
      v81 = v69 + 7;
    }
  }
  v14 = v397;
  v64 = v393;
LABEL_137:
  if (*((_DWORD *)v81 + 6) != 5)
    goto LABEL_147;
  v82 = *((unsigned __int8 *)v81 + 23);
  v83 = (char)v82;
  if ((v82 & 0x80u) != 0)
    v82 = v81[1];
  if (v82 != 13)
    goto LABEL_147;
  if (v83 < 0)
    v81 = (uint64_t *)*v81;
  v84 = *v81;
  v85 = *(uint64_t *)((char *)v81 + 5);
  if (v84 != 0x7A69726F68747561 || v85 != 0x6E6F6974617A6972)
  {
LABEL_147:
    LODWORD(v87) = *((_DWORD *)v64 + 6);
    if ((_DWORD)v87 == -1)
      v87 = 0;
    else
      v87 = v87;
    __asm { BR              X10 }
  }
  if (!v66)
  {
LABEL_181:
    v100 = &AMSCore::Any::Null(void)::null;
    v99 = v395;
    goto LABEL_184;
  }
  v88 = v65;
  while (2)
  {
    while (2)
    {
      v89 = *((char *)v66 + 55);
      if (v89 >= 0)
        v90 = v66 + 4;
      else
        v90 = (const void *)v66[4];
      if (v89 >= 0)
        v91 = *((unsigned __int8 *)v66 + 55);
      else
        v91 = v66[5];
      if (v91 >= 0x10)
        v92 = 16;
      else
        v92 = v91;
      v93 = memcmp("paymentSheetInfo", v90, v92);
      if (v93)
      {
        if (v93 < 0)
          break;
        goto LABEL_153;
      }
      if (v91 < 0x10)
      {
LABEL_153:
        v66 = (uint64_t *)v66[1];
        if (!v66)
          goto LABEL_168;
        continue;
      }
      break;
    }
    v88 = v66;
    v66 = (uint64_t *)*v66;
    if (v66)
      continue;
    break;
  }
LABEL_168:
  if (v88 == v65)
    goto LABEL_181;
  v94 = *((char *)v88 + 55);
  if (v94 >= 0)
    v95 = v88 + 4;
  else
    v95 = (const void *)v88[4];
  if (v94 >= 0)
    v96 = *((unsigned __int8 *)v88 + 55);
  else
    v96 = v88[5];
  if (v96 >= 0x10)
    v97 = 16;
  else
    v97 = v96;
  v98 = memcmp("paymentSheetInfo", v95, v97);
  if (v98)
  {
    v99 = v395;
    if ((v98 & 0x80000000) == 0)
      goto LABEL_180;
LABEL_183:
    v100 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    v99 = v395;
    if (v96 > 0x10)
      goto LABEL_183;
LABEL_180:
    v100 = v88 + 7;
  }
LABEL_184:
  v101 = *((_DWORD *)v100 + 6) != 8;
  if (v101)
    v102 = 0;
  else
    v102 = 3;
  if (v101 && v99)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v429);
    AMSCore::Logger::log<char [46]>((uint64_t)v429.__vftable, 2, (uint64_t)"dialog", 6, "Encountered a redundant authorization dialog.");
    imp = (std::__shared_weak_count *)v429.__imp_.__imp_;
    if (v429.__imp_.__imp_)
    {
      v104 = (unint64_t *)(v429.__imp_.__imp_ + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    v102 = 2;
  }
  v106 = AMSCore::FinanceResponse::getAuthenticateRequestTypeForResponse(v420[0], v58);
  v107 = operator new();
  v108 = v107;
  *(_QWORD *)v107 = &off_1E2520E00;
  *(_DWORD *)(v107 + 8) = v102;
  *(_QWORD *)(v107 + 12) = v106;
  v109 = (char *)v453.__imp_.__imp_;
  if (v453.__imp_.__imp_ < (const char *)*(_QWORD *)&ec.__val_)
  {
    *(_QWORD *)v453.__imp_.__imp_ = v107;
    v110 = v109 + 8;
    goto LABEL_217;
  }
  v111 = v453.__vftable;
  v112 = v453.__imp_.__imp_ - (const char *)v453.__vftable;
  v113 = (v453.__imp_.__imp_ - (const char *)v453.__vftable) >> 3;
  v114 = v113 + 1;
  if ((unint64_t)(v113 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  v115 = *(_QWORD *)&ec.__val_ - (unint64_t)v453.__vftable;
  if ((uint64_t)(*(_QWORD *)&ec.__val_ - (unint64_t)v453.__vftable) >> 2 > v114)
    v114 = v115 >> 2;
  if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
    v116 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v116 = v114;
  if (v116)
  {
    if (v116 >> 61)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v117 = (char *)operator new(8 * v116);
  }
  else
  {
    v117 = 0;
  }
  v118 = (unint64_t)&v117[8 * v113];
  v119 = &v117[8 * v116];
  *(_QWORD *)v118 = v108;
  v110 = (const char *)(v118 + 8);
  if (v109 == (char *)v111)
  {
    v453.__vftable = (std::runtime_error_vtbl *)&v117[8 * v113];
    v453.__imp_.__imp_ = (const char *)(v118 + 8);
    *(_QWORD *)&ec.__val_ = v119;
  }
  else
  {
    v120 = v109 - (char *)v111 - 8;
    if (v120 > 0x77
      && ((unint64_t)&v109[-(v120 & 0xFFFFFFFFFFFFFFF8) - 8] >= v118
       || &v117[v112 - (v120 & 0xFFFFFFFFFFFFFFF8) - 8] >= v109))
    {
      v121 = (v120 >> 3) + 1;
      v118 -= 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
      v122 = v109 - 32;
      v123 = &v117[v112 - 16];
      v124 = v121 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v126 = *(_OWORD *)v122;
        v125 = *((_OWORD *)v122 + 1);
        *(_OWORD *)v122 = 0uLL;
        *((_OWORD *)v122 + 1) = 0uLL;
        v122 -= 32;
        *((_OWORD *)v123 - 1) = v126;
        *(_OWORD *)v123 = v125;
        v123 -= 32;
        v124 -= 4;
      }
      while (v124);
      if (v121 == (v121 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_624;
      v109 -= 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
    }
    do
    {
      v389 = *((_QWORD *)v109 - 1);
      v109 -= 8;
      *(_QWORD *)v109 = 0;
      *(_QWORD *)(v118 - 8) = v389;
      v118 -= 8;
    }
    while (v109 != (char *)v111);
LABEL_624:
    v109 = (char *)v453.__vftable;
    v390 = v453.__imp_.__imp_;
    v453.__vftable = (std::runtime_error_vtbl *)v118;
    v453.__imp_.__imp_ = v110;
    *(_QWORD *)&ec.__val_ = v119;
    while (v390 != v109)
    {
      v392 = *((_QWORD *)v390 - 1);
      v390 -= 8;
      v391 = v392;
      *(_QWORD *)v390 = 0;
      if (v392)
        (*(void (**)(uint64_t))(*(_QWORD *)v391 + 8))(v391);
    }
  }
  if (v109)
    operator delete(v109);
LABEL_217:
  v453.__imp_.__imp_ = v110;
LABEL_218:
  *((_BYTE *)&v429.__ec_.__val_ + 7) = 13;
  strcpy((char *)&v429, "creditDisplay");
  v127 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>(v418, "protocol");
  if (v36 != v127
    && (v128 = v127, *((_DWORD *)v127 + 20) == 8)
    && (v129 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)(v127 + 7), (const void **)&v429.__vftable), v128 + 8 != v129)&& *((_DWORD *)v129 + 20) == 5|| (v129 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v418, (const void **)&v429.__vftable), v36 != v129)&& *((_DWORD *)v129 + 20) == 5)
  {
    v130 = v129 + 7;
    v131 = operator new();
    if (*((char *)v130 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v429, (const std::string::value_type *)*v130, v130[1]);
    }
    else
    {
      v132 = *(std::runtime_error *)v130;
      *(_QWORD *)&v429.__ec_.__val_ = v130[2];
      v429.std::runtime_error = v132;
    }
    *(_QWORD *)v131 = off_1E25211C8;
    *(std::runtime_error *)(v131 + 8) = v429.std::runtime_error;
    *(_QWORD *)(v131 + 24) = *(_QWORD *)&v429.__ec_.__val_;
    v464.__vftable = (std::runtime_error_vtbl *)v131;
    v133 = (char *)v453.__imp_.__imp_;
    if (v453.__imp_.__imp_ < (const char *)*(_QWORD *)&ec.__val_)
    {
      v464.__vftable = 0;
      *(_QWORD *)v453.__imp_.__imp_ = v131;
      v134 = v133 + 8;
      goto LABEL_250;
    }
    v135 = v453.__vftable;
    v136 = v453.__imp_.__imp_ - (const char *)v453.__vftable;
    v137 = (v453.__imp_.__imp_ - (const char *)v453.__vftable) >> 3;
    v138 = v137 + 1;
    if ((unint64_t)(v137 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v139 = *(_QWORD *)&ec.__val_ - (unint64_t)v453.__vftable;
    if ((uint64_t)(*(_QWORD *)&ec.__val_ - (unint64_t)v453.__vftable) >> 2 > v138)
      v138 = v139 >> 2;
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
      v140 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v140 = v138;
    if (v140)
    {
      if (v140 >> 61)
        std::__throw_bad_array_new_length[abi:fe180100]();
      v141 = (char *)operator new(8 * v140);
    }
    else
    {
      v141 = 0;
    }
    v142 = (unint64_t)&v141[8 * v137];
    v143 = &v141[8 * v140];
    v464.__vftable = 0;
    *(_QWORD *)v142 = v131;
    v134 = (const char *)(v142 + 8);
    if (v133 == (char *)v135)
    {
      v453.__vftable = (std::runtime_error_vtbl *)&v141[8 * v137];
      v453.__imp_.__imp_ = (const char *)(v142 + 8);
      *(_QWORD *)&ec.__val_ = v143;
    }
    else
    {
      v144 = v133 - (char *)v135 - 8;
      if (v144 > 0x77
        && ((unint64_t)&v133[-(v144 & 0xFFFFFFFFFFFFFFF8) - 8] >= v142
         || &v141[v136 - (v144 & 0xFFFFFFFFFFFFFFF8) - 8] >= v133))
      {
        v145 = (v144 >> 3) + 1;
        v142 -= 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
        v146 = v133 - 32;
        v147 = &v141[v136 - 16];
        v148 = v145 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v150 = *(_OWORD *)v146;
          v149 = *((_OWORD *)v146 + 1);
          *(_OWORD *)v146 = 0uLL;
          *((_OWORD *)v146 + 1) = 0uLL;
          v146 -= 32;
          *((_OWORD *)v147 - 1) = v150;
          *(_OWORD *)v147 = v149;
          v147 -= 32;
          v148 -= 4;
        }
        while (v148);
        if (v145 == (v145 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_618;
        v133 -= 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
      }
      do
      {
        v385 = *((_QWORD *)v133 - 1);
        v133 -= 8;
        *(_QWORD *)v133 = 0;
        *(_QWORD *)(v142 - 8) = v385;
        v142 -= 8;
      }
      while (v133 != (char *)v135);
LABEL_618:
      v133 = (char *)v453.__vftable;
      v386 = v453.__imp_.__imp_;
      v453.__vftable = (std::runtime_error_vtbl *)v142;
      v453.__imp_.__imp_ = v134;
      *(_QWORD *)&ec.__val_ = v143;
      while (v386 != v133)
      {
        v388 = *((_QWORD *)v386 - 1);
        v386 -= 8;
        v387 = v388;
        *(_QWORD *)v386 = 0;
        if (v388)
          (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
      }
    }
    if (v133)
      operator delete(v133);
LABEL_250:
    v453.__imp_.__imp_ = v134;
    v151 = v464.__vftable;
    if (v464.__vftable)
    {
      if (SHIBYTE(v464.__vftable[1].~runtime_error) < 0)
        operator delete(v464.~runtime_error_0);
      MEMORY[0x18D789BDC](v151, 0x1093C402D7449D9);
    }
  }
  v152 = *v36;
  if (!*v36)
    goto LABEL_285;
  v153 = v418 + 8;
  while (2)
  {
    while (2)
    {
      v154 = *(char *)(v152 + 55);
      if (v154 >= 0)
        v155 = (const void *)(v152 + 32);
      else
        v155 = *(const void **)(v152 + 32);
      if (v154 >= 0)
        v156 = *(unsigned __int8 *)(v152 + 55);
      else
        v156 = *(_QWORD *)(v152 + 40);
      if (v156 >= 0xB)
        v157 = 11;
      else
        v157 = v156;
      v158 = memcmp("failureType", v155, v157);
      if (v158)
      {
        if (v158 < 0)
          break;
        goto LABEL_256;
      }
      if (v156 < 0xB)
      {
LABEL_256:
        v152 = *(_QWORD *)(v152 + 8);
        if (!v152)
          goto LABEL_271;
        continue;
      }
      break;
    }
    v153 = v152;
    v152 = *(_QWORD *)v152;
    if (v152)
      continue;
    break;
  }
LABEL_271:
  if ((uint64_t *)v153 == v36)
    goto LABEL_285;
  v159 = *(char *)(v153 + 55);
  if (v159 >= 0)
    v160 = (const void *)(v153 + 32);
  else
    v160 = *(const void **)(v153 + 32);
  if (v159 >= 0)
    v161 = *(unsigned __int8 *)(v153 + 55);
  else
    v161 = *(_QWORD *)(v153 + 40);
  if (v161 >= 0xB)
    v162 = 11;
  else
    v162 = v161;
  v163 = memcmp("failureType", v160, v162);
  if (v163)
  {
    if ((v163 & 0x80000000) == 0)
      goto LABEL_283;
LABEL_285:
    v164 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v161 > 0xB)
      goto LABEL_285;
LABEL_283:
    v164 = (uint64_t *)(v153 + 56);
  }
  LODWORD(v165) = *((_DWORD *)v164 + 6);
  if ((v165 - 1) <= 0xFFFFFFFD)
  {
    if ((_DWORD)v165 == -1)
      v165 = 0;
    else
      v165 = v165;
    __asm { BR              X10 }
  }
  LOBYTE(v464.__vftable) = 0;
  v469 = 0;
  v12 = v415;
  v166 = std::__optional_storage_base<AMSCore::Error,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::Error,false>>((std::runtime_error *)&ec.__cat_, &v464);
  if (v469)
  {
    v464.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v167 = (std::__shared_weak_count *)*((_QWORD *)&v468 + 1);
    if (*((_QWORD *)&v468 + 1))
    {
      v168 = (unint64_t *)(*((_QWORD *)&v468 + 1) + 8);
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v167->__on_zero_shared)(v167, v166);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v466, *((unsigned int **)&v466 + 1));
    MEMORY[0x18D7898AC](&v464);
  }
  v170 = (std::__shared_weak_count *)*((_QWORD *)&v459 + 1);
  v459 = *(_OWORD *)v420;
  if (v170)
  {
    v171 = (unint64_t *)&v170->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  *((_BYTE *)&v429.__ec_.__val_ + 7) = 13;
  strcpy((char *)&v429, "store-version");
  if (v174)
  {
    v175 = v173;
    AMSCore::getValueByKey<std::map<std::string,AMSCore::Any>,std::map<std::string,AMSCore::Any> const>((uint64_t)&v429, v173, "1.0", 3uLL);
    if ((_BYTE)v433)
      goto LABEL_308;
    AMSCore::getValueByKey<std::map<std::string,AMSCore::Any>,std::map<std::string,AMSCore::Any> const>((uint64_t)&v464, v175, "*", 1uLL);
    std::expected<std::reference_wrapper<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::operator=[abi:fe180100](&v429, &v464);
    if (!v469)
      ((void (*)(std::runtime_error *))v464.~runtime_error)(&v464);
    if ((_BYTE)v433)
    {
LABEL_308:
      v176 = v429.__vftable;
      v177 = &v176->~system_error_0 != (void (__cdecl **)(std::system_error *__hidden))std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>((uint64_t)v429.__vftable, "redirect-url");
    }
    else
    {
      ((void (*)(std::system_error *))v429.~system_error)(&v429);
      v177 = 0;
    }
  }
  else
  {
    v177 = 1;
  }
  LOBYTE(v460) = v177;
  v178 = (char *)operator new(0x98uLL);
  *((_QWORD *)v178 + 1) = 0;
  *((_QWORD *)v178 + 2) = 0;
  *(_QWORD *)v178 = &off_1E2522968;
  *(std::runtime_error *)(v178 + 24) = v453;
  *((_QWORD *)v178 + 5) = *(_QWORD *)&ec.__val_;
  v453.__vftable = 0;
  v453.__imp_.__imp_ = 0;
  *(_QWORD *)&ec.__val_ = 0;
  v178[48] = 0;
  v178[120] = 0;
  if ((_BYTE)v458)
  {
    std::runtime_error::runtime_error((std::runtime_error *)v178 + 3, (const std::runtime_error *)&ec.__cat_);
    v179 = *(_QWORD *)&v456[8];
    v180 = *(_QWORD *)v456;
    *((_QWORD *)v178 + 11) = *(_QWORD *)&v456[8];
    v181 = v178 + 88;
    *((_OWORD *)v178 + 4) = *(_OWORD *)&v455[8];
    *((_QWORD *)v178 + 6) = off_1E2521330;
    *((_QWORD *)v178 + 10) = v180;
    v182 = *(_QWORD *)&v456[16];
    *((_QWORD *)v178 + 12) = *(_QWORD *)&v456[16];
    if (v182)
    {
      *(_QWORD *)(v179 + 16) = v181;
      *(_QWORD *)v456 = &v456[8];
      *(_OWORD *)&v456[8] = 0uLL;
    }
    else
    {
      *((_QWORD *)v178 + 10) = v181;
    }
    *(_OWORD *)(v178 + 104) = v457;
    v457 = 0uLL;
    v178[120] = 1;
  }
  *((_OWORD *)v178 + 8) = v459;
  v459 = 0uLL;
  v178[144] = v460;
  *(_QWORD *)&v183 = v178 + 24;
  *((_QWORD *)&v183 + 1) = v178;
  *(_OWORD *)v415 = v183;
  v11[1072] = 1;
  AMSCore::FinanceResponse::~FinanceResponse((AMSCore::FinanceResponse *)&v453);
  v34 = (std::__shared_weak_count *)*((_QWORD *)v11 + 136);
  if (!v34)
    goto LABEL_319;
LABEL_316:
  v184 = (unint64_t *)&v34->__shared_owners_;
  do
    v185 = __ldaxr(v184);
  while (__stlxr(v185 - 1, v184));
  if (v185)
    goto LABEL_319;
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  if (v11[1072])
    goto LABEL_320;
LABEL_331:
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v464);
  v204 = v464.__vftable;
  if (SLODWORD(v464.~runtime_error_0) <= 4)
  {
    v205 = v14;
    v206 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v207 = (void *)(MEMORY[0x1E0DE4FE0] + 64);
    v208 = MEMORY[0x1E0DE4F60];
    v209 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v210 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    __p[0] = (void *)(MEMORY[0x1E0DE4FE0] + 64);
    v429.__vftable = v209;
    *(std::system_error_vtbl **)((char *)&v429.__vftable + (unint64_t)v209[-1].~system_error) = v210;
    v211 = (std::ios_base *)((char *)&v429 + (unint64_t)v429.__vftable[-1].~system_error);
    std::ios_base::init(v211, &v429.__imp_);
    v211[1].__vftable = 0;
    v211[1].__fmtflags_ = -1;
    v429.__vftable = v206 + 1;
    __p[0] = v207;
    std::streambuf::basic_streambuf();
    v212 = MEMORY[0x1E0DE4FB8];
    v429.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    v433 = 0u;
    v434 = 0u;
    v435 = 16;
    v213 = v429.__vftable[-1].~system_error;
    if ((v214 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v429, (uint64_t)"Failed to parse a Finance response. error = ", 44);
    AMSCore::operator<<(&v429, v12);
    v215 = v431;
    v216 = (char *)&v429 + (unint64_t)v429.__vftable[-1].~system_error;
    if ((v216[32] & 5) != 0)
    {
      v217 = -1;
    }
    else
    {
      (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v216 + 5)
                                                                                                 + 32))(&v453, *((_QWORD *)v216 + 5), 0, 1, 16);
      v217 = v461;
    }
    v453.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v453.__imp_.__imp_) = 4;
    *(_QWORD *)&ec.__val_ = v215;
    ec.__cat_ = (const std::error_category *)v217;
    (*(void (**)(const char *(__cdecl *)(const std::runtime_error *__hidden), const char *, uint64_t, std::runtime_error *))(*(_QWORD *)v204->what + 16))(v204->what, "networking", 10, &v453);
    v429.__vftable = *(std::system_error_vtbl **)v208;
    *(std::system_error_vtbl **)((char *)&v429.__vftable + (unint64_t)v429.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v208 + 24);
    v429.__imp_.__imp_ = (const char *)(v212 + 16);
    if (SBYTE7(v434) < 0)
      operator delete((void *)v433);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](__p);
    v14 = v205;
  }
  v285 = (std::__shared_weak_count *)v464.__imp_.__imp_;
  if (v464.__imp_.__imp_)
  {
    v286 = (unint64_t *)(v464.__imp_.__imp_ + 8);
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  LOBYTE(v429.__vftable) = 0;
  LOBYTE(v429.__ec_.__cat_) = 0;
  LOBYTE(v430) = 0;
  LOBYTE(v431) = 0;
  LOBYTE(v432) = 0;
  v437 = 0;
  LOBYTE(v438) = 0;
  v439 = 0;
  v440 = 0;
  v441 = 0;
  v442 = 0;
  v443 = 0;
  v444 = 0;
  v445 = 0;
  v446 = 0;
  v447 = 0;
  v448 = 0;
  v449 = 0;
  v450 = 0;
  v451 = 0;
  v452 = 1;
  v288 = (uint64_t)v409;
  if (v11[488])
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v409);
    v11[488] = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(v288, (uint64_t)&v429);
  v11[488] = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v429);
  if (!v11[1072])
  {
    (**(void (***)(uint64_t))v12)(v12);
    goto LABEL_464;
  }
  v289 = (std::__shared_weak_count *)*((_QWORD *)v11 + 126);
  if (!v289)
  {
LABEL_464:
    v291 = v410;
    goto LABEL_465;
  }
  v290 = (unint64_t *)&v289->__shared_owners_;
  v291 = v410;
  do
    v292 = __ldaxr(v290);
  while (__stlxr(v292 - 1, v290));
  if (!v292)
  {
    ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
    std::__shared_weak_count::__release_weak(v289);
  }
LABEL_465:
  v293 = v408;
  v294 = v411;
LABEL_611:
  *((_QWORD *)v11 + 148) = v294;
  *((_QWORD *)v11 + 147) = v14;
  *((_QWORD *)v11 + 67) = v293;
  *(_QWORD *)v11 = 0;
  AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v291);
}

void sub_18CC85410(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AMSCore::FinanceRequestHandler::handleResponse(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, std::runtime_error *a5@<X8>)
{
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  const std::runtime_error *v46;
  char v47;
  const char **v48;
  std::__libcpp_refstring *p_imp;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  const std::runtime_error *v54;
  std::runtime_error_vtbl *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  std::runtime_error_vtbl *v67;
  char v68;
  uint64_t v69;
  char *what;
  std::__shared_weak_count *imp;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::runtime_error v75;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int **v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  std::string::size_type v112;
  const std::string::value_type *v113;
  std::string *v114;
  std::runtime_error v115;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  const std::runtime_error *v120;
  char v121;
  std::runtime_error_vtbl *v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count **v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  std::runtime_error_vtbl *v137;
  _QWORD *v138;
  std::runtime_error_vtbl *v139;
  _QWORD *v140;
  uint64_t v141;
  __int128 v142;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  const std::runtime_error *v147;
  char v148;
  std::__libcpp_refstring *v149;
  const char **v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  unsigned int **v157;
  unint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  const std::runtime_error *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  int v177;
  uint64_t v178;
  unsigned int *v179;
  unsigned int *v180;
  unsigned int **v181;
  unint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  std::runtime_error_vtbl *v189;
  __int16 v190;
  uint64_t v191;
  char *p_what;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  __int128 v197;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  char v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  int v222;
  uint64_t *v223;
  uint64_t *v224;
  void *v225;
  uint64_t *v226;
  uint64_t *v227;
  std::runtime_error_vtbl *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  void **v236;
  void *v237;
  void **v238;
  __int128 v239;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  char v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  char *v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  __int128 v281;
  unint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  const AMSCore::HTTPResponse *v303;
  int v304;
  uint64_t v305;
  unint64_t AuthenticateRequestTypeForResponse;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t *v315;
  unint64_t v316;
  __int128 v317;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  __int128 v345;
  uint64_t v346;
  __int128 v347;
  unint64_t *v349;
  unint64_t v350;
  uint64_t v351;
  const std::runtime_error *v352;
  char v353;
  _QWORD *v354;
  uint64_t v355;
  _QWORD *v356;
  __int128 v357;
  unsigned int *v358;
  unsigned int **v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  void **v375;
  void *v376;
  uint64_t v377;
  void *v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  uint64_t v382;
  std::string *v383;
  std::string::size_type size;
  uint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t *v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t *v396;
  unint64_t v397;
  void *v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  void **v405;
  void *v406;
  uint64_t v407;
  void *v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  int v414;
  std::runtime_error_vtbl **v415;
  _QWORD *v416;
  uint64_t **v417;
  std::string *v418;
  char *v419;
  uint64_t **v420;
  _QWORD *v421;
  __int128 *v422;
  void **v423;
  __int128 *v424;
  AMSCore::HTTPResponseAction::RedirectContext *v425;
  _QWORD *v426;
  _QWORD *v427;
  char *v428;
  std::runtime_error *v429;
  _BYTE *v430;
  std::runtime_error *v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t v434;
  uint64_t *v435;
  uint64_t *v436;
  std::runtime_error *v437;
  char *v438;
  _QWORD *v439;
  char *v440;
  AMSCore::HTTPResponseAction *v441;
  _BYTE *v442;
  _QWORD *v443;
  _QWORD *v444;
  uint64_t v445;
  _OWORD *v446;
  char *v447;
  std::runtime_error *v448;
  std::string *v449;
  uint64_t v450;
  uint64_t v451;
  std::runtime_error *v452;
  AMSCore::IHTTPHeaderMap *v453[2];
  const AMSCore::IHTTPHeaderMap *v454;
  _BYTE __p[32];
  unsigned int **v456;
  unsigned int *v457;
  uint64_t v458;
  __int128 v459;
  char v460;
  std::string v461;
  char v462;
  std::runtime_error v463;
  __int128 v464;
  unsigned int **v465;
  unsigned int *v466;
  uint64_t v467;
  __int128 v468;
  unsigned __int8 v469;
  std::runtime_error v470;
  __int128 v471;
  unsigned int **v472;
  unsigned int *v473;
  uint64_t v474;
  __int128 v475;

  v10 = (char *)operator new(0x770uLL);
  v11 = (unint64_t)v10;
  *(_QWORD *)v10 = AMSCore::FinanceRequestHandler::handleResponse;
  *((_QWORD *)v10 + 1) = AMSCore::FinanceRequestHandler::handleResponse;
  *((_QWORD *)v10 + 221) = a1;
  v442 = v10 + 1896;
  v428 = v10 + 1248;
  v13 = *a2;
  v12 = a2[1];
  v451 = (uint64_t)(v10 + 536);
  v452 = (std::runtime_error *)(v10 + 1360);
  v422 = (__int128 *)(v10 + 1440);
  v423 = (void **)(v10 + 1480);
  v424 = (__int128 *)(v10 + 1504);
  v425 = (AMSCore::HTTPResponseAction::RedirectContext *)(v10 + 1000);
  v14 = v10 + 1528;
  v449 = (std::string *)(v10 + 1552);
  v447 = v10 + 1608;
  v426 = v10 + 1592;
  v427 = v10 + 1624;
  v443 = v10 + 1576;
  v444 = v10 + 1640;
  *((_QWORD *)v10 + 222) = *a2;
  *((_QWORD *)v10 + 223) = v12;
  v439 = v10 + 1672;
  v440 = v10 + 1688;
  *a2 = 0;
  a2[1] = 0;
  v16 = *a3;
  v15 = a3[1];
  *((_QWORD *)v10 + 224) = *a3;
  v433 = (uint64_t *)(v10 + 1720);
  v434 = (uint64_t)(v10 + 1704);
  v432 = (uint64_t)(v10 + 1736);
  *((_QWORD *)v10 + 225) = v15;
  v445 = (uint64_t)(v10 + 1656);
  v446 = v10 + 1752;
  v450 = (uint64_t)(v10 + 16);
  *a3 = 0;
  a3[1] = 0;
  *(_OWORD *)v453 = *(_OWORD *)a4;
  *((_OWORD *)v10 + 113) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  do
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v17 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v10[24] = 0;
  v10[488] = 0;
  *((_QWORD *)v10 + 62) = 0;
  v441 = (AMSCore::HTTPResponseAction *)(v10 + 24);
  *((_QWORD *)v10 + 66) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v463, v450);
  *a5 = v463;
  v18 = *((_QWORD *)v453[0] + 5);
  *(_QWORD *)(v11 + 1608) = v18;
  v19 = *((_QWORD *)v453[0] + 6);
  *(_QWORD *)(v11 + 1616) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  v22 = byte_18CF50830 + 2000;
  if (*((_BYTE *)v453[0] + 129))
  {
    *(_QWORD *)(v11 + 1688) = v13;
    *(_QWORD *)(v11 + 1696) = v12;
    if (v12)
    {
      v23 = (unint64_t *)(v12 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    *(_QWORD *)(v11 + 1672) = v16;
    *(_QWORD *)(v11 + 1680) = v15;
    if (v15)
    {
      v25 = (unint64_t *)(v15 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v438 = v14;
    if (*(char *)(v11 + 1551) < 0)
    {
      std::string::__init_copy_ctor_external(v449, *(const std::string::value_type **)(v11 + 1528), *(_QWORD *)(v11 + 1536));
    }
    else
    {
      *(_OWORD *)&v449->__r_.__value_.__l.__data_ = *(_OWORD *)v14;
      v449->__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
    }
    v27 = (char *)operator new(0x320uLL);
    v28 = (unint64_t)v27;
    *(_QWORD *)v27 = AMSCore::processFinanceCookieHeaders;
    *((_QWORD *)v27 + 1) = AMSCore::processFinanceCookieHeaders;
    v29 = *(_OWORD *)v440;
    v30 = (uint64_t)(v27 + 312);
    v448 = (std::runtime_error *)(v27 + 152);
    *((_QWORD *)v27 + 89) = *(_QWORD *)v440;
    v430 = v27 + 791;
    v431 = (std::runtime_error *)(v27 + 392);
    *(_OWORD *)(v27 + 600) = v29;
    v454 = (const AMSCore::IHTTPHeaderMap *)(v27 + 472);
    v420 = (uint64_t **)(v27 + 536);
    v417 = (uint64_t **)(v27 + 560);
    v418 = (std::string *)(v27 + 512);
    *(_QWORD *)v440 = 0;
    *((_QWORD *)v440 + 1) = 0;
    v436 = (uint64_t *)(v27 + 584);
    v437 = (std::runtime_error *)(v27 + 232);
    v31 = *(_QWORD *)(v11 + 1672);
    v32 = v27 + 616;
    v416 = v27 + 648;
    *((_QWORD *)v27 + 87) = v31;
    v415 = (std::runtime_error_vtbl **)(v27 + 664);
    v435 = (uint64_t *)(v27 + 680);
    v33 = *(_QWORD *)(v11 + 1680);
    v421 = v27 + 696;
    v34 = v27 + 784;
    *((_QWORD *)v27 + 88) = v33;
    v35 = v29;
    *v439 = 0;
    v439[1] = 0;
    *((_QWORD *)v27 + 90) = *(_QWORD *)(v11 + 1552);
    *((_QWORD *)v27 + 91) = *(_QWORD *)(v11 + 1560);
    v36 = *(_DWORD *)(v11 + 1568);
    *(_DWORD *)(v27 + 787) = *(_DWORD *)(v11 + 1571);
    *((_DWORD *)v27 + 196) = v36;
    v27[792] = *(_BYTE *)(v11 + 1575);
    v449->__r_.__value_.__r.__words[0] = 0;
    v449->__r_.__value_.__l.__size_ = 0;
    v449->__r_.__value_.__r.__words[2] = 0;
    do
      v37 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    while (__stlxr(v37 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
    v27[24] = 0;
    v27[104] = 0;
    *((_QWORD *)v27 + 14) = 0;
    v429 = (std::runtime_error *)(v27 + 24);
    *((_QWORD *)v27 + 18) = 0;
    v419 = v27 + 16;
    std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v463, (uint64_t)(v27 + 16));
    *v452 = v463;
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::unordered_multimap((uint64_t)v454, v35 + 160);
    AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(v435);
    v38 = *(_QWORD *)(v28 + 680);
    *(_QWORD *)(v28 + 616) = v31;
    *(_QWORD *)(v28 + 624) = v33;
    v14 = v438;
    if (v33)
    {
      v39 = (unint64_t *)(v33 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v38 + 40))(v38, v32);
    v41 = *(_OWORD *)(v28 + 152);
    *(_OWORD *)(v28 + 736) = v41;
    v448->__vftable = 0;
    v448->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)(v41 + 96)))
    {
      *v430 = 0;
      v43 = (unint64_t *)(*(_QWORD *)(v28 + 736) + 96);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v28, v43));
      if (!v44)
        goto LABEL_364;
    }
    v45 = *(_QWORD *)(v28 + 736);
    if (!*(_BYTE *)(v45 + 88))
      goto LABEL_647;
    v46 = (const std::runtime_error *)(v45 + 8);
    v47 = *(_BYTE *)(v45 + 80);
    if (v47)
    {
      *(_QWORD *)(v28 + 392) = *(_QWORD *)(v45 + 8);
      v48 = (const char **)(v28 + 400);
      p_imp = (std::__libcpp_refstring *)(v45 + 16);
    }
    else
    {
      std::runtime_error::runtime_error(v431, v46);
      *(_OWORD *)(v28 + 408) = *(_OWORD *)(v45 + 24);
      *(_QWORD *)(v28 + 392) = off_1E2521330;
      v50 = (_QWORD *)(v45 + 48);
      v51 = *(_QWORD *)(v45 + 48);
      v52 = v28 + 432;
      *(_QWORD *)(v28 + 424) = *(_QWORD *)(v45 + 40);
      *(_QWORD *)(v28 + 432) = v51;
      v53 = *(_QWORD *)(v45 + 56);
      *(_QWORD *)(v28 + 440) = v53;
      if (v53)
      {
        *(_QWORD *)(v51 + 16) = v52;
        *(_QWORD *)(v45 + 40) = v50;
        *v50 = 0;
        *(_QWORD *)(v45 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v28 + 424) = v52;
      }
      v54 = *(const std::runtime_error **)(v28 + 736);
      v55 = v54[4].__vftable;
      v46 = v54 + 4;
      *(_QWORD *)(v28 + 448) = v55;
      v48 = (const char **)(v28 + 456);
      p_imp = &v46->__imp_;
    }
    *v48 = p_imp->__imp_;
    v46->__vftable = 0;
    v46->__imp_.__imp_ = 0;
    *(_BYTE *)(v28 + 464) = v47;
    v56 = *(_QWORD *)(v28 + 744);
    if (v56)
    {
      v57 = (unint64_t *)(v56 + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        v59 = *(std::__shared_weak_count **)(v28 + 744);
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v60 = *(std::__shared_weak_count **)(v28 + 160);
    if (!v60)
      goto LABEL_41;
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      v63 = *(std::__shared_weak_count **)(v28 + 624);
      if (!v63)
        goto LABEL_45;
    }
    else
    {
LABEL_41:
      v63 = *(std::__shared_weak_count **)(v28 + 624);
      if (!v63)
        goto LABEL_45;
    }
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
      if (*(_BYTE *)(v28 + 464))
      {
LABEL_46:
        *(_QWORD *)__p = operator new(0x19uLL);
        *(_OWORD *)&__p[8] = xmmword_18CF51B20;
        strcpy(*(char **)__p, "X-Apple-Set-User-Cookie");
        v66 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v454, __p);
        if (v66)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove((uint64_t)&v463, v454, v66);
          v67 = v463.__vftable;
          v68 = 1;
        }
        else
        {
          v67 = 0;
          v68 = 0;
          *(_QWORD *)(v28 + 592) = 0;
        }
        *(_QWORD *)(v28 + 584) = v67;
        *(_BYTE *)(v28 + 593) = v68;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (v67)
        {
          if (SHIBYTE(v67[1].~runtime_error_0) < 0)
          {
            v67[1].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))10;
            what = (char *)v67->what;
          }
          else
          {
            what = (char *)&v67->what;
            HIBYTE(v67[1].~runtime_error_0) = 10;
          }
          strcpy(what, "Set-Cookie");
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(v454, (uint64_t)v67);
          *v436 = 0;
          if (v66)
            *(_BYTE *)(v28 + 593) = 0;
        }
        AMSCore::CookieUtils::parseResponseHeaderFields(v437, v454, *(const AMSCore::URL **)(v28 + 712));
        if (*(_BYTE *)(v28 + 304))
        {
          if (*(_QWORD *)(v28 + 232) != *(_QWORD *)(v28 + 240))
          {
            AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v463);
            AMSCore::Logger::log<char [33],std::vector<std::unique_ptr<AMSCore::HTTPCookie>>>((uint64_t)v463.__vftable, (uint64_t **)v437);
            imp = (std::__shared_weak_count *)v463.__imp_.__imp_;
            if (v463.__imp_.__imp_)
            {
              v72 = (unint64_t *)(v463.__imp_.__imp_ + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
                std::__shared_weak_count::__release_weak(imp);
              }
            }
            if (!*(_BYTE *)(v28 + 464) || !*(_BYTE *)(v28 + 304))
              goto LABEL_647;
            v74 = *(_QWORD *)(v28 + 392);
            *(_OWORD *)(v30 + 224) = *(_OWORD *)(v28 + 232);
            *(_QWORD *)(v28 + 552) = *(_QWORD *)(v28 + 248);
            v437->__vftable = 0;
            v437->__imp_.__imp_ = 0;
            v437[1].__vftable = 0;
            (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v74 + 24))(v74, v420);
            v75 = *(std::runtime_error *)v30;
            *(_OWORD *)(v28 + 752) = *(_OWORD *)v30;
            *(_QWORD *)v30 = 0;
            *(_QWORD *)(v30 + 8) = 0;
            if (!atomic_load((unint64_t *)&v75.__vftable[4]))
            {
              *v430 = 1;
              v77 = (unint64_t *)(*(_QWORD *)(v28 + 752) + 96);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v28, v77));
              if (!v78)
                goto LABEL_364;
            }
            v79 = *(_QWORD *)(v28 + 752);
            if (!*(_BYTE *)(v79 + 88))
              goto LABEL_647;
            v80 = *(_BYTE *)(v79 + 80);
            if (!v80)
            {
              std::runtime_error::runtime_error(v448, (const std::runtime_error *)(v79 + 8));
              *(_OWORD *)(v28 + 168) = *(_OWORD *)(v79 + 24);
              v81 = (_QWORD *)(v79 + 48);
              v82 = *(_QWORD *)(v79 + 48);
              *(_QWORD *)(v28 + 192) = v82;
              v83 = v28 + 192;
              *(_QWORD *)(v28 + 152) = off_1E2521330;
              *(_QWORD *)(v28 + 184) = *(_QWORD *)(v79 + 40);
              v84 = *(_QWORD *)(v79 + 56);
              *(_QWORD *)(v28 + 200) = v84;
              if (v84)
              {
                *(_QWORD *)(v82 + 16) = v83;
                *(_QWORD *)(v79 + 40) = v81;
                *v81 = 0;
                *(_QWORD *)(v79 + 56) = 0;
              }
              else
              {
                *(_QWORD *)(v28 + 184) = v83;
              }
              v96 = *(_QWORD *)(v28 + 752);
              *(_OWORD *)(v28 + 208) = *(_OWORD *)(v96 + 64);
              *(_QWORD *)(v96 + 64) = 0;
              *(_QWORD *)(v96 + 72) = 0;
            }
            *(_BYTE *)(v28 + 224) = v80;
            v97 = *(_QWORD *)(v28 + 760);
            if (v97)
            {
              v98 = (unint64_t *)(v97 + 8);
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                v100 = *(std::__shared_weak_count **)(v28 + 760);
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            v101 = *(std::__shared_weak_count **)(v28 + 320);
            if (v101)
            {
              v102 = (unint64_t *)&v101->__shared_owners_;
              do
                v103 = __ldaxr(v102);
              while (__stlxr(v103 - 1, v102));
              if (!v103)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            v104 = *v420;
            if (*v420)
            {
              v105 = *(uint64_t **)(v28 + 544);
              v106 = *v420;
              if (v105 != v104)
              {
                do
                  std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v105, 0);
                while (v105 != v104);
                v106 = *v420;
              }
              *(_QWORD *)(v28 + 544) = v104;
              operator delete(v106);
            }
            if (!*(_BYTE *)(v28 + 224))
            {
              AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v463);
              AMSCore::Logger::log<char [37],AMSCore::Error>((uint64_t)v463.__vftable, (uint64_t)"networking", 10, "Failed to set user cookies. error = ", (uint64_t)v448);
              v107 = (std::__shared_weak_count *)v463.__imp_.__imp_;
              if (v463.__imp_.__imp_)
              {
                v108 = (unint64_t *)(v463.__imp_.__imp_ + 8);
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v107);
                }
              }
              if (!*(_BYTE *)(v28 + 224))
                ((void (*)(std::runtime_error *))v448->~runtime_error)(v448);
            }
          }
        }
        else
        {
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v463);
          AMSCore::Logger::log<char [39],AMSCore::Error>((uint64_t)v463.__vftable, 4, (uint64_t)"networking", 10, "Failed to parse user cookies. error = ", (uint64_t)v437);
          v85 = (std::__shared_weak_count *)v463.__imp_.__imp_;
          if (v463.__imp_.__imp_)
          {
            v86 = (unint64_t *)(v463.__imp_.__imp_ + 8);
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
        }
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v421 + 96))(*v421) & 1) != 0)
        {
LABEL_250:
          BYTE7(v464) = 10;
          strcpy((char *)&v463, "Set-Cookie");
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v454, (char *)&v463);
          if (SBYTE7(v464) < 0)
            operator delete(v463.__vftable);
          __p[23] = 18;
          strcpy(__p, "X-Apple-Set-Cookie");
          v188 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v454, __p);
          if (v188)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove((uint64_t)&v463, v454, v188);
            v189 = v463.__vftable;
            v190 = 256;
          }
          else
          {
            v189 = 0;
            v190 = 0;
          }
          v191 = *v436;
          if (*v436)
          {
            if (!*(_BYTE *)(v28 + 593))
              goto LABEL_647;
            if (*(char *)(v191 + 63) < 0)
              operator delete(*(void **)(v191 + 40));
            if (*(char *)(v191 + 39) < 0)
              operator delete(*(void **)(v191 + 16));
            operator delete((void *)v191);
          }
          *(_QWORD *)(v28 + 584) = v189;
          *(_WORD *)(v28 + 592) = v190;
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            if (!v189)
            {
LABEL_271:
              AMSCore::CookieUtils::parseResponseHeaderFields((std::runtime_error *)v30, v454, *(const AMSCore::URL **)(v28 + 712));
              if (!*(_BYTE *)(v28 + 384))
              {
                AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v463);
                AMSCore::Logger::log<char [41],AMSCore::Error>((uint64_t)v463.__vftable, 4, (uint64_t)"networking", 10, "Failed to parse global cookies. error = ", v30);
                v207 = (std::__shared_weak_count *)v463.__imp_.__imp_;
                if (v463.__imp_.__imp_)
                {
                  v208 = (unint64_t *)(v463.__imp_.__imp_ + 8);
                  do
                    v209 = __ldaxr(v208);
                  while (__stlxr(v209 - 1, v208));
                  if (!v209)
                  {
                    ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                    std::__shared_weak_count::__release_weak(v207);
                  }
                }
                goto LABEL_318;
              }
              if (*(_QWORD *)(v28 + 312) == *(_QWORD *)(v28 + 320))
                goto LABEL_318;
              AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v463);
              AMSCore::Logger::log<char [35],std::vector<std::unique_ptr<AMSCore::HTTPCookie>>>((uint64_t)v463.__vftable, (uint64_t **)v30);
              v193 = (std::__shared_weak_count *)v463.__imp_.__imp_;
              if (v463.__imp_.__imp_)
              {
                v194 = (unint64_t *)(v463.__imp_.__imp_ + 8);
                do
                  v195 = __ldaxr(v194);
                while (__stlxr(v195 - 1, v194));
                if (!v195)
                {
                  ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                  std::__shared_weak_count::__release_weak(v193);
                }
              }
              if (!*(_BYTE *)(v28 + 464) || !*(_BYTE *)(v28 + 384))
                goto LABEL_647;
              v196 = *(_QWORD *)(v28 + 392);
              *(_OWORD *)(v28 + 560) = *(_OWORD *)v30;
              *(_QWORD *)(v28 + 576) = *(_QWORD *)(v28 + 328);
              *(_QWORD *)v30 = 0;
              *(_QWORD *)(v30 + 8) = 0;
              *(_QWORD *)(v30 + 16) = 0;
              (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v196 + 24))(v196, v417);
              v197 = *(_OWORD *)(v30 + 336);
              *v416 = 0;
              v416[1] = 0;
              *(_OWORD *)(v30 + 320) = v197;
              if (atomic_load((unint64_t *)(v197 + 96)))
                goto LABEL_284;
              *v430 = 4;
              v199 = (unint64_t *)(*(_QWORD *)(v28 + 632) + 96);
              do
                v200 = __ldaxr(v199);
              while (__stlxr(v28, v199));
              if (v200)
              {
LABEL_284:
                v201 = *(_QWORD *)(v30 + 320);
                if (!*(_BYTE *)(v201 + 88))
                  goto LABEL_647;
                v202 = *(_BYTE *)(v201 + 80);
                if (!v202)
                {
                  std::runtime_error::runtime_error(v448, (const std::runtime_error *)(v201 + 8));
                  *(_OWORD *)(v28 + 168) = *(_OWORD *)(v201 + 24);
                  v203 = (_QWORD *)(v201 + 48);
                  v204 = *(_QWORD *)(v201 + 48);
                  *(_QWORD *)(v28 + 192) = v204;
                  v205 = v28 + 192;
                  *(_QWORD *)(v28 + 152) = off_1E2521330;
                  *(_QWORD *)(v28 + 184) = *(_QWORD *)(v201 + 40);
                  v206 = *(_QWORD *)(v201 + 56);
                  *(_QWORD *)(v28 + 200) = v206;
                  if (v206)
                  {
                    *(_QWORD *)(v204 + 16) = v205;
                    *(_QWORD *)(v201 + 40) = v203;
                    *v203 = 0;
                    *(_QWORD *)(v201 + 56) = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v28 + 184) = v205;
                  }
                  *(_OWORD *)(v28 + 208) = *(_OWORD *)(v201 + 64);
                  *(_QWORD *)(v201 + 64) = 0;
                  *(_QWORD *)(v201 + 72) = 0;
                }
                *(_BYTE *)(v28 + 224) = v202;
                v210 = *(std::__shared_weak_count **)(v28 + 640);
                if (v210)
                {
                  v211 = (unint64_t *)&v210->__shared_owners_;
                  do
                    v212 = __ldaxr(v211);
                  while (__stlxr(v212 - 1, v211));
                  if (!v212)
                  {
                    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                    std::__shared_weak_count::__release_weak(v210);
                  }
                }
                v213 = *(std::__shared_weak_count **)(v28 + 656);
                if (v213)
                {
                  v214 = (unint64_t *)&v213->__shared_owners_;
                  do
                    v215 = __ldaxr(v214);
                  while (__stlxr(v215 - 1, v214));
                  if (!v215)
                  {
                    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                    std::__shared_weak_count::__release_weak(v213);
                  }
                }
                v216 = *v417;
                if (*v417)
                {
                  v217 = *(uint64_t **)(v28 + 568);
                  v218 = *v417;
                  if (v217 != v216)
                  {
                    do
                      std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v217, 0);
                    while (v217 != v216);
                    v218 = *v417;
                  }
                  *(_QWORD *)(v28 + 568) = v216;
                  operator delete(v218);
                }
                if (!*(_BYTE *)(v28 + 224))
                {
                  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v463);
                  AMSCore::Logger::log<char [39],AMSCore::Error>((uint64_t)v463.__vftable, 4, (uint64_t)"networking", 10, "Failed to set global cookies. error = ", (uint64_t)v448);
                  v219 = (std::__shared_weak_count *)v463.__imp_.__imp_;
                  if (v463.__imp_.__imp_)
                  {
                    v220 = (unint64_t *)(v463.__imp_.__imp_ + 8);
                    do
                      v221 = __ldaxr(v220);
                    while (__stlxr(v221 - 1, v220));
                    if (!v221)
                    {
                      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                      std::__shared_weak_count::__release_weak(v219);
                    }
                  }
                  if (!*(_BYTE *)(v28 + 224))
                    ((void (*)(std::runtime_error *))v448->~runtime_error)(v448);
                }
LABEL_318:
                v469 = 1;
                if (*(_BYTE *)(v28 + 104) && !*(_BYTE *)(v28 + 96))
                {
                  (**(void (***)(std::runtime_error *))(v28 + 24))(v429);
                  v222 = v469;
                  *(_BYTE *)(v28 + 104) = 0;
                  if (!v222)
                  {
                    std::runtime_error::runtime_error(v429, &v463);
                    v357 = v464;
                    v358 = v466;
                    v359 = v465;
                    *(_QWORD *)(v28 + 64) = v466;
                    v360 = v28 + 64;
                    *(_OWORD *)(v28 + 40) = v357;
                    *(_QWORD *)(v28 + 24) = off_1E2521330;
                    *(_QWORD *)(v28 + 56) = v359;
                    v361 = v467;
                    *(_QWORD *)(v28 + 72) = v467;
                    if (v361)
                    {
                      *((_QWORD *)v358 + 2) = v360;
                      v465 = &v466;
                      v466 = 0;
                      v467 = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v28 + 56) = v360;
                    }
                    *(_OWORD *)(v28 + 80) = v468;
                    v468 = 0uLL;
                    v414 = v469;
                    *(_BYTE *)(v28 + 96) = 0;
                    *(_BYTE *)(v28 + 104) = 1;
                    if (!v414)
                      ((void (*)(std::runtime_error *))v463.~runtime_error)(&v463);
                    goto LABEL_322;
                  }
                }
                else
                {
                  LOBYTE(v222) = 1;
                }
                *(_BYTE *)(v28 + 96) = v222;
                *(_BYTE *)(v28 + 104) = 1;
LABEL_322:
                v223 = *(uint64_t **)(v28 + 312);
                if (*(_BYTE *)(v28 + 384))
                {
                  if (v223)
                  {
                    v224 = *(uint64_t **)(v28 + 320);
                    v225 = *(void **)(v28 + 312);
                    if (v224 != v223)
                    {
                      do
                        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v224, 0);
                      while (v224 != v223);
                      v225 = *(void **)v30;
                    }
                    *(_QWORD *)(v28 + 320) = v223;
                    operator delete(v225);
                  }
                }
                else
                {
                  ((void (*)(uint64_t))*v223)(v30);
                }
                goto LABEL_329;
              }
LABEL_364:
              v239 = *(_OWORD *)(v11 + 1360);
              *(_OWORD *)(v11 + 1824) = v239;
              v452->__vftable = 0;
              v452->__imp_.__imp_ = 0;
              if (!atomic_load((unint64_t *)(v239 + 96)))
              {
                *v442 = 0;
                v241 = (unint64_t *)(*(_QWORD *)(v11 + 1824) + 96);
                do
                  v242 = __ldaxr(v241);
                while (__stlxr(v11, v241));
                if (!v242)
                  return;
              }
              v243 = *(_QWORD *)(v11 + 1824);
              if (!*(_BYTE *)(v243 + 88))
                goto LABEL_647;
              v244 = *(_BYTE *)(v243 + 80);
              if (!v244)
              {
                std::runtime_error::runtime_error((std::runtime_error *)v451, (const std::runtime_error *)(v243 + 8));
                *(_OWORD *)(v11 + 552) = *(_OWORD *)(v243 + 24);
                *(_QWORD *)(v11 + 536) = off_1E2521330;
                v245 = (_QWORD *)(v243 + 48);
                v246 = *(_QWORD *)(v243 + 48);
                *(_QWORD *)(v11 + 568) = *(_QWORD *)(v243 + 40);
                v247 = v11 + 576;
                *(_QWORD *)(v11 + 576) = v246;
                v248 = *(_QWORD *)(v243 + 56);
                *(_QWORD *)(v11 + 584) = v248;
                if (v248)
                {
                  *(_QWORD *)(v246 + 16) = v247;
                  *(_QWORD *)(v243 + 40) = v245;
                  *v245 = 0;
                  *(_QWORD *)(v243 + 56) = 0;
                }
                else
                {
                  *(_QWORD *)(v11 + 568) = v247;
                }
                v249 = *(_QWORD *)(v11 + 1824);
                *(_OWORD *)(v11 + 592) = *(_OWORD *)(v249 + 64);
                *(_QWORD *)(v249 + 64) = 0;
                *(_QWORD *)(v249 + 72) = 0;
              }
              *(_BYTE *)(v11 + 608) = v244;
              v250 = *(_QWORD *)(v11 + 1832);
              v22 = &byte_18CF50830[2000];
              if (!v250)
                goto LABEL_378;
              v251 = (unint64_t *)(v250 + 8);
              do
                v252 = __ldaxr(v251);
              while (__stlxr(v252 - 1, v251));
              if (!v252)
              {
                v265 = *(std::__shared_weak_count **)(v11 + 1832);
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
                v253 = *(std::__shared_weak_count **)(v11 + 1368);
                if (!v253)
                  goto LABEL_382;
              }
              else
              {
LABEL_378:
                v253 = *(std::__shared_weak_count **)(v11 + 1368);
                if (!v253)
                  goto LABEL_382;
              }
              v254 = (unint64_t *)&v253->__shared_owners_;
              do
                v255 = __ldaxr(v254);
              while (__stlxr(v255 - 1, v254));
              if (!v255)
              {
                ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                std::__shared_weak_count::__release_weak(v253);
                if ((*(char *)(v11 + 1575) & 0x80000000) == 0)
                  goto LABEL_384;
                goto LABEL_383;
              }
LABEL_382:
              if ((*(char *)(v11 + 1575) & 0x80000000) == 0)
              {
LABEL_384:
                v256 = *(std::__shared_weak_count **)(v11 + 1680);
                if (!v256)
                  goto LABEL_388;
                v257 = (unint64_t *)&v256->__shared_owners_;
                do
                  v258 = __ldaxr(v257);
                while (__stlxr(v258 - 1, v257));
                if (!v258)
                {
                  ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                  std::__shared_weak_count::__release_weak(v256);
                  v259 = *(std::__shared_weak_count **)(v11 + 1696);
                  if (!v259)
                    goto LABEL_392;
                }
                else
                {
LABEL_388:
                  v259 = *(std::__shared_weak_count **)(v11 + 1696);
                  if (!v259)
                    goto LABEL_392;
                }
                v260 = (unint64_t *)&v259->__shared_owners_;
                do
                  v261 = __ldaxr(v260);
                while (__stlxr(v261 - 1, v260));
                if (!v261)
                {
                  ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                  std::__shared_weak_count::__release_weak(v259);
                  if (*(_BYTE *)(v11 + 608))
                    goto LABEL_407;
                  goto LABEL_393;
                }
LABEL_392:
                if (*(_BYTE *)(v11 + 608))
                  goto LABEL_407;
LABEL_393:
                AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v463);
                AMSCore::Logger::log<char [41],AMSCore::Error>((uint64_t)v463.__vftable, 4, (uint64_t)"networking", 10, "Failed to process finance cookie headers", v451);
                v262 = (std::__shared_weak_count *)v463.__imp_.__imp_;
                if (v463.__imp_.__imp_)
                {
                  v263 = (unint64_t *)(v463.__imp_.__imp_ + 8);
                  do
                    v264 = __ldaxr(v263);
                  while (__stlxr(v264 - 1, v263));
                  if (!v264)
                  {
                    ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                    std::__shared_weak_count::__release_weak(v262);
                  }
                }
                if (!*(_BYTE *)(v11 + 608))
                  (**(void (***)(uint64_t))v451)(v451);
                goto LABEL_407;
              }
LABEL_383:
              operator delete(v449->__r_.__value_.__l.__data_);
              goto LABEL_384;
            }
          }
          else if (!v189)
          {
            goto LABEL_271;
          }
          if (SHIBYTE(v189[1].~runtime_error_0) < 0)
          {
            v189[1].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))10;
            p_what = (char *)v189->what;
          }
          else
          {
            p_what = (char *)&v189->what;
            HIBYTE(v189[1].~runtime_error_0) = 10;
          }
          strcpy(p_what, "Set-Cookie");
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(v454, (uint64_t)v189);
          *v436 = 0;
          if (v188)
            *(_BYTE *)(v28 + 593) = 0;
          goto LABEL_271;
        }
        v110 = *(char *)(v28 + 792);
        v111 = *(_QWORD *)(v28 + 680);
        v112 = *(_QWORD *)(v28 + 728);
        v113 = *(const std::string::value_type **)(v28 + 720);
        if (v110 < 0)
        {
          v114 = v418;
          std::string::__init_copy_ctor_external(v418, v113, v112);
        }
        else
        {
          *(_QWORD *)(v28 + 512) = v113;
          *(_QWORD *)(v28 + 520) = v112;
          *(_DWORD *)(v28 + 528) = *v34;
          *(_DWORD *)(v28 + 531) = *(_DWORD *)((char *)v34 + 3);
          *(_BYTE *)(v28 + 535) = v110;
          v114 = v418;
        }
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v111 + 48))(v111, v114);
        v115 = *(std::runtime_error *)v30;
        *(_OWORD *)(v28 + 768) = *(_OWORD *)v30;
        *(_QWORD *)v30 = 0;
        *(_QWORD *)(v30 + 8) = 0;
        if (!atomic_load((unint64_t *)&v115.__vftable[4]))
        {
          *v430 = 2;
          v117 = (unint64_t *)(*(_QWORD *)(v28 + 768) + 96);
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v28, v117));
          if (!v118)
            goto LABEL_364;
        }
        v119 = *(_QWORD *)(v28 + 768);
        if (!*(_BYTE *)(v119 + 88))
          goto LABEL_647;
        v120 = (const std::runtime_error *)(v119 + 8);
        v121 = *(_BYTE *)(v119 + 80);
        if (v121)
        {
          v122 = v120->__vftable;
          v120->__vftable = 0;
          v448->__vftable = v122;
        }
        else
        {
          std::runtime_error::runtime_error(v448, v120);
          *(_OWORD *)(v28 + 168) = *(_OWORD *)(v119 + 24);
          v123 = (_QWORD *)(v119 + 48);
          v124 = *(_QWORD *)(v119 + 48);
          *(_QWORD *)(v28 + 192) = v124;
          v125 = v28 + 192;
          *(_QWORD *)(v28 + 152) = off_1E2521330;
          *(_QWORD *)(v28 + 184) = *(_QWORD *)(v119 + 40);
          v126 = *(_QWORD *)(v119 + 56);
          *(_QWORD *)(v28 + 200) = v126;
          if (v126)
          {
            *(_QWORD *)(v124 + 16) = v125;
            *(_QWORD *)(v119 + 40) = v123;
            *v123 = 0;
            *(_QWORD *)(v119 + 56) = 0;
          }
          else
          {
            *(_QWORD *)(v28 + 184) = v125;
          }
          v127 = *(_QWORD *)(v28 + 768);
          *(_OWORD *)(v28 + 208) = *(_OWORD *)(v127 + 64);
          *(_QWORD *)(v127 + 64) = 0;
          *(_QWORD *)(v127 + 72) = 0;
        }
        v128 = (std::__shared_weak_count **)(v28 + 320);
        *(_BYTE *)(v28 + 224) = v121;
        v129 = *(_QWORD *)(v28 + 776);
        if (v129)
        {
          v130 = (unint64_t *)(v129 + 8);
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            v132 = *(std::__shared_weak_count **)(v28 + 776);
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        v133 = *v128;
        if (*v128)
        {
          v134 = (unint64_t *)&v133->__shared_owners_;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
        }
        if (*(char *)(v28 + 535) < 0)
        {
          operator delete(v418->__r_.__value_.__l.__data_);
          if (*(_BYTE *)(v28 + 224))
          {
LABEL_158:
            v136 = *v435;
            v137 = v448->__vftable;
            *v415 = v448->__vftable;
            if (v137)
            {
              v138 = (_QWORD *)operator new();
              v139 = v448->__vftable;
              *v138 = &off_1E2523180;
              v138[1] = 0;
              v138[2] = 0;
              v138[3] = v139;
            }
            else
            {
              v138 = 0;
            }
            *(_QWORD *)(v28 + 672) = v138;
            *(_QWORD *)(v28 + 152) = 0;
            (*(void (**)(uint64_t, std::runtime_error_vtbl **))(*(_QWORD *)v136 + 40))(v136, v415);
            v142 = *(_OWORD *)(v30 + 336);
            *v416 = 0;
            v416[1] = 0;
            *(_OWORD *)(v30 + 320) = v142;
            if (!atomic_load((unint64_t *)(v142 + 96)))
            {
              *v430 = 3;
              v144 = (unint64_t *)(*(_QWORD *)(v28 + 632) + 96);
              do
                v145 = __ldaxr(v144);
              while (__stlxr(v28, v144));
              if (!v145)
                goto LABEL_364;
            }
            v146 = *(_QWORD *)(v30 + 320);
            if (!*(_BYTE *)(v146 + 88))
              goto LABEL_647;
            v147 = (const std::runtime_error *)(v146 + 8);
            v148 = *(_BYTE *)(v146 + 80);
            if (v148)
            {
              *(_QWORD *)v30 = *(_QWORD *)(v146 + 8);
              v149 = (std::__libcpp_refstring *)(v146 + 16);
              v150 = (const char **)(v28 + 320);
            }
            else
            {
              std::runtime_error::runtime_error((std::runtime_error *)v30, v147);
              *(_OWORD *)(v28 + 328) = *(_OWORD *)(v146 + 24);
              *(_QWORD *)(v28 + 312) = off_1E2521330;
              v151 = (_QWORD *)(v146 + 48);
              v152 = *(_QWORD *)(v146 + 48);
              v153 = v28 + 352;
              *(_QWORD *)(v28 + 344) = *(_QWORD *)(v146 + 40);
              *(_QWORD *)(v28 + 352) = v152;
              v154 = *(_QWORD *)(v146 + 56);
              *(_QWORD *)(v28 + 360) = v154;
              if (v154)
              {
                *(_QWORD *)(v152 + 16) = v153;
                *(_QWORD *)(v146 + 40) = v151;
                *v151 = 0;
                *(_QWORD *)(v146 + 56) = 0;
              }
              else
              {
                *(_QWORD *)(v28 + 344) = v153;
              }
              v164 = *(_QWORD *)(v146 + 64);
              v163 = (const std::runtime_error *)(v146 + 64);
              *(_QWORD *)(v28 + 368) = v164;
              v150 = (const char **)(v28 + 376);
              v149 = &v163->__imp_;
              v147 = v163;
            }
            *v150 = v149->__imp_;
            v147->__vftable = 0;
            v147->__imp_.__imp_ = 0;
            *(_BYTE *)(v28 + 384) = v148;
            std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](v431, (std::runtime_error *)v30);
            if (*(_BYTE *)(v28 + 384))
            {
              v165 = *v128;
              if (*v128)
              {
                v166 = (unint64_t *)&v165->__shared_owners_;
                do
                  v167 = __ldaxr(v166);
                while (__stlxr(v167 - 1, v166));
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }
            }
            else
            {
              (**(void (***)(uint64_t))v30)(v30);
            }
            v168 = *(std::__shared_weak_count **)(v28 + 640);
            if (v168)
            {
              v169 = (unint64_t *)&v168->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            v171 = *(std::__shared_weak_count **)(v28 + 656);
            if (v171)
            {
              v172 = (unint64_t *)&v171->__shared_owners_;
              do
                v173 = __ldaxr(v172);
              while (__stlxr(v173 - 1, v172));
              if (!v173)
              {
                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                std::__shared_weak_count::__release_weak(v171);
              }
            }
            v174 = *(std::__shared_weak_count **)(v28 + 672);
            if (v174)
            {
              v175 = (unint64_t *)&v174->__shared_owners_;
              do
                v176 = __ldaxr(v175);
              while (__stlxr(v176 - 1, v175));
              if (!v176)
              {
                ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                std::__shared_weak_count::__release_weak(v174);
              }
            }
            if (*(_BYTE *)(v28 + 464))
            {
              v177 = 0;
              v469 = 0;
              goto LABEL_244;
            }
            std::runtime_error::runtime_error(&v463, v431);
            v464 = *(_OWORD *)(v28 + 408);
            v463.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v178 = *(_QWORD *)(v28 + 432);
            v465 = *(unsigned int ***)(v28 + 424);
            v466 = (unsigned int *)v178;
            v467 = *(_QWORD *)(v28 + 440);
            if (v467)
            {
              *(_QWORD *)(v178 + 16) = &v466;
              *(_QWORD *)(v28 + 424) = v28 + 432;
              *(_QWORD *)(v28 + 432) = 0;
              *(_QWORD *)(v28 + 440) = 0;
            }
            else
            {
              v465 = &v466;
            }
            v468 = *(_OWORD *)(v28 + 448);
            *(_QWORD *)(v28 + 448) = 0;
            *(_QWORD *)(v28 + 456) = 0;
            v469 = 1;
            std::runtime_error::runtime_error((std::runtime_error *)__p, &v463);
            *(_OWORD *)&__p[16] = v464;
            *(_QWORD *)__p = off_1E2521330;
            v456 = v465;
            v457 = v466;
            v458 = v467;
            if (v467)
            {
              *((_QWORD *)v466 + 2) = &v457;
              v465 = &v466;
              v466 = 0;
              v467 = 0;
            }
            else
            {
              v456 = &v457;
            }
            v459 = v468;
            v468 = 0uLL;
            std::runtime_error::runtime_error(&v470, (const std::runtime_error *)__p);
            v471 = *(_OWORD *)&__p[16];
            v179 = v457;
            v470.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v472 = v456;
            v473 = v457;
            v474 = v458;
            if (v458)
            {
              *((_QWORD *)v457 + 2) = &v473;
              v179 = 0;
              v456 = &v457;
              v457 = 0;
              v458 = 0;
            }
            else
            {
              v472 = &v473;
            }
            v475 = v459;
            v459 = 0uLL;
            *(_QWORD *)__p = off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v456, v179);
            MEMORY[0x18D7898AC](__p);
            if (*(_BYTE *)(v28 + 104))
            {
              if (!*(_BYTE *)(v28 + 96))
                ((void (*)(std::runtime_error *))v429->~runtime_error)(v429);
              *(_BYTE *)(v28 + 104) = 0;
            }
            std::runtime_error::runtime_error(v429, &v470);
            v181 = v472;
            v180 = v473;
            *(_QWORD *)(v28 + 64) = v473;
            v182 = v28 + 64;
            *(_OWORD *)(v28 + 40) = v471;
            *(_QWORD *)(v28 + 24) = off_1E2521330;
            *(_QWORD *)(v28 + 56) = v181;
            v183 = v474;
            *(_QWORD *)(v28 + 72) = v474;
            if (v183)
            {
              *((_QWORD *)v180 + 2) = v182;
              v180 = 0;
              v472 = &v473;
              v473 = 0;
              v474 = 0;
            }
            else
            {
              *(_QWORD *)(v28 + 56) = v182;
            }
            v14 = v438;
            *(_OWORD *)(v28 + 80) = v475;
            v475 = 0uLL;
            *(_BYTE *)(v28 + 96) = 0;
            *(_BYTE *)(v28 + 104) = 1;
            v470.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v472, v180);
            MEMORY[0x18D7898AC](&v470);
            if (v469)
            {
              v463.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v184 = (std::__shared_weak_count *)*((_QWORD *)&v468 + 1);
              if (*((_QWORD *)&v468 + 1))
              {
                v185 = (unint64_t *)(*((_QWORD *)&v468 + 1) + 8);
                do
                  v186 = __ldaxr(v185);
                while (__stlxr(v186 - 1, v185));
                if (!v186)
                {
                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                  std::__shared_weak_count::__release_weak(v184);
                }
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v465, v466);
              MEMORY[0x18D7898AC](&v463);
              v177 = 3;
LABEL_244:
              v187 = *(_QWORD *)(v28 + 152);
              if (*(_BYTE *)(v28 + 224))
              {
                v448->__vftable = 0;
                if (v187)
                  (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
                if (v177)
                {
LABEL_329:
                  v226 = *(uint64_t **)(v28 + 232);
                  if (*(_BYTE *)(v28 + 304))
                  {
                    if (v226)
                    {
                      v227 = *(uint64_t **)(v28 + 240);
                      v228 = *(std::runtime_error_vtbl **)(v28 + 232);
                      if (v227 != v226)
                      {
                        do
                          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v227, 0);
                        while (v227 != v226);
                        v228 = v437->__vftable;
                      }
                      *(_QWORD *)(v28 + 240) = v226;
                      operator delete(v228);
                    }
                  }
                  else
                  {
                    ((void (*)(std::runtime_error *))*v226)(v437);
                  }
                  v229 = *v436;
                  if (*v436)
                  {
                    if (!*(_BYTE *)(v28 + 593))
                      goto LABEL_647;
                    if (*(char *)(v229 + 63) < 0)
                      operator delete(*(void **)(v229 + 40));
                    if (*(char *)(v229 + 39) < 0)
                      operator delete(*(void **)(v229 + 16));
                    operator delete((void *)v229);
                  }
LABEL_343:
                  if (*(_BYTE *)(v28 + 464))
                  {
                    v230 = *(std::__shared_weak_count **)(v28 + 400);
                    if (v230)
                    {
                      v231 = (unint64_t *)&v230->__shared_owners_;
                      do
                        v232 = __ldaxr(v231);
                      while (__stlxr(v232 - 1, v231));
                      if (!v232)
                      {
                        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                        std::__shared_weak_count::__release_weak(v230);
                      }
                    }
                  }
                  else
                  {
                    ((void (*)(std::runtime_error *))v431->~runtime_error)(v431);
                  }
                  v233 = *(std::__shared_weak_count **)(v28 + 688);
                  if (v233)
                  {
                    v234 = (unint64_t *)&v233->__shared_owners_;
                    do
                      v235 = __ldaxr(v234);
                    while (__stlxr(v235 - 1, v234));
                    if (!v235)
                    {
                      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                      std::__shared_weak_count::__release_weak(v233);
                    }
                  }
                  v236 = *(void ***)(v28 + 488);
                  if (!v236)
                  {
LABEL_356:
                    v237 = *(void **)v454;
                    *(_QWORD *)v454 = 0;
                    if (v237)
                      operator delete(v237);
                    *(_QWORD *)(v28 + 152) = v419;
                    *(_QWORD *)v28 = 0;
                    *v430 = 5;
                    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v448);
                    goto LABEL_364;
                  }
                  while (1)
                  {
                    v238 = (void **)*v236;
                    if (*((char *)v236 + 63) < 0)
                    {
                      operator delete(v236[5]);
                      if (*((char *)v236 + 39) < 0)
                        goto LABEL_363;
                    }
                    else if (*((char *)v236 + 39) < 0)
                    {
LABEL_363:
                      operator delete(v236[2]);
                    }
                    operator delete(v236);
                    v236 = v238;
                    if (!v238)
                      goto LABEL_356;
                  }
                }
              }
              else
              {
                (*(void (**)(std::runtime_error *))v187)(v448);
                if (v177)
                  goto LABEL_329;
              }
              goto LABEL_250;
            }
LABEL_243:
            v177 = 3;
            goto LABEL_244;
          }
        }
        else if (*(_BYTE *)(v28 + 224))
        {
          goto LABEL_158;
        }
        std::runtime_error::runtime_error(&v463, v448);
        v140 = (_QWORD *)(v28 + 192);
        v141 = *(_QWORD *)(v28 + 192);
        v464 = *(_OWORD *)(v28 + 168);
        v463.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v465 = *(unsigned int ***)(v28 + 184);
        v466 = (unsigned int *)v141;
        v467 = *(_QWORD *)(v28 + 200);
        if (v467)
        {
          *(_QWORD *)(v141 + 16) = &v466;
          *(_QWORD *)(v28 + 184) = v140;
          *v140 = 0;
          *(_QWORD *)(v28 + 200) = 0;
        }
        else
        {
          v465 = &v466;
        }
        v468 = *(_OWORD *)(v28 + 208);
        *(_QWORD *)(v28 + 208) = 0;
        *(_QWORD *)(v28 + 216) = 0;
        v469 = 1;
        std::runtime_error::runtime_error((std::runtime_error *)__p, &v463);
        *(_OWORD *)&__p[16] = v464;
        *(_QWORD *)__p = off_1E2521330;
        v456 = v465;
        v457 = v466;
        v458 = v467;
        if (v467)
        {
          *((_QWORD *)v466 + 2) = &v457;
          v465 = &v466;
          v466 = 0;
          v467 = 0;
        }
        else
        {
          v456 = &v457;
        }
        v459 = v468;
        v468 = 0uLL;
        std::runtime_error::runtime_error(&v470, (const std::runtime_error *)__p);
        v471 = *(_OWORD *)&__p[16];
        v155 = v457;
        v470.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v472 = v456;
        v473 = v457;
        v474 = v458;
        if (v458)
        {
          *((_QWORD *)v457 + 2) = &v473;
          v155 = 0;
          v456 = &v457;
          v457 = 0;
          v458 = 0;
        }
        else
        {
          v472 = &v473;
        }
        v475 = v459;
        v459 = 0uLL;
        *(_QWORD *)__p = off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v456, v155);
        MEMORY[0x18D7898AC](__p);
        if (*(_BYTE *)(v28 + 104))
        {
          if (!*(_BYTE *)(v28 + 96))
            ((void (*)(std::runtime_error *))v429->~runtime_error)(v429);
          *(_BYTE *)(v28 + 104) = 0;
        }
        std::runtime_error::runtime_error(v429, &v470);
        v157 = v472;
        v156 = v473;
        *(_QWORD *)(v28 + 64) = v473;
        v158 = v28 + 64;
        *(_OWORD *)(v28 + 40) = v471;
        *(_QWORD *)(v28 + 24) = off_1E2521330;
        *(_QWORD *)(v28 + 56) = v157;
        v159 = v474;
        *(_QWORD *)(v28 + 72) = v474;
        if (v159)
        {
          *((_QWORD *)v156 + 2) = v158;
          v156 = 0;
          v472 = &v473;
          v473 = 0;
          v474 = 0;
        }
        else
        {
          *(_QWORD *)(v28 + 56) = v158;
        }
        v14 = v438;
        *(_OWORD *)(v28 + 80) = v475;
        v475 = 0uLL;
        *(_BYTE *)(v28 + 96) = 0;
        *(_BYTE *)(v28 + 104) = 1;
        v470.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v472, v156);
        MEMORY[0x18D7898AC](&v470);
        if (v469)
        {
          v463.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v160 = (std::__shared_weak_count *)*((_QWORD *)&v468 + 1);
          if (*((_QWORD *)&v468 + 1))
          {
            v161 = (unint64_t *)(*((_QWORD *)&v468 + 1) + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v465, v466);
          MEMORY[0x18D7898AC](&v463);
        }
        goto LABEL_243;
      }
LABEL_51:
      std::runtime_error::runtime_error(&v463, v431);
      v464 = *(_OWORD *)(v28 + 408);
      v463.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v69 = *(_QWORD *)(v28 + 432);
      v465 = *(unsigned int ***)(v28 + 424);
      v466 = (unsigned int *)v69;
      v467 = *(_QWORD *)(v28 + 440);
      if (v467)
      {
        *(_QWORD *)(v69 + 16) = &v466;
        *(_QWORD *)(v28 + 424) = v28 + 432;
        *(_QWORD *)(v28 + 432) = 0;
        *(_QWORD *)(v28 + 440) = 0;
      }
      else
      {
        v465 = &v466;
      }
      v468 = *(_OWORD *)(v28 + 448);
      *(_QWORD *)(v28 + 448) = 0;
      *(_QWORD *)(v28 + 456) = 0;
      v469 = 1;
      std::runtime_error::runtime_error((std::runtime_error *)__p, &v463);
      *(_OWORD *)&__p[16] = v464;
      *(_QWORD *)__p = off_1E2521330;
      v456 = v465;
      v457 = v466;
      v458 = v467;
      if (v467)
      {
        *((_QWORD *)v466 + 2) = &v457;
        v465 = &v466;
        v466 = 0;
        v467 = 0;
      }
      else
      {
        v456 = &v457;
      }
      v459 = v468;
      v468 = 0uLL;
      std::runtime_error::runtime_error(&v470, (const std::runtime_error *)__p);
      v471 = *(_OWORD *)&__p[16];
      v88 = v457;
      v470.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v472 = v456;
      v473 = v457;
      v474 = v458;
      if (v458)
      {
        *((_QWORD *)v457 + 2) = &v473;
        v88 = 0;
        v456 = &v457;
        v457 = 0;
        v458 = 0;
      }
      else
      {
        v472 = &v473;
      }
      v475 = v459;
      v459 = 0uLL;
      *(_QWORD *)__p = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v456, v88);
      MEMORY[0x18D7898AC](__p);
      if (*(_BYTE *)(v28 + 104))
      {
        if (!*(_BYTE *)(v28 + 96))
          ((void (*)(std::runtime_error *))v429->~runtime_error)(v429);
        *(_BYTE *)(v28 + 104) = 0;
      }
      std::runtime_error::runtime_error(v429, &v470);
      v90 = v472;
      v89 = v473;
      *(_QWORD *)(v28 + 64) = v473;
      v91 = v28 + 64;
      *(_OWORD *)(v28 + 40) = v471;
      *(_QWORD *)(v28 + 24) = off_1E2521330;
      *(_QWORD *)(v28 + 56) = v90;
      v92 = v474;
      *(_QWORD *)(v28 + 72) = v474;
      if (v92)
      {
        *((_QWORD *)v89 + 2) = v91;
        v89 = 0;
        v472 = &v473;
        v473 = 0;
        v474 = 0;
      }
      else
      {
        *(_QWORD *)(v28 + 56) = v91;
      }
      v14 = v438;
      *(_OWORD *)(v28 + 80) = v475;
      v475 = 0uLL;
      *(_BYTE *)(v28 + 96) = 0;
      *(_BYTE *)(v28 + 104) = 1;
      v470.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v472, v89);
      MEMORY[0x18D7898AC](&v470);
      if (v469)
      {
        v463.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v93 = (std::__shared_weak_count *)*((_QWORD *)&v468 + 1);
        if (*((_QWORD *)&v468 + 1))
        {
          v94 = (unint64_t *)(*((_QWORD *)&v468 + 1) + 8);
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v465, v466);
        MEMORY[0x18D7898AC](&v463);
      }
      goto LABEL_343;
    }
LABEL_45:
    if (*(_BYTE *)(v28 + 464))
      goto LABEL_46;
    goto LABEL_51;
  }
LABEL_407:
  v266 = (char *)operator new(0x19uLL);
  v267 = *(_QWORD *)(v11 + 1776);
  *(_QWORD *)__p = v266;
  *(_OWORD *)&__p[8] = *((_OWORD *)v22 + 178);
  strcpy(v266, "X-Set-Apple-Store-Front");
  AMSCore::IHTTPHeaderMap::getSingleValueOrNone((std::string *)&v463, (_QWORD *)(v267 + 160), __p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (BYTE8(v464))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(__p);
    AMSCore::Logger::log<char [46],std::string>(*(uint64_t *)__p, 2, (uint64_t)"networking", 10, "Received an updated storefront. storefront = ", (uint64_t)&v463);
    v268 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v269 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v270 = __ldaxr(v269);
      while (__stlxr(v270 - 1, v269));
      if (!v270)
      {
        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
        std::__shared_weak_count::__release_weak(v268);
      }
    }
    if (!BYTE8(v464))
      goto LABEL_647;
    if (SBYTE7(v464) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v463.__vftable, (std::string::size_type)v463.__imp_.__imp_);
    }
    else
    {
      *(std::runtime_error *)__p = v463;
      *(_QWORD *)&__p[16] = v464;
    }
    v271 = *(_QWORD *)(v11 + 1792);
    __p[24] = 1;
    (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v271 + 160))(v271, __p, v14);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (BYTE8(v464) && SBYTE7(v464) < 0)
      operator delete(v463.__vftable);
  }
  v272 = *(_QWORD *)(v11 + 1784);
  *(_QWORD *)(v11 + 1656) = *(_QWORD *)(v11 + 1776);
  *(_QWORD *)(v11 + 1664) = v272;
  if (v272)
  {
    v273 = (unint64_t *)(v272 + 8);
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
  }
  v275 = *(_QWORD *)(v11 + 1800);
  *(_QWORD *)(v11 + 1640) = *(_QWORD *)(v11 + 1792);
  *(_QWORD *)(v11 + 1648) = v275;
  if (v275)
  {
    v276 = (unint64_t *)(v275 + 8);
    do
      v277 = __ldxr(v276);
    while (__stxr(v277 + 1, v276));
  }
  v278 = *(_QWORD *)(v11 + 1816);
  *(_QWORD *)(v11 + 1576) = *(_QWORD *)(v11 + 1808);
  *(_QWORD *)(v11 + 1584) = v278;
  if (v278)
  {
    v279 = (unint64_t *)(v278 + 8);
    do
      v280 = __ldxr(v279);
    while (__stxr(v280 + 1, v279));
  }
  AMSCore::ExecuteHTTPRequestTask::IHandler::handleResponse(v452, v445, v444, v443);
  v281 = *(_OWORD *)(v11 + 1360);
  *(_OWORD *)(v11 + 1840) = v281;
  v452->__vftable = 0;
  v452->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v281 + 480)))
  {
    *v442 = 1;
    v283 = (unint64_t *)(*(_QWORD *)(v11 + 1840) + 480);
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v11, v283));
    if (!v284)
      return;
  }
  v285 = *(_QWORD *)(v11 + 1840);
  if (!*(_BYTE *)(v285 + 472))
    goto LABEL_647;
  AMSCore::HTTPResponseAction::HTTPResponseAction(v451, v285 + 8);
  v286 = *(_QWORD *)(v11 + 1848);
  if (v286)
  {
    v287 = (unint64_t *)(v286 + 8);
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      v289 = *(std::__shared_weak_count **)(v11 + 1848);
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }
  v290 = *(std::__shared_weak_count **)(v11 + 1368);
  if (v290)
  {
    v291 = (unint64_t *)&v290->__shared_owners_;
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  v293 = *(std::__shared_weak_count **)(v11 + 1584);
  if (v293)
  {
    v294 = (unint64_t *)&v293->__shared_owners_;
    do
      v295 = __ldaxr(v294);
    while (__stlxr(v295 - 1, v294));
    if (!v295)
    {
      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
      std::__shared_weak_count::__release_weak(v293);
    }
  }
  v296 = *(std::__shared_weak_count **)(v11 + 1648);
  if (v296)
  {
    v297 = (unint64_t *)&v296->__shared_owners_;
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  v299 = *(std::__shared_weak_count **)(v11 + 1664);
  if (v299)
  {
    v300 = (unint64_t *)&v299->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  if (*(_DWORD *)(v11 + 992) != 1)
  {
    v305 = (uint64_t)v441;
    if (*(_BYTE *)(v11 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v441);
      *(_BYTE *)(v11 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v305, v451);
    *(_BYTE *)(v11 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v451);
    goto LABEL_635;
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v451);
  v302 = *(_QWORD *)(v11 + 1776);
  if (*(_WORD *)(v302 + 152) == 401)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_18CF51B50;
    strcpy(*(char **)__p, "X-Apple-Allow-Auth-Types");
    AMSCore::IHTTPHeaderMap::getSingleValueOrNone((std::string *)&v463, (_QWORD *)(v302 + 160), __p);
    v304 = BYTE8(v464);
    if (BYTE8(v464) && SBYTE7(v464) < 0)
      operator delete(v463.__vftable);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      v302 = *(_QWORD *)(v11 + 1776);
      if (!v304)
        goto LABEL_478;
    }
    else
    {
      v302 = *(_QWORD *)(v11 + 1776);
      if (!v304)
        goto LABEL_478;
    }
    AuthenticateRequestTypeForResponse = AMSCore::FinanceResponse::getAuthenticateRequestTypeForResponse((AMSCore::FinanceResponse *)v302, v303);
    *(_QWORD *)(v11 + 1856) = AuthenticateRequestTypeForResponse;
    if (!HIDWORD(AuthenticateRequestTypeForResponse))
    {
      v302 = *(_QWORD *)(v11 + 1776);
      goto LABEL_478;
    }
    v342 = *(_QWORD *)(v11 + 1800);
    *(_QWORD *)(v11 + 1592) = *(_QWORD *)(v11 + 1792);
    *(_QWORD *)(v11 + 1600) = v342;
    if (v342)
    {
      v343 = (unint64_t *)(v342 + 8);
      do
        v344 = __ldxr(v343);
      while (__stxr(v344 + 1, v343));
    }
    v345 = *(_OWORD *)(v451 + 1056);
    *v426 = 0;
    v426[1] = 0;
    *(_BYTE *)(v11 + 600) = 0;
    *(_BYTE *)(v11 + 608) = 0;
    *(_BYTE *)(v11 + 632) = 0;
    *(_QWORD *)(v11 + 560) = 0;
    *(_QWORD *)(v11 + 552) = 0;
    *(_QWORD *)(v11 + 568) = 0;
    *(_BYTE *)(v11 + 576) = 0;
    *(_DWORD *)(v11 + 640) = AuthenticateRequestTypeForResponse;
    *(_OWORD *)(v11 + 1248) = v345;
    *(_BYTE *)(v11 + 1312) = 0;
    *(_OWORD *)v451 = 0u;
    *(_OWORD *)(v451 + 16) = 0u;
    *(_QWORD *)(v451 + 32) = 0;
    *(_QWORD *)(v11 + 1272) = 0;
    *(_QWORD *)(v11 + 1264) = 0;
    *(_BYTE *)(v11 + 1288) = 0;
    *(_QWORD *)(v11 + 1280) = 0;
    *(_BYTE *)(v11 + 1320) = 0;
    *(_BYTE *)(v11 + 1344) = 0;
    v346 = *(_QWORD *)(v11 + 1768);
    *(_DWORD *)(v11 + 1352) = AuthenticateRequestTypeForResponse;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v346 + 48))(v346, v428);
    v347 = *(_OWORD *)(v451 + 1088);
    *(_OWORD *)(v451 + 1328) = v347;
    *v427 = 0;
    v427[1] = 0;
    if (!atomic_load((unint64_t *)(v347 + 96)))
    {
      *v442 = 2;
      v349 = (unint64_t *)(*(_QWORD *)(v11 + 1864) + 96);
      do
        v350 = __ldaxr(v349);
      while (__stlxr(v11, v349));
      if (!v350)
        return;
    }
    v351 = *(_QWORD *)(v451 + 1328);
    if (!*(_BYTE *)(v351 + 88))
      goto LABEL_647;
    v352 = (const std::runtime_error *)(v351 + 8);
    v353 = *(_BYTE *)(v351 + 80);
    if (v353)
    {
      v355 = *(_QWORD *)(v351 + 24);
      v354 = (_QWORD *)(v351 + 24);
      *(_OWORD *)(v11 + 1360) = *((_OWORD *)v354 - 1);
      v352->__vftable = 0;
      v352->__imp_.__imp_ = 0;
      *(_QWORD *)(v11 + 1376) = v355;
      v356 = (_QWORD *)(v11 + 1384);
    }
    else
    {
      std::runtime_error::runtime_error(v452, v352);
      *(_OWORD *)(v11 + 1376) = *(_OWORD *)(v351 + 24);
      *(_QWORD *)(v11 + 1360) = off_1E2521330;
      v362 = (_QWORD *)(v351 + 48);
      v363 = *(_QWORD *)(v351 + 48);
      *(_QWORD *)(v11 + 1392) = *(_QWORD *)(v351 + 40);
      v364 = v11 + 1400;
      *(_QWORD *)(v11 + 1400) = v363;
      v365 = *(_QWORD *)(v351 + 56);
      *(_QWORD *)(v11 + 1408) = v365;
      if (v365)
      {
        *(_QWORD *)(v363 + 16) = v364;
        *(_QWORD *)(v351 + 40) = v362;
        *v362 = 0;
        *(_QWORD *)(v351 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v11 + 1392) = v364;
      }
      v366 = *(_QWORD *)(v11 + 1864);
      v367 = *(_QWORD *)(v366 + 64);
      v354 = (_QWORD *)(v366 + 64);
      *(_QWORD *)(v11 + 1416) = v367;
      v356 = (_QWORD *)(v11 + 1424);
    }
    *v356 = v354[1];
    *v354 = 0;
    v354[1] = 0;
    *(_BYTE *)(v11 + 1432) = v353;
    v368 = *(_QWORD *)(v11 + 1872);
    if (v368)
    {
      v369 = (unint64_t *)(v368 + 8);
      do
        v370 = __ldaxr(v369);
      while (__stlxr(v370 - 1, v369));
      if (!v370)
      {
        v371 = *(std::__shared_weak_count **)(v11 + 1872);
        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
        std::__shared_weak_count::__release_weak(v371);
      }
    }
    v372 = *(std::__shared_weak_count **)(v11 + 1632);
    if (v372)
    {
      v373 = (unint64_t *)&v372->__shared_owners_;
      do
        v374 = __ldaxr(v373);
      while (__stlxr(v374 - 1, v373));
      if (!v374)
      {
        ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
        std::__shared_weak_count::__release_weak(v372);
      }
    }
    if (*(_BYTE *)(v11 + 1344) && *(char *)(v11 + 1343) < 0)
      operator delete(*(void **)(v11 + 1320));
    v375 = (void **)(v11 + 1264);
    if (*(_BYTE *)(v11 + 1312) && *(char *)(v11 + 1311) < 0)
      operator delete(*(void **)(v11 + 1288));
    v376 = *v375;
    if (*v375)
    {
      v377 = *(_QWORD *)(v11 + 1272);
      v378 = *v375;
      if ((void *)v377 != v376)
      {
        do
        {
          v377 -= 272;
          std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v377);
        }
        while ((void *)v377 != v376);
        v378 = *v375;
      }
      *(_QWORD *)(v11 + 1272) = v376;
      operator delete(v378);
    }
    v379 = *(std::__shared_weak_count **)(v11 + 1256);
    if (v379)
    {
      v380 = (unint64_t *)&v379->__shared_owners_;
      do
        v381 = __ldaxr(v380);
      while (__stlxr(v381 - 1, v380));
      if (!v381)
      {
        ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
        std::__shared_weak_count::__release_weak(v379);
      }
    }
    if (*(_BYTE *)(v11 + 1432))
    {
      v382 = *(_QWORD *)(v11 + 1768);
      *(_DWORD *)(v382 + 8) = *(_QWORD *)(v11 + 1856);
      *(_BYTE *)(v382 + 12) = 1;
      BYTE7(v464) = 8;
      strcpy((char *)&v463, "Location");
      AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v461, (_QWORD *)(*(_QWORD *)(v11 + 1776) + 160), (char *)&v463);
      if (SBYTE7(v464) < 0)
        operator delete(v463.__vftable);
      if (v462)
      {
        if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v383 = &v461;
        else
          v383 = (std::string *)v461.__r_.__value_.__r.__words[0];
        if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v461.__r_.__value_.__r.__words[2]);
        else
          size = v461.__r_.__value_.__l.__size_;
        AMSCore::URL::parse((uint64_t)v383, size, (uint64_t)__p);
        if (!v460)
        {
          AMSCore::Error::Error<char [35],AMSCore::Error>((uint64_t)&v470, 301, (const std::error_category *)&AMSCore::Error::Category::network(void)::instance, (uint64_t)__p);
          AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v463, &v470);
          AMSCore::Task<AMSCore::HTTPResponseAction,void>::ValuePromise::return_value<AMSCore::HTTPResponseAction>(v450, (uint64_t)&v463);
          AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v463);
          AMSCore::Error::~Error((AMSCore::Error *)&v470);
        }
        AMSCore::URL::URL((uint64_t)v425, (__int128 *)__p);
        *(_BYTE *)(v11 + 1152) = 0;
        *(_BYTE *)(v11 + 1156) = 0;
        *(_BYTE *)(v11 + 1160) = 0;
        *(_BYTE *)(v11 + 1192) = 0;
        *(_BYTE *)(v11 + 1200) = 0;
        *(_BYTE *)(v11 + 1204) = 0;
        if (!*(_BYTE *)(v11 + 1432))
          goto LABEL_647;
        *(_QWORD *)(v11 + 1208) = *(_QWORD *)(v11 + 1360);
        v385 = *(_QWORD *)(v11 + 1368);
        *(_QWORD *)(v11 + 1216) = v385;
        if (v385)
        {
          v386 = (unint64_t *)(v385 + 8);
          do
            v387 = __ldxr(v386);
          while (__stxr(v387 + 1, v386));
        }
        *(_QWORD *)(v11 + 1224) = *(_QWORD *)(v11 + 1376);
        v388 = *(_QWORD *)(v11 + 1384);
        *(_QWORD *)(v11 + 1232) = v388;
        if (v388)
        {
          v389 = (unint64_t *)(v388 + 8);
          do
            v390 = __ldxr(v389);
          while (__stxr(v390 + 1, v389));
        }
        *(_BYTE *)(v11 + 1240) = 1;
        AMSCore::HTTPResponseAction::createRedirectAction((uint64_t)&v463, (uint64_t)v425);
        AMSCore::Task<AMSCore::HTTPResponseAction,void>::ValuePromise::return_value<AMSCore::HTTPResponseAction>(v450, (uint64_t)&v463);
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v463);
        AMSCore::HTTPResponseAction::RedirectContext::~RedirectContext(v425);
        if (v460)
          AMSCore::URL::~URL((AMSCore::URL *)__p);
        else
          (**(void (***)(_BYTE *))__p)(__p);
        if (v462 && SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0)
        {
          v398 = (void *)v461.__r_.__value_.__r.__words[0];
          goto LABEL_607;
        }
      }
      else
      {
        std::string::basic_string[abi:fe180100]<0>(v424, "authenticate");
        std::string::basic_string[abi:fe180100]<0>(v423, "authentication");
        if (!*(_BYTE *)(v11 + 1432))
          goto LABEL_647;
        *(_QWORD *)(v11 + 1440) = *(_QWORD *)(v11 + 1360);
        v392 = *(_QWORD *)(v11 + 1368);
        *(_QWORD *)(v11 + 1448) = v392;
        if (v392)
        {
          v393 = (unint64_t *)(v392 + 8);
          do
            v394 = __ldxr(v393);
          while (__stxr(v394 + 1, v393));
        }
        *(_QWORD *)(v11 + 1456) = *(_QWORD *)(v11 + 1376);
        v395 = *(_QWORD *)(v11 + 1384);
        *(_QWORD *)(v11 + 1464) = v395;
        if (v395)
        {
          v396 = (unint64_t *)(v395 + 8);
          do
            v397 = __ldxr(v396);
          while (__stxr(v397 + 1, v396));
        }
        *(_BYTE *)(v11 + 1472) = 1;
        AMSCore::HTTPResponseAction::createRetryAction((uint64_t)&v463, v424, (uint64_t)v423, v422);
        AMSCore::Task<AMSCore::HTTPResponseAction,void>::ValuePromise::return_value<AMSCore::HTTPResponseAction>(v450, (uint64_t)&v463);
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v463);
        std::optional<AMSCore::AuthenticateResult>::~optional((uint64_t)v422);
        if (*(char *)(v11 + 1503) < 0)
          operator delete(*v423);
        if (*(char *)(v11 + 1527) < 0)
        {
          v398 = *(void **)v424;
LABEL_607:
          operator delete(v398);
        }
      }
    }
    else
    {
      AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v463, v452);
      v391 = (uint64_t)v441;
      if (*(_BYTE *)(v11 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v441);
        *(_BYTE *)(v11 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v391, (uint64_t)&v463);
      *(_BYTE *)(v11 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v463);
    }
    if (*(_BYTE *)(v11 + 1432))
    {
      v399 = *(std::__shared_weak_count **)(v11 + 1384);
      if (v399)
      {
        v400 = (unint64_t *)&v399->__shared_owners_;
        do
          v401 = __ldaxr(v400);
        while (__stlxr(v401 - 1, v400));
        if (!v401)
        {
          ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
          std::__shared_weak_count::__release_weak(v399);
        }
      }
      v402 = *(std::__shared_weak_count **)(v11 + 1368);
      if (v402)
      {
        v403 = (unint64_t *)&v402->__shared_owners_;
        do
          v404 = __ldaxr(v403);
        while (__stlxr(v404 - 1, v403));
        if (!v404)
        {
          ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
          std::__shared_weak_count::__release_weak(v402);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v452->~runtime_error)(v452);
    }
    if (*(_BYTE *)(v11 + 632) && *(char *)(v11 + 631) < 0)
      operator delete(*(void **)(v11 + 608));
    v405 = (void **)(v11 + 552);
    if (*(_BYTE *)(v11 + 600) && *(char *)(v11 + 599) < 0)
      operator delete(*(void **)(v11 + 576));
    v406 = *v405;
    if (*v405)
    {
      v407 = *(_QWORD *)(v11 + 560);
      v408 = *v405;
      if ((void *)v407 != v406)
      {
        do
        {
          v407 -= 272;
          std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v407);
        }
        while ((void *)v407 != v406);
        v408 = *v405;
      }
      *(_QWORD *)(v11 + 560) = v406;
      operator delete(v408);
    }
    v339 = *(std::__shared_weak_count **)(v11 + 544);
    if (!v339)
      goto LABEL_635;
    v409 = (unint64_t *)&v339->__shared_owners_;
    do
      v410 = __ldaxr(v409);
    while (__stlxr(v410 - 1, v409));
    if (v410)
      goto LABEL_635;
LABEL_523:
    ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
    std::__shared_weak_count::__release_weak(v339);
LABEL_635:
    if (*(char *)(v11 + 1551) < 0)
      operator delete(*(void **)v14);
    v411 = *(std::__shared_weak_count **)(v11 + 1616);
    if (v411)
    {
      v412 = (unint64_t *)&v411->__shared_owners_;
      do
        v413 = __ldaxr(v412);
      while (__stlxr(v413 - 1, v412));
      if (!v413)
      {
        ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
        std::__shared_weak_count::__release_weak(v411);
      }
    }
    *(_QWORD *)(v11 + 536) = v450;
    *(_QWORD *)v11 = 0;
    AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((_BYTE *)v451);
    return;
  }
LABEL_478:
  v307 = *(_QWORD *)(v11 + 1784);
  *(_QWORD *)(v11 + 1704) = v302;
  *(_QWORD *)(v11 + 1712) = v307;
  if (v307)
  {
    v308 = (unint64_t *)(v307 + 8);
    do
      v309 = __ldxr(v308);
    while (__stxr(v309 + 1, v308));
  }
  v310 = *(_QWORD *)(v11 + 1800);
  *(_QWORD *)(v11 + 1720) = *(_QWORD *)(v11 + 1792);
  *(_QWORD *)(v11 + 1728) = v310;
  if (v310)
  {
    v311 = (unint64_t *)(v310 + 8);
    do
      v312 = __ldxr(v311);
    while (__stxr(v312 + 1, v311));
  }
  v313 = *(_QWORD *)(v11 + 1808);
  *(_QWORD *)(v11 + 1736) = *(_QWORD *)(v313 + 24);
  v314 = *(_QWORD *)(v313 + 32);
  *(_QWORD *)(v11 + 1744) = v314;
  if (v314)
  {
    v315 = (unint64_t *)(v314 + 8);
    do
      v316 = __ldxr(v315);
    while (__stxr(v316 + 1, v315));
  }
  *v446 = *(_OWORD *)v447;
  *(_QWORD *)v447 = 0;
  *((_QWORD *)v447 + 1) = 0;
  AMSCore::AnisetteUtils::handleActions(v452, v434, v433, v432, (uint64_t)v446);
  v317 = *(_OWORD *)(v11 + 1360);
  *(_OWORD *)(v451 + 1344) = v317;
  v452->__vftable = 0;
  v452->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v317 + 480)))
    goto LABEL_491;
  *v442 = 3;
  v319 = (unint64_t *)(*(_QWORD *)(v11 + 1880) + 480);
  do
    v320 = __ldaxr(v319);
  while (__stlxr(v11, v319));
  if (v320)
  {
LABEL_491:
    v321 = *(_QWORD *)(v451 + 1344);
    if (*(_BYTE *)(v321 + 472))
    {
      AMSCore::HTTPResponseAction::HTTPResponseAction(v451, v321 + 8);
      v322 = (uint64_t)v441;
      if (*(_BYTE *)(v11 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v441);
        *(_BYTE *)(v11 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v322, v451);
      *(_BYTE *)(v11 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v451);
      v323 = *(_QWORD *)(v11 + 1888);
      if (v323)
      {
        v324 = (unint64_t *)(v323 + 8);
        do
          v325 = __ldaxr(v324);
        while (__stlxr(v325 - 1, v324));
        if (!v325)
        {
          v326 = *(std::__shared_weak_count **)(v11 + 1888);
          ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
          std::__shared_weak_count::__release_weak(v326);
        }
      }
      v327 = *(std::__shared_weak_count **)(v11 + 1368);
      if (v327)
      {
        v328 = (unint64_t *)&v327->__shared_owners_;
        do
          v329 = __ldaxr(v328);
        while (__stlxr(v329 - 1, v328));
        if (!v329)
        {
          ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
          std::__shared_weak_count::__release_weak(v327);
        }
      }
      v330 = *(std::__shared_weak_count **)(v11 + 1760);
      if (v330)
      {
        v331 = (unint64_t *)&v330->__shared_owners_;
        do
          v332 = __ldaxr(v331);
        while (__stlxr(v332 - 1, v331));
        if (!v332)
        {
          ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
          std::__shared_weak_count::__release_weak(v330);
        }
      }
      v333 = *(std::__shared_weak_count **)(v11 + 1744);
      if (v333)
      {
        v334 = (unint64_t *)&v333->__shared_owners_;
        do
          v335 = __ldaxr(v334);
        while (__stlxr(v335 - 1, v334));
        if (!v335)
        {
          ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
          std::__shared_weak_count::__release_weak(v333);
        }
      }
      v336 = *(std::__shared_weak_count **)(v11 + 1728);
      if (v336)
      {
        v337 = (unint64_t *)&v336->__shared_owners_;
        do
          v338 = __ldaxr(v337);
        while (__stlxr(v338 - 1, v337));
        if (!v338)
        {
          ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
          std::__shared_weak_count::__release_weak(v336);
        }
      }
      v339 = *(std::__shared_weak_count **)(v11 + 1712);
      if (!v339)
        goto LABEL_635;
      v340 = (unint64_t *)&v339->__shared_owners_;
      do
        v341 = __ldaxr(v340);
      while (__stlxr(v341 - 1, v340));
      if (v341)
        goto LABEL_635;
      goto LABEL_523;
    }
LABEL_647:
    __break(1u);
  }
}

void sub_18CC886A4()
{
  uint64_t v0;

  AMSCore::Error::~Error((AMSCore::Error *)(v0 - 168));
}

void sub_18CC886B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,AMSCore::IHTTPHeaderMap *a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;
  void *v73;

  if (a72)
    AMSCore::URL::~URL((AMSCore::URL *)&a53);
  else
    (*(void (**)(void **))a53)(&a53);
  if (LOBYTE(STACK[0x218]) && SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::expected<AMSCore::AuthenticateResult,AMSCore::Error>::~expected[abi:fe180100](a50);
  AMSCore::AuthenticateRequestBuilder::~AuthenticateRequestBuilder(a49);
  if (*(char *)(v72 + 1551) < 0)
    operator delete(*a36);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a45);
  __cxa_begin_catch(v73);
  std::terminate();
}

_BYTE *AMSCore::FinanceRequestHandler::handleAuthentication@<X0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  __int128 v6;
  char *v7;
  unsigned int v8;
  unint64_t *v9;
  _QWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _BYTE *result;
  void (**v16)(_QWORD);
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  const std::runtime_error *v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count **v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *imp;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::runtime_error v36;
  __int128 v37;
  unsigned int **v38;
  unsigned int *v39;
  uint64_t v41;
  std::__shared_weak_count *v42;
  char v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x118uLL);
  v5 = v4;
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)a1;
  *(_QWORD *)v4 = AMSCore::FinanceRequestHandler::handleAuthentication;
  *((_QWORD *)v4 + 1) = AMSCore::FinanceRequestHandler::handleAuthentication;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(v4 + 168) = v6;
  *((_QWORD *)v4 + 23) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4[192] = 0;
  v4[216] = 0;
  if (*(_BYTE *)(a1 + 64))
  {
    *((_OWORD *)v4 + 12) = *(_OWORD *)(a1 + 40);
    *((_QWORD *)v4 + 26) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v4[216] = 1;
  }
  v7 = v4 + 16;
  v4[224] = 0;
  v4[248] = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    *((_OWORD *)v4 + 14) = *(_OWORD *)(a1 + 72);
    *((_QWORD *)v4 + 30) = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v4[248] = 1;
  }
  *((_DWORD *)v4 + 64) = *(_DWORD *)(a1 + 104);
  do
    v8 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v8 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_QWORD *)v4 + 14) = 0;
  v9 = (unint64_t *)(v4 + 112);
  v4[24] = 0;
  v4[104] = 0;
  *((_QWORD *)v4 + 18) = 0;
  v10 = (_QWORD *)operator new();
  *v10 = &off_1E2523490;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v7;
  *(_QWORD *)&v11 = v5 + 16;
  *((_QWORD *)&v11 + 1) = v10;
  *a2 = v11;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[46]>((uint64_t)&v36, 2u, "This handler does not perform authentication.");
  std::optional<std::expected<AMSCore::AuthenticateResult,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v5 + 24), &v36);
  v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v12 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, v39);
  result = (_BYTE *)MEMORY[0x18D7898AC](&v36);
  *((_QWORD *)v5 + 33) = v7;
  *(_QWORD *)v5 = 0;
  v5[272] = 0;
  do
    v16 = (void (**)(_QWORD))__ldaxr(v9);
  while (__stlxr(1uLL, v9));
  if (v16)
  {
    if (v16 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*((_QWORD *)v5 + 33) - 8))(*((_QWORD *)v5 + 33) - 16);
    v17 = *((_QWORD *)v5 + 33);
    v19 = *(_BYTE **)(v17 + 128);
    v18 = (_QWORD *)(v17 + 128);
    result = v19;
    if (v19)
    {
      if (result == (_BYTE *)(*((_QWORD *)v5 + 33) + 104))
      {
        v45 = v44;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v44);
      }
      else
      {
        v45 = result;
        *v18 = 0;
      }
    }
    else
    {
      v45 = 0;
    }
    if (v45)
    {
      v20 = *((_QWORD *)v5 + 33);
      if (!*(_BYTE *)(v20 + 88))
      {
        __break(1u);
        return result;
      }
      v21 = (const std::runtime_error *)(v20 + 8);
      v22 = *(_BYTE *)(v20 + 80);
      if (v22)
      {
        v24 = *(_QWORD *)(v20 + 24);
        v23 = (_QWORD *)(v20 + 24);
        v36 = (std::runtime_error)*((_OWORD *)v23 - 1);
        v21->__vftable = 0;
        v21->__imp_.__imp_ = 0;
        *(_QWORD *)&v37 = v24;
        v25 = (std::__shared_weak_count **)&v37 + 1;
      }
      else
      {
        std::runtime_error::runtime_error(&v36, v21);
        v26 = (_QWORD *)(v20 + 48);
        v27 = *(_QWORD *)(v20 + 48);
        v37 = *(_OWORD *)(v20 + 24);
        v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v38 = *(unsigned int ***)(v20 + 40);
        v39 = (unsigned int *)v27;
        if (*(_QWORD *)(v20 + 56))
        {
          *(_QWORD *)(v27 + 16) = &v39;
          *(_QWORD *)(v20 + 40) = v26;
          *v26 = 0;
          *(_QWORD *)(v20 + 56) = 0;
        }
        else
        {
          v38 = &v39;
        }
        v28 = *(_QWORD *)(v20 + 64);
        v23 = (_QWORD *)(v20 + 64);
        v41 = v28;
        v25 = &v42;
      }
      *v25 = (std::__shared_weak_count *)v23[1];
      *v23 = 0;
      v23[1] = 0;
      v43 = v22;
      if (!v45)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v45 + 48))(v45, &v36);
      if (v43)
      {
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
        if (*((_QWORD *)&v37 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        imp = (std::__shared_weak_count *)v36.__imp_.__imp_;
        if (v36.__imp_.__imp_)
        {
          v33 = (unint64_t *)(v36.__imp_.__imp_ + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v36.~runtime_error)(&v36);
      }
    }
    else
    {
      (*v16)(v16);
    }
    result = v45;
    if (v45 == v44)
    {
      v35 = 4;
      result = v44;
    }
    else
    {
      if (!v45)
        return result;
      v35 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v35))();
  }
  return result;
}

void sub_18CC88F54(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18CC88F5CLL);
  __cxa_end_catch();
  JUMPOUT(0x18CC88ECCLL);
}

void AMSCore::FinanceRequestHandler::handleAuthentication(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise::~Promise(a1 + 16);
  if (*(_BYTE *)(a1 + 248) && *(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  if (*(_BYTE *)(a1 + 216) && *(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    v4 = *(void **)(a1 + 168);
    if (v3 != v2)
    {
      do
      {
        v3 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v4);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 160);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete((void *)a1);
}

std::runtime_error *std::optional<std::expected<AMSCore::AuthenticateResult,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  std::__shared_weak_count *imp;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::runtime_error_vtbl *p_imp;
  const char *v11;
  std::runtime_error_vtbl *v12;
  std::runtime_error_vtbl *v13;

  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      imp = (std::__shared_weak_count *)this[1].__imp_.__imp_;
      if (imp)
      {
        p_shared_owners = (unint64_t *)&imp->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      v7 = (std::__shared_weak_count *)this->__imp_.__imp_;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  std::runtime_error::runtime_error(this, a2);
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  this[1] = a2[1];
  this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  this[2].__vftable = a2[2].__vftable;
  p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  v11 = a2[2].__imp_.__imp_;
  this[2].__imp_.__imp_ = v11;
  v12 = (std::runtime_error_vtbl *)&this[2].__imp_;
  v13 = a2[3].__vftable;
  this[3].__vftable = v13;
  if (v13)
  {
    *((_QWORD *)v11 + 2) = v12;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    this[2].__vftable = v12;
  }
  *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  LOBYTE(this[4].__imp_.__imp_) = 0;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

void AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise::unhandled_exception()
{
  std::runtime_error v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise::~Promise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v5 = *(std::__shared_weak_count **)(a1 + 32);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = *(std::__shared_weak_count **)(a1 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 8))(a1 + 8);
    }
  }
  do
  {
    v11 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v12)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_18AuthenticateResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_18AuthenticateResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_18AuthenticateResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_18AuthenticateResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::FinanceRequestHandler::handleResponse(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_18CC895EC()
{
  unint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  std::runtime_error *v8;
  uint64_t v9;
  std::runtime_error *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::runtime_error *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *size;
  unint64_t *v35;
  unint64_t v36;
  void **v37;
  char *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const AMSCore::HTTPResponse *v76;
  int v77;
  unint64_t AuthenticateRequestTypeForResponse;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 v89;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  const std::runtime_error *v123;
  char v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  std::string *v148;
  std::string::size_type v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  AMSCore::HTTPResponseAction *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  AMSCore::HTTPResponseAction *v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  __int128 v176;
  AMSCore::HTTPResponseAction *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  AMSCore::HTTPResponseAction *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  unint64_t *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  void **v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  __int128 *v206;
  _QWORD *v207;
  __int128 *v208;
  _BYTE *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  std::string *v214;
  std::string v215;
  char v216;
  std::string v217;
  char v218;
  __int128 v219;
  uint64_t v220;
  char v221;
  __int128 v222;
  uint64_t v223;
  char v224;
  int v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  char v231;
  std::runtime_error v232[2];
  unsigned int *v233[4];
  std::__shared_weak_count *v234;
  std::string v235;
  unsigned __int8 v236;
  char v237;
  char v238;
  char v239;
  char v240;
  char v241;
  char v242;
  char v243;
  char v244;
  char v245;
  char v246;
  char v247;
  char v248;
  __int128 v249;
  uint64_t v250;
  char v251;
  __int128 v252;
  uint64_t v253;
  char v254;
  _BYTE v255[40];
  int v256;

  v203 = v1;
  v10 = v8;
  v11 = v3;
  v12 = *(_QWORD *)(v0 + 1824);
  if (!*(_BYTE *)(v12 + 88))
    goto LABEL_320;
  v202 = v7;
  v13 = *(_BYTE *)(v12 + 80);
  if (!v13)
  {
    std::runtime_error::runtime_error((std::runtime_error *)v2, (const std::runtime_error *)(v12 + 8));
    *(_OWORD *)(v0 + 552) = *(_OWORD *)(v12 + 24);
    *(_QWORD *)(v0 + 536) = off_1E2521330;
    v14 = (_QWORD *)(v12 + 48);
    v15 = *(_QWORD *)(v12 + 48);
    *(_QWORD *)(v0 + 568) = *(_QWORD *)(v12 + 40);
    v16 = v0 + 576;
    *(_QWORD *)(v0 + 576) = v15;
    v17 = *(_QWORD *)(v12 + 56);
    *(_QWORD *)(v0 + 584) = v17;
    if (v17)
    {
      *(_QWORD *)(v15 + 16) = v16;
      *(_QWORD *)(v12 + 40) = v14;
      *v14 = 0;
      *(_QWORD *)(v12 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v0 + 568) = v16;
    }
    v18 = *(_QWORD *)(v0 + 1824);
    *(_OWORD *)(v0 + 592) = *(_OWORD *)(v18 + 64);
    *(_QWORD *)(v18 + 64) = 0;
    *(_QWORD *)(v18 + 72) = 0;
  }
  *(_BYTE *)(v0 + 608) = v13;
  v19 = *(_QWORD *)(v0 + 1832);
  v20 = v11;
  v21 = v10;
  if (v19)
  {
    v22 = (unint64_t *)(v19 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      v24 = *(std::__shared_weak_count **)(v0 + 1832);
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v25 = *(std::__shared_weak_count **)(v0 + 1368);
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (*(char *)(v0 + 1575) < 0)
    operator delete(*(void **)(v0 + 1552));
  v28 = *(std::__shared_weak_count **)(v0 + 1680);
  if (!v28)
    goto LABEL_23;
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = *(std::__shared_weak_count **)(v0 + 1696);
    if (!v31)
      goto LABEL_27;
  }
  else
  {
LABEL_23:
    v31 = *(std::__shared_weak_count **)(v0 + 1696);
    if (!v31)
      goto LABEL_27;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (*(_BYTE *)(v0 + 608))
      goto LABEL_38;
    goto LABEL_28;
  }
LABEL_27:
  if (*(_BYTE *)(v0 + 608))
    goto LABEL_38;
LABEL_28:
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v235);
  AMSCore::Logger::log<char [41],AMSCore::Error>((uint64_t)v235.__r_.__value_.__l.__data_, 4, (uint64_t)"networking", 10, "Failed to process finance cookie headers", v2);
  size = (std::__shared_weak_count *)v235.__r_.__value_.__l.__size_;
  if (v235.__r_.__value_.__l.__size_)
  {
    v35 = (unint64_t *)(v235.__r_.__value_.__l.__size_ + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (!*(_BYTE *)(v0 + 608))
    (**(void (***)(uint64_t))v2)(v2);
LABEL_38:
  v37 = v202;
  v38 = (char *)operator new(0x19uLL);
  v39 = *(_QWORD *)(v0 + 1776);
  v235.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  *(_OWORD *)((char *)v4 + 8) = xmmword_18CF51B20;
  strcpy(v38, "X-Set-Apple-Store-Front");
  AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v217, (_QWORD *)(v39 + 160), (char *)&v235);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v235.__r_.__value_.__l.__data_);
    if (!v218)
      goto LABEL_57;
  }
  else if (!v218)
  {
    goto LABEL_57;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v235);
  AMSCore::Logger::log<char [46],std::string>((uint64_t)v235.__r_.__value_.__l.__data_, 2, (uint64_t)"networking", 10, "Received an updated storefront. storefront = ", (uint64_t)&v217);
  v40 = (std::__shared_weak_count *)v235.__r_.__value_.__l.__size_;
  if (v235.__r_.__value_.__l.__size_)
  {
    v41 = (unint64_t *)(v235.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (!v218)
    goto LABEL_320;
  v37 = v202;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v235, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  }
  else
  {
    *v4 = *(_OWORD *)&v217.__r_.__value_.__l.__data_;
    v235.__r_.__value_.__r.__words[2] = v217.__r_.__value_.__r.__words[2];
  }
  v43 = *(_QWORD *)(v0 + 1792);
  v236 = 1;
  (*(void (**)(uint64_t, std::string *, void **))(*(_QWORD *)v43 + 160))(v43, &v235, v202);
  if (v236 && SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (v218 && SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
LABEL_57:
  v44 = *(_QWORD *)(v0 + 1784);
  *(_QWORD *)(v0 + 1656) = *(_QWORD *)(v0 + 1776);
  *(_QWORD *)(v0 + 1664) = v44;
  if (v44)
  {
    v45 = (unint64_t *)(v44 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = *(_QWORD *)(v0 + 1800);
  *(_QWORD *)(v0 + 1640) = *(_QWORD *)(v0 + 1792);
  *(_QWORD *)(v0 + 1648) = v47;
  if (v47)
  {
    v48 = (unint64_t *)(v47 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = *(_QWORD *)(v0 + 1816);
  *(_QWORD *)(v0 + 1576) = *(_QWORD *)(v0 + 1808);
  *(_QWORD *)(v0 + 1584) = v50;
  if (v50)
  {
    v51 = (unint64_t *)(v50 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  AMSCore::ExecuteHTTPRequestTask::IHandler::handleResponse(v10, v9, v6, v5);
  v53 = *(_OWORD *)(v0 + 1360);
  *(_OWORD *)(v0 + 1840) = v53;
  v10->__vftable = 0;
  v10->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v53 + 480)))
  {
    *v209 = 1;
    v55 = (unint64_t *)(*(_QWORD *)(v0 + 1840) + 480);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v0, v55));
    if (!v56)
      return;
  }
  v57 = *(_QWORD *)(v0 + 1840);
  if (!*(_BYTE *)(v57 + 472))
    goto LABEL_320;
  AMSCore::HTTPResponseAction::HTTPResponseAction(v2, v57 + 8);
  v58 = *(_QWORD *)(v0 + 1848);
  if (v58)
  {
    v59 = (unint64_t *)(v58 + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      v61 = *(std::__shared_weak_count **)(v0 + 1848);
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v62 = *(std::__shared_weak_count **)(v0 + 1368);
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = *(std::__shared_weak_count **)(v0 + 1584);
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *(std::__shared_weak_count **)(v0 + 1648);
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = *(std::__shared_weak_count **)(v0 + 1664);
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (*(_DWORD *)(v0 + 992) != 1)
  {
    if (*(_BYTE *)(v0 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v0 + 24));
      *(_BYTE *)(v0 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v0 + 24, v2);
    *(_BYTE *)(v0 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v2);
    if ((*(char *)(v0 + 1551) & 0x80000000) == 0)
      goto LABEL_311;
    goto LABEL_310;
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v2);
  v74 = *(_QWORD *)(v0 + 1776);
  if (*(_WORD *)(v74 + 152) == 401)
  {
    v75 = v20;
    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v217.__r_.__value_.__r.__words[1] = xmmword_18CF51B50;
    strcpy(v217.__r_.__value_.__l.__data_, "X-Apple-Allow-Auth-Types");
    AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v235, (_QWORD *)(v74 + 160), (char *)&v217);
    v77 = v236;
    if (v236 && SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v235.__r_.__value_.__l.__data_);
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);
    v74 = *(_QWORD *)(v0 + 1776);
    if (v77)
    {
      AuthenticateRequestTypeForResponse = AMSCore::FinanceResponse::getAuthenticateRequestTypeForResponse(*(AMSCore::FinanceResponse **)(v0 + 1776), v76);
      *(_QWORD *)(v0 + 1856) = AuthenticateRequestTypeForResponse;
      v20 = v75;
      if (!HIDWORD(AuthenticateRequestTypeForResponse))
      {
        v74 = *(_QWORD *)(v0 + 1776);
        goto LABEL_111;
      }
      v113 = *(_QWORD *)(v0 + 1800);
      *(_QWORD *)(v0 + 1592) = *(_QWORD *)(v0 + 1792);
      *(_QWORD *)(v0 + 1600) = v113;
      if (v113)
      {
        v114 = (unint64_t *)(v113 + 8);
        do
          v115 = __ldxr(v114);
        while (__stxr(v115 + 1, v114));
      }
      v116 = *(_OWORD *)(v2 + 1056);
      *v204 = 0;
      v204[1] = 0;
      *(_BYTE *)(v0 + 600) = 0;
      *(_BYTE *)(v0 + 608) = 0;
      *(_BYTE *)(v0 + 632) = 0;
      *(_QWORD *)(v0 + 560) = 0;
      *(_QWORD *)(v0 + 552) = 0;
      *(_QWORD *)(v0 + 568) = 0;
      *(_BYTE *)(v0 + 576) = 0;
      *(_DWORD *)(v0 + 640) = AuthenticateRequestTypeForResponse;
      *(_OWORD *)(v0 + 1248) = v116;
      *(_BYTE *)(v0 + 1312) = 0;
      *(_OWORD *)v2 = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
      *(_QWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v0 + 1272) = 0;
      *(_QWORD *)(v0 + 1264) = 0;
      *(_BYTE *)(v0 + 1288) = 0;
      *(_QWORD *)(v0 + 1280) = 0;
      *(_BYTE *)(v0 + 1320) = 0;
      *(_BYTE *)(v0 + 1344) = 0;
      v117 = *(_QWORD *)(v0 + 1768);
      *(_DWORD *)(v0 + 1352) = AuthenticateRequestTypeForResponse;
      (*(void (**)(uint64_t))(*(_QWORD *)v117 + 48))(v117);
      v118 = *(_QWORD *)(v0 + 1624);
      *(_QWORD *)(v0 + 1864) = v118;
      *(_QWORD *)(v0 + 1872) = *(_QWORD *)(v0 + 1632);
      *v205 = 0;
      v205[1] = 0;
      if (!atomic_load((unint64_t *)(v118 + 96)))
      {
        *v209 = 2;
        v120 = (unint64_t *)(*(_QWORD *)(v0 + 1864) + 96);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v0, v120));
        if (!v121)
          return;
      }
      v122 = *(_QWORD *)(v0 + 1864);
      if (!*(_BYTE *)(v122 + 88))
        goto LABEL_320;
      v123 = (const std::runtime_error *)(v122 + 8);
      v124 = *(_BYTE *)(v122 + 80);
      if (v124)
      {
        v126 = *(_QWORD *)(v122 + 24);
        v125 = (_QWORD *)(v122 + 24);
        *(_OWORD *)(v0 + 1360) = *((_OWORD *)v125 - 1);
        v123->__vftable = 0;
        v123->__imp_.__imp_ = 0;
        *(_QWORD *)(v0 + 1376) = v126;
        v127 = (_QWORD *)(v0 + 1384);
      }
      else
      {
        std::runtime_error::runtime_error(v21, v123);
        *(_OWORD *)(v0 + 1376) = *(_OWORD *)(v122 + 24);
        *(_QWORD *)(v0 + 1360) = off_1E2521330;
        v128 = (_QWORD *)(v122 + 48);
        v129 = *(_QWORD *)(v122 + 48);
        *(_QWORD *)(v0 + 1392) = *(_QWORD *)(v122 + 40);
        v130 = v0 + 1400;
        *(_QWORD *)(v0 + 1400) = v129;
        v131 = *(_QWORD *)(v122 + 56);
        *(_QWORD *)(v0 + 1408) = v131;
        if (v131)
        {
          *(_QWORD *)(v129 + 16) = v130;
          *(_QWORD *)(v122 + 40) = v128;
          *v128 = 0;
          *(_QWORD *)(v122 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v0 + 1392) = v130;
        }
        v132 = *(_QWORD *)(v0 + 1864);
        v133 = *(_QWORD *)(v132 + 64);
        v125 = (_QWORD *)(v132 + 64);
        *(_QWORD *)(v0 + 1416) = v133;
        v127 = (_QWORD *)(v0 + 1424);
      }
      *v127 = v125[1];
      *v125 = 0;
      v125[1] = 0;
      *(_BYTE *)(v0 + 1432) = v124;
      v134 = *(_QWORD *)(v0 + 1872);
      if (v134)
      {
        v135 = (unint64_t *)(v134 + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          v137 = *(std::__shared_weak_count **)(v0 + 1872);
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      v138 = *(std::__shared_weak_count **)(v0 + 1632);
      if (v138)
      {
        v139 = (unint64_t *)&v138->__shared_owners_;
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      if (*(_BYTE *)(v0 + 1344) && *(char *)(v0 + 1343) < 0)
        operator delete(*(void **)(v0 + 1320));
      if (*(_BYTE *)(v0 + 1312) && *(char *)(v0 + 1311) < 0)
        operator delete(*(void **)(v0 + 1288));
      v141 = *(_QWORD *)(v0 + 1264);
      if (v141)
      {
        v142 = *(_QWORD *)(v0 + 1272);
        v143 = *(void **)(v0 + 1264);
        if (v142 != v141)
        {
          do
          {
            v142 -= 272;
            std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v142);
          }
          while (v142 != v141);
          v143 = *(void **)(v0 + 1264);
        }
        *(_QWORD *)(v0 + 1272) = v141;
        operator delete(v143);
      }
      v144 = *(std::__shared_weak_count **)(v0 + 1256);
      if (!v144)
        goto LABEL_323;
      v145 = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
        if (*(_BYTE *)(v0 + 1432))
          goto LABEL_196;
      }
      else
      {
LABEL_323:
        if (*(_BYTE *)(v0 + 1432))
        {
LABEL_196:
          v147 = *(_QWORD *)(v0 + 1768);
          *(_DWORD *)(v147 + 8) = *(_QWORD *)(v0 + 1856);
          *(_BYTE *)(v147 + 12) = 1;
          *((_BYTE *)&v235.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&v235, "Location");
          AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v215, (_QWORD *)(*(_QWORD *)(v0 + 1776) + 160), (char *)&v235);
          if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v235.__r_.__value_.__l.__data_);
            if (v216)
            {
LABEL_198:
              if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v148 = &v215;
              else
                v148 = (std::string *)v215.__r_.__value_.__r.__words[0];
              if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v149 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
              else
                v149 = v215.__r_.__value_.__l.__size_;
              AMSCore::URL::parse((uint64_t)v148, v149, (uint64_t)&v217);
              if (v231)
              {
                *(_BYTE *)(v0 + 1000) = 0;
                *(_BYTE *)(v0 + 1024) = 0;
                if (v218)
                {
                  *v214 = v217;
                  memset(&v217, 0, sizeof(v217));
                  *(_BYTE *)(v0 + 1024) = 1;
                }
                *(_BYTE *)(v0 + 1032) = 0;
                *(_BYTE *)(v0 + 1056) = 0;
                if (v221)
                {
                  *(_OWORD *)(v0 + 1032) = v219;
                  *(_QWORD *)(v0 + 1048) = v220;
                  v220 = 0;
                  v219 = 0uLL;
                  *(_BYTE *)(v0 + 1056) = 1;
                }
                *(_BYTE *)(v0 + 1064) = 0;
                *(_BYTE *)(v0 + 1088) = 0;
                if (v224)
                {
                  *(_OWORD *)(v0 + 1064) = v222;
                  *(_QWORD *)(v0 + 1080) = v223;
                  v223 = 0;
                  v222 = 0uLL;
                  *(_BYTE *)(v0 + 1088) = 1;
                }
                *(_DWORD *)(v0 + 1096) = v225;
                *(_QWORD *)(v0 + 1104) = v0 + 1104;
                *(_QWORD *)(v0 + 1112) = v0 + 1104;
                *(_QWORD *)(v0 + 1120) = 0;
                if (v214 == &v217)
                  goto LABEL_320;
                v150 = v228;
                if (v228)
                {
                  v152 = v226;
                  v151 = v227;
                  v153 = *v227;
                  *(_QWORD *)(v153 + 8) = *(_QWORD *)(v226 + 8);
                  **(_QWORD **)(v152 + 8) = v153;
                  v154 = *(_QWORD *)(v0 + 1104);
                  *(_QWORD *)(v154 + 8) = v151;
                  *v151 = v154;
                  *(_QWORD *)(v0 + 1104) = v152;
                  *(_QWORD *)(v152 + 8) = v0 + 1104;
                  *(_QWORD *)(v0 + 1120) = v150;
                  v228 = 0;
                }
                *(_QWORD *)(v0 + 1144) = v230;
                *(_OWORD *)(v0 + 1128) = v229;
                v230 = 0;
                v229 = 0uLL;
                *(_BYTE *)(v0 + 1152) = 0;
                *(_BYTE *)(v0 + 1156) = 0;
                *(_BYTE *)(v0 + 1160) = 0;
                *(_BYTE *)(v0 + 1192) = 0;
                *(_BYTE *)(v0 + 1200) = 0;
                *(_BYTE *)(v0 + 1204) = 0;
                if (!*(_BYTE *)(v0 + 1432))
                  goto LABEL_320;
                *(_QWORD *)(v0 + 1208) = *(_QWORD *)(v0 + 1360);
                v155 = *(_QWORD *)(v0 + 1368);
                *(_QWORD *)(v0 + 1216) = v155;
                if (v155)
                {
                  v156 = (unint64_t *)(v155 + 8);
                  do
                    v157 = __ldxr(v156);
                  while (__stxr(v157 + 1, v156));
                }
                *(_QWORD *)(v0 + 1224) = *(_QWORD *)(v0 + 1376);
                v158 = *(_QWORD *)(v0 + 1384);
                *(_QWORD *)(v0 + 1232) = v158;
                if (v158)
                {
                  v159 = (unint64_t *)(v158 + 8);
                  do
                    v160 = __ldxr(v159);
                  while (__stxr(v160 + 1, v159));
                }
                *(_BYTE *)(v0 + 1240) = 1;
                AMSCore::HTTPResponseAction::createRedirectAction((uint64_t)&v235, (uint64_t)v214);
                v161 = (AMSCore::HTTPResponseAction *)(v0 + 24);
                if (*(_BYTE *)(v0 + 488))
                {
                  AMSCore::HTTPResponseAction::~HTTPResponseAction(v161);
                  *(_BYTE *)(v0 + 488) = 0;
                }
                AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v161, (uint64_t)&v235);
                *(_BYTE *)(v0 + 488) = 1;
                AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v235);
                if (*(_BYTE *)(v0 + 1240))
                {
                  v162 = *(std::__shared_weak_count **)(v0 + 1232);
                  if (v162)
                  {
                    v163 = (unint64_t *)&v162->__shared_owners_;
                    do
                      v164 = __ldaxr(v163);
                    while (__stlxr(v164 - 1, v163));
                    if (!v164)
                    {
                      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                      std::__shared_weak_count::__release_weak(v162);
                    }
                  }
                  v165 = *(std::__shared_weak_count **)(v0 + 1216);
                  if (v165)
                  {
                    v166 = (unint64_t *)&v165->__shared_owners_;
                    do
                      v167 = __ldaxr(v166);
                    while (__stlxr(v167 - 1, v166));
                    if (!v167)
                    {
                      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                      std::__shared_weak_count::__release_weak(v165);
                    }
                  }
                }
                if (*(_BYTE *)(v0 + 1192))
                {
                  v168 = *(unsigned int *)(v0 + 1184);
                  if ((_DWORD)v168 != -1)
                    ((void (*)(std::runtime_error *, unint64_t))off_1E253D240[v168])(v232, v0 + 1160);
                  *(_DWORD *)(v0 + 1184) = -1;
                }
                AMSCore::URL::~URL((AMSCore::URL *)v214);
                if (v231)
                {
LABEL_239:
                  AMSCore::URL::~URL((AMSCore::URL *)&v217);
                  if (!v216)
                    goto LABEL_282;
                  goto LABEL_279;
                }
              }
              else
              {
                AMSCore::Error::Error<char [35],AMSCore::Error>((uint64_t)v232, 301, (const std::error_category *)&AMSCore::Error::Category::network(void)::instance, (uint64_t)&v217);
                AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v235, v232);
                v185 = (AMSCore::HTTPResponseAction *)(v0 + 24);
                if (*(_BYTE *)(v0 + 488))
                {
                  AMSCore::HTTPResponseAction::~HTTPResponseAction(v185);
                  *(_BYTE *)(v0 + 488) = 0;
                }
                AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v185, (uint64_t)&v235);
                *(_BYTE *)(v0 + 488) = 1;
                AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v235);
                v232[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v186 = v234;
                if (v234)
                {
                  v187 = (unint64_t *)&v234->__shared_owners_;
                  do
                    v188 = __ldaxr(v187);
                  while (__stlxr(v188 - 1, v187));
                  if (!v188)
                  {
                    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                    std::__shared_weak_count::__release_weak(v186);
                  }
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v233, v233[1]);
                MEMORY[0x18D7898AC](v232);
                if (v231)
                  goto LABEL_239;
              }
              (*(void (**)(std::string *))v217.__r_.__value_.__l.__data_)(&v217);
              if (!v216)
                goto LABEL_282;
LABEL_279:
              if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_282;
              v184 = (void *)v215.__r_.__value_.__r.__words[0];
              goto LABEL_281;
            }
          }
          else if (v216)
          {
            goto LABEL_198;
          }
          *(_BYTE *)(v0 + 1527) = 12;
          *((_DWORD *)v208 + 2) = 1702125923;
          *(_QWORD *)v208 = *(_QWORD *)"authenticate";
          *(_BYTE *)(v0 + 1516) = 0;
          *(_BYTE *)(v0 + 1503) = 14;
          qmemcpy(v207, "authentication", 14);
          *(_BYTE *)(v0 + 1494) = 0;
          if (!*(_BYTE *)(v0 + 1432))
            goto LABEL_320;
          *(_QWORD *)(v0 + 1440) = *(_QWORD *)(v0 + 1360);
          v170 = *(_QWORD *)(v0 + 1368);
          *(_QWORD *)(v0 + 1448) = v170;
          if (v170)
          {
            v171 = (unint64_t *)(v170 + 8);
            do
              v172 = __ldxr(v171);
            while (__stxr(v172 + 1, v171));
          }
          *(_QWORD *)(v0 + 1456) = *(_QWORD *)(v0 + 1376);
          v173 = *(_QWORD *)(v0 + 1384);
          *(_QWORD *)(v0 + 1464) = v173;
          if (v173)
          {
            v174 = (unint64_t *)(v173 + 8);
            do
              v175 = __ldxr(v174);
            while (__stxr(v175 + 1, v174));
          }
          *(_BYTE *)(v0 + 1472) = 1;
          v235.__r_.__value_.__s.__data_[0] = 0;
          v236 = 0;
          v237 = 0;
          v238 = 0;
          v239 = 0;
          v240 = 0;
          v241 = 0;
          v242 = 0;
          v243 = 0;
          v244 = 0;
          v245 = 0;
          v246 = 0;
          v247 = 0;
          v248 = 0;
          v255[0] = 0;
          v255[32] = 0;
          v256 = 3;
          v176 = *v208;
          v250 = *((_QWORD *)v208 + 2);
          v249 = v176;
          *(_QWORD *)v208 = 0;
          *((_QWORD *)v208 + 1) = 0;
          *((_QWORD *)v208 + 2) = 0;
          v251 = 1;
          v252 = *(_OWORD *)v207;
          v253 = v207[2];
          *v207 = 0;
          v207[1] = 0;
          v207[2] = 0;
          v254 = 1;
          std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v255, v206);
          v177 = (AMSCore::HTTPResponseAction *)(v0 + 24);
          if (*(_BYTE *)(v0 + 488))
          {
            AMSCore::HTTPResponseAction::~HTTPResponseAction(v177);
            *(_BYTE *)(v0 + 488) = 0;
          }
          AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v177, (uint64_t)&v235);
          *(_BYTE *)(v0 + 488) = 1;
          AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v235);
          if (*(_BYTE *)(v0 + 1472))
          {
            v178 = *(std::__shared_weak_count **)(v0 + 1464);
            if (v178)
            {
              v179 = (unint64_t *)&v178->__shared_owners_;
              do
                v180 = __ldaxr(v179);
              while (__stlxr(v180 - 1, v179));
              if (!v180)
              {
                ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                std::__shared_weak_count::__release_weak(v178);
              }
            }
            v181 = *(std::__shared_weak_count **)(v0 + 1448);
            if (v181)
            {
              v182 = (unint64_t *)&v181->__shared_owners_;
              do
                v183 = __ldaxr(v182);
              while (__stlxr(v183 - 1, v182));
              if (!v183)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
              }
            }
          }
          if (*(char *)(v0 + 1503) < 0)
            operator delete((void *)*v207);
          if (*(char *)(v0 + 1527) < 0)
          {
            v184 = *(void **)v208;
LABEL_281:
            operator delete(v184);
          }
LABEL_282:
          if (*(_BYTE *)(v0 + 1432))
          {
            v189 = *(std::__shared_weak_count **)(v0 + 1384);
            if (v189)
            {
              v190 = (unint64_t *)&v189->__shared_owners_;
              do
                v191 = __ldaxr(v190);
              while (__stlxr(v191 - 1, v190));
              if (!v191)
              {
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v189);
              }
            }
            v192 = *(std::__shared_weak_count **)(v0 + 1368);
            if (v192)
            {
              v193 = (unint64_t *)&v192->__shared_owners_;
              do
                v194 = __ldaxr(v193);
              while (__stlxr(v194 - 1, v193));
              if (!v194)
              {
                ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                std::__shared_weak_count::__release_weak(v192);
              }
            }
          }
          else
          {
            ((void (*)(std::runtime_error *))v21->~runtime_error)(v21);
          }
          if (*(_BYTE *)(v0 + 632) && *(char *)(v0 + 631) < 0)
            operator delete(*(void **)(v0 + 608));
          if (*(_BYTE *)(v0 + 600) && *(char *)(v0 + 599) < 0)
            operator delete(*(void **)(v0 + 576));
          v195 = *(_QWORD *)(v0 + 552);
          if (v195)
          {
            v196 = *(_QWORD *)(v0 + 560);
            v197 = *(void **)(v0 + 552);
            if (v196 != v195)
            {
              do
              {
                v196 -= 272;
                std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v196);
              }
              while (v196 != v195);
              v197 = *(void **)(v0 + 552);
            }
            *(_QWORD *)(v0 + 560) = v195;
            operator delete(v197);
          }
          v110 = *(std::__shared_weak_count **)(v0 + 544);
          v20 = v75;
          if (v110)
          {
            v198 = (unint64_t *)&v110->__shared_owners_;
            do
              v112 = __ldaxr(v198);
            while (__stlxr(v112 - 1, v198));
LABEL_308:
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
              if ((*(char *)(v0 + 1551) & 0x80000000) == 0)
                goto LABEL_311;
              goto LABEL_310;
            }
          }
LABEL_309:
          if ((*(char *)(v0 + 1551) & 0x80000000) == 0)
          {
LABEL_311:
            v199 = *(std::__shared_weak_count **)(v0 + 1616);
            if (v199)
            {
              v200 = (unint64_t *)&v199->__shared_owners_;
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
            *(_QWORD *)(v0 + 536) = v20;
            *(_QWORD *)v0 = 0;
            AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((_BYTE *)v2);
            return;
          }
LABEL_310:
          operator delete(*v37);
          goto LABEL_311;
        }
      }
      AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v235, v21);
      v169 = (AMSCore::HTTPResponseAction *)(v0 + 24);
      if (*(_BYTE *)(v0 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v169);
        *(_BYTE *)(v0 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v169, (uint64_t)&v235);
      *(_BYTE *)(v0 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v235);
      goto LABEL_282;
    }
    v20 = v75;
  }
LABEL_111:
  v79 = *(_QWORD *)(v0 + 1784);
  *(_QWORD *)(v0 + 1704) = v74;
  *(_QWORD *)(v0 + 1712) = v79;
  if (v79)
  {
    v80 = (unint64_t *)(v79 + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v82 = *(_QWORD *)(v0 + 1800);
  *(_QWORD *)(v0 + 1720) = *(_QWORD *)(v0 + 1792);
  *(_QWORD *)(v0 + 1728) = v82;
  if (v82)
  {
    v83 = (unint64_t *)(v82 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  v85 = *(_QWORD *)(v0 + 1808);
  *(_QWORD *)(v0 + 1736) = *(_QWORD *)(v85 + 24);
  v86 = *(_QWORD *)(v85 + 32);
  *(_QWORD *)(v0 + 1744) = v86;
  if (v86)
  {
    v87 = (unint64_t *)(v86 + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  *(_QWORD *)(v0 + 1752) = *(_QWORD *)(v0 + 1608);
  *(_QWORD *)(v0 + 1760) = *(_QWORD *)(v0 + 1616);
  *v203 = 0;
  v203[1] = 0;
  AMSCore::AnisetteUtils::handleActions(v10, v213, v212, v211, v210);
  v89 = *(_OWORD *)(v0 + 1360);
  *(_OWORD *)(v2 + 1344) = v89;
  v10->__vftable = 0;
  v10->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v89 + 480)))
    goto LABEL_124;
  *v209 = 3;
  v91 = (unint64_t *)(*(_QWORD *)(v0 + 1880) + 480);
  do
    v92 = __ldaxr(v91);
  while (__stlxr(v0, v91));
  if (v92)
  {
LABEL_124:
    v93 = *(_QWORD *)(v0 + 1880);
    if (*(_BYTE *)(v93 + 472))
    {
      AMSCore::HTTPResponseAction::HTTPResponseAction(v2, v93 + 8);
      if (*(_BYTE *)(v0 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v0 + 24));
        *(_BYTE *)(v0 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v0 + 24, v2);
      *(_BYTE *)(v0 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v2);
      v94 = *(_QWORD *)(v0 + 1888);
      if (v94)
      {
        v95 = (unint64_t *)(v94 + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          v97 = *(std::__shared_weak_count **)(v0 + 1888);
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v98 = *(std::__shared_weak_count **)(v0 + 1368);
      if (v98)
      {
        v99 = (unint64_t *)&v98->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = *(std::__shared_weak_count **)(v0 + 1760);
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v104 = *(std::__shared_weak_count **)(v0 + 1744);
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = *(std::__shared_weak_count **)(v0 + 1728);
      if (v107)
      {
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v110 = *(std::__shared_weak_count **)(v0 + 1712);
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        goto LABEL_308;
      }
      goto LABEL_309;
    }
LABEL_320:
    __break(1u);
  }
}

void sub_18CC8A9BC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  uint64_t v7;

  v7 = v2;
  AMSCore::AuthenticateRequestBuilder::~AuthenticateRequestBuilder(v4);
  AMSCore::AuthenticateRequestBuilder::~AuthenticateRequestBuilder(v3);
  if (*(char *)(v1 + 1551) < 0)
    operator delete(*v5);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v7);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::FinanceRequestHandler::handleResponse(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;

  if (*__p)
    __asm { BR              X10 }
  v2 = (_QWORD *)__p[66];
  if (v2 == __p + 63)
  {
    v3 = 4;
    v2 = __p + 63;
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v4 = __p[227];
  do
  {
    v5 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v6)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v4)
  {
    v7 = (unint64_t *)(__p[227] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      v9 = (std::__shared_weak_count *)__p[227];
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v10 = __p[225];
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v13 = (std::__shared_weak_count *)__p[225];
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v14 = __p[223];
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      v17 = (std::__shared_weak_count *)__p[223];
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::URL::URL(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v3 = a2[2];
    *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(result + 32) = v3;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *(_BYTE *)(result + 56) = 1;
  }
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v4 = a2[4];
    *(_QWORD *)(result + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(result + 64) = v4;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_BYTE *)(result + 88) = 1;
  }
  *(_DWORD *)(result + 96) = *((_DWORD *)a2 + 24);
  *(_QWORD *)(result + 104) = result + 104;
  *(_QWORD *)(result + 112) = result + 104;
  *(_QWORD *)(result + 120) = 0;
  if ((__int128 *)result == a2)
  {
    __break(1u);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 15);
    if (v5)
    {
      v7 = *((_QWORD *)a2 + 13);
      v6 = (uint64_t *)*((_QWORD *)a2 + 14);
      v8 = *v6;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
      **(_QWORD **)(v7 + 8) = v8;
      v9 = *(_QWORD *)(result + 104);
      *(_QWORD *)(v9 + 8) = v6;
      *v6 = v9;
      *(_QWORD *)(result + 104) = v7;
      *(_QWORD *)(v7 + 8) = result + 104;
      *(_QWORD *)(result + 120) = v5;
      *((_QWORD *)a2 + 15) = 0;
    }
    v10 = a2[8];
    *(_QWORD *)(result + 144) = *((_QWORD *)a2 + 18);
    *(_OWORD *)(result + 128) = v10;
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 16) = 0;
  }
  return result;
}

void AMSCore::HTTPResponseAction::RedirectContext::~RedirectContext(AMSCore::HTTPResponseAction::RedirectContext *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;

  if (!*((_BYTE *)this + 240))
    goto LABEL_11;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v5)
    goto LABEL_11;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!*((_BYTE *)this + 192))
      goto LABEL_15;
  }
  else
  {
LABEL_11:
    if (!*((_BYTE *)this + 192))
      goto LABEL_15;
  }
  v8 = *((unsigned int *)this + 46);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))off_1E253D240[v8])(&v9, (char *)this + 160);
  *((_DWORD *)this + 46) = -1;
LABEL_15:
  AMSCore::URL::~URL(this);
}

uint64_t AMSCore::Error::Error<char [35],AMSCore::Error>(uint64_t a1, uint64_t a2, const std::error_category *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  std::string __what_arg;
  uint64_t v17;
  _QWORD v18[8];
  void *__p[2];
  __int128 v20;
  int v21;
  uint64_t v22[20];
  std::error_code v23;

  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v22[0] = MEMORY[0x1E0DE4FE0] + 64;
  v17 = v11;
  *(_QWORD *)((char *)&v18[-1] + *(_QWORD *)(v11 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v18[-1] + *(_QWORD *)(v17 - 24));
  std::ios_base::init(v13, v18);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v17 = v8 + 24;
  v22[0] = v9;
  std::streambuf::basic_streambuf();
  v14 = MEMORY[0x1E0DE4FB8];
  v18[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  v21 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Redirect URL could not be parsed: ", 34);
  AMSCore::operator<<(&v17, a4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v18, &__what_arg);
  v17 = *v10;
  *(_QWORD *)((char *)&v18[-1] + *(_QWORD *)(v17 - 24)) = v10[3];
  v18[0] = v14 + 16;
  if (SBYTE7(v20) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v22);
  *(_QWORD *)&v23.__val_ = a2;
  v23.__cat_ = a3;
  std::system_error::system_error((std::system_error *)a1, v23, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1E2521330;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_18CC8B5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC8B5EC(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::processFinanceCookieHeaders(uint64_t a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

void sub_18CC8B6A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, AMSCore::CookieUtils *a15, std::runtime_error *a16, std::runtime_error *a17, uint64_t a18, AMSCore::IHTTPHeaderMap *a19, std::runtime_error a20,__int128 a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,std::runtime_error a26,__int16 a27,char a28,int a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  unint64_t v61;
  _DWORD *v62;
  std::runtime_error *v63;
  std::string *v64;
  uint64_t v65;
  std::runtime_error_vtbl **v66;
  uint64_t **v67;
  uint64_t v68;
  uint64_t v69;
  const std::runtime_error *v70;
  char v71;
  const char **v72;
  std::__libcpp_refstring *p_imp;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  const std::runtime_error *v78;
  std::runtime_error_vtbl *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::runtime_error v99;
  unint64_t *v101;
  unint64_t v102;
  std::runtime_error *v103;
  uint64_t v104;
  char v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  const AMSCore::IHTTPHeaderMap *v127;
  int v128;
  uint64_t v129;
  std::string::size_type v130;
  const std::string::value_type *v131;
  std::runtime_error v132;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  const std::runtime_error *v137;
  char v138;
  std::runtime_error_vtbl *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  std::runtime_error_vtbl *v152;
  _QWORD *v153;
  std::runtime_error_vtbl *v154;
  std::__shared_weak_count *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  const std::runtime_error *v164;
  char v165;
  const char **v166;
  std::__libcpp_refstring *v167;
  std::runtime_error *v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  const std::runtime_error *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  int v187;
  uint64_t v188;
  _QWORD *v189;
  unsigned int *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int **v194;
  unint64_t v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  _QWORD *v200;
  unsigned int *v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int **v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  __int16 v212;
  uint64_t v213;
  char *v214;
  void **v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  char v226;
  _QWORD *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  int v246;
  uint64_t *v247;
  uint64_t *v248;
  void *v249;
  void (**v250)();
  uint64_t *v251;
  std::runtime_error_vtbl *v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  __int128 v257;
  unsigned int *v258;
  unsigned int **v259;
  unint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  unsigned int *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  void **v275;
  void *v276;
  void **v277;
  int v278;
  uint64_t v279;
  uint64_t *v280;
  _QWORD *v281;
  uint64_t **v282;
  _BYTE *v283;
  std::runtime_error *v284;
  std::runtime_error *v285;
  uint64_t v286;
  uint64_t *v287;
  const AMSCore::IHTTPHeaderMap *v288;
  std::runtime_error v289;
  __int128 v290;
  unsigned int **v291;
  unsigned int *v292;
  uint64_t v293;
  __int128 v294;
  _BYTE v295[32];
  unsigned int **v296;
  unsigned int *v297;
  uint64_t v298;
  __int128 v299;
  unsigned __int8 v300;
  __int128 v301;

  v69 = *(_QWORD *)(v61 + 736);
  if (!*(_BYTE *)(v69 + 88))
    goto LABEL_346;
  v70 = (const std::runtime_error *)(v69 + 8);
  v71 = *(_BYTE *)(v69 + 80);
  if (v71)
  {
    *(_QWORD *)(v61 + 392) = *(_QWORD *)(v69 + 8);
    v72 = (const char **)(v61 + 400);
    p_imp = (std::__libcpp_refstring *)(v69 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v285, v70);
    *(_OWORD *)(v61 + 408) = *(_OWORD *)(v69 + 24);
    *(_QWORD *)(v61 + 392) = off_1E2521330;
    v74 = (_QWORD *)(v69 + 48);
    v75 = *(_QWORD *)(v69 + 48);
    v76 = v61 + 432;
    *(_QWORD *)(v61 + 424) = *(_QWORD *)(v69 + 40);
    *(_QWORD *)(v61 + 432) = v75;
    v77 = *(_QWORD *)(v69 + 56);
    *(_QWORD *)(v61 + 440) = v77;
    if (v77)
    {
      *(_QWORD *)(v75 + 16) = v76;
      *(_QWORD *)(v69 + 40) = v74;
      *v74 = 0;
      *(_QWORD *)(v69 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v61 + 424) = v76;
    }
    v78 = *(const std::runtime_error **)(v61 + 736);
    v79 = v78[4].__vftable;
    v70 = v78 + 4;
    *(_QWORD *)(v61 + 448) = v79;
    v72 = (const char **)(v61 + 456);
    p_imp = &v70->__imp_;
  }
  *v72 = p_imp->__imp_;
  v70->__vftable = 0;
  v70->__imp_.__imp_ = 0;
  *(_BYTE *)(v61 + 464) = v71;
  v80 = *(_QWORD *)(v61 + 744);
  if (v80)
  {
    v81 = (unint64_t *)(v80 + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      v83 = *(std::__shared_weak_count **)(v61 + 744);
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v84 = *(std::__shared_weak_count **)(v61 + 160);
  if (v84)
  {
    p_shared_owners = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *(std::__shared_weak_count **)(v61 + 624);
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (!*(_BYTE *)(v61 + 464))
  {
    std::runtime_error::runtime_error((std::runtime_error *)v295, v285);
    *(_OWORD *)&v295[16] = *(_OWORD *)(v61 + 408);
    *(_QWORD *)v295 = off_1E2521330;
    v93 = *(_QWORD *)(v61 + 432);
    v296 = *(unsigned int ***)(v61 + 424);
    v297 = (unsigned int *)v93;
    v298 = *(_QWORD *)(v61 + 440);
    v279 = v65;
    if (v298)
    {
      *(_QWORD *)(v93 + 16) = &v297;
      *(_QWORD *)(v61 + 424) = v61 + 432;
      *(_QWORD *)(v61 + 432) = 0;
      *(_QWORD *)(v61 + 440) = 0;
    }
    else
    {
      v296 = &v297;
    }
    v299 = *(_OWORD *)(v61 + 448);
    *(_QWORD *)(v61 + 448) = 0;
    *(_QWORD *)(v61 + 456) = 0;
    v300 = 1;
    std::runtime_error::runtime_error(&v289, (const std::runtime_error *)v295);
    v290 = *(_OWORD *)&v295[16];
    v289.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v291 = v296;
    v292 = v297;
    v293 = v298;
    if (v298)
    {
      *((_QWORD *)v297 + 2) = &v292;
      v296 = &v297;
      v297 = 0;
      v298 = 0;
    }
    else
    {
      v291 = &v292;
    }
    v294 = v299;
    v299 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)(v68 - 168), &v289);
    *(_OWORD *)(v68 - 152) = v290;
    *(_QWORD *)(v68 - 168) = off_1E2521330;
    v262 = (_QWORD *)(v68 - 128);
    v263 = v292;
    *(_QWORD *)(v68 - 136) = v291;
    *(_QWORD *)(v68 - 128) = v263;
    v264 = v293;
    *(_QWORD *)(v68 - 120) = v293;
    if (v264)
    {
      *((_QWORD *)v263 + 2) = v262;
      v263 = 0;
      v291 = &v292;
      v292 = 0;
      v293 = 0;
    }
    else
    {
      *(_QWORD *)(v68 - 136) = v262;
    }
    v127 = v288;
    v301 = v294;
    v294 = 0uLL;
    v289.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v291, v263);
    MEMORY[0x18D7898AC](&v289);
    if (*(_BYTE *)(v61 + 104))
    {
      if (!*(_BYTE *)(v61 + 96))
        (**(void (***)(uint64_t))(v61 + 24))(v61 + 24);
      *(_BYTE *)(v61 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v61 + 24), (const std::runtime_error *)(v68 - 168));
    v266 = *(_QWORD *)(v68 - 136);
    v265 = *(_QWORD *)(v68 - 128);
    *(_QWORD *)(v61 + 64) = v265;
    v267 = v61 + 64;
    *(_OWORD *)(v61 + 40) = *(_OWORD *)(v68 - 152);
    *(_QWORD *)(v61 + 24) = off_1E2521330;
    *(_QWORD *)(v61 + 56) = v266;
    v268 = *(_QWORD *)(v68 - 120);
    *(_QWORD *)(v61 + 72) = v268;
    if (v268)
    {
      *(_QWORD *)(v265 + 16) = v267;
      v265 = 0;
      *(_QWORD *)(v68 - 136) = v262;
      *v262 = 0;
      *(_QWORD *)(v68 - 120) = 0;
    }
    else
    {
      *(_QWORD *)(v61 + 56) = v267;
    }
    v65 = v279;
    *(_OWORD *)(v61 + 80) = v301;
    *(_QWORD *)(v68 - 112) = 0;
    *(_QWORD *)(v68 - 104) = 0;
    *(_BYTE *)(v61 + 96) = 0;
    *(_BYTE *)(v61 + 104) = 1;
    *(_QWORD *)(v68 - 168) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v68 - 136, (unsigned int *)v265);
    MEMORY[0x18D7898AC](v68 - 168);
    if (v300)
    {
      *(_QWORD *)v295 = off_1E2521330;
      v269 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
      if (*((_QWORD *)&v299 + 1))
      {
        v270 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
        do
          v271 = __ldaxr(v270);
        while (__stlxr(v271 - 1, v270));
        if (!v271)
        {
          ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
          std::__shared_weak_count::__release_weak(v269);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v296, v297);
      MEMORY[0x18D7898AC](v295);
    }
    if (*(_BYTE *)(v61 + 464))
      goto LABEL_295;
    goto LABEL_327;
  }
  *(_QWORD *)v295 = operator new(0x19uLL);
  *(_OWORD *)&v295[8] = xmmword_18CF51B20;
  strcpy(*(char **)v295, "X-Apple-Set-User-Cookie");
  v90 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v288, v295);
  if (v90)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(v68 - 168, v288, v90);
    v91 = *(_QWORD *)(v68 - 168);
    v92 = 1;
  }
  else
  {
    v91 = 0;
    v92 = 0;
    *(_QWORD *)(v61 + 592) = 0;
  }
  *(_QWORD *)(v61 + 584) = v91;
  *(_BYTE *)(v61 + 593) = v92;
  if ((v295[23] & 0x80000000) != 0)
    operator delete(*(void **)v295);
  if (v91)
  {
    if (*(char *)(v91 + 39) < 0)
    {
      *(_QWORD *)(v91 + 24) = 10;
      v94 = *(char **)(v91 + 16);
    }
    else
    {
      v94 = (char *)(v91 + 16);
      *(_BYTE *)(v91 + 39) = 10;
    }
    strcpy(v94, "Set-Cookie");
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(v288, v91);
    *v287 = 0;
    if (v90)
      *(_BYTE *)(v61 + 593) = 0;
  }
  AMSCore::CookieUtils::parseResponseHeaderFields(v284, v288, *(const AMSCore::URL **)(v61 + 712));
  if (*(_BYTE *)(v61 + 304))
  {
    if (*(_QWORD *)(v61 + 232) != *(_QWORD *)(v61 + 240))
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v295);
      AMSCore::Logger::log<char [33],std::vector<std::unique_ptr<AMSCore::HTTPCookie>>>(*(uint64_t *)v295, (uint64_t **)v284);
      v95 = *(std::__shared_weak_count **)&v295[8];
      if (*(_QWORD *)&v295[8])
      {
        v96 = (unint64_t *)(*(_QWORD *)&v295[8] + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      if (!*(_BYTE *)(v61 + 464) || !*(_BYTE *)(v61 + 304))
        goto LABEL_346;
      v98 = *(_QWORD *)(v61 + 392);
      *(_OWORD *)(v286 + 224) = *(_OWORD *)(v61 + 232);
      *(_QWORD *)(v61 + 552) = *(_QWORD *)(v61 + 248);
      v284->__vftable = 0;
      v284->__imp_.__imp_ = 0;
      v284[1].__vftable = 0;
      (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v98 + 24))(v98, v67);
      v99 = *(std::runtime_error *)v286;
      *(_OWORD *)(v61 + 752) = *(_OWORD *)v286;
      *(_QWORD *)v286 = 0;
      *(_QWORD *)(v286 + 8) = 0;
      if (!atomic_load((unint64_t *)&v99.__vftable[4]))
      {
        *v283 = 1;
        v101 = (unint64_t *)(*(_QWORD *)(v61 + 752) + 96);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v61, v101));
        if (!v102)
          return;
      }
      v103 = v63;
      v104 = *(_QWORD *)(v61 + 752);
      if (!*(_BYTE *)(v104 + 88))
        goto LABEL_346;
      v105 = *(_BYTE *)(v104 + 80);
      if (!v105)
      {
        std::runtime_error::runtime_error(v103, (const std::runtime_error *)(v104 + 8));
        *(_OWORD *)(v61 + 168) = *(_OWORD *)(v104 + 24);
        v106 = (_QWORD *)(v104 + 48);
        v107 = *(_QWORD *)(v104 + 48);
        *(_QWORD *)(v61 + 192) = v107;
        v108 = v61 + 192;
        *(_QWORD *)(v61 + 152) = off_1E2521330;
        *(_QWORD *)(v61 + 184) = *(_QWORD *)(v104 + 40);
        v109 = *(_QWORD *)(v104 + 56);
        *(_QWORD *)(v61 + 200) = v109;
        if (v109)
        {
          *(_QWORD *)(v107 + 16) = v108;
          *(_QWORD *)(v104 + 40) = v106;
          *v106 = 0;
          *(_QWORD *)(v104 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v61 + 184) = v108;
        }
        v113 = *(_QWORD *)(v61 + 752);
        *(_OWORD *)(v61 + 208) = *(_OWORD *)(v113 + 64);
        *(_QWORD *)(v113 + 64) = 0;
        *(_QWORD *)(v113 + 72) = 0;
      }
      *(_BYTE *)(v61 + 224) = v105;
      v114 = *(_QWORD *)(v61 + 760);
      v63 = v103;
      if (v114)
      {
        v115 = (unint64_t *)(v114 + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          v117 = *(std::__shared_weak_count **)(v61 + 760);
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      v118 = *(std::__shared_weak_count **)(v61 + 320);
      if (v118)
      {
        v119 = (unint64_t *)&v118->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      v121 = *v67;
      if (*v67)
      {
        v122 = *(uint64_t **)(v61 + 544);
        v123 = *v67;
        if (v122 != v121)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v122, 0);
          while (v122 != v121);
          v123 = *v67;
        }
        *(_QWORD *)(v61 + 544) = v121;
        operator delete(v123);
      }
      if (!*(_BYTE *)(v61 + 224))
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v295);
        AMSCore::Logger::log<char [37],AMSCore::Error>(*(uint64_t *)v295, (uint64_t)"networking", 10, "Failed to set user cookies. error = ", (uint64_t)v103);
        v124 = *(std::__shared_weak_count **)&v295[8];
        if (*(_QWORD *)&v295[8])
        {
          v125 = (unint64_t *)(*(_QWORD *)&v295[8] + 8);
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        if (!*(_BYTE *)(v61 + 224))
          ((void (*)(std::runtime_error *))v103->~runtime_error)(v103);
      }
    }
  }
  else
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v295);
    AMSCore::Logger::log<char [39],AMSCore::Error>(*(uint64_t *)v295, 4, (uint64_t)"networking", 10, "Failed to parse user cookies. error = ", (uint64_t)v284);
    v110 = *(std::__shared_weak_count **)&v295[8];
    if (*(_QWORD *)&v295[8])
    {
      v111 = (unint64_t *)(*(_QWORD *)&v295[8] + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
  }
  v127 = v288;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v61 + 696) + 96))(*(_QWORD *)(v61 + 696)) & 1) != 0)
    goto LABEL_203;
  v128 = *(char *)(v61 + 792);
  v129 = *(_QWORD *)(v61 + 680);
  v130 = *(_QWORD *)(v61 + 728);
  v131 = *(const std::string::value_type **)(v61 + 720);
  if (v128 < 0)
  {
    std::string::__init_copy_ctor_external(v64, v131, v130);
  }
  else
  {
    *(_QWORD *)(v61 + 512) = v131;
    *(_QWORD *)(v61 + 520) = v130;
    *(_DWORD *)(v61 + 528) = *v62;
    *(_DWORD *)(v61 + 531) = *(_DWORD *)((char *)v62 + 3);
    *(_BYTE *)(v61 + 535) = v128;
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v129 + 48))(v129, v64);
  v132 = *(std::runtime_error *)v286;
  *(_OWORD *)(v61 + 768) = *(_OWORD *)v286;
  *(_QWORD *)v286 = 0;
  *(_QWORD *)(v286 + 8) = 0;
  if (!atomic_load((unint64_t *)&v132.__vftable[4]))
  {
    *v283 = 2;
    v134 = (unint64_t *)(*(_QWORD *)(v61 + 768) + 96);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v61, v134));
    if (!v135)
      return;
  }
  v136 = *(_QWORD *)(v61 + 768);
  if (!*(_BYTE *)(v136 + 88))
    goto LABEL_346;
  v137 = (const std::runtime_error *)(v136 + 8);
  v138 = *(_BYTE *)(v136 + 80);
  if (v138)
  {
    v139 = v137->__vftable;
    v137->__vftable = 0;
    v63->__vftable = v139;
  }
  else
  {
    std::runtime_error::runtime_error(v63, v137);
    *(_OWORD *)(v61 + 168) = *(_OWORD *)(v136 + 24);
    v140 = (_QWORD *)(v136 + 48);
    v141 = *(_QWORD *)(v136 + 48);
    *(_QWORD *)(v61 + 192) = v141;
    v142 = v61 + 192;
    *(_QWORD *)(v61 + 152) = off_1E2521330;
    *(_QWORD *)(v61 + 184) = *(_QWORD *)(v136 + 40);
    v143 = *(_QWORD *)(v136 + 56);
    *(_QWORD *)(v61 + 200) = v143;
    if (v143)
    {
      *(_QWORD *)(v141 + 16) = v142;
      *(_QWORD *)(v136 + 40) = v140;
      *v140 = 0;
      *(_QWORD *)(v136 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v61 + 184) = v142;
    }
    v144 = *(_QWORD *)(v61 + 768);
    *(_OWORD *)(v61 + 208) = *(_OWORD *)(v144 + 64);
    *(_QWORD *)(v144 + 64) = 0;
    *(_QWORD *)(v144 + 72) = 0;
  }
  *(_BYTE *)(v61 + 224) = v138;
  v145 = *(_QWORD *)(v61 + 776);
  if (!v145)
    goto LABEL_103;
  v146 = (unint64_t *)(v145 + 8);
  do
    v147 = __ldaxr(v146);
  while (__stlxr(v147 - 1, v146));
  if (!v147)
  {
    v155 = *(std::__shared_weak_count **)(v61 + 776);
    ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
    std::__shared_weak_count::__release_weak(v155);
    v148 = *(std::__shared_weak_count **)(v61 + 320);
    if (!v148)
      goto LABEL_107;
  }
  else
  {
LABEL_103:
    v148 = *(std::__shared_weak_count **)(v61 + 320);
    if (!v148)
      goto LABEL_107;
  }
  v149 = (unint64_t *)&v148->__shared_owners_;
  do
    v150 = __ldaxr(v149);
  while (__stlxr(v150 - 1, v149));
  if (v150)
  {
LABEL_107:
    if ((*(char *)(v61 + 535) & 0x80000000) == 0)
      goto LABEL_108;
    goto LABEL_114;
  }
  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
  std::__shared_weak_count::__release_weak(v148);
  if ((*(char *)(v61 + 535) & 0x80000000) == 0)
  {
LABEL_108:
    if (*(_BYTE *)(v61 + 224))
      goto LABEL_109;
LABEL_115:
    std::runtime_error::runtime_error((std::runtime_error *)v295, v63);
    v156 = (_QWORD *)(v61 + 192);
    v157 = *(_QWORD *)(v61 + 192);
    *(_OWORD *)&v295[16] = *(_OWORD *)(v61 + 168);
    *(_QWORD *)v295 = off_1E2521330;
    v296 = *(unsigned int ***)(v61 + 184);
    v297 = (unsigned int *)v157;
    v298 = *(_QWORD *)(v61 + 200);
    if (v298)
    {
      *(_QWORD *)(v157 + 16) = &v297;
      *(_QWORD *)(v61 + 184) = v156;
      *v156 = 0;
      *(_QWORD *)(v61 + 200) = 0;
    }
    else
    {
      v296 = &v297;
    }
    v299 = *(_OWORD *)(v61 + 208);
    *(_QWORD *)(v61 + 208) = 0;
    *(_QWORD *)(v61 + 216) = 0;
    v300 = 1;
    std::runtime_error::runtime_error((std::runtime_error *)(v68 - 168), (const std::runtime_error *)v295);
    *(_OWORD *)(v68 - 152) = *(_OWORD *)&v295[16];
    *(_QWORD *)(v68 - 168) = off_1E2521330;
    v200 = (_QWORD *)(v68 - 128);
    v201 = v297;
    *(_QWORD *)(v68 - 136) = v296;
    *(_QWORD *)(v68 - 128) = v201;
    v202 = v298;
    *(_QWORD *)(v68 - 120) = v298;
    if (v202)
    {
      *((_QWORD *)v201 + 2) = v200;
      v296 = &v297;
      v297 = 0;
      v298 = 0;
    }
    else
    {
      *(_QWORD *)(v68 - 136) = v200;
    }
    v301 = v299;
    v299 = 0uLL;
    std::runtime_error::runtime_error(&v289, (const std::runtime_error *)(v68 - 168));
    v290 = *(_OWORD *)(v68 - 152);
    v289.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v203 = *(_QWORD *)(v68 - 128);
    v291 = *(unsigned int ***)(v68 - 136);
    v292 = (unsigned int *)v203;
    v293 = *(_QWORD *)(v68 - 120);
    if (v293)
    {
      *(_QWORD *)(v203 + 16) = &v292;
      v203 = 0;
      *(_QWORD *)(v68 - 136) = v200;
      *v200 = 0;
      *(_QWORD *)(v68 - 120) = 0;
    }
    else
    {
      v291 = &v292;
    }
    v294 = v301;
    *(_QWORD *)(v68 - 112) = 0;
    *(_QWORD *)(v68 - 104) = 0;
    *(_QWORD *)(v68 - 168) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v68 - 136, (unsigned int *)v203);
    MEMORY[0x18D7898AC](v68 - 168);
    if (*(_BYTE *)(v61 + 104))
    {
      if (!*(_BYTE *)(v61 + 96))
        (**(void (***)(uint64_t))(v61 + 24))(v61 + 24);
      *(_BYTE *)(v61 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v61 + 24), &v289);
    v205 = v291;
    v204 = v292;
    *(_QWORD *)(v61 + 64) = v292;
    v206 = v61 + 64;
    *(_OWORD *)(v61 + 40) = v290;
    *(_QWORD *)(v61 + 24) = off_1E2521330;
    *(_QWORD *)(v61 + 56) = v205;
    v207 = v293;
    *(_QWORD *)(v61 + 72) = v293;
    if (v207)
    {
      *((_QWORD *)v204 + 2) = v206;
      v204 = 0;
      v291 = &v292;
      v292 = 0;
      v293 = 0;
    }
    else
    {
      *(_QWORD *)(v61 + 56) = v206;
    }
    v127 = v288;
    *(_OWORD *)(v61 + 80) = v294;
    v294 = 0uLL;
    *(_BYTE *)(v61 + 96) = 0;
    *(_BYTE *)(v61 + 104) = 1;
    v289.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v291, v204);
    MEMORY[0x18D7898AC](&v289);
    if (!v300)
      goto LABEL_196;
    *(_QWORD *)v295 = off_1E2521330;
    v197 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
    if (!*((_QWORD *)&v299 + 1))
      goto LABEL_195;
    v208 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
    do
      v199 = __ldaxr(v208);
    while (__stlxr(v199 - 1, v208));
    goto LABEL_193;
  }
LABEL_114:
  operator delete(v64->__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v61 + 224))
    goto LABEL_115;
LABEL_109:
  v151 = *v280;
  v152 = v63->__vftable;
  *v66 = v63->__vftable;
  if (v152)
  {
    v153 = (_QWORD *)operator new();
    v154 = v63->__vftable;
    *v153 = &off_1E2523180;
    v153[1] = 0;
    v153[2] = 0;
    v153[3] = v154;
  }
  else
  {
    v153 = 0;
  }
  *(_QWORD *)(v61 + 672) = v153;
  *(_QWORD *)(v61 + 152) = 0;
  (*(void (**)(uint64_t, std::runtime_error_vtbl **))(*(_QWORD *)v151 + 40))(v151, v66);
  v158 = *(_QWORD *)(v61 + 648);
  v159 = *(_QWORD *)(v61 + 656);
  *v281 = 0;
  v281[1] = 0;
  *(_QWORD *)(v61 + 632) = v158;
  *(_QWORD *)(v61 + 640) = v159;
  if (atomic_load((unint64_t *)(v158 + 96)))
    goto LABEL_122;
  *v283 = 3;
  v161 = (unint64_t *)(*(_QWORD *)(v61 + 632) + 96);
  do
    v162 = __ldaxr(v161);
  while (__stlxr(v61, v161));
  if (v162)
  {
LABEL_122:
    v163 = *(_QWORD *)(v61 + 632);
    if (!*(_BYTE *)(v163 + 88))
      goto LABEL_346;
    v164 = (const std::runtime_error *)(v163 + 8);
    v165 = *(_BYTE *)(v163 + 80);
    if (v165)
    {
      *(_QWORD *)(v61 + 312) = *(_QWORD *)(v163 + 8);
      v166 = (const char **)(v61 + 320);
      v167 = (std::__libcpp_refstring *)(v163 + 16);
      v127 = v288;
      v168 = (std::runtime_error *)v286;
    }
    else
    {
      v168 = (std::runtime_error *)v286;
      std::runtime_error::runtime_error((std::runtime_error *)v286, v164);
      *(_OWORD *)(v61 + 328) = *(_OWORD *)(v163 + 24);
      *(_QWORD *)(v61 + 312) = off_1E2521330;
      v169 = (_QWORD *)(v163 + 48);
      v170 = *(_QWORD *)(v163 + 48);
      v171 = v61 + 352;
      *(_QWORD *)(v61 + 344) = *(_QWORD *)(v163 + 40);
      *(_QWORD *)(v61 + 352) = v170;
      v172 = *(_QWORD *)(v163 + 56);
      *(_QWORD *)(v61 + 360) = v172;
      if (v172)
      {
        *(_QWORD *)(v170 + 16) = v171;
        *(_QWORD *)(v163 + 40) = v169;
        *v169 = 0;
        *(_QWORD *)(v163 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v61 + 344) = v171;
      }
      v127 = v288;
      v174 = *(_QWORD *)(v163 + 64);
      v173 = (const std::runtime_error *)(v163 + 64);
      *(_QWORD *)(v61 + 368) = v174;
      v166 = (const char **)(v61 + 376);
      v167 = &v173->__imp_;
      v164 = v173;
    }
    *v166 = v167->__imp_;
    v164->__vftable = 0;
    v164->__imp_.__imp_ = 0;
    *(_BYTE *)(v61 + 384) = v165;
    std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](v285, v168);
    if (*(_BYTE *)(v61 + 384))
    {
      v175 = *(std::__shared_weak_count **)(v61 + 320);
      if (v175)
      {
        v176 = (unint64_t *)&v175->__shared_owners_;
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v168->~runtime_error)(v168);
    }
    v178 = *(std::__shared_weak_count **)(v61 + 640);
    if (v178)
    {
      v179 = (unint64_t *)&v178->__shared_owners_;
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
    }
    v181 = *(std::__shared_weak_count **)(v61 + 656);
    if (!v181)
      goto LABEL_145;
    v182 = (unint64_t *)&v181->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
      v184 = *(std::__shared_weak_count **)(v61 + 672);
      if (!v184)
        goto LABEL_149;
    }
    else
    {
LABEL_145:
      v184 = *(std::__shared_weak_count **)(v61 + 672);
      if (!v184)
        goto LABEL_149;
    }
    v185 = (unint64_t *)&v184->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
      if (*(_BYTE *)(v61 + 464))
        goto LABEL_150;
LABEL_154:
      std::runtime_error::runtime_error((std::runtime_error *)v295, v285);
      *(_OWORD *)&v295[16] = *(_OWORD *)(v61 + 408);
      *(_QWORD *)v295 = off_1E2521330;
      v188 = *(_QWORD *)(v61 + 432);
      v296 = *(unsigned int ***)(v61 + 424);
      v297 = (unsigned int *)v188;
      v298 = *(_QWORD *)(v61 + 440);
      if (v298)
      {
        *(_QWORD *)(v188 + 16) = &v297;
        *(_QWORD *)(v61 + 424) = v61 + 432;
        *(_QWORD *)(v61 + 432) = 0;
        *(_QWORD *)(v61 + 440) = 0;
      }
      else
      {
        v296 = &v297;
      }
      v299 = *(_OWORD *)(v61 + 448);
      *(_QWORD *)(v61 + 448) = 0;
      *(_QWORD *)(v61 + 456) = 0;
      v300 = 1;
      std::runtime_error::runtime_error((std::runtime_error *)(v68 - 168), (const std::runtime_error *)v295);
      *(_OWORD *)(v68 - 152) = *(_OWORD *)&v295[16];
      *(_QWORD *)(v68 - 168) = off_1E2521330;
      v189 = (_QWORD *)(v68 - 128);
      v190 = v297;
      *(_QWORD *)(v68 - 136) = v296;
      *(_QWORD *)(v68 - 128) = v190;
      v191 = v298;
      *(_QWORD *)(v68 - 120) = v298;
      if (v191)
      {
        *((_QWORD *)v190 + 2) = v189;
        v296 = &v297;
        v297 = 0;
        v298 = 0;
      }
      else
      {
        *(_QWORD *)(v68 - 136) = v189;
      }
      v301 = v299;
      v299 = 0uLL;
      std::runtime_error::runtime_error(&v289, (const std::runtime_error *)(v68 - 168));
      v290 = *(_OWORD *)(v68 - 152);
      v289.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v192 = *(_QWORD *)(v68 - 128);
      v291 = *(unsigned int ***)(v68 - 136);
      v292 = (unsigned int *)v192;
      v293 = *(_QWORD *)(v68 - 120);
      if (v293)
      {
        *(_QWORD *)(v192 + 16) = &v292;
        v192 = 0;
        *(_QWORD *)(v68 - 136) = v189;
        *v189 = 0;
        *(_QWORD *)(v68 - 120) = 0;
      }
      else
      {
        v291 = &v292;
      }
      v294 = v301;
      *(_QWORD *)(v68 - 112) = 0;
      *(_QWORD *)(v68 - 104) = 0;
      *(_QWORD *)(v68 - 168) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v68 - 136, (unsigned int *)v192);
      MEMORY[0x18D7898AC](v68 - 168);
      if (*(_BYTE *)(v61 + 104))
      {
        if (!*(_BYTE *)(v61 + 96))
          (**(void (***)(uint64_t))(v61 + 24))(v61 + 24);
        *(_BYTE *)(v61 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(v61 + 24), &v289);
      v194 = v291;
      v193 = v292;
      *(_QWORD *)(v61 + 64) = v292;
      v195 = v61 + 64;
      *(_OWORD *)(v61 + 40) = v290;
      *(_QWORD *)(v61 + 24) = off_1E2521330;
      *(_QWORD *)(v61 + 56) = v194;
      v196 = v293;
      *(_QWORD *)(v61 + 72) = v293;
      if (v196)
      {
        *((_QWORD *)v193 + 2) = v195;
        v193 = 0;
        v291 = &v292;
        v292 = 0;
        v293 = 0;
      }
      else
      {
        *(_QWORD *)(v61 + 56) = v195;
      }
      v127 = v288;
      *(_OWORD *)(v61 + 80) = v294;
      v294 = 0uLL;
      *(_BYTE *)(v61 + 96) = 0;
      *(_BYTE *)(v61 + 104) = 1;
      v289.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v291, v193);
      MEMORY[0x18D7898AC](&v289);
      if (!v300)
        goto LABEL_196;
      *(_QWORD *)v295 = off_1E2521330;
      v197 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
      if (!*((_QWORD *)&v299 + 1))
      {
LABEL_195:
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v296, v297);
        MEMORY[0x18D7898AC](v295);
LABEL_196:
        v187 = 3;
LABEL_197:
        v209 = *(_QWORD *)(v61 + 152);
        if (*(_BYTE *)(v61 + 224))
        {
          v63->__vftable = 0;
          if (v209)
            (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
          if (v187)
          {
LABEL_282:
            v250 = *(void (***)())(v61 + 232);
            if (*(_BYTE *)(v61 + 304))
            {
              if (v250)
              {
                v251 = *(uint64_t **)(v61 + 240);
                v252 = *(std::runtime_error_vtbl **)(v61 + 232);
                if (v251 != (uint64_t *)v250)
                {
                  do
                    std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v251, 0);
                  while (v251 != (uint64_t *)v250);
                  v252 = v284->__vftable;
                }
                *(_QWORD *)(v61 + 240) = v250;
                operator delete(v252);
              }
            }
            else
            {
              (*v250)();
            }
            v253 = *v287;
            if (!*v287)
            {
LABEL_294:
              if (*(_BYTE *)(v61 + 464))
              {
LABEL_295:
                v254 = *(std::__shared_weak_count **)(v61 + 400);
                if (v254)
                {
                  v255 = (unint64_t *)&v254->__shared_owners_;
                  do
                    v256 = __ldaxr(v255);
                  while (__stlxr(v256 - 1, v255));
                  if (!v256)
                  {
                    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                    std::__shared_weak_count::__release_weak(v254);
                  }
                }
LABEL_328:
                v272 = *(std::__shared_weak_count **)(v61 + 688);
                if (v272)
                {
                  v273 = (unint64_t *)&v272->__shared_owners_;
                  do
                    v274 = __ldaxr(v273);
                  while (__stlxr(v274 - 1, v273));
                  if (!v274)
                  {
                    ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                    std::__shared_weak_count::__release_weak(v272);
                  }
                }
                v275 = *(void ***)(v61 + 488);
                if (!v275)
                {
LABEL_334:
                  v276 = *(void **)v127;
                  *(_QWORD *)v127 = 0;
                  if (v276)
                    operator delete(v276);
                  *(_QWORD *)(v61 + 152) = v65;
                  *(_QWORD *)v61 = 0;
                  *v283 = 5;
                  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v63);
                  return;
                }
                while (1)
                {
                  v277 = (void **)*v275;
                  if (*((char *)v275 + 63) < 0)
                  {
                    operator delete(v275[5]);
                    if (*((char *)v275 + 39) < 0)
                      goto LABEL_341;
                  }
                  else if (*((char *)v275 + 39) < 0)
                  {
LABEL_341:
                    operator delete(v275[2]);
                  }
                  operator delete(v275);
                  v275 = v277;
                  if (!v277)
                    goto LABEL_334;
                }
              }
LABEL_327:
              ((void (*)())v285->~runtime_error)();
              goto LABEL_328;
            }
            if (*(_BYTE *)(v61 + 593))
            {
              if (*(char *)(v253 + 63) < 0)
              {
                operator delete(*(void **)(v253 + 40));
                if ((*(char *)(v253 + 39) & 0x80000000) == 0)
                  goto LABEL_293;
              }
              else if ((*(char *)(v253 + 39) & 0x80000000) == 0)
              {
LABEL_293:
                operator delete((void *)v253);
                goto LABEL_294;
              }
              operator delete(*(void **)(v253 + 16));
              goto LABEL_293;
            }
LABEL_346:
            __break(1u);
            return;
          }
        }
        else
        {
          (*(void (**)(std::runtime_error *))v209)(v63);
          if (v187)
            goto LABEL_282;
        }
LABEL_203:
        v295[23] = 10;
        strcpy(v295, "Set-Cookie");
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v127, v295);
        if ((v295[23] & 0x80000000) != 0)
          operator delete(*(void **)v295);
        v295[23] = 18;
        strcpy(v295, "X-Apple-Set-Cookie");
        v210 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v127, v295);
        if (v210)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(v68 - 168, v127, v210);
          v211 = *(_QWORD *)(v68 - 168);
          v212 = 256;
        }
        else
        {
          v211 = 0;
          v212 = 0;
        }
        v213 = *v287;
        if (!*v287)
        {
LABEL_213:
          *(_QWORD *)(v61 + 584) = v211;
          *(_WORD *)(v61 + 592) = v212;
          if ((v295[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v295);
            if (!v211)
              goto LABEL_222;
          }
          else if (!v211)
          {
            goto LABEL_222;
          }
          if (*(char *)(v211 + 39) < 0)
          {
            *(_QWORD *)(v211 + 24) = 10;
            v214 = *(char **)(v211 + 16);
          }
          else
          {
            v214 = (char *)(v211 + 16);
            *(_BYTE *)(v211 + 39) = 10;
          }
          strcpy(v214, "Set-Cookie");
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(v127, v211);
          *v287 = 0;
          if (v210)
            *(_BYTE *)(v61 + 593) = 0;
LABEL_222:
          v215 = (void **)v286;
          AMSCore::CookieUtils::parseResponseHeaderFields((std::runtime_error *)v286, v127, *(const AMSCore::URL **)(v61 + 712));
          if (*(_BYTE *)(v61 + 384))
          {
            if (*(_QWORD *)(v61 + 312) != *(_QWORD *)(v61 + 320))
            {
              AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v295);
              AMSCore::Logger::log<char [35],std::vector<std::unique_ptr<AMSCore::HTTPCookie>>>(*(uint64_t *)v295, (uint64_t **)v286);
              v216 = *(std::__shared_weak_count **)&v295[8];
              if (*(_QWORD *)&v295[8])
              {
                v217 = (unint64_t *)(*(_QWORD *)&v295[8] + 8);
                do
                  v218 = __ldaxr(v217);
                while (__stlxr(v218 - 1, v217));
                if (!v218)
                {
                  ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                  std::__shared_weak_count::__release_weak(v216);
                }
              }
              if (!*(_BYTE *)(v61 + 464) || !*(_BYTE *)(v61 + 384))
                goto LABEL_346;
              v219 = *(_QWORD *)(v61 + 392);
              *(_OWORD *)(v61 + 560) = *(_OWORD *)v286;
              *(_QWORD *)(v61 + 576) = *(_QWORD *)(v61 + 328);
              *(_QWORD *)v286 = 0;
              *(_QWORD *)(v286 + 8) = 0;
              *(_QWORD *)(v286 + 16) = 0;
              (*(void (**)(uint64_t))(*(_QWORD *)v219 + 24))(v219);
              v220 = *(_QWORD *)(v61 + 648);
              v221 = *(_QWORD *)(v61 + 656);
              *v281 = 0;
              v281[1] = 0;
              *(_QWORD *)(v61 + 632) = v220;
              *(_QWORD *)(v61 + 640) = v221;
              if (!atomic_load((unint64_t *)(v220 + 96)))
              {
                *v283 = 4;
                v223 = (unint64_t *)(*(_QWORD *)(v61 + 632) + 96);
                do
                  v224 = __ldaxr(v223);
                while (__stlxr(v61, v223));
                if (!v224)
                  return;
              }
              v225 = *(_QWORD *)(v61 + 632);
              if (!*(_BYTE *)(v225 + 88))
                goto LABEL_346;
              v226 = *(_BYTE *)(v225 + 80);
              v215 = (void **)v286;
              if (!v226)
              {
                std::runtime_error::runtime_error(v63, (const std::runtime_error *)(v225 + 8));
                *(_OWORD *)(v61 + 168) = *(_OWORD *)(v225 + 24);
                v227 = (_QWORD *)(v225 + 48);
                v228 = *(_QWORD *)(v225 + 48);
                *(_QWORD *)(v61 + 192) = v228;
                v229 = v61 + 192;
                *(_QWORD *)(v61 + 152) = off_1E2521330;
                *(_QWORD *)(v61 + 184) = *(_QWORD *)(v225 + 40);
                v230 = *(_QWORD *)(v225 + 56);
                *(_QWORD *)(v61 + 200) = v230;
                if (v230)
                {
                  *(_QWORD *)(v228 + 16) = v229;
                  *(_QWORD *)(v225 + 40) = v227;
                  *v227 = 0;
                  *(_QWORD *)(v225 + 56) = 0;
                }
                else
                {
                  *(_QWORD *)(v61 + 184) = v229;
                }
                *(_OWORD *)(v61 + 208) = *(_OWORD *)(v225 + 64);
                *(_QWORD *)(v225 + 64) = 0;
                *(_QWORD *)(v225 + 72) = 0;
              }
              *(_BYTE *)(v61 + 224) = v226;
              v234 = *(std::__shared_weak_count **)(v61 + 640);
              v127 = v288;
              if (v234)
              {
                v235 = (unint64_t *)&v234->__shared_owners_;
                do
                  v236 = __ldaxr(v235);
                while (__stlxr(v236 - 1, v235));
                if (!v236)
                {
                  ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                  std::__shared_weak_count::__release_weak(v234);
                }
              }
              v237 = *(std::__shared_weak_count **)(v61 + 656);
              if (v237)
              {
                v238 = (unint64_t *)&v237->__shared_owners_;
                do
                  v239 = __ldaxr(v238);
                while (__stlxr(v239 - 1, v238));
                if (!v239)
                {
                  ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                  std::__shared_weak_count::__release_weak(v237);
                }
              }
              v240 = *v282;
              if (*v282)
              {
                v241 = *(uint64_t **)(v61 + 568);
                v242 = *v282;
                if (v241 != v240)
                {
                  do
                    std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v241, 0);
                  while (v241 != v240);
                  v242 = *v282;
                }
                *(_QWORD *)(v61 + 568) = v240;
                operator delete(v242);
              }
              if (!*(_BYTE *)(v61 + 224))
              {
                AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v295);
                AMSCore::Logger::log<char [39],AMSCore::Error>(*(uint64_t *)v295, 4, (uint64_t)"networking", 10, "Failed to set global cookies. error = ", (uint64_t)v63);
                v243 = *(std::__shared_weak_count **)&v295[8];
                if (*(_QWORD *)&v295[8])
                {
                  v244 = (unint64_t *)(*(_QWORD *)&v295[8] + 8);
                  do
                    v245 = __ldaxr(v244);
                  while (__stlxr(v245 - 1, v244));
                  if (!v245)
                  {
                    ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                    std::__shared_weak_count::__release_weak(v243);
                  }
                }
                if (!*(_BYTE *)(v61 + 224))
                  ((void (*)(std::runtime_error *))v63->~runtime_error)(v63);
              }
            }
          }
          else
          {
            AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v295);
            AMSCore::Logger::log<char [41],AMSCore::Error>(*(uint64_t *)v295, 4, (uint64_t)"networking", 10, "Failed to parse global cookies. error = ", v286);
            v231 = *(std::__shared_weak_count **)&v295[8];
            if (*(_QWORD *)&v295[8])
            {
              v232 = (unint64_t *)(*(_QWORD *)&v295[8] + 8);
              do
                v233 = __ldaxr(v232);
              while (__stlxr(v233 - 1, v232));
              if (!v233)
              {
                ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                std::__shared_weak_count::__release_weak(v231);
              }
            }
          }
          v300 = 1;
          if (*(_BYTE *)(v61 + 104) && !*(_BYTE *)(v61 + 96))
          {
            (**(void (***)(uint64_t))(v61 + 24))(v61 + 24);
            v246 = v300;
            *(_BYTE *)(v61 + 104) = 0;
            if (!v246)
            {
              std::runtime_error::runtime_error((std::runtime_error *)(v61 + 24), (const std::runtime_error *)v295);
              v257 = *(_OWORD *)&v295[16];
              v259 = v296;
              v258 = v297;
              *(_QWORD *)(v61 + 64) = v297;
              v260 = v61 + 64;
              *(_OWORD *)(v61 + 40) = v257;
              *(_QWORD *)(v61 + 24) = off_1E2521330;
              *(_QWORD *)(v61 + 56) = v259;
              v261 = v298;
              *(_QWORD *)(v61 + 72) = v298;
              if (v261)
              {
                *((_QWORD *)v258 + 2) = v260;
                v296 = &v297;
                v297 = 0;
                v298 = 0;
              }
              else
              {
                *(_QWORD *)(v61 + 56) = v260;
              }
              *(_OWORD *)(v61 + 80) = v299;
              v299 = 0uLL;
              v278 = v300;
              *(_BYTE *)(v61 + 96) = 0;
              *(_BYTE *)(v61 + 104) = 1;
              if (!v278)
                (**(void (***)(_BYTE *))v295)(v295);
              goto LABEL_275;
            }
          }
          else
          {
            LOBYTE(v246) = 1;
          }
          *(_BYTE *)(v61 + 96) = v246;
          *(_BYTE *)(v61 + 104) = 1;
LABEL_275:
          v247 = *(uint64_t **)(v61 + 312);
          if (*(_BYTE *)(v61 + 384))
          {
            if (v247)
            {
              v248 = *(uint64_t **)(v61 + 320);
              v249 = *(void **)(v61 + 312);
              if (v248 != v247)
              {
                do
                  std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v248, 0);
                while (v248 != v247);
                v249 = *v215;
              }
              *(_QWORD *)(v61 + 320) = v247;
              operator delete(v249);
            }
          }
          else
          {
            ((void (*)(void **))*v247)(v215);
          }
          goto LABEL_282;
        }
        if (!*(_BYTE *)(v61 + 593))
          goto LABEL_346;
        if (*(char *)(v213 + 63) < 0)
        {
          operator delete(*(void **)(v213 + 40));
          if ((*(char *)(v213 + 39) & 0x80000000) == 0)
            goto LABEL_212;
        }
        else if ((*(char *)(v213 + 39) & 0x80000000) == 0)
        {
LABEL_212:
          operator delete((void *)v213);
          goto LABEL_213;
        }
        operator delete(*(void **)(v213 + 16));
        goto LABEL_212;
      }
      v198 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
LABEL_193:
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
      goto LABEL_195;
    }
LABEL_149:
    if (*(_BYTE *)(v61 + 464))
    {
LABEL_150:
      v187 = 0;
      goto LABEL_197;
    }
    goto LABEL_154;
  }
}

void sub_18CC8D06C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18, AMSCore::IHTTPHeaderMap *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&__p);
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](a15);
  std::__basic_node_handle<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::allocator<std::pair<std::string const,std::string>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:fe180100](a18);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a16);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a11);
  AMSCore::IHTTPHeaderMap::~IHTTPHeaderMap(a19);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC8D1D4()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC8CEACLL);
}

void sub_18CC8D1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _BYTE *a14)
{
  _QWORD *v14;

  *v14 = 0;
  *a14 = 5;
  _Unwind_Resume(a1);
}

void sub_18CC8D238(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  void **v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;

  v17 = *(_QWORD *)(v16 + 744);
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      v20 = *(std::__shared_weak_count **)(v16 + 744);
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v21 = *(std::__shared_weak_count **)(v16 + 160);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(std::__shared_weak_count **)(v16 + 624);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(std::__shared_weak_count **)(v16 + 688);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(void ***)(v16 + 488);
  if (v30)
  {
    do
    {
      v34 = (void **)*v30;
      if (*((char *)v30 + 63) < 0)
      {
        operator delete(v30[5]);
        if (*((char *)v30 + 39) < 0)
          goto LABEL_31;
      }
      else if (*((char *)v30 + 39) < 0)
      {
LABEL_31:
        operator delete(v30[2]);
      }
      operator delete(v30);
      v30 = v34;
    }
    while (v34);
  }
  v31 = *(void **)(v16 + 472);
  *(_QWORD *)(v16 + 472) = 0;
  if (v31)
    operator delete(v31);
  v32 = *(_QWORD **)(v16 + 144);
  if (v32 == (_QWORD *)(v16 + 120))
  {
    v33 = 4;
    v32 = (_QWORD *)(v16 + 120);
    goto LABEL_33;
  }
  if (v32)
  {
    v33 = 5;
LABEL_33:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  if (*(_BYTE *)(v16 + 104) && !*(_BYTE *)(v16 + 96))
    (**(void (***)(uint64_t))(v16 + 24))(v16 + 24);
  v35 = *(char *)(v16 + 792);
  do
  {
    v36 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v37)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v35 < 0)
    operator delete(*(void **)(v16 + 720));
  v38 = *(std::__shared_weak_count **)(v16 + 704);
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = *(std::__shared_weak_count **)(v16 + 608);
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete((void *)v16);
}

uint64_t std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::unordered_multimap(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__insert_multi[abi:fe180100]<std::pair<std::string const,std::string> const&>((_QWORD *)a1, (uint64_t)(i + 2));
  return a1;
}

void sub_18CC8D994(_Unwind_Exception *a1)
{
  AMSCore::IHTTPHeaderMap *v1;

  AMSCore::IHTTPHeaderMap::~IHTTPHeaderMap(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Logger::log<char [33],std::vector<std::unique_ptr<AMSCore::HTTPCookie>>>(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[8];
  void *__p[2];
  __int128 v21;
  int v22;
  uint64_t v23[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v23[0] = MEMORY[0x1E0DE4FE0] + 64;
    v18 = v7;
    *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24));
    std::ios_base::init(v9, v19);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v18 = v4 + 24;
    v23[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v19[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    v22 = 16;
    v11 = *(_QWORD *)(v18 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Setting user cookies. cookies = ", 32);
    v13 = *a2;
    v14 = a2[1];
    if (*a2 != v14)
    {
      do
      {
        if (*v13)
          AMSCore::operator<<(&v18, *v13);
        else
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"null", 4);
        ++v13;
      }
      while (v13 != v14);
    }
    v15 = v19[5];
    v16 = (char *)&v19[-1] + *(_QWORD *)(v18 - 24);
    if ((v16[32] & 5) != 0)
    {
      v17 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v16 + 5) + 32))(&rep, *((_QWORD *)v16 + 5), 0, 1, 16);
      v17 = v28;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v25 = 2;
    v26 = v15;
    v27 = v17;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "networking", 10, &rep);
    v18 = *v6;
    *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = v6[3];
    v19[0] = v10 + 16;
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v23);
  }
  return result;
}

void sub_18CC8DEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [37],AMSCore::Error>(uint64_t result, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[8];
  void *__p[2];
  __int128 v26;
  int v27;
  uint64_t v28[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v9 = result;
    v10 = MEMORY[0x1E0DE4FE0];
    v11 = MEMORY[0x1E0DE4FE0] + 64;
    v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v28[0] = MEMORY[0x1E0DE4FE0] + 64;
    v23 = v13;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v13 - 24)) = v14;
    v15 = (std::ios_base *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24));
    std::ios_base::init(v15, v24);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v23 = v10 + 24;
    v28[0] = v11;
    std::streambuf::basic_streambuf();
    v16 = MEMORY[0x1E0DE4FB8];
    v24[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v26 = 0u;
    v27 = 16;
    v17 = *(_QWORD *)(v23 - 24);
    if ((v18 & 1) == 0
    {
    }
    v19 = strlen(a4);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v23, (uint64_t)a4, v19);
    AMSCore::operator<<(&v23, a5);
    v20 = v24[5];
    v21 = (char *)&v24[-1] + *(_QWORD *)(v23 - 24);
    if ((v21[32] & 5) != 0)
    {
      v22 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5) + 32))(&rep, *((_QWORD *)v21 + 5), 0, 1, 16);
      v22 = v33;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v30 = 4;
    v31 = v20;
    v32 = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v9 + 16) + 16))(*(_QWORD *)(v9 + 16), a2, a3, &rep);
    v23 = *v12;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24)) = v12[3];
    v24[0] = v16 + 16;
    if (SBYTE7(v26) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v28);
  }
  return result;
}

void sub_18CC8E168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(_QWORD *a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  void **v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  const std::locale *v13;
  const std::locale::facet *v14;
  char *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *__p;
  char v26;

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1, a2);
  if (!v2)
    return;
  v3 = v2;
  while (1)
  {
    v4 = v3;
    v3 = (uint64_t *)*v3;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove((uint64_t)&__p, a1, v4);
    v5 = (void **)__p;
    if (__p)
    {
      if (v26)
      {
        if (*((char *)__p + 63) < 0)
        {
          operator delete(*((void **)__p + 5));
          if ((*((char *)v5 + 39) & 0x80000000) == 0)
            goto LABEL_7;
        }
        else if ((*((char *)__p + 39) & 0x80000000) == 0)
        {
          goto LABEL_7;
        }
        operator delete(v5[2]);
      }
LABEL_7:
      operator delete(v5);
    }
    if (!v3)
      return;
    v6 = (char *)(v3 + 2);
    v7 = (char *)v3[2];
    v8 = *((char *)v3 + 39);
    v9 = v8 >= 0 ? *((unsigned __int8 *)v3 + 39) : v3[3];
    v10 = a2[23];
    v11 = *(char **)a2;
    v12 = v10 >= 0 ? a2[23] : *((_QWORD *)a2 + 1);
    v13 = std::locale::classic();
    v14 = std::locale::use_facet(v13, MEMORY[0x1E0DE4A90]);
    if (v9 != v12)
      return;
    v15 = v10 >= 0 ? a2 : v11;
    if (v8 < 0)
      v6 = v7;
    if (v9)
      break;
    v19 = v15;
    v18 = v6;
LABEL_27:
    if (v18 != &v6[v9] || v19 != &v15[v9])
      return;
  }
  v16 = v14;
  v17 = v9 - 1;
  v18 = v6;
  v19 = v15;
  while (1)
  {
    v20 = v17;
    v21 = *v19;
    v22 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v16->__vftable[1].__on_zero_shared)(v16, *v18);
    if (v22 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v16->__vftable[1].__on_zero_shared)(v16, v21))break;
    ++v18;
    ++v19;
    v17 = v20 - 1;
    if (!v20)
      goto LABEL_27;
  }
}

uint64_t AMSCore::Logger::log<char [35],std::vector<std::unique_ptr<AMSCore::HTTPCookie>>>(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[8];
  void *__p[2];
  __int128 v21;
  int v22;
  uint64_t v23[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v23[0] = MEMORY[0x1E0DE4FE0] + 64;
    v18 = v7;
    *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24));
    std::ios_base::init(v9, v19);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v18 = v4 + 24;
    v23[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v19[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    v22 = 16;
    v11 = *(_QWORD *)(v18 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Setting global cookies. cookies = ", 34);
    v13 = *a2;
    v14 = a2[1];
    if (*a2 != v14)
    {
      do
      {
        if (*v13)
          AMSCore::operator<<(&v18, *v13);
        else
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"null", 4);
        ++v13;
      }
      while (v13 != v14);
    }
    v15 = v19[5];
    v16 = (char *)&v19[-1] + *(_QWORD *)(v18 - 24);
    if ((v16[32] & 5) != 0)
    {
      v17 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v16 + 5) + 32))(&rep, *((_QWORD *)v16 + 5), 0, 1, 16);
      v17 = v28;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v25 = 2;
    v26 = v15;
    v27 = v17;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "networking", 10, &rep);
    v18 = *v6;
    *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = v6[3];
    v19[0] = v10 + 16;
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v23);
  }
  return result;
}

void sub_18CC8E5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__basic_node_handle<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::allocator<std::pair<std::string const,std::string>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:fe180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = result;
  v2 = *result;
  if (!*result)
    return v1;
  if (*((_BYTE *)result + 9))
  {
    if (*(char *)(v2 + 63) < 0)
    {
      operator delete(*(void **)(v2 + 40));
      if ((*(char *)(v2 + 39) & 0x80000000) == 0)
        goto LABEL_5;
    }
    else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
    {
LABEL_5:
      operator delete((void *)v2);
      *v1 = 0;
      return v1;
    }
    operator delete(*(void **)(v2 + 16));
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t AMSCore::Task<void,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  if (*(_BYTE *)(a1 + 88) && !*(_BYTE *)(a1 + 80))
    (**(void (***)(uint64_t))(a1 + 8))(a1 + 8);
  do
  {
    v5 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v6)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__insert_multi[abi:fe180100]<std::pair<std::string const,std::string> const&>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  const std::locale *v10;
  const std::locale::facet *v11;
  const std::locale::facet *v12;
  uint64_t v13;

  v4 = (char *)operator new(0x40uLL);
  v5 = (uint64_t)v4;
  v6 = v4 + 16;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a2;
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 40), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(v5 + 56) = *(_QWORD *)(a2 + 40);
  }
  v7 = *(char *)(v5 + 39);
  if (v7 >= 0)
    v8 = v6;
  else
    v8 = *(char **)(v5 + 16);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 39);
  else
    v9 = *(_QWORD *)(v5 + 24);
  v10 = std::locale::classic();
  v11 = std::locale::use_facet(v10, MEMORY[0x1E0DE4A90]);
  if (v9)
  {
    v12 = v11;
    v13 = 0;
    do
    {
      v13 ^= 2
           * ((int (*)(const std::locale::facet *, _QWORD))v12->__vftable[1].__on_zero_shared)(v12, *v8++);
      --v9;
    }
    while (v9);
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(v5 + 8) = v13;
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v5);
}

void sub_18CC8E864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18CC8E890(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[63] < 0)
    operator delete(*v3);
  if (v1[39] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::FinanceRequestHandler::handleCompletion(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  AMSCore::HTTPResponseAction *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v1 = *((_QWORD *)result + 145);
  if (*(_BYTE *)(v1 + 472))
  {
    v2 = result;
    v3 = (AMSCore::HTTPResponseAction *)(result + 536);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(result + 536), v1 + 8);
    if (v2[488])
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      v2[488] = 0;
    }
    v4 = *((_QWORD *)v2 + 146);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)v3);
    v2[488] = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    if (v4)
    {
      v5 = (unint64_t *)(*((_QWORD *)v2 + 146) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v2 + 146);
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)v2 + 138);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)v2 + 144);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 142);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)v2 + 140);
    if (!v17)
      goto LABEL_40;
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (v2[1072])
      {
LABEL_29:
        v20 = (std::__shared_weak_count *)*((_QWORD *)v2 + 126);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        goto LABEL_36;
      }
    }
    else
    {
LABEL_40:
      if (v2[1072])
        goto LABEL_29;
    }
    (**((void (***)(uint64_t))v2 + 125))((uint64_t)(v2 + 1000));
LABEL_36:
    *(_OWORD *)(v2 + 1176) = 0u;
    *((_QWORD *)v2 + 67) = v2 + 16;
    *(_QWORD *)v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v3);
  }
  __break(1u);
  return result;
}

void AMSCore::FinanceRequestHandler::handleCompletion(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  if (!*__p)
  {
    v21 = (std::__shared_weak_count *)__p[148];
    v18 = (std::__shared_weak_count *)__p[147];
    goto LABEL_38;
  }
  v2 = __p[146];
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v5 = (std::__shared_weak_count *)__p[146];
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v6 = (std::__shared_weak_count *)__p[138];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)__p[144];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)__p[142];
  if (!v12)
    goto LABEL_21;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = (std::__shared_weak_count *)__p[140];
    if (!v15)
      goto LABEL_25;
  }
  else
  {
LABEL_21:
    v15 = (std::__shared_weak_count *)__p[140];
    if (!v15)
      goto LABEL_25;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_25:
    if (*((_BYTE *)__p + 1072))
      goto LABEL_26;
LABEL_35:
    (*(void (**)(char *))__p[125])((char *)__p + 1000);
LABEL_36:
    v18 = 0;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!*((_BYTE *)__p + 1072))
    goto LABEL_35;
LABEL_26:
  v18 = (std::__shared_weak_count *)__p[126];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_36;
  }
LABEL_37:
  v21 = 0;
LABEL_38:
  v22 = (_QWORD *)__p[66];
  if (v22 == __p + 63)
  {
    v23 = 4;
    v22 = __p + 63;
  }
  else
  {
    if (!v22)
      goto LABEL_43;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_43:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  do
  {
    v24 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v25)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v21)
  {
    v26 = (unint64_t *)&v21->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v18)
  {
    v28 = (unint64_t *)&v18->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(__p);
}

_BYTE *AMSCore::`anonymous namespace'::process(_BYTE *result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  AMSCore::HTTPResponseAction *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  __n128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _BYTE *v78;
  _QWORD *v79;
  _OWORD *v80;
  __n128 *v81;
  _BYTE *v82;
  __int128 *v83;
  AMSCore::HTTPResponseAction *v84;
  std::runtime_error v85[2];
  unsigned int *v86[4];
  std::__shared_weak_count *v87;
  char v88;
  _BYTE v89[472];

  v1 = *((_QWORD *)result + 246);
  if (!*(_BYTE *)(v1 + 472))
  {
LABEL_123:
    __break(1u);
    return result;
  }
  v2 = (unint64_t)result;
  v3 = (uint64_t)(result + 1752);
  v4 = (AMSCore::HTTPResponseAction *)(result + 1000);
  v83 = (__int128 *)(result + 1712);
  v84 = (AMSCore::HTTPResponseAction *)(result + 536);
  v79 = result + 1792;
  v80 = result + 568;
  v5 = result + 1840;
  v6 = result + 1856;
  v7 = result + 1872;
  v8 = result + 1888;
  v81 = (__n128 *)(result + 1816);
  v82 = result + 16;
  v9 = (uint64_t *)(result + 1416);
  while (1)
  {
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v4, v1 + 8);
    v10 = *(_QWORD *)(v2 + 1976);
    if (!v10)
      goto LABEL_8;
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v16 = *(std::__shared_weak_count **)(v2 + 1976);
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v13 = *(std::__shared_weak_count **)(v2 + 1896);
      if (!v13)
        goto LABEL_14;
    }
    else
    {
LABEL_8:
      v13 = *(std::__shared_weak_count **)(v2 + 1896);
      if (!v13)
        goto LABEL_14;
    }
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    v17 = *(std::__shared_weak_count **)(v2 + 1864);
    if (!v17)
      goto LABEL_18;
LABEL_14:
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = *(std::__shared_weak_count **)(v2 + 1848);
      if (!v20)
        goto LABEL_24;
    }
    else
    {
LABEL_18:
      v20 = *(std::__shared_weak_count **)(v2 + 1848);
      if (!v20)
        goto LABEL_24;
    }
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_24:
    v23 = *(std::__shared_weak_count **)(v2 + 1880);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (*(_BYTE *)(v2 + 1784))
          goto LABEL_31;
LABEL_29:
        std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::AuthenticateResult,false> const&>(v3, v9);
        goto LABEL_31;
      }
    }
    if (!*(_BYTE *)(v2 + 1784))
      goto LABEL_29;
LABEL_31:
    if (!*(_BYTE *)(v2 + 1832) && *(_BYTE *)(v2 + 1048))
    {
      *(_QWORD *)(v2 + 1816) = *(_QWORD *)(v2 + 1032);
      v26 = *(_QWORD *)(v2 + 1040);
      *(_QWORD *)(v2 + 1824) = v26;
      if (v26)
      {
        v27 = (unint64_t *)(v26 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      *(_BYTE *)(v2 + 1832) = 1;
    }
    if (*(_DWORD *)(v2 + 992) == 1 && *(_DWORD *)(v2 + 1456) != 1)
      AMSCore::HTTPResponseAction::operator=((uint64_t)v84, (uint64_t)v4);
    v30 = *(_QWORD *)(v2 + 1960);
    v31 = *(_QWORD *)(v2 + 1952);
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v4);
    v32 = (uint64_t *)(v30 + 8);
    if (v30 + 8 == v31)
      break;
    *(_QWORD *)(v2 + 1960) = v32;
    v33 = *(_QWORD *)(v2 + 1912);
    v34 = *v32;
    *(_QWORD *)(v2 + 1872) = *(_QWORD *)(v2 + 1904);
    *(_QWORD *)(v2 + 1880) = v33;
    if (v33)
    {
      v35 = (unint64_t *)(v33 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = *(_QWORD *)(v2 + 1928);
    *(_QWORD *)(v2 + 1840) = *(_QWORD *)(v2 + 1920);
    *(_QWORD *)(v2 + 1848) = v37;
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = *(_QWORD *)(v2 + 1944);
    *(_QWORD *)(v2 + 1856) = *(_QWORD *)(v2 + 1936);
    *(_QWORD *)(v2 + 1864) = v40;
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)v34 + 24))(v34, v7, v5, v6);
    v43 = *(_OWORD *)(v2 + 1888);
    *(_OWORD *)(v2 + 1968) = v43;
    *v8 = 0;
    v8[1] = 0;
    if (!atomic_load((unint64_t *)(v43 + 480)))
    {
      *(_BYTE *)(v3 + 232) = 0;
      v45 = (unint64_t *)(*(_QWORD *)(v2 + 1968) + 480);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v2, v45));
      if (!v46)
        return result;
    }
    v1 = *(_QWORD *)(v2 + 1968);
    if (!*(_BYTE *)(v1 + 472))
      goto LABEL_123;
  }
  if (*(_DWORD *)(v2 + 992) == 1)
  {
    std::__optional_move_base<AMSCore::Error,false>::__optional_move_base[abi:fe180100]((AMSCore::Error *)v85, *(_QWORD *)(v2 + 1904) + 24);
    if (v88)
    {
      AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v89, v85);
      AMSCore::HTTPResponseAction::operator=((uint64_t)v84, (uint64_t)v89);
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v89);
      if (v88)
      {
        v85[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v47 = v87;
        if (v87)
        {
          v48 = (unint64_t *)&v87->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v86, v86[1]);
        MEMORY[0x18D7898AC](v85);
      }
    }
  }
  *(_BYTE *)(v2 + 1712) = 0;
  *(_BYTE *)(v2 + 1744) = 0;
  if (*(_BYTE *)(v2 + 1784))
  {
    v50 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v2 + 1712) = *(_OWORD *)v3;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_OWORD *)(v2 + 1728) = v50;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_BYTE *)(v2 + 1744) = 1;
  }
  v51 = std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(v2 + 952, v83);
  if (*(_BYTE *)(v2 + 1744))
  {
    v52 = *(std::__shared_weak_count **)(v2 + 1736);
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v52->__on_zero_shared)(v52, v51);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = *(std::__shared_weak_count **)(v2 + 1720);
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v55->__on_zero_shared)(v55, v51);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  *(_BYTE *)(v2 + 1792) = 0;
  *(_BYTE *)(v2 + 1808) = 0;
  v58 = *(unsigned __int8 *)(v2 + 1832);
  if (*(_BYTE *)(v2 + 1832))
  {
    v51 = *v81;
    *(__n128 *)(v2 + 1792) = *v81;
    v81->n128_u64[0] = 0;
    v81->n128_u64[1] = 0;
    v58 = 1;
    *(_BYTE *)(v2 + 1808) = 1;
  }
  if (*(unsigned __int8 *)(v2 + 584) == v58)
  {
    if (!*(_BYTE *)(v2 + 584))
      goto LABEL_103;
    v59 = *(_OWORD *)(v2 + 1792);
    *v79 = 0;
    v79[1] = 0;
    v60 = *(std::__shared_weak_count **)(v2 + 576);
    *v80 = v59;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
        if (!*(_BYTE *)(v2 + 1808))
          goto LABEL_103;
        goto LABEL_97;
      }
    }
LABEL_96:
    if (!*(_BYTE *)(v2 + 1808))
      goto LABEL_103;
  }
  else
  {
    if (*(_BYTE *)(v2 + 584))
    {
      v63 = *(std::__shared_weak_count **)(v2 + 576);
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v63->__on_zero_shared)(v63, v51);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      *(_BYTE *)(v2 + 584) = 0;
      goto LABEL_96;
    }
    *v80 = *(_OWORD *)(v2 + 1792);
    *v79 = 0;
    v79[1] = 0;
    *(_BYTE *)(v2 + 584) = 1;
    if (!*(_BYTE *)(v2 + 1808))
      goto LABEL_103;
  }
LABEL_97:
  v66 = *(std::__shared_weak_count **)(v2 + 1800);
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
LABEL_103:
  if (*(_BYTE *)(v2 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
    *(_BYTE *)(v2 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v84);
  *(_BYTE *)(v2 + 488) = 1;
  if (*(_BYTE *)(v2 + 1832))
  {
    v69 = *(std::__shared_weak_count **)(v2 + 1824);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
  }
  if (*(_BYTE *)(v2 + 1784))
  {
    v72 = *(std::__shared_weak_count **)(v2 + 1776);
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = *(std::__shared_weak_count **)(v2 + 1760);
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v84);
  *(_QWORD *)(v2 + 536) = v82;
  *(_QWORD *)v2 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v78);
}

void sub_18CC8F454(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, AMSCore::HTTPResponseAction *a15, char a16)
{
  uint64_t v16;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a16);
  std::optional<AMSCore::DialogResult>::~optional(a12);
  std::optional<AMSCore::AuthenticateResult>::~optional(v16);
  AMSCore::HTTPResponseAction::~HTTPResponseAction(a15);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::`anonymous namespace'::process(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;

  if (*__p)
  {
    v2 = __p[247];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[247];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[237];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[233];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[231];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)__p[235];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (*((_BYTE *)__p + 1832))
    {
      v18 = (std::__shared_weak_count *)__p[228];
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    if (*((_BYTE *)__p + 1784))
    {
      v21 = (std::__shared_weak_count *)__p[222];
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)__p[220];
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 67));
  }
  v27 = (_QWORD *)__p[66];
  if (v27 == __p + 63)
  {
    v28 = 4;
    v27 = __p + 63;
  }
  else
  {
    if (!v27)
      goto LABEL_50;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_50:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v29 = __p[243];
  do
  {
    v30 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v31)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v29)
  {
    v32 = (unint64_t *)(__p[243] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      v34 = (std::__shared_weak_count *)__p[243];
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v35 = __p[241];
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      v38 = (std::__shared_weak_count *)__p[241];
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v39 = __p[239];
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      v42 = (std::__shared_weak_count *)__p[239];
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  operator delete(__p);
}

void std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::AuthenticateResult,false> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v5 = *a2;
      v4 = a2[1];
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = *(std::__shared_weak_count **)(a1 + 8);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v4;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v12 = a2[2];
      v11 = a2[3];
      if (v11)
      {
        v13 = (unint64_t *)(v11 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = *(std::__shared_weak_count **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v11;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v18 = *(std::__shared_weak_count **)(a1 + 24);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(std::__shared_weak_count **)(a1 + 8);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    v24 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
}

AMSCore::URL *AMSCore::HTTPResponseAction::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 v20;
  AMSCore::URL *result;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void **v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  void **v41;
  __int128 *v42;
  __int128 v43;
  __int128 v44;
  char v45;
  char v46;
  char v47;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = (_QWORD *)(a1 + 8);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1, *(unsigned int **)(a1 + 8));
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v5 = (_QWORD *)(a2 + 8);
      v6 = *(_QWORD *)(a2 + 8);
      *v4 = v6;
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      if (v7)
      {
        *(_QWORD *)(v6 + 16) = v4;
        *(_QWORD *)a2 = v5;
        *v5 = 0;
        *(_QWORD *)(a2 + 16) = 0;
      }
      else
      {
        *(_QWORD *)a1 = v4;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1, *(unsigned int **)(a1 + 8));
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v8 = (_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v10 = a1 + 8;
    v11 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v11;
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = v10;
      *(_QWORD *)a2 = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    else
    {
      *(_QWORD *)a1 = v10;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  v12 = (__int128 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v13 = *v12;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(a2 + 40) = 0;
      v14 = *(std::__shared_weak_count **)(a1 + 40);
      *(_OWORD *)(a1 + 32) = v13;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v17 = *(std::__shared_weak_count **)(a1 + 40);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v12;
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v20 = std::__optional_storage_base<AMSCore::Error,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::Error,false>>((std::runtime_error *)(a1 + 56), (std::runtime_error *)(a2 + 56));
  result = (AMSCore::URL *)(a1 + 136);
  v22 = (__int128 *)(a2 + 136);
  if (*(unsigned __int8 *)(a1 + 288) == *(unsigned __int8 *)(a2 + 288))
  {
    if (*(_BYTE *)(a1 + 288))
      AMSCore::URL::operator=((uint64_t)result, v22);
  }
  else if (*(_BYTE *)(a1 + 288))
  {
    AMSCore::URL::~URL(result);
    *(_BYTE *)(a1 + 288) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 160) = 0;
    if (*(_BYTE *)(a2 + 160))
    {
      v23 = *v22;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_OWORD *)result = v23;
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_QWORD *)v22 = 0;
      *(_BYTE *)(a1 + 160) = 1;
    }
    *(_BYTE *)(a1 + 168) = 0;
    *(_BYTE *)(a1 + 192) = 0;
    if (*(_BYTE *)(a2 + 192))
    {
      v24 = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = v24;
      *(_QWORD *)(a2 + 176) = 0;
      *(_QWORD *)(a2 + 184) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_BYTE *)(a1 + 192) = 1;
    }
    *(_BYTE *)(a1 + 200) = 0;
    *(_BYTE *)(a1 + 224) = 0;
    if (*(_BYTE *)(a2 + 224))
    {
      v25 = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 200) = v25;
      *(_QWORD *)(a2 + 208) = 0;
      *(_QWORD *)(a2 + 216) = 0;
      *(_QWORD *)(a2 + 200) = 0;
      *(_BYTE *)(a1 + 224) = 1;
    }
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = a1 + 240;
    *(_QWORD *)(a1 + 248) = a1 + 240;
    *(_QWORD *)(a1 + 256) = 0;
    if (a1 == a2)
    {
      __break(1u);
      return result;
    }
    v26 = *(_QWORD *)(a2 + 256);
    if (v26)
    {
      v28 = *(_QWORD *)(a2 + 240);
      v27 = *(uint64_t **)(a2 + 248);
      v29 = *v27;
      *(_QWORD *)(v29 + 8) = *(_QWORD *)(v28 + 8);
      **(_QWORD **)(v28 + 8) = v29;
      v30 = *(_QWORD *)(a1 + 240);
      *(_QWORD *)(v30 + 8) = v27;
      *v27 = v30;
      *(_QWORD *)(a1 + 240) = v28;
      *(_QWORD *)(v28 + 8) = a1 + 240;
      *(_QWORD *)(a1 + 256) = v26;
      *(_QWORD *)(a2 + 256) = 0;
    }
    v20 = *(__n128 *)(a2 + 264);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(__n128 *)(a1 + 264) = v20;
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 264) = 0;
    *(_BYTE *)(a1 + 288) = 1;
  }
  v31 = *(_BYTE *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 300) = v31;
  v32 = a1 + 304;
  if (*(unsigned __int8 *)(a1 + 336) == *(unsigned __int8 *)(a2 + 336))
  {
    if (*(_BYTE *)(a1 + 336))
      AMSCore::Any::operator=(a1 + 304, a2 + 304);
    goto LABEL_55;
  }
  if (*(_BYTE *)(a1 + 336))
  {
    v33 = *(unsigned int *)(a1 + 328);
    if ((_DWORD)v33 != -1)
      ((void (*)(char *, uint64_t, __n128))off_1E253D240[v33])(&v45, v32, v20);
    *(_DWORD *)(a1 + 328) = -1;
    *(_BYTE *)(a1 + 336) = 0;
    goto LABEL_55;
  }
  *(_BYTE *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 328) = -1;
  v34 = *(unsigned int *)(a2 + 328);
  if ((_DWORD)v34 == -1)
    goto LABEL_53;
  ((void (*)(char *, uint64_t, uint64_t, __n128))off_1E253CAE8[v34])(&v46, v32, a2 + 304, v20);
  *(_DWORD *)(a1 + 328) = v34;
  v35 = *(unsigned int *)(a2 + 328);
  if ((_DWORD)v35 == -1)
    goto LABEL_53;
  if ((_DWORD)v35)
  {
    ((void (*)(char *, uint64_t))off_1E253D240[v35])(&v47, a2 + 304);
LABEL_53:
    *(_DWORD *)(a2 + 328) = 0;
  }
  *(_BYTE *)(a1 + 336) = 1;
LABEL_55:
  v36 = *(_BYTE *)(a2 + 348);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 348) = v36;
  v37 = (void **)(a1 + 352);
  v38 = (__int128 *)(a2 + 352);
  if (*(unsigned __int8 *)(a1 + 376) == *(unsigned __int8 *)(a2 + 376))
  {
    if (*(_BYTE *)(a1 + 376))
    {
      if (*(char *)(a1 + 375) < 0)
        operator delete(*v37);
      v39 = *v38;
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      *(_OWORD *)v37 = v39;
      *(_BYTE *)(a2 + 375) = 0;
      *(_BYTE *)(a2 + 352) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 376))
  {
    if (*(char *)(a1 + 375) < 0)
      operator delete(*v37);
    *(_BYTE *)(a1 + 376) = 0;
  }
  else
  {
    v40 = *v38;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_OWORD *)v37 = v40;
    *(_QWORD *)(a2 + 360) = 0;
    *(_QWORD *)(a2 + 368) = 0;
    *(_QWORD *)v38 = 0;
    *(_BYTE *)(a1 + 376) = 1;
  }
  v41 = (void **)(a1 + 384);
  v42 = (__int128 *)(a2 + 384);
  if (*(unsigned __int8 *)(a1 + 408) == *(unsigned __int8 *)(a2 + 408))
  {
    if (*(_BYTE *)(a1 + 408))
    {
      if (*(char *)(a1 + 407) < 0)
        operator delete(*v41);
      v43 = *v42;
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      *(_OWORD *)v41 = v43;
      *(_BYTE *)(a2 + 407) = 0;
      *(_BYTE *)(a2 + 384) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 408))
  {
    if (*(char *)(a1 + 407) < 0)
      operator delete(*v41);
    *(_BYTE *)(a1 + 408) = 0;
  }
  else
  {
    v44 = *v42;
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_OWORD *)v41 = v44;
    *(_QWORD *)(a2 + 392) = 0;
    *(_QWORD *)(a2 + 400) = 0;
    *(_QWORD *)v42 = 0;
    *(_BYTE *)(a1 + 408) = 1;
  }
  std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(a1 + 416, (__int128 *)(a2 + 416));
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  return (AMSCore::URL *)a1;
}

__n128 std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __n128 result;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v4 = *a2;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      *(_OWORD *)a1 = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (__n128)a2[1];
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 3) = 0;
      v9 = *(std::__shared_weak_count **)(a1 + 24);
      *(__n128 *)(a1 + 16) = result;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v12 = *(std::__shared_weak_count **)(a1 + 24);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *(std::__shared_weak_count **)(a1 + 8);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    result = (__n128)a2[1];
    *(__n128 *)(a1 + 16) = result;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

void AMSCore::Logger::~Logger(AMSCore::Logger *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E25213D0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E25213D0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::Logger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::Logger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522F88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::Logger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMSCore::OSLogSink>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::OSLogSink>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::OSLogSink>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

_QWORD *AMSCore::Log::setRedaction(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(*a1 - 24);
  if ((v3 & 1) == 0
  {
  }
  return a1;
}

void AMSCore::CancellableRequestHandler::~CancellableRequestHandler(AMSCore::CancellableRequestHandler *this)
{
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::CancellableRequestHandler::handleCompletion(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  _QWORD *v10;
  unint64_t v11;
  std::runtime_error *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::runtime_error v26;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  AMSCore::HTTPResponseAction *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  AMSCore::HTTPResponseAction *v56;
  std::system_error v57;
  unsigned int **v58;
  unsigned int *v59[3];
  std::__shared_weak_count *v60;
  _OWORD v61[29];
  std::string __what_arg;
  std::error_code v63;

  v10 = operator new(0x458uLL);
  v11 = (unint64_t)v10;
  *v10 = AMSCore::CancellableRequestHandler::handleCompletion;
  v10[1] = AMSCore::CancellableRequestHandler::handleCompletion;
  v12 = (std::runtime_error *)(v10 + 125);
  v56 = (AMSCore::HTTPResponseAction *)(v10 + 67);
  v53 = v10 + 129;
  v54 = (uint64_t)(v10 + 127);
  v13 = *a2;
  v14 = a2[1];
  v10[133] = v14;
  *a2 = 0;
  a2[1] = 0;
  v15 = a3[1];
  v51 = *a3;
  v52 = v10 + 131;
  v10[134] = v15;
  *a3 = 0;
  a3[1] = 0;
  v17 = *a4;
  v16 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v10[135] = v16;
  do
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v18 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_BYTE *)v10 + 24) = 0;
  *((_BYTE *)v10 + 488) = 0;
  v10[62] = 0;
  v10[66] = 0;
  v55 = (char *)(v10 + 2);
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(v61, (uint64_t)(v10 + 2));
  *a5 = v61[0];
  v19 = atomic_load(*(unsigned __int8 **)(a1 + 16));
  if ((v19 & 1) != 0)
  {
    AMSCore::StringUtils::join<char [22]>(&__what_arg, "Request was cancelled");
    v63.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v63.__val_ = 1;
    std::system_error::system_error(&v57, v63, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    memset(v59, 0, sizeof(v59));
    v57.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v58 = v59;
    v60 = 0;
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v61, &v57);
    if (*(_BYTE *)(v11 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v11 + 24));
      *(_BYTE *)(v11 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v11 + 24, (uint64_t)v61);
    *(_BYTE *)(v11 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v61);
    v57.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v48 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v50 = __ldaxr(p_shared_owners);
      while (__stlxr(v50 - 1, p_shared_owners));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v58, v59[0]);
    MEMORY[0x18D7898AC](&v57);
    v31 = v56;
LABEL_55:
    *(_QWORD *)(v11 + 536) = v55;
    *(_QWORD *)v11 = 0;
    AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v31);
    return;
  }
  *(_QWORD *)(v11 + 1016) = v13;
  *(_QWORD *)(v11 + 1024) = v14;
  if (v14)
  {
    v20 = (unint64_t *)(v14 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_QWORD *)(v11 + 1032) = v51;
  *(_QWORD *)(v11 + 1040) = v15;
  if (v15)
  {
    v22 = (unint64_t *)(v15 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(v11 + 1048) = v17;
  *(_QWORD *)(v11 + 1056) = v16;
  if (v16)
  {
    v24 = (unint64_t *)(v16 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  AMSCore::FinanceRequestHandler::handleCompletion(a1, v54, v53, v52, v12);
  v26 = *v12;
  *(std::runtime_error *)(v11 + 1088) = *v12;
  v12->__vftable = 0;
  v12->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)&v26.__vftable[20]))
    goto LABEL_17;
  LOBYTE(v12[6].__imp_.__imp_) = 0;
  v28 = (unint64_t *)(*(_QWORD *)(v11 + 1088) + 480);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v11, v28));
  if (v29)
  {
LABEL_17:
    v30 = *(_QWORD *)(v11 + 1088);
    if (!*(_BYTE *)(v30 + 472))
    {
      __break(1u);
      return;
    }
    v31 = v56;
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v56, v30 + 8);
    if (*(_BYTE *)(v11 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v11 + 24));
      *(_BYTE *)(v11 + 488) = 0;
    }
    v32 = *(_QWORD *)(v11 + 1096);
    AMSCore::HTTPResponseAction::HTTPResponseAction(v11 + 24, (uint64_t)v56);
    *(_BYTE *)(v11 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v56);
    if (v32)
    {
      v33 = (unint64_t *)(*(_QWORD *)(v11 + 1096) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        v35 = *(std::__shared_weak_count **)(v11 + 1096);
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v36 = *(std::__shared_weak_count **)(v11 + 1008);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(std::__shared_weak_count **)(v11 + 1056);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = *(std::__shared_weak_count **)(v11 + 1040);
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = *(std::__shared_weak_count **)(v11 + 1024);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    goto LABEL_55;
  }
}

void sub_18CC90684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC90690()
{
  void *v0;

  __cxa_begin_catch(v0);
  std::terminate();
}

void AMSCore::CancellableRequestHandler::handleResponse(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  _QWORD *v10;
  unint64_t v11;
  std::runtime_error *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::runtime_error v26;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  AMSCore::HTTPResponseAction *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  char *v55;
  AMSCore::HTTPResponseAction *v56;
  std::system_error v57;
  unsigned int **v58;
  unsigned int *v59[3];
  std::__shared_weak_count *v60;
  _OWORD v61[29];
  std::string __what_arg;
  std::error_code v63;

  v10 = operator new(0x458uLL);
  v11 = (unint64_t)v10;
  *v10 = AMSCore::CancellableRequestHandler::handleResponse;
  v10[1] = AMSCore::CancellableRequestHandler::handleResponse;
  v12 = (std::runtime_error *)(v10 + 125);
  v56 = (AMSCore::HTTPResponseAction *)(v10 + 67);
  v53 = v10 + 129;
  v54 = v10 + 127;
  v13 = *a2;
  v14 = a2[1];
  v10[133] = v14;
  *a2 = 0;
  a2[1] = 0;
  v15 = a3[1];
  v51 = *a3;
  v52 = (uint64_t)(v10 + 131);
  v10[134] = v15;
  *a3 = 0;
  a3[1] = 0;
  v17 = *a4;
  v16 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v10[135] = v16;
  do
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v18 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_BYTE *)v10 + 24) = 0;
  *((_BYTE *)v10 + 488) = 0;
  v10[62] = 0;
  v10[66] = 0;
  v55 = (char *)(v10 + 2);
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(v61, (uint64_t)(v10 + 2));
  *a5 = v61[0];
  v19 = atomic_load(*(unsigned __int8 **)(a1 + 16));
  if ((v19 & 1) != 0)
  {
    AMSCore::StringUtils::join<char [22]>(&__what_arg, "Request was cancelled");
    v63.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v63.__val_ = 1;
    std::system_error::system_error(&v57, v63, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    memset(v59, 0, sizeof(v59));
    v57.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v58 = v59;
    v60 = 0;
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v61, &v57);
    if (*(_BYTE *)(v11 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v11 + 24));
      *(_BYTE *)(v11 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v11 + 24, (uint64_t)v61);
    *(_BYTE *)(v11 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v61);
    v57.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v48 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v50 = __ldaxr(p_shared_owners);
      while (__stlxr(v50 - 1, p_shared_owners));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v58, v59[0]);
    MEMORY[0x18D7898AC](&v57);
    v31 = v56;
LABEL_55:
    *(_QWORD *)(v11 + 536) = v55;
    *(_QWORD *)v11 = 0;
    AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v31);
    return;
  }
  *(_QWORD *)(v11 + 1016) = v13;
  *(_QWORD *)(v11 + 1024) = v14;
  if (v14)
  {
    v20 = (unint64_t *)(v14 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_QWORD *)(v11 + 1032) = v51;
  *(_QWORD *)(v11 + 1040) = v15;
  if (v15)
  {
    v22 = (unint64_t *)(v15 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(v11 + 1048) = v17;
  *(_QWORD *)(v11 + 1056) = v16;
  if (v16)
  {
    v24 = (unint64_t *)(v16 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  AMSCore::FinanceRequestHandler::handleResponse(a1, v54, v53, v52, v12);
  v26 = *v12;
  *(std::runtime_error *)(v11 + 1088) = *v12;
  v12->__vftable = 0;
  v12->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)&v26.__vftable[20]))
    goto LABEL_17;
  LOBYTE(v12[6].__imp_.__imp_) = 0;
  v28 = (unint64_t *)(*(_QWORD *)(v11 + 1088) + 480);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v11, v28));
  if (v29)
  {
LABEL_17:
    v30 = *(_QWORD *)(v11 + 1088);
    if (!*(_BYTE *)(v30 + 472))
    {
      __break(1u);
      return;
    }
    v31 = v56;
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v56, v30 + 8);
    if (*(_BYTE *)(v11 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v11 + 24));
      *(_BYTE *)(v11 + 488) = 0;
    }
    v32 = *(_QWORD *)(v11 + 1096);
    AMSCore::HTTPResponseAction::HTTPResponseAction(v11 + 24, (uint64_t)v56);
    *(_BYTE *)(v11 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v56);
    if (v32)
    {
      v33 = (unint64_t *)(*(_QWORD *)(v11 + 1096) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        v35 = *(std::__shared_weak_count **)(v11 + 1096);
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v36 = *(std::__shared_weak_count **)(v11 + 1008);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(std::__shared_weak_count **)(v11 + 1056);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = *(std::__shared_weak_count **)(v11 + 1040);
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = *(std::__shared_weak_count **)(v11 + 1024);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    goto LABEL_55;
  }
}

void sub_18CC90B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC90B1C()
{
  void *v0;

  __cxa_begin_catch(v0);
  std::terminate();
}

_BYTE *AMSCore::CancellableRequestHandler::handleResponse(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  AMSCore::HTTPResponseAction *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v1 = *((_QWORD *)result + 136);
  if (*(_BYTE *)(v1 + 472))
  {
    v2 = result;
    v3 = (AMSCore::HTTPResponseAction *)(result + 536);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(result + 536), v1 + 8);
    if (v2[488])
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      v2[488] = 0;
    }
    v4 = *((_QWORD *)v2 + 137);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)v3);
    v2[488] = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    if (v4)
    {
      v5 = (unint64_t *)(*((_QWORD *)v2 + 137) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v2 + 137);
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)v2 + 126);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)v2 + 132);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 130);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)v2 + 128);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *((_QWORD *)v2 + 67) = v2 + 16;
    *(_QWORD *)v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::CancellableRequestHandler::handleResponse(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;

  if (*__p)
  {
    v2 = __p[137];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[137];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[126];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[132];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[130];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)__p[128];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v18 = (_QWORD *)__p[66];
  if (v18 == __p + 63)
  {
    v19 = 4;
    v18 = __p + 63;
  }
  else
  {
    if (!v18)
      goto LABEL_32;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_32:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v20 = __p[135];
  do
  {
    v21 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v22)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v20)
  {
    v23 = (unint64_t *)(__p[135] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      v25 = (std::__shared_weak_count *)__p[135];
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v26 = __p[134];
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      v29 = (std::__shared_weak_count *)__p[134];
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v30 = __p[133];
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = (std::__shared_weak_count *)__p[133];
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(__p);
}

_BYTE *AMSCore::CancellableRequestHandler::handleCompletion(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  AMSCore::HTTPResponseAction *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v1 = *((_QWORD *)result + 136);
  if (*(_BYTE *)(v1 + 472))
  {
    v2 = result;
    v3 = (AMSCore::HTTPResponseAction *)(result + 536);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(result + 536), v1 + 8);
    if (v2[488])
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      v2[488] = 0;
    }
    v4 = *((_QWORD *)v2 + 137);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)v3);
    v2[488] = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    if (v4)
    {
      v5 = (unint64_t *)(*((_QWORD *)v2 + 137) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v2 + 137);
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)v2 + 126);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)v2 + 132);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 130);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)v2 + 128);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *((_QWORD *)v2 + 67) = v2 + 16;
    *(_QWORD *)v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::CancellableRequestHandler::handleCompletion(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;

  if (*__p)
  {
    v2 = __p[137];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[137];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[126];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[132];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[130];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)__p[128];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v18 = (_QWORD *)__p[66];
  if (v18 == __p + 63)
  {
    v19 = 4;
    v18 = __p + 63;
  }
  else
  {
    if (!v18)
      goto LABEL_32;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_32:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v20 = __p[135];
  do
  {
    v21 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v22)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v20)
  {
    v23 = (unint64_t *)(__p[135] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      v25 = (std::__shared_weak_count *)__p[135];
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v26 = __p[134];
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      v29 = (std::__shared_weak_count *)__p[134];
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v30 = __p[133];
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = (std::__shared_weak_count *)__p[133];
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(__p);
}

void AMSCore::AnonymousCancellableRequestHandler::~AnonymousCancellableRequestHandler(AMSCore::AnonymousCancellableRequestHandler *this)
{
  JUMPOUT(0x18D789BDCLL);
}

_BYTE *AMSCore::AnonymousCancellableRequestHandler::handleCompletion@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *result;
  __int128 v23;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  AMSCore::HTTPResponseAction *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  AMSCore::HTTPResponseAction *v47;
  std::system_error v48;
  unsigned int **v49;
  unsigned int *v50[3];
  std::__shared_weak_count *v51;
  _OWORD v52[29];
  std::string __what_arg;
  std::error_code v54;

  v8 = operator new(0x440uLL);
  v9 = (unint64_t)v8;
  v10 = (char *)(v8 + 125);
  *v8 = AMSCore::AnonymousCancellableRequestHandler::handleCompletion;
  v8[1] = AMSCore::AnonymousCancellableRequestHandler::handleCompletion;
  v47 = (AMSCore::HTTPResponseAction *)(v8 + 67);
  v45 = v8 + 127;
  v11 = v8 + 129;
  v13 = *a2;
  v12 = a2[1];
  v8[131] = v12;
  *a2 = 0;
  a2[1] = 0;
  v14 = *a3;
  v15 = a3[1];
  v8[132] = v15;
  *a3 = 0;
  a3[1] = 0;
  do
    v16 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v16 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_BYTE *)v8 + 24) = 0;
  *((_BYTE *)v8 + 488) = 0;
  v8[62] = 0;
  v8[66] = 0;
  v46 = (char *)(v8 + 2);
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(v52, (uint64_t)(v8 + 2));
  *a4 = v52[0];
  v17 = atomic_load(*(unsigned __int8 **)(a1 + 8));
  if ((v17 & 1) != 0)
  {
    AMSCore::StringUtils::join<char [22]>(&__what_arg, "Request was cancelled");
    v54.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v54.__val_ = 1;
    std::system_error::system_error(&v48, v54, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    memset(v50, 0, sizeof(v50));
    v48.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v49 = v50;
    v51 = 0;
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v52, &v48);
    if (*(_BYTE *)(v9 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v9 + 24));
      *(_BYTE *)(v9 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v9 + 24, (uint64_t)v52);
    *(_BYTE *)(v9 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v52);
    v48.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v42 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v49, v50[0]);
    MEMORY[0x18D7898AC](&v48);
    v28 = v47;
LABEL_47:
    *(_QWORD *)(v9 + 536) = v46;
    *(_QWORD *)v9 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v28);
  }
  *(_QWORD *)(v9 + 1016) = v13;
  *(_QWORD *)(v9 + 1024) = v12;
  if (v12)
  {
    v18 = (unint64_t *)(v12 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(v9 + 1032) = v14;
  *(_QWORD *)(v9 + 1040) = v15;
  if (v15)
  {
    v20 = (unint64_t *)(v15 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  result = AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::handleCompletion(v45, v11, v10);
  v23 = *(_OWORD *)v10;
  *((_OWORD *)v10 + 4) = *(_OWORD *)v10;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  if (atomic_load((unint64_t *)(v23 + 480)))
    goto LABEL_14;
  v10[80] = 0;
  v25 = (unint64_t *)(*(_QWORD *)(v9 + 1064) + 480);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v9, v25));
  if (v26)
  {
LABEL_14:
    v27 = *((_QWORD *)v10 + 8);
    if (!*(_BYTE *)(v27 + 472))
    {
      __break(1u);
      return result;
    }
    v28 = v47;
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v47, v27 + 8);
    if (*(_BYTE *)(v9 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v9 + 24));
      *(_BYTE *)(v9 + 488) = 0;
    }
    v29 = *(_QWORD *)(v9 + 1072);
    AMSCore::HTTPResponseAction::HTTPResponseAction(v9 + 24, (uint64_t)v47);
    *(_BYTE *)(v9 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v47);
    if (v29)
    {
      v30 = (unint64_t *)(*(_QWORD *)(v9 + 1072) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        v32 = *(std::__shared_weak_count **)(v9 + 1072);
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v33 = *(std::__shared_weak_count **)(v9 + 1008);
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = *(std::__shared_weak_count **)(v9 + 1040);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(std::__shared_weak_count **)(v9 + 1024);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    goto LABEL_47;
  }
  return result;
}

void sub_18CC9174C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC91758()
{
  void *v0;

  __cxa_begin_catch(v0);
  std::terminate();
}

_BYTE *AMSCore::AnonymousCancellableRequestHandler::handleResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *result;
  __int128 v23;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  AMSCore::HTTPResponseAction *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  AMSCore::HTTPResponseAction *v47;
  std::system_error v48;
  unsigned int **v49;
  unsigned int *v50[3];
  std::__shared_weak_count *v51;
  _OWORD v52[29];
  std::string __what_arg;
  std::error_code v54;

  v8 = operator new(0x440uLL);
  v9 = (unint64_t)v8;
  v10 = (char *)(v8 + 125);
  *v8 = AMSCore::AnonymousCancellableRequestHandler::handleResponse;
  v8[1] = AMSCore::AnonymousCancellableRequestHandler::handleResponse;
  v47 = (AMSCore::HTTPResponseAction *)(v8 + 67);
  v45 = (uint64_t)(v8 + 127);
  v11 = v8 + 129;
  v13 = *a2;
  v12 = a2[1];
  v8[131] = v12;
  *a2 = 0;
  a2[1] = 0;
  v14 = *a3;
  v15 = a3[1];
  v8[132] = v15;
  *a3 = 0;
  a3[1] = 0;
  do
    v16 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v16 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_BYTE *)v8 + 24) = 0;
  *((_BYTE *)v8 + 488) = 0;
  v8[62] = 0;
  v8[66] = 0;
  v46 = (char *)(v8 + 2);
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(v52, (uint64_t)(v8 + 2));
  *a4 = v52[0];
  v17 = atomic_load(*(unsigned __int8 **)(a1 + 8));
  if ((v17 & 1) != 0)
  {
    AMSCore::StringUtils::join<char [22]>(&__what_arg, "Request was cancelled");
    v54.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v54.__val_ = 1;
    std::system_error::system_error(&v48, v54, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    memset(v50, 0, sizeof(v50));
    v48.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v49 = v50;
    v51 = 0;
    AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v52, &v48);
    if (*(_BYTE *)(v9 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v9 + 24));
      *(_BYTE *)(v9 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v9 + 24, (uint64_t)v52);
    *(_BYTE *)(v9 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v52);
    v48.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v42 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v49, v50[0]);
    MEMORY[0x18D7898AC](&v48);
    v28 = v47;
LABEL_47:
    *(_QWORD *)(v9 + 536) = v46;
    *(_QWORD *)v9 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v28);
  }
  *(_QWORD *)(v9 + 1016) = v13;
  *(_QWORD *)(v9 + 1024) = v12;
  if (v12)
  {
    v18 = (unint64_t *)(v12 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(v9 + 1032) = v14;
  *(_QWORD *)(v9 + 1040) = v15;
  if (v15)
  {
    v20 = (unint64_t *)(v15 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  result = AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::handleResponse(v45, v11, v10);
  v23 = *(_OWORD *)v10;
  *((_OWORD *)v10 + 4) = *(_OWORD *)v10;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  if (atomic_load((unint64_t *)(v23 + 480)))
    goto LABEL_14;
  v10[80] = 0;
  v25 = (unint64_t *)(*(_QWORD *)(v9 + 1064) + 480);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v9, v25));
  if (v26)
  {
LABEL_14:
    v27 = *((_QWORD *)v10 + 8);
    if (!*(_BYTE *)(v27 + 472))
    {
      __break(1u);
      return result;
    }
    v28 = v47;
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v47, v27 + 8);
    if (*(_BYTE *)(v9 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v9 + 24));
      *(_BYTE *)(v9 + 488) = 0;
    }
    v29 = *(_QWORD *)(v9 + 1072);
    AMSCore::HTTPResponseAction::HTTPResponseAction(v9 + 24, (uint64_t)v47);
    *(_BYTE *)(v9 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v47);
    if (v29)
    {
      v30 = (unint64_t *)(*(_QWORD *)(v9 + 1072) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        v32 = *(std::__shared_weak_count **)(v9 + 1072);
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v33 = *(std::__shared_weak_count **)(v9 + 1008);
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = *(std::__shared_weak_count **)(v9 + 1040);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(std::__shared_weak_count **)(v9 + 1024);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    goto LABEL_47;
  }
  return result;
}

void sub_18CC91B50(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC91B5C()
{
  void *v0;

  __cxa_begin_catch(v0);
  std::terminate();
}

_BYTE *AMSCore::AnonymousCancellableRequestHandler::handleResponse(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  AMSCore::HTTPResponseAction *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v1 = *((_QWORD *)result + 133);
  if (*(_BYTE *)(v1 + 472))
  {
    v2 = result;
    v3 = (AMSCore::HTTPResponseAction *)(result + 536);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(result + 536), v1 + 8);
    if (v2[488])
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      v2[488] = 0;
    }
    v4 = *((_QWORD *)v2 + 134);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)v3);
    v2[488] = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    if (v4)
    {
      v5 = (unint64_t *)(*((_QWORD *)v2 + 134) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v2 + 134);
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)v2 + 126);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)v2 + 130);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 128);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *((_QWORD *)v2 + 67) = v2 + 16;
    *(_QWORD *)v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::AnonymousCancellableRequestHandler::handleResponse(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;

  if (*__p)
  {
    v2 = __p[134];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[134];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[126];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[130];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[128];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = (_QWORD *)__p[66];
  if (v15 == __p + 63)
  {
    v16 = 4;
    v15 = __p + 63;
  }
  else
  {
    if (!v15)
      goto LABEL_27;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_27:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v17 = __p[132];
  do
  {
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v19)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v17)
  {
    v20 = (unint64_t *)(__p[132] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      v22 = (std::__shared_weak_count *)__p[132];
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v23 = __p[131];
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      v26 = (std::__shared_weak_count *)__p[131];
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(__p);
}

_BYTE *AMSCore::AnonymousCancellableRequestHandler::handleCompletion(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  AMSCore::HTTPResponseAction *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v1 = *((_QWORD *)result + 133);
  if (*(_BYTE *)(v1 + 472))
  {
    v2 = result;
    v3 = (AMSCore::HTTPResponseAction *)(result + 536);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(result + 536), v1 + 8);
    if (v2[488])
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      v2[488] = 0;
    }
    v4 = *((_QWORD *)v2 + 134);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v2 + 24), (uint64_t)v3);
    v2[488] = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    if (v4)
    {
      v5 = (unint64_t *)(*((_QWORD *)v2 + 134) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v2 + 134);
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)v2 + 126);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)v2 + 130);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 128);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *((_QWORD *)v2 + 67) = v2 + 16;
    *(_QWORD *)v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::AnonymousCancellableRequestHandler::handleCompletion(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;

  if (*__p)
  {
    v2 = __p[134];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[134];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[126];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[130];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[128];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = (_QWORD *)__p[66];
  if (v15 == __p + 63)
  {
    v16 = 4;
    v15 = __p + 63;
  }
  else
  {
    if (!v15)
      goto LABEL_27;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_27:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v17 = __p[132];
  do
  {
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v19)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v17)
  {
    v20 = (unint64_t *)(__p[132] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      v22 = (std::__shared_weak_count *)__p[132];
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v23 = __p[131];
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      v26 = (std::__shared_weak_count *)__p[131];
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(__p);
}

void AMSCore::MetricFormatter::formatTimes(uint64_t a1, const void ***a2)
{
  const void ***v2;
  const void **v3;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  const void *v8;
  uint64_t *v9;
  uint64_t *v10;
  const void **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t *p_shared_owners;
  const void ***v33;
  int v34;
  uint64_t v35;
  uint64_t **v36;
  BOOL v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  __int128 __p;
  __int128 v58;
  int v59;
  uint64_t v60[19];
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!a2[2])
    return;
  v2 = a2 + 1;
  v3 = *a2;
  if (*a2 == (const void **)(a2 + 1))
    return;
  v5 = 0;
  v6 = 0;
  v50 = 0;
  v7 = (uint64_t *)(a1 + 8);
  v48 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v49 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v44 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v45 = *MEMORY[0x1E0DE4F60];
  v47 = MEMORY[0x1E0DE4FE0] + 64;
  v46 = MEMORY[0x1E0DE4FB8] + 16;
  do
  {
    v8 = v3[7];
    v9 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1, v3 + 4);
    if (v7 == v9)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v53);
      AMSCore::Logger::log<char [32],std::string>(v53, 4, (uint64_t)"metrics", 7, "Missing field in metrics event:", (uint64_t)(v3 + 4));
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (!*((_QWORD *)&v53 + 1))
        goto LABEL_51;
      v13 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
    }
    else
    {
      if (*((_DWORD *)v9 + 20) == 7)
      {
        v10 = v9 + 7;
        if (v6 >= (uint64_t **)v50)
        {
          v25 = ((char *)v6 - (char *)v5) >> 4;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          if ((v50 - (char *)v5) >> 3 > v26)
            v26 = (v50 - (char *)v5) >> 3;
          if ((unint64_t)(v50 - (char *)v5) >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
          {
            if (v27 >> 60)
              std::__throw_bad_array_new_length[abi:fe180100]();
            v28 = (char *)operator new(16 * v27);
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[16 * v25];
          *(_QWORD *)v29 = v10;
          *((_DWORD *)v29 + 2) = (_DWORD)v8;
          v29[12] = BYTE4(v8);
          if (v6 == v5)
          {
            v31 = &v28[16 * v25];
          }
          else
          {
            v30 = &v28[16 * v25];
            do
            {
              v31 = v30 - 16;
              *((_OWORD *)v30 - 1) = *((_OWORD *)v6 - 1);
              v6 -= 2;
              v30 -= 16;
            }
            while (v6 != v5);
          }
          v50 = &v28[16 * v27];
          v6 = (uint64_t **)(v29 + 16);
          if (v5)
            operator delete(v5);
          v5 = (uint64_t **)v31;
          v11 = (const void **)v3[1];
          if (!v11)
          {
            do
            {
LABEL_55:
              v33 = (const void ***)v3[2];
              v37 = *v33 == v3;
              v3 = (const void **)v33;
            }
            while (!v37);
            goto LABEL_4;
          }
        }
        else
        {
          *v6 = v10;
          *((_DWORD *)v6 + 2) = (_DWORD)v8;
          *((_BYTE *)v6 + 12) = BYTE4(v8);
          v6 += 2;
          v11 = (const void **)v3[1];
          if (!v11)
            goto LABEL_55;
        }
        goto LABEL_52;
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v51);
      v15 = v51;
      if (*(int *)(v51 + 8) <= 4)
      {
        v60[0] = v47;
        *(_QWORD *)&v53 = v49;
        *(_QWORD *)((char *)&v53 + *(_QWORD *)(v49 - 24)) = v48;
        v16 = (std::ios_base *)((char *)&v53 + *(_QWORD *)(v53 - 24));
        std::ios_base::init(v16, (char *)&v53 + 8);
        v16[1].__vftable = 0;
        v16[1].__fmtflags_ = -1;
        *(_QWORD *)&v53 = MEMORY[0x1E0DE4FE0] + 24;
        v60[0] = MEMORY[0x1E0DE4FE0] + 64;
        std::streambuf::basic_streambuf();
        *((_QWORD *)&v53 + 1) = v46;
        __p = 0u;
        v58 = 0u;
        v59 = 16;
        v17 = *(_QWORD *)(v53 - 24);
        if ((v18 & 1) == 0
        {
        }
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v53, (uint64_t)"field in metrics event should be a timepoint: ", 46);
        v19 = *((char *)v3 + 55);
        if (v19 >= 0)
          v20 = (uint64_t)(v3 + 4);
        else
          v20 = (uint64_t)v3[4];
        if (v19 >= 0)
          v21 = *((unsigned __int8 *)v3 + 55);
        else
          v21 = (uint64_t)v3[5];
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v53, v20, v21);
        v22 = v56;
        v23 = (char *)&v53 + *(_QWORD *)(v53 - 24);
        if ((v23[32] & 5) != 0)
        {
          v24 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v23 + 5)
                                                                                           + 32))(&v61, *((_QWORD *)v23 + 5), 0, 1, 16);
          v24 = v64;
        }
        *(std::chrono::system_clock::time_point *)&v61 = std::chrono::system_clock::now();
        DWORD2(v61) = 4;
        v62 = v22;
        v63 = v24;
        (*(void (**)(_QWORD, const char *, uint64_t, __int128 *))(**(_QWORD **)(v15 + 16) + 16))(*(_QWORD *)(v15 + 16), "metrics", 7, &v61);
        *(_QWORD *)&v53 = v45;
        *(_QWORD *)((char *)&v53 + *(_QWORD *)(v45 - 24)) = v44;
        *((_QWORD *)&v53 + 1) = MEMORY[0x1E0DE4FB8] + 16;
        if (SBYTE7(v58) < 0)
          operator delete((void *)__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D789B58](v60);
      }
      v12 = v52;
      if (!v52)
      {
LABEL_51:
        v11 = (const void **)v3[1];
        if (!v11)
          goto LABEL_55;
        goto LABEL_52;
      }
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
    }
    if (v14)
      goto LABEL_51;
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v11 = (const void **)v3[1];
    if (!v11)
      goto LABEL_55;
    do
    {
LABEL_52:
      v33 = (const void ***)v11;
      v11 = (const void **)*v11;
    }
    while (v11);
LABEL_4:
    v3 = (const void **)v33;
  }
  while (v33 != v2);
  if (v5 != v6)
  {
    v34 = 0;
    v35 = 0;
    v36 = v5;
    do
    {
      if (*((_BYTE *)v36 + 12))
      {
        v37 = v35 > **v36 || v34 == 0;
        if (v37)
          v35 = **v36;
        v34 = 1;
      }
      v36 += 2;
    }
    while (v36 != v6);
    if (v34)
    {
      v38 = v35 % 5000000;
      v39 = v5;
      do
      {
        if (*((_BYTE *)v39 + 12))
        {
          v40 = *v39;
          if (*((_DWORD *)*v39 + 6) != 7)
            v40 = 0;
          *v40 -= v38;
        }
        v39 += 2;
      }
      while (v39 != v6);
    }
    v41 = v5;
    do
    {
      v42 = *v41;
      v43 = **v41;
      switch(*((_DWORD *)v41 + 2))
      {
        case 0:
          *(_QWORD *)&v53 = v43 / 1000000;
          v55 = 3;
          AMSCore::Any::operator=((uint64_t)v42, (uint64_t)&v53);
          if (v55 != -1)
            goto LABEL_83;
          break;
        case 1:
          *(_QWORD *)&v53 = v43 / 1000;
          v55 = 3;
          AMSCore::Any::operator=((uint64_t)v42, (uint64_t)&v53);
          if (v55 != -1)
LABEL_83:
            ((void (*)(__int128 *, __int128 *))off_1E253D240[v55])(&v61, &v53);
          break;
        case 2:
          AMSCore::stringify_time_s((uint64_t)&v61, v43, 0);
          v53 = v61;
          v54 = v62;
          v62 = 0;
          v61 = 0uLL;
          v55 = 5;
          AMSCore::Any::operator=((uint64_t)*v41, (uint64_t)&v53);
          if (v55 == -1)
            goto LABEL_78;
          goto LABEL_89;
        case 3:
          AMSCore::stringify_time_s((uint64_t)&v61, v43, 1);
          v53 = v61;
          v54 = v62;
          v62 = 0;
          v61 = 0uLL;
          v55 = 5;
          AMSCore::Any::operator=((uint64_t)*v41, (uint64_t)&v53);
          if (v55 != -1)
            goto LABEL_89;
          goto LABEL_78;
        case 4:
          AMSCore::stringify_time_s((uint64_t)&v61, v43, 2);
          v53 = v61;
          v54 = v62;
          v62 = 0;
          v61 = 0uLL;
          v55 = 5;
          AMSCore::Any::operator=((uint64_t)*v41, (uint64_t)&v53);
          if (v55 != -1)
LABEL_89:
            ((void (*)(uint64_t *, __int128 *))off_1E253D240[v55])(&v51, &v53);
LABEL_78:
          v55 = -1;
          if (SHIBYTE(v62) < 0)
            operator delete((void *)v61);
          break;
        default:
          break;
      }
      v41 += 2;
    }
    while (v41 != v6);
  }
  if (v5)
    operator delete(v5);
}

void sub_18CC92A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::hash<AMSCore::MetricsEventModifier::EventModifierForFieldFilters>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  int v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = 4 * *(_QWORD *)(a1 + 8);
    if (*(double *)(a1 + 8) == 0.0)
      v2 = 0;
    v3 = v2 ^ (4 * *(_QWORD *)a1);
  }
  else
  {
    v3 = 0;
  }
  if (*(_BYTE *)(a1 + 25))
    v4 = 2 * *(_BYTE *)(a1 + 24);
  else
    v4 = 0;
  v5 = v3 ^ v4 & 0xFE;
  if (*(_BYTE *)(a1 + 27))
    v6 = 2 * *(_BYTE *)(a1 + 26);
  else
    v6 = 0;
  v7 = v5 ^ v6 & 0xFE;
  v8 = *(_QWORD **)(a1 + 32);
  v9 = (_QWORD *)(a1 + 40);
  if (v8 != (_QWORD *)(a1 + 40))
  {
    do
    {
      v14 = *((char *)v8 + 55);
      if (v14 >= 0)
        v15 = v8 + 4;
      else
        v15 = (uint64_t *)v8[4];
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v8 + 55);
      else
        v16 = v8[5];
      v17 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v15, v16);
      v18 = (_QWORD *)v8[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v8[2];
          v20 = *v19 == (_QWORD)v8;
          v8 = v19;
        }
        while (!v20);
      }
      v7 ^= 2 * v17;
      v8 = v19;
    }
    while (v19 != v9);
  }
  v10 = *(_QWORD **)(a1 + 56);
  if (v10 != (_QWORD *)(a1 + 64))
  {
    do
    {
      v21 = *((char *)v10 + 55);
      if (v21 >= 0)
        v22 = v10 + 4;
      else
        v22 = (uint64_t *)v10[4];
      if (v21 >= 0)
        v23 = *((unsigned __int8 *)v10 + 55);
      else
        v23 = v10[5];
      v24 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v22, v23);
      v25 = (_QWORD *)v10[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v10[2];
          v20 = *v26 == (_QWORD)v10;
          v10 = v26;
        }
        while (!v20);
      }
      v7 ^= 2 * v24;
      v10 = v26;
    }
    while (v26 != (_QWORD *)(a1 + 64));
  }
  v11 = *(_QWORD **)(a1 + 80);
  v12 = (_QWORD *)(a1 + 88);
  if (v11 != v12)
  {
    do
    {
      v27 = v11 + 4;
      v28 = *((char *)v11 + 55);
      if (v28 >= 0)
        v29 = v11 + 4;
      else
        v29 = (uint64_t *)v11[4];
      if (v28 >= 0)
        v30 = *((unsigned __int8 *)v11 + 55);
      else
        v30 = v11[5];
      v31 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v29, v30);
      v32 = (_QWORD *)v11[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v11[2];
          v20 = *v33 == (_QWORD)v11;
          v11 = v33;
        }
        while (!v20);
      }
      v7 ^= 4 * (v27[4] ^ v27[3] ^ v31);
      v11 = v33;
    }
    while (v33 != v12);
  }
  return v7;
}

void AMSCore::LoadURLMetricsEvent::withHTTPTransactionMetrics(AMSCore::LoadURLMetricsEvent *this, const AMSCore::HTTPTransactionMetrics *a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::ios_base *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string::size_type v57;
  std::string::size_type v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t *v67;
  std::string::size_type v68;
  std::string::size_type v69;
  unsigned int v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  std::string v74;
  char v75;
  std::string v76;
  char v77;
  std::string v78;
  std::string v79;
  char v80;
  std::string __p;
  char v82;
  __int128 v83;
  __int128 v84;
  int v85;
  uint64_t v86[22];

  v76.__r_.__value_.__s.__data_[0] = 0;
  v77 = 0;
  v4 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    else
      v76 = *(std::string *)a2;
    v77 = 1;
  }
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = xmmword_18CF51B60;
  strcpy(v79.__r_.__value_.__l.__data_, "cellularDataBearerTechnology");
  __p.__r_.__value_.__s.__data_[0] = 0;
  v82 = 0;
  if (v4)
  {
    __p = v76;
    memset(&v76, 0, sizeof(v76));
    v82 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((_QWORD **)this + 9, (const std::string::value_type **)&v79.__r_.__value_.__l.__data_, (__int128 *)&__p);
    if (v82 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
  }
  else
  {
    v5 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&v79.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v5)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v5);
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&v79.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if (!v77)
        goto LABEL_19;
      goto LABEL_17;
    }
  }
  operator delete(v79.__r_.__value_.__l.__data_);
  if (!v77)
    goto LABEL_19;
LABEL_17:
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
LABEL_19:
  if (*((_BYTE *)a2 + 40))
  {
    v6 = *((_QWORD *)a2 + 4);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
    strcpy((char *)&__p, "connectionStartTime");
    AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v6, 0, 1);
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
    strcpy((char *)&__p, "connectionStartTime");
    v7 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v7)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v7);
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)a2 + 56))
  {
    v8 = *((_QWORD *)a2 + 6);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
    strcpy((char *)&__p, "connectionEndTime");
    AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v8, 0, 1);
    if (*((_BYTE *)a2 + 72))
    {
LABEL_26:
      v9 = *((_QWORD *)a2 + 8);
      v10 = (char *)operator new(0x20uLL);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18CF51B30;
      strcpy(v10, "secureConnectionStartTime");
      AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v9, 0, 1);
      v11 = v10;
      goto LABEL_33;
    }
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
    strcpy((char *)&__p, "connectionEndTime");
    v12 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v12)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v12);
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    if (*((_BYTE *)a2 + 72))
      goto LABEL_26;
  }
  v13 = (char *)operator new(0x20uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18CF51B30;
  strcpy(v13, "secureConnectionStartTime");
  v14 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((uint64_t *)((char *)this + 80) != v14)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v14);
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
  v11 = v13;
LABEL_33:
  operator delete(v11);
  if (*((_BYTE *)a2 + 88))
  {
    v15 = *((_QWORD *)a2 + 10);
    v16 = (char *)operator new(0x19uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18CF51B20;
    strcpy(v16, "secureConnectionEndTime");
    AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v15, 0, 1);
    v17 = v16;
  }
  else
  {
    v18 = (char *)operator new(0x19uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18CF51B20;
    strcpy(v18, "secureConnectionEndTime");
    v19 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v19)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v19);
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    v17 = v18;
  }
  operator delete(v17);
  if (*((_BYTE *)a2 + 104))
  {
    v20 = *((_QWORD *)a2 + 12);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
    strcpy((char *)&__p, "domainLookupStartTime");
    AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v20, 0, 1);
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
    strcpy((char *)&__p, "domainLookupStartTime");
    v21 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v21)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v21);
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)a2 + 120))
  {
    v22 = *((_QWORD *)a2 + 14);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
    strcpy((char *)&__p, "domainLookupEndTime");
    AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v22, 0, 1);
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
    strcpy((char *)&__p, "domainLookupEndTime");
    v23 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v23)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v23);
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 16) == *((_QWORD *)a2 + 17))
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    v82 = 0;
    AMSCore::LoadURLMetricsEvent::withDNSServers((uint64_t)this, (uint64_t)&__p);
    if (v82 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_77:
    if (*((_BYTE *)a2 + 160))
    {
      v45 = *((_QWORD *)a2 + 19);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "fetchStartTime");
      AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v45, 0, 1);
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "fetchStartTime");
      v46 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((uint64_t *)((char *)this + 80) != v46)
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v46);
      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    }
    v47 = *((unsigned __int16 *)a2 + 140);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&__p, "cachedResponse");
    LOWORD(v79.__r_.__value_.__l.__data_) = v47;
    if (v47 >= 0x100)
    {
      std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL>((_QWORD **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, &v79);
    }
    else
    {
      v48 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((uint64_t *)((char *)this + 80) != v48)
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v48);
      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (*((_BYTE *)a2 + 176))
        goto LABEL_89;
    }
    else if (*((_BYTE *)a2 + 176))
    {
LABEL_89:
      v49 = *((_QWORD *)a2 + 21);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&__p, "requestStartTime");
      AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v49, 0, 1);
      goto LABEL_94;
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&__p, "requestStartTime");
    v50 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v50)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v50);
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
LABEL_94:
    if (*((_BYTE *)a2 + 192))
    {
      v51 = *((_QWORD *)a2 + 23);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "requestEndTime");
      AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v51, 0, 1);
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "requestEndTime");
      v52 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((uint64_t *)((char *)this + 80) != v52)
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v52);
      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    }
    v53 = *((_QWORD *)a2 + 25);
    v54 = *((_QWORD *)a2 + 26);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&__p, "requestMessageSize");
    v79.__r_.__value_.__r.__words[0] = v53;
    v79.__r_.__value_.__l.__size_ = v54;
    if ((_BYTE)v54)
    {
      std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>((_QWORD **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t **)&v79);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_101;
    }
    else
    {
      v60 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((uint64_t *)((char *)this + 80) != v60)
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v60);
      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_101:
        v55 = *((_QWORD *)a2 + 27);
        v56 = *((_QWORD *)a2 + 28);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
        strcpy((char *)&__p, "responseMessageSize");
        v79.__r_.__value_.__r.__words[0] = v55;
        v79.__r_.__value_.__l.__size_ = v56;
        if ((_BYTE)v56)
        {
          std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>((_QWORD **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t **)&v79);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_103;
        }
        else
        {
          v61 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
          if ((uint64_t *)((char *)this + 80) != v61)
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v61);
          std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_103:
            v58 = *((_QWORD *)a2 + 29);
            v57 = *((_QWORD *)a2 + 30);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18CF51BB0;
            strcpy(__p.__r_.__value_.__l.__data_, "responseMessageSizeUncompressed");
            v79.__r_.__value_.__r.__words[0] = v58;
            v79.__r_.__value_.__l.__size_ = v57;
            if ((_BYTE)v57)
            {
              std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>((_QWORD **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t **)&v79);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_105;
            }
            else
            {
              v62 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
              if ((uint64_t *)((char *)this + 80) != v62)
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v62);
              std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_105:
                if (*((_BYTE *)a2 + 256))
                {
LABEL_106:
                  v59 = *((_QWORD *)a2 + 31);
                  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
                  strcpy((char *)&__p, "responseStartTime");
                  AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v59, 0, 1);
                  goto LABEL_122;
                }
LABEL_119:
                *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
                strcpy((char *)&__p, "responseStartTime");
                v63 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
                if ((uint64_t *)((char *)this + 80) != v63)
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v63);
                std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
LABEL_122:
                if (*((_BYTE *)a2 + 272))
                {
                  v64 = *((_QWORD *)a2 + 33);
                  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
                  strcpy((char *)&__p, "responseEndTime");
                  AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v64, 0, 1);
                }
                else
                {
                  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
                  strcpy((char *)&__p, "responseEndTime");
                  v65 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
                  if ((uint64_t *)((char *)this + 80) != v65)
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v65);
                  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
                }
                v66 = *((unsigned __int16 *)a2 + 141);
                *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
                strcpy((char *)&__p, "connectionReused");
                LOWORD(v79.__r_.__value_.__l.__data_) = v66;
                if (v66 >= 0x100)
                {
                  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL>((_QWORD **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, &v79);
                }
                else
                {
                  v67 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
                  if ((uint64_t *)((char *)this + 80) != v67)
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v67);
                  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v68 = *((_QWORD *)a2 + 36);
                v69 = *((_QWORD *)a2 + 37);
                *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
                strcpy((char *)&__p, "redirectCount");
                v79.__r_.__value_.__r.__words[0] = v68;
                v79.__r_.__value_.__l.__size_ = v69;
                if ((_BYTE)v69)
                {
                  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>((_QWORD **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t **)&v79);
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_136:
                    v70 = *((unsigned __int16 *)a2 + 152);
                    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
                    strcpy((char *)&__p, "TFOEnabled");
                    LOWORD(v79.__r_.__value_.__l.__data_) = v70;
                    if (v70 >= 0x100)
                    {
                      std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL>((_QWORD **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, &v79);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      v71 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
                      if ((uint64_t *)((char *)this + 80) != v71)
                        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v71);
                      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
                    }
                    v74.__r_.__value_.__s.__data_[0] = 0;
                    v75 = 0;
                    if (*((_BYTE *)a2 + 336))
                    {
                      if (*((char *)a2 + 335) < 0)
                        std::string::__init_copy_ctor_external(&v74, *((const std::string::value_type **)a2 + 39), *((_QWORD *)a2 + 40));
                      else
                        v74 = *(std::string *)((_BYTE *)a2 + 13);
                      v75 = 1;
                      *((_BYTE *)&v79.__r_.__value_.__s + 23) = 17;
                      strcpy((char *)&v79, "resolvedIPAddress");
                      __p = v74;
                      memset(&v74, 0, sizeof(v74));
                      v82 = 1;
                      std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((_QWORD **)this + 9, (const std::string::value_type **)&v79.__r_.__value_.__l.__data_, (__int128 *)&__p);
                      if (v82 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      *((_BYTE *)&v79.__r_.__value_.__s + 23) = 17;
                      strcpy((char *)&v79, "resolvedIPAddress");
                      __p.__r_.__value_.__s.__data_[0] = 0;
                      v82 = 0;
                      v73 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&v79.__r_.__value_.__l.__data_);
                      if ((uint64_t *)((char *)this + 80) != v73)
                        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v73);
                      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&v79.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v79.__r_.__value_.__l.__data_);
                    if (v75)
                    {
                      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v74.__r_.__value_.__l.__data_);
                    }
                    return;
                  }
                }
                else
                {
                  v72 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
                  if ((uint64_t *)((char *)this + 80) != v72)
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)this + 9, (uint64_t)v72);
                  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_136;
                }
                operator delete(__p.__r_.__value_.__l.__data_);
                goto LABEL_136;
              }
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            if (*((_BYTE *)a2 + 256))
              goto LABEL_106;
            goto LABEL_119;
          }
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_103;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_101;
  }
  v24 = MEMORY[0x1E0DE4FE0];
  v25 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = (std::string::size_type *)MEMORY[0x1E0DE4F60];
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v28 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v86[0] = MEMORY[0x1E0DE4FE0] + 64;
  __p.__r_.__value_.__r.__words[0] = v27;
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v27 - 24)) = v28;
  v29 = (std::ios_base *)((char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v29, &__p.__r_.__value_.__r.__words[1]);
  v29[1].__vftable = 0;
  v29[1].__fmtflags_ = -1;
  __p.__r_.__value_.__r.__words[0] = v24 + 24;
  v86[0] = v25;
  std::streambuf::basic_streambuf();
  v30 = MEMORY[0x1E0DE4FB8];
  __p.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
  v83 = 0u;
  v84 = 0u;
  v85 = 16;
  v31 = *((_QWORD *)a2 + 16);
  if (*((_QWORD *)a2 + 17) == v31
    || ((v32 = *(char *)(v31 + 23), v32 >= 0) ? (v33 = *((_QWORD *)a2 + 16)) : (v33 = *(_QWORD *)v31),
        v32 >= 0 ? (v34 = *(unsigned __int8 *)(v31 + 23)) : (v34 = *(_QWORD *)(v31 + 8)),
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, v33, v34),
        0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3) < 2))
  {
LABEL_66:
    std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__r_.__value_.__l.__size_, &v78);
    v79 = v78;
    memset(&v78, 0, sizeof(v78));
    v80 = 1;
    AMSCore::LoadURLMetricsEvent::withDNSServers((uint64_t)this, (uint64_t)&v79);
    if (v80 && SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = *v26;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = v26[3];
    __p.__r_.__value_.__l.__size_ = v30 + 16;
    if (SBYTE7(v84) < 0)
      operator delete((void *)v83);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v86);
    goto LABEL_77;
  }
  v35 = 0;
  v36 = 1;
  while (1)
  {
    v79.__r_.__value_.__s.__data_[0] = 44;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v79, 1);
    v37 = *((_QWORD *)a2 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 17) - v37) >> 3) <= v36)
      break;
    v38 = v37 + v35;
    v41 = *(_QWORD *)(v38 + 24);
    v39 = v38 + 24;
    v40 = v41;
    v42 = *(char *)(v39 + 23);
    if (v42 >= 0)
      v43 = v39;
    else
      v43 = v40;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(v39 + 23);
    else
      v44 = *(_QWORD *)(v39 + 8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, v43, v44);
    ++v36;
    v35 += 24;
    if (v36 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3))
      goto LABEL_66;
  }
  __break(1u);
}

void sub_18CC93C94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(a9);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL>(_QWORD **a1, const std::string::value_type **a2, _BYTE *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const std::string::value_type *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  char **result;
  char **v23;
  char *v24;
  std::string *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28[3];
  int v29;
  uint64_t *v30;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_42;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 < v10)
        goto LABEL_11;
LABEL_9:
      v11 = v7;
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_26;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    v17 = *((char *)v11 + 55);
    if (v17 >= 0)
      v18 = v11 + 4;
    else
      v18 = (_QWORD *)v11[4];
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)v11 + 55);
    else
      v19 = v11[5];
    if (v19 >= v10)
      v20 = v10;
    else
      v20 = v19;
    v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        LOBYTE(v28[0]) = *a3;
        v29 = 1;
        result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1)
          return (char **)((uint64_t (*)(uint64_t **, uint64_t **))off_1E253D240[v29])(&v30, v28);
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    v6 = v11;
  }
LABEL_42:
  result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, (const void **)a2);
  if (!*result)
  {
    v23 = result;
    v24 = (char *)operator new(0x58uLL);
    v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v24 + 6) = a2[2];
    }
    v24[56] = *a3;
    *((_DWORD *)v24 + 20) = 1;
    v26 = v28[0];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v26;
    *v23 = v24;
    v27 = (_QWORD *)**a1;
    if (v27)
    {
      *a1 = v27;
      v24 = *v23;
    }
    result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18CC93F84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::LoadURLMetricsEvent::withDNSServers(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  void *__p[2];
  uint64_t v6;
  char v7;
  const std::string::value_type *v8[4];

  HIBYTE(v8[2]) = 21;
  strcpy((char *)v8, "dnsServersIPAddresses");
  LOBYTE(__p[0]) = 0;
  v7 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v7 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((_QWORD **)(a1 + 72), v8, (__int128 *)__p);
    if (v7 && SHIBYTE(v6) < 0)
      operator delete(__p[0]);
    if ((SHIBYTE(v8[2]) & 0x80000000) == 0)
      return a1;
LABEL_10:
    operator delete((void *)v8[0]);
    return a1;
  }
  v4 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1 + 72, (const void **)v8);
  if ((uint64_t *)(a1 + 80) != v4)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)(a1 + 72), (uint64_t)v4);
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)(a1 + 128), (const void **)v8);
  if (SHIBYTE(v8[2]) < 0)
    goto LABEL_10;
  return a1;
}

uint64_t AMSCore::LoadURLMetricsEvent::withRequestURL(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  void *__p[2];
  uint64_t v6;
  char v7;
  const std::string::value_type *v8[2];
  char v9;

  v9 = 10;
  strcpy((char *)v8, "requestUrl");
  LOBYTE(__p[0]) = 0;
  v7 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v7 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((_QWORD **)(a1 + 72), v8, (__int128 *)__p);
    if (v7 && SHIBYTE(v6) < 0)
      operator delete(__p[0]);
    if ((v9 & 0x80000000) == 0)
      return a1;
LABEL_10:
    operator delete((void *)v8[0]);
    return a1;
  }
  v4 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1 + 72, (const void **)v8);
  if ((uint64_t *)(a1 + 80) != v4)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)(a1 + 72), (uint64_t)v4);
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)(a1 + 128), (const void **)v8);
  if (v9 < 0)
    goto LABEL_10;
  return a1;
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<long long>(_QWORD **a1, const std::string::value_type **a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const std::string::value_type *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  char **result;
  char **v23;
  char *v24;
  std::string *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28[3];
  int v29;
  uint64_t *v30;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_42;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 < v10)
        goto LABEL_11;
LABEL_9:
      v11 = v7;
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_26;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    v17 = *((char *)v11 + 55);
    if (v17 >= 0)
      v18 = v11 + 4;
    else
      v18 = (_QWORD *)v11[4];
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)v11 + 55);
    else
      v19 = v11[5];
    if (v19 >= v10)
      v20 = v10;
    else
      v20 = v19;
    v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        v28[0] = *a3;
        v29 = 3;
        result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1)
          return (char **)((uint64_t (*)(uint64_t **, uint64_t **))off_1E253D240[v29])(&v30, v28);
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    v6 = v11;
  }
LABEL_42:
  result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, (const void **)a2);
  if (!*result)
  {
    v23 = result;
    v24 = (char *)operator new(0x58uLL);
    v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v24 + 6) = a2[2];
    }
    *((_QWORD *)v24 + 7) = *a3;
    *((_DWORD *)v24 + 20) = 3;
    v26 = v28[0];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v26;
    *v23 = v24;
    v27 = (_QWORD *)**a1;
    if (v27)
    {
      *a1 = v27;
      v24 = *v23;
    }
    result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18CC9439C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::LoadURLMetricsEvent::LoadURLMetricsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v6;
  __int128 v7;
  __int16 v8;
  const std::string::value_type *v9[2];
  char v10;

  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  AMSCore::IMetricsProvider::Event::Event(a1, (__int128 *)__p, a2);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &off_1E2520C70;
  v10 = 9;
  strcpy((char *)v9, "eventType");
  *(_QWORD *)&v7 = 0x6C725564616F6CLL;
  v8 = 263;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((_QWORD **)(a1 + 72), v9, &v7);
  if (HIBYTE(v8) && (char)v8 < 0)
    operator delete((void *)v7);
  if (v10 < 0)
    operator delete((void *)v9[0]);
  return a1;
}

void sub_18CC94498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

AMSCore::LoadURLMetricsEvent *AMSCore::LoadURLMetricsEvent::withConfig(AMSCore::LoadURLMetricsEvent *this, const std::runtime_error *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *imp;
  std::runtime_error __p[4];
  char v9;
  uint64_t *v10;
  uint64_t v11;

  if (LOBYTE(a2[4].__imp_.__imp_))
  {
    v4 = (uint64_t *)a2->__vftable;
    __p[0].__vftable = (std::runtime_error_vtbl *)operator new(0x28uLL);
    *(_OWORD *)&__p[0].__imp_.__imp_ = xmmword_18CF51BC0;
    strcpy((char *)__p[0].__vftable, "xpSamplingPercentageCachedResponses");
    v10 = v4;
    v11 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<double>((_QWORD **)this + 9, (const std::string::value_type **)__p, &v10);
    if (SHIBYTE(__p[1].__vftable) < 0)
      operator delete(__p[0].__vftable);
  }
  else
  {
    AMSCore::Error::Error(__p, a2);
    v9 = 0;
    ((void (*)(std::runtime_error *))__p[0].~runtime_error)(__p);
  }
  v5 = (uint64_t *)a2[5].__vftable;
  __p[0].__vftable = (std::runtime_error_vtbl *)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__imp_.__imp_ = xmmword_18CF51B30;
  strcpy((char *)__p[0].__vftable, "xpSamplingPercentageUsers");
  v10 = v5;
  v11 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<double>((_QWORD **)this + 9, (const std::string::value_type **)__p, &v10);
  if (SHIBYTE(__p[1].__vftable) < 0)
    operator delete(__p[0].__vftable);
  imp = (uint64_t *)a2[5].__imp_.__imp_;
  HIBYTE(__p[1].__vftable) = 17;
  strcpy((char *)__p, "xpSessionDuration");
  v10 = imp;
  v11 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<long long>((_QWORD **)this + 9, (const std::string::value_type **)__p, &v10);
  if (SHIBYTE(__p[1].__vftable) < 0)
    operator delete(__p[0].__vftable);
  return this;
}

uint64_t AMSCore::LoadURLMetricsEvent::withRequestMethod(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  void *__p[2];
  uint64_t v6;
  char v7;
  const std::string::value_type *v8[2];
  char v9;

  v9 = 13;
  strcpy((char *)v8, "requestMethod");
  LOBYTE(__p[0]) = 0;
  v7 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v7 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((_QWORD **)(a1 + 72), v8, (__int128 *)__p);
    if (v7 && SHIBYTE(v6) < 0)
      operator delete(__p[0]);
    if ((v9 & 0x80000000) == 0)
      return a1;
LABEL_10:
    operator delete((void *)v8[0]);
    return a1;
  }
  v4 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1 + 72, (const void **)v8);
  if ((uint64_t *)(a1 + 80) != v4)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)(a1 + 72), (uint64_t)v4);
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)(a1 + 128), (const void **)v8);
  if (v9 < 0)
    goto LABEL_10;
  return a1;
}

void AMSCore::LoadURLMetricsEventConfig::~LoadURLMetricsEventConfig(AMSCore::LoadURLMetricsEventConfig *this)
{
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 72))
      return;
LABEL_5:
    (**(void (***)(AMSCore::LoadURLMetricsEventConfig *))this)(this);
    return;
  }
  operator delete(*((void **)this + 12));
  if (!*((_BYTE *)this + 72))
    goto LABEL_5;
}

void AMSCore::LoadURLMetricsEvent::~LoadURLMetricsEvent(AMSCore::LoadURLMetricsEvent *this)
{
  AMSCore::IMetricsProvider::Event::~Event(this);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::ClockProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::ClockProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::ClockProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMSCore::LoadURLMetricsEventConfig::fromAnyMap(uint64_t a1, uint64_t *a2)
{
  std::runtime_error_vtbl *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  std::runtime_error *v13;
  unint64_t v14;
  unsigned int *v15;
  std::runtime_error_vtbl *v16;
  std::runtime_error v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  std::runtime_error *v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::runtime_error v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unsigned __int8 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  std::runtime_error v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char v52;
  int v53;
  char v54;
  std::runtime_error v55[4];
  unsigned __int8 v56;
  std::runtime_error v57;
  __int128 v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  std::runtime_error v63;
  __int128 v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  const char *imp;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  imp = 0;
  v70 = 0;
  v53 = 0;
  v54 = 0;
  if (v42)
  {
    v4 = v36.__vftable;
    AMSCore::getValueByKey((uint64_t)&v36, a2, "metrics/performance/sessionDuration", 0x23uLL);
    if (v42)
    {
      v5 = (int)v36.__vftable[1].~runtime_error;
      if (v5 == -1)
        v5 = 0;
      switch(v5)
      {
        case 1:
          v14 = 0;
          LOBYTE(v6) = v36.~runtime_error;
          goto LABEL_31;
        case 2:
          v6 = (uint64_t)v36.~runtime_error;
          goto LABEL_30;
        case 3:
        case 4:
          v6 = (uint64_t)v36.~runtime_error;
          goto LABEL_30;
        case 7:
          v6 = (uint64_t)v36.~runtime_error / 1000;
LABEL_30:
          v14 = v6 & 0xFFFFFFFFFFFFFF00;
LABEL_31:
          v46.__vftable = (std::runtime_error_vtbl *)(v14 | v6);
          v52 = 1;
          break;
        default:
          AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[14]>((uint64_t)&v63, 0xCu);
          std::runtime_error::runtime_error(&v46, &v63);
          v47 = v64;
          v15 = (unsigned int *)v66;
          v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v48 = v65;
          v49 = v66;
          v50 = v67;
          if (v67)
          {
            *(_QWORD *)(v66 + 16) = &v49;
            v65 = &v66;
            v66 = 0;
            v67 = 0;
            v15 = 0;
          }
          else
          {
            v48 = &v49;
          }
          v51 = v68;
          v68 = 0uLL;
          v52 = 0;
          v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v65, v15);
          v13 = &v63;
          goto LABEL_67;
      }
    }
    else
    {
      AMSCore::Error::Error(&v63, &v36);
      std::runtime_error::runtime_error(&v57, &v63);
      v58 = v64;
      v57.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v7 = (unsigned int *)v66;
      v59 = v65;
      v60 = v66;
      v61 = v67;
      if (v67)
      {
        *(_QWORD *)(v66 + 16) = &v60;
        v65 = &v66;
        v66 = 0;
        v67 = 0;
        v7 = 0;
      }
      else
      {
        v59 = &v60;
      }
      v62 = v68;
      v68 = 0uLL;
      v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v65, v7);
      MEMORY[0x18D7898AC](&v63);
      std::runtime_error::runtime_error(&v46, &v57);
      v47 = v58;
      v12 = (unsigned int *)v60;
      v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v48 = v59;
      v49 = v60;
      v50 = v61;
      if (v61)
      {
        *(_QWORD *)(v60 + 16) = &v49;
        v12 = 0;
        v59 = &v60;
        v60 = 0;
        v61 = 0;
      }
      else
      {
        v48 = &v49;
      }
      v51 = v62;
      v62 = 0uLL;
      v52 = 0;
      v57.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v59, v12);
      v13 = &v57;
LABEL_67:
      MEMORY[0x18D7898AC](v13);
      if (!v42)
      {
        ((void (*)(std::runtime_error *))v36.~runtime_error)(&v36);
        if (v52)
        {
LABEL_33:
          v16 = v46.__vftable;
          AMSCore::getValueByKey((uint64_t)&v36, a2, "metrics/performance/loadUrlTopic", 0x20uLL);
          if (v42)
          {
            if (LODWORD(v36.__vftable[1].~runtime_error) == 5)
            {
              if (SHIBYTE(v36.what) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v46, (const std::string::value_type *)v36.~runtime_error, (std::string::size_type)v36.~runtime_error_0);
              }
              else
              {
                v17 = *(std::runtime_error *)&v36.~runtime_error;
                *(_QWORD *)&v47 = v36.what;
                v46 = v17;
              }
              v52 = 1;
              if (v42)
              {
LABEL_55:
                if (v52)
                {
LABEL_56:
                  v24 = (uint64_t)v46.__vftable;
                  imp = v46.__imp_.__imp_;
                  v70 = v47;
                  v22 = BYTE1(v47);
                  v53 = *(_DWORD *)((char *)&v47 + 2);
                  v54 = BYTE6(v47);
                  v23 = BYTE7(v47);
                  v25 = v56;
                  if (v56)
                    goto LABEL_57;
                  goto LABEL_51;
                }
LABEL_50:
                v70 = 102;
                imp = *(const char **)"lientperf";
                ((void (*)(std::runtime_error *))v46.~runtime_error)(&v46);
                v22 = 0;
                v23 = 17;
                v24 = 0x635F706D615F7078;
                v25 = v56;
                if (v56)
                {
LABEL_57:
                  v36.__vftable = v55[0].__vftable;
LABEL_58:
                  v42 = v25;
                  *(_QWORD *)&v43 = v4;
                  *((_QWORD *)&v43 + 1) = v16;
                  *(_QWORD *)&v44 = v24;
                  *((_QWORD *)&v44 + 1) = imp;
                  LOBYTE(v45) = v70;
                  BYTE1(v45) = v22;
                  *(_DWORD *)((char *)&v45 + 2) = v53;
                  BYTE6(v45) = v54;
                  HIBYTE(v45) = v23;
                  if (v25)
                  {
                    *(_QWORD *)a1 = v36.__vftable;
                    *(_BYTE *)(a1 + 72) = v25;
                    v26 = v44;
                    *(_OWORD *)(a1 + 80) = v43;
                    *(_OWORD *)(a1 + 96) = v26;
                    *(_QWORD *)(a1 + 112) = v45;
                    v44 = 0uLL;
                    v45 = 0;
                    *(_BYTE *)(a1 + 120) = 1;
                    goto LABEL_80;
                  }
                  std::runtime_error::runtime_error((std::runtime_error *)a1, &v36);
                  *(_OWORD *)(a1 + 16) = v37;
                  *(_QWORD *)a1 = off_1E2521330;
                  v27 = v39;
                  *(_QWORD *)(a1 + 32) = v38;
                  *(_QWORD *)(a1 + 40) = v27;
                  v28 = a1 + 40;
                  v29 = v40;
                  *(_QWORD *)(a1 + 48) = v40;
                  if (v29)
                  {
                    *(_QWORD *)(v27 + 16) = v28;
                    v38 = &v39;
                    v39 = 0;
                    v40 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(a1 + 32) = v28;
                  }
                  *(_OWORD *)(a1 + 56) = v41;
                  v41 = 0uLL;
                  v30 = v42;
                  *(_BYTE *)(a1 + 72) = 0;
                  v31 = v44;
                  *(_OWORD *)(a1 + 80) = v43;
                  *(_OWORD *)(a1 + 96) = v31;
                  *(_QWORD *)(a1 + 112) = v45;
                  v44 = 0uLL;
                  v45 = 0;
                  *(_BYTE *)(a1 + 120) = 1;
                  if (!v30)
                    goto LABEL_64;
                  goto LABEL_80;
                }
LABEL_51:
                AMSCore::Error::Error(&v36, v55);
                goto LABEL_58;
              }
LABEL_49:
              ((void (*)(std::runtime_error *))v36.~runtime_error)(&v36);
              if (v52)
                goto LABEL_56;
              goto LABEL_50;
            }
            AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[14]>((uint64_t)&v63, 0xCu);
            std::runtime_error::runtime_error(&v46, &v63);
            v47 = v64;
            v19 = (unsigned int *)v66;
            v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v48 = v65;
            v49 = v66;
            v50 = v67;
            if (v67)
            {
              *(_QWORD *)(v66 + 16) = &v49;
              v65 = &v66;
              v66 = 0;
              v67 = 0;
              v19 = 0;
            }
            else
            {
              v48 = &v49;
            }
            v51 = v68;
            v68 = 0uLL;
            v52 = 0;
            v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v65, v19);
            v21 = &v63;
          }
          else
          {
            AMSCore::Error::Error(&v63, &v36);
            std::runtime_error::runtime_error(&v57, &v63);
            v58 = v64;
            v57.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v18 = (unsigned int *)v66;
            v59 = v65;
            v60 = v66;
            v61 = v67;
            if (v67)
            {
              *(_QWORD *)(v66 + 16) = &v60;
              v65 = &v66;
              v66 = 0;
              v67 = 0;
              v18 = 0;
            }
            else
            {
              v59 = &v60;
            }
            v62 = v68;
            v68 = 0uLL;
            v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v65, v18);
            MEMORY[0x18D7898AC](&v63);
            std::runtime_error::runtime_error(&v46, &v57);
            v47 = v58;
            v20 = (unsigned int *)v60;
            v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v48 = v59;
            v49 = v60;
            v50 = v61;
            if (v61)
            {
              *(_QWORD *)(v60 + 16) = &v49;
              v20 = 0;
              v59 = &v60;
              v60 = 0;
              v61 = 0;
            }
            else
            {
              v48 = &v49;
            }
            v51 = v62;
            v62 = 0uLL;
            v52 = 0;
            v57.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v59, v20);
            v21 = &v57;
          }
          MEMORY[0x18D7898AC](v21);
          if (v42)
            goto LABEL_55;
          goto LABEL_49;
        }
LABEL_69:
        std::runtime_error::runtime_error(&v36, &v46);
        v37 = v47;
        v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v38 = v48;
        v39 = v49;
        v40 = v50;
        if (v50)
        {
          *(_QWORD *)(v49 + 16) = &v39;
          v48 = &v49;
          v49 = 0;
          v50 = 0;
        }
        else
        {
          v38 = &v39;
        }
        v41 = v51;
        v51 = 0uLL;
        std::runtime_error::runtime_error(&v63, &v36);
        v64 = v37;
        v32 = (unsigned int *)v39;
        v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v65 = v38;
        v66 = v39;
        v67 = v40;
        if (v40)
        {
          *(_QWORD *)(v39 + 16) = &v66;
          v32 = 0;
          v38 = &v39;
          v39 = 0;
          v40 = 0;
        }
        else
        {
          v65 = &v66;
        }
        v68 = v41;
        v41 = 0uLL;
        v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, v32);
        MEMORY[0x18D7898AC](&v36);
        std::runtime_error::runtime_error((std::runtime_error *)a1, &v63);
        *(_OWORD *)(a1 + 16) = v64;
        *(_QWORD *)a1 = off_1E2521330;
        v33 = v66;
        *(_QWORD *)(a1 + 32) = v65;
        *(_QWORD *)(a1 + 40) = v33;
        v34 = a1 + 40;
        v35 = v67;
        *(_QWORD *)(a1 + 48) = v67;
        if (v35)
        {
          *(_QWORD *)(v33 + 16) = v34;
          v33 = 0;
          v65 = &v66;
          v66 = 0;
          v67 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 32) = v34;
        }
        *(_OWORD *)(a1 + 56) = v68;
        v68 = 0uLL;
        *(_BYTE *)(a1 + 120) = 0;
        v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v65, (unsigned int *)v33);
        MEMORY[0x18D7898AC](&v63);
        if (!v52)
          ((void (*)(std::runtime_error *))v46.~runtime_error)(&v46);
        goto LABEL_80;
      }
    }
    if (v52)
      goto LABEL_33;
    goto LABEL_69;
  }
  std::runtime_error::runtime_error(&v46, &v36);
  v47 = v37;
  v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v48 = v38;
  v49 = v39;
  v50 = v40;
  if (v40)
  {
    *(_QWORD *)(v39 + 16) = &v49;
    v38 = &v39;
    v39 = 0;
    v40 = 0;
  }
  else
  {
    v48 = &v49;
  }
  v51 = v41;
  v41 = 0uLL;
  std::runtime_error::runtime_error(&v63, &v46);
  v64 = v47;
  v8 = (unsigned int *)v49;
  v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v65 = v48;
  v66 = v49;
  v67 = v50;
  if (v50)
  {
    *(_QWORD *)(v49 + 16) = &v66;
    v8 = 0;
    v48 = &v49;
    v49 = 0;
    v50 = 0;
  }
  else
  {
    v65 = &v66;
  }
  v68 = v51;
  v51 = 0uLL;
  v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v48, v8);
  MEMORY[0x18D7898AC](&v46);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v63);
  *(_OWORD *)(a1 + 16) = v64;
  *(_QWORD *)a1 = off_1E2521330;
  v9 = v66;
  *(_QWORD *)(a1 + 32) = v65;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a1 + 40;
  v11 = v67;
  *(_QWORD *)(a1 + 48) = v67;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    v9 = 0;
    v65 = &v66;
    v66 = 0;
    v67 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v10;
  }
  *(_OWORD *)(a1 + 56) = v68;
  v68 = 0uLL;
  *(_BYTE *)(a1 + 120) = 0;
  v63.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v65, (unsigned int *)v9);
  MEMORY[0x18D7898AC](&v63);
  if (!v42)
LABEL_64:
    ((void (*)(std::runtime_error *))v36.~runtime_error)(&v36);
LABEL_80:
  if (!v56)
    ((void (*)(std::runtime_error *))v55[0].~runtime_error)(v55);
}

void sub_18CC95218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (**a10)(_QWORD), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void (**a36)(_QWORD),uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (!a19)
    (*a10)(&a10);
  if (!a45)
  {
    (*a36)(&a36);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::`anonymous namespace'::getValueByKeyWithType<double>(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4)
{
  int v5;
  double v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::runtime_error v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  std::runtime_error v21[4];
  char v22;
  std::runtime_error v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  AMSCore::getValueByKey((uint64_t)v21, a2, a3, a4);
  if (v22)
  {
    v5 = (int)v21[0].__vftable[1].~runtime_error;
    if (v5 == -1)
      v5 = 0;
    switch(v5)
    {
      case 1:
        v6 = 0.0;
        if (LOBYTE(v21[0].~runtime_error))
          v6 = 1.0;
        break;
      case 2:
        v6 = *(double *)&v21[0].~runtime_error;
        break;
      case 3:
        v6 = (double)(uint64_t)v21[0].~runtime_error;
        break;
      case 4:
        v6 = (double)(unint64_t)v21[0].~runtime_error;
        break;
      default:
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[14]>((uint64_t)&v23, 0xCu);
        std::runtime_error::runtime_error((std::runtime_error *)a1, &v23);
        *(_OWORD *)(a1 + 16) = v24;
        *(_QWORD *)a1 = off_1E2521330;
        v12 = v26;
        *(_QWORD *)(a1 + 32) = v25;
        *(_QWORD *)(a1 + 40) = v12;
        v13 = a1 + 40;
        v14 = v27;
        *(_QWORD *)(a1 + 48) = v27;
        if (v14)
        {
          *(_QWORD *)(v12 + 16) = v13;
          v25 = &v26;
          v26 = 0;
          v27 = 0;
          v12 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 32) = v13;
        }
        *(_OWORD *)(a1 + 56) = v28;
        v28 = 0uLL;
        *(_BYTE *)(a1 + 72) = 0;
        v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, (unsigned int *)v12);
        v11 = &v23;
        goto LABEL_25;
    }
    *(double *)a1 = v6;
    *(_BYTE *)(a1 + 72) = 1;
    if (!v22)
      goto LABEL_19;
  }
  else
  {
    AMSCore::Error::Error(&v23, v21);
    std::runtime_error::runtime_error(&v15, &v23);
    v16 = v24;
    v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v7 = (unsigned int *)v26;
    v17 = v25;
    v18 = v26;
    v19 = v27;
    if (v27)
    {
      *(_QWORD *)(v26 + 16) = &v18;
      v25 = &v26;
      v26 = 0;
      v27 = 0;
      v7 = 0;
    }
    else
    {
      v17 = &v18;
    }
    v20 = v28;
    v28 = 0uLL;
    v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, v7);
    MEMORY[0x18D7898AC](&v23);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v15);
    *(_OWORD *)(a1 + 16) = v16;
    *(_QWORD *)a1 = off_1E2521330;
    v8 = v18;
    *(_QWORD *)(a1 + 32) = v17;
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a1 + 40;
    v10 = v19;
    *(_QWORD *)(a1 + 48) = v19;
    if (v10)
    {
      *(_QWORD *)(v8 + 16) = v9;
      v8 = 0;
      v17 = &v18;
      v18 = 0;
      v19 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v9;
    }
    *(_OWORD *)(a1 + 56) = v20;
    v20 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v8);
    v11 = &v15;
LABEL_25:
    MEMORY[0x18D7898AC](v11);
    if (!v22)
LABEL_19:
      ((void (*)(std::runtime_error *))v21[0].~runtime_error)(v21);
  }
}

void sub_18CC95510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)(_QWORD), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a27)
    (*a18)(&a18);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[14]>(uint64_t a1, unsigned int a2)
{
  std::system_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error_vtbl *v7;
  std::system_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v15;
  std::system_error v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::error_code v25;

  v4 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = MEMORY[0x1E0DE4F60];
  v7 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16.__vftable = v7;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v7[-1].~system_error) = v8;
  v9 = (std::ios_base *)((char *)&v16 + (unint64_t)v16.__vftable[-1].~system_error);
  std::ios_base::init(v9, &v16.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16.__vftable = v4 + 1;
  v24[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v16.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"value missing", 13);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v16.__imp_, &v15);
  v16.__vftable = *(std::system_error_vtbl **)v6;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v16.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v6 + 24);
  v16.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v24);
  *(_QWORD *)&v25.__val_ = a2;
  v25.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v16, v25, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v18 = 0;
  v19 = 0;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v17 = &v18;
  v20 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  *(std::error_code *)(a1 + 16) = v16.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v11 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v11;
  v12 = a1 + 40;
  v13 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    v11 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v12;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v11);
  return MEMORY[0x18D7898AC](&v16);
}

void sub_18CC9573C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC95758(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

_QWORD *AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics(_OWORD *a1, uint64_t *a2)
{
  char *v4;
  unint64_t v5;
  std::runtime_error *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  __int128 v18;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  __int128 v43;

  v4 = (char *)operator new(0xD0uLL);
  v5 = (unint64_t)v4;
  *(_QWORD *)v4 = AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics;
  *((_QWORD *)v4 + 1) = AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics;
  v6 = (std::runtime_error *)(v4 + 64);
  v7 = v4 + 144;
  v8 = (uint64_t *)(v4 + 176);
  v9 = (uint64_t)(v4 + 16);
  do
    v10 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v10 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *(_WORD *)(v4 + 17) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 7) = 0;
  std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(&v43, v9);
  *a1 = v43;
  if (*a2)
  {
    v11 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
    if ((v11 & 1) == 0)
      goto LABEL_48;
    while (1)
    {
      std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
      if (!byte_1ECEAC058)
        std::terminate();
      v12 = *((_QWORD *)&xmmword_1ECEAC048 + 1);
      *(_QWORD *)(v5 + 160) = xmmword_1ECEAC048;
      *(_QWORD *)(v5 + 168) = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
      v15 = *(_QWORD *)(v5 + 160);
      v16 = *a2;
      *a2 = 0;
      *(_QWORD *)(v5 + 176) = v16;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 24))(v15, v8);
      v18 = *(_OWORD *)(v5 + 144);
      *(_OWORD *)(v5 + 184) = v18;
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      if (!atomic_load((unint64_t *)(v18 + 96)))
      {
        *(_BYTE *)(v5 + 200) = 0;
        v20 = (unint64_t *)(*(_QWORD *)(v5 + 184) + 96);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v5, v20));
        if (!v21)
          break;
      }
      v7 = *(char **)(v5 + 184);
      if (v7[88])
      {
        v22 = v7[80];
        if (!v22)
        {
          std::runtime_error::runtime_error(v6, (const std::runtime_error *)(v7 + 8));
          *(_OWORD *)(v5 + 80) = *(_OWORD *)(v7 + 24);
          v23 = v7 + 48;
          v24 = *((_QWORD *)v7 + 6);
          *(_QWORD *)(v5 + 104) = v24;
          v25 = v5 + 104;
          *(_QWORD *)(v5 + 64) = off_1E2521330;
          *(_QWORD *)(v5 + 96) = *((_QWORD *)v7 + 5);
          v26 = *((_QWORD *)v7 + 7);
          *(_QWORD *)(v5 + 112) = v26;
          if (v26)
          {
            *(_QWORD *)(v24 + 16) = v25;
            *((_QWORD *)v7 + 5) = v23;
            *v23 = 0;
            *((_QWORD *)v7 + 7) = 0;
          }
          else
          {
            *(_QWORD *)(v5 + 96) = v25;
          }
          v27 = *(_QWORD *)(v5 + 184);
          *(_OWORD *)(v5 + 120) = *(_OWORD *)(v27 + 64);
          *(_QWORD *)(v27 + 64) = 0;
          *(_QWORD *)(v27 + 72) = 0;
        }
        *(_BYTE *)(v5 + 136) = v22;
        v28 = *(_QWORD *)(v5 + 192);
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            v31 = *(std::__shared_weak_count **)(v5 + 192);
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v32 = *(std::__shared_weak_count **)(v5 + 152);
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = *v8;
        *v8 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = *(std::__shared_weak_count **)(v5 + 168);
        if (!v36)
          goto LABEL_53;
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          if (*(_BYTE *)(v5 + 136))
            goto LABEL_36;
        }
        else
        {
LABEL_53:
          if (*(_BYTE *)(v5 + 136))
            goto LABEL_36;
        }
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v43);
        AMSCore::Logger::log<char [31],AMSCore::Error>(v43, 4, (uint64_t)"metrics", 7, "Failed to save load url metric", (uint64_t)v6);
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
        if (*((_QWORD *)&v43 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v42 = *(unsigned __int8 *)(v5 + 136);
        *(_BYTE *)(v5 + 18) = 1;
        if (!v42)
          ((void (*)(std::runtime_error *))v6->~runtime_error)(v6);
        goto LABEL_37;
      }
      __break(1u);
LABEL_48:
      if (__cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton))
      {
        std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
        xmmword_1ECEAC048 = 0uLL;
        byte_1ECEAC058 = 0;
        __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
      }
    }
  }
  else
  {
LABEL_36:
    *(_BYTE *)(v5 + 18) = 1;
LABEL_37:
    *(_QWORD *)(v5 + 64) = v9;
    *(_QWORD *)v5 = 0;
    return AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v6);
  }
  return result;
}

void sub_18CC95B24(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void sub_18CC95B3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (***v9)(_QWORD);
  uint64_t v10;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(_BYTE *)(v10 + 136))
    (**v9)(v9);
  __cxa_begin_catch(a1);
  std::terminate();
}

std::runtime_error *AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics(std::runtime_error *result)
{
  const char *imp;
  std::runtime_error *v2;
  _QWORD *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v8;
  std::runtime_error *v9;
  std::runtime_error_vtbl *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::runtime_error_vtbl *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int imp_low;
  uint64_t v25;
  std::__shared_weak_count *v26;

  imp = result[11].__imp_.__imp_;
  if (imp[88])
  {
    v2 = result;
    v3 = &result[4].__vftable;
    v4 = imp[80];
    if (!v4)
    {
      std::runtime_error::runtime_error(result + 4, (const std::runtime_error *)(imp + 8));
      v2[5] = *(std::runtime_error *)(imp + 24);
      v5 = imp + 48;
      v6 = *((_QWORD *)imp + 6);
      v2[6].__imp_.__imp_ = (const char *)v6;
      p_imp = (std::runtime_error_vtbl *)&v2[6].__imp_;
      v2[4].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v2[6].__vftable = (std::runtime_error_vtbl *)*((_QWORD *)imp + 5);
      v8 = (std::runtime_error_vtbl *)*((_QWORD *)imp + 7);
      v2[7].__vftable = v8;
      if (v8)
      {
        *(_QWORD *)(v6 + 16) = p_imp;
        *((_QWORD *)imp + 5) = v5;
        *v5 = 0;
        *((_QWORD *)imp + 7) = 0;
      }
      else
      {
        v2[6].__vftable = p_imp;
      }
      v9 = (std::runtime_error *)v2[11].__imp_.__imp_;
      *(std::runtime_error *)((char *)v2 + 120) = v9[4];
      v9[4].__vftable = 0;
      v9[4].__imp_.__imp_ = 0;
    }
    LOBYTE(v2[8].__imp_.__imp_) = v4;
    v10 = v2[12].__vftable;
    if (v10)
    {
      v11 = (unint64_t *)&v10->~runtime_error_0;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        v13 = (std::__shared_weak_count *)v2[12].__vftable;
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v14 = (std::__shared_weak_count *)v2[9].__imp_.__imp_;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v2[11].__vftable;
    v2[11].__vftable = 0;
    if (v17)
      (*((void (**)(std::runtime_error_vtbl *))v17->~runtime_error + 1))(v17);
    v18 = (std::__shared_weak_count *)v2[10].__imp_.__imp_;
    if (!v18)
      goto LABEL_37;
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (LOBYTE(v2[8].__imp_.__imp_))
        goto LABEL_24;
    }
    else
    {
LABEL_37:
      if (LOBYTE(v2[8].__imp_.__imp_))
      {
LABEL_24:
        BYTE2(v2[1].__vftable) = 1;
LABEL_33:
        v2[4].__vftable = (std::runtime_error_vtbl *)&v2[1];
        v2->__vftable = 0;
        return (std::runtime_error *)AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v3);
      }
    }
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v25);
    AMSCore::Logger::log<char [31],AMSCore::Error>(v25, 4, (uint64_t)"metrics", 7, "Failed to save load url metric", (uint64_t)v3);
    v21 = v26;
    if (v26)
    {
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    imp_low = LOBYTE(v2[8].__imp_.__imp_);
    BYTE2(v2[1].__vftable) = 1;
    if (!imp_low)
      (*(void (**)(_QWORD *))*v3)(v3);
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

void sub_18CC95DA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (***v9)(_QWORD);
  uint64_t v10;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(_BYTE *)(v10 + 136))
    (**v9)(v9);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  if (*__p)
  {
    v2 = __p[24];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[24];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[19];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = __p[22];
    __p[22] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = (std::__shared_weak_count *)__p[21];
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = (_QWORD *)__p[7];
  if (v13 == __p + 4)
  {
    v14 = 4;
    v13 = __p + 4;
  }
  else
  {
    if (!v13)
      goto LABEL_24;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
  do
  {
LABEL_24:
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v16)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

void AMSCore::LoadURLMetricsHandler::handleURLMetrics(std::runtime_error *a1@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  unsigned __int8 imp;
  const char *v9;
  std::runtime_error_vtbl *v10;
  uint64_t v11;
  int v12;
  int v13;
  __n128 v14;
  uint64_t v15;
  int v16;
  std::runtime_error_vtbl *v17;
  std::runtime_error_vtbl *v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::ios_base *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  std::runtime_error_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::string::size_type v43;
  __int128 v44;
  std::string::size_type v45;
  AMSCore::LoadURLMetricsEvent *v46;
  AMSCore::LoadURLMetricsEvent *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::runtime_error v50;
  char v51;
  void *v52;
  char v53;
  int v54;
  unsigned __int8 v55;
  const char *v56;
  unsigned int *v57;
  std::runtime_error v59;
  std::runtime_error v60;
  __int128 v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  unsigned __int8 v66;
  __int128 v67;
  __int128 v68;
  std::string::size_type v69;
  char v70;
  std::runtime_error v71;
  __int128 v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  char v77;
  __int128 v78;
  __int128 v79;
  std::string::size_type v80;
  std::runtime_error v81;
  __int128 v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  char v87;
  __int128 v88;
  __int128 v89;
  std::string::size_type v90;
  std::string v91;
  uint64_t v92;
  __int128 __p;
  __int128 v94;
  int v95;
  uint64_t v96[20];
  std::runtime_error v97;
  __int128 v98;
  uint64_t *v99;
  _QWORD v100[2];
  __int128 v101;
  char v102;
  __int128 v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  imp = a1[7].__imp_.__imp_;
  std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(&v50, imp, a1);
  LOBYTE(v54) = imp;
  v9 = (const char *)&a1[9];
  v10 = a1[9].__vftable;
  v55 = a1[8].__vftable;
  v56 = a1[8].__imp_.__imp_;
  v57 = (unsigned int *)v10;
  if (a1[9].__imp_.__imp_)
  {
    v10->what = (const char *(__cdecl *)(const std::runtime_error *__hidden))&v57;
    a1[8].__imp_.__imp_ = v9;
    *(_QWORD *)v9 = 0;
    a1[9].__imp_.__imp_ = 0;
  }
  else
  {
    v56 = (const char *)&v57;
  }
  v59 = a1[10];
  a1[10].__vftable = 0;
  a1[10].__imp_.__imp_ = 0;
  AMSCore::ServiceProvider<AMSCore::IMetricsSamplingProvider>::getDefault(&v48);
  v11 = v48;
  v12 = v55;
  v13 = v54;
  v14 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(&v60, v54, &v50);
  v70 = v13;
  if (v12)
  {
    if (v13)
    {
      v15 = (uint64_t)v59.__vftable;
      if ((*(unsigned int (**)(uint64_t, std::runtime_error *, __n128))(*(_QWORD *)v11 + 16))(v11, &v60, v14))
      {
        if (*(_BYTE *)(a3 + 656))
        {
          if (v70)
          {
            v46 = (AMSCore::LoadURLMetricsEvent *)operator new();
            v16 = v66;
            if (v66)
            {
              v17 = v60.__vftable;
              v71.__vftable = v60.__vftable;
            }
            else
            {
              std::runtime_error::runtime_error(&v71, &v60);
              v72 = v61;
              v71.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v73 = v62;
              v74 = v63;
              v75 = v64;
              if (v64)
              {
                *(_QWORD *)(v63 + 16) = &v74;
                v62 = &v63;
                v63 = 0;
                v64 = 0;
              }
              else
              {
                v73 = &v74;
              }
              v76 = v65;
              v65 = 0uLL;
              v17 = (std::runtime_error_vtbl *)off_1E2521330;
            }
            v77 = v16;
            v78 = v67;
            v79 = v68;
            v80 = v69;
            v68 = 0uLL;
            v69 = 0;
            if (v16)
            {
              v81.__vftable = v17;
            }
            else
            {
              std::runtime_error::runtime_error(&v81, &v71);
              v82 = v72;
              v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v83 = v73;
              v84 = v74;
              v85 = v75;
              if (v75)
              {
                *(_QWORD *)(v74 + 16) = &v84;
                v73 = &v74;
                v74 = 0;
                v75 = 0;
              }
              else
              {
                v83 = &v84;
              }
              v86 = v76;
              v76 = 0uLL;
            }
            v87 = v16;
            v42 = v79;
            v88 = v78;
            v43 = v80;
            v79 = 0uLL;
            v80 = 0;
            *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v42;
            v91.__r_.__value_.__r.__words[2] = v43;
            v89 = 0uLL;
            v90 = 0;
            AMSCore::LoadURLMetricsEvent::LoadURLMetricsEvent((uint64_t)v46, v15, (uint64_t)&v91);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v91.__r_.__value_.__l.__data_);
            AMSCore::LoadURLMetricsEvent::withConfig(v46, &v81);
            if (SHIBYTE(v90) < 0)
              operator delete((void *)v89);
            if (!v87)
              ((void (*)(std::runtime_error *))v81.~runtime_error)(&v81);
            __asm { BR              X12 }
          }
        }
        else if (v70)
        {
          v47 = (AMSCore::LoadURLMetricsEvent *)operator new();
          v31 = v66;
          if (v66)
          {
            v32 = v60.__vftable;
            v81.__vftable = v60.__vftable;
          }
          else
          {
            std::runtime_error::runtime_error(&v81, &v60);
            v82 = v61;
            v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v83 = v62;
            v84 = v63;
            v85 = v64;
            if (v64)
            {
              *(_QWORD *)(v63 + 16) = &v84;
              v62 = &v63;
              v63 = 0;
              v64 = 0;
            }
            else
            {
              v83 = &v84;
            }
            v86 = v65;
            v65 = 0uLL;
            v32 = (std::runtime_error_vtbl *)off_1E2521330;
          }
          v87 = v31;
          v88 = v67;
          v89 = v68;
          v90 = v69;
          v68 = 0uLL;
          v69 = 0;
          if (v31)
          {
            v97.__vftable = v32;
          }
          else
          {
            std::runtime_error::runtime_error(&v97, &v81);
            v98 = v82;
            v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v99 = v83;
            v100[0] = v84;
            v100[1] = v85;
            if (v85)
            {
              *(_QWORD *)(v84 + 16) = v100;
              v83 = &v84;
              v84 = 0;
              v85 = 0;
            }
            else
            {
              v99 = v100;
            }
            v101 = v86;
            v86 = 0uLL;
          }
          v102 = v31;
          v44 = v89;
          v103 = v88;
          v45 = v90;
          v105 = 0;
          v89 = 0uLL;
          v90 = 0;
          *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v44;
          v91.__r_.__value_.__r.__words[2] = v45;
          v104 = 0;
          v106 = 0;
          AMSCore::LoadURLMetricsEvent::LoadURLMetricsEvent((uint64_t)v47, v15, (uint64_t)&v91);
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v91.__r_.__value_.__l.__data_);
          AMSCore::LoadURLMetricsEvent::withConfig(v47, &v97);
          if (SHIBYTE(v106) < 0)
            operator delete(v104);
          if (!v102)
            ((void (*)(std::runtime_error *))v97.~runtime_error)(&v97);
          __asm { BR              X12 }
        }
        __break(1u);
      }
    }
    else
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v81);
      v18 = v81.__vftable;
      if (SLODWORD(v81.~runtime_error_0) <= 4)
      {
        v19 = MEMORY[0x1E0DE4FE0];
        v20 = MEMORY[0x1E0DE4FE0] + 64;
        v21 = (std::string::size_type *)MEMORY[0x1E0DE4F60];
        v22 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
        v23 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
        v96[0] = MEMORY[0x1E0DE4FE0] + 64;
        v91.__r_.__value_.__r.__words[0] = v22;
        *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + *(_QWORD *)(v22 - 24)) = v23;
        v24 = (std::ios_base *)((char *)&v91 + *(_QWORD *)(v91.__r_.__value_.__r.__words[0] - 24));
        std::ios_base::init(v24, &v91.__r_.__value_.__r.__words[1]);
        v24[1].__vftable = 0;
        v24[1].__fmtflags_ = -1;
        v91.__r_.__value_.__r.__words[0] = v19 + 24;
        v96[0] = v20;
        std::streambuf::basic_streambuf();
        v25 = MEMORY[0x1E0DE4FB8];
        v91.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
        __p = 0u;
        v94 = 0u;
        v95 = 16;
        v26 = *(_QWORD *)(v91.__r_.__value_.__r.__words[0] - 24);
        if ((v27 & 1) == 0
        {
        }
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v91, (uint64_t)"Failed to send handleURLMetrics, MetricsConfig missing!", 55);
        v28 = v92;
        v29 = (char *)&v91 + *(_QWORD *)(v91.__r_.__value_.__r.__words[0] - 24);
        if ((v29[32] & 5) != 0)
        {
          v30 = -1;
        }
        else
        {
          (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5) + 32))(&v97, *((_QWORD *)v29 + 5), 0, 1, 16);
          v30 = v107;
        }
        v97.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v97.__imp_.__imp_) = 4;
        *(_QWORD *)&v98 = v28;
        *((_QWORD *)&v98 + 1) = v30;
        (*(void (**)(const char *(__cdecl *)(const std::runtime_error *__hidden), const char *, uint64_t, std::runtime_error *))(*(_QWORD *)v18->what + 16))(v18->what, "bag", 3, &v97);
        v91.__r_.__value_.__r.__words[0] = *v21;
        *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words
                                  + *(_QWORD *)(v91.__r_.__value_.__r.__words[0] - 24)) = v21[3];
        v91.__r_.__value_.__l.__size_ = v25 + 16;
        if (SBYTE7(v94) < 0)
          operator delete((void *)__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D789B58](v96);
      }
      v33 = (std::__shared_weak_count *)v81.__imp_.__imp_;
      if (v81.__imp_.__imp_)
      {
        v34 = (unint64_t *)(v81.__imp_.__imp_ + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    if (!v70)
      goto LABEL_36;
  }
  else if (!v13)
  {
    goto LABEL_36;
  }
  if ((SHIBYTE(v69) & 0x80000000) == 0)
  {
    if (v66)
      goto LABEL_37;
LABEL_36:
    ((void (*)(std::runtime_error *, __n128))v60.~runtime_error)(&v60, v14);
    goto LABEL_37;
  }
  operator delete((void *)v68);
  if (!v66)
    goto LABEL_36;
LABEL_37:
  *a4 = 0;
  v36 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v36->__on_zero_shared)(v36, v14);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)v59.__imp_.__imp_;
  if (v59.__imp_.__imp_)
  {
    v40 = (unint64_t *)(v59.__imp_.__imp_ + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, v14);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v56, v57);
  if (!(_BYTE)v54)
    goto LABEL_50;
  if ((v53 & 0x80000000) == 0)
  {
    if (v51)
      return;
    goto LABEL_50;
  }
  operator delete(v52);
  if (!v51)
LABEL_50:
    ((void (*)(std::runtime_error *))v50.~runtime_error)(&v50);
}

void sub_18CC97AE4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMSCore::LoadURLMetricsHandler::Options::~Options(AMSCore::LoadURLMetricsHandler::Options *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 136, *((unsigned int **)this + 18));
  if (!*((_BYTE *)this + 120))
    goto LABEL_9;
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 72))
      return;
    goto LABEL_9;
  }
  operator delete(*((void **)this + 12));
  if (!*((_BYTE *)this + 72))
LABEL_9:
    (**(void (***)(AMSCore::LoadURLMetricsHandler::Options *))this)(this);
}

void AMSCore::LoadURLMetricsHandler::OptionsBuilder::make(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void **v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  const void ***v15;
  BOOL v16;
  std::runtime_error v17[4];
  char v18;
  void *__p;
  char v20;
  int v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v3 = *(_QWORD *)(a2 + 160);
  if (!v3)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(std::runtime_error *__return_ptr))(*(_QWORD *)v3 + 48))(v17);
  v22 = *(_BYTE *)(a2 + 130);
  v24 = 0;
  v25 = 0;
  v23 = &v24;
  v5 = *(const void ***)a2;
  if (*(_QWORD *)a2 != a2 + 8)
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(&v23, &v24, v5 + 4, (__int128 *)v5 + 2);
      v14 = (const void **)v5[1];
      if (v14)
      {
        do
        {
          v15 = (const void ***)v14;
          v14 = (const void **)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (const void ***)v5[2];
          v16 = *v15 == v5;
          v5 = (const void **)v15;
        }
        while (!v16);
      }
      v5 = (const void **)v15;
    }
    while (v15 != (const void ***)(a2 + 8));
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v26 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)&v26 + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = v21;
  std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)a1, v21, v17);
  v11 = v23;
  v10 = v24;
  *(_QWORD *)(a1 + 144) = v24;
  v12 = a1 + 144;
  *(_BYTE *)(a1 + 120) = v9;
  *(_BYTE *)(a1 + 128) = v22;
  *(_QWORD *)(a1 + 136) = v11;
  v13 = v25;
  *(_QWORD *)(a1 + 152) = v25;
  if (v13)
  {
    *(_QWORD *)(v10 + 16) = v12;
    v10 = 0;
    v23 = &v24;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 136) = v12;
  }
  *(_OWORD *)(a1 + 160) = v26;
  v26 = 0uLL;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v10);
  if (!(_BYTE)v21)
    goto LABEL_19;
  if ((v20 & 0x80000000) == 0)
  {
    if (v18)
      return;
    goto LABEL_19;
  }
  operator delete(__p);
  if (!v18)
LABEL_19:
    ((void (*)(std::runtime_error *))v17[0].~runtime_error)(v17);
}

void sub_18CC97F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned int *a27)
{
  uint64_t v27;

  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v27, a27);
  std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::MetricsEventModifier::MetricsConfig::MetricsConfig(uint64_t a1, __int128 *a2, uint64_t a3, _QWORD *a4)
{
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  std::string *v30;
  std::string::size_type size;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t i;
  int v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t result;
  int v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  void *v61;
  std::string *v62;
  std::string::size_type v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  std::string v70;

  v7 = *a2;
  *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)a1 = v7;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  v8 = (_QWORD *)a2 + 5;
  v9 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a1 + 40;
  v11 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 48) = v11;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    *((_QWORD *)a2 + 4) = v8;
    *v8 = 0;
    *((_QWORD *)a2 + 6) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v10;
  }
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v12 = a2 + 4;
  v13 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = a1 + 64;
  v15 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 72) = v15;
  if (v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
    *((_QWORD *)a2 + 7) = v12;
    *v12 = 0;
    *((_QWORD *)a2 + 9) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v14;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  v16 = (_QWORD *)a2 + 11;
  v17 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 88) = v17;
  v18 = a1 + 88;
  v19 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 96) = v19;
  if (v19)
  {
    *(_QWORD *)(v17 + 16) = v18;
    *((_QWORD *)a2 + 10) = v16;
    *v16 = 0;
    *((_QWORD *)a2 + 12) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v18;
  }
  v20 = *(__int128 *)((char *)a2 + 104);
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = v20;
  *(_BYTE *)(a1 + 272) = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(a1 + 120, (__int128 *)((char *)a2 + 120));
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 280) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a1 + 304) = *a4;
  v21 = (_QWORD *)(a1 + 312);
  v22 = a4 + 1;
  v23 = a4[1];
  *(_QWORD *)(a1 + 312) = v23;
  v24 = a4[2];
  *(_QWORD *)(a1 + 320) = v24;
  if (v24)
  {
    *(_QWORD *)(v23 + 16) = v21;
    *a4 = v22;
    *v22 = 0;
    a4[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 304) = v21;
  }
  v25 = std::hash<AMSCore::MetricsEventModifier::EventModifierForFieldFilters>::operator()(a1);
  v26 = *(_QWORD *)(a1 + 104);
  v27 = *(unsigned __int8 *)(a1 + 112);
  v69 = a1;
  if (*(_BYTE *)(a1 + 272))
  {
    AMSCore::URL::getStringRepresentation((AMSCore::URL *)(a1 + 120), &v70);
    v28 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
    v29 = (void *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v70;
    else
      v30 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    else
      size = v70.__r_.__value_.__l.__size_;
    v32 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100]((uint64_t *)v30, size);
    if (v28 < 0)
      operator delete(v29);
    v33 = 2 * v32;
  }
  else
  {
    v33 = 0;
  }
  v34 = 2 * v26;
  if (!v27)
    v34 = 0;
  v35 = 4 * (v33 ^ v25 ^ v34);
  v36 = *(_QWORD **)(a1 + 280);
  v37 = *(_QWORD **)(a1 + 288);
  while (v36 != v37)
  {
    v39 = (_QWORD *)*v36;
    if ((_QWORD *)*v36 == v36 + 1)
    {
      v38 = 0;
    }
    else
    {
      v38 = 0;
      do
      {
        v40 = *((char *)v39 + 55);
        if (v40 >= 0)
          v41 = v39 + 4;
        else
          v41 = (uint64_t *)v39[4];
        if (v40 >= 0)
          v42 = *((unsigned __int8 *)v39 + 55);
        else
          v42 = v39[5];
        v38 ^= 2 * std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v41, v42);
        v43 = v39[7];
        for (i = v39[8]; v43 != i; v43 += 24)
        {
          v45 = *(char *)(v43 + 23);
          if (v45 >= 0)
            v46 = (uint64_t *)v43;
          else
            v46 = *(uint64_t **)v43;
          if (v45 >= 0)
            v47 = *(unsigned __int8 *)(v43 + 23);
          else
            v47 = *(_QWORD *)(v43 + 8);
          v38 ^= 2 * std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v46, v47);
        }
        v48 = (_QWORD *)v39[1];
        if (v48)
        {
          do
          {
            v49 = v48;
            v48 = (_QWORD *)*v48;
          }
          while (v48);
        }
        else
        {
          do
          {
            v49 = (_QWORD *)v39[2];
            v50 = *v49 == (_QWORD)v39;
            v39 = v49;
          }
          while (!v50);
        }
        v39 = v49;
      }
      while (v49 != v36 + 1);
    }
    v35 ^= (4 * std::hash<AMSCore::MetricsEventModifier::EventModifierForFieldFilters>::operator()((uint64_t)(v36 + 3))) ^ (2 * v38);
    v36 += 16;
  }
  v51 = *(_QWORD **)(a1 + 304);
  if (v51 != v21)
  {
    do
    {
      v53 = *((char *)v51 + 55);
      if (v53 >= 0)
        v54 = v51 + 4;
      else
        v54 = (uint64_t *)v51[4];
      if (v53 >= 0)
        v55 = *((unsigned __int8 *)v51 + 55);
      else
        v55 = v51[5];
      v56 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v54, v55);
      v57 = std::hash<AMSCore::MetricsEventModifier::EventModifierForFieldFilters>::operator()((uint64_t)(v51 + 7));
      v58 = v51[20];
      v59 = *((unsigned __int8 *)v51 + 168);
      if (*((_BYTE *)v51 + 328))
      {
        AMSCore::URL::getStringRepresentation((AMSCore::URL *)(v51 + 22), &v70);
        v60 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
        v61 = (void *)v70.__r_.__value_.__r.__words[0];
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v70;
        else
          v62 = (std::string *)v70.__r_.__value_.__r.__words[0];
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        else
          v63 = v70.__r_.__value_.__l.__size_;
        v64 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100]((uint64_t *)v62, v63);
        if (v60 < 0)
          operator delete(v61);
        v65 = 2 * v64;
      }
      else
      {
        v65 = 0;
      }
      v66 = 2 * v58;
      if (!v59)
        v66 = 0;
      v67 = (_QWORD *)v51[1];
      if (v67)
      {
        do
        {
          v68 = v67;
          v67 = (_QWORD *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (_QWORD *)v51[2];
          v50 = *v68 == (_QWORD)v51;
          v51 = v68;
        }
        while (!v50);
      }
      v35 ^= (2 * v56) ^ (4 * (v65 ^ v57 ^ v66));
      v51 = v68;
    }
    while (v68 != v21);
  }
  result = v69;
  *(_QWORD *)(v69 + 328) = v35;
  return result;
}

void sub_18CC9832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char **a10, void **a11)
{
  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(a10[39]);
  a11 = (void **)(a9 + 160);
  std::vector<AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters>::__destroy_vector::operator()[abi:fe180100](&a11);
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier((AMSCore::MetricsEventModifier::EventModifier *)a10);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[328])
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 176));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 18));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 15));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 12));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::vector<AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  char **v2;
  char **v4;
  void *v5;

  v1 = *a1;
  v2 = (char **)**a1;
  if (v2)
  {
    v4 = (char **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v4 - 2));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v4 - 5));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v4 - 8));
        std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(v4 - 15));
        v4 -= 16;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AMSCore::MetricsEventModifier::EventModifier::~EventModifier(AMSCore::MetricsEventModifier::EventModifier *this)
{
  if (*((_BYTE *)this + 272))
    AMSCore::URL::~URL((AMSCore::MetricsEventModifier::EventModifier *)((char *)this + 120));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)this + 11));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)this + 8));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)this + 5));
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    if (v2)
    {
      v3 = *((_QWORD *)a1 + 8);
      v4 = (void *)*((_QWORD *)a1 + 7);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = (void *)*((_QWORD *)a1 + 7);
      }
      *((_QWORD *)a1 + 8) = v2;
      operator delete(v4);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void AMSCore::MetricsEventModifier::MetricsConfig::buildFieldFilters(void **a1, uint64_t *a2)
{
  void (**v3)(_QWORD *);
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  const void *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t *v17;
  size_t v18;
  size_t v19;
  int v20;
  unint64_t v21;
  size_t v22;
  int v23;
  char *v24;
  char **v25;
  char **v26;
  int v27;
  const void *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  char *v34;
  size_t v35;
  size_t v36;
  int v37;
  int v38;
  char *v39;
  std::string *v40;
  __int128 v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t i;
  __int128 v45;
  char *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  BOOL v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char **v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  __int128 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char ***v75;
  char *v76;
  char **v77;
  char **v78;
  char *v79;
  __int128 v80;
  char *v81;
  char **v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char **v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char **v92;
  char *v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char ***v97;
  char *v98;
  char **v99;
  uint64_t v100;
  char **v101;
  char ***v102;
  __int128 v103;
  char *v104;
  char **v105;
  uint64_t v106;
  char **v107;
  char ***v108;
  char *v109;
  char **v110;
  uint64_t v111;
  char **v112;
  char ***v113;
  char *v114;
  char **v115;
  uint64_t v116;
  char **v117;
  char *v118;
  uint64_t v119;
  void **v120;
  _BYTE v121[28];
  char **v122;
  char *v123;
  uint64_t v124;
  char **v125;
  char *v126;
  uint64_t v127;
  char **v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char **v132;
  char *v133;
  char **v134;
  _BYTE v135[28];
  char **v136;
  char *v137;
  uint64_t v138;
  char **v139;
  char *v140;
  uint64_t v141;
  char **v142;
  char *v143;
  uint64_t v144;
  uint64_t *v145[9];
  unsigned __int8 v146;
  _QWORD v147[9];
  char v148;
  _QWORD v149[9];
  char v150;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  AMSCore::getValueByKey((uint64_t)v149, a2, "overrides", 9uLL);
  v3 = (void (**)(_QWORD *))v149[0];
  if (!v150)
  {
LABEL_174:
    (*v3)(v149);
    return;
  }
  v120 = a1;
  if (*(_DWORD *)(v149[0] + 24) == 9)
  {
    v5 = *(_QWORD *)v149[0];
    v4 = *(_QWORD *)(v149[0] + 8);
    if (*(_QWORD *)v149[0] != v4)
    {
      v119 = *(_QWORD *)(v149[0] + 8);
      while (1)
      {
        v8 = *(_DWORD *)(v5 + 24);
        if (v8 == 8)
          v9 = (uint64_t *)v5;
        else
          v9 = 0;
        if (v8 != 8)
          goto LABEL_13;
        AMSCore::getValueByKey((uint64_t)v147, v9, "fieldFilters", 0xCuLL);
        AMSCore::getValueByKey((uint64_t)v145, v9, "properties", 0xAuLL);
        v7 = v146;
        if (!v148 || !v146)
          goto LABEL_9;
        if (*(_DWORD *)(v147[0] + 24) == 8)
          break;
LABEL_11:
        if (!v148)
          (*(void (**)(_QWORD *))v147[0])(v147);
LABEL_13:
        v5 += 32;
        if (v5 == v4)
        {
          if (v150)
            return;
          v3 = (void (**)(_QWORD *))v149[0];
          goto LABEL_174;
        }
      }
      v133 = 0;
      v134 = 0;
      v132 = &v133;
      v135[0] = 0;
      v135[16] = 0;
      v137 = 0;
      v138 = 0;
      *(_DWORD *)&v135[24] = 0;
      v140 = 0;
      v141 = 0;
      v136 = &v137;
      v139 = &v140;
      v143 = 0;
      v144 = 0;
      v142 = &v143;
      v10 = v147[0] + 8;
      v11 = *(_QWORD **)v147[0];
      if (*(_QWORD *)v147[0] == v147[0] + 8)
      {
LABEL_8:
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v143);
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v140);
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v137);
        std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v133);
        v7 = v146;
        v4 = v119;
LABEL_9:
        if (!v7)
          (*(void (**)(uint64_t **))v145[0])(v145);
        goto LABEL_11;
      }
      while (1)
      {
        if (*((char *)v11 + 55) < 0)
        {
          v13 = (const void *)v11[4];
          v12 = v11[5];
          if ((v15 & 1) == 0)
          {
LABEL_99:
            {
              std::set<std::string_view>::set[abi:fe180100]<char const* const*>();
            }
          }
        }
        else
        {
          v12 = *((unsigned __int8 *)v11 + 55);
          v13 = v11 + 4;
          if ((v14 & 1) == 0)
            goto LABEL_99;
        }
        v16 = qword_1EE060810;
        if (!qword_1EE060810)
          goto LABEL_93;
        v17 = &qword_1EE060810;
        do
        {
          while (1)
          {
            v18 = *(_QWORD *)(v16 + 40);
            v19 = v12 >= v18 ? *(_QWORD *)(v16 + 40) : v12;
            v20 = memcmp(*(const void **)(v16 + 32), v13, v19);
            if (v20)
              break;
            if (v18 >= v12)
              goto LABEL_38;
LABEL_30:
            v16 = *(_QWORD *)(v16 + 8);
            if (!v16)
              goto LABEL_39;
          }
          if (v20 < 0)
            goto LABEL_30;
LABEL_38:
          v17 = (uint64_t *)v16;
          v16 = *(_QWORD *)v16;
        }
        while (v16);
LABEL_39:
        if (v17 == &qword_1EE060810)
          goto LABEL_93;
        v21 = v17[5];
        if (v21 >= v12)
          v22 = v12;
        else
          v22 = v17[5];
        v23 = memcmp(v13, (const void *)v17[4], v22);
        if (v23)
        {
          if (v23 < 0)
            goto LABEL_93;
        }
        else if (v12 < v21)
        {
          goto LABEL_93;
        }
        v24 = v133;
        v25 = &v133;
        v26 = &v133;
        if (v133)
        {
          v27 = *((char *)v11 + 55);
          if (v27 >= 0)
            v28 = v11 + 4;
          else
            v28 = (const void *)v11[4];
          if (v27 >= 0)
            v29 = *((unsigned __int8 *)v11 + 55);
          else
            v29 = v11[5];
          while (1)
          {
            v25 = (char **)v24;
            v32 = (char *)*((_QWORD *)v24 + 4);
            v30 = v24 + 32;
            v31 = v32;
            v33 = v30[23];
            if (v33 >= 0)
              v34 = v30;
            else
              v34 = v31;
            if (v33 >= 0)
              v35 = v30[23];
            else
              v35 = *((_QWORD *)v30 + 1);
            if (v35 >= v29)
              v36 = v29;
            else
              v36 = v35;
            v37 = memcmp(v28, v34, v36);
            if (v37)
            {
              if (v37 < 0)
                goto LABEL_54;
LABEL_68:
              v38 = memcmp(v34, v28, v36);
              if (v38)
              {
                if ((v38 & 0x80000000) == 0)
                  goto LABEL_80;
              }
              else if (v35 >= v29)
              {
LABEL_80:
                v39 = (char *)v25;
                goto LABEL_81;
              }
              v24 = v25[1];
              if (!v24)
              {
                v26 = v25 + 1;
                break;
              }
            }
            else
            {
              if (v29 >= v35)
                goto LABEL_68;
LABEL_54:
              v24 = *v25;
              v26 = v25;
              if (!*v25)
                break;
            }
          }
        }
        v39 = (char *)operator new(0x50uLL);
        v40 = (std::string *)(v39 + 32);
        if (*((char *)v11 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v40, (const std::string::value_type *)v11[4], v11[5]);
        }
        else
        {
          v41 = *((_OWORD *)v11 + 2);
          *((_QWORD *)v39 + 6) = v11[6];
          *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
        }
        *((_QWORD *)v39 + 7) = 0;
        *((_QWORD *)v39 + 8) = 0;
        *((_QWORD *)v39 + 9) = 0;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
        *((_QWORD *)v39 + 2) = v25;
        *v26 = v39;
        v42 = (uint64_t *)v39;
        if (*v132)
        {
          v132 = (char **)*v132;
          v42 = (uint64_t *)*v26;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)v133, v42);
        v134 = (char **)((char *)v134 + 1);
LABEL_81:
        if (*((_DWORD *)v11 + 20) == 9)
        {
          v43 = v11[7];
          for (i = v11[8]; v43 != i; v43 += 32)
          {
            v47 = *(_DWORD *)(v43 + 24);
            if (v47 == 5)
              v48 = v43;
            else
              v48 = 0;
            if (v47 == 5)
            {
              v49 = *((_QWORD *)v39 + 8);
              if (v49 < *((_QWORD *)v39 + 9))
              {
                v45 = *(_OWORD *)v48;
                *(_QWORD *)(v49 + 16) = *(_QWORD *)(v48 + 16);
                *(_OWORD *)v49 = v45;
                *(_QWORD *)(v48 + 8) = 0;
                *(_QWORD *)(v48 + 16) = 0;
                *(_QWORD *)v48 = 0;
                v46 = (char *)(v49 + 24);
              }
              else
              {
                v46 = std::vector<std::string>::__emplace_back_slow_path<std::string>((void **)v39 + 7, v48);
              }
              *((_QWORD *)v39 + 8) = v46;
            }
          }
        }
LABEL_93:
        v50 = (_QWORD *)v11[1];
        if (v50)
        {
          do
          {
            v51 = v50;
            v50 = (_QWORD *)*v50;
          }
          while (v50);
        }
        else
        {
          do
          {
            v51 = (_QWORD *)v11[2];
            v52 = *v51 == (_QWORD)v11;
            v11 = v51;
          }
          while (!v52);
        }
        v11 = v51;
        if (v51 == (_QWORD *)v10)
        {
          if (!v134)
            goto LABEL_8;
          if (!v146)
          {
            __break(1u);
            return;
          }
          if (*((_DWORD *)v145[0] + 6) == 8)
          {
            if (!v131)
              goto LABEL_115;
            *(_OWORD *)v135 = *(_OWORD *)v121;
            *(_OWORD *)&v135[12] = *(_OWORD *)&v121[12];
            std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v137);
            v136 = v122;
            v137 = v123;
            v138 = v124;
            if (v124)
            {
              *((_QWORD *)v123 + 2) = &v137;
              v122 = &v123;
              v123 = 0;
              v124 = 0;
            }
            else
            {
              v136 = &v137;
            }
            std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v140);
            v139 = v125;
            v140 = v126;
            v141 = v127;
            if (v127)
            {
              *((_QWORD *)v126 + 2) = &v140;
              v125 = &v126;
              v126 = 0;
              v127 = 0;
            }
            else
            {
              v139 = &v140;
            }
            std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v143);
            v53 = (char *)v129;
            v142 = v128;
            v143 = (char *)v129;
            v144 = v130;
            if (v130)
            {
              *(_QWORD *)(v129 + 16) = &v143;
              v53 = 0;
              v128 = (char **)&v129;
              v129 = 0;
              v130 = 0;
              if (v131)
                goto LABEL_113;
LABEL_115:
              (**(void (***)(_BYTE *))v121)(v121);
            }
            else
            {
              v142 = &v143;
              if (!v131)
                goto LABEL_115;
LABEL_113:
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v53);
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v126);
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v123);
            }
          }
          v55 = (char *)v120[1];
          v54 = (unint64_t)v120[2];
          if ((unint64_t)v55 < v54)
          {
            *(_QWORD *)v55 = v132;
            v56 = v133;
            *((_QWORD *)v55 + 1) = v133;
            v57 = v55 + 8;
            v58 = v134;
            *((_QWORD *)v55 + 2) = v134;
            if (v58)
            {
              *((_QWORD *)v56 + 2) = v57;
              v132 = &v133;
              v133 = 0;
              v134 = 0;
            }
            else
            {
              *(_QWORD *)v55 = v57;
            }
            v65 = *(_OWORD *)v135;
            *(_OWORD *)(v55 + 36) = *(_OWORD *)&v135[12];
            *(_OWORD *)(v55 + 24) = v65;
            *((_QWORD *)v55 + 7) = v136;
            v66 = v137;
            *((_QWORD *)v55 + 8) = v137;
            v67 = v55 + 64;
            v68 = v138;
            *((_QWORD *)v55 + 9) = v138;
            if (v68)
            {
              *((_QWORD *)v66 + 2) = v67;
              v136 = &v137;
              v137 = 0;
              v138 = 0;
            }
            else
            {
              *((_QWORD *)v55 + 7) = v67;
            }
            *((_QWORD *)v55 + 10) = v139;
            v69 = v140;
            *((_QWORD *)v55 + 11) = v140;
            v70 = v55 + 88;
            v71 = v141;
            *((_QWORD *)v55 + 12) = v141;
            if (v71)
            {
              *((_QWORD *)v69 + 2) = v70;
              v139 = &v140;
              v140 = 0;
              v141 = 0;
            }
            else
            {
              *((_QWORD *)v55 + 10) = v70;
            }
            *((_QWORD *)v55 + 13) = v142;
            v72 = v143;
            *((_QWORD *)v55 + 14) = v143;
            v73 = v55 + 112;
            v74 = v144;
            *((_QWORD *)v55 + 15) = v144;
            if (v74)
            {
              *((_QWORD *)v72 + 2) = v73;
              v142 = &v143;
              v143 = 0;
              v144 = 0;
            }
            else
            {
              *((_QWORD *)v55 + 13) = v73;
            }
            v6 = v55 + 128;
            goto LABEL_7;
          }
          v59 = (char *)*v120;
          v60 = (v55 - (_BYTE *)*v120) >> 7;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 57)
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          v62 = v54 - (_QWORD)v59;
          if (v62 >> 6 > v61)
            v61 = v62 >> 6;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFF80)
            v63 = 0x1FFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          if (v63)
          {
            if (v63 >> 57)
              std::__throw_bad_array_new_length[abi:fe180100]();
            v64 = (char *)operator new(v63 << 7);
          }
          else
          {
            v64 = 0;
          }
          v75 = (char ***)&v64[128 * v60];
          v76 = v133;
          *v75 = v132;
          v75[1] = (char **)v76;
          v77 = (char **)(v75 + 1);
          v78 = v134;
          v75[2] = v134;
          if (v78)
          {
            *((_QWORD *)v76 + 2) = v77;
            v132 = &v133;
            v133 = 0;
            v134 = 0;
          }
          else
          {
            *v75 = v77;
          }
          v79 = &v64[128 * v60];
          v80 = *(_OWORD *)v135;
          v82 = v136;
          v81 = v137;
          *((_QWORD *)v79 + 8) = v137;
          v83 = v79 + 64;
          *(_OWORD *)(v83 - 40) = v80;
          *(_OWORD *)(v83 - 28) = *(_OWORD *)&v135[12];
          *((_QWORD *)v83 - 1) = v82;
          v84 = v138;
          *((_QWORD *)v83 + 1) = v138;
          if (v84)
          {
            *((_QWORD *)v81 + 2) = v83;
            v136 = &v137;
            v137 = 0;
            v138 = 0;
          }
          else
          {
            *((_QWORD *)v83 - 1) = v83;
          }
          v85 = &v64[128 * v60];
          v87 = v139;
          v86 = v140;
          *((_QWORD *)v85 + 11) = v140;
          v88 = v85 + 88;
          *((_QWORD *)v88 - 1) = v87;
          v89 = v141;
          *((_QWORD *)v88 + 1) = v141;
          if (v89)
          {
            *((_QWORD *)v86 + 2) = v88;
            v139 = &v140;
            v140 = 0;
            v141 = 0;
          }
          else
          {
            *((_QWORD *)v88 - 1) = v88;
          }
          v90 = &v64[128 * v60];
          v92 = v142;
          v91 = v143;
          *((_QWORD *)v90 + 14) = v143;
          v93 = v90 + 112;
          *((_QWORD *)v93 - 1) = v92;
          v94 = v144;
          *((_QWORD *)v93 + 1) = v144;
          if (v94)
          {
            *((_QWORD *)v91 + 2) = v93;
            v142 = &v143;
            v143 = 0;
            v144 = 0;
          }
          else
          {
            *((_QWORD *)v93 - 1) = v93;
          }
          v95 = &v64[128 * v63];
          v6 = v75 + 16;
          if (v55 == v59)
          {
            *v120 = v75;
            v120[1] = v6;
            v120[2] = v95;
            if (v55)
              goto LABEL_171;
          }
          else
          {
            v96 = 0;
            do
            {
              v97 = &v75[v96 / 8];
              *(v97 - 16) = *(char ***)&v55[v96 - 128];
              v98 = &v55[v96 - 120];
              v99 = *(char ***)v98;
              v75[v96 / 8 - 15] = *(char ***)v98;
              v100 = (uint64_t)&v75[v96 / 8 - 15];
              v101 = *(char ***)&v55[v96 - 112];
              *(v97 - 14) = v101;
              if (v101)
              {
                v99[2] = (char *)v100;
                *(_QWORD *)&v55[v96 - 128] = v98;
                *(_QWORD *)v98 = 0;
                *(_QWORD *)&v55[v96 - 112] = 0;
              }
              else
              {
                *(v97 - 16) = (char **)v100;
              }
              v102 = &v75[v96 / 8];
              v103 = *(_OWORD *)&v55[v96 - 104];
              *(_OWORD *)((char *)v102 - 92) = *(_OWORD *)&v55[v96 - 92];
              *(_OWORD *)(v102 - 13) = v103;
              *(v102 - 9) = *(char ***)&v55[v96 - 72];
              v104 = &v55[v96 - 64];
              v105 = *(char ***)v104;
              v75[v96 / 8 - 8] = *(char ***)v104;
              v106 = (uint64_t)&v75[v96 / 8 - 8];
              v107 = *(char ***)&v55[v96 - 56];
              *(v102 - 7) = v107;
              if (v107)
              {
                v105[2] = (char *)v106;
                *(_QWORD *)&v55[v96 - 72] = v104;
                *(_QWORD *)v104 = 0;
                *(_QWORD *)&v55[v96 - 56] = 0;
              }
              else
              {
                *(v102 - 9) = (char **)v106;
              }
              v108 = &v75[v96 / 8];
              *(v108 - 6) = *(char ***)&v55[v96 - 48];
              v109 = &v55[v96 - 40];
              v110 = *(char ***)v109;
              v75[v96 / 8 - 5] = *(char ***)v109;
              v111 = (uint64_t)&v75[v96 / 8 - 5];
              v112 = *(char ***)&v55[v96 - 32];
              *(v108 - 4) = v112;
              if (v112)
              {
                v110[2] = (char *)v111;
                *(_QWORD *)&v55[v96 - 48] = v109;
                *(_QWORD *)v109 = 0;
                *(_QWORD *)&v55[v96 - 32] = 0;
              }
              else
              {
                *(v108 - 6) = (char **)v111;
              }
              v113 = &v75[v96 / 8];
              *(v113 - 3) = *(char ***)&v55[v96 - 24];
              v114 = &v55[v96 - 16];
              v115 = *(char ***)v114;
              v75[v96 / 8 - 2] = *(char ***)v114;
              v116 = (uint64_t)&v75[v96 / 8 - 2];
              v117 = *(char ***)&v55[v96 - 8];
              *(v113 - 1) = v117;
              if (v117)
              {
                v115[2] = (char *)v116;
                *(_QWORD *)&v55[v96 - 24] = v114;
                *(_QWORD *)v114 = 0;
                *(_QWORD *)&v55[v96 - 8] = 0;
              }
              else
              {
                *(v113 - 3) = (char **)v116;
              }
              v96 -= 128;
            }
            while (&v55[v96] != v59);
            v118 = (char *)*v120;
            v55 = (char *)v120[1];
            *v120 = &v75[v96 / 8];
            v120[1] = v6;
            v120[2] = v95;
            if (v55 != v118)
            {
              do
              {
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v55 - 2));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v55 - 5));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v55 - 8));
                std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*((char **)v55 - 15));
                v55 -= 128;
              }
              while (v55 != v118);
              v55 = v118;
            }
            if (!v55)
              goto LABEL_7;
LABEL_171:
            operator delete(v55);
          }
LABEL_7:
          v120[1] = v6;
          goto LABEL_8;
        }
      }
    }
  }
}

void sub_18CC98F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void (**a50)(_QWORD),uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters::~FieldFilters(&a34);
  if (a59)
  {
    if (*(_BYTE *)(v59 - 176))
    {
LABEL_3:
      if (*(_BYTE *)(v59 - 96))
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    (*a50)(&a50);
    if (*(_BYTE *)(v59 - 176))
      goto LABEL_3;
  }
  (**(void (***)(uint64_t))(v59 - 248))(v59 - 248);
  if (*(_BYTE *)(v59 - 96))
  {
LABEL_5:
    a34 = a18;
    std::vector<AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters>::__destroy_vector::operator()[abi:fe180100]((void ***)&a34);
    _Unwind_Resume(a1);
  }
LABEL_4:
  (**(void (***)(uint64_t))(v59 - 168))(v59 - 168);
  goto LABEL_5;
}

void std::set<std::string_view>::set[abi:fe180100]<char const* const*>()
{
  uint64_t (**v0)();
  _QWORD **v1;
  _QWORD *v2;
  uint64_t (*v3)();
  size_t v4;
  _QWORD **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  size_t v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  size_t v13;
  size_t v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  unint64_t v19;
  size_t v20;
  int v21;
  int v22;
  _QWORD *v23;

  qword_1EE060818 = 0;
  qword_1EE060810 = 0;
  v0 = (uint64_t (**)())_ZGRN7AMSCore20MetricsEventModifier12_GLOBAL__N_119AllowedFieldFiltersE_;
  v1 = (_QWORD **)&unk_1EE060000;
  do
  {
    v2 = operator new(0x30uLL);
    v3 = *v0;
    v2[4] = *v0;
    v4 = strlen((const char *)v3);
    v2[5] = v4;
    v5 = v1;
    v6 = v1[257];
    v8 = &qword_1EE060810;
    v7 = qword_1EE060810;
    if (v6 == &qword_1EE060810)
      goto LABEL_32;
    v9 = v4;
    v10 = qword_1EE060810;
    if (qword_1EE060810)
    {
      do
      {
        v8 = (uint64_t *)v10;
        v10 = *(_QWORD *)(v10 + 8);
      }
      while (v10);
    }
    else
    {
      v11 = &qword_1EE060810;
      do
      {
        v8 = (uint64_t *)v11[2];
        v12 = *v8 == (_QWORD)v11;
        v11 = v8;
      }
      while (v12);
    }
    v13 = v8[5];
    if (v4 >= v13)
      v14 = v8[5];
    else
      v14 = v4;
    v15 = memcmp((const void *)v8[4], v3, v14);
    if (!v15)
    {
      if (v13 < v9)
        goto LABEL_32;
LABEL_15:
      v16 = &qword_1EE060810;
      if (!v7)
      {
        v17 = &qword_1EE060810;
        goto LABEL_38;
      }
      while (1)
      {
        v17 = (uint64_t *)v7;
        v18 = *(const void **)(v7 + 32);
        v19 = v17[5];
        if (v19 >= v9)
          v20 = v9;
        else
          v20 = v17[5];
        v21 = memcmp(v3, v18, v20);
        if (v21)
        {
          if (v21 < 0)
            goto LABEL_17;
LABEL_25:
          v22 = memcmp(v18, v3, v20);
          if (v22)
          {
            if ((v22 & 0x80000000) == 0)
              goto LABEL_38;
          }
          else if (v19 >= v9)
          {
            goto LABEL_38;
          }
          v16 = v17 + 1;
          v7 = v17[1];
          if (!v7)
            goto LABEL_39;
        }
        else
        {
          if (v9 >= v19)
            goto LABEL_25;
LABEL_17:
          v7 = *v17;
          v16 = v17;
          if (!*v17)
            goto LABEL_39;
        }
      }
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_32:
    if (v7)
      v17 = v8;
    else
      v17 = &qword_1EE060810;
    if (v7)
      v16 = v8 + 1;
    else
      v16 = &qword_1EE060810;
LABEL_38:
    if (*v16)
    {
      operator delete(v2);
      v1 = v5;
    }
    else
    {
LABEL_39:
      *v2 = 0;
      v2[1] = 0;
      v2[2] = v17;
      *v16 = (uint64_t)v2;
      v1 = v5;
      v23 = (_QWORD *)*v5[257];
      if (v23)
      {
        v5[257] = v23;
        v2 = (_QWORD *)*v16;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EE060810, v2);
      ++qword_1EE060818;
    }
    ++v0;
  }
  while (v0 != off_1E253D1C0);
}

void sub_18CC99250(_Unwind_Exception *a1)
{
  std::__tree<std::string_view>::destroy((_QWORD *)qword_1EE060810);
  _Unwind_Resume(a1);
}

void AMSCore::MetricsEventModifier::`anonymous namespace'::getOverridesForFieldFilters(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void (**v4)(_QWORD *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(_QWORD *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD *);
  uint64_t v13;
  uint64_t v14;
  std::runtime_error_vtbl *v15;
  uint64_t v16;
  std::runtime_error_vtbl *v17;
  unsigned int *v18;
  std::runtime_error_vtbl *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  size_t v34;
  size_t v35;
  int v36;
  int v37;
  _OWORD *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  double v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  std::runtime_error v60;
  __int128 v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  char v66;
  void *__p[3];
  __int128 v68;
  _QWORD v69[9];
  char v70;
  std::runtime_error v71;
  __int128 v72;
  uint64_t *v73;
  _QWORD v74[2];
  __int128 v75;
  char v76;
  _BYTE v77[24];
  int v78;
  _QWORD v79[9];
  char v80;
  _BYTE v81[28];
  char **v82;
  char *v83;
  uint64_t v84;
  char **v85;
  char *v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD v91[4];

  v2 = a2;
  v91[2] = *MEMORY[0x1E0C80C00];
  v81[0] = 0;
  v81[16] = 0;
  *(_DWORD *)&v81[24] = 0;
  v82 = &v83;
  v83 = 0;
  v86 = 0;
  v87 = 0;
  v84 = 0;
  v85 = &v86;
  v89 = 0;
  v90 = 0;
  v88 = &v89;
  AMSCore::getValueByKey((uint64_t)v79, a2, "blacklistedEvents", 0x11uLL);
  v57 = a1;
  v4 = (void (**)(_QWORD *))v79[0];
  if (!v80)
    goto LABEL_13;
  if (*(_DWORD *)(v79[0] + 24) == 9)
  {
    v6 = *(_QWORD *)v79[0];
    v5 = *(_QWORD *)(v79[0] + 8);
    if (*(_QWORD *)v79[0] != v5)
    {
      do
      {
        LOBYTE(v71.__vftable) = 0;
        DWORD2(v72) = -1;
        v7 = *(unsigned int *)(v6 + 24);
        if ((_DWORD)v7 != -1)
        {
          ((void (*)(void **, std::runtime_error *, uint64_t))off_1E253D1E0[v7])(__p, &v71, v6);
          DWORD2(v72) = v7;
          if (v7 != 5
            || (std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v85, (const void **)&v71.__vftable, (uint64_t)&v71), v7 = DWORD2(v72), DWORD2(v72) != -1))
          {
            ((void (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[v7])(&v60, &v71);
          }
        }
        v6 += 32;
      }
      while (v6 != v5);
      if (!v80)
      {
        v4 = (void (**)(_QWORD *))v79[0];
LABEL_13:
        (*v4)(v79);
      }
    }
  }
  AMSCore::getValueByKey((uint64_t)v79, v2, "blacklistedFields", 0x11uLL);
  v8 = (void (**)(_QWORD *))v79[0];
  if (v80)
  {
    if (*(_DWORD *)(v79[0] + 24) != 9)
      goto LABEL_27;
    v10 = *(_QWORD *)v79[0];
    v9 = *(_QWORD *)(v79[0] + 8);
    if (*(_QWORD *)v79[0] == v9)
      goto LABEL_27;
    do
    {
      LOBYTE(v71.__vftable) = 0;
      DWORD2(v72) = -1;
      v11 = *(unsigned int *)(v10 + 24);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(void **, std::runtime_error *, uint64_t))off_1E253D1E0[v11])(__p, &v71, v10);
        DWORD2(v72) = v11;
        if (v11 != 5
          || (std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v82, (const void **)&v71.__vftable, (uint64_t)&v71), v11 = DWORD2(v72), DWORD2(v72) != -1))
        {
          ((void (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[v11])(&v60, &v71);
        }
      }
      v10 += 32;
    }
    while (v10 != v9);
    if (v80)
      goto LABEL_27;
    v8 = (void (**)(_QWORD *))v79[0];
  }
  (*v8)(v79);
LABEL_27:
  AMSCore::getValueByKey((uint64_t)v79, v2, "deResFields", 0xBuLL);
  v12 = (void (**)(_QWORD *))v79[0];
  if (!v80)
    goto LABEL_92;
  if (*(_DWORD *)(v79[0] + 24) != 9)
    goto LABEL_93;
  v13 = *(_QWORD *)v79[0];
  v14 = *(_QWORD *)(v79[0] + 8);
  if (*(_QWORD *)v79[0] == v14)
    goto LABEL_93;
  v15 = (std::runtime_error_vtbl *)off_1E2521330;
  v58 = *(_QWORD *)(v79[0] + 8);
  v59 = v2;
  do
  {
    v77[0] = 0;
    v78 = -1;
    v16 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v16 == -1
      || (((void (*)(std::runtime_error *, _BYTE *, uint64_t))off_1E253D1E0[v16])(&v60, v77, v13),
          v78 = v16,
          (_DWORD)v16 != 8))
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v60, 4u, "any doesn't contain expected type");
      std::runtime_error::runtime_error(&v71, &v60);
      v72 = v61;
      v18 = (unsigned int *)v63;
      v71.__vftable = v15;
      v73 = v62;
      v74[0] = v63;
      v74[1] = v64;
      if (v64)
      {
        *(_QWORD *)(v63 + 16) = v74;
        v18 = 0;
        v62 = &v63;
        v63 = 0;
        v64 = 0;
      }
      else
      {
        v73 = v74;
      }
      v75 = v65;
      v65 = 0uLL;
      v76 = 0;
      v60.__vftable = v15;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, v18);
      MEMORY[0x18D7898AC](&v60);
      if (!v76)
        goto LABEL_84;
      v17 = v71.__vftable;
    }
    else
    {
      v17 = (std::runtime_error_vtbl *)v77;
      v71.__vftable = (std::runtime_error_vtbl *)v77;
      v76 = 1;
    }
    AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>((uint64_t)v69, (uint64_t)v17, "fieldName", 9uLL);
    if (!v70)
    {
      (*(void (**)(_QWORD *))v69[0])(v69);
      if (!v76)
        goto LABEL_84;
      goto LABEL_85;
    }
    v19 = v15;
    v20 = v69[0];
    v21 = *(void **)v69[0];
    v91[0] = *(_QWORD *)(v69[0] + 8);
    *(_QWORD *)((char *)v91 + 7) = *(_QWORD *)(v69[0] + 15);
    v22 = (void *)*(unsigned __int8 *)(v69[0] + 23);
    *(_QWORD *)v69[0] = 0;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    if (!v70)
      (*(void (**)(_QWORD *))v69[0])(v69);
    v23 = (char)v22;
    __p[0] = v21;
    __p[1] = (void *)v91[0];
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v91 + 7);
    HIBYTE(__p[2]) = (_BYTE)v22;
    v91[0] = 0;
    *(_QWORD *)((char *)v91 + 7) = 0;
    v68 = xmmword_18CF51BE0;
    if (!v76)
LABEL_140:
      __break(1u);
    AMSCore::getValueAs<long long,std::map<std::string,AMSCore::Any>>((uint64_t)&v60, (uint64_t)v71.__vftable, "magnitude", 9uLL);
    if (v66)
    {
      *(_QWORD *)&v68 = v60.__vftable;
      if (!v76)
        goto LABEL_140;
    }
    else
    {
      ((void (*)(std::runtime_error *))v60.~runtime_error)(&v60);
      if (!v76)
        goto LABEL_140;
    }
    AMSCore::getValueAs<long long,std::map<std::string,AMSCore::Any>>((uint64_t)&v60, (uint64_t)v71.__vftable, "significantDigits", 0x11uLL);
    if (v66)
      *((_QWORD *)&v68 + 1) = v60.__vftable;
    else
      ((void (*)(std::runtime_error *))v60.~runtime_error)(&v60);
    v24 = v89;
    v25 = &v89;
    v26 = &v89;
    if (v89)
    {
      if ((char)v22 >= 0)
        v27 = __p;
      else
        v27 = (void **)v21;
      if ((char)v22 >= 0)
        v28 = v22;
      else
        v28 = __p[1];
      while (1)
      {
        v25 = (uint64_t **)v24;
        v31 = v24[4];
        v29 = v24 + 4;
        v30 = (uint64_t *)v31;
        v32 = *((char *)v29 + 23);
        if (v32 >= 0)
          v33 = v29;
        else
          v33 = v30;
        if (v32 >= 0)
          v34 = *((unsigned __int8 *)v29 + 23);
        else
          v34 = v29[1];
        if (v34 >= (unint64_t)v28)
          v35 = (size_t)v28;
        else
          v35 = v34;
        v36 = memcmp(v27, v33, v35);
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_60;
LABEL_74:
          v37 = memcmp(v33, v27, v35);
          if (v37)
          {
            if ((v37 & 0x80000000) == 0)
              goto LABEL_87;
          }
          else if (v34 >= (unint64_t)v28)
          {
LABEL_87:
            v14 = v58;
            v2 = v59;
            v15 = v19;
            if (v23 < 0)
              goto LABEL_88;
LABEL_83:
            if (!v76)
              goto LABEL_84;
            goto LABEL_85;
          }
          v24 = v25[1];
          if (!v24)
          {
            v26 = v25 + 1;
            break;
          }
        }
        else
        {
          if ((unint64_t)v28 >= v34)
            goto LABEL_74;
LABEL_60:
          v24 = *v25;
          v26 = v25;
          if (!*v25)
            break;
        }
      }
    }
    v38 = operator new(0x48uLL);
    v38[2] = *(_OWORD *)__p;
    *((void **)v38 + 6) = __p[2];
    memset(__p, 0, sizeof(__p));
    *(_OWORD *)((char *)v38 + 56) = v68;
    *(_QWORD *)v38 = 0;
    *((_QWORD *)v38 + 1) = 0;
    *((_QWORD *)v38 + 2) = v25;
    *v26 = (uint64_t *)v38;
    v14 = v58;
    v2 = v59;
    v15 = v19;
    if (*v88)
    {
      v88 = (uint64_t **)*v88;
      v38 = *v26;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v89, (uint64_t *)v38);
    ++v90;
    if ((HIBYTE(__p[2]) & 0x80) == 0)
      goto LABEL_83;
LABEL_88:
    operator delete(__p[0]);
    if (!v76)
LABEL_84:
      ((void (*)(std::runtime_error *))v71.~runtime_error)(&v71);
LABEL_85:
    if (v78 != -1)
      ((void (*)(std::runtime_error *, _BYTE *))off_1E253D240[v78])(&v71, v77);
    v13 += 32;
  }
  while (v13 != v14);
  if (!v80)
  {
    v12 = (void (**)(_QWORD *))v79[0];
LABEL_92:
    (*v12)(v79);
  }
LABEL_93:
  AMSCore::getValueByKey((uint64_t)v79, v2, "disabled", 8uLL);
  if (v80)
  {
    if (*(_DWORD *)(v79[0] + 24) == 1)
      *(_WORD *)&v81[26] = *(unsigned __int8 *)v79[0] | 0x100;
  }
  else
  {
    (*(void (**)(_QWORD *))v79[0])(v79);
  }
  AMSCore::getValueByKey((uint64_t)v79, v2, "sendDisabled", 0xCuLL);
  if (v80)
  {
    if (*(_DWORD *)(v79[0] + 24) == 1)
      *(_WORD *)&v81[24] = *(unsigned __int8 *)v79[0] | 0x100;
  }
  else
  {
    (*(void (**)(_QWORD *))v79[0])(v79);
  }
  AMSCore::getValueByKey((uint64_t)v79, v2, "sampling/duration", 0x11uLL);
  AMSCore::getValueByKey((uint64_t)&v71, v2, "sampling/percentage", 0x13uLL);
  if (v80 && v76)
  {
    v39 = 0;
    LOBYTE(v40) = 0;
    v41 = *(_DWORD *)(v79[0] + 24);
    if (v41 == -1)
      v41 = 0;
    v43 = v41 - 1;
    v42 = 0;
    switch(v43)
    {
      case 0:
        v39 = 0;
        LOBYTE(v40) = *(_BYTE *)v79[0];
        v42 = 1;
        break;
      case 1:
        v40 = (uint64_t)*(double *)v79[0];
        goto LABEL_110;
      case 2:
      case 3:
        v40 = *(_QWORD *)v79[0];
        goto LABEL_110;
      case 4:
      case 5:
        break;
      case 6:
        v40 = *(_QWORD *)v79[0] / 1000;
LABEL_110:
        v39 = v40 & 0xFFFFFFFFFFFFFF00;
        v42 = 1;
        break;
      default:
        v42 = 0;
        break;
    }
    v44 = (int)v71.__vftable[1].~runtime_error;
    if (v44 == -1)
      v44 = 0;
    switch(v44)
    {
      case 1:
        v45 = 0.0;
        if (LOBYTE(v71.~runtime_error))
          v45 = 1.0;
        if (v42)
          goto LABEL_123;
        break;
      case 2:
        v45 = *(double *)&v71.~runtime_error;
        if (v42)
          goto LABEL_123;
        break;
      case 3:
        v45 = (double)(uint64_t)v71.~runtime_error;
        if (v42)
          goto LABEL_123;
        break;
      case 4:
        v45 = (double)(unint64_t)v71.~runtime_error;
        if (v42)
        {
LABEL_123:
          *(_QWORD *)v81 = v39 | v40;
          *(double *)&v81[8] = v45;
          if (!v81[16])
            v81[16] = 1;
        }
        break;
      default:
        break;
    }
  }
  *(_OWORD *)v57 = *(_OWORD *)v81;
  *(_OWORD *)(v57 + 12) = *(_OWORD *)&v81[12];
  v46 = v83;
  *(_QWORD *)(v57 + 32) = v82;
  *(_QWORD *)(v57 + 40) = v46;
  v47 = v57 + 40;
  v48 = v84;
  *(_QWORD *)(v57 + 48) = v84;
  if (v48)
  {
    *((_QWORD *)v46 + 2) = v47;
    v82 = &v83;
    v83 = 0;
    v84 = 0;
  }
  else
  {
    *(_QWORD *)(v57 + 32) = v47;
  }
  v50 = (uint64_t *)v85;
  v49 = v86;
  *(_QWORD *)(v57 + 64) = v86;
  v51 = v57 + 64;
  *(_QWORD *)(v57 + 56) = v50;
  v52 = v87;
  *(_QWORD *)(v57 + 72) = v87;
  if (v52)
  {
    *((_QWORD *)v49 + 2) = v51;
    v85 = &v86;
    v86 = 0;
    v87 = 0;
  }
  else
  {
    *(_QWORD *)(v57 + 56) = v51;
  }
  v54 = v88;
  v53 = v89;
  *(_QWORD *)(v57 + 88) = v89;
  v55 = v57 + 88;
  *(_QWORD *)(v57 + 80) = v54;
  v56 = v90;
  *(_QWORD *)(v57 + 96) = v90;
  if (v56)
  {
    v53[2] = v55;
    v88 = &v89;
    v89 = 0;
    v90 = 0;
  }
  else
  {
    *(_QWORD *)(v57 + 80) = v55;
  }
  *(_BYTE *)(v57 + 104) = 1;
  if (!v76)
  {
    ((void (*)(std::runtime_error *))v71.~runtime_error)(&v71);
    if (v80)
      goto LABEL_136;
LABEL_138:
    (*(void (**)(_QWORD *))v79[0])(v79);
    goto LABEL_136;
  }
  if (!v80)
    goto LABEL_138;
LABEL_136:
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v89);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v86);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v83);
}

void sub_18CC99C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void (**a66)(_QWORD);
  uint64_t v66;

  if (!LOBYTE(STACK[0x210]))
    (*a66)(&a66);
  AMSCore::MetricsEventModifier::EventModifierForFieldFilters::~EventModifierForFieldFilters((char **)(v66 - 216));
  _Unwind_Resume(a1);
}

void AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters::~FieldFilters(char **this)
{
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(this[14]);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(this[11]);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(this[8]);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(this[1]);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  uint64_t *result;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t *v22;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    result = (uint64_t *)memcmp(v15, v8, v17);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v16 >= v9)
    {
      return result;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  v20 = operator new(0x38uLL);
  v20[2] = *(_OWORD *)a3;
  *((_QWORD *)v20 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = v10;
  *v6 = (uint64_t *)v20;
  v21 = (uint64_t *)**a1;
  if (v21)
  {
    *a1 = v21;
    v22 = *v6;
  }
  else
  {
    v22 = (uint64_t *)v20;
  }
  result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void AMSCore::MetricsEventModifier::EventModifierForFieldFilters::~EventModifierForFieldFilters(char **this)
{
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(this[11]);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(this[8]);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(this[5]);
}

void std::__tree<std::string_view>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::string_view>::destroy(*a1);
    std::__tree<std::string_view>::destroy(a1[1]);
    operator delete(a1);
  }
}

void AMSCore::MetricsEventModifier::MetricsConfig::buildTopicOverrides(uint64_t **a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  AMSCore::MetricsEventModifier::EventModifierForFieldFilters *v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t **v29;
  uint64_t v30[2];
  char v31;
  char v32;
  char v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _BYTE v42[152];
  char v43;
  char v44;

  a1[1] = 0;
  a1[2] = 0;
  v29 = a1 + 1;
  *a1 = (uint64_t *)(a1 + 1);
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    while (1)
    {
      if (*((_DWORD *)v3 + 20) != 8)
        goto LABEL_56;
      if (v44)
      {
        if (v31 || v32 || v41 || v43 || v33 || v35 || v37 || v39)
        {
          v5 = v29;
          v6 = *v29;
          v7 = v29;
          if (*v29)
          {
            v8 = *((char *)v3 + 55);
            if (v8 >= 0)
              v9 = v3 + 4;
            else
              v9 = (const void *)v3[4];
            if (v8 >= 0)
              v10 = *((unsigned __int8 *)v3 + 55);
            else
              v10 = v3[5];
            while (1)
            {
              v5 = (uint64_t **)v6;
              v13 = (const void *)v6[4];
              v11 = v6 + 4;
              v12 = v13;
              v14 = *((char *)v11 + 23);
              if (v14 >= 0)
                v15 = v11;
              else
                v15 = v12;
              if (v14 >= 0)
                v16 = *((unsigned __int8 *)v11 + 23);
              else
                v16 = v11[1];
              if (v16 >= v10)
                v17 = v10;
              else
                v17 = v16;
              v18 = memcmp(v9, v15, v17);
              if (v18)
              {
                if (v18 < 0)
                  goto LABEL_21;
LABEL_35:
                v19 = memcmp(v15, v9, v17);
                if (v19)
                {
                  if ((v19 & 0x80000000) == 0)
                    goto LABEL_47;
                }
                else if (v16 >= v10)
                {
LABEL_47:
                  v21 = (char *)v5;
                  goto LABEL_48;
                }
                v6 = v5[1];
                if (!v6)
                {
                  v7 = v5 + 1;
                  break;
                }
              }
              else
              {
                if (v10 >= v16)
                  goto LABEL_35;
LABEL_21:
                v6 = *v5;
                v7 = v5;
                if (!*v5)
                  break;
              }
            }
          }
          v21 = (char *)operator new(0x150uLL);
          v22 = (std::string *)(v21 + 32);
          if (*((char *)v3 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)v3[4], v3[5]);
          }
          else
          {
            v23 = *((_OWORD *)v3 + 2);
            *((_QWORD *)v21 + 6) = v3[6];
            *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
          }
          *((_QWORD *)v21 + 41) = 0;
          *(_OWORD *)(v21 + 248) = 0u;
          *(_OWORD *)(v21 + 232) = 0u;
          *(_OWORD *)(v21 + 216) = 0u;
          *(_OWORD *)(v21 + 200) = 0u;
          *(_OWORD *)(v21 + 184) = 0u;
          *(_OWORD *)(v21 + 168) = 0u;
          *(_OWORD *)(v21 + 152) = 0u;
          *(_OWORD *)(v21 + 136) = 0u;
          *(_OWORD *)(v21 + 104) = 0u;
          *(_OWORD *)(v21 + 88) = 0u;
          *(_OWORD *)(v21 + 56) = 0u;
          *(_OWORD *)(v21 + 72) = 0u;
          *(_OWORD *)(v21 + 296) = 0u;
          *(_OWORD *)(v21 + 312) = 0u;
          *(_OWORD *)(v21 + 280) = 0u;
          *(_OWORD *)(v21 + 264) = 0u;
          *(_OWORD *)(v21 + 120) = 0u;
          *((_QWORD *)v21 + 11) = v21 + 96;
          *((_QWORD *)v21 + 15) = 0;
          *((_QWORD *)v21 + 14) = v21 + 120;
          *((_QWORD *)v21 + 19) = 0;
          *((_QWORD *)v21 + 18) = 0;
          *((_QWORD *)v21 + 16) = 0;
          *((_QWORD *)v21 + 17) = v21 + 144;
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v21 + 1) = 0;
          *((_QWORD *)v21 + 2) = v5;
          *v7 = (uint64_t *)v21;
          v24 = (uint64_t *)v21;
          v25 = (uint64_t *)**a1;
          if (v25)
          {
            *a1 = v25;
            v24 = *v7;
          }
          std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v24);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_48:
          if (v41)
          {
            *((_QWORD *)v21 + 20) = v40;
            v21[168] = v41;
          }
          if (v43)
            std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>((uint64_t)(v21 + 176), (AMSCore::URL *)v42);
        }
        if (v44)
          break;
      }
      (*(void (**)(uint64_t *))v30[0])(v30);
      v26 = (_QWORD *)v3[1];
      if (v26)
      {
        do
        {
LABEL_59:
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
        goto LABEL_3;
      }
      do
      {
LABEL_61:
        v27 = (_QWORD *)v3[2];
        v28 = *v27 == (_QWORD)v3;
        v3 = v27;
      }
      while (!v28);
LABEL_3:
      v3 = v27;
      if (v27 == v2)
        return;
    }
    if (v43)
      AMSCore::URL::~URL((AMSCore::URL *)v42);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v38);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v36);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v34);
LABEL_56:
    v26 = (_QWORD *)v3[1];
    if (v26)
      goto LABEL_59;
    goto LABEL_61;
  }
}

void sub_18CC9A2F4(_Unwind_Exception *a1, uint64_t a2, char **a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,void *>>>::operator()[abi:fe180100](0, v4);
  std::expected<AMSCore::MetricsEventModifier::EventModifier,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(*a3);
  _Unwind_Resume(a1);
}

void AMSCore::MetricsEventModifier::`anonymous namespace'::getOverrides(uint64_t a1, uint64_t *a2)
{
  std::runtime_error_vtbl *v4;
  int v5;
  std::runtime_error_vtbl *v6;
  unint64_t what_high;
  std::runtime_error_vtbl *v8;
  int v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  __int128 *v18;
  std::runtime_error v19;
  uint64_t v20;
  std::runtime_error_vtbl *v21;
  int v22;
  __int128 *v23;
  uint64_t *v24;
  std::runtime_error_vtbl *v25;
  uint64_t v26;
  std::runtime_error_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  std::runtime_error v37;
  _BYTE *v38;
  uint64_t *v39;
  std::runtime_error_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _BYTE v57[32];
  __int128 *v58;
  _BYTE v59[32];
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  std::runtime_error v63;
  std::runtime_error v64;
  __int128 *v65;
  _BYTE v66[24];
  uint64_t v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  int v72;
  std::runtime_error_vtbl *v73;
  uint64_t *v74;
  _BYTE *v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  std::runtime_error v79;
  std::runtime_error v80;
  __int128 *v81;
  __int128 v82;
  __int128 v83;
  std::runtime_error v84[2];
  __int128 *v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  char v91;
  unsigned __int8 v92;
  std::runtime_error v93;
  std::runtime_error v94;
  __int128 *v95;
  __int128 v96;
  __int128 v97;
  unsigned __int8 v98;
  std::runtime_error v99;
  std::runtime_error v100;
  __int128 *v101;
  __int128 v102;
  __int128 v103;
  std::runtime_error v104;
  std::runtime_error v105;
  __int128 *v106;
  _BYTE v107[32];
  char v108;
  __int128 v109;
  uint64_t v110;
  char v111;
  int imp;
  std::runtime_error_vtbl *v113;
  uint64_t *v114;
  __int128 *v115;
  __int128 v116;
  uint64_t v117;
  unsigned __int8 v118;
  char v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v57[0] = 0;
  v57[8] = 0;
  v57[16] = 0;
  LOBYTE(v67) = 0;
  AMSCore::getValueByKey((uint64_t)&v93, a2, "metricsUrl", 0xAuLL);
  v4 = v93.__vftable;
  if (!v98)
  {
LABEL_22:
    ((void (*)(std::runtime_error *))v4->~runtime_error)(&v93);
    goto LABEL_23;
  }
  v5 = (int)v93.__vftable[1].~runtime_error;
  if (v5 == 5)
    v6 = v93.__vftable;
  else
    v6 = 0;
  if (v5 == 5)
  {
    if (SHIBYTE(v6->what) < 0)
    {
      v8 = v6;
      v6 = (std::runtime_error_vtbl *)v6->~runtime_error;
      what_high = (unint64_t)v8->~runtime_error_0;
    }
    else
    {
      what_high = HIBYTE(v6->what);
    }
    AMSCore::URL::parse((uint64_t)v6, what_high, (uint64_t)v84);
    v9 = v92;
    if (v92)
    {
      AMSCore::URL::URL((std::string *)&v57[16], (const AMSCore::URL *)v84);
      LOBYTE(v67) = 1;
    }
    else
    {
      AMSCore::Error::Error(&v99, v84);
      std::runtime_error::runtime_error(&v79, &v99);
      v80 = v100;
      v79.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v10 = (unsigned int *)v102;
      v81 = v101;
      v82 = v102;
      if (*((_QWORD *)&v102 + 1))
      {
        *(_QWORD *)(v102 + 16) = &v82;
        v101 = &v102;
        v102 = 0uLL;
        v10 = 0;
      }
      else
      {
        v81 = &v82;
      }
      v83 = v103;
      v103 = 0uLL;
      v99.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v101, v10);
      MEMORY[0x18D7898AC](&v99);
      std::runtime_error::runtime_error(&v104, &v79);
      v105 = v80;
      v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v11 = (unsigned int *)v82;
      v106 = v81;
      *(_OWORD *)v107 = v82;
      if (*((_QWORD *)&v82 + 1))
      {
        *(_QWORD *)(v82 + 16) = v107;
        v11 = 0;
        v81 = &v82;
        v82 = 0uLL;
      }
      else
      {
        v106 = (__int128 *)v107;
      }
      *(_OWORD *)&v107[16] = v83;
      v83 = 0uLL;
      v119 = 0;
      v79.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v81, v11);
      MEMORY[0x18D7898AC](&v79);
    }
    if (v92)
    {
      AMSCore::URL::~URL((AMSCore::URL *)v84);
      v12 = v98;
      if (v9)
      {
LABEL_20:
        if (v12)
          goto LABEL_23;
        v4 = v93.__vftable;
        goto LABEL_22;
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v84[0].~runtime_error)(v84);
      v12 = v98;
      if (v9)
        goto LABEL_20;
    }
    if (!v12)
      ((void (*)(std::runtime_error *))v93.~runtime_error)(&v93);
    if ((_BYTE)v67)
      goto LABEL_52;
    goto LABEL_53;
  }
LABEL_23:
  AMSCore::getValueByKey((uint64_t)v84, a2, "postFrequency", 0xDuLL);
  if ((_BYTE)v88)
  {
    v13 = (int)v84[0].__vftable[1].~runtime_error;
    if (v13 == -1)
      v13 = 0;
    switch(v13)
    {
      case 1:
        v15 = 0;
        LOBYTE(v14) = v84[0].~runtime_error;
        goto LABEL_38;
      case 2:
        v14 = (uint64_t)v84[0].~runtime_error;
        goto LABEL_37;
      case 3:
      case 4:
        v14 = (uint64_t)v84[0].~runtime_error;
        goto LABEL_37;
      case 7:
        v14 = (uint64_t)v84[0].~runtime_error / 1000;
LABEL_37:
        v15 = v14 & 0xFFFFFFFFFFFFFF00;
LABEL_38:
        v16 = v15 | v14;
        if (!v57[8])
          v57[8] = 1;
        *(_QWORD *)v57 = v16;
        break;
      default:
        break;
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v84[0].~runtime_error)(v84);
  }
  v104 = *(std::runtime_error *)v57;
  LOBYTE(v105.__vftable) = 0;
  v118 = 0;
  v17 = v67;
  if ((_BYTE)v67)
  {
    v107[0] = 0;
    if (v59[0])
    {
      v105 = *(std::runtime_error *)&v57[16];
      v106 = v58;
      v58 = 0;
      *(_OWORD *)&v57[16] = 0uLL;
      v107[0] = 1;
    }
    v107[8] = 0;
    v108 = 0;
    if ((_BYTE)v60)
    {
      *(_OWORD *)&v107[8] = *(_OWORD *)&v59[8];
      *(_QWORD *)&v107[24] = *(_QWORD *)&v59[24];
      memset(&v59[8], 0, 24);
      v108 = 1;
    }
    LOBYTE(v109) = 0;
    v111 = 0;
    if (LOBYTE(v63.__vftable))
    {
      v109 = v61;
      v110 = v62;
      v62 = 0;
      v61 = 0uLL;
      v111 = 1;
    }
    imp = (int)v63.__imp_.__imp_;
    v113 = (std::runtime_error_vtbl *)&v113;
    v114 = (uint64_t *)&v113;
    v115 = 0;
    v18 = v65;
    if (v65)
    {
      v19 = v64;
      v20 = *(_QWORD *)v64.__imp_.__imp_;
      *(_QWORD *)(v20 + 8) = v64.~runtime_error_0;
      *(_QWORD *)v19.~runtime_error_0 = v20;
      v21 = v113;
      v113->~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))v19.__imp_.__imp_;
      *(_QWORD *)v19.__imp_.__imp_ = v21;
      v113 = v19.__vftable;
      v19.~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))&v113;
      v115 = v18;
      v65 = 0;
    }
    v116 = *(_OWORD *)v66;
    v117 = *(_QWORD *)&v66[16];
    memset(v66, 0, sizeof(v66));
    v118 = 1;
  }
  v119 = 1;
  if (v17)
LABEL_52:
    AMSCore::URL::~URL((AMSCore::URL *)&v57[16]);
LABEL_53:
  if (!v119)
  {
    std::runtime_error::runtime_error((std::runtime_error *)v57, &v104);
    *(std::runtime_error *)&v57[16] = v105;
    *(_QWORD *)v57 = off_1E2521330;
    v58 = v106;
    *(_OWORD *)v59 = *(_OWORD *)v107;
    if (*(_QWORD *)&v107[8])
    {
      *(_QWORD *)(*(_QWORD *)v107 + 16) = v59;
      v106 = (__int128 *)v107;
      *(_OWORD *)v107 = 0uLL;
    }
    else
    {
      v58 = (__int128 *)v59;
    }
    *(_OWORD *)&v59[16] = *(_OWORD *)&v107[16];
    *(_OWORD *)&v107[16] = 0uLL;
    LOBYTE(v60) = 1;
    std::runtime_error::runtime_error(v84, (const std::runtime_error *)v57);
    v84[1] = *(std::runtime_error *)&v57[16];
    v84[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v85 = v58;
    v86 = *(_OWORD *)v59;
    if (*(_QWORD *)&v59[8])
    {
      *(_QWORD *)(*(_QWORD *)v59 + 16) = &v86;
      v58 = (__int128 *)v59;
      *(_OWORD *)v59 = 0uLL;
    }
    else
    {
      v85 = &v86;
    }
    v87 = *(_OWORD *)&v59[16];
    *(_OWORD *)&v59[16] = 0uLL;
    std::runtime_error::runtime_error(&v93, v84);
    v94 = v84[1];
    v43 = (unsigned int *)v86;
    v93.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v95 = v85;
    v96 = v86;
    if (*((_QWORD *)&v86 + 1))
    {
      *(_QWORD *)(v86 + 16) = &v96;
      v43 = 0;
      v85 = &v86;
      v86 = 0uLL;
    }
    else
    {
      v95 = &v96;
    }
    v97 = v87;
    v87 = 0uLL;
    v84[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v85, v43);
    MEMORY[0x18D7898AC](v84);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v93);
    *(std::runtime_error *)(a1 + 16) = v94;
    *(_QWORD *)a1 = off_1E2521330;
    v44 = v96;
    *(_QWORD *)(a1 + 32) = v95;
    *(_QWORD *)(a1 + 40) = v44;
    v45 = a1 + 40;
    v46 = *((_QWORD *)&v96 + 1);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)&v96 + 1);
    if (v46)
    {
      *(_QWORD *)(v44 + 16) = v45;
      v44 = 0;
      v95 = &v96;
      v96 = 0uLL;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v45;
    }
    *(_OWORD *)(a1 + 56) = v97;
    v97 = 0uLL;
    *(_BYTE *)(a1 + 280) = 0;
    v93.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v95, (unsigned int *)v44);
    MEMORY[0x18D7898AC](&v93);
    if ((_BYTE)v60)
    {
      *(_QWORD *)v57 = off_1E2521330;
      v47 = *(std::__shared_weak_count **)&v59[24];
      if (*(_QWORD *)&v59[24])
      {
        v48 = (unint64_t *)(*(_QWORD *)&v59[24] + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v58, *(unsigned int **)v59);
      MEMORY[0x18D7898AC](v57);
      if (v119)
        goto LABEL_139;
      goto LABEL_142;
    }
LABEL_138:
    if (v119)
      goto LABEL_139;
LABEL_142:
    ((void (*)(std::runtime_error *))v104.~runtime_error)(&v104);
    return;
  }
  if (v91)
  {
    *(std::runtime_error *)v57 = v84[0];
    *(std::runtime_error *)&v57[12] = *(std::runtime_error *)((char *)&v84[0].__imp_.__imp_ + 4);
    v58 = v85;
    *(_OWORD *)v59 = v86;
    if (*((_QWORD *)&v86 + 1))
    {
      *(_QWORD *)(v86 + 16) = v59;
      v85 = &v86;
      v86 = 0uLL;
    }
    else
    {
      v58 = (__int128 *)v59;
    }
    *(_OWORD *)&v59[16] = v87;
    v60 = v88;
    if (v88)
    {
      *(_QWORD *)(*((_QWORD *)&v87 + 1) + 16) = &v59[24];
      *(_QWORD *)&v87 = (char *)&v87 + 8;
      *((_QWORD *)&v87 + 1) = 0;
      v88 = 0;
    }
    else
    {
      *(_QWORD *)&v59[16] = &v59[24];
    }
    v61 = v89;
    v62 = v90;
    if (v90)
    {
      *(_QWORD *)(*((_QWORD *)&v89 + 1) + 16) = (char *)&v61 + 8;
      *(_QWORD *)&v89 = (char *)&v89 + 8;
      *((_QWORD *)&v89 + 1) = 0;
      v90 = 0;
      if (!v119)
        goto LABEL_144;
    }
    else
    {
      *(_QWORD *)&v61 = (char *)&v61 + 8;
      if (!v119)
        goto LABEL_144;
    }
    v63 = v104;
    LOBYTE(v64.__vftable) = 0;
    v78 = 0;
    v22 = v118;
    if (v118)
    {
      v66[0] = 0;
      if (v107[0])
      {
        v64 = v105;
        v65 = v106;
        v106 = 0;
        v105 = (std::runtime_error)0;
        v66[0] = 1;
      }
      v66[8] = 0;
      v68 = 0;
      if (v108)
      {
        *(_OWORD *)&v66[8] = *(_OWORD *)&v107[8];
        v67 = *(_QWORD *)&v107[24];
        memset(&v107[8], 0, 24);
        v68 = 1;
      }
      LOBYTE(v69) = 0;
      v71 = 0;
      if (v111)
      {
        v69 = v109;
        v70 = v110;
        v110 = 0;
        v109 = 0uLL;
        v71 = 1;
      }
      v72 = imp;
      v73 = (std::runtime_error_vtbl *)&v73;
      v74 = (uint64_t *)&v73;
      v75 = 0;
      v23 = v115;
      if (v115)
      {
        v24 = v114;
        v25 = v113;
        v26 = *v114;
        *(_QWORD *)(v26 + 8) = v113->~runtime_error_0;
        *(_QWORD *)v25->~runtime_error_0 = v26;
        v27 = v73;
        v73->~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))v24;
        *v24 = (uint64_t)v27;
        v73 = v25;
        v25->~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))&v73;
        v75 = v23;
        v115 = 0;
      }
      v76 = v116;
      v77 = v117;
      v117 = 0;
      v116 = 0uLL;
      v78 = 1;
    }
    *(_OWORD *)a1 = *(_OWORD *)v57;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)&v57[12];
    v28 = *(_QWORD *)v59;
    *(_QWORD *)(a1 + 32) = v58;
    *(_QWORD *)(a1 + 40) = v28;
    v29 = a1 + 40;
    v30 = *(_QWORD *)&v59[8];
    *(_QWORD *)(a1 + 48) = *(_QWORD *)&v59[8];
    if (v30)
    {
      *(_QWORD *)(v28 + 16) = v29;
      v58 = (__int128 *)v59;
      *(_OWORD *)v59 = 0uLL;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v29;
    }
    v31 = *(_OWORD *)&v59[16];
    *(_QWORD *)(a1 + 64) = *(_QWORD *)&v59[24];
    v32 = a1 + 64;
    *(_QWORD *)(a1 + 56) = v31;
    v33 = v60;
    *(_QWORD *)(a1 + 72) = v60;
    if (v33)
    {
      *(_QWORD *)(*((_QWORD *)&v31 + 1) + 16) = v32;
      *(_QWORD *)&v59[16] = &v59[24];
      *(_QWORD *)&v59[24] = 0;
      v60 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v32;
    }
    v34 = v61;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)&v61 + 1);
    v35 = a1 + 88;
    *(_QWORD *)(a1 + 80) = v34;
    v36 = v62;
    *(_QWORD *)(a1 + 96) = v62;
    if (v36)
    {
      *(_QWORD *)(*((_QWORD *)&v34 + 1) + 16) = v35;
      *(_QWORD *)&v61 = (char *)&v61 + 8;
      *((_QWORD *)&v61 + 1) = 0;
      v62 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 80) = v35;
    }
    v37 = v63;
    *(_BYTE *)(a1 + 120) = 0;
    *(std::runtime_error *)(a1 + 104) = v37;
    *(_BYTE *)(a1 + 272) = 0;
    if (v22)
    {
      *(_BYTE *)(a1 + 120) = 0;
      *(_BYTE *)(a1 + 144) = 0;
      if (v66[0])
      {
        *(std::runtime_error *)(a1 + 120) = v64;
        *(_QWORD *)(a1 + 136) = v65;
        v65 = 0;
        v64 = (std::runtime_error)0;
        *(_BYTE *)(a1 + 144) = 1;
      }
      *(_BYTE *)(a1 + 152) = 0;
      *(_BYTE *)(a1 + 176) = 0;
      if (v68)
      {
        *(_OWORD *)(a1 + 152) = *(_OWORD *)&v66[8];
        *(_QWORD *)(a1 + 168) = v67;
        *(_QWORD *)&v66[16] = 0;
        v67 = 0;
        *(_QWORD *)&v66[8] = 0;
        *(_BYTE *)(a1 + 176) = 1;
      }
      *(_BYTE *)(a1 + 184) = 0;
      *(_BYTE *)(a1 + 208) = 0;
      if (v71)
      {
        *(_OWORD *)(a1 + 184) = v69;
        *(_QWORD *)(a1 + 200) = v70;
        v70 = 0;
        v69 = 0uLL;
        *(_BYTE *)(a1 + 208) = 1;
      }
      *(_DWORD *)(a1 + 216) = v72;
      *(_QWORD *)(a1 + 224) = a1 + 224;
      *(_QWORD *)(a1 + 232) = a1 + 224;
      *(_QWORD *)(a1 + 240) = 0;
      if (v57 == (_BYTE *)a1)
LABEL_144:
        __break(1u);
      v38 = v75;
      if (v75)
      {
        v40 = v73;
        v39 = v74;
        v41 = *v74;
        *(_QWORD *)(v41 + 8) = v73->~runtime_error_0;
        *(_QWORD *)v40->~runtime_error_0 = v41;
        v42 = *(_QWORD *)(a1 + 224);
        *(_QWORD *)(v42 + 8) = v39;
        *v39 = v42;
        *(_QWORD *)(a1 + 224) = v40;
        v40->~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))(a1 + 224);
        *(_QWORD *)(a1 + 240) = v38;
        v75 = 0;
      }
      *(_OWORD *)(a1 + 248) = v76;
      *(_QWORD *)(a1 + 264) = v77;
      v77 = 0;
      v76 = 0uLL;
      *(_BYTE *)(a1 + 272) = 1;
      *(_BYTE *)(a1 + 280) = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v64);
    }
    else
    {
      *(_BYTE *)(a1 + 280) = 1;
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v61 + 1));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)&v59[24]);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)v59);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)v57, v84);
    *(std::runtime_error *)&v57[16] = v84[1];
    *(_QWORD *)v57 = off_1E2521330;
    v58 = v85;
    *(_OWORD *)v59 = v86;
    if (*((_QWORD *)&v86 + 1))
    {
      *(_QWORD *)(v86 + 16) = v59;
      v85 = &v86;
      v86 = 0uLL;
    }
    else
    {
      v58 = (__int128 *)v59;
    }
    *(_OWORD *)&v59[16] = v87;
    v87 = 0uLL;
    LOBYTE(v60) = 1;
    std::runtime_error::runtime_error(&v93, (const std::runtime_error *)v57);
    v94 = *(std::runtime_error *)&v57[16];
    v93.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v95 = v58;
    v96 = *(_OWORD *)v59;
    if (*(_QWORD *)&v59[8])
    {
      *(_QWORD *)(*(_QWORD *)v59 + 16) = &v96;
      v58 = (__int128 *)v59;
      *(_OWORD *)v59 = 0uLL;
    }
    else
    {
      v95 = &v96;
    }
    v97 = *(_OWORD *)&v59[16];
    *(_OWORD *)&v59[16] = 0uLL;
    std::runtime_error::runtime_error(&v99, &v93);
    v100 = v94;
    v50 = (unsigned int *)v96;
    v99.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v101 = v95;
    v102 = v96;
    if (*((_QWORD *)&v96 + 1))
    {
      *(_QWORD *)(v96 + 16) = &v102;
      v50 = 0;
      v95 = &v96;
      v96 = 0uLL;
    }
    else
    {
      v101 = &v102;
    }
    v103 = v97;
    v97 = 0uLL;
    v93.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v95, v50);
    MEMORY[0x18D7898AC](&v93);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v99);
    *(std::runtime_error *)(a1 + 16) = v100;
    *(_QWORD *)a1 = off_1E2521330;
    v51 = v102;
    *(_QWORD *)(a1 + 32) = v101;
    *(_QWORD *)(a1 + 40) = v51;
    v52 = a1 + 40;
    v53 = *((_QWORD *)&v102 + 1);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)&v102 + 1);
    if (v53)
    {
      *(_QWORD *)(v51 + 16) = v52;
      v51 = 0;
      v101 = &v102;
      v102 = 0uLL;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v52;
    }
    *(_OWORD *)(a1 + 56) = v103;
    v103 = 0uLL;
    *(_BYTE *)(a1 + 280) = 0;
    v99.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v101, (unsigned int *)v51);
    MEMORY[0x18D7898AC](&v99);
    if ((_BYTE)v60)
    {
      *(_QWORD *)v57 = off_1E2521330;
      v54 = *(std::__shared_weak_count **)&v59[24];
      if (*(_QWORD *)&v59[24])
      {
        v55 = (unint64_t *)(*(_QWORD *)&v59[24] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v58, *(unsigned int **)v59);
      MEMORY[0x18D7898AC](v57);
    }
  }
  if (v91)
  {
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v89 + 1));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v87 + 1));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v86);
    goto LABEL_138;
  }
  ((void (*)(std::runtime_error *))v84[0].~runtime_error)(v84);
  if (!v119)
    goto LABEL_142;
LABEL_139:
  if (v118)
    AMSCore::URL::~URL((AMSCore::URL *)&v105);
}

void sub_18CC9B18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void (**a54)(_QWORD))
{
  AMSCore::URL *v54;

  if (LOBYTE(STACK[0x200]))
    AMSCore::URL::~URL((AMSCore::URL *)&a54);
  else
    (*a54)(&a54);
  if (LOBYTE(STACK[0x250]))
  {
    if (!a30)
      goto LABEL_6;
  }
  else
  {
    (*(void (**)(unint64_t *))STACK[0x208])(&STACK[0x208]);
    if (!a30)
LABEL_6:
      _Unwind_Resume(a1);
  }
  AMSCore::URL::~URL(v54);
  _Unwind_Resume(a1);
}

uint64_t *AMSCore::MetricsEventModifier::`anonymous namespace'::merge(uint64_t *this, const AMSCore::MetricsEventModifier::EventModifierForFieldFilters *a2, AMSCore::MetricsEventModifier::EventModifierForFieldFilters *a3)
{
  uint64_t *v4;
  __int128 v5;
  const void **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  const void **v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;

  v4 = this;
  if (*((_BYTE *)this + 16))
  {
    v5 = *(_OWORD *)this;
    *((_BYTE *)a2 + 16) = *((_BYTE *)this + 16);
    *(_OWORD *)a2 = v5;
  }
  if (*((_BYTE *)this + 25))
    *((_WORD *)a2 + 12) = *((_WORD *)this + 12);
  if (*((_BYTE *)this + 27))
    *((_WORD *)a2 + 13) = *((_WORD *)this + 13);
  v6 = (const void **)this[4];
  v7 = this + 5;
  if (v6 != (const void **)(this + 5))
  {
    do
    {
      this = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)a2 + 4, (uint64_t)a2 + 40, v6 + 4, (uint64_t)(v6 + 4));
      v8 = (uint64_t *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = (const void **)v9;
        }
        while (!v10);
      }
      v6 = (const void **)v9;
    }
    while (v9 != v7);
  }
  v11 = (uint64_t *)v4[7];
  if (v11 != v4 + 8)
  {
    do
    {
      this = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)a2 + 7, (uint64_t)a2 + 64, (const void **)v11 + 4, (uint64_t)(v11 + 4));
      v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v11[2];
          v10 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v10);
      }
      v11 = v13;
    }
    while (v13 != v4 + 8);
  }
  v14 = (const void **)v4[10];
  v15 = v4 + 11;
  if (v14 != (const void **)(v4 + 11))
  {
    v16 = (uint64_t *)((char *)a2 + 80);
    v17 = (char *)a2 + 88;
    do
    {
      this = std::__tree<AMSCore::MetricsEventModifier::DeResFields>::__emplace_hint_unique_key_args<AMSCore::MetricsEventModifier::DeResFields,AMSCore::MetricsEventModifier::DeResFields const&>(v16, (uint64_t)v17, v14 + 4, (uint64_t)(v14 + 4));
      v18 = (uint64_t *)v14[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (uint64_t *)v14[2];
          v10 = *v19 == (_QWORD)v14;
          v14 = (const void **)v19;
        }
        while (!v10);
      }
      v14 = (const void **)v19;
    }
    while (v19 != v15);
  }
  return this;
}

void std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>(uint64_t a1, AMSCore::URL *a2)
{
  __int16 v4;
  void **v5;
  char v6;
  __int128 v7;
  char *v8;
  size_t v9;

  if (*(unsigned __int8 *)(a1 + 152) == *((unsigned __int8 *)a2 + 152))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>(a1, (std::string::value_type *)a2);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>(a1 + 32, (std::string::value_type *)a2 + 32);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>(a1 + 64, (std::string::value_type *)a2 + 64);
      v4 = *((_WORD *)a2 + 48);
      *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
      *(_WORD *)(a1 + 96) = v4;
      if ((AMSCore::URL *)a1 != a2)
      {
        std::list<std::pair<std::string,std::string>>::__assign_with_sentinel[abi:fe180100]<std::__list_const_iterator<std::pair<std::string,std::string>,void *>,std::__list_const_iterator<std::pair<std::string,std::string>,void *>>((char **)(a1 + 104), *((_QWORD *)a2 + 14), (uint64_t)a2 + 104);
        v5 = (void **)(a1 + 128);
        v6 = *((_BYTE *)a2 + 151);
        if (*(char *)(a1 + 151) < 0)
        {
          if (v6 >= 0)
            v8 = (char *)a2 + 128;
          else
            v8 = (char *)*((_QWORD *)a2 + 16);
          if (v6 >= 0)
            v9 = *((unsigned __int8 *)a2 + 151);
          else
            v9 = *((_QWORD *)a2 + 17);
          std::string::__assign_no_alias<false>(v5, v8, v9);
        }
        else if ((*((_BYTE *)a2 + 151) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v5, *((void **)a2 + 16), *((_QWORD *)a2 + 17));
        }
        else
        {
          v7 = *((_OWORD *)a2 + 8);
          *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
          *(_OWORD *)v5 = v7;
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 152))
  {
    AMSCore::URL::~URL((AMSCore::URL *)a1);
    *(_BYTE *)(a1 + 152) = 0;
  }
  else
  {
    AMSCore::URL::URL((std::string *)a1, a2);
    *(_BYTE *)(a1 + 152) = 1;
  }
}

uint64_t std::expected<AMSCore::MetricsEventModifier::EventModifier,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 280))
  {
    if (*(_BYTE *)(a1 + 272))
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 120));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 88));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 64));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 40));
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t *result, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  const void *v10;
  size_t v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void *v21;
  size_t v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  uint64_t *v27;
  uint64_t **v28;
  _QWORD *v29;
  const void *v30;
  const void *v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  BOOL v37;
  uint64_t **v38;
  uint64_t *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  int v48;
  uint64_t *v49;
  size_t v50;
  size_t v51;
  uint64_t *v52;
  _QWORD *v53;
  const void *v54;
  const void *v55;
  int v56;
  const void *v57;
  size_t v58;
  size_t v59;
  int v60;

  v7 = result;
  v8 = (uint64_t **)(result + 1);
  if (result + 1 == (uint64_t *)a2)
    goto LABEL_23;
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a3 + 23);
  else
    v11 = (size_t)a3[1];
  v12 = *(char *)(a2 + 55);
  if (v12 >= 0)
    v13 = (const void *)(a2 + 32);
  else
    v13 = *(const void **)(a2 + 32);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 55);
  else
    v14 = *(_QWORD *)(a2 + 40);
  if (v14 >= v11)
    v15 = v11;
  else
    v15 = v14;
  result = (uint64_t *)memcmp(v10, v13, v15);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_19;
LABEL_23:
    v16 = *(_QWORD *)a2;
    if (*v7 == a2)
    {
      v18 = a2;
    }
    else
    {
      if (v16)
      {
        v17 = *(_QWORD *)a2;
        do
        {
          v18 = v17;
          v17 = *(_QWORD *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        v19 = a2;
        do
        {
          v18 = *(_QWORD *)(v19 + 16);
          v37 = *(_QWORD *)v18 == v19;
          v19 = v18;
        }
        while (v37);
      }
      v20 = *(char *)(v18 + 55);
      if (v20 >= 0)
        v21 = (const void *)(v18 + 32);
      else
        v21 = *(const void **)(v18 + 32);
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v18 + 55);
      else
        v22 = *(_QWORD *)(v18 + 40);
      v23 = *((char *)a3 + 23);
      if (v23 >= 0)
        v24 = a3;
      else
        v24 = *a3;
      if (v23 >= 0)
        v25 = *((unsigned __int8 *)a3 + 23);
      else
        v25 = (size_t)a3[1];
      if (v25 >= v22)
        v26 = v22;
      else
        v26 = v25;
      result = (uint64_t *)memcmp(v21, v24, v26);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v22 >= v25)
      {
LABEL_48:
        v27 = *v8;
        if (!*v8)
          goto LABEL_49;
        while (1)
        {
          v28 = (uint64_t **)v27;
          v31 = (const void *)v27[4];
          v29 = v27 + 4;
          v30 = v31;
          v32 = *((char *)v29 + 23);
          if (v32 >= 0)
            v33 = v29;
          else
            v33 = v30;
          if (v32 >= 0)
            v34 = *((unsigned __int8 *)v29 + 23);
          else
            v34 = v29[1];
          if (v34 >= v25)
            v35 = v25;
          else
            v35 = v34;
          v36 = memcmp(v24, v33, v35);
          if (v36)
          {
            if (v36 < 0)
              goto LABEL_50;
LABEL_64:
            result = (uint64_t *)memcmp(v33, v24, v35);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_128;
            }
            else if (v34 >= v25)
            {
LABEL_128:
              v38 = v8;
              goto LABEL_77;
            }
            v8 = v28 + 1;
            v27 = v28[1];
            if (!v27)
              goto LABEL_78;
          }
          else
          {
            if (v25 >= v34)
              goto LABEL_64;
LABEL_50:
            v27 = *v28;
            v8 = v28;
            if (!*v28)
              goto LABEL_78;
          }
        }
      }
    }
    v37 = v16 == 0;
    if (v16)
      v28 = (uint64_t **)v18;
    else
      v28 = (uint64_t **)a2;
    if (v37)
      v38 = (uint64_t **)a2;
    else
      v38 = (uint64_t **)(v18 + 8);
LABEL_77:
    v8 = v38;
    if (*v38)
      return result;
    goto LABEL_78;
  }
  if (v11 < v14)
    goto LABEL_23;
LABEL_19:
  result = (uint64_t *)memcmp(v13, v10, v15);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v14 >= v11)
  {
    return result;
  }
  v38 = (uint64_t **)(a2 + 8);
  v42 = *(uint64_t **)(a2 + 8);
  if (v42)
  {
    do
    {
      v38 = (uint64_t **)v42;
      v42 = (uint64_t *)*v42;
      v28 = v38;
      v43 = v38;
    }
    while (v42);
    if (v38 == v8)
      goto LABEL_77;
  }
  else
  {
    v43 = (uint64_t **)a2;
    do
    {
      v44 = (uint64_t *)v43;
      v43 = (uint64_t **)v43[2];
    }
    while (*v43 != v44);
    v28 = (uint64_t **)a2;
    if (v43 == v8)
      goto LABEL_77;
  }
  v47 = v43[4];
  v45 = (uint64_t *)(v43 + 4);
  v46 = v47;
  v48 = *((char *)v45 + 23);
  if (v48 >= 0)
    v49 = v45;
  else
    v49 = v46;
  if (v48 >= 0)
    v50 = *((unsigned __int8 *)v45 + 23);
  else
    v50 = v45[1];
  if (v50 >= v11)
    v51 = v11;
  else
    v51 = v50;
  result = (uint64_t *)memcmp(v10, v49, v51);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_77;
  }
  else if (v11 < v50)
  {
    goto LABEL_77;
  }
  v52 = *v8;
  if (*v8)
  {
    while (1)
    {
      v28 = (uint64_t **)v52;
      v55 = (const void *)v52[4];
      v53 = v52 + 4;
      v54 = v55;
      v56 = *((char *)v53 + 23);
      if (v56 >= 0)
        v57 = v53;
      else
        v57 = v54;
      if (v56 >= 0)
        v58 = *((unsigned __int8 *)v53 + 23);
      else
        v58 = v53[1];
      if (v58 >= v11)
        v59 = v11;
      else
        v59 = v58;
      v60 = memcmp(v10, v57, v59);
      if (v60)
      {
        if (v60 < 0)
          goto LABEL_108;
LABEL_122:
        result = (uint64_t *)memcmp(v57, v10, v59);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            goto LABEL_128;
        }
        else if (v58 >= v11)
        {
          goto LABEL_128;
        }
        v8 = v28 + 1;
        v52 = v28[1];
        if (!v52)
          goto LABEL_78;
      }
      else
      {
        if (v11 >= v58)
          goto LABEL_122;
LABEL_108:
        v52 = *v28;
        v8 = v28;
        if (!*v28)
          goto LABEL_78;
      }
    }
  }
LABEL_49:
  v28 = v8;
LABEL_78:
  v39 = (uint64_t *)operator new(0x38uLL);
  v40 = (std::string *)(v39 + 4);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v39[6] = *(_QWORD *)(a4 + 16);
  }
  *v39 = 0;
  v39[1] = 0;
  v39[2] = (uint64_t)v28;
  *v8 = v39;
  v41 = *(_QWORD *)*v7;
  if (v41)
  {
    *v7 = v41;
    v39 = *v8;
  }
  result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v39);
  ++v7[2];
  return result;
}

void sub_18CC9B904(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<AMSCore::MetricsEventModifier::DeResFields>::__emplace_hint_unique_key_args<AMSCore::MetricsEventModifier::DeResFields,AMSCore::MetricsEventModifier::DeResFields const&>(uint64_t *result, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  const void *v10;
  size_t v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void *v21;
  size_t v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  const void *v30;
  const void *v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  BOOL v37;
  _QWORD *v38;
  char *v39;
  std::string *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  const void *v46;
  const void *v47;
  int v48;
  const void *v49;
  size_t v50;
  size_t v51;
  _QWORD *v52;
  _QWORD *v53;
  const void *v54;
  const void *v55;
  int v56;
  const void *v57;
  size_t v58;
  size_t v59;
  int v60;

  v7 = result;
  v8 = result + 1;
  if (result + 1 == (uint64_t *)a2)
    goto LABEL_23;
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a3 + 23);
  else
    v11 = (size_t)a3[1];
  v12 = *(char *)(a2 + 55);
  if (v12 >= 0)
    v13 = (const void *)(a2 + 32);
  else
    v13 = *(const void **)(a2 + 32);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 55);
  else
    v14 = *(_QWORD *)(a2 + 40);
  if (v14 >= v11)
    v15 = v11;
  else
    v15 = v14;
  result = (uint64_t *)memcmp(v10, v13, v15);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_19;
LABEL_23:
    v16 = *(_QWORD *)a2;
    if (*v7 == a2)
    {
      v18 = a2;
    }
    else
    {
      if (v16)
      {
        v17 = *(_QWORD *)a2;
        do
        {
          v18 = v17;
          v17 = *(_QWORD *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        v19 = a2;
        do
        {
          v18 = *(_QWORD *)(v19 + 16);
          v37 = *(_QWORD *)v18 == v19;
          v19 = v18;
        }
        while (v37);
      }
      v20 = *(char *)(v18 + 55);
      if (v20 >= 0)
        v21 = (const void *)(v18 + 32);
      else
        v21 = *(const void **)(v18 + 32);
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v18 + 55);
      else
        v22 = *(_QWORD *)(v18 + 40);
      v23 = *((char *)a3 + 23);
      if (v23 >= 0)
        v24 = a3;
      else
        v24 = *a3;
      if (v23 >= 0)
        v25 = *((unsigned __int8 *)a3 + 23);
      else
        v25 = (size_t)a3[1];
      if (v25 >= v22)
        v26 = v22;
      else
        v26 = v25;
      result = (uint64_t *)memcmp(v21, v24, v26);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v22 >= v25)
      {
LABEL_48:
        v27 = (_QWORD *)*v8;
        if (!*v8)
          goto LABEL_49;
        while (1)
        {
          v28 = v27;
          v31 = (const void *)v27[4];
          v29 = v27 + 4;
          v30 = v31;
          v32 = *((char *)v29 + 23);
          if (v32 >= 0)
            v33 = v29;
          else
            v33 = v30;
          if (v32 >= 0)
            v34 = *((unsigned __int8 *)v29 + 23);
          else
            v34 = v29[1];
          if (v34 >= v25)
            v35 = v25;
          else
            v35 = v34;
          v36 = memcmp(v24, v33, v35);
          if (v36)
          {
            if (v36 < 0)
              goto LABEL_50;
LABEL_64:
            result = (uint64_t *)memcmp(v33, v24, v35);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_128;
            }
            else if (v34 >= v25)
            {
LABEL_128:
              v38 = v8;
              goto LABEL_77;
            }
            v8 = v28 + 1;
            v27 = (_QWORD *)v28[1];
            if (!v27)
              goto LABEL_78;
          }
          else
          {
            if (v25 >= v34)
              goto LABEL_64;
LABEL_50:
            v27 = (_QWORD *)*v28;
            v8 = v28;
            if (!*v28)
              goto LABEL_78;
          }
        }
      }
    }
    v37 = v16 == 0;
    if (v16)
      v28 = (_QWORD *)v18;
    else
      v28 = (_QWORD *)a2;
    if (v37)
      v38 = (_QWORD *)a2;
    else
      v38 = (_QWORD *)(v18 + 8);
LABEL_77:
    v8 = v38;
    if (*v38)
      return result;
    goto LABEL_78;
  }
  if (v11 < v14)
    goto LABEL_23;
LABEL_19:
  result = (uint64_t *)memcmp(v13, v10, v15);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v14 >= v11)
  {
    return result;
  }
  v38 = (_QWORD *)(a2 + 8);
  v42 = *(_QWORD **)(a2 + 8);
  if (v42)
  {
    do
    {
      v38 = v42;
      v42 = (_QWORD *)*v42;
      v28 = v38;
      v43 = v38;
    }
    while (v42);
    if (v38 == v8)
      goto LABEL_77;
  }
  else
  {
    v43 = (_QWORD *)a2;
    do
    {
      v44 = v43;
      v43 = (_QWORD *)v43[2];
    }
    while ((_QWORD *)*v43 != v44);
    v28 = (_QWORD *)a2;
    if (v43 == v8)
      goto LABEL_77;
  }
  v47 = (const void *)v43[4];
  v45 = v43 + 4;
  v46 = v47;
  v48 = *((char *)v45 + 23);
  if (v48 >= 0)
    v49 = v45;
  else
    v49 = v46;
  if (v48 >= 0)
    v50 = *((unsigned __int8 *)v45 + 23);
  else
    v50 = v45[1];
  if (v50 >= v11)
    v51 = v11;
  else
    v51 = v50;
  result = (uint64_t *)memcmp(v10, v49, v51);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_77;
  }
  else if (v11 < v50)
  {
    goto LABEL_77;
  }
  v52 = (_QWORD *)*v8;
  if (*v8)
  {
    while (1)
    {
      v28 = v52;
      v55 = (const void *)v52[4];
      v53 = v52 + 4;
      v54 = v55;
      v56 = *((char *)v53 + 23);
      if (v56 >= 0)
        v57 = v53;
      else
        v57 = v54;
      if (v56 >= 0)
        v58 = *((unsigned __int8 *)v53 + 23);
      else
        v58 = v53[1];
      if (v58 >= v11)
        v59 = v11;
      else
        v59 = v58;
      v60 = memcmp(v10, v57, v59);
      if (v60)
      {
        if (v60 < 0)
          goto LABEL_108;
LABEL_122:
        result = (uint64_t *)memcmp(v57, v10, v59);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            goto LABEL_128;
        }
        else if (v58 >= v11)
        {
          goto LABEL_128;
        }
        v8 = v28 + 1;
        v52 = (_QWORD *)v28[1];
        if (!v52)
          goto LABEL_78;
      }
      else
      {
        if (v11 >= v58)
          goto LABEL_122;
LABEL_108:
        v52 = (_QWORD *)*v28;
        v8 = v28;
        if (!*v28)
          goto LABEL_78;
      }
    }
  }
LABEL_49:
  v28 = v8;
LABEL_78:
  v39 = (char *)operator new(0x48uLL);
  v40 = (std::string *)(v39 + 32);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *((_QWORD *)v39 + 6) = *(_QWORD *)(a4 + 16);
  }
  *(_OWORD *)(v39 + 56) = *(_OWORD *)(a4 + 24);
  *(_QWORD *)v39 = 0;
  *((_QWORD *)v39 + 1) = 0;
  *((_QWORD *)v39 + 2) = v28;
  *v8 = v39;
  v41 = *(_QWORD *)*v7;
  if (v41)
  {
    *v7 = v41;
    v39 = (char *)*v8;
  }
  result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], (uint64_t *)v39);
  ++v7[2];
  return result;
}

